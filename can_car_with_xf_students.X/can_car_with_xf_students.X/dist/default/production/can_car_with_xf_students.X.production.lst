

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Mar 04 15:38:56 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,space=0,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    94                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96   000000                     
    97                           ; Generated 23/03/2023 GMT
    98                           ; 
    99                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution. Publication is not required when
   113                           ;        this file is used in an embedded application.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F97J60 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131   000FE0                     bsr             equ	4064
   132   000FE9                     fsr0            equ	4073
   133   000FEA                     fsr0h           equ	4074
   134   000FE9                     fsr0l           equ	4073
   135   000FE1                     fsr1            equ	4065
   136   000FE2                     fsr1h           equ	4066
   137   000FE1                     fsr1l           equ	4065
   138   000FD9                     fsr2            equ	4057
   139   000FDA                     fsr2h           equ	4058
   140   000FD9                     fsr2l           equ	4057
   141   000FEF                     indf0           equ	4079
   142   000FE7                     indf1           equ	4071
   143   000FDF                     indf2           equ	4063
   144   000FF2                     intcon          equ	4082
   145   000000                     nvmcon          equ	0
   146   000FF9                     pcl             equ	4089
   147   000FFA                     pclath          equ	4090
   148   000FFB                     pclatu          equ	4091
   149   000FEB                     plusw0          equ	4075
   150   000FE3                     plusw1          equ	4067
   151   000FDB                     plusw2          equ	4059
   152   000FED                     postdec0        equ	4077
   153   000FE5                     postdec1        equ	4069
   154   000FDD                     postdec2        equ	4061
   155   000FEE                     postinc0        equ	4078
   156   000FE6                     postinc1        equ	4070
   157   000FDE                     postinc2        equ	4062
   158   000FEC                     preinc0         equ	4076
   159   000FE4                     preinc1         equ	4068
   160   000FDC                     preinc2         equ	4060
   161   000FF3                     prod            equ	4083
   162   000FF4                     prodh           equ	4084
   163   000FF3                     prodl           equ	4083
   164   000FD8                     status          equ	4056
   165   000FF5                     tablat          equ	4085
   166   000FF6                     tblptr          equ	4086
   167   000FF7                     tblptrh         equ	4087
   168   000FF6                     tblptrl         equ	4086
   169   000FF8                     tblptru         equ	4088
   170   000FFD                     tosl            equ	4093
   171   000FE8                     wreg            equ	4072
   172   000E80                     MAADR5          equ	3712	;# 
   173   000E81                     MAADR6          equ	3713	;# 
   174   000E82                     MAADR3          equ	3714	;# 
   175   000E83                     MAADR4          equ	3715	;# 
   176   000E84                     MAADR1          equ	3716	;# 
   177   000E85                     MAADR2          equ	3717	;# 
   178   000E8A                     MISTAT          equ	3722	;# 
   179   000E97                     EFLOCON         equ	3735	;# 
   180   000E98                     EPAUS           equ	3736	;# 
   181   000E98                     EPAUSL          equ	3736	;# 
   182   000E99                     EPAUSH          equ	3737	;# 
   183   000EA0                     MACON1          equ	3744	;# 
   184   000EA2                     MACON3          equ	3746	;# 
   185   000EA3                     MACON4          equ	3747	;# 
   186   000EA4                     MABBIPG         equ	3748	;# 
   187   000EA6                     MAIPG           equ	3750	;# 
   188   000EA6                     MAIPGL          equ	3750	;# 
   189   000EA7                     MAIPGH          equ	3751	;# 
   190   000EAA                     MAMXFL          equ	3754	;# 
   191   000EAA                     MAMXFLL         equ	3754	;# 
   192   000EAB                     MAMXFLH         equ	3755	;# 
   193   000EB2                     MICMD           equ	3762	;# 
   194   000EB4                     MIREGADR        equ	3764	;# 
   195   000EB6                     MIWR            equ	3766	;# 
   196   000EB6                     MIWRL           equ	3766	;# 
   197   000EB7                     MIWRH           equ	3767	;# 
   198   000EB8                     MIRD            equ	3768	;# 
   199   000EB8                     MIRDL           equ	3768	;# 
   200   000EB9                     MIRDH           equ	3769	;# 
   201   000EC0                     EHT0            equ	3776	;# 
   202   000EC1                     EHT1            equ	3777	;# 
   203   000EC2                     EHT2            equ	3778	;# 
   204   000EC3                     EHT3            equ	3779	;# 
   205   000EC4                     EHT4            equ	3780	;# 
   206   000EC5                     EHT5            equ	3781	;# 
   207   000EC6                     EHT6            equ	3782	;# 
   208   000EC7                     EHT7            equ	3783	;# 
   209   000EC8                     EPMM0           equ	3784	;# 
   210   000EC9                     EPMM1           equ	3785	;# 
   211   000ECA                     EPMM2           equ	3786	;# 
   212   000ECB                     EPMM3           equ	3787	;# 
   213   000ECC                     EPMM4           equ	3788	;# 
   214   000ECD                     EPMM5           equ	3789	;# 
   215   000ECE                     EPMM6           equ	3790	;# 
   216   000ECF                     EPMM7           equ	3791	;# 
   217   000ED0                     EPMCS           equ	3792	;# 
   218   000ED0                     EPMCSL          equ	3792	;# 
   219   000ED1                     EPMCSH          equ	3793	;# 
   220   000ED4                     EPMO            equ	3796	;# 
   221   000ED4                     EPMOL           equ	3796	;# 
   222   000ED5                     EPMOH           equ	3797	;# 
   223   000ED8                     ERXFCON         equ	3800	;# 
   224   000ED9                     EPKTCNT         equ	3801	;# 
   225   000EE2                     EWRPT           equ	3810	;# 
   226   000EE2                     EWRPTL          equ	3810	;# 
   227   000EE3                     EWRPTH          equ	3811	;# 
   228   000EE4                     ETXST           equ	3812	;# 
   229   000EE4                     ETXSTL          equ	3812	;# 
   230   000EE5                     ETXSTH          equ	3813	;# 
   231   000EE6                     ETXND           equ	3814	;# 
   232   000EE6                     ETXNDL          equ	3814	;# 
   233   000EE7                     ETXNDH          equ	3815	;# 
   234   000EE8                     ERXST           equ	3816	;# 
   235   000EE8                     ERXSTL          equ	3816	;# 
   236   000EE9                     ERXSTH          equ	3817	;# 
   237   000EEA                     ERXND           equ	3818	;# 
   238   000EEA                     ERXNDL          equ	3818	;# 
   239   000EEB                     ERXNDH          equ	3819	;# 
   240   000EEC                     ERXRDPT         equ	3820	;# 
   241   000EEC                     ERXRDPTL        equ	3820	;# 
   242   000EED                     ERXRDPTH        equ	3821	;# 
   243   000EEE                     ERXWRPT         equ	3822	;# 
   244   000EEE                     ERXWRPTL        equ	3822	;# 
   245   000EEF                     ERXWRPTH        equ	3823	;# 
   246   000EF0                     EDMAST          equ	3824	;# 
   247   000EF0                     EDMASTL         equ	3824	;# 
   248   000EF1                     EDMASTH         equ	3825	;# 
   249   000EF2                     EDMAND          equ	3826	;# 
   250   000EF2                     EDMANDL         equ	3826	;# 
   251   000EF3                     EDMANDH         equ	3827	;# 
   252   000EF4                     EDMADST         equ	3828	;# 
   253   000EF4                     EDMADSTL        equ	3828	;# 
   254   000EF5                     EDMADSTH        equ	3829	;# 
   255   000EF6                     EDMACS          equ	3830	;# 
   256   000EF6                     EDMACSL         equ	3830	;# 
   257   000EF7                     EDMACSH         equ	3831	;# 
   258   000EFB                     EIE             equ	3835	;# 
   259   000EFD                     ESTAT           equ	3837	;# 
   260   000EFE                     ECON2           equ	3838	;# 
   261   000F60                     EIR             equ	3936	;# 
   262   000F61                     EDATA           equ	3937	;# 
   263   000F62                     SSP2CON2        equ	3938	;# 
   264   000F63                     SSP2CON1        equ	3939	;# 
   265   000F64                     SSP2STAT        equ	3940	;# 
   266   000F65                     SSP2ADD         equ	3941	;# 
   267   000F66                     SSP2BUF         equ	3942	;# 
   268   000F67                     ECCP2DEL        equ	3943	;# 
   269   000F68                     ECCP2AS         equ	3944	;# 
   270   000F69                     ECCP3DEL        equ	3945	;# 
   271   000F6A                     ECCP3AS         equ	3946	;# 
   272   000F6B                     RCSTA2          equ	3947	;# 
   273   000F6C                     TXSTA2          equ	3948	;# 
   274   000F6D                     TXREG2          equ	3949	;# 
   275   000F6E                     RCREG2          equ	3950	;# 
   276   000F6F                     SPBRG2          equ	3951	;# 
   277   000F70                     CCP5CON         equ	3952	;# 
   278   000F71                     CCPR5           equ	3953	;# 
   279   000F71                     CCPR5L          equ	3953	;# 
   280   000F72                     CCPR5H          equ	3954	;# 
   281   000F73                     CCP4CON         equ	3955	;# 
   282   000F74                     CCPR4           equ	3956	;# 
   283   000F74                     CCPR4L          equ	3956	;# 
   284   000F75                     CCPR4H          equ	3957	;# 
   285   000F76                     T4CON           equ	3958	;# 
   286   000F77                     PR4             equ	3959	;# 
   287   000F78                     TMR4            equ	3960	;# 
   288   000F79                     ECCP1DEL        equ	3961	;# 
   289   000F7A                     ERDPT           equ	3962	;# 
   290   000F7A                     ERDPTL          equ	3962	;# 
   291   000F7B                     ERDPTH          equ	3963	;# 
   292   000F7C                     BAUDCON2        equ	3964	;# 
   293   000F7C                     BAUDCTL2        equ	3964	;# 
   294   000F7D                     SPBRGH2         equ	3965	;# 
   295   000F7E                     BAUDCON1        equ	3966	;# 
   296   000F7E                     BAUDCON         equ	3966	;# 
   297   000F7E                     BAUDCTL         equ	3966	;# 
   298   000F7E                     BAUDCTL1        equ	3966	;# 
   299   000F7F                     SPBRGH1         equ	3967	;# 
   300   000F7F                     SPBRGH          equ	3967	;# 
   301   000F80                     PORTA           equ	3968	;# 
   302   000F81                     PORTB           equ	3969	;# 
   303   000F82                     PORTC           equ	3970	;# 
   304   000F83                     PORTD           equ	3971	;# 
   305   000F84                     PORTE           equ	3972	;# 
   306   000F85                     PORTF           equ	3973	;# 
   307   000F86                     PORTG           equ	3974	;# 
   308   000F87                     PORTH           equ	3975	;# 
   309   000F88                     PORTJ           equ	3976	;# 
   310   000F89                     LATA            equ	3977	;# 
   311   000F8A                     LATB            equ	3978	;# 
   312   000F8B                     LATC            equ	3979	;# 
   313   000F8C                     LATD            equ	3980	;# 
   314   000F8D                     LATE            equ	3981	;# 
   315   000F8E                     LATF            equ	3982	;# 
   316   000F8F                     LATG            equ	3983	;# 
   317   000F90                     LATH            equ	3984	;# 
   318   000F91                     LATJ            equ	3985	;# 
   319   000F92                     TRISA           equ	3986	;# 
   320   000F92                     DDRA            equ	3986	;# 
   321   000F93                     TRISB           equ	3987	;# 
   322   000F93                     DDRB            equ	3987	;# 
   323   000F94                     TRISC           equ	3988	;# 
   324   000F94                     DDRC            equ	3988	;# 
   325   000F95                     TRISD           equ	3989	;# 
   326   000F95                     DDRD            equ	3989	;# 
   327   000F96                     TRISE           equ	3990	;# 
   328   000F96                     DDRE            equ	3990	;# 
   329   000F97                     TRISF           equ	3991	;# 
   330   000F97                     DDRF            equ	3991	;# 
   331   000F98                     TRISG           equ	3992	;# 
   332   000F98                     DDRG            equ	3992	;# 
   333   000F99                     TRISH           equ	3993	;# 
   334   000F99                     DDRH            equ	3993	;# 
   335   000F9A                     TRISJ           equ	3994	;# 
   336   000F9A                     DDRJ            equ	3994	;# 
   337   000F9B                     OSCTUNE         equ	3995	;# 
   338   000F9C                     MEMCON          equ	3996	;# 
   339   000F9D                     PIE1            equ	3997	;# 
   340   000F9E                     PIR1            equ	3998	;# 
   341   000F9F                     IPR1            equ	3999	;# 
   342   000FA0                     PIE2            equ	4000	;# 
   343   000FA1                     PIR2            equ	4001	;# 
   344   000FA2                     IPR2            equ	4002	;# 
   345   000FA3                     PIE3            equ	4003	;# 
   346   000FA4                     PIR3            equ	4004	;# 
   347   000FA5                     IPR3            equ	4005	;# 
   348   000FA6                     EECON1          equ	4006	;# 
   349   000FA7                     EECON2          equ	4007	;# 
   350   000FAB                     RCSTA1          equ	4011	;# 
   351   000FAB                     RCSTA           equ	4011	;# 
   352   000FAC                     TXSTA1          equ	4012	;# 
   353   000FAC                     TXSTA           equ	4012	;# 
   354   000FAD                     TXREG1          equ	4013	;# 
   355   000FAD                     TXREG           equ	4013	;# 
   356   000FAE                     RCREG1          equ	4014	;# 
   357   000FAE                     RCREG           equ	4014	;# 
   358   000FAF                     SPBRG1          equ	4015	;# 
   359   000FAF                     SPBRG           equ	4015	;# 
   360   000FB0                     PSPCON          equ	4016	;# 
   361   000FB1                     T3CON           equ	4017	;# 
   362   000FB2                     TMR3            equ	4018	;# 
   363   000FB2                     TMR3L           equ	4018	;# 
   364   000FB3                     TMR3H           equ	4019	;# 
   365   000FB4                     CMCON           equ	4020	;# 
   366   000FB5                     CVRCON          equ	4021	;# 
   367   000FB6                     ECCP1AS         equ	4022	;# 
   368   000FB7                     CCP3CON         equ	4023	;# 
   369   000FB7                     ECCP3CON        equ	4023	;# 
   370   000FB8                     CCPR3           equ	4024	;# 
   371   000FB8                     CCPR3L          equ	4024	;# 
   372   000FB9                     CCPR3H          equ	4025	;# 
   373   000FBA                     CCP2CON         equ	4026	;# 
   374   000FBA                     ECCP2CON        equ	4026	;# 
   375   000FBB                     CCPR2           equ	4027	;# 
   376   000FBB                     CCPR2L          equ	4027	;# 
   377   000FBC                     CCPR2H          equ	4028	;# 
   378   000FBD                     CCP1CON         equ	4029	;# 
   379   000FBD                     ECCP1CON        equ	4029	;# 
   380   000FBE                     CCPR1           equ	4030	;# 
   381   000FBE                     CCPR1L          equ	4030	;# 
   382   000FBF                     CCPR1H          equ	4031	;# 
   383   000FC0                     ADCON2          equ	4032	;# 
   384   000FC1                     ADCON1          equ	4033	;# 
   385   000FC2                     ADCON0          equ	4034	;# 
   386   000FC3                     ADRES           equ	4035	;# 
   387   000FC3                     ADRESL          equ	4035	;# 
   388   000FC4                     ADRESH          equ	4036	;# 
   389   000FC5                     SSP1CON2        equ	4037	;# 
   390   000FC5                     SSPCON2         equ	4037	;# 
   391   000FC6                     SSP1CON1        equ	4038	;# 
   392   000FC6                     SSPCON1         equ	4038	;# 
   393   000FC7                     SSP1STAT        equ	4039	;# 
   394   000FC7                     SSPSTAT         equ	4039	;# 
   395   000FC8                     SSP1ADD         equ	4040	;# 
   396   000FC8                     SSPADD          equ	4040	;# 
   397   000FC9                     SSP1BUF         equ	4041	;# 
   398   000FC9                     SSPBUF          equ	4041	;# 
   399   000FCA                     T2CON           equ	4042	;# 
   400   000FCB                     PR2             equ	4043	;# 
   401   000FCC                     TMR2            equ	4044	;# 
   402   000FCD                     T1CON           equ	4045	;# 
   403   000FCE                     TMR1            equ	4046	;# 
   404   000FCE                     TMR1L           equ	4046	;# 
   405   000FCF                     TMR1H           equ	4047	;# 
   406   000FD0                     RCON            equ	4048	;# 
   407   000FD1                     WDTCON          equ	4049	;# 
   408   000FD2                     ECON1           equ	4050	;# 
   409   000FD3                     OSCCON          equ	4051	;# 
   410   000FD5                     T0CON           equ	4053	;# 
   411   000FD6                     TMR0            equ	4054	;# 
   412   000FD6                     TMR0L           equ	4054	;# 
   413   000FD7                     TMR0H           equ	4055	;# 
   414   000FD8                     STATUS          equ	4056	;# 
   415   000FD9                     FSR2            equ	4057	;# 
   416   000FD9                     FSR2L           equ	4057	;# 
   417   000FDA                     FSR2H           equ	4058	;# 
   418   000FDB                     PLUSW2          equ	4059	;# 
   419   000FDC                     PREINC2         equ	4060	;# 
   420   000FDD                     POSTDEC2        equ	4061	;# 
   421   000FDE                     POSTINC2        equ	4062	;# 
   422   000FDF                     INDF2           equ	4063	;# 
   423   000FE0                     BSR             equ	4064	;# 
   424   000FE1                     FSR1            equ	4065	;# 
   425   000FE1                     FSR1L           equ	4065	;# 
   426   000FE2                     FSR1H           equ	4066	;# 
   427   000FE3                     PLUSW1          equ	4067	;# 
   428   000FE4                     PREINC1         equ	4068	;# 
   429   000FE5                     POSTDEC1        equ	4069	;# 
   430   000FE6                     POSTINC1        equ	4070	;# 
   431   000FE7                     INDF1           equ	4071	;# 
   432   000FE8                     WREG            equ	4072	;# 
   433   000FE9                     FSR0            equ	4073	;# 
   434   000FE9                     FSR0L           equ	4073	;# 
   435   000FEA                     FSR0H           equ	4074	;# 
   436   000FEB                     PLUSW0          equ	4075	;# 
   437   000FEC                     PREINC0         equ	4076	;# 
   438   000FED                     POSTDEC0        equ	4077	;# 
   439   000FEE                     POSTINC0        equ	4078	;# 
   440   000FEF                     INDF0           equ	4079	;# 
   441   000FF0                     INTCON3         equ	4080	;# 
   442   000FF1                     INTCON2         equ	4081	;# 
   443   000FF2                     INTCON          equ	4082	;# 
   444   000FF3                     PROD            equ	4083	;# 
   445   000FF3                     PRODL           equ	4083	;# 
   446   000FF4                     PRODH           equ	4084	;# 
   447   000FF5                     TABLAT          equ	4085	;# 
   448   000FF6                     TBLPTR          equ	4086	;# 
   449   000FF6                     TBLPTRL         equ	4086	;# 
   450   000FF7                     TBLPTRH         equ	4087	;# 
   451   000FF8                     TBLPTRU         equ	4088	;# 
   452   000FF9                     PCLAT           equ	4089	;# 
   453   000FF9                     PC              equ	4089	;# 
   454   000FF9                     PCL             equ	4089	;# 
   455   000FFA                     PCLATH          equ	4090	;# 
   456   000FFB                     PCLATU          equ	4091	;# 
   457   000FFC                     STKPTR          equ	4092	;# 
   458   000FFD                     TOS             equ	4093	;# 
   459   000FFD                     TOSL            equ	4093	;# 
   460   000FFE                     TOSH            equ	4094	;# 
   461   000FFF                     TOSU            equ	4095	;# 
   462   000E80                     MAADR5          equ	3712	;# 
   463   000E81                     MAADR6          equ	3713	;# 
   464   000E82                     MAADR3          equ	3714	;# 
   465   000E83                     MAADR4          equ	3715	;# 
   466   000E84                     MAADR1          equ	3716	;# 
   467   000E85                     MAADR2          equ	3717	;# 
   468   000E8A                     MISTAT          equ	3722	;# 
   469   000E97                     EFLOCON         equ	3735	;# 
   470   000E98                     EPAUS           equ	3736	;# 
   471   000E98                     EPAUSL          equ	3736	;# 
   472   000E99                     EPAUSH          equ	3737	;# 
   473   000EA0                     MACON1          equ	3744	;# 
   474   000EA2                     MACON3          equ	3746	;# 
   475   000EA3                     MACON4          equ	3747	;# 
   476   000EA4                     MABBIPG         equ	3748	;# 
   477   000EA6                     MAIPG           equ	3750	;# 
   478   000EA6                     MAIPGL          equ	3750	;# 
   479   000EA7                     MAIPGH          equ	3751	;# 
   480   000EAA                     MAMXFL          equ	3754	;# 
   481   000EAA                     MAMXFLL         equ	3754	;# 
   482   000EAB                     MAMXFLH         equ	3755	;# 
   483   000EB2                     MICMD           equ	3762	;# 
   484   000EB4                     MIREGADR        equ	3764	;# 
   485   000EB6                     MIWR            equ	3766	;# 
   486   000EB6                     MIWRL           equ	3766	;# 
   487   000EB7                     MIWRH           equ	3767	;# 
   488   000EB8                     MIRD            equ	3768	;# 
   489   000EB8                     MIRDL           equ	3768	;# 
   490   000EB9                     MIRDH           equ	3769	;# 
   491   000EC0                     EHT0            equ	3776	;# 
   492   000EC1                     EHT1            equ	3777	;# 
   493   000EC2                     EHT2            equ	3778	;# 
   494   000EC3                     EHT3            equ	3779	;# 
   495   000EC4                     EHT4            equ	3780	;# 
   496   000EC5                     EHT5            equ	3781	;# 
   497   000EC6                     EHT6            equ	3782	;# 
   498   000EC7                     EHT7            equ	3783	;# 
   499   000EC8                     EPMM0           equ	3784	;# 
   500   000EC9                     EPMM1           equ	3785	;# 
   501   000ECA                     EPMM2           equ	3786	;# 
   502   000ECB                     EPMM3           equ	3787	;# 
   503   000ECC                     EPMM4           equ	3788	;# 
   504   000ECD                     EPMM5           equ	3789	;# 
   505   000ECE                     EPMM6           equ	3790	;# 
   506   000ECF                     EPMM7           equ	3791	;# 
   507   000ED0                     EPMCS           equ	3792	;# 
   508   000ED0                     EPMCSL          equ	3792	;# 
   509   000ED1                     EPMCSH          equ	3793	;# 
   510   000ED4                     EPMO            equ	3796	;# 
   511   000ED4                     EPMOL           equ	3796	;# 
   512   000ED5                     EPMOH           equ	3797	;# 
   513   000ED8                     ERXFCON         equ	3800	;# 
   514   000ED9                     EPKTCNT         equ	3801	;# 
   515   000EE2                     EWRPT           equ	3810	;# 
   516   000EE2                     EWRPTL          equ	3810	;# 
   517   000EE3                     EWRPTH          equ	3811	;# 
   518   000EE4                     ETXST           equ	3812	;# 
   519   000EE4                     ETXSTL          equ	3812	;# 
   520   000EE5                     ETXSTH          equ	3813	;# 
   521   000EE6                     ETXND           equ	3814	;# 
   522   000EE6                     ETXNDL          equ	3814	;# 
   523   000EE7                     ETXNDH          equ	3815	;# 
   524   000EE8                     ERXST           equ	3816	;# 
   525   000EE8                     ERXSTL          equ	3816	;# 
   526   000EE9                     ERXSTH          equ	3817	;# 
   527   000EEA                     ERXND           equ	3818	;# 
   528   000EEA                     ERXNDL          equ	3818	;# 
   529   000EEB                     ERXNDH          equ	3819	;# 
   530   000EEC                     ERXRDPT         equ	3820	;# 
   531   000EEC                     ERXRDPTL        equ	3820	;# 
   532   000EED                     ERXRDPTH        equ	3821	;# 
   533   000EEE                     ERXWRPT         equ	3822	;# 
   534   000EEE                     ERXWRPTL        equ	3822	;# 
   535   000EEF                     ERXWRPTH        equ	3823	;# 
   536   000EF0                     EDMAST          equ	3824	;# 
   537   000EF0                     EDMASTL         equ	3824	;# 
   538   000EF1                     EDMASTH         equ	3825	;# 
   539   000EF2                     EDMAND          equ	3826	;# 
   540   000EF2                     EDMANDL         equ	3826	;# 
   541   000EF3                     EDMANDH         equ	3827	;# 
   542   000EF4                     EDMADST         equ	3828	;# 
   543   000EF4                     EDMADSTL        equ	3828	;# 
   544   000EF5                     EDMADSTH        equ	3829	;# 
   545   000EF6                     EDMACS          equ	3830	;# 
   546   000EF6                     EDMACSL         equ	3830	;# 
   547   000EF7                     EDMACSH         equ	3831	;# 
   548   000EFB                     EIE             equ	3835	;# 
   549   000EFD                     ESTAT           equ	3837	;# 
   550   000EFE                     ECON2           equ	3838	;# 
   551   000F60                     EIR             equ	3936	;# 
   552   000F61                     EDATA           equ	3937	;# 
   553   000F62                     SSP2CON2        equ	3938	;# 
   554   000F63                     SSP2CON1        equ	3939	;# 
   555   000F64                     SSP2STAT        equ	3940	;# 
   556   000F65                     SSP2ADD         equ	3941	;# 
   557   000F66                     SSP2BUF         equ	3942	;# 
   558   000F67                     ECCP2DEL        equ	3943	;# 
   559   000F68                     ECCP2AS         equ	3944	;# 
   560   000F69                     ECCP3DEL        equ	3945	;# 
   561   000F6A                     ECCP3AS         equ	3946	;# 
   562   000F6B                     RCSTA2          equ	3947	;# 
   563   000F6C                     TXSTA2          equ	3948	;# 
   564   000F6D                     TXREG2          equ	3949	;# 
   565   000F6E                     RCREG2          equ	3950	;# 
   566   000F6F                     SPBRG2          equ	3951	;# 
   567   000F70                     CCP5CON         equ	3952	;# 
   568   000F71                     CCPR5           equ	3953	;# 
   569   000F71                     CCPR5L          equ	3953	;# 
   570   000F72                     CCPR5H          equ	3954	;# 
   571   000F73                     CCP4CON         equ	3955	;# 
   572   000F74                     CCPR4           equ	3956	;# 
   573   000F74                     CCPR4L          equ	3956	;# 
   574   000F75                     CCPR4H          equ	3957	;# 
   575   000F76                     T4CON           equ	3958	;# 
   576   000F77                     PR4             equ	3959	;# 
   577   000F78                     TMR4            equ	3960	;# 
   578   000F79                     ECCP1DEL        equ	3961	;# 
   579   000F7A                     ERDPT           equ	3962	;# 
   580   000F7A                     ERDPTL          equ	3962	;# 
   581   000F7B                     ERDPTH          equ	3963	;# 
   582   000F7C                     BAUDCON2        equ	3964	;# 
   583   000F7C                     BAUDCTL2        equ	3964	;# 
   584   000F7D                     SPBRGH2         equ	3965	;# 
   585   000F7E                     BAUDCON1        equ	3966	;# 
   586   000F7E                     BAUDCON         equ	3966	;# 
   587   000F7E                     BAUDCTL         equ	3966	;# 
   588   000F7E                     BAUDCTL1        equ	3966	;# 
   589   000F7F                     SPBRGH1         equ	3967	;# 
   590   000F7F                     SPBRGH          equ	3967	;# 
   591   000F80                     PORTA           equ	3968	;# 
   592   000F81                     PORTB           equ	3969	;# 
   593   000F82                     PORTC           equ	3970	;# 
   594   000F83                     PORTD           equ	3971	;# 
   595   000F84                     PORTE           equ	3972	;# 
   596   000F85                     PORTF           equ	3973	;# 
   597   000F86                     PORTG           equ	3974	;# 
   598   000F87                     PORTH           equ	3975	;# 
   599   000F88                     PORTJ           equ	3976	;# 
   600   000F89                     LATA            equ	3977	;# 
   601   000F8A                     LATB            equ	3978	;# 
   602   000F8B                     LATC            equ	3979	;# 
   603   000F8C                     LATD            equ	3980	;# 
   604   000F8D                     LATE            equ	3981	;# 
   605   000F8E                     LATF            equ	3982	;# 
   606   000F8F                     LATG            equ	3983	;# 
   607   000F90                     LATH            equ	3984	;# 
   608   000F91                     LATJ            equ	3985	;# 
   609   000F92                     TRISA           equ	3986	;# 
   610   000F92                     DDRA            equ	3986	;# 
   611   000F93                     TRISB           equ	3987	;# 
   612   000F93                     DDRB            equ	3987	;# 
   613   000F94                     TRISC           equ	3988	;# 
   614   000F94                     DDRC            equ	3988	;# 
   615   000F95                     TRISD           equ	3989	;# 
   616   000F95                     DDRD            equ	3989	;# 
   617   000F96                     TRISE           equ	3990	;# 
   618   000F96                     DDRE            equ	3990	;# 
   619   000F97                     TRISF           equ	3991	;# 
   620   000F97                     DDRF            equ	3991	;# 
   621   000F98                     TRISG           equ	3992	;# 
   622   000F98                     DDRG            equ	3992	;# 
   623   000F99                     TRISH           equ	3993	;# 
   624   000F99                     DDRH            equ	3993	;# 
   625   000F9A                     TRISJ           equ	3994	;# 
   626   000F9A                     DDRJ            equ	3994	;# 
   627   000F9B                     OSCTUNE         equ	3995	;# 
   628   000F9C                     MEMCON          equ	3996	;# 
   629   000F9D                     PIE1            equ	3997	;# 
   630   000F9E                     PIR1            equ	3998	;# 
   631   000F9F                     IPR1            equ	3999	;# 
   632   000FA0                     PIE2            equ	4000	;# 
   633   000FA1                     PIR2            equ	4001	;# 
   634   000FA2                     IPR2            equ	4002	;# 
   635   000FA3                     PIE3            equ	4003	;# 
   636   000FA4                     PIR3            equ	4004	;# 
   637   000FA5                     IPR3            equ	4005	;# 
   638   000FA6                     EECON1          equ	4006	;# 
   639   000FA7                     EECON2          equ	4007	;# 
   640   000FAB                     RCSTA1          equ	4011	;# 
   641   000FAB                     RCSTA           equ	4011	;# 
   642   000FAC                     TXSTA1          equ	4012	;# 
   643   000FAC                     TXSTA           equ	4012	;# 
   644   000FAD                     TXREG1          equ	4013	;# 
   645   000FAD                     TXREG           equ	4013	;# 
   646   000FAE                     RCREG1          equ	4014	;# 
   647   000FAE                     RCREG           equ	4014	;# 
   648   000FAF                     SPBRG1          equ	4015	;# 
   649   000FAF                     SPBRG           equ	4015	;# 
   650   000FB0                     PSPCON          equ	4016	;# 
   651   000FB1                     T3CON           equ	4017	;# 
   652   000FB2                     TMR3            equ	4018	;# 
   653   000FB2                     TMR3L           equ	4018	;# 
   654   000FB3                     TMR3H           equ	4019	;# 
   655   000FB4                     CMCON           equ	4020	;# 
   656   000FB5                     CVRCON          equ	4021	;# 
   657   000FB6                     ECCP1AS         equ	4022	;# 
   658   000FB7                     CCP3CON         equ	4023	;# 
   659   000FB7                     ECCP3CON        equ	4023	;# 
   660   000FB8                     CCPR3           equ	4024	;# 
   661   000FB8                     CCPR3L          equ	4024	;# 
   662   000FB9                     CCPR3H          equ	4025	;# 
   663   000FBA                     CCP2CON         equ	4026	;# 
   664   000FBA                     ECCP2CON        equ	4026	;# 
   665   000FBB                     CCPR2           equ	4027	;# 
   666   000FBB                     CCPR2L          equ	4027	;# 
   667   000FBC                     CCPR2H          equ	4028	;# 
   668   000FBD                     CCP1CON         equ	4029	;# 
   669   000FBD                     ECCP1CON        equ	4029	;# 
   670   000FBE                     CCPR1           equ	4030	;# 
   671   000FBE                     CCPR1L          equ	4030	;# 
   672   000FBF                     CCPR1H          equ	4031	;# 
   673   000FC0                     ADCON2          equ	4032	;# 
   674   000FC1                     ADCON1          equ	4033	;# 
   675   000FC2                     ADCON0          equ	4034	;# 
   676   000FC3                     ADRES           equ	4035	;# 
   677   000FC3                     ADRESL          equ	4035	;# 
   678   000FC4                     ADRESH          equ	4036	;# 
   679   000FC5                     SSP1CON2        equ	4037	;# 
   680   000FC5                     SSPCON2         equ	4037	;# 
   681   000FC6                     SSP1CON1        equ	4038	;# 
   682   000FC6                     SSPCON1         equ	4038	;# 
   683   000FC7                     SSP1STAT        equ	4039	;# 
   684   000FC7                     SSPSTAT         equ	4039	;# 
   685   000FC8                     SSP1ADD         equ	4040	;# 
   686   000FC8                     SSPADD          equ	4040	;# 
   687   000FC9                     SSP1BUF         equ	4041	;# 
   688   000FC9                     SSPBUF          equ	4041	;# 
   689   000FCA                     T2CON           equ	4042	;# 
   690   000FCB                     PR2             equ	4043	;# 
   691   000FCC                     TMR2            equ	4044	;# 
   692   000FCD                     T1CON           equ	4045	;# 
   693   000FCE                     TMR1            equ	4046	;# 
   694   000FCE                     TMR1L           equ	4046	;# 
   695   000FCF                     TMR1H           equ	4047	;# 
   696   000FD0                     RCON            equ	4048	;# 
   697   000FD1                     WDTCON          equ	4049	;# 
   698   000FD2                     ECON1           equ	4050	;# 
   699   000FD3                     OSCCON          equ	4051	;# 
   700   000FD5                     T0CON           equ	4053	;# 
   701   000FD6                     TMR0            equ	4054	;# 
   702   000FD6                     TMR0L           equ	4054	;# 
   703   000FD7                     TMR0H           equ	4055	;# 
   704   000FD8                     STATUS          equ	4056	;# 
   705   000FD9                     FSR2            equ	4057	;# 
   706   000FD9                     FSR2L           equ	4057	;# 
   707   000FDA                     FSR2H           equ	4058	;# 
   708   000FDB                     PLUSW2          equ	4059	;# 
   709   000FDC                     PREINC2         equ	4060	;# 
   710   000FDD                     POSTDEC2        equ	4061	;# 
   711   000FDE                     POSTINC2        equ	4062	;# 
   712   000FDF                     INDF2           equ	4063	;# 
   713   000FE0                     BSR             equ	4064	;# 
   714   000FE1                     FSR1            equ	4065	;# 
   715   000FE1                     FSR1L           equ	4065	;# 
   716   000FE2                     FSR1H           equ	4066	;# 
   717   000FE3                     PLUSW1          equ	4067	;# 
   718   000FE4                     PREINC1         equ	4068	;# 
   719   000FE5                     POSTDEC1        equ	4069	;# 
   720   000FE6                     POSTINC1        equ	4070	;# 
   721   000FE7                     INDF1           equ	4071	;# 
   722   000FE8                     WREG            equ	4072	;# 
   723   000FE9                     FSR0            equ	4073	;# 
   724   000FE9                     FSR0L           equ	4073	;# 
   725   000FEA                     FSR0H           equ	4074	;# 
   726   000FEB                     PLUSW0          equ	4075	;# 
   727   000FEC                     PREINC0         equ	4076	;# 
   728   000FED                     POSTDEC0        equ	4077	;# 
   729   000FEE                     POSTINC0        equ	4078	;# 
   730   000FEF                     INDF0           equ	4079	;# 
   731   000FF0                     INTCON3         equ	4080	;# 
   732   000FF1                     INTCON2         equ	4081	;# 
   733   000FF2                     INTCON          equ	4082	;# 
   734   000FF3                     PROD            equ	4083	;# 
   735   000FF3                     PRODL           equ	4083	;# 
   736   000FF4                     PRODH           equ	4084	;# 
   737   000FF5                     TABLAT          equ	4085	;# 
   738   000FF6                     TBLPTR          equ	4086	;# 
   739   000FF6                     TBLPTRL         equ	4086	;# 
   740   000FF7                     TBLPTRH         equ	4087	;# 
   741   000FF8                     TBLPTRU         equ	4088	;# 
   742   000FF9                     PCLAT           equ	4089	;# 
   743   000FF9                     PC              equ	4089	;# 
   744   000FF9                     PCL             equ	4089	;# 
   745   000FFA                     PCLATH          equ	4090	;# 
   746   000FFB                     PCLATU          equ	4091	;# 
   747   000FFC                     STKPTR          equ	4092	;# 
   748   000FFD                     TOS             equ	4093	;# 
   749   000FFD                     TOSL            equ	4093	;# 
   750   000FFE                     TOSH            equ	4094	;# 
   751   000FFF                     TOSU            equ	4095	;# 
   752   000E80                     MAADR5          equ	3712	;# 
   753   000E81                     MAADR6          equ	3713	;# 
   754   000E82                     MAADR3          equ	3714	;# 
   755   000E83                     MAADR4          equ	3715	;# 
   756   000E84                     MAADR1          equ	3716	;# 
   757   000E85                     MAADR2          equ	3717	;# 
   758   000E8A                     MISTAT          equ	3722	;# 
   759   000E97                     EFLOCON         equ	3735	;# 
   760   000E98                     EPAUS           equ	3736	;# 
   761   000E98                     EPAUSL          equ	3736	;# 
   762   000E99                     EPAUSH          equ	3737	;# 
   763   000EA0                     MACON1          equ	3744	;# 
   764   000EA2                     MACON3          equ	3746	;# 
   765   000EA3                     MACON4          equ	3747	;# 
   766   000EA4                     MABBIPG         equ	3748	;# 
   767   000EA6                     MAIPG           equ	3750	;# 
   768   000EA6                     MAIPGL          equ	3750	;# 
   769   000EA7                     MAIPGH          equ	3751	;# 
   770   000EAA                     MAMXFL          equ	3754	;# 
   771   000EAA                     MAMXFLL         equ	3754	;# 
   772   000EAB                     MAMXFLH         equ	3755	;# 
   773   000EB2                     MICMD           equ	3762	;# 
   774   000EB4                     MIREGADR        equ	3764	;# 
   775   000EB6                     MIWR            equ	3766	;# 
   776   000EB6                     MIWRL           equ	3766	;# 
   777   000EB7                     MIWRH           equ	3767	;# 
   778   000EB8                     MIRD            equ	3768	;# 
   779   000EB8                     MIRDL           equ	3768	;# 
   780   000EB9                     MIRDH           equ	3769	;# 
   781   000EC0                     EHT0            equ	3776	;# 
   782   000EC1                     EHT1            equ	3777	;# 
   783   000EC2                     EHT2            equ	3778	;# 
   784   000EC3                     EHT3            equ	3779	;# 
   785   000EC4                     EHT4            equ	3780	;# 
   786   000EC5                     EHT5            equ	3781	;# 
   787   000EC6                     EHT6            equ	3782	;# 
   788   000EC7                     EHT7            equ	3783	;# 
   789   000EC8                     EPMM0           equ	3784	;# 
   790   000EC9                     EPMM1           equ	3785	;# 
   791   000ECA                     EPMM2           equ	3786	;# 
   792   000ECB                     EPMM3           equ	3787	;# 
   793   000ECC                     EPMM4           equ	3788	;# 
   794   000ECD                     EPMM5           equ	3789	;# 
   795   000ECE                     EPMM6           equ	3790	;# 
   796   000ECF                     EPMM7           equ	3791	;# 
   797   000ED0                     EPMCS           equ	3792	;# 
   798   000ED0                     EPMCSL          equ	3792	;# 
   799   000ED1                     EPMCSH          equ	3793	;# 
   800   000ED4                     EPMO            equ	3796	;# 
   801   000ED4                     EPMOL           equ	3796	;# 
   802   000ED5                     EPMOH           equ	3797	;# 
   803   000ED8                     ERXFCON         equ	3800	;# 
   804   000ED9                     EPKTCNT         equ	3801	;# 
   805   000EE2                     EWRPT           equ	3810	;# 
   806   000EE2                     EWRPTL          equ	3810	;# 
   807   000EE3                     EWRPTH          equ	3811	;# 
   808   000EE4                     ETXST           equ	3812	;# 
   809   000EE4                     ETXSTL          equ	3812	;# 
   810   000EE5                     ETXSTH          equ	3813	;# 
   811   000EE6                     ETXND           equ	3814	;# 
   812   000EE6                     ETXNDL          equ	3814	;# 
   813   000EE7                     ETXNDH          equ	3815	;# 
   814   000EE8                     ERXST           equ	3816	;# 
   815   000EE8                     ERXSTL          equ	3816	;# 
   816   000EE9                     ERXSTH          equ	3817	;# 
   817   000EEA                     ERXND           equ	3818	;# 
   818   000EEA                     ERXNDL          equ	3818	;# 
   819   000EEB                     ERXNDH          equ	3819	;# 
   820   000EEC                     ERXRDPT         equ	3820	;# 
   821   000EEC                     ERXRDPTL        equ	3820	;# 
   822   000EED                     ERXRDPTH        equ	3821	;# 
   823   000EEE                     ERXWRPT         equ	3822	;# 
   824   000EEE                     ERXWRPTL        equ	3822	;# 
   825   000EEF                     ERXWRPTH        equ	3823	;# 
   826   000EF0                     EDMAST          equ	3824	;# 
   827   000EF0                     EDMASTL         equ	3824	;# 
   828   000EF1                     EDMASTH         equ	3825	;# 
   829   000EF2                     EDMAND          equ	3826	;# 
   830   000EF2                     EDMANDL         equ	3826	;# 
   831   000EF3                     EDMANDH         equ	3827	;# 
   832   000EF4                     EDMADST         equ	3828	;# 
   833   000EF4                     EDMADSTL        equ	3828	;# 
   834   000EF5                     EDMADSTH        equ	3829	;# 
   835   000EF6                     EDMACS          equ	3830	;# 
   836   000EF6                     EDMACSL         equ	3830	;# 
   837   000EF7                     EDMACSH         equ	3831	;# 
   838   000EFB                     EIE             equ	3835	;# 
   839   000EFD                     ESTAT           equ	3837	;# 
   840   000EFE                     ECON2           equ	3838	;# 
   841   000F60                     EIR             equ	3936	;# 
   842   000F61                     EDATA           equ	3937	;# 
   843   000F62                     SSP2CON2        equ	3938	;# 
   844   000F63                     SSP2CON1        equ	3939	;# 
   845   000F64                     SSP2STAT        equ	3940	;# 
   846   000F65                     SSP2ADD         equ	3941	;# 
   847   000F66                     SSP2BUF         equ	3942	;# 
   848   000F67                     ECCP2DEL        equ	3943	;# 
   849   000F68                     ECCP2AS         equ	3944	;# 
   850   000F69                     ECCP3DEL        equ	3945	;# 
   851   000F6A                     ECCP3AS         equ	3946	;# 
   852   000F6B                     RCSTA2          equ	3947	;# 
   853   000F6C                     TXSTA2          equ	3948	;# 
   854   000F6D                     TXREG2          equ	3949	;# 
   855   000F6E                     RCREG2          equ	3950	;# 
   856   000F6F                     SPBRG2          equ	3951	;# 
   857   000F70                     CCP5CON         equ	3952	;# 
   858   000F71                     CCPR5           equ	3953	;# 
   859   000F71                     CCPR5L          equ	3953	;# 
   860   000F72                     CCPR5H          equ	3954	;# 
   861   000F73                     CCP4CON         equ	3955	;# 
   862   000F74                     CCPR4           equ	3956	;# 
   863   000F74                     CCPR4L          equ	3956	;# 
   864   000F75                     CCPR4H          equ	3957	;# 
   865   000F76                     T4CON           equ	3958	;# 
   866   000F77                     PR4             equ	3959	;# 
   867   000F78                     TMR4            equ	3960	;# 
   868   000F79                     ECCP1DEL        equ	3961	;# 
   869   000F7A                     ERDPT           equ	3962	;# 
   870   000F7A                     ERDPTL          equ	3962	;# 
   871   000F7B                     ERDPTH          equ	3963	;# 
   872   000F7C                     BAUDCON2        equ	3964	;# 
   873   000F7C                     BAUDCTL2        equ	3964	;# 
   874   000F7D                     SPBRGH2         equ	3965	;# 
   875   000F7E                     BAUDCON1        equ	3966	;# 
   876   000F7E                     BAUDCON         equ	3966	;# 
   877   000F7E                     BAUDCTL         equ	3966	;# 
   878   000F7E                     BAUDCTL1        equ	3966	;# 
   879   000F7F                     SPBRGH1         equ	3967	;# 
   880   000F7F                     SPBRGH          equ	3967	;# 
   881   000F80                     PORTA           equ	3968	;# 
   882   000F81                     PORTB           equ	3969	;# 
   883   000F82                     PORTC           equ	3970	;# 
   884   000F83                     PORTD           equ	3971	;# 
   885   000F84                     PORTE           equ	3972	;# 
   886   000F85                     PORTF           equ	3973	;# 
   887   000F86                     PORTG           equ	3974	;# 
   888   000F87                     PORTH           equ	3975	;# 
   889   000F88                     PORTJ           equ	3976	;# 
   890   000F89                     LATA            equ	3977	;# 
   891   000F8A                     LATB            equ	3978	;# 
   892   000F8B                     LATC            equ	3979	;# 
   893   000F8C                     LATD            equ	3980	;# 
   894   000F8D                     LATE            equ	3981	;# 
   895   000F8E                     LATF            equ	3982	;# 
   896   000F8F                     LATG            equ	3983	;# 
   897   000F90                     LATH            equ	3984	;# 
   898   000F91                     LATJ            equ	3985	;# 
   899   000F92                     TRISA           equ	3986	;# 
   900   000F92                     DDRA            equ	3986	;# 
   901   000F93                     TRISB           equ	3987	;# 
   902   000F93                     DDRB            equ	3987	;# 
   903   000F94                     TRISC           equ	3988	;# 
   904   000F94                     DDRC            equ	3988	;# 
   905   000F95                     TRISD           equ	3989	;# 
   906   000F95                     DDRD            equ	3989	;# 
   907   000F96                     TRISE           equ	3990	;# 
   908   000F96                     DDRE            equ	3990	;# 
   909   000F97                     TRISF           equ	3991	;# 
   910   000F97                     DDRF            equ	3991	;# 
   911   000F98                     TRISG           equ	3992	;# 
   912   000F98                     DDRG            equ	3992	;# 
   913   000F99                     TRISH           equ	3993	;# 
   914   000F99                     DDRH            equ	3993	;# 
   915   000F9A                     TRISJ           equ	3994	;# 
   916   000F9A                     DDRJ            equ	3994	;# 
   917   000F9B                     OSCTUNE         equ	3995	;# 
   918   000F9C                     MEMCON          equ	3996	;# 
   919   000F9D                     PIE1            equ	3997	;# 
   920   000F9E                     PIR1            equ	3998	;# 
   921   000F9F                     IPR1            equ	3999	;# 
   922   000FA0                     PIE2            equ	4000	;# 
   923   000FA1                     PIR2            equ	4001	;# 
   924   000FA2                     IPR2            equ	4002	;# 
   925   000FA3                     PIE3            equ	4003	;# 
   926   000FA4                     PIR3            equ	4004	;# 
   927   000FA5                     IPR3            equ	4005	;# 
   928   000FA6                     EECON1          equ	4006	;# 
   929   000FA7                     EECON2          equ	4007	;# 
   930   000FAB                     RCSTA1          equ	4011	;# 
   931   000FAB                     RCSTA           equ	4011	;# 
   932   000FAC                     TXSTA1          equ	4012	;# 
   933   000FAC                     TXSTA           equ	4012	;# 
   934   000FAD                     TXREG1          equ	4013	;# 
   935   000FAD                     TXREG           equ	4013	;# 
   936   000FAE                     RCREG1          equ	4014	;# 
   937   000FAE                     RCREG           equ	4014	;# 
   938   000FAF                     SPBRG1          equ	4015	;# 
   939   000FAF                     SPBRG           equ	4015	;# 
   940   000FB0                     PSPCON          equ	4016	;# 
   941   000FB1                     T3CON           equ	4017	;# 
   942   000FB2                     TMR3            equ	4018	;# 
   943   000FB2                     TMR3L           equ	4018	;# 
   944   000FB3                     TMR3H           equ	4019	;# 
   945   000FB4                     CMCON           equ	4020	;# 
   946   000FB5                     CVRCON          equ	4021	;# 
   947   000FB6                     ECCP1AS         equ	4022	;# 
   948   000FB7                     CCP3CON         equ	4023	;# 
   949   000FB7                     ECCP3CON        equ	4023	;# 
   950   000FB8                     CCPR3           equ	4024	;# 
   951   000FB8                     CCPR3L          equ	4024	;# 
   952   000FB9                     CCPR3H          equ	4025	;# 
   953   000FBA                     CCP2CON         equ	4026	;# 
   954   000FBA                     ECCP2CON        equ	4026	;# 
   955   000FBB                     CCPR2           equ	4027	;# 
   956   000FBB                     CCPR2L          equ	4027	;# 
   957   000FBC                     CCPR2H          equ	4028	;# 
   958   000FBD                     CCP1CON         equ	4029	;# 
   959   000FBD                     ECCP1CON        equ	4029	;# 
   960   000FBE                     CCPR1           equ	4030	;# 
   961   000FBE                     CCPR1L          equ	4030	;# 
   962   000FBF                     CCPR1H          equ	4031	;# 
   963   000FC0                     ADCON2          equ	4032	;# 
   964   000FC1                     ADCON1          equ	4033	;# 
   965   000FC2                     ADCON0          equ	4034	;# 
   966   000FC3                     ADRES           equ	4035	;# 
   967   000FC3                     ADRESL          equ	4035	;# 
   968   000FC4                     ADRESH          equ	4036	;# 
   969   000FC5                     SSP1CON2        equ	4037	;# 
   970   000FC5                     SSPCON2         equ	4037	;# 
   971   000FC6                     SSP1CON1        equ	4038	;# 
   972   000FC6                     SSPCON1         equ	4038	;# 
   973   000FC7                     SSP1STAT        equ	4039	;# 
   974   000FC7                     SSPSTAT         equ	4039	;# 
   975   000FC8                     SSP1ADD         equ	4040	;# 
   976   000FC8                     SSPADD          equ	4040	;# 
   977   000FC9                     SSP1BUF         equ	4041	;# 
   978   000FC9                     SSPBUF          equ	4041	;# 
   979   000FCA                     T2CON           equ	4042	;# 
   980   000FCB                     PR2             equ	4043	;# 
   981   000FCC                     TMR2            equ	4044	;# 
   982   000FCD                     T1CON           equ	4045	;# 
   983   000FCE                     TMR1            equ	4046	;# 
   984   000FCE                     TMR1L           equ	4046	;# 
   985   000FCF                     TMR1H           equ	4047	;# 
   986   000FD0                     RCON            equ	4048	;# 
   987   000FD1                     WDTCON          equ	4049	;# 
   988   000FD2                     ECON1           equ	4050	;# 
   989   000FD3                     OSCCON          equ	4051	;# 
   990   000FD5                     T0CON           equ	4053	;# 
   991   000FD6                     TMR0            equ	4054	;# 
   992   000FD6                     TMR0L           equ	4054	;# 
   993   000FD7                     TMR0H           equ	4055	;# 
   994   000FD8                     STATUS          equ	4056	;# 
   995   000FD9                     FSR2            equ	4057	;# 
   996   000FD9                     FSR2L           equ	4057	;# 
   997   000FDA                     FSR2H           equ	4058	;# 
   998   000FDB                     PLUSW2          equ	4059	;# 
   999   000FDC                     PREINC2         equ	4060	;# 
  1000   000FDD                     POSTDEC2        equ	4061	;# 
  1001   000FDE                     POSTINC2        equ	4062	;# 
  1002   000FDF                     INDF2           equ	4063	;# 
  1003   000FE0                     BSR             equ	4064	;# 
  1004   000FE1                     FSR1            equ	4065	;# 
  1005   000FE1                     FSR1L           equ	4065	;# 
  1006   000FE2                     FSR1H           equ	4066	;# 
  1007   000FE3                     PLUSW1          equ	4067	;# 
  1008   000FE4                     PREINC1         equ	4068	;# 
  1009   000FE5                     POSTDEC1        equ	4069	;# 
  1010   000FE6                     POSTINC1        equ	4070	;# 
  1011   000FE7                     INDF1           equ	4071	;# 
  1012   000FE8                     WREG            equ	4072	;# 
  1013   000FE9                     FSR0            equ	4073	;# 
  1014   000FE9                     FSR0L           equ	4073	;# 
  1015   000FEA                     FSR0H           equ	4074	;# 
  1016   000FEB                     PLUSW0          equ	4075	;# 
  1017   000FEC                     PREINC0         equ	4076	;# 
  1018   000FED                     POSTDEC0        equ	4077	;# 
  1019   000FEE                     POSTINC0        equ	4078	;# 
  1020   000FEF                     INDF0           equ	4079	;# 
  1021   000FF0                     INTCON3         equ	4080	;# 
  1022   000FF1                     INTCON2         equ	4081	;# 
  1023   000FF2                     INTCON          equ	4082	;# 
  1024   000FF3                     PROD            equ	4083	;# 
  1025   000FF3                     PRODL           equ	4083	;# 
  1026   000FF4                     PRODH           equ	4084	;# 
  1027   000FF5                     TABLAT          equ	4085	;# 
  1028   000FF6                     TBLPTR          equ	4086	;# 
  1029   000FF6                     TBLPTRL         equ	4086	;# 
  1030   000FF7                     TBLPTRH         equ	4087	;# 
  1031   000FF8                     TBLPTRU         equ	4088	;# 
  1032   000FF9                     PCLAT           equ	4089	;# 
  1033   000FF9                     PC              equ	4089	;# 
  1034   000FF9                     PCL             equ	4089	;# 
  1035   000FFA                     PCLATH          equ	4090	;# 
  1036   000FFB                     PCLATU          equ	4091	;# 
  1037   000FFC                     STKPTR          equ	4092	;# 
  1038   000FFD                     TOS             equ	4093	;# 
  1039   000FFD                     TOSL            equ	4093	;# 
  1040   000FFE                     TOSH            equ	4094	;# 
  1041   000FFF                     TOSU            equ	4095	;# 
  1042   000E80                     MAADR5          equ	3712	;# 
  1043   000E81                     MAADR6          equ	3713	;# 
  1044   000E82                     MAADR3          equ	3714	;# 
  1045   000E83                     MAADR4          equ	3715	;# 
  1046   000E84                     MAADR1          equ	3716	;# 
  1047   000E85                     MAADR2          equ	3717	;# 
  1048   000E8A                     MISTAT          equ	3722	;# 
  1049   000E97                     EFLOCON         equ	3735	;# 
  1050   000E98                     EPAUS           equ	3736	;# 
  1051   000E98                     EPAUSL          equ	3736	;# 
  1052   000E99                     EPAUSH          equ	3737	;# 
  1053   000EA0                     MACON1          equ	3744	;# 
  1054   000EA2                     MACON3          equ	3746	;# 
  1055   000EA3                     MACON4          equ	3747	;# 
  1056   000EA4                     MABBIPG         equ	3748	;# 
  1057   000EA6                     MAIPG           equ	3750	;# 
  1058   000EA6                     MAIPGL          equ	3750	;# 
  1059   000EA7                     MAIPGH          equ	3751	;# 
  1060   000EAA                     MAMXFL          equ	3754	;# 
  1061   000EAA                     MAMXFLL         equ	3754	;# 
  1062   000EAB                     MAMXFLH         equ	3755	;# 
  1063   000EB2                     MICMD           equ	3762	;# 
  1064   000EB4                     MIREGADR        equ	3764	;# 
  1065   000EB6                     MIWR            equ	3766	;# 
  1066   000EB6                     MIWRL           equ	3766	;# 
  1067   000EB7                     MIWRH           equ	3767	;# 
  1068   000EB8                     MIRD            equ	3768	;# 
  1069   000EB8                     MIRDL           equ	3768	;# 
  1070   000EB9                     MIRDH           equ	3769	;# 
  1071   000EC0                     EHT0            equ	3776	;# 
  1072   000EC1                     EHT1            equ	3777	;# 
  1073   000EC2                     EHT2            equ	3778	;# 
  1074   000EC3                     EHT3            equ	3779	;# 
  1075   000EC4                     EHT4            equ	3780	;# 
  1076   000EC5                     EHT5            equ	3781	;# 
  1077   000EC6                     EHT6            equ	3782	;# 
  1078   000EC7                     EHT7            equ	3783	;# 
  1079   000EC8                     EPMM0           equ	3784	;# 
  1080   000EC9                     EPMM1           equ	3785	;# 
  1081   000ECA                     EPMM2           equ	3786	;# 
  1082   000ECB                     EPMM3           equ	3787	;# 
  1083   000ECC                     EPMM4           equ	3788	;# 
  1084   000ECD                     EPMM5           equ	3789	;# 
  1085   000ECE                     EPMM6           equ	3790	;# 
  1086   000ECF                     EPMM7           equ	3791	;# 
  1087   000ED0                     EPMCS           equ	3792	;# 
  1088   000ED0                     EPMCSL          equ	3792	;# 
  1089   000ED1                     EPMCSH          equ	3793	;# 
  1090   000ED4                     EPMO            equ	3796	;# 
  1091   000ED4                     EPMOL           equ	3796	;# 
  1092   000ED5                     EPMOH           equ	3797	;# 
  1093   000ED8                     ERXFCON         equ	3800	;# 
  1094   000ED9                     EPKTCNT         equ	3801	;# 
  1095   000EE2                     EWRPT           equ	3810	;# 
  1096   000EE2                     EWRPTL          equ	3810	;# 
  1097   000EE3                     EWRPTH          equ	3811	;# 
  1098   000EE4                     ETXST           equ	3812	;# 
  1099   000EE4                     ETXSTL          equ	3812	;# 
  1100   000EE5                     ETXSTH          equ	3813	;# 
  1101   000EE6                     ETXND           equ	3814	;# 
  1102   000EE6                     ETXNDL          equ	3814	;# 
  1103   000EE7                     ETXNDH          equ	3815	;# 
  1104   000EE8                     ERXST           equ	3816	;# 
  1105   000EE8                     ERXSTL          equ	3816	;# 
  1106   000EE9                     ERXSTH          equ	3817	;# 
  1107   000EEA                     ERXND           equ	3818	;# 
  1108   000EEA                     ERXNDL          equ	3818	;# 
  1109   000EEB                     ERXNDH          equ	3819	;# 
  1110   000EEC                     ERXRDPT         equ	3820	;# 
  1111   000EEC                     ERXRDPTL        equ	3820	;# 
  1112   000EED                     ERXRDPTH        equ	3821	;# 
  1113   000EEE                     ERXWRPT         equ	3822	;# 
  1114   000EEE                     ERXWRPTL        equ	3822	;# 
  1115   000EEF                     ERXWRPTH        equ	3823	;# 
  1116   000EF0                     EDMAST          equ	3824	;# 
  1117   000EF0                     EDMASTL         equ	3824	;# 
  1118   000EF1                     EDMASTH         equ	3825	;# 
  1119   000EF2                     EDMAND          equ	3826	;# 
  1120   000EF2                     EDMANDL         equ	3826	;# 
  1121   000EF3                     EDMANDH         equ	3827	;# 
  1122   000EF4                     EDMADST         equ	3828	;# 
  1123   000EF4                     EDMADSTL        equ	3828	;# 
  1124   000EF5                     EDMADSTH        equ	3829	;# 
  1125   000EF6                     EDMACS          equ	3830	;# 
  1126   000EF6                     EDMACSL         equ	3830	;# 
  1127   000EF7                     EDMACSH         equ	3831	;# 
  1128   000EFB                     EIE             equ	3835	;# 
  1129   000EFD                     ESTAT           equ	3837	;# 
  1130   000EFE                     ECON2           equ	3838	;# 
  1131   000F60                     EIR             equ	3936	;# 
  1132   000F61                     EDATA           equ	3937	;# 
  1133   000F62                     SSP2CON2        equ	3938	;# 
  1134   000F63                     SSP2CON1        equ	3939	;# 
  1135   000F64                     SSP2STAT        equ	3940	;# 
  1136   000F65                     SSP2ADD         equ	3941	;# 
  1137   000F66                     SSP2BUF         equ	3942	;# 
  1138   000F67                     ECCP2DEL        equ	3943	;# 
  1139   000F68                     ECCP2AS         equ	3944	;# 
  1140   000F69                     ECCP3DEL        equ	3945	;# 
  1141   000F6A                     ECCP3AS         equ	3946	;# 
  1142   000F6B                     RCSTA2          equ	3947	;# 
  1143   000F6C                     TXSTA2          equ	3948	;# 
  1144   000F6D                     TXREG2          equ	3949	;# 
  1145   000F6E                     RCREG2          equ	3950	;# 
  1146   000F6F                     SPBRG2          equ	3951	;# 
  1147   000F70                     CCP5CON         equ	3952	;# 
  1148   000F71                     CCPR5           equ	3953	;# 
  1149   000F71                     CCPR5L          equ	3953	;# 
  1150   000F72                     CCPR5H          equ	3954	;# 
  1151   000F73                     CCP4CON         equ	3955	;# 
  1152   000F74                     CCPR4           equ	3956	;# 
  1153   000F74                     CCPR4L          equ	3956	;# 
  1154   000F75                     CCPR4H          equ	3957	;# 
  1155   000F76                     T4CON           equ	3958	;# 
  1156   000F77                     PR4             equ	3959	;# 
  1157   000F78                     TMR4            equ	3960	;# 
  1158   000F79                     ECCP1DEL        equ	3961	;# 
  1159   000F7A                     ERDPT           equ	3962	;# 
  1160   000F7A                     ERDPTL          equ	3962	;# 
  1161   000F7B                     ERDPTH          equ	3963	;# 
  1162   000F7C                     BAUDCON2        equ	3964	;# 
  1163   000F7C                     BAUDCTL2        equ	3964	;# 
  1164   000F7D                     SPBRGH2         equ	3965	;# 
  1165   000F7E                     BAUDCON1        equ	3966	;# 
  1166   000F7E                     BAUDCON         equ	3966	;# 
  1167   000F7E                     BAUDCTL         equ	3966	;# 
  1168   000F7E                     BAUDCTL1        equ	3966	;# 
  1169   000F7F                     SPBRGH1         equ	3967	;# 
  1170   000F7F                     SPBRGH          equ	3967	;# 
  1171   000F80                     PORTA           equ	3968	;# 
  1172   000F81                     PORTB           equ	3969	;# 
  1173   000F82                     PORTC           equ	3970	;# 
  1174   000F83                     PORTD           equ	3971	;# 
  1175   000F84                     PORTE           equ	3972	;# 
  1176   000F85                     PORTF           equ	3973	;# 
  1177   000F86                     PORTG           equ	3974	;# 
  1178   000F87                     PORTH           equ	3975	;# 
  1179   000F88                     PORTJ           equ	3976	;# 
  1180   000F89                     LATA            equ	3977	;# 
  1181   000F8A                     LATB            equ	3978	;# 
  1182   000F8B                     LATC            equ	3979	;# 
  1183   000F8C                     LATD            equ	3980	;# 
  1184   000F8D                     LATE            equ	3981	;# 
  1185   000F8E                     LATF            equ	3982	;# 
  1186   000F8F                     LATG            equ	3983	;# 
  1187   000F90                     LATH            equ	3984	;# 
  1188   000F91                     LATJ            equ	3985	;# 
  1189   000F92                     TRISA           equ	3986	;# 
  1190   000F92                     DDRA            equ	3986	;# 
  1191   000F93                     TRISB           equ	3987	;# 
  1192   000F93                     DDRB            equ	3987	;# 
  1193   000F94                     TRISC           equ	3988	;# 
  1194   000F94                     DDRC            equ	3988	;# 
  1195   000F95                     TRISD           equ	3989	;# 
  1196   000F95                     DDRD            equ	3989	;# 
  1197   000F96                     TRISE           equ	3990	;# 
  1198   000F96                     DDRE            equ	3990	;# 
  1199   000F97                     TRISF           equ	3991	;# 
  1200   000F97                     DDRF            equ	3991	;# 
  1201   000F98                     TRISG           equ	3992	;# 
  1202   000F98                     DDRG            equ	3992	;# 
  1203   000F99                     TRISH           equ	3993	;# 
  1204   000F99                     DDRH            equ	3993	;# 
  1205   000F9A                     TRISJ           equ	3994	;# 
  1206   000F9A                     DDRJ            equ	3994	;# 
  1207   000F9B                     OSCTUNE         equ	3995	;# 
  1208   000F9C                     MEMCON          equ	3996	;# 
  1209   000F9D                     PIE1            equ	3997	;# 
  1210   000F9E                     PIR1            equ	3998	;# 
  1211   000F9F                     IPR1            equ	3999	;# 
  1212   000FA0                     PIE2            equ	4000	;# 
  1213   000FA1                     PIR2            equ	4001	;# 
  1214   000FA2                     IPR2            equ	4002	;# 
  1215   000FA3                     PIE3            equ	4003	;# 
  1216   000FA4                     PIR3            equ	4004	;# 
  1217   000FA5                     IPR3            equ	4005	;# 
  1218   000FA6                     EECON1          equ	4006	;# 
  1219   000FA7                     EECON2          equ	4007	;# 
  1220   000FAB                     RCSTA1          equ	4011	;# 
  1221   000FAB                     RCSTA           equ	4011	;# 
  1222   000FAC                     TXSTA1          equ	4012	;# 
  1223   000FAC                     TXSTA           equ	4012	;# 
  1224   000FAD                     TXREG1          equ	4013	;# 
  1225   000FAD                     TXREG           equ	4013	;# 
  1226   000FAE                     RCREG1          equ	4014	;# 
  1227   000FAE                     RCREG           equ	4014	;# 
  1228   000FAF                     SPBRG1          equ	4015	;# 
  1229   000FAF                     SPBRG           equ	4015	;# 
  1230   000FB0                     PSPCON          equ	4016	;# 
  1231   000FB1                     T3CON           equ	4017	;# 
  1232   000FB2                     TMR3            equ	4018	;# 
  1233   000FB2                     TMR3L           equ	4018	;# 
  1234   000FB3                     TMR3H           equ	4019	;# 
  1235   000FB4                     CMCON           equ	4020	;# 
  1236   000FB5                     CVRCON          equ	4021	;# 
  1237   000FB6                     ECCP1AS         equ	4022	;# 
  1238   000FB7                     CCP3CON         equ	4023	;# 
  1239   000FB7                     ECCP3CON        equ	4023	;# 
  1240   000FB8                     CCPR3           equ	4024	;# 
  1241   000FB8                     CCPR3L          equ	4024	;# 
  1242   000FB9                     CCPR3H          equ	4025	;# 
  1243   000FBA                     CCP2CON         equ	4026	;# 
  1244   000FBA                     ECCP2CON        equ	4026	;# 
  1245   000FBB                     CCPR2           equ	4027	;# 
  1246   000FBB                     CCPR2L          equ	4027	;# 
  1247   000FBC                     CCPR2H          equ	4028	;# 
  1248   000FBD                     CCP1CON         equ	4029	;# 
  1249   000FBD                     ECCP1CON        equ	4029	;# 
  1250   000FBE                     CCPR1           equ	4030	;# 
  1251   000FBE                     CCPR1L          equ	4030	;# 
  1252   000FBF                     CCPR1H          equ	4031	;# 
  1253   000FC0                     ADCON2          equ	4032	;# 
  1254   000FC1                     ADCON1          equ	4033	;# 
  1255   000FC2                     ADCON0          equ	4034	;# 
  1256   000FC3                     ADRES           equ	4035	;# 
  1257   000FC3                     ADRESL          equ	4035	;# 
  1258   000FC4                     ADRESH          equ	4036	;# 
  1259   000FC5                     SSP1CON2        equ	4037	;# 
  1260   000FC5                     SSPCON2         equ	4037	;# 
  1261   000FC6                     SSP1CON1        equ	4038	;# 
  1262   000FC6                     SSPCON1         equ	4038	;# 
  1263   000FC7                     SSP1STAT        equ	4039	;# 
  1264   000FC7                     SSPSTAT         equ	4039	;# 
  1265   000FC8                     SSP1ADD         equ	4040	;# 
  1266   000FC8                     SSPADD          equ	4040	;# 
  1267   000FC9                     SSP1BUF         equ	4041	;# 
  1268   000FC9                     SSPBUF          equ	4041	;# 
  1269   000FCA                     T2CON           equ	4042	;# 
  1270   000FCB                     PR2             equ	4043	;# 
  1271   000FCC                     TMR2            equ	4044	;# 
  1272   000FCD                     T1CON           equ	4045	;# 
  1273   000FCE                     TMR1            equ	4046	;# 
  1274   000FCE                     TMR1L           equ	4046	;# 
  1275   000FCF                     TMR1H           equ	4047	;# 
  1276   000FD0                     RCON            equ	4048	;# 
  1277   000FD1                     WDTCON          equ	4049	;# 
  1278   000FD2                     ECON1           equ	4050	;# 
  1279   000FD3                     OSCCON          equ	4051	;# 
  1280   000FD5                     T0CON           equ	4053	;# 
  1281   000FD6                     TMR0            equ	4054	;# 
  1282   000FD6                     TMR0L           equ	4054	;# 
  1283   000FD7                     TMR0H           equ	4055	;# 
  1284   000FD8                     STATUS          equ	4056	;# 
  1285   000FD9                     FSR2            equ	4057	;# 
  1286   000FD9                     FSR2L           equ	4057	;# 
  1287   000FDA                     FSR2H           equ	4058	;# 
  1288   000FDB                     PLUSW2          equ	4059	;# 
  1289   000FDC                     PREINC2         equ	4060	;# 
  1290   000FDD                     POSTDEC2        equ	4061	;# 
  1291   000FDE                     POSTINC2        equ	4062	;# 
  1292   000FDF                     INDF2           equ	4063	;# 
  1293   000FE0                     BSR             equ	4064	;# 
  1294   000FE1                     FSR1            equ	4065	;# 
  1295   000FE1                     FSR1L           equ	4065	;# 
  1296   000FE2                     FSR1H           equ	4066	;# 
  1297   000FE3                     PLUSW1          equ	4067	;# 
  1298   000FE4                     PREINC1         equ	4068	;# 
  1299   000FE5                     POSTDEC1        equ	4069	;# 
  1300   000FE6                     POSTINC1        equ	4070	;# 
  1301   000FE7                     INDF1           equ	4071	;# 
  1302   000FE8                     WREG            equ	4072	;# 
  1303   000FE9                     FSR0            equ	4073	;# 
  1304   000FE9                     FSR0L           equ	4073	;# 
  1305   000FEA                     FSR0H           equ	4074	;# 
  1306   000FEB                     PLUSW0          equ	4075	;# 
  1307   000FEC                     PREINC0         equ	4076	;# 
  1308   000FED                     POSTDEC0        equ	4077	;# 
  1309   000FEE                     POSTINC0        equ	4078	;# 
  1310   000FEF                     INDF0           equ	4079	;# 
  1311   000FF0                     INTCON3         equ	4080	;# 
  1312   000FF1                     INTCON2         equ	4081	;# 
  1313   000FF2                     INTCON          equ	4082	;# 
  1314   000FF3                     PROD            equ	4083	;# 
  1315   000FF3                     PRODL           equ	4083	;# 
  1316   000FF4                     PRODH           equ	4084	;# 
  1317   000FF5                     TABLAT          equ	4085	;# 
  1318   000FF6                     TBLPTR          equ	4086	;# 
  1319   000FF6                     TBLPTRL         equ	4086	;# 
  1320   000FF7                     TBLPTRH         equ	4087	;# 
  1321   000FF8                     TBLPTRU         equ	4088	;# 
  1322   000FF9                     PCLAT           equ	4089	;# 
  1323   000FF9                     PC              equ	4089	;# 
  1324   000FF9                     PCL             equ	4089	;# 
  1325   000FFA                     PCLATH          equ	4090	;# 
  1326   000FFB                     PCLATU          equ	4091	;# 
  1327   000FFC                     STKPTR          equ	4092	;# 
  1328   000FFD                     TOS             equ	4093	;# 
  1329   000FFD                     TOSL            equ	4093	;# 
  1330   000FFE                     TOSH            equ	4094	;# 
  1331   000FFF                     TOSU            equ	4095	;# 
  1332   000E80                     MAADR5          equ	3712	;# 
  1333   000E81                     MAADR6          equ	3713	;# 
  1334   000E82                     MAADR3          equ	3714	;# 
  1335   000E83                     MAADR4          equ	3715	;# 
  1336   000E84                     MAADR1          equ	3716	;# 
  1337   000E85                     MAADR2          equ	3717	;# 
  1338   000E8A                     MISTAT          equ	3722	;# 
  1339   000E97                     EFLOCON         equ	3735	;# 
  1340   000E98                     EPAUS           equ	3736	;# 
  1341   000E98                     EPAUSL          equ	3736	;# 
  1342   000E99                     EPAUSH          equ	3737	;# 
  1343   000EA0                     MACON1          equ	3744	;# 
  1344   000EA2                     MACON3          equ	3746	;# 
  1345   000EA3                     MACON4          equ	3747	;# 
  1346   000EA4                     MABBIPG         equ	3748	;# 
  1347   000EA6                     MAIPG           equ	3750	;# 
  1348   000EA6                     MAIPGL          equ	3750	;# 
  1349   000EA7                     MAIPGH          equ	3751	;# 
  1350   000EAA                     MAMXFL          equ	3754	;# 
  1351   000EAA                     MAMXFLL         equ	3754	;# 
  1352   000EAB                     MAMXFLH         equ	3755	;# 
  1353   000EB2                     MICMD           equ	3762	;# 
  1354   000EB4                     MIREGADR        equ	3764	;# 
  1355   000EB6                     MIWR            equ	3766	;# 
  1356   000EB6                     MIWRL           equ	3766	;# 
  1357   000EB7                     MIWRH           equ	3767	;# 
  1358   000EB8                     MIRD            equ	3768	;# 
  1359   000EB8                     MIRDL           equ	3768	;# 
  1360   000EB9                     MIRDH           equ	3769	;# 
  1361   000EC0                     EHT0            equ	3776	;# 
  1362   000EC1                     EHT1            equ	3777	;# 
  1363   000EC2                     EHT2            equ	3778	;# 
  1364   000EC3                     EHT3            equ	3779	;# 
  1365   000EC4                     EHT4            equ	3780	;# 
  1366   000EC5                     EHT5            equ	3781	;# 
  1367   000EC6                     EHT6            equ	3782	;# 
  1368   000EC7                     EHT7            equ	3783	;# 
  1369   000EC8                     EPMM0           equ	3784	;# 
  1370   000EC9                     EPMM1           equ	3785	;# 
  1371   000ECA                     EPMM2           equ	3786	;# 
  1372   000ECB                     EPMM3           equ	3787	;# 
  1373   000ECC                     EPMM4           equ	3788	;# 
  1374   000ECD                     EPMM5           equ	3789	;# 
  1375   000ECE                     EPMM6           equ	3790	;# 
  1376   000ECF                     EPMM7           equ	3791	;# 
  1377   000ED0                     EPMCS           equ	3792	;# 
  1378   000ED0                     EPMCSL          equ	3792	;# 
  1379   000ED1                     EPMCSH          equ	3793	;# 
  1380   000ED4                     EPMO            equ	3796	;# 
  1381   000ED4                     EPMOL           equ	3796	;# 
  1382   000ED5                     EPMOH           equ	3797	;# 
  1383   000ED8                     ERXFCON         equ	3800	;# 
  1384   000ED9                     EPKTCNT         equ	3801	;# 
  1385   000EE2                     EWRPT           equ	3810	;# 
  1386   000EE2                     EWRPTL          equ	3810	;# 
  1387   000EE3                     EWRPTH          equ	3811	;# 
  1388   000EE4                     ETXST           equ	3812	;# 
  1389   000EE4                     ETXSTL          equ	3812	;# 
  1390   000EE5                     ETXSTH          equ	3813	;# 
  1391   000EE6                     ETXND           equ	3814	;# 
  1392   000EE6                     ETXNDL          equ	3814	;# 
  1393   000EE7                     ETXNDH          equ	3815	;# 
  1394   000EE8                     ERXST           equ	3816	;# 
  1395   000EE8                     ERXSTL          equ	3816	;# 
  1396   000EE9                     ERXSTH          equ	3817	;# 
  1397   000EEA                     ERXND           equ	3818	;# 
  1398   000EEA                     ERXNDL          equ	3818	;# 
  1399   000EEB                     ERXNDH          equ	3819	;# 
  1400   000EEC                     ERXRDPT         equ	3820	;# 
  1401   000EEC                     ERXRDPTL        equ	3820	;# 
  1402   000EED                     ERXRDPTH        equ	3821	;# 
  1403   000EEE                     ERXWRPT         equ	3822	;# 
  1404   000EEE                     ERXWRPTL        equ	3822	;# 
  1405   000EEF                     ERXWRPTH        equ	3823	;# 
  1406   000EF0                     EDMAST          equ	3824	;# 
  1407   000EF0                     EDMASTL         equ	3824	;# 
  1408   000EF1                     EDMASTH         equ	3825	;# 
  1409   000EF2                     EDMAND          equ	3826	;# 
  1410   000EF2                     EDMANDL         equ	3826	;# 
  1411   000EF3                     EDMANDH         equ	3827	;# 
  1412   000EF4                     EDMADST         equ	3828	;# 
  1413   000EF4                     EDMADSTL        equ	3828	;# 
  1414   000EF5                     EDMADSTH        equ	3829	;# 
  1415   000EF6                     EDMACS          equ	3830	;# 
  1416   000EF6                     EDMACSL         equ	3830	;# 
  1417   000EF7                     EDMACSH         equ	3831	;# 
  1418   000EFB                     EIE             equ	3835	;# 
  1419   000EFD                     ESTAT           equ	3837	;# 
  1420   000EFE                     ECON2           equ	3838	;# 
  1421   000F60                     EIR             equ	3936	;# 
  1422   000F61                     EDATA           equ	3937	;# 
  1423   000F62                     SSP2CON2        equ	3938	;# 
  1424   000F63                     SSP2CON1        equ	3939	;# 
  1425   000F64                     SSP2STAT        equ	3940	;# 
  1426   000F65                     SSP2ADD         equ	3941	;# 
  1427   000F66                     SSP2BUF         equ	3942	;# 
  1428   000F67                     ECCP2DEL        equ	3943	;# 
  1429   000F68                     ECCP2AS         equ	3944	;# 
  1430   000F69                     ECCP3DEL        equ	3945	;# 
  1431   000F6A                     ECCP3AS         equ	3946	;# 
  1432   000F6B                     RCSTA2          equ	3947	;# 
  1433   000F6C                     TXSTA2          equ	3948	;# 
  1434   000F6D                     TXREG2          equ	3949	;# 
  1435   000F6E                     RCREG2          equ	3950	;# 
  1436   000F6F                     SPBRG2          equ	3951	;# 
  1437   000F70                     CCP5CON         equ	3952	;# 
  1438   000F71                     CCPR5           equ	3953	;# 
  1439   000F71                     CCPR5L          equ	3953	;# 
  1440   000F72                     CCPR5H          equ	3954	;# 
  1441   000F73                     CCP4CON         equ	3955	;# 
  1442   000F74                     CCPR4           equ	3956	;# 
  1443   000F74                     CCPR4L          equ	3956	;# 
  1444   000F75                     CCPR4H          equ	3957	;# 
  1445   000F76                     T4CON           equ	3958	;# 
  1446   000F77                     PR4             equ	3959	;# 
  1447   000F78                     TMR4            equ	3960	;# 
  1448   000F79                     ECCP1DEL        equ	3961	;# 
  1449   000F7A                     ERDPT           equ	3962	;# 
  1450   000F7A                     ERDPTL          equ	3962	;# 
  1451   000F7B                     ERDPTH          equ	3963	;# 
  1452   000F7C                     BAUDCON2        equ	3964	;# 
  1453   000F7C                     BAUDCTL2        equ	3964	;# 
  1454   000F7D                     SPBRGH2         equ	3965	;# 
  1455   000F7E                     BAUDCON1        equ	3966	;# 
  1456   000F7E                     BAUDCON         equ	3966	;# 
  1457   000F7E                     BAUDCTL         equ	3966	;# 
  1458   000F7E                     BAUDCTL1        equ	3966	;# 
  1459   000F7F                     SPBRGH1         equ	3967	;# 
  1460   000F7F                     SPBRGH          equ	3967	;# 
  1461   000F80                     PORTA           equ	3968	;# 
  1462   000F81                     PORTB           equ	3969	;# 
  1463   000F82                     PORTC           equ	3970	;# 
  1464   000F83                     PORTD           equ	3971	;# 
  1465   000F84                     PORTE           equ	3972	;# 
  1466   000F85                     PORTF           equ	3973	;# 
  1467   000F86                     PORTG           equ	3974	;# 
  1468   000F87                     PORTH           equ	3975	;# 
  1469   000F88                     PORTJ           equ	3976	;# 
  1470   000F89                     LATA            equ	3977	;# 
  1471   000F8A                     LATB            equ	3978	;# 
  1472   000F8B                     LATC            equ	3979	;# 
  1473   000F8C                     LATD            equ	3980	;# 
  1474   000F8D                     LATE            equ	3981	;# 
  1475   000F8E                     LATF            equ	3982	;# 
  1476   000F8F                     LATG            equ	3983	;# 
  1477   000F90                     LATH            equ	3984	;# 
  1478   000F91                     LATJ            equ	3985	;# 
  1479   000F92                     TRISA           equ	3986	;# 
  1480   000F92                     DDRA            equ	3986	;# 
  1481   000F93                     TRISB           equ	3987	;# 
  1482   000F93                     DDRB            equ	3987	;# 
  1483   000F94                     TRISC           equ	3988	;# 
  1484   000F94                     DDRC            equ	3988	;# 
  1485   000F95                     TRISD           equ	3989	;# 
  1486   000F95                     DDRD            equ	3989	;# 
  1487   000F96                     TRISE           equ	3990	;# 
  1488   000F96                     DDRE            equ	3990	;# 
  1489   000F97                     TRISF           equ	3991	;# 
  1490   000F97                     DDRF            equ	3991	;# 
  1491   000F98                     TRISG           equ	3992	;# 
  1492   000F98                     DDRG            equ	3992	;# 
  1493   000F99                     TRISH           equ	3993	;# 
  1494   000F99                     DDRH            equ	3993	;# 
  1495   000F9A                     TRISJ           equ	3994	;# 
  1496   000F9A                     DDRJ            equ	3994	;# 
  1497   000F9B                     OSCTUNE         equ	3995	;# 
  1498   000F9C                     MEMCON          equ	3996	;# 
  1499   000F9D                     PIE1            equ	3997	;# 
  1500   000F9E                     PIR1            equ	3998	;# 
  1501   000F9F                     IPR1            equ	3999	;# 
  1502   000FA0                     PIE2            equ	4000	;# 
  1503   000FA1                     PIR2            equ	4001	;# 
  1504   000FA2                     IPR2            equ	4002	;# 
  1505   000FA3                     PIE3            equ	4003	;# 
  1506   000FA4                     PIR3            equ	4004	;# 
  1507   000FA5                     IPR3            equ	4005	;# 
  1508   000FA6                     EECON1          equ	4006	;# 
  1509   000FA7                     EECON2          equ	4007	;# 
  1510   000FAB                     RCSTA1          equ	4011	;# 
  1511   000FAB                     RCSTA           equ	4011	;# 
  1512   000FAC                     TXSTA1          equ	4012	;# 
  1513   000FAC                     TXSTA           equ	4012	;# 
  1514   000FAD                     TXREG1          equ	4013	;# 
  1515   000FAD                     TXREG           equ	4013	;# 
  1516   000FAE                     RCREG1          equ	4014	;# 
  1517   000FAE                     RCREG           equ	4014	;# 
  1518   000FAF                     SPBRG1          equ	4015	;# 
  1519   000FAF                     SPBRG           equ	4015	;# 
  1520   000FB0                     PSPCON          equ	4016	;# 
  1521   000FB1                     T3CON           equ	4017	;# 
  1522   000FB2                     TMR3            equ	4018	;# 
  1523   000FB2                     TMR3L           equ	4018	;# 
  1524   000FB3                     TMR3H           equ	4019	;# 
  1525   000FB4                     CMCON           equ	4020	;# 
  1526   000FB5                     CVRCON          equ	4021	;# 
  1527   000FB6                     ECCP1AS         equ	4022	;# 
  1528   000FB7                     CCP3CON         equ	4023	;# 
  1529   000FB7                     ECCP3CON        equ	4023	;# 
  1530   000FB8                     CCPR3           equ	4024	;# 
  1531   000FB8                     CCPR3L          equ	4024	;# 
  1532   000FB9                     CCPR3H          equ	4025	;# 
  1533   000FBA                     CCP2CON         equ	4026	;# 
  1534   000FBA                     ECCP2CON        equ	4026	;# 
  1535   000FBB                     CCPR2           equ	4027	;# 
  1536   000FBB                     CCPR2L          equ	4027	;# 
  1537   000FBC                     CCPR2H          equ	4028	;# 
  1538   000FBD                     CCP1CON         equ	4029	;# 
  1539   000FBD                     ECCP1CON        equ	4029	;# 
  1540   000FBE                     CCPR1           equ	4030	;# 
  1541   000FBE                     CCPR1L          equ	4030	;# 
  1542   000FBF                     CCPR1H          equ	4031	;# 
  1543   000FC0                     ADCON2          equ	4032	;# 
  1544   000FC1                     ADCON1          equ	4033	;# 
  1545   000FC2                     ADCON0          equ	4034	;# 
  1546   000FC3                     ADRES           equ	4035	;# 
  1547   000FC3                     ADRESL          equ	4035	;# 
  1548   000FC4                     ADRESH          equ	4036	;# 
  1549   000FC5                     SSP1CON2        equ	4037	;# 
  1550   000FC5                     SSPCON2         equ	4037	;# 
  1551   000FC6                     SSP1CON1        equ	4038	;# 
  1552   000FC6                     SSPCON1         equ	4038	;# 
  1553   000FC7                     SSP1STAT        equ	4039	;# 
  1554   000FC7                     SSPSTAT         equ	4039	;# 
  1555   000FC8                     SSP1ADD         equ	4040	;# 
  1556   000FC8                     SSPADD          equ	4040	;# 
  1557   000FC9                     SSP1BUF         equ	4041	;# 
  1558   000FC9                     SSPBUF          equ	4041	;# 
  1559   000FCA                     T2CON           equ	4042	;# 
  1560   000FCB                     PR2             equ	4043	;# 
  1561   000FCC                     TMR2            equ	4044	;# 
  1562   000FCD                     T1CON           equ	4045	;# 
  1563   000FCE                     TMR1            equ	4046	;# 
  1564   000FCE                     TMR1L           equ	4046	;# 
  1565   000FCF                     TMR1H           equ	4047	;# 
  1566   000FD0                     RCON            equ	4048	;# 
  1567   000FD1                     WDTCON          equ	4049	;# 
  1568   000FD2                     ECON1           equ	4050	;# 
  1569   000FD3                     OSCCON          equ	4051	;# 
  1570   000FD5                     T0CON           equ	4053	;# 
  1571   000FD6                     TMR0            equ	4054	;# 
  1572   000FD6                     TMR0L           equ	4054	;# 
  1573   000FD7                     TMR0H           equ	4055	;# 
  1574   000FD8                     STATUS          equ	4056	;# 
  1575   000FD9                     FSR2            equ	4057	;# 
  1576   000FD9                     FSR2L           equ	4057	;# 
  1577   000FDA                     FSR2H           equ	4058	;# 
  1578   000FDB                     PLUSW2          equ	4059	;# 
  1579   000FDC                     PREINC2         equ	4060	;# 
  1580   000FDD                     POSTDEC2        equ	4061	;# 
  1581   000FDE                     POSTINC2        equ	4062	;# 
  1582   000FDF                     INDF2           equ	4063	;# 
  1583   000FE0                     BSR             equ	4064	;# 
  1584   000FE1                     FSR1            equ	4065	;# 
  1585   000FE1                     FSR1L           equ	4065	;# 
  1586   000FE2                     FSR1H           equ	4066	;# 
  1587   000FE3                     PLUSW1          equ	4067	;# 
  1588   000FE4                     PREINC1         equ	4068	;# 
  1589   000FE5                     POSTDEC1        equ	4069	;# 
  1590   000FE6                     POSTINC1        equ	4070	;# 
  1591   000FE7                     INDF1           equ	4071	;# 
  1592   000FE8                     WREG            equ	4072	;# 
  1593   000FE9                     FSR0            equ	4073	;# 
  1594   000FE9                     FSR0L           equ	4073	;# 
  1595   000FEA                     FSR0H           equ	4074	;# 
  1596   000FEB                     PLUSW0          equ	4075	;# 
  1597   000FEC                     PREINC0         equ	4076	;# 
  1598   000FED                     POSTDEC0        equ	4077	;# 
  1599   000FEE                     POSTINC0        equ	4078	;# 
  1600   000FEF                     INDF0           equ	4079	;# 
  1601   000FF0                     INTCON3         equ	4080	;# 
  1602   000FF1                     INTCON2         equ	4081	;# 
  1603   000FF2                     INTCON          equ	4082	;# 
  1604   000FF3                     PROD            equ	4083	;# 
  1605   000FF3                     PRODL           equ	4083	;# 
  1606   000FF4                     PRODH           equ	4084	;# 
  1607   000FF5                     TABLAT          equ	4085	;# 
  1608   000FF6                     TBLPTR          equ	4086	;# 
  1609   000FF6                     TBLPTRL         equ	4086	;# 
  1610   000FF7                     TBLPTRH         equ	4087	;# 
  1611   000FF8                     TBLPTRU         equ	4088	;# 
  1612   000FF9                     PCLAT           equ	4089	;# 
  1613   000FF9                     PC              equ	4089	;# 
  1614   000FF9                     PCL             equ	4089	;# 
  1615   000FFA                     PCLATH          equ	4090	;# 
  1616   000FFB                     PCLATU          equ	4091	;# 
  1617   000FFC                     STKPTR          equ	4092	;# 
  1618   000FFD                     TOS             equ	4093	;# 
  1619   000FFD                     TOSL            equ	4093	;# 
  1620   000FFE                     TOSH            equ	4094	;# 
  1621   000FFF                     TOSU            equ	4095	;# 
  1622   000E80                     MAADR5          equ	3712	;# 
  1623   000E81                     MAADR6          equ	3713	;# 
  1624   000E82                     MAADR3          equ	3714	;# 
  1625   000E83                     MAADR4          equ	3715	;# 
  1626   000E84                     MAADR1          equ	3716	;# 
  1627   000E85                     MAADR2          equ	3717	;# 
  1628   000E8A                     MISTAT          equ	3722	;# 
  1629   000E97                     EFLOCON         equ	3735	;# 
  1630   000E98                     EPAUS           equ	3736	;# 
  1631   000E98                     EPAUSL          equ	3736	;# 
  1632   000E99                     EPAUSH          equ	3737	;# 
  1633   000EA0                     MACON1          equ	3744	;# 
  1634   000EA2                     MACON3          equ	3746	;# 
  1635   000EA3                     MACON4          equ	3747	;# 
  1636   000EA4                     MABBIPG         equ	3748	;# 
  1637   000EA6                     MAIPG           equ	3750	;# 
  1638   000EA6                     MAIPGL          equ	3750	;# 
  1639   000EA7                     MAIPGH          equ	3751	;# 
  1640   000EAA                     MAMXFL          equ	3754	;# 
  1641   000EAA                     MAMXFLL         equ	3754	;# 
  1642   000EAB                     MAMXFLH         equ	3755	;# 
  1643   000EB2                     MICMD           equ	3762	;# 
  1644   000EB4                     MIREGADR        equ	3764	;# 
  1645   000EB6                     MIWR            equ	3766	;# 
  1646   000EB6                     MIWRL           equ	3766	;# 
  1647   000EB7                     MIWRH           equ	3767	;# 
  1648   000EB8                     MIRD            equ	3768	;# 
  1649   000EB8                     MIRDL           equ	3768	;# 
  1650   000EB9                     MIRDH           equ	3769	;# 
  1651   000EC0                     EHT0            equ	3776	;# 
  1652   000EC1                     EHT1            equ	3777	;# 
  1653   000EC2                     EHT2            equ	3778	;# 
  1654   000EC3                     EHT3            equ	3779	;# 
  1655   000EC4                     EHT4            equ	3780	;# 
  1656   000EC5                     EHT5            equ	3781	;# 
  1657   000EC6                     EHT6            equ	3782	;# 
  1658   000EC7                     EHT7            equ	3783	;# 
  1659   000EC8                     EPMM0           equ	3784	;# 
  1660   000EC9                     EPMM1           equ	3785	;# 
  1661   000ECA                     EPMM2           equ	3786	;# 
  1662   000ECB                     EPMM3           equ	3787	;# 
  1663   000ECC                     EPMM4           equ	3788	;# 
  1664   000ECD                     EPMM5           equ	3789	;# 
  1665   000ECE                     EPMM6           equ	3790	;# 
  1666   000ECF                     EPMM7           equ	3791	;# 
  1667   000ED0                     EPMCS           equ	3792	;# 
  1668   000ED0                     EPMCSL          equ	3792	;# 
  1669   000ED1                     EPMCSH          equ	3793	;# 
  1670   000ED4                     EPMO            equ	3796	;# 
  1671   000ED4                     EPMOL           equ	3796	;# 
  1672   000ED5                     EPMOH           equ	3797	;# 
  1673   000ED8                     ERXFCON         equ	3800	;# 
  1674   000ED9                     EPKTCNT         equ	3801	;# 
  1675   000EE2                     EWRPT           equ	3810	;# 
  1676   000EE2                     EWRPTL          equ	3810	;# 
  1677   000EE3                     EWRPTH          equ	3811	;# 
  1678   000EE4                     ETXST           equ	3812	;# 
  1679   000EE4                     ETXSTL          equ	3812	;# 
  1680   000EE5                     ETXSTH          equ	3813	;# 
  1681   000EE6                     ETXND           equ	3814	;# 
  1682   000EE6                     ETXNDL          equ	3814	;# 
  1683   000EE7                     ETXNDH          equ	3815	;# 
  1684   000EE8                     ERXST           equ	3816	;# 
  1685   000EE8                     ERXSTL          equ	3816	;# 
  1686   000EE9                     ERXSTH          equ	3817	;# 
  1687   000EEA                     ERXND           equ	3818	;# 
  1688   000EEA                     ERXNDL          equ	3818	;# 
  1689   000EEB                     ERXNDH          equ	3819	;# 
  1690   000EEC                     ERXRDPT         equ	3820	;# 
  1691   000EEC                     ERXRDPTL        equ	3820	;# 
  1692   000EED                     ERXRDPTH        equ	3821	;# 
  1693   000EEE                     ERXWRPT         equ	3822	;# 
  1694   000EEE                     ERXWRPTL        equ	3822	;# 
  1695   000EEF                     ERXWRPTH        equ	3823	;# 
  1696   000EF0                     EDMAST          equ	3824	;# 
  1697   000EF0                     EDMASTL         equ	3824	;# 
  1698   000EF1                     EDMASTH         equ	3825	;# 
  1699   000EF2                     EDMAND          equ	3826	;# 
  1700   000EF2                     EDMANDL         equ	3826	;# 
  1701   000EF3                     EDMANDH         equ	3827	;# 
  1702   000EF4                     EDMADST         equ	3828	;# 
  1703   000EF4                     EDMADSTL        equ	3828	;# 
  1704   000EF5                     EDMADSTH        equ	3829	;# 
  1705   000EF6                     EDMACS          equ	3830	;# 
  1706   000EF6                     EDMACSL         equ	3830	;# 
  1707   000EF7                     EDMACSH         equ	3831	;# 
  1708   000EFB                     EIE             equ	3835	;# 
  1709   000EFD                     ESTAT           equ	3837	;# 
  1710   000EFE                     ECON2           equ	3838	;# 
  1711   000F60                     EIR             equ	3936	;# 
  1712   000F61                     EDATA           equ	3937	;# 
  1713   000F62                     SSP2CON2        equ	3938	;# 
  1714   000F63                     SSP2CON1        equ	3939	;# 
  1715   000F64                     SSP2STAT        equ	3940	;# 
  1716   000F65                     SSP2ADD         equ	3941	;# 
  1717   000F66                     SSP2BUF         equ	3942	;# 
  1718   000F67                     ECCP2DEL        equ	3943	;# 
  1719   000F68                     ECCP2AS         equ	3944	;# 
  1720   000F69                     ECCP3DEL        equ	3945	;# 
  1721   000F6A                     ECCP3AS         equ	3946	;# 
  1722   000F6B                     RCSTA2          equ	3947	;# 
  1723   000F6C                     TXSTA2          equ	3948	;# 
  1724   000F6D                     TXREG2          equ	3949	;# 
  1725   000F6E                     RCREG2          equ	3950	;# 
  1726   000F6F                     SPBRG2          equ	3951	;# 
  1727   000F70                     CCP5CON         equ	3952	;# 
  1728   000F71                     CCPR5           equ	3953	;# 
  1729   000F71                     CCPR5L          equ	3953	;# 
  1730   000F72                     CCPR5H          equ	3954	;# 
  1731   000F73                     CCP4CON         equ	3955	;# 
  1732   000F74                     CCPR4           equ	3956	;# 
  1733   000F74                     CCPR4L          equ	3956	;# 
  1734   000F75                     CCPR4H          equ	3957	;# 
  1735   000F76                     T4CON           equ	3958	;# 
  1736   000F77                     PR4             equ	3959	;# 
  1737   000F78                     TMR4            equ	3960	;# 
  1738   000F79                     ECCP1DEL        equ	3961	;# 
  1739   000F7A                     ERDPT           equ	3962	;# 
  1740   000F7A                     ERDPTL          equ	3962	;# 
  1741   000F7B                     ERDPTH          equ	3963	;# 
  1742   000F7C                     BAUDCON2        equ	3964	;# 
  1743   000F7C                     BAUDCTL2        equ	3964	;# 
  1744   000F7D                     SPBRGH2         equ	3965	;# 
  1745   000F7E                     BAUDCON1        equ	3966	;# 
  1746   000F7E                     BAUDCON         equ	3966	;# 
  1747   000F7E                     BAUDCTL         equ	3966	;# 
  1748   000F7E                     BAUDCTL1        equ	3966	;# 
  1749   000F7F                     SPBRGH1         equ	3967	;# 
  1750   000F7F                     SPBRGH          equ	3967	;# 
  1751   000F80                     PORTA           equ	3968	;# 
  1752   000F81                     PORTB           equ	3969	;# 
  1753   000F82                     PORTC           equ	3970	;# 
  1754   000F83                     PORTD           equ	3971	;# 
  1755   000F84                     PORTE           equ	3972	;# 
  1756   000F85                     PORTF           equ	3973	;# 
  1757   000F86                     PORTG           equ	3974	;# 
  1758   000F87                     PORTH           equ	3975	;# 
  1759   000F88                     PORTJ           equ	3976	;# 
  1760   000F89                     LATA            equ	3977	;# 
  1761   000F8A                     LATB            equ	3978	;# 
  1762   000F8B                     LATC            equ	3979	;# 
  1763   000F8C                     LATD            equ	3980	;# 
  1764   000F8D                     LATE            equ	3981	;# 
  1765   000F8E                     LATF            equ	3982	;# 
  1766   000F8F                     LATG            equ	3983	;# 
  1767   000F90                     LATH            equ	3984	;# 
  1768   000F91                     LATJ            equ	3985	;# 
  1769   000F92                     TRISA           equ	3986	;# 
  1770   000F92                     DDRA            equ	3986	;# 
  1771   000F93                     TRISB           equ	3987	;# 
  1772   000F93                     DDRB            equ	3987	;# 
  1773   000F94                     TRISC           equ	3988	;# 
  1774   000F94                     DDRC            equ	3988	;# 
  1775   000F95                     TRISD           equ	3989	;# 
  1776   000F95                     DDRD            equ	3989	;# 
  1777   000F96                     TRISE           equ	3990	;# 
  1778   000F96                     DDRE            equ	3990	;# 
  1779   000F97                     TRISF           equ	3991	;# 
  1780   000F97                     DDRF            equ	3991	;# 
  1781   000F98                     TRISG           equ	3992	;# 
  1782   000F98                     DDRG            equ	3992	;# 
  1783   000F99                     TRISH           equ	3993	;# 
  1784   000F99                     DDRH            equ	3993	;# 
  1785   000F9A                     TRISJ           equ	3994	;# 
  1786   000F9A                     DDRJ            equ	3994	;# 
  1787   000F9B                     OSCTUNE         equ	3995	;# 
  1788   000F9C                     MEMCON          equ	3996	;# 
  1789   000F9D                     PIE1            equ	3997	;# 
  1790   000F9E                     PIR1            equ	3998	;# 
  1791   000F9F                     IPR1            equ	3999	;# 
  1792   000FA0                     PIE2            equ	4000	;# 
  1793   000FA1                     PIR2            equ	4001	;# 
  1794   000FA2                     IPR2            equ	4002	;# 
  1795   000FA3                     PIE3            equ	4003	;# 
  1796   000FA4                     PIR3            equ	4004	;# 
  1797   000FA5                     IPR3            equ	4005	;# 
  1798   000FA6                     EECON1          equ	4006	;# 
  1799   000FA7                     EECON2          equ	4007	;# 
  1800   000FAB                     RCSTA1          equ	4011	;# 
  1801   000FAB                     RCSTA           equ	4011	;# 
  1802   000FAC                     TXSTA1          equ	4012	;# 
  1803   000FAC                     TXSTA           equ	4012	;# 
  1804   000FAD                     TXREG1          equ	4013	;# 
  1805   000FAD                     TXREG           equ	4013	;# 
  1806   000FAE                     RCREG1          equ	4014	;# 
  1807   000FAE                     RCREG           equ	4014	;# 
  1808   000FAF                     SPBRG1          equ	4015	;# 
  1809   000FAF                     SPBRG           equ	4015	;# 
  1810   000FB0                     PSPCON          equ	4016	;# 
  1811   000FB1                     T3CON           equ	4017	;# 
  1812   000FB2                     TMR3            equ	4018	;# 
  1813   000FB2                     TMR3L           equ	4018	;# 
  1814   000FB3                     TMR3H           equ	4019	;# 
  1815   000FB4                     CMCON           equ	4020	;# 
  1816   000FB5                     CVRCON          equ	4021	;# 
  1817   000FB6                     ECCP1AS         equ	4022	;# 
  1818   000FB7                     CCP3CON         equ	4023	;# 
  1819   000FB7                     ECCP3CON        equ	4023	;# 
  1820   000FB8                     CCPR3           equ	4024	;# 
  1821   000FB8                     CCPR3L          equ	4024	;# 
  1822   000FB9                     CCPR3H          equ	4025	;# 
  1823   000FBA                     CCP2CON         equ	4026	;# 
  1824   000FBA                     ECCP2CON        equ	4026	;# 
  1825   000FBB                     CCPR2           equ	4027	;# 
  1826   000FBB                     CCPR2L          equ	4027	;# 
  1827   000FBC                     CCPR2H          equ	4028	;# 
  1828   000FBD                     CCP1CON         equ	4029	;# 
  1829   000FBD                     ECCP1CON        equ	4029	;# 
  1830   000FBE                     CCPR1           equ	4030	;# 
  1831   000FBE                     CCPR1L          equ	4030	;# 
  1832   000FBF                     CCPR1H          equ	4031	;# 
  1833   000FC0                     ADCON2          equ	4032	;# 
  1834   000FC1                     ADCON1          equ	4033	;# 
  1835   000FC2                     ADCON0          equ	4034	;# 
  1836   000FC3                     ADRES           equ	4035	;# 
  1837   000FC3                     ADRESL          equ	4035	;# 
  1838   000FC4                     ADRESH          equ	4036	;# 
  1839   000FC5                     SSP1CON2        equ	4037	;# 
  1840   000FC5                     SSPCON2         equ	4037	;# 
  1841   000FC6                     SSP1CON1        equ	4038	;# 
  1842   000FC6                     SSPCON1         equ	4038	;# 
  1843   000FC7                     SSP1STAT        equ	4039	;# 
  1844   000FC7                     SSPSTAT         equ	4039	;# 
  1845   000FC8                     SSP1ADD         equ	4040	;# 
  1846   000FC8                     SSPADD          equ	4040	;# 
  1847   000FC9                     SSP1BUF         equ	4041	;# 
  1848   000FC9                     SSPBUF          equ	4041	;# 
  1849   000FCA                     T2CON           equ	4042	;# 
  1850   000FCB                     PR2             equ	4043	;# 
  1851   000FCC                     TMR2            equ	4044	;# 
  1852   000FCD                     T1CON           equ	4045	;# 
  1853   000FCE                     TMR1            equ	4046	;# 
  1854   000FCE                     TMR1L           equ	4046	;# 
  1855   000FCF                     TMR1H           equ	4047	;# 
  1856   000FD0                     RCON            equ	4048	;# 
  1857   000FD1                     WDTCON          equ	4049	;# 
  1858   000FD2                     ECON1           equ	4050	;# 
  1859   000FD3                     OSCCON          equ	4051	;# 
  1860   000FD5                     T0CON           equ	4053	;# 
  1861   000FD6                     TMR0            equ	4054	;# 
  1862   000FD6                     TMR0L           equ	4054	;# 
  1863   000FD7                     TMR0H           equ	4055	;# 
  1864   000FD8                     STATUS          equ	4056	;# 
  1865   000FD9                     FSR2            equ	4057	;# 
  1866   000FD9                     FSR2L           equ	4057	;# 
  1867   000FDA                     FSR2H           equ	4058	;# 
  1868   000FDB                     PLUSW2          equ	4059	;# 
  1869   000FDC                     PREINC2         equ	4060	;# 
  1870   000FDD                     POSTDEC2        equ	4061	;# 
  1871   000FDE                     POSTINC2        equ	4062	;# 
  1872   000FDF                     INDF2           equ	4063	;# 
  1873   000FE0                     BSR             equ	4064	;# 
  1874   000FE1                     FSR1            equ	4065	;# 
  1875   000FE1                     FSR1L           equ	4065	;# 
  1876   000FE2                     FSR1H           equ	4066	;# 
  1877   000FE3                     PLUSW1          equ	4067	;# 
  1878   000FE4                     PREINC1         equ	4068	;# 
  1879   000FE5                     POSTDEC1        equ	4069	;# 
  1880   000FE6                     POSTINC1        equ	4070	;# 
  1881   000FE7                     INDF1           equ	4071	;# 
  1882   000FE8                     WREG            equ	4072	;# 
  1883   000FE9                     FSR0            equ	4073	;# 
  1884   000FE9                     FSR0L           equ	4073	;# 
  1885   000FEA                     FSR0H           equ	4074	;# 
  1886   000FEB                     PLUSW0          equ	4075	;# 
  1887   000FEC                     PREINC0         equ	4076	;# 
  1888   000FED                     POSTDEC0        equ	4077	;# 
  1889   000FEE                     POSTINC0        equ	4078	;# 
  1890   000FEF                     INDF0           equ	4079	;# 
  1891   000FF0                     INTCON3         equ	4080	;# 
  1892   000FF1                     INTCON2         equ	4081	;# 
  1893   000FF2                     INTCON          equ	4082	;# 
  1894   000FF3                     PROD            equ	4083	;# 
  1895   000FF3                     PRODL           equ	4083	;# 
  1896   000FF4                     PRODH           equ	4084	;# 
  1897   000FF5                     TABLAT          equ	4085	;# 
  1898   000FF6                     TBLPTR          equ	4086	;# 
  1899   000FF6                     TBLPTRL         equ	4086	;# 
  1900   000FF7                     TBLPTRH         equ	4087	;# 
  1901   000FF8                     TBLPTRU         equ	4088	;# 
  1902   000FF9                     PCLAT           equ	4089	;# 
  1903   000FF9                     PC              equ	4089	;# 
  1904   000FF9                     PCL             equ	4089	;# 
  1905   000FFA                     PCLATH          equ	4090	;# 
  1906   000FFB                     PCLATU          equ	4091	;# 
  1907   000FFC                     STKPTR          equ	4092	;# 
  1908   000FFD                     TOS             equ	4093	;# 
  1909   000FFD                     TOSL            equ	4093	;# 
  1910   000FFE                     TOSH            equ	4094	;# 
  1911   000FFF                     TOSU            equ	4095	;# 
  1912   000E80                     MAADR5          equ	3712	;# 
  1913   000E81                     MAADR6          equ	3713	;# 
  1914   000E82                     MAADR3          equ	3714	;# 
  1915   000E83                     MAADR4          equ	3715	;# 
  1916   000E84                     MAADR1          equ	3716	;# 
  1917   000E85                     MAADR2          equ	3717	;# 
  1918   000E8A                     MISTAT          equ	3722	;# 
  1919   000E97                     EFLOCON         equ	3735	;# 
  1920   000E98                     EPAUS           equ	3736	;# 
  1921   000E98                     EPAUSL          equ	3736	;# 
  1922   000E99                     EPAUSH          equ	3737	;# 
  1923   000EA0                     MACON1          equ	3744	;# 
  1924   000EA2                     MACON3          equ	3746	;# 
  1925   000EA3                     MACON4          equ	3747	;# 
  1926   000EA4                     MABBIPG         equ	3748	;# 
  1927   000EA6                     MAIPG           equ	3750	;# 
  1928   000EA6                     MAIPGL          equ	3750	;# 
  1929   000EA7                     MAIPGH          equ	3751	;# 
  1930   000EAA                     MAMXFL          equ	3754	;# 
  1931   000EAA                     MAMXFLL         equ	3754	;# 
  1932   000EAB                     MAMXFLH         equ	3755	;# 
  1933   000EB2                     MICMD           equ	3762	;# 
  1934   000EB4                     MIREGADR        equ	3764	;# 
  1935   000EB6                     MIWR            equ	3766	;# 
  1936   000EB6                     MIWRL           equ	3766	;# 
  1937   000EB7                     MIWRH           equ	3767	;# 
  1938   000EB8                     MIRD            equ	3768	;# 
  1939   000EB8                     MIRDL           equ	3768	;# 
  1940   000EB9                     MIRDH           equ	3769	;# 
  1941   000EC0                     EHT0            equ	3776	;# 
  1942   000EC1                     EHT1            equ	3777	;# 
  1943   000EC2                     EHT2            equ	3778	;# 
  1944   000EC3                     EHT3            equ	3779	;# 
  1945   000EC4                     EHT4            equ	3780	;# 
  1946   000EC5                     EHT5            equ	3781	;# 
  1947   000EC6                     EHT6            equ	3782	;# 
  1948   000EC7                     EHT7            equ	3783	;# 
  1949   000EC8                     EPMM0           equ	3784	;# 
  1950   000EC9                     EPMM1           equ	3785	;# 
  1951   000ECA                     EPMM2           equ	3786	;# 
  1952   000ECB                     EPMM3           equ	3787	;# 
  1953   000ECC                     EPMM4           equ	3788	;# 
  1954   000ECD                     EPMM5           equ	3789	;# 
  1955   000ECE                     EPMM6           equ	3790	;# 
  1956   000ECF                     EPMM7           equ	3791	;# 
  1957   000ED0                     EPMCS           equ	3792	;# 
  1958   000ED0                     EPMCSL          equ	3792	;# 
  1959   000ED1                     EPMCSH          equ	3793	;# 
  1960   000ED4                     EPMO            equ	3796	;# 
  1961   000ED4                     EPMOL           equ	3796	;# 
  1962   000ED5                     EPMOH           equ	3797	;# 
  1963   000ED8                     ERXFCON         equ	3800	;# 
  1964   000ED9                     EPKTCNT         equ	3801	;# 
  1965   000EE2                     EWRPT           equ	3810	;# 
  1966   000EE2                     EWRPTL          equ	3810	;# 
  1967   000EE3                     EWRPTH          equ	3811	;# 
  1968   000EE4                     ETXST           equ	3812	;# 
  1969   000EE4                     ETXSTL          equ	3812	;# 
  1970   000EE5                     ETXSTH          equ	3813	;# 
  1971   000EE6                     ETXND           equ	3814	;# 
  1972   000EE6                     ETXNDL          equ	3814	;# 
  1973   000EE7                     ETXNDH          equ	3815	;# 
  1974   000EE8                     ERXST           equ	3816	;# 
  1975   000EE8                     ERXSTL          equ	3816	;# 
  1976   000EE9                     ERXSTH          equ	3817	;# 
  1977   000EEA                     ERXND           equ	3818	;# 
  1978   000EEA                     ERXNDL          equ	3818	;# 
  1979   000EEB                     ERXNDH          equ	3819	;# 
  1980   000EEC                     ERXRDPT         equ	3820	;# 
  1981   000EEC                     ERXRDPTL        equ	3820	;# 
  1982   000EED                     ERXRDPTH        equ	3821	;# 
  1983   000EEE                     ERXWRPT         equ	3822	;# 
  1984   000EEE                     ERXWRPTL        equ	3822	;# 
  1985   000EEF                     ERXWRPTH        equ	3823	;# 
  1986   000EF0                     EDMAST          equ	3824	;# 
  1987   000EF0                     EDMASTL         equ	3824	;# 
  1988   000EF1                     EDMASTH         equ	3825	;# 
  1989   000EF2                     EDMAND          equ	3826	;# 
  1990   000EF2                     EDMANDL         equ	3826	;# 
  1991   000EF3                     EDMANDH         equ	3827	;# 
  1992   000EF4                     EDMADST         equ	3828	;# 
  1993   000EF4                     EDMADSTL        equ	3828	;# 
  1994   000EF5                     EDMADSTH        equ	3829	;# 
  1995   000EF6                     EDMACS          equ	3830	;# 
  1996   000EF6                     EDMACSL         equ	3830	;# 
  1997   000EF7                     EDMACSH         equ	3831	;# 
  1998   000EFB                     EIE             equ	3835	;# 
  1999   000EFD                     ESTAT           equ	3837	;# 
  2000   000EFE                     ECON2           equ	3838	;# 
  2001   000F60                     EIR             equ	3936	;# 
  2002   000F61                     EDATA           equ	3937	;# 
  2003   000F62                     SSP2CON2        equ	3938	;# 
  2004   000F63                     SSP2CON1        equ	3939	;# 
  2005   000F64                     SSP2STAT        equ	3940	;# 
  2006   000F65                     SSP2ADD         equ	3941	;# 
  2007   000F66                     SSP2BUF         equ	3942	;# 
  2008   000F67                     ECCP2DEL        equ	3943	;# 
  2009   000F68                     ECCP2AS         equ	3944	;# 
  2010   000F69                     ECCP3DEL        equ	3945	;# 
  2011   000F6A                     ECCP3AS         equ	3946	;# 
  2012   000F6B                     RCSTA2          equ	3947	;# 
  2013   000F6C                     TXSTA2          equ	3948	;# 
  2014   000F6D                     TXREG2          equ	3949	;# 
  2015   000F6E                     RCREG2          equ	3950	;# 
  2016   000F6F                     SPBRG2          equ	3951	;# 
  2017   000F70                     CCP5CON         equ	3952	;# 
  2018   000F71                     CCPR5           equ	3953	;# 
  2019   000F71                     CCPR5L          equ	3953	;# 
  2020   000F72                     CCPR5H          equ	3954	;# 
  2021   000F73                     CCP4CON         equ	3955	;# 
  2022   000F74                     CCPR4           equ	3956	;# 
  2023   000F74                     CCPR4L          equ	3956	;# 
  2024   000F75                     CCPR4H          equ	3957	;# 
  2025   000F76                     T4CON           equ	3958	;# 
  2026   000F77                     PR4             equ	3959	;# 
  2027   000F78                     TMR4            equ	3960	;# 
  2028   000F79                     ECCP1DEL        equ	3961	;# 
  2029   000F7A                     ERDPT           equ	3962	;# 
  2030   000F7A                     ERDPTL          equ	3962	;# 
  2031   000F7B                     ERDPTH          equ	3963	;# 
  2032   000F7C                     BAUDCON2        equ	3964	;# 
  2033   000F7C                     BAUDCTL2        equ	3964	;# 
  2034   000F7D                     SPBRGH2         equ	3965	;# 
  2035   000F7E                     BAUDCON1        equ	3966	;# 
  2036   000F7E                     BAUDCON         equ	3966	;# 
  2037   000F7E                     BAUDCTL         equ	3966	;# 
  2038   000F7E                     BAUDCTL1        equ	3966	;# 
  2039   000F7F                     SPBRGH1         equ	3967	;# 
  2040   000F7F                     SPBRGH          equ	3967	;# 
  2041   000F80                     PORTA           equ	3968	;# 
  2042   000F81                     PORTB           equ	3969	;# 
  2043   000F82                     PORTC           equ	3970	;# 
  2044   000F83                     PORTD           equ	3971	;# 
  2045   000F84                     PORTE           equ	3972	;# 
  2046   000F85                     PORTF           equ	3973	;# 
  2047   000F86                     PORTG           equ	3974	;# 
  2048   000F87                     PORTH           equ	3975	;# 
  2049   000F88                     PORTJ           equ	3976	;# 
  2050   000F89                     LATA            equ	3977	;# 
  2051   000F8A                     LATB            equ	3978	;# 
  2052   000F8B                     LATC            equ	3979	;# 
  2053   000F8C                     LATD            equ	3980	;# 
  2054   000F8D                     LATE            equ	3981	;# 
  2055   000F8E                     LATF            equ	3982	;# 
  2056   000F8F                     LATG            equ	3983	;# 
  2057   000F90                     LATH            equ	3984	;# 
  2058   000F91                     LATJ            equ	3985	;# 
  2059   000F92                     TRISA           equ	3986	;# 
  2060   000F92                     DDRA            equ	3986	;# 
  2061   000F93                     TRISB           equ	3987	;# 
  2062   000F93                     DDRB            equ	3987	;# 
  2063   000F94                     TRISC           equ	3988	;# 
  2064   000F94                     DDRC            equ	3988	;# 
  2065   000F95                     TRISD           equ	3989	;# 
  2066   000F95                     DDRD            equ	3989	;# 
  2067   000F96                     TRISE           equ	3990	;# 
  2068   000F96                     DDRE            equ	3990	;# 
  2069   000F97                     TRISF           equ	3991	;# 
  2070   000F97                     DDRF            equ	3991	;# 
  2071   000F98                     TRISG           equ	3992	;# 
  2072   000F98                     DDRG            equ	3992	;# 
  2073   000F99                     TRISH           equ	3993	;# 
  2074   000F99                     DDRH            equ	3993	;# 
  2075   000F9A                     TRISJ           equ	3994	;# 
  2076   000F9A                     DDRJ            equ	3994	;# 
  2077   000F9B                     OSCTUNE         equ	3995	;# 
  2078   000F9C                     MEMCON          equ	3996	;# 
  2079   000F9D                     PIE1            equ	3997	;# 
  2080   000F9E                     PIR1            equ	3998	;# 
  2081   000F9F                     IPR1            equ	3999	;# 
  2082   000FA0                     PIE2            equ	4000	;# 
  2083   000FA1                     PIR2            equ	4001	;# 
  2084   000FA2                     IPR2            equ	4002	;# 
  2085   000FA3                     PIE3            equ	4003	;# 
  2086   000FA4                     PIR3            equ	4004	;# 
  2087   000FA5                     IPR3            equ	4005	;# 
  2088   000FA6                     EECON1          equ	4006	;# 
  2089   000FA7                     EECON2          equ	4007	;# 
  2090   000FAB                     RCSTA1          equ	4011	;# 
  2091   000FAB                     RCSTA           equ	4011	;# 
  2092   000FAC                     TXSTA1          equ	4012	;# 
  2093   000FAC                     TXSTA           equ	4012	;# 
  2094   000FAD                     TXREG1          equ	4013	;# 
  2095   000FAD                     TXREG           equ	4013	;# 
  2096   000FAE                     RCREG1          equ	4014	;# 
  2097   000FAE                     RCREG           equ	4014	;# 
  2098   000FAF                     SPBRG1          equ	4015	;# 
  2099   000FAF                     SPBRG           equ	4015	;# 
  2100   000FB0                     PSPCON          equ	4016	;# 
  2101   000FB1                     T3CON           equ	4017	;# 
  2102   000FB2                     TMR3            equ	4018	;# 
  2103   000FB2                     TMR3L           equ	4018	;# 
  2104   000FB3                     TMR3H           equ	4019	;# 
  2105   000FB4                     CMCON           equ	4020	;# 
  2106   000FB5                     CVRCON          equ	4021	;# 
  2107   000FB6                     ECCP1AS         equ	4022	;# 
  2108   000FB7                     CCP3CON         equ	4023	;# 
  2109   000FB7                     ECCP3CON        equ	4023	;# 
  2110   000FB8                     CCPR3           equ	4024	;# 
  2111   000FB8                     CCPR3L          equ	4024	;# 
  2112   000FB9                     CCPR3H          equ	4025	;# 
  2113   000FBA                     CCP2CON         equ	4026	;# 
  2114   000FBA                     ECCP2CON        equ	4026	;# 
  2115   000FBB                     CCPR2           equ	4027	;# 
  2116   000FBB                     CCPR2L          equ	4027	;# 
  2117   000FBC                     CCPR2H          equ	4028	;# 
  2118   000FBD                     CCP1CON         equ	4029	;# 
  2119   000FBD                     ECCP1CON        equ	4029	;# 
  2120   000FBE                     CCPR1           equ	4030	;# 
  2121   000FBE                     CCPR1L          equ	4030	;# 
  2122   000FBF                     CCPR1H          equ	4031	;# 
  2123   000FC0                     ADCON2          equ	4032	;# 
  2124   000FC1                     ADCON1          equ	4033	;# 
  2125   000FC2                     ADCON0          equ	4034	;# 
  2126   000FC3                     ADRES           equ	4035	;# 
  2127   000FC3                     ADRESL          equ	4035	;# 
  2128   000FC4                     ADRESH          equ	4036	;# 
  2129   000FC5                     SSP1CON2        equ	4037	;# 
  2130   000FC5                     SSPCON2         equ	4037	;# 
  2131   000FC6                     SSP1CON1        equ	4038	;# 
  2132   000FC6                     SSPCON1         equ	4038	;# 
  2133   000FC7                     SSP1STAT        equ	4039	;# 
  2134   000FC7                     SSPSTAT         equ	4039	;# 
  2135   000FC8                     SSP1ADD         equ	4040	;# 
  2136   000FC8                     SSPADD          equ	4040	;# 
  2137   000FC9                     SSP1BUF         equ	4041	;# 
  2138   000FC9                     SSPBUF          equ	4041	;# 
  2139   000FCA                     T2CON           equ	4042	;# 
  2140   000FCB                     PR2             equ	4043	;# 
  2141   000FCC                     TMR2            equ	4044	;# 
  2142   000FCD                     T1CON           equ	4045	;# 
  2143   000FCE                     TMR1            equ	4046	;# 
  2144   000FCE                     TMR1L           equ	4046	;# 
  2145   000FCF                     TMR1H           equ	4047	;# 
  2146   000FD0                     RCON            equ	4048	;# 
  2147   000FD1                     WDTCON          equ	4049	;# 
  2148   000FD2                     ECON1           equ	4050	;# 
  2149   000FD3                     OSCCON          equ	4051	;# 
  2150   000FD5                     T0CON           equ	4053	;# 
  2151   000FD6                     TMR0            equ	4054	;# 
  2152   000FD6                     TMR0L           equ	4054	;# 
  2153   000FD7                     TMR0H           equ	4055	;# 
  2154   000FD8                     STATUS          equ	4056	;# 
  2155   000FD9                     FSR2            equ	4057	;# 
  2156   000FD9                     FSR2L           equ	4057	;# 
  2157   000FDA                     FSR2H           equ	4058	;# 
  2158   000FDB                     PLUSW2          equ	4059	;# 
  2159   000FDC                     PREINC2         equ	4060	;# 
  2160   000FDD                     POSTDEC2        equ	4061	;# 
  2161   000FDE                     POSTINC2        equ	4062	;# 
  2162   000FDF                     INDF2           equ	4063	;# 
  2163   000FE0                     BSR             equ	4064	;# 
  2164   000FE1                     FSR1            equ	4065	;# 
  2165   000FE1                     FSR1L           equ	4065	;# 
  2166   000FE2                     FSR1H           equ	4066	;# 
  2167   000FE3                     PLUSW1          equ	4067	;# 
  2168   000FE4                     PREINC1         equ	4068	;# 
  2169   000FE5                     POSTDEC1        equ	4069	;# 
  2170   000FE6                     POSTINC1        equ	4070	;# 
  2171   000FE7                     INDF1           equ	4071	;# 
  2172   000FE8                     WREG            equ	4072	;# 
  2173   000FE9                     FSR0            equ	4073	;# 
  2174   000FE9                     FSR0L           equ	4073	;# 
  2175   000FEA                     FSR0H           equ	4074	;# 
  2176   000FEB                     PLUSW0          equ	4075	;# 
  2177   000FEC                     PREINC0         equ	4076	;# 
  2178   000FED                     POSTDEC0        equ	4077	;# 
  2179   000FEE                     POSTINC0        equ	4078	;# 
  2180   000FEF                     INDF0           equ	4079	;# 
  2181   000FF0                     INTCON3         equ	4080	;# 
  2182   000FF1                     INTCON2         equ	4081	;# 
  2183   000FF2                     INTCON          equ	4082	;# 
  2184   000FF3                     PROD            equ	4083	;# 
  2185   000FF3                     PRODL           equ	4083	;# 
  2186   000FF4                     PRODH           equ	4084	;# 
  2187   000FF5                     TABLAT          equ	4085	;# 
  2188   000FF6                     TBLPTR          equ	4086	;# 
  2189   000FF6                     TBLPTRL         equ	4086	;# 
  2190   000FF7                     TBLPTRH         equ	4087	;# 
  2191   000FF8                     TBLPTRU         equ	4088	;# 
  2192   000FF9                     PCLAT           equ	4089	;# 
  2193   000FF9                     PC              equ	4089	;# 
  2194   000FF9                     PCL             equ	4089	;# 
  2195   000FFA                     PCLATH          equ	4090	;# 
  2196   000FFB                     PCLATU          equ	4091	;# 
  2197   000FFC                     STKPTR          equ	4092	;# 
  2198   000FFD                     TOS             equ	4093	;# 
  2199   000FFD                     TOSL            equ	4093	;# 
  2200   000FFE                     TOSH            equ	4094	;# 
  2201   000FFF                     TOSU            equ	4095	;# 
  2202   000E80                     MAADR5          equ	3712	;# 
  2203   000E81                     MAADR6          equ	3713	;# 
  2204   000E82                     MAADR3          equ	3714	;# 
  2205   000E83                     MAADR4          equ	3715	;# 
  2206   000E84                     MAADR1          equ	3716	;# 
  2207   000E85                     MAADR2          equ	3717	;# 
  2208   000E8A                     MISTAT          equ	3722	;# 
  2209   000E97                     EFLOCON         equ	3735	;# 
  2210   000E98                     EPAUS           equ	3736	;# 
  2211   000E98                     EPAUSL          equ	3736	;# 
  2212   000E99                     EPAUSH          equ	3737	;# 
  2213   000EA0                     MACON1          equ	3744	;# 
  2214   000EA2                     MACON3          equ	3746	;# 
  2215   000EA3                     MACON4          equ	3747	;# 
  2216   000EA4                     MABBIPG         equ	3748	;# 
  2217   000EA6                     MAIPG           equ	3750	;# 
  2218   000EA6                     MAIPGL          equ	3750	;# 
  2219   000EA7                     MAIPGH          equ	3751	;# 
  2220   000EAA                     MAMXFL          equ	3754	;# 
  2221   000EAA                     MAMXFLL         equ	3754	;# 
  2222   000EAB                     MAMXFLH         equ	3755	;# 
  2223   000EB2                     MICMD           equ	3762	;# 
  2224   000EB4                     MIREGADR        equ	3764	;# 
  2225   000EB6                     MIWR            equ	3766	;# 
  2226   000EB6                     MIWRL           equ	3766	;# 
  2227   000EB7                     MIWRH           equ	3767	;# 
  2228   000EB8                     MIRD            equ	3768	;# 
  2229   000EB8                     MIRDL           equ	3768	;# 
  2230   000EB9                     MIRDH           equ	3769	;# 
  2231   000EC0                     EHT0            equ	3776	;# 
  2232   000EC1                     EHT1            equ	3777	;# 
  2233   000EC2                     EHT2            equ	3778	;# 
  2234   000EC3                     EHT3            equ	3779	;# 
  2235   000EC4                     EHT4            equ	3780	;# 
  2236   000EC5                     EHT5            equ	3781	;# 
  2237   000EC6                     EHT6            equ	3782	;# 
  2238   000EC7                     EHT7            equ	3783	;# 
  2239   000EC8                     EPMM0           equ	3784	;# 
  2240   000EC9                     EPMM1           equ	3785	;# 
  2241   000ECA                     EPMM2           equ	3786	;# 
  2242   000ECB                     EPMM3           equ	3787	;# 
  2243   000ECC                     EPMM4           equ	3788	;# 
  2244   000ECD                     EPMM5           equ	3789	;# 
  2245   000ECE                     EPMM6           equ	3790	;# 
  2246   000ECF                     EPMM7           equ	3791	;# 
  2247   000ED0                     EPMCS           equ	3792	;# 
  2248   000ED0                     EPMCSL          equ	3792	;# 
  2249   000ED1                     EPMCSH          equ	3793	;# 
  2250   000ED4                     EPMO            equ	3796	;# 
  2251   000ED4                     EPMOL           equ	3796	;# 
  2252   000ED5                     EPMOH           equ	3797	;# 
  2253   000ED8                     ERXFCON         equ	3800	;# 
  2254   000ED9                     EPKTCNT         equ	3801	;# 
  2255   000EE2                     EWRPT           equ	3810	;# 
  2256   000EE2                     EWRPTL          equ	3810	;# 
  2257   000EE3                     EWRPTH          equ	3811	;# 
  2258   000EE4                     ETXST           equ	3812	;# 
  2259   000EE4                     ETXSTL          equ	3812	;# 
  2260   000EE5                     ETXSTH          equ	3813	;# 
  2261   000EE6                     ETXND           equ	3814	;# 
  2262   000EE6                     ETXNDL          equ	3814	;# 
  2263   000EE7                     ETXNDH          equ	3815	;# 
  2264   000EE8                     ERXST           equ	3816	;# 
  2265   000EE8                     ERXSTL          equ	3816	;# 
  2266   000EE9                     ERXSTH          equ	3817	;# 
  2267   000EEA                     ERXND           equ	3818	;# 
  2268   000EEA                     ERXNDL          equ	3818	;# 
  2269   000EEB                     ERXNDH          equ	3819	;# 
  2270   000EEC                     ERXRDPT         equ	3820	;# 
  2271   000EEC                     ERXRDPTL        equ	3820	;# 
  2272   000EED                     ERXRDPTH        equ	3821	;# 
  2273   000EEE                     ERXWRPT         equ	3822	;# 
  2274   000EEE                     ERXWRPTL        equ	3822	;# 
  2275   000EEF                     ERXWRPTH        equ	3823	;# 
  2276   000EF0                     EDMAST          equ	3824	;# 
  2277   000EF0                     EDMASTL         equ	3824	;# 
  2278   000EF1                     EDMASTH         equ	3825	;# 
  2279   000EF2                     EDMAND          equ	3826	;# 
  2280   000EF2                     EDMANDL         equ	3826	;# 
  2281   000EF3                     EDMANDH         equ	3827	;# 
  2282   000EF4                     EDMADST         equ	3828	;# 
  2283   000EF4                     EDMADSTL        equ	3828	;# 
  2284   000EF5                     EDMADSTH        equ	3829	;# 
  2285   000EF6                     EDMACS          equ	3830	;# 
  2286   000EF6                     EDMACSL         equ	3830	;# 
  2287   000EF7                     EDMACSH         equ	3831	;# 
  2288   000EFB                     EIE             equ	3835	;# 
  2289   000EFD                     ESTAT           equ	3837	;# 
  2290   000EFE                     ECON2           equ	3838	;# 
  2291   000F60                     EIR             equ	3936	;# 
  2292   000F61                     EDATA           equ	3937	;# 
  2293   000F62                     SSP2CON2        equ	3938	;# 
  2294   000F63                     SSP2CON1        equ	3939	;# 
  2295   000F64                     SSP2STAT        equ	3940	;# 
  2296   000F65                     SSP2ADD         equ	3941	;# 
  2297   000F66                     SSP2BUF         equ	3942	;# 
  2298   000F67                     ECCP2DEL        equ	3943	;# 
  2299   000F68                     ECCP2AS         equ	3944	;# 
  2300   000F69                     ECCP3DEL        equ	3945	;# 
  2301   000F6A                     ECCP3AS         equ	3946	;# 
  2302   000F6B                     RCSTA2          equ	3947	;# 
  2303   000F6C                     TXSTA2          equ	3948	;# 
  2304   000F6D                     TXREG2          equ	3949	;# 
  2305   000F6E                     RCREG2          equ	3950	;# 
  2306   000F6F                     SPBRG2          equ	3951	;# 
  2307   000F70                     CCP5CON         equ	3952	;# 
  2308   000F71                     CCPR5           equ	3953	;# 
  2309   000F71                     CCPR5L          equ	3953	;# 
  2310   000F72                     CCPR5H          equ	3954	;# 
  2311   000F73                     CCP4CON         equ	3955	;# 
  2312   000F74                     CCPR4           equ	3956	;# 
  2313   000F74                     CCPR4L          equ	3956	;# 
  2314   000F75                     CCPR4H          equ	3957	;# 
  2315   000F76                     T4CON           equ	3958	;# 
  2316   000F77                     PR4             equ	3959	;# 
  2317   000F78                     TMR4            equ	3960	;# 
  2318   000F79                     ECCP1DEL        equ	3961	;# 
  2319   000F7A                     ERDPT           equ	3962	;# 
  2320   000F7A                     ERDPTL          equ	3962	;# 
  2321   000F7B                     ERDPTH          equ	3963	;# 
  2322   000F7C                     BAUDCON2        equ	3964	;# 
  2323   000F7C                     BAUDCTL2        equ	3964	;# 
  2324   000F7D                     SPBRGH2         equ	3965	;# 
  2325   000F7E                     BAUDCON1        equ	3966	;# 
  2326   000F7E                     BAUDCON         equ	3966	;# 
  2327   000F7E                     BAUDCTL         equ	3966	;# 
  2328   000F7E                     BAUDCTL1        equ	3966	;# 
  2329   000F7F                     SPBRGH1         equ	3967	;# 
  2330   000F7F                     SPBRGH          equ	3967	;# 
  2331   000F80                     PORTA           equ	3968	;# 
  2332   000F81                     PORTB           equ	3969	;# 
  2333   000F82                     PORTC           equ	3970	;# 
  2334   000F83                     PORTD           equ	3971	;# 
  2335   000F84                     PORTE           equ	3972	;# 
  2336   000F85                     PORTF           equ	3973	;# 
  2337   000F86                     PORTG           equ	3974	;# 
  2338   000F87                     PORTH           equ	3975	;# 
  2339   000F88                     PORTJ           equ	3976	;# 
  2340   000F89                     LATA            equ	3977	;# 
  2341   000F8A                     LATB            equ	3978	;# 
  2342   000F8B                     LATC            equ	3979	;# 
  2343   000F8C                     LATD            equ	3980	;# 
  2344   000F8D                     LATE            equ	3981	;# 
  2345   000F8E                     LATF            equ	3982	;# 
  2346   000F8F                     LATG            equ	3983	;# 
  2347   000F90                     LATH            equ	3984	;# 
  2348   000F91                     LATJ            equ	3985	;# 
  2349   000F92                     TRISA           equ	3986	;# 
  2350   000F92                     DDRA            equ	3986	;# 
  2351   000F93                     TRISB           equ	3987	;# 
  2352   000F93                     DDRB            equ	3987	;# 
  2353   000F94                     TRISC           equ	3988	;# 
  2354   000F94                     DDRC            equ	3988	;# 
  2355   000F95                     TRISD           equ	3989	;# 
  2356   000F95                     DDRD            equ	3989	;# 
  2357   000F96                     TRISE           equ	3990	;# 
  2358   000F96                     DDRE            equ	3990	;# 
  2359   000F97                     TRISF           equ	3991	;# 
  2360   000F97                     DDRF            equ	3991	;# 
  2361   000F98                     TRISG           equ	3992	;# 
  2362   000F98                     DDRG            equ	3992	;# 
  2363   000F99                     TRISH           equ	3993	;# 
  2364   000F99                     DDRH            equ	3993	;# 
  2365   000F9A                     TRISJ           equ	3994	;# 
  2366   000F9A                     DDRJ            equ	3994	;# 
  2367   000F9B                     OSCTUNE         equ	3995	;# 
  2368   000F9C                     MEMCON          equ	3996	;# 
  2369   000F9D                     PIE1            equ	3997	;# 
  2370   000F9E                     PIR1            equ	3998	;# 
  2371   000F9F                     IPR1            equ	3999	;# 
  2372   000FA0                     PIE2            equ	4000	;# 
  2373   000FA1                     PIR2            equ	4001	;# 
  2374   000FA2                     IPR2            equ	4002	;# 
  2375   000FA3                     PIE3            equ	4003	;# 
  2376   000FA4                     PIR3            equ	4004	;# 
  2377   000FA5                     IPR3            equ	4005	;# 
  2378   000FA6                     EECON1          equ	4006	;# 
  2379   000FA7                     EECON2          equ	4007	;# 
  2380   000FAB                     RCSTA1          equ	4011	;# 
  2381   000FAB                     RCSTA           equ	4011	;# 
  2382   000FAC                     TXSTA1          equ	4012	;# 
  2383   000FAC                     TXSTA           equ	4012	;# 
  2384   000FAD                     TXREG1          equ	4013	;# 
  2385   000FAD                     TXREG           equ	4013	;# 
  2386   000FAE                     RCREG1          equ	4014	;# 
  2387   000FAE                     RCREG           equ	4014	;# 
  2388   000FAF                     SPBRG1          equ	4015	;# 
  2389   000FAF                     SPBRG           equ	4015	;# 
  2390   000FB0                     PSPCON          equ	4016	;# 
  2391   000FB1                     T3CON           equ	4017	;# 
  2392   000FB2                     TMR3            equ	4018	;# 
  2393   000FB2                     TMR3L           equ	4018	;# 
  2394   000FB3                     TMR3H           equ	4019	;# 
  2395   000FB4                     CMCON           equ	4020	;# 
  2396   000FB5                     CVRCON          equ	4021	;# 
  2397   000FB6                     ECCP1AS         equ	4022	;# 
  2398   000FB7                     CCP3CON         equ	4023	;# 
  2399   000FB7                     ECCP3CON        equ	4023	;# 
  2400   000FB8                     CCPR3           equ	4024	;# 
  2401   000FB8                     CCPR3L          equ	4024	;# 
  2402   000FB9                     CCPR3H          equ	4025	;# 
  2403   000FBA                     CCP2CON         equ	4026	;# 
  2404   000FBA                     ECCP2CON        equ	4026	;# 
  2405   000FBB                     CCPR2           equ	4027	;# 
  2406   000FBB                     CCPR2L          equ	4027	;# 
  2407   000FBC                     CCPR2H          equ	4028	;# 
  2408   000FBD                     CCP1CON         equ	4029	;# 
  2409   000FBD                     ECCP1CON        equ	4029	;# 
  2410   000FBE                     CCPR1           equ	4030	;# 
  2411   000FBE                     CCPR1L          equ	4030	;# 
  2412   000FBF                     CCPR1H          equ	4031	;# 
  2413   000FC0                     ADCON2          equ	4032	;# 
  2414   000FC1                     ADCON1          equ	4033	;# 
  2415   000FC2                     ADCON0          equ	4034	;# 
  2416   000FC3                     ADRES           equ	4035	;# 
  2417   000FC3                     ADRESL          equ	4035	;# 
  2418   000FC4                     ADRESH          equ	4036	;# 
  2419   000FC5                     SSP1CON2        equ	4037	;# 
  2420   000FC5                     SSPCON2         equ	4037	;# 
  2421   000FC6                     SSP1CON1        equ	4038	;# 
  2422   000FC6                     SSPCON1         equ	4038	;# 
  2423   000FC7                     SSP1STAT        equ	4039	;# 
  2424   000FC7                     SSPSTAT         equ	4039	;# 
  2425   000FC8                     SSP1ADD         equ	4040	;# 
  2426   000FC8                     SSPADD          equ	4040	;# 
  2427   000FC9                     SSP1BUF         equ	4041	;# 
  2428   000FC9                     SSPBUF          equ	4041	;# 
  2429   000FCA                     T2CON           equ	4042	;# 
  2430   000FCB                     PR2             equ	4043	;# 
  2431   000FCC                     TMR2            equ	4044	;# 
  2432   000FCD                     T1CON           equ	4045	;# 
  2433   000FCE                     TMR1            equ	4046	;# 
  2434   000FCE                     TMR1L           equ	4046	;# 
  2435   000FCF                     TMR1H           equ	4047	;# 
  2436   000FD0                     RCON            equ	4048	;# 
  2437   000FD1                     WDTCON          equ	4049	;# 
  2438   000FD2                     ECON1           equ	4050	;# 
  2439   000FD3                     OSCCON          equ	4051	;# 
  2440   000FD5                     T0CON           equ	4053	;# 
  2441   000FD6                     TMR0            equ	4054	;# 
  2442   000FD6                     TMR0L           equ	4054	;# 
  2443   000FD7                     TMR0H           equ	4055	;# 
  2444   000FD8                     STATUS          equ	4056	;# 
  2445   000FD9                     FSR2            equ	4057	;# 
  2446   000FD9                     FSR2L           equ	4057	;# 
  2447   000FDA                     FSR2H           equ	4058	;# 
  2448   000FDB                     PLUSW2          equ	4059	;# 
  2449   000FDC                     PREINC2         equ	4060	;# 
  2450   000FDD                     POSTDEC2        equ	4061	;# 
  2451   000FDE                     POSTINC2        equ	4062	;# 
  2452   000FDF                     INDF2           equ	4063	;# 
  2453   000FE0                     BSR             equ	4064	;# 
  2454   000FE1                     FSR1            equ	4065	;# 
  2455   000FE1                     FSR1L           equ	4065	;# 
  2456   000FE2                     FSR1H           equ	4066	;# 
  2457   000FE3                     PLUSW1          equ	4067	;# 
  2458   000FE4                     PREINC1         equ	4068	;# 
  2459   000FE5                     POSTDEC1        equ	4069	;# 
  2460   000FE6                     POSTINC1        equ	4070	;# 
  2461   000FE7                     INDF1           equ	4071	;# 
  2462   000FE8                     WREG            equ	4072	;# 
  2463   000FE9                     FSR0            equ	4073	;# 
  2464   000FE9                     FSR0L           equ	4073	;# 
  2465   000FEA                     FSR0H           equ	4074	;# 
  2466   000FEB                     PLUSW0          equ	4075	;# 
  2467   000FEC                     PREINC0         equ	4076	;# 
  2468   000FED                     POSTDEC0        equ	4077	;# 
  2469   000FEE                     POSTINC0        equ	4078	;# 
  2470   000FEF                     INDF0           equ	4079	;# 
  2471   000FF0                     INTCON3         equ	4080	;# 
  2472   000FF1                     INTCON2         equ	4081	;# 
  2473   000FF2                     INTCON          equ	4082	;# 
  2474   000FF3                     PROD            equ	4083	;# 
  2475   000FF3                     PRODL           equ	4083	;# 
  2476   000FF4                     PRODH           equ	4084	;# 
  2477   000FF5                     TABLAT          equ	4085	;# 
  2478   000FF6                     TBLPTR          equ	4086	;# 
  2479   000FF6                     TBLPTRL         equ	4086	;# 
  2480   000FF7                     TBLPTRH         equ	4087	;# 
  2481   000FF8                     TBLPTRU         equ	4088	;# 
  2482   000FF9                     PCLAT           equ	4089	;# 
  2483   000FF9                     PC              equ	4089	;# 
  2484   000FF9                     PCL             equ	4089	;# 
  2485   000FFA                     PCLATH          equ	4090	;# 
  2486   000FFB                     PCLATU          equ	4091	;# 
  2487   000FFC                     STKPTR          equ	4092	;# 
  2488   000FFD                     TOS             equ	4093	;# 
  2489   000FFD                     TOSL            equ	4093	;# 
  2490   000FFE                     TOSH            equ	4094	;# 
  2491   000FFF                     TOSU            equ	4095	;# 
  2492   000E80                     MAADR5          equ	3712	;# 
  2493   000E81                     MAADR6          equ	3713	;# 
  2494   000E82                     MAADR3          equ	3714	;# 
  2495   000E83                     MAADR4          equ	3715	;# 
  2496   000E84                     MAADR1          equ	3716	;# 
  2497   000E85                     MAADR2          equ	3717	;# 
  2498   000E8A                     MISTAT          equ	3722	;# 
  2499   000E97                     EFLOCON         equ	3735	;# 
  2500   000E98                     EPAUS           equ	3736	;# 
  2501   000E98                     EPAUSL          equ	3736	;# 
  2502   000E99                     EPAUSH          equ	3737	;# 
  2503   000EA0                     MACON1          equ	3744	;# 
  2504   000EA2                     MACON3          equ	3746	;# 
  2505   000EA3                     MACON4          equ	3747	;# 
  2506   000EA4                     MABBIPG         equ	3748	;# 
  2507   000EA6                     MAIPG           equ	3750	;# 
  2508   000EA6                     MAIPGL          equ	3750	;# 
  2509   000EA7                     MAIPGH          equ	3751	;# 
  2510   000EAA                     MAMXFL          equ	3754	;# 
  2511   000EAA                     MAMXFLL         equ	3754	;# 
  2512   000EAB                     MAMXFLH         equ	3755	;# 
  2513   000EB2                     MICMD           equ	3762	;# 
  2514   000EB4                     MIREGADR        equ	3764	;# 
  2515   000EB6                     MIWR            equ	3766	;# 
  2516   000EB6                     MIWRL           equ	3766	;# 
  2517   000EB7                     MIWRH           equ	3767	;# 
  2518   000EB8                     MIRD            equ	3768	;# 
  2519   000EB8                     MIRDL           equ	3768	;# 
  2520   000EB9                     MIRDH           equ	3769	;# 
  2521   000EC0                     EHT0            equ	3776	;# 
  2522   000EC1                     EHT1            equ	3777	;# 
  2523   000EC2                     EHT2            equ	3778	;# 
  2524   000EC3                     EHT3            equ	3779	;# 
  2525   000EC4                     EHT4            equ	3780	;# 
  2526   000EC5                     EHT5            equ	3781	;# 
  2527   000EC6                     EHT6            equ	3782	;# 
  2528   000EC7                     EHT7            equ	3783	;# 
  2529   000EC8                     EPMM0           equ	3784	;# 
  2530   000EC9                     EPMM1           equ	3785	;# 
  2531   000ECA                     EPMM2           equ	3786	;# 
  2532   000ECB                     EPMM3           equ	3787	;# 
  2533   000ECC                     EPMM4           equ	3788	;# 
  2534   000ECD                     EPMM5           equ	3789	;# 
  2535   000ECE                     EPMM6           equ	3790	;# 
  2536   000ECF                     EPMM7           equ	3791	;# 
  2537   000ED0                     EPMCS           equ	3792	;# 
  2538   000ED0                     EPMCSL          equ	3792	;# 
  2539   000ED1                     EPMCSH          equ	3793	;# 
  2540   000ED4                     EPMO            equ	3796	;# 
  2541   000ED4                     EPMOL           equ	3796	;# 
  2542   000ED5                     EPMOH           equ	3797	;# 
  2543   000ED8                     ERXFCON         equ	3800	;# 
  2544   000ED9                     EPKTCNT         equ	3801	;# 
  2545   000EE2                     EWRPT           equ	3810	;# 
  2546   000EE2                     EWRPTL          equ	3810	;# 
  2547   000EE3                     EWRPTH          equ	3811	;# 
  2548   000EE4                     ETXST           equ	3812	;# 
  2549   000EE4                     ETXSTL          equ	3812	;# 
  2550   000EE5                     ETXSTH          equ	3813	;# 
  2551   000EE6                     ETXND           equ	3814	;# 
  2552   000EE6                     ETXNDL          equ	3814	;# 
  2553   000EE7                     ETXNDH          equ	3815	;# 
  2554   000EE8                     ERXST           equ	3816	;# 
  2555   000EE8                     ERXSTL          equ	3816	;# 
  2556   000EE9                     ERXSTH          equ	3817	;# 
  2557   000EEA                     ERXND           equ	3818	;# 
  2558   000EEA                     ERXNDL          equ	3818	;# 
  2559   000EEB                     ERXNDH          equ	3819	;# 
  2560   000EEC                     ERXRDPT         equ	3820	;# 
  2561   000EEC                     ERXRDPTL        equ	3820	;# 
  2562   000EED                     ERXRDPTH        equ	3821	;# 
  2563   000EEE                     ERXWRPT         equ	3822	;# 
  2564   000EEE                     ERXWRPTL        equ	3822	;# 
  2565   000EEF                     ERXWRPTH        equ	3823	;# 
  2566   000EF0                     EDMAST          equ	3824	;# 
  2567   000EF0                     EDMASTL         equ	3824	;# 
  2568   000EF1                     EDMASTH         equ	3825	;# 
  2569   000EF2                     EDMAND          equ	3826	;# 
  2570   000EF2                     EDMANDL         equ	3826	;# 
  2571   000EF3                     EDMANDH         equ	3827	;# 
  2572   000EF4                     EDMADST         equ	3828	;# 
  2573   000EF4                     EDMADSTL        equ	3828	;# 
  2574   000EF5                     EDMADSTH        equ	3829	;# 
  2575   000EF6                     EDMACS          equ	3830	;# 
  2576   000EF6                     EDMACSL         equ	3830	;# 
  2577   000EF7                     EDMACSH         equ	3831	;# 
  2578   000EFB                     EIE             equ	3835	;# 
  2579   000EFD                     ESTAT           equ	3837	;# 
  2580   000EFE                     ECON2           equ	3838	;# 
  2581   000F60                     EIR             equ	3936	;# 
  2582   000F61                     EDATA           equ	3937	;# 
  2583   000F62                     SSP2CON2        equ	3938	;# 
  2584   000F63                     SSP2CON1        equ	3939	;# 
  2585   000F64                     SSP2STAT        equ	3940	;# 
  2586   000F65                     SSP2ADD         equ	3941	;# 
  2587   000F66                     SSP2BUF         equ	3942	;# 
  2588   000F67                     ECCP2DEL        equ	3943	;# 
  2589   000F68                     ECCP2AS         equ	3944	;# 
  2590   000F69                     ECCP3DEL        equ	3945	;# 
  2591   000F6A                     ECCP3AS         equ	3946	;# 
  2592   000F6B                     RCSTA2          equ	3947	;# 
  2593   000F6C                     TXSTA2          equ	3948	;# 
  2594   000F6D                     TXREG2          equ	3949	;# 
  2595   000F6E                     RCREG2          equ	3950	;# 
  2596   000F6F                     SPBRG2          equ	3951	;# 
  2597   000F70                     CCP5CON         equ	3952	;# 
  2598   000F71                     CCPR5           equ	3953	;# 
  2599   000F71                     CCPR5L          equ	3953	;# 
  2600   000F72                     CCPR5H          equ	3954	;# 
  2601   000F73                     CCP4CON         equ	3955	;# 
  2602   000F74                     CCPR4           equ	3956	;# 
  2603   000F74                     CCPR4L          equ	3956	;# 
  2604   000F75                     CCPR4H          equ	3957	;# 
  2605   000F76                     T4CON           equ	3958	;# 
  2606   000F77                     PR4             equ	3959	;# 
  2607   000F78                     TMR4            equ	3960	;# 
  2608   000F79                     ECCP1DEL        equ	3961	;# 
  2609   000F7A                     ERDPT           equ	3962	;# 
  2610   000F7A                     ERDPTL          equ	3962	;# 
  2611   000F7B                     ERDPTH          equ	3963	;# 
  2612   000F7C                     BAUDCON2        equ	3964	;# 
  2613   000F7C                     BAUDCTL2        equ	3964	;# 
  2614   000F7D                     SPBRGH2         equ	3965	;# 
  2615   000F7E                     BAUDCON1        equ	3966	;# 
  2616   000F7E                     BAUDCON         equ	3966	;# 
  2617   000F7E                     BAUDCTL         equ	3966	;# 
  2618   000F7E                     BAUDCTL1        equ	3966	;# 
  2619   000F7F                     SPBRGH1         equ	3967	;# 
  2620   000F7F                     SPBRGH          equ	3967	;# 
  2621   000F80                     PORTA           equ	3968	;# 
  2622   000F81                     PORTB           equ	3969	;# 
  2623   000F82                     PORTC           equ	3970	;# 
  2624   000F83                     PORTD           equ	3971	;# 
  2625   000F84                     PORTE           equ	3972	;# 
  2626   000F85                     PORTF           equ	3973	;# 
  2627   000F86                     PORTG           equ	3974	;# 
  2628   000F87                     PORTH           equ	3975	;# 
  2629   000F88                     PORTJ           equ	3976	;# 
  2630   000F89                     LATA            equ	3977	;# 
  2631   000F8A                     LATB            equ	3978	;# 
  2632   000F8B                     LATC            equ	3979	;# 
  2633   000F8C                     LATD            equ	3980	;# 
  2634   000F8D                     LATE            equ	3981	;# 
  2635   000F8E                     LATF            equ	3982	;# 
  2636   000F8F                     LATG            equ	3983	;# 
  2637   000F90                     LATH            equ	3984	;# 
  2638   000F91                     LATJ            equ	3985	;# 
  2639   000F92                     TRISA           equ	3986	;# 
  2640   000F92                     DDRA            equ	3986	;# 
  2641   000F93                     TRISB           equ	3987	;# 
  2642   000F93                     DDRB            equ	3987	;# 
  2643   000F94                     TRISC           equ	3988	;# 
  2644   000F94                     DDRC            equ	3988	;# 
  2645   000F95                     TRISD           equ	3989	;# 
  2646   000F95                     DDRD            equ	3989	;# 
  2647   000F96                     TRISE           equ	3990	;# 
  2648   000F96                     DDRE            equ	3990	;# 
  2649   000F97                     TRISF           equ	3991	;# 
  2650   000F97                     DDRF            equ	3991	;# 
  2651   000F98                     TRISG           equ	3992	;# 
  2652   000F98                     DDRG            equ	3992	;# 
  2653   000F99                     TRISH           equ	3993	;# 
  2654   000F99                     DDRH            equ	3993	;# 
  2655   000F9A                     TRISJ           equ	3994	;# 
  2656   000F9A                     DDRJ            equ	3994	;# 
  2657   000F9B                     OSCTUNE         equ	3995	;# 
  2658   000F9C                     MEMCON          equ	3996	;# 
  2659   000F9D                     PIE1            equ	3997	;# 
  2660   000F9E                     PIR1            equ	3998	;# 
  2661   000F9F                     IPR1            equ	3999	;# 
  2662   000FA0                     PIE2            equ	4000	;# 
  2663   000FA1                     PIR2            equ	4001	;# 
  2664   000FA2                     IPR2            equ	4002	;# 
  2665   000FA3                     PIE3            equ	4003	;# 
  2666   000FA4                     PIR3            equ	4004	;# 
  2667   000FA5                     IPR3            equ	4005	;# 
  2668   000FA6                     EECON1          equ	4006	;# 
  2669   000FA7                     EECON2          equ	4007	;# 
  2670   000FAB                     RCSTA1          equ	4011	;# 
  2671   000FAB                     RCSTA           equ	4011	;# 
  2672   000FAC                     TXSTA1          equ	4012	;# 
  2673   000FAC                     TXSTA           equ	4012	;# 
  2674   000FAD                     TXREG1          equ	4013	;# 
  2675   000FAD                     TXREG           equ	4013	;# 
  2676   000FAE                     RCREG1          equ	4014	;# 
  2677   000FAE                     RCREG           equ	4014	;# 
  2678   000FAF                     SPBRG1          equ	4015	;# 
  2679   000FAF                     SPBRG           equ	4015	;# 
  2680   000FB0                     PSPCON          equ	4016	;# 
  2681   000FB1                     T3CON           equ	4017	;# 
  2682   000FB2                     TMR3            equ	4018	;# 
  2683   000FB2                     TMR3L           equ	4018	;# 
  2684   000FB3                     TMR3H           equ	4019	;# 
  2685   000FB4                     CMCON           equ	4020	;# 
  2686   000FB5                     CVRCON          equ	4021	;# 
  2687   000FB6                     ECCP1AS         equ	4022	;# 
  2688   000FB7                     CCP3CON         equ	4023	;# 
  2689   000FB7                     ECCP3CON        equ	4023	;# 
  2690   000FB8                     CCPR3           equ	4024	;# 
  2691   000FB8                     CCPR3L          equ	4024	;# 
  2692   000FB9                     CCPR3H          equ	4025	;# 
  2693   000FBA                     CCP2CON         equ	4026	;# 
  2694   000FBA                     ECCP2CON        equ	4026	;# 
  2695   000FBB                     CCPR2           equ	4027	;# 
  2696   000FBB                     CCPR2L          equ	4027	;# 
  2697   000FBC                     CCPR2H          equ	4028	;# 
  2698   000FBD                     CCP1CON         equ	4029	;# 
  2699   000FBD                     ECCP1CON        equ	4029	;# 
  2700   000FBE                     CCPR1           equ	4030	;# 
  2701   000FBE                     CCPR1L          equ	4030	;# 
  2702   000FBF                     CCPR1H          equ	4031	;# 
  2703   000FC0                     ADCON2          equ	4032	;# 
  2704   000FC1                     ADCON1          equ	4033	;# 
  2705   000FC2                     ADCON0          equ	4034	;# 
  2706   000FC3                     ADRES           equ	4035	;# 
  2707   000FC3                     ADRESL          equ	4035	;# 
  2708   000FC4                     ADRESH          equ	4036	;# 
  2709   000FC5                     SSP1CON2        equ	4037	;# 
  2710   000FC5                     SSPCON2         equ	4037	;# 
  2711   000FC6                     SSP1CON1        equ	4038	;# 
  2712   000FC6                     SSPCON1         equ	4038	;# 
  2713   000FC7                     SSP1STAT        equ	4039	;# 
  2714   000FC7                     SSPSTAT         equ	4039	;# 
  2715   000FC8                     SSP1ADD         equ	4040	;# 
  2716   000FC8                     SSPADD          equ	4040	;# 
  2717   000FC9                     SSP1BUF         equ	4041	;# 
  2718   000FC9                     SSPBUF          equ	4041	;# 
  2719   000FCA                     T2CON           equ	4042	;# 
  2720   000FCB                     PR2             equ	4043	;# 
  2721   000FCC                     TMR2            equ	4044	;# 
  2722   000FCD                     T1CON           equ	4045	;# 
  2723   000FCE                     TMR1            equ	4046	;# 
  2724   000FCE                     TMR1L           equ	4046	;# 
  2725   000FCF                     TMR1H           equ	4047	;# 
  2726   000FD0                     RCON            equ	4048	;# 
  2727   000FD1                     WDTCON          equ	4049	;# 
  2728   000FD2                     ECON1           equ	4050	;# 
  2729   000FD3                     OSCCON          equ	4051	;# 
  2730   000FD5                     T0CON           equ	4053	;# 
  2731   000FD6                     TMR0            equ	4054	;# 
  2732   000FD6                     TMR0L           equ	4054	;# 
  2733   000FD7                     TMR0H           equ	4055	;# 
  2734   000FD8                     STATUS          equ	4056	;# 
  2735   000FD9                     FSR2            equ	4057	;# 
  2736   000FD9                     FSR2L           equ	4057	;# 
  2737   000FDA                     FSR2H           equ	4058	;# 
  2738   000FDB                     PLUSW2          equ	4059	;# 
  2739   000FDC                     PREINC2         equ	4060	;# 
  2740   000FDD                     POSTDEC2        equ	4061	;# 
  2741   000FDE                     POSTINC2        equ	4062	;# 
  2742   000FDF                     INDF2           equ	4063	;# 
  2743   000FE0                     BSR             equ	4064	;# 
  2744   000FE1                     FSR1            equ	4065	;# 
  2745   000FE1                     FSR1L           equ	4065	;# 
  2746   000FE2                     FSR1H           equ	4066	;# 
  2747   000FE3                     PLUSW1          equ	4067	;# 
  2748   000FE4                     PREINC1         equ	4068	;# 
  2749   000FE5                     POSTDEC1        equ	4069	;# 
  2750   000FE6                     POSTINC1        equ	4070	;# 
  2751   000FE7                     INDF1           equ	4071	;# 
  2752   000FE8                     WREG            equ	4072	;# 
  2753   000FE9                     FSR0            equ	4073	;# 
  2754   000FE9                     FSR0L           equ	4073	;# 
  2755   000FEA                     FSR0H           equ	4074	;# 
  2756   000FEB                     PLUSW0          equ	4075	;# 
  2757   000FEC                     PREINC0         equ	4076	;# 
  2758   000FED                     POSTDEC0        equ	4077	;# 
  2759   000FEE                     POSTINC0        equ	4078	;# 
  2760   000FEF                     INDF0           equ	4079	;# 
  2761   000FF0                     INTCON3         equ	4080	;# 
  2762   000FF1                     INTCON2         equ	4081	;# 
  2763   000FF2                     INTCON          equ	4082	;# 
  2764   000FF3                     PROD            equ	4083	;# 
  2765   000FF3                     PRODL           equ	4083	;# 
  2766   000FF4                     PRODH           equ	4084	;# 
  2767   000FF5                     TABLAT          equ	4085	;# 
  2768   000FF6                     TBLPTR          equ	4086	;# 
  2769   000FF6                     TBLPTRL         equ	4086	;# 
  2770   000FF7                     TBLPTRH         equ	4087	;# 
  2771   000FF8                     TBLPTRU         equ	4088	;# 
  2772   000FF9                     PCLAT           equ	4089	;# 
  2773   000FF9                     PC              equ	4089	;# 
  2774   000FF9                     PCL             equ	4089	;# 
  2775   000FFA                     PCLATH          equ	4090	;# 
  2776   000FFB                     PCLATU          equ	4091	;# 
  2777   000FFC                     STKPTR          equ	4092	;# 
  2778   000FFD                     TOS             equ	4093	;# 
  2779   000FFD                     TOSL            equ	4093	;# 
  2780   000FFE                     TOSH            equ	4094	;# 
  2781   000FFF                     TOSU            equ	4095	;# 
  2782   000E80                     MAADR5          equ	3712	;# 
  2783   000E81                     MAADR6          equ	3713	;# 
  2784   000E82                     MAADR3          equ	3714	;# 
  2785   000E83                     MAADR4          equ	3715	;# 
  2786   000E84                     MAADR1          equ	3716	;# 
  2787   000E85                     MAADR2          equ	3717	;# 
  2788   000E8A                     MISTAT          equ	3722	;# 
  2789   000E97                     EFLOCON         equ	3735	;# 
  2790   000E98                     EPAUS           equ	3736	;# 
  2791   000E98                     EPAUSL          equ	3736	;# 
  2792   000E99                     EPAUSH          equ	3737	;# 
  2793   000EA0                     MACON1          equ	3744	;# 
  2794   000EA2                     MACON3          equ	3746	;# 
  2795   000EA3                     MACON4          equ	3747	;# 
  2796   000EA4                     MABBIPG         equ	3748	;# 
  2797   000EA6                     MAIPG           equ	3750	;# 
  2798   000EA6                     MAIPGL          equ	3750	;# 
  2799   000EA7                     MAIPGH          equ	3751	;# 
  2800   000EAA                     MAMXFL          equ	3754	;# 
  2801   000EAA                     MAMXFLL         equ	3754	;# 
  2802   000EAB                     MAMXFLH         equ	3755	;# 
  2803   000EB2                     MICMD           equ	3762	;# 
  2804   000EB4                     MIREGADR        equ	3764	;# 
  2805   000EB6                     MIWR            equ	3766	;# 
  2806   000EB6                     MIWRL           equ	3766	;# 
  2807   000EB7                     MIWRH           equ	3767	;# 
  2808   000EB8                     MIRD            equ	3768	;# 
  2809   000EB8                     MIRDL           equ	3768	;# 
  2810   000EB9                     MIRDH           equ	3769	;# 
  2811   000EC0                     EHT0            equ	3776	;# 
  2812   000EC1                     EHT1            equ	3777	;# 
  2813   000EC2                     EHT2            equ	3778	;# 
  2814   000EC3                     EHT3            equ	3779	;# 
  2815   000EC4                     EHT4            equ	3780	;# 
  2816   000EC5                     EHT5            equ	3781	;# 
  2817   000EC6                     EHT6            equ	3782	;# 
  2818   000EC7                     EHT7            equ	3783	;# 
  2819   000EC8                     EPMM0           equ	3784	;# 
  2820   000EC9                     EPMM1           equ	3785	;# 
  2821   000ECA                     EPMM2           equ	3786	;# 
  2822   000ECB                     EPMM3           equ	3787	;# 
  2823   000ECC                     EPMM4           equ	3788	;# 
  2824   000ECD                     EPMM5           equ	3789	;# 
  2825   000ECE                     EPMM6           equ	3790	;# 
  2826   000ECF                     EPMM7           equ	3791	;# 
  2827   000ED0                     EPMCS           equ	3792	;# 
  2828   000ED0                     EPMCSL          equ	3792	;# 
  2829   000ED1                     EPMCSH          equ	3793	;# 
  2830   000ED4                     EPMO            equ	3796	;# 
  2831   000ED4                     EPMOL           equ	3796	;# 
  2832   000ED5                     EPMOH           equ	3797	;# 
  2833   000ED8                     ERXFCON         equ	3800	;# 
  2834   000ED9                     EPKTCNT         equ	3801	;# 
  2835   000EE2                     EWRPT           equ	3810	;# 
  2836   000EE2                     EWRPTL          equ	3810	;# 
  2837   000EE3                     EWRPTH          equ	3811	;# 
  2838   000EE4                     ETXST           equ	3812	;# 
  2839   000EE4                     ETXSTL          equ	3812	;# 
  2840   000EE5                     ETXSTH          equ	3813	;# 
  2841   000EE6                     ETXND           equ	3814	;# 
  2842   000EE6                     ETXNDL          equ	3814	;# 
  2843   000EE7                     ETXNDH          equ	3815	;# 
  2844   000EE8                     ERXST           equ	3816	;# 
  2845   000EE8                     ERXSTL          equ	3816	;# 
  2846   000EE9                     ERXSTH          equ	3817	;# 
  2847   000EEA                     ERXND           equ	3818	;# 
  2848   000EEA                     ERXNDL          equ	3818	;# 
  2849   000EEB                     ERXNDH          equ	3819	;# 
  2850   000EEC                     ERXRDPT         equ	3820	;# 
  2851   000EEC                     ERXRDPTL        equ	3820	;# 
  2852   000EED                     ERXRDPTH        equ	3821	;# 
  2853   000EEE                     ERXWRPT         equ	3822	;# 
  2854   000EEE                     ERXWRPTL        equ	3822	;# 
  2855   000EEF                     ERXWRPTH        equ	3823	;# 
  2856   000EF0                     EDMAST          equ	3824	;# 
  2857   000EF0                     EDMASTL         equ	3824	;# 
  2858   000EF1                     EDMASTH         equ	3825	;# 
  2859   000EF2                     EDMAND          equ	3826	;# 
  2860   000EF2                     EDMANDL         equ	3826	;# 
  2861   000EF3                     EDMANDH         equ	3827	;# 
  2862   000EF4                     EDMADST         equ	3828	;# 
  2863   000EF4                     EDMADSTL        equ	3828	;# 
  2864   000EF5                     EDMADSTH        equ	3829	;# 
  2865   000EF6                     EDMACS          equ	3830	;# 
  2866   000EF6                     EDMACSL         equ	3830	;# 
  2867   000EF7                     EDMACSH         equ	3831	;# 
  2868   000EFB                     EIE             equ	3835	;# 
  2869   000EFD                     ESTAT           equ	3837	;# 
  2870   000EFE                     ECON2           equ	3838	;# 
  2871   000F60                     EIR             equ	3936	;# 
  2872   000F61                     EDATA           equ	3937	;# 
  2873   000F62                     SSP2CON2        equ	3938	;# 
  2874   000F63                     SSP2CON1        equ	3939	;# 
  2875   000F64                     SSP2STAT        equ	3940	;# 
  2876   000F65                     SSP2ADD         equ	3941	;# 
  2877   000F66                     SSP2BUF         equ	3942	;# 
  2878   000F67                     ECCP2DEL        equ	3943	;# 
  2879   000F68                     ECCP2AS         equ	3944	;# 
  2880   000F69                     ECCP3DEL        equ	3945	;# 
  2881   000F6A                     ECCP3AS         equ	3946	;# 
  2882   000F6B                     RCSTA2          equ	3947	;# 
  2883   000F6C                     TXSTA2          equ	3948	;# 
  2884   000F6D                     TXREG2          equ	3949	;# 
  2885   000F6E                     RCREG2          equ	3950	;# 
  2886   000F6F                     SPBRG2          equ	3951	;# 
  2887   000F70                     CCP5CON         equ	3952	;# 
  2888   000F71                     CCPR5           equ	3953	;# 
  2889   000F71                     CCPR5L          equ	3953	;# 
  2890   000F72                     CCPR5H          equ	3954	;# 
  2891   000F73                     CCP4CON         equ	3955	;# 
  2892   000F74                     CCPR4           equ	3956	;# 
  2893   000F74                     CCPR4L          equ	3956	;# 
  2894   000F75                     CCPR4H          equ	3957	;# 
  2895   000F76                     T4CON           equ	3958	;# 
  2896   000F77                     PR4             equ	3959	;# 
  2897   000F78                     TMR4            equ	3960	;# 
  2898   000F79                     ECCP1DEL        equ	3961	;# 
  2899   000F7A                     ERDPT           equ	3962	;# 
  2900   000F7A                     ERDPTL          equ	3962	;# 
  2901   000F7B                     ERDPTH          equ	3963	;# 
  2902   000F7C                     BAUDCON2        equ	3964	;# 
  2903   000F7C                     BAUDCTL2        equ	3964	;# 
  2904   000F7D                     SPBRGH2         equ	3965	;# 
  2905   000F7E                     BAUDCON1        equ	3966	;# 
  2906   000F7E                     BAUDCON         equ	3966	;# 
  2907   000F7E                     BAUDCTL         equ	3966	;# 
  2908   000F7E                     BAUDCTL1        equ	3966	;# 
  2909   000F7F                     SPBRGH1         equ	3967	;# 
  2910   000F7F                     SPBRGH          equ	3967	;# 
  2911   000F80                     PORTA           equ	3968	;# 
  2912   000F81                     PORTB           equ	3969	;# 
  2913   000F82                     PORTC           equ	3970	;# 
  2914   000F83                     PORTD           equ	3971	;# 
  2915   000F84                     PORTE           equ	3972	;# 
  2916   000F85                     PORTF           equ	3973	;# 
  2917   000F86                     PORTG           equ	3974	;# 
  2918   000F87                     PORTH           equ	3975	;# 
  2919   000F88                     PORTJ           equ	3976	;# 
  2920   000F89                     LATA            equ	3977	;# 
  2921   000F8A                     LATB            equ	3978	;# 
  2922   000F8B                     LATC            equ	3979	;# 
  2923   000F8C                     LATD            equ	3980	;# 
  2924   000F8D                     LATE            equ	3981	;# 
  2925   000F8E                     LATF            equ	3982	;# 
  2926   000F8F                     LATG            equ	3983	;# 
  2927   000F90                     LATH            equ	3984	;# 
  2928   000F91                     LATJ            equ	3985	;# 
  2929   000F92                     TRISA           equ	3986	;# 
  2930   000F92                     DDRA            equ	3986	;# 
  2931   000F93                     TRISB           equ	3987	;# 
  2932   000F93                     DDRB            equ	3987	;# 
  2933   000F94                     TRISC           equ	3988	;# 
  2934   000F94                     DDRC            equ	3988	;# 
  2935   000F95                     TRISD           equ	3989	;# 
  2936   000F95                     DDRD            equ	3989	;# 
  2937   000F96                     TRISE           equ	3990	;# 
  2938   000F96                     DDRE            equ	3990	;# 
  2939   000F97                     TRISF           equ	3991	;# 
  2940   000F97                     DDRF            equ	3991	;# 
  2941   000F98                     TRISG           equ	3992	;# 
  2942   000F98                     DDRG            equ	3992	;# 
  2943   000F99                     TRISH           equ	3993	;# 
  2944   000F99                     DDRH            equ	3993	;# 
  2945   000F9A                     TRISJ           equ	3994	;# 
  2946   000F9A                     DDRJ            equ	3994	;# 
  2947   000F9B                     OSCTUNE         equ	3995	;# 
  2948   000F9C                     MEMCON          equ	3996	;# 
  2949   000F9D                     PIE1            equ	3997	;# 
  2950   000F9E                     PIR1            equ	3998	;# 
  2951   000F9F                     IPR1            equ	3999	;# 
  2952   000FA0                     PIE2            equ	4000	;# 
  2953   000FA1                     PIR2            equ	4001	;# 
  2954   000FA2                     IPR2            equ	4002	;# 
  2955   000FA3                     PIE3            equ	4003	;# 
  2956   000FA4                     PIR3            equ	4004	;# 
  2957   000FA5                     IPR3            equ	4005	;# 
  2958   000FA6                     EECON1          equ	4006	;# 
  2959   000FA7                     EECON2          equ	4007	;# 
  2960   000FAB                     RCSTA1          equ	4011	;# 
  2961   000FAB                     RCSTA           equ	4011	;# 
  2962   000FAC                     TXSTA1          equ	4012	;# 
  2963   000FAC                     TXSTA           equ	4012	;# 
  2964   000FAD                     TXREG1          equ	4013	;# 
  2965   000FAD                     TXREG           equ	4013	;# 
  2966   000FAE                     RCREG1          equ	4014	;# 
  2967   000FAE                     RCREG           equ	4014	;# 
  2968   000FAF                     SPBRG1          equ	4015	;# 
  2969   000FAF                     SPBRG           equ	4015	;# 
  2970   000FB0                     PSPCON          equ	4016	;# 
  2971   000FB1                     T3CON           equ	4017	;# 
  2972   000FB2                     TMR3            equ	4018	;# 
  2973   000FB2                     TMR3L           equ	4018	;# 
  2974   000FB3                     TMR3H           equ	4019	;# 
  2975   000FB4                     CMCON           equ	4020	;# 
  2976   000FB5                     CVRCON          equ	4021	;# 
  2977   000FB6                     ECCP1AS         equ	4022	;# 
  2978   000FB7                     CCP3CON         equ	4023	;# 
  2979   000FB7                     ECCP3CON        equ	4023	;# 
  2980   000FB8                     CCPR3           equ	4024	;# 
  2981   000FB8                     CCPR3L          equ	4024	;# 
  2982   000FB9                     CCPR3H          equ	4025	;# 
  2983   000FBA                     CCP2CON         equ	4026	;# 
  2984   000FBA                     ECCP2CON        equ	4026	;# 
  2985   000FBB                     CCPR2           equ	4027	;# 
  2986   000FBB                     CCPR2L          equ	4027	;# 
  2987   000FBC                     CCPR2H          equ	4028	;# 
  2988   000FBD                     CCP1CON         equ	4029	;# 
  2989   000FBD                     ECCP1CON        equ	4029	;# 
  2990   000FBE                     CCPR1           equ	4030	;# 
  2991   000FBE                     CCPR1L          equ	4030	;# 
  2992   000FBF                     CCPR1H          equ	4031	;# 
  2993   000FC0                     ADCON2          equ	4032	;# 
  2994   000FC1                     ADCON1          equ	4033	;# 
  2995   000FC2                     ADCON0          equ	4034	;# 
  2996   000FC3                     ADRES           equ	4035	;# 
  2997   000FC3                     ADRESL          equ	4035	;# 
  2998   000FC4                     ADRESH          equ	4036	;# 
  2999   000FC5                     SSP1CON2        equ	4037	;# 
  3000   000FC5                     SSPCON2         equ	4037	;# 
  3001   000FC6                     SSP1CON1        equ	4038	;# 
  3002   000FC6                     SSPCON1         equ	4038	;# 
  3003   000FC7                     SSP1STAT        equ	4039	;# 
  3004   000FC7                     SSPSTAT         equ	4039	;# 
  3005   000FC8                     SSP1ADD         equ	4040	;# 
  3006   000FC8                     SSPADD          equ	4040	;# 
  3007   000FC9                     SSP1BUF         equ	4041	;# 
  3008   000FC9                     SSPBUF          equ	4041	;# 
  3009   000FCA                     T2CON           equ	4042	;# 
  3010   000FCB                     PR2             equ	4043	;# 
  3011   000FCC                     TMR2            equ	4044	;# 
  3012   000FCD                     T1CON           equ	4045	;# 
  3013   000FCE                     TMR1            equ	4046	;# 
  3014   000FCE                     TMR1L           equ	4046	;# 
  3015   000FCF                     TMR1H           equ	4047	;# 
  3016   000FD0                     RCON            equ	4048	;# 
  3017   000FD1                     WDTCON          equ	4049	;# 
  3018   000FD2                     ECON1           equ	4050	;# 
  3019   000FD3                     OSCCON          equ	4051	;# 
  3020   000FD5                     T0CON           equ	4053	;# 
  3021   000FD6                     TMR0            equ	4054	;# 
  3022   000FD6                     TMR0L           equ	4054	;# 
  3023   000FD7                     TMR0H           equ	4055	;# 
  3024   000FD8                     STATUS          equ	4056	;# 
  3025   000FD9                     FSR2            equ	4057	;# 
  3026   000FD9                     FSR2L           equ	4057	;# 
  3027   000FDA                     FSR2H           equ	4058	;# 
  3028   000FDB                     PLUSW2          equ	4059	;# 
  3029   000FDC                     PREINC2         equ	4060	;# 
  3030   000FDD                     POSTDEC2        equ	4061	;# 
  3031   000FDE                     POSTINC2        equ	4062	;# 
  3032   000FDF                     INDF2           equ	4063	;# 
  3033   000FE0                     BSR             equ	4064	;# 
  3034   000FE1                     FSR1            equ	4065	;# 
  3035   000FE1                     FSR1L           equ	4065	;# 
  3036   000FE2                     FSR1H           equ	4066	;# 
  3037   000FE3                     PLUSW1          equ	4067	;# 
  3038   000FE4                     PREINC1         equ	4068	;# 
  3039   000FE5                     POSTDEC1        equ	4069	;# 
  3040   000FE6                     POSTINC1        equ	4070	;# 
  3041   000FE7                     INDF1           equ	4071	;# 
  3042   000FE8                     WREG            equ	4072	;# 
  3043   000FE9                     FSR0            equ	4073	;# 
  3044   000FE9                     FSR0L           equ	4073	;# 
  3045   000FEA                     FSR0H           equ	4074	;# 
  3046   000FEB                     PLUSW0          equ	4075	;# 
  3047   000FEC                     PREINC0         equ	4076	;# 
  3048   000FED                     POSTDEC0        equ	4077	;# 
  3049   000FEE                     POSTINC0        equ	4078	;# 
  3050   000FEF                     INDF0           equ	4079	;# 
  3051   000FF0                     INTCON3         equ	4080	;# 
  3052   000FF1                     INTCON2         equ	4081	;# 
  3053   000FF2                     INTCON          equ	4082	;# 
  3054   000FF3                     PROD            equ	4083	;# 
  3055   000FF3                     PRODL           equ	4083	;# 
  3056   000FF4                     PRODH           equ	4084	;# 
  3057   000FF5                     TABLAT          equ	4085	;# 
  3058   000FF6                     TBLPTR          equ	4086	;# 
  3059   000FF6                     TBLPTRL         equ	4086	;# 
  3060   000FF7                     TBLPTRH         equ	4087	;# 
  3061   000FF8                     TBLPTRU         equ	4088	;# 
  3062   000FF9                     PCLAT           equ	4089	;# 
  3063   000FF9                     PC              equ	4089	;# 
  3064   000FF9                     PCL             equ	4089	;# 
  3065   000FFA                     PCLATH          equ	4090	;# 
  3066   000FFB                     PCLATU          equ	4091	;# 
  3067   000FFC                     STKPTR          equ	4092	;# 
  3068   000FFD                     TOS             equ	4093	;# 
  3069   000FFD                     TOSL            equ	4093	;# 
  3070   000FFE                     TOSH            equ	4094	;# 
  3071   000FFF                     TOSU            equ	4095	;# 
  3072                           
  3073 ;;_filterObj	offset	0
  3074 ;;_maskObj	offset	6
  3075 ;;_rxObj	offset	0
  3076 ;;_rxdata	offset	16
  3077 ;;_ev	offset	0
  3078 ;;_tmid	offset	6
  3079 ;;_processEvent	offset=-3 (param)
  3080 ;;_id	offset=-4 (param)
  3081 ;;_delay	offset=-6 (param)
  3082 ;;_tm	offset	0
  3083 ;;_temp	offset	2
  3084 ;;_ev	offset=-6 (param)
  3085 ;;_inISR	offset=-7 (param)
  3086 ;;_tmid	offset=-9 (param)
  3087 ;;_i	offset	0
  3088 ;;_tm	offset=-2 (param)
  3089 ;;_ev	offset=-8 (param)
  3090 ;;_inISR	offset=-9 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_delay	offset=-4 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_me	offset=-2 (param)
  3095 ;;_processEvent	offset=-5 (param)
  3096 ;;_me	offset=-2 (param)
  3097 ;;_eventID	offset=-3 (param)
  3098 ;;_rxFlags	offset	0
  3099 ;;_rxObj	offset=-2 (param)
  3100 ;;_rxd	offset=-4 (param)
  3101 ;;_temp32	offset	0
  3102 ;;_ba	offset	4
  3103 ;;_fifoReg	offset	80
  3104 ;;_ciFifoCon	offset	92
  3105 ;;_myReg	offset	97
  3106 ;;_ciFifoUa	offset	101
  3107 ;;_a	offset	105
  3108 ;;_i	offset	107
  3109 ;;_n	offset	108
  3110 ;;_spiTransferError	offset	109
  3111 ;;_channel	offset=-1 (param)
  3112 ;;_rxObj	offset=-3 (param)
  3113 ;;_rxd	offset=-5 (param)
  3114 ;;_nBytes	offset=-6 (param)
  3115 ;;_ciFifoCon	offset	0
  3116 ;;_a	offset	5
  3117 ;;_spiTransferError	offset	7
  3118 ;;_channel	offset=-1 (param)
  3119 ;;_i	offset	0
  3120 ;;_spiTransferSize	offset	2
  3121 ;;_spiTransferError	offset	4
  3122 ;;_address	offset=-2 (param)
  3123 ;;_rxd	offset=-4 (param)
  3124 ;;_nBytes	offset=-6 (param)
  3125 ;;_ciFifoSta	offset	0
  3126 ;;_a	offset	4
  3127 ;;_spiTransferError	offset	6
  3128 ;;_channel	offset=-1 (param)
  3129 ;;_flags	offset=-3 (param)
  3130 ;;_i	offset	0
  3131 ;;_me	offset=-2 (param)
  3132 ;;_ev	offset	0
  3133 ;;_ev	offset=-2 (param)
  3134 ;;_txMsg	offset	0
  3135 ;;_txdata	offset	16
  3136 ;;_percent	offset=-1 (param)
  3137 ;;_starter	offset=-2 (param)
  3138 ;;_handleAccelerationCAN$5709	offset	0
  3139 ;;_handleAccelerationCAN$5708	offset	2
  3140 ;;_txMsg	offset	4
  3141 ;;_txdata	offset	20
  3142 ;;_requestedPower	offset	28
  3143 ;;_ev	offset=-2 (param)
  3144 ;;_txMsg	offset	0
  3145 ;;_txdata	offset	16
  3146 ;;_light	offset=-1 (param)
  3147 ;;_txMsg	offset	0
  3148 ;;_txdata	offset	16
  3149 ;;_light	offset=-1 (param)
  3150 ;;_txFlags	offset	0
  3151 ;;_txObj	offset=-2 (param)
  3152 ;;_txd	offset=-4 (param)
  3153 ;;_temp32	offset	0
  3154 ;;_txBuffer	offset	4
  3155 ;;_fifoReg	offset	80
  3156 ;;_ciFifoCon	offset	92
  3157 ;;_a	offset	97
  3158 ;;_ciFifoUa	offset	101
  3159 ;;_dataBytesInObject	offset	105
  3160 ;;_n	offset	109
  3161 ;;_spiTransferError	offset	111
  3162 ;;_i	offset	112
  3163 ;;_j	offset	113
  3164 ;;_channel	offset=-1 (param)
  3165 ;;_txObj	offset=-3 (param)
  3166 ;;_txd	offset=-5 (param)
  3167 ;;_txdNumBytes	offset=-9 (param)
  3168 ;;_flush	offset=-10 (param)
  3169 ;;_i	offset	0
  3170 ;;_spiTransferSize	offset	2
  3171 ;;_spiTransferError	offset	4
  3172 ;;_address	offset=-2 (param)
  3173 ;;_txd	offset=-4 (param)
  3174 ;;_nBytes	offset=-6 (param)
  3175 ;;_ciFifoCon	offset	0
  3176 ;;_a	offset	5
  3177 ;;_spiTransferError	offset	7
  3178 ;;_channel	offset=-1 (param)
  3179 ;;_flush	offset=-2 (param)
  3180 ;;_w	offset	0
  3181 ;;_i	offset	4
  3182 ;;_j	offset	6
  3183 ;;_spiTransferSize	offset	8
  3184 ;;_n	offset	10
  3185 ;;_spiTransferError	offset	12
  3186 ;;_address	offset=-2 (param)
  3187 ;;_rxd	offset=-4 (param)
  3188 ;;_nWords	offset=-6 (param)
  3189 ;;_dataBytesInObject	offset	0
  3190 ;;_dlc	offset=-1 (param)
  3191 ;;_ciFifoSta	offset	0
  3192 ;;_a	offset	4
  3193 ;;_spiTransferError	offset	6
  3194 ;;_channel	offset=-1 (param)
  3195 ;;_flags	offset=-3 (param)
  3196 ;;_ev	offset	0
  3197 ;;_inISR	offset=-6 (param)
  3198 ;;_sign	offset	0
  3199 ;;_counter	offset	1
  3200 ;;_dividend	offset=-2 (param)
  3201 ;;_divisor	offset=-4 (param)
  3202 ;;_inISR	offset=-1 (param)
  3203 ;;_inISR	offset=-1 (param)
  3204 ;;_InterruptHandler	offset=-3 (param)
  3205 ;;_filter	offset=-1 (param)
  3206 ;;_fObj	offset=-3 (param)
  3207 ;;_mObj	offset=-5 (param)
  3208 ;;_a	offset	0
  3209 ;;_fCtrl	offset	2
  3210 ;;_filter	offset=-1 (param)
  3211 ;;_channel	offset=-2 (param)
  3212 ;;_enable	offset=-3 (param)
  3213 ;;_temp32	offset	0
  3214 ;;_fObj	offset	4
  3215 ;;_a	offset	10
  3216 ;;_filter	offset=-1 (param)
  3217 ;;_id	offset=-3 (param)
  3218 ;;_temp32	offset	0
  3219 ;;_mObj	offset	4
  3220 ;;_a	offset	10
  3221 ;;_filter	offset=-1 (param)
  3222 ;;_mask	offset=-3 (param)
  3223 ;;_EXIDE	offset=-4 (param)
  3224 ;;_a	offset	0
  3225 ;;_spiTransferError	offset	2
  3226 ;;_fCtrl	offset	3
  3227 ;;_filter	offset=-1 (param)
  3228 ;;_txqConfig	offset	0
  3229 ;;_config	offset	4
  3230 ;;_rxfConfig	offset	7
  3231 ;;_txfConfig	offset	10
  3232 ;;_tefConfig	offset	12
  3233 ;;_bitTime	offset=-1 (param)
  3234 ;;_withISR	offset=-2 (param)
  3235 ;;_ciFifoCon	offset	0
  3236 ;;_config	offset=-2 (param)
  3237 ;;_ciFifoCon	offset	0
  3238 ;;_config	offset=-2 (param)
  3239 ;;_ciFifoCon	offset	0
  3240 ;;_config	offset=-2 (param)
  3241 ;;_ciFifoCon	offset	0
  3242 ;;_a	offset	5
  3243 ;;_channel	offset=-1 (param)
  3244 ;;_config	offset=-3 (param)
  3245 ;;_ts	offset=-4 (param)
  3246 ;;_ps	offset=-2 (param)
  3247 ;;_d	offset	0
  3248 ;;_spiTransferError	offset	1
  3249 ;;_ciTefCon	offset	0
  3250 ;;_config	offset=-2 (param)
  3251 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3252 ;;_ciFifoCon	offset	0
  3253 ;;_a	offset	5
  3254 ;;_channel	offset=-1 (param)
  3255 ;;_config	offset=-3 (param)
  3256 ;;_d	offset	0
  3257 ;;_spiTransferError	offset	1
  3258 ;;_opMode	offset=-1 (param)
  3259 ;;_spiTransferError	offset	0
  3260 ;;_address	offset=-2 (param)
  3261 ;;_txd	offset=-3 (param)
  3262 ;;_spiTransferError	offset	0
  3263 ;;_address	offset=-2 (param)
  3264 ;;_rxd	offset=-4 (param)
  3265 ;;_intEnables	offset	0
  3266 ;;_index	offset=-1 (param)
  3267 ;;_flags	offset=-3 (param)
  3268 ;;_spiTransferSize	offset	0
  3269 ;;_i	offset	2
  3270 ;;_spiTransferError	offset	3
  3271 ;;_address	offset=-2 (param)
  3272 ;;_txd	offset=-4 (param)
  3273 ;;_ciCon	offset	0
  3274 ;;_config	offset=-2 (param)
  3275 ;;_ciCon	offset	0
  3276 ;;_config	offset=-2 (param)
  3277 ;;_ciNbtcfg	offset	0
  3278 ;;_bitTime	offset=-1 (param)
  3279 ;;_spiTransferSize	offset	0
  3280 ;;_i	offset	2
  3281 ;;_spiTransferError	offset	3
  3282 ;;_address	offset=-2 (param)
  3283 ;;_txd	offset=-6 (param)
  3284 ;;_dummy	offset	0
  3285 ;;_txPtr	offset=-2 (param)
  3286 ;;_rxPtr	offset=-4 (param)
  3287 ;;_size	offset=-6 (param)
  3288 ;;_dummy	offset	0
  3289 ;;_i	offset	1
  3290 ;;_id	offset=-1 (param)
  3291 ;;_inISR	offset=-2 (param)
  3292 ;;_me	offset=-2 (param)
  3293 ;;_tm	offset	0
  3294 ;;_temp	offset	2
  3295 ;;_ev	offset=-6 (param)
  3296 ;;_inISR	offset=-7 (param)
  3297 ;;_tmid	offset=-9 (param)
  3298 ;;_sign	offset	0
  3299 ;;_counter	offset	1
  3300 ;;_dividend	offset=-2 (param)
  3301 ;;_divisor	offset=-4 (param)
  3302 ;;_i	offset	0
  3303 ;;_tm	offset=-2 (param)
  3304 ;;_ev	offset=-8 (param)
  3305 ;;_inISR	offset=-9 (param)
  3306 ;;_inISR	offset=-1 (param)
  3307 ;;_inISR	offset=-1 (param)
  3308 ;;_me	offset=-2 (param)
  3309 ;;_delay	offset=-4 (param)
  3310 ;;_me	offset=-2 (param)
  3311                           
  3312                           	psect	idataCOMRAM
  3313   014CBC                     __pidataCOMRAM:
  3314                           	callstack 0
  3315                           
  3316                           ;initializer for motorControl_Process@oldState
  3317   014CBC  01                 	db	1
  3318                           
  3319                           ;initializer for motorControl_Process@state
  3320   014CBD  01                 	db	1
  3321                           
  3322                           ;initializer for handleAccelerationCAN@lastPower
  3323   014CBE  0A                 	db	10
  3324                           
  3325                           	psect	mediumconst
  3326   00FF8C                     __pmediumconst:
  3327                           	callstack 0
  3328   00FF8C  00                 	db	0
  3329   00FF8D                     _canControlResetValues:
  3330                           	callstack 0
  3331   00FF8D  0760               	dw	1888
  3332   00FF8F  0498               	dw	1176
  3333   00FF91  0F0F               	dw	3855
  3334   00FF93  003E               	dw	62
  3335   00FF95  0303               	dw	771
  3336   00FF97  000E               	dw	14
  3337   00FF99  1000               	dw	4096
  3338   00FF9B  0002               	dw	2
  3339   00FF9D  0000               	dw	0
  3340   00FF9F  0000               	dw	0
  3341   00FFA1  0000               	dw	0
  3342   00FFA3  0000               	dw	0
  3343   00FFA5  0040               	dw	64
  3344   00FFA7  4040               	dw	16448
  3345   00FFA9  0000               	dw	0
  3346   00FFAB  0000               	dw	0
  3347   00FFAD  0000               	dw	0
  3348   00FFAF  0000               	dw	0
  3349   00FFB1  0000               	dw	0
  3350   00FFB3  0000               	dw	0
  3351   00FFB5  0000               	dw	0
  3352   00FFB7  0000               	dw	0
  3353   00FFB9  0000               	dw	0
  3354   00FFBB  0000               	dw	0
  3355   00FFBD  0000               	dw	0
  3356   00FFBF  0000               	dw	0
  3357   00FFC1  0000               	dw	0
  3358   00FFC3  0020               	dw	32
  3359   00FFC5  0000               	dw	0
  3360   00FFC7  0000               	dw	0
  3361   00FFC9  0000               	dw	0
  3362   00FFCB  0000               	dw	0
  3363   00FFCD  0400               	dw	1024
  3364   00FFCF  0000               	dw	0
  3365   00FFD1  0000               	dw	0
  3366   00FFD3  0000               	dw	0
  3367   00FFD5  0000               	dw	0
  3368   00FFD7  0000               	dw	0
  3369   00FFD9  0000               	dw	0
  3370   00FFDB  0000               	dw	0
  3371   00FFDD                     __end_of_canControlResetValues:
  3372                           	callstack 0
  3373   00FFDD                     _canFifoResetValues:
  3374                           	callstack 0
  3375   00FFDD  0400               	dw	1024
  3376   00FFDF  0060               	dw	96
  3377   00FFE1  0000               	dw	0
  3378   00FFE3  0000               	dw	0
  3379   00FFE5  0000               	dw	0
  3380   00FFE7  0000               	dw	0
  3381   00FFE9                     __end_of_canFifoResetValues:
  3382                           	callstack 0
  3383   00FFE9                     _spi2_configuration:
  3384                           	callstack 0
  3385   00FFE9  01                 	db	1
  3386   00FFEA  40                 	db	64
  3387   00FFEB  00                 	db	0
  3388   00FFEC  00                 	db	0
  3389   00FFED                     __end_of_spi2_configuration:
  3390                           	callstack 0
  3391   00FFED                     STR_1:
  3392   00FFED  20                 	db	32
  3393   00FFEE  20                 	db	32
  3394   00FFEF  20                 	db	32
  3395   00FFF0  20                 	db	32
  3396   00FFF1  20                 	db	32
  3397   00FFF2  20                 	db	32
  3398   00FFF3  20                 	db	32
  3399   00FFF4  20                 	db	32
  3400   00FFF5  20                 	db	32
  3401   00FFF6  20                 	db	32
  3402   00FFF7  20                 	db	32
  3403   00FFF8  20                 	db	32
  3404   00FFF9  20                 	db	32
  3405   00FFFA  20                 	db	32
  3406   00FFFB  20                 	db	32
  3407   00FFFC  20                 	db	32
  3408   00FFFD  00                 	db	0
  3409   00FFED                     STR_2           equ	STR_1
  3410   00FFFE  00                 	db	0	; dummy byte at the end
  3411   000003                     __activetblptr  equ	3
  3412                           
  3413                           	psect	nvCOMRAM
  3414   00005A                     __pnvCOMRAM:
  3415                           	callstack 0
  3416   00005A                     _TMR0_InterruptHandler:
  3417                           	callstack 0
  3418   00005A                     	ds	3
  3419   000F62                     _SSP2CON2       set	3938
  3420   000F63                     _SSP2CON1bits   set	3939
  3421   000F65                     _SSP2ADD        set	3941
  3422   000F63                     _SSP2CON1       set	3939
  3423   000F64                     _SSP2STAT       set	3940
  3424   000FD5                     _T0CON          set	4053
  3425   000FD6                     _TMR0L          set	4054
  3426   000FD7                     _TMR0H          set	4055
  3427   000FD5                     _T0CONbits      set	4053
  3428   000FF2                     _INTCONbits     set	4082
  3429   000FD0                     _RCONbits       set	4048
  3430   000FC1                     _ADCON1bits     set	4033
  3431   000F95                     _TRISD          set	3989
  3432   000F94                     _TRISC          set	3988
  3433   000F99                     _TRISH          set	3993
  3434   000F93                     _TRISB          set	3987
  3435   000F98                     _TRISG          set	3992
  3436   000F92                     _TRISA          set	3986
  3437   000F97                     _TRISF          set	3991
  3438   000F96                     _TRISE          set	3990
  3439   000F90                     _LATH           set	3984
  3440   000F8B                     _LATC           set	3979
  3441   000F8F                     _LATG           set	3983
  3442   000F8A                     _LATB           set	3978
  3443   000F8E                     _LATF           set	3982
  3444   000F89                     _LATA           set	3977
  3445   000F8C                     _LATD           set	3980
  3446   000F91                     _LATJ           set	3985
  3447   000F8D                     _LATE           set	3981
  3448   000F9B                     _OSCTUNE        set	3995
  3449   000FD3                     _OSCCON         set	4051
  3450   000F9A                     _TRISJ          set	3994
  3451   000F95                     _TRISDbits      set	3989
  3452   000F98                     _TRISGbits      set	3992
  3453   000F66                     _SSP2BUF        set	3942
  3454   000F64                     _SSP2STATbits   set	3940
  3455   000F8F                     _LATGbits       set	3983
  3456                           
  3457                           ; #config settings
  3458                           
  3459                           	psect	cinit
  3460   014750                     __pcinit:
  3461                           	callstack 0
  3462   014750                     start_initialization:
  3463                           	callstack 0
  3464   014750                     __initialization:
  3465                           	callstack 0
  3466                           
  3467                           ; Initialize objects allocated to COMRAM (3 bytes)
  3468                           ; load TBLPTR registers with __pidataCOMRAM
  3469   014750  0EBC               	movlw	low __pidataCOMRAM
  3470   014752  6EF6               	movwf	tblptrl,c
  3471   014754  0E4C               	movlw	high __pidataCOMRAM
  3472   014756  6EF7               	movwf	tblptrh,c
  3473   014758  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  3474   01475A  6EF8               	movwf	tblptru,c
  3475   01475C  0009               	tblrd		*+	;fetch initializer
  3476   01475E  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  3477   014762  0009               	tblrd		*+	;fetch initializer
  3478   014764  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  3479   014768  0009               	tblrd		*+	;fetch initializer
  3480   01476A  CFF5 F05F          	movff	tablat,__pdataCOMRAM+2
  3481                           
  3482                           ; Clear objects allocated to BIGRAM (282 bytes)
  3483   01476E  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3484   014772  EE21 F01A          	lfsr	2,282
  3485   014776                     clear_0:
  3486   014776  6AEE               	clrf	postinc0,c
  3487   014778  50DD               	movf	postdec2,w,c
  3488   01477A  50D9               	movf	fsr2l,w,c
  3489   01477C  E1FC               	bnz	clear_0
  3490   01477E  50DA               	movf	fsr2h,w,c
  3491   014780  E1FA               	bnz	clear_0
  3492                           
  3493                           ; Clear objects allocated to BANK2 (200 bytes)
  3494   014782  EE02  F000         	lfsr	0,__pbssBANK2
  3495   014786  0EC8               	movlw	200
  3496   014788                     clear_1:
  3497   014788  6AEE               	clrf	postinc0,c
  3498   01478A  06E8               	decf	wreg,f,c
  3499   01478C  E1FD               	bnz	clear_1
  3500                           
  3501                           ; Clear objects allocated to BANK1 (200 bytes)
  3502   01478E  EE01  F000         	lfsr	0,__pbssBANK1
  3503   014792  0EC8               	movlw	200
  3504   014794                     clear_2:
  3505   014794  6AEE               	clrf	postinc0,c
  3506   014796  06E8               	decf	wreg,f,c
  3507   014798  E1FD               	bnz	clear_2
  3508                           
  3509                           ; Clear objects allocated to BANK0 (64 bytes)
  3510   01479A  EE00  F060         	lfsr	0,__pbssBANK0
  3511   01479E  0E40               	movlw	64
  3512   0147A0                     clear_3:
  3513   0147A0  6AEE               	clrf	postinc0,c
  3514   0147A2  06E8               	decf	wreg,f,c
  3515   0147A4  E1FD               	bnz	clear_3
  3516                           
  3517                           ; Clear objects allocated to COMRAM (41 bytes)
  3518   0147A6  EE00  F001         	lfsr	0,__pbssCOMRAM
  3519   0147AA  0E29               	movlw	41
  3520   0147AC                     clear_4:
  3521   0147AC  6AEE               	clrf	postinc0,c
  3522   0147AE  06E8               	decf	wreg,f,c
  3523   0147B0  E1FD               	bnz	clear_4
  3524   0147B2                     end_of_initialization:
  3525                           	callstack 0
  3526   0147B2                     __end_of__initialization:
  3527                           	callstack 0
  3528   0147B2  0100               	movlb	0
  3529   0147B4  EF09  F09B         	goto	_main	;jump to C main() function
  3530                           
  3531                           	psect	bssCOMRAM
  3532   000001                     __pbssCOMRAM:
  3533                           	callstack 0
  3534   000001                     _carState:
  3535                           	callstack 0
  3536   000001                     	ds	27
  3537   00001C                     _dummy:
  3538                           	callstack 0
  3539   00001C                     	ds	4
  3540   000020                     TMR0_ISR@CountCallBack:
  3541                           	callstack 0
  3542   000020                     	ds	2
  3543   000022                     _timer0ReloadVal:
  3544                           	callstack 0
  3545   000022                     	ds	2
  3546   000024                     lightControl_Process@oldState:
  3547                           	callstack 0
  3548   000024                     	ds	1
  3549   000025                     lightControl_Process@state:
  3550                           	callstack 0
  3551   000025                     	ds	1
  3552   000026                     lightContol_BackLight@lastLight:
  3553                           	callstack 0
  3554   000026                     	ds	1
  3555   000027                     lightContol_FrontLight@lastLight:
  3556                           	callstack 0
  3557   000027                     	ds	1
  3558   000028                     motorControl@lastStarter:
  3559                           	callstack 0
  3560   000028                     	ds	1
  3561   000029                     motorControl@lastPercent:
  3562                           	callstack 0
  3563   000029                     	ds	1
  3564                           
  3565                           	psect	dataCOMRAM
  3566   00005D                     __pdataCOMRAM:
  3567                           	callstack 0
  3568   00005D                     motorControl_Process@oldState:
  3569                           	callstack 0
  3570   00005D                     	ds	1
  3571   00005E                     motorControl_Process@state:
  3572                           	callstack 0
  3573   00005E                     	ds	1
  3574   00005F                     handleAccelerationCAN@lastPower:
  3575                           	callstack 0
  3576   00005F                     	ds	1
  3577                           
  3578                           	psect	bssBANK0
  3579   000060                     __pbssBANK0:
  3580                           	callstack 0
  3581   000060                     lightContol_BackLight@F6688:
  3582                           	callstack 0
  3583   000060                     	ds	16
  3584   000070                     lightContol_FrontLight@F6682:
  3585                           	callstack 0
  3586   000070                     	ds	16
  3587   000080                     motorControl@F6676:
  3588                           	callstack 0
  3589   000080                     	ds	16
  3590   000090                     handleAccelerationCAN@F6656:
  3591                           	callstack 0
  3592   000090                     	ds	16
  3593                           
  3594                           	psect	bssBANK1
  3595   000100                     __pbssBANK1:
  3596                           	callstack 0
  3597   000100                     _spiTransmitBuffer:
  3598                           	callstack 0
  3599   000100                     	ds	200
  3600                           
  3601                           	psect	bssBANK2
  3602   000200                     __pbssBANK2:
  3603                           	callstack 0
  3604   000200                     _spiReceiveBuffer:
  3605                           	callstack 0
  3606   000200                     	ds	200
  3607                           
  3608                           	psect	bssBIGRAM
  3609   0002C8                     __pbssBIGRAM:
  3610                           	callstack 0
  3611   0002C8                     _theXF:
  3612                           	callstack 0
  3613   0002C8                     	ds	282
  3614                           
  3615                           	psect	cstackCOMRAM
  3616   00004A                     __pcstackCOMRAM:
  3617                           	callstack 0
  3618   00004A                     ??_INTERRUPT_InterruptManager:
  3619                           
  3620                           ; 1 bytes @ 0x0
  3621   00004A                     	ds	16
  3622                           
  3623 ;;
  3624 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3625 ;;
  3626 ;; *************** function _main *****************
  3627 ;; Defined at:
  3628 ;;		line 56 in file "main.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  filterObj       6  [STACK] struct _CAN_FILTEROBJ_ID
  3633 ;;  maskObj         6  [STACK] struct _CAN_MASKOBJ_ID
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1  [STACK] void 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;Total ram usage:        0 bytes
  3648 ;; Hardware stack levels required when called: 15
  3649 ;; This function calls:
  3650 ;;		_CanInit
  3651 ;;		_CanSetFilter
  3652 ;;		_SYSTEM_Initialize
  3653 ;;		_TMR0_SetInterruptHandler
  3654 ;;		_XF_executeOnce
  3655 ;;		_XF_init
  3656 ;;		_XF_post
  3657 ;;		_updateCarState
  3658 ;; This function is called by:
  3659 ;;		Startup code after reset
  3660 ;; This function uses a reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text0
  3664   013612                     __ptext0:
  3665                           	callstack 0
  3666   013612                     _main:
  3667                           	callstack 0
  3668                           
  3669                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3670   013612  0E0C               	movlw	12
  3671   013614  26E1               	addwf	fsr1l,f,c
  3672   013616  0E00               	movlw	0
  3673   013618  22E2               	addwfc	fsr1h,f,c
  3674   01361A                     
  3675                           ;main.c: 58:     CAN_FILTEROBJ_ID filterObj;;main.c: 59:     CAN_MASKOBJ_ID maskObj;;mai
      +                          n.c: 62:     filterObj.ID = 1;
  3676   01361A  0E01               	movlw	1
  3677   01361C  6E32               	movwf	(btemp+8)^0,c
  3678   01361E  6A33               	clrf	(btemp+9)^0,c
  3679   013620  6A34               	clrf	(btemp+10)^0,c
  3680   013622  6A35               	clrf	(btemp+11)^0,c
  3681                           
  3682                           ;stkvar	_filterObj @ sp[(-12)+0]
  3683   013624  0EF4               	movlw	-12
  3684   013626  C032  FFE3         	movff	btemp+8,plusw1
  3685   01362A  0EF5               	movlw	-11
  3686   01362C  C033  FFE3         	movff	btemp+9,plusw1
  3687   013630  0EF6               	movlw	-10
  3688   013632  C034  FFE3         	movff	btemp+10,plusw1
  3689   013636  0EF7               	movlw	-9
  3690   013638  C035  FFE3         	movff	btemp+11,plusw1
  3691   01363C                     
  3692                           ;main.c: 63:     filterObj.SID11 = 0;
  3693                           ;stkvar	_filterObj @ sp[(-12)+0]
  3694   01363C  0EF8               	movlw	248
  3695   01363E  24E1               	addwf	fsr1l,w,c
  3696   013640  6ED9               	movwf	fsr2l,c
  3697   013642  0EFF               	movlw	255
  3698   013644  20E2               	addwfc	fsr1h,w,c
  3699   013646  6EDA               	movwf	fsr2h,c
  3700   013648  6ADF               	clrf	indf2,c
  3701   01364A                     
  3702                           ;main.c: 64:     filterObj.EXIDE = 0;
  3703                           ;stkvar	_filterObj @ sp[(-12)+0]
  3704   01364A  0EF9               	movlw	249
  3705   01364C  24E1               	addwf	fsr1l,w,c
  3706   01364E  6ED9               	movwf	fsr2l,c
  3707   013650  0EFF               	movlw	255
  3708   013652  20E2               	addwfc	fsr1h,w,c
  3709   013654  6EDA               	movwf	fsr2h,c
  3710   013656  6ADF               	clrf	indf2,c
  3711                           
  3712                           ;main.c: 66:     maskObj.MID = 0x00F;
  3713   013658  0E0F               	movlw	15
  3714   01365A  6E32               	movwf	(btemp+8)^0,c
  3715   01365C  6A33               	clrf	(btemp+9)^0,c
  3716   01365E  6A34               	clrf	(btemp+10)^0,c
  3717   013660  6A35               	clrf	(btemp+11)^0,c
  3718                           
  3719                           ;stkvar	_maskObj @ sp[(-12)+6]
  3720   013662  0EFA               	movlw	-6
  3721   013664  C032  FFE3         	movff	btemp+8,plusw1
  3722   013668  0EFB               	movlw	-5
  3723   01366A  C033  FFE3         	movff	btemp+9,plusw1
  3724   01366E  0EFC               	movlw	-4
  3725   013670  C034  FFE3         	movff	btemp+10,plusw1
  3726   013674  0EFD               	movlw	-3
  3727   013676  C035  FFE3         	movff	btemp+11,plusw1
  3728   01367A                     
  3729                           ;main.c: 67:     maskObj.MIDE = 1;
  3730                           ;stkvar	_maskObj @ sp[(-12)+6]
  3731   01367A  0EFF               	movlw	255
  3732   01367C  24E1               	addwf	fsr1l,w,c
  3733   01367E  6ED9               	movwf	fsr2l,c
  3734   013680  0EFF               	movlw	255
  3735   013682  20E2               	addwfc	fsr1h,w,c
  3736   013684  6EDA               	movwf	fsr2h,c
  3737   013686  0E01               	movlw	1
  3738   013688  6EDF               	movwf	indf2,c
  3739   01368A                     
  3740                           ;main.c: 68:     maskObj.MSID11 = 0;
  3741                           ;stkvar	_maskObj @ sp[(-12)+6]
  3742   01368A  0EFE               	movlw	254
  3743   01368C  24E1               	addwf	fsr1l,w,c
  3744   01368E  6ED9               	movwf	fsr2l,c
  3745   013690  0EFF               	movlw	255
  3746   013692  20E2               	addwfc	fsr1h,w,c
  3747   013694  6EDA               	movwf	fsr2h,c
  3748   013696  6ADF               	clrf	indf2,c
  3749   013698                     
  3750                           ;main.c: 69:     SYSTEM_Initialize();
  3751   013698  EC3F  F0A6         	call	_SYSTEM_Initialize	;wreg free
  3752   01369C                     
  3753                           ;main.c: 72:     CanInit(CAN_250K_500K, 0);
  3754   01369C  0E00               	movlw	0
  3755   01369E  6EE6               	movwf	postinc1,c
  3756   0136A0  0E08               	movlw	8
  3757   0136A2  6EE6               	movwf	postinc1,c
  3758   0136A4  EC77  F091         	call	_CanInit	;wreg free
  3759   0136A8                     
  3760                           ;main.c: 73:     CanSetFilter(CAN_FILTER0, &filterObj, &maskObj);
  3761                           ;stkvar	_maskObj @ sp[(-12)+6]
  3762   0136A8  0EFA               	movlw	250
  3763   0136AA  24E1               	addwf	fsr1l,w,c
  3764   0136AC  6E2A               	movwf	btemp^0,c
  3765   0136AE  0EFF               	movlw	255
  3766   0136B0  20E2               	addwfc	fsr1h,w,c
  3767   0136B2  6E2B               	movwf	(btemp+1)^0,c
  3768   0136B4  C02A  FFE6         	movff	btemp,postinc1
  3769   0136B8  C02B  FFE6         	movff	btemp+1,postinc1
  3770                           
  3771                           ;stkvar	_filterObj @ sp[(-14)+0]
  3772   0136BC  0EF2               	movlw	242
  3773   0136BE  24E1               	addwf	fsr1l,w,c
  3774   0136C0  6E2A               	movwf	btemp^0,c
  3775   0136C2  0EFF               	movlw	255
  3776   0136C4  20E2               	addwfc	fsr1h,w,c
  3777   0136C6  6E2B               	movwf	(btemp+1)^0,c
  3778   0136C8  C02A  FFE6         	movff	btemp,postinc1
  3779   0136CC  C02B  FFE6         	movff	btemp+1,postinc1
  3780   0136D0  0E00               	movlw	0
  3781   0136D2  6EE6               	movwf	postinc1,c
  3782   0136D4  EC73  F0A3         	call	_CanSetFilter	;wreg free
  3783   0136D8                     
  3784                           ;main.c: 75:     XF_init();
  3785   0136D8  EC4F  F097         	call	_XF_init	;wreg free
  3786   0136DC                     
  3787                           ;main.c: 77:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3788   0136DC  0E1C               	movlw	low _XF_decrementAndQueueTimers
  3789   0136DE  6EE6               	movwf	postinc1,c
  3790   0136E0  0E37               	movlw	high _XF_decrementAndQueueTimers
  3791   0136E2  6EE6               	movwf	postinc1,c
  3792   0136E4  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3793   0136E6  6EE6               	movwf	postinc1,c
  3794   0136E8  ECFB  F0A5         	call	_TMR0_SetInterruptHandler	;wreg free
  3795   0136EC                     
  3796                           ;main.c: 85:     (INTCONbits.GIE = 1);
  3797   0136EC  8EF2               	bsf	242,7,c	;volatile
  3798   0136EE                     
  3799                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  3800   0136EE  8CF2               	bsf	242,6,c	;volatile
  3801   0136F0                     
  3802                           ;main.c: 95:     XF_post(lightControl_Process,E_INIT,0);
  3803   0136F0  0E00               	movlw	0
  3804   0136F2  6EE6               	movwf	postinc1,c
  3805   0136F4  0E00               	movlw	0
  3806   0136F6  6EE6               	movwf	postinc1,c
  3807   0136F8  0E01               	movlw	1
  3808   0136FA  6EE6               	movwf	postinc1,c
  3809   0136FC  0EDA               	movlw	low _lightControl_Process
  3810   0136FE  6EE6               	movwf	postinc1,c
  3811   013700  0E26               	movlw	high _lightControl_Process
  3812   013702  6EE6               	movwf	postinc1,c
  3813   013704  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3814   013706  6EE6               	movwf	postinc1,c
  3815   013708  ECD5  F09D         	call	_XF_post	;wreg free
  3816   01370C                     l5539:
  3817                           
  3818                           ;main.c: 97:     {;main.c: 98:         updateCarState();
  3819   01370C  EC56  F090         	call	_updateCarState	;wreg free
  3820   013710                     
  3821                           ;main.c: 99:         XF_executeOnce();
  3822   013710  ECAE  F0A2         	call	_XF_executeOnce	;wreg free
  3823   013714  EF86  F09B         	goto	l5539
  3824   013718  EF57  F000         	goto	start
  3825   01371C                     __end_of_main:
  3826                           	callstack 0
  3827                           
  3828 ;; *************** function _updateCarState *****************
  3829 ;; Defined at:
  3830 ;;		line 305 in file "carFunctions.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3835 ;;  rxdata          8  [STACK] unsigned char [8]
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1  [STACK] void 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used: 1
  3851 ;; Hardware stack levels required when called: 12
  3852 ;; This function calls:
  3853 ;;		_CanReceive
  3854 ;;		_XF_post
  3855 ;; This function is called by:
  3856 ;;		_main
  3857 ;; This function uses a reentrant model
  3858 ;;
  3859                           
  3860                           	psect	text1
  3861   0120AC                     __ptext1:
  3862                           	callstack 0
  3863   0120AC                     _updateCarState:
  3864                           	callstack 0
  3865                           
  3866                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3867   0120AC  0E18               	movlw	24
  3868   0120AE  26E1               	addwf	fsr1l,f,c
  3869   0120B0  0E00               	movlw	0
  3870   0120B2  22E2               	addwfc	fsr1h,f,c
  3871   0120B4                     
  3872                           ;carFunctions.c: 308:      CAN_RX_MSGOBJ rxObj;;carFunctions.c: 309:      uint8_t rxdata
      +                          [8];;carFunctions.c: 311:      if (CanReceive(&rxObj, rxdata) == 0)
  3873                           ;stkvar	_rxdata @ sp[(-24)+16]
  3874   0120B4  0EF8               	movlw	248
  3875   0120B6  24E1               	addwf	fsr1l,w,c
  3876   0120B8  6E2A               	movwf	btemp^0,c
  3877   0120BA  0EFF               	movlw	255
  3878   0120BC  20E2               	addwfc	fsr1h,w,c
  3879   0120BE  6E2B               	movwf	(btemp+1)^0,c
  3880   0120C0  C02A  FFE6         	movff	btemp,postinc1
  3881   0120C4  C02B  FFE6         	movff	btemp+1,postinc1
  3882                           
  3883                           ;stkvar	_rxObj @ sp[(-26)+0]
  3884   0120C8  0EE6               	movlw	230
  3885   0120CA  24E1               	addwf	fsr1l,w,c
  3886   0120CC  6E2A               	movwf	btemp^0,c
  3887   0120CE  0EFF               	movlw	255
  3888   0120D0  20E2               	addwfc	fsr1h,w,c
  3889   0120D2  6E2B               	movwf	(btemp+1)^0,c
  3890   0120D4  C02A  FFE6         	movff	btemp,postinc1
  3891   0120D8  C02B  FFE6         	movff	btemp+1,postinc1
  3892   0120DC  ECDC  F0A3         	call	_CanReceive	;wreg free
  3893   0120E0  502A               	movf	btemp^0,w,c
  3894   0120E2  A4D8               	btfss	status,2,c
  3895   0120E4  EF76  F090         	goto	u3211
  3896   0120E8  EF78  F090         	goto	u3210
  3897   0120EC                     u3211:
  3898   0120EC  EF72  F091         	goto	l1554
  3899   0120F0                     u3210:
  3900   0120F0  EF34  F091         	goto	l5489
  3901   0120F4                     l5459:
  3902                           
  3903                           ;carFunctions.c: 317:                  carState.contactKey = rxdata[0];
  3904                           ;stkvar	_rxdata @ sp[(-24)+16]
  3905   0120F4  0EF8               	movlw	-8
  3906   0120F6  CFE3 F00F          	movff	plusw1,_carState+14
  3907   0120FA                     
  3908                           ;carFunctions.c: 319:                  if (rxdata[0] == 0)
  3909                           ;stkvar	_rxdata @ sp[(-24)+16]
  3910   0120FA  0EF8               	movlw	-8
  3911   0120FC  50E3               	movf	plusw1,w,c
  3912   0120FE  A4D8               	btfss	status,2,c
  3913   012100  EF84  F090         	goto	u3221
  3914   012104  EF86  F090         	goto	u3220
  3915   012108                     u3221:
  3916   012108  EFA4  F090         	goto	l5465
  3917   01210C                     u3220:
  3918   01210C                     
  3919                           ;carFunctions.c: 320:                  {;carFunctions.c: 321:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_OFF, 0);
  3920   01210C  0E00               	movlw	0
  3921   01210E  6EE6               	movwf	postinc1,c
  3922   012110  0E00               	movlw	0
  3923   012112  6EE6               	movwf	postinc1,c
  3924   012114  0E02               	movlw	2
  3925   012116  6EE6               	movwf	postinc1,c
  3926   012118  0EDA               	movlw	low _lightControl_Process
  3927   01211A  6EE6               	movwf	postinc1,c
  3928   01211C  0E26               	movlw	high _lightControl_Process
  3929   01211E  6EE6               	movwf	postinc1,c
  3930   012120  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3931   012122  6EE6               	movwf	postinc1,c
  3932   012124  ECD5  F09D         	call	_XF_post	;wreg free
  3933                           
  3934                           ;carFunctions.c: 322:                      XF_post(motorControl_Process, E_CONTACT_OFF, 
      +                          0);
  3935   012128  0E00               	movlw	0
  3936   01212A  6EE6               	movwf	postinc1,c
  3937   01212C  0E00               	movlw	0
  3938   01212E  6EE6               	movwf	postinc1,c
  3939   012130  0E02               	movlw	2
  3940   012132  6EE6               	movwf	postinc1,c
  3941   012134  0E64               	movlw	low _motorControl_Process
  3942   012136  6EE6               	movwf	postinc1,c
  3943   012138  0E1E               	movlw	high _motorControl_Process
  3944   01213A  6EE6               	movwf	postinc1,c
  3945   01213C  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3946   01213E  6EE6               	movwf	postinc1,c
  3947   012140  ECD5  F09D         	call	_XF_post	;wreg free
  3948                           
  3949                           ;carFunctions.c: 323:                  }
  3950   012144  EF72  F091         	goto	l1554
  3951   012148                     l5465:
  3952                           
  3953                           ;carFunctions.c: 325:                  {;carFunctions.c: 326:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_ON, 0);
  3954   012148  0E00               	movlw	0
  3955   01214A  6EE6               	movwf	postinc1,c
  3956   01214C  0E00               	movlw	0
  3957   01214E  6EE6               	movwf	postinc1,c
  3958   012150  0E03               	movlw	3
  3959   012152  6EE6               	movwf	postinc1,c
  3960   012154  0EDA               	movlw	low _lightControl_Process
  3961   012156  6EE6               	movwf	postinc1,c
  3962   012158  0E26               	movlw	high _lightControl_Process
  3963   01215A  6EE6               	movwf	postinc1,c
  3964   01215C  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3965   01215E  6EE6               	movwf	postinc1,c
  3966   012160  ECD5  F09D         	call	_XF_post	;wreg free
  3967                           
  3968                           ;carFunctions.c: 327:                      XF_post(motorControl_Process, E_CONTACT_ON, 0
      +                          );
  3969   012164  0E00               	movlw	0
  3970   012166  6EE6               	movwf	postinc1,c
  3971   012168  0E00               	movlw	0
  3972   01216A  6EE6               	movwf	postinc1,c
  3973   01216C  0E03               	movlw	3
  3974   01216E  6EE6               	movwf	postinc1,c
  3975   012170  0E64               	movlw	low _motorControl_Process
  3976   012172  6EE6               	movwf	postinc1,c
  3977   012174  0E1E               	movlw	high _motorControl_Process
  3978   012176  6EE6               	movwf	postinc1,c
  3979   012178  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3980   01217A  6EE6               	movwf	postinc1,c
  3981   01217C  ECD5  F09D         	call	_XF_post	;wreg free
  3982   012180  EF72  F091         	goto	l1554
  3983   012184                     l5467:
  3984                           
  3985                           ;carFunctions.c: 334:                  carState.brakePedal = rxdata[0];
  3986                           ;stkvar	_rxdata @ sp[(-24)+16]
  3987   012184  0EF8               	movlw	-8
  3988   012186  CFE3 F00D          	movff	plusw1,_carState+12
  3989   01218A                     
  3990                           ;carFunctions.c: 336:                  if (rxdata[0] > 6)
  3991                           ;stkvar	_rxdata @ sp[(-24)+16]
  3992   01218A  0EF8               	movlw	-8
  3993   01218C  CFE3 F02A          	movff	plusw1,btemp
  3994   012190  0E06               	movlw	6
  3995   012192  642A               	cpfsgt	btemp^0,c
  3996   012194  EFCE  F090         	goto	u3231
  3997   012198  EFD0  F090         	goto	u3230
  3998   01219C                     u3231:
  3999   01219C  EFE0  F090         	goto	l5473
  4000   0121A0                     u3230:
  4001   0121A0                     
  4002                           ;carFunctions.c: 337:                  {;carFunctions.c: 338:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE, 0);
  4003   0121A0  0E00               	movlw	0
  4004   0121A2  6EE6               	movwf	postinc1,c
  4005   0121A4  0E00               	movlw	0
  4006   0121A6  6EE6               	movwf	postinc1,c
  4007   0121A8  0E04               	movlw	4
  4008   0121AA  6EE6               	movwf	postinc1,c
  4009   0121AC  0EDA               	movlw	low _lightControl_Process
  4010   0121AE  6EE6               	movwf	postinc1,c
  4011   0121B0  0E26               	movlw	high _lightControl_Process
  4012   0121B2  6EE6               	movwf	postinc1,c
  4013   0121B4  0E01               	movlw	low (_lightControl_Process shr (0+16))
  4014   0121B6  6EE6               	movwf	postinc1,c
  4015   0121B8  ECD5  F09D         	call	_XF_post	;wreg free
  4016                           
  4017                           ;carFunctions.c: 339:                  }else if (rxdata[0] < 6)
  4018   0121BC  EF72  F091         	goto	l1554
  4019   0121C0                     l5473:
  4020                           
  4021                           ;stkvar	_rxdata @ sp[(-24)+16]
  4022   0121C0  0EF8               	movlw	-8
  4023   0121C2  CFE3 F02A          	movff	plusw1,btemp
  4024   0121C6  0E06               	movlw	6
  4025   0121C8  602A               	cpfslt	btemp^0,c
  4026   0121CA  EFE9  F090         	goto	u3241
  4027   0121CE  EFEB  F090         	goto	u3240
  4028   0121D2                     u3241:
  4029   0121D2  EF72  F091         	goto	l1544
  4030   0121D6                     u3240:
  4031   0121D6                     
  4032                           ;carFunctions.c: 340:                  {;carFunctions.c: 341:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE_RELASED, 0);
  4033   0121D6  0E00               	movlw	0
  4034   0121D8  6EE6               	movwf	postinc1,c
  4035   0121DA  0E00               	movlw	0
  4036   0121DC  6EE6               	movwf	postinc1,c
  4037   0121DE  0E0A               	movlw	10
  4038   0121E0  6EE6               	movwf	postinc1,c
  4039   0121E2  0EDA               	movlw	low _lightControl_Process
  4040   0121E4  6EE6               	movwf	postinc1,c
  4041   0121E6  0E26               	movlw	high _lightControl_Process
  4042   0121E8  6EE6               	movwf	postinc1,c
  4043   0121EA  0E01               	movlw	low (_lightControl_Process shr (0+16))
  4044   0121EC  6EE6               	movwf	postinc1,c
  4045   0121EE  ECD5  F09D         	call	_XF_post	;wreg free
  4046   0121F2  EF72  F091         	goto	l1554
  4047   0121F6                     l5477:
  4048                           
  4049                           ;carFunctions.c: 348:                  carState.accelPedal = rxdata[0];
  4050                           ;stkvar	_rxdata @ sp[(-24)+16]
  4051   0121F6  0EF8               	movlw	-8
  4052   0121F8  CFE3 F00E          	movff	plusw1,_carState+13
  4053   0121FC                     
  4054                           ;carFunctions.c: 349:                  if (rxdata[0] > 10)
  4055                           ;stkvar	_rxdata @ sp[(-24)+16]
  4056   0121FC  0EF8               	movlw	-8
  4057   0121FE  CFE3 F02A          	movff	plusw1,btemp
  4058   012202  0E0A               	movlw	10
  4059   012204  642A               	cpfsgt	btemp^0,c
  4060   012206  EF07  F091         	goto	u3251
  4061   01220A  EF09  F091         	goto	u3250
  4062   01220E                     u3251:
  4063   01220E  EF19  F091         	goto	l5483
  4064   012212                     u3250:
  4065   012212                     
  4066                           ;carFunctions.c: 350:                  {;carFunctions.c: 351:                      XF_po
      +                          st(motorControl_Process, E_ACCELERATION_ON, 0);
  4067   012212  0E00               	movlw	0
  4068   012214  6EE6               	movwf	postinc1,c
  4069   012216  0E00               	movlw	0
  4070   012218  6EE6               	movwf	postinc1,c
  4071   01221A  0E08               	movlw	8
  4072   01221C  6EE6               	movwf	postinc1,c
  4073   01221E  0E64               	movlw	low _motorControl_Process
  4074   012220  6EE6               	movwf	postinc1,c
  4075   012222  0E1E               	movlw	high _motorControl_Process
  4076   012224  6EE6               	movwf	postinc1,c
  4077   012226  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4078   012228  6EE6               	movwf	postinc1,c
  4079   01222A  ECD5  F09D         	call	_XF_post	;wreg free
  4080                           
  4081                           ;carFunctions.c: 352:                  }else if (rxdata[0] < 10)
  4082   01222E  EF72  F091         	goto	l1554
  4083   012232                     l5483:
  4084                           
  4085                           ;stkvar	_rxdata @ sp[(-24)+16]
  4086   012232  0EF8               	movlw	-8
  4087   012234  CFE3 F02A          	movff	plusw1,btemp
  4088   012238  0E0A               	movlw	10
  4089   01223A  602A               	cpfslt	btemp^0,c
  4090   01223C  EF22  F091         	goto	u3261
  4091   012240  EF24  F091         	goto	u3260
  4092   012244                     u3261:
  4093   012244  EF72  F091         	goto	l1544
  4094   012248                     u3260:
  4095   012248                     
  4096                           ;carFunctions.c: 353:                  {;carFunctions.c: 354:                      XF_po
      +                          st(motorControl_Process, E_ACCELERATION_OFF, 0);
  4097   012248  0E00               	movlw	0
  4098   01224A  6EE6               	movwf	postinc1,c
  4099   01224C  0E00               	movlw	0
  4100   01224E  6EE6               	movwf	postinc1,c
  4101   012250  0E09               	movlw	9
  4102   012252  6EE6               	movwf	postinc1,c
  4103   012254  0E64               	movlw	low _motorControl_Process
  4104   012256  6EE6               	movwf	postinc1,c
  4105   012258  0E1E               	movlw	high _motorControl_Process
  4106   01225A  6EE6               	movwf	postinc1,c
  4107   01225C  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4108   01225E  6EE6               	movwf	postinc1,c
  4109   012260  ECD5  F09D         	call	_XF_post	;wreg free
  4110   012264  EF72  F091         	goto	l1554
  4111   012268                     l5489:
  4112                           
  4113                           ;stkvar	_rxObj @ sp[(-24)+0]
  4114   012268  50E1               	movf	fsr1l,w,c
  4115   01226A  0FE8               	addlw	-24
  4116   01226C  6ED9               	movwf	fsr2l,c
  4117   01226E  50E2               	movf	fsr1h,w,c
  4118   012270  6EDA               	movwf	fsr2h,c
  4119   012272  0EFF               	movlw	255
  4120   012274  22DA               	addwfc	fsr2h,f,c
  4121   012276  0EF0               	movlw	240
  4122   012278  14DE               	andwf	postinc2,w,c
  4123   01227A  6E32               	movwf	(btemp+8)^0,c
  4124   01227C  0E07               	movlw	7
  4125   01227E  14DE               	andwf	postinc2,w,c
  4126   012280  6E33               	movwf	(btemp+9)^0,c
  4127   012282  0E00               	movlw	0
  4128   012284  14DE               	andwf	postinc2,w,c
  4129   012286  6E34               	movwf	(btemp+10)^0,c
  4130   012288  0E00               	movlw	0
  4131   01228A  14DE               	andwf	postinc2,w,c
  4132   01228C  6E35               	movwf	(btemp+11)^0,c
  4133                           
  4134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4135                           ; Switch size 1, requested type "simple"
  4136                           ; Number of cases is 1, Range of values is 0 to 0
  4137                           ; switch strategies available:
  4138                           ; Name         Instructions Cycles
  4139                           ; simple_byte            4     3 (average)
  4140                           ;	Chosen strategy is simple_byte
  4141   01228E  5035               	movf	(btemp+11)^0,w,c
  4142   012290  0A00               	xorlw	0	; case 0
  4143   012292  B4D8               	btfsc	status,2,c
  4144   012294  EF6B  F091         	goto	l5745
  4145   012298  EF72  F091         	goto	l1554
  4146   01229C                     l5743:
  4147                           
  4148                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4149                           ; Switch size 1, requested type "simple"
  4150                           ; Number of cases is 2, Range of values is 0 to 1
  4151                           ; switch strategies available:
  4152                           ; Name         Instructions Cycles
  4153                           ; simple_byte            7     4 (average)
  4154                           ;	Chosen strategy is simple_byte
  4155   01229C  5033               	movf	(btemp+9)^0,w,c
  4156   01229E  0A00               	xorlw	0	; case 0
  4157   0122A0  B4D8               	btfsc	status,2,c
  4158   0122A2  EF59  F091         	goto	l5747
  4159   0122A6  0A01               	xorlw	1	; case 1
  4160   0122A8  B4D8               	btfsc	status,2,c
  4161   0122AA  EF64  F091         	goto	l5749
  4162   0122AE  EF72  F091         	goto	l1554
  4163   0122B2                     l5747:
  4164                           
  4165                           ; Switch size 1, requested type "simple"
  4166                           ; Number of cases is 2, Range of values is 64 to 80
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte            7     4 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171   0122B2  5032               	movf	(btemp+8)^0,w,c
  4172   0122B4  0A40               	xorlw	64	; case 64
  4173   0122B6  B4D8               	btfsc	status,2,c
  4174   0122B8  EFC2  F090         	goto	l5467
  4175   0122BC  0A10               	xorlw	16	; case 80
  4176   0122BE  B4D8               	btfsc	status,2,c
  4177   0122C0  EF7A  F090         	goto	l5459
  4178   0122C4  EF72  F091         	goto	l1554
  4179   0122C8                     l5749:
  4180                           
  4181                           ; Switch size 1, requested type "simple"
  4182                           ; Number of cases is 1, Range of values is 64 to 64
  4183                           ; switch strategies available:
  4184                           ; Name         Instructions Cycles
  4185                           ; simple_byte            4     3 (average)
  4186                           ;	Chosen strategy is simple_byte
  4187   0122C8  5032               	movf	(btemp+8)^0,w,c
  4188   0122CA  0A40               	xorlw	64	; case 64
  4189   0122CC  B4D8               	btfsc	status,2,c
  4190   0122CE  EFFB  F090         	goto	l5477
  4191   0122D2  EF72  F091         	goto	l1554
  4192   0122D6                     l5745:
  4193                           
  4194                           ; Switch size 1, requested type "simple"
  4195                           ; Number of cases is 1, Range of values is 0 to 0
  4196                           ; switch strategies available:
  4197                           ; Name         Instructions Cycles
  4198                           ; simple_byte            4     3 (average)
  4199                           ;	Chosen strategy is simple_byte
  4200   0122D6  5034               	movf	(btemp+10)^0,w,c
  4201   0122D8  0A00               	xorlw	0	; case 0
  4202   0122DA  B4D8               	btfsc	status,2,c
  4203   0122DC  EF4E  F091         	goto	l5743
  4204   0122E0  EF72  F091         	goto	l1554
  4205   0122E4                     l1544:
  4206   0122E4                     l1554:
  4207                           
  4208                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4209   0122E4  0EE8               	movlw	232
  4210   0122E6  26E1               	addwf	fsr1l,f,c
  4211   0122E8  0EFF               	movlw	255
  4212   0122EA  22E2               	addwfc	fsr1h,f,c
  4213   0122EC  0012               	return		;funcret
  4214   0122EE                     __end_of_updateCarState:
  4215                           	callstack 0
  4216                           
  4217 ;; *************** function _XF_post *****************
  4218 ;; Defined at:
  4219 ;;		line 274 in file "xf/xf.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4222 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4223 ;;  id              1  [STACK] unsigned char 
  4224 ;;  delay           2  [STACK] unsigned short 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  ev              6  [STACK] struct Event_
  4227 ;;  tmid            1  [STACK] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1  [STACK] unsigned char 
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used: 1
  4243 ;; Hardware stack levels required when called: 10
  4244 ;; This function calls:
  4245 ;;		_Event_init
  4246 ;;		_Event_setDelay
  4247 ;;		_Event_setId
  4248 ;;		_Event_setPE
  4249 ;;		_XF_pushEvent
  4250 ;; This function is called by:
  4251 ;;		_main
  4252 ;;		_updateCarState
  4253 ;; This function uses a reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text2
  4257   013BAA                     __ptext2:
  4258                           	callstack 0
  4259   013BAA                     _XF_post:
  4260                           	callstack 0
  4261                           
  4262                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4263   013BAA  0E07               	movlw	7
  4264   013BAC  26E1               	addwf	fsr1l,f,c
  4265   013BAE  0E00               	movlw	0
  4266   013BB0  22E2               	addwfc	fsr1h,f,c
  4267   013BB2                     
  4268                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4269                           ;stkvar	_tmid @ sp[(-7)+6]
  4270   013BB2  0EFF               	movlw	-1
  4271   013BB4  6AE3               	clrf	plusw1,c
  4272   013BB6  84E3               	bsf	plusw1,2,c
  4273   013BB8  86E3               	bsf	plusw1,3,c	;indir
  4274   013BBA                     
  4275                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4276                           ;stkvar	_ev @ sp[(-7)+0]
  4277   013BBA  0EF9               	movlw	249
  4278   013BBC  24E1               	addwf	fsr1l,w,c
  4279   013BBE  6E2A               	movwf	btemp^0,c
  4280   013BC0  0EFF               	movlw	255
  4281   013BC2  20E2               	addwfc	fsr1h,w,c
  4282   013BC4  6E2B               	movwf	(btemp+1)^0,c
  4283   013BC6  C02A  FFE6         	movff	btemp,postinc1
  4284   013BCA  C02B  FFE6         	movff	btemp+1,postinc1
  4285   013BCE  ECF8  F0A4         	call	_Event_init	;wreg free
  4286   013BD2                     
  4287                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4288                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4289   013BD2  0EF6               	movlw	-10
  4290   013BD4  CFE3 FFE6          	movff	plusw1,postinc1
  4291   013BD8  CFE3 FFE6          	movff	plusw1,postinc1
  4292   013BDC  CFE3 FFE6          	movff	plusw1,postinc1
  4293                           
  4294                           ;stkvar	_ev @ sp[(-10)+0]
  4295   013BE0  0EF6               	movlw	246
  4296   013BE2  24E1               	addwf	fsr1l,w,c
  4297   013BE4  6E2A               	movwf	btemp^0,c
  4298   013BE6  0EFF               	movlw	255
  4299   013BE8  20E2               	addwfc	fsr1h,w,c
  4300   013BEA  6E2B               	movwf	(btemp+1)^0,c
  4301   013BEC  C02A  FFE6         	movff	btemp,postinc1
  4302   013BF0  C02B  FFE6         	movff	btemp+1,postinc1
  4303   013BF4  EC1F  F0A5         	call	_Event_setPE	;wreg free
  4304   013BF8                     
  4305                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4306                           ;stkvar	_id @ sp[(-7)+-4]
  4307   013BF8  0EF5               	movlw	-11
  4308   013BFA  50E3               	movf	plusw1,w,c
  4309   013BFC  6EE6               	movwf	postinc1,c
  4310                           
  4311                           ;stkvar	_ev @ sp[(-8)+0]
  4312   013BFE  0EF8               	movlw	248
  4313   013C00  24E1               	addwf	fsr1l,w,c
  4314   013C02  6E2A               	movwf	btemp^0,c
  4315   013C04  0EFF               	movlw	255
  4316   013C06  20E2               	addwfc	fsr1h,w,c
  4317   013C08  6E2B               	movwf	(btemp+1)^0,c
  4318   013C0A  C02A  FFE6         	movff	btemp,postinc1
  4319   013C0E  C02B  FFE6         	movff	btemp+1,postinc1
  4320   013C12  EC1A  F0A6         	call	_Event_setId	;wreg free
  4321   013C16                     
  4322                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4323                           ;stkvar	_delay @ sp[(-7)+-6]
  4324   013C16  0EF3               	movlw	-13
  4325   013C18  CFE3 FFE6          	movff	plusw1,postinc1
  4326   013C1C  CFE3 FFE6          	movff	plusw1,postinc1
  4327                           
  4328                           ;stkvar	_ev @ sp[(-9)+0]
  4329   013C20  0EF7               	movlw	247
  4330   013C22  24E1               	addwf	fsr1l,w,c
  4331   013C24  6E2A               	movwf	btemp^0,c
  4332   013C26  0EFF               	movlw	255
  4333   013C28  20E2               	addwfc	fsr1h,w,c
  4334   013C2A  6E2B               	movwf	(btemp+1)^0,c
  4335   013C2C  C02A  FFE6         	movff	btemp,postinc1
  4336   013C30  C02B  FFE6         	movff	btemp+1,postinc1
  4337   013C34  EC5A  F0A5         	call	_Event_setDelay	;wreg free
  4338   013C38                     
  4339                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4340                           ;stkvar	_tmid @ sp[(-7)+6]
  4341   013C38  0EFF               	movlw	255
  4342   013C3A  24E1               	addwf	fsr1l,w,c
  4343   013C3C  6E2A               	movwf	btemp^0,c
  4344   013C3E  0EFF               	movlw	255
  4345   013C40  20E2               	addwfc	fsr1h,w,c
  4346   013C42  6E2B               	movwf	(btemp+1)^0,c
  4347   013C44  C02A  FFE6         	movff	btemp,postinc1
  4348   013C48  C02B  FFE6         	movff	btemp+1,postinc1
  4349   013C4C  0E00               	movlw	0
  4350   013C4E  6EE6               	movwf	postinc1,c
  4351                           
  4352                           ;stkvar	_ev @ sp[(-10)+0]
  4353   013C50  0EF6               	movlw	246
  4354   013C52  24E1               	addwf	fsr1l,w,c
  4355   013C54  6ED9               	movwf	fsr2l,c
  4356   013C56  0EFF               	movlw	255
  4357   013C58  20E2               	addwfc	fsr1h,w,c
  4358   013C5A  6EDA               	movwf	fsr2h,c
  4359   013C5C  0E06               	movlw	6
  4360   013C5E                     u2951:
  4361   013C5E  CFDE FFE6          	movff	postinc2,postinc1
  4362   013C62  2CE8               	decfsz	wreg,w,c
  4363   013C64  EF2F  F09E         	goto	u2951
  4364   013C68  EC8F  F096         	call	_XF_pushEvent	;wreg free
  4365   013C6C                     
  4366                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4367   013C6C  0EF3               	movlw	243
  4368   013C6E  26E1               	addwf	fsr1l,f,c
  4369   013C70  0EFF               	movlw	255
  4370   013C72  22E2               	addwfc	fsr1h,f,c
  4371   013C74  0012               	return		;funcret
  4372   013C76                     __end_of_XF_post:
  4373                           	callstack 0
  4374                           
  4375 ;; *************** function _XF_pushEvent *****************
  4376 ;; Defined at:
  4377 ;;		line 106 in file "xf/xf.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  ev              6  [STACK] struct Event_
  4380 ;;  inISR           1  [STACK] _Bool 
  4381 ;;  tmid            2  [STACK] PTR unsigned char 
  4382 ;;		 -> tmid(1), dummy(1), 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  tm              2  [STACK] unsigned short 
  4385 ;;  temp            1  [STACK] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1  [STACK] _Bool 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used: 1
  4401 ;; Hardware stack levels required when called: 9
  4402 ;; This function calls:
  4403 ;;		_ENTERCRITICAL
  4404 ;;		_Event_getDelay
  4405 ;;		_Event_setDelay
  4406 ;;		_LEAVECRITICAL
  4407 ;;		_XF_noMoreEvent
  4408 ;;		_XF_scheduleTimer
  4409 ;;		___awmod
  4410 ;; This function is called by:
  4411 ;;		_XF_decrementAndQueueTimers
  4412 ;;		_XF_post
  4413 ;; This function uses a reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text3
  4417   012D1E                     __ptext3:
  4418                           	callstack 0
  4419   012D1E                     _XF_pushEvent:
  4420                           	callstack 0
  4421                           
  4422                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4423   012D1E  52E6               	movf	postinc1,f,c
  4424   012D20  52E6               	movf	postinc1,f,c
  4425   012D22  52E6               	movf	postinc1,f,c
  4426   012D24                     
  4427                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4428                           ;stkvar	_ev @ sp[(-3)+-6]
  4429   012D24  0EF7               	movlw	247
  4430   012D26  24E1               	addwf	fsr1l,w,c
  4431   012D28  6E2A               	movwf	btemp^0,c
  4432   012D2A  0EFF               	movlw	255
  4433   012D2C  20E2               	addwfc	fsr1h,w,c
  4434   012D2E  6E2B               	movwf	(btemp+1)^0,c
  4435   012D30  C02A  FFE6         	movff	btemp,postinc1
  4436   012D34  C02B  FFE6         	movff	btemp+1,postinc1
  4437   012D38  ECE8  F0A5         	call	_Event_getDelay	;wreg free
  4438                           
  4439                           ;stkvar	_tm @ sp[(-3)+0]
  4440   012D3C  0EFD               	movlw	-3
  4441   012D3E  C02A  FFE3         	movff	btemp,plusw1
  4442   012D42  0EFE               	movlw	-2
  4443   012D44  C02B  FFE3         	movff	btemp+1,plusw1
  4444   012D48                     
  4445                           ;xf/xf.c: 111:     if ( tm > 0)
  4446                           ;stkvar	_tm @ sp[(-3)+0]
  4447   012D48  0EFD               	movlw	-3
  4448   012D4A  CFE3 F02A          	movff	plusw1,btemp
  4449   012D4E  0EFE               	movlw	-2
  4450   012D50  50E3               	movf	plusw1,w,c
  4451   012D52  102A               	iorwf	btemp^0,w,c
  4452   012D54  B4D8               	btfsc	status,2,c
  4453   012D56  EFAF  F096         	goto	u2141
  4454   012D5A  EFB1  F096         	goto	u2140
  4455   012D5E                     u2141:
  4456   012D5E  EFE1  F096         	goto	l4507
  4457   012D62                     u2140:
  4458   012D62                     
  4459                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4460   012D62  0E00               	movlw	0
  4461   012D64  6EE6               	movwf	postinc1,c
  4462   012D66  0E00               	movlw	0
  4463   012D68  6EE6               	movwf	postinc1,c
  4464                           
  4465                           ;stkvar	_ev @ sp[(-5)+-6]
  4466   012D6A  0EF5               	movlw	245
  4467   012D6C  24E1               	addwf	fsr1l,w,c
  4468   012D6E  6E2A               	movwf	btemp^0,c
  4469   012D70  0EFF               	movlw	255
  4470   012D72  20E2               	addwfc	fsr1h,w,c
  4471   012D74  6E2B               	movwf	(btemp+1)^0,c
  4472   012D76  C02A  FFE6         	movff	btemp,postinc1
  4473   012D7A  C02B  FFE6         	movff	btemp+1,postinc1
  4474   012D7E  EC5A  F0A5         	call	_Event_setDelay	;wreg free
  4475   012D82                     
  4476                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4477                           ;stkvar	_inISR @ sp[(-3)+-7]
  4478   012D82  0EF6               	movlw	-10
  4479   012D84  50E3               	movf	plusw1,w,c
  4480   012D86  6EE6               	movwf	postinc1,c
  4481                           
  4482                           ;stkvar	_ev @ sp[(-4)+-6]
  4483   012D88  0EF6               	movlw	246
  4484   012D8A  24E1               	addwf	fsr1l,w,c
  4485   012D8C  6ED9               	movwf	fsr2l,c
  4486   012D8E  0EFF               	movlw	255
  4487   012D90  20E2               	addwfc	fsr1h,w,c
  4488   012D92  6EDA               	movwf	fsr2h,c
  4489   012D94  0E06               	movlw	6
  4490   012D96                     u2151:
  4491   012D96  CFDE FFE6          	movff	postinc2,postinc1
  4492   012D9A  2CE8               	decfsz	wreg,w,c
  4493   012D9C  EFCB  F096         	goto	u2151
  4494                           
  4495                           ;stkvar	_tm @ sp[(-10)+0]
  4496   012DA0  0EF6               	movlw	-10
  4497   012DA2  CFE3 FFE6          	movff	plusw1,postinc1
  4498   012DA6  CFE3 FFE6          	movff	plusw1,postinc1
  4499   012DAA  EC84  F09C         	call	_XF_scheduleTimer	;wreg free
  4500                           
  4501                           ;stkvar	_tmid @ sp[(-3)+-9]
  4502   012DAE  0EF4               	movlw	-12
  4503   012DB0  CFE3 FFD9          	movff	plusw1,fsr2l
  4504   012DB4  0EF5               	movlw	-11
  4505   012DB6  CFE3 FFDA          	movff	plusw1,fsr2h
  4506   012DBA  C02A  FFDF         	movff	btemp,indf2
  4507                           
  4508                           ;xf/xf.c: 115:     }
  4509   012DBE  EF48  F097         	goto	l4527
  4510   012DC2                     l4507:
  4511                           
  4512                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4513                           ;stkvar	_inISR @ sp[(-3)+-7]
  4514   012DC2  0EF6               	movlw	-10
  4515   012DC4  50E3               	movf	plusw1,w,c
  4516   012DC6  6EE6               	movwf	postinc1,c
  4517   012DC8  EC33  F0A6         	call	_ENTERCRITICAL	;wreg free
  4518   012DCC                     
  4519                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4520   012DCC  EE23  F0DF         	lfsr	2,_theXF+279
  4521   012DD0  50DF               	movf	indf2,w,c
  4522   012DD2  6E34               	movwf	(btemp+10)^0,c
  4523   012DD4  6A35               	clrf	(btemp+11)^0,c
  4524   012DD6  0E01               	movlw	1
  4525   012DD8  2634               	addwf	(btemp+10)^0,f,c
  4526   012DDA  0E00               	movlw	0
  4527   012DDC  2235               	addwfc	(btemp+11)^0,f,c
  4528   012DDE  BE35               	btfsc	(btemp+11)^0,7,c
  4529   012DE0  EFFB  F096         	goto	u2161
  4530   012DE4  5035               	movf	(btemp+11)^0,w,c
  4531   012DE6  E109               	bnz	u2160
  4532   012DE8  0E1E               	movlw	30
  4533   012DEA  5C34               	subwf	(btemp+10)^0,w,c
  4534   012DEC  A0D8               	btfss	status,0,c
  4535   012DEE  EFFB  F096         	goto	u2161
  4536   012DF2  EFFD  F096         	goto	u2160
  4537   012DF6                     u2161:
  4538   012DF6  EFFF  F096         	goto	l4513
  4539   012DFA                     u2160:
  4540   012DFA                     
  4541                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4542   012DFA  EC59  F0A6         	call	_XF_noMoreEvent	;wreg free
  4543   012DFE                     l4513:
  4544                           
  4545                           ;xf/xf.c: 123:         theXF.countEvt++;
  4546   012DFE  C3DF  FFE8         	movff	_theXF+279,wreg
  4547   012E02  0F01               	addlw	1
  4548   012E04  CFE8 F3DF          	movff	wreg,_theXF+279
  4549   012E08                     
  4550                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4551   012E08  EE23  F0DF         	lfsr	2,_theXF+279
  4552   012E0C  EE03  F0DE         	lfsr	0,_theXF+278
  4553   012E10  50DE               	movf	postinc2,w,c
  4554   012E12  5CEE               	subwf	postinc0,w,c
  4555   012E14  B0D8               	btfsc	status,0,c
  4556   012E16  EF0F  F097         	goto	u2171
  4557   012E1A  EF11  F097         	goto	u2170
  4558   012E1E                     u2171:
  4559   012E1E  EF13  F097         	goto	l4519
  4560   012E22                     u2170:
  4561   012E22                     
  4562                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4563   012E22  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4564   012E26                     l4519:
  4565                           
  4566                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4567   012E26  0E1E               	movlw	30
  4568   012E28  6EE6               	movwf	postinc1,c
  4569   012E2A  0E00               	movlw	0
  4570   012E2C  6EE6               	movwf	postinc1,c
  4571   012E2E  EE23  F0DC         	lfsr	2,_theXF+276
  4572   012E32  50DF               	movf	indf2,w,c
  4573   012E34  6E34               	movwf	(btemp+10)^0,c
  4574   012E36  6A35               	clrf	(btemp+11)^0,c
  4575   012E38  0E01               	movlw	1
  4576   012E3A  2634               	addwf	(btemp+10)^0,f,c
  4577   012E3C  0E00               	movlw	0
  4578   012E3E  2235               	addwfc	(btemp+11)^0,f,c
  4579   012E40  C034  FFE6         	movff	btemp+10,postinc1
  4580   012E44  C035  FFE6         	movff	btemp+11,postinc1
  4581   012E48  ECF9  F097         	call	___awmod	;wreg free
  4582                           
  4583                           ;stkvar	_temp @ sp[(-3)+2]
  4584   012E4C  0EFF               	movlw	-1
  4585   012E4E  C02A  FFE3         	movff	btemp,plusw1
  4586   012E52                     
  4587                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4588                           ;stkvar	_ev @ sp[(-3)+-6]
  4589   012E52  0EF7               	movlw	247
  4590   012E54  24E1               	addwf	fsr1l,w,c
  4591   012E56  6ED9               	movwf	fsr2l,c
  4592   012E58  0EFF               	movlw	255
  4593   012E5A  20E2               	addwfc	fsr1h,w,c
  4594   012E5C  6EDA               	movwf	fsr2h,c
  4595   012E5E  EE03  F0DC         	lfsr	0,_theXF+276
  4596   012E62  50EF               	movf	indf0,w,c
  4597   012E64  0D06               	mullw	6
  4598   012E66  0E28               	movlw	low (_theXF+96)
  4599   012E68  24F3               	addwf	243,w,c
  4600   012E6A  6EE9               	movwf	fsr0l,c
  4601   012E6C  0E03               	movlw	high (_theXF+96)
  4602   012E6E  20F4               	addwfc	prodh,w,c
  4603   012E70  6EEA               	movwf	fsr0h,c
  4604   012E72  0E05               	movlw	5
  4605   012E74                     u2181:
  4606   012E74  CFDB FFEB          	movff	plusw2,plusw0
  4607   012E78  06E8               	decf	wreg,f,c
  4608   012E7A  E2FC               	bc	u2181
  4609   012E7C                     
  4610                           ;xf/xf.c: 130:         theXF.in = temp;
  4611                           ;stkvar	_temp @ sp[(-3)+2]
  4612   012E7C  0EFF               	movlw	-1
  4613   012E7E  CFE3 F035          	movff	plusw1,btemp+11
  4614   012E82  C035  F3DC         	movff	btemp+11,_theXF+276
  4615   012E86                     
  4616                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4617                           ;stkvar	_inISR @ sp[(-3)+-7]
  4618   012E86  0EF6               	movlw	-10
  4619   012E88  50E3               	movf	plusw1,w,c
  4620   012E8A  6EE6               	movwf	postinc1,c
  4621   012E8C  EC27  F0A6         	call	_LEAVECRITICAL	;wreg free
  4622   012E90                     l4527:
  4623                           
  4624                           ;xf/xf.c: 133:     return 1;
  4625   012E90  0E01               	movlw	1
  4626   012E92  6E2A               	movwf	btemp^0,c
  4627   012E94                     
  4628                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4629   012E94  0EF4               	movlw	244
  4630   012E96  26E1               	addwf	fsr1l,f,c
  4631   012E98  0EFF               	movlw	255
  4632   012E9A  22E2               	addwfc	fsr1h,f,c
  4633   012E9C  0012               	return		;funcret
  4634   012E9E                     __end_of_XF_pushEvent:
  4635                           	callstack 0
  4636                           
  4637 ;; *************** function _XF_scheduleTimer *****************
  4638 ;; Defined at:
  4639 ;;		line 169 in file "xf/xf.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  tm              2  [STACK] unsigned short 
  4642 ;;  ev              6  [STACK] struct Event_
  4643 ;;  inISR           1  [STACK] _Bool 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  i               1  [STACK] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1  [STACK] unsigned char 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;Total ram usage:        0 bytes
  4660 ;; Hardware stack levels used: 1
  4661 ;; Hardware stack levels required when called: 8
  4662 ;; This function calls:
  4663 ;;		_ENTERCRITICAL
  4664 ;;		_LEAVECRITICAL
  4665 ;;		_XF_noMoreTimer
  4666 ;; This function is called by:
  4667 ;;		_XF_pushEvent
  4668 ;; This function uses a reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text4
  4672   013908                     __ptext4:
  4673                           	callstack 0
  4674   013908                     _XF_scheduleTimer:
  4675                           	callstack 0
  4676                           
  4677                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4678   013908  52E6               	movf	postinc1,f,c
  4679   01390A                     
  4680                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4681                           ;stkvar	_inISR @ sp[(-1)+-9]
  4682   01390A  0EF6               	movlw	-10
  4683   01390C  50E3               	movf	plusw1,w,c
  4684   01390E  6EE6               	movwf	postinc1,c
  4685   013910  EC33  F0A6         	call	_ENTERCRITICAL	;wreg free
  4686                           
  4687                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4688                           ;stkvar	_i @ sp[(-1)+0]
  4689   013914  0EFF               	movlw	-1
  4690   013916  6AE3               	clrf	plusw1,c
  4691   013918                     l4377:
  4692                           
  4693                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4694                           ;stkvar	_i @ sp[(-1)+0]
  4695   013918  0EFF               	movlw	-1
  4696   01391A  50E3               	movf	plusw1,w,c
  4697   01391C  0D08               	mullw	8
  4698   01391E  0ECA               	movlw	low (_theXF+2)
  4699   013920  24F3               	addwf	243,w,c
  4700   013922  6ED9               	movwf	fsr2l,c
  4701   013924  0E02               	movlw	high (_theXF+2)
  4702   013926  20F4               	addwfc	prodh,w,c
  4703   013928  6EDA               	movwf	fsr2h,c
  4704   01392A  50DF               	movf	indf2,w,c
  4705   01392C  A4D8               	btfss	status,2,c
  4706   01392E  EF9B  F09C         	goto	u2001
  4707   013932  EF9D  F09C         	goto	u2000
  4708   013936                     u2001:
  4709   013936  EFE3  F09C         	goto	l4395
  4710   01393A                     u2000:
  4711   01393A                     
  4712                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4713                           ;stkvar	_tm @ sp[(-1)+-2]
  4714   01393A  50E1               	movf	fsr1l,w,c
  4715   01393C  0FFD               	addlw	-3
  4716   01393E  6ED9               	movwf	fsr2l,c
  4717   013940  50E2               	movf	fsr1h,w,c
  4718   013942  6EDA               	movwf	fsr2h,c
  4719   013944  0EFF               	movlw	255
  4720   013946  22DA               	addwfc	fsr2h,f,c
  4721                           
  4722                           ;stkvar	_i @ sp[(-1)+0]
  4723   013948  0EFF               	movlw	-1
  4724   01394A  50E3               	movf	plusw1,w,c
  4725   01394C  0D08               	mullw	8
  4726   01394E  0EC8               	movlw	low _theXF
  4727   013950  24F3               	addwf	243,w,c
  4728   013952  6EE9               	movwf	fsr0l,c
  4729   013954  0E02               	movlw	high _theXF
  4730   013956  20F4               	addwfc	prodh,w,c
  4731   013958  6EEA               	movwf	fsr0h,c
  4732   01395A  CFDE FFEE          	movff	postinc2,postinc0
  4733   01395E  CFDD FFED          	movff	postdec2,postdec0
  4734                           
  4735                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4736                           ;stkvar	_ev @ sp[(-1)+-8]
  4737   013962  0EF7               	movlw	247
  4738   013964  24E1               	addwf	fsr1l,w,c
  4739   013966  6ED9               	movwf	fsr2l,c
  4740   013968  0EFF               	movlw	255
  4741   01396A  20E2               	addwfc	fsr1h,w,c
  4742   01396C  6EDA               	movwf	fsr2h,c
  4743                           
  4744                           ;stkvar	_i @ sp[(-1)+0]
  4745   01396E  0EFF               	movlw	-1
  4746   013970  50E3               	movf	plusw1,w,c
  4747   013972  0D08               	mullw	8
  4748   013974  0ECA               	movlw	low (_theXF+2)
  4749   013976  24F3               	addwf	243,w,c
  4750   013978  6EE9               	movwf	fsr0l,c
  4751   01397A  0E02               	movlw	high (_theXF+2)
  4752   01397C  20F4               	addwfc	prodh,w,c
  4753   01397E  6EEA               	movwf	fsr0h,c
  4754   013980  0E05               	movlw	5
  4755   013982                     u2011:
  4756   013982  CFDB FFEB          	movff	plusw2,plusw0
  4757   013986  06E8               	decf	wreg,f,c
  4758   013988  E2FC               	bc	u2011
  4759   01398A                     
  4760                           ;xf/xf.c: 180:             theXF.countTmr++;
  4761   01398A  C3E1  FFE8         	movff	_theXF+281,wreg
  4762   01398E  0F01               	addlw	1
  4763   013990  CFE8 F3E1          	movff	wreg,_theXF+281
  4764   013994                     
  4765                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4766   013994  EE23  F0E1         	lfsr	2,_theXF+281
  4767   013998  EE03  F0E0         	lfsr	0,_theXF+280
  4768   01399C  50DE               	movf	postinc2,w,c
  4769   01399E  5CEE               	subwf	postinc0,w,c
  4770   0139A0  B0D8               	btfsc	status,0,c
  4771   0139A2  EFD5  F09C         	goto	u2021
  4772   0139A6  EFD7  F09C         	goto	u2020
  4773   0139AA                     u2021:
  4774   0139AA  EFD9  F09C         	goto	l4387
  4775   0139AE                     u2020:
  4776   0139AE                     
  4777                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4778   0139AE  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4779   0139B2                     l4387:
  4780                           
  4781                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4782                           ;stkvar	_inISR @ sp[(-1)+-9]
  4783   0139B2  0EF6               	movlw	-10
  4784   0139B4  50E3               	movf	plusw1,w,c
  4785   0139B6  6EE6               	movwf	postinc1,c
  4786   0139B8  EC27  F0A6         	call	_LEAVECRITICAL	;wreg free
  4787   0139BC                     
  4788                           ;xf/xf.c: 186:             return i;
  4789                           ;stkvar	_i @ sp[(-1)+0]
  4790   0139BC  0EFF               	movlw	-1
  4791   0139BE  CFE3 F02A          	movff	plusw1,btemp
  4792   0139C2  EFF4  F09C         	goto	l1234
  4793   0139C6                     l4395:
  4794                           
  4795                           ;xf/xf.c: 189:     }
  4796                           ;stkvar	_i @ sp[(-1)+0]
  4797   0139C6  0EFF               	movlw	-1
  4798   0139C8  2AE3               	incf	plusw1,f,c
  4799   0139CA                     
  4800                           ;stkvar	_i @ sp[(-1)+0]
  4801   0139CA  0EFF               	movlw	-1
  4802   0139CC  CFE3 F02A          	movff	plusw1,btemp
  4803   0139D0  0E0B               	movlw	11
  4804   0139D2  642A               	cpfsgt	btemp^0,c
  4805   0139D4  EFEE  F09C         	goto	u2031
  4806   0139D8  EFF0  F09C         	goto	u2030
  4807   0139DC                     u2031:
  4808   0139DC  EF8C  F09C         	goto	l4377
  4809   0139E0                     u2030:
  4810   0139E0                     
  4811                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4812   0139E0  EC56  F0A6         	call	_XF_noMoreTimer	;wreg free
  4813   0139E4  EFD9  F09C         	goto	l4387
  4814   0139E8                     l1234:
  4815                           
  4816                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4817   0139E8  0EF6               	movlw	246
  4818   0139EA  26E1               	addwf	fsr1l,f,c
  4819   0139EC  0EFF               	movlw	255
  4820   0139EE  22E2               	addwfc	fsr1h,f,c
  4821   0139F0  0012               	return		;funcret
  4822   0139F2                     __end_of_XF_scheduleTimer:
  4823                           	callstack 0
  4824                           
  4825 ;; *************** function _XF_noMoreTimer *****************
  4826 ;; Defined at:
  4827 ;;		line 69 in file "xf/xf.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1  [STACK] void 
  4834 ;; Registers used:
  4835 ;;		None
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:        0 bytes
  4846 ;; Hardware stack levels used: 1
  4847 ;; Hardware stack levels required when called: 7
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_XF_scheduleTimer
  4852 ;; This function uses a reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text5
  4856   014CAC                     __ptext5:
  4857                           	callstack 0
  4858   014CAC                     _XF_noMoreTimer:
  4859                           	callstack 9
  4860   014CAC                     l1206:
  4861   014CAC  EF56  F0A6         	goto	l1206
  4862                           
  4863                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4864   014CB0  0012               	return		;funcret
  4865   014CB2                     __end_of_XF_noMoreTimer:
  4866                           	callstack 0
  4867                           
  4868 ;; *************** function _XF_noMoreEvent *****************
  4869 ;; Defined at:
  4870 ;;		line 65 in file "xf/xf.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1  [STACK] void 
  4877 ;; Registers used:
  4878 ;;		None
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used: 1
  4890 ;; Hardware stack levels required when called: 7
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_XF_pushEvent
  4895 ;; This function uses a reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text6
  4899   014CB2                     __ptext6:
  4900                           	callstack 0
  4901   014CB2                     _XF_noMoreEvent:
  4902                           	callstack 10
  4903   014CB2                     l1200:
  4904   014CB2  EF59  F0A6         	goto	l1200
  4905                           
  4906                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4907   014CB6  0012               	return		;funcret
  4908   014CB8                     __end_of_XF_noMoreEvent:
  4909                           	callstack 0
  4910                           
  4911 ;; *************** function _Event_setDelay *****************
  4912 ;; Defined at:
  4913 ;;		line 32 in file "xf/event.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  me              2  [STACK] PTR struct Event_
  4916 ;;		 -> ev(6), 
  4917 ;;  delay           2  [STACK] unsigned short 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1  [STACK] void 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used: 1
  4935 ;; Hardware stack levels required when called: 7
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_XF_pushEvent
  4940 ;;		_XF_post
  4941 ;; This function uses a reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text7
  4945   014AB4                     __ptext7:
  4946                           	callstack 0
  4947   014AB4                     _Event_setDelay:
  4948                           	callstack 10
  4949   014AB4                     
  4950                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4951                           ;stkvar	_delay @ sp[(0)+-4]
  4952   014AB4  50E1               	movf	fsr1l,w,c
  4953   014AB6  0FFC               	addlw	-4
  4954   014AB8  6ED9               	movwf	fsr2l,c
  4955   014ABA  50E2               	movf	fsr1h,w,c
  4956   014ABC  6EDA               	movwf	fsr2h,c
  4957   014ABE  0EFF               	movlw	255
  4958   014AC0  22DA               	addwfc	fsr2h,f,c
  4959                           
  4960                           ;stkvar	_me @ sp[(0)+-2]
  4961   014AC2  0EFE               	movlw	-2
  4962   014AC4  CFE3 F034          	movff	plusw1,btemp+10
  4963   014AC8  0EFF               	movlw	-1
  4964   014ACA  CFE3 F035          	movff	plusw1,btemp+11
  4965   014ACE  0E04               	movlw	4
  4966   014AD0  2434               	addwf	(btemp+10)^0,w,c
  4967   014AD2  6EE9               	movwf	fsr0l,c
  4968   014AD4  0E00               	movlw	0
  4969   014AD6  2035               	addwfc	(btemp+11)^0,w,c
  4970   014AD8  6EEA               	movwf	fsr0h,c
  4971   014ADA  CFDE FFEE          	movff	postinc2,postinc0
  4972   014ADE  CFDD FFED          	movff	postdec2,postdec0
  4973   014AE2                     
  4974                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4975   014AE2  52E5               	movf	postdec1,f,c
  4976   014AE4  52E5               	movf	postdec1,f,c
  4977   014AE6  52E5               	movf	postdec1,f,c
  4978   014AE8  52E5               	movf	postdec1,f,c
  4979   014AEA  0012               	return		;funcret
  4980   014AEC                     __end_of_Event_setDelay:
  4981                           	callstack 0
  4982                           
  4983 ;; *************** function _Event_getDelay *****************
  4984 ;; Defined at:
  4985 ;;		line 37 in file "xf/event.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  me              2  [STACK] PTR struct Event_
  4988 ;;		 -> ev(6), 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2  [STACK] unsigned short 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:        0 bytes
  5005 ;; Hardware stack levels used: 1
  5006 ;; Hardware stack levels required when called: 7
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_XF_pushEvent
  5011 ;; This function uses a reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text8
  5015   014BD0                     __ptext8:
  5016                           	callstack 0
  5017   014BD0                     _Event_getDelay:
  5018                           	callstack 10
  5019   014BD0                     
  5020                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  5021                           ;stkvar	_me @ sp[(0)+-2]
  5022   014BD0  0EFE               	movlw	-2
  5023   014BD2  CFE3 F034          	movff	plusw1,btemp+10
  5024   014BD6  0EFF               	movlw	-1
  5025   014BD8  CFE3 F035          	movff	plusw1,btemp+11
  5026   014BDC  0E04               	movlw	4
  5027   014BDE  2434               	addwf	(btemp+10)^0,w,c
  5028   014BE0  6ED9               	movwf	fsr2l,c
  5029   014BE2  0E00               	movlw	0
  5030   014BE4  2035               	addwfc	(btemp+11)^0,w,c
  5031   014BE6  6EDA               	movwf	fsr2h,c
  5032   014BE8  CFDE F02A          	movff	postinc2,btemp
  5033   014BEC  CFDD F02B          	movff	postdec2,btemp+1
  5034   014BF0                     
  5035                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  5036   014BF0  52E5               	movf	postdec1,f,c
  5037   014BF2  52E5               	movf	postdec1,f,c
  5038   014BF4  0012               	return		;funcret
  5039   014BF6                     __end_of_Event_getDelay:
  5040                           	callstack 0
  5041                           
  5042 ;; *************** function _Event_setPE *****************
  5043 ;; Defined at:
  5044 ;;		line 12 in file "xf/event.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;  me              2  [STACK] PTR struct Event_
  5047 ;;		 -> ev(6), 
  5048 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  5049 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1  [STACK] void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used: 1
  5067 ;; Hardware stack levels required when called: 7
  5068 ;; This function calls:
  5069 ;;		Nothing
  5070 ;; This function is called by:
  5071 ;;		_XF_post
  5072 ;; This function uses a reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text9
  5076   014A3E                     __ptext9:
  5077                           	callstack 0
  5078   014A3E                     _Event_setPE:
  5079                           	callstack 21
  5080   014A3E                     
  5081                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  5082                           ;stkvar	_processEvent @ sp[(0)+-5]
  5083   014A3E  50E1               	movf	fsr1l,w,c
  5084   014A40  0FFB               	addlw	-5
  5085   014A42  6ED9               	movwf	fsr2l,c
  5086   014A44  50E2               	movf	fsr1h,w,c
  5087   014A46  6EDA               	movwf	fsr2h,c
  5088   014A48  0EFF               	movlw	255
  5089   014A4A  22DA               	addwfc	fsr2h,f,c
  5090                           
  5091                           ;stkvar	_me @ sp[(0)+-2]
  5092   014A4C  0EFE               	movlw	-2
  5093   014A4E  CFE3 F034          	movff	plusw1,btemp+10
  5094   014A52  0EFF               	movlw	-1
  5095   014A54  CFE3 F035          	movff	plusw1,btemp+11
  5096   014A58  0E01               	movlw	1
  5097   014A5A  2434               	addwf	(btemp+10)^0,w,c
  5098   014A5C  6EE9               	movwf	fsr0l,c
  5099   014A5E  0E00               	movlw	0
  5100   014A60  2035               	addwfc	(btemp+11)^0,w,c
  5101   014A62  6EEA               	movwf	fsr0h,c
  5102   014A64  CFDE FFEE          	movff	postinc2,postinc0
  5103   014A68  CFDE FFEE          	movff	postinc2,postinc0
  5104   014A6C  CFDE FFEE          	movff	postinc2,postinc0
  5105   014A70                     
  5106                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  5107   014A70  0EFB               	movlw	251
  5108   014A72  26E1               	addwf	fsr1l,f,c
  5109   014A74  0EFF               	movlw	255
  5110   014A76  22E2               	addwfc	fsr1h,f,c
  5111   014A78  0012               	return		;funcret
  5112   014A7A                     __end_of_Event_setPE:
  5113                           	callstack 0
  5114                           
  5115 ;; *************** function _Event_setId *****************
  5116 ;; Defined at:
  5117 ;;		line 22 in file "xf/event.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  me              2  [STACK] PTR struct Event_
  5120 ;;		 -> ev(6), 
  5121 ;;  eventID         1  [STACK] unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1  [STACK] void 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;Total ram usage:        0 bytes
  5138 ;; Hardware stack levels used: 1
  5139 ;; Hardware stack levels required when called: 7
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_XF_post
  5144 ;; This function uses a reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text10
  5148   014C34                     __ptext10:
  5149                           	callstack 0
  5150   014C34                     _Event_setId:
  5151                           	callstack 21
  5152   014C34                     
  5153                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  5154                           ;stkvar	_eventID @ sp[(0)+-3]
  5155                           ;stkvar	_me @ sp[(0)+-2]
  5156   014C34  0EFE               	movlw	-2
  5157   014C36  CFE3 FFD9          	movff	plusw1,fsr2l
  5158   014C3A  0EFF               	movlw	-1
  5159   014C3C  CFE3 FFDA          	movff	plusw1,fsr2h
  5160   014C40  0EFD               	movlw	-3
  5161   014C42  CFE3 FFDF          	movff	plusw1,indf2
  5162   014C46                     
  5163                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5164   014C46  52E5               	movf	postdec1,f,c
  5165   014C48  52E5               	movf	postdec1,f,c
  5166   014C4A  52E5               	movf	postdec1,f,c
  5167   014C4C  0012               	return		;funcret
  5168   014C4E                     __end_of_Event_setId:
  5169                           	callstack 0
  5170                           
  5171 ;; *************** function _CanReceive *****************
  5172 ;; Defined at:
  5173 ;;		line 242 in file "can/can.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5176 ;;		 -> rxObj(16), 
  5177 ;;  rxd             2  [STACK] PTR unsigned char 
  5178 ;;		 -> rxdata(8), 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  rxFlags         1  [STACK] enum E5588
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1  [STACK] char 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 11
  5197 ;; This function calls:
  5198 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5199 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5200 ;; This function is called by:
  5201 ;;		_updateCarState
  5202 ;; This function uses a reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text11
  5206   0147B8                     __ptext11:
  5207                           	callstack 0
  5208   0147B8                     _CanReceive:
  5209                           	callstack 0
  5210                           
  5211                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5212   0147B8  52E6               	movf	postinc1,f,c
  5213   0147BA                     
  5214                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5215                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5216   0147BA  0EFF               	movlw	255
  5217   0147BC  24E1               	addwf	fsr1l,w,c
  5218   0147BE  6E2A               	movwf	btemp^0,c
  5219   0147C0  0EFF               	movlw	255
  5220   0147C2  20E2               	addwfc	fsr1h,w,c
  5221   0147C4  6E2B               	movwf	(btemp+1)^0,c
  5222   0147C6  C02A  FFE6         	movff	btemp,postinc1
  5223   0147CA  C02B  FFE6         	movff	btemp+1,postinc1
  5224   0147CE  0E02               	movlw	2
  5225   0147D0  6EE6               	movwf	postinc1,c
  5226   0147D2  EC7C  F0A1         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5227   0147D6                     
  5228                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5229                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5230   0147D6  0EFF               	movlw	-1
  5231   0147D8  A0E3               	btfss	plusw1,0,c
  5232   0147DA  EFF1  F0A3         	goto	u2891
  5233   0147DE  EFF3  F0A3         	goto	u2890
  5234   0147E2                     u2891:
  5235   0147E2  EF07  F0A4         	goto	l5153
  5236   0147E6                     u2890:
  5237   0147E6                     
  5238                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5239   0147E6  0E08               	movlw	8
  5240   0147E8  6EE6               	movwf	postinc1,c
  5241                           
  5242                           ;stkvar	_rxd @ sp[(-2)+-4]
  5243   0147EA  0EFA               	movlw	-6
  5244   0147EC  CFE3 FFE6          	movff	plusw1,postinc1
  5245   0147F0  CFE3 FFE6          	movff	plusw1,postinc1
  5246                           
  5247                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5248   0147F4  0EFA               	movlw	-6
  5249   0147F6  CFE3 FFE6          	movff	plusw1,postinc1
  5250   0147FA  CFE3 FFE6          	movff	plusw1,postinc1
  5251   0147FE  0E02               	movlw	2
  5252   014800  6EE6               	movwf	postinc1,c
  5253   014802  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5254   014806                     
  5255                           ;can/can.c: 249:     return 0;
  5256   014806  0E00               	movlw	0
  5257   014808  6E2A               	movwf	btemp^0,c
  5258   01480A  EF09  F0A4         	goto	l165
  5259   01480E                     l5153:
  5260                           
  5261                           ;can/can.c: 251:   return -1;
  5262   01480E  0EFF               	movlw	255
  5263   014810  6E2A               	movwf	btemp^0,c
  5264   014812                     l165:
  5265                           
  5266                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5267   014812  0EFB               	movlw	251
  5268   014814  26E1               	addwf	fsr1l,f,c
  5269   014816  0EFF               	movlw	255
  5270   014818  22E2               	addwfc	fsr1h,f,c
  5271   01481A  0012               	return		;funcret
  5272   01481C                     __end_of_CanReceive:
  5273                           	callstack 0
  5274                           
  5275 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5276 ;; Defined at:
  5277 ;;		line 1236 in file "can/can.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  channel         1  [STACK] enum E5287
  5280 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5281 ;;		 -> rxObj(16), txMsg(16), 
  5282 ;;  rxd             2  [STACK] PTR unsigned char 
  5283 ;;		 -> rxdata(8), 
  5284 ;;  nBytes          1  [STACK] unsigned char 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;  temp32          4  [STACK] unsigned long 
  5287 ;;  ba             76  [STACK] unsigned char [76]
  5288 ;;  fifoReg        12  [STACK] unsigned long [3]
  5289 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5290 ;;  myReg           4  [STACK] struct _REG_t
  5291 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5292 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5293 ;;  a               2  [STACK] unsigned short 
  5294 ;;  i               1  [STACK] unsigned char 
  5295 ;;  n               1  [STACK] unsigned char 
  5296 ;;  spiTransferE    1  [STACK] char 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  1  [STACK] char 
  5299 ;; Registers used:
  5300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;Total ram usage:        0 bytes
  5311 ;; Hardware stack levels used: 1
  5312 ;; Hardware stack levels required when called: 10
  5313 ;; This function calls:
  5314 ;;		_DRV_CANFDSPI_ReadByteArray
  5315 ;;		_DRV_CANFDSPI_ReadWordArray
  5316 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5317 ;; This function is called by:
  5318 ;;		_CanReceive
  5319 ;; This function uses a reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text12
  5323   01074C                     __ptext12:
  5324                           	callstack 0
  5325   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5326                           	callstack 0
  5327                           
  5328                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5329   01074C  0E6E               	movlw	110
  5330   01074E  26E1               	addwf	fsr1l,f,c
  5331   010750  0E00               	movlw	0
  5332   010752  22E2               	addwfc	fsr1h,f,c
  5333   010754                     
  5334                           ;can/can.c: 1241:     uint8_t i = 0;
  5335                           ;stkvar	_i @ sp[(-110)+107]
  5336   010754  0EFD               	movlw	-3
  5337   010756  6AE3               	clrf	plusw1,c
  5338                           
  5339                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5340                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5341   010758  0EFF               	movlw	-1
  5342   01075A  6AE3               	clrf	plusw1,c
  5343   01075C                     
  5344                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5345                           ;stkvar	_channel @ sp[(-110)+-1]
  5346   01075C  0E91               	movlw	-111
  5347   01075E  50E3               	movf	plusw1,w,c
  5348   010760  0D0C               	mullw	12
  5349   010762  0E50               	movlw	80
  5350   010764  26F3               	addwf	243,f,c
  5351   010766  0E00               	movlw	0
  5352   010768  22F4               	addwfc	244,f,c
  5353                           
  5354                           ;stkvar	_a @ sp[(-110)+105]
  5355   01076A  0EFB               	movlw	-5
  5356   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5357   010770  0EFC               	movlw	-4
  5358   010772  CFF4 FFE3          	movff	prodh,plusw1
  5359   010776                     
  5360                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5361   010776  0E03               	movlw	3
  5362   010778  6EE6               	movwf	postinc1,c
  5363   01077A  0E00               	movlw	0
  5364   01077C  6EE6               	movwf	postinc1,c
  5365                           
  5366                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5367   01077E  0EE0               	movlw	224
  5368   010780  24E1               	addwf	fsr1l,w,c
  5369   010782  6E2A               	movwf	btemp^0,c
  5370   010784  0EFF               	movlw	255
  5371   010786  20E2               	addwfc	fsr1h,w,c
  5372   010788  6E2B               	movwf	(btemp+1)^0,c
  5373   01078A  C02A  FFE6         	movff	btemp,postinc1
  5374   01078E  C02B  FFE6         	movff	btemp+1,postinc1
  5375                           
  5376                           ;stkvar	_a @ sp[(-114)+105]
  5377   010792  0EF7               	movlw	-9
  5378   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5379   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5380   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5381                           
  5382                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5383   0107A0  0EFF               	movlw	-1
  5384   0107A2  C02A  FFE3         	movff	btemp,plusw1
  5385   0107A6                     
  5386                           ;can/can.c: 1253:     if (spiTransferError) {
  5387                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5388   0107A6  0EFF               	movlw	-1
  5389   0107A8  50E3               	movf	plusw1,w,c
  5390   0107AA  B4D8               	btfsc	status,2,c
  5391   0107AC  EFDA  F083         	goto	u2211
  5392   0107B0  EFDC  F083         	goto	u2210
  5393   0107B4                     u2211:
  5394   0107B4  EFDE  F083         	goto	l4573
  5395   0107B8                     u2210:
  5396   0107B8  EF15  F087         	goto	l357
  5397   0107BC                     l4573:
  5398                           
  5399                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5400                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5401   0107BC  0EE2               	movlw	-30
  5402   0107BE  CFE3 F032          	movff	plusw1,btemp+8
  5403   0107C2  0EE3               	movlw	-29
  5404   0107C4  CFE3 F033          	movff	plusw1,btemp+9
  5405   0107C8  0EE4               	movlw	-28
  5406   0107CA  CFE3 F034          	movff	plusw1,btemp+10
  5407   0107CE  0EE5               	movlw	-27
  5408   0107D0  CFE3 F035          	movff	plusw1,btemp+11
  5409                           
  5410                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5411   0107D4  0EEE               	movlw	-18
  5412   0107D6  C032  FFE3         	movff	btemp+8,plusw1
  5413   0107DA  0EEF               	movlw	-17
  5414   0107DC  C033  FFE3         	movff	btemp+9,plusw1
  5415   0107E0  0EF0               	movlw	-16
  5416   0107E2  C034  FFE3         	movff	btemp+10,plusw1
  5417   0107E6  0EF1               	movlw	-15
  5418   0107E8  C035  FFE3         	movff	btemp+11,plusw1
  5419   0107EC                     
  5420                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5421                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5422   0107EC  50E1               	movf	fsr1l,w,c
  5423   0107EE  0FEE               	addlw	-18
  5424   0107F0  6ED9               	movwf	fsr2l,c
  5425   0107F2  50E2               	movf	fsr1h,w,c
  5426   0107F4  6EDA               	movwf	fsr2h,c
  5427   0107F6  0EFF               	movlw	255
  5428   0107F8  22DA               	addwfc	fsr2h,f,c
  5429   0107FA  AEDF               	btfss	indf2,7,c
  5430   0107FC  EF02  F084         	goto	u2221
  5431   010800  EF04  F084         	goto	u2220
  5432   010804                     u2221:
  5433   010804  EF06  F084         	goto	l4579
  5434   010808                     u2220:
  5435   010808  EF15  F087         	goto	l357
  5436   01080C                     l4579:
  5437                           
  5438                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5439                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5440   01080C  0EEA               	movlw	234
  5441   01080E  24E1               	addwf	fsr1l,w,c
  5442   010810  6ED9               	movwf	fsr2l,c
  5443   010812  0EFF               	movlw	255
  5444   010814  20E2               	addwfc	fsr1h,w,c
  5445   010816  6EDA               	movwf	fsr2h,c
  5446   010818  CFDE F032          	movff	postinc2,btemp+8
  5447   01081C  CFDE F033          	movff	postinc2,btemp+9
  5448   010820  CFDE F034          	movff	postinc2,btemp+10
  5449   010824  CFDE F035          	movff	postinc2,btemp+11
  5450                           
  5451                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5452   010828  0EF7               	movlw	-9
  5453   01082A  C032  FFE3         	movff	btemp+8,plusw1
  5454   01082E  0EF8               	movlw	-8
  5455   010830  C033  FFE3         	movff	btemp+9,plusw1
  5456   010834  0EF9               	movlw	-7
  5457   010836  C034  FFE3         	movff	btemp+10,plusw1
  5458   01083A  0EFA               	movlw	-6
  5459   01083C  C035  FFE3         	movff	btemp+11,plusw1
  5460   010840                     
  5461                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5462                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5463                           ;stkvar	_a @ sp[(-110)+105]
  5464   010840  0EF7               	movlw	-9
  5465   010842  CFE3 F02A          	movff	plusw1,btemp
  5466   010846  0EFB               	movlw	-5
  5467   010848  C02A  FFE3         	movff	btemp,plusw1
  5468   01084C  0EF8               	movlw	-8
  5469   01084E  CFE3 F02A          	movff	plusw1,btemp
  5470   010852  0EFC               	movlw	-4
  5471   010854  C02A  FFE3         	movff	btemp,plusw1
  5472   010858                     
  5473                           ;can/can.c: 1273:     a += 0x400;
  5474                           ;stkvar	_a @ sp[(-110)+105]
  5475   010858  50E1               	movf	fsr1l,w,c
  5476   01085A  0FFB               	addlw	-5
  5477   01085C  6ED9               	movwf	fsr2l,c
  5478   01085E  50E2               	movf	fsr1h,w,c
  5479   010860  6EDA               	movwf	fsr2h,c
  5480   010862  0EFF               	movlw	255
  5481   010864  22DA               	addwfc	fsr2h,f,c
  5482   010866  0E00               	movlw	0
  5483   010868  26DE               	addwf	postinc2,f,c
  5484   01086A  0E04               	movlw	4
  5485   01086C  22DD               	addwfc	postdec2,f,c
  5486   01086E                     
  5487                           ;can/can.c: 1276:     n = nBytes + 8;
  5488   01086E  0E08               	movlw	8
  5489   010870  6E35               	movwf	(btemp+11)^0,c
  5490                           
  5491                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5492   010872  0E8C               	movlw	-116
  5493   010874  50E3               	movf	plusw1,w,c
  5494   010876  2435               	addwf	(btemp+11)^0,w,c
  5495   010878  6E34               	movwf	(btemp+10)^0,c
  5496                           
  5497                           ;stkvar	_n @ sp[(-110)+108]
  5498   01087A  0EFE               	movlw	-2
  5499   01087C  C034  FFE3         	movff	btemp+10,plusw1
  5500   010880                     
  5501                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5502                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5503   010880  50E1               	movf	fsr1l,w,c
  5504   010882  0FEE               	addlw	-18
  5505   010884  6ED9               	movwf	fsr2l,c
  5506   010886  50E2               	movf	fsr1h,w,c
  5507   010888  6EDA               	movwf	fsr2h,c
  5508   01088A  0EFF               	movlw	255
  5509   01088C  22DA               	addwfc	fsr2h,f,c
  5510   01088E  AADF               	btfss	indf2,5,c
  5511   010890  EF4C  F084         	goto	u2231
  5512   010894  EF4E  F084         	goto	u2230
  5513   010898                     u2231:
  5514   010898  EF56  F084         	goto	l4591
  5515   01089C                     u2230:
  5516   01089C                     
  5517                           ;can/can.c: 1279:         n += 4;
  5518                           ;stkvar	_n @ sp[(-110)+108]
  5519   01089C  0EFE               	movlw	-2
  5520   01089E  CFE3 F02A          	movff	plusw1,btemp
  5521   0108A2  0E04               	movlw	4
  5522   0108A4  262A               	addwf	btemp^0,f,c
  5523   0108A6  0EFE               	movlw	-2
  5524   0108A8  C02A  FFE3         	movff	btemp,plusw1
  5525   0108AC                     l4591:
  5526                           
  5527                           ;can/can.c: 1283:     if (n % 4) {
  5528                           ;stkvar	_n @ sp[(-110)+108]
  5529   0108AC  0EFE               	movlw	-2
  5530   0108AE  CFE3 F035          	movff	plusw1,btemp+11
  5531   0108B2  0E03               	movlw	3
  5532   0108B4  1635               	andwf	(btemp+11)^0,f,c
  5533   0108B6  B4D8               	btfsc	status,2,c
  5534   0108B8  EF60  F084         	goto	u2241
  5535   0108BC  EF62  F084         	goto	u2240
  5536   0108C0                     u2241:
  5537   0108C0  EF72  F084         	goto	l4595
  5538   0108C4                     u2240:
  5539   0108C4                     
  5540                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5541                           ;stkvar	_n @ sp[(-110)+108]
  5542   0108C4  0EFE               	movlw	-2
  5543   0108C6  CFE3 F035          	movff	plusw1,btemp+11
  5544   0108CA  0E03               	movlw	3
  5545   0108CC  1635               	andwf	(btemp+11)^0,f,c
  5546                           
  5547                           ;stkvar	_n @ sp[(-110)+108]
  5548   0108CE  0EFE               	movlw	-2
  5549   0108D0  CFE3 F034          	movff	plusw1,btemp+10
  5550   0108D4  5035               	movf	(btemp+11)^0,w,c
  5551   0108D6  5C34               	subwf	(btemp+10)^0,w,c
  5552   0108D8  6E35               	movwf	(btemp+11)^0,c
  5553   0108DA  0E04               	movlw	4
  5554   0108DC  2635               	addwf	(btemp+11)^0,f,c
  5555                           
  5556                           ;stkvar	_n @ sp[(-110)+108]
  5557   0108DE  0EFE               	movlw	-2
  5558   0108E0  C035  FFE3         	movff	btemp+11,plusw1
  5559   0108E4                     l4595:
  5560                           
  5561                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5562                           ;stkvar	_n @ sp[(-110)+108]
  5563   0108E4  0EFE               	movlw	-2
  5564   0108E6  CFE3 F02A          	movff	plusw1,btemp
  5565   0108EA  0E4C               	movlw	76
  5566   0108EC  642A               	cpfsgt	btemp^0,c
  5567   0108EE  EF7B  F084         	goto	u2251
  5568   0108F2  EF7D  F084         	goto	u2250
  5569   0108F6                     u2251:
  5570   0108F6  EF82  F084         	goto	l4599
  5571   0108FA                     u2250:
  5572   0108FA                     
  5573                           ;can/can.c: 1291:         n = 76;
  5574   0108FA  0E4C               	movlw	76
  5575   0108FC  6E35               	movwf	(btemp+11)^0,c
  5576                           
  5577                           ;stkvar	_n @ sp[(-110)+108]
  5578   0108FE  0EFE               	movlw	-2
  5579   010900  C035  FFE3         	movff	btemp+11,plusw1
  5580   010904                     l4599:
  5581                           
  5582                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5583                           ;stkvar	_n @ sp[(-110)+108]
  5584   010904  0EFE               	movlw	-2
  5585   010906  50E3               	movf	plusw1,w,c
  5586   010908  6EE6               	movwf	postinc1,c
  5587   01090A  0E00               	movlw	0
  5588   01090C  6EE6               	movwf	postinc1,c
  5589                           
  5590                           ;stkvar	_ba @ sp[(-112)+4]
  5591   01090E  0E94               	movlw	148
  5592   010910  24E1               	addwf	fsr1l,w,c
  5593   010912  6E2A               	movwf	btemp^0,c
  5594   010914  0EFF               	movlw	255
  5595   010916  20E2               	addwfc	fsr1h,w,c
  5596   010918  6E2B               	movwf	(btemp+1)^0,c
  5597   01091A  C02A  FFE6         	movff	btemp,postinc1
  5598   01091E  C02B  FFE6         	movff	btemp+1,postinc1
  5599                           
  5600                           ;stkvar	_a @ sp[(-114)+105]
  5601   010922  0EF7               	movlw	-9
  5602   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5603   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5604   01092C  EC08  F095         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5605                           
  5606                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5607   010930  0EFF               	movlw	-1
  5608   010932  C02A  FFE3         	movff	btemp,plusw1
  5609   010936                     
  5610                           ;can/can.c: 1295:     if (spiTransferError) {
  5611                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5612   010936  0EFF               	movlw	-1
  5613   010938  50E3               	movf	plusw1,w,c
  5614   01093A  B4D8               	btfsc	status,2,c
  5615   01093C  EFA2  F084         	goto	u2261
  5616   010940  EFA4  F084         	goto	u2260
  5617   010944                     u2261:
  5618   010944  EFA6  F084         	goto	l4605
  5619   010948                     u2260:
  5620   010948  EF15  F087         	goto	l357
  5621   01094C                     l4605:
  5622                           
  5623                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5624                           ;stkvar	_ba @ sp[(-110)+4]
  5625   01094C  0E9A               	movlw	154
  5626   01094E  24E1               	addwf	fsr1l,w,c
  5627   010950  6ED9               	movwf	fsr2l,c
  5628   010952  0EFF               	movlw	255
  5629   010954  20E2               	addwfc	fsr1h,w,c
  5630   010956  6EDA               	movwf	fsr2h,c
  5631                           
  5632                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5633   010958  0E8F               	movlw	-113
  5634   01095A  CFE3 F034          	movff	plusw1,btemp+10
  5635   01095E  0E90               	movlw	-112
  5636   010960  CFE3 F035          	movff	plusw1,btemp+11
  5637   010964  0E06               	movlw	6
  5638   010966  2434               	addwf	(btemp+10)^0,w,c
  5639   010968  6EE9               	movwf	fsr0l,c
  5640   01096A  0E00               	movlw	0
  5641   01096C  2035               	addwfc	(btemp+11)^0,w,c
  5642   01096E  6EEA               	movwf	fsr0h,c
  5643   010970  CFDF FFEF          	movff	indf2,indf0
  5644   010974                     
  5645                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5646                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5647   010974  0E8F               	movlw	-113
  5648   010976  CFE3 F034          	movff	plusw1,btemp+10
  5649   01097A  0E90               	movlw	-112
  5650   01097C  CFE3 F035          	movff	plusw1,btemp+11
  5651   010980  0E06               	movlw	6
  5652   010982  2434               	addwf	(btemp+10)^0,w,c
  5653   010984  6ED9               	movwf	fsr2l,c
  5654   010986  0E00               	movlw	0
  5655   010988  2035               	addwfc	(btemp+11)^0,w,c
  5656   01098A  6EDA               	movwf	fsr2h,c
  5657   01098C  B8DF               	btfsc	indf2,4,c
  5658   01098E  EFCB  F084         	goto	u2271
  5659   010992  EFCD  F084         	goto	u2270
  5660   010996                     u2271:
  5661   010996  EF38  F085         	goto	l4611
  5662   01099A                     u2270:
  5663   01099A                     
  5664                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5665                           ;stkvar	_ba @ sp[(-110)+4]
  5666   01099A  0E99               	movlw	153
  5667   01099C  24E1               	addwf	fsr1l,w,c
  5668   01099E  6ED9               	movwf	fsr2l,c
  5669   0109A0  0EFF               	movlw	255
  5670   0109A2  20E2               	addwfc	fsr1h,w,c
  5671   0109A4  6EDA               	movwf	fsr2h,c
  5672   0109A6  50DF               	movf	indf2,w,c
  5673   0109A8  6E35               	movwf	(btemp+11)^0,c
  5674   0109AA  0E1F               	movlw	31
  5675   0109AC  1635               	andwf	(btemp+11)^0,f,c
  5676   0109AE  C035  F02E         	movff	btemp+11,btemp+4
  5677   0109B2  6A2F               	clrf	(btemp+5)^0,c
  5678   0109B4  6A30               	clrf	(btemp+6)^0,c
  5679   0109B6  6A31               	clrf	(btemp+7)^0,c
  5680   0109B8  C02E  F031         	movff	btemp+4,btemp+7
  5681   0109BC  6A30               	clrf	(btemp+6)^0,c
  5682   0109BE  6A2F               	clrf	(btemp+5)^0,c
  5683   0109C0  6A2E               	clrf	(btemp+4)^0,c
  5684                           
  5685                           ;stkvar	_ba @ sp[(-110)+4]
  5686   0109C2  0E97               	movlw	151
  5687   0109C4  24E1               	addwf	fsr1l,w,c
  5688   0109C6  6ED9               	movwf	fsr2l,c
  5689   0109C8  0EFF               	movlw	255
  5690   0109CA  20E2               	addwfc	fsr1h,w,c
  5691   0109CC  6EDA               	movwf	fsr2h,c
  5692   0109CE  50DF               	movf	indf2,w,c
  5693   0109D0  6E35               	movwf	(btemp+11)^0,c
  5694   0109D2  C035  F02A         	movff	btemp+11,btemp
  5695   0109D6  6A2B               	clrf	(btemp+1)^0,c
  5696   0109D8  6A2C               	clrf	(btemp+2)^0,c
  5697   0109DA  6A2D               	clrf	(btemp+3)^0,c
  5698   0109DC  C02C  F02D         	movff	btemp+2,btemp+3
  5699   0109E0  C02B  F02C         	movff	btemp+1,btemp+2
  5700   0109E4  C02A  F02B         	movff	btemp,btemp+1
  5701   0109E8  6A2A               	clrf	btemp^0,c
  5702                           
  5703                           ;stkvar	_ba @ sp[(-110)+4]
  5704   0109EA  0E96               	movlw	-106
  5705   0109EC  50E3               	movf	plusw1,w,c
  5706   0109EE  6E32               	movwf	(btemp+8)^0,c
  5707   0109F0  6A33               	clrf	(btemp+9)^0,c
  5708   0109F2  6A34               	clrf	(btemp+10)^0,c
  5709   0109F4  6A35               	clrf	(btemp+11)^0,c
  5710   0109F6  502A               	movf	btemp^0,w,c
  5711   0109F8  1232               	iorwf	(btemp+8)^0,f,c
  5712   0109FA  502B               	movf	(btemp+1)^0,w,c
  5713   0109FC  1233               	iorwf	(btemp+9)^0,f,c
  5714   0109FE  502C               	movf	(btemp+2)^0,w,c
  5715   010A00  1234               	iorwf	(btemp+10)^0,f,c
  5716   010A02  502D               	movf	(btemp+3)^0,w,c
  5717   010A04  1235               	iorwf	(btemp+11)^0,f,c
  5718                           
  5719                           ;stkvar	_ba @ sp[(-110)+4]
  5720   010A06  0E98               	movlw	152
  5721   010A08  24E1               	addwf	fsr1l,w,c
  5722   010A0A  6ED9               	movwf	fsr2l,c
  5723   010A0C  0EFF               	movlw	255
  5724   010A0E  20E2               	addwfc	fsr1h,w,c
  5725   010A10  6EDA               	movwf	fsr2h,c
  5726   010A12  50DF               	movf	indf2,w,c
  5727   010A14  6E2A               	movwf	btemp^0,c
  5728   010A16  6A2B               	clrf	(btemp+1)^0,c
  5729   010A18  6A2C               	clrf	(btemp+2)^0,c
  5730   010A1A  6A2D               	clrf	(btemp+3)^0,c
  5731   010A1C  C02B  F02D         	movff	btemp+1,btemp+3
  5732   010A20  C02A  F02C         	movff	btemp,btemp+2
  5733   010A24  6A2B               	clrf	(btemp+1)^0,c
  5734   010A26  6A2A               	clrf	btemp^0,c
  5735   010A28  502A               	movf	btemp^0,w,c
  5736   010A2A  1232               	iorwf	(btemp+8)^0,f,c
  5737   010A2C  502B               	movf	(btemp+1)^0,w,c
  5738   010A2E  1233               	iorwf	(btemp+9)^0,f,c
  5739   010A30  502C               	movf	(btemp+2)^0,w,c
  5740   010A32  1234               	iorwf	(btemp+10)^0,f,c
  5741   010A34  502D               	movf	(btemp+3)^0,w,c
  5742   010A36  1235               	iorwf	(btemp+11)^0,f,c
  5743   010A38  502E               	movf	(btemp+4)^0,w,c
  5744   010A3A  1032               	iorwf	(btemp+8)^0,w,c
  5745   010A3C  6E2A               	movwf	btemp^0,c
  5746   010A3E  502F               	movf	(btemp+5)^0,w,c
  5747   010A40  1033               	iorwf	(btemp+9)^0,w,c
  5748   010A42  6E2B               	movwf	(btemp+1)^0,c
  5749   010A44  5030               	movf	(btemp+6)^0,w,c
  5750   010A46  1034               	iorwf	(btemp+10)^0,w,c
  5751   010A48  6E2C               	movwf	(btemp+2)^0,c
  5752   010A4A  5031               	movf	(btemp+7)^0,w,c
  5753   010A4C  1035               	iorwf	(btemp+11)^0,w,c
  5754   010A4E  6E2D               	movwf	(btemp+3)^0,c
  5755                           
  5756                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5757   010A50  0E8F               	movlw	-113
  5758   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5759   010A56  0E90               	movlw	-112
  5760   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5761   010A5C  C02A  FFDE         	movff	btemp,postinc2
  5762   010A60  C02B  FFDE         	movff	btemp+1,postinc2
  5763   010A64  C02C  FFDE         	movff	btemp+2,postinc2
  5764   010A68  C02D  FFDE         	movff	btemp+3,postinc2
  5765                           
  5766                           ;can/can.c: 1320:     }
  5767   010A6C  EFF8  F085         	goto	l4613
  5768   010A70                     l4611:
  5769                           
  5770                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5771                           ;stkvar	_ba @ sp[(-110)+4]
  5772   010A70  0E99               	movlw	153
  5773   010A72  24E1               	addwf	fsr1l,w,c
  5774   010A74  6ED9               	movwf	fsr2l,c
  5775   010A76  0EFF               	movlw	255
  5776   010A78  20E2               	addwfc	fsr1h,w,c
  5777   010A7A  6EDA               	movwf	fsr2h,c
  5778   010A7C  50DF               	movf	indf2,w,c
  5779   010A7E  6E35               	movwf	(btemp+11)^0,c
  5780   010A80  0E1F               	movlw	31
  5781   010A82  1635               	andwf	(btemp+11)^0,f,c
  5782   010A84  C035  F02E         	movff	btemp+11,btemp+4
  5783   010A88  6A2F               	clrf	(btemp+5)^0,c
  5784   010A8A  6A30               	clrf	(btemp+6)^0,c
  5785   010A8C  6A31               	clrf	(btemp+7)^0,c
  5786   010A8E  C02E  F031         	movff	btemp+4,btemp+7
  5787   010A92  6A30               	clrf	(btemp+6)^0,c
  5788   010A94  6A2F               	clrf	(btemp+5)^0,c
  5789   010A96  6A2E               	clrf	(btemp+4)^0,c
  5790                           
  5791                           ;stkvar	_ba @ sp[(-110)+4]
  5792   010A98  0E97               	movlw	151
  5793   010A9A  24E1               	addwf	fsr1l,w,c
  5794   010A9C  6ED9               	movwf	fsr2l,c
  5795   010A9E  0EFF               	movlw	255
  5796   010AA0  20E2               	addwfc	fsr1h,w,c
  5797   010AA2  6EDA               	movwf	fsr2h,c
  5798   010AA4  50DF               	movf	indf2,w,c
  5799   010AA6  6E35               	movwf	(btemp+11)^0,c
  5800   010AA8  C035  F02A         	movff	btemp+11,btemp
  5801   010AAC  6A2B               	clrf	(btemp+1)^0,c
  5802   010AAE  6A2C               	clrf	(btemp+2)^0,c
  5803   010AB0  6A2D               	clrf	(btemp+3)^0,c
  5804   010AB2  C02C  F02D         	movff	btemp+2,btemp+3
  5805   010AB6  C02B  F02C         	movff	btemp+1,btemp+2
  5806   010ABA  C02A  F02B         	movff	btemp,btemp+1
  5807   010ABE  6A2A               	clrf	btemp^0,c
  5808                           
  5809                           ;stkvar	_ba @ sp[(-110)+4]
  5810   010AC0  0E96               	movlw	-106
  5811   010AC2  50E3               	movf	plusw1,w,c
  5812   010AC4  6E32               	movwf	(btemp+8)^0,c
  5813   010AC6  6A33               	clrf	(btemp+9)^0,c
  5814   010AC8  6A34               	clrf	(btemp+10)^0,c
  5815   010ACA  6A35               	clrf	(btemp+11)^0,c
  5816   010ACC  502A               	movf	btemp^0,w,c
  5817   010ACE  1232               	iorwf	(btemp+8)^0,f,c
  5818   010AD0  502B               	movf	(btemp+1)^0,w,c
  5819   010AD2  1233               	iorwf	(btemp+9)^0,f,c
  5820   010AD4  502C               	movf	(btemp+2)^0,w,c
  5821   010AD6  1234               	iorwf	(btemp+10)^0,f,c
  5822   010AD8  502D               	movf	(btemp+3)^0,w,c
  5823   010ADA  1235               	iorwf	(btemp+11)^0,f,c
  5824                           
  5825                           ;stkvar	_ba @ sp[(-110)+4]
  5826   010ADC  0E98               	movlw	152
  5827   010ADE  24E1               	addwf	fsr1l,w,c
  5828   010AE0  6ED9               	movwf	fsr2l,c
  5829   010AE2  0EFF               	movlw	255
  5830   010AE4  20E2               	addwfc	fsr1h,w,c
  5831   010AE6  6EDA               	movwf	fsr2h,c
  5832   010AE8  50DF               	movf	indf2,w,c
  5833   010AEA  6E2A               	movwf	btemp^0,c
  5834   010AEC  6A2B               	clrf	(btemp+1)^0,c
  5835   010AEE  6A2C               	clrf	(btemp+2)^0,c
  5836   010AF0  6A2D               	clrf	(btemp+3)^0,c
  5837   010AF2  C02B  F02D         	movff	btemp+1,btemp+3
  5838   010AF6  C02A  F02C         	movff	btemp,btemp+2
  5839   010AFA  6A2B               	clrf	(btemp+1)^0,c
  5840   010AFC  6A2A               	clrf	btemp^0,c
  5841   010AFE  502A               	movf	btemp^0,w,c
  5842   010B00  1232               	iorwf	(btemp+8)^0,f,c
  5843   010B02  502B               	movf	(btemp+1)^0,w,c
  5844   010B04  1233               	iorwf	(btemp+9)^0,f,c
  5845   010B06  502C               	movf	(btemp+2)^0,w,c
  5846   010B08  1234               	iorwf	(btemp+10)^0,f,c
  5847   010B0A  502D               	movf	(btemp+3)^0,w,c
  5848   010B0C  1235               	iorwf	(btemp+11)^0,f,c
  5849   010B0E  502E               	movf	(btemp+4)^0,w,c
  5850   010B10  1032               	iorwf	(btemp+8)^0,w,c
  5851   010B12  6E2A               	movwf	btemp^0,c
  5852   010B14  502F               	movf	(btemp+5)^0,w,c
  5853   010B16  1033               	iorwf	(btemp+9)^0,w,c
  5854   010B18  6E2B               	movwf	(btemp+1)^0,c
  5855   010B1A  5030               	movf	(btemp+6)^0,w,c
  5856   010B1C  1034               	iorwf	(btemp+10)^0,w,c
  5857   010B1E  6E2C               	movwf	(btemp+2)^0,c
  5858   010B20  5031               	movf	(btemp+7)^0,w,c
  5859   010B22  1035               	iorwf	(btemp+11)^0,w,c
  5860   010B24  6E2D               	movwf	(btemp+3)^0,c
  5861                           
  5862                           ;stkvar	_temp32 @ sp[(-110)+0]
  5863   010B26  0E92               	movlw	-110
  5864   010B28  C02A  FFE3         	movff	btemp,plusw1
  5865   010B2C  0E93               	movlw	-109
  5866   010B2E  C02B  FFE3         	movff	btemp+1,plusw1
  5867   010B32  0E94               	movlw	-108
  5868   010B34  C02C  FFE3         	movff	btemp+2,plusw1
  5869   010B38  0E95               	movlw	-107
  5870   010B3A  C02D  FFE3         	movff	btemp+3,plusw1
  5871                           
  5872                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5873                           ;stkvar	_temp32 @ sp[(-110)+0]
  5874   010B3E  0E92               	movlw	-110
  5875   010B40  CFE3 F032          	movff	plusw1,btemp+8
  5876   010B44  0E93               	movlw	-109
  5877   010B46  CFE3 F033          	movff	plusw1,btemp+9
  5878   010B4A  0E94               	movlw	-108
  5879   010B4C  CFE3 F034          	movff	plusw1,btemp+10
  5880   010B50  0E95               	movlw	-107
  5881   010B52  CFE3 F035          	movff	plusw1,btemp+11
  5882   010B56  0E0C               	movlw	12
  5883   010B58  EFB3  F085         	goto	u2280
  5884   010B5C                     u2285:
  5885   010B5C  90D8               	bcf	status,0,c
  5886   010B5E  3235               	rrcf	(btemp+11)^0,f,c
  5887   010B60  3234               	rrcf	(btemp+10)^0,f,c
  5888   010B62  3233               	rrcf	(btemp+9)^0,f,c
  5889   010B64  3232               	rrcf	(btemp+8)^0,f,c
  5890   010B66                     u2280:
  5891   010B66  2EE8               	decfsz	wreg,f,c
  5892   010B68  EFAE  F085         	goto	u2285
  5893   010B6C  0EFF               	movlw	255
  5894   010B6E  1432               	andwf	(btemp+8)^0,w,c
  5895   010B70  6E2E               	movwf	(btemp+4)^0,c
  5896   010B72  0EFF               	movlw	255
  5897   010B74  1433               	andwf	(btemp+9)^0,w,c
  5898   010B76  6E2F               	movwf	(btemp+5)^0,c
  5899   010B78  0E03               	movlw	3
  5900   010B7A  1434               	andwf	(btemp+10)^0,w,c
  5901   010B7C  6E30               	movwf	(btemp+6)^0,c
  5902   010B7E  0E00               	movlw	0
  5903   010B80  1435               	andwf	(btemp+11)^0,w,c
  5904   010B82  6E31               	movwf	(btemp+7)^0,c
  5905                           
  5906                           ;stkvar	_temp32 @ sp[(-110)+0]
  5907   010B84  50E1               	movf	fsr1l,w,c
  5908   010B86  0F92               	addlw	-110
  5909   010B88  6ED9               	movwf	fsr2l,c
  5910   010B8A  50E2               	movf	fsr1h,w,c
  5911   010B8C  6EDA               	movwf	fsr2h,c
  5912   010B8E  0EFF               	movlw	255
  5913   010B90  22DA               	addwfc	fsr2h,f,c
  5914   010B92  0EFF               	movlw	255
  5915   010B94  14DE               	andwf	postinc2,w,c
  5916   010B96  6E32               	movwf	(btemp+8)^0,c
  5917   010B98  0E07               	movlw	7
  5918   010B9A  14DE               	andwf	postinc2,w,c
  5919   010B9C  6E33               	movwf	(btemp+9)^0,c
  5920   010B9E  0E00               	movlw	0
  5921   010BA0  14DE               	andwf	postinc2,w,c
  5922   010BA2  6E34               	movwf	(btemp+10)^0,c
  5923   010BA4  0E00               	movlw	0
  5924   010BA6  14DE               	andwf	postinc2,w,c
  5925   010BA8  6E35               	movwf	(btemp+11)^0,c
  5926   010BAA  0E12               	movlw	18
  5927   010BAC                     u2295:
  5928   010BAC  90D8               	bcf	status,0,c
  5929   010BAE  3632               	rlcf	(btemp+8)^0,f,c
  5930   010BB0  3633               	rlcf	(btemp+9)^0,f,c
  5931   010BB2  3634               	rlcf	(btemp+10)^0,f,c
  5932   010BB4  3635               	rlcf	(btemp+11)^0,f,c
  5933   010BB6  2EE8               	decfsz	wreg,f,c
  5934   010BB8  EFD6  F085         	goto	u2295
  5935   010BBC  502E               	movf	(btemp+4)^0,w,c
  5936   010BBE  1032               	iorwf	(btemp+8)^0,w,c
  5937   010BC0  6E2A               	movwf	btemp^0,c
  5938   010BC2  502F               	movf	(btemp+5)^0,w,c
  5939   010BC4  1033               	iorwf	(btemp+9)^0,w,c
  5940   010BC6  6E2B               	movwf	(btemp+1)^0,c
  5941   010BC8  5030               	movf	(btemp+6)^0,w,c
  5942   010BCA  1034               	iorwf	(btemp+10)^0,w,c
  5943   010BCC  6E2C               	movwf	(btemp+2)^0,c
  5944   010BCE  5031               	movf	(btemp+7)^0,w,c
  5945   010BD0  1035               	iorwf	(btemp+11)^0,w,c
  5946   010BD2  6E2D               	movwf	(btemp+3)^0,c
  5947                           
  5948                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5949   010BD4  0E8F               	movlw	-113
  5950   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5951   010BDA  0E90               	movlw	-112
  5952   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5953   010BE0  C02A  FFDE         	movff	btemp,postinc2
  5954   010BE4  C02B  FFDE         	movff	btemp+1,postinc2
  5955   010BE8  C02C  FFDE         	movff	btemp+2,postinc2
  5956   010BEC  C02D  FFDE         	movff	btemp+3,postinc2
  5957   010BF0                     l4613:
  5958                           
  5959                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5960                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5961   010BF0  0E8F               	movlw	-113
  5962   010BF2  CFE3 F034          	movff	plusw1,btemp+10
  5963   010BF6  0E90               	movlw	-112
  5964   010BF8  CFE3 F035          	movff	plusw1,btemp+11
  5965   010BFC  0E07               	movlw	7
  5966   010BFE  2434               	addwf	(btemp+10)^0,w,c
  5967   010C00  6ED9               	movwf	fsr2l,c
  5968   010C02  0E00               	movlw	0
  5969   010C04  2035               	addwfc	(btemp+11)^0,w,c
  5970   010C06  6EDA               	movwf	fsr2h,c
  5971                           
  5972                           ;stkvar	_ba @ sp[(-110)+4]
  5973   010C08  0E9B               	movlw	155
  5974   010C0A  24E1               	addwf	fsr1l,w,c
  5975   010C0C  6EE9               	movwf	fsr0l,c
  5976   010C0E  0EFF               	movlw	255
  5977   010C10  20E2               	addwfc	fsr1h,w,c
  5978   010C12  6EEA               	movwf	fsr0h,c
  5979   010C14  50EF               	movf	indf0,w,c
  5980   010C16  0B01               	andlw	1
  5981   010C18  6EDF               	movwf	indf2,c
  5982   010C1A                     
  5983                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5984                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5985   010C1A  0E8F               	movlw	-113
  5986   010C1C  CFE3 F034          	movff	plusw1,btemp+10
  5987   010C20  0E90               	movlw	-112
  5988   010C22  CFE3 F035          	movff	plusw1,btemp+11
  5989   010C26  0E08               	movlw	8
  5990   010C28  2434               	addwf	(btemp+10)^0,w,c
  5991   010C2A  6ED9               	movwf	fsr2l,c
  5992   010C2C  0E00               	movlw	0
  5993   010C2E  2035               	addwfc	(btemp+11)^0,w,c
  5994   010C30  6EDA               	movwf	fsr2h,c
  5995                           
  5996                           ;stkvar	_ba @ sp[(-110)+4]
  5997   010C32  0E9B               	movlw	155
  5998   010C34  24E1               	addwf	fsr1l,w,c
  5999   010C36  6EE9               	movwf	fsr0l,c
  6000   010C38  0EFF               	movlw	255
  6001   010C3A  20E2               	addwfc	fsr1h,w,c
  6002   010C3C  6EEA               	movwf	fsr0h,c
  6003   010C3E  50EF               	movf	indf0,w,c
  6004   010C40  6E35               	movwf	(btemp+11)^0,c
  6005   010C42  90D8               	bcf	status,0,c
  6006   010C44  3235               	rrcf	(btemp+11)^0,f,c
  6007   010C46  90D8               	bcf	status,0,c
  6008   010C48  3235               	rrcf	(btemp+11)^0,f,c
  6009   010C4A  90D8               	bcf	status,0,c
  6010   010C4C  3035               	rrcf	(btemp+11)^0,w,c
  6011   010C4E  6EDF               	movwf	indf2,c
  6012   010C50                     
  6013                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  6014                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  6015   010C50  50E1               	movf	fsr1l,w,c
  6016   010C52  0FEE               	addlw	-18
  6017   010C54  6ED9               	movwf	fsr2l,c
  6018   010C56  50E2               	movf	fsr1h,w,c
  6019   010C58  6EDA               	movwf	fsr2h,c
  6020   010C5A  0EFF               	movlw	255
  6021   010C5C  22DA               	addwfc	fsr2h,f,c
  6022   010C5E  AADF               	btfss	indf2,5,c
  6023   010C60  EF34  F086         	goto	u2301
  6024   010C64  EF36  F086         	goto	u2300
  6025   010C68                     u2301:
  6026   010C68  EFC4  F086         	goto	l4637
  6027   010C6C                     u2300:
  6028   010C6C                     
  6029                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  6030                           ;stkvar	_ba @ sp[(-110)+4]
  6031   010C6C  0E9E               	movlw	158
  6032   010C6E  24E1               	addwf	fsr1l,w,c
  6033   010C70  6ED9               	movwf	fsr2l,c
  6034   010C72  0EFF               	movlw	255
  6035   010C74  20E2               	addwfc	fsr1h,w,c
  6036   010C76  6EDA               	movwf	fsr2h,c
  6037   010C78  50DF               	movf	indf2,w,c
  6038   010C7A  6E35               	movwf	(btemp+11)^0,c
  6039                           
  6040                           ;stkvar	_myReg @ sp[(-110)+97]
  6041   010C7C  0EF3               	movlw	-13
  6042   010C7E  C035  FFE3         	movff	btemp+11,plusw1
  6043   010C82                     
  6044                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  6045                           ;stkvar	_ba @ sp[(-110)+4]
  6046   010C82  0E9F               	movlw	159
  6047   010C84  24E1               	addwf	fsr1l,w,c
  6048   010C86  6ED9               	movwf	fsr2l,c
  6049   010C88  0EFF               	movlw	255
  6050   010C8A  20E2               	addwfc	fsr1h,w,c
  6051   010C8C  6EDA               	movwf	fsr2h,c
  6052                           
  6053                           ;stkvar	_myReg @ sp[(-110)+97]
  6054   010C8E  0EF4               	movlw	244
  6055   010C90  24E1               	addwf	fsr1l,w,c
  6056   010C92  6EE9               	movwf	fsr0l,c
  6057   010C94  0EFF               	movlw	255
  6058   010C96  20E2               	addwfc	fsr1h,w,c
  6059   010C98  6EEA               	movwf	fsr0h,c
  6060   010C9A  CFDF FFEF          	movff	indf2,indf0
  6061   010C9E                     
  6062                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  6063                           ;stkvar	_ba @ sp[(-110)+4]
  6064   010C9E  0EA0               	movlw	160
  6065   010CA0  24E1               	addwf	fsr1l,w,c
  6066   010CA2  6ED9               	movwf	fsr2l,c
  6067   010CA4  0EFF               	movlw	255
  6068   010CA6  20E2               	addwfc	fsr1h,w,c
  6069   010CA8  6EDA               	movwf	fsr2h,c
  6070                           
  6071                           ;stkvar	_myReg @ sp[(-110)+97]
  6072   010CAA  0EF5               	movlw	245
  6073   010CAC  24E1               	addwf	fsr1l,w,c
  6074   010CAE  6EE9               	movwf	fsr0l,c
  6075   010CB0  0EFF               	movlw	255
  6076   010CB2  20E2               	addwfc	fsr1h,w,c
  6077   010CB4  6EEA               	movwf	fsr0h,c
  6078   010CB6  CFDF FFEF          	movff	indf2,indf0
  6079   010CBA                     
  6080                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  6081                           ;stkvar	_ba @ sp[(-110)+4]
  6082   010CBA  0EA1               	movlw	161
  6083   010CBC  24E1               	addwf	fsr1l,w,c
  6084   010CBE  6ED9               	movwf	fsr2l,c
  6085   010CC0  0EFF               	movlw	255
  6086   010CC2  20E2               	addwfc	fsr1h,w,c
  6087   010CC4  6EDA               	movwf	fsr2h,c
  6088                           
  6089                           ;stkvar	_myReg @ sp[(-110)+97]
  6090   010CC6  0EF6               	movlw	246
  6091   010CC8  24E1               	addwf	fsr1l,w,c
  6092   010CCA  6EE9               	movwf	fsr0l,c
  6093   010CCC  0EFF               	movlw	255
  6094   010CCE  20E2               	addwfc	fsr1h,w,c
  6095   010CD0  6EEA               	movwf	fsr0h,c
  6096   010CD2  CFDF FFEF          	movff	indf2,indf0
  6097   010CD6                     
  6098                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  6099                           ;stkvar	_myReg @ sp[(-110)+97]
  6100   010CD6  50E1               	movf	fsr1l,w,c
  6101   010CD8  0FF3               	addlw	-13
  6102   010CDA  6ED9               	movwf	fsr2l,c
  6103   010CDC  50E2               	movf	fsr1h,w,c
  6104   010CDE  6EDA               	movwf	fsr2h,c
  6105   010CE0  0EFF               	movlw	255
  6106   010CE2  22DA               	addwfc	fsr2h,f,c
  6107                           
  6108                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6109   010CE4  0E8F               	movlw	-113
  6110   010CE6  CFE3 F034          	movff	plusw1,btemp+10
  6111   010CEA  0E90               	movlw	-112
  6112   010CEC  CFE3 F035          	movff	plusw1,btemp+11
  6113   010CF0  0E09               	movlw	9
  6114   010CF2  2434               	addwf	(btemp+10)^0,w,c
  6115   010CF4  6EE9               	movwf	fsr0l,c
  6116   010CF6  0E00               	movlw	0
  6117   010CF8  2035               	addwfc	(btemp+11)^0,w,c
  6118   010CFA  6EEA               	movwf	fsr0h,c
  6119   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  6120   010D00  CFDE FFEE          	movff	postinc2,postinc0
  6121   010D04  CFDE FFEE          	movff	postinc2,postinc0
  6122   010D08  CFDE FFEE          	movff	postinc2,postinc0
  6123   010D0C                     
  6124                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  6125                           ;stkvar	_i @ sp[(-110)+107]
  6126   010D0C  0EFD               	movlw	-3
  6127   010D0E  6AE3               	clrf	plusw1,c
  6128   010D10  EFB1  F086         	goto	l4635
  6129   010D14                     l4631:
  6130                           
  6131                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  6132                           ;stkvar	_i @ sp[(-110)+107]
  6133   010D14  0EFD               	movlw	-3
  6134   010D16  50E3               	movf	plusw1,w,c
  6135   010D18  6E34               	movwf	(btemp+10)^0,c
  6136   010D1A  6A35               	clrf	(btemp+11)^0,c
  6137   010D1C  0E0C               	movlw	12
  6138   010D1E  2634               	addwf	(btemp+10)^0,f,c
  6139   010D20  0E00               	movlw	0
  6140   010D22  2235               	addwfc	(btemp+11)^0,f,c
  6141                           
  6142                           ;stkvar	_ba @ sp[(-110)+4]
  6143   010D24  0E96               	movlw	150
  6144   010D26  24E1               	addwf	fsr1l,w,c
  6145   010D28  6E32               	movwf	(btemp+8)^0,c
  6146   010D2A  0EFF               	movlw	255
  6147   010D2C  20E2               	addwfc	fsr1h,w,c
  6148   010D2E  6E33               	movwf	(btemp+9)^0,c
  6149   010D30  5034               	movf	(btemp+10)^0,w,c
  6150   010D32  2432               	addwf	(btemp+8)^0,w,c
  6151   010D34  6ED9               	movwf	fsr2l,c
  6152   010D36  5035               	movf	(btemp+11)^0,w,c
  6153   010D38  2033               	addwfc	(btemp+9)^0,w,c
  6154   010D3A  6EDA               	movwf	fsr2h,c
  6155                           
  6156                           ;stkvar	_i @ sp[(-110)+107]
  6157   010D3C  0EFD               	movlw	-3
  6158   010D3E  CFE3 F035          	movff	plusw1,btemp+11
  6159                           
  6160                           ;stkvar	_rxd @ sp[(-110)+-5]
  6161   010D42  0E8D               	movlw	-115
  6162   010D44  CFE3 F032          	movff	plusw1,btemp+8
  6163   010D48  0E8E               	movlw	-114
  6164   010D4A  CFE3 F033          	movff	plusw1,btemp+9
  6165   010D4E  5035               	movf	(btemp+11)^0,w,c
  6166   010D50  2432               	addwf	(btemp+8)^0,w,c
  6167   010D52  6EE9               	movwf	fsr0l,c
  6168   010D54  0E00               	movlw	0
  6169   010D56  2033               	addwfc	(btemp+9)^0,w,c
  6170   010D58  6EEA               	movwf	fsr0h,c
  6171   010D5A  CFDF FFEF          	movff	indf2,indf0
  6172   010D5E                     
  6173                           ;can/can.c: 1342:         }
  6174                           ;stkvar	_i @ sp[(-110)+107]
  6175   010D5E  0EFD               	movlw	-3
  6176   010D60  2AE3               	incf	plusw1,f,c
  6177   010D62                     l4635:
  6178                           
  6179                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6180                           ;stkvar	_i @ sp[(-110)+107]
  6181   010D62  50E1               	movf	fsr1l,w,c
  6182   010D64  0FFD               	addlw	-3
  6183   010D66  6ED9               	movwf	fsr2l,c
  6184   010D68  50E2               	movf	fsr1h,w,c
  6185   010D6A  6EDA               	movwf	fsr2h,c
  6186   010D6C  0EFF               	movlw	255
  6187   010D6E  22DA               	addwfc	fsr2h,f,c
  6188   010D70  0E8C               	movlw	-116
  6189   010D72  50E3               	movf	plusw1,w,c
  6190   010D74  5CDE               	subwf	postinc2,w,c
  6191   010D76  A0D8               	btfss	status,0,c
  6192   010D78  EFC0  F086         	goto	u2311
  6193   010D7C  EFC2  F086         	goto	u2310
  6194   010D80                     u2311:
  6195   010D80  EF8A  F086         	goto	l4631
  6196   010D84                     u2310:
  6197   010D84  EF10  F087         	goto	l4647
  6198   010D88                     l4637:
  6199                           
  6200                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6201                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6202   010D88  0E8F               	movlw	-113
  6203   010D8A  CFE3 F034          	movff	plusw1,btemp+10
  6204   010D8E  0E90               	movlw	-112
  6205   010D90  CFE3 F035          	movff	plusw1,btemp+11
  6206   010D94  0E09               	movlw	9
  6207   010D96  2434               	addwf	(btemp+10)^0,w,c
  6208   010D98  6ED9               	movwf	fsr2l,c
  6209   010D9A  0E00               	movlw	0
  6210   010D9C  2035               	addwfc	(btemp+11)^0,w,c
  6211   010D9E  6EDA               	movwf	fsr2h,c
  6212   010DA0  6ADE               	clrf	postinc2,c
  6213   010DA2  6ADE               	clrf	postinc2,c
  6214   010DA4  6ADE               	clrf	postinc2,c
  6215   010DA6  6ADD               	clrf	postdec2,c
  6216   010DA8                     
  6217                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6218                           ;stkvar	_i @ sp[(-110)+107]
  6219   010DA8  0EFD               	movlw	-3
  6220   010DAA  6AE3               	clrf	plusw1,c
  6221   010DAC  EFFF  F086         	goto	l4645
  6222   010DB0                     l4641:
  6223                           
  6224                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6225                           ;stkvar	_i @ sp[(-110)+107]
  6226   010DB0  0EFD               	movlw	-3
  6227   010DB2  50E3               	movf	plusw1,w,c
  6228   010DB4  6E34               	movwf	(btemp+10)^0,c
  6229   010DB6  6A35               	clrf	(btemp+11)^0,c
  6230   010DB8  0E08               	movlw	8
  6231   010DBA  2634               	addwf	(btemp+10)^0,f,c
  6232   010DBC  0E00               	movlw	0
  6233   010DBE  2235               	addwfc	(btemp+11)^0,f,c
  6234                           
  6235                           ;stkvar	_ba @ sp[(-110)+4]
  6236   010DC0  0E96               	movlw	150
  6237   010DC2  24E1               	addwf	fsr1l,w,c
  6238   010DC4  6E32               	movwf	(btemp+8)^0,c
  6239   010DC6  0EFF               	movlw	255
  6240   010DC8  20E2               	addwfc	fsr1h,w,c
  6241   010DCA  6E33               	movwf	(btemp+9)^0,c
  6242   010DCC  5034               	movf	(btemp+10)^0,w,c
  6243   010DCE  2432               	addwf	(btemp+8)^0,w,c
  6244   010DD0  6ED9               	movwf	fsr2l,c
  6245   010DD2  5035               	movf	(btemp+11)^0,w,c
  6246   010DD4  2033               	addwfc	(btemp+9)^0,w,c
  6247   010DD6  6EDA               	movwf	fsr2h,c
  6248                           
  6249                           ;stkvar	_i @ sp[(-110)+107]
  6250   010DD8  0EFD               	movlw	-3
  6251   010DDA  CFE3 F035          	movff	plusw1,btemp+11
  6252                           
  6253                           ;stkvar	_rxd @ sp[(-110)+-5]
  6254   010DDE  0E8D               	movlw	-115
  6255   010DE0  CFE3 F032          	movff	plusw1,btemp+8
  6256   010DE4  0E8E               	movlw	-114
  6257   010DE6  CFE3 F033          	movff	plusw1,btemp+9
  6258   010DEA  5035               	movf	(btemp+11)^0,w,c
  6259   010DEC  2432               	addwf	(btemp+8)^0,w,c
  6260   010DEE  6EE9               	movwf	fsr0l,c
  6261   010DF0  0E00               	movlw	0
  6262   010DF2  2033               	addwfc	(btemp+9)^0,w,c
  6263   010DF4  6EEA               	movwf	fsr0h,c
  6264   010DF6  CFDF FFEF          	movff	indf2,indf0
  6265   010DFA                     
  6266                           ;can/can.c: 1349:         }
  6267                           ;stkvar	_i @ sp[(-110)+107]
  6268   010DFA  0EFD               	movlw	-3
  6269   010DFC  2AE3               	incf	plusw1,f,c
  6270   010DFE                     l4645:
  6271                           
  6272                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6273                           ;stkvar	_i @ sp[(-110)+107]
  6274   010DFE  50E1               	movf	fsr1l,w,c
  6275   010E00  0FFD               	addlw	-3
  6276   010E02  6ED9               	movwf	fsr2l,c
  6277   010E04  50E2               	movf	fsr1h,w,c
  6278   010E06  6EDA               	movwf	fsr2h,c
  6279   010E08  0EFF               	movlw	255
  6280   010E0A  22DA               	addwfc	fsr2h,f,c
  6281   010E0C  0E8C               	movlw	-116
  6282   010E0E  50E3               	movf	plusw1,w,c
  6283   010E10  5CDE               	subwf	postinc2,w,c
  6284   010E12  A0D8               	btfss	status,0,c
  6285   010E14  EF0E  F087         	goto	u2321
  6286   010E18  EF10  F087         	goto	u2320
  6287   010E1C                     u2321:
  6288   010E1C  EFD8  F086         	goto	l4641
  6289   010E20                     u2320:
  6290   010E20                     l4647:
  6291                           
  6292                           ;stkvar	_channel @ sp[(-110)+-1]
  6293   010E20  0E91               	movlw	-111
  6294   010E22  50E3               	movf	plusw1,w,c
  6295   010E24  6EE6               	movwf	postinc1,c
  6296   010E26  EC39  F0A3         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6297   010E2A                     l357:
  6298                           
  6299                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6300   010E2A  0E8C               	movlw	140
  6301   010E2C  26E1               	addwf	fsr1l,f,c
  6302   010E2E  0EFF               	movlw	255
  6303   010E30  22E2               	addwfc	fsr1h,f,c
  6304   010E32  0012               	return		;funcret
  6305   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6306                           	callstack 0
  6307                           
  6308 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6309 ;; Defined at:
  6310 ;;		line 1378 in file "can/can.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  channel         1  [STACK] enum E5287
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6315 ;;  a               2  [STACK] unsigned short 
  6316 ;;  spiTransferE    1  [STACK] char 
  6317 ;; Return value:  Size  Location     Type
  6318 ;;                  1  [STACK] char 
  6319 ;; Registers used:
  6320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;Total ram usage:        0 bytes
  6331 ;; Hardware stack levels used: 1
  6332 ;; Hardware stack levels required when called: 9
  6333 ;; This function calls:
  6334 ;;		_DRV_CANFDSPI_WriteByte
  6335 ;; This function is called by:
  6336 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6337 ;; This function uses a reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text13
  6341   014672                     __ptext13:
  6342                           	callstack 0
  6343   014672                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6344                           	callstack 0
  6345                           
  6346                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6347   014672  0E08               	movlw	8
  6348   014674  26E1               	addwf	fsr1l,f,c
  6349   014676  0E00               	movlw	0
  6350   014678  22E2               	addwfc	fsr1h,f,c
  6351   01467A                     
  6352                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6353                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6354   01467A  0EF8               	movlw	-8
  6355   01467C  6AE3               	clrf	plusw1,c
  6356   01467E  0EF9               	movlw	-7
  6357   014680  6AE3               	clrf	plusw1,c
  6358   014682  0EFA               	movlw	-6
  6359   014684  6AE3               	clrf	plusw1,c
  6360   014686  0EFB               	movlw	-5
  6361   014688  6AE3               	clrf	plusw1,c
  6362   01468A                     
  6363                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6364                           ;stkvar	_channel @ sp[(-8)+-1]
  6365   01468A  0EF7               	movlw	-9
  6366   01468C  50E3               	movf	plusw1,w,c
  6367   01468E  0D0C               	mullw	12
  6368   014690  0E51               	movlw	81
  6369   014692  26F3               	addwf	243,f,c
  6370   014694  0E00               	movlw	0
  6371   014696  22F4               	addwfc	244,f,c
  6372                           
  6373                           ;stkvar	_a @ sp[(-8)+5]
  6374   014698  0EFD               	movlw	-3
  6375   01469A  CFF3 FFE3          	movff	prodl,plusw1
  6376   01469E  0EFE               	movlw	-2
  6377   0146A0  CFF4 FFE3          	movff	prodh,plusw1
  6378   0146A4                     
  6379                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6380                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6381   0146A4  0EF9               	movlw	249
  6382   0146A6  24E1               	addwf	fsr1l,w,c
  6383   0146A8  6ED9               	movwf	fsr2l,c
  6384   0146AA  0EFF               	movlw	255
  6385   0146AC  20E2               	addwfc	fsr1h,w,c
  6386   0146AE  6EDA               	movwf	fsr2h,c
  6387   0146B0  80DF               	bsf	indf2,0,c
  6388   0146B2                     
  6389                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6390                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6391   0146B2  0EF9               	movlw	249
  6392   0146B4  24E1               	addwf	fsr1l,w,c
  6393   0146B6  6ED9               	movwf	fsr2l,c
  6394   0146B8  0EFF               	movlw	255
  6395   0146BA  20E2               	addwfc	fsr1h,w,c
  6396   0146BC  6EDA               	movwf	fsr2h,c
  6397   0146BE  50DF               	movf	indf2,w,c
  6398   0146C0  6EE6               	movwf	postinc1,c
  6399                           
  6400                           ;stkvar	_a @ sp[(-9)+5]
  6401   0146C2  0EFC               	movlw	-4
  6402   0146C4  CFE3 FFE6          	movff	plusw1,postinc1
  6403   0146C8  CFE3 FFE6          	movff	plusw1,postinc1
  6404   0146CC  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6405                           
  6406                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6407   0146D0  0EFF               	movlw	-1
  6408   0146D2  C02A  FFE3         	movff	btemp,plusw1
  6409   0146D6                     
  6410                           ;can/can.c: 1393:     return spiTransferError;
  6411                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6412   0146D6  0EFF               	movlw	-1
  6413   0146D8  CFE3 F02A          	movff	plusw1,btemp
  6414   0146DC                     
  6415                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6416   0146DC  0EF7               	movlw	247
  6417   0146DE  26E1               	addwf	fsr1l,f,c
  6418   0146E0  0EFF               	movlw	255
  6419   0146E2  22E2               	addwfc	fsr1h,f,c
  6420   0146E4  0012               	return		;funcret
  6421   0146E6                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6422                           	callstack 0
  6423                           
  6424 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6425 ;; Defined at:
  6426 ;;		line 356 in file "can/can.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  address         2  [STACK] unsigned short 
  6429 ;;  rxd             2  [STACK] PTR unsigned char 
  6430 ;;		 -> ba(12), ba(76), 
  6431 ;;  nBytes          2  [STACK] unsigned short 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  i               2  [STACK] unsigned short 
  6434 ;;  spiTransferS    2  [STACK] unsigned short 
  6435 ;;  spiTransferE    1  [STACK] char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1  [STACK] char 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;Total ram usage:        0 bytes
  6450 ;; Hardware stack levels used: 1
  6451 ;; Hardware stack levels required when called: 8
  6452 ;; This function calls:
  6453 ;;		_SpiTransfer
  6454 ;; This function is called by:
  6455 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6456 ;; This function uses a reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text14
  6460   012A10                     __ptext14:
  6461                           	callstack 0
  6462   012A10                     _DRV_CANFDSPI_ReadByteArray:
  6463                           	callstack 0
  6464                           
  6465                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6466   012A10  0E05               	movlw	5
  6467   012A12  26E1               	addwf	fsr1l,f,c
  6468   012A14  0E00               	movlw	0
  6469   012A16  22E2               	addwfc	fsr1h,f,c
  6470   012A18                     
  6471                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6472                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6473   012A18  0EF5               	movlw	-11
  6474   012A1A  50E3               	movf	plusw1,w,c
  6475   012A1C  0F02               	addlw	2
  6476   012A1E  6E34               	movwf	(btemp+10)^0,c
  6477   012A20  0EF6               	movlw	-10
  6478   012A22  CFE3 F035          	movff	plusw1,btemp+11
  6479   012A26  0E00               	movlw	0
  6480   012A28  2235               	addwfc	(btemp+11)^0,f,c
  6481                           
  6482                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6483   012A2A  0EFD               	movlw	-3
  6484   012A2C  C034  FFE3         	movff	btemp+10,plusw1
  6485   012A30  0EFE               	movlw	-2
  6486   012A32  C035  FFE3         	movff	btemp+11,plusw1
  6487   012A36                     
  6488                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6489                           ;stkvar	_address @ sp[(-5)+-2]
  6490   012A36  0EFA               	movlw	250
  6491   012A38  24E1               	addwf	fsr1l,w,c
  6492   012A3A  6ED9               	movwf	fsr2l,c
  6493   012A3C  0EFF               	movlw	255
  6494   012A3E  20E2               	addwfc	fsr1h,w,c
  6495   012A40  6EDA               	movwf	fsr2h,c
  6496   012A42  50DF               	movf	indf2,w,c
  6497   012A44  0B0F               	andlw	15
  6498   012A46  0F30               	addlw	48
  6499   012A48  0101               	movlb	1	; () banked
  6500   012A4A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6501   012A4C                     
  6502                           ; BSR set to: 1
  6503                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6504                           ;stkvar	_address @ sp[(-5)+-2]
  6505   012A4C  0EF9               	movlw	-7
  6506   012A4E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6507   012A52                     
  6508                           ; BSR set to: 1
  6509                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6510   012A52  0E02               	movlw	2
  6511   012A54  6E34               	movwf	(btemp+10)^0,c
  6512   012A56  0E00               	movlw	0
  6513   012A58  6E35               	movwf	(btemp+11)^0,c
  6514                           
  6515                           ;stkvar	_i @ sp[(-5)+0]
  6516   012A5A  0EFB               	movlw	-5
  6517   012A5C  C034  FFE3         	movff	btemp+10,plusw1
  6518   012A60  0EFC               	movlw	-4
  6519   012A62  C035  FFE3         	movff	btemp+11,plusw1
  6520   012A66  EF51  F095         	goto	l4467
  6521   012A6A                     l4463:
  6522                           
  6523                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6524                           ;stkvar	_i @ sp[(-5)+0]
  6525   012A6A  0EFB               	movlw	-5
  6526   012A6C  CFE3 F034          	movff	plusw1,btemp+10
  6527   012A70  0EFC               	movlw	-4
  6528   012A72  CFE3 F035          	movff	plusw1,btemp+11
  6529   012A76  0E00               	movlw	low _spiTransmitBuffer
  6530   012A78  2434               	addwf	(btemp+10)^0,w,c
  6531   012A7A  6ED9               	movwf	fsr2l,c
  6532   012A7C  0E01               	movlw	high _spiTransmitBuffer
  6533   012A7E  2035               	addwfc	(btemp+11)^0,w,c
  6534   012A80  6EDA               	movwf	fsr2h,c
  6535   012A82  6ADF               	clrf	indf2,c
  6536   012A84                     
  6537                           ;can/can.c: 370:     }
  6538                           ;stkvar	_i @ sp[(-5)+0]
  6539   012A84  0EFB               	movlw	-5
  6540   012A86  50E3               	movf	plusw1,w,c
  6541   012A88  0F01               	addlw	1
  6542   012A8A  6E2A               	movwf	btemp^0,c
  6543   012A8C  0EFB               	movlw	-5
  6544   012A8E  C02A  FFE3         	movff	btemp,plusw1
  6545   012A92  6A2A               	clrf	btemp^0,c
  6546   012A94  0EFC               	movlw	-4
  6547   012A96  50E3               	movf	plusw1,w,c
  6548   012A98  202A               	addwfc	btemp^0,w,c
  6549   012A9A  6E2A               	movwf	btemp^0,c
  6550   012A9C  0EFC               	movlw	-4
  6551   012A9E  C02A  FFE3         	movff	btemp,plusw1
  6552   012AA2                     l4467:
  6553                           
  6554                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6555   012AA2  0EFD               	movlw	-3
  6556   012AA4  CFE3 F034          	movff	plusw1,btemp+10
  6557   012AA8  0EFE               	movlw	-2
  6558   012AAA  CFE3 F035          	movff	plusw1,btemp+11
  6559                           
  6560                           ;stkvar	_i @ sp[(-5)+0]
  6561   012AAE  0EFB               	movlw	-5
  6562   012AB0  CFE3 F032          	movff	plusw1,btemp+8
  6563   012AB4  0EFC               	movlw	-4
  6564   012AB6  CFE3 F033          	movff	plusw1,btemp+9
  6565   012ABA  5034               	movf	(btemp+10)^0,w,c
  6566   012ABC  5C32               	subwf	(btemp+8)^0,w,c
  6567   012ABE  5035               	movf	(btemp+11)^0,w,c
  6568   012AC0  5833               	subwfb	(btemp+9)^0,w,c
  6569   012AC2  A0D8               	btfss	status,0,c
  6570   012AC4  EF66  F095         	goto	u2121
  6571   012AC8  EF68  F095         	goto	u2120
  6572   012ACC                     u2121:
  6573   012ACC  EF35  F095         	goto	l4463
  6574   012AD0                     u2120:
  6575   012AD0                     
  6576                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6577                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6578   012AD0  0EFD               	movlw	-3
  6579   012AD2  CFE3 FFE6          	movff	plusw1,postinc1
  6580   012AD6  CFE3 FFE6          	movff	plusw1,postinc1
  6581   012ADA  0E00               	movlw	low _spiReceiveBuffer
  6582   012ADC  6EE6               	movwf	postinc1,c
  6583   012ADE  0E02               	movlw	high _spiReceiveBuffer
  6584   012AE0  6EE6               	movwf	postinc1,c
  6585   012AE2  0E00               	movlw	low _spiTransmitBuffer
  6586   012AE4  6EE6               	movwf	postinc1,c
  6587   012AE6  0E01               	movlw	high _spiTransmitBuffer
  6588   012AE8  6EE6               	movwf	postinc1,c
  6589   012AEA  EC06  F09F         	call	_SpiTransfer	;wreg free
  6590                           
  6591                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6592   012AEE  0EFF               	movlw	-1
  6593   012AF0  C02A  FFE3         	movff	btemp,plusw1
  6594   012AF4                     
  6595                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6596                           ;stkvar	_i @ sp[(-5)+0]
  6597   012AF4  0EFB               	movlw	-5
  6598   012AF6  6AE3               	clrf	plusw1,c
  6599   012AF8  0EFC               	movlw	-4
  6600   012AFA  6AE3               	clrf	plusw1,c
  6601   012AFC  EFAF  F095         	goto	l4477
  6602   012B00                     l4473:
  6603                           
  6604                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6605                           ;stkvar	_i @ sp[(-5)+0]
  6606   012B00  0EFB               	movlw	-5
  6607   012B02  CFE3 F034          	movff	plusw1,btemp+10
  6608   012B06  0EFC               	movlw	-4
  6609   012B08  CFE3 F035          	movff	plusw1,btemp+11
  6610   012B0C  0E02               	movlw	low (_spiReceiveBuffer+2)
  6611   012B0E  2434               	addwf	(btemp+10)^0,w,c
  6612   012B10  6ED9               	movwf	fsr2l,c
  6613   012B12  0E02               	movlw	high (_spiReceiveBuffer+2)
  6614   012B14  2035               	addwfc	(btemp+11)^0,w,c
  6615   012B16  6EDA               	movwf	fsr2h,c
  6616                           
  6617                           ;stkvar	_i @ sp[(-5)+0]
  6618   012B18  0EFB               	movlw	-5
  6619   012B1A  CFE3 F034          	movff	plusw1,btemp+10
  6620   012B1E  0EFC               	movlw	-4
  6621   012B20  CFE3 F035          	movff	plusw1,btemp+11
  6622                           
  6623                           ;stkvar	_rxd @ sp[(-5)+-4]
  6624   012B24  0EF7               	movlw	-9
  6625   012B26  CFE3 F032          	movff	plusw1,btemp+8
  6626   012B2A  0EF8               	movlw	-8
  6627   012B2C  CFE3 F033          	movff	plusw1,btemp+9
  6628   012B30  5034               	movf	(btemp+10)^0,w,c
  6629   012B32  2432               	addwf	(btemp+8)^0,w,c
  6630   012B34  6EE9               	movwf	fsr0l,c
  6631   012B36  5035               	movf	(btemp+11)^0,w,c
  6632   012B38  2033               	addwfc	(btemp+9)^0,w,c
  6633   012B3A  6EEA               	movwf	fsr0h,c
  6634   012B3C  CFDF FFEF          	movff	indf2,indf0
  6635   012B40                     
  6636                           ;can/can.c: 377:     }
  6637                           ;stkvar	_i @ sp[(-5)+0]
  6638   012B40  0EFB               	movlw	-5
  6639   012B42  50E3               	movf	plusw1,w,c
  6640   012B44  0F01               	addlw	1
  6641   012B46  6E2A               	movwf	btemp^0,c
  6642   012B48  0EFB               	movlw	-5
  6643   012B4A  C02A  FFE3         	movff	btemp,plusw1
  6644   012B4E  6A2A               	clrf	btemp^0,c
  6645   012B50  0EFC               	movlw	-4
  6646   012B52  50E3               	movf	plusw1,w,c
  6647   012B54  202A               	addwfc	btemp^0,w,c
  6648   012B56  6E2A               	movwf	btemp^0,c
  6649   012B58  0EFC               	movlw	-4
  6650   012B5A  C02A  FFE3         	movff	btemp,plusw1
  6651   012B5E                     l4477:
  6652                           
  6653                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6654   012B5E  0EF5               	movlw	-11
  6655   012B60  CFE3 F034          	movff	plusw1,btemp+10
  6656   012B64  0EF6               	movlw	-10
  6657   012B66  CFE3 F035          	movff	plusw1,btemp+11
  6658                           
  6659                           ;stkvar	_i @ sp[(-5)+0]
  6660   012B6A  0EFB               	movlw	-5
  6661   012B6C  CFE3 F032          	movff	plusw1,btemp+8
  6662   012B70  0EFC               	movlw	-4
  6663   012B72  CFE3 F033          	movff	plusw1,btemp+9
  6664   012B76  5034               	movf	(btemp+10)^0,w,c
  6665   012B78  5C32               	subwf	(btemp+8)^0,w,c
  6666   012B7A  5035               	movf	(btemp+11)^0,w,c
  6667   012B7C  5833               	subwfb	(btemp+9)^0,w,c
  6668   012B7E  A0D8               	btfss	status,0,c
  6669   012B80  EFC4  F095         	goto	u2131
  6670   012B84  EFC6  F095         	goto	u2130
  6671   012B88                     u2131:
  6672   012B88  EF80  F095         	goto	l4473
  6673   012B8C                     u2130:
  6674   012B8C                     
  6675                           ;can/can.c: 379:     return spiTransferError;
  6676                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6677   012B8C  0EFF               	movlw	-1
  6678   012B8E  CFE3 F02A          	movff	plusw1,btemp
  6679   012B92                     
  6680                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6681   012B92  0EF5               	movlw	245
  6682   012B94  26E1               	addwf	fsr1l,f,c
  6683   012B96  0EFF               	movlw	255
  6684   012B98  22E2               	addwfc	fsr1h,f,c
  6685   012B9A  0012               	return		;funcret
  6686   012B9C                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6687                           	callstack 0
  6688                           
  6689 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6690 ;; Defined at:
  6691 ;;		line 1928 in file "can/can.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;  channel         1  [STACK] enum E5287
  6694 ;;  flags           2  [STACK] PTR enum E5588
  6695 ;;		 -> rxFlags(1), 
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6698 ;;  a               2  [STACK] unsigned short 
  6699 ;;  spiTransferE    1  [STACK] char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1  [STACK] char 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used: 1
  6715 ;; Hardware stack levels required when called: 9
  6716 ;; This function calls:
  6717 ;;		_DRV_CANFDSPI_ReadByte
  6718 ;; This function is called by:
  6719 ;;		_CanReceive
  6720 ;; This function uses a reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text15
  6724   0142F8                     __ptext15:
  6725                           	callstack 0
  6726   0142F8                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6727                           	callstack 0
  6728                           
  6729                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6730   0142F8  0E07               	movlw	7
  6731   0142FA  26E1               	addwf	fsr1l,f,c
  6732   0142FC  0E00               	movlw	0
  6733   0142FE  22E2               	addwfc	fsr1h,f,c
  6734   014300                     
  6735                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6736                           ;stkvar	_channel @ sp[(-7)+-1]
  6737   014300  0EF8               	movlw	-8
  6738   014302  50E3               	movf	plusw1,w,c
  6739   014304  A4D8               	btfss	status,2,c
  6740   014306  EF87  F0A1         	goto	u2191
  6741   01430A  EF89  F0A1         	goto	u2190
  6742   01430E                     u2191:
  6743   01430E  EF8B  F0A1         	goto	l4549
  6744   014312                     u2190:
  6745   014312  EFC9  F0A1         	goto	l482
  6746   014316                     l4549:
  6747                           
  6748                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6749                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6750   014316  0EF9               	movlw	-7
  6751   014318  6AE3               	clrf	plusw1,c
  6752   01431A  0EFA               	movlw	-6
  6753   01431C  6AE3               	clrf	plusw1,c
  6754   01431E  0EFB               	movlw	-5
  6755   014320  6AE3               	clrf	plusw1,c
  6756   014322  0EFC               	movlw	-4
  6757   014324  6AE3               	clrf	plusw1,c
  6758   014326                     
  6759                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6760                           ;stkvar	_channel @ sp[(-7)+-1]
  6761   014326  0EF8               	movlw	-8
  6762   014328  50E3               	movf	plusw1,w,c
  6763   01432A  0D0C               	mullw	12
  6764   01432C  0E54               	movlw	84
  6765   01432E  26F3               	addwf	243,f,c
  6766   014330  0E00               	movlw	0
  6767   014332  22F4               	addwfc	244,f,c
  6768                           
  6769                           ;stkvar	_a @ sp[(-7)+4]
  6770   014334  0EFD               	movlw	-3
  6771   014336  CFF3 FFE3          	movff	prodl,plusw1
  6772   01433A  0EFE               	movlw	-2
  6773   01433C  CFF4 FFE3          	movff	prodh,plusw1
  6774   014340                     
  6775                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6776                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6777   014340  0EF9               	movlw	249
  6778   014342  24E1               	addwf	fsr1l,w,c
  6779   014344  6E2A               	movwf	btemp^0,c
  6780   014346  0EFF               	movlw	255
  6781   014348  20E2               	addwfc	fsr1h,w,c
  6782   01434A  6E2B               	movwf	(btemp+1)^0,c
  6783   01434C  C02A  FFE6         	movff	btemp,postinc1
  6784   014350  C02B  FFE6         	movff	btemp+1,postinc1
  6785                           
  6786                           ;stkvar	_a @ sp[(-9)+4]
  6787   014354  0EFB               	movlw	-5
  6788   014356  CFE3 FFE6          	movff	plusw1,postinc1
  6789   01435A  CFE3 FFE6          	movff	plusw1,postinc1
  6790   01435E  EC40  F0A4         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6791                           
  6792                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6793   014362  0EFF               	movlw	-1
  6794   014364  C02A  FFE3         	movff	btemp,plusw1
  6795   014368                     
  6796                           ;can/can.c: 1942:     if (spiTransferError) {
  6797                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6798   014368  0EFF               	movlw	-1
  6799   01436A  50E3               	movf	plusw1,w,c
  6800   01436C  B4D8               	btfsc	status,2,c
  6801   01436E  EFBB  F0A1         	goto	u2201
  6802   014372  EFBD  F0A1         	goto	u2200
  6803   014376                     u2201:
  6804   014376  EFBF  F0A1         	goto	l4559
  6805   01437A                     u2200:
  6806   01437A  EFC9  F0A1         	goto	l482
  6807   01437E                     l4559:
  6808                           
  6809                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6810                           ;stkvar	_flags @ sp[(-7)+-3]
  6811   01437E  0EF6               	movlw	-10
  6812   014380  CFE3 FFD9          	movff	plusw1,fsr2l
  6813   014384  0EF7               	movlw	-9
  6814   014386  CFE3 FFDA          	movff	plusw1,fsr2h
  6815                           
  6816                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6817   01438A  0EF9               	movlw	-7
  6818   01438C  50E3               	movf	plusw1,w,c
  6819   01438E  0B0F               	andlw	15
  6820   014390  6EDF               	movwf	indf2,c
  6821   014392                     l482:
  6822                           
  6823                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6824   014392  0EF6               	movlw	246
  6825   014394  26E1               	addwf	fsr1l,f,c
  6826   014396  0EFF               	movlw	255
  6827   014398  22E2               	addwfc	fsr1h,f,c
  6828   01439A  0012               	return		;funcret
  6829   01439C                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6830                           	callstack 0
  6831                           
  6832 ;; *************** function _XF_init *****************
  6833 ;; Defined at:
  6834 ;;		line 80 in file "xf/xf.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  i               2  [STACK] int 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1  [STACK] void 
  6841 ;; Registers used:
  6842 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used: 1
  6854 ;; Hardware stack levels required when called: 8
  6855 ;; This function calls:
  6856 ;;		_Event_init
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text16
  6863   012E9E                     __ptext16:
  6864                           	callstack 0
  6865   012E9E                     _XF_init:
  6866                           	callstack 0
  6867                           
  6868                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6869   012E9E  52E6               	movf	postinc1,f,c
  6870   012EA0  52E6               	movf	postinc1,f,c
  6871   012EA2                     
  6872                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6873                           ;stkvar	_i @ sp[(-2)+0]
  6874   012EA2  0EFE               	movlw	-2
  6875   012EA4  6AE3               	clrf	plusw1,c
  6876   012EA6  0EFF               	movlw	-1
  6877   012EA8  6AE3               	clrf	plusw1,c
  6878   012EAA                     l5429:
  6879                           
  6880                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6881                           ;stkvar	_i @ sp[(-2)+0]
  6882   012EAA  0EFE               	movlw	-2
  6883   012EAC  CFE3 F034          	movff	plusw1,btemp+10
  6884   012EB0  0EFF               	movlw	-1
  6885   012EB2  CFE3 F035          	movff	plusw1,btemp+11
  6886   012EB6  0E06               	movlw	6
  6887   012EB8  0234               	mulwf	(btemp+10)^0,c
  6888   012EBA  CFF3 F032          	movff	prodl,btemp+8
  6889   012EBE  CFF4 F033          	movff	prodh,btemp+9
  6890   012EC2  0235               	mulwf	(btemp+11)^0,c
  6891   012EC4  50F3               	movf	prodl,w,c
  6892   012EC6  2633               	addwf	(btemp+9)^0,f,c
  6893   012EC8  0E28               	movlw	low (_theXF+96)
  6894   012ECA  2432               	addwf	(btemp+8)^0,w,c
  6895   012ECC  6E34               	movwf	(btemp+10)^0,c
  6896   012ECE  0E03               	movlw	high (_theXF+96)
  6897   012ED0  2033               	addwfc	(btemp+9)^0,w,c
  6898   012ED2  6E35               	movwf	(btemp+11)^0,c
  6899   012ED4  C034  FFE6         	movff	btemp+10,postinc1
  6900   012ED8  C035  FFE6         	movff	btemp+11,postinc1
  6901   012EDC  ECF8  F0A4         	call	_Event_init	;wreg free
  6902   012EE0                     
  6903                           ;xf/xf.c: 86:     }
  6904                           ;stkvar	_i @ sp[(-2)+0]
  6905   012EE0  0EFE               	movlw	-2
  6906   012EE2  50E3               	movf	plusw1,w,c
  6907   012EE4  0F01               	addlw	1
  6908   012EE6  6E2A               	movwf	btemp^0,c
  6909   012EE8  0EFE               	movlw	-2
  6910   012EEA  C02A  FFE3         	movff	btemp,plusw1
  6911   012EEE  6A2A               	clrf	btemp^0,c
  6912   012EF0  0EFF               	movlw	-1
  6913   012EF2  50E3               	movf	plusw1,w,c
  6914   012EF4  202A               	addwfc	btemp^0,w,c
  6915   012EF6  6E2A               	movwf	btemp^0,c
  6916   012EF8  0EFF               	movlw	-1
  6917   012EFA  C02A  FFE3         	movff	btemp,plusw1
  6918   012EFE                     
  6919                           ;stkvar	_i @ sp[(-2)+0]
  6920   012EFE  0EFF               	movlw	-1
  6921   012F00  BEE3               	btfsc	plusw1,7,c
  6922   012F02  EF90  F097         	goto	u3161
  6923   012F06  0EFF               	movlw	-1
  6924   012F08  50E3               	movf	plusw1,w,c
  6925   012F0A  E10C               	bnz	u3160
  6926   012F0C  0EFE               	movlw	-2
  6927   012F0E  CFE3 F02A          	movff	plusw1,btemp
  6928   012F12  0E1E               	movlw	30
  6929   012F14  5E2A               	subwf	btemp^0,f,c
  6930   012F16  A0D8               	btfss	status,0,c
  6931   012F18  EF90  F097         	goto	u3161
  6932   012F1C  EF92  F097         	goto	u3160
  6933   012F20                     u3161:
  6934   012F20  EF55  F097         	goto	l5429
  6935   012F24                     u3160:
  6936   012F24                     
  6937                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6938                           ;stkvar	_i @ sp[(-2)+0]
  6939   012F24  0EFE               	movlw	-2
  6940   012F26  6AE3               	clrf	plusw1,c
  6941   012F28  0EFF               	movlw	-1
  6942   012F2A  6AE3               	clrf	plusw1,c
  6943   012F2C                     l5441:
  6944                           
  6945                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6946                           ;stkvar	_i @ sp[(-2)+0]
  6947   012F2C  0EFE               	movlw	-2
  6948   012F2E  CFE3 F034          	movff	plusw1,btemp+10
  6949   012F32  0EFF               	movlw	-1
  6950   012F34  CFE3 F035          	movff	plusw1,btemp+11
  6951   012F38  90D8               	bcf	status,0,c
  6952   012F3A  3634               	rlcf	(btemp+10)^0,f,c
  6953   012F3C  3635               	rlcf	(btemp+11)^0,f,c
  6954   012F3E  90D8               	bcf	status,0,c
  6955   012F40  3634               	rlcf	(btemp+10)^0,f,c
  6956   012F42  3635               	rlcf	(btemp+11)^0,f,c
  6957   012F44  90D8               	bcf	status,0,c
  6958   012F46  3634               	rlcf	(btemp+10)^0,f,c
  6959   012F48  3635               	rlcf	(btemp+11)^0,f,c
  6960   012F4A  0EC8               	movlw	low _theXF
  6961   012F4C  2434               	addwf	(btemp+10)^0,w,c
  6962   012F4E  6ED9               	movwf	fsr2l,c
  6963   012F50  0E02               	movlw	high _theXF
  6964   012F52  2035               	addwfc	(btemp+11)^0,w,c
  6965   012F54  6EDA               	movwf	fsr2h,c
  6966   012F56  6ADE               	clrf	postinc2,c
  6967   012F58  6ADD               	clrf	postdec2,c
  6968   012F5A                     
  6969                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6970                           ;stkvar	_i @ sp[(-2)+0]
  6971   012F5A  0EFE               	movlw	-2
  6972   012F5C  CFE3 F034          	movff	plusw1,btemp+10
  6973   012F60  0EFF               	movlw	-1
  6974   012F62  CFE3 F035          	movff	plusw1,btemp+11
  6975   012F66  90D8               	bcf	status,0,c
  6976   012F68  3634               	rlcf	(btemp+10)^0,f,c
  6977   012F6A  3635               	rlcf	(btemp+11)^0,f,c
  6978   012F6C  90D8               	bcf	status,0,c
  6979   012F6E  3634               	rlcf	(btemp+10)^0,f,c
  6980   012F70  3635               	rlcf	(btemp+11)^0,f,c
  6981   012F72  90D8               	bcf	status,0,c
  6982   012F74  3634               	rlcf	(btemp+10)^0,f,c
  6983   012F76  3635               	rlcf	(btemp+11)^0,f,c
  6984   012F78  0ECA               	movlw	low (_theXF+2)
  6985   012F7A  2434               	addwf	(btemp+10)^0,w,c
  6986   012F7C  6E32               	movwf	(btemp+8)^0,c
  6987   012F7E  0E02               	movlw	high (_theXF+2)
  6988   012F80  2035               	addwfc	(btemp+11)^0,w,c
  6989   012F82  6E33               	movwf	(btemp+9)^0,c
  6990   012F84  C032  FFE6         	movff	btemp+8,postinc1
  6991   012F88  C033  FFE6         	movff	btemp+9,postinc1
  6992   012F8C  ECF8  F0A4         	call	_Event_init	;wreg free
  6993   012F90                     
  6994                           ;xf/xf.c: 92:     }
  6995                           ;stkvar	_i @ sp[(-2)+0]
  6996   012F90  0EFE               	movlw	-2
  6997   012F92  50E3               	movf	plusw1,w,c
  6998   012F94  0F01               	addlw	1
  6999   012F96  6E2A               	movwf	btemp^0,c
  7000   012F98  0EFE               	movlw	-2
  7001   012F9A  C02A  FFE3         	movff	btemp,plusw1
  7002   012F9E  6A2A               	clrf	btemp^0,c
  7003   012FA0  0EFF               	movlw	-1
  7004   012FA2  50E3               	movf	plusw1,w,c
  7005   012FA4  202A               	addwfc	btemp^0,w,c
  7006   012FA6  6E2A               	movwf	btemp^0,c
  7007   012FA8  0EFF               	movlw	-1
  7008   012FAA  C02A  FFE3         	movff	btemp,plusw1
  7009   012FAE                     
  7010                           ;stkvar	_i @ sp[(-2)+0]
  7011   012FAE  0EFF               	movlw	-1
  7012   012FB0  BEE3               	btfsc	plusw1,7,c
  7013   012FB2  EFE8  F097         	goto	u3171
  7014   012FB6  0EFF               	movlw	-1
  7015   012FB8  50E3               	movf	plusw1,w,c
  7016   012FBA  E10C               	bnz	u3170
  7017   012FBC  0EFE               	movlw	-2
  7018   012FBE  CFE3 F02A          	movff	plusw1,btemp
  7019   012FC2  0E0C               	movlw	12
  7020   012FC4  5E2A               	subwf	btemp^0,f,c
  7021   012FC6  A0D8               	btfss	status,0,c
  7022   012FC8  EFE8  F097         	goto	u3171
  7023   012FCC  EFEA  F097         	goto	u3170
  7024   012FD0                     u3171:
  7025   012FD0  EF96  F097         	goto	l5441
  7026   012FD4                     u3170:
  7027   012FD4                     
  7028                           ;xf/xf.c: 93:     theXF.in = 0;
  7029   012FD4  0E00               	movlw	0
  7030   012FD6  CFE8 F3DC          	movff	wreg,_theXF+276
  7031                           
  7032                           ;xf/xf.c: 94:     theXF.out = 0;
  7033   012FDA  0E00               	movlw	0
  7034   012FDC  CFE8 F3DD          	movff	wreg,_theXF+277
  7035                           
  7036                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  7037   012FE0  0E00               	movlw	0
  7038   012FE2  CFE8 F3DE          	movff	wreg,_theXF+278
  7039                           
  7040                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  7041   012FE6  0E00               	movlw	0
  7042   012FE8  CFE8 F3DF          	movff	wreg,_theXF+279
  7043   012FEC                     
  7044                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  7045   012FEC  52E5               	movf	postdec1,f,c
  7046   012FEE  52E5               	movf	postdec1,f,c
  7047   012FF0  0012               	return		;funcret
  7048   012FF2                     __end_of_XF_init:
  7049                           	callstack 0
  7050                           
  7051 ;; *************** function _Event_init *****************
  7052 ;; Defined at:
  7053 ;;		line 4 in file "xf/event.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  me              2  [STACK] PTR struct Event_
  7056 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1  [STACK] void 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used: 1
  7074 ;; Hardware stack levels required when called: 7
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_XF_init
  7079 ;;		_XF_unscheduleTimer
  7080 ;;		_XF_post
  7081 ;; This function uses a reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text17
  7085   0149F0                     __ptext17:
  7086                           	callstack 0
  7087   0149F0                     _Event_init:
  7088                           	callstack 10
  7089   0149F0                     
  7090                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  7091                           ;stkvar	_me @ sp[(0)+-2]
  7092   0149F0  0EFE               	movlw	-2
  7093   0149F2  CFE3 FFD9          	movff	plusw1,fsr2l
  7094   0149F6  0EFF               	movlw	-1
  7095   0149F8  CFE3 FFDA          	movff	plusw1,fsr2h
  7096   0149FC  6ADF               	clrf	indf2,c
  7097   0149FE                     
  7098                           ;xf/event.c: 7:     me->delay = 0;
  7099                           ;stkvar	_me @ sp[(0)+-2]
  7100   0149FE  0EFE               	movlw	-2
  7101   014A00  CFE3 F034          	movff	plusw1,btemp+10
  7102   014A04  0EFF               	movlw	-1
  7103   014A06  CFE3 F035          	movff	plusw1,btemp+11
  7104   014A0A  0E04               	movlw	4
  7105   014A0C  2434               	addwf	(btemp+10)^0,w,c
  7106   014A0E  6ED9               	movwf	fsr2l,c
  7107   014A10  0E00               	movlw	0
  7108   014A12  2035               	addwfc	(btemp+11)^0,w,c
  7109   014A14  6EDA               	movwf	fsr2h,c
  7110   014A16  6ADE               	clrf	postinc2,c
  7111   014A18  6ADD               	clrf	postdec2,c
  7112   014A1A                     
  7113                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  7114                           ;stkvar	_me @ sp[(0)+-2]
  7115   014A1A  0EFE               	movlw	-2
  7116   014A1C  CFE3 F034          	movff	plusw1,btemp+10
  7117   014A20  0EFF               	movlw	-1
  7118   014A22  CFE3 F035          	movff	plusw1,btemp+11
  7119   014A26  0E01               	movlw	1
  7120   014A28  2434               	addwf	(btemp+10)^0,w,c
  7121   014A2A  6ED9               	movwf	fsr2l,c
  7122   014A2C  0E00               	movlw	0
  7123   014A2E  2035               	addwfc	(btemp+11)^0,w,c
  7124   014A30  6EDA               	movwf	fsr2h,c
  7125   014A32  6ADE               	clrf	postinc2,c
  7126   014A34  6ADE               	clrf	postinc2,c
  7127   014A36  6ADD               	clrf	postdec2,c
  7128   014A38                     
  7129                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  7130   014A38  52E5               	movf	postdec1,f,c
  7131   014A3A  52E5               	movf	postdec1,f,c
  7132   014A3C  0012               	return		;funcret
  7133   014A3E                     __end_of_Event_init:
  7134                           	callstack 0
  7135                           
  7136 ;; *************** function _XF_executeOnce *****************
  7137 ;; Defined at:
  7138 ;;		line 290 in file "xf/xf.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  ev              6  [STACK] struct Event_
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1  [STACK] void 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:        0 bytes
  7157 ;; Hardware stack levels used: 1
  7158 ;; Hardware stack levels required when called: 14
  7159 ;; This function calls:
  7160 ;;		_XF_popEvent
  7161 ;;		_lightControl_Process
  7162 ;;		_motorControl_Process
  7163 ;; This function is called by:
  7164 ;;		_main
  7165 ;; This function uses a reentrant model
  7166 ;;
  7167                           
  7168                           	psect	text18
  7169   01455C                     __ptext18:
  7170                           	callstack 0
  7171   01455C                     _XF_executeOnce:
  7172                           	callstack 0
  7173                           
  7174                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7175   01455C  0E06               	movlw	6
  7176   01455E  26E1               	addwf	fsr1l,f,c
  7177   014560  0E00               	movlw	0
  7178   014562  22E2               	addwfc	fsr1h,f,c
  7179   014564                     
  7180                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7181   014564  0E00               	movlw	0
  7182   014566  6EE6               	movwf	postinc1,c
  7183   014568  EC3B  F09E         	call	_XF_popEvent	;wreg free
  7184                           
  7185                           ;stkvar	_ev @ sp[(-12)+0]
  7186   01456C  0EFA               	movlw	250
  7187   01456E  24E1               	addwf	fsr1l,w,c
  7188   014570  6ED9               	movwf	fsr2l,c
  7189   014572  0EFF               	movlw	255
  7190   014574  20E2               	addwfc	fsr1h,w,c
  7191   014576  6EDA               	movwf	fsr2h,c
  7192   014578  0E06               	movlw	6
  7193   01457A  6E2A               	movwf	btemp^0,c
  7194   01457C                     uf318999:
  7195   01457C  50DD               	movf	postdec2,w,c
  7196   01457E  52E5               	movf	postdec1,f,c
  7197   014580  50E7               	movf	indf1,w,c
  7198   014582  6EDF               	movwf	indf2,c
  7199   014584  2E2A               	decfsz	btemp^0,f,c
  7200   014586  D7FA               	bra	uf318999
  7201   014588                     
  7202                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7203                           ;stkvar	_ev @ sp[(-6)+0]
  7204   014588  0EFB               	movlw	251
  7205   01458A  24E1               	addwf	fsr1l,w,c
  7206   01458C  6ED9               	movwf	fsr2l,c
  7207   01458E  0EFF               	movlw	255
  7208   014590  20E2               	addwfc	fsr1h,w,c
  7209   014592  6EDA               	movwf	fsr2h,c
  7210   014594  50DE               	movf	postinc2,w,c
  7211   014596  10DE               	iorwf	postinc2,w,c
  7212   014598  10DE               	iorwf	postinc2,w,c
  7213   01459A  B4D8               	btfsc	status,2,c
  7214   01459C  EFD2  F0A2         	goto	u3191
  7215   0145A0  EFD4  F0A2         	goto	u3190
  7216   0145A4                     u3191:
  7217   0145A4  EFF1  F0A2         	goto	l1261
  7218   0145A8                     u3190:
  7219   0145A8                     
  7220                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7221                           ;stkvar	_ev @ sp[(-6)+0]
  7222   0145A8  0EFA               	movlw	250
  7223   0145AA  24E1               	addwf	fsr1l,w,c
  7224   0145AC  6E2A               	movwf	btemp^0,c
  7225   0145AE  0EFF               	movlw	255
  7226   0145B0  20E2               	addwfc	fsr1h,w,c
  7227   0145B2  6E2B               	movwf	(btemp+1)^0,c
  7228   0145B4  C02A  FFE6         	movff	btemp,postinc1
  7229   0145B8  C02B  FFE6         	movff	btemp+1,postinc1
  7230                           
  7231                           ;stkvar	_ev @ sp[(-8)+0]
  7232   0145BC  0EF9               	movlw	249
  7233   0145BE  24E1               	addwf	fsr1l,w,c
  7234   0145C0  6ED9               	movwf	fsr2l,c
  7235   0145C2  0EFF               	movlw	255
  7236   0145C4  20E2               	addwfc	fsr1h,w,c
  7237   0145C6  6EDA               	movwf	fsr2h,c
  7238   0145C8  D802               	call	u3208
  7239   0145CA  EFF1  F0A2         	goto	u3209
  7240   0145CE                     u3208:
  7241   0145CE  0005               	push	
  7242   0145D0  6EFA               	movwf	pclath,c
  7243   0145D2  50DE               	movf	postinc2,w,c
  7244   0145D4  6EFD               	movwf	tosl,c
  7245   0145D6  50DE               	movf	postinc2,w,c
  7246   0145D8  6EFE               	movwf	tosh,c
  7247   0145DA  50DE               	movf	postinc2,w,c
  7248   0145DC  6EFF               	movwf	tosu,c
  7249   0145DE  50FA               	movf	pclath,w,c
  7250   0145E0  0012               	return		;indir
  7251   0145E2                     u3209:
  7252   0145E2                     l1261:
  7253                           
  7254                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7255   0145E2  0EFA               	movlw	250
  7256   0145E4  26E1               	addwf	fsr1l,f,c
  7257   0145E6  0EFF               	movlw	255
  7258   0145E8  22E2               	addwfc	fsr1h,f,c
  7259   0145EA  0012               	return		;funcret
  7260   0145EC                     __end_of_XF_executeOnce:
  7261                           	callstack 0
  7262                           
  7263 ;; *************** function _lightControl_Process *****************
  7264 ;; Defined at:
  7265 ;;		line 228 in file "carFunctions.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  ev              2  [STACK] PTR struct Event_
  7268 ;;		 -> ev(6), 
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;		None
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1  [STACK] _Bool 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7275 ;; Tracked objects:
  7276 ;;		On entry : 0/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;Total ram usage:        0 bytes
  7285 ;; Hardware stack levels used: 1
  7286 ;; Hardware stack levels required when called: 13
  7287 ;; This function calls:
  7288 ;;		_lightContol_BackLight
  7289 ;;		_lightContol_FrontLight
  7290 ;; This function is called by:
  7291 ;;		_main
  7292 ;;		_updateCarState
  7293 ;;		_XF_executeOnce
  7294 ;; This function uses a reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text19
  7298   0126DA                     __ptext19:
  7299                           	callstack 0
  7300   0126DA                     _lightControl_Process:
  7301                           	callstack 16
  7302   0126DA                     
  7303                           ;carFunctions.c: 228:  _Bool lightControl_Process(Event* ev);carFunctions.c: 229:  {;car
      +                          Functions.c: 238:      static LightState state = INIT;;carFunctions.c: 239:      static 
      +                          LightState oldState = INIT;;carFunctions.c: 240:      switch(state)
  7304   0126DA  EFDB  F093         	goto	l5313
  7305   0126DE                     l5287:
  7306                           
  7307                           ;carFunctions.c: 243:              if(ev->id == E_INIT){
  7308                           ;stkvar	_ev @ sp[(0)+-2]
  7309   0126DE  0EFE               	movlw	-2
  7310   0126E0  CFE3 FFD9          	movff	plusw1,fsr2l
  7311   0126E4  0EFF               	movlw	-1
  7312   0126E6  CFE3 FFDA          	movff	plusw1,fsr2h
  7313   0126EA  50DF               	movf	indf2,w,c
  7314   0126EC  06E8               	decf	wreg,f,c
  7315   0126EE  A4D8               	btfss	status,2,c
  7316   0126F0  EF7C  F093         	goto	u3071
  7317   0126F4  EF7E  F093         	goto	u3070
  7318   0126F8                     u3071:
  7319   0126F8  EFF8  F093         	goto	l5315
  7320   0126FC                     u3070:
  7321   0126FC                     l5289:
  7322                           
  7323                           ;carFunctions.c: 244:                  state = OFF;
  7324   0126FC  0E01               	movlw	1
  7325   0126FE  6E25               	movwf	lightControl_Process@state^0,c
  7326   012700  EFF8  F093         	goto	l5315
  7327   012704                     l5291:
  7328                           
  7329                           ;carFunctions.c: 248:              if(ev->id == E_CONTACT_ON)
  7330                           ;stkvar	_ev @ sp[(0)+-2]
  7331   012704  0EFE               	movlw	-2
  7332   012706  CFE3 FFD9          	movff	plusw1,fsr2l
  7333   01270A  0EFF               	movlw	-1
  7334   01270C  CFE3 FFDA          	movff	plusw1,fsr2h
  7335   012710  50DF               	movf	indf2,w,c
  7336   012712  0A03               	xorlw	3
  7337   012714  A4D8               	btfss	status,2,c
  7338   012716  EF8F  F093         	goto	u3081
  7339   01271A  EF91  F093         	goto	u3080
  7340   01271E                     u3081:
  7341   01271E  EFF8  F093         	goto	l5315
  7342   012722                     u3080:
  7343   012722                     l5293:
  7344                           
  7345                           ;carFunctions.c: 249:              {;carFunctions.c: 250:                  state = CRUIS
      +                          E;
  7346   012722  0E02               	movlw	2
  7347   012724  6E25               	movwf	lightControl_Process@state^0,c
  7348   012726  EFF8  F093         	goto	l5315
  7349   01272A                     l5295:
  7350                           
  7351                           ;carFunctions.c: 255:              if(ev->id == E_CONTACT_OFF)
  7352                           ;stkvar	_ev @ sp[(0)+-2]
  7353   01272A  0EFE               	movlw	-2
  7354   01272C  CFE3 FFD9          	movff	plusw1,fsr2l
  7355   012730  0EFF               	movlw	-1
  7356   012732  CFE3 FFDA          	movff	plusw1,fsr2h
  7357   012736  50DF               	movf	indf2,w,c
  7358   012738  0A02               	xorlw	2
  7359   01273A  A4D8               	btfss	status,2,c
  7360   01273C  EFA2  F093         	goto	u3091
  7361   012740  EFA4  F093         	goto	u3090
  7362   012744                     u3091:
  7363   012744  EFA6  F093         	goto	l5299
  7364   012748                     u3090:
  7365   012748  EF7E  F093         	goto	l5289
  7366   01274C                     l5299:
  7367                           
  7368                           ;stkvar	_ev @ sp[(0)+-2]
  7369   01274C  0EFE               	movlw	-2
  7370   01274E  CFE3 FFD9          	movff	plusw1,fsr2l
  7371   012752  0EFF               	movlw	-1
  7372   012754  CFE3 FFDA          	movff	plusw1,fsr2h
  7373   012758  50DF               	movf	indf2,w,c
  7374   01275A  0A04               	xorlw	4
  7375   01275C  A4D8               	btfss	status,2,c
  7376   01275E  EFB3  F093         	goto	u3101
  7377   012762  EFB5  F093         	goto	u3100
  7378   012766                     u3101:
  7379   012766  EFF8  F093         	goto	l5315
  7380   01276A                     u3100:
  7381   01276A                     
  7382                           ;carFunctions.c: 261:              {;carFunctions.c: 262:                  state = BRAKE
      +                          ;
  7383   01276A  0E03               	movlw	3
  7384   01276C  6E25               	movwf	lightControl_Process@state^0,c
  7385   01276E  EFF8  F093         	goto	l5315
  7386   012772                     l5303:
  7387                           
  7388                           ;carFunctions.c: 266:              if(ev->id == E_CONTACT_OFF)
  7389                           ;stkvar	_ev @ sp[(0)+-2]
  7390   012772  0EFE               	movlw	-2
  7391   012774  CFE3 FFD9          	movff	plusw1,fsr2l
  7392   012778  0EFF               	movlw	-1
  7393   01277A  CFE3 FFDA          	movff	plusw1,fsr2h
  7394   01277E  50DF               	movf	indf2,w,c
  7395   012780  0A02               	xorlw	2
  7396   012782  A4D8               	btfss	status,2,c
  7397   012784  EFC6  F093         	goto	u3111
  7398   012788  EFC8  F093         	goto	u3110
  7399   01278C                     u3111:
  7400   01278C  EFCA  F093         	goto	l5307
  7401   012790                     u3110:
  7402   012790  EF7E  F093         	goto	l5289
  7403   012794                     l5307:
  7404                           
  7405                           ;stkvar	_ev @ sp[(0)+-2]
  7406   012794  0EFE               	movlw	-2
  7407   012796  CFE3 FFD9          	movff	plusw1,fsr2l
  7408   01279A  0EFF               	movlw	-1
  7409   01279C  CFE3 FFDA          	movff	plusw1,fsr2h
  7410   0127A0  50DF               	movf	indf2,w,c
  7411   0127A2  0A0A               	xorlw	10
  7412   0127A4  A4D8               	btfss	status,2,c
  7413   0127A6  EFD7  F093         	goto	u3121
  7414   0127AA  EFD9  F093         	goto	u3120
  7415   0127AE                     u3121:
  7416   0127AE  EFF8  F093         	goto	l5315
  7417   0127B2                     u3120:
  7418   0127B2  EF91  F093         	goto	l5293
  7419   0127B6                     l5313:
  7420   0127B6  5025               	movf	lightControl_Process@state^0,w,c
  7421   0127B8  6E34               	movwf	(btemp+10)^0,c
  7422   0127BA  6A35               	clrf	(btemp+11)^0,c
  7423                           
  7424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7425                           ; Switch size 1, requested type "simple"
  7426                           ; Number of cases is 1, Range of values is 0 to 0
  7427                           ; switch strategies available:
  7428                           ; Name         Instructions Cycles
  7429                           ; simple_byte            4     3 (average)
  7430                           ;	Chosen strategy is simple_byte
  7431   0127BC  5035               	movf	(btemp+11)^0,w,c
  7432   0127BE  0A00               	xorlw	0	; case 0
  7433   0127C0  B4D8               	btfsc	status,2,c
  7434   0127C2  EFE5  F093         	goto	l5751
  7435   0127C6  EFF8  F093         	goto	l5315
  7436   0127CA                     l5751:
  7437                           
  7438                           ; Switch size 1, requested type "simple"
  7439                           ; Number of cases is 4, Range of values is 0 to 3
  7440                           ; switch strategies available:
  7441                           ; Name         Instructions Cycles
  7442                           ; simple_byte           13     7 (average)
  7443                           ;	Chosen strategy is simple_byte
  7444   0127CA  5034               	movf	(btemp+10)^0,w,c
  7445   0127CC  0A00               	xorlw	0	; case 0
  7446   0127CE  B4D8               	btfsc	status,2,c
  7447   0127D0  EF6F  F093         	goto	l5287
  7448   0127D4  0A01               	xorlw	1	; case 1
  7449   0127D6  B4D8               	btfsc	status,2,c
  7450   0127D8  EF82  F093         	goto	l5291
  7451   0127DC  0A03               	xorlw	3	; case 2
  7452   0127DE  B4D8               	btfsc	status,2,c
  7453   0127E0  EF95  F093         	goto	l5295
  7454   0127E4  0A01               	xorlw	1	; case 3
  7455   0127E6  B4D8               	btfsc	status,2,c
  7456   0127E8  EFB9  F093         	goto	l5303
  7457   0127EC  EFF8  F093         	goto	l5315
  7458   0127F0                     l5315:
  7459                           
  7460                           ;carFunctions.c: 278:     if(oldState == state)
  7461   0127F0  5025               	movf	lightControl_Process@state^0,w,c
  7462   0127F2  1824               	xorwf	lightControl_Process@oldState^0,w,c
  7463   0127F4  A4D8               	btfss	status,2,c
  7464   0127F6  EFFF  F093         	goto	u3131
  7465   0127FA  EF01  F094         	goto	u3130
  7466   0127FE                     u3131:
  7467   0127FE  EF03  F094         	goto	l1528
  7468   012802                     u3130:
  7469   012802  EF3E  F094         	goto	l1529
  7470   012806                     l1528:
  7471                           
  7472                           ;carFunctions.c: 282:     oldState = state;
  7473   012806  C025  F024         	movff	lightControl_Process@state,lightControl_Process@oldState
  7474                           
  7475                           ;carFunctions.c: 283:     switch(state)
  7476   01280A  EF21  F094         	goto	l5327
  7477   01280E                     l5319:
  7478                           
  7479                           ;carFunctions.c: 288:              lightContol_FrontLight(0);
  7480   01280E  0E00               	movlw	0
  7481   012810  6EE6               	movwf	postinc1,c
  7482   012812  EC79  F0A0         	call	_lightContol_FrontLight	;wreg free
  7483                           
  7484                           ;carFunctions.c: 289:              lightContol_BackLight(0);
  7485   012816  0E00               	movlw	0
  7486   012818  6EE6               	movwf	postinc1,c
  7487   01281A  EC1F  F0A0         	call	_lightContol_BackLight	;wreg free
  7488                           
  7489                           ;carFunctions.c: 290:              break;
  7490   01281E  EF3E  F094         	goto	l1529
  7491   012822                     l5321:
  7492                           
  7493                           ;carFunctions.c: 292:              lightContol_FrontLight(50);
  7494   012822  0E32               	movlw	50
  7495   012824  6EE6               	movwf	postinc1,c
  7496   012826  EC79  F0A0         	call	_lightContol_FrontLight	;wreg free
  7497                           
  7498                           ;carFunctions.c: 293:              lightContol_BackLight(50);
  7499   01282A  0E32               	movlw	50
  7500   01282C  6EE6               	movwf	postinc1,c
  7501   01282E  EC1F  F0A0         	call	_lightContol_BackLight	;wreg free
  7502                           
  7503                           ;carFunctions.c: 294:              break;
  7504   012832  EF3E  F094         	goto	l1529
  7505   012836                     l5323:
  7506                           
  7507                           ;carFunctions.c: 296:              lightContol_BackLight(100);
  7508   012836  0E64               	movlw	100
  7509   012838  6EE6               	movwf	postinc1,c
  7510   01283A  EC1F  F0A0         	call	_lightContol_BackLight	;wreg free
  7511                           
  7512                           ;carFunctions.c: 297:              break;
  7513   01283E  EF3E  F094         	goto	l1529
  7514   012842                     l5327:
  7515   012842  5025               	movf	lightControl_Process@state^0,w,c
  7516   012844  6E34               	movwf	(btemp+10)^0,c
  7517   012846  6A35               	clrf	(btemp+11)^0,c
  7518                           
  7519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7520                           ; Switch size 1, requested type "simple"
  7521                           ; Number of cases is 1, Range of values is 0 to 0
  7522                           ; switch strategies available:
  7523                           ; Name         Instructions Cycles
  7524                           ; simple_byte            4     3 (average)
  7525                           ;	Chosen strategy is simple_byte
  7526   012848  5035               	movf	(btemp+11)^0,w,c
  7527   01284A  0A00               	xorlw	0	; case 0
  7528   01284C  B4D8               	btfsc	status,2,c
  7529   01284E  EF2B  F094         	goto	l5753
  7530   012852  EF3E  F094         	goto	l1529
  7531   012856                     l5753:
  7532                           
  7533                           ; Switch size 1, requested type "simple"
  7534                           ; Number of cases is 4, Range of values is 0 to 3
  7535                           ; switch strategies available:
  7536                           ; Name         Instructions Cycles
  7537                           ; simple_byte           13     7 (average)
  7538                           ;	Chosen strategy is simple_byte
  7539   012856  5034               	movf	(btemp+10)^0,w,c
  7540   012858  0A00               	xorlw	0	; case 0
  7541   01285A  B4D8               	btfsc	status,2,c
  7542   01285C  EF3E  F094         	goto	l1529
  7543   012860  0A01               	xorlw	1	; case 1
  7544   012862  B4D8               	btfsc	status,2,c
  7545   012864  EF07  F094         	goto	l5319
  7546   012868  0A03               	xorlw	3	; case 2
  7547   01286A  B4D8               	btfsc	status,2,c
  7548   01286C  EF11  F094         	goto	l5321
  7549   012870  0A01               	xorlw	1	; case 3
  7550   012872  B4D8               	btfsc	status,2,c
  7551   012874  EF1B  F094         	goto	l5323
  7552   012878  EF3E  F094         	goto	l1529
  7553   01287C                     l1529:
  7554                           
  7555                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7556   01287C  52E5               	movf	postdec1,f,c
  7557   01287E  52E5               	movf	postdec1,f,c
  7558   012880  0012               	return		;funcret
  7559   012882                     __end_of_lightControl_Process:
  7560                           	callstack 0
  7561                           
  7562 ;; *************** function _motorControl_Process *****************
  7563 ;; Defined at:
  7564 ;;		line 117 in file "carFunctions.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  ev              2  [STACK] PTR struct Event_
  7567 ;;		 -> ev(6), 
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;		None
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1  [STACK] _Bool 
  7572 ;; Registers used:
  7573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;Total ram usage:        0 bytes
  7584 ;; Hardware stack levels used: 1
  7585 ;; Hardware stack levels required when called: 13
  7586 ;; This function calls:
  7587 ;;		_handleAccelerationCAN
  7588 ;;		_motorControl
  7589 ;; This function is called by:
  7590 ;;		_updateCarState
  7591 ;;		_XF_executeOnce
  7592 ;; This function uses a reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text20
  7596   011E64                     __ptext20:
  7597                           	callstack 0
  7598   011E64                     _motorControl_Process:
  7599                           	callstack 16
  7600   011E64                     
  7601                           ;carFunctions.c: 130:      static MotorState state = OFF;;carFunctions.c: 131:      stat
      +                          ic MotorState oldState = OFF;;carFunctions.c: 135:      switch(state)
  7602   011E64  EFDE  F08F         	goto	l5259
  7603   011E68                     l5219:
  7604                           
  7605                           ;carFunctions.c: 139:              if(ev->id == E_CONTACT_ON)
  7606                           ;stkvar	_ev @ sp[(0)+-2]
  7607   011E68  0EFE               	movlw	-2
  7608   011E6A  CFE3 FFD9          	movff	plusw1,fsr2l
  7609   011E6E  0EFF               	movlw	-1
  7610   011E70  CFE3 FFDA          	movff	plusw1,fsr2h
  7611   011E74  50DF               	movf	indf2,w,c
  7612   011E76  0A03               	xorlw	3
  7613   011E78  A4D8               	btfss	status,2,c
  7614   011E7A  EF41  F08F         	goto	u2961
  7615   011E7E  EF43  F08F         	goto	u2960
  7616   011E82                     u2961:
  7617   011E82  EFFF  F08F         	goto	l5261
  7618   011E86                     u2960:
  7619   011E86                     l5221:
  7620                           
  7621                           ;carFunctions.c: 140:              {;carFunctions.c: 141:                  state = STAND
      +                          BY;
  7622   011E86  0E05               	movlw	5
  7623   011E88  6E5E               	movwf	motorControl_Process@state^0,c
  7624   011E8A  EFFF  F08F         	goto	l5261
  7625   011E8E                     l5223:
  7626                           
  7627                           ;carFunctions.c: 148:              if(ev->id == E_CONTACT_OFF)
  7628                           ;stkvar	_ev @ sp[(0)+-2]
  7629   011E8E  0EFE               	movlw	-2
  7630   011E90  CFE3 FFD9          	movff	plusw1,fsr2l
  7631   011E94  0EFF               	movlw	-1
  7632   011E96  CFE3 FFDA          	movff	plusw1,fsr2h
  7633   011E9A  50DF               	movf	indf2,w,c
  7634   011E9C  0A02               	xorlw	2
  7635   011E9E  A4D8               	btfss	status,2,c
  7636   011EA0  EF54  F08F         	goto	u2971
  7637   011EA4  EF56  F08F         	goto	u2970
  7638   011EA8                     u2971:
  7639   011EA8  EF5A  F08F         	goto	l5227
  7640   011EAC                     u2970:
  7641   011EAC                     
  7642                           ;carFunctions.c: 149:              {;carFunctions.c: 150:                  state = OFF;
  7643   011EAC  0E01               	movlw	1
  7644   011EAE  6E5E               	movwf	motorControl_Process@state^0,c
  7645                           
  7646                           ;carFunctions.c: 151:              }else if(ev->id == E_ACCELERATION_ON)
  7647   011EB0  EF6B  F08F         	goto	l5231
  7648   011EB4                     l5227:
  7649                           
  7650                           ;stkvar	_ev @ sp[(0)+-2]
  7651   011EB4  0EFE               	movlw	-2
  7652   011EB6  CFE3 FFD9          	movff	plusw1,fsr2l
  7653   011EBA  0EFF               	movlw	-1
  7654   011EBC  CFE3 FFDA          	movff	plusw1,fsr2h
  7655   011EC0  50DF               	movf	indf2,w,c
  7656   011EC2  0A08               	xorlw	8
  7657   011EC4  A4D8               	btfss	status,2,c
  7658   011EC6  EF67  F08F         	goto	u2981
  7659   011ECA  EF69  F08F         	goto	u2980
  7660   011ECE                     u2981:
  7661   011ECE  EF6B  F08F         	goto	l5231
  7662   011ED2                     u2980:
  7663   011ED2                     
  7664                           ;carFunctions.c: 152:              {;carFunctions.c: 153:                  state = ACCEL
      +                          ERATION;
  7665   011ED2  0E06               	movlw	6
  7666   011ED4  6E5E               	movwf	motorControl_Process@state^0,c
  7667   011ED6                     l5231:
  7668                           
  7669                           ;carFunctions.c: 156:              if(ev->id == E_ACCELERATION_OFF)
  7670                           ;stkvar	_ev @ sp[(0)+-2]
  7671   011ED6  0EFE               	movlw	-2
  7672   011ED8  CFE3 FFD9          	movff	plusw1,fsr2l
  7673   011EDC  0EFF               	movlw	-1
  7674   011EDE  CFE3 FFDA          	movff	plusw1,fsr2h
  7675   011EE2  50DF               	movf	indf2,w,c
  7676   011EE4  0A09               	xorlw	9
  7677   011EE6  A4D8               	btfss	status,2,c
  7678   011EE8  EF78  F08F         	goto	u2991
  7679   011EEC  EF7A  F08F         	goto	u2990
  7680   011EF0                     u2991:
  7681   011EF0  EF7E  F08F         	goto	l5235
  7682   011EF4                     u2990:
  7683   011EF4                     l5233:
  7684                           
  7685                           ;carFunctions.c: 157:              {;carFunctions.c: 158:                  state = DECEL
      +                          ERATION;
  7686   011EF4  0E07               	movlw	7
  7687   011EF6  6E5E               	movwf	motorControl_Process@state^0,c
  7688                           
  7689                           ;carFunctions.c: 159:              }else if(ev->id == E_HIGH_BRAKE)
  7690   011EF8  EFFF  F08F         	goto	l5261
  7691   011EFC                     l5235:
  7692                           
  7693                           ;stkvar	_ev @ sp[(0)+-2]
  7694   011EFC  0EFE               	movlw	-2
  7695   011EFE  CFE3 FFD9          	movff	plusw1,fsr2l
  7696   011F02  0EFF               	movlw	-1
  7697   011F04  CFE3 FFDA          	movff	plusw1,fsr2h
  7698   011F08  50DF               	movf	indf2,w,c
  7699   011F0A  0A04               	xorlw	4
  7700   011F0C  A4D8               	btfss	status,2,c
  7701   011F0E  EF8B  F08F         	goto	u3001
  7702   011F12  EF8D  F08F         	goto	u3000
  7703   011F16                     u3001:
  7704   011F16  EFFF  F08F         	goto	l5261
  7705   011F1A                     u3000:
  7706   011F1A  EF7A  F08F         	goto	l5233
  7707   011F1E                     l5239:
  7708                           
  7709                           ;carFunctions.c: 166:              if (carState.speed == 0){
  7710   011F1E  500A               	movf	(_carState+9)^0,w,c
  7711   011F20  100B               	iorwf	(_carState+10)^0,w,c
  7712   011F22  A4D8               	btfss	status,2,c
  7713   011F24  EF96  F08F         	goto	u3011
  7714   011F28  EF98  F08F         	goto	u3010
  7715   011F2C                     u3011:
  7716   011F2C  EF9A  F08F         	goto	l5243
  7717   011F30                     u3010:
  7718   011F30  EF43  F08F         	goto	l5221
  7719   011F34                     l5243:
  7720   011F34  BE0B               	btfsc	(_carState+10)^0,7,c
  7721   011F36  EFA5  F08F         	goto	u3021
  7722   011F3A  500B               	movf	(_carState+10)^0,w,c
  7723   011F3C  E108               	bnz	u3020
  7724   011F3E  040A               	decf	(_carState+9)^0,w,c
  7725   011F40  A0D8               	btfss	status,0,c
  7726   011F42  EFA5  F08F         	goto	u3021
  7727   011F46  EFA7  F08F         	goto	u3020
  7728   011F4A                     u3021:
  7729   011F4A  EFFF  F08F         	goto	l5261
  7730   011F4E                     u3020:
  7731   011F4E                     
  7732                           ;stkvar	_ev @ sp[(0)+-2]
  7733   011F4E  0EFE               	movlw	-2
  7734   011F50  CFE3 FFD9          	movff	plusw1,fsr2l
  7735   011F54  0EFF               	movlw	-1
  7736   011F56  CFE3 FFDA          	movff	plusw1,fsr2h
  7737   011F5A  50DF               	movf	indf2,w,c
  7738   011F5C  0A04               	xorlw	4
  7739   011F5E  B4D8               	btfsc	status,2,c
  7740   011F60  EFB4  F08F         	goto	u3031
  7741   011F64  EFB6  F08F         	goto	u3030
  7742   011F68                     u3031:
  7743   011F68  EFFF  F08F         	goto	l5261
  7744   011F6C                     u3030:
  7745   011F6C                     
  7746                           ;carFunctions.c: 169:                  state = CRUISE;
  7747   011F6C  0E03               	movlw	3
  7748   011F6E  6E5E               	movwf	motorControl_Process@state^0,c
  7749   011F70  EFFF  F08F         	goto	l5261
  7750   011F74                     l5249:
  7751                           
  7752                           ;carFunctions.c: 175:              if(ev->id == E_CONTACT_OFF)
  7753                           ;stkvar	_ev @ sp[(0)+-2]
  7754   011F74  0EFE               	movlw	-2
  7755   011F76  CFE3 FFD9          	movff	plusw1,fsr2l
  7756   011F7A  0EFF               	movlw	-1
  7757   011F7C  CFE3 FFDA          	movff	plusw1,fsr2h
  7758   011F80  50DF               	movf	indf2,w,c
  7759   011F82  0A02               	xorlw	2
  7760   011F84  A4D8               	btfss	status,2,c
  7761   011F86  EFC7  F08F         	goto	u3041
  7762   011F8A  EFC9  F08F         	goto	u3040
  7763   011F8E                     u3041:
  7764   011F8E  EFCD  F08F         	goto	l5253
  7765   011F92                     u3040:
  7766   011F92                     
  7767                           ;carFunctions.c: 176:              {;carFunctions.c: 177:                  state = OFF;
  7768   011F92  0E01               	movlw	1
  7769   011F94  6E5E               	movwf	motorControl_Process@state^0,c
  7770                           
  7771                           ;carFunctions.c: 178:              }else if(ev->id == E_ACCELERATION_OFF)
  7772   011F96  EFFF  F08F         	goto	l5261
  7773   011F9A                     l5253:
  7774                           
  7775                           ;stkvar	_ev @ sp[(0)+-2]
  7776   011F9A  0EFE               	movlw	-2
  7777   011F9C  CFE3 FFD9          	movff	plusw1,fsr2l
  7778   011FA0  0EFF               	movlw	-1
  7779   011FA2  CFE3 FFDA          	movff	plusw1,fsr2h
  7780   011FA6  50DF               	movf	indf2,w,c
  7781   011FA8  0A09               	xorlw	9
  7782   011FAA  A4D8               	btfss	status,2,c
  7783   011FAC  EFDA  F08F         	goto	u3051
  7784   011FB0  EFDC  F08F         	goto	u3050
  7785   011FB4                     u3051:
  7786   011FB4  EFFF  F08F         	goto	l5261
  7787   011FB8                     u3050:
  7788   011FB8  EF43  F08F         	goto	l5221
  7789   011FBC                     l5259:
  7790   011FBC  505E               	movf	motorControl_Process@state^0,w,c
  7791   011FBE  6E34               	movwf	(btemp+10)^0,c
  7792   011FC0  6A35               	clrf	(btemp+11)^0,c
  7793                           
  7794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7795                           ; Switch size 1, requested type "simple"
  7796                           ; Number of cases is 1, Range of values is 0 to 0
  7797                           ; switch strategies available:
  7798                           ; Name         Instructions Cycles
  7799                           ; simple_byte            4     3 (average)
  7800                           ;	Chosen strategy is simple_byte
  7801   011FC2  5035               	movf	(btemp+11)^0,w,c
  7802   011FC4  0A00               	xorlw	0	; case 0
  7803   011FC6  B4D8               	btfsc	status,2,c
  7804   011FC8  EFE8  F08F         	goto	l5755
  7805   011FCC  EFFF  F08F         	goto	l5261
  7806   011FD0                     l5755:
  7807                           
  7808                           ; Switch size 1, requested type "simple"
  7809                           ; Number of cases is 5, Range of values is 1 to 7
  7810                           ; switch strategies available:
  7811                           ; Name         Instructions Cycles
  7812                           ; simple_byte           16     9 (average)
  7813                           ;	Chosen strategy is simple_byte
  7814   011FD0  5034               	movf	(btemp+10)^0,w,c
  7815   011FD2  0A01               	xorlw	1	; case 1
  7816   011FD4  B4D8               	btfsc	status,2,c
  7817   011FD6  EF34  F08F         	goto	l5219
  7818   011FDA  0A02               	xorlw	2	; case 3
  7819   011FDC  B4D8               	btfsc	status,2,c
  7820   011FDE  EFBA  F08F         	goto	l5249
  7821   011FE2  0A06               	xorlw	6	; case 5
  7822   011FE4  B4D8               	btfsc	status,2,c
  7823   011FE6  EF47  F08F         	goto	l5223
  7824   011FEA  0A03               	xorlw	3	; case 6
  7825   011FEC  B4D8               	btfsc	status,2,c
  7826   011FEE  EF6B  F08F         	goto	l5231
  7827   011FF2  0A01               	xorlw	1	; case 7
  7828   011FF4  B4D8               	btfsc	status,2,c
  7829   011FF6  EF8F  F08F         	goto	l5239
  7830   011FFA  EFFF  F08F         	goto	l5261
  7831   011FFE                     l5261:
  7832                           
  7833                           ;carFunctions.c: 188:      if(oldState == state)
  7834   011FFE  505E               	movf	motorControl_Process@state^0,w,c
  7835   012000  185D               	xorwf	motorControl_Process@oldState^0,w,c
  7836   012002  A4D8               	btfss	status,2,c
  7837   012004  EF06  F090         	goto	u3061
  7838   012008  EF08  F090         	goto	u3060
  7839   01200C                     u3061:
  7840   01200C  EF0A  F090         	goto	l1496
  7841   012010                     u3060:
  7842   012010  EF53  F090         	goto	l1497
  7843   012014                     l1496:
  7844                           
  7845                           ;carFunctions.c: 192:     oldState = state;
  7846   012014  C05E  F05D         	movff	motorControl_Process@state,motorControl_Process@oldState
  7847                           
  7848                           ;carFunctions.c: 195:     switch(state)
  7849   012018  EF2E  F090         	goto	l5275
  7850   01201C                     l5265:
  7851                           
  7852                           ;carFunctions.c: 199:              motorControl(0,0);
  7853   01201C  0E00               	movlw	0
  7854   01201E  6EE6               	movwf	postinc1,c
  7855   012020  0E00               	movlw	0
  7856   012022  6EE6               	movwf	postinc1,c
  7857   012024  ECF9  F09C         	call	_motorControl	;wreg free
  7858                           
  7859                           ;carFunctions.c: 200:              break;
  7860   012028  EF53  F090         	goto	l1497
  7861   01202C                     l5267:
  7862                           
  7863                           ;carFunctions.c: 205:              motorControl(10,1);
  7864   01202C  0E01               	movlw	1
  7865   01202E  6EE6               	movwf	postinc1,c
  7866   012030  0E0A               	movlw	10
  7867   012032  6EE6               	movwf	postinc1,c
  7868   012034  ECF9  F09C         	call	_motorControl	;wreg free
  7869                           
  7870                           ;carFunctions.c: 206:             break;
  7871   012038  EF53  F090         	goto	l1497
  7872   01203C                     l5269:
  7873                           
  7874                           ;carFunctions.c: 212:              handleAccelerationCAN();
  7875   01203C  EC41  F094         	call	_handleAccelerationCAN	;wreg free
  7876   012040                     
  7877                           ;carFunctions.c: 213:              _delay((unsigned long)((100)*(62500000/4000.0)));
  7878   012040  0E08               	movlw	8
  7879   012042  6E2B               	movwf	(wtemp0+1)^0,c
  7880   012044  0EEE               	movlw	238
  7881   012046  6E2A               	movwf	wtemp0^0,c
  7882   012048  0E31               	movlw	49
  7883   01204A                     u3297:
  7884   01204A  2EE8               	decfsz	wreg,f,c
  7885   01204C  D7FE               	bra	u3297
  7886   01204E  2E2A               	decfsz	wtemp0^0,f,c
  7887   012050  D7FC               	bra	u3297
  7888   012052  2E2B               	decfsz	(wtemp0+1)^0,f,c
  7889   012054  D7FA               	bra	u3297
  7890   012056  0000               	nop	
  7891                           
  7892                           ;carFunctions.c: 215:              break;
  7893   012058  EF53  F090         	goto	l1497
  7894   01205C                     l5275:
  7895   01205C  505E               	movf	motorControl_Process@state^0,w,c
  7896   01205E  6E34               	movwf	(btemp+10)^0,c
  7897   012060  6A35               	clrf	(btemp+11)^0,c
  7898                           
  7899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7900                           ; Switch size 1, requested type "simple"
  7901                           ; Number of cases is 1, Range of values is 0 to 0
  7902                           ; switch strategies available:
  7903                           ; Name         Instructions Cycles
  7904                           ; simple_byte            4     3 (average)
  7905                           ;	Chosen strategy is simple_byte
  7906   012062  5035               	movf	(btemp+11)^0,w,c
  7907   012064  0A00               	xorlw	0	; case 0
  7908   012066  B4D8               	btfsc	status,2,c
  7909   012068  EF38  F090         	goto	l5757
  7910   01206C  EF53  F090         	goto	l1497
  7911   012070                     l5757:
  7912                           
  7913                           ; Switch size 1, requested type "simple"
  7914                           ; Number of cases is 6, Range of values is 1 to 7
  7915                           ; switch strategies available:
  7916                           ; Name         Instructions Cycles
  7917                           ; simple_byte           19    10 (average)
  7918                           ;	Chosen strategy is simple_byte
  7919   012070  5034               	movf	(btemp+10)^0,w,c
  7920   012072  0A01               	xorlw	1	; case 1
  7921   012074  B4D8               	btfsc	status,2,c
  7922   012076  EF0E  F090         	goto	l5265
  7923   01207A  0A02               	xorlw	2	; case 3
  7924   01207C  B4D8               	btfsc	status,2,c
  7925   01207E  EF53  F090         	goto	l1497
  7926   012082  0A07               	xorlw	7	; case 4
  7927   012084  B4D8               	btfsc	status,2,c
  7928   012086  EF53  F090         	goto	l1497
  7929   01208A  0A01               	xorlw	1	; case 5
  7930   01208C  B4D8               	btfsc	status,2,c
  7931   01208E  EF16  F090         	goto	l5267
  7932   012092  0A03               	xorlw	3	; case 6
  7933   012094  B4D8               	btfsc	status,2,c
  7934   012096  EF1E  F090         	goto	l5269
  7935   01209A  0A01               	xorlw	1	; case 7
  7936   01209C  B4D8               	btfsc	status,2,c
  7937   01209E  EF53  F090         	goto	l1497
  7938   0120A2  EF53  F090         	goto	l1497
  7939   0120A6                     l1497:
  7940                           
  7941                           ; _motorControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7942   0120A6  52E5               	movf	postdec1,f,c
  7943   0120A8  52E5               	movf	postdec1,f,c
  7944   0120AA  0012               	return		;funcret
  7945   0120AC                     __end_of_motorControl_Process:
  7946                           	callstack 0
  7947                           
  7948 ;; *************** function _motorControl *****************
  7949 ;; Defined at:
  7950 ;;		line 70 in file "carFunctions.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;  percent         1  [STACK] unsigned char 
  7953 ;;  starter         1  [STACK] unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7956 ;;  txdata          8  [STACK] unsigned char [8]
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  1  [STACK] void 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;Total ram usage:        0 bytes
  7971 ;; Hardware stack levels used: 1
  7972 ;; Hardware stack levels required when called: 12
  7973 ;; This function calls:
  7974 ;;		_CanSend
  7975 ;; This function is called by:
  7976 ;;		_motorControl_Process
  7977 ;; This function uses a reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text21
  7981   0139F2                     __ptext21:
  7982                           	callstack 0
  7983   0139F2                     _motorControl:
  7984                           	callstack 0
  7985                           
  7986                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7987   0139F2  0E18               	movlw	24
  7988   0139F4  26E1               	addwf	fsr1l,f,c
  7989   0139F6  0E00               	movlw	0
  7990   0139F8  22E2               	addwfc	fsr1h,f,c
  7991   0139FA                     
  7992                           ;carFunctions.c: 71:      static uint8_t lastPercent = 0;;carFunctions.c: 72:      stati
      +                          c uint8_t lastStarter = 0;;carFunctions.c: 73:      CAN_TX_MSGOBJ txMsg={0};
  7993   0139FA  EE20  F080         	lfsr	2,motorControl@F6676
  7994                           
  7995                           ;stkvar	_txMsg @ sp[(-24)+0]
  7996   0139FE  0E10               	movlw	16
  7997   013A00  6E2A               	movwf	btemp^0,c
  7998   013A02  0EE8               	movlw	-24
  7999   013A04                     us247999:
  8000   013A04  CFDE FFE3          	movff	postinc2,plusw1
  8001   013A08  28E8               	incf	wreg,w,c
  8002   013A0A  2E2A               	decfsz	btemp^0,f,c
  8003   013A0C  D7FB               	bra	us247999
  8004   013A0E                     
  8005                           ;carFunctions.c: 74:      uint8_t txdata[8];;carFunctions.c: 75:          if((lastPercen
      +                          t != percent)||(lastStarter != starter)) {
  8006                           ;stkvar	_percent @ sp[(-24)+-1]
  8007   013A0E  0EE7               	movlw	-25
  8008   013A10  50E3               	movf	plusw1,w,c
  8009   013A12  1829               	xorwf	motorControl@lastPercent^0,w,c
  8010   013A14  A4D8               	btfss	status,2,c
  8011   013A16  EF0F  F09D         	goto	u2481
  8012   013A1A  EF11  F09D         	goto	u2480
  8013   013A1E                     u2481:
  8014   013A1E  EF1B  F09D         	goto	l4781
  8015   013A22                     u2480:
  8016   013A22                     
  8017                           ;stkvar	_starter @ sp[(-24)+-2]
  8018   013A22  0EE6               	movlw	-26
  8019   013A24  50E3               	movf	plusw1,w,c
  8020   013A26  1828               	xorwf	motorControl@lastStarter^0,w,c
  8021   013A28  B4D8               	btfsc	status,2,c
  8022   013A2A  EF19  F09D         	goto	u2491
  8023   013A2E  EF1B  F09D         	goto	u2490
  8024   013A32                     u2491:
  8025   013A32  EF64  F09D         	goto	l1452
  8026   013A36                     u2490:
  8027   013A36                     l4781:
  8028                           
  8029                           ;carFunctions.c: 76:              lastPercent = percent;
  8030                           ;stkvar	_percent @ sp[(-24)+-1]
  8031   013A36  0EE7               	movlw	-25
  8032   013A38  CFE3 F029          	movff	plusw1,motorControl@lastPercent
  8033                           
  8034                           ;carFunctions.c: 77:              lastStarter = starter;
  8035                           ;stkvar	_starter @ sp[(-24)+-2]
  8036   013A3C  0EE6               	movlw	-26
  8037   013A3E  CFE3 F028          	movff	plusw1,motorControl@lastStarter
  8038   013A42                     
  8039                           ;carFunctions.c: 79:              txMsg.bF.id.ID = (0x112);
  8040   013A42  0E12               	movlw	18
  8041   013A44  6E32               	movwf	(btemp+8)^0,c
  8042   013A46  0E01               	movlw	1
  8043   013A48  6E33               	movwf	(btemp+9)^0,c
  8044   013A4A  0E00               	movlw	0
  8045   013A4C  6E34               	movwf	(btemp+10)^0,c
  8046   013A4E  0E00               	movlw	0
  8047   013A50  6E35               	movwf	(btemp+11)^0,c
  8048                           
  8049                           ;stkvar	_txMsg @ sp[(-24)+0]
  8050   013A52  0EE8               	movlw	-24
  8051   013A54  C032  FFE3         	movff	btemp+8,plusw1
  8052   013A58  0EE9               	movlw	-23
  8053   013A5A  C033  FFE3         	movff	btemp+9,plusw1
  8054   013A5E  0EEA               	movlw	-22
  8055   013A60  C034  FFE3         	movff	btemp+10,plusw1
  8056   013A64  0EEB               	movlw	-21
  8057   013A66  C035  FFE3         	movff	btemp+11,plusw1
  8058   013A6A                     
  8059                           ;carFunctions.c: 80:              txMsg.bF.ctrl.DLC = CAN_DLC_2;
  8060                           ;stkvar	_txMsg @ sp[(-24)+0]
  8061   013A6A  0EEE               	movlw	238
  8062   013A6C  24E1               	addwf	fsr1l,w,c
  8063   013A6E  6ED9               	movwf	fsr2l,c
  8064   013A70  0EFF               	movlw	255
  8065   013A72  20E2               	addwfc	fsr1h,w,c
  8066   013A74  6EDA               	movwf	fsr2h,c
  8067   013A76  50DF               	movf	223,w,c
  8068   013A78  0BF0               	andlw	-16
  8069   013A7A  0902               	iorlw	2
  8070   013A7C  6EDF               	movwf	223,c
  8071   013A7E                     
  8072                           ;carFunctions.c: 81:              txdata[0] = percent;
  8073                           ;stkvar	_percent @ sp[(-24)+-1]
  8074                           ;stkvar	_txdata @ sp[(-24)+16]
  8075   013A7E  0EE7               	movlw	-25
  8076   013A80  CFE3 F02A          	movff	plusw1,btemp
  8077   013A84  0EF8               	movlw	-8
  8078   013A86  C02A  FFE3         	movff	btemp,plusw1
  8079   013A8A                     
  8080                           ;carFunctions.c: 82:              txdata[1] = starter;
  8081                           ;stkvar	_starter @ sp[(-24)+-2]
  8082                           ;stkvar	_txdata @ sp[(-24)+16]
  8083   013A8A  0EF9               	movlw	249
  8084   013A8C  24E1               	addwf	fsr1l,w,c
  8085   013A8E  6ED9               	movwf	fsr2l,c
  8086   013A90  0EFF               	movlw	255
  8087   013A92  20E2               	addwfc	fsr1h,w,c
  8088   013A94  6EDA               	movwf	fsr2h,c
  8089   013A96  0EE6               	movlw	-26
  8090   013A98  CFE3 FFDF          	movff	plusw1,indf2
  8091   013A9C                     
  8092                           ;carFunctions.c: 83:          CanSend(&txMsg,txdata);
  8093                           ;stkvar	_txdata @ sp[(-24)+16]
  8094   013A9C  0EF8               	movlw	248
  8095   013A9E  24E1               	addwf	fsr1l,w,c
  8096   013AA0  6E2A               	movwf	btemp^0,c
  8097   013AA2  0EFF               	movlw	255
  8098   013AA4  20E2               	addwfc	fsr1h,w,c
  8099   013AA6  6E2B               	movwf	(btemp+1)^0,c
  8100   013AA8  C02A  FFE6         	movff	btemp,postinc1
  8101   013AAC  C02B  FFE6         	movff	btemp+1,postinc1
  8102                           
  8103                           ;stkvar	_txMsg @ sp[(-26)+0]
  8104   013AB0  0EE6               	movlw	230
  8105   013AB2  24E1               	addwf	fsr1l,w,c
  8106   013AB4  6E2A               	movwf	btemp^0,c
  8107   013AB6  0EFF               	movlw	255
  8108   013AB8  20E2               	addwfc	fsr1h,w,c
  8109   013ABA  6E2B               	movwf	(btemp+1)^0,c
  8110   013ABC  C02A  FFE6         	movff	btemp,postinc1
  8111   013AC0  C02B  FFE6         	movff	btemp+1,postinc1
  8112   013AC4  EC27  F0A1         	call	_CanSend	;wreg free
  8113   013AC8                     l1452:
  8114                           
  8115                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2,
      +                           argsize = 2, vargsize = 0
  8116   013AC8  0EE6               	movlw	230
  8117   013ACA  26E1               	addwf	fsr1l,f,c
  8118   013ACC  0EFF               	movlw	255
  8119   013ACE  22E2               	addwfc	fsr1h,f,c
  8120   013AD0  0012               	return		;funcret
  8121   013AD2                     __end_of_motorControl:
  8122                           	callstack 0
  8123                           
  8124 ;; *************** function _handleAccelerationCAN *****************
  8125 ;; Defined at:
  8126 ;;		line 24 in file "carFunctions.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8131 ;;  txdata          8  [STACK] unsigned char [8]
  8132 ;;  requestedPow    1  [STACK] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1  [STACK] void 
  8135 ;; Registers used:
  8136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;Total ram usage:        0 bytes
  8147 ;; Hardware stack levels used: 1
  8148 ;; Hardware stack levels required when called: 12
  8149 ;; This function calls:
  8150 ;;		_CanSend
  8151 ;; This function is called by:
  8152 ;;		_motorControl_Process
  8153 ;; This function uses a reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text22
  8157   012882                     __ptext22:
  8158                           	callstack 0
  8159   012882                     _handleAccelerationCAN:
  8160                           	callstack 0
  8161                           
  8162                           ; autosize = 29, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8163   012882  0E1D               	movlw	29
  8164   012884  26E1               	addwf	fsr1l,f,c
  8165   012886  0E00               	movlw	0
  8166   012888  22E2               	addwfc	fsr1h,f,c
  8167   01288A                     
  8168                           ;carFunctions.c: 25:     static uint8_t lastPower = 10;;carFunctions.c: 26:     uint8_t 
      +                          requestedPower = carState.accelPedal;
  8169                           ;stkvar	_requestedPower @ sp[(-29)+28]
  8170   01288A  0EFF               	movlw	-1
  8171   01288C  C00E  FFE3         	movff	_carState+13,plusw1
  8172   012890                     
  8173                           ;carFunctions.c: 28:     if (requestedPower > 10) {
  8174                           ;stkvar	_requestedPower @ sp[(-29)+28]
  8175   012890  0EFF               	movlw	-1
  8176   012892  CFE3 F02A          	movff	plusw1,btemp
  8177   012896  0E0A               	movlw	10
  8178   012898  642A               	cpfsgt	btemp^0,c
  8179   01289A  EF51  F094         	goto	u2431
  8180   01289E  EF53  F094         	goto	u2430
  8181   0128A2                     u2431:
  8182   0128A2  EF8B  F094         	goto	l4755
  8183   0128A6                     u2430:
  8184   0128A6                     
  8185                           ;carFunctions.c: 30:         lastPower = (((lastPower + 2)<(requestedPower))?(lastPower 
      +                          + 2):(requestedPower));
  8186                           ;stkvar	_requestedPower @ sp[(-29)+28]
  8187   0128A6  0EFF               	movlw	-1
  8188   0128A8  50E3               	movf	plusw1,w,c
  8189   0128AA  6E34               	movwf	(btemp+10)^0,c
  8190   0128AC  6A35               	clrf	(btemp+11)^0,c
  8191   0128AE  505F               	movf	handleAccelerationCAN@lastPower^0,w,c
  8192   0128B0  6E32               	movwf	(btemp+8)^0,c
  8193   0128B2  6A33               	clrf	(btemp+9)^0,c
  8194   0128B4  0E02               	movlw	2
  8195   0128B6  2632               	addwf	(btemp+8)^0,f,c
  8196   0128B8  0E00               	movlw	0
  8197   0128BA  2233               	addwfc	(btemp+9)^0,f,c
  8198   0128BC  5034               	movf	(btemp+10)^0,w,c
  8199   0128BE  5C32               	subwf	(btemp+8)^0,w,c
  8200   0128C0  5033               	movf	(btemp+9)^0,w,c
  8201   0128C2  0A80               	xorlw	128
  8202   0128C4  6E2A               	movwf	btemp^0,c
  8203   0128C6  5035               	movf	(btemp+11)^0,w,c
  8204   0128C8  0A80               	xorlw	128
  8205   0128CA  582A               	subwfb	btemp^0,w,c
  8206   0128CC  A0D8               	btfss	status,0,c
  8207   0128CE  EF6B  F094         	goto	u2441
  8208   0128D2  EF6D  F094         	goto	u2440
  8209   0128D6                     u2441:
  8210   0128D6  EF79  F094         	goto	l4751
  8211   0128DA                     u2440:
  8212   0128DA                     
  8213                           ;stkvar	_requestedPower @ sp[(-29)+28]
  8214   0128DA  0EFF               	movlw	-1
  8215   0128DC  50E3               	movf	plusw1,w,c
  8216   0128DE  6E34               	movwf	(btemp+10)^0,c
  8217   0128E0  6A35               	clrf	(btemp+11)^0,c
  8218                           
  8219                           ;stkvar	_handleAccelerationCAN$5708 @ sp[(-29)+2]
  8220   0128E2  0EE5               	movlw	-27
  8221   0128E4  C034  FFE3         	movff	btemp+10,plusw1
  8222   0128E8  0EE6               	movlw	-26
  8223   0128EA  C035  FFE3         	movff	btemp+11,plusw1
  8224   0128EE  EF86  F094         	goto	l4753
  8225   0128F2                     l4751:
  8226   0128F2  505F               	movf	handleAccelerationCAN@lastPower^0,w,c
  8227   0128F4  6E34               	movwf	(btemp+10)^0,c
  8228   0128F6  6A35               	clrf	(btemp+11)^0,c
  8229   0128F8  0E02               	movlw	2
  8230   0128FA  2634               	addwf	(btemp+10)^0,f,c
  8231   0128FC  0E00               	movlw	0
  8232   0128FE  2235               	addwfc	(btemp+11)^0,f,c
  8233                           
  8234                           ;stkvar	_handleAccelerationCAN$5708 @ sp[(-29)+2]
  8235   012900  0EE5               	movlw	-27
  8236   012902  C034  FFE3         	movff	btemp+10,plusw1
  8237   012906  0EE6               	movlw	-26
  8238   012908  C035  FFE3         	movff	btemp+11,plusw1
  8239   01290C                     l4753:
  8240                           
  8241                           ;stkvar	_handleAccelerationCAN$5708 @ sp[(-29)+2]
  8242   01290C  0EE5               	movlw	-27
  8243   01290E  CFE3 F05F          	movff	plusw1,handleAccelerationCAN@lastPower
  8244                           
  8245                           ;carFunctions.c: 31:     } else {
  8246   012912  EFBA  F094         	goto	l4763
  8247   012916                     l4755:
  8248                           
  8249                           ;carFunctions.c: 33:         lastPower = (((lastPower - 2)>(10))?(lastPower - 2):(10));
  8250   012916  0EFE               	movlw	254
  8251   012918  245F               	addwf	handleAccelerationCAN@lastPower^0,w,c
  8252   01291A  6E34               	movwf	(btemp+10)^0,c
  8253   01291C  6A35               	clrf	(btemp+11)^0,c
  8254   01291E  0EFF               	movlw	255
  8255   012920  2235               	addwfc	(btemp+11)^0,f,c
  8256   012922  BE35               	btfsc	(btemp+11)^0,7,c
  8257   012924  EF9F  F094         	goto	u2450
  8258   012928  5035               	movf	(btemp+11)^0,w,c
  8259   01292A  E107               	bnz	u2451
  8260   01292C  0E0B               	movlw	11
  8261   01292E  5C34               	subwf	(btemp+10)^0,w,c
  8262   012930  B0D8               	btfsc	status,0,c
  8263   012932  EF9D  F094         	goto	u2451
  8264   012936  EF9F  F094         	goto	u2450
  8265   01293A                     u2451:
  8266   01293A  EFAB  F094         	goto	l4759
  8267   01293E                     u2450:
  8268   01293E  0E0A               	movlw	10
  8269   012940  6E34               	movwf	(btemp+10)^0,c
  8270   012942  0E00               	movlw	0
  8271   012944  6E35               	movwf	(btemp+11)^0,c
  8272                           
  8273                           ;stkvar	_handleAccelerationCAN$5709 @ sp[(-29)+0]
  8274   012946  0EE3               	movlw	-29
  8275   012948  C034  FFE3         	movff	btemp+10,plusw1
  8276   01294C  0EE4               	movlw	-28
  8277   01294E  C035  FFE3         	movff	btemp+11,plusw1
  8278   012952  EFB7  F094         	goto	l4761
  8279   012956                     l4759:
  8280   012956  0EFE               	movlw	254
  8281   012958  245F               	addwf	handleAccelerationCAN@lastPower^0,w,c
  8282   01295A  6E34               	movwf	(btemp+10)^0,c
  8283   01295C  6A35               	clrf	(btemp+11)^0,c
  8284   01295E  0EFF               	movlw	255
  8285   012960  2235               	addwfc	(btemp+11)^0,f,c
  8286                           
  8287                           ;stkvar	_handleAccelerationCAN$5709 @ sp[(-29)+0]
  8288   012962  0EE3               	movlw	-29
  8289   012964  C034  FFE3         	movff	btemp+10,plusw1
  8290   012968  0EE4               	movlw	-28
  8291   01296A  C035  FFE3         	movff	btemp+11,plusw1
  8292   01296E                     l4761:
  8293                           
  8294                           ;stkvar	_handleAccelerationCAN$5709 @ sp[(-29)+0]
  8295   01296E  0EE3               	movlw	-29
  8296   012970  CFE3 F05F          	movff	plusw1,handleAccelerationCAN@lastPower
  8297   012974                     l4763:
  8298                           
  8299                           ;carFunctions.c: 37:     CAN_TX_MSGOBJ txMsg = {0};
  8300   012974  EE20  F090         	lfsr	2,handleAccelerationCAN@F6656
  8301                           
  8302                           ;stkvar	_txMsg @ sp[(-29)+4]
  8303   012978  0E10               	movlw	16
  8304   01297A  6E2A               	movwf	btemp^0,c
  8305   01297C  0EE7               	movlw	-25
  8306   01297E                     us246999:
  8307   01297E  CFDE FFE3          	movff	postinc2,plusw1
  8308   012982  28E8               	incf	wreg,w,c
  8309   012984  2E2A               	decfsz	btemp^0,f,c
  8310   012986  D7FB               	bra	us246999
  8311   012988                     
  8312                           ;carFunctions.c: 38:     uint8_t txdata[8];;carFunctions.c: 40:     txMsg.bF.id.ID = (0x
      +                          112);
  8313   012988  0E12               	movlw	18
  8314   01298A  6E32               	movwf	(btemp+8)^0,c
  8315   01298C  0E01               	movlw	1
  8316   01298E  6E33               	movwf	(btemp+9)^0,c
  8317   012990  0E00               	movlw	0
  8318   012992  6E34               	movwf	(btemp+10)^0,c
  8319   012994  0E00               	movlw	0
  8320   012996  6E35               	movwf	(btemp+11)^0,c
  8321                           
  8322                           ;stkvar	_txMsg @ sp[(-29)+4]
  8323   012998  0EE7               	movlw	-25
  8324   01299A  C032  FFE3         	movff	btemp+8,plusw1
  8325   01299E  0EE8               	movlw	-24
  8326   0129A0  C033  FFE3         	movff	btemp+9,plusw1
  8327   0129A4  0EE9               	movlw	-23
  8328   0129A6  C034  FFE3         	movff	btemp+10,plusw1
  8329   0129AA  0EEA               	movlw	-22
  8330   0129AC  C035  FFE3         	movff	btemp+11,plusw1
  8331   0129B0                     
  8332                           ;carFunctions.c: 41:     txMsg.bF.ctrl.DLC = CAN_DLC_2;
  8333                           ;stkvar	_txMsg @ sp[(-29)+4]
  8334   0129B0  0EED               	movlw	237
  8335   0129B2  24E1               	addwf	fsr1l,w,c
  8336   0129B4  6ED9               	movwf	fsr2l,c
  8337   0129B6  0EFF               	movlw	255
  8338   0129B8  20E2               	addwfc	fsr1h,w,c
  8339   0129BA  6EDA               	movwf	fsr2h,c
  8340   0129BC  50DF               	movf	223,w,c
  8341   0129BE  0BF0               	andlw	-16
  8342   0129C0  0902               	iorlw	2
  8343   0129C2  6EDF               	movwf	223,c
  8344   0129C4                     
  8345                           ;carFunctions.c: 42:     txdata[0] = lastPower;
  8346                           ;stkvar	_txdata @ sp[(-29)+20]
  8347   0129C4  0EF7               	movlw	-9
  8348   0129C6  C05F  FFE3         	movff	handleAccelerationCAN@lastPower,plusw1
  8349   0129CA                     
  8350                           ;carFunctions.c: 43:     txdata[1] = 1;
  8351                           ;stkvar	_txdata @ sp[(-29)+20]
  8352   0129CA  0EF8               	movlw	248
  8353   0129CC  24E1               	addwf	fsr1l,w,c
  8354   0129CE  6ED9               	movwf	fsr2l,c
  8355   0129D0  0EFF               	movlw	255
  8356   0129D2  20E2               	addwfc	fsr1h,w,c
  8357   0129D4  6EDA               	movwf	fsr2h,c
  8358   0129D6  0E01               	movlw	1
  8359   0129D8  6EDF               	movwf	indf2,c
  8360   0129DA                     
  8361                           ;carFunctions.c: 45:     CanSend(&txMsg, txdata);
  8362                           ;stkvar	_txdata @ sp[(-29)+20]
  8363   0129DA  0EF7               	movlw	247
  8364   0129DC  24E1               	addwf	fsr1l,w,c
  8365   0129DE  6E2A               	movwf	btemp^0,c
  8366   0129E0  0EFF               	movlw	255
  8367   0129E2  20E2               	addwfc	fsr1h,w,c
  8368   0129E4  6E2B               	movwf	(btemp+1)^0,c
  8369   0129E6  C02A  FFE6         	movff	btemp,postinc1
  8370   0129EA  C02B  FFE6         	movff	btemp+1,postinc1
  8371                           
  8372                           ;stkvar	_txMsg @ sp[(-31)+4]
  8373   0129EE  0EE5               	movlw	229
  8374   0129F0  24E1               	addwf	fsr1l,w,c
  8375   0129F2  6E2A               	movwf	btemp^0,c
  8376   0129F4  0EFF               	movlw	255
  8377   0129F6  20E2               	addwfc	fsr1h,w,c
  8378   0129F8  6E2B               	movwf	(btemp+1)^0,c
  8379   0129FA  C02A  FFE6         	movff	btemp,postinc1
  8380   0129FE  C02B  FFE6         	movff	btemp+1,postinc1
  8381   012A02  EC27  F0A1         	call	_CanSend	;wreg free
  8382   012A06                     
  8383                           ; _handleAccelerationCAN: autosize = 29, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
  8384   012A06  0EE3               	movlw	227
  8385   012A08  26E1               	addwf	fsr1l,f,c
  8386   012A0A  0EFF               	movlw	255
  8387   012A0C  22E2               	addwfc	fsr1h,f,c
  8388   012A0E  0012               	return		;funcret
  8389   012A10                     __end_of_handleAccelerationCAN:
  8390                           	callstack 0
  8391                           
  8392 ;; *************** function _lightContol_FrontLight *****************
  8393 ;; Defined at:
  8394 ;;		line 87 in file "carFunctions.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;  light           1  [STACK] unsigned char 
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8399 ;;  txdata          8  [STACK] unsigned char [8]
  8400 ;; Return value:  Size  Location     Type
  8401 ;;                  1  [STACK] void 
  8402 ;; Registers used:
  8403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8404 ;; Tracked objects:
  8405 ;;		On entry : 0/0
  8406 ;;		On exit  : 0/0
  8407 ;;		Unchanged: 0/0
  8408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;Total ram usage:        0 bytes
  8414 ;; Hardware stack levels used: 1
  8415 ;; Hardware stack levels required when called: 12
  8416 ;; This function calls:
  8417 ;;		_CanSend
  8418 ;; This function is called by:
  8419 ;;		_lightControl_Process
  8420 ;; This function uses a reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text23
  8424   0140F2                     __ptext23:
  8425                           	callstack 0
  8426   0140F2                     _lightContol_FrontLight:
  8427                           	callstack 0
  8428                           
  8429                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8430   0140F2  0E18               	movlw	24
  8431   0140F4  26E1               	addwf	fsr1l,f,c
  8432   0140F6  0E00               	movlw	0
  8433   0140F8  22E2               	addwfc	fsr1h,f,c
  8434   0140FA                     
  8435                           ;carFunctions.c: 87:  void lightContol_FrontLight(uint8_t light);carFunctions.c: 88:  {;
      +                          carFunctions.c: 90:     static uint8_t lastLight=0;;carFunctions.c: 91:     CAN_TX_MSGOB
      +                          J txMsg={0};
  8436   0140FA  EE20  F070         	lfsr	2,lightContol_FrontLight@F6682
  8437                           
  8438                           ;stkvar	_txMsg @ sp[(-24)+0]
  8439   0140FE  0E10               	movlw	16
  8440   014100  6E2A               	movwf	btemp^0,c
  8441   014102  0EE8               	movlw	-24
  8442   014104                     us250999:
  8443   014104  CFDE FFE3          	movff	postinc2,plusw1
  8444   014108  28E8               	incf	wreg,w,c
  8445   01410A  2E2A               	decfsz	btemp^0,f,c
  8446   01410C  D7FB               	bra	us250999
  8447   01410E                     
  8448                           ;carFunctions.c: 92:     uint8_t txdata[8];;carFunctions.c: 93:     if(lastLight!= light
      +                          ) {
  8449                           ;stkvar	_light @ sp[(-24)+-1]
  8450   01410E  0EE7               	movlw	-25
  8451   014110  50E3               	movf	plusw1,w,c
  8452   014112  1827               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  8453   014114  B4D8               	btfsc	status,2,c
  8454   014116  EF8F  F0A0         	goto	u2511
  8455   01411A  EF91  F0A0         	goto	u2510
  8456   01411E                     u2511:
  8457   01411E  EFCB  F0A0         	goto	l1460
  8458   014122                     u2510:
  8459   014122                     
  8460                           ;carFunctions.c: 94:         lastLight = light;
  8461                           ;stkvar	_light @ sp[(-24)+-1]
  8462   014122  0EE7               	movlw	-25
  8463   014124  CFE3 F027          	movff	plusw1,lightContol_FrontLight@lastLight
  8464   014128                     
  8465                           ;carFunctions.c: 96:         txMsg.bF.id.ID = (0x19);
  8466   014128  0E19               	movlw	25
  8467   01412A  6E32               	movwf	(btemp+8)^0,c
  8468   01412C  6A33               	clrf	(btemp+9)^0,c
  8469   01412E  6A34               	clrf	(btemp+10)^0,c
  8470   014130  6A35               	clrf	(btemp+11)^0,c
  8471                           
  8472                           ;stkvar	_txMsg @ sp[(-24)+0]
  8473   014132  0EE8               	movlw	-24
  8474   014134  C032  FFE3         	movff	btemp+8,plusw1
  8475   014138  0EE9               	movlw	-23
  8476   01413A  C033  FFE3         	movff	btemp+9,plusw1
  8477   01413E  0EEA               	movlw	-22
  8478   014140  C034  FFE3         	movff	btemp+10,plusw1
  8479   014144  0EEB               	movlw	-21
  8480   014146  C035  FFE3         	movff	btemp+11,plusw1
  8481   01414A                     
  8482                           ;carFunctions.c: 97:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8483                           ;stkvar	_txMsg @ sp[(-24)+0]
  8484   01414A  0EEE               	movlw	238
  8485   01414C  24E1               	addwf	fsr1l,w,c
  8486   01414E  6ED9               	movwf	fsr2l,c
  8487   014150  0EFF               	movlw	255
  8488   014152  20E2               	addwfc	fsr1h,w,c
  8489   014154  6EDA               	movwf	fsr2h,c
  8490   014156  50DF               	movf	223,w,c
  8491   014158  0BF0               	andlw	-16
  8492   01415A  0901               	iorlw	1
  8493   01415C  6EDF               	movwf	223,c
  8494   01415E                     
  8495                           ;carFunctions.c: 98:         txdata[0] = light;
  8496                           ;stkvar	_light @ sp[(-24)+-1]
  8497                           ;stkvar	_txdata @ sp[(-24)+16]
  8498   01415E  0EE7               	movlw	-25
  8499   014160  CFE3 F02A          	movff	plusw1,btemp
  8500   014164  0EF8               	movlw	-8
  8501   014166  C02A  FFE3         	movff	btemp,plusw1
  8502   01416A                     
  8503                           ;carFunctions.c: 99:         CanSend(&txMsg,txdata);
  8504                           ;stkvar	_txdata @ sp[(-24)+16]
  8505   01416A  0EF8               	movlw	248
  8506   01416C  24E1               	addwf	fsr1l,w,c
  8507   01416E  6E2A               	movwf	btemp^0,c
  8508   014170  0EFF               	movlw	255
  8509   014172  20E2               	addwfc	fsr1h,w,c
  8510   014174  6E2B               	movwf	(btemp+1)^0,c
  8511   014176  C02A  FFE6         	movff	btemp,postinc1
  8512   01417A  C02B  FFE6         	movff	btemp+1,postinc1
  8513                           
  8514                           ;stkvar	_txMsg @ sp[(-26)+0]
  8515   01417E  0EE6               	movlw	230
  8516   014180  24E1               	addwf	fsr1l,w,c
  8517   014182  6E2A               	movwf	btemp^0,c
  8518   014184  0EFF               	movlw	255
  8519   014186  20E2               	addwfc	fsr1h,w,c
  8520   014188  6E2B               	movwf	(btemp+1)^0,c
  8521   01418A  C02A  FFE6         	movff	btemp,postinc1
  8522   01418E  C02B  FFE6         	movff	btemp+1,postinc1
  8523   014192  EC27  F0A1         	call	_CanSend	;wreg free
  8524   014196                     l1460:
  8525                           
  8526                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  8527   014196  0EE7               	movlw	231
  8528   014198  26E1               	addwf	fsr1l,f,c
  8529   01419A  0EFF               	movlw	255
  8530   01419C  22E2               	addwfc	fsr1h,f,c
  8531   01419E  0012               	return		;funcret
  8532   0141A0                     __end_of_lightContol_FrontLight:
  8533                           	callstack 0
  8534                           
  8535 ;; *************** function _lightContol_BackLight *****************
  8536 ;; Defined at:
  8537 ;;		line 102 in file "carFunctions.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  light           1  [STACK] unsigned char 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8542 ;;  txdata          8  [STACK] unsigned char [8]
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1  [STACK] void 
  8545 ;; Registers used:
  8546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;Total ram usage:        0 bytes
  8557 ;; Hardware stack levels used: 1
  8558 ;; Hardware stack levels required when called: 12
  8559 ;; This function calls:
  8560 ;;		_CanSend
  8561 ;; This function is called by:
  8562 ;;		_lightControl_Process
  8563 ;; This function uses a reentrant model
  8564 ;;
  8565                           
  8566                           	psect	text24
  8567   01403E                     __ptext24:
  8568                           	callstack 0
  8569   01403E                     _lightContol_BackLight:
  8570                           	callstack 0
  8571                           
  8572                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8573   01403E  0E18               	movlw	24
  8574   014040  26E1               	addwf	fsr1l,f,c
  8575   014042  0E00               	movlw	0
  8576   014044  22E2               	addwfc	fsr1h,f,c
  8577   014046                     
  8578                           ;carFunctions.c: 102:  void lightContol_BackLight(uint8_t light);carFunctions.c: 103:  {
      +                          ;carFunctions.c: 104:      static uint8_t lastLight=0;;carFunctions.c: 105:      CAN_TX_
      +                          MSGOBJ txMsg={0};
  8579   014046  EE20  F060         	lfsr	2,lightContol_BackLight@F6688
  8580                           
  8581                           ;stkvar	_txMsg @ sp[(-24)+0]
  8582   01404A  0E10               	movlw	16
  8583   01404C  6E2A               	movwf	btemp^0,c
  8584   01404E  0EE8               	movlw	-24
  8585   014050                     us252999:
  8586   014050  CFDE FFE3          	movff	postinc2,plusw1
  8587   014054  28E8               	incf	wreg,w,c
  8588   014056  2E2A               	decfsz	btemp^0,f,c
  8589   014058  D7FB               	bra	us252999
  8590   01405A                     
  8591                           ;carFunctions.c: 106:      uint8_t txdata[8];;carFunctions.c: 107:      if(lastLight!= l
      +                          ight) {
  8592                           ;stkvar	_light @ sp[(-24)+-1]
  8593   01405A  0EE7               	movlw	-25
  8594   01405C  50E3               	movf	plusw1,w,c
  8595   01405E  1826               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8596   014060  B4D8               	btfsc	status,2,c
  8597   014062  EF35  F0A0         	goto	u2531
  8598   014066  EF37  F0A0         	goto	u2530
  8599   01406A                     u2531:
  8600   01406A  EF74  F0A0         	goto	l1468
  8601   01406E                     u2530:
  8602   01406E                     
  8603                           ;carFunctions.c: 108:          lastLight = light;
  8604                           ;stkvar	_light @ sp[(-24)+-1]
  8605   01406E  0EE7               	movlw	-25
  8606   014070  CFE3 F026          	movff	plusw1,lightContol_BackLight@lastLight
  8607   014074                     
  8608                           ;carFunctions.c: 110:          txMsg.bF.id.ID = (0x119);
  8609   014074  0E19               	movlw	25
  8610   014076  6E32               	movwf	(btemp+8)^0,c
  8611   014078  0E01               	movlw	1
  8612   01407A  6E33               	movwf	(btemp+9)^0,c
  8613   01407C  0E00               	movlw	0
  8614   01407E  6E34               	movwf	(btemp+10)^0,c
  8615   014080  0E00               	movlw	0
  8616   014082  6E35               	movwf	(btemp+11)^0,c
  8617                           
  8618                           ;stkvar	_txMsg @ sp[(-24)+0]
  8619   014084  0EE8               	movlw	-24
  8620   014086  C032  FFE3         	movff	btemp+8,plusw1
  8621   01408A  0EE9               	movlw	-23
  8622   01408C  C033  FFE3         	movff	btemp+9,plusw1
  8623   014090  0EEA               	movlw	-22
  8624   014092  C034  FFE3         	movff	btemp+10,plusw1
  8625   014096  0EEB               	movlw	-21
  8626   014098  C035  FFE3         	movff	btemp+11,plusw1
  8627   01409C                     
  8628                           ;carFunctions.c: 111:          txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8629                           ;stkvar	_txMsg @ sp[(-24)+0]
  8630   01409C  0EEE               	movlw	238
  8631   01409E  24E1               	addwf	fsr1l,w,c
  8632   0140A0  6ED9               	movwf	fsr2l,c
  8633   0140A2  0EFF               	movlw	255
  8634   0140A4  20E2               	addwfc	fsr1h,w,c
  8635   0140A6  6EDA               	movwf	fsr2h,c
  8636   0140A8  50DF               	movf	223,w,c
  8637   0140AA  0BF0               	andlw	-16
  8638   0140AC  0901               	iorlw	1
  8639   0140AE  6EDF               	movwf	223,c
  8640   0140B0                     
  8641                           ;carFunctions.c: 112:          txdata[0] = light;
  8642                           ;stkvar	_light @ sp[(-24)+-1]
  8643                           ;stkvar	_txdata @ sp[(-24)+16]
  8644   0140B0  0EE7               	movlw	-25
  8645   0140B2  CFE3 F02A          	movff	plusw1,btemp
  8646   0140B6  0EF8               	movlw	-8
  8647   0140B8  C02A  FFE3         	movff	btemp,plusw1
  8648   0140BC                     
  8649                           ;carFunctions.c: 113:          CanSend(&txMsg,txdata);
  8650                           ;stkvar	_txdata @ sp[(-24)+16]
  8651   0140BC  0EF8               	movlw	248
  8652   0140BE  24E1               	addwf	fsr1l,w,c
  8653   0140C0  6E2A               	movwf	btemp^0,c
  8654   0140C2  0EFF               	movlw	255
  8655   0140C4  20E2               	addwfc	fsr1h,w,c
  8656   0140C6  6E2B               	movwf	(btemp+1)^0,c
  8657   0140C8  C02A  FFE6         	movff	btemp,postinc1
  8658   0140CC  C02B  FFE6         	movff	btemp+1,postinc1
  8659                           
  8660                           ;stkvar	_txMsg @ sp[(-26)+0]
  8661   0140D0  0EE6               	movlw	230
  8662   0140D2  24E1               	addwf	fsr1l,w,c
  8663   0140D4  6E2A               	movwf	btemp^0,c
  8664   0140D6  0EFF               	movlw	255
  8665   0140D8  20E2               	addwfc	fsr1h,w,c
  8666   0140DA  6E2B               	movwf	(btemp+1)^0,c
  8667   0140DC  C02A  FFE6         	movff	btemp,postinc1
  8668   0140E0  C02B  FFE6         	movff	btemp+1,postinc1
  8669   0140E4  EC27  F0A1         	call	_CanSend	;wreg free
  8670   0140E8                     l1468:
  8671                           
  8672                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8673   0140E8  0EE7               	movlw	231
  8674   0140EA  26E1               	addwf	fsr1l,f,c
  8675   0140EC  0EFF               	movlw	255
  8676   0140EE  22E2               	addwfc	fsr1h,f,c
  8677   0140F0  0012               	return		;funcret
  8678   0140F2                     __end_of_lightContol_BackLight:
  8679                           	callstack 0
  8680                           
  8681 ;; *************** function _CanSend *****************
  8682 ;; Defined at:
  8683 ;;		line 217 in file "can/can.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8686 ;;		 -> txMsg(16), 
  8687 ;;  txd             2  [STACK] PTR unsigned char 
  8688 ;;		 -> txdata(8), txdata(8), txdata(8), txdata(8), 
  8689 ;;		 -> txdata(8), 
  8690 ;; Auto vars:     Size  Location     Type
  8691 ;;  txFlags         1  [STACK] enum E5580
  8692 ;; Return value:  Size  Location     Type
  8693 ;;                  1  [STACK] char 
  8694 ;; Registers used:
  8695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8696 ;; Tracked objects:
  8697 ;;		On entry : 0/0
  8698 ;;		On exit  : 0/0
  8699 ;;		Unchanged: 0/0
  8700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;Total ram usage:        0 bytes
  8706 ;; Hardware stack levels used: 1
  8707 ;; Hardware stack levels required when called: 11
  8708 ;; This function calls:
  8709 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8710 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8711 ;; This function is called by:
  8712 ;;		_handleAccelerationCAN
  8713 ;;		_motorControl
  8714 ;;		_lightContol_FrontLight
  8715 ;;		_lightContol_BackLight
  8716 ;; This function uses a reentrant model
  8717 ;;
  8718                           
  8719                           	psect	text25
  8720   01424E                     __ptext25:
  8721                           	callstack 0
  8722   01424E                     _CanSend:
  8723                           	callstack 0
  8724                           
  8725                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8726   01424E  52E6               	movf	postinc1,f,c
  8727   014250                     
  8728                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8729                           ;stkvar	_txObj @ sp[(-1)+-2]
  8730   014250  0EFD               	movlw	-3
  8731   014252  CFE3 F034          	movff	plusw1,btemp+10
  8732   014256  0EFE               	movlw	-2
  8733   014258  CFE3 F035          	movff	plusw1,btemp+11
  8734   01425C  0E08               	movlw	8
  8735   01425E  2434               	addwf	(btemp+10)^0,w,c
  8736   014260  6ED9               	movwf	fsr2l,c
  8737   014262  0E00               	movlw	0
  8738   014264  2035               	addwfc	(btemp+11)^0,w,c
  8739   014266  6EDA               	movwf	fsr2h,c
  8740   014268  0E01               	movlw	1
  8741   01426A  6EDE               	movwf	postinc2,c
  8742   01426C  0E00               	movlw	0
  8743   01426E  6EDE               	movwf	postinc2,c
  8744   014270  0E00               	movlw	0
  8745   014272  6EDE               	movwf	postinc2,c
  8746   014274  0E00               	movlw	0
  8747   014276  6EDD               	movwf	postdec2,c
  8748   014278                     
  8749                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8750                           ;stkvar	_txFlags @ sp[(-1)+0]
  8751   014278  0EFF               	movlw	255
  8752   01427A  24E1               	addwf	fsr1l,w,c
  8753   01427C  6E2A               	movwf	btemp^0,c
  8754   01427E  0EFF               	movlw	255
  8755   014280  20E2               	addwfc	fsr1h,w,c
  8756   014282  6E2B               	movwf	(btemp+1)^0,c
  8757   014284  C02A  FFE6         	movff	btemp,postinc1
  8758   014288  C02B  FFE6         	movff	btemp+1,postinc1
  8759   01428C  0E01               	movlw	1
  8760   01428E  6EE6               	movwf	postinc1,c
  8761   014290  ECCE  F0A1         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8762   014294                     
  8763                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8764                           ;stkvar	_txFlags @ sp[(-1)+0]
  8765   014294  0EFF               	movlw	-1
  8766   014296  A0E3               	btfss	plusw1,0,c
  8767   014298  EF50  F0A1         	goto	u2111
  8768   01429C  EF52  F0A1         	goto	u2110
  8769   0142A0                     u2111:
  8770   0142A0  EF77  F0A1         	goto	l158
  8771   0142A4                     u2110:
  8772   0142A4                     
  8773                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8774   0142A4  0E01               	movlw	1
  8775   0142A6  6EE6               	movwf	postinc1,c
  8776                           
  8777                           ;stkvar	_txObj @ sp[(-2)+-2]
  8778   0142A8  0EFC               	movlw	-4
  8779   0142AA  CFE3 F034          	movff	plusw1,btemp+10
  8780   0142AE  0EFD               	movlw	-3
  8781   0142B0  CFE3 F035          	movff	plusw1,btemp+11
  8782   0142B4  0E06               	movlw	6
  8783   0142B6  2434               	addwf	(btemp+10)^0,w,c
  8784   0142B8  6ED9               	movwf	fsr2l,c
  8785   0142BA  0E00               	movlw	0
  8786   0142BC  2035               	addwfc	(btemp+11)^0,w,c
  8787   0142BE  6EDA               	movwf	fsr2h,c
  8788   0142C0  50DF               	movf	223,w,c
  8789   0142C2  0B0F               	andlw	15
  8790   0142C4  6E35               	movwf	(btemp+11)^0,c
  8791   0142C6  C035  FFE6         	movff	btemp+11,postinc1
  8792   0142CA  0E00               	movlw	0
  8793   0142CC  6EE6               	movwf	postinc1,c
  8794   0142CE  6EE6               	movwf	postinc1,c
  8795   0142D0  6EE6               	movwf	postinc1,c
  8796                           
  8797                           ;stkvar	_txd @ sp[(-6)+-4]
  8798   0142D2  0EF6               	movlw	-10
  8799   0142D4  CFE3 FFE6          	movff	plusw1,postinc1
  8800   0142D8  CFE3 FFE6          	movff	plusw1,postinc1
  8801                           
  8802                           ;stkvar	_txObj @ sp[(-8)+-2]
  8803   0142DC  0EF6               	movlw	-10
  8804   0142DE  CFE3 FFE6          	movff	plusw1,postinc1
  8805   0142E2  CFE3 FFE6          	movff	plusw1,postinc1
  8806   0142E6  0E01               	movlw	1
  8807   0142E8  6EE6               	movwf	postinc1,c
  8808   0142EA  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8809   0142EE                     l158:
  8810                           
  8811                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8812   0142EE  0EFB               	movlw	251
  8813   0142F0  26E1               	addwf	fsr1l,f,c
  8814   0142F2  0EFF               	movlw	255
  8815   0142F4  22E2               	addwfc	fsr1h,f,c
  8816   0142F6  0012               	return		;funcret
  8817   0142F8                     __end_of_CanSend:
  8818                           	callstack 0
  8819                           
  8820 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8821 ;; Defined at:
  8822 ;;		line 706 in file "can/can.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  channel         1  [STACK] enum E5287
  8825 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8826 ;;		 -> txMsg(16), 
  8827 ;;  txd             2  [STACK] PTR unsigned char 
  8828 ;;		 -> txdata(8), txdata(8), txdata(8), txdata(8), 
  8829 ;;		 -> txdata(8), 
  8830 ;;  txdNumBytes     4  [STACK] unsigned long 
  8831 ;;  flush           1  [STACK] _Bool 
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;  temp32          4  [STACK] unsigned long 
  8834 ;;  txBuffer       76  [STACK] unsigned char [76]
  8835 ;;  fifoReg        12  [STACK] unsigned long [3]
  8836 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8837 ;;  a               4  [STACK] unsigned long 
  8838 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8839 ;;  dataBytesInO    4  [STACK] unsigned long 
  8840 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8841 ;;  n               2  [STACK] unsigned short 
  8842 ;;  spiTransferE    1  [STACK] char 
  8843 ;;  i               1  [STACK] unsigned char 
  8844 ;;  j               1  [STACK] unsigned char 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1  [STACK] char 
  8847 ;; Registers used:
  8848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;Total ram usage:        0 bytes
  8859 ;; Hardware stack levels used: 1
  8860 ;; Hardware stack levels required when called: 10
  8861 ;; This function calls:
  8862 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8863 ;;		_DRV_CANFDSPI_ReadWordArray
  8864 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8865 ;;		_DRV_CANFDSPI_WriteByteArray
  8866 ;; This function is called by:
  8867 ;;		_CanSend
  8868 ;; This function uses a reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text26
  8872   010000                     __ptext26:
  8873                           	callstack 0
  8874   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8875                           	callstack 0
  8876                           
  8877                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8878   010000  0E72               	movlw	114
  8879   010002  26E1               	addwf	fsr1l,f,c
  8880   010004  0E00               	movlw	0
  8881   010006  22E2               	addwfc	fsr1h,f,c
  8882   010008                     
  8883                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8884                           ;stkvar	_channel @ sp[(-114)+-1]
  8885   010008  0E8D               	movlw	-115
  8886   01000A  50E3               	movf	plusw1,w,c
  8887   01000C  0D0C               	mullw	12
  8888   01000E  0E50               	movlw	80
  8889   010010  26F3               	addwf	243,f,c
  8890   010012  0E00               	movlw	0
  8891   010014  22F4               	addwfc	244,f,c
  8892                           
  8893                           ;stkvar	_a @ sp[(-114)+97]
  8894   010016  0EEF               	movlw	-17
  8895   010018  CFF3 FFE3          	movff	prodl,plusw1
  8896   01001C  0EF0               	movlw	-16
  8897   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8898   010022  0EF1               	movlw	-15
  8899   010024  6AE3               	clrf	plusw1,c
  8900   010026  0EF2               	movlw	-14
  8901   010028  6AE3               	clrf	plusw1,c
  8902   01002A                     
  8903                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8904   01002A  0E03               	movlw	3
  8905   01002C  6EE6               	movwf	postinc1,c
  8906   01002E  0E00               	movlw	0
  8907   010030  6EE6               	movwf	postinc1,c
  8908                           
  8909                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8910   010032  0EDC               	movlw	220
  8911   010034  24E1               	addwf	fsr1l,w,c
  8912   010036  6E2A               	movwf	btemp^0,c
  8913   010038  0EFF               	movlw	255
  8914   01003A  20E2               	addwfc	fsr1h,w,c
  8915   01003C  6E2B               	movwf	(btemp+1)^0,c
  8916   01003E  C02A  FFE6         	movff	btemp,postinc1
  8917   010042  C02B  FFE6         	movff	btemp+1,postinc1
  8918                           
  8919                           ;stkvar	_a @ sp[(-118)+97]
  8920   010046  0EEB               	movlw	-21
  8921   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8922   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8923   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8924                           
  8925                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8926   010054  0EFD               	movlw	-3
  8927   010056  C02A  FFE3         	movff	btemp,plusw1
  8928   01005A                     
  8929                           ;can/can.c: 722:     if (spiTransferError) {
  8930                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8931   01005A  0EFD               	movlw	-3
  8932   01005C  50E3               	movf	plusw1,w,c
  8933   01005E  B4D8               	btfsc	status,2,c
  8934   010060  EF34  F080         	goto	u1821
  8935   010064  EF36  F080         	goto	u1820
  8936   010068                     u1821:
  8937   010068  EF3A  F080         	goto	l4239
  8938   01006C                     u1820:
  8939   01006C                     
  8940                           ;can/can.c: 723:         return -1;
  8941   01006C  0EFF               	movlw	255
  8942   01006E  6E2A               	movwf	btemp^0,c
  8943   010070  EFA1  F083         	goto	l264
  8944   010074                     l4239:
  8945                           
  8946                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8947                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8948   010074  0EDE               	movlw	-34
  8949   010076  CFE3 F032          	movff	plusw1,btemp+8
  8950   01007A  0EDF               	movlw	-33
  8951   01007C  CFE3 F033          	movff	plusw1,btemp+9
  8952   010080  0EE0               	movlw	-32
  8953   010082  CFE3 F034          	movff	plusw1,btemp+10
  8954   010086  0EE1               	movlw	-31
  8955   010088  CFE3 F035          	movff	plusw1,btemp+11
  8956                           
  8957                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8958   01008C  0EEA               	movlw	-22
  8959   01008E  C032  FFE3         	movff	btemp+8,plusw1
  8960   010092  0EEB               	movlw	-21
  8961   010094  C033  FFE3         	movff	btemp+9,plusw1
  8962   010098  0EEC               	movlw	-20
  8963   01009A  C034  FFE3         	movff	btemp+10,plusw1
  8964   01009E  0EED               	movlw	-19
  8965   0100A0  C035  FFE3         	movff	btemp+11,plusw1
  8966   0100A4                     
  8967                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8968                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8969   0100A4  50E1               	movf	fsr1l,w,c
  8970   0100A6  0FEA               	addlw	-22
  8971   0100A8  6ED9               	movwf	fsr2l,c
  8972   0100AA  50E2               	movf	fsr1h,w,c
  8973   0100AC  6EDA               	movwf	fsr2h,c
  8974   0100AE  0EFF               	movlw	255
  8975   0100B0  22DA               	addwfc	fsr2h,f,c
  8976   0100B2  BEDF               	btfsc	indf2,7,c
  8977   0100B4  EF5E  F080         	goto	u1831
  8978   0100B8  EF60  F080         	goto	u1830
  8979   0100BC                     u1831:
  8980   0100BC  EF64  F080         	goto	l4247
  8981   0100C0                     u1830:
  8982   0100C0                     
  8983                           ;can/can.c: 729:         return -2;
  8984   0100C0  0EFE               	movlw	254
  8985   0100C2  6E2A               	movwf	btemp^0,c
  8986   0100C4  EFA1  F083         	goto	l264
  8987   0100C8                     l4247:
  8988                           
  8989                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8990                           ;stkvar	_txObj @ sp[(-114)+-3]
  8991   0100C8  0E8B               	movlw	-117
  8992   0100CA  CFE3 F034          	movff	plusw1,btemp+10
  8993   0100CE  0E8C               	movlw	-116
  8994   0100D0  CFE3 F035          	movff	plusw1,btemp+11
  8995   0100D4  0E06               	movlw	6
  8996   0100D6  2434               	addwf	(btemp+10)^0,w,c
  8997   0100D8  6ED9               	movwf	fsr2l,c
  8998   0100DA  0E00               	movlw	0
  8999   0100DC  2035               	addwfc	(btemp+11)^0,w,c
  9000   0100DE  6EDA               	movwf	fsr2h,c
  9001   0100E0  50DF               	movf	223,w,c
  9002   0100E2  0B0F               	andlw	15
  9003   0100E4  6EE6               	movwf	postinc1,c
  9004   0100E6  EC7E  F092         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  9005                           
  9006                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  9007   0100EA  0EF7               	movlw	-9
  9008   0100EC  C02A  FFE3         	movff	btemp,plusw1
  9009   0100F0  0EF8               	movlw	-8
  9010   0100F2  C02B  FFE3         	movff	btemp+1,plusw1
  9011   0100F6  0EF9               	movlw	-7
  9012   0100F8  C02C  FFE3         	movff	btemp+2,plusw1
  9013   0100FC  0EFA               	movlw	-6
  9014   0100FE  C02D  FFE3         	movff	btemp+3,plusw1
  9015   010102                     
  9016                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  9017                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9018                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  9019   010102  50E1               	movf	fsr1l,w,c
  9020   010104  0FF7               	addlw	-9
  9021   010106  6ED9               	movwf	fsr2l,c
  9022   010108  50E2               	movf	fsr1h,w,c
  9023   01010A  6EDA               	movwf	fsr2h,c
  9024   01010C  0EFF               	movlw	255
  9025   01010E  22DA               	addwfc	fsr2h,f,c
  9026   010110  0E85               	movlw	-123
  9027   010112  50E3               	movf	plusw1,w,c
  9028   010114  5CDE               	subwf	postinc2,w,c
  9029   010116  0E86               	movlw	-122
  9030   010118  50E3               	movf	plusw1,w,c
  9031   01011A  58DE               	subwfb	postinc2,w,c
  9032   01011C  0E87               	movlw	-121
  9033   01011E  50E3               	movf	plusw1,w,c
  9034   010120  58DE               	subwfb	postinc2,w,c
  9035   010122  0E88               	movlw	-120
  9036   010124  50E3               	movf	plusw1,w,c
  9037   010126  58DE               	subwfb	postinc2,w,c
  9038   010128  B0D8               	btfsc	status,0,c
  9039   01012A  EF99  F080         	goto	u1841
  9040   01012E  EF9B  F080         	goto	u1840
  9041   010132                     u1841:
  9042   010132  EF9F  F080         	goto	l4255
  9043   010136                     u1840:
  9044   010136                     
  9045                           ;can/can.c: 735:         return -3;
  9046   010136  0EFD               	movlw	253
  9047   010138  6E2A               	movwf	btemp^0,c
  9048   01013A  EFA1  F083         	goto	l264
  9049   01013E                     l4255:
  9050                           
  9051                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  9052                           ;stkvar	_fifoReg @ sp[(-114)+80]
  9053   01013E  0EE6               	movlw	230
  9054   010140  24E1               	addwf	fsr1l,w,c
  9055   010142  6ED9               	movwf	fsr2l,c
  9056   010144  0EFF               	movlw	255
  9057   010146  20E2               	addwfc	fsr1h,w,c
  9058   010148  6EDA               	movwf	fsr2h,c
  9059   01014A  CFDE F032          	movff	postinc2,btemp+8
  9060   01014E  CFDE F033          	movff	postinc2,btemp+9
  9061   010152  CFDE F034          	movff	postinc2,btemp+10
  9062   010156  CFDE F035          	movff	postinc2,btemp+11
  9063                           
  9064                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  9065   01015A  0EF3               	movlw	-13
  9066   01015C  C032  FFE3         	movff	btemp+8,plusw1
  9067   010160  0EF4               	movlw	-12
  9068   010162  C033  FFE3         	movff	btemp+9,plusw1
  9069   010166  0EF5               	movlw	-11
  9070   010168  C034  FFE3         	movff	btemp+10,plusw1
  9071   01016C  0EF6               	movlw	-10
  9072   01016E  C035  FFE3         	movff	btemp+11,plusw1
  9073   010172                     
  9074                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  9075                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  9076   010172  0EF3               	movlw	-13
  9077   010174  CFE3 F032          	movff	plusw1,btemp+8
  9078   010178  0EF4               	movlw	-12
  9079   01017A  CFE3 F033          	movff	plusw1,btemp+9
  9080   01017E  0EF5               	movlw	-11
  9081   010180  CFE3 F034          	movff	plusw1,btemp+10
  9082   010184  0EF6               	movlw	-10
  9083   010186  CFE3 F035          	movff	plusw1,btemp+11
  9084                           
  9085                           ;stkvar	_a @ sp[(-114)+97]
  9086   01018A  0EEF               	movlw	-17
  9087   01018C  C032  FFE3         	movff	btemp+8,plusw1
  9088   010190  0EF0               	movlw	-16
  9089   010192  C033  FFE3         	movff	btemp+9,plusw1
  9090   010196  0EF1               	movlw	-15
  9091   010198  C034  FFE3         	movff	btemp+10,plusw1
  9092   01019C  0EF2               	movlw	-14
  9093   01019E  C035  FFE3         	movff	btemp+11,plusw1
  9094   0101A2                     
  9095                           ;can/can.c: 748:     a += 0x400;
  9096                           ;stkvar	_a @ sp[(-114)+97]
  9097   0101A2  50E1               	movf	fsr1l,w,c
  9098   0101A4  0FEF               	addlw	-17
  9099   0101A6  6ED9               	movwf	fsr2l,c
  9100   0101A8  50E2               	movf	fsr1h,w,c
  9101   0101AA  6EDA               	movwf	fsr2h,c
  9102   0101AC  0EFF               	movlw	255
  9103   0101AE  22DA               	addwfc	fsr2h,f,c
  9104   0101B0  0E00               	movlw	0
  9105   0101B2  26DE               	addwf	postinc2,f,c
  9106   0101B4  0E04               	movlw	4
  9107   0101B6  22DE               	addwfc	postinc2,f,c
  9108   0101B8  0E00               	movlw	0
  9109   0101BA  22DE               	addwfc	postinc2,f,c
  9110   0101BC  0E00               	movlw	0
  9111   0101BE  22DE               	addwfc	postinc2,f,c
  9112   0101C0                     
  9113                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  9114                           ;stkvar	_txObj @ sp[(-114)+-3]
  9115   0101C0  0E8B               	movlw	-117
  9116   0101C2  CFE3 F034          	movff	plusw1,btemp+10
  9117   0101C6  0E8C               	movlw	-116
  9118   0101C8  CFE3 F035          	movff	plusw1,btemp+11
  9119   0101CC  0E06               	movlw	6
  9120   0101CE  2434               	addwf	(btemp+10)^0,w,c
  9121   0101D0  6ED9               	movwf	fsr2l,c
  9122   0101D2  0E00               	movlw	0
  9123   0101D4  2035               	addwfc	(btemp+11)^0,w,c
  9124   0101D6  6EDA               	movwf	fsr2h,c
  9125   0101D8  B8DF               	btfsc	indf2,4,c
  9126   0101DA  EFF1  F080         	goto	u1851
  9127   0101DE  EFF3  F080         	goto	u1850
  9128   0101E2                     u1851:
  9129   0101E2  EF75  F081         	goto	l4271
  9130   0101E6                     u1850:
  9131   0101E6                     
  9132                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  9133                           ;stkvar	_txObj @ sp[(-114)+-3]
  9134   0101E6  0E8B               	movlw	-117
  9135   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  9136   0101EC  0E8C               	movlw	-116
  9137   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  9138   0101F2  50DF               	movf	indf2,w,c
  9139   0101F4  6E35               	movwf	(btemp+11)^0,c
  9140                           
  9141                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9142   0101F6  0E92               	movlw	-110
  9143   0101F8  C035  FFE3         	movff	btemp+11,plusw1
  9144   0101FC                     
  9145                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  9146                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9147   0101FC  0E93               	movlw	147
  9148   0101FE  24E1               	addwf	fsr1l,w,c
  9149   010200  6ED9               	movwf	fsr2l,c
  9150   010202  0EFF               	movlw	255
  9151   010204  20E2               	addwfc	fsr1h,w,c
  9152   010206  6EDA               	movwf	fsr2h,c
  9153                           
  9154                           ;stkvar	_txObj @ sp[(-114)+-3]
  9155   010208  0E8B               	movlw	-117
  9156   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  9157   01020E  0E8C               	movlw	-116
  9158   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  9159   010214  CFEE F032          	movff	postinc0,btemp+8
  9160   010218  CFEE F033          	movff	postinc0,btemp+9
  9161   01021C  CFEE F034          	movff	postinc0,btemp+10
  9162   010220  CFEE F035          	movff	postinc0,btemp+11
  9163   010224  C033  F032         	movff	btemp+9,btemp+8
  9164   010228  C034  F033         	movff	btemp+10,btemp+9
  9165   01022C  C035  F034         	movff	btemp+11,btemp+10
  9166   010230  6A35               	clrf	(btemp+11)^0,c
  9167   010232  5032               	movf	(btemp+8)^0,w,c
  9168   010234  6EDF               	movwf	indf2,c
  9169   010236                     
  9170                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  9171                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9172   010236  0E94               	movlw	148
  9173   010238  24E1               	addwf	fsr1l,w,c
  9174   01023A  6ED9               	movwf	fsr2l,c
  9175   01023C  0EFF               	movlw	255
  9176   01023E  20E2               	addwfc	fsr1h,w,c
  9177   010240  6EDA               	movwf	fsr2h,c
  9178                           
  9179                           ;stkvar	_txObj @ sp[(-114)+-3]
  9180   010242  0E8B               	movlw	-117
  9181   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  9182   010248  0E8C               	movlw	-116
  9183   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  9184   01024E  CFEE F032          	movff	postinc0,btemp+8
  9185   010252  CFEE F033          	movff	postinc0,btemp+9
  9186   010256  CFEE F034          	movff	postinc0,btemp+10
  9187   01025A  CFEE F035          	movff	postinc0,btemp+11
  9188   01025E  0E11               	movlw	17
  9189   010260  EF37  F081         	goto	u1860
  9190   010264                     u1865:
  9191   010264  90D8               	bcf	status,0,c
  9192   010266  3235               	rrcf	(btemp+11)^0,f,c
  9193   010268  3234               	rrcf	(btemp+10)^0,f,c
  9194   01026A  3233               	rrcf	(btemp+9)^0,f,c
  9195   01026C  3232               	rrcf	(btemp+8)^0,f,c
  9196   01026E                     u1860:
  9197   01026E  2EE8               	decfsz	wreg,f,c
  9198   010270  EF32  F081         	goto	u1865
  9199   010274  5032               	movf	(btemp+8)^0,w,c
  9200   010276  6EDF               	movwf	indf2,c
  9201   010278                     
  9202                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  9203                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9204   010278  0E95               	movlw	149
  9205   01027A  24E1               	addwf	fsr1l,w,c
  9206   01027C  6ED9               	movwf	fsr2l,c
  9207   01027E  0EFF               	movlw	255
  9208   010280  20E2               	addwfc	fsr1h,w,c
  9209   010282  6EDA               	movwf	fsr2h,c
  9210                           
  9211                           ;stkvar	_txObj @ sp[(-114)+-3]
  9212   010284  0E8B               	movlw	-117
  9213   010286  CFE3 F034          	movff	plusw1,btemp+10
  9214   01028A  0E8C               	movlw	-116
  9215   01028C  CFE3 F035          	movff	plusw1,btemp+11
  9216   010290  0E04               	movlw	4
  9217   010292  2434               	addwf	(btemp+10)^0,w,c
  9218   010294  6EE9               	movwf	fsr0l,c
  9219   010296  0E00               	movlw	0
  9220   010298  2035               	addwfc	(btemp+11)^0,w,c
  9221   01029A  6EEA               	movwf	fsr0h,c
  9222   01029C  50EF               	movf	indf0,w,c
  9223   01029E  6E35               	movwf	(btemp+11)^0,c
  9224   0102A0  0E05               	movlw	5
  9225   0102A2  6E2A               	movwf	btemp^0,c
  9226   0102A4                     u1875:
  9227   0102A4  90D8               	bcf	status,0,c
  9228   0102A6  3635               	rlcf	(btemp+11)^0,f,c
  9229   0102A8  2E2A               	decfsz	btemp^0,f,c
  9230   0102AA  EF52  F081         	goto	u1875
  9231                           
  9232                           ;stkvar	_txObj @ sp[(-114)+-3]
  9233   0102AE  0E8B               	movlw	-117
  9234   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  9235   0102B4  0E8C               	movlw	-116
  9236   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  9237   0102BA  CFEE F02E          	movff	postinc0,btemp+4
  9238   0102BE  CFEE F02F          	movff	postinc0,btemp+5
  9239   0102C2  CFEE F030          	movff	postinc0,btemp+6
  9240   0102C6  CFEE F031          	movff	postinc0,btemp+7
  9241   0102CA  0E19               	movlw	25
  9242   0102CC  EF6D  F081         	goto	u1880
  9243   0102D0                     u1885:
  9244   0102D0  90D8               	bcf	status,0,c
  9245   0102D2  3231               	rrcf	(btemp+7)^0,f,c
  9246   0102D4  3230               	rrcf	(btemp+6)^0,f,c
  9247   0102D6  322F               	rrcf	(btemp+5)^0,f,c
  9248   0102D8  322E               	rrcf	(btemp+4)^0,f,c
  9249   0102DA                     u1880:
  9250   0102DA  2EE8               	decfsz	wreg,f,c
  9251   0102DC  EF68  F081         	goto	u1885
  9252   0102E0  502E               	movf	(btemp+4)^0,w,c
  9253   0102E2  1035               	iorwf	(btemp+11)^0,w,c
  9254   0102E4  6EDF               	movwf	indf2,c
  9255                           
  9256                           ;can/can.c: 770:     }
  9257   0102E6  EF24  F082         	goto	l4283
  9258   0102EA                     l4271:
  9259                           
  9260                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  9261                           ;stkvar	_txObj @ sp[(-114)+-3]
  9262   0102EA  0E8B               	movlw	-117
  9263   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  9264   0102F0  0E8C               	movlw	-116
  9265   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  9266   0102F6  CFDE F032          	movff	postinc2,btemp+8
  9267   0102FA  CFDE F033          	movff	postinc2,btemp+9
  9268   0102FE  CFDE F034          	movff	postinc2,btemp+10
  9269   010302  CFDE F035          	movff	postinc2,btemp+11
  9270   010306  0E13               	movlw	19
  9271   010308  EF8B  F081         	goto	u1890
  9272   01030C                     u1895:
  9273   01030C  90D8               	bcf	status,0,c
  9274   01030E  3235               	rrcf	(btemp+11)^0,f,c
  9275   010310  3234               	rrcf	(btemp+10)^0,f,c
  9276   010312  3233               	rrcf	(btemp+9)^0,f,c
  9277   010314  3232               	rrcf	(btemp+8)^0,f,c
  9278   010316                     u1890:
  9279   010316  2EE8               	decfsz	wreg,f,c
  9280   010318  EF86  F081         	goto	u1895
  9281   01031C  0EFF               	movlw	255
  9282   01031E  1432               	andwf	(btemp+8)^0,w,c
  9283   010320  6E2E               	movwf	(btemp+4)^0,c
  9284   010322  0E07               	movlw	7
  9285   010324  1433               	andwf	(btemp+9)^0,w,c
  9286   010326  6E2F               	movwf	(btemp+5)^0,c
  9287   010328  0E00               	movlw	0
  9288   01032A  1434               	andwf	(btemp+10)^0,w,c
  9289   01032C  6E30               	movwf	(btemp+6)^0,c
  9290   01032E  0E00               	movlw	0
  9291   010330  1435               	andwf	(btemp+11)^0,w,c
  9292   010332  6E31               	movwf	(btemp+7)^0,c
  9293                           
  9294                           ;stkvar	_txObj @ sp[(-114)+-3]
  9295   010334  0E8B               	movlw	-117
  9296   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  9297   01033A  0E8C               	movlw	-116
  9298   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  9299   010340  0EFF               	movlw	255
  9300   010342  14DE               	andwf	postinc2,w,c
  9301   010344  6E32               	movwf	(btemp+8)^0,c
  9302   010346  0EFF               	movlw	255
  9303   010348  14DE               	andwf	postinc2,w,c
  9304   01034A  6E33               	movwf	(btemp+9)^0,c
  9305   01034C  0E03               	movlw	3
  9306   01034E  14DE               	andwf	postinc2,w,c
  9307   010350  6E34               	movwf	(btemp+10)^0,c
  9308   010352  0E00               	movlw	0
  9309   010354  14DE               	andwf	postinc2,w,c
  9310   010356  6E35               	movwf	(btemp+11)^0,c
  9311   010358  0E0B               	movlw	11
  9312   01035A                     u1905:
  9313   01035A  90D8               	bcf	status,0,c
  9314   01035C  3632               	rlcf	(btemp+8)^0,f,c
  9315   01035E  3633               	rlcf	(btemp+9)^0,f,c
  9316   010360  3634               	rlcf	(btemp+10)^0,f,c
  9317   010362  3635               	rlcf	(btemp+11)^0,f,c
  9318   010364  2EE8               	decfsz	wreg,f,c
  9319   010366  EFAD  F081         	goto	u1905
  9320   01036A  502E               	movf	(btemp+4)^0,w,c
  9321   01036C  1032               	iorwf	(btemp+8)^0,w,c
  9322   01036E  6E2A               	movwf	btemp^0,c
  9323   010370  502F               	movf	(btemp+5)^0,w,c
  9324   010372  1033               	iorwf	(btemp+9)^0,w,c
  9325   010374  6E2B               	movwf	(btemp+1)^0,c
  9326   010376  5030               	movf	(btemp+6)^0,w,c
  9327   010378  1034               	iorwf	(btemp+10)^0,w,c
  9328   01037A  6E2C               	movwf	(btemp+2)^0,c
  9329   01037C  5031               	movf	(btemp+7)^0,w,c
  9330   01037E  1035               	iorwf	(btemp+11)^0,w,c
  9331   010380  6E2D               	movwf	(btemp+3)^0,c
  9332                           
  9333                           ;stkvar	_temp32 @ sp[(-114)+0]
  9334   010382  0E8E               	movlw	-114
  9335   010384  C02A  FFE3         	movff	btemp,plusw1
  9336   010388  0E8F               	movlw	-113
  9337   01038A  C02B  FFE3         	movff	btemp+1,plusw1
  9338   01038E  0E90               	movlw	-112
  9339   010390  C02C  FFE3         	movff	btemp+2,plusw1
  9340   010394  0E91               	movlw	-111
  9341   010396  C02D  FFE3         	movff	btemp+3,plusw1
  9342   01039A                     
  9343                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  9344                           ;stkvar	_temp32 @ sp[(-114)+0]
  9345   01039A  50E1               	movf	fsr1l,w,c
  9346   01039C  0F8E               	addlw	-114
  9347   01039E  6ED9               	movwf	fsr2l,c
  9348   0103A0  50E2               	movf	fsr1h,w,c
  9349   0103A2  6EDA               	movwf	fsr2h,c
  9350   0103A4  0EFF               	movlw	255
  9351   0103A6  22DA               	addwfc	fsr2h,f,c
  9352   0103A8  0EFF               	movlw	255
  9353   0103AA  16DE               	andwf	postinc2,f,c
  9354   0103AC  0EFF               	movlw	255
  9355   0103AE  16DE               	andwf	postinc2,f,c
  9356   0103B0  0EFF               	movlw	255
  9357   0103B2  16DE               	andwf	postinc2,f,c
  9358   0103B4  0E1F               	movlw	31
  9359   0103B6  16DE               	andwf	postinc2,f,c
  9360   0103B8                     
  9361                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  9362                           ;stkvar	_temp32 @ sp[(-114)+0]
  9363                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9364   0103B8  0E8E               	movlw	-114
  9365   0103BA  CFE3 F02A          	movff	plusw1,btemp
  9366   0103BE  0E92               	movlw	-110
  9367   0103C0  C02A  FFE3         	movff	btemp,plusw1
  9368   0103C4                     
  9369                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  9370                           ;stkvar	_temp32 @ sp[(-114)+0]
  9371   0103C4  0E8F               	movlw	143
  9372   0103C6  24E1               	addwf	fsr1l,w,c
  9373   0103C8  6ED9               	movwf	fsr2l,c
  9374   0103CA  0EFF               	movlw	255
  9375   0103CC  20E2               	addwfc	fsr1h,w,c
  9376   0103CE  6EDA               	movwf	fsr2h,c
  9377                           
  9378                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9379   0103D0  0E93               	movlw	147
  9380   0103D2  24E1               	addwf	fsr1l,w,c
  9381   0103D4  6EE9               	movwf	fsr0l,c
  9382   0103D6  0EFF               	movlw	255
  9383   0103D8  20E2               	addwfc	fsr1h,w,c
  9384   0103DA  6EEA               	movwf	fsr0h,c
  9385   0103DC  CFDF FFEF          	movff	indf2,indf0
  9386   0103E0                     
  9387                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  9388                           ;stkvar	_temp32 @ sp[(-114)+0]
  9389   0103E0  0E90               	movlw	144
  9390   0103E2  24E1               	addwf	fsr1l,w,c
  9391   0103E4  6ED9               	movwf	fsr2l,c
  9392   0103E6  0EFF               	movlw	255
  9393   0103E8  20E2               	addwfc	fsr1h,w,c
  9394   0103EA  6EDA               	movwf	fsr2h,c
  9395                           
  9396                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9397   0103EC  0E94               	movlw	148
  9398   0103EE  24E1               	addwf	fsr1l,w,c
  9399   0103F0  6EE9               	movwf	fsr0l,c
  9400   0103F2  0EFF               	movlw	255
  9401   0103F4  20E2               	addwfc	fsr1h,w,c
  9402   0103F6  6EEA               	movwf	fsr0h,c
  9403   0103F8  CFDF FFEF          	movff	indf2,indf0
  9404   0103FC                     
  9405                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  9406                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9407   0103FC  0E95               	movlw	149
  9408   0103FE  24E1               	addwf	fsr1l,w,c
  9409   010400  6ED9               	movwf	fsr2l,c
  9410   010402  0EFF               	movlw	255
  9411   010404  20E2               	addwfc	fsr1h,w,c
  9412   010406  6EDA               	movwf	fsr2h,c
  9413                           
  9414                           ;stkvar	_temp32 @ sp[(-114)+0]
  9415   010408  0E91               	movlw	145
  9416   01040A  24E1               	addwf	fsr1l,w,c
  9417   01040C  6EE9               	movwf	fsr0l,c
  9418   01040E  0EFF               	movlw	255
  9419   010410  20E2               	addwfc	fsr1h,w,c
  9420   010412  6EEA               	movwf	fsr0h,c
  9421   010414  50EF               	movf	indf0,w,c
  9422   010416  6E35               	movwf	(btemp+11)^0,c
  9423                           
  9424                           ;stkvar	_txObj @ sp[(-114)+-3]
  9425   010418  0E8B               	movlw	-117
  9426   01041A  CFE3 F032          	movff	plusw1,btemp+8
  9427   01041E  0E8C               	movlw	-116
  9428   010420  CFE3 F033          	movff	plusw1,btemp+9
  9429   010424  0E04               	movlw	4
  9430   010426  2432               	addwf	(btemp+8)^0,w,c
  9431   010428  6EE9               	movwf	fsr0l,c
  9432   01042A  0E00               	movlw	0
  9433   01042C  2033               	addwfc	(btemp+9)^0,w,c
  9434   01042E  6EEA               	movwf	fsr0h,c
  9435   010430  50EF               	movf	indf0,w,c
  9436   010432  6E34               	movwf	(btemp+10)^0,c
  9437   010434  0E05               	movlw	5
  9438   010436  6E2A               	movwf	btemp^0,c
  9439   010438                     u1915:
  9440   010438  90D8               	bcf	status,0,c
  9441   01043A  3634               	rlcf	(btemp+10)^0,f,c
  9442   01043C  2E2A               	decfsz	btemp^0,f,c
  9443   01043E  EF1C  F082         	goto	u1915
  9444   010442  5034               	movf	(btemp+10)^0,w,c
  9445   010444  1035               	iorwf	(btemp+11)^0,w,c
  9446   010446  6EDF               	movwf	indf2,c
  9447   010448                     l4283:
  9448                           
  9449                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  9450                           ;stkvar	_txObj @ sp[(-114)+-3]
  9451   010448  0E8B               	movlw	-117
  9452   01044A  CFE3 F034          	movff	plusw1,btemp+10
  9453   01044E  0E8C               	movlw	-116
  9454   010450  CFE3 F035          	movff	plusw1,btemp+11
  9455   010454  0E06               	movlw	6
  9456   010456  2434               	addwf	(btemp+10)^0,w,c
  9457   010458  6ED9               	movwf	fsr2l,c
  9458   01045A  0E00               	movlw	0
  9459   01045C  2035               	addwfc	(btemp+11)^0,w,c
  9460   01045E  6EDA               	movwf	fsr2h,c
  9461                           
  9462                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9463   010460  0E96               	movlw	150
  9464   010462  24E1               	addwf	fsr1l,w,c
  9465   010464  6EE9               	movwf	fsr0l,c
  9466   010466  0EFF               	movlw	255
  9467   010468  20E2               	addwfc	fsr1h,w,c
  9468   01046A  6EEA               	movwf	fsr0h,c
  9469   01046C  CFDF FFEF          	movff	indf2,indf0
  9470   010470                     
  9471                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  9472                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9473   010470  0E97               	movlw	151
  9474   010472  24E1               	addwf	fsr1l,w,c
  9475   010474  6ED9               	movwf	fsr2l,c
  9476   010476  0EFF               	movlw	255
  9477   010478  20E2               	addwfc	fsr1h,w,c
  9478   01047A  6EDA               	movwf	fsr2h,c
  9479                           
  9480                           ;stkvar	_txObj @ sp[(-114)+-3]
  9481   01047C  0E8B               	movlw	-117
  9482   01047E  CFE3 F034          	movff	plusw1,btemp+10
  9483   010482  0E8C               	movlw	-116
  9484   010484  CFE3 F035          	movff	plusw1,btemp+11
  9485   010488  0E07               	movlw	7
  9486   01048A  2434               	addwf	(btemp+10)^0,w,c
  9487   01048C  6EE9               	movwf	fsr0l,c
  9488   01048E  0E00               	movlw	0
  9489   010490  2035               	addwfc	(btemp+11)^0,w,c
  9490   010492  6EEA               	movwf	fsr0h,c
  9491   010494  50EF               	movf	indf0,w,c
  9492   010496  6E35               	movwf	(btemp+11)^0,c
  9493                           
  9494                           ;stkvar	_txObj @ sp[(-114)+-3]
  9495   010498  0E8B               	movlw	-117
  9496   01049A  CFE3 F032          	movff	plusw1,btemp+8
  9497   01049E  0E8C               	movlw	-116
  9498   0104A0  CFE3 F033          	movff	plusw1,btemp+9
  9499   0104A4  0E08               	movlw	8
  9500   0104A6  2432               	addwf	(btemp+8)^0,w,c
  9501   0104A8  6EE9               	movwf	fsr0l,c
  9502   0104AA  0E00               	movlw	0
  9503   0104AC  2033               	addwfc	(btemp+9)^0,w,c
  9504   0104AE  6EEA               	movwf	fsr0h,c
  9505   0104B0  50EF               	movf	indf0,w,c
  9506   0104B2  6E34               	movwf	(btemp+10)^0,c
  9507   0104B4  90D8               	bcf	status,0,c
  9508   0104B6  3434               	rlcf	(btemp+10)^0,w,c
  9509   0104B8  1035               	iorwf	(btemp+11)^0,w,c
  9510   0104BA  6EDF               	movwf	indf2,c
  9511   0104BC                     
  9512                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  9513                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9514   0104BC  0E98               	movlw	152
  9515   0104BE  24E1               	addwf	fsr1l,w,c
  9516   0104C0  6ED9               	movwf	fsr2l,c
  9517   0104C2  0EFF               	movlw	255
  9518   0104C4  20E2               	addwfc	fsr1h,w,c
  9519   0104C6  6EDA               	movwf	fsr2h,c
  9520                           
  9521                           ;stkvar	_txObj @ sp[(-114)+-3]
  9522   0104C8  0E8B               	movlw	-117
  9523   0104CA  CFE3 F034          	movff	plusw1,btemp+10
  9524   0104CE  0E8C               	movlw	-116
  9525   0104D0  CFE3 F035          	movff	plusw1,btemp+11
  9526   0104D4  0E08               	movlw	8
  9527   0104D6  2434               	addwf	(btemp+10)^0,w,c
  9528   0104D8  6EE9               	movwf	fsr0l,c
  9529   0104DA  0E00               	movlw	0
  9530   0104DC  2035               	addwfc	(btemp+11)^0,w,c
  9531   0104DE  6EEA               	movwf	fsr0h,c
  9532   0104E0  CFEE F032          	movff	postinc0,btemp+8
  9533   0104E4  CFEE F033          	movff	postinc0,btemp+9
  9534   0104E8  CFEE F034          	movff	postinc0,btemp+10
  9535   0104EC  CFEE F035          	movff	postinc0,btemp+11
  9536   0104F0  0E08               	movlw	8
  9537   0104F2  EF80  F082         	goto	u1920
  9538   0104F6                     u1925:
  9539   0104F6  90D8               	bcf	status,0,c
  9540   0104F8  3235               	rrcf	(btemp+11)^0,f,c
  9541   0104FA  3234               	rrcf	(btemp+10)^0,f,c
  9542   0104FC  3233               	rrcf	(btemp+9)^0,f,c
  9543   0104FE  3232               	rrcf	(btemp+8)^0,f,c
  9544   010500                     u1920:
  9545   010500  2EE8               	decfsz	wreg,f,c
  9546   010502  EF7B  F082         	goto	u1925
  9547   010506  5032               	movf	(btemp+8)^0,w,c
  9548   010508  6EDF               	movwf	indf2,c
  9549   01050A                     
  9550                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  9551                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9552   01050A  0E99               	movlw	153
  9553   01050C  24E1               	addwf	fsr1l,w,c
  9554   01050E  6ED9               	movwf	fsr2l,c
  9555   010510  0EFF               	movlw	255
  9556   010512  20E2               	addwfc	fsr1h,w,c
  9557   010514  6EDA               	movwf	fsr2h,c
  9558                           
  9559                           ;stkvar	_txObj @ sp[(-114)+-3]
  9560   010516  0E8B               	movlw	-117
  9561   010518  CFE3 F034          	movff	plusw1,btemp+10
  9562   01051C  0E8C               	movlw	-116
  9563   01051E  CFE3 F035          	movff	plusw1,btemp+11
  9564   010522  0E08               	movlw	8
  9565   010524  2434               	addwf	(btemp+10)^0,w,c
  9566   010526  6EE9               	movwf	fsr0l,c
  9567   010528  0E00               	movlw	0
  9568   01052A  2035               	addwfc	(btemp+11)^0,w,c
  9569   01052C  6EEA               	movwf	fsr0h,c
  9570   01052E  CFEE F032          	movff	postinc0,btemp+8
  9571   010532  CFEE F033          	movff	postinc0,btemp+9
  9572   010536  CFEE F034          	movff	postinc0,btemp+10
  9573   01053A  CFEE F035          	movff	postinc0,btemp+11
  9574   01053E  0E10               	movlw	16
  9575   010540  EFA7  F082         	goto	u1930
  9576   010544                     u1935:
  9577   010544  90D8               	bcf	status,0,c
  9578   010546  3235               	rrcf	(btemp+11)^0,f,c
  9579   010548  3234               	rrcf	(btemp+10)^0,f,c
  9580   01054A  3233               	rrcf	(btemp+9)^0,f,c
  9581   01054C  3232               	rrcf	(btemp+8)^0,f,c
  9582   01054E                     u1930:
  9583   01054E  2EE8               	decfsz	wreg,f,c
  9584   010550  EFA2  F082         	goto	u1935
  9585   010554  5032               	movf	(btemp+8)^0,w,c
  9586   010556  6EDF               	movwf	indf2,c
  9587   010558                     
  9588                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9589                           ;stkvar	_i @ sp[(-114)+112]
  9590   010558  0EFE               	movlw	-2
  9591   01055A  6AE3               	clrf	plusw1,c
  9592   01055C  EFD7  F082         	goto	l4297
  9593   010560                     l4293:
  9594                           
  9595                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9596                           ;stkvar	_i @ sp[(-114)+112]
  9597   010560  0EFE               	movlw	-2
  9598   010562  CFE3 F035          	movff	plusw1,btemp+11
  9599                           
  9600                           ;stkvar	_txd @ sp[(-114)+-5]
  9601   010566  0E89               	movlw	-119
  9602   010568  CFE3 F032          	movff	plusw1,btemp+8
  9603   01056C  0E8A               	movlw	-118
  9604   01056E  CFE3 F033          	movff	plusw1,btemp+9
  9605   010572  5035               	movf	(btemp+11)^0,w,c
  9606   010574  2432               	addwf	(btemp+8)^0,w,c
  9607   010576  6ED9               	movwf	fsr2l,c
  9608   010578  0E00               	movlw	0
  9609   01057A  2033               	addwfc	(btemp+9)^0,w,c
  9610   01057C  6EDA               	movwf	fsr2h,c
  9611                           
  9612                           ;stkvar	_i @ sp[(-114)+112]
  9613   01057E  0EFE               	movlw	-2
  9614   010580  50E3               	movf	plusw1,w,c
  9615   010582  6E34               	movwf	(btemp+10)^0,c
  9616   010584  6A35               	clrf	(btemp+11)^0,c
  9617   010586  0E08               	movlw	8
  9618   010588  2634               	addwf	(btemp+10)^0,f,c
  9619   01058A  0E00               	movlw	0
  9620   01058C  2235               	addwfc	(btemp+11)^0,f,c
  9621                           
  9622                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9623   01058E  0E92               	movlw	146
  9624   010590  24E1               	addwf	fsr1l,w,c
  9625   010592  6E32               	movwf	(btemp+8)^0,c
  9626   010594  0EFF               	movlw	255
  9627   010596  20E2               	addwfc	fsr1h,w,c
  9628   010598  6E33               	movwf	(btemp+9)^0,c
  9629   01059A  5034               	movf	(btemp+10)^0,w,c
  9630   01059C  2432               	addwf	(btemp+8)^0,w,c
  9631   01059E  6EE9               	movwf	fsr0l,c
  9632   0105A0  5035               	movf	(btemp+11)^0,w,c
  9633   0105A2  2033               	addwfc	(btemp+9)^0,w,c
  9634   0105A4  6EEA               	movwf	fsr0h,c
  9635   0105A6  CFDF FFEF          	movff	indf2,indf0
  9636   0105AA                     
  9637                           ;can/can.c: 790:     }
  9638                           ;stkvar	_i @ sp[(-114)+112]
  9639   0105AA  0EFE               	movlw	-2
  9640   0105AC  2AE3               	incf	plusw1,f,c
  9641   0105AE                     l4297:
  9642                           
  9643                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9644                           ;stkvar	_i @ sp[(-114)+112]
  9645   0105AE  0EFE               	movlw	-2
  9646   0105B0  CFE3 F035          	movff	plusw1,btemp+11
  9647   0105B4  C035  F02E         	movff	btemp+11,btemp+4
  9648   0105B8  6A2F               	clrf	(btemp+5)^0,c
  9649   0105BA  6A30               	clrf	(btemp+6)^0,c
  9650   0105BC  6A31               	clrf	(btemp+7)^0,c
  9651   0105BE  0E85               	movlw	-123
  9652   0105C0  50E3               	movf	plusw1,w,c
  9653   0105C2  5C2E               	subwf	(btemp+4)^0,w,c
  9654   0105C4  0E86               	movlw	-122
  9655   0105C6  50E3               	movf	plusw1,w,c
  9656   0105C8  582F               	subwfb	(btemp+5)^0,w,c
  9657   0105CA  0E87               	movlw	-121
  9658   0105CC  50E3               	movf	plusw1,w,c
  9659   0105CE  5830               	subwfb	(btemp+6)^0,w,c
  9660   0105D0  0E88               	movlw	-120
  9661   0105D2  50E3               	movf	plusw1,w,c
  9662   0105D4  5831               	subwfb	(btemp+7)^0,w,c
  9663   0105D6  A0D8               	btfss	status,0,c
  9664   0105D8  EFF0  F082         	goto	u1941
  9665   0105DC  EFF2  F082         	goto	u1940
  9666   0105E0                     u1941:
  9667   0105E0  EFB0  F082         	goto	l4293
  9668   0105E4                     u1940:
  9669   0105E4                     
  9670                           ;can/can.c: 793:     uint16_t n = 0;
  9671                           ;stkvar	_n @ sp[(-114)+109]
  9672   0105E4  0EFB               	movlw	-5
  9673   0105E6  6AE3               	clrf	plusw1,c
  9674   0105E8  0EFC               	movlw	-4
  9675   0105EA  6AE3               	clrf	plusw1,c
  9676   0105EC                     
  9677                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9678                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9679   0105EC  0E85               	movlw	-123
  9680   0105EE  CFE3 F035          	movff	plusw1,btemp+11
  9681   0105F2  0E03               	movlw	3
  9682   0105F4  1635               	andwf	(btemp+11)^0,f,c
  9683   0105F6  B4D8               	btfsc	status,2,c
  9684   0105F8  EF00  F083         	goto	u1951
  9685   0105FC  EF02  F083         	goto	u1950
  9686   010600                     u1951:
  9687   010600  EF51  F083         	goto	l4317
  9688   010604                     u1950:
  9689   010604                     
  9690                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9691                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9692   010604  0E85               	movlw	-123
  9693   010606  CFE3 F034          	movff	plusw1,btemp+10
  9694   01060A  0E86               	movlw	-122
  9695   01060C  CFE3 F035          	movff	plusw1,btemp+11
  9696   010610  0E03               	movlw	3
  9697   010612  1634               	andwf	(btemp+10)^0,f,c
  9698   010614  0E00               	movlw	0
  9699   010616  1635               	andwf	(btemp+11)^0,f,c
  9700   010618  5034               	movf	(btemp+10)^0,w,c
  9701   01061A  0804               	sublw	4
  9702   01061C  6E32               	movwf	(btemp+8)^0,c
  9703   01061E  5035               	movf	(btemp+11)^0,w,c
  9704   010620  A0D8               	btfss	status,0,c
  9705   010622  2AE8               	incf	wreg,f,c
  9706   010624  0800               	sublw	0
  9707   010626  6E33               	movwf	(btemp+9)^0,c
  9708                           
  9709                           ;stkvar	_n @ sp[(-114)+109]
  9710   010628  0EFB               	movlw	-5
  9711   01062A  C032  FFE3         	movff	btemp+8,plusw1
  9712   01062E  0EFC               	movlw	-4
  9713   010630  C033  FFE3         	movff	btemp+9,plusw1
  9714   010634                     
  9715                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9716   010634  0E08               	movlw	8
  9717   010636  6E35               	movwf	(btemp+11)^0,c
  9718                           
  9719                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9720   010638  0E85               	movlw	-123
  9721   01063A  50E3               	movf	plusw1,w,c
  9722   01063C  2435               	addwf	(btemp+11)^0,w,c
  9723   01063E  6E34               	movwf	(btemp+10)^0,c
  9724                           
  9725                           ;stkvar	_i @ sp[(-114)+112]
  9726   010640  0EFE               	movlw	-2
  9727   010642  C034  FFE3         	movff	btemp+10,plusw1
  9728   010646                     
  9729                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9730                           ;stkvar	_j @ sp[(-114)+113]
  9731   010646  0EFF               	movlw	-1
  9732   010648  6AE3               	clrf	plusw1,c
  9733   01064A  EF40  F083         	goto	l4315
  9734   01064E                     l4311:
  9735                           
  9736                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9737                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9738   01064E  0E92               	movlw	146
  9739   010650  24E1               	addwf	fsr1l,w,c
  9740   010652  6E34               	movwf	(btemp+10)^0,c
  9741   010654  0EFF               	movlw	255
  9742   010656  20E2               	addwfc	fsr1h,w,c
  9743   010658  6E35               	movwf	(btemp+11)^0,c
  9744                           
  9745                           ;stkvar	_i @ sp[(-114)+112]
  9746   01065A  0EFE               	movlw	-2
  9747   01065C  50E3               	movf	plusw1,w,c
  9748   01065E  2634               	addwf	(btemp+10)^0,f,c
  9749   010660  0E00               	movlw	0
  9750   010662  2235               	addwfc	(btemp+11)^0,f,c
  9751                           
  9752                           ;stkvar	_j @ sp[(-114)+113]
  9753   010664  0EFF               	movlw	-1
  9754   010666  50E3               	movf	plusw1,w,c
  9755   010668  2634               	addwf	(btemp+10)^0,f,c
  9756   01066A  0E00               	movlw	0
  9757   01066C  2235               	addwfc	(btemp+11)^0,f,c
  9758   01066E  0E08               	movlw	8
  9759   010670  2434               	addwf	(btemp+10)^0,w,c
  9760   010672  6ED9               	movwf	fsr2l,c
  9761   010674  0E00               	movlw	0
  9762   010676  2035               	addwfc	(btemp+11)^0,w,c
  9763   010678  6EDA               	movwf	fsr2h,c
  9764   01067A  6ADF               	clrf	indf2,c
  9765   01067C                     
  9766                           ;can/can.c: 803:         }
  9767                           ;stkvar	_j @ sp[(-114)+113]
  9768   01067C  0EFF               	movlw	-1
  9769   01067E  2AE3               	incf	plusw1,f,c
  9770   010680                     l4315:
  9771                           
  9772                           ;stkvar	_n @ sp[(-114)+109]
  9773                           ;stkvar	_j @ sp[(-114)+113]
  9774   010680  0EFF               	movlw	-1
  9775   010682  50E3               	movf	plusw1,w,c
  9776   010684  6E34               	movwf	(btemp+10)^0,c
  9777   010686  6A35               	clrf	(btemp+11)^0,c
  9778   010688  0EFB               	movlw	-5
  9779   01068A  50E3               	movf	plusw1,w,c
  9780   01068C  5C34               	subwf	(btemp+10)^0,w,c
  9781   01068E  0EFC               	movlw	-4
  9782   010690  50E3               	movf	plusw1,w,c
  9783   010692  5835               	subwfb	(btemp+11)^0,w,c
  9784   010694  A0D8               	btfss	status,0,c
  9785   010696  EF4F  F083         	goto	u1961
  9786   01069A  EF51  F083         	goto	u1960
  9787   01069E                     u1961:
  9788   01069E  EF27  F083         	goto	l4311
  9789   0106A2                     u1960:
  9790   0106A2                     l4317:
  9791                           
  9792                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9793                           ;stkvar	_n @ sp[(-114)+109]
  9794                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9795   0106A2  0E85               	movlw	-123
  9796   0106A4  CFE3 F034          	movff	plusw1,btemp+10
  9797   0106A8  0E86               	movlw	-122
  9798   0106AA  CFE3 F035          	movff	plusw1,btemp+11
  9799   0106AE  0EFB               	movlw	-5
  9800   0106B0  50E3               	movf	plusw1,w,c
  9801   0106B2  2634               	addwf	(btemp+10)^0,f,c
  9802   0106B4  0EFC               	movlw	-4
  9803   0106B6  50E3               	movf	plusw1,w,c
  9804   0106B8  2235               	addwfc	(btemp+11)^0,f,c
  9805   0106BA  0E08               	movlw	8
  9806   0106BC  2634               	addwf	(btemp+10)^0,f,c
  9807   0106BE  0E00               	movlw	0
  9808   0106C0  2235               	addwfc	(btemp+11)^0,f,c
  9809   0106C2  C034  FFE6         	movff	btemp+10,postinc1
  9810   0106C6  C035  FFE6         	movff	btemp+11,postinc1
  9811                           
  9812                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9813   0106CA  0E90               	movlw	144
  9814   0106CC  24E1               	addwf	fsr1l,w,c
  9815   0106CE  6E2A               	movwf	btemp^0,c
  9816   0106D0  0EFF               	movlw	255
  9817   0106D2  20E2               	addwfc	fsr1h,w,c
  9818   0106D4  6E2B               	movwf	(btemp+1)^0,c
  9819   0106D6  C02A  FFE6         	movff	btemp,postinc1
  9820   0106DA  C02B  FFE6         	movff	btemp+1,postinc1
  9821                           
  9822                           ;stkvar	_a @ sp[(-118)+97]
  9823   0106DE  0EEB               	movlw	-21
  9824   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9825   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9826   0106E8  EC7C  F09A         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9827                           
  9828                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9829   0106EC  0EFD               	movlw	-3
  9830   0106EE  C02A  FFE3         	movff	btemp,plusw1
  9831   0106F2                     
  9832                           ;can/can.c: 807:     if (spiTransferError) {
  9833                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9834   0106F2  0EFD               	movlw	-3
  9835   0106F4  50E3               	movf	plusw1,w,c
  9836   0106F6  B4D8               	btfsc	status,2,c
  9837   0106F8  EF80  F083         	goto	u1971
  9838   0106FC  EF82  F083         	goto	u1970
  9839   010700                     u1971:
  9840   010700  EF86  F083         	goto	l4325
  9841   010704                     u1970:
  9842   010704                     
  9843                           ;can/can.c: 808:         return -4;
  9844   010704  0EFC               	movlw	252
  9845   010706  6E2A               	movwf	btemp^0,c
  9846   010708  EFA1  F083         	goto	l264
  9847   01070C                     l4325:
  9848                           
  9849                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9850                           ;stkvar	_flush @ sp[(-114)+-10]
  9851   01070C  0E84               	movlw	-124
  9852   01070E  50E3               	movf	plusw1,w,c
  9853   010710  6EE6               	movwf	postinc1,c
  9854                           
  9855                           ;stkvar	_channel @ sp[(-115)+-1]
  9856   010712  0E8C               	movlw	-116
  9857   010714  50E3               	movf	plusw1,w,c
  9858   010716  6EE6               	movwf	postinc1,c
  9859   010718  ECD0  F0A0         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9860                           
  9861                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9862   01071C  0EFD               	movlw	-3
  9863   01071E  C02A  FFE3         	movff	btemp,plusw1
  9864   010722                     
  9865                           ;can/can.c: 813:     if (spiTransferError) {
  9866                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9867   010722  0EFD               	movlw	-3
  9868   010724  50E3               	movf	plusw1,w,c
  9869   010726  B4D8               	btfsc	status,2,c
  9870   010728  EF98  F083         	goto	u1981
  9871   01072C  EF9A  F083         	goto	u1980
  9872   010730                     u1981:
  9873   010730  EF9E  F083         	goto	l4333
  9874   010734                     u1980:
  9875   010734                     
  9876                           ;can/can.c: 814:         return -5;
  9877   010734  0EFB               	movlw	251
  9878   010736  6E2A               	movwf	btemp^0,c
  9879   010738  EFA1  F083         	goto	l264
  9880   01073C                     l4333:
  9881                           
  9882                           ;can/can.c: 817:     return spiTransferError;
  9883                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9884   01073C  0EFD               	movlw	-3
  9885   01073E  CFE3 F02A          	movff	plusw1,btemp
  9886   010742                     l264:
  9887                           
  9888                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9889   010742  0E84               	movlw	132
  9890   010744  26E1               	addwf	fsr1l,f,c
  9891   010746  0EFF               	movlw	255
  9892   010748  22E2               	addwfc	fsr1h,f,c
  9893   01074A  0012               	return		;funcret
  9894   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9895                           	callstack 0
  9896                           
  9897 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9898 ;; Defined at:
  9899 ;;		line 383 in file "can/can.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;  address         2  [STACK] unsigned short 
  9902 ;;  txd             2  [STACK] PTR unsigned char 
  9903 ;;		 -> txd(200), txBuffer(76), 
  9904 ;;  nBytes          2  [STACK] unsigned short 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  i               2  [STACK] unsigned short 
  9907 ;;  spiTransferS    2  [STACK] unsigned short 
  9908 ;;  spiTransferE    1  [STACK] char 
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  1  [STACK] char 
  9911 ;; Registers used:
  9912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;Total ram usage:        0 bytes
  9923 ;; Hardware stack levels used: 1
  9924 ;; Hardware stack levels required when called: 8
  9925 ;; This function calls:
  9926 ;;		_SpiTransfer
  9927 ;; This function is called by:
  9928 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9929 ;; This function uses a reentrant model
  9930 ;;
  9931                           
  9932                           	psect	text27
  9933   0134F8                     __ptext27:
  9934                           	callstack 0
  9935   0134F8                     _DRV_CANFDSPI_WriteByteArray:
  9936                           	callstack 0
  9937                           
  9938                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9939   0134F8  0E05               	movlw	5
  9940   0134FA  26E1               	addwf	fsr1l,f,c
  9941   0134FC  0E00               	movlw	0
  9942   0134FE  22E2               	addwfc	fsr1h,f,c
  9943   013500                     
  9944                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9945                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9946   013500  0EF5               	movlw	-11
  9947   013502  50E3               	movf	plusw1,w,c
  9948   013504  0F02               	addlw	2
  9949   013506  6E34               	movwf	(btemp+10)^0,c
  9950   013508  0EF6               	movlw	-10
  9951   01350A  CFE3 F035          	movff	plusw1,btemp+11
  9952   01350E  0E00               	movlw	0
  9953   013510  2235               	addwfc	(btemp+11)^0,f,c
  9954                           
  9955                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9956   013512  0EFD               	movlw	-3
  9957   013514  C034  FFE3         	movff	btemp+10,plusw1
  9958   013518  0EFE               	movlw	-2
  9959   01351A  C035  FFE3         	movff	btemp+11,plusw1
  9960   01351E                     
  9961                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9962                           ;stkvar	_address @ sp[(-5)+-2]
  9963   01351E  0EFA               	movlw	250
  9964   013520  24E1               	addwf	fsr1l,w,c
  9965   013522  6ED9               	movwf	fsr2l,c
  9966   013524  0EFF               	movlw	255
  9967   013526  20E2               	addwfc	fsr1h,w,c
  9968   013528  6EDA               	movwf	fsr2h,c
  9969   01352A  50DF               	movf	indf2,w,c
  9970   01352C  0B0F               	andlw	15
  9971   01352E  0F20               	addlw	32
  9972   013530  0101               	movlb	1	; () banked
  9973   013532  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9974   013534                     
  9975                           ; BSR set to: 1
  9976                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9977                           ;stkvar	_address @ sp[(-5)+-2]
  9978   013534  0EF9               	movlw	-7
  9979   013536  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9980   01353A                     
  9981                           ; BSR set to: 1
  9982                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9983   01353A  0E02               	movlw	2
  9984   01353C  6E34               	movwf	(btemp+10)^0,c
  9985   01353E  0E00               	movlw	0
  9986   013540  6E35               	movwf	(btemp+11)^0,c
  9987                           
  9988                           ;stkvar	_i @ sp[(-5)+0]
  9989   013542  0EFB               	movlw	-5
  9990   013544  C034  FFE3         	movff	btemp+10,plusw1
  9991   013548  0EFC               	movlw	-4
  9992   01354A  C035  FFE3         	movff	btemp+11,plusw1
  9993   01354E  EFD8  F09A         	goto	l4123
  9994   013552                     l4119:
  9995                           
  9996                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9997                           ;stkvar	_i @ sp[(-5)+0]
  9998                           ;stkvar	_txd @ sp[(-5)+-4]
  9999   013552  0EF7               	movlw	-9
 10000   013554  CFE3 F034          	movff	plusw1,btemp+10
 10001   013558  0EF8               	movlw	-8
 10002   01355A  CFE3 F035          	movff	plusw1,btemp+11
 10003   01355E  0EFB               	movlw	-5
 10004   013560  50E3               	movf	plusw1,w,c
 10005   013562  2634               	addwf	(btemp+10)^0,f,c
 10006   013564  0EFC               	movlw	-4
 10007   013566  50E3               	movf	plusw1,w,c
 10008   013568  2235               	addwfc	(btemp+11)^0,f,c
 10009   01356A  0EFE               	movlw	254
 10010   01356C  2434               	addwf	(btemp+10)^0,w,c
 10011   01356E  6ED9               	movwf	fsr2l,c
 10012   013570  0EFF               	movlw	255
 10013   013572  2035               	addwfc	(btemp+11)^0,w,c
 10014   013574  6EDA               	movwf	fsr2h,c
 10015                           
 10016                           ;stkvar	_i @ sp[(-5)+0]
 10017   013576  0EFB               	movlw	-5
 10018   013578  CFE3 F034          	movff	plusw1,btemp+10
 10019   01357C  0EFC               	movlw	-4
 10020   01357E  CFE3 F035          	movff	plusw1,btemp+11
 10021   013582  0E00               	movlw	low _spiTransmitBuffer
 10022   013584  2434               	addwf	(btemp+10)^0,w,c
 10023   013586  6EE9               	movwf	fsr0l,c
 10024   013588  0E01               	movlw	high _spiTransmitBuffer
 10025   01358A  2035               	addwfc	(btemp+11)^0,w,c
 10026   01358C  6EEA               	movwf	fsr0h,c
 10027   01358E  CFDF FFEF          	movff	indf2,indf0
 10028   013592                     
 10029                           ;can/can.c: 397:     }
 10030                           ;stkvar	_i @ sp[(-5)+0]
 10031   013592  0EFB               	movlw	-5
 10032   013594  50E3               	movf	plusw1,w,c
 10033   013596  0F01               	addlw	1
 10034   013598  6E2A               	movwf	btemp^0,c
 10035   01359A  0EFB               	movlw	-5
 10036   01359C  C02A  FFE3         	movff	btemp,plusw1
 10037   0135A0  6A2A               	clrf	btemp^0,c
 10038   0135A2  0EFC               	movlw	-4
 10039   0135A4  50E3               	movf	plusw1,w,c
 10040   0135A6  202A               	addwfc	btemp^0,w,c
 10041   0135A8  6E2A               	movwf	btemp^0,c
 10042   0135AA  0EFC               	movlw	-4
 10043   0135AC  C02A  FFE3         	movff	btemp,plusw1
 10044   0135B0                     l4123:
 10045                           
 10046                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
 10047   0135B0  0EFD               	movlw	-3
 10048   0135B2  CFE3 F034          	movff	plusw1,btemp+10
 10049   0135B6  0EFE               	movlw	-2
 10050   0135B8  CFE3 F035          	movff	plusw1,btemp+11
 10051                           
 10052                           ;stkvar	_i @ sp[(-5)+0]
 10053   0135BC  0EFB               	movlw	-5
 10054   0135BE  CFE3 F032          	movff	plusw1,btemp+8
 10055   0135C2  0EFC               	movlw	-4
 10056   0135C4  CFE3 F033          	movff	plusw1,btemp+9
 10057   0135C8  5034               	movf	(btemp+10)^0,w,c
 10058   0135CA  5C32               	subwf	(btemp+8)^0,w,c
 10059   0135CC  5035               	movf	(btemp+11)^0,w,c
 10060   0135CE  5833               	subwfb	(btemp+9)^0,w,c
 10061   0135D0  A0D8               	btfss	status,0,c
 10062   0135D2  EFED  F09A         	goto	u1741
 10063   0135D6  EFEF  F09A         	goto	u1740
 10064   0135DA                     u1741:
 10065   0135DA  EFA9  F09A         	goto	l4119
 10066   0135DE                     u1740:
 10067   0135DE                     
 10068                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 10069                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
 10070   0135DE  0EFD               	movlw	-3
 10071   0135E0  CFE3 FFE6          	movff	plusw1,postinc1
 10072   0135E4  CFE3 FFE6          	movff	plusw1,postinc1
 10073   0135E8  0E00               	movlw	low _spiReceiveBuffer
 10074   0135EA  6EE6               	movwf	postinc1,c
 10075   0135EC  0E02               	movlw	high _spiReceiveBuffer
 10076   0135EE  6EE6               	movwf	postinc1,c
 10077   0135F0  0E00               	movlw	low _spiTransmitBuffer
 10078   0135F2  6EE6               	movwf	postinc1,c
 10079   0135F4  0E01               	movlw	high _spiTransmitBuffer
 10080   0135F6  6EE6               	movwf	postinc1,c
 10081   0135F8  EC06  F09F         	call	_SpiTransfer	;wreg free
 10082                           
 10083                           ;stkvar	_spiTransferError @ sp[(-5)+4]
 10084   0135FC  0EFF               	movlw	-1
 10085   0135FE  C02A  FFE3         	movff	btemp,plusw1
 10086   013602                     
 10087                           ;can/can.c: 401:     return spiTransferError;
 10088                           ;stkvar	_spiTransferError @ sp[(-5)+4]
 10089   013602  0EFF               	movlw	-1
 10090   013604  CFE3 F02A          	movff	plusw1,btemp
 10091   013608                     
 10092                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10093   013608  0EF5               	movlw	245
 10094   01360A  26E1               	addwf	fsr1l,f,c
 10095   01360C  0EFF               	movlw	255
 10096   01360E  22E2               	addwfc	fsr1h,f,c
 10097   013610  0012               	return		;funcret
 10098   013612                     __end_of_DRV_CANFDSPI_WriteByteArray:
 10099                           	callstack 0
 10100                           
 10101 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
 10102 ;; Defined at:
 10103 ;;		line 880 in file "can/can.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;  channel         1  [STACK] enum E5287
 10106 ;;  flush           1  [STACK] _Bool 
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 10109 ;;  a               2  [STACK] unsigned short 
 10110 ;;  spiTransferE    1  [STACK] char 
 10111 ;; Return value:  Size  Location     Type
 10112 ;;                  1  [STACK] char 
 10113 ;; Registers used:
 10114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
 10115 ;; Tracked objects:
 10116 ;;		On entry : 0/0
 10117 ;;		On exit  : 0/0
 10118 ;;		Unchanged: 0/0
 10119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;Total ram usage:        0 bytes
 10125 ;; Hardware stack levels used: 1
 10126 ;; Hardware stack levels required when called: 9
 10127 ;; This function calls:
 10128 ;;		_DRV_CANFDSPI_WriteByte
 10129 ;; This function is called by:
 10130 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10131 ;; This function uses a reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text28
 10135   0141A0                     __ptext28:
 10136                           	callstack 0
 10137   0141A0                     _DRV_CANFDSPI_TransmitChannelUpdate:
 10138                           	callstack 0
 10139                           
 10140                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10141   0141A0  0E08               	movlw	8
 10142   0141A2  26E1               	addwf	fsr1l,f,c
 10143   0141A4  0E00               	movlw	0
 10144   0141A6  22E2               	addwfc	fsr1h,f,c
 10145   0141A8                     
 10146                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
 10147                           ;stkvar	_channel @ sp[(-8)+-1]
 10148   0141A8  0EF7               	movlw	-9
 10149   0141AA  50E3               	movf	plusw1,w,c
 10150   0141AC  0D0C               	mullw	12
 10151   0141AE  0E51               	movlw	81
 10152   0141B0  26F3               	addwf	243,f,c
 10153   0141B2  0E00               	movlw	0
 10154   0141B4  22F4               	addwfc	244,f,c
 10155                           
 10156                           ;stkvar	_a @ sp[(-8)+5]
 10157   0141B6  0EFD               	movlw	-3
 10158   0141B8  CFF3 FFE3          	movff	prodl,plusw1
 10159   0141BC  0EFE               	movlw	-2
 10160   0141BE  CFF4 FFE3          	movff	prodh,plusw1
 10161   0141C2                     
 10162                           ;can/can.c: 889:     ciFifoCon.word = 0;
 10163                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
 10164   0141C2  0EF8               	movlw	-8
 10165   0141C4  6AE3               	clrf	plusw1,c
 10166   0141C6  0EF9               	movlw	-7
 10167   0141C8  6AE3               	clrf	plusw1,c
 10168   0141CA  0EFA               	movlw	-6
 10169   0141CC  6AE3               	clrf	plusw1,c
 10170   0141CE  0EFB               	movlw	-5
 10171   0141D0  6AE3               	clrf	plusw1,c
 10172   0141D2                     
 10173                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
 10174                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
 10175   0141D2  0EF9               	movlw	249
 10176   0141D4  24E1               	addwf	fsr1l,w,c
 10177   0141D6  6ED9               	movwf	fsr2l,c
 10178   0141D8  0EFF               	movlw	255
 10179   0141DA  20E2               	addwfc	fsr1h,w,c
 10180   0141DC  6EDA               	movwf	fsr2h,c
 10181   0141DE  80DF               	bsf	indf2,0,c
 10182   0141E0                     
 10183                           ;can/can.c: 893:     if (flush) {
 10184                           ;stkvar	_flush @ sp[(-8)+-2]
 10185   0141E0  0EF6               	movlw	-10
 10186   0141E2  50E3               	movf	plusw1,w,c
 10187   0141E4  B4D8               	btfsc	status,2,c
 10188   0141E6  EFF7  F0A0         	goto	u1721
 10189   0141EA  EFF9  F0A0         	goto	u1720
 10190   0141EE                     u1721:
 10191   0141EE  EF00  F0A1         	goto	l4079
 10192   0141F2                     u1720:
 10193   0141F2                     
 10194                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
 10195                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
 10196   0141F2  0EF9               	movlw	249
 10197   0141F4  24E1               	addwf	fsr1l,w,c
 10198   0141F6  6ED9               	movwf	fsr2l,c
 10199   0141F8  0EFF               	movlw	255
 10200   0141FA  20E2               	addwfc	fsr1h,w,c
 10201   0141FC  6EDA               	movwf	fsr2h,c
 10202   0141FE  82DF               	bsf	indf2,1,c
 10203   014200                     l4079:
 10204                           
 10205                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
 10206                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
 10207   014200  0EF9               	movlw	249
 10208   014202  24E1               	addwf	fsr1l,w,c
 10209   014204  6ED9               	movwf	fsr2l,c
 10210   014206  0EFF               	movlw	255
 10211   014208  20E2               	addwfc	fsr1h,w,c
 10212   01420A  6EDA               	movwf	fsr2h,c
 10213   01420C  50DF               	movf	indf2,w,c
 10214   01420E  6EE6               	movwf	postinc1,c
 10215                           
 10216                           ;stkvar	_a @ sp[(-9)+5]
 10217   014210  0EFC               	movlw	-4
 10218   014212  CFE3 FFE6          	movff	plusw1,postinc1
 10219   014216  CFE3 FFE6          	movff	plusw1,postinc1
 10220   01421A  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 10221                           
 10222                           ;stkvar	_spiTransferError @ sp[(-8)+7]
 10223   01421E  0EFF               	movlw	-1
 10224   014220  C02A  FFE3         	movff	btemp,plusw1
 10225   014224                     
 10226                           ;can/can.c: 898:     if (spiTransferError) {
 10227                           ;stkvar	_spiTransferError @ sp[(-8)+7]
 10228   014224  0EFF               	movlw	-1
 10229   014226  50E3               	movf	plusw1,w,c
 10230   014228  B4D8               	btfsc	status,2,c
 10231   01422A  EF19  F0A1         	goto	u1731
 10232   01422E  EF1B  F0A1         	goto	u1730
 10233   014232                     u1731:
 10234   014232  EF1F  F0A1         	goto	l4087
 10235   014236                     u1730:
 10236   014236                     
 10237                           ;can/can.c: 899:         return -1;
 10238   014236  0EFF               	movlw	255
 10239   014238  6E2A               	movwf	btemp^0,c
 10240   01423A  EF22  F0A1         	goto	l293
 10241   01423E                     l4087:
 10242                           
 10243                           ;can/can.c: 902:     return spiTransferError;
 10244                           ;stkvar	_spiTransferError @ sp[(-8)+7]
 10245   01423E  0EFF               	movlw	-1
 10246   014240  CFE3 F02A          	movff	plusw1,btemp
 10247   014244                     l293:
 10248                           
 10249                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 10250   014244  0EF6               	movlw	246
 10251   014246  26E1               	addwf	fsr1l,f,c
 10252   014248  0EFF               	movlw	255
 10253   01424A  22E2               	addwfc	fsr1h,f,c
 10254   01424C  0012               	return		;funcret
 10255   01424E                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
 10256                           	callstack 0
 10257                           
 10258 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
 10259 ;; Defined at:
 10260 ;;		line 405 in file "can/can.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;  address         2  [STACK] unsigned short 
 10263 ;;  rxd             2  [STACK] PTR unsigned long 
 10264 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
 10265 ;;		 -> fifoReg(12), 
 10266 ;;  nWords          2  [STACK] unsigned short 
 10267 ;; Auto vars:     Size  Location     Type
 10268 ;;  w               4  [STACK] struct _REG_t
 10269 ;;  i               2  [STACK] unsigned short 
 10270 ;;  j               2  [STACK] unsigned short 
 10271 ;;  spiTransferS    2  [STACK] unsigned short 
 10272 ;;  n               2  [STACK] unsigned short 
 10273 ;;  spiTransferE    1  [STACK] char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  1  [STACK] char 
 10276 ;; Registers used:
 10277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;Total ram usage:        0 bytes
 10288 ;; Hardware stack levels used: 1
 10289 ;; Hardware stack levels required when called: 8
 10290 ;; This function calls:
 10291 ;;		_SpiTransfer
 10292 ;; This function is called by:
 10293 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10294 ;;		_DRV_CANFDSPI_ReceiveMessageGet
 10295 ;; This function uses a reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text29
 10299   0114B2                     __ptext29:
 10300                           	callstack 0
 10301   0114B2                     _DRV_CANFDSPI_ReadWordArray:
 10302                           	callstack 0
 10303                           
 10304                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 10305   0114B2  0E0D               	movlw	13
 10306   0114B4  26E1               	addwf	fsr1l,f,c
 10307   0114B6  0E00               	movlw	0
 10308   0114B8  22E2               	addwfc	fsr1h,f,c
 10309   0114BA                     
 10310                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
 10311                           ;stkvar	_nWords @ sp[(-13)+-6]
 10312   0114BA  0EED               	movlw	-19
 10313   0114BC  CFE3 F034          	movff	plusw1,btemp+10
 10314   0114C0  0EEE               	movlw	-18
 10315   0114C2  CFE3 F035          	movff	plusw1,btemp+11
 10316   0114C6  90D8               	bcf	status,0,c
 10317   0114C8  3634               	rlcf	(btemp+10)^0,f,c
 10318   0114CA  3635               	rlcf	(btemp+11)^0,f,c
 10319   0114CC  90D8               	bcf	status,0,c
 10320   0114CE  3634               	rlcf	(btemp+10)^0,f,c
 10321   0114D0  3635               	rlcf	(btemp+11)^0,f,c
 10322   0114D2  0E02               	movlw	2
 10323   0114D4  2634               	addwf	(btemp+10)^0,f,c
 10324   0114D6  0E00               	movlw	0
 10325   0114D8  2235               	addwfc	(btemp+11)^0,f,c
 10326                           
 10327                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10328   0114DA  0EFB               	movlw	-5
 10329   0114DC  C034  FFE3         	movff	btemp+10,plusw1
 10330   0114E0  0EFC               	movlw	-4
 10331   0114E2  C035  FFE3         	movff	btemp+11,plusw1
 10332   0114E6                     
 10333                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
 10334                           ;stkvar	_address @ sp[(-13)+-2]
 10335   0114E6  0EF2               	movlw	242
 10336   0114E8  24E1               	addwf	fsr1l,w,c
 10337   0114EA  6ED9               	movwf	fsr2l,c
 10338   0114EC  0EFF               	movlw	255
 10339   0114EE  20E2               	addwfc	fsr1h,w,c
 10340   0114F0  6EDA               	movwf	fsr2h,c
 10341   0114F2  50DF               	movf	indf2,w,c
 10342   0114F4  0B0F               	andlw	15
 10343   0114F6  0F30               	addlw	48
 10344   0114F8  0101               	movlb	1	; () banked
 10345   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 10346   0114FC                     
 10347                           ; BSR set to: 1
 10348                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
 10349                           ;stkvar	_address @ sp[(-13)+-2]
 10350   0114FC  0EF1               	movlw	-15
 10351   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 10352   011502                     
 10353                           ; BSR set to: 1
 10354                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
 10355   011502  0E02               	movlw	2
 10356   011504  6E34               	movwf	(btemp+10)^0,c
 10357   011506  0E00               	movlw	0
 10358   011508  6E35               	movwf	(btemp+11)^0,c
 10359                           
 10360                           ;stkvar	_i @ sp[(-13)+4]
 10361   01150A  0EF7               	movlw	-9
 10362   01150C  C034  FFE3         	movff	btemp+10,plusw1
 10363   011510  0EF8               	movlw	-8
 10364   011512  C035  FFE3         	movff	btemp+11,plusw1
 10365   011516  EFA9  F08A         	goto	l4145
 10366   01151A                     l4141:
 10367                           
 10368                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
 10369                           ;stkvar	_i @ sp[(-13)+4]
 10370   01151A  0EF7               	movlw	-9
 10371   01151C  CFE3 F034          	movff	plusw1,btemp+10
 10372   011520  0EF8               	movlw	-8
 10373   011522  CFE3 F035          	movff	plusw1,btemp+11
 10374   011526  0E00               	movlw	low _spiTransmitBuffer
 10375   011528  2434               	addwf	(btemp+10)^0,w,c
 10376   01152A  6ED9               	movwf	fsr2l,c
 10377   01152C  0E01               	movlw	high _spiTransmitBuffer
 10378   01152E  2035               	addwfc	(btemp+11)^0,w,c
 10379   011530  6EDA               	movwf	fsr2h,c
 10380   011532  6ADF               	clrf	indf2,c
 10381   011534                     
 10382                           ;can/can.c: 420:     }
 10383                           ;stkvar	_i @ sp[(-13)+4]
 10384   011534  0EF7               	movlw	-9
 10385   011536  50E3               	movf	plusw1,w,c
 10386   011538  0F01               	addlw	1
 10387   01153A  6E2A               	movwf	btemp^0,c
 10388   01153C  0EF7               	movlw	-9
 10389   01153E  C02A  FFE3         	movff	btemp,plusw1
 10390   011542  6A2A               	clrf	btemp^0,c
 10391   011544  0EF8               	movlw	-8
 10392   011546  50E3               	movf	plusw1,w,c
 10393   011548  202A               	addwfc	btemp^0,w,c
 10394   01154A  6E2A               	movwf	btemp^0,c
 10395   01154C  0EF8               	movlw	-8
 10396   01154E  C02A  FFE3         	movff	btemp,plusw1
 10397   011552                     l4145:
 10398                           
 10399                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10400   011552  0EFB               	movlw	-5
 10401   011554  CFE3 F034          	movff	plusw1,btemp+10
 10402   011558  0EFC               	movlw	-4
 10403   01155A  CFE3 F035          	movff	plusw1,btemp+11
 10404                           
 10405                           ;stkvar	_i @ sp[(-13)+4]
 10406   01155E  0EF7               	movlw	-9
 10407   011560  CFE3 F032          	movff	plusw1,btemp+8
 10408   011564  0EF8               	movlw	-8
 10409   011566  CFE3 F033          	movff	plusw1,btemp+9
 10410   01156A  5034               	movf	(btemp+10)^0,w,c
 10411   01156C  5C32               	subwf	(btemp+8)^0,w,c
 10412   01156E  5035               	movf	(btemp+11)^0,w,c
 10413   011570  5833               	subwfb	(btemp+9)^0,w,c
 10414   011572  A0D8               	btfss	status,0,c
 10415   011574  EFBE  F08A         	goto	u1751
 10416   011578  EFC0  F08A         	goto	u1750
 10417   01157C                     u1751:
 10418   01157C  EF8D  F08A         	goto	l4141
 10419   011580                     u1750:
 10420   011580                     
 10421                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 10422                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10423   011580  0EFB               	movlw	-5
 10424   011582  CFE3 FFE6          	movff	plusw1,postinc1
 10425   011586  CFE3 FFE6          	movff	plusw1,postinc1
 10426   01158A  0E00               	movlw	low _spiReceiveBuffer
 10427   01158C  6EE6               	movwf	postinc1,c
 10428   01158E  0E02               	movlw	high _spiReceiveBuffer
 10429   011590  6EE6               	movwf	postinc1,c
 10430   011592  0E00               	movlw	low _spiTransmitBuffer
 10431   011594  6EE6               	movwf	postinc1,c
 10432   011596  0E01               	movlw	high _spiTransmitBuffer
 10433   011598  6EE6               	movwf	postinc1,c
 10434   01159A  EC06  F09F         	call	_SpiTransfer	;wreg free
 10435                           
 10436                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10437   01159E  0EFF               	movlw	-1
 10438   0115A0  C02A  FFE3         	movff	btemp,plusw1
 10439   0115A4                     
 10440                           ;can/can.c: 423:     if (spiTransferError) {
 10441                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10442   0115A4  0EFF               	movlw	-1
 10443   0115A6  50E3               	movf	plusw1,w,c
 10444   0115A8  B4D8               	btfsc	status,2,c
 10445   0115AA  EFD9  F08A         	goto	u1761
 10446   0115AE  EFDB  F08A         	goto	u1760
 10447   0115B2                     u1761:
 10448   0115B2  EFE0  F08A         	goto	l4155
 10449   0115B6                     u1760:
 10450   0115B6                     l4151:
 10451                           
 10452                           ;can/can.c: 424:         return spiTransferError;
 10453                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10454   0115B6  0EFF               	movlw	-1
 10455   0115B8  CFE3 F02A          	movff	plusw1,btemp
 10456   0115BC  EF98  F08B         	goto	l206
 10457   0115C0                     l4155:
 10458                           
 10459                           ;can/can.c: 428:     n = 2;
 10460   0115C0  0E02               	movlw	2
 10461   0115C2  6E34               	movwf	(btemp+10)^0,c
 10462   0115C4  0E00               	movlw	0
 10463   0115C6  6E35               	movwf	(btemp+11)^0,c
 10464                           
 10465                           ;stkvar	_n @ sp[(-13)+10]
 10466   0115C8  0EFD               	movlw	-3
 10467   0115CA  C034  FFE3         	movff	btemp+10,plusw1
 10468   0115CE  0EFE               	movlw	-2
 10469   0115D0  C035  FFE3         	movff	btemp+11,plusw1
 10470   0115D4                     
 10471                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
 10472                           ;stkvar	_i @ sp[(-13)+4]
 10473   0115D4  0EF7               	movlw	-9
 10474   0115D6  6AE3               	clrf	plusw1,c
 10475   0115D8  0EF8               	movlw	-8
 10476   0115DA  6AE3               	clrf	plusw1,c
 10477   0115DC  EF7F  F08B         	goto	l4177
 10478   0115E0                     l4159:
 10479                           
 10480                           ;can/can.c: 430:         w.word = 0;
 10481                           ;stkvar	_w @ sp[(-13)+0]
 10482   0115E0  0EF3               	movlw	-13
 10483   0115E2  6AE3               	clrf	plusw1,c
 10484   0115E4  0EF4               	movlw	-12
 10485   0115E6  6AE3               	clrf	plusw1,c
 10486   0115E8  0EF5               	movlw	-11
 10487   0115EA  6AE3               	clrf	plusw1,c
 10488   0115EC  0EF6               	movlw	-10
 10489   0115EE  6AE3               	clrf	plusw1,c
 10490                           
 10491                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
 10492                           ;stkvar	_j @ sp[(-13)+6]
 10493   0115F0  0EF9               	movlw	-7
 10494   0115F2  6AE3               	clrf	plusw1,c
 10495   0115F4  0EFA               	movlw	-6
 10496   0115F6  6AE3               	clrf	plusw1,c
 10497   0115F8                     l4165:
 10498                           
 10499                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
 10500                           ;stkvar	_n @ sp[(-13)+10]
 10501   0115F8  0EFD               	movlw	-3
 10502   0115FA  CFE3 F034          	movff	plusw1,btemp+10
 10503   0115FE  0EFE               	movlw	-2
 10504   011600  CFE3 F035          	movff	plusw1,btemp+11
 10505   011604  0E00               	movlw	low _spiReceiveBuffer
 10506   011606  2434               	addwf	(btemp+10)^0,w,c
 10507   011608  6ED9               	movwf	fsr2l,c
 10508   01160A  0E02               	movlw	high _spiReceiveBuffer
 10509   01160C  2035               	addwfc	(btemp+11)^0,w,c
 10510   01160E  6EDA               	movwf	fsr2h,c
 10511                           
 10512                           ;stkvar	_j @ sp[(-13)+6]
 10513   011610  0EF9               	movlw	-7
 10514   011612  CFE3 F034          	movff	plusw1,btemp+10
 10515   011616  0EFA               	movlw	-6
 10516   011618  CFE3 F035          	movff	plusw1,btemp+11
 10517                           
 10518                           ;stkvar	_w @ sp[(-13)+0]
 10519   01161C  0EF3               	movlw	243
 10520   01161E  24E1               	addwf	fsr1l,w,c
 10521   011620  6E32               	movwf	(btemp+8)^0,c
 10522   011622  0EFF               	movlw	255
 10523   011624  20E2               	addwfc	fsr1h,w,c
 10524   011626  6E33               	movwf	(btemp+9)^0,c
 10525   011628  5034               	movf	(btemp+10)^0,w,c
 10526   01162A  2432               	addwf	(btemp+8)^0,w,c
 10527   01162C  6EE9               	movwf	fsr0l,c
 10528   01162E  5035               	movf	(btemp+11)^0,w,c
 10529   011630  2033               	addwfc	(btemp+9)^0,w,c
 10530   011632  6EEA               	movwf	fsr0h,c
 10531   011634  CFDF FFEF          	movff	indf2,indf0
 10532   011638                     
 10533                           ;can/can.c: 433:         }
 10534                           ;stkvar	_j @ sp[(-13)+6]
 10535   011638  0EF9               	movlw	-7
 10536   01163A  50E3               	movf	plusw1,w,c
 10537   01163C  0F01               	addlw	1
 10538   01163E  6E2A               	movwf	btemp^0,c
 10539   011640  0EF9               	movlw	-7
 10540   011642  C02A  FFE3         	movff	btemp,plusw1
 10541   011646  6A2A               	clrf	btemp^0,c
 10542   011648  0EFA               	movlw	-6
 10543   01164A  50E3               	movf	plusw1,w,c
 10544   01164C  202A               	addwfc	btemp^0,w,c
 10545   01164E  6E2A               	movwf	btemp^0,c
 10546   011650  0EFA               	movlw	-6
 10547   011652  C02A  FFE3         	movff	btemp,plusw1
 10548   011656                     
 10549                           ;stkvar	_n @ sp[(-13)+10]
 10550   011656  0EFD               	movlw	-3
 10551   011658  50E3               	movf	plusw1,w,c
 10552   01165A  0F01               	addlw	1
 10553   01165C  6E2A               	movwf	btemp^0,c
 10554   01165E  0EFD               	movlw	-3
 10555   011660  C02A  FFE3         	movff	btemp,plusw1
 10556   011664  6A2A               	clrf	btemp^0,c
 10557   011666  0EFE               	movlw	-2
 10558   011668  50E3               	movf	plusw1,w,c
 10559   01166A  202A               	addwfc	btemp^0,w,c
 10560   01166C  6E2A               	movwf	btemp^0,c
 10561   01166E  0EFE               	movlw	-2
 10562   011670  C02A  FFE3         	movff	btemp,plusw1
 10563   011674                     
 10564                           ;stkvar	_j @ sp[(-13)+6]
 10565   011674  0EFA               	movlw	-6
 10566   011676  50E3               	movf	plusw1,w,c
 10567   011678  E10C               	bnz	u1770
 10568   01167A  0EF9               	movlw	-7
 10569   01167C  CFE3 F02A          	movff	plusw1,btemp
 10570   011680  0E04               	movlw	4
 10571   011682  5E2A               	subwf	btemp^0,f,c
 10572   011684  A0D8               	btfss	status,0,c
 10573   011686  EF47  F08B         	goto	u1771
 10574   01168A  EF49  F08B         	goto	u1770
 10575   01168E                     u1771:
 10576   01168E  EFFC  F08A         	goto	l4165
 10577   011692                     u1770:
 10578   011692                     
 10579                           ;can/can.c: 434:         rxd[i] = w.word;
 10580                           ;stkvar	_w @ sp[(-13)+0]
 10581   011692  50E1               	movf	fsr1l,w,c
 10582   011694  0FF3               	addlw	-13
 10583   011696  6ED9               	movwf	fsr2l,c
 10584   011698  50E2               	movf	fsr1h,w,c
 10585   01169A  6EDA               	movwf	fsr2h,c
 10586   01169C  0EFF               	movlw	255
 10587   01169E  22DA               	addwfc	fsr2h,f,c
 10588                           
 10589                           ;stkvar	_i @ sp[(-13)+4]
 10590   0116A0  0EF7               	movlw	-9
 10591   0116A2  CFE3 F034          	movff	plusw1,btemp+10
 10592   0116A6  0EF8               	movlw	-8
 10593   0116A8  CFE3 F035          	movff	plusw1,btemp+11
 10594   0116AC  90D8               	bcf	status,0,c
 10595   0116AE  3634               	rlcf	(btemp+10)^0,f,c
 10596   0116B0  3635               	rlcf	(btemp+11)^0,f,c
 10597   0116B2  90D8               	bcf	status,0,c
 10598   0116B4  3634               	rlcf	(btemp+10)^0,f,c
 10599   0116B6  3635               	rlcf	(btemp+11)^0,f,c
 10600                           
 10601                           ;stkvar	_rxd @ sp[(-13)+-4]
 10602   0116B8  0EEF               	movlw	-17
 10603   0116BA  CFE3 F032          	movff	plusw1,btemp+8
 10604   0116BE  0EF0               	movlw	-16
 10605   0116C0  CFE3 F033          	movff	plusw1,btemp+9
 10606   0116C4  5034               	movf	(btemp+10)^0,w,c
 10607   0116C6  2432               	addwf	(btemp+8)^0,w,c
 10608   0116C8  6EE9               	movwf	fsr0l,c
 10609   0116CA  5035               	movf	(btemp+11)^0,w,c
 10610   0116CC  2033               	addwfc	(btemp+9)^0,w,c
 10611   0116CE  6EEA               	movwf	fsr0h,c
 10612   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10613   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10614   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10615   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10616   0116E0                     
 10617                           ;can/can.c: 435:     }
 10618                           ;stkvar	_i @ sp[(-13)+4]
 10619   0116E0  0EF7               	movlw	-9
 10620   0116E2  50E3               	movf	plusw1,w,c
 10621   0116E4  0F01               	addlw	1
 10622   0116E6  6E2A               	movwf	btemp^0,c
 10623   0116E8  0EF7               	movlw	-9
 10624   0116EA  C02A  FFE3         	movff	btemp,plusw1
 10625   0116EE  6A2A               	clrf	btemp^0,c
 10626   0116F0  0EF8               	movlw	-8
 10627   0116F2  50E3               	movf	plusw1,w,c
 10628   0116F4  202A               	addwfc	btemp^0,w,c
 10629   0116F6  6E2A               	movwf	btemp^0,c
 10630   0116F8  0EF8               	movlw	-8
 10631   0116FA  C02A  FFE3         	movff	btemp,plusw1
 10632   0116FE                     l4177:
 10633                           
 10634                           ;stkvar	_nWords @ sp[(-13)+-6]
 10635   0116FE  0EED               	movlw	-19
 10636   011700  CFE3 F034          	movff	plusw1,btemp+10
 10637   011704  0EEE               	movlw	-18
 10638   011706  CFE3 F035          	movff	plusw1,btemp+11
 10639                           
 10640                           ;stkvar	_i @ sp[(-13)+4]
 10641   01170A  0EF7               	movlw	-9
 10642   01170C  CFE3 F032          	movff	plusw1,btemp+8
 10643   011710  0EF8               	movlw	-8
 10644   011712  CFE3 F033          	movff	plusw1,btemp+9
 10645   011716  5034               	movf	(btemp+10)^0,w,c
 10646   011718  5C32               	subwf	(btemp+8)^0,w,c
 10647   01171A  5035               	movf	(btemp+11)^0,w,c
 10648   01171C  5833               	subwfb	(btemp+9)^0,w,c
 10649   01171E  A0D8               	btfss	status,0,c
 10650   011720  EF94  F08B         	goto	u1781
 10651   011724  EF96  F08B         	goto	u1780
 10652   011728                     u1781:
 10653   011728  EFF0  F08A         	goto	l4159
 10654   01172C                     u1780:
 10655   01172C  EFDB  F08A         	goto	l4151
 10656   011730                     l206:
 10657                           
 10658                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10659   011730  0EED               	movlw	237
 10660   011732  26E1               	addwf	fsr1l,f,c
 10661   011734  0EFF               	movlw	255
 10662   011736  22E2               	addwfc	fsr1h,f,c
 10663   011738  0012               	return		;funcret
 10664   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10665                           	callstack 0
 10666                           
 10667 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10668 ;; Defined at:
 10669 ;;		line 3766 in file "can/can.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;  dlc             1  [STACK] enum E5461
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;  dataBytesInO    4  [STACK] unsigned long 
 10674 ;; Return value:  Size  Location     Type
 10675 ;;                  4  [STACK] unsigned long 
 10676 ;; Registers used:
 10677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;Total ram usage:        0 bytes
 10688 ;; Hardware stack levels used: 1
 10689 ;; Hardware stack levels required when called: 7
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10694 ;; This function uses a reentrant model
 10695 ;;
 10696                           
 10697                           	psect	text30
 10698   0124FC                     __ptext30:
 10699                           	callstack 0
 10700   0124FC                     _DRV_CANFDSPI_DlcToDataBytes:
 10701                           	callstack 0
 10702                           
 10703                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10704   0124FC  52E6               	movf	postinc1,f,c
 10705   0124FE  52E6               	movf	postinc1,f,c
 10706   012500  52E6               	movf	postinc1,f,c
 10707   012502  52E6               	movf	postinc1,f,c
 10708   012504                     
 10709                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10710                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10711   012504  0EFC               	movlw	-4
 10712   012506  6AE3               	clrf	plusw1,c
 10713   012508  0EFD               	movlw	-3
 10714   01250A  6AE3               	clrf	plusw1,c
 10715   01250C  0EFE               	movlw	-2
 10716   01250E  6AE3               	clrf	plusw1,c
 10717   012510  0EFF               	movlw	-1
 10718   012512  6AE3               	clrf	plusw1,c
 10719   012514                     
 10720                           ;can/can.c: 3770:     __nop();
 10721   012514  0000               	nop	
 10722   012516                     
 10723                           ;can/can.c: 3771:     __nop();
 10724   012516  0000               	nop	
 10725   012518                     
 10726                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10727                           ;stkvar	_dlc @ sp[(-4)+-1]
 10728   012518  0EFB               	movlw	-5
 10729   01251A  CFE3 F02A          	movff	plusw1,btemp
 10730   01251E  0E09               	movlw	9
 10731   012520  602A               	cpfslt	btemp^0,c
 10732   012522  EF95  F092         	goto	u1791
 10733   012526  EF97  F092         	goto	u1790
 10734   01252A                     u1791:
 10735   01252A  EF32  F093         	goto	l4209
 10736   01252E                     u1790:
 10737   01252E                     
 10738                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10739                           ;stkvar	_dlc @ sp[(-4)+-1]
 10740   01252E  0EFB               	movlw	-5
 10741   012530  CFE3 F035          	movff	plusw1,btemp+11
 10742   012534  C035  F02E         	movff	btemp+11,btemp+4
 10743   012538  6A2F               	clrf	(btemp+5)^0,c
 10744   01253A  6A30               	clrf	(btemp+6)^0,c
 10745   01253C  6A31               	clrf	(btemp+7)^0,c
 10746                           
 10747                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10748   01253E  0EFC               	movlw	-4
 10749   012540  C02E  FFE3         	movff	btemp+4,plusw1
 10750   012544  0EFD               	movlw	-3
 10751   012546  C02F  FFE3         	movff	btemp+5,plusw1
 10752   01254A  0EFE               	movlw	-2
 10753   01254C  C030  FFE3         	movff	btemp+6,plusw1
 10754   012550  0EFF               	movlw	-1
 10755   012552  C031  FFE3         	movff	btemp+7,plusw1
 10756                           
 10757                           ;can/can.c: 3775:     } else {
 10758   012556  EF5C  F093         	goto	l4211
 10759   01255A                     l4193:
 10760                           
 10761                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10762   01255A  0E0C               	movlw	12
 10763   01255C  6E32               	movwf	(btemp+8)^0,c
 10764   01255E  6A33               	clrf	(btemp+9)^0,c
 10765   012560  6A34               	clrf	(btemp+10)^0,c
 10766   012562  6A35               	clrf	(btemp+11)^0,c
 10767                           
 10768                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10769   012564  0EFC               	movlw	-4
 10770   012566  C032  FFE3         	movff	btemp+8,plusw1
 10771   01256A  0EFD               	movlw	-3
 10772   01256C  C033  FFE3         	movff	btemp+9,plusw1
 10773   012570  0EFE               	movlw	-2
 10774   012572  C034  FFE3         	movff	btemp+10,plusw1
 10775   012576  0EFF               	movlw	-1
 10776   012578  C035  FFE3         	movff	btemp+11,plusw1
 10777                           
 10778                           ;can/can.c: 3779:                 break;
 10779   01257C  EF5C  F093         	goto	l4211
 10780   012580                     l4195:
 10781                           
 10782                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10783   012580  0E10               	movlw	16
 10784   012582  6E32               	movwf	(btemp+8)^0,c
 10785   012584  6A33               	clrf	(btemp+9)^0,c
 10786   012586  6A34               	clrf	(btemp+10)^0,c
 10787   012588  6A35               	clrf	(btemp+11)^0,c
 10788                           
 10789                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10790   01258A  0EFC               	movlw	-4
 10791   01258C  C032  FFE3         	movff	btemp+8,plusw1
 10792   012590  0EFD               	movlw	-3
 10793   012592  C033  FFE3         	movff	btemp+9,plusw1
 10794   012596  0EFE               	movlw	-2
 10795   012598  C034  FFE3         	movff	btemp+10,plusw1
 10796   01259C  0EFF               	movlw	-1
 10797   01259E  C035  FFE3         	movff	btemp+11,plusw1
 10798                           
 10799                           ;can/can.c: 3782:                 break;
 10800   0125A2  EF5C  F093         	goto	l4211
 10801   0125A6                     l4197:
 10802                           
 10803                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10804   0125A6  0E14               	movlw	20
 10805   0125A8  6E32               	movwf	(btemp+8)^0,c
 10806   0125AA  6A33               	clrf	(btemp+9)^0,c
 10807   0125AC  6A34               	clrf	(btemp+10)^0,c
 10808   0125AE  6A35               	clrf	(btemp+11)^0,c
 10809                           
 10810                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10811   0125B0  0EFC               	movlw	-4
 10812   0125B2  C032  FFE3         	movff	btemp+8,plusw1
 10813   0125B6  0EFD               	movlw	-3
 10814   0125B8  C033  FFE3         	movff	btemp+9,plusw1
 10815   0125BC  0EFE               	movlw	-2
 10816   0125BE  C034  FFE3         	movff	btemp+10,plusw1
 10817   0125C2  0EFF               	movlw	-1
 10818   0125C4  C035  FFE3         	movff	btemp+11,plusw1
 10819                           
 10820                           ;can/can.c: 3785:                 break;
 10821   0125C8  EF5C  F093         	goto	l4211
 10822   0125CC                     l4199:
 10823                           
 10824                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10825   0125CC  0E18               	movlw	24
 10826   0125CE  6E32               	movwf	(btemp+8)^0,c
 10827   0125D0  6A33               	clrf	(btemp+9)^0,c
 10828   0125D2  6A34               	clrf	(btemp+10)^0,c
 10829   0125D4  6A35               	clrf	(btemp+11)^0,c
 10830                           
 10831                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10832   0125D6  0EFC               	movlw	-4
 10833   0125D8  C032  FFE3         	movff	btemp+8,plusw1
 10834   0125DC  0EFD               	movlw	-3
 10835   0125DE  C033  FFE3         	movff	btemp+9,plusw1
 10836   0125E2  0EFE               	movlw	-2
 10837   0125E4  C034  FFE3         	movff	btemp+10,plusw1
 10838   0125E8  0EFF               	movlw	-1
 10839   0125EA  C035  FFE3         	movff	btemp+11,plusw1
 10840                           
 10841                           ;can/can.c: 3788:                 break;
 10842   0125EE  EF5C  F093         	goto	l4211
 10843   0125F2                     l4201:
 10844                           
 10845                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10846   0125F2  0E20               	movlw	32
 10847   0125F4  6E32               	movwf	(btemp+8)^0,c
 10848   0125F6  6A33               	clrf	(btemp+9)^0,c
 10849   0125F8  6A34               	clrf	(btemp+10)^0,c
 10850   0125FA  6A35               	clrf	(btemp+11)^0,c
 10851                           
 10852                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10853   0125FC  0EFC               	movlw	-4
 10854   0125FE  C032  FFE3         	movff	btemp+8,plusw1
 10855   012602  0EFD               	movlw	-3
 10856   012604  C033  FFE3         	movff	btemp+9,plusw1
 10857   012608  0EFE               	movlw	-2
 10858   01260A  C034  FFE3         	movff	btemp+10,plusw1
 10859   01260E  0EFF               	movlw	-1
 10860   012610  C035  FFE3         	movff	btemp+11,plusw1
 10861                           
 10862                           ;can/can.c: 3791:                 break;
 10863   012614  EF5C  F093         	goto	l4211
 10864   012618                     l4203:
 10865                           
 10866                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10867   012618  0E30               	movlw	48
 10868   01261A  6E32               	movwf	(btemp+8)^0,c
 10869   01261C  6A33               	clrf	(btemp+9)^0,c
 10870   01261E  6A34               	clrf	(btemp+10)^0,c
 10871   012620  6A35               	clrf	(btemp+11)^0,c
 10872                           
 10873                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10874   012622  0EFC               	movlw	-4
 10875   012624  C032  FFE3         	movff	btemp+8,plusw1
 10876   012628  0EFD               	movlw	-3
 10877   01262A  C033  FFE3         	movff	btemp+9,plusw1
 10878   01262E  0EFE               	movlw	-2
 10879   012630  C034  FFE3         	movff	btemp+10,plusw1
 10880   012634  0EFF               	movlw	-1
 10881   012636  C035  FFE3         	movff	btemp+11,plusw1
 10882                           
 10883                           ;can/can.c: 3794:                 break;
 10884   01263A  EF5C  F093         	goto	l4211
 10885   01263E                     l4205:
 10886                           
 10887                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10888   01263E  0E40               	movlw	64
 10889   012640  6E32               	movwf	(btemp+8)^0,c
 10890   012642  6A33               	clrf	(btemp+9)^0,c
 10891   012644  6A34               	clrf	(btemp+10)^0,c
 10892   012646  6A35               	clrf	(btemp+11)^0,c
 10893                           
 10894                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10895   012648  0EFC               	movlw	-4
 10896   01264A  C032  FFE3         	movff	btemp+8,plusw1
 10897   01264E  0EFD               	movlw	-3
 10898   012650  C033  FFE3         	movff	btemp+9,plusw1
 10899   012654  0EFE               	movlw	-2
 10900   012656  C034  FFE3         	movff	btemp+10,plusw1
 10901   01265A  0EFF               	movlw	-1
 10902   01265C  C035  FFE3         	movff	btemp+11,plusw1
 10903                           
 10904                           ;can/can.c: 3797:                 break;
 10905   012660  EF5C  F093         	goto	l4211
 10906   012664                     l4209:
 10907                           
 10908                           ;stkvar	_dlc @ sp[(-4)+-1]
 10909   012664  0EFB               	movlw	-5
 10910   012666  50E3               	movf	plusw1,w,c
 10911   012668  6E34               	movwf	(btemp+10)^0,c
 10912   01266A  6A35               	clrf	(btemp+11)^0,c
 10913                           
 10914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10915                           ; Switch size 1, requested type "simple"
 10916                           ; Number of cases is 1, Range of values is 0 to 0
 10917                           ; switch strategies available:
 10918                           ; Name         Instructions Cycles
 10919                           ; simple_byte            4     3 (average)
 10920                           ;	Chosen strategy is simple_byte
 10921   01266C  5035               	movf	(btemp+11)^0,w,c
 10922   01266E  0A00               	xorlw	0	; case 0
 10923   012670  B4D8               	btfsc	status,2,c
 10924   012672  EF3D  F093         	goto	l5759
 10925   012676  EF5C  F093         	goto	l4211
 10926   01267A                     l5759:
 10927                           
 10928                           ; Switch size 1, requested type "simple"
 10929                           ; Number of cases is 7, Range of values is 9 to 15
 10930                           ; switch strategies available:
 10931                           ; Name         Instructions Cycles
 10932                           ; simple_byte           22    12 (average)
 10933                           ;	Chosen strategy is simple_byte
 10934   01267A  5034               	movf	(btemp+10)^0,w,c
 10935   01267C  0A09               	xorlw	9	; case 9
 10936   01267E  B4D8               	btfsc	status,2,c
 10937   012680  EFAD  F092         	goto	l4193
 10938   012684  0A03               	xorlw	3	; case 10
 10939   012686  B4D8               	btfsc	status,2,c
 10940   012688  EFC0  F092         	goto	l4195
 10941   01268C  0A01               	xorlw	1	; case 11
 10942   01268E  B4D8               	btfsc	status,2,c
 10943   012690  EFD3  F092         	goto	l4197
 10944   012694  0A07               	xorlw	7	; case 12
 10945   012696  B4D8               	btfsc	status,2,c
 10946   012698  EFE6  F092         	goto	l4199
 10947   01269C  0A01               	xorlw	1	; case 13
 10948   01269E  B4D8               	btfsc	status,2,c
 10949   0126A0  EFF9  F092         	goto	l4201
 10950   0126A4  0A03               	xorlw	3	; case 14
 10951   0126A6  B4D8               	btfsc	status,2,c
 10952   0126A8  EF0C  F093         	goto	l4203
 10953   0126AC  0A01               	xorlw	1	; case 15
 10954   0126AE  B4D8               	btfsc	status,2,c
 10955   0126B0  EF1F  F093         	goto	l4205
 10956   0126B4  EF5C  F093         	goto	l4211
 10957   0126B8                     l4211:
 10958                           
 10959                           ;can/can.c: 3803:     return dataBytesInObject;
 10960                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10961   0126B8  0EFC               	movlw	-4
 10962   0126BA  CFE3 F02A          	movff	plusw1,btemp
 10963   0126BE  0EFD               	movlw	-3
 10964   0126C0  CFE3 F02B          	movff	plusw1,btemp+1
 10965   0126C4  0EFE               	movlw	-2
 10966   0126C6  CFE3 F02C          	movff	plusw1,btemp+2
 10967   0126CA  0EFF               	movlw	-1
 10968   0126CC  CFE3 F02D          	movff	plusw1,btemp+3
 10969   0126D0                     
 10970                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10971   0126D0  0EFB               	movlw	251
 10972   0126D2  26E1               	addwf	fsr1l,f,c
 10973   0126D4  0EFF               	movlw	255
 10974   0126D6  22E2               	addwfc	fsr1h,f,c
 10975   0126D8  0012               	return		;funcret
 10976   0126DA                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10977                           	callstack 0
 10978                           
 10979 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10980 ;; Defined at:
 10981 ;;		line 1776 in file "can/can.c"
 10982 ;; Parameters:    Size  Location     Type
 10983 ;;  channel         1  [STACK] enum E5287
 10984 ;;  flags           2  [STACK] PTR enum E5580
 10985 ;;		 -> txFlags(1), 
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10988 ;;  a               2  [STACK] unsigned short 
 10989 ;;  spiTransferE    1  [STACK] char 
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1  [STACK] char 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used: 1
 11005 ;; Hardware stack levels required when called: 9
 11006 ;; This function calls:
 11007 ;;		_DRV_CANFDSPI_ReadByte
 11008 ;; This function is called by:
 11009 ;;		_CanSend
 11010 ;; This function uses a reentrant model
 11011 ;;
 11012                           
 11013                           	psect	text31
 11014   01439C                     __ptext31:
 11015                           	callstack 0
 11016   01439C                     _DRV_CANFDSPI_TransmitChannelEventGet:
 11017                           	callstack 0
 11018                           
 11019                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11020   01439C  0E07               	movlw	7
 11021   01439E  26E1               	addwf	fsr1l,f,c
 11022   0143A0  0E00               	movlw	0
 11023   0143A2  22E2               	addwfc	fsr1h,f,c
 11024   0143A4                     
 11025                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 11026                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 11027   0143A4  0EF9               	movlw	-7
 11028   0143A6  6AE3               	clrf	plusw1,c
 11029   0143A8  0EFA               	movlw	-6
 11030   0143AA  6AE3               	clrf	plusw1,c
 11031   0143AC  0EFB               	movlw	-5
 11032   0143AE  6AE3               	clrf	plusw1,c
 11033   0143B0  0EFC               	movlw	-4
 11034   0143B2  6AE3               	clrf	plusw1,c
 11035   0143B4                     
 11036                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 11037                           ;stkvar	_channel @ sp[(-7)+-1]
 11038   0143B4  0EF8               	movlw	-8
 11039   0143B6  50E3               	movf	plusw1,w,c
 11040   0143B8  0D0C               	mullw	12
 11041   0143BA  0E54               	movlw	84
 11042   0143BC  26F3               	addwf	243,f,c
 11043   0143BE  0E00               	movlw	0
 11044   0143C0  22F4               	addwfc	244,f,c
 11045                           
 11046                           ;stkvar	_a @ sp[(-7)+4]
 11047   0143C2  0EFD               	movlw	-3
 11048   0143C4  CFF3 FFE3          	movff	prodl,plusw1
 11049   0143C8  0EFE               	movlw	-2
 11050   0143CA  CFF4 FFE3          	movff	prodh,plusw1
 11051   0143CE                     
 11052                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 11053                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 11054   0143CE  0EF9               	movlw	249
 11055   0143D0  24E1               	addwf	fsr1l,w,c
 11056   0143D2  6E2A               	movwf	btemp^0,c
 11057   0143D4  0EFF               	movlw	255
 11058   0143D6  20E2               	addwfc	fsr1h,w,c
 11059   0143D8  6E2B               	movwf	(btemp+1)^0,c
 11060   0143DA  C02A  FFE6         	movff	btemp,postinc1
 11061   0143DE  C02B  FFE6         	movff	btemp+1,postinc1
 11062                           
 11063                           ;stkvar	_a @ sp[(-9)+4]
 11064   0143E2  0EFB               	movlw	-5
 11065   0143E4  CFE3 FFE6          	movff	plusw1,postinc1
 11066   0143E8  CFE3 FFE6          	movff	plusw1,postinc1
 11067   0143EC  EC40  F0A4         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 11068                           
 11069                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 11070   0143F0  0EFF               	movlw	-1
 11071   0143F2  C02A  FFE3         	movff	btemp,plusw1
 11072   0143F6                     
 11073                           ;can/can.c: 1788:     if (spiTransferError) {
 11074                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 11075   0143F6  0EFF               	movlw	-1
 11076   0143F8  50E3               	movf	plusw1,w,c
 11077   0143FA  B4D8               	btfsc	status,2,c
 11078   0143FC  EF02  F0A2         	goto	u1991
 11079   014400  EF04  F0A2         	goto	u1990
 11080   014404                     u1991:
 11081   014404  EF08  F0A2         	goto	l4353
 11082   014408                     u1990:
 11083   014408                     
 11084                           ;can/can.c: 1789:         return -1;
 11085   014408  0EFF               	movlw	255
 11086   01440A  6E2A               	movwf	btemp^0,c
 11087   01440C  EF15  F0A2         	goto	l453
 11088   014410                     l4353:
 11089                           
 11090                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 11091                           ;stkvar	_flags @ sp[(-7)+-3]
 11092   014410  0EF6               	movlw	-10
 11093   014412  CFE3 FFD9          	movff	plusw1,fsr2l
 11094   014416  0EF7               	movlw	-9
 11095   014418  CFE3 FFDA          	movff	plusw1,fsr2h
 11096                           
 11097                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 11098   01441C  0EF9               	movlw	-7
 11099   01441E  50E3               	movf	plusw1,w,c
 11100   014420  0B17               	andlw	23
 11101   014422  6EDF               	movwf	indf2,c
 11102   014424                     
 11103                           ;can/can.c: 1795:     return spiTransferError;
 11104                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 11105   014424  0EFF               	movlw	-1
 11106   014426  CFE3 F02A          	movff	plusw1,btemp
 11107   01442A                     l453:
 11108                           
 11109                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 11110   01442A  0EF6               	movlw	246
 11111   01442C  26E1               	addwf	fsr1l,f,c
 11112   01442E  0EFF               	movlw	255
 11113   014430  22E2               	addwfc	fsr1h,f,c
 11114   014432  0012               	return		;funcret
 11115   014434                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 11116                           	callstack 0
 11117                           
 11118 ;; *************** function _XF_popEvent *****************
 11119 ;; Defined at:
 11120 ;;		line 142 in file "xf/xf.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  inISR           1  [STACK] _Bool 
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;  ev              6  [STACK] struct Event_
 11125 ;; Return value:  Size  Location     Type
 11126 ;;                  6  [STACK] struct Event_
 11127 ;; Registers used:
 11128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 11129 ;; Tracked objects:
 11130 ;;		On entry : 0/0
 11131 ;;		On exit  : 0/0
 11132 ;;		Unchanged: 0/0
 11133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;Total ram usage:        0 bytes
 11139 ;; Hardware stack levels used: 1
 11140 ;; Hardware stack levels required when called: 8
 11141 ;; This function calls:
 11142 ;;		_ENTERCRITICAL
 11143 ;;		_LEAVECRITICAL
 11144 ;;		___awmod
 11145 ;; This function is called by:
 11146 ;;		_XF_executeOnce
 11147 ;; This function uses a reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text32
 11151   013C76                     __ptext32:
 11152                           	callstack 0
 11153   013C76                     _XF_popEvent:
 11154                           	callstack 0
 11155                           
 11156                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 11157   013C76  0E0B               	movlw	11
 11158   013C78  26E1               	addwf	fsr1l,f,c
 11159   013C7A  0E00               	movlw	0
 11160   013C7C  22E2               	addwfc	fsr1h,f,c
 11161   013C7E                     
 11162                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 11163                           ;stkvar	_ev @ sp[(-6)+0]
 11164   013C7E  0EFA               	movlw	-6
 11165   013C80  6AE3               	clrf	plusw1,c
 11166   013C82                     
 11167                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 11168                           ;stkvar	_ev @ sp[(-6)+0]
 11169   013C82  0EFB               	movlw	251
 11170   013C84  24E1               	addwf	fsr1l,w,c
 11171   013C86  6ED9               	movwf	fsr2l,c
 11172   013C88  0EFF               	movlw	255
 11173   013C8A  20E2               	addwfc	fsr1h,w,c
 11174   013C8C  6EDA               	movwf	fsr2h,c
 11175   013C8E  6ADE               	clrf	postinc2,c
 11176   013C90  6ADE               	clrf	postinc2,c
 11177   013C92  6ADD               	clrf	postdec2,c
 11178   013C94                     
 11179                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 11180                           ;stkvar	_inISR @ sp[(-6)+-6]
 11181   013C94  0EF4               	movlw	-12
 11182   013C96  50E3               	movf	plusw1,w,c
 11183   013C98  6EE6               	movwf	postinc1,c
 11184   013C9A  EC33  F0A6         	call	_ENTERCRITICAL	;wreg free
 11185   013C9E                     
 11186                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 11187   013C9E  EE23  F0DF         	lfsr	2,_theXF+279
 11188   013CA2  50DF               	movf	indf2,w,c
 11189   013CA4  A4D8               	btfss	status,2,c
 11190   013CA6  EF57  F09E         	goto	u2921
 11191   013CAA  EF59  F09E         	goto	u2920
 11192   013CAE                     u2921:
 11193   013CAE  EF6E  F09E         	goto	l5191
 11194   013CB2                     u2920:
 11195   013CB2                     l5185:
 11196                           
 11197                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 11198                           ;stkvar	_inISR @ sp[(-6)+-6]
 11199   013CB2  0EF4               	movlw	-12
 11200   013CB4  50E3               	movf	plusw1,w,c
 11201   013CB6  6EE6               	movwf	postinc1,c
 11202   013CB8  EC27  F0A6         	call	_LEAVECRITICAL	;wreg free
 11203   013CBC                     
 11204                           ;xf/xf.c: 152:       return ev;
 11205                           ;stkvar	_ev @ sp[(-6)+0]
 11206   013CBC  0EFA               	movlw	250
 11207   013CBE  24E1               	addwf	fsr1l,w,c
 11208   013CC0  6ED9               	movwf	fsr2l,c
 11209   013CC2  0EFF               	movlw	255
 11210   013CC4  20E2               	addwfc	fsr1h,w,c
 11211   013CC6  6EDA               	movwf	fsr2h,c
 11212                           
 11213                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 11214   013CC8  0E06               	movlw	6
 11215   013CCA  6E2A               	movwf	btemp^0,c
 11216   013CCC  0EF4               	movlw	-12
 11217   013CCE                     us293999:
 11218   013CCE  CFDE FFE3          	movff	postinc2,plusw1
 11219   013CD2  28E8               	incf	wreg,w,c
 11220   013CD4  2E2A               	decfsz	btemp^0,f,c
 11221   013CD6  D7FB               	bra	us293999
 11222   013CD8  EF9C  F09E         	goto	l1227
 11223   013CDC                     l5191:
 11224                           
 11225                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 11226   013CDC  EE23  F0DD         	lfsr	2,_theXF+277
 11227   013CE0  50DF               	movf	indf2,w,c
 11228   013CE2  0D06               	mullw	6
 11229   013CE4  0E28               	movlw	low (_theXF+96)
 11230   013CE6  24F3               	addwf	243,w,c
 11231   013CE8  6ED9               	movwf	fsr2l,c
 11232   013CEA  0E03               	movlw	high (_theXF+96)
 11233   013CEC  20F4               	addwfc	prodh,w,c
 11234   013CEE  6EDA               	movwf	fsr2h,c
 11235                           
 11236                           ;stkvar	_ev @ sp[(-6)+0]
 11237   013CF0  0E06               	movlw	6
 11238   013CF2  6E2A               	movwf	btemp^0,c
 11239   013CF4  0EFA               	movlw	-6
 11240   013CF6                     us294999:
 11241   013CF6  CFDE FFE3          	movff	postinc2,plusw1
 11242   013CFA  28E8               	incf	wreg,w,c
 11243   013CFC  2E2A               	decfsz	btemp^0,f,c
 11244   013CFE  D7FB               	bra	us294999
 11245   013D00                     
 11246                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 11247   013D00  0E1E               	movlw	30
 11248   013D02  6EE6               	movwf	postinc1,c
 11249   013D04  0E00               	movlw	0
 11250   013D06  6EE6               	movwf	postinc1,c
 11251   013D08  EE23  F0DD         	lfsr	2,_theXF+277
 11252   013D0C  50DF               	movf	indf2,w,c
 11253   013D0E  6E34               	movwf	(btemp+10)^0,c
 11254   013D10  6A35               	clrf	(btemp+11)^0,c
 11255   013D12  0E01               	movlw	1
 11256   013D14  2634               	addwf	(btemp+10)^0,f,c
 11257   013D16  0E00               	movlw	0
 11258   013D18  2235               	addwfc	(btemp+11)^0,f,c
 11259   013D1A  C034  FFE6         	movff	btemp+10,postinc1
 11260   013D1E  C035  FFE6         	movff	btemp+11,postinc1
 11261   013D22  ECF9  F097         	call	___awmod	;wreg free
 11262   013D26  C02A  F3DD         	movff	btemp,_theXF+277
 11263   013D2A                     
 11264                           ;xf/xf.c: 156:     theXF.countEvt--;
 11265   013D2A  C3DF  FFE8         	movff	_theXF+279,wreg
 11266   013D2E  0FFF               	addlw	-1
 11267   013D30  CFE8 F3DF          	movff	wreg,_theXF+279
 11268   013D34  EF59  F09E         	goto	l5185
 11269   013D38                     l1227:
 11270                           
 11271                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 11272   013D38  0EFA               	movlw	250
 11273   013D3A  26E1               	addwf	fsr1l,f,c
 11274   013D3C  0EFF               	movlw	255
 11275   013D3E  22E2               	addwfc	fsr1h,f,c
 11276   013D40  0012               	return		;funcret
 11277   013D42                     __end_of_XF_popEvent:
 11278                           	callstack 0
 11279                           
 11280 ;; *************** function ___awmod *****************
 11281 ;; Defined at:
 11282 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  dividend        2  [STACK] int 
 11285 ;;  divisor         2  [STACK] int 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  sign            1  [STACK] unsigned char 
 11288 ;;  counter         1  [STACK] unsigned char 
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  2  [STACK] int 
 11291 ;; Registers used:
 11292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;Total ram usage:        0 bytes
 11303 ;; Hardware stack levels used: 1
 11304 ;; Hardware stack levels required when called: 7
 11305 ;; This function calls:
 11306 ;;		Nothing
 11307 ;; This function is called by:
 11308 ;;		_XF_pushEvent
 11309 ;;		_XF_popEvent
 11310 ;; This function uses a reentrant model
 11311 ;;
 11312                           
 11313                           	psect	text33
 11314   012FF2                     __ptext33:
 11315                           	callstack 0
 11316   012FF2                     ___awmod:
 11317                           	callstack 0
 11318                           
 11319                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11320   012FF2  52E6               	movf	postinc1,f,c
 11321   012FF4  52E6               	movf	postinc1,f,c
 11322   012FF6                     
 11323                           ;stkvar	_sign @ sp[(-2)+0]
 11324   012FF6  0EFE               	movlw	-2
 11325   012FF8  6AE3               	clrf	plusw1,c
 11326   012FFA                     
 11327                           ;stkvar	_dividend @ sp[(-2)+-2]
 11328   012FFA  0EFD               	movlw	-3
 11329   012FFC  BEE3               	btfsc	plusw1,7,c
 11330   012FFE  EF05  F098         	goto	u2040
 11331   013002  EF03  F098         	goto	u2041
 11332   013006                     u2041:
 11333   013006  EF0E  F098         	goto	l4413
 11334   01300A                     u2040:
 11335   01300A                     
 11336                           ;stkvar	_dividend @ sp[(-2)+-2]
 11337                           ;stkvar	_dividend @ sp[(-2)+-2]
 11338   01300A  0EFC               	movlw	-4
 11339   01300C  6CE3               	negf	plusw1,c
 11340   01300E  0EFD               	movlw	-3
 11341   013010  1EE3               	comf	plusw1,f,c
 11342   013012  B0D8               	btfsc	status,0,c
 11343   013014  2AE3               	incf	plusw1,f,c
 11344   013016                     
 11345                           ;stkvar	_sign @ sp[(-2)+0]
 11346   013016  0EFE               	movlw	-2
 11347   013018  6AE3               	clrf	plusw1,c
 11348   01301A  2AE3               	incf	plusw1,f,c
 11349   01301C                     l4413:
 11350                           
 11351                           ;stkvar	_divisor @ sp[(-2)+-4]
 11352   01301C  0EFB               	movlw	-5
 11353   01301E  BEE3               	btfsc	plusw1,7,c
 11354   013020  EF16  F098         	goto	u2050
 11355   013024  EF14  F098         	goto	u2051
 11356   013028                     u2051:
 11357   013028  EF1C  F098         	goto	l4417
 11358   01302C                     u2050:
 11359   01302C                     
 11360                           ;stkvar	_divisor @ sp[(-2)+-4]
 11361                           ;stkvar	_divisor @ sp[(-2)+-4]
 11362   01302C  0EFA               	movlw	-6
 11363   01302E  6CE3               	negf	plusw1,c
 11364   013030  0EFB               	movlw	-5
 11365   013032  1EE3               	comf	plusw1,f,c
 11366   013034  B0D8               	btfsc	status,0,c
 11367   013036  2AE3               	incf	plusw1,f,c
 11368   013038                     l4417:
 11369                           
 11370                           ;stkvar	_divisor @ sp[(-2)+-4]
 11371   013038  0EFA               	movlw	-6
 11372   01303A  CFE3 F02A          	movff	plusw1,btemp
 11373   01303E  0EFB               	movlw	-5
 11374   013040  50E3               	movf	plusw1,w,c
 11375   013042  102A               	iorwf	btemp^0,w,c
 11376   013044  B4D8               	btfsc	status,2,c
 11377   013046  EF27  F098         	goto	u2061
 11378   01304A  EF29  F098         	goto	u2060
 11379   01304E                     u2061:
 11380   01304E  EF84  F098         	goto	l4435
 11381   013052                     u2060:
 11382   013052                     
 11383                           ;stkvar	_counter @ sp[(-2)+1]
 11384   013052  0EFF               	movlw	-1
 11385   013054  6AE3               	clrf	plusw1,c
 11386   013056  2AE3               	incf	plusw1,f,c
 11387   013058  EF3F  F098         	goto	l4425
 11388   01305C                     l4421:
 11389                           
 11390                           ;stkvar	_divisor @ sp[(-2)+-4]
 11391   01305C  0EFA               	movlw	-6
 11392   01305E  50E3               	movf	plusw1,w,c
 11393   013060  90D8               	bcf	status,0,c
 11394   013062  34E8               	rlcf	wreg,w,c
 11395   013064  6E2A               	movwf	btemp^0,c
 11396   013066  0EFA               	movlw	-6
 11397   013068  C02A  FFE3         	movff	btemp,plusw1
 11398   01306C  0EFB               	movlw	-5
 11399   01306E  50E3               	movf	plusw1,w,c
 11400   013070  34E8               	rlcf	wreg,w,c
 11401   013072  6E2A               	movwf	btemp^0,c
 11402   013074  0EFB               	movlw	-5
 11403   013076  C02A  FFE3         	movff	btemp,plusw1
 11404   01307A                     
 11405                           ;stkvar	_counter @ sp[(-2)+1]
 11406   01307A  0EFF               	movlw	-1
 11407   01307C  2AE3               	incf	plusw1,f,c
 11408   01307E                     l4425:
 11409                           
 11410                           ;stkvar	_divisor @ sp[(-2)+-4]
 11411   01307E  0EFB               	movlw	-5
 11412   013080  AEE3               	btfss	plusw1,7,c
 11413   013082  EF45  F098         	goto	u2071
 11414   013086  EF47  F098         	goto	u2070
 11415   01308A                     u2071:
 11416   01308A  EF2E  F098         	goto	l4421
 11417   01308E                     u2070:
 11418   01308E                     l4427:
 11419                           
 11420                           ;stkvar	_divisor @ sp[(-2)+-4]
 11421   01308E  0EFA               	movlw	-6
 11422   013090  CFE3 F034          	movff	plusw1,btemp+10
 11423   013094  0EFB               	movlw	-5
 11424   013096  CFE3 F035          	movff	plusw1,btemp+11
 11425                           
 11426                           ;stkvar	_dividend @ sp[(-2)+-2]
 11427   01309A  0EFC               	movlw	-4
 11428   01309C  CFE3 F032          	movff	plusw1,btemp+8
 11429   0130A0  0EFD               	movlw	-3
 11430   0130A2  CFE3 F033          	movff	plusw1,btemp+9
 11431   0130A6  5034               	movf	(btemp+10)^0,w,c
 11432   0130A8  5C32               	subwf	(btemp+8)^0,w,c
 11433   0130AA  5035               	movf	(btemp+11)^0,w,c
 11434   0130AC  5833               	subwfb	(btemp+9)^0,w,c
 11435   0130AE  A0D8               	btfss	status,0,c
 11436   0130B0  EF5C  F098         	goto	u2081
 11437   0130B4  EF5E  F098         	goto	u2080
 11438   0130B8                     u2081:
 11439   0130B8  EF70  F098         	goto	l4431
 11440   0130BC                     u2080:
 11441   0130BC                     
 11442                           ;stkvar	_divisor @ sp[(-2)+-4]
 11443                           ;stkvar	_dividend @ sp[(-2)+-2]
 11444   0130BC  0EFC               	movlw	-4
 11445   0130BE  50E3               	movf	plusw1,w,c
 11446   0130C0  6E2A               	movwf	btemp^0,c
 11447   0130C2  0EFA               	movlw	-6
 11448   0130C4  50E3               	movf	plusw1,w,c
 11449   0130C6  5E2A               	subwf	btemp^0,f,c
 11450   0130C8  0EFC               	movlw	-4
 11451   0130CA  C02A  FFE3         	movff	btemp,plusw1
 11452   0130CE  0EFD               	movlw	-3
 11453   0130D0  50E3               	movf	plusw1,w,c
 11454   0130D2  6E2A               	movwf	btemp^0,c
 11455   0130D4  0EFB               	movlw	-5
 11456   0130D6  50E3               	movf	plusw1,w,c
 11457   0130D8  5A2A               	subwfb	btemp^0,f,c
 11458   0130DA  0EFD               	movlw	-3
 11459   0130DC  C02A  FFE3         	movff	btemp,plusw1
 11460   0130E0                     l4431:
 11461                           
 11462                           ;stkvar	_divisor @ sp[(-2)+-4]
 11463   0130E0  90D8               	bcf	status,0,c
 11464   0130E2  0EFB               	movlw	-5
 11465   0130E4  32E3               	rrcf	plusw1,f,c
 11466   0130E6  0EFA               	movlw	-6
 11467   0130E8  32E3               	rrcf	plusw1,f,c
 11468   0130EA                     
 11469                           ;stkvar	_counter @ sp[(-2)+1]
 11470   0130EA  0EFF               	movlw	-1
 11471   0130EC  50E3               	movf	plusw1,w,c
 11472   0130EE  6E2A               	movwf	btemp^0,c
 11473   0130F0  0E01               	movlw	1
 11474   0130F2  5E2A               	subwf	btemp^0,f,c
 11475   0130F4  0EFF               	movlw	-1
 11476   0130F6  C02A  FFE3         	movff	btemp,plusw1
 11477   0130FA  A4D8               	btfss	status,2,c
 11478   0130FC  EF82  F098         	goto	u2091
 11479   013100  EF84  F098         	goto	u2090
 11480   013104                     u2091:
 11481   013104  EF47  F098         	goto	l4427
 11482   013108                     u2090:
 11483   013108                     l4435:
 11484                           
 11485                           ;stkvar	_sign @ sp[(-2)+0]
 11486   013108  0EFE               	movlw	-2
 11487   01310A  50E3               	movf	plusw1,w,c
 11488   01310C  B4D8               	btfsc	status,2,c
 11489   01310E  EF8B  F098         	goto	u2101
 11490   013112  EF8D  F098         	goto	u2100
 11491   013116                     u2101:
 11492   013116  EF93  F098         	goto	l4439
 11493   01311A                     u2100:
 11494   01311A                     
 11495                           ;stkvar	_dividend @ sp[(-2)+-2]
 11496                           ;stkvar	_dividend @ sp[(-2)+-2]
 11497   01311A  0EFC               	movlw	-4
 11498   01311C  6CE3               	negf	plusw1,c
 11499   01311E  0EFD               	movlw	-3
 11500   013120  1EE3               	comf	plusw1,f,c
 11501   013122  B0D8               	btfsc	status,0,c
 11502   013124  2AE3               	incf	plusw1,f,c
 11503   013126                     l4439:
 11504                           
 11505                           ;stkvar	_dividend @ sp[(-2)+-2]
 11506   013126  0EFC               	movlw	-4
 11507   013128  CFE3 F02A          	movff	plusw1,btemp
 11508   01312C  0EFD               	movlw	-3
 11509   01312E  CFE3 F02B          	movff	plusw1,btemp+1
 11510   013132                     
 11511                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 11512   013132  0EFA               	movlw	250
 11513   013134  26E1               	addwf	fsr1l,f,c
 11514   013136  0EFF               	movlw	255
 11515   013138  22E2               	addwfc	fsr1h,f,c
 11516   01313A  0012               	return		;funcret
 11517   01313C                     __end_of___awmod:
 11518                           	callstack 0
 11519                           
 11520 ;; *************** function _LEAVECRITICAL *****************
 11521 ;; Defined at:
 11522 ;;		line 265 in file "xf/xf.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;  inISR           1  [STACK] _Bool 
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;		None
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1  [STACK] void 
 11529 ;; Registers used:
 11530 ;;		wreg, fsr1l, fsr1h, status,2
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;Total ram usage:        0 bytes
 11541 ;; Hardware stack levels used: 1
 11542 ;; Hardware stack levels required when called: 7
 11543 ;; This function calls:
 11544 ;;		Nothing
 11545 ;; This function is called by:
 11546 ;;		_XF_pushEvent
 11547 ;;		_XF_popEvent
 11548 ;;		_XF_scheduleTimer
 11549 ;;		_XF_unscheduleTimer
 11550 ;; This function uses a reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text34
 11554   014C4E                     __ptext34:
 11555                           	callstack 0
 11556   014C4E                     _LEAVECRITICAL:
 11557                           	callstack 10
 11558   014C4E                     
 11559                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11560                           ;stkvar	_inISR @ sp[(0)+-1]
 11561   014C4E  0EFF               	movlw	-1
 11562   014C50  50E3               	movf	plusw1,w,c
 11563   014C52  A4D8               	btfss	status,2,c
 11564   014C54  EF2E  F0A6         	goto	u1811
 11565   014C58  EF30  F0A6         	goto	u1810
 11566   014C5C                     u1811:
 11567   014C5C  EF31  F0A6         	goto	l1254
 11568   014C60                     u1810:
 11569   014C60                     
 11570                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11571   014C60  8EF2               	bsf	242,7,c	;volatile
 11572   014C62                     l1254:
 11573                           
 11574                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11575   014C62  52E5               	movf	postdec1,f,c
 11576   014C64  0012               	return		;funcret
 11577   014C66                     __end_of_LEAVECRITICAL:
 11578                           	callstack 0
 11579                           
 11580 ;; *************** function _ENTERCRITICAL *****************
 11581 ;; Defined at:
 11582 ;;		line 250 in file "xf/xf.c"
 11583 ;; Parameters:    Size  Location     Type
 11584 ;;  inISR           1  [STACK] _Bool 
 11585 ;; Auto vars:     Size  Location     Type
 11586 ;;		None
 11587 ;; Return value:  Size  Location     Type
 11588 ;;                  1  [STACK] void 
 11589 ;; Registers used:
 11590 ;;		wreg, fsr1l, fsr1h, status,2
 11591 ;; Tracked objects:
 11592 ;;		On entry : 0/0
 11593 ;;		On exit  : 0/0
 11594 ;;		Unchanged: 0/0
 11595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;Total ram usage:        0 bytes
 11601 ;; Hardware stack levels used: 1
 11602 ;; Hardware stack levels required when called: 7
 11603 ;; This function calls:
 11604 ;;		Nothing
 11605 ;; This function is called by:
 11606 ;;		_XF_pushEvent
 11607 ;;		_XF_popEvent
 11608 ;;		_XF_scheduleTimer
 11609 ;;		_XF_unscheduleTimer
 11610 ;; This function uses a reentrant model
 11611 ;;
 11612                           
 11613                           	psect	text35
 11614   014C66                     __ptext35:
 11615                           	callstack 0
 11616   014C66                     _ENTERCRITICAL:
 11617                           	callstack 10
 11618   014C66                     
 11619                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11620                           ;stkvar	_inISR @ sp[(0)+-1]
 11621   014C66  0EFF               	movlw	-1
 11622   014C68  50E3               	movf	plusw1,w,c
 11623   014C6A  A4D8               	btfss	status,2,c
 11624   014C6C  EF3A  F0A6         	goto	u1801
 11625   014C70  EF3C  F0A6         	goto	u1800
 11626   014C74                     u1801:
 11627   014C74  EF3D  F0A6         	goto	l1250
 11628   014C78                     u1800:
 11629   014C78                     
 11630                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11631   014C78  9EF2               	bcf	242,7,c	;volatile
 11632   014C7A                     l1250:
 11633                           
 11634                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11635   014C7A  52E5               	movf	postdec1,f,c
 11636   014C7C  0012               	return		;funcret
 11637   014C7E                     __end_of_ENTERCRITICAL:
 11638                           	callstack 0
 11639                           
 11640 ;; *************** function _SYSTEM_Initialize *****************
 11641 ;; Defined at:
 11642 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;		None
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;		None
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1  [STACK] void 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11660 ;;Total ram usage:        0 bytes
 11661 ;; Hardware stack levels used: 1
 11662 ;; Hardware stack levels required when called: 9
 11663 ;; This function calls:
 11664 ;;		_INTERRUPT_Initialize
 11665 ;;		_OSCILLATOR_Initialize
 11666 ;;		_PIN_MANAGER_Initialize
 11667 ;;		_SPI2_Initialize
 11668 ;;		_TMR0_Initialize
 11669 ;; This function is called by:
 11670 ;;		_main
 11671 ;; This function uses a reentrant model
 11672 ;;
 11673                           
 11674                           	psect	text36
 11675   014C7E                     __ptext36:
 11676                           	callstack 0
 11677   014C7E                     _SYSTEM_Initialize:
 11678                           	callstack 21
 11679   014C7E                     
 11680                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11681   014C7E  EC5C  F0A6         	call	_INTERRUPT_Initialize	;wreg free
 11682   014C82                     
 11683                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11684   014C82  EC4A  F0A6         	call	_SPI2_Initialize	;wreg free
 11685                           
 11686                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11687   014C86  EC90  F0A5         	call	_PIN_MANAGER_Initialize	;wreg free
 11688                           
 11689                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11690   014C8A  EC52  F0A6         	call	_OSCILLATOR_Initialize	;wreg free
 11691   014C8E                     
 11692                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11693   014C8E  EC3D  F0A5         	call	_TMR0_Initialize	;wreg free
 11694   014C92                     
 11695                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11696   014C92  0012               	return		;funcret
 11697   014C94                     __end_of_SYSTEM_Initialize:
 11698                           	callstack 0
 11699                           
 11700 ;; *************** function _TMR0_Initialize *****************
 11701 ;; Defined at:
 11702 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11703 ;; Parameters:    Size  Location     Type
 11704 ;;		None
 11705 ;; Auto vars:     Size  Location     Type
 11706 ;;		None
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1  [STACK] void 
 11709 ;; Registers used:
 11710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;Total ram usage:        0 bytes
 11721 ;; Hardware stack levels used: 1
 11722 ;; Hardware stack levels required when called: 8
 11723 ;; This function calls:
 11724 ;;		_TMR0_SetInterruptHandler
 11725 ;; This function is called by:
 11726 ;;		_SYSTEM_Initialize
 11727 ;; This function uses a reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text37
 11731   014A7A                     __ptext37:
 11732                           	callstack 0
 11733   014A7A                     _TMR0_Initialize:
 11734                           	callstack 21
 11735   014A7A                     
 11736                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11737   014A7A  9CD5               	bcf	213,6,c	;volatile
 11738   014A7C                     
 11739                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11740   014A7C  0EFD               	movlw	253
 11741   014A7E  6ED7               	movwf	215,c	;volatile
 11742                           
 11743                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11744   014A80  0E9D               	movlw	157
 11745   014A82  6ED6               	movwf	214,c	;volatile
 11746   014A84                     
 11747                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11748   014A84  50D6               	movf	214,w,c	;volatile
 11749   014A86  CFD7 F02A          	movff	4055,btemp	;volatile
 11750   014A8A  6A2B               	clrf	(btemp+1)^0,c
 11751   014A8C  C02A  F02B         	movff	btemp,btemp+1
 11752   014A90  6A2A               	clrf	btemp^0,c
 11753   014A92  102A               	iorwf	btemp^0,w,c
 11754   014A94  6E22               	movwf	_timer0ReloadVal^0,c	;volatile
 11755   014A96  502B               	movf	(btemp+1)^0,w,c
 11756   014A98  6E23               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11757   014A9A                     
 11758                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11759   014A9A  94F2               	bcf	242,2,c	;volatile
 11760   014A9C                     
 11761                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11762   014A9C  8AF2               	bsf	242,5,c	;volatile
 11763   014A9E                     
 11764                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11765   014A9E  0EC0               	movlw	low _TMR0_DefaultInterruptHandler
 11766   014AA0  6EE6               	movwf	postinc1,c
 11767   014AA2  0E4C               	movlw	high _TMR0_DefaultInterruptHandler
 11768   014AA4  6EE6               	movwf	postinc1,c
 11769   014AA6  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11770   014AA8  6EE6               	movwf	postinc1,c
 11771   014AAA  ECFB  F0A5         	call	_TMR0_SetInterruptHandler	;wreg free
 11772   014AAE                     
 11773                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11774   014AAE  0E97               	movlw	151
 11775   014AB0  6ED5               	movwf	213,c	;volatile
 11776   014AB2                     
 11777                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11778   014AB2  0012               	return		;funcret
 11779   014AB4                     __end_of_TMR0_Initialize:
 11780                           	callstack 0
 11781                           
 11782 ;; *************** function _TMR0_SetInterruptHandler *****************
 11783 ;; Defined at:
 11784 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11787 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;		None
 11790 ;; Return value:  Size  Location     Type
 11791 ;;                  1  [STACK] void 
 11792 ;; Registers used:
 11793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11794 ;; Tracked objects:
 11795 ;;		On entry : 0/0
 11796 ;;		On exit  : 0/0
 11797 ;;		Unchanged: 0/0
 11798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;Total ram usage:        0 bytes
 11804 ;; Hardware stack levels used: 1
 11805 ;; Hardware stack levels required when called: 7
 11806 ;; This function calls:
 11807 ;;		Nothing
 11808 ;; This function is called by:
 11809 ;;		_TMR0_Initialize
 11810 ;;		_main
 11811 ;; This function uses a reentrant model
 11812 ;;
 11813                           
 11814                           	psect	text38
 11815   014BF6                     __ptext38:
 11816                           	callstack 0
 11817   014BF6                     _TMR0_SetInterruptHandler:
 11818                           	callstack 23
 11819   014BF6                     
 11820                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11821                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11822   014BF6  50E1               	movf	fsr1l,w,c
 11823   014BF8  0FFD               	addlw	-3
 11824   014BFA  6ED9               	movwf	fsr2l,c
 11825   014BFC  50E2               	movf	fsr1h,w,c
 11826   014BFE  6EDA               	movwf	fsr2h,c
 11827   014C00  0EFF               	movlw	255
 11828   014C02  22DA               	addwfc	fsr2h,f,c
 11829   014C04  CFDE F05A          	movff	postinc2,_TMR0_InterruptHandler
 11830   014C08  CFDE F05B          	movff	postinc2,_TMR0_InterruptHandler+1
 11831   014C0C  CFDD F05C          	movff	postdec2,_TMR0_InterruptHandler+2
 11832   014C10                     
 11833                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11834   014C10  52E5               	movf	postdec1,f,c
 11835   014C12  52E5               	movf	postdec1,f,c
 11836   014C14  52E5               	movf	postdec1,f,c
 11837   014C16  0012               	return		;funcret
 11838   014C18                     __end_of_TMR0_SetInterruptHandler:
 11839                           	callstack 0
 11840                           
 11841 ;; *************** function _SPI2_Initialize *****************
 11842 ;; Defined at:
 11843 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;		None
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;		None
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  1  [STACK] void 
 11850 ;; Registers used:
 11851 ;;		wreg, status,2
 11852 ;; Tracked objects:
 11853 ;;		On entry : 0/0
 11854 ;;		On exit  : 0/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11861 ;;Total ram usage:        0 bytes
 11862 ;; Hardware stack levels used: 1
 11863 ;; Hardware stack levels required when called: 7
 11864 ;; This function calls:
 11865 ;;		Nothing
 11866 ;; This function is called by:
 11867 ;;		_SYSTEM_Initialize
 11868 ;; This function uses a reentrant model
 11869 ;;
 11870                           
 11871                           	psect	text39
 11872   014C94                     __ptext39:
 11873                           	callstack 0
 11874   014C94                     _SPI2_Initialize:
 11875                           	callstack 22
 11876   014C94                     
 11877                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11878   014C94  0E40               	movlw	64
 11879   014C96  6E64               	movwf	100,c	;volatile
 11880                           
 11881                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11882   014C98  0E01               	movlw	1
 11883   014C9A  6E63               	movwf	99,c	;volatile
 11884   014C9C                     
 11885                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11886   014C9C  6A65               	clrf	101,c	;volatile
 11887   014C9E                     
 11888                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11889   014C9E  9C95               	bcf	149,6,c	;volatile
 11890   014CA0                     
 11891                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11892   014CA0  9A63               	bcf	99,5,c	;volatile
 11893   014CA2                     
 11894                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11895   014CA2  0012               	return		;funcret
 11896   014CA4                     __end_of_SPI2_Initialize:
 11897                           	callstack 0
 11898                           
 11899 ;; *************** function _PIN_MANAGER_Initialize *****************
 11900 ;; Defined at:
 11901 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11902 ;; Parameters:    Size  Location     Type
 11903 ;;		None
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;		None
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  1  [STACK] void 
 11908 ;; Registers used:
 11909 ;;		wreg, status,2
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11919 ;;Total ram usage:        0 bytes
 11920 ;; Hardware stack levels used: 1
 11921 ;; Hardware stack levels required when called: 7
 11922 ;; This function calls:
 11923 ;;		Nothing
 11924 ;; This function is called by:
 11925 ;;		_SYSTEM_Initialize
 11926 ;; This function uses a reentrant model
 11927 ;;
 11928                           
 11929                           	psect	text40
 11930   014B20                     __ptext40:
 11931                           	callstack 0
 11932   014B20                     _PIN_MANAGER_Initialize:
 11933                           	callstack 22
 11934   014B20                     
 11935                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11936   014B20  6A8D               	clrf	141,c	;volatile
 11937                           
 11938                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11939   014B22  6A91               	clrf	145,c	;volatile
 11940                           
 11941                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11942   014B24  6A8C               	clrf	140,c	;volatile
 11943                           
 11944                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11945   014B26  6A89               	clrf	137,c	;volatile
 11946                           
 11947                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11948   014B28  6A8E               	clrf	142,c	;volatile
 11949                           
 11950                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11951   014B2A  6A8A               	clrf	138,c	;volatile
 11952                           
 11953                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11954   014B2C  6A8F               	clrf	143,c	;volatile
 11955                           
 11956                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11957   014B2E  6A8B               	clrf	139,c	;volatile
 11958                           
 11959                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11960   014B30  6A90               	clrf	144,c	;volatile
 11961                           
 11962                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11963   014B32  6896               	setf	150,c	;volatile
 11964                           
 11965                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11966   014B34  6897               	setf	151,c	;volatile
 11967   014B36                     
 11968                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11969   014B36  0E3F               	movlw	63
 11970   014B38  6E92               	movwf	146,c	;volatile
 11971   014B3A                     
 11972                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11973   014B3A  6898               	setf	152,c	;volatile
 11974   014B3C                     
 11975                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11976   014B3C  6893               	setf	147,c	;volatile
 11977   014B3E                     
 11978                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11979   014B3E  6899               	setf	153,c	;volatile
 11980   014B40                     
 11981                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11982   014B40  6894               	setf	148,c	;volatile
 11983                           
 11984                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11985   014B42  0EAF               	movlw	175
 11986   014B44  6E95               	movwf	149,c	;volatile
 11987   014B46                     
 11988                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11989   014B46  689A               	setf	154,c	;volatile
 11990                           
 11991                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11992   014B48  0EF0               	movlw	-16
 11993   014B4A  16C1               	andwf	193,f,c	;volatile
 11994   014B4C                     
 11995                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11996   014B4C  0012               	return		;funcret
 11997   014B4E                     __end_of_PIN_MANAGER_Initialize:
 11998                           	callstack 0
 11999                           
 12000 ;; *************** function _OSCILLATOR_Initialize *****************
 12001 ;; Defined at:
 12002 ;;		line 60 in file "mcc_generated_files/mcc.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;		None
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;		None
 12007 ;; Return value:  Size  Location     Type
 12008 ;;                  1  [STACK] void 
 12009 ;; Registers used:
 12010 ;;		wreg, status,2
 12011 ;; Tracked objects:
 12012 ;;		On entry : 0/0
 12013 ;;		On exit  : 0/0
 12014 ;;		Unchanged: 0/0
 12015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12020 ;;Total ram usage:        0 bytes
 12021 ;; Hardware stack levels used: 1
 12022 ;; Hardware stack levels required when called: 7
 12023 ;; This function calls:
 12024 ;;		Nothing
 12025 ;; This function is called by:
 12026 ;;		_SYSTEM_Initialize
 12027 ;; This function uses a reentrant model
 12028 ;;
 12029                           
 12030                           	psect	text41
 12031   014CA4                     __ptext41:
 12032                           	callstack 0
 12033   014CA4                     _OSCILLATOR_Initialize:
 12034                           	callstack 22
 12035   014CA4                     
 12036                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 12037   014CA4  6AD3               	clrf	211,c	;volatile
 12038   014CA6                     
 12039                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 12040   014CA6  0E50               	movlw	80
 12041   014CA8  6E9B               	movwf	155,c	;volatile
 12042   014CAA                     
 12043                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 12044   014CAA  0012               	return		;funcret
 12045   014CAC                     __end_of_OSCILLATOR_Initialize:
 12046                           	callstack 0
 12047                           
 12048 ;; *************** function _INTERRUPT_Initialize *****************
 12049 ;; Defined at:
 12050 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;		None
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  1  [STACK] void 
 12057 ;; Registers used:
 12058 ;;		None
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;Total ram usage:        0 bytes
 12069 ;; Hardware stack levels used: 1
 12070 ;; Hardware stack levels required when called: 7
 12071 ;; This function calls:
 12072 ;;		Nothing
 12073 ;; This function is called by:
 12074 ;;		_SYSTEM_Initialize
 12075 ;; This function uses a reentrant model
 12076 ;;
 12077                           
 12078                           	psect	text42
 12079   014CB8                     __ptext42:
 12080                           	callstack 0
 12081   014CB8                     _INTERRUPT_Initialize:
 12082                           	callstack 22
 12083   014CB8                     
 12084                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 12085   014CB8  9ED0               	bcf	208,7,c	;volatile
 12086   014CBA                     
 12087                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 12088   014CBA  0012               	return		;funcret
 12089   014CBC                     __end_of_INTERRUPT_Initialize:
 12090                           	callstack 0
 12091                           
 12092 ;; *************** function _CanSetFilter *****************
 12093 ;; Defined at:
 12094 ;;		line 231 in file "can/can.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  filter          1  [STACK] enum E5322
 12097 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 12098 ;;		 -> filterObj(6), 
 12099 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 12100 ;;		 -> maskObj(6), 
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;		None
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1  [STACK] void 
 12105 ;; Registers used:
 12106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;Total ram usage:        0 bytes
 12117 ;; Hardware stack levels used: 1
 12118 ;; Hardware stack levels required when called: 10
 12119 ;; This function calls:
 12120 ;;		_DRV_CANFDSPI_FilterDisable
 12121 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 12122 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 12123 ;;		_DRV_CANFDSPI_FilterToFifoLink
 12124 ;; This function is called by:
 12125 ;;		_main
 12126 ;; This function uses a reentrant model
 12127 ;;
 12128                           
 12129                           	psect	text43
 12130   0146E6                     __ptext43:
 12131                           	callstack 0
 12132   0146E6                     _CanSetFilter:
 12133                           	callstack 20
 12134   0146E6                     
 12135                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 12136                           ;stkvar	_filter @ sp[(0)+-1]
 12137   0146E6  0EFF               	movlw	-1
 12138   0146E8  50E3               	movf	plusw1,w,c
 12139   0146EA  6EE6               	movwf	postinc1,c
 12140   0146EC  EC65  F0A2         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 12141   0146F0                     
 12142                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 12143                           ;stkvar	_fObj @ sp[(0)+-3]
 12144   0146F0  0EFD               	movlw	-3
 12145   0146F2  CFE3 FFE6          	movff	plusw1,postinc1
 12146   0146F6  CFE3 FFE6          	movff	plusw1,postinc1
 12147                           
 12148                           ;stkvar	_filter @ sp[(-2)+-1]
 12149   0146FA  0EFD               	movlw	-3
 12150   0146FC  50E3               	movf	plusw1,w,c
 12151   0146FE  6EE6               	movwf	postinc1,c
 12152   014700  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 12153   014704                     
 12154                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 12155                           ;stkvar	_fObj @ sp[(0)+-3]
 12156   014704  0EFD               	movlw	-3
 12157   014706  CFE3 F034          	movff	plusw1,btemp+10
 12158   01470A  0EFE               	movlw	-2
 12159   01470C  CFE3 F035          	movff	plusw1,btemp+11
 12160   014710  0E05               	movlw	5
 12161   014712  2434               	addwf	(btemp+10)^0,w,c
 12162   014714  6ED9               	movwf	fsr2l,c
 12163   014716  0E00               	movlw	0
 12164   014718  2035               	addwfc	(btemp+11)^0,w,c
 12165   01471A  6EDA               	movwf	fsr2h,c
 12166   01471C  50DF               	movf	indf2,w,c
 12167   01471E  6EE6               	movwf	postinc1,c
 12168                           
 12169                           ;stkvar	_mObj @ sp[(-1)+-5]
 12170   014720  0EFA               	movlw	-6
 12171   014722  CFE3 FFE6          	movff	plusw1,postinc1
 12172   014726  CFE3 FFE6          	movff	plusw1,postinc1
 12173                           
 12174                           ;stkvar	_filter @ sp[(-3)+-1]
 12175   01472A  0EFC               	movlw	-4
 12176   01472C  50E3               	movf	plusw1,w,c
 12177   01472E  6EE6               	movwf	postinc1,c
 12178   014730  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 12179   014734                     
 12180                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 12181   014734  0E01               	movlw	1
 12182   014736  6EE6               	movwf	postinc1,c
 12183   014738  0E02               	movlw	2
 12184   01473A  6EE6               	movwf	postinc1,c
 12185                           
 12186                           ;stkvar	_filter @ sp[(-2)+-1]
 12187   01473C  0EFD               	movlw	-3
 12188   01473E  50E3               	movf	plusw1,w,c
 12189   014740  6EE6               	movwf	postinc1,c
 12190   014742  EC1A  F0A2         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 12191   014746                     
 12192                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 12193   014746  0EFB               	movlw	251
 12194   014748  26E1               	addwf	fsr1l,f,c
 12195   01474A  0EFF               	movlw	255
 12196   01474C  22E2               	addwfc	fsr1h,f,c
 12197   01474E  0012               	return		;funcret
 12198   014750                     __end_of_CanSetFilter:
 12199                           	callstack 0
 12200                           
 12201 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 12202 ;; Defined at:
 12203 ;;		line 1072 in file "can/can.c"
 12204 ;; Parameters:    Size  Location     Type
 12205 ;;  filter          1  [STACK] enum E5322
 12206 ;;  channel         1  [STACK] enum E5287
 12207 ;;  enable          1  [STACK] _Bool 
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  a               2  [STACK] unsigned short 
 12210 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12211 ;;  spiTransferE    1    0        char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  1  [STACK] char 
 12214 ;; Registers used:
 12215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12225 ;;Total ram usage:        0 bytes
 12226 ;; Hardware stack levels used: 1
 12227 ;; Hardware stack levels required when called: 9
 12228 ;; This function calls:
 12229 ;;		_DRV_CANFDSPI_WriteByte
 12230 ;; This function is called by:
 12231 ;;		_CanSetFilter
 12232 ;; This function uses a reentrant model
 12233 ;;
 12234                           
 12235                           	psect	text44
 12236   014434                     __ptext44:
 12237                           	callstack 0
 12238   014434                     _DRV_CANFDSPI_FilterToFifoLink:
 12239                           	callstack 0
 12240                           
 12241                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12242   014434  52E6               	movf	postinc1,f,c
 12243   014436  52E6               	movf	postinc1,f,c
 12244   014438  52E6               	movf	postinc1,f,c
 12245   01443A                     
 12246                           ;can/can.c: 1080:     if (enable) {
 12247                           ;stkvar	_enable @ sp[(-3)+-3]
 12248   01443A  0EFA               	movlw	-6
 12249   01443C  50E3               	movf	plusw1,w,c
 12250   01443E  B4D8               	btfsc	status,2,c
 12251   014440  EF24  F0A2         	goto	u2881
 12252   014444  EF26  F0A2         	goto	u2880
 12253   014448                     u2881:
 12254   014448  EF30  F0A2         	goto	l5133
 12255   01444C                     u2880:
 12256   01444C                     
 12257                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 12258                           ;stkvar	_fCtrl @ sp[(-3)+2]
 12259   01444C  50E1               	movf	fsr1l,w,c
 12260   01444E  0FFF               	addlw	-1
 12261   014450  6ED9               	movwf	fsr2l,c
 12262   014452  50E2               	movf	fsr1h,w,c
 12263   014454  6EDA               	movwf	fsr2h,c
 12264   014456  0EFF               	movlw	255
 12265   014458  22DA               	addwfc	fsr2h,f,c
 12266   01445A  8EDF               	bsf	indf2,7,c
 12267                           
 12268                           ;can/can.c: 1082:     } else {
 12269   01445C  EF38  F0A2         	goto	l5135
 12270   014460                     l5133:
 12271                           
 12272                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 12273                           ;stkvar	_fCtrl @ sp[(-3)+2]
 12274   014460  50E1               	movf	fsr1l,w,c
 12275   014462  0FFF               	addlw	-1
 12276   014464  6ED9               	movwf	fsr2l,c
 12277   014466  50E2               	movf	fsr1h,w,c
 12278   014468  6EDA               	movwf	fsr2h,c
 12279   01446A  0EFF               	movlw	255
 12280   01446C  22DA               	addwfc	fsr2h,f,c
 12281   01446E  9EDF               	bcf	indf2,7,c
 12282   014470                     l5135:
 12283                           
 12284                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 12285                           ;stkvar	_channel @ sp[(-3)+-2]
 12286   014470  0EFB               	movlw	-5
 12287   014472  CFE3 F035          	movff	plusw1,btemp+11
 12288                           
 12289                           ;stkvar	_fCtrl @ sp[(-3)+2]
 12290   014476  50E1               	movf	fsr1l,w,c
 12291   014478  0FFF               	addlw	-1
 12292   01447A  6ED9               	movwf	fsr2l,c
 12293   01447C  50E2               	movf	fsr1h,w,c
 12294   01447E  6EDA               	movwf	fsr2h,c
 12295   014480  0EFF               	movlw	255
 12296   014482  22DA               	addwfc	fsr2h,f,c
 12297   014484  50DF               	movf	223,w,c
 12298   014486  1835               	xorwf	(btemp+11)^0,w,c
 12299   014488  0BE0               	andlw	-32
 12300   01448A  1835               	xorwf	(btemp+11)^0,w,c
 12301   01448C  6EDF               	movwf	223,c
 12302   01448E                     
 12303                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12304                           ;stkvar	_filter @ sp[(-3)+-1]
 12305   01448E  0EFC               	movlw	-4
 12306   014490  CFE3 F035          	movff	plusw1,btemp+11
 12307   014494  0ED0               	movlw	208
 12308   014496  2435               	addwf	(btemp+11)^0,w,c
 12309   014498  6E32               	movwf	(btemp+8)^0,c
 12310   01449A  6A33               	clrf	(btemp+9)^0,c
 12311   01449C  0E01               	movlw	1
 12312   01449E  2233               	addwfc	(btemp+9)^0,f,c
 12313                           
 12314                           ;stkvar	_a @ sp[(-3)+0]
 12315   0144A0  0EFD               	movlw	-3
 12316   0144A2  C032  FFE3         	movff	btemp+8,plusw1
 12317   0144A6  0EFE               	movlw	-2
 12318   0144A8  C033  FFE3         	movff	btemp+9,plusw1
 12319   0144AC                     
 12320                           ;stkvar	_fCtrl @ sp[(-3)+2]
 12321   0144AC  0EFF               	movlw	-1
 12322   0144AE  50E3               	movf	plusw1,w,c
 12323   0144B0  6EE6               	movwf	postinc1,c
 12324                           
 12325                           ;stkvar	_a @ sp[(-4)+0]
 12326   0144B2  0EFC               	movlw	-4
 12327   0144B4  CFE3 FFE6          	movff	plusw1,postinc1
 12328   0144B8  CFE3 FFE6          	movff	plusw1,postinc1
 12329   0144BC  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12330   0144C0                     
 12331                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 12332   0144C0  0EFA               	movlw	250
 12333   0144C2  26E1               	addwf	fsr1l,f,c
 12334   0144C4  0EFF               	movlw	255
 12335   0144C6  22E2               	addwfc	fsr1h,f,c
 12336   0144C8  0012               	return		;funcret
 12337   0144CA                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 12338                           	callstack 0
 12339                           
 12340 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 12341 ;; Defined at:
 12342 ;;		line 1001 in file "can/can.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;  filter          1  [STACK] enum E5322
 12345 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 12346 ;;		 -> filterObj(6), 
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;  temp32          4  [STACK] unsigned long 
 12349 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 12350 ;;  a               2  [STACK] unsigned short 
 12351 ;;  spiTransferE    1    0        char 
 12352 ;; Return value:  Size  Location     Type
 12353 ;;                  1  [STACK] char 
 12354 ;; Registers used:
 12355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12356 ;; Tracked objects:
 12357 ;;		On entry : 0/0
 12358 ;;		On exit  : 0/0
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12365 ;;Total ram usage:        0 bytes
 12366 ;; Hardware stack levels used: 1
 12367 ;; Hardware stack levels required when called: 9
 12368 ;; This function calls:
 12369 ;;		_DRV_CANFDSPI_WriteWord
 12370 ;; This function is called by:
 12371 ;;		_CanSetFilter
 12372 ;; This function uses a reentrant model
 12373 ;;
 12374                           
 12375                           	psect	text45
 12376   010E34                     __ptext45:
 12377                           	callstack 0
 12378   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 12379                           	callstack 0
 12380                           
 12381                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12382   010E34  0E0C               	movlw	12
 12383   010E36  26E1               	addwf	fsr1l,f,c
 12384   010E38  0E00               	movlw	0
 12385   010E3A  22E2               	addwfc	fsr1h,f,c
 12386   010E3C                     
 12387                           ;can/can.c: 1009:     fObj.word = 0;
 12388                           ;stkvar	_fObj @ sp[(-12)+4]
 12389   010E3C  0EF8               	movlw	-8
 12390   010E3E  6AE3               	clrf	plusw1,c
 12391   010E40  0EF9               	movlw	-7
 12392   010E42  6AE3               	clrf	plusw1,c
 12393   010E44  0EFA               	movlw	-6
 12394   010E46  6AE3               	clrf	plusw1,c
 12395   010E48  0EFB               	movlw	-5
 12396   010E4A  6AE3               	clrf	plusw1,c
 12397   010E4C                     
 12398                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 12399                           ;stkvar	_id @ sp[(-12)+-3]
 12400   010E4C  0EF1               	movlw	-15
 12401   010E4E  CFE3 F034          	movff	plusw1,btemp+10
 12402   010E52  0EF2               	movlw	-14
 12403   010E54  CFE3 F035          	movff	plusw1,btemp+11
 12404   010E58  0E05               	movlw	5
 12405   010E5A  2434               	addwf	(btemp+10)^0,w,c
 12406   010E5C  6ED9               	movwf	fsr2l,c
 12407   010E5E  0E00               	movlw	0
 12408   010E60  2035               	addwfc	(btemp+11)^0,w,c
 12409   010E62  6EDA               	movwf	fsr2h,c
 12410   010E64  50DF               	movf	indf2,w,c
 12411   010E66  A4D8               	btfss	status,2,c
 12412   010E68  EF38  F087         	goto	u2701
 12413   010E6C  EF3A  F087         	goto	u2700
 12414   010E70                     u2701:
 12415   010E70  EFD2  F087         	goto	l5079
 12416   010E74                     u2700:
 12417   010E74                     
 12418                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 12419                           ;stkvar	_id @ sp[(-12)+-3]
 12420   010E74  0EF1               	movlw	-15
 12421   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 12422   010E7A  0EF2               	movlw	-14
 12423   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 12424   010E80  50DF               	movf	indf2,w,c
 12425   010E82  6E35               	movwf	(btemp+11)^0,c
 12426                           
 12427                           ;stkvar	_fObj @ sp[(-12)+4]
 12428   010E84  0EF8               	movlw	-8
 12429   010E86  C035  FFE3         	movff	btemp+11,plusw1
 12430   010E8A                     
 12431                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 12432                           ;stkvar	_fObj @ sp[(-12)+4]
 12433   010E8A  0EF9               	movlw	249
 12434   010E8C  24E1               	addwf	fsr1l,w,c
 12435   010E8E  6ED9               	movwf	fsr2l,c
 12436   010E90  0EFF               	movlw	255
 12437   010E92  20E2               	addwfc	fsr1h,w,c
 12438   010E94  6EDA               	movwf	fsr2h,c
 12439                           
 12440                           ;stkvar	_id @ sp[(-12)+-3]
 12441   010E96  0EF1               	movlw	-15
 12442   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 12443   010E9C  0EF2               	movlw	-14
 12444   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 12445   010EA2  CFEE F032          	movff	postinc0,btemp+8
 12446   010EA6  CFEE F033          	movff	postinc0,btemp+9
 12447   010EAA  CFEE F034          	movff	postinc0,btemp+10
 12448   010EAE  CFEE F035          	movff	postinc0,btemp+11
 12449   010EB2  C033  F032         	movff	btemp+9,btemp+8
 12450   010EB6  C034  F033         	movff	btemp+10,btemp+9
 12451   010EBA  C035  F034         	movff	btemp+11,btemp+10
 12452   010EBE  6A35               	clrf	(btemp+11)^0,c
 12453   010EC0  5032               	movf	(btemp+8)^0,w,c
 12454   010EC2  6EDF               	movwf	indf2,c
 12455   010EC4                     
 12456                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 12457                           ;stkvar	_fObj @ sp[(-12)+4]
 12458   010EC4  0EFA               	movlw	250
 12459   010EC6  24E1               	addwf	fsr1l,w,c
 12460   010EC8  6ED9               	movwf	fsr2l,c
 12461   010ECA  0EFF               	movlw	255
 12462   010ECC  20E2               	addwfc	fsr1h,w,c
 12463   010ECE  6EDA               	movwf	fsr2h,c
 12464                           
 12465                           ;stkvar	_id @ sp[(-12)+-3]
 12466   010ED0  0EF1               	movlw	-15
 12467   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 12468   010ED6  0EF2               	movlw	-14
 12469   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 12470   010EDC  CFEE F032          	movff	postinc0,btemp+8
 12471   010EE0  CFEE F033          	movff	postinc0,btemp+9
 12472   010EE4  CFEE F034          	movff	postinc0,btemp+10
 12473   010EE8  CFEE F035          	movff	postinc0,btemp+11
 12474   010EEC  0E11               	movlw	17
 12475   010EEE  EF7E  F087         	goto	u2710
 12476   010EF2                     u2715:
 12477   010EF2  90D8               	bcf	status,0,c
 12478   010EF4  3235               	rrcf	(btemp+11)^0,f,c
 12479   010EF6  3234               	rrcf	(btemp+10)^0,f,c
 12480   010EF8  3233               	rrcf	(btemp+9)^0,f,c
 12481   010EFA  3232               	rrcf	(btemp+8)^0,f,c
 12482   010EFC                     u2710:
 12483   010EFC  2EE8               	decfsz	wreg,f,c
 12484   010EFE  EF79  F087         	goto	u2715
 12485   010F02  5032               	movf	(btemp+8)^0,w,c
 12486   010F04  6EDF               	movwf	indf2,c
 12487   010F06                     
 12488                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12489                           ;stkvar	_fObj @ sp[(-12)+4]
 12490   010F06  0EFB               	movlw	251
 12491   010F08  24E1               	addwf	fsr1l,w,c
 12492   010F0A  6ED9               	movwf	fsr2l,c
 12493   010F0C  0EFF               	movlw	255
 12494   010F0E  20E2               	addwfc	fsr1h,w,c
 12495   010F10  6EDA               	movwf	fsr2h,c
 12496                           
 12497                           ;stkvar	_id @ sp[(-12)+-3]
 12498   010F12  0EF1               	movlw	-15
 12499   010F14  CFE3 F034          	movff	plusw1,btemp+10
 12500   010F18  0EF2               	movlw	-14
 12501   010F1A  CFE3 F035          	movff	plusw1,btemp+11
 12502   010F1E  0E05               	movlw	5
 12503   010F20  2434               	addwf	(btemp+10)^0,w,c
 12504   010F22  6EE9               	movwf	fsr0l,c
 12505   010F24  0E00               	movlw	0
 12506   010F26  2035               	addwfc	(btemp+11)^0,w,c
 12507   010F28  6EEA               	movwf	fsr0h,c
 12508   010F2A  50EF               	movf	indf0,w,c
 12509   010F2C  6E35               	movwf	(btemp+11)^0,c
 12510   010F2E  0E06               	movlw	6
 12511   010F30  6E2A               	movwf	btemp^0,c
 12512   010F32                     u2725:
 12513   010F32  90D8               	bcf	status,0,c
 12514   010F34  3635               	rlcf	(btemp+11)^0,f,c
 12515   010F36  2E2A               	decfsz	btemp^0,f,c
 12516   010F38  EF99  F087         	goto	u2725
 12517                           
 12518                           ;stkvar	_id @ sp[(-12)+-3]
 12519   010F3C  0EF1               	movlw	-15
 12520   010F3E  CFE3 F032          	movff	plusw1,btemp+8
 12521   010F42  0EF2               	movlw	-14
 12522   010F44  CFE3 F033          	movff	plusw1,btemp+9
 12523   010F48  0E04               	movlw	4
 12524   010F4A  2432               	addwf	(btemp+8)^0,w,c
 12525   010F4C  6EE9               	movwf	fsr0l,c
 12526   010F4E  0E00               	movlw	0
 12527   010F50  2033               	addwfc	(btemp+9)^0,w,c
 12528   010F52  6EEA               	movwf	fsr0h,c
 12529   010F54  50EF               	movf	indf0,w,c
 12530   010F56  6E34               	movwf	(btemp+10)^0,c
 12531   010F58  0E05               	movlw	5
 12532   010F5A  6E2A               	movwf	btemp^0,c
 12533   010F5C                     u2735:
 12534   010F5C  90D8               	bcf	status,0,c
 12535   010F5E  3634               	rlcf	(btemp+10)^0,f,c
 12536   010F60  2E2A               	decfsz	btemp^0,f,c
 12537   010F62  EFAE  F087         	goto	u2735
 12538                           
 12539                           ;stkvar	_id @ sp[(-12)+-3]
 12540   010F66  0EF1               	movlw	-15
 12541   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 12542   010F6C  0EF2               	movlw	-14
 12543   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 12544   010F72  CFEE F02E          	movff	postinc0,btemp+4
 12545   010F76  CFEE F02F          	movff	postinc0,btemp+5
 12546   010F7A  CFEE F030          	movff	postinc0,btemp+6
 12547   010F7E  CFEE F031          	movff	postinc0,btemp+7
 12548   010F82  0E19               	movlw	25
 12549   010F84  EFC9  F087         	goto	u2740
 12550   010F88                     u2745:
 12551   010F88  90D8               	bcf	status,0,c
 12552   010F8A  3231               	rrcf	(btemp+7)^0,f,c
 12553   010F8C  3230               	rrcf	(btemp+6)^0,f,c
 12554   010F8E  322F               	rrcf	(btemp+5)^0,f,c
 12555   010F90  322E               	rrcf	(btemp+4)^0,f,c
 12556   010F92                     u2740:
 12557   010F92  2EE8               	decfsz	wreg,f,c
 12558   010F94  EFC4  F087         	goto	u2745
 12559   010F98  502E               	movf	(btemp+4)^0,w,c
 12560   010F9A  1034               	iorwf	(btemp+10)^0,w,c
 12561   010F9C  1035               	iorwf	(btemp+11)^0,w,c
 12562   010F9E  6EDF               	movwf	indf2,c
 12563                           
 12564                           ;can/can.c: 1017:     }
 12565   010FA0  EF97  F088         	goto	l5091
 12566   010FA4                     l5079:
 12567                           
 12568                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12569                           ;stkvar	_id @ sp[(-12)+-3]
 12570   010FA4  0EF1               	movlw	-15
 12571   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12572   010FAA  0EF2               	movlw	-14
 12573   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12574   010FB0  CFDE F032          	movff	postinc2,btemp+8
 12575   010FB4  CFDE F033          	movff	postinc2,btemp+9
 12576   010FB8  CFDE F034          	movff	postinc2,btemp+10
 12577   010FBC  CFDE F035          	movff	postinc2,btemp+11
 12578   010FC0  0E13               	movlw	19
 12579   010FC2  EFE8  F087         	goto	u2750
 12580   010FC6                     u2755:
 12581   010FC6  90D8               	bcf	status,0,c
 12582   010FC8  3235               	rrcf	(btemp+11)^0,f,c
 12583   010FCA  3234               	rrcf	(btemp+10)^0,f,c
 12584   010FCC  3233               	rrcf	(btemp+9)^0,f,c
 12585   010FCE  3232               	rrcf	(btemp+8)^0,f,c
 12586   010FD0                     u2750:
 12587   010FD0  2EE8               	decfsz	wreg,f,c
 12588   010FD2  EFE3  F087         	goto	u2755
 12589   010FD6  0EFF               	movlw	255
 12590   010FD8  1432               	andwf	(btemp+8)^0,w,c
 12591   010FDA  6E2E               	movwf	(btemp+4)^0,c
 12592   010FDC  0E07               	movlw	7
 12593   010FDE  1433               	andwf	(btemp+9)^0,w,c
 12594   010FE0  6E2F               	movwf	(btemp+5)^0,c
 12595   010FE2  0E00               	movlw	0
 12596   010FE4  1434               	andwf	(btemp+10)^0,w,c
 12597   010FE6  6E30               	movwf	(btemp+6)^0,c
 12598   010FE8  0E00               	movlw	0
 12599   010FEA  1435               	andwf	(btemp+11)^0,w,c
 12600   010FEC  6E31               	movwf	(btemp+7)^0,c
 12601                           
 12602                           ;stkvar	_id @ sp[(-12)+-3]
 12603   010FEE  0EF1               	movlw	-15
 12604   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12605   010FF4  0EF2               	movlw	-14
 12606   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12607   010FFA  0EFF               	movlw	255
 12608   010FFC  14DE               	andwf	postinc2,w,c
 12609   010FFE  6E32               	movwf	(btemp+8)^0,c
 12610   011000  0EFF               	movlw	255
 12611   011002  14DE               	andwf	postinc2,w,c
 12612   011004  6E33               	movwf	(btemp+9)^0,c
 12613   011006  0E03               	movlw	3
 12614   011008  14DE               	andwf	postinc2,w,c
 12615   01100A  6E34               	movwf	(btemp+10)^0,c
 12616   01100C  0E00               	movlw	0
 12617   01100E  14DE               	andwf	postinc2,w,c
 12618   011010  6E35               	movwf	(btemp+11)^0,c
 12619   011012  0E0B               	movlw	11
 12620   011014                     u2765:
 12621   011014  90D8               	bcf	status,0,c
 12622   011016  3632               	rlcf	(btemp+8)^0,f,c
 12623   011018  3633               	rlcf	(btemp+9)^0,f,c
 12624   01101A  3634               	rlcf	(btemp+10)^0,f,c
 12625   01101C  3635               	rlcf	(btemp+11)^0,f,c
 12626   01101E  2EE8               	decfsz	wreg,f,c
 12627   011020  EF0A  F088         	goto	u2765
 12628   011024  502E               	movf	(btemp+4)^0,w,c
 12629   011026  1032               	iorwf	(btemp+8)^0,w,c
 12630   011028  6E2A               	movwf	btemp^0,c
 12631   01102A  502F               	movf	(btemp+5)^0,w,c
 12632   01102C  1033               	iorwf	(btemp+9)^0,w,c
 12633   01102E  6E2B               	movwf	(btemp+1)^0,c
 12634   011030  5030               	movf	(btemp+6)^0,w,c
 12635   011032  1034               	iorwf	(btemp+10)^0,w,c
 12636   011034  6E2C               	movwf	(btemp+2)^0,c
 12637   011036  5031               	movf	(btemp+7)^0,w,c
 12638   011038  1035               	iorwf	(btemp+11)^0,w,c
 12639   01103A  6E2D               	movwf	(btemp+3)^0,c
 12640                           
 12641                           ;stkvar	_temp32 @ sp[(-12)+0]
 12642   01103C  0EF4               	movlw	-12
 12643   01103E  C02A  FFE3         	movff	btemp,plusw1
 12644   011042  0EF5               	movlw	-11
 12645   011044  C02B  FFE3         	movff	btemp+1,plusw1
 12646   011048  0EF6               	movlw	-10
 12647   01104A  C02C  FFE3         	movff	btemp+2,plusw1
 12648   01104E  0EF7               	movlw	-9
 12649   011050  C02D  FFE3         	movff	btemp+3,plusw1
 12650   011054                     
 12651                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12652                           ;stkvar	_temp32 @ sp[(-12)+0]
 12653   011054  50E1               	movf	fsr1l,w,c
 12654   011056  0FF4               	addlw	-12
 12655   011058  6ED9               	movwf	fsr2l,c
 12656   01105A  50E2               	movf	fsr1h,w,c
 12657   01105C  6EDA               	movwf	fsr2h,c
 12658   01105E  0EFF               	movlw	255
 12659   011060  22DA               	addwfc	fsr2h,f,c
 12660   011062  0EFF               	movlw	255
 12661   011064  16DE               	andwf	postinc2,f,c
 12662   011066  0EFF               	movlw	255
 12663   011068  16DE               	andwf	postinc2,f,c
 12664   01106A  0EFF               	movlw	255
 12665   01106C  16DE               	andwf	postinc2,f,c
 12666   01106E  0E1F               	movlw	31
 12667   011070  16DE               	andwf	postinc2,f,c
 12668   011072                     
 12669                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12670                           ;stkvar	_temp32 @ sp[(-12)+0]
 12671                           ;stkvar	_fObj @ sp[(-12)+4]
 12672   011072  0EF4               	movlw	-12
 12673   011074  CFE3 F02A          	movff	plusw1,btemp
 12674   011078  0EF8               	movlw	-8
 12675   01107A  C02A  FFE3         	movff	btemp,plusw1
 12676   01107E                     
 12677                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12678                           ;stkvar	_temp32 @ sp[(-12)+0]
 12679   01107E  0EF5               	movlw	245
 12680   011080  24E1               	addwf	fsr1l,w,c
 12681   011082  6ED9               	movwf	fsr2l,c
 12682   011084  0EFF               	movlw	255
 12683   011086  20E2               	addwfc	fsr1h,w,c
 12684   011088  6EDA               	movwf	fsr2h,c
 12685                           
 12686                           ;stkvar	_fObj @ sp[(-12)+4]
 12687   01108A  0EF9               	movlw	249
 12688   01108C  24E1               	addwf	fsr1l,w,c
 12689   01108E  6EE9               	movwf	fsr0l,c
 12690   011090  0EFF               	movlw	255
 12691   011092  20E2               	addwfc	fsr1h,w,c
 12692   011094  6EEA               	movwf	fsr0h,c
 12693   011096  CFDF FFEF          	movff	indf2,indf0
 12694   01109A                     
 12695                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12696                           ;stkvar	_temp32 @ sp[(-12)+0]
 12697   01109A  0EF6               	movlw	246
 12698   01109C  24E1               	addwf	fsr1l,w,c
 12699   01109E  6ED9               	movwf	fsr2l,c
 12700   0110A0  0EFF               	movlw	255
 12701   0110A2  20E2               	addwfc	fsr1h,w,c
 12702   0110A4  6EDA               	movwf	fsr2h,c
 12703                           
 12704                           ;stkvar	_fObj @ sp[(-12)+4]
 12705   0110A6  0EFA               	movlw	250
 12706   0110A8  24E1               	addwf	fsr1l,w,c
 12707   0110AA  6EE9               	movwf	fsr0l,c
 12708   0110AC  0EFF               	movlw	255
 12709   0110AE  20E2               	addwfc	fsr1h,w,c
 12710   0110B0  6EEA               	movwf	fsr0h,c
 12711   0110B2  CFDF FFEF          	movff	indf2,indf0
 12712   0110B6                     
 12713                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12714                           ;stkvar	_fObj @ sp[(-12)+4]
 12715   0110B6  0EFB               	movlw	251
 12716   0110B8  24E1               	addwf	fsr1l,w,c
 12717   0110BA  6ED9               	movwf	fsr2l,c
 12718   0110BC  0EFF               	movlw	255
 12719   0110BE  20E2               	addwfc	fsr1h,w,c
 12720   0110C0  6EDA               	movwf	fsr2h,c
 12721                           
 12722                           ;stkvar	_temp32 @ sp[(-12)+0]
 12723   0110C2  0EF7               	movlw	247
 12724   0110C4  24E1               	addwf	fsr1l,w,c
 12725   0110C6  6EE9               	movwf	fsr0l,c
 12726   0110C8  0EFF               	movlw	255
 12727   0110CA  20E2               	addwfc	fsr1h,w,c
 12728   0110CC  6EEA               	movwf	fsr0h,c
 12729   0110CE  50EF               	movf	indf0,w,c
 12730   0110D0  6E35               	movwf	(btemp+11)^0,c
 12731                           
 12732                           ;stkvar	_id @ sp[(-12)+-3]
 12733   0110D2  0EF1               	movlw	-15
 12734   0110D4  CFE3 F032          	movff	plusw1,btemp+8
 12735   0110D8  0EF2               	movlw	-14
 12736   0110DA  CFE3 F033          	movff	plusw1,btemp+9
 12737   0110DE  0E05               	movlw	5
 12738   0110E0  2432               	addwf	(btemp+8)^0,w,c
 12739   0110E2  6EE9               	movwf	fsr0l,c
 12740   0110E4  0E00               	movlw	0
 12741   0110E6  2033               	addwfc	(btemp+9)^0,w,c
 12742   0110E8  6EEA               	movwf	fsr0h,c
 12743   0110EA  50EF               	movf	indf0,w,c
 12744   0110EC  6E34               	movwf	(btemp+10)^0,c
 12745   0110EE  0E06               	movlw	6
 12746   0110F0  6E2A               	movwf	btemp^0,c
 12747   0110F2                     u2775:
 12748   0110F2  90D8               	bcf	status,0,c
 12749   0110F4  3634               	rlcf	(btemp+10)^0,f,c
 12750   0110F6  2E2A               	decfsz	btemp^0,f,c
 12751   0110F8  EF79  F088         	goto	u2775
 12752                           
 12753                           ;stkvar	_id @ sp[(-12)+-3]
 12754   0110FC  0EF1               	movlw	-15
 12755   0110FE  CFE3 F032          	movff	plusw1,btemp+8
 12756   011102  0EF2               	movlw	-14
 12757   011104  CFE3 F033          	movff	plusw1,btemp+9
 12758   011108  0E04               	movlw	4
 12759   01110A  2432               	addwf	(btemp+8)^0,w,c
 12760   01110C  6EE9               	movwf	fsr0l,c
 12761   01110E  0E00               	movlw	0
 12762   011110  2033               	addwfc	(btemp+9)^0,w,c
 12763   011112  6EEA               	movwf	fsr0h,c
 12764   011114  50EF               	movf	indf0,w,c
 12765   011116  6E33               	movwf	(btemp+9)^0,c
 12766   011118  0E05               	movlw	5
 12767   01111A  6E2A               	movwf	btemp^0,c
 12768   01111C                     u2785:
 12769   01111C  90D8               	bcf	status,0,c
 12770   01111E  3633               	rlcf	(btemp+9)^0,f,c
 12771   011120  2E2A               	decfsz	btemp^0,f,c
 12772   011122  EF8E  F088         	goto	u2785
 12773   011126  5033               	movf	(btemp+9)^0,w,c
 12774   011128  1034               	iorwf	(btemp+10)^0,w,c
 12775   01112A  1035               	iorwf	(btemp+11)^0,w,c
 12776   01112C  6EDF               	movwf	indf2,c
 12777   01112E                     l5091:
 12778                           
 12779                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12780                           ;stkvar	_filter @ sp[(-12)+-1]
 12781   01112E  0EF3               	movlw	-13
 12782   011130  50E3               	movf	plusw1,w,c
 12783   011132  0D08               	mullw	8
 12784   011134  CFF3 F034          	movff	prodl,btemp+10
 12785   011138  CFF4 F035          	movff	prodh,btemp+11
 12786   01113C  0EF0               	movlw	240
 12787   01113E  2434               	addwf	(btemp+10)^0,w,c
 12788   011140  6E32               	movwf	(btemp+8)^0,c
 12789   011142  0E01               	movlw	1
 12790   011144  2035               	addwfc	(btemp+11)^0,w,c
 12791   011146  6E33               	movwf	(btemp+9)^0,c
 12792                           
 12793                           ;stkvar	_a @ sp[(-12)+10]
 12794   011148  0EFE               	movlw	-2
 12795   01114A  C032  FFE3         	movff	btemp+8,plusw1
 12796   01114E  0EFF               	movlw	-1
 12797   011150  C033  FFE3         	movff	btemp+9,plusw1
 12798   011154                     
 12799                           ;stkvar	_fObj @ sp[(-12)+4]
 12800   011154  0EF8               	movlw	-8
 12801   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12802   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12803   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12804   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12805                           
 12806                           ;stkvar	_a @ sp[(-16)+10]
 12807   011166  0EFA               	movlw	-6
 12808   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12809   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12810   011170  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12811   011174                     
 12812                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12813   011174  0EF1               	movlw	241
 12814   011176  26E1               	addwf	fsr1l,f,c
 12815   011178  0EFF               	movlw	255
 12816   01117A  22E2               	addwfc	fsr1h,f,c
 12817   01117C  0012               	return		;funcret
 12818   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12819                           	callstack 0
 12820                           
 12821 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12822 ;; Defined at:
 12823 ;;		line 1035 in file "can/can.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  filter          1  [STACK] enum E5322
 12826 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12827 ;;		 -> maskObj(6), 
 12828 ;;  EXIDE           1  [STACK] unsigned char 
 12829 ;; Auto vars:     Size  Location     Type
 12830 ;;  temp32          4  [STACK] unsigned long 
 12831 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12832 ;;  a               2  [STACK] unsigned short 
 12833 ;;  spiTransferE    1    0        char 
 12834 ;; Return value:  Size  Location     Type
 12835 ;;                  1  [STACK] char 
 12836 ;; Registers used:
 12837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12838 ;; Tracked objects:
 12839 ;;		On entry : 0/0
 12840 ;;		On exit  : 0/0
 12841 ;;		Unchanged: 0/0
 12842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12847 ;;Total ram usage:        0 bytes
 12848 ;; Hardware stack levels used: 1
 12849 ;; Hardware stack levels required when called: 9
 12850 ;; This function calls:
 12851 ;;		_DRV_CANFDSPI_WriteWord
 12852 ;; This function is called by:
 12853 ;;		_CanSetFilter
 12854 ;; This function uses a reentrant model
 12855 ;;
 12856                           
 12857                           	psect	text46
 12858   01117E                     __ptext46:
 12859                           	callstack 0
 12860   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12861                           	callstack 0
 12862                           
 12863                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12864   01117E  0E0C               	movlw	12
 12865   011180  26E1               	addwf	fsr1l,f,c
 12866   011182  0E00               	movlw	0
 12867   011184  22E2               	addwfc	fsr1h,f,c
 12868   011186                     
 12869                           ;can/can.c: 1043:     mObj.word = 0;
 12870                           ;stkvar	_mObj @ sp[(-12)+4]
 12871   011186  0EF8               	movlw	-8
 12872   011188  6AE3               	clrf	plusw1,c
 12873   01118A  0EF9               	movlw	-7
 12874   01118C  6AE3               	clrf	plusw1,c
 12875   01118E  0EFA               	movlw	-6
 12876   011190  6AE3               	clrf	plusw1,c
 12877   011192  0EFB               	movlw	-5
 12878   011194  6AE3               	clrf	plusw1,c
 12879   011196                     
 12880                           ;can/can.c: 1047:     if(EXIDE == 0)
 12881                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12882   011196  0EF0               	movlw	-16
 12883   011198  50E3               	movf	plusw1,w,c
 12884   01119A  A4D8               	btfss	status,2,c
 12885   01119C  EFD2  F088         	goto	u2791
 12886   0111A0  EFD4  F088         	goto	u2790
 12887   0111A4                     u2791:
 12888   0111A4  EF6C  F089         	goto	l5111
 12889   0111A8                     u2790:
 12890   0111A8                     
 12891                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12892                           ;stkvar	_mask @ sp[(-12)+-3]
 12893   0111A8  0EF1               	movlw	-15
 12894   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12895   0111AE  0EF2               	movlw	-14
 12896   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12897   0111B4  50DF               	movf	indf2,w,c
 12898   0111B6  6E35               	movwf	(btemp+11)^0,c
 12899                           
 12900                           ;stkvar	_mObj @ sp[(-12)+4]
 12901   0111B8  0EF8               	movlw	-8
 12902   0111BA  C035  FFE3         	movff	btemp+11,plusw1
 12903   0111BE                     
 12904                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12905                           ;stkvar	_mObj @ sp[(-12)+4]
 12906   0111BE  0EF9               	movlw	249
 12907   0111C0  24E1               	addwf	fsr1l,w,c
 12908   0111C2  6ED9               	movwf	fsr2l,c
 12909   0111C4  0EFF               	movlw	255
 12910   0111C6  20E2               	addwfc	fsr1h,w,c
 12911   0111C8  6EDA               	movwf	fsr2h,c
 12912                           
 12913                           ;stkvar	_mask @ sp[(-12)+-3]
 12914   0111CA  0EF1               	movlw	-15
 12915   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12916   0111D0  0EF2               	movlw	-14
 12917   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12918   0111D6  CFEE F032          	movff	postinc0,btemp+8
 12919   0111DA  CFEE F033          	movff	postinc0,btemp+9
 12920   0111DE  CFEE F034          	movff	postinc0,btemp+10
 12921   0111E2  CFEE F035          	movff	postinc0,btemp+11
 12922   0111E6  C033  F032         	movff	btemp+9,btemp+8
 12923   0111EA  C034  F033         	movff	btemp+10,btemp+9
 12924   0111EE  C035  F034         	movff	btemp+11,btemp+10
 12925   0111F2  6A35               	clrf	(btemp+11)^0,c
 12926   0111F4  5032               	movf	(btemp+8)^0,w,c
 12927   0111F6  6EDF               	movwf	indf2,c
 12928   0111F8                     
 12929                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12930                           ;stkvar	_mObj @ sp[(-12)+4]
 12931   0111F8  0EFA               	movlw	250
 12932   0111FA  24E1               	addwf	fsr1l,w,c
 12933   0111FC  6ED9               	movwf	fsr2l,c
 12934   0111FE  0EFF               	movlw	255
 12935   011200  20E2               	addwfc	fsr1h,w,c
 12936   011202  6EDA               	movwf	fsr2h,c
 12937                           
 12938                           ;stkvar	_mask @ sp[(-12)+-3]
 12939   011204  0EF1               	movlw	-15
 12940   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12941   01120A  0EF2               	movlw	-14
 12942   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12943   011210  CFEE F032          	movff	postinc0,btemp+8
 12944   011214  CFEE F033          	movff	postinc0,btemp+9
 12945   011218  CFEE F034          	movff	postinc0,btemp+10
 12946   01121C  CFEE F035          	movff	postinc0,btemp+11
 12947   011220  0E11               	movlw	17
 12948   011222  EF18  F089         	goto	u2800
 12949   011226                     u2805:
 12950   011226  90D8               	bcf	status,0,c
 12951   011228  3235               	rrcf	(btemp+11)^0,f,c
 12952   01122A  3234               	rrcf	(btemp+10)^0,f,c
 12953   01122C  3233               	rrcf	(btemp+9)^0,f,c
 12954   01122E  3232               	rrcf	(btemp+8)^0,f,c
 12955   011230                     u2800:
 12956   011230  2EE8               	decfsz	wreg,f,c
 12957   011232  EF13  F089         	goto	u2805
 12958   011236  5032               	movf	(btemp+8)^0,w,c
 12959   011238  6EDF               	movwf	indf2,c
 12960   01123A                     
 12961                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12962                           ;stkvar	_mObj @ sp[(-12)+4]
 12963   01123A  0EFB               	movlw	251
 12964   01123C  24E1               	addwf	fsr1l,w,c
 12965   01123E  6ED9               	movwf	fsr2l,c
 12966   011240  0EFF               	movlw	255
 12967   011242  20E2               	addwfc	fsr1h,w,c
 12968   011244  6EDA               	movwf	fsr2h,c
 12969                           
 12970                           ;stkvar	_mask @ sp[(-12)+-3]
 12971   011246  0EF1               	movlw	-15
 12972   011248  CFE3 F034          	movff	plusw1,btemp+10
 12973   01124C  0EF2               	movlw	-14
 12974   01124E  CFE3 F035          	movff	plusw1,btemp+11
 12975   011252  0E05               	movlw	5
 12976   011254  2434               	addwf	(btemp+10)^0,w,c
 12977   011256  6EE9               	movwf	fsr0l,c
 12978   011258  0E00               	movlw	0
 12979   01125A  2035               	addwfc	(btemp+11)^0,w,c
 12980   01125C  6EEA               	movwf	fsr0h,c
 12981   01125E  50EF               	movf	indf0,w,c
 12982   011260  6E35               	movwf	(btemp+11)^0,c
 12983   011262  0E06               	movlw	6
 12984   011264  6E2A               	movwf	btemp^0,c
 12985   011266                     u2815:
 12986   011266  90D8               	bcf	status,0,c
 12987   011268  3635               	rlcf	(btemp+11)^0,f,c
 12988   01126A  2E2A               	decfsz	btemp^0,f,c
 12989   01126C  EF33  F089         	goto	u2815
 12990                           
 12991                           ;stkvar	_mask @ sp[(-12)+-3]
 12992   011270  0EF1               	movlw	-15
 12993   011272  CFE3 F032          	movff	plusw1,btemp+8
 12994   011276  0EF2               	movlw	-14
 12995   011278  CFE3 F033          	movff	plusw1,btemp+9
 12996   01127C  0E04               	movlw	4
 12997   01127E  2432               	addwf	(btemp+8)^0,w,c
 12998   011280  6EE9               	movwf	fsr0l,c
 12999   011282  0E00               	movlw	0
 13000   011284  2033               	addwfc	(btemp+9)^0,w,c
 13001   011286  6EEA               	movwf	fsr0h,c
 13002   011288  50EF               	movf	indf0,w,c
 13003   01128A  6E34               	movwf	(btemp+10)^0,c
 13004   01128C  0E05               	movlw	5
 13005   01128E  6E2A               	movwf	btemp^0,c
 13006   011290                     u2825:
 13007   011290  90D8               	bcf	status,0,c
 13008   011292  3634               	rlcf	(btemp+10)^0,f,c
 13009   011294  2E2A               	decfsz	btemp^0,f,c
 13010   011296  EF48  F089         	goto	u2825
 13011                           
 13012                           ;stkvar	_mask @ sp[(-12)+-3]
 13013   01129A  0EF1               	movlw	-15
 13014   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 13015   0112A0  0EF2               	movlw	-14
 13016   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 13017   0112A6  CFEE F02E          	movff	postinc0,btemp+4
 13018   0112AA  CFEE F02F          	movff	postinc0,btemp+5
 13019   0112AE  CFEE F030          	movff	postinc0,btemp+6
 13020   0112B2  CFEE F031          	movff	postinc0,btemp+7
 13021   0112B6  0E19               	movlw	25
 13022   0112B8  EF63  F089         	goto	u2830
 13023   0112BC                     u2835:
 13024   0112BC  90D8               	bcf	status,0,c
 13025   0112BE  3231               	rrcf	(btemp+7)^0,f,c
 13026   0112C0  3230               	rrcf	(btemp+6)^0,f,c
 13027   0112C2  322F               	rrcf	(btemp+5)^0,f,c
 13028   0112C4  322E               	rrcf	(btemp+4)^0,f,c
 13029   0112C6                     u2830:
 13030   0112C6  2EE8               	decfsz	wreg,f,c
 13031   0112C8  EF5E  F089         	goto	u2835
 13032   0112CC  502E               	movf	(btemp+4)^0,w,c
 13033   0112CE  1034               	iorwf	(btemp+10)^0,w,c
 13034   0112D0  1035               	iorwf	(btemp+11)^0,w,c
 13035   0112D2  6EDF               	movwf	indf2,c
 13036                           
 13037                           ;can/can.c: 1053:     }
 13038   0112D4  EF31  F08A         	goto	l5123
 13039   0112D8                     l5111:
 13040                           
 13041                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 13042                           ;stkvar	_mask @ sp[(-12)+-3]
 13043   0112D8  0EF1               	movlw	-15
 13044   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 13045   0112DE  0EF2               	movlw	-14
 13046   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 13047   0112E4  CFDE F032          	movff	postinc2,btemp+8
 13048   0112E8  CFDE F033          	movff	postinc2,btemp+9
 13049   0112EC  CFDE F034          	movff	postinc2,btemp+10
 13050   0112F0  CFDE F035          	movff	postinc2,btemp+11
 13051   0112F4  0E13               	movlw	19
 13052   0112F6  EF82  F089         	goto	u2840
 13053   0112FA                     u2845:
 13054   0112FA  90D8               	bcf	status,0,c
 13055   0112FC  3235               	rrcf	(btemp+11)^0,f,c
 13056   0112FE  3234               	rrcf	(btemp+10)^0,f,c
 13057   011300  3233               	rrcf	(btemp+9)^0,f,c
 13058   011302  3232               	rrcf	(btemp+8)^0,f,c
 13059   011304                     u2840:
 13060   011304  2EE8               	decfsz	wreg,f,c
 13061   011306  EF7D  F089         	goto	u2845
 13062   01130A  0EFF               	movlw	255
 13063   01130C  1432               	andwf	(btemp+8)^0,w,c
 13064   01130E  6E2E               	movwf	(btemp+4)^0,c
 13065   011310  0E07               	movlw	7
 13066   011312  1433               	andwf	(btemp+9)^0,w,c
 13067   011314  6E2F               	movwf	(btemp+5)^0,c
 13068   011316  0E00               	movlw	0
 13069   011318  1434               	andwf	(btemp+10)^0,w,c
 13070   01131A  6E30               	movwf	(btemp+6)^0,c
 13071   01131C  0E00               	movlw	0
 13072   01131E  1435               	andwf	(btemp+11)^0,w,c
 13073   011320  6E31               	movwf	(btemp+7)^0,c
 13074                           
 13075                           ;stkvar	_mask @ sp[(-12)+-3]
 13076   011322  0EF1               	movlw	-15
 13077   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 13078   011328  0EF2               	movlw	-14
 13079   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 13080   01132E  0EFF               	movlw	255
 13081   011330  14DE               	andwf	postinc2,w,c
 13082   011332  6E32               	movwf	(btemp+8)^0,c
 13083   011334  0EFF               	movlw	255
 13084   011336  14DE               	andwf	postinc2,w,c
 13085   011338  6E33               	movwf	(btemp+9)^0,c
 13086   01133A  0E03               	movlw	3
 13087   01133C  14DE               	andwf	postinc2,w,c
 13088   01133E  6E34               	movwf	(btemp+10)^0,c
 13089   011340  0E00               	movlw	0
 13090   011342  14DE               	andwf	postinc2,w,c
 13091   011344  6E35               	movwf	(btemp+11)^0,c
 13092   011346  0E0B               	movlw	11
 13093   011348                     u2855:
 13094   011348  90D8               	bcf	status,0,c
 13095   01134A  3632               	rlcf	(btemp+8)^0,f,c
 13096   01134C  3633               	rlcf	(btemp+9)^0,f,c
 13097   01134E  3634               	rlcf	(btemp+10)^0,f,c
 13098   011350  3635               	rlcf	(btemp+11)^0,f,c
 13099   011352  2EE8               	decfsz	wreg,f,c
 13100   011354  EFA4  F089         	goto	u2855
 13101   011358  502E               	movf	(btemp+4)^0,w,c
 13102   01135A  1032               	iorwf	(btemp+8)^0,w,c
 13103   01135C  6E2A               	movwf	btemp^0,c
 13104   01135E  502F               	movf	(btemp+5)^0,w,c
 13105   011360  1033               	iorwf	(btemp+9)^0,w,c
 13106   011362  6E2B               	movwf	(btemp+1)^0,c
 13107   011364  5030               	movf	(btemp+6)^0,w,c
 13108   011366  1034               	iorwf	(btemp+10)^0,w,c
 13109   011368  6E2C               	movwf	(btemp+2)^0,c
 13110   01136A  5031               	movf	(btemp+7)^0,w,c
 13111   01136C  1035               	iorwf	(btemp+11)^0,w,c
 13112   01136E  6E2D               	movwf	(btemp+3)^0,c
 13113                           
 13114                           ;stkvar	_temp32 @ sp[(-12)+0]
 13115   011370  0EF4               	movlw	-12
 13116   011372  C02A  FFE3         	movff	btemp,plusw1
 13117   011376  0EF5               	movlw	-11
 13118   011378  C02B  FFE3         	movff	btemp+1,plusw1
 13119   01137C  0EF6               	movlw	-10
 13120   01137E  C02C  FFE3         	movff	btemp+2,plusw1
 13121   011382  0EF7               	movlw	-9
 13122   011384  C02D  FFE3         	movff	btemp+3,plusw1
 13123   011388                     
 13124                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 13125                           ;stkvar	_temp32 @ sp[(-12)+0]
 13126   011388  50E1               	movf	fsr1l,w,c
 13127   01138A  0FF4               	addlw	-12
 13128   01138C  6ED9               	movwf	fsr2l,c
 13129   01138E  50E2               	movf	fsr1h,w,c
 13130   011390  6EDA               	movwf	fsr2h,c
 13131   011392  0EFF               	movlw	255
 13132   011394  22DA               	addwfc	fsr2h,f,c
 13133   011396  0EFF               	movlw	255
 13134   011398  16DE               	andwf	postinc2,f,c
 13135   01139A  0EFF               	movlw	255
 13136   01139C  16DE               	andwf	postinc2,f,c
 13137   01139E  0EFF               	movlw	255
 13138   0113A0  16DE               	andwf	postinc2,f,c
 13139   0113A2  0E1F               	movlw	31
 13140   0113A4  16DE               	andwf	postinc2,f,c
 13141   0113A6                     
 13142                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 13143                           ;stkvar	_temp32 @ sp[(-12)+0]
 13144                           ;stkvar	_mObj @ sp[(-12)+4]
 13145   0113A6  0EF4               	movlw	-12
 13146   0113A8  CFE3 F02A          	movff	plusw1,btemp
 13147   0113AC  0EF8               	movlw	-8
 13148   0113AE  C02A  FFE3         	movff	btemp,plusw1
 13149   0113B2                     
 13150                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 13151                           ;stkvar	_temp32 @ sp[(-12)+0]
 13152   0113B2  0EF5               	movlw	245
 13153   0113B4  24E1               	addwf	fsr1l,w,c
 13154   0113B6  6ED9               	movwf	fsr2l,c
 13155   0113B8  0EFF               	movlw	255
 13156   0113BA  20E2               	addwfc	fsr1h,w,c
 13157   0113BC  6EDA               	movwf	fsr2h,c
 13158                           
 13159                           ;stkvar	_mObj @ sp[(-12)+4]
 13160   0113BE  0EF9               	movlw	249
 13161   0113C0  24E1               	addwf	fsr1l,w,c
 13162   0113C2  6EE9               	movwf	fsr0l,c
 13163   0113C4  0EFF               	movlw	255
 13164   0113C6  20E2               	addwfc	fsr1h,w,c
 13165   0113C8  6EEA               	movwf	fsr0h,c
 13166   0113CA  CFDF FFEF          	movff	indf2,indf0
 13167   0113CE                     
 13168                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 13169                           ;stkvar	_temp32 @ sp[(-12)+0]
 13170   0113CE  0EF6               	movlw	246
 13171   0113D0  24E1               	addwf	fsr1l,w,c
 13172   0113D2  6ED9               	movwf	fsr2l,c
 13173   0113D4  0EFF               	movlw	255
 13174   0113D6  20E2               	addwfc	fsr1h,w,c
 13175   0113D8  6EDA               	movwf	fsr2h,c
 13176                           
 13177                           ;stkvar	_mObj @ sp[(-12)+4]
 13178   0113DA  0EFA               	movlw	250
 13179   0113DC  24E1               	addwf	fsr1l,w,c
 13180   0113DE  6EE9               	movwf	fsr0l,c
 13181   0113E0  0EFF               	movlw	255
 13182   0113E2  20E2               	addwfc	fsr1h,w,c
 13183   0113E4  6EEA               	movwf	fsr0h,c
 13184   0113E6  CFDF FFEF          	movff	indf2,indf0
 13185   0113EA                     
 13186                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 13187                           ;stkvar	_mObj @ sp[(-12)+4]
 13188   0113EA  0EFB               	movlw	251
 13189   0113EC  24E1               	addwf	fsr1l,w,c
 13190   0113EE  6ED9               	movwf	fsr2l,c
 13191   0113F0  0EFF               	movlw	255
 13192   0113F2  20E2               	addwfc	fsr1h,w,c
 13193   0113F4  6EDA               	movwf	fsr2h,c
 13194                           
 13195                           ;stkvar	_temp32 @ sp[(-12)+0]
 13196   0113F6  0EF7               	movlw	247
 13197   0113F8  24E1               	addwf	fsr1l,w,c
 13198   0113FA  6EE9               	movwf	fsr0l,c
 13199   0113FC  0EFF               	movlw	255
 13200   0113FE  20E2               	addwfc	fsr1h,w,c
 13201   011400  6EEA               	movwf	fsr0h,c
 13202   011402  50EF               	movf	indf0,w,c
 13203   011404  6E35               	movwf	(btemp+11)^0,c
 13204                           
 13205                           ;stkvar	_mask @ sp[(-12)+-3]
 13206   011406  0EF1               	movlw	-15
 13207   011408  CFE3 F032          	movff	plusw1,btemp+8
 13208   01140C  0EF2               	movlw	-14
 13209   01140E  CFE3 F033          	movff	plusw1,btemp+9
 13210   011412  0E05               	movlw	5
 13211   011414  2432               	addwf	(btemp+8)^0,w,c
 13212   011416  6EE9               	movwf	fsr0l,c
 13213   011418  0E00               	movlw	0
 13214   01141A  2033               	addwfc	(btemp+9)^0,w,c
 13215   01141C  6EEA               	movwf	fsr0h,c
 13216   01141E  50EF               	movf	indf0,w,c
 13217   011420  6E34               	movwf	(btemp+10)^0,c
 13218   011422  0E06               	movlw	6
 13219   011424  6E2A               	movwf	btemp^0,c
 13220   011426                     u2865:
 13221   011426  90D8               	bcf	status,0,c
 13222   011428  3634               	rlcf	(btemp+10)^0,f,c
 13223   01142A  2E2A               	decfsz	btemp^0,f,c
 13224   01142C  EF13  F08A         	goto	u2865
 13225                           
 13226                           ;stkvar	_mask @ sp[(-12)+-3]
 13227   011430  0EF1               	movlw	-15
 13228   011432  CFE3 F032          	movff	plusw1,btemp+8
 13229   011436  0EF2               	movlw	-14
 13230   011438  CFE3 F033          	movff	plusw1,btemp+9
 13231   01143C  0E04               	movlw	4
 13232   01143E  2432               	addwf	(btemp+8)^0,w,c
 13233   011440  6EE9               	movwf	fsr0l,c
 13234   011442  0E00               	movlw	0
 13235   011444  2033               	addwfc	(btemp+9)^0,w,c
 13236   011446  6EEA               	movwf	fsr0h,c
 13237   011448  50EF               	movf	indf0,w,c
 13238   01144A  6E33               	movwf	(btemp+9)^0,c
 13239   01144C  0E05               	movlw	5
 13240   01144E  6E2A               	movwf	btemp^0,c
 13241   011450                     u2875:
 13242   011450  90D8               	bcf	status,0,c
 13243   011452  3633               	rlcf	(btemp+9)^0,f,c
 13244   011454  2E2A               	decfsz	btemp^0,f,c
 13245   011456  EF28  F08A         	goto	u2875
 13246   01145A  5033               	movf	(btemp+9)^0,w,c
 13247   01145C  1034               	iorwf	(btemp+10)^0,w,c
 13248   01145E  1035               	iorwf	(btemp+11)^0,w,c
 13249   011460  6EDF               	movwf	indf2,c
 13250   011462                     l5123:
 13251                           
 13252                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 13253                           ;stkvar	_filter @ sp[(-12)+-1]
 13254   011462  0EF3               	movlw	-13
 13255   011464  50E3               	movf	plusw1,w,c
 13256   011466  0D08               	mullw	8
 13257   011468  CFF3 F034          	movff	prodl,btemp+10
 13258   01146C  CFF4 F035          	movff	prodh,btemp+11
 13259   011470  0EF4               	movlw	244
 13260   011472  2434               	addwf	(btemp+10)^0,w,c
 13261   011474  6E32               	movwf	(btemp+8)^0,c
 13262   011476  0E01               	movlw	1
 13263   011478  2035               	addwfc	(btemp+11)^0,w,c
 13264   01147A  6E33               	movwf	(btemp+9)^0,c
 13265                           
 13266                           ;stkvar	_a @ sp[(-12)+10]
 13267   01147C  0EFE               	movlw	-2
 13268   01147E  C032  FFE3         	movff	btemp+8,plusw1
 13269   011482  0EFF               	movlw	-1
 13270   011484  C033  FFE3         	movff	btemp+9,plusw1
 13271   011488                     
 13272                           ;stkvar	_mObj @ sp[(-12)+4]
 13273   011488  0EF8               	movlw	-8
 13274   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 13275   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 13276   011492  CFE3 FFE6          	movff	plusw1,postinc1
 13277   011496  CFE3 FFE6          	movff	plusw1,postinc1
 13278                           
 13279                           ;stkvar	_a @ sp[(-16)+10]
 13280   01149A  0EFA               	movlw	-6
 13281   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 13282   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 13283   0114A4  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13284   0114A8                     
 13285                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 13286   0114A8  0EF0               	movlw	240
 13287   0114AA  26E1               	addwf	fsr1l,f,c
 13288   0114AC  0EFF               	movlw	255
 13289   0114AE  22E2               	addwfc	fsr1h,f,c
 13290   0114B0  0012               	return		;funcret
 13291   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 13292                           	callstack 0
 13293                           
 13294 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 13295 ;; Defined at:
 13296 ;;		line 1121 in file "can/can.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  filter          1  [STACK] enum E5322
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  a               2  [STACK] unsigned short 
 13301 ;;  spiTransferE    1  [STACK] char 
 13302 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 13303 ;; Return value:  Size  Location     Type
 13304 ;;                  1  [STACK] char 
 13305 ;; Registers used:
 13306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;Total ram usage:        0 bytes
 13317 ;; Hardware stack levels used: 1
 13318 ;; Hardware stack levels required when called: 9
 13319 ;; This function calls:
 13320 ;;		_DRV_CANFDSPI_ReadByte
 13321 ;;		_DRV_CANFDSPI_WriteByte
 13322 ;; This function is called by:
 13323 ;;		_CanSetFilter
 13324 ;; This function uses a reentrant model
 13325 ;;
 13326                           
 13327                           	psect	text47
 13328   0144CA                     __ptext47:
 13329                           	callstack 0
 13330   0144CA                     _DRV_CANFDSPI_FilterDisable:
 13331                           	callstack 0
 13332                           
 13333                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13334   0144CA  52E6               	movf	postinc1,f,c
 13335   0144CC  52E6               	movf	postinc1,f,c
 13336   0144CE  52E6               	movf	postinc1,f,c
 13337   0144D0  52E6               	movf	postinc1,f,c
 13338   0144D2                     
 13339                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 13340                           ;stkvar	_filter @ sp[(-4)+-1]
 13341   0144D2  0EFB               	movlw	-5
 13342   0144D4  CFE3 F035          	movff	plusw1,btemp+11
 13343   0144D8  0ED0               	movlw	208
 13344   0144DA  2435               	addwf	(btemp+11)^0,w,c
 13345   0144DC  6E32               	movwf	(btemp+8)^0,c
 13346   0144DE  6A33               	clrf	(btemp+9)^0,c
 13347   0144E0  0E01               	movlw	1
 13348   0144E2  2233               	addwfc	(btemp+9)^0,f,c
 13349                           
 13350                           ;stkvar	_a @ sp[(-4)+0]
 13351   0144E4  0EFC               	movlw	-4
 13352   0144E6  C032  FFE3         	movff	btemp+8,plusw1
 13353   0144EA  0EFD               	movlw	-3
 13354   0144EC  C033  FFE3         	movff	btemp+9,plusw1
 13355   0144F0                     
 13356                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 13357                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13358   0144F0  0EFF               	movlw	255
 13359   0144F2  24E1               	addwf	fsr1l,w,c
 13360   0144F4  6E2A               	movwf	btemp^0,c
 13361   0144F6  0EFF               	movlw	255
 13362   0144F8  20E2               	addwfc	fsr1h,w,c
 13363   0144FA  6E2B               	movwf	(btemp+1)^0,c
 13364   0144FC  C02A  FFE6         	movff	btemp,postinc1
 13365   014500  C02B  FFE6         	movff	btemp+1,postinc1
 13366                           
 13367                           ;stkvar	_a @ sp[(-6)+0]
 13368   014504  0EFA               	movlw	-6
 13369   014506  CFE3 FFE6          	movff	plusw1,postinc1
 13370   01450A  CFE3 FFE6          	movff	plusw1,postinc1
 13371   01450E  EC40  F0A4         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 13372                           
 13373                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 13374   014512  0EFE               	movlw	-2
 13375   014514  C02A  FFE3         	movff	btemp,plusw1
 13376   014518                     
 13377                           ;can/can.c: 1131:     if (spiTransferError) {
 13378                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 13379   014518  0EFE               	movlw	-2
 13380   01451A  50E3               	movf	plusw1,w,c
 13381   01451C  B4D8               	btfsc	status,2,c
 13382   01451E  EF93  F0A2         	goto	u2691
 13383   014522  EF95  F0A2         	goto	u2690
 13384   014526                     u2691:
 13385   014526  EF97  F0A2         	goto	l5057
 13386   01452A                     u2690:
 13387   01452A  EFA9  F0A2         	goto	l336
 13388   01452E                     l5057:
 13389                           
 13390                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 13391                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13392   01452E  50E1               	movf	fsr1l,w,c
 13393   014530  0FFF               	addlw	-1
 13394   014532  6ED9               	movwf	fsr2l,c
 13395   014534  50E2               	movf	fsr1h,w,c
 13396   014536  6EDA               	movwf	fsr2h,c
 13397   014538  0EFF               	movlw	255
 13398   01453A  22DA               	addwfc	fsr2h,f,c
 13399   01453C  9EDF               	bcf	indf2,7,c
 13400   01453E                     
 13401                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13402   01453E  0EFF               	movlw	-1
 13403   014540  50E3               	movf	plusw1,w,c
 13404   014542  6EE6               	movwf	postinc1,c
 13405                           
 13406                           ;stkvar	_a @ sp[(-5)+0]
 13407   014544  0EFB               	movlw	-5
 13408   014546  CFE3 FFE6          	movff	plusw1,postinc1
 13409   01454A  CFE3 FFE6          	movff	plusw1,postinc1
 13410   01454E  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 13411   014552                     l336:
 13412                           
 13413                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 13414   014552  0EFB               	movlw	251
 13415   014554  26E1               	addwf	fsr1l,f,c
 13416   014556  0EFF               	movlw	255
 13417   014558  22E2               	addwfc	fsr1h,f,c
 13418   01455A  0012               	return		;funcret
 13419   01455C                     __end_of_DRV_CANFDSPI_FilterDisable:
 13420                           	callstack 0
 13421                           
 13422 ;; *************** function _CanInit *****************
 13423 ;; Defined at:
 13424 ;;		line 156 in file "can/can.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;  bitTime         1  [STACK] enum E5604
 13427 ;;  withISR         1  [STACK] _Bool 
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 13430 ;;  config          3  [STACK] struct _CAN_CONFIG
 13431 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 13432 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 13433 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 13434 ;; Return value:  Size  Location     Type
 13435 ;;                  1  [STACK] void 
 13436 ;; Registers used:
 13437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 13438 ;; Tracked objects:
 13439 ;;		On entry : 0/0
 13440 ;;		On exit  : 0/0
 13441 ;;		Unchanged: 0/0
 13442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;Total ram usage:        0 bytes
 13448 ;; Hardware stack levels used: 1
 13449 ;; Hardware stack levels required when called: 10
 13450 ;; This function calls:
 13451 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 13452 ;;		_DRV_CANFDSPI_Configure
 13453 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 13454 ;;		_DRV_CANFDSPI_ModuleEventEnable
 13455 ;;		_DRV_CANFDSPI_OperationModeSelect
 13456 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 13457 ;;		_DRV_CANFDSPI_Reset
 13458 ;;		_DRV_CANFDSPI_TefConfigure
 13459 ;;		_DRV_CANFDSPI_TimeStampEnable
 13460 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 13461 ;;		_DRV_CANFDSPI_TimeStampSet
 13462 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 13463 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 13464 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 13465 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 13466 ;; This function is called by:
 13467 ;;		_main
 13468 ;; This function uses a reentrant model
 13469 ;;
 13470                           
 13471                           	psect	text48
 13472   0122EE                     __ptext48:
 13473                           	callstack 0
 13474   0122EE                     _CanInit:
 13475                           	callstack 0
 13476                           
 13477                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 13478   0122EE  0E0D               	movlw	13
 13479   0122F0  26E1               	addwf	fsr1l,f,c
 13480   0122F2  0E00               	movlw	0
 13481   0122F4  22E2               	addwfc	fsr1h,f,c
 13482   0122F6                     
 13483                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 13484   0122F6  9898               	bcf	152,4,c	;volatile
 13485                           
 13486                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 13487   0122F8  888F               	bsf	143,4,c	;volatile
 13488   0122FA                     
 13489                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 13490   0122FA  ECBE  F0A5         	call	_DRV_CANFDSPI_Reset	;wreg free
 13491   0122FE                     
 13492                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 13493                           ;stkvar	_bitTime @ sp[(-13)+-1]
 13494   0122FE  0EF2               	movlw	-14
 13495   012300  50E3               	movf	plusw1,w,c
 13496   012302  6EE6               	movwf	postinc1,c
 13497   012304  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 13498   012308                     
 13499                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 13500                           ;stkvar	_config @ sp[(-13)+4]
 13501   012308  0EF7               	movlw	247
 13502   01230A  24E1               	addwf	fsr1l,w,c
 13503   01230C  6E2A               	movwf	btemp^0,c
 13504   01230E  0EFF               	movlw	255
 13505   012310  20E2               	addwfc	fsr1h,w,c
 13506   012312  6E2B               	movwf	(btemp+1)^0,c
 13507   012314  C02A  FFE6         	movff	btemp,postinc1
 13508   012318  C02B  FFE6         	movff	btemp+1,postinc1
 13509   01231C  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 13510   012320                     
 13511                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 13512                           ;stkvar	_config @ sp[(-13)+4]
 13513   012320  50E1               	movf	fsr1l,w,c
 13514   012322  0FF7               	addlw	-9
 13515   012324  6ED9               	movwf	fsr2l,c
 13516   012326  50E2               	movf	fsr1h,w,c
 13517   012328  6EDA               	movwf	fsr2h,c
 13518   01232A  0EFF               	movlw	255
 13519   01232C  22DA               	addwfc	fsr2h,f,c
 13520   01232E  8ADF               	bsf	indf2,5,c
 13521   012330                     
 13522                           ;can/can.c: 166:     config.StoreInTEF = 1;
 13523                           ;stkvar	_config @ sp[(-13)+4]
 13524   012330  0EF8               	movlw	248
 13525   012332  24E1               	addwf	fsr1l,w,c
 13526   012334  6ED9               	movwf	fsr2l,c
 13527   012336  0EFF               	movlw	255
 13528   012338  20E2               	addwfc	fsr1h,w,c
 13529   01233A  6EDA               	movwf	fsr2h,c
 13530   01233C  8CDF               	bsf	indf2,6,c
 13531   01233E                     
 13532                           ;can/can.c: 167:     config.TXQEnable = 1;
 13533                           ;stkvar	_config @ sp[(-13)+4]
 13534   01233E  0EF8               	movlw	248
 13535   012340  24E1               	addwf	fsr1l,w,c
 13536   012342  6ED9               	movwf	fsr2l,c
 13537   012344  0EFF               	movlw	255
 13538   012346  20E2               	addwfc	fsr1h,w,c
 13539   012348  6EDA               	movwf	fsr2h,c
 13540   01234A  8EDF               	bsf	indf2,7,c
 13541   01234C                     
 13542                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 13543                           ;stkvar	_config @ sp[(-13)+4]
 13544   01234C  0EF7               	movlw	247
 13545   01234E  24E1               	addwf	fsr1l,w,c
 13546   012350  6E2A               	movwf	btemp^0,c
 13547   012352  0EFF               	movlw	255
 13548   012354  20E2               	addwfc	fsr1h,w,c
 13549   012356  6E2B               	movwf	(btemp+1)^0,c
 13550   012358  C02A  FFE6         	movff	btemp,postinc1
 13551   01235C  C02B  FFE6         	movff	btemp+1,postinc1
 13552   012360  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 13553   012364                     
 13554                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 13555                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13556   012364  50E1               	movf	fsr1l,w,c
 13557   012366  0FFF               	addlw	-1
 13558   012368  6ED9               	movwf	fsr2l,c
 13559   01236A  50E2               	movf	fsr1h,w,c
 13560   01236C  6EDA               	movwf	fsr2h,c
 13561   01236E  0EFF               	movlw	255
 13562   012370  22DA               	addwfc	fsr2h,f,c
 13563   012372  50DF               	movf	223,w,c
 13564   012374  0BC1               	andlw	-63
 13565   012376  0916               	iorlw	22
 13566   012378  6EDF               	movwf	223,c
 13567   01237A                     
 13568                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13569                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13570   01237A  50E1               	movf	fsr1l,w,c
 13571   01237C  0FFF               	addlw	-1
 13572   01237E  6ED9               	movwf	fsr2l,c
 13573   012380  50E2               	movf	fsr1h,w,c
 13574   012382  6EDA               	movwf	fsr2h,c
 13575   012384  0EFF               	movlw	255
 13576   012386  22DA               	addwfc	fsr2h,f,c
 13577   012388  80DF               	bsf	indf2,0,c
 13578   01238A                     
 13579                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13580                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13581   01238A  0EFF               	movlw	255
 13582   01238C  24E1               	addwf	fsr1l,w,c
 13583   01238E  6E2A               	movwf	btemp^0,c
 13584   012390  0EFF               	movlw	255
 13585   012392  20E2               	addwfc	fsr1h,w,c
 13586   012394  6E2B               	movwf	(btemp+1)^0,c
 13587   012396  C02A  FFE6         	movff	btemp,postinc1
 13588   01239A  C02B  FFE6         	movff	btemp+1,postinc1
 13589   01239E  EC68  F09F         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13590   0123A2                     
 13591                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13592                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13593   0123A2  0EF3               	movlw	243
 13594   0123A4  24E1               	addwf	fsr1l,w,c
 13595   0123A6  6E2A               	movwf	btemp^0,c
 13596   0123A8  0EFF               	movlw	255
 13597   0123AA  20E2               	addwfc	fsr1h,w,c
 13598   0123AC  6E2B               	movwf	(btemp+1)^0,c
 13599   0123AE  C02A  FFE6         	movff	btemp,postinc1
 13600   0123B2  C02B  FFE6         	movff	btemp+1,postinc1
 13601   0123B6  EC0D  F09C         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13602   0123BA                     
 13603                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13604                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13605   0123BA  0EF3               	movlw	-13
 13606   0123BC  6AE3               	clrf	plusw1,c
 13607   0123BE  2AE3               	incf	plusw1,f,c
 13608   0123C0                     
 13609                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13610                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13611   0123C0  0EF5               	movlw	245
 13612   0123C2  24E1               	addwf	fsr1l,w,c
 13613   0123C4  6ED9               	movwf	fsr2l,c
 13614   0123C6  0EFF               	movlw	255
 13615   0123C8  20E2               	addwfc	fsr1h,w,c
 13616   0123CA  6EDA               	movwf	fsr2h,c
 13617   0123CC  0E07               	movlw	7
 13618   0123CE  6EDF               	movwf	indf2,c
 13619   0123D0                     
 13620                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13621                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13622   0123D0  0EF6               	movlw	246
 13623   0123D2  24E1               	addwf	fsr1l,w,c
 13624   0123D4  6ED9               	movwf	fsr2l,c
 13625   0123D6  0EFF               	movlw	255
 13626   0123D8  20E2               	addwfc	fsr1h,w,c
 13627   0123DA  6EDA               	movwf	fsr2h,c
 13628   0123DC  0E05               	movlw	5
 13629   0123DE  6EDF               	movwf	indf2,c
 13630   0123E0                     
 13631                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13632                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13633   0123E0  0EF3               	movlw	243
 13634   0123E2  24E1               	addwf	fsr1l,w,c
 13635   0123E4  6E2A               	movwf	btemp^0,c
 13636   0123E6  0EFF               	movlw	255
 13637   0123E8  20E2               	addwfc	fsr1h,w,c
 13638   0123EA  6E2B               	movwf	(btemp+1)^0,c
 13639   0123EC  C02A  FFE6         	movff	btemp,postinc1
 13640   0123F0  C02B  FFE6         	movff	btemp+1,postinc1
 13641   0123F4  EC3F  F099         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13642   0123F8                     
 13643                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13644                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13645   0123F8  0EFD               	movlw	253
 13646   0123FA  24E1               	addwf	fsr1l,w,c
 13647   0123FC  6E2A               	movwf	btemp^0,c
 13648   0123FE  0EFF               	movlw	255
 13649   012400  20E2               	addwfc	fsr1h,w,c
 13650   012402  6E2B               	movwf	(btemp+1)^0,c
 13651   012404  C02A  FFE6         	movff	btemp,postinc1
 13652   012408  C02B  FFE6         	movff	btemp+1,postinc1
 13653   01240C  ECDF  F099         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13654   012410                     
 13655                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13656                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13657   012410  0EFE               	movlw	254
 13658   012412  24E1               	addwf	fsr1l,w,c
 13659   012414  6ED9               	movwf	fsr2l,c
 13660   012416  0EFF               	movlw	255
 13661   012418  20E2               	addwfc	fsr1h,w,c
 13662   01241A  6EDA               	movwf	fsr2h,c
 13663   01241C  50DF               	movf	223,w,c
 13664   01241E  0BE0               	andlw	-32
 13665   012420  0904               	iorlw	4
 13666   012422  6EDF               	movwf	223,c
 13667   012424                     
 13668                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13669                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13670   012424  0EFE               	movlw	254
 13671   012426  24E1               	addwf	fsr1l,w,c
 13672   012428  6ED9               	movwf	fsr2l,c
 13673   01242A  0EFF               	movlw	255
 13674   01242C  20E2               	addwfc	fsr1h,w,c
 13675   01242E  6EDA               	movwf	fsr2h,c
 13676   012430  0EE0               	movlw	224
 13677   012432  12DF               	iorwf	223,f,c
 13678   012434                     
 13679                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13680                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13681   012434  50E1               	movf	fsr1l,w,c
 13682   012436  0FFD               	addlw	-3
 13683   012438  6ED9               	movwf	fsr2l,c
 13684   01243A  50E2               	movf	fsr1h,w,c
 13685   01243C  6EDA               	movwf	fsr2h,c
 13686   01243E  0EFF               	movlw	255
 13687   012440  22DA               	addwfc	fsr2h,f,c
 13688   012442  0EC1               	movlw	-63
 13689   012444  16DF               	andwf	223,f,c
 13690   012446                     
 13691                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13692                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13693   012446  0EFD               	movlw	253
 13694   012448  24E1               	addwf	fsr1l,w,c
 13695   01244A  6E2A               	movwf	btemp^0,c
 13696   01244C  0EFF               	movlw	255
 13697   01244E  20E2               	addwfc	fsr1h,w,c
 13698   012450  6E2B               	movwf	(btemp+1)^0,c
 13699   012452  C02A  FFE6         	movff	btemp,postinc1
 13700   012456  C02B  FFE6         	movff	btemp+1,postinc1
 13701   01245A  0E01               	movlw	1
 13702   01245C  6EE6               	movwf	postinc1,c
 13703   01245E  ECCE  F095         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13704   012462                     
 13705                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13706                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13707   012462  0EFB               	movlw	251
 13708   012464  24E1               	addwf	fsr1l,w,c
 13709   012466  6ED9               	movwf	fsr2l,c
 13710   012468  0EFF               	movlw	255
 13711   01246A  20E2               	addwfc	fsr1h,w,c
 13712   01246C  6EDA               	movwf	fsr2h,c
 13713   01246E  0E0F               	movlw	15
 13714   012470  6EDF               	movwf	indf2,c
 13715   012472                     
 13716                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13717                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13718   012472  0EFC               	movlw	252
 13719   012474  24E1               	addwf	fsr1l,w,c
 13720   012476  6ED9               	movwf	fsr2l,c
 13721   012478  0EFF               	movlw	255
 13722   01247A  20E2               	addwfc	fsr1h,w,c
 13723   01247C  6EDA               	movwf	fsr2h,c
 13724   01247E  0E07               	movlw	7
 13725   012480  6EDF               	movwf	indf2,c
 13726   012482                     
 13727                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13728                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13729   012482  0EFA               	movlw	-6
 13730   012484  6AE3               	clrf	plusw1,c
 13731   012486  2AE3               	incf	plusw1,f,c
 13732   012488                     
 13733                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13734                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13735   012488  0EFA               	movlw	250
 13736   01248A  24E1               	addwf	fsr1l,w,c
 13737   01248C  6E2A               	movwf	btemp^0,c
 13738   01248E  0EFF               	movlw	255
 13739   012490  20E2               	addwfc	fsr1h,w,c
 13740   012492  6E2B               	movwf	(btemp+1)^0,c
 13741   012494  C02A  FFE6         	movff	btemp,postinc1
 13742   012498  C02B  FFE6         	movff	btemp+1,postinc1
 13743   01249C  0E02               	movlw	2
 13744   01249E  6EE6               	movwf	postinc1,c
 13745   0124A0  EC9E  F098         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13746   0124A4                     
 13747                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13748   0124A4  0E27               	movlw	39
 13749   0124A6  6EE6               	movwf	postinc1,c
 13750   0124A8  0E00               	movlw	0
 13751   0124AA  6EE6               	movwf	postinc1,c
 13752   0124AC  EC0C  F0A6         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13753   0124B0                     
 13754                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13755   0124B0  0E00               	movlw	0
 13756   0124B2  6EE6               	movwf	postinc1,c
 13757   0124B4  0E00               	movlw	0
 13758   0124B6  6EE6               	movwf	postinc1,c
 13759   0124B8  0E00               	movlw	0
 13760   0124BA  6EE6               	movwf	postinc1,c
 13761   0124BC  0E00               	movlw	0
 13762   0124BE  6EE6               	movwf	postinc1,c
 13763   0124C0  ECD4  F0A5         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13764   0124C4                     
 13765                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13766   0124C4  EC71  F0A4         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13767   0124C8                     
 13768                           ;can/can.c: 209:     if(withISR == 1)
 13769                           ;stkvar	_withISR @ sp[(-13)+-2]
 13770   0124C8  0EF1               	movlw	-15
 13771   0124CA  04E3               	decf	plusw1,w,c
 13772   0124CC  A4D8               	btfss	status,2,c
 13773   0124CE  EF6B  F092         	goto	u3141
 13774   0124D2  EF6D  F092         	goto	u3140
 13775   0124D6                     u3141:
 13776   0124D6  EF75  F092         	goto	l5397
 13777   0124DA                     u3140:
 13778   0124DA                     
 13779                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13780   0124DA  0E02               	movlw	2
 13781   0124DC  6EE6               	movwf	postinc1,c
 13782   0124DE  0E00               	movlw	0
 13783   0124E0  6EE6               	movwf	postinc1,c
 13784   0124E2  0E00               	movlw	0
 13785   0124E4  6EE6               	movwf	postinc1,c
 13786   0124E6  EC0E  F0A4         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13787   0124EA                     l5397:
 13788                           
 13789                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13790   0124EA  0E06               	movlw	6
 13791   0124EC  6EE6               	movwf	postinc1,c
 13792   0124EE  ECF6  F0A2         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13793   0124F2                     
 13794                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13795   0124F2  0EF1               	movlw	241
 13796   0124F4  26E1               	addwf	fsr1l,f,c
 13797   0124F6  0EFF               	movlw	255
 13798   0124F8  22E2               	addwfc	fsr1h,f,c
 13799   0124FA  0012               	return		;funcret
 13800   0124FC                     __end_of_CanInit:
 13801                           	callstack 0
 13802                           
 13803 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13804 ;; Defined at:
 13805 ;;		line 693 in file "can/can.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13808 ;;		 -> txqConfig(4), 
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1  [STACK] char 
 13813 ;; Registers used:
 13814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13824 ;;Total ram usage:        0 bytes
 13825 ;; Hardware stack levels used: 1
 13826 ;; Hardware stack levels required when called: 7
 13827 ;; This function calls:
 13828 ;;		Nothing
 13829 ;; This function is called by:
 13830 ;;		_CanInit
 13831 ;; This function uses a reentrant model
 13832 ;;
 13833                           
 13834                           	psect	text49
 13835   01381A                     __ptext49:
 13836                           	callstack 0
 13837   01381A                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13838                           	callstack 0
 13839                           
 13840                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13841   01381A  0E05               	movlw	5
 13842   01381C  26E1               	addwf	fsr1l,f,c
 13843   01381E  0E00               	movlw	0
 13844   013820  22E2               	addwfc	fsr1h,f,c
 13845   013822                     
 13846                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13847   013822  0EDD               	movlw	low _canFifoResetValues
 13848   013824  6EF6               	movwf	tblptrl,c
 13849   013826                     	if	1	;There is more than 1 active tblptr byte
 13850   013826  0EFF               	movlw	high _canFifoResetValues
 13851   013828  6EF7               	movwf	tblptrh,c
 13852   01382A                     	endif
 13853   01382A                     	if	1	;There are 3 active tblptr bytes
 13854   01382A  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13855   01382C  6EF8               	movwf	tblptru,c
 13856   01382E                     	endif
 13857   01382E  0009               	tblrd		*+
 13858   013830  CFF5 F032          	movff	tablat,btemp+8
 13859   013834  0009               	tblrd		*+
 13860   013836  CFF5 F033          	movff	tablat,btemp+9
 13861   01383A  0009               	tblrd		*+
 13862   01383C  CFF5 F034          	movff	tablat,btemp+10
 13863   013840  0009               	tblrd		*+
 13864   013842  CFF5 F035          	movff	tablat,btemp+11
 13865                           
 13866                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13867   013846  0EFB               	movlw	-5
 13868   013848  C032  FFE3         	movff	btemp+8,plusw1
 13869   01384C  0EFC               	movlw	-4
 13870   01384E  C033  FFE3         	movff	btemp+9,plusw1
 13871   013852  0EFD               	movlw	-3
 13872   013854  C034  FFE3         	movff	btemp+10,plusw1
 13873   013858  0EFE               	movlw	-2
 13874   01385A  C035  FFE3         	movff	btemp+11,plusw1
 13875   01385E                     
 13876                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13877                           ;stkvar	_config @ sp[(-5)+-2]
 13878   01385E  0EF9               	movlw	-7
 13879   013860  CFE3 FFD9          	movff	plusw1,fsr2l
 13880   013864  0EFA               	movlw	-6
 13881   013866  CFE3 FFDA          	movff	plusw1,fsr2h
 13882                           
 13883                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13884   01386A  0EFD               	movlw	253
 13885   01386C  24E1               	addwf	fsr1l,w,c
 13886   01386E  6EE9               	movwf	fsr0l,c
 13887   013870  0EFF               	movlw	255
 13888   013872  20E2               	addwfc	fsr1h,w,c
 13889   013874  6EEA               	movwf	fsr0h,c
 13890   013876  50EF               	movf	239,w,c
 13891   013878  0B1F               	andlw	31
 13892   01387A  6EDF               	movwf	indf2,c
 13893   01387C                     
 13894                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13895                           ;stkvar	_config @ sp[(-5)+-2]
 13896   01387C  0EF9               	movlw	-7
 13897   01387E  CFE3 F034          	movff	plusw1,btemp+10
 13898   013882  0EFA               	movlw	-6
 13899   013884  CFE3 F035          	movff	plusw1,btemp+11
 13900   013888  0E01               	movlw	1
 13901   01388A  2434               	addwf	(btemp+10)^0,w,c
 13902   01388C  6ED9               	movwf	fsr2l,c
 13903   01388E  0E00               	movlw	0
 13904   013890  2035               	addwfc	(btemp+11)^0,w,c
 13905   013892  6EDA               	movwf	fsr2h,c
 13906                           
 13907                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13908   013894  0EFD               	movlw	253
 13909   013896  24E1               	addwf	fsr1l,w,c
 13910   013898  6EE9               	movwf	fsr0l,c
 13911   01389A  0EFF               	movlw	255
 13912   01389C  20E2               	addwfc	fsr1h,w,c
 13913   01389E  6EEA               	movwf	fsr0h,c
 13914   0138A0  38EF               	swapf	239,w,c
 13915   0138A2  32E8               	rrcf	wreg,f,c
 13916   0138A4  0B03               	andlw	3
 13917   0138A6  6EDF               	movwf	indf2,c
 13918   0138A8                     
 13919                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13920                           ;stkvar	_config @ sp[(-5)+-2]
 13921   0138A8  0EF9               	movlw	-7
 13922   0138AA  CFE3 F034          	movff	plusw1,btemp+10
 13923   0138AE  0EFA               	movlw	-6
 13924   0138B0  CFE3 F035          	movff	plusw1,btemp+11
 13925   0138B4  0E02               	movlw	2
 13926   0138B6  2434               	addwf	(btemp+10)^0,w,c
 13927   0138B8  6ED9               	movwf	fsr2l,c
 13928   0138BA  0E00               	movlw	0
 13929   0138BC  2035               	addwfc	(btemp+11)^0,w,c
 13930   0138BE  6EDA               	movwf	fsr2h,c
 13931                           
 13932                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13933   0138C0  0EFE               	movlw	254
 13934   0138C2  24E1               	addwf	fsr1l,w,c
 13935   0138C4  6EE9               	movwf	fsr0l,c
 13936   0138C6  0EFF               	movlw	255
 13937   0138C8  20E2               	addwfc	fsr1h,w,c
 13938   0138CA  6EEA               	movwf	fsr0h,c
 13939   0138CC  50EF               	movf	239,w,c
 13940   0138CE  0B1F               	andlw	31
 13941   0138D0  6EDF               	movwf	indf2,c
 13942   0138D2                     
 13943                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13944                           ;stkvar	_config @ sp[(-5)+-2]
 13945   0138D2  0EF9               	movlw	-7
 13946   0138D4  CFE3 F034          	movff	plusw1,btemp+10
 13947   0138D8  0EFA               	movlw	-6
 13948   0138DA  CFE3 F035          	movff	plusw1,btemp+11
 13949   0138DE  0E03               	movlw	3
 13950   0138E0  2434               	addwf	(btemp+10)^0,w,c
 13951   0138E2  6ED9               	movwf	fsr2l,c
 13952   0138E4  0E00               	movlw	0
 13953   0138E6  2035               	addwfc	(btemp+11)^0,w,c
 13954   0138E8  6EDA               	movwf	fsr2h,c
 13955                           
 13956                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13957   0138EA  0EFE               	movlw	254
 13958   0138EC  24E1               	addwf	fsr1l,w,c
 13959   0138EE  6EE9               	movwf	fsr0l,c
 13960   0138F0  0EFF               	movlw	255
 13961   0138F2  20E2               	addwfc	fsr1h,w,c
 13962   0138F4  6EEA               	movwf	fsr0h,c
 13963   0138F6  38EF               	swapf	239,w,c
 13964   0138F8  32E8               	rrcf	wreg,f,c
 13965   0138FA  0B07               	andlw	7
 13966   0138FC  6EDF               	movwf	indf2,c
 13967   0138FE                     
 13968                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13969   0138FE  0EF9               	movlw	249
 13970   013900  26E1               	addwf	fsr1l,f,c
 13971   013902  0EFF               	movlw	255
 13972   013904  22E2               	addwfc	fsr1h,f,c
 13973   013906  0012               	return		;funcret
 13974   013908                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13975                           	callstack 0
 13976                           
 13977 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13978 ;; Defined at:
 13979 ;;		line 671 in file "can/can.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13982 ;;		 -> txqConfig(4), 
 13983 ;; Auto vars:     Size  Location     Type
 13984 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13985 ;;  a               2    0        unsigned short 
 13986 ;;  spiTransferE    1    0        char 
 13987 ;; Return value:  Size  Location     Type
 13988 ;;                  1  [STACK] char 
 13989 ;; Registers used:
 13990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13991 ;; Tracked objects:
 13992 ;;		On entry : 0/0
 13993 ;;		On exit  : 0/0
 13994 ;;		Unchanged: 0/0
 13995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;Total ram usage:        0 bytes
 14001 ;; Hardware stack levels used: 1
 14002 ;; Hardware stack levels required when called: 9
 14003 ;; This function calls:
 14004 ;;		_DRV_CANFDSPI_WriteWord
 14005 ;; This function is called by:
 14006 ;;		_CanInit
 14007 ;; This function uses a reentrant model
 14008 ;;
 14009                           
 14010                           	psect	text50
 14011   01327E                     __ptext50:
 14012                           	callstack 0
 14013   01327E                     _DRV_CANFDSPI_TransmitQueueConfigure:
 14014                           	callstack 0
 14015                           
 14016                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14017   01327E  52E6               	movf	postinc1,f,c
 14018   013280  52E6               	movf	postinc1,f,c
 14019   013282  52E6               	movf	postinc1,f,c
 14020   013284  52E6               	movf	postinc1,f,c
 14021   013286                     
 14022                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 14023   013286  0EDD               	movlw	low _canFifoResetValues
 14024   013288  6EF6               	movwf	tblptrl,c
 14025   01328A                     	if	1	;There is more than 1 active tblptr byte
 14026   01328A  0EFF               	movlw	high _canFifoResetValues
 14027   01328C  6EF7               	movwf	tblptrh,c
 14028   01328E                     	endif
 14029   01328E                     	if	1	;There are 3 active tblptr bytes
 14030   01328E  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14031   013290  6EF8               	movwf	tblptru,c
 14032   013292                     	endif
 14033   013292  0009               	tblrd		*+
 14034   013294  CFF5 F032          	movff	tablat,btemp+8
 14035   013298  0009               	tblrd		*+
 14036   01329A  CFF5 F033          	movff	tablat,btemp+9
 14037   01329E  0009               	tblrd		*+
 14038   0132A0  CFF5 F034          	movff	tablat,btemp+10
 14039   0132A4  0009               	tblrd		*+
 14040   0132A6  CFF5 F035          	movff	tablat,btemp+11
 14041                           
 14042                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14043   0132AA  0EFC               	movlw	-4
 14044   0132AC  C032  FFE3         	movff	btemp+8,plusw1
 14045   0132B0  0EFD               	movlw	-3
 14046   0132B2  C033  FFE3         	movff	btemp+9,plusw1
 14047   0132B6  0EFE               	movlw	-2
 14048   0132B8  C034  FFE3         	movff	btemp+10,plusw1
 14049   0132BC  0EFF               	movlw	-1
 14050   0132BE  C035  FFE3         	movff	btemp+11,plusw1
 14051   0132C2                     
 14052                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 14053                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14054   0132C2  50E1               	movf	fsr1l,w,c
 14055   0132C4  0FFC               	addlw	-4
 14056   0132C6  6ED9               	movwf	fsr2l,c
 14057   0132C8  50E2               	movf	fsr1h,w,c
 14058   0132CA  6EDA               	movwf	fsr2h,c
 14059   0132CC  0EFF               	movlw	255
 14060   0132CE  22DA               	addwfc	fsr2h,f,c
 14061   0132D0  8EDF               	bsf	indf2,7,c
 14062   0132D2                     
 14063                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 14064                           ;stkvar	_config @ sp[(-4)+-2]
 14065   0132D2  0EFA               	movlw	-6
 14066   0132D4  CFE3 F034          	movff	plusw1,btemp+10
 14067   0132D8  0EFB               	movlw	-5
 14068   0132DA  CFE3 F035          	movff	plusw1,btemp+11
 14069   0132DE  0E02               	movlw	2
 14070   0132E0  2434               	addwf	(btemp+10)^0,w,c
 14071   0132E2  6ED9               	movwf	fsr2l,c
 14072   0132E4  0E00               	movlw	0
 14073   0132E6  2035               	addwfc	(btemp+11)^0,w,c
 14074   0132E8  6EDA               	movwf	fsr2h,c
 14075   0132EA  50DF               	movf	indf2,w,c
 14076   0132EC  6E35               	movwf	(btemp+11)^0,c
 14077                           
 14078                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14079   0132EE  0EFF               	movlw	255
 14080   0132F0  24E1               	addwf	fsr1l,w,c
 14081   0132F2  6ED9               	movwf	fsr2l,c
 14082   0132F4  0EFF               	movlw	255
 14083   0132F6  20E2               	addwfc	fsr1h,w,c
 14084   0132F8  6EDA               	movwf	fsr2h,c
 14085   0132FA  50DF               	movf	223,w,c
 14086   0132FC  1835               	xorwf	(btemp+11)^0,w,c
 14087   0132FE  0BE0               	andlw	-32
 14088   013300  1835               	xorwf	(btemp+11)^0,w,c
 14089   013302  6EDF               	movwf	223,c
 14090   013304                     
 14091                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14092                           ;stkvar	_config @ sp[(-4)+-2]
 14093   013304  0EFA               	movlw	-6
 14094   013306  CFE3 F034          	movff	plusw1,btemp+10
 14095   01330A  0EFB               	movlw	-5
 14096   01330C  CFE3 F035          	movff	plusw1,btemp+11
 14097   013310  0E03               	movlw	3
 14098   013312  2434               	addwf	(btemp+10)^0,w,c
 14099   013314  6ED9               	movwf	fsr2l,c
 14100   013316  0E00               	movlw	0
 14101   013318  2035               	addwfc	(btemp+11)^0,w,c
 14102   01331A  6EDA               	movwf	fsr2h,c
 14103   01331C  50DF               	movf	indf2,w,c
 14104   01331E  6E35               	movwf	(btemp+11)^0,c
 14105                           
 14106                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14107   013320  0EFF               	movlw	255
 14108   013322  24E1               	addwf	fsr1l,w,c
 14109   013324  6ED9               	movwf	fsr2l,c
 14110   013326  0EFF               	movlw	255
 14111   013328  20E2               	addwfc	fsr1h,w,c
 14112   01332A  6EDA               	movwf	fsr2h,c
 14113   01332C  3A35               	swapf	(btemp+11)^0,f,c
 14114   01332E  4635               	rlncf	(btemp+11)^0,f,c
 14115   013330  50DF               	movf	223,w,c
 14116   013332  1835               	xorwf	(btemp+11)^0,w,c
 14117   013334  0B1F               	andlw	-225
 14118   013336  1835               	xorwf	(btemp+11)^0,w,c
 14119   013338  6EDF               	movwf	223,c
 14120   01333A                     
 14121                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14122                           ;stkvar	_config @ sp[(-4)+-2]
 14123   01333A  0EFA               	movlw	-6
 14124   01333C  CFE3 F034          	movff	plusw1,btemp+10
 14125   013340  0EFB               	movlw	-5
 14126   013342  CFE3 F035          	movff	plusw1,btemp+11
 14127   013346  0E01               	movlw	1
 14128   013348  2434               	addwf	(btemp+10)^0,w,c
 14129   01334A  6ED9               	movwf	fsr2l,c
 14130   01334C  0E00               	movlw	0
 14131   01334E  2035               	addwfc	(btemp+11)^0,w,c
 14132   013350  6EDA               	movwf	fsr2h,c
 14133   013352  50DF               	movf	indf2,w,c
 14134   013354  6E35               	movwf	(btemp+11)^0,c
 14135                           
 14136                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14137   013356  0EFE               	movlw	254
 14138   013358  24E1               	addwf	fsr1l,w,c
 14139   01335A  6ED9               	movwf	fsr2l,c
 14140   01335C  0EFF               	movlw	255
 14141   01335E  20E2               	addwfc	fsr1h,w,c
 14142   013360  6EDA               	movwf	fsr2h,c
 14143   013362  3A35               	swapf	(btemp+11)^0,f,c
 14144   013364  4635               	rlncf	(btemp+11)^0,f,c
 14145   013366  50DF               	movf	223,w,c
 14146   013368  1835               	xorwf	(btemp+11)^0,w,c
 14147   01336A  0B9F               	andlw	-97
 14148   01336C  1835               	xorwf	(btemp+11)^0,w,c
 14149   01336E  6EDF               	movwf	223,c
 14150   013370                     
 14151                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14152                           ;stkvar	_config @ sp[(-4)+-2]
 14153   013370  0EFA               	movlw	-6
 14154   013372  CFE3 FFD9          	movff	plusw1,fsr2l
 14155   013376  0EFB               	movlw	-5
 14156   013378  CFE3 FFDA          	movff	plusw1,fsr2h
 14157   01337C  50DF               	movf	indf2,w,c
 14158   01337E  6E35               	movwf	(btemp+11)^0,c
 14159                           
 14160                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14161   013380  0EFE               	movlw	254
 14162   013382  24E1               	addwf	fsr1l,w,c
 14163   013384  6ED9               	movwf	fsr2l,c
 14164   013386  0EFF               	movlw	255
 14165   013388  20E2               	addwfc	fsr1h,w,c
 14166   01338A  6EDA               	movwf	fsr2h,c
 14167   01338C  50DF               	movf	223,w,c
 14168   01338E  1835               	xorwf	(btemp+11)^0,w,c
 14169   013390  0BE0               	andlw	-32
 14170   013392  1835               	xorwf	(btemp+11)^0,w,c
 14171   013394  6EDF               	movwf	223,c
 14172   013396                     
 14173                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 14174   013396  0EFC               	movlw	-4
 14175   013398  CFE3 FFE6          	movff	plusw1,postinc1
 14176   01339C  CFE3 FFE6          	movff	plusw1,postinc1
 14177   0133A0  CFE3 FFE6          	movff	plusw1,postinc1
 14178   0133A4  CFE3 FFE6          	movff	plusw1,postinc1
 14179   0133A8  0E50               	movlw	80
 14180   0133AA  6EE6               	movwf	postinc1,c
 14181   0133AC  0E00               	movlw	0
 14182   0133AE  6EE6               	movwf	postinc1,c
 14183   0133B0  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14184   0133B4                     
 14185                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 14186   0133B4  0EFA               	movlw	250
 14187   0133B6  26E1               	addwf	fsr1l,f,c
 14188   0133B8  0EFF               	movlw	255
 14189   0133BA  22E2               	addwfc	fsr1h,f,c
 14190   0133BC  0012               	return		;funcret
 14191   0133BE                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 14192                           	callstack 0
 14193                           
 14194 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 14195 ;; Defined at:
 14196 ;;		line 657 in file "can/can.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 14199 ;;		 -> txfConfig(2), 
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14202 ;; Return value:  Size  Location     Type
 14203 ;;                  1  [STACK] char 
 14204 ;; Registers used:
 14205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 14206 ;; Tracked objects:
 14207 ;;		On entry : 0/0
 14208 ;;		On exit  : 0/0
 14209 ;;		Unchanged: 0/0
 14210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14215 ;;Total ram usage:        0 bytes
 14216 ;; Hardware stack levels used: 1
 14217 ;; Hardware stack levels required when called: 7
 14218 ;; This function calls:
 14219 ;;		Nothing
 14220 ;; This function is called by:
 14221 ;;		_CanInit
 14222 ;; This function uses a reentrant model
 14223 ;;
 14224                           
 14225                           	psect	text51
 14226   0133BE                     __ptext51:
 14227                           	callstack 0
 14228   0133BE                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 14229                           	callstack 0
 14230                           
 14231                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14232   0133BE  0E05               	movlw	5
 14233   0133C0  26E1               	addwf	fsr1l,f,c
 14234   0133C2  0E00               	movlw	0
 14235   0133C4  22E2               	addwfc	fsr1h,f,c
 14236   0133C6                     
 14237                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 14238   0133C6  0EDD               	movlw	low _canFifoResetValues
 14239   0133C8  6EF6               	movwf	tblptrl,c
 14240   0133CA                     	if	1	;There is more than 1 active tblptr byte
 14241   0133CA  0EFF               	movlw	high _canFifoResetValues
 14242   0133CC  6EF7               	movwf	tblptrh,c
 14243   0133CE                     	endif
 14244   0133CE                     	if	1	;There are 3 active tblptr bytes
 14245   0133CE  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14246   0133D0  6EF8               	movwf	tblptru,c
 14247   0133D2                     	endif
 14248   0133D2  0009               	tblrd		*+
 14249   0133D4  CFF5 F032          	movff	tablat,btemp+8
 14250   0133D8  0009               	tblrd		*+
 14251   0133DA  CFF5 F033          	movff	tablat,btemp+9
 14252   0133DE  0009               	tblrd		*+
 14253   0133E0  CFF5 F034          	movff	tablat,btemp+10
 14254   0133E4  0009               	tblrd		*+
 14255   0133E6  CFF5 F035          	movff	tablat,btemp+11
 14256                           
 14257                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14258   0133EA  0EFB               	movlw	-5
 14259   0133EC  C032  FFE3         	movff	btemp+8,plusw1
 14260   0133F0  0EFC               	movlw	-4
 14261   0133F2  C033  FFE3         	movff	btemp+9,plusw1
 14262   0133F6  0EFD               	movlw	-3
 14263   0133F8  C034  FFE3         	movff	btemp+10,plusw1
 14264   0133FC  0EFE               	movlw	-2
 14265   0133FE  C035  FFE3         	movff	btemp+11,plusw1
 14266   013402                     
 14267                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 14268                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14269   013402  50E1               	movf	fsr1l,w,c
 14270   013404  0FFB               	addlw	-5
 14271   013406  6ED9               	movwf	fsr2l,c
 14272   013408  50E2               	movf	fsr1h,w,c
 14273   01340A  6EDA               	movwf	fsr2h,c
 14274   01340C  0EFF               	movlw	255
 14275   01340E  22DA               	addwfc	fsr2h,f,c
 14276                           
 14277                           ;stkvar	_config @ sp[(-5)+-2]
 14278   013410  0EF9               	movlw	-7
 14279   013412  CFE3 FFE9          	movff	plusw1,fsr0l
 14280   013416  0EFA               	movlw	-6
 14281   013418  CFE3 FFEA          	movff	plusw1,fsr0h
 14282   01341C  90EF               	bcf	indf0,0,c
 14283   01341E  ACDF               	btfss	indf2,6,c
 14284   013420  EF13  F09A         	goto	u1045
 14285   013424  80EF               	bsf	indf0,0,c
 14286   013426                     u1045:
 14287   013426                     
 14288                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 14289                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14290   013426  0EFD               	movlw	253
 14291   013428  24E1               	addwf	fsr1l,w,c
 14292   01342A  6ED9               	movwf	fsr2l,c
 14293   01342C  0EFF               	movlw	255
 14294   01342E  20E2               	addwfc	fsr1h,w,c
 14295   013430  6EDA               	movwf	fsr2h,c
 14296   013432  50DF               	movf	223,w,c
 14297   013434  0B1F               	andlw	31
 14298   013436  6E35               	movwf	(btemp+11)^0,c
 14299                           
 14300                           ;stkvar	_config @ sp[(-5)+-2]
 14301   013438  0EF9               	movlw	-7
 14302   01343A  CFE3 FFD9          	movff	plusw1,fsr2l
 14303   01343E  0EFA               	movlw	-6
 14304   013440  CFE3 FFDA          	movff	plusw1,fsr2h
 14305   013444  4635               	rlncf	(btemp+11)^0,f,c
 14306   013446  50DF               	movf	223,w,c
 14307   013448  1835               	xorwf	(btemp+11)^0,w,c
 14308   01344A  0BC1               	andlw	-63
 14309   01344C  1835               	xorwf	(btemp+11)^0,w,c
 14310   01344E  6EDF               	movwf	223,c
 14311   013450                     
 14312                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 14313                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14314   013450  0EFD               	movlw	253
 14315   013452  24E1               	addwf	fsr1l,w,c
 14316   013454  6ED9               	movwf	fsr2l,c
 14317   013456  0EFF               	movlw	255
 14318   013458  20E2               	addwfc	fsr1h,w,c
 14319   01345A  6EDA               	movwf	fsr2h,c
 14320   01345C  38DF               	swapf	223,w,c
 14321   01345E  32E8               	rrcf	wreg,f,c
 14322   013460  0B03               	andlw	3
 14323   013462  6E35               	movwf	(btemp+11)^0,c
 14324                           
 14325                           ;stkvar	_config @ sp[(-5)+-2]
 14326   013464  0EF9               	movlw	-7
 14327   013466  CFE3 FFD9          	movff	plusw1,fsr2l
 14328   01346A  0EFA               	movlw	-6
 14329   01346C  CFE3 FFDA          	movff	plusw1,fsr2h
 14330   013470  3A35               	swapf	(btemp+11)^0,f,c
 14331   013472  4635               	rlncf	(btemp+11)^0,f,c
 14332   013474  4635               	rlncf	(btemp+11)^0,f,c
 14333   013476  50DF               	movf	223,w,c
 14334   013478  1835               	xorwf	(btemp+11)^0,w,c
 14335   01347A  0B3F               	andlw	-193
 14336   01347C  1835               	xorwf	(btemp+11)^0,w,c
 14337   01347E  6EDF               	movwf	223,c
 14338   013480                     
 14339                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 14340                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14341   013480  0EFE               	movlw	254
 14342   013482  24E1               	addwf	fsr1l,w,c
 14343   013484  6ED9               	movwf	fsr2l,c
 14344   013486  0EFF               	movlw	255
 14345   013488  20E2               	addwfc	fsr1h,w,c
 14346   01348A  6EDA               	movwf	fsr2h,c
 14347   01348C  50DF               	movf	223,w,c
 14348   01348E  0B1F               	andlw	31
 14349   013490  6E35               	movwf	(btemp+11)^0,c
 14350                           
 14351                           ;stkvar	_config @ sp[(-5)+-2]
 14352   013492  0EF9               	movlw	-7
 14353   013494  CFE3 F032          	movff	plusw1,btemp+8
 14354   013498  0EFA               	movlw	-6
 14355   01349A  CFE3 F033          	movff	plusw1,btemp+9
 14356   01349E  0E01               	movlw	1
 14357   0134A0  2432               	addwf	(btemp+8)^0,w,c
 14358   0134A2  6ED9               	movwf	fsr2l,c
 14359   0134A4  0E00               	movlw	0
 14360   0134A6  2033               	addwfc	(btemp+9)^0,w,c
 14361   0134A8  6EDA               	movwf	fsr2h,c
 14362   0134AA  50DF               	movf	223,w,c
 14363   0134AC  1835               	xorwf	(btemp+11)^0,w,c
 14364   0134AE  0BE0               	andlw	-32
 14365   0134B0  1835               	xorwf	(btemp+11)^0,w,c
 14366   0134B2  6EDF               	movwf	223,c
 14367   0134B4                     
 14368                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 14369                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14370   0134B4  0EFE               	movlw	254
 14371   0134B6  24E1               	addwf	fsr1l,w,c
 14372   0134B8  6ED9               	movwf	fsr2l,c
 14373   0134BA  0EFF               	movlw	255
 14374   0134BC  20E2               	addwfc	fsr1h,w,c
 14375   0134BE  6EDA               	movwf	fsr2h,c
 14376   0134C0  38DF               	swapf	223,w,c
 14377   0134C2  32E8               	rrcf	wreg,f,c
 14378   0134C4  0B07               	andlw	7
 14379   0134C6  6E35               	movwf	(btemp+11)^0,c
 14380                           
 14381                           ;stkvar	_config @ sp[(-5)+-2]
 14382   0134C8  0EF9               	movlw	-7
 14383   0134CA  CFE3 F032          	movff	plusw1,btemp+8
 14384   0134CE  0EFA               	movlw	-6
 14385   0134D0  CFE3 F033          	movff	plusw1,btemp+9
 14386   0134D4  0E01               	movlw	1
 14387   0134D6  2432               	addwf	(btemp+8)^0,w,c
 14388   0134D8  6ED9               	movwf	fsr2l,c
 14389   0134DA  0E00               	movlw	0
 14390   0134DC  2033               	addwfc	(btemp+9)^0,w,c
 14391   0134DE  6EDA               	movwf	fsr2h,c
 14392   0134E0  3A35               	swapf	(btemp+11)^0,f,c
 14393   0134E2  4635               	rlncf	(btemp+11)^0,f,c
 14394   0134E4  50DF               	movf	223,w,c
 14395   0134E6  1835               	xorwf	(btemp+11)^0,w,c
 14396   0134E8  0B1F               	andlw	-225
 14397   0134EA  1835               	xorwf	(btemp+11)^0,w,c
 14398   0134EC  6EDF               	movwf	223,c
 14399   0134EE                     
 14400                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 14401   0134EE  0EF9               	movlw	249
 14402   0134F0  26E1               	addwf	fsr1l,f,c
 14403   0134F2  0EFF               	movlw	255
 14404   0134F4  22E2               	addwfc	fsr1h,f,c
 14405   0134F6  0012               	return		;funcret
 14406   0134F8                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 14407                           	callstack 0
 14408                           
 14409 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 14410 ;; Defined at:
 14411 ;;		line 633 in file "can/can.c"
 14412 ;; Parameters:    Size  Location     Type
 14413 ;;  channel         1  [STACK] enum E5287
 14414 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 14415 ;;		 -> txfConfig(2), 
 14416 ;; Auto vars:     Size  Location     Type
 14417 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14418 ;;  a               2  [STACK] unsigned short 
 14419 ;;  spiTransferE    1    0        char 
 14420 ;; Return value:  Size  Location     Type
 14421 ;;                  1  [STACK] char 
 14422 ;; Registers used:
 14423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14424 ;; Tracked objects:
 14425 ;;		On entry : 0/0
 14426 ;;		On exit  : 0/0
 14427 ;;		Unchanged: 0/0
 14428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14433 ;;Total ram usage:        0 bytes
 14434 ;; Hardware stack levels used: 1
 14435 ;; Hardware stack levels required when called: 9
 14436 ;; This function calls:
 14437 ;;		_DRV_CANFDSPI_WriteWord
 14438 ;; This function is called by:
 14439 ;;		_CanInit
 14440 ;; This function uses a reentrant model
 14441 ;;
 14442                           
 14443                           	psect	text52
 14444   012B9C                     __ptext52:
 14445                           	callstack 0
 14446   012B9C                     _DRV_CANFDSPI_TransmitChannelConfigure:
 14447                           	callstack 0
 14448                           
 14449                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14450   012B9C  0E07               	movlw	7
 14451   012B9E  26E1               	addwf	fsr1l,f,c
 14452   012BA0  0E00               	movlw	0
 14453   012BA2  22E2               	addwfc	fsr1h,f,c
 14454   012BA4                     
 14455                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 14456   012BA4  0EDD               	movlw	low _canFifoResetValues
 14457   012BA6  6EF6               	movwf	tblptrl,c
 14458   012BA8                     	if	1	;There is more than 1 active tblptr byte
 14459   012BA8  0EFF               	movlw	high _canFifoResetValues
 14460   012BAA  6EF7               	movwf	tblptrh,c
 14461   012BAC                     	endif
 14462   012BAC                     	if	1	;There are 3 active tblptr bytes
 14463   012BAC  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14464   012BAE  6EF8               	movwf	tblptru,c
 14465   012BB0                     	endif
 14466   012BB0  0009               	tblrd		*+
 14467   012BB2  CFF5 F032          	movff	tablat,btemp+8
 14468   012BB6  0009               	tblrd		*+
 14469   012BB8  CFF5 F033          	movff	tablat,btemp+9
 14470   012BBC  0009               	tblrd		*+
 14471   012BBE  CFF5 F034          	movff	tablat,btemp+10
 14472   012BC2  0009               	tblrd		*+
 14473   012BC4  CFF5 F035          	movff	tablat,btemp+11
 14474                           
 14475                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14476   012BC8  0EF9               	movlw	-7
 14477   012BCA  C032  FFE3         	movff	btemp+8,plusw1
 14478   012BCE  0EFA               	movlw	-6
 14479   012BD0  C033  FFE3         	movff	btemp+9,plusw1
 14480   012BD4  0EFB               	movlw	-5
 14481   012BD6  C034  FFE3         	movff	btemp+10,plusw1
 14482   012BDA  0EFC               	movlw	-4
 14483   012BDC  C035  FFE3         	movff	btemp+11,plusw1
 14484   012BE0                     
 14485                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 14486                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14487   012BE0  50E1               	movf	fsr1l,w,c
 14488   012BE2  0FF9               	addlw	-7
 14489   012BE4  6ED9               	movwf	fsr2l,c
 14490   012BE6  50E2               	movf	fsr1h,w,c
 14491   012BE8  6EDA               	movwf	fsr2h,c
 14492   012BEA  0EFF               	movlw	255
 14493   012BEC  22DA               	addwfc	fsr2h,f,c
 14494   012BEE  8EDF               	bsf	indf2,7,c
 14495   012BF0                     
 14496                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 14497                           ;stkvar	_config @ sp[(-7)+-3]
 14498   012BF0  0EF6               	movlw	-10
 14499   012BF2  CFE3 F034          	movff	plusw1,btemp+10
 14500   012BF6  0EF7               	movlw	-9
 14501   012BF8  CFE3 F035          	movff	plusw1,btemp+11
 14502   012BFC  0E01               	movlw	1
 14503   012BFE  2434               	addwf	(btemp+10)^0,w,c
 14504   012C00  6ED9               	movwf	fsr2l,c
 14505   012C02  0E00               	movlw	0
 14506   012C04  2035               	addwfc	(btemp+11)^0,w,c
 14507   012C06  6EDA               	movwf	fsr2h,c
 14508   012C08  50DF               	movf	223,w,c
 14509   012C0A  0B1F               	andlw	31
 14510   012C0C  6E35               	movwf	(btemp+11)^0,c
 14511                           
 14512                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14513   012C0E  0EFC               	movlw	252
 14514   012C10  24E1               	addwf	fsr1l,w,c
 14515   012C12  6ED9               	movwf	fsr2l,c
 14516   012C14  0EFF               	movlw	255
 14517   012C16  20E2               	addwfc	fsr1h,w,c
 14518   012C18  6EDA               	movwf	fsr2h,c
 14519   012C1A  50DF               	movf	223,w,c
 14520   012C1C  1835               	xorwf	(btemp+11)^0,w,c
 14521   012C1E  0BE0               	andlw	-32
 14522   012C20  1835               	xorwf	(btemp+11)^0,w,c
 14523   012C22  6EDF               	movwf	223,c
 14524   012C24                     
 14525                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14526                           ;stkvar	_config @ sp[(-7)+-3]
 14527   012C24  0EF6               	movlw	-10
 14528   012C26  CFE3 F034          	movff	plusw1,btemp+10
 14529   012C2A  0EF7               	movlw	-9
 14530   012C2C  CFE3 F035          	movff	plusw1,btemp+11
 14531   012C30  0E01               	movlw	1
 14532   012C32  2434               	addwf	(btemp+10)^0,w,c
 14533   012C34  6ED9               	movwf	fsr2l,c
 14534   012C36  0E00               	movlw	0
 14535   012C38  2035               	addwfc	(btemp+11)^0,w,c
 14536   012C3A  6EDA               	movwf	fsr2h,c
 14537   012C3C  38DF               	swapf	223,w,c
 14538   012C3E  32E8               	rrcf	wreg,f,c
 14539   012C40  0B07               	andlw	7
 14540   012C42  6E35               	movwf	(btemp+11)^0,c
 14541                           
 14542                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14543   012C44  0EFC               	movlw	252
 14544   012C46  24E1               	addwf	fsr1l,w,c
 14545   012C48  6ED9               	movwf	fsr2l,c
 14546   012C4A  0EFF               	movlw	255
 14547   012C4C  20E2               	addwfc	fsr1h,w,c
 14548   012C4E  6EDA               	movwf	fsr2h,c
 14549   012C50  3A35               	swapf	(btemp+11)^0,f,c
 14550   012C52  4635               	rlncf	(btemp+11)^0,f,c
 14551   012C54  50DF               	movf	223,w,c
 14552   012C56  1835               	xorwf	(btemp+11)^0,w,c
 14553   012C58  0B1F               	andlw	-225
 14554   012C5A  1835               	xorwf	(btemp+11)^0,w,c
 14555   012C5C  6EDF               	movwf	223,c
 14556   012C5E                     
 14557                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14558                           ;stkvar	_config @ sp[(-7)+-3]
 14559   012C5E  0EF6               	movlw	-10
 14560   012C60  CFE3 FFD9          	movff	plusw1,fsr2l
 14561   012C64  0EF7               	movlw	-9
 14562   012C66  CFE3 FFDA          	movff	plusw1,fsr2h
 14563   012C6A  38DF               	swapf	223,w,c
 14564   012C6C  32E8               	rrcf	wreg,f,c
 14565   012C6E  32E8               	rrcf	wreg,f,c
 14566   012C70  0B03               	andlw	3
 14567   012C72  6E35               	movwf	(btemp+11)^0,c
 14568                           
 14569                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14570   012C74  0EFB               	movlw	251
 14571   012C76  24E1               	addwf	fsr1l,w,c
 14572   012C78  6ED9               	movwf	fsr2l,c
 14573   012C7A  0EFF               	movlw	255
 14574   012C7C  20E2               	addwfc	fsr1h,w,c
 14575   012C7E  6EDA               	movwf	fsr2h,c
 14576   012C80  3A35               	swapf	(btemp+11)^0,f,c
 14577   012C82  4635               	rlncf	(btemp+11)^0,f,c
 14578   012C84  50DF               	movf	223,w,c
 14579   012C86  1835               	xorwf	(btemp+11)^0,w,c
 14580   012C88  0B9F               	andlw	-97
 14581   012C8A  1835               	xorwf	(btemp+11)^0,w,c
 14582   012C8C  6EDF               	movwf	223,c
 14583   012C8E                     
 14584                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14585                           ;stkvar	_config @ sp[(-7)+-3]
 14586   012C8E  0EF6               	movlw	-10
 14587   012C90  CFE3 FFD9          	movff	plusw1,fsr2l
 14588   012C94  0EF7               	movlw	-9
 14589   012C96  CFE3 FFDA          	movff	plusw1,fsr2h
 14590   012C9A  30DF               	rrcf	223,w,c
 14591   012C9C  0B1F               	andlw	31
 14592   012C9E  6E35               	movwf	(btemp+11)^0,c
 14593                           
 14594                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14595   012CA0  0EFB               	movlw	251
 14596   012CA2  24E1               	addwf	fsr1l,w,c
 14597   012CA4  6ED9               	movwf	fsr2l,c
 14598   012CA6  0EFF               	movlw	255
 14599   012CA8  20E2               	addwfc	fsr1h,w,c
 14600   012CAA  6EDA               	movwf	fsr2h,c
 14601   012CAC  50DF               	movf	223,w,c
 14602   012CAE  1835               	xorwf	(btemp+11)^0,w,c
 14603   012CB0  0BE0               	andlw	-32
 14604   012CB2  1835               	xorwf	(btemp+11)^0,w,c
 14605   012CB4  6EDF               	movwf	223,c
 14606   012CB6                     
 14607                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14608                           ;stkvar	_config @ sp[(-7)+-3]
 14609   012CB6  0EF6               	movlw	-10
 14610   012CB8  CFE3 FFD9          	movff	plusw1,fsr2l
 14611   012CBC  0EF7               	movlw	-9
 14612   012CBE  CFE3 FFDA          	movff	plusw1,fsr2h
 14613                           
 14614                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14615   012CC2  50E1               	movf	fsr1l,w,c
 14616   012CC4  0FF9               	addlw	-7
 14617   012CC6  6EE9               	movwf	fsr0l,c
 14618   012CC8  50E2               	movf	fsr1h,w,c
 14619   012CCA  6EEA               	movwf	fsr0h,c
 14620   012CCC  0EFF               	movlw	255
 14621   012CCE  22EA               	addwfc	fsr0h,f,c
 14622   012CD0  9CEF               	bcf	indf0,6,c
 14623   012CD2  A0DF               	btfss	indf2,0,c
 14624   012CD4  EF6D  F096         	goto	u2645
 14625   012CD8  8CEF               	bsf	indf0,6,c
 14626   012CDA                     u2645:
 14627   012CDA                     
 14628                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14629                           ;stkvar	_channel @ sp[(-7)+-1]
 14630   012CDA  0EF8               	movlw	-8
 14631   012CDC  50E3               	movf	plusw1,w,c
 14632   012CDE  0D0C               	mullw	12
 14633   012CE0  0E50               	movlw	80
 14634   012CE2  26F3               	addwf	243,f,c
 14635   012CE4  0E00               	movlw	0
 14636   012CE6  22F4               	addwfc	244,f,c
 14637                           
 14638                           ;stkvar	_a @ sp[(-7)+5]
 14639   012CE8  0EFE               	movlw	-2
 14640   012CEA  CFF3 FFE3          	movff	prodl,plusw1
 14641   012CEE  0EFF               	movlw	-1
 14642   012CF0  CFF4 FFE3          	movff	prodh,plusw1
 14643   012CF4                     
 14644                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14645   012CF4  0EF9               	movlw	-7
 14646   012CF6  CFE3 FFE6          	movff	plusw1,postinc1
 14647   012CFA  CFE3 FFE6          	movff	plusw1,postinc1
 14648   012CFE  CFE3 FFE6          	movff	plusw1,postinc1
 14649   012D02  CFE3 FFE6          	movff	plusw1,postinc1
 14650                           
 14651                           ;stkvar	_a @ sp[(-11)+5]
 14652   012D06  0EFA               	movlw	-6
 14653   012D08  CFE3 FFE6          	movff	plusw1,postinc1
 14654   012D0C  CFE3 FFE6          	movff	plusw1,postinc1
 14655   012D10  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14656   012D14                     
 14657                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14658   012D14  0EF6               	movlw	246
 14659   012D16  26E1               	addwf	fsr1l,f,c
 14660   012D18  0EFF               	movlw	255
 14661   012D1A  22E2               	addwfc	fsr1h,f,c
 14662   012D1C  0012               	return		;funcret
 14663   012D1E                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14664                           	callstack 0
 14665                           
 14666 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14667 ;; Defined at:
 14668 ;;		line 2690 in file "can/can.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;  ts              4  [STACK] unsigned long 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  spiTransferE    1    0        char 
 14673 ;; Return value:  Size  Location     Type
 14674 ;;                  1  [STACK] char 
 14675 ;; Registers used:
 14676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14677 ;; Tracked objects:
 14678 ;;		On entry : 0/0
 14679 ;;		On exit  : 0/0
 14680 ;;		Unchanged: 0/0
 14681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14686 ;;Total ram usage:        0 bytes
 14687 ;; Hardware stack levels used: 1
 14688 ;; Hardware stack levels required when called: 9
 14689 ;; This function calls:
 14690 ;;		_DRV_CANFDSPI_WriteWord
 14691 ;; This function is called by:
 14692 ;;		_CanInit
 14693 ;; This function uses a reentrant model
 14694 ;;
 14695                           
 14696                           	psect	text53
 14697   014BA8                     __ptext53:
 14698                           	callstack 0
 14699   014BA8                     _DRV_CANFDSPI_TimeStampSet:
 14700                           	callstack 20
 14701   014BA8                     
 14702                           ;stkvar	_ts @ sp[(0)+-4]
 14703   014BA8  0EFC               	movlw	-4
 14704   014BAA  CFE3 FFE6          	movff	plusw1,postinc1
 14705   014BAE  CFE3 FFE6          	movff	plusw1,postinc1
 14706   014BB2  CFE3 FFE6          	movff	plusw1,postinc1
 14707   014BB6  CFE3 FFE6          	movff	plusw1,postinc1
 14708   014BBA  0E10               	movlw	16
 14709   014BBC  6EE6               	movwf	postinc1,c
 14710   014BBE  0E00               	movlw	0
 14711   014BC0  6EE6               	movwf	postinc1,c
 14712   014BC2  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14713   014BC6                     
 14714                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14715   014BC6  52E5               	movf	postdec1,f,c
 14716   014BC8  52E5               	movf	postdec1,f,c
 14717   014BCA  52E5               	movf	postdec1,f,c
 14718   014BCC  52E5               	movf	postdec1,f,c
 14719   014BCE  0012               	return		;funcret
 14720   014BD0                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14721                           	callstack 0
 14722                           
 14723 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14724 ;; Defined at:
 14725 ;;		line 2725 in file "can/can.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  ps              2  [STACK] unsigned short 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;  spiTransferE    1    0        char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;                  1  [STACK] char 
 14732 ;; Registers used:
 14733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;Total ram usage:        0 bytes
 14744 ;; Hardware stack levels used: 1
 14745 ;; Hardware stack levels required when called: 9
 14746 ;; This function calls:
 14747 ;;		_DRV_CANFDSPI_WriteHalfWord
 14748 ;; This function is called by:
 14749 ;;		_CanInit
 14750 ;; This function uses a reentrant model
 14751 ;;
 14752                           
 14753                           	psect	text54
 14754   014C18                     __ptext54:
 14755                           	callstack 0
 14756   014C18                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14757                           	callstack 20
 14758   014C18                     
 14759                           ;stkvar	_ps @ sp[(0)+-2]
 14760   014C18  0EFE               	movlw	-2
 14761   014C1A  CFE3 FFE6          	movff	plusw1,postinc1
 14762   014C1E  CFE3 FFE6          	movff	plusw1,postinc1
 14763   014C22  0E14               	movlw	20
 14764   014C24  6EE6               	movwf	postinc1,c
 14765   014C26  0E00               	movlw	0
 14766   014C28  6EE6               	movwf	postinc1,c
 14767   014C2A  ECA1  F09E         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14768   014C2E                     
 14769                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14770   014C2E  52E5               	movf	postdec1,f,c
 14771   014C30  52E5               	movf	postdec1,f,c
 14772   014C32  0012               	return		;funcret
 14773   014C34                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14774                           	callstack 0
 14775                           
 14776 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14777 ;; Defined at:
 14778 ;;		line 2634 in file "can/can.c"
 14779 ;; Parameters:    Size  Location     Type
 14780 ;;		None
 14781 ;; Auto vars:     Size  Location     Type
 14782 ;;  d               1  [STACK] unsigned char 
 14783 ;;  spiTransferE    1  [STACK] char 
 14784 ;; Return value:  Size  Location     Type
 14785 ;;                  1  [STACK] char 
 14786 ;; Registers used:
 14787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14788 ;; Tracked objects:
 14789 ;;		On entry : 0/0
 14790 ;;		On exit  : 0/0
 14791 ;;		Unchanged: 0/0
 14792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;Total ram usage:        0 bytes
 14798 ;; Hardware stack levels used: 1
 14799 ;; Hardware stack levels required when called: 9
 14800 ;; This function calls:
 14801 ;;		_DRV_CANFDSPI_ReadByte
 14802 ;;		_DRV_CANFDSPI_WriteByte
 14803 ;; This function is called by:
 14804 ;;		_CanInit
 14805 ;; This function uses a reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text55
 14809   0148E2                     __ptext55:
 14810                           	callstack 0
 14811   0148E2                     _DRV_CANFDSPI_TimeStampEnable:
 14812                           	callstack 0
 14813                           
 14814                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14815   0148E2  52E6               	movf	postinc1,f,c
 14816   0148E4  52E6               	movf	postinc1,f,c
 14817   0148E6                     
 14818                           ;can/can.c: 2637:     uint8_t d = 0;
 14819                           ;stkvar	_d @ sp[(-2)+0]
 14820   0148E6  0EFE               	movlw	-2
 14821   0148E8  6AE3               	clrf	plusw1,c
 14822   0148EA                     
 14823                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14824                           ;stkvar	_d @ sp[(-2)+0]
 14825   0148EA  0EFE               	movlw	254
 14826   0148EC  24E1               	addwf	fsr1l,w,c
 14827   0148EE  6E2A               	movwf	btemp^0,c
 14828   0148F0  0EFF               	movlw	255
 14829   0148F2  20E2               	addwfc	fsr1h,w,c
 14830   0148F4  6E2B               	movwf	(btemp+1)^0,c
 14831   0148F6  C02A  FFE6         	movff	btemp,postinc1
 14832   0148FA  C02B  FFE6         	movff	btemp+1,postinc1
 14833   0148FE  0E16               	movlw	22
 14834   014900  6EE6               	movwf	postinc1,c
 14835   014902  0E00               	movlw	0
 14836   014904  6EE6               	movwf	postinc1,c
 14837   014906  EC40  F0A4         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14838                           
 14839                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14840   01490A  0EFF               	movlw	-1
 14841   01490C  C02A  FFE3         	movff	btemp,plusw1
 14842   014910                     
 14843                           ;can/can.c: 2641:     if (spiTransferError) {
 14844                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14845   014910  0EFF               	movlw	-1
 14846   014912  50E3               	movf	plusw1,w,c
 14847   014914  B4D8               	btfsc	status,2,c
 14848   014916  EF8F  F0A4         	goto	u2671
 14849   01491A  EF91  F0A4         	goto	u2670
 14850   01491E                     u2671:
 14851   01491E  EF93  F0A4         	goto	l5005
 14852   014922                     u2670:
 14853   014922  EF9E  F0A4         	goto	l623
 14854   014926                     l5005:
 14855                           
 14856                           ;can/can.c: 2646:     d |= 0x01;
 14857                           ;stkvar	_d @ sp[(-2)+0]
 14858   014926  0EFE               	movlw	-2
 14859   014928  80E3               	bsf	plusw1,0,c
 14860   01492A                     
 14861                           ;stkvar	_d @ sp[(-2)+0]
 14862   01492A  0EFE               	movlw	-2
 14863   01492C  50E3               	movf	plusw1,w,c
 14864   01492E  6EE6               	movwf	postinc1,c
 14865   014930  0E16               	movlw	22
 14866   014932  6EE6               	movwf	postinc1,c
 14867   014934  0E00               	movlw	0
 14868   014936  6EE6               	movwf	postinc1,c
 14869   014938  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14870   01493C                     l623:
 14871                           
 14872                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14873   01493C  52E5               	movf	postdec1,f,c
 14874   01493E  52E5               	movf	postdec1,f,c
 14875   014940  0012               	return		;funcret
 14876   014942                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14877                           	callstack 0
 14878                           
 14879 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14880 ;; Defined at:
 14881 ;;		line 1539 in file "can/can.c"
 14882 ;; Parameters:    Size  Location     Type
 14883 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14884 ;;		 -> tefConfig(1), 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14887 ;;  spiTransferE    1    0        char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1  [STACK] char 
 14890 ;; Registers used:
 14891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14901 ;;Total ram usage:        0 bytes
 14902 ;; Hardware stack levels used: 1
 14903 ;; Hardware stack levels required when called: 9
 14904 ;; This function calls:
 14905 ;;		_DRV_CANFDSPI_WriteWord
 14906 ;; This function is called by:
 14907 ;;		_CanInit
 14908 ;; This function uses a reentrant model
 14909 ;;
 14910                           
 14911                           	psect	text56
 14912   013ED0                     __ptext56:
 14913                           	callstack 0
 14914   013ED0                     _DRV_CANFDSPI_TefConfigure:
 14915                           	callstack 0
 14916                           
 14917                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14918   013ED0  52E6               	movf	postinc1,f,c
 14919   013ED2  52E6               	movf	postinc1,f,c
 14920   013ED4  52E6               	movf	postinc1,f,c
 14921   013ED6  52E6               	movf	postinc1,f,c
 14922   013ED8                     
 14923                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14924   013ED8  0EDD               	movlw	low _canFifoResetValues
 14925   013EDA  6EF6               	movwf	tblptrl,c
 14926   013EDC                     	if	1	;There is more than 1 active tblptr byte
 14927   013EDC  0EFF               	movlw	high _canFifoResetValues
 14928   013EDE  6EF7               	movwf	tblptrh,c
 14929   013EE0                     	endif
 14930   013EE0                     	if	1	;There are 3 active tblptr bytes
 14931   013EE0  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14932   013EE2  6EF8               	movwf	tblptru,c
 14933   013EE4                     	endif
 14934   013EE4  0009               	tblrd		*+
 14935   013EE6  CFF5 F032          	movff	tablat,btemp+8
 14936   013EEA  0009               	tblrd		*+
 14937   013EEC  CFF5 F033          	movff	tablat,btemp+9
 14938   013EF0  0009               	tblrd		*+
 14939   013EF2  CFF5 F034          	movff	tablat,btemp+10
 14940   013EF6  0009               	tblrd		*+
 14941   013EF8  CFF5 F035          	movff	tablat,btemp+11
 14942                           
 14943                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14944   013EFC  0EFC               	movlw	-4
 14945   013EFE  C032  FFE3         	movff	btemp+8,plusw1
 14946   013F02  0EFD               	movlw	-3
 14947   013F04  C033  FFE3         	movff	btemp+9,plusw1
 14948   013F08  0EFE               	movlw	-2
 14949   013F0A  C034  FFE3         	movff	btemp+10,plusw1
 14950   013F0E  0EFF               	movlw	-1
 14951   013F10  C035  FFE3         	movff	btemp+11,plusw1
 14952   013F14                     
 14953                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14954                           ;stkvar	_config @ sp[(-4)+-2]
 14955   013F14  0EFA               	movlw	-6
 14956   013F16  CFE3 FFD9          	movff	plusw1,fsr2l
 14957   013F1A  0EFB               	movlw	-5
 14958   013F1C  CFE3 FFDA          	movff	plusw1,fsr2h
 14959   013F20  30DF               	rrcf	223,w,c
 14960   013F22  0B1F               	andlw	31
 14961   013F24  6E35               	movwf	(btemp+11)^0,c
 14962                           
 14963                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14964   013F26  0EFF               	movlw	255
 14965   013F28  24E1               	addwf	fsr1l,w,c
 14966   013F2A  6ED9               	movwf	fsr2l,c
 14967   013F2C  0EFF               	movlw	255
 14968   013F2E  20E2               	addwfc	fsr1h,w,c
 14969   013F30  6EDA               	movwf	fsr2h,c
 14970   013F32  50DF               	movf	223,w,c
 14971   013F34  1835               	xorwf	(btemp+11)^0,w,c
 14972   013F36  0BE0               	andlw	-32
 14973   013F38  1835               	xorwf	(btemp+11)^0,w,c
 14974   013F3A  6EDF               	movwf	223,c
 14975   013F3C                     
 14976                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14977                           ;stkvar	_config @ sp[(-4)+-2]
 14978   013F3C  0EFA               	movlw	-6
 14979   013F3E  CFE3 FFD9          	movff	plusw1,fsr2l
 14980   013F42  0EFB               	movlw	-5
 14981   013F44  CFE3 FFDA          	movff	plusw1,fsr2h
 14982                           
 14983                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14984   013F48  50E1               	movf	fsr1l,w,c
 14985   013F4A  0FFC               	addlw	-4
 14986   013F4C  6EE9               	movwf	fsr0l,c
 14987   013F4E  50E2               	movf	fsr1h,w,c
 14988   013F50  6EEA               	movwf	fsr0h,c
 14989   013F52  0EFF               	movlw	255
 14990   013F54  22EA               	addwfc	fsr0h,f,c
 14991   013F56  9AEF               	bcf	indf0,5,c
 14992   013F58  A0DF               	btfss	indf2,0,c
 14993   013F5A  EFB0  F09F         	goto	u2635
 14994   013F5E  8AEF               	bsf	indf0,5,c
 14995   013F60                     u2635:
 14996   013F60                     
 14997                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14998   013F60  0EFC               	movlw	-4
 14999   013F62  CFE3 FFE6          	movff	plusw1,postinc1
 15000   013F66  CFE3 FFE6          	movff	plusw1,postinc1
 15001   013F6A  CFE3 FFE6          	movff	plusw1,postinc1
 15002   013F6E  CFE3 FFE6          	movff	plusw1,postinc1
 15003   013F72  0E40               	movlw	64
 15004   013F74  6EE6               	movwf	postinc1,c
 15005   013F76  0E00               	movlw	0
 15006   013F78  6EE6               	movwf	postinc1,c
 15007   013F7A  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 15008   013F7E                     
 15009                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 15010   013F7E  0EFA               	movlw	250
 15011   013F80  26E1               	addwf	fsr1l,f,c
 15012   013F82  0EFF               	movlw	255
 15013   013F84  22E2               	addwfc	fsr1h,f,c
 15014   013F86  0012               	return		;funcret
 15015   013F88                     __end_of_DRV_CANFDSPI_TefConfigure:
 15016                           	callstack 0
 15017                           
 15018 ;; *************** function _DRV_CANFDSPI_Reset *****************
 15019 ;; Defined at:
 15020 ;;		line 257 in file "can/can.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;		None
 15023 ;; Auto vars:     Size  Location     Type
 15024 ;;  spiTransferS    2    0        unsigned short 
 15025 ;;  spiTransferE    1    0        char 
 15026 ;; Return value:  Size  Location     Type
 15027 ;;                  1  [STACK] char 
 15028 ;; Registers used:
 15029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 15030 ;; Tracked objects:
 15031 ;;		On entry : 0/0
 15032 ;;		On exit  : 0/0
 15033 ;;		Unchanged: 0/0
 15034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15039 ;;Total ram usage:        0 bytes
 15040 ;; Hardware stack levels used: 1
 15041 ;; Hardware stack levels required when called: 8
 15042 ;; This function calls:
 15043 ;;		_SPI2_Open
 15044 ;;		_SpiTransfer
 15045 ;; This function is called by:
 15046 ;;		_CanInit
 15047 ;; This function uses a reentrant model
 15048 ;;
 15049                           
 15050                           	psect	text57
 15051   014B7C                     __ptext57:
 15052                           	callstack 0
 15053   014B7C                     _DRV_CANFDSPI_Reset:
 15054                           	callstack 21
 15055   014B7C                     
 15056                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 15057   014B7C  0101               	movlb	1	; () banked
 15058   014B7E  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 15059   014B80                     
 15060                           ; BSR set to: 1
 15061                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 15062   014B80  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 15063   014B82                     
 15064                           ; BSR set to: 1
 15065                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 15066   014B82  0E00               	movlw	0
 15067   014B84  6EE6               	movwf	postinc1,c
 15068   014B86  ECC4  F09F         	call	_SPI2_Open	;wreg free
 15069   014B8A  0E02               	movlw	2
 15070   014B8C  6EE6               	movwf	postinc1,c
 15071   014B8E  0E00               	movlw	0
 15072   014B90  6EE6               	movwf	postinc1,c
 15073   014B92  0E00               	movlw	low _spiReceiveBuffer
 15074   014B94  6EE6               	movwf	postinc1,c
 15075   014B96  0E02               	movlw	high _spiReceiveBuffer
 15076   014B98  6EE6               	movwf	postinc1,c
 15077   014B9A  0E00               	movlw	low _spiTransmitBuffer
 15078   014B9C  6EE6               	movwf	postinc1,c
 15079   014B9E  0E01               	movlw	high _spiTransmitBuffer
 15080   014BA0  6EE6               	movwf	postinc1,c
 15081   014BA2  EC06  F09F         	call	_SpiTransfer	;wreg free
 15082   014BA6                     
 15083                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 15084   014BA6  0012               	return		;funcret
 15085   014BA8                     __end_of_DRV_CANFDSPI_Reset:
 15086                           	callstack 0
 15087                           
 15088 ;; *************** function _SPI2_Open *****************
 15089 ;; Defined at:
 15090 ;;		line 72 in file "mcc_generated_files/spi2.c"
 15091 ;; Parameters:    Size  Location     Type
 15092 ;;  spi2UniqueCo    1  [STACK] enum E358
 15093 ;; Auto vars:     Size  Location     Type
 15094 ;;		None
 15095 ;; Return value:  Size  Location     Type
 15096 ;;                  1  [STACK] _Bool 
 15097 ;; Registers used:
 15098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 15099 ;; Tracked objects:
 15100 ;;		On entry : 3F/1
 15101 ;;		On exit  : 0/0
 15102 ;;		Unchanged: 0/0
 15103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15108 ;;Total ram usage:        0 bytes
 15109 ;; Hardware stack levels used: 1
 15110 ;; Hardware stack levels required when called: 7
 15111 ;; This function calls:
 15112 ;;		Nothing
 15113 ;; This function is called by:
 15114 ;;		_DRV_CANFDSPI_Reset
 15115 ;; This function uses a reentrant model
 15116 ;;
 15117                           
 15118                           	psect	text58
 15119   013F88                     __ptext58:
 15120                           	callstack 0
 15121   013F88                     _SPI2_Open:
 15122                           	callstack 21
 15123   013F88                     
 15124                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 15125   013F88  BA63               	btfsc	99,5,c	;volatile
 15126   013F8A  EFC9  F09F         	goto	u2331
 15127   013F8E  EFCB  F09F         	goto	u2330
 15128   013F92                     u2331:
 15129   013F92  EF1D  F0A0         	goto	l1120
 15130   013F96                     u2330:
 15131   013F96                     
 15132                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 15133                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 15134   013F96  0EFF               	movlw	-1
 15135   013F98  50E3               	movf	plusw1,w,c
 15136   013F9A  0D04               	mullw	4
 15137   013F9C  0E01               	movlw	1
 15138   013F9E  26F3               	addwf	243,f,c
 15139   013FA0  0E00               	movlw	0
 15140   013FA2  22F4               	addwfc	244,f,c
 15141   013FA4  0EE9               	movlw	low _spi2_configuration
 15142   013FA6  24F3               	addwf	243,w,c
 15143   013FA8  6EF6               	movwf	tblptrl,c
 15144   013FAA  0EFF               	movlw	high _spi2_configuration
 15145   013FAC  20F4               	addwfc	244,w,c
 15146   013FAE  6EF7               	movwf	tblptrh,c
 15147   013FB0                     	if	1	;There are 3 active tblptr bytes
 15148   013FB0  6AF8               	clrf	tblptru,c
 15149   013FB2  0E00               	movlw	low (__mediumconst shr (0+16))
 15150   013FB4  22F8               	addwfc	tblptru,f,c
 15151   013FB6                     	endif
 15152   013FB6  0008               	tblrd		*
 15153   013FB8  CFF5 FF64          	movff	tablat,3940	;volatile
 15154                           
 15155                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 15156                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 15157   013FBC  0EFF               	movlw	-1
 15158   013FBE  50E3               	movf	plusw1,w,c
 15159   013FC0  0D04               	mullw	4
 15160   013FC2  0EE9               	movlw	low _spi2_configuration
 15161   013FC4  24F3               	addwf	243,w,c
 15162   013FC6  6EF6               	movwf	tblptrl,c
 15163   013FC8  0EFF               	movlw	high _spi2_configuration
 15164   013FCA  20F4               	addwfc	244,w,c
 15165   013FCC  6EF7               	movwf	tblptrh,c
 15166   013FCE                     	if	1	;There are 3 active tblptr bytes
 15167   013FCE  6AF8               	clrf	tblptru,c
 15168   013FD0  0E00               	movlw	low (__mediumconst shr (0+16))
 15169   013FD2  22F8               	addwfc	tblptru,f,c
 15170   013FD4                     	endif
 15171   013FD4  0008               	tblrd		*
 15172   013FD6  CFF5 FF63          	movff	tablat,3939	;volatile
 15173   013FDA                     
 15174                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 15175   013FDA  6A62               	clrf	98,c	;volatile
 15176                           
 15177                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 15178                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 15179   013FDC  0EFF               	movlw	-1
 15180   013FDE  50E3               	movf	plusw1,w,c
 15181   013FE0  0D04               	mullw	4
 15182   013FE2  0E02               	movlw	2
 15183   013FE4  26F3               	addwf	243,f,c
 15184   013FE6  0E00               	movlw	0
 15185   013FE8  22F4               	addwfc	244,f,c
 15186   013FEA  0EE9               	movlw	low _spi2_configuration
 15187   013FEC  24F3               	addwf	243,w,c
 15188   013FEE  6EF6               	movwf	tblptrl,c
 15189   013FF0  0EFF               	movlw	high _spi2_configuration
 15190   013FF2  20F4               	addwfc	244,w,c
 15191   013FF4  6EF7               	movwf	tblptrh,c
 15192   013FF6                     	if	1	;There are 3 active tblptr bytes
 15193   013FF6  6AF8               	clrf	tblptru,c
 15194   013FF8  0E00               	movlw	low (__mediumconst shr (0+16))
 15195   013FFA  22F8               	addwfc	tblptru,f,c
 15196   013FFC                     	endif
 15197   013FFC  0008               	tblrd		*
 15198   013FFE  CFF5 FF65          	movff	tablat,3941	;volatile
 15199   014002                     
 15200                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 15201                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 15202   014002  0EFF               	movlw	-1
 15203   014004  50E3               	movf	plusw1,w,c
 15204   014006  0D04               	mullw	4
 15205   014008  0E03               	movlw	3
 15206   01400A  26F3               	addwf	243,f,c
 15207   01400C  0E00               	movlw	0
 15208   01400E  22F4               	addwfc	244,f,c
 15209   014010  0EE9               	movlw	low _spi2_configuration
 15210   014012  24F3               	addwf	243,w,c
 15211   014014  6EF6               	movwf	tblptrl,c
 15212   014016  0EFF               	movlw	high _spi2_configuration
 15213   014018  20F4               	addwfc	244,w,c
 15214   01401A  6EF7               	movwf	tblptrh,c
 15215   01401C                     	if	1	;There are 3 active tblptr bytes
 15216   01401C  6AF8               	clrf	tblptru,c
 15217   01401E  0E00               	movlw	low (__mediumconst shr (0+16))
 15218   014020  22F8               	addwfc	tblptru,f,c
 15219   014022                     	endif
 15220   014022  0008               	tblrd		*
 15221   014024  CFF5 F035          	movff	tablat,btemp+11
 15222   014028  3A35               	swapf	(btemp+11)^0,f,c
 15223   01402A  4635               	rlncf	(btemp+11)^0,f,c
 15224   01402C  4635               	rlncf	(btemp+11)^0,f,c
 15225   01402E  5095               	movf	149,w,c	;volatile
 15226   014030  1835               	xorwf	(btemp+11)^0,w,c
 15227   014032  0BBF               	andlw	-65
 15228   014034  1835               	xorwf	(btemp+11)^0,w,c
 15229   014036  6E95               	movwf	149,c	;volatile
 15230   014038                     
 15231                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 15232   014038  8A63               	bsf	99,5,c	;volatile
 15233   01403A                     l1120:
 15234                           
 15235                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 15236   01403A  52E5               	movf	postdec1,f,c
 15237   01403C  0012               	return		;funcret
 15238   01403E                     __end_of_SPI2_Open:
 15239                           	callstack 0
 15240                           
 15241 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 15242 ;; Defined at:
 15243 ;;		line 1172 in file "can/can.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;  channel         1  [STACK] enum E5287
 15246 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 15247 ;;		 -> rxfConfig(3), 
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 15250 ;;  a               2  [STACK] unsigned short 
 15251 ;;  spiTransferE    1    0        char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  1  [STACK] char 
 15254 ;; Registers used:
 15255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;Total ram usage:        0 bytes
 15266 ;; Hardware stack levels used: 1
 15267 ;; Hardware stack levels required when called: 9
 15268 ;; This function calls:
 15269 ;;		_DRV_CANFDSPI_WriteWord
 15270 ;; This function is called by:
 15271 ;;		_CanInit
 15272 ;; This function uses a reentrant model
 15273 ;;
 15274                           
 15275                           	psect	text59
 15276   01313C                     __ptext59:
 15277                           	callstack 0
 15278   01313C                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 15279                           	callstack 0
 15280                           
 15281                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15282   01313C  0E07               	movlw	7
 15283   01313E  26E1               	addwf	fsr1l,f,c
 15284   013140  0E00               	movlw	0
 15285   013142  22E2               	addwfc	fsr1h,f,c
 15286   013144                     
 15287                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 15288                           ;stkvar	_channel @ sp[(-7)+-1]
 15289   013144  0EF8               	movlw	-8
 15290   013146  50E3               	movf	plusw1,w,c
 15291   013148  A4D8               	btfss	status,2,c
 15292   01314A  EFA9  F098         	goto	u2651
 15293   01314E  EFAB  F098         	goto	u2650
 15294   013152                     u2651:
 15295   013152  EFAD  F098         	goto	l4969
 15296   013156                     u2650:
 15297   013156  EF3A  F099         	goto	l346
 15298   01315A                     l4969:
 15299                           
 15300                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 15301   01315A  0EDD               	movlw	low _canFifoResetValues
 15302   01315C  6EF6               	movwf	tblptrl,c
 15303   01315E                     	if	1	;There is more than 1 active tblptr byte
 15304   01315E  0EFF               	movlw	high _canFifoResetValues
 15305   013160  6EF7               	movwf	tblptrh,c
 15306   013162                     	endif
 15307   013162                     	if	1	;There are 3 active tblptr bytes
 15308   013162  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 15309   013164  6EF8               	movwf	tblptru,c
 15310   013166                     	endif
 15311   013166  0009               	tblrd		*+
 15312   013168  CFF5 F032          	movff	tablat,btemp+8
 15313   01316C  0009               	tblrd		*+
 15314   01316E  CFF5 F033          	movff	tablat,btemp+9
 15315   013172  0009               	tblrd		*+
 15316   013174  CFF5 F034          	movff	tablat,btemp+10
 15317   013178  0009               	tblrd		*+
 15318   01317A  CFF5 F035          	movff	tablat,btemp+11
 15319                           
 15320                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15321   01317E  0EF9               	movlw	-7
 15322   013180  C032  FFE3         	movff	btemp+8,plusw1
 15323   013184  0EFA               	movlw	-6
 15324   013186  C033  FFE3         	movff	btemp+9,plusw1
 15325   01318A  0EFB               	movlw	-5
 15326   01318C  C034  FFE3         	movff	btemp+10,plusw1
 15327   013190  0EFC               	movlw	-4
 15328   013192  C035  FFE3         	movff	btemp+11,plusw1
 15329   013196                     
 15330                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 15331                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15332   013196  50E1               	movf	fsr1l,w,c
 15333   013198  0FF9               	addlw	-7
 15334   01319A  6ED9               	movwf	fsr2l,c
 15335   01319C  50E2               	movf	fsr1h,w,c
 15336   01319E  6EDA               	movwf	fsr2h,c
 15337   0131A0  0EFF               	movlw	255
 15338   0131A2  22DA               	addwfc	fsr2h,f,c
 15339   0131A4  9EDF               	bcf	indf2,7,c
 15340   0131A6                     
 15341                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 15342                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15343   0131A6  0EFC               	movlw	252
 15344   0131A8  24E1               	addwf	fsr1l,w,c
 15345   0131AA  6ED9               	movwf	fsr2l,c
 15346   0131AC  0EFF               	movlw	255
 15347   0131AE  20E2               	addwfc	fsr1h,w,c
 15348   0131B0  6EDA               	movwf	fsr2h,c
 15349                           
 15350                           ;stkvar	_config @ sp[(-7)+-3]
 15351   0131B2  0EF6               	movlw	-10
 15352   0131B4  CFE3 F034          	movff	plusw1,btemp+10
 15353   0131B8  0EF7               	movlw	-9
 15354   0131BA  CFE3 F035          	movff	plusw1,btemp+11
 15355   0131BE  0E01               	movlw	1
 15356   0131C0  2434               	addwf	(btemp+10)^0,w,c
 15357   0131C2  6EE9               	movwf	fsr0l,c
 15358   0131C4  0E00               	movlw	0
 15359   0131C6  2035               	addwfc	(btemp+11)^0,w,c
 15360   0131C8  6EEA               	movwf	fsr0h,c
 15361   0131CA  50EF               	movf	indf0,w,c
 15362   0131CC  6E35               	movwf	(btemp+11)^0,c
 15363                           
 15364                           ;stkvar	_config @ sp[(-7)+-3]
 15365   0131CE  0EF6               	movlw	-10
 15366   0131D0  CFE3 F032          	movff	plusw1,btemp+8
 15367   0131D4  0EF7               	movlw	-9
 15368   0131D6  CFE3 F033          	movff	plusw1,btemp+9
 15369   0131DA  0E02               	movlw	2
 15370   0131DC  2432               	addwf	(btemp+8)^0,w,c
 15371   0131DE  6EE9               	movwf	fsr0l,c
 15372   0131E0  0E00               	movlw	0
 15373   0131E2  2033               	addwfc	(btemp+9)^0,w,c
 15374   0131E4  6EEA               	movwf	fsr0h,c
 15375   0131E6  50EF               	movf	indf0,w,c
 15376   0131E8  6E34               	movwf	(btemp+10)^0,c
 15377   0131EA  0E05               	movlw	5
 15378   0131EC  6E2A               	movwf	btemp^0,c
 15379   0131EE                     u2665:
 15380   0131EE  90D8               	bcf	status,0,c
 15381   0131F0  3634               	rlcf	(btemp+10)^0,f,c
 15382   0131F2  2E2A               	decfsz	btemp^0,f,c
 15383   0131F4  EFF7  F098         	goto	u2665
 15384   0131F8  5034               	movf	(btemp+10)^0,w,c
 15385   0131FA  1035               	iorwf	(btemp+11)^0,w,c
 15386   0131FC  6EDF               	movwf	indf2,c
 15387   0131FE                     
 15388                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 15389                           ;stkvar	_config @ sp[(-7)+-3]
 15390   0131FE  0EF6               	movlw	-10
 15391   013200  CFE3 FFD9          	movff	plusw1,fsr2l
 15392   013204  0EF7               	movlw	-9
 15393   013206  CFE3 FFDA          	movff	plusw1,fsr2h
 15394   01320A  50DF               	movf	indf2,w,c
 15395   01320C  6E35               	movwf	(btemp+11)^0,c
 15396                           
 15397                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15398   01320E  50E1               	movf	fsr1l,w,c
 15399   013210  0FF9               	addlw	-7
 15400   013212  6ED9               	movwf	fsr2l,c
 15401   013214  50E2               	movf	fsr1h,w,c
 15402   013216  6EDA               	movwf	fsr2h,c
 15403   013218  0EFF               	movlw	255
 15404   01321A  22DA               	addwfc	fsr2h,f,c
 15405   01321C  3A35               	swapf	(btemp+11)^0,f,c
 15406   01321E  4635               	rlncf	(btemp+11)^0,f,c
 15407   013220  50DF               	movf	223,w,c
 15408   013222  1835               	xorwf	(btemp+11)^0,w,c
 15409   013224  0BDF               	andlw	-33
 15410   013226  1835               	xorwf	(btemp+11)^0,w,c
 15411   013228  6EDF               	movwf	223,c
 15412   01322A                     
 15413                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 15414                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15415   01322A  50E1               	movf	fsr1l,w,c
 15416   01322C  0FF9               	addlw	-7
 15417   01322E  6ED9               	movwf	fsr2l,c
 15418   013230  50E2               	movf	fsr1h,w,c
 15419   013232  6EDA               	movwf	fsr2h,c
 15420   013234  0EFF               	movlw	255
 15421   013236  22DA               	addwfc	fsr2h,f,c
 15422   013238  80DF               	bsf	indf2,0,c
 15423   01323A                     
 15424                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 15425                           ;stkvar	_channel @ sp[(-7)+-1]
 15426   01323A  0EF8               	movlw	-8
 15427   01323C  50E3               	movf	plusw1,w,c
 15428   01323E  0D0C               	mullw	12
 15429   013240  0E50               	movlw	80
 15430   013242  26F3               	addwf	243,f,c
 15431   013244  0E00               	movlw	0
 15432   013246  22F4               	addwfc	244,f,c
 15433                           
 15434                           ;stkvar	_a @ sp[(-7)+5]
 15435   013248  0EFE               	movlw	-2
 15436   01324A  CFF3 FFE3          	movff	prodl,plusw1
 15437   01324E  0EFF               	movlw	-1
 15438   013250  CFF4 FFE3          	movff	prodh,plusw1
 15439   013254                     
 15440                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15441   013254  0EF9               	movlw	-7
 15442   013256  CFE3 FFE6          	movff	plusw1,postinc1
 15443   01325A  CFE3 FFE6          	movff	plusw1,postinc1
 15444   01325E  CFE3 FFE6          	movff	plusw1,postinc1
 15445   013262  CFE3 FFE6          	movff	plusw1,postinc1
 15446                           
 15447                           ;stkvar	_a @ sp[(-11)+5]
 15448   013266  0EFA               	movlw	-6
 15449   013268  CFE3 FFE6          	movff	plusw1,postinc1
 15450   01326C  CFE3 FFE6          	movff	plusw1,postinc1
 15451   013270  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 15452   013274                     l346:
 15453                           
 15454                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 15455   013274  0EF6               	movlw	246
 15456   013276  26E1               	addwf	fsr1l,f,c
 15457   013278  0EFF               	movlw	255
 15458   01327A  22E2               	addwfc	fsr1h,f,c
 15459   01327C  0012               	return		;funcret
 15460   01327E                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 15461                           	callstack 0
 15462                           
 15463 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 15464 ;; Defined at:
 15465 ;;		line 499 in file "can/can.c"
 15466 ;; Parameters:    Size  Location     Type
 15467 ;;  opMode          1  [STACK] enum E5357
 15468 ;; Auto vars:     Size  Location     Type
 15469 ;;  d               1  [STACK] unsigned char 
 15470 ;;  spiTransferE    1  [STACK] char 
 15471 ;; Return value:  Size  Location     Type
 15472 ;;                  1  [STACK] char 
 15473 ;; Registers used:
 15474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 15475 ;; Tracked objects:
 15476 ;;		On entry : 0/0
 15477 ;;		On exit  : 0/0
 15478 ;;		Unchanged: 0/0
 15479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15484 ;;Total ram usage:        0 bytes
 15485 ;; Hardware stack levels used: 1
 15486 ;; Hardware stack levels required when called: 9
 15487 ;; This function calls:
 15488 ;;		_DRV_CANFDSPI_ReadByte
 15489 ;;		_DRV_CANFDSPI_WriteByte
 15490 ;; This function is called by:
 15491 ;;		_CanInit
 15492 ;; This function uses a reentrant model
 15493 ;;
 15494                           
 15495                           	psect	text60
 15496   0145EC                     __ptext60:
 15497                           	callstack 0
 15498   0145EC                     _DRV_CANFDSPI_OperationModeSelect:
 15499                           	callstack 0
 15500                           
 15501                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15502   0145EC  52E6               	movf	postinc1,f,c
 15503   0145EE  52E6               	movf	postinc1,f,c
 15504   0145F0                     
 15505                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 15506                           ;stkvar	_d @ sp[(-2)+0]
 15507   0145F0  0EFE               	movlw	-2
 15508   0145F2  6AE3               	clrf	plusw1,c
 15509   0145F4                     
 15510                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 15511                           ;stkvar	_d @ sp[(-2)+0]
 15512   0145F4  0EFE               	movlw	254
 15513   0145F6  24E1               	addwf	fsr1l,w,c
 15514   0145F8  6E2A               	movwf	btemp^0,c
 15515   0145FA  0EFF               	movlw	255
 15516   0145FC  20E2               	addwfc	fsr1h,w,c
 15517   0145FE  6E2B               	movwf	(btemp+1)^0,c
 15518   014600  C02A  FFE6         	movff	btemp,postinc1
 15519   014604  C02B  FFE6         	movff	btemp+1,postinc1
 15520   014608  0E03               	movlw	3
 15521   01460A  6EE6               	movwf	postinc1,c
 15522   01460C  0E00               	movlw	0
 15523   01460E  6EE6               	movwf	postinc1,c
 15524   014610  EC40  F0A4         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 15525                           
 15526                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15527   014614  0EFF               	movlw	-1
 15528   014616  C02A  FFE3         	movff	btemp,plusw1
 15529   01461A                     
 15530                           ;can/can.c: 506:     if (spiTransferError) {
 15531                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15532   01461A  0EFF               	movlw	-1
 15533   01461C  50E3               	movf	plusw1,w,c
 15534   01461E  B4D8               	btfsc	status,2,c
 15535   014620  EF14  F0A3         	goto	u2681
 15536   014624  EF16  F0A3         	goto	u2680
 15537   014628                     u2681:
 15538   014628  EF18  F0A3         	goto	l5037
 15539   01462C                     u2680:
 15540   01462C  EF35  F0A3         	goto	l222
 15541   014630                     l5037:
 15542                           
 15543                           ;can/can.c: 511:     d &= ~0x07;
 15544                           ;stkvar	_d @ sp[(-2)+0]
 15545   014630  0EFE               	movlw	-2
 15546   014632  CFE3 F02A          	movff	plusw1,btemp
 15547   014636  0EF8               	movlw	248
 15548   014638  162A               	andwf	btemp^0,f,c
 15549   01463A  0EFE               	movlw	-2
 15550   01463C  C02A  FFE3         	movff	btemp,plusw1
 15551   014640                     
 15552                           ;can/can.c: 512:     d |= opMode;
 15553                           ;stkvar	_opMode @ sp[(-2)+-1]
 15554   014640  0EFD               	movlw	-3
 15555   014642  CFE3 F035          	movff	plusw1,btemp+11
 15556                           
 15557                           ;stkvar	_d @ sp[(-2)+0]
 15558   014646  50E1               	movf	fsr1l,w,c
 15559   014648  0FFE               	addlw	-2
 15560   01464A  6ED9               	movwf	fsr2l,c
 15561   01464C  50E2               	movf	fsr1h,w,c
 15562   01464E  6EDA               	movwf	fsr2h,c
 15563   014650  0EFF               	movlw	255
 15564   014652  22DA               	addwfc	fsr2h,f,c
 15565   014654  5035               	movf	(btemp+11)^0,w,c
 15566   014656  12DF               	iorwf	indf2,f,c
 15567   014658                     
 15568                           ;stkvar	_d @ sp[(-2)+0]
 15569   014658  0EFE               	movlw	-2
 15570   01465A  50E3               	movf	plusw1,w,c
 15571   01465C  6EE6               	movwf	postinc1,c
 15572   01465E  0E03               	movlw	3
 15573   014660  6EE6               	movwf	postinc1,c
 15574   014662  0E00               	movlw	0
 15575   014664  6EE6               	movwf	postinc1,c
 15576   014666  ECCD  F0A4         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15577   01466A                     l222:
 15578                           
 15579                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15580   01466A  52E5               	movf	postdec1,f,c
 15581   01466C  52E5               	movf	postdec1,f,c
 15582   01466E  52E5               	movf	postdec1,f,c
 15583   014670  0012               	return		;funcret
 15584   014672                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15585                           	callstack 0
 15586                           
 15587 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15588 ;; Defined at:
 15589 ;;		line 294 in file "can/can.c"
 15590 ;; Parameters:    Size  Location     Type
 15591 ;;  address         2  [STACK] unsigned short 
 15592 ;;  txd             1  [STACK] unsigned char 
 15593 ;; Auto vars:     Size  Location     Type
 15594 ;;  spiTransferS    2    0        unsigned short 
 15595 ;;  spiTransferE    1  [STACK] char 
 15596 ;; Return value:  Size  Location     Type
 15597 ;;                  1  [STACK] char 
 15598 ;; Registers used:
 15599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15600 ;; Tracked objects:
 15601 ;;		On entry : 0/0
 15602 ;;		On exit  : 0/0
 15603 ;;		Unchanged: 0/0
 15604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15609 ;;Total ram usage:        0 bytes
 15610 ;; Hardware stack levels used: 1
 15611 ;; Hardware stack levels required when called: 8
 15612 ;; This function calls:
 15613 ;;		_SpiTransfer
 15614 ;; This function is called by:
 15615 ;;		_DRV_CANFDSPI_OperationModeSelect
 15616 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15617 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15618 ;;		_DRV_CANFDSPI_FilterDisable
 15619 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15620 ;;		_DRV_CANFDSPI_TimeStampEnable
 15621 ;; This function uses a reentrant model
 15622 ;;
 15623                           
 15624                           	psect	text61
 15625   01499A                     __ptext61:
 15626                           	callstack 0
 15627   01499A                     _DRV_CANFDSPI_WriteByte:
 15628                           	callstack 0
 15629                           
 15630                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15631   01499A  52E6               	movf	postinc1,f,c
 15632   01499C                     
 15633                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15634                           ;stkvar	_address @ sp[(-1)+-2]
 15635   01499C  0EFE               	movlw	254
 15636   01499E  24E1               	addwf	fsr1l,w,c
 15637   0149A0  6ED9               	movwf	fsr2l,c
 15638   0149A2  0EFF               	movlw	255
 15639   0149A4  20E2               	addwfc	fsr1h,w,c
 15640   0149A6  6EDA               	movwf	fsr2h,c
 15641   0149A8  50DF               	movf	indf2,w,c
 15642   0149AA  0B0F               	andlw	15
 15643   0149AC  0F20               	addlw	32
 15644   0149AE  0101               	movlb	1	; () banked
 15645   0149B0  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15646   0149B2                     
 15647                           ; BSR set to: 1
 15648                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15649                           ;stkvar	_address @ sp[(-1)+-2]
 15650   0149B2  0EFD               	movlw	-3
 15651   0149B4  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15652   0149B8                     
 15653                           ; BSR set to: 1
 15654                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15655                           ;stkvar	_txd @ sp[(-1)+-3]
 15656   0149B8  0EFC               	movlw	-4
 15657   0149BA  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15658   0149BE                     
 15659                           ; BSR set to: 1
 15660                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15661   0149BE  0E03               	movlw	3
 15662   0149C0  6EE6               	movwf	postinc1,c
 15663   0149C2  0E00               	movlw	0
 15664   0149C4  6EE6               	movwf	postinc1,c
 15665   0149C6  0E00               	movlw	low _spiReceiveBuffer
 15666   0149C8  6EE6               	movwf	postinc1,c
 15667   0149CA  0E02               	movlw	high _spiReceiveBuffer
 15668   0149CC  6EE6               	movwf	postinc1,c
 15669   0149CE  0E00               	movlw	low _spiTransmitBuffer
 15670   0149D0  6EE6               	movwf	postinc1,c
 15671   0149D2  0E01               	movlw	high _spiTransmitBuffer
 15672   0149D4  6EE6               	movwf	postinc1,c
 15673   0149D6  EC06  F09F         	call	_SpiTransfer	;wreg free
 15674                           
 15675                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15676   0149DA  0EFF               	movlw	-1
 15677   0149DC  C02A  FFE3         	movff	btemp,plusw1
 15678   0149E0                     
 15679                           ;can/can.c: 306:     return spiTransferError;
 15680                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15681   0149E0  0EFF               	movlw	-1
 15682   0149E2  CFE3 F02A          	movff	plusw1,btemp
 15683   0149E6                     
 15684                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15685   0149E6  52E5               	movf	postdec1,f,c
 15686   0149E8  52E5               	movf	postdec1,f,c
 15687   0149EA  52E5               	movf	postdec1,f,c
 15688   0149EC  52E5               	movf	postdec1,f,c
 15689   0149EE  0012               	return		;funcret
 15690   0149F0                     __end_of_DRV_CANFDSPI_WriteByte:
 15691                           	callstack 0
 15692                           
 15693 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15694 ;; Defined at:
 15695 ;;		line 276 in file "can/can.c"
 15696 ;; Parameters:    Size  Location     Type
 15697 ;;  address         2  [STACK] unsigned short 
 15698 ;;  rxd             2  [STACK] PTR unsigned char 
 15699 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15700 ;;		 -> d(1), d(1), d(1), crc(1), 
 15701 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15702 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15703 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15704 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15705 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15706 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15707 ;;		 -> d(1), d(1), 
 15708 ;; Auto vars:     Size  Location     Type
 15709 ;;  spiTransferS    2    0        unsigned short 
 15710 ;;  spiTransferE    1  [STACK] char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  1  [STACK] char 
 15713 ;; Registers used:
 15714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15724 ;;Total ram usage:        0 bytes
 15725 ;; Hardware stack levels used: 1
 15726 ;; Hardware stack levels required when called: 8
 15727 ;; This function calls:
 15728 ;;		_SpiTransfer
 15729 ;; This function is called by:
 15730 ;;		_DRV_CANFDSPI_OperationModeSelect
 15731 ;;		_DRV_CANFDSPI_FilterDisable
 15732 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15733 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15734 ;;		_DRV_CANFDSPI_TimeStampEnable
 15735 ;; This function uses a reentrant model
 15736 ;;
 15737                           
 15738                           	psect	text62
 15739   014880                     __ptext62:
 15740                           	callstack 0
 15741   014880                     _DRV_CANFDSPI_ReadByte:
 15742                           	callstack 0
 15743                           
 15744                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15745   014880  52E6               	movf	postinc1,f,c
 15746   014882                     
 15747                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15748                           ;stkvar	_address @ sp[(-1)+-2]
 15749   014882  0EFE               	movlw	254
 15750   014884  24E1               	addwf	fsr1l,w,c
 15751   014886  6ED9               	movwf	fsr2l,c
 15752   014888  0EFF               	movlw	255
 15753   01488A  20E2               	addwfc	fsr1h,w,c
 15754   01488C  6EDA               	movwf	fsr2h,c
 15755   01488E  50DF               	movf	indf2,w,c
 15756   014890  0B0F               	andlw	15
 15757   014892  0F30               	addlw	48
 15758   014894  0101               	movlb	1	; () banked
 15759   014896  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15760   014898                     
 15761                           ; BSR set to: 1
 15762                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15763                           ;stkvar	_address @ sp[(-1)+-2]
 15764   014898  0EFD               	movlw	-3
 15765   01489A  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15766   01489E                     
 15767                           ; BSR set to: 1
 15768                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15769   01489E  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15770   0148A0                     
 15771                           ; BSR set to: 1
 15772                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15773   0148A0  0E03               	movlw	3
 15774   0148A2  6EE6               	movwf	postinc1,c
 15775   0148A4  0E00               	movlw	0
 15776   0148A6  6EE6               	movwf	postinc1,c
 15777   0148A8  0E00               	movlw	low _spiReceiveBuffer
 15778   0148AA  6EE6               	movwf	postinc1,c
 15779   0148AC  0E02               	movlw	high _spiReceiveBuffer
 15780   0148AE  6EE6               	movwf	postinc1,c
 15781   0148B0  0E00               	movlw	low _spiTransmitBuffer
 15782   0148B2  6EE6               	movwf	postinc1,c
 15783   0148B4  0E01               	movlw	high _spiTransmitBuffer
 15784   0148B6  6EE6               	movwf	postinc1,c
 15785   0148B8  EC06  F09F         	call	_SpiTransfer	;wreg free
 15786                           
 15787                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15788   0148BC  0EFF               	movlw	-1
 15789   0148BE  C02A  FFE3         	movff	btemp,plusw1
 15790   0148C2                     
 15791                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15792                           ;stkvar	_rxd @ sp[(-1)+-4]
 15793   0148C2  0EFB               	movlw	-5
 15794   0148C4  CFE3 FFD9          	movff	plusw1,fsr2l
 15795   0148C8  0EFC               	movlw	-4
 15796   0148CA  CFE3 FFDA          	movff	plusw1,fsr2h
 15797   0148CE  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15798   0148D2                     
 15799                           ;can/can.c: 291:     return spiTransferError;
 15800                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15801   0148D2  0EFF               	movlw	-1
 15802   0148D4  CFE3 F02A          	movff	plusw1,btemp
 15803   0148D8                     
 15804                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15805   0148D8  0EFB               	movlw	251
 15806   0148DA  26E1               	addwf	fsr1l,f,c
 15807   0148DC  0EFF               	movlw	255
 15808   0148DE  22E2               	addwfc	fsr1h,f,c
 15809   0148E0  0012               	return		;funcret
 15810   0148E2                     __end_of_DRV_CANFDSPI_ReadByte:
 15811                           	callstack 0
 15812                           
 15813 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15814 ;; Defined at:
 15815 ;;		line 1591 in file "can/can.c"
 15816 ;; Parameters:    Size  Location     Type
 15817 ;;  index           1  [STACK] unsigned char 
 15818 ;;  flags           2  [STACK] enum E5563
 15819 ;; Auto vars:     Size  Location     Type
 15820 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15821 ;;  a               2    0        unsigned short 
 15822 ;;  spiTransferE    1    0        char 
 15823 ;; Return value:  Size  Location     Type
 15824 ;;                  1  [STACK] char 
 15825 ;; Registers used:
 15826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15827 ;; Tracked objects:
 15828 ;;		On entry : 0/0
 15829 ;;		On exit  : 0/0
 15830 ;;		Unchanged: 0/0
 15831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;Total ram usage:        0 bytes
 15837 ;; Hardware stack levels used: 1
 15838 ;; Hardware stack levels required when called: 9
 15839 ;; This function calls:
 15840 ;;		_DRV_CANFDSPI_WriteHalfWord
 15841 ;; This function is called by:
 15842 ;;		_CanInit
 15843 ;; This function uses a reentrant model
 15844 ;;
 15845                           
 15846                           	psect	text63
 15847   01481C                     __ptext63:
 15848                           	callstack 0
 15849   01481C                     _DRV_CANFDSPI_ModuleEventEnable:
 15850                           	callstack 0
 15851                           
 15852                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15853   01481C  52E6               	movf	postinc1,f,c
 15854   01481E  52E6               	movf	postinc1,f,c
 15855   014820                     
 15856                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15857                           ;stkvar	_intEnables @ sp[(-2)+0]
 15858   014820  0EFE               	movlw	-2
 15859   014822  6AE3               	clrf	plusw1,c
 15860   014824  0EFF               	movlw	-1
 15861   014826  6AE3               	clrf	plusw1,c
 15862   014828                     
 15863                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15864                           ;stkvar	_flags @ sp[(-2)+-3]
 15865   014828  0EFB               	movlw	-5
 15866   01482A  CFE3 F034          	movff	plusw1,btemp+10
 15867   01482E  0EFC               	movlw	-4
 15868   014830  CFE3 F035          	movff	plusw1,btemp+11
 15869   014834  0E1F               	movlw	31
 15870   014836  1434               	andwf	(btemp+10)^0,w,c
 15871   014838  6E32               	movwf	(btemp+8)^0,c
 15872   01483A  0EFF               	movlw	255
 15873   01483C  1435               	andwf	(btemp+11)^0,w,c
 15874   01483E  6E33               	movwf	(btemp+9)^0,c
 15875                           
 15876                           ;stkvar	_intEnables @ sp[(-2)+0]
 15877   014840  0EFE               	movlw	-2
 15878   014842  CFE3 F02A          	movff	plusw1,btemp
 15879   014846  5032               	movf	(btemp+8)^0,w,c
 15880   014848  122A               	iorwf	btemp^0,f,c
 15881   01484A  0EFE               	movlw	-2
 15882   01484C  C02A  FFE3         	movff	btemp,plusw1
 15883   014850  0EFF               	movlw	-1
 15884   014852  CFE3 F02A          	movff	plusw1,btemp
 15885   014856  5033               	movf	(btemp+9)^0,w,c
 15886   014858  122A               	iorwf	btemp^0,f,c
 15887   01485A  0EFF               	movlw	-1
 15888   01485C  C02A  FFE3         	movff	btemp,plusw1
 15889   014860                     
 15890                           ;stkvar	_intEnables @ sp[(-2)+0]
 15891   014860  0EFE               	movlw	-2
 15892   014862  CFE3 FFE6          	movff	plusw1,postinc1
 15893   014866  CFE3 FFE6          	movff	plusw1,postinc1
 15894   01486A  0E1E               	movlw	30
 15895   01486C  6EE6               	movwf	postinc1,c
 15896   01486E  0E00               	movlw	0
 15897   014870  6EE6               	movwf	postinc1,c
 15898   014872  ECA1  F09E         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15899   014876                     
 15900                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15901   014876  0EFB               	movlw	251
 15902   014878  26E1               	addwf	fsr1l,f,c
 15903   01487A  0EFF               	movlw	255
 15904   01487C  22E2               	addwfc	fsr1h,f,c
 15905   01487E  0012               	return		;funcret
 15906   014880                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15907                           	callstack 0
 15908                           
 15909 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15910 ;; Defined at:
 15911 ;;		line 332 in file "can/can.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;  address         2  [STACK] unsigned short 
 15914 ;;  txd             2  [STACK] unsigned short 
 15915 ;; Auto vars:     Size  Location     Type
 15916 ;;  spiTransferS    2  [STACK] unsigned short 
 15917 ;;  i               1  [STACK] unsigned char 
 15918 ;;  spiTransferE    1  [STACK] char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;                  1  [STACK] char 
 15921 ;; Registers used:
 15922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15932 ;;Total ram usage:        0 bytes
 15933 ;; Hardware stack levels used: 1
 15934 ;; Hardware stack levels required when called: 8
 15935 ;; This function calls:
 15936 ;;		_SpiTransfer
 15937 ;; This function is called by:
 15938 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15939 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15940 ;; This function uses a reentrant model
 15941 ;;
 15942                           
 15943                           	psect	text64
 15944   013D42                     __ptext64:
 15945                           	callstack 0
 15946   013D42                     _DRV_CANFDSPI_WriteHalfWord:
 15947                           	callstack 0
 15948                           
 15949                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15950   013D42  52E6               	movf	postinc1,f,c
 15951   013D44  52E6               	movf	postinc1,f,c
 15952   013D46  52E6               	movf	postinc1,f,c
 15953   013D48  52E6               	movf	postinc1,f,c
 15954   013D4A                     
 15955                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15956   013D4A  0E04               	movlw	4
 15957   013D4C  6E34               	movwf	(btemp+10)^0,c
 15958   013D4E  0E00               	movlw	0
 15959   013D50  6E35               	movwf	(btemp+11)^0,c
 15960                           
 15961                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15962   013D52  0EFC               	movlw	-4
 15963   013D54  C034  FFE3         	movff	btemp+10,plusw1
 15964   013D58  0EFD               	movlw	-3
 15965   013D5A  C035  FFE3         	movff	btemp+11,plusw1
 15966   013D5E                     
 15967                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15968                           ;stkvar	_address @ sp[(-4)+-2]
 15969   013D5E  0EFB               	movlw	251
 15970   013D60  24E1               	addwf	fsr1l,w,c
 15971   013D62  6ED9               	movwf	fsr2l,c
 15972   013D64  0EFF               	movlw	255
 15973   013D66  20E2               	addwfc	fsr1h,w,c
 15974   013D68  6EDA               	movwf	fsr2h,c
 15975   013D6A  50DF               	movf	indf2,w,c
 15976   013D6C  0B0F               	andlw	15
 15977   013D6E  0F20               	addlw	32
 15978   013D70  0101               	movlb	1	; () banked
 15979   013D72  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15980   013D74                     
 15981                           ; BSR set to: 1
 15982                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15983                           ;stkvar	_address @ sp[(-4)+-2]
 15984   013D74  0EFA               	movlw	-6
 15985   013D76  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15986   013D7A                     
 15987                           ; BSR set to: 1
 15988                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15989                           ;stkvar	_i @ sp[(-4)+2]
 15990   013D7A  0EFE               	movlw	-2
 15991   013D7C  6AE3               	clrf	plusw1,c
 15992   013D7E                     l4705:
 15993                           
 15994                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15995                           ;stkvar	_i @ sp[(-4)+2]
 15996   013D7E  0EFE               	movlw	-2
 15997   013D80  50E3               	movf	plusw1,w,c
 15998   013D82  6E34               	movwf	(btemp+10)^0,c
 15999   013D84  6A35               	clrf	(btemp+11)^0,c
 16000   013D86  0E02               	movlw	low (_spiTransmitBuffer+2)
 16001   013D88  2434               	addwf	(btemp+10)^0,w,c
 16002   013D8A  6ED9               	movwf	fsr2l,c
 16003   013D8C  0E01               	movlw	high (_spiTransmitBuffer+2)
 16004   013D8E  2035               	addwfc	(btemp+11)^0,w,c
 16005   013D90  6EDA               	movwf	fsr2h,c
 16006                           
 16007                           ;stkvar	_i @ sp[(-4)+2]
 16008   013D92  0EFE               	movlw	-2
 16009   013D94  50E3               	movf	plusw1,w,c
 16010   013D96  0D08               	mullw	8
 16011   013D98  CFF3 F035          	movff	prodl,btemp+11
 16012                           
 16013                           ;stkvar	_txd @ sp[(-4)+-4]
 16014   013D9C  0EF8               	movlw	-8
 16015   013D9E  CFE3 F032          	movff	plusw1,btemp+8
 16016   013DA2  0EF9               	movlw	-7
 16017   013DA4  CFE3 F033          	movff	plusw1,btemp+9
 16018   013DA8  2A35               	incf	(btemp+11)^0,f,c
 16019   013DAA  EFDA  F09E         	goto	u2364
 16020   013DAE                     u2365:
 16021   013DAE  90D8               	bcf	status,0,c
 16022   013DB0  3233               	rrcf	(btemp+9)^0,f,c
 16023   013DB2  3232               	rrcf	(btemp+8)^0,f,c
 16024   013DB4                     u2364:
 16025   013DB4  2E35               	decfsz	(btemp+11)^0,f,c
 16026   013DB6  EFD7  F09E         	goto	u2365
 16027   013DBA  5032               	movf	(btemp+8)^0,w,c
 16028   013DBC  6EDF               	movwf	indf2,c
 16029   013DBE                     
 16030                           ;can/can.c: 346:     }
 16031                           ;stkvar	_i @ sp[(-4)+2]
 16032   013DBE  0EFE               	movlw	-2
 16033   013DC0  2AE3               	incf	plusw1,f,c
 16034   013DC2                     
 16035                           ;stkvar	_i @ sp[(-4)+2]
 16036   013DC2  0EFE               	movlw	-2
 16037   013DC4  CFE3 F02A          	movff	plusw1,btemp
 16038   013DC8  0E01               	movlw	1
 16039   013DCA  642A               	cpfsgt	btemp^0,c
 16040   013DCC  EFEA  F09E         	goto	u2371
 16041   013DD0  EFEC  F09E         	goto	u2370
 16042   013DD4                     u2371:
 16043   013DD4  EFBF  F09E         	goto	l4705
 16044   013DD8                     u2370:
 16045   013DD8                     
 16046                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16047                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16048   013DD8  0EFC               	movlw	-4
 16049   013DDA  CFE3 FFE6          	movff	plusw1,postinc1
 16050   013DDE  CFE3 FFE6          	movff	plusw1,postinc1
 16051   013DE2  0E00               	movlw	low _spiReceiveBuffer
 16052   013DE4  6EE6               	movwf	postinc1,c
 16053   013DE6  0E02               	movlw	high _spiReceiveBuffer
 16054   013DE8  6EE6               	movwf	postinc1,c
 16055   013DEA  0E00               	movlw	low _spiTransmitBuffer
 16056   013DEC  6EE6               	movwf	postinc1,c
 16057   013DEE  0E01               	movlw	high _spiTransmitBuffer
 16058   013DF0  6EE6               	movwf	postinc1,c
 16059   013DF2  EC06  F09F         	call	_SpiTransfer	;wreg free
 16060                           
 16061                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16062   013DF6  0EFF               	movlw	-1
 16063   013DF8  C02A  FFE3         	movff	btemp,plusw1
 16064   013DFC                     
 16065                           ;can/can.c: 350:     return spiTransferError;
 16066                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16067   013DFC  0EFF               	movlw	-1
 16068   013DFE  CFE3 F02A          	movff	plusw1,btemp
 16069   013E02                     
 16070                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 16071   013E02  0EF8               	movlw	248
 16072   013E04  26E1               	addwf	fsr1l,f,c
 16073   013E06  0EFF               	movlw	255
 16074   013E08  22E2               	addwfc	fsr1h,f,c
 16075   013E0A  0012               	return		;funcret
 16076   013E0C                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 16077                           	callstack 0
 16078                           
 16079 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 16080 ;; Defined at:
 16081 ;;		line 474 in file "can/can.c"
 16082 ;; Parameters:    Size  Location     Type
 16083 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 16084 ;;		 -> config(3), 
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;  ciCon           4  [STACK] struct _REG_CiCON
 16087 ;; Return value:  Size  Location     Type
 16088 ;;                  1  [STACK] char 
 16089 ;; Registers used:
 16090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16100 ;;Total ram usage:        0 bytes
 16101 ;; Hardware stack levels used: 1
 16102 ;; Hardware stack levels required when called: 7
 16103 ;; This function calls:
 16104 ;;		Nothing
 16105 ;; This function is called by:
 16106 ;;		_CanInit
 16107 ;; This function uses a reentrant model
 16108 ;;
 16109                           
 16110                           	psect	text65
 16111   0119BA                     __ptext65:
 16112                           	callstack 0
 16113   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 16114                           	callstack 0
 16115                           
 16116                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16117   0119BA  52E6               	movf	postinc1,f,c
 16118   0119BC  52E6               	movf	postinc1,f,c
 16119   0119BE  52E6               	movf	postinc1,f,c
 16120   0119C0  52E6               	movf	postinc1,f,c
 16121   0119C2                     
 16122                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 16123   0119C2  0E8D               	movlw	low _canControlResetValues
 16124   0119C4  6EF6               	movwf	tblptrl,c
 16125   0119C6                     	if	1	;There is more than 1 active tblptr byte
 16126   0119C6  0EFF               	movlw	high _canControlResetValues
 16127   0119C8  6EF7               	movwf	tblptrh,c
 16128   0119CA                     	endif
 16129   0119CA                     	if	1	;There are 3 active tblptr bytes
 16130   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16131   0119CC  6EF8               	movwf	tblptru,c
 16132   0119CE                     	endif
 16133   0119CE  0009               	tblrd		*+
 16134   0119D0  CFF5 F032          	movff	tablat,btemp+8
 16135   0119D4  0009               	tblrd		*+
 16136   0119D6  CFF5 F033          	movff	tablat,btemp+9
 16137   0119DA  0009               	tblrd		*+
 16138   0119DC  CFF5 F034          	movff	tablat,btemp+10
 16139   0119E0  0009               	tblrd		*+
 16140   0119E2  CFF5 F035          	movff	tablat,btemp+11
 16141                           
 16142                           ;stkvar	_ciCon @ sp[(-4)+0]
 16143   0119E6  0EFC               	movlw	-4
 16144   0119E8  C032  FFE3         	movff	btemp+8,plusw1
 16145   0119EC  0EFD               	movlw	-3
 16146   0119EE  C033  FFE3         	movff	btemp+9,plusw1
 16147   0119F2  0EFE               	movlw	-2
 16148   0119F4  C034  FFE3         	movff	btemp+10,plusw1
 16149   0119F8  0EFF               	movlw	-1
 16150   0119FA  C035  FFE3         	movff	btemp+11,plusw1
 16151   0119FE                     
 16152                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 16153                           ;stkvar	_ciCon @ sp[(-4)+0]
 16154   0119FE  50E1               	movf	fsr1l,w,c
 16155   011A00  0FFC               	addlw	-4
 16156   011A02  6ED9               	movwf	fsr2l,c
 16157   011A04  50E2               	movf	fsr1h,w,c
 16158   011A06  6EDA               	movwf	fsr2h,c
 16159   011A08  0EFF               	movlw	255
 16160   011A0A  22DA               	addwfc	fsr2h,f,c
 16161   011A0C  50DF               	movf	223,w,c
 16162   011A0E  0B1F               	andlw	31
 16163   011A10  6E35               	movwf	(btemp+11)^0,c
 16164                           
 16165                           ;stkvar	_config @ sp[(-4)+-2]
 16166   011A12  0EFA               	movlw	-6
 16167   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 16168   011A18  0EFB               	movlw	-5
 16169   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 16170   011A1E  50DF               	movf	223,w,c
 16171   011A20  1835               	xorwf	(btemp+11)^0,w,c
 16172   011A22  0BE0               	andlw	-32
 16173   011A24  1835               	xorwf	(btemp+11)^0,w,c
 16174   011A26  6EDF               	movwf	223,c
 16175   011A28                     
 16176                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 16177                           ;stkvar	_ciCon @ sp[(-4)+0]
 16178   011A28  50E1               	movf	fsr1l,w,c
 16179   011A2A  0FFC               	addlw	-4
 16180   011A2C  6ED9               	movwf	fsr2l,c
 16181   011A2E  50E2               	movf	fsr1h,w,c
 16182   011A30  6EDA               	movwf	fsr2h,c
 16183   011A32  0EFF               	movlw	255
 16184   011A34  22DA               	addwfc	fsr2h,f,c
 16185                           
 16186                           ;stkvar	_config @ sp[(-4)+-2]
 16187   011A36  0EFA               	movlw	-6
 16188   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 16189   011A3C  0EFB               	movlw	-5
 16190   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 16191   011A42  9AEF               	bcf	indf0,5,c
 16192   011A44  AADF               	btfss	indf2,5,c
 16193   011A46  EF26  F08D         	goto	u855
 16194   011A4A  8AEF               	bsf	indf0,5,c
 16195   011A4C                     u855:
 16196   011A4C                     
 16197                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 16198                           ;stkvar	_ciCon @ sp[(-4)+0]
 16199   011A4C  50E1               	movf	fsr1l,w,c
 16200   011A4E  0FFC               	addlw	-4
 16201   011A50  6ED9               	movwf	fsr2l,c
 16202   011A52  50E2               	movf	fsr1h,w,c
 16203   011A54  6EDA               	movwf	fsr2h,c
 16204   011A56  0EFF               	movlw	255
 16205   011A58  22DA               	addwfc	fsr2h,f,c
 16206                           
 16207                           ;stkvar	_config @ sp[(-4)+-2]
 16208   011A5A  0EFA               	movlw	-6
 16209   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 16210   011A60  0EFB               	movlw	-5
 16211   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 16212   011A66  9CEF               	bcf	indf0,6,c
 16213   011A68  ACDF               	btfss	indf2,6,c
 16214   011A6A  EF38  F08D         	goto	u865
 16215   011A6E  8CEF               	bsf	indf0,6,c
 16216   011A70                     u865:
 16217   011A70                     
 16218                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 16219                           ;stkvar	_ciCon @ sp[(-4)+0]
 16220   011A70  0EFD               	movlw	253
 16221   011A72  24E1               	addwf	fsr1l,w,c
 16222   011A74  6ED9               	movwf	fsr2l,c
 16223   011A76  0EFF               	movlw	255
 16224   011A78  20E2               	addwfc	fsr1h,w,c
 16225   011A7A  6EDA               	movwf	fsr2h,c
 16226                           
 16227                           ;stkvar	_config @ sp[(-4)+-2]
 16228   011A7C  0EFA               	movlw	-6
 16229   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 16230   011A82  0EFB               	movlw	-5
 16231   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 16232   011A88  9EEF               	bcf	indf0,7,c
 16233   011A8A  A0DF               	btfss	indf2,0,c
 16234   011A8C  EF49  F08D         	goto	u875
 16235   011A90  8EEF               	bsf	indf0,7,c
 16236   011A92                     u875:
 16237   011A92                     
 16238                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 16239                           ;stkvar	_ciCon @ sp[(-4)+0]
 16240   011A92  0EFD               	movlw	253
 16241   011A94  24E1               	addwf	fsr1l,w,c
 16242   011A96  6ED9               	movwf	fsr2l,c
 16243   011A98  0EFF               	movlw	255
 16244   011A9A  20E2               	addwfc	fsr1h,w,c
 16245   011A9C  6EDA               	movwf	fsr2h,c
 16246   011A9E  30DF               	rrcf	223,w,c
 16247   011AA0  0B03               	andlw	3
 16248   011AA2  6E35               	movwf	(btemp+11)^0,c
 16249                           
 16250                           ;stkvar	_config @ sp[(-4)+-2]
 16251   011AA4  0EFA               	movlw	-6
 16252   011AA6  CFE3 F032          	movff	plusw1,btemp+8
 16253   011AAA  0EFB               	movlw	-5
 16254   011AAC  CFE3 F033          	movff	plusw1,btemp+9
 16255   011AB0  0E01               	movlw	1
 16256   011AB2  2432               	addwf	(btemp+8)^0,w,c
 16257   011AB4  6ED9               	movwf	fsr2l,c
 16258   011AB6  0E00               	movlw	0
 16259   011AB8  2033               	addwfc	(btemp+9)^0,w,c
 16260   011ABA  6EDA               	movwf	fsr2h,c
 16261   011ABC  50DF               	movf	223,w,c
 16262   011ABE  1835               	xorwf	(btemp+11)^0,w,c
 16263   011AC0  0BFC               	andlw	-4
 16264   011AC2  1835               	xorwf	(btemp+11)^0,w,c
 16265   011AC4  6EDF               	movwf	223,c
 16266   011AC6                     
 16267                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 16268                           ;stkvar	_ciCon @ sp[(-4)+0]
 16269   011AC6  0EFD               	movlw	253
 16270   011AC8  24E1               	addwf	fsr1l,w,c
 16271   011ACA  6ED9               	movwf	fsr2l,c
 16272   011ACC  0EFF               	movlw	255
 16273   011ACE  20E2               	addwfc	fsr1h,w,c
 16274   011AD0  6EDA               	movwf	fsr2h,c
 16275                           
 16276                           ;stkvar	_config @ sp[(-4)+-2]
 16277   011AD2  0EFA               	movlw	-6
 16278   011AD4  CFE3 F034          	movff	plusw1,btemp+10
 16279   011AD8  0EFB               	movlw	-5
 16280   011ADA  CFE3 F035          	movff	plusw1,btemp+11
 16281   011ADE  0E01               	movlw	1
 16282   011AE0  2434               	addwf	(btemp+10)^0,w,c
 16283   011AE2  6EE9               	movwf	fsr0l,c
 16284   011AE4  0E00               	movlw	0
 16285   011AE6  2035               	addwfc	(btemp+11)^0,w,c
 16286   011AE8  6EEA               	movwf	fsr0h,c
 16287   011AEA  94EF               	bcf	indf0,2,c
 16288   011AEC  A8DF               	btfss	indf2,4,c
 16289   011AEE  EF7A  F08D         	goto	u885
 16290   011AF2  84EF               	bsf	indf0,2,c
 16291   011AF4                     u885:
 16292   011AF4                     
 16293                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 16294                           ;stkvar	_ciCon @ sp[(-4)+0]
 16295   011AF4  0EFE               	movlw	254
 16296   011AF6  24E1               	addwf	fsr1l,w,c
 16297   011AF8  6ED9               	movwf	fsr2l,c
 16298   011AFA  0EFF               	movlw	255
 16299   011AFC  20E2               	addwfc	fsr1h,w,c
 16300   011AFE  6EDA               	movwf	fsr2h,c
 16301                           
 16302                           ;stkvar	_config @ sp[(-4)+-2]
 16303   011B00  0EFA               	movlw	-6
 16304   011B02  CFE3 F034          	movff	plusw1,btemp+10
 16305   011B06  0EFB               	movlw	-5
 16306   011B08  CFE3 F035          	movff	plusw1,btemp+11
 16307   011B0C  0E01               	movlw	1
 16308   011B0E  2434               	addwf	(btemp+10)^0,w,c
 16309   011B10  6EE9               	movwf	fsr0l,c
 16310   011B12  0E00               	movlw	0
 16311   011B14  2035               	addwfc	(btemp+11)^0,w,c
 16312   011B16  6EEA               	movwf	fsr0h,c
 16313   011B18  96EF               	bcf	indf0,3,c
 16314   011B1A  A0DF               	btfss	indf2,0,c
 16315   011B1C  EF91  F08D         	goto	u895
 16316   011B20  86EF               	bsf	indf0,3,c
 16317   011B22                     u895:
 16318   011B22                     
 16319                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 16320                           ;stkvar	_ciCon @ sp[(-4)+0]
 16321   011B22  0EFE               	movlw	254
 16322   011B24  24E1               	addwf	fsr1l,w,c
 16323   011B26  6ED9               	movwf	fsr2l,c
 16324   011B28  0EFF               	movlw	255
 16325   011B2A  20E2               	addwfc	fsr1h,w,c
 16326   011B2C  6EDA               	movwf	fsr2h,c
 16327                           
 16328                           ;stkvar	_config @ sp[(-4)+-2]
 16329   011B2E  0EFA               	movlw	-6
 16330   011B30  CFE3 F034          	movff	plusw1,btemp+10
 16331   011B34  0EFB               	movlw	-5
 16332   011B36  CFE3 F035          	movff	plusw1,btemp+11
 16333   011B3A  0E01               	movlw	1
 16334   011B3C  2434               	addwf	(btemp+10)^0,w,c
 16335   011B3E  6EE9               	movwf	fsr0l,c
 16336   011B40  0E00               	movlw	0
 16337   011B42  2035               	addwfc	(btemp+11)^0,w,c
 16338   011B44  6EEA               	movwf	fsr0h,c
 16339   011B46  98EF               	bcf	indf0,4,c
 16340   011B48  A2DF               	btfss	indf2,1,c
 16341   011B4A  EFA8  F08D         	goto	u905
 16342   011B4E  88EF               	bsf	indf0,4,c
 16343   011B50                     u905:
 16344   011B50                     
 16345                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 16346                           ;stkvar	_ciCon @ sp[(-4)+0]
 16347   011B50  0EFE               	movlw	254
 16348   011B52  24E1               	addwf	fsr1l,w,c
 16349   011B54  6ED9               	movwf	fsr2l,c
 16350   011B56  0EFF               	movlw	255
 16351   011B58  20E2               	addwfc	fsr1h,w,c
 16352   011B5A  6EDA               	movwf	fsr2h,c
 16353                           
 16354                           ;stkvar	_config @ sp[(-4)+-2]
 16355   011B5C  0EFA               	movlw	-6
 16356   011B5E  CFE3 F034          	movff	plusw1,btemp+10
 16357   011B62  0EFB               	movlw	-5
 16358   011B64  CFE3 F035          	movff	plusw1,btemp+11
 16359   011B68  0E01               	movlw	1
 16360   011B6A  2434               	addwf	(btemp+10)^0,w,c
 16361   011B6C  6EE9               	movwf	fsr0l,c
 16362   011B6E  0E00               	movlw	0
 16363   011B70  2035               	addwfc	(btemp+11)^0,w,c
 16364   011B72  6EEA               	movwf	fsr0h,c
 16365   011B74  9AEF               	bcf	indf0,5,c
 16366   011B76  A4DF               	btfss	indf2,2,c
 16367   011B78  EFBF  F08D         	goto	u915
 16368   011B7C  8AEF               	bsf	indf0,5,c
 16369   011B7E                     u915:
 16370   011B7E                     
 16371                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 16372                           ;stkvar	_ciCon @ sp[(-4)+0]
 16373   011B7E  0EFE               	movlw	254
 16374   011B80  24E1               	addwf	fsr1l,w,c
 16375   011B82  6ED9               	movwf	fsr2l,c
 16376   011B84  0EFF               	movlw	255
 16377   011B86  20E2               	addwfc	fsr1h,w,c
 16378   011B88  6EDA               	movwf	fsr2h,c
 16379                           
 16380                           ;stkvar	_config @ sp[(-4)+-2]
 16381   011B8A  0EFA               	movlw	-6
 16382   011B8C  CFE3 F034          	movff	plusw1,btemp+10
 16383   011B90  0EFB               	movlw	-5
 16384   011B92  CFE3 F035          	movff	plusw1,btemp+11
 16385   011B96  0E01               	movlw	1
 16386   011B98  2434               	addwf	(btemp+10)^0,w,c
 16387   011B9A  6EE9               	movwf	fsr0l,c
 16388   011B9C  0E00               	movlw	0
 16389   011B9E  2035               	addwfc	(btemp+11)^0,w,c
 16390   011BA0  6EEA               	movwf	fsr0h,c
 16391   011BA2  9CEF               	bcf	indf0,6,c
 16392   011BA4  A6DF               	btfss	indf2,3,c
 16393   011BA6  EFD6  F08D         	goto	u925
 16394   011BAA  8CEF               	bsf	indf0,6,c
 16395   011BAC                     u925:
 16396   011BAC                     
 16397                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 16398                           ;stkvar	_ciCon @ sp[(-4)+0]
 16399   011BAC  0EFE               	movlw	254
 16400   011BAE  24E1               	addwf	fsr1l,w,c
 16401   011BB0  6ED9               	movwf	fsr2l,c
 16402   011BB2  0EFF               	movlw	255
 16403   011BB4  20E2               	addwfc	fsr1h,w,c
 16404   011BB6  6EDA               	movwf	fsr2h,c
 16405                           
 16406                           ;stkvar	_config @ sp[(-4)+-2]
 16407   011BB8  0EFA               	movlw	-6
 16408   011BBA  CFE3 F034          	movff	plusw1,btemp+10
 16409   011BBE  0EFB               	movlw	-5
 16410   011BC0  CFE3 F035          	movff	plusw1,btemp+11
 16411   011BC4  0E01               	movlw	1
 16412   011BC6  2434               	addwf	(btemp+10)^0,w,c
 16413   011BC8  6EE9               	movwf	fsr0l,c
 16414   011BCA  0E00               	movlw	0
 16415   011BCC  2035               	addwfc	(btemp+11)^0,w,c
 16416   011BCE  6EEA               	movwf	fsr0h,c
 16417   011BD0  9EEF               	bcf	indf0,7,c
 16418   011BD2  A8DF               	btfss	indf2,4,c
 16419   011BD4  EFED  F08D         	goto	u935
 16420   011BD8  8EEF               	bsf	indf0,7,c
 16421   011BDA                     u935:
 16422   011BDA                     
 16423                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 16424                           ;stkvar	_ciCon @ sp[(-4)+0]
 16425   011BDA  0EFF               	movlw	255
 16426   011BDC  24E1               	addwf	fsr1l,w,c
 16427   011BDE  6ED9               	movwf	fsr2l,c
 16428   011BE0  0EFF               	movlw	255
 16429   011BE2  20E2               	addwfc	fsr1h,w,c
 16430   011BE4  6EDA               	movwf	fsr2h,c
 16431   011BE6  38DF               	swapf	223,w,c
 16432   011BE8  0B0F               	andlw	15
 16433   011BEA  6E35               	movwf	(btemp+11)^0,c
 16434                           
 16435                           ;stkvar	_config @ sp[(-4)+-2]
 16436   011BEC  0EFA               	movlw	-6
 16437   011BEE  CFE3 F032          	movff	plusw1,btemp+8
 16438   011BF2  0EFB               	movlw	-5
 16439   011BF4  CFE3 F033          	movff	plusw1,btemp+9
 16440   011BF8  0E02               	movlw	2
 16441   011BFA  2432               	addwf	(btemp+8)^0,w,c
 16442   011BFC  6ED9               	movwf	fsr2l,c
 16443   011BFE  0E00               	movlw	0
 16444   011C00  2033               	addwfc	(btemp+9)^0,w,c
 16445   011C02  6EDA               	movwf	fsr2h,c
 16446   011C04  50DF               	movf	223,w,c
 16447   011C06  1835               	xorwf	(btemp+11)^0,w,c
 16448   011C08  0BF0               	andlw	-16
 16449   011C0A  1835               	xorwf	(btemp+11)^0,w,c
 16450   011C0C  6EDF               	movwf	223,c
 16451   011C0E                     
 16452                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 16453   011C0E  0EFA               	movlw	250
 16454   011C10  26E1               	addwf	fsr1l,f,c
 16455   011C12  0EFF               	movlw	255
 16456   011C14  22E2               	addwfc	fsr1h,f,c
 16457   011C16  0012               	return		;funcret
 16458   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 16459                           	callstack 0
 16460                           
 16461 ;; *************** function _DRV_CANFDSPI_Configure *****************
 16462 ;; Defined at:
 16463 ;;		line 446 in file "can/can.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 16466 ;;		 -> config(3), 
 16467 ;; Auto vars:     Size  Location     Type
 16468 ;;  ciCon           4  [STACK] struct _REG_CiCON
 16469 ;;  spiTransferE    1    0        char 
 16470 ;; Return value:  Size  Location     Type
 16471 ;;                  1  [STACK] char 
 16472 ;; Registers used:
 16473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 16474 ;; Tracked objects:
 16475 ;;		On entry : 0/0
 16476 ;;		On exit  : 0/0
 16477 ;;		Unchanged: 0/0
 16478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16483 ;;Total ram usage:        0 bytes
 16484 ;; Hardware stack levels used: 1
 16485 ;; Hardware stack levels required when called: 9
 16486 ;; This function calls:
 16487 ;;		_DRV_CANFDSPI_WriteWord
 16488 ;; This function is called by:
 16489 ;;		_CanInit
 16490 ;; This function uses a reentrant model
 16491 ;;
 16492                           
 16493                           	psect	text66
 16494   01173A                     __ptext66:
 16495                           	callstack 0
 16496   01173A                     _DRV_CANFDSPI_Configure:
 16497                           	callstack 0
 16498                           
 16499                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16500   01173A  52E6               	movf	postinc1,f,c
 16501   01173C  52E6               	movf	postinc1,f,c
 16502   01173E  52E6               	movf	postinc1,f,c
 16503   011740  52E6               	movf	postinc1,f,c
 16504   011742                     
 16505                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 16506   011742  0E8D               	movlw	low _canControlResetValues
 16507   011744  6EF6               	movwf	tblptrl,c
 16508   011746                     	if	1	;There is more than 1 active tblptr byte
 16509   011746  0EFF               	movlw	high _canControlResetValues
 16510   011748  6EF7               	movwf	tblptrh,c
 16511   01174A                     	endif
 16512   01174A                     	if	1	;There are 3 active tblptr bytes
 16513   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16514   01174C  6EF8               	movwf	tblptru,c
 16515   01174E                     	endif
 16516   01174E  0009               	tblrd		*+
 16517   011750  CFF5 F032          	movff	tablat,btemp+8
 16518   011754  0009               	tblrd		*+
 16519   011756  CFF5 F033          	movff	tablat,btemp+9
 16520   01175A  0009               	tblrd		*+
 16521   01175C  CFF5 F034          	movff	tablat,btemp+10
 16522   011760  0009               	tblrd		*+
 16523   011762  CFF5 F035          	movff	tablat,btemp+11
 16524                           
 16525                           ;stkvar	_ciCon @ sp[(-4)+0]
 16526   011766  0EFC               	movlw	-4
 16527   011768  C032  FFE3         	movff	btemp+8,plusw1
 16528   01176C  0EFD               	movlw	-3
 16529   01176E  C033  FFE3         	movff	btemp+9,plusw1
 16530   011772  0EFE               	movlw	-2
 16531   011774  C034  FFE3         	movff	btemp+10,plusw1
 16532   011778  0EFF               	movlw	-1
 16533   01177A  C035  FFE3         	movff	btemp+11,plusw1
 16534   01177E                     
 16535                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 16536                           ;stkvar	_config @ sp[(-4)+-2]
 16537   01177E  0EFA               	movlw	-6
 16538   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 16539   011784  0EFB               	movlw	-5
 16540   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 16541   01178A  50DF               	movf	223,w,c
 16542   01178C  0B1F               	andlw	31
 16543   01178E  6E35               	movwf	(btemp+11)^0,c
 16544                           
 16545                           ;stkvar	_ciCon @ sp[(-4)+0]
 16546   011790  50E1               	movf	fsr1l,w,c
 16547   011792  0FFC               	addlw	-4
 16548   011794  6ED9               	movwf	fsr2l,c
 16549   011796  50E2               	movf	fsr1h,w,c
 16550   011798  6EDA               	movwf	fsr2h,c
 16551   01179A  0EFF               	movlw	255
 16552   01179C  22DA               	addwfc	fsr2h,f,c
 16553   01179E  50DF               	movf	223,w,c
 16554   0117A0  1835               	xorwf	(btemp+11)^0,w,c
 16555   0117A2  0BE0               	andlw	-32
 16556   0117A4  1835               	xorwf	(btemp+11)^0,w,c
 16557   0117A6  6EDF               	movwf	223,c
 16558   0117A8                     
 16559                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16560                           ;stkvar	_config @ sp[(-4)+-2]
 16561   0117A8  0EFA               	movlw	-6
 16562   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16563   0117AE  0EFB               	movlw	-5
 16564   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16565                           
 16566                           ;stkvar	_ciCon @ sp[(-4)+0]
 16567   0117B4  50E1               	movf	fsr1l,w,c
 16568   0117B6  0FFC               	addlw	-4
 16569   0117B8  6EE9               	movwf	fsr0l,c
 16570   0117BA  50E2               	movf	fsr1h,w,c
 16571   0117BC  6EEA               	movwf	fsr0h,c
 16572   0117BE  0EFF               	movlw	255
 16573   0117C0  22EA               	addwfc	fsr0h,f,c
 16574   0117C2  9AEF               	bcf	indf0,5,c
 16575   0117C4  AADF               	btfss	indf2,5,c
 16576   0117C6  EFE6  F08B         	goto	u2545
 16577   0117CA  8AEF               	bsf	indf0,5,c
 16578   0117CC                     u2545:
 16579   0117CC                     
 16580                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16581                           ;stkvar	_config @ sp[(-4)+-2]
 16582   0117CC  0EFA               	movlw	-6
 16583   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16584   0117D2  0EFB               	movlw	-5
 16585   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16586                           
 16587                           ;stkvar	_ciCon @ sp[(-4)+0]
 16588   0117D8  50E1               	movf	fsr1l,w,c
 16589   0117DA  0FFC               	addlw	-4
 16590   0117DC  6EE9               	movwf	fsr0l,c
 16591   0117DE  50E2               	movf	fsr1h,w,c
 16592   0117E0  6EEA               	movwf	fsr0h,c
 16593   0117E2  0EFF               	movlw	255
 16594   0117E4  22EA               	addwfc	fsr0h,f,c
 16595   0117E6  9CEF               	bcf	indf0,6,c
 16596   0117E8  ACDF               	btfss	indf2,6,c
 16597   0117EA  EFF8  F08B         	goto	u2555
 16598   0117EE  8CEF               	bsf	indf0,6,c
 16599   0117F0                     u2555:
 16600   0117F0                     
 16601                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16602                           ;stkvar	_config @ sp[(-4)+-2]
 16603   0117F0  0EFA               	movlw	-6
 16604   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16605   0117F6  0EFB               	movlw	-5
 16606   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16607                           
 16608                           ;stkvar	_ciCon @ sp[(-4)+0]
 16609   0117FC  0EFD               	movlw	253
 16610   0117FE  24E1               	addwf	fsr1l,w,c
 16611   011800  6EE9               	movwf	fsr0l,c
 16612   011802  0EFF               	movlw	255
 16613   011804  20E2               	addwfc	fsr1h,w,c
 16614   011806  6EEA               	movwf	fsr0h,c
 16615   011808  90EF               	bcf	indf0,0,c
 16616   01180A  AEDF               	btfss	indf2,7,c
 16617   01180C  EF09  F08C         	goto	u2565
 16618   011810  80EF               	bsf	indf0,0,c
 16619   011812                     u2565:
 16620   011812                     
 16621                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16622                           ;stkvar	_config @ sp[(-4)+-2]
 16623   011812  0EFA               	movlw	-6
 16624   011814  CFE3 F034          	movff	plusw1,btemp+10
 16625   011818  0EFB               	movlw	-5
 16626   01181A  CFE3 F035          	movff	plusw1,btemp+11
 16627   01181E  0E01               	movlw	1
 16628   011820  2434               	addwf	(btemp+10)^0,w,c
 16629   011822  6ED9               	movwf	fsr2l,c
 16630   011824  0E00               	movlw	0
 16631   011826  2035               	addwfc	(btemp+11)^0,w,c
 16632   011828  6EDA               	movwf	fsr2h,c
 16633   01182A  50DF               	movf	223,w,c
 16634   01182C  0B03               	andlw	3
 16635   01182E  6E35               	movwf	(btemp+11)^0,c
 16636                           
 16637                           ;stkvar	_ciCon @ sp[(-4)+0]
 16638   011830  0EFD               	movlw	253
 16639   011832  24E1               	addwf	fsr1l,w,c
 16640   011834  6ED9               	movwf	fsr2l,c
 16641   011836  0EFF               	movlw	255
 16642   011838  20E2               	addwfc	fsr1h,w,c
 16643   01183A  6EDA               	movwf	fsr2h,c
 16644   01183C  4635               	rlncf	(btemp+11)^0,f,c
 16645   01183E  50DF               	movf	223,w,c
 16646   011840  1835               	xorwf	(btemp+11)^0,w,c
 16647   011842  0BF9               	andlw	-7
 16648   011844  1835               	xorwf	(btemp+11)^0,w,c
 16649   011846  6EDF               	movwf	223,c
 16650   011848                     
 16651                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16652                           ;stkvar	_config @ sp[(-4)+-2]
 16653   011848  0EFA               	movlw	-6
 16654   01184A  CFE3 F034          	movff	plusw1,btemp+10
 16655   01184E  0EFB               	movlw	-5
 16656   011850  CFE3 F035          	movff	plusw1,btemp+11
 16657   011854  0E01               	movlw	1
 16658   011856  2434               	addwf	(btemp+10)^0,w,c
 16659   011858  6ED9               	movwf	fsr2l,c
 16660   01185A  0E00               	movlw	0
 16661   01185C  2035               	addwfc	(btemp+11)^0,w,c
 16662   01185E  6EDA               	movwf	fsr2h,c
 16663                           
 16664                           ;stkvar	_ciCon @ sp[(-4)+0]
 16665   011860  0EFD               	movlw	253
 16666   011862  24E1               	addwf	fsr1l,w,c
 16667   011864  6EE9               	movwf	fsr0l,c
 16668   011866  0EFF               	movlw	255
 16669   011868  20E2               	addwfc	fsr1h,w,c
 16670   01186A  6EEA               	movwf	fsr0h,c
 16671   01186C  98EF               	bcf	indf0,4,c
 16672   01186E  A4DF               	btfss	indf2,2,c
 16673   011870  EF3B  F08C         	goto	u2575
 16674   011874  88EF               	bsf	indf0,4,c
 16675   011876                     u2575:
 16676   011876                     
 16677                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16678                           ;stkvar	_config @ sp[(-4)+-2]
 16679   011876  0EFA               	movlw	-6
 16680   011878  CFE3 F034          	movff	plusw1,btemp+10
 16681   01187C  0EFB               	movlw	-5
 16682   01187E  CFE3 F035          	movff	plusw1,btemp+11
 16683   011882  0E01               	movlw	1
 16684   011884  2434               	addwf	(btemp+10)^0,w,c
 16685   011886  6ED9               	movwf	fsr2l,c
 16686   011888  0E00               	movlw	0
 16687   01188A  2035               	addwfc	(btemp+11)^0,w,c
 16688   01188C  6EDA               	movwf	fsr2h,c
 16689                           
 16690                           ;stkvar	_ciCon @ sp[(-4)+0]
 16691   01188E  0EFE               	movlw	254
 16692   011890  24E1               	addwf	fsr1l,w,c
 16693   011892  6EE9               	movwf	fsr0l,c
 16694   011894  0EFF               	movlw	255
 16695   011896  20E2               	addwfc	fsr1h,w,c
 16696   011898  6EEA               	movwf	fsr0h,c
 16697   01189A  90EF               	bcf	indf0,0,c
 16698   01189C  A6DF               	btfss	indf2,3,c
 16699   01189E  EF52  F08C         	goto	u2585
 16700   0118A2  80EF               	bsf	indf0,0,c
 16701   0118A4                     u2585:
 16702   0118A4                     
 16703                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16704                           ;stkvar	_config @ sp[(-4)+-2]
 16705   0118A4  0EFA               	movlw	-6
 16706   0118A6  CFE3 F034          	movff	plusw1,btemp+10
 16707   0118AA  0EFB               	movlw	-5
 16708   0118AC  CFE3 F035          	movff	plusw1,btemp+11
 16709   0118B0  0E01               	movlw	1
 16710   0118B2  2434               	addwf	(btemp+10)^0,w,c
 16711   0118B4  6ED9               	movwf	fsr2l,c
 16712   0118B6  0E00               	movlw	0
 16713   0118B8  2035               	addwfc	(btemp+11)^0,w,c
 16714   0118BA  6EDA               	movwf	fsr2h,c
 16715                           
 16716                           ;stkvar	_ciCon @ sp[(-4)+0]
 16717   0118BC  0EFE               	movlw	254
 16718   0118BE  24E1               	addwf	fsr1l,w,c
 16719   0118C0  6EE9               	movwf	fsr0l,c
 16720   0118C2  0EFF               	movlw	255
 16721   0118C4  20E2               	addwfc	fsr1h,w,c
 16722   0118C6  6EEA               	movwf	fsr0h,c
 16723   0118C8  92EF               	bcf	indf0,1,c
 16724   0118CA  A8DF               	btfss	indf2,4,c
 16725   0118CC  EF69  F08C         	goto	u2595
 16726   0118D0  82EF               	bsf	indf0,1,c
 16727   0118D2                     u2595:
 16728   0118D2                     
 16729                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16730                           ;stkvar	_config @ sp[(-4)+-2]
 16731   0118D2  0EFA               	movlw	-6
 16732   0118D4  CFE3 F034          	movff	plusw1,btemp+10
 16733   0118D8  0EFB               	movlw	-5
 16734   0118DA  CFE3 F035          	movff	plusw1,btemp+11
 16735   0118DE  0E01               	movlw	1
 16736   0118E0  2434               	addwf	(btemp+10)^0,w,c
 16737   0118E2  6ED9               	movwf	fsr2l,c
 16738   0118E4  0E00               	movlw	0
 16739   0118E6  2035               	addwfc	(btemp+11)^0,w,c
 16740   0118E8  6EDA               	movwf	fsr2h,c
 16741                           
 16742                           ;stkvar	_ciCon @ sp[(-4)+0]
 16743   0118EA  0EFE               	movlw	254
 16744   0118EC  24E1               	addwf	fsr1l,w,c
 16745   0118EE  6EE9               	movwf	fsr0l,c
 16746   0118F0  0EFF               	movlw	255
 16747   0118F2  20E2               	addwfc	fsr1h,w,c
 16748   0118F4  6EEA               	movwf	fsr0h,c
 16749   0118F6  94EF               	bcf	indf0,2,c
 16750   0118F8  AADF               	btfss	indf2,5,c
 16751   0118FA  EF80  F08C         	goto	u2605
 16752   0118FE  84EF               	bsf	indf0,2,c
 16753   011900                     u2605:
 16754   011900                     
 16755                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16756                           ;stkvar	_config @ sp[(-4)+-2]
 16757   011900  0EFA               	movlw	-6
 16758   011902  CFE3 F034          	movff	plusw1,btemp+10
 16759   011906  0EFB               	movlw	-5
 16760   011908  CFE3 F035          	movff	plusw1,btemp+11
 16761   01190C  0E01               	movlw	1
 16762   01190E  2434               	addwf	(btemp+10)^0,w,c
 16763   011910  6ED9               	movwf	fsr2l,c
 16764   011912  0E00               	movlw	0
 16765   011914  2035               	addwfc	(btemp+11)^0,w,c
 16766   011916  6EDA               	movwf	fsr2h,c
 16767                           
 16768                           ;stkvar	_ciCon @ sp[(-4)+0]
 16769   011918  0EFE               	movlw	254
 16770   01191A  24E1               	addwf	fsr1l,w,c
 16771   01191C  6EE9               	movwf	fsr0l,c
 16772   01191E  0EFF               	movlw	255
 16773   011920  20E2               	addwfc	fsr1h,w,c
 16774   011922  6EEA               	movwf	fsr0h,c
 16775   011924  96EF               	bcf	indf0,3,c
 16776   011926  ACDF               	btfss	indf2,6,c
 16777   011928  EF97  F08C         	goto	u2615
 16778   01192C  86EF               	bsf	indf0,3,c
 16779   01192E                     u2615:
 16780   01192E                     
 16781                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16782                           ;stkvar	_config @ sp[(-4)+-2]
 16783   01192E  0EFA               	movlw	-6
 16784   011930  CFE3 F034          	movff	plusw1,btemp+10
 16785   011934  0EFB               	movlw	-5
 16786   011936  CFE3 F035          	movff	plusw1,btemp+11
 16787   01193A  0E01               	movlw	1
 16788   01193C  2434               	addwf	(btemp+10)^0,w,c
 16789   01193E  6ED9               	movwf	fsr2l,c
 16790   011940  0E00               	movlw	0
 16791   011942  2035               	addwfc	(btemp+11)^0,w,c
 16792   011944  6EDA               	movwf	fsr2h,c
 16793                           
 16794                           ;stkvar	_ciCon @ sp[(-4)+0]
 16795   011946  0EFE               	movlw	254
 16796   011948  24E1               	addwf	fsr1l,w,c
 16797   01194A  6EE9               	movwf	fsr0l,c
 16798   01194C  0EFF               	movlw	255
 16799   01194E  20E2               	addwfc	fsr1h,w,c
 16800   011950  6EEA               	movwf	fsr0h,c
 16801   011952  98EF               	bcf	indf0,4,c
 16802   011954  AEDF               	btfss	indf2,7,c
 16803   011956  EFAE  F08C         	goto	u2625
 16804   01195A  88EF               	bsf	indf0,4,c
 16805   01195C                     u2625:
 16806   01195C                     
 16807                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16808                           ;stkvar	_config @ sp[(-4)+-2]
 16809   01195C  0EFA               	movlw	-6
 16810   01195E  CFE3 F034          	movff	plusw1,btemp+10
 16811   011962  0EFB               	movlw	-5
 16812   011964  CFE3 F035          	movff	plusw1,btemp+11
 16813   011968  0E02               	movlw	2
 16814   01196A  2434               	addwf	(btemp+10)^0,w,c
 16815   01196C  6ED9               	movwf	fsr2l,c
 16816   01196E  0E00               	movlw	0
 16817   011970  2035               	addwfc	(btemp+11)^0,w,c
 16818   011972  6EDA               	movwf	fsr2h,c
 16819   011974  50DF               	movf	223,w,c
 16820   011976  0B0F               	andlw	15
 16821   011978  6E35               	movwf	(btemp+11)^0,c
 16822                           
 16823                           ;stkvar	_ciCon @ sp[(-4)+0]
 16824   01197A  0EFF               	movlw	255
 16825   01197C  24E1               	addwf	fsr1l,w,c
 16826   01197E  6ED9               	movwf	fsr2l,c
 16827   011980  0EFF               	movlw	255
 16828   011982  20E2               	addwfc	fsr1h,w,c
 16829   011984  6EDA               	movwf	fsr2h,c
 16830   011986  3A35               	swapf	(btemp+11)^0,f,c
 16831   011988  50DF               	movf	223,w,c
 16832   01198A  1835               	xorwf	(btemp+11)^0,w,c
 16833   01198C  0B0F               	andlw	-241
 16834   01198E  1835               	xorwf	(btemp+11)^0,w,c
 16835   011990  6EDF               	movwf	223,c
 16836   011992                     
 16837                           ;stkvar	_ciCon @ sp[(-4)+0]
 16838   011992  0EFC               	movlw	-4
 16839   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16840   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16841   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16842   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16843   0119A4  0E00               	movlw	0
 16844   0119A6  6EE6               	movwf	postinc1,c
 16845   0119A8  0E00               	movlw	0
 16846   0119AA  6EE6               	movwf	postinc1,c
 16847   0119AC  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16848   0119B0                     
 16849                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16850   0119B0  0EFA               	movlw	250
 16851   0119B2  26E1               	addwf	fsr1l,f,c
 16852   0119B4  0EFF               	movlw	255
 16853   0119B6  22E2               	addwfc	fsr1h,f,c
 16854   0119B8  0012               	return		;funcret
 16855   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16856                           	callstack 0
 16857                           
 16858 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16859 ;; Defined at:
 16860 ;;		line 2825 in file "can/can.c"
 16861 ;; Parameters:    Size  Location     Type
 16862 ;;  bitTime         1  [STACK] enum E5604
 16863 ;; Auto vars:     Size  Location     Type
 16864 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16865 ;;  spiTransferE    1    0        char 
 16866 ;; Return value:  Size  Location     Type
 16867 ;;                  1  [STACK] char 
 16868 ;; Registers used:
 16869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16870 ;; Tracked objects:
 16871 ;;		On entry : 0/0
 16872 ;;		On exit  : 0/0
 16873 ;;		Unchanged: 0/0
 16874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16879 ;;Total ram usage:        0 bytes
 16880 ;; Hardware stack levels used: 1
 16881 ;; Hardware stack levels required when called: 9
 16882 ;; This function calls:
 16883 ;;		_DRV_CANFDSPI_WriteWord
 16884 ;; This function is called by:
 16885 ;;		_CanInit
 16886 ;; This function uses a reentrant model
 16887 ;;
 16888                           
 16889                           	psect	text67
 16890   011C18                     __ptext67:
 16891                           	callstack 0
 16892   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16893                           	callstack 0
 16894                           
 16895                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16896   011C18  52E6               	movf	postinc1,f,c
 16897   011C1A  52E6               	movf	postinc1,f,c
 16898   011C1C  52E6               	movf	postinc1,f,c
 16899   011C1E  52E6               	movf	postinc1,f,c
 16900   011C20                     
 16901                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16902   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16903   011C22  6EF6               	movwf	tblptrl,c
 16904   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16905   011C26  6EF7               	movwf	tblptrh,c
 16906   011C28                     	if	0	;tblptru may be non-zero
 16907   011C28                     	endif
 16908   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16909   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16910   011C2A  6EF8               	movwf	tblptru,c
 16911   011C2C                     	endif
 16912   011C2C  0009               	tblrd		*+
 16913   011C2E  CFF5 F032          	movff	tablat,btemp+8
 16914   011C32  0009               	tblrd		*+
 16915   011C34  CFF5 F033          	movff	tablat,btemp+9
 16916   011C38  0009               	tblrd		*+
 16917   011C3A  CFF5 F034          	movff	tablat,btemp+10
 16918   011C3E  0009               	tblrd		*+
 16919   011C40  CFF5 F035          	movff	tablat,btemp+11
 16920                           
 16921                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16922   011C44  0EFC               	movlw	-4
 16923   011C46  C032  FFE3         	movff	btemp+8,plusw1
 16924   011C4A  0EFD               	movlw	-3
 16925   011C4C  C033  FFE3         	movff	btemp+9,plusw1
 16926   011C50  0EFE               	movlw	-2
 16927   011C52  C034  FFE3         	movff	btemp+10,plusw1
 16928   011C56  0EFF               	movlw	-1
 16929   011C58  C035  FFE3         	movff	btemp+11,plusw1
 16930                           
 16931                           ;can/can.c: 2834:     switch (bitTime) {
 16932   011C5C  EFC8  F08E         	goto	l4859
 16933   011C60                     l665:
 16934   011C60                     l4839:
 16935                           
 16936                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16937                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16938   011C60  0EFF               	movlw	255
 16939   011C62  24E1               	addwf	fsr1l,w,c
 16940   011C64  6ED9               	movwf	fsr2l,c
 16941   011C66  0EFF               	movlw	255
 16942   011C68  20E2               	addwfc	fsr1h,w,c
 16943   011C6A  6EDA               	movwf	fsr2h,c
 16944   011C6C  6ADF               	clrf	indf2,c
 16945                           
 16946                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16947                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16948   011C6E  0EFE               	movlw	254
 16949   011C70  24E1               	addwf	fsr1l,w,c
 16950   011C72  6ED9               	movwf	fsr2l,c
 16951   011C74  0EFF               	movlw	255
 16952   011C76  20E2               	addwfc	fsr1h,w,c
 16953   011C78  6EDA               	movwf	fsr2h,c
 16954   011C7A  0E3E               	movlw	62
 16955   011C7C  6EDF               	movwf	indf2,c
 16956                           
 16957                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16958                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16959   011C7E  0EFD               	movlw	253
 16960   011C80  24E1               	addwf	fsr1l,w,c
 16961   011C82  6ED9               	movwf	fsr2l,c
 16962   011C84  0EFF               	movlw	255
 16963   011C86  20E2               	addwfc	fsr1h,w,c
 16964   011C88  6EDA               	movwf	fsr2h,c
 16965   011C8A  50DF               	movf	223,w,c
 16966   011C8C  0B80               	andlw	-128
 16967   011C8E  090F               	iorlw	15
 16968   011C90  6EDF               	movwf	223,c
 16969   011C92                     
 16970                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16971                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16972   011C92  50E1               	movf	fsr1l,w,c
 16973   011C94  0FFC               	addlw	-4
 16974   011C96  6ED9               	movwf	fsr2l,c
 16975   011C98  50E2               	movf	fsr1h,w,c
 16976   011C9A  6EDA               	movwf	fsr2h,c
 16977   011C9C  0EFF               	movlw	255
 16978   011C9E  22DA               	addwfc	fsr2h,f,c
 16979   011CA0  50DF               	movf	223,w,c
 16980   011CA2  0B80               	andlw	-128
 16981   011CA4  090F               	iorlw	15
 16982   011CA6  6EDF               	movwf	223,c
 16983                           
 16984                           ;can/can.c: 2848:             break;
 16985   011CA8  EF1E  F08F         	goto	l4861
 16986   011CAC                     l674:
 16987   011CAC                     l4843:
 16988                           
 16989                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16990                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16991   011CAC  0EFF               	movlw	255
 16992   011CAE  24E1               	addwf	fsr1l,w,c
 16993   011CB0  6ED9               	movwf	fsr2l,c
 16994   011CB2  0EFF               	movlw	255
 16995   011CB4  20E2               	addwfc	fsr1h,w,c
 16996   011CB6  6EDA               	movwf	fsr2h,c
 16997   011CB8  6ADF               	clrf	indf2,c
 16998                           
 16999                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 17000                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17001   011CBA  0EFE               	movlw	254
 17002   011CBC  24E1               	addwf	fsr1l,w,c
 17003   011CBE  6ED9               	movwf	fsr2l,c
 17004   011CC0  0EFF               	movlw	255
 17005   011CC2  20E2               	addwfc	fsr1h,w,c
 17006   011CC4  6EDA               	movwf	fsr2h,c
 17007   011CC6  0E7E               	movlw	126
 17008   011CC8  6EDF               	movwf	indf2,c
 17009                           
 17010                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 17011                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17012   011CCA  0EFD               	movlw	253
 17013   011CCC  24E1               	addwf	fsr1l,w,c
 17014   011CCE  6ED9               	movwf	fsr2l,c
 17015   011CD0  0EFF               	movlw	255
 17016   011CD2  20E2               	addwfc	fsr1h,w,c
 17017   011CD4  6EDA               	movwf	fsr2h,c
 17018   011CD6  50DF               	movf	223,w,c
 17019   011CD8  0B80               	andlw	-128
 17020   011CDA  091F               	iorlw	31
 17021   011CDC  6EDF               	movwf	223,c
 17022   011CDE                     
 17023                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 17024                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17025   011CDE  50E1               	movf	fsr1l,w,c
 17026   011CE0  0FFC               	addlw	-4
 17027   011CE2  6ED9               	movwf	fsr2l,c
 17028   011CE4  50E2               	movf	fsr1h,w,c
 17029   011CE6  6EDA               	movwf	fsr2h,c
 17030   011CE8  0EFF               	movlw	255
 17031   011CEA  22DA               	addwfc	fsr2h,f,c
 17032   011CEC  50DF               	movf	223,w,c
 17033   011CEE  0B80               	andlw	-128
 17034   011CF0  091F               	iorlw	31
 17035   011CF2  6EDF               	movwf	223,c
 17036                           
 17037                           ;can/can.c: 2862:             break;
 17038   011CF4  EF1E  F08F         	goto	l4861
 17039   011CF8                     l4847:
 17040                           
 17041                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 17042                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17043   011CF8  0EFF               	movlw	255
 17044   011CFA  24E1               	addwf	fsr1l,w,c
 17045   011CFC  6ED9               	movwf	fsr2l,c
 17046   011CFE  0EFF               	movlw	255
 17047   011D00  20E2               	addwfc	fsr1h,w,c
 17048   011D02  6EDA               	movwf	fsr2h,c
 17049   011D04  6ADF               	clrf	indf2,c
 17050                           
 17051                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 17052                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17053   011D06  0EFE               	movlw	254
 17054   011D08  24E1               	addwf	fsr1l,w,c
 17055   011D0A  6ED9               	movwf	fsr2l,c
 17056   011D0C  0EFF               	movlw	255
 17057   011D0E  20E2               	addwfc	fsr1h,w,c
 17058   011D10  6EDA               	movwf	fsr2h,c
 17059   011D12  0E1E               	movlw	30
 17060   011D14  6EDF               	movwf	indf2,c
 17061                           
 17062                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 17063                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17064   011D16  0EFD               	movlw	253
 17065   011D18  24E1               	addwf	fsr1l,w,c
 17066   011D1A  6ED9               	movwf	fsr2l,c
 17067   011D1C  0EFF               	movlw	255
 17068   011D1E  20E2               	addwfc	fsr1h,w,c
 17069   011D20  6EDA               	movwf	fsr2h,c
 17070   011D22  50DF               	movf	223,w,c
 17071   011D24  0B80               	andlw	-128
 17072   011D26  0907               	iorlw	7
 17073   011D28  6EDF               	movwf	223,c
 17074   011D2A                     
 17075                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 17076                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17077   011D2A  50E1               	movf	fsr1l,w,c
 17078   011D2C  0FFC               	addlw	-4
 17079   011D2E  6ED9               	movwf	fsr2l,c
 17080   011D30  50E2               	movf	fsr1h,w,c
 17081   011D32  6EDA               	movwf	fsr2h,c
 17082   011D34  0EFF               	movlw	255
 17083   011D36  22DA               	addwfc	fsr2h,f,c
 17084   011D38  50DF               	movf	223,w,c
 17085   011D3A  0B80               	andlw	-128
 17086   011D3C  0907               	iorlw	7
 17087   011D3E  6EDF               	movwf	223,c
 17088                           
 17089                           ;can/can.c: 2870:             break;
 17090   011D40  EF1E  F08F         	goto	l4861
 17091   011D44                     l4851:
 17092                           
 17093                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 17094                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17095   011D44  0EFF               	movlw	255
 17096   011D46  24E1               	addwf	fsr1l,w,c
 17097   011D48  6ED9               	movwf	fsr2l,c
 17098   011D4A  0EFF               	movlw	255
 17099   011D4C  20E2               	addwfc	fsr1h,w,c
 17100   011D4E  6EDA               	movwf	fsr2h,c
 17101   011D50  6ADF               	clrf	indf2,c
 17102                           
 17103                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 17104                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17105   011D52  0EFE               	movlw	254
 17106   011D54  24E1               	addwf	fsr1l,w,c
 17107   011D56  6ED9               	movwf	fsr2l,c
 17108   011D58  0EFF               	movlw	255
 17109   011D5A  20E2               	addwfc	fsr1h,w,c
 17110   011D5C  6EDA               	movwf	fsr2h,c
 17111   011D5E  0EFE               	movlw	254
 17112   011D60  6EDF               	movwf	indf2,c
 17113                           
 17114                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 17115                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17116   011D62  0EFD               	movlw	253
 17117   011D64  24E1               	addwf	fsr1l,w,c
 17118   011D66  6ED9               	movwf	fsr2l,c
 17119   011D68  0EFF               	movlw	255
 17120   011D6A  20E2               	addwfc	fsr1h,w,c
 17121   011D6C  6EDA               	movwf	fsr2h,c
 17122   011D6E  50DF               	movf	223,w,c
 17123   011D70  0B80               	andlw	-128
 17124   011D72  093F               	iorlw	63
 17125   011D74  6EDF               	movwf	223,c
 17126   011D76                     
 17127                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 17128                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17129   011D76  50E1               	movf	fsr1l,w,c
 17130   011D78  0FFC               	addlw	-4
 17131   011D7A  6ED9               	movwf	fsr2l,c
 17132   011D7C  50E2               	movf	fsr1h,w,c
 17133   011D7E  6EDA               	movwf	fsr2h,c
 17134   011D80  0EFF               	movlw	255
 17135   011D82  22DA               	addwfc	fsr2h,f,c
 17136   011D84  50DF               	movf	223,w,c
 17137   011D86  0B80               	andlw	-128
 17138   011D88  093F               	iorlw	63
 17139   011D8A  6EDF               	movwf	223,c
 17140                           
 17141                           ;can/can.c: 2877:             break;
 17142   011D8C  EF1E  F08F         	goto	l4861
 17143   011D90                     l4859:
 17144                           
 17145                           ;stkvar	_bitTime @ sp[(-4)+-1]
 17146   011D90  0EFB               	movlw	-5
 17147   011D92  50E3               	movf	plusw1,w,c
 17148   011D94  6E34               	movwf	(btemp+10)^0,c
 17149   011D96  6A35               	clrf	(btemp+11)^0,c
 17150                           
 17151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17152                           ; Switch size 1, requested type "simple"
 17153                           ; Number of cases is 1, Range of values is 0 to 0
 17154                           ; switch strategies available:
 17155                           ; Name         Instructions Cycles
 17156                           ; simple_byte            4     3 (average)
 17157                           ;	Chosen strategy is simple_byte
 17158   011D98  5035               	movf	(btemp+11)^0,w,c
 17159   011D9A  0A00               	xorlw	0	; case 0
 17160   011D9C  B4D8               	btfsc	status,2,c
 17161   011D9E  EFD3  F08E         	goto	l5761
 17162   011DA2  EF2D  F08F         	goto	l682
 17163   011DA6                     l5761:
 17164                           
 17165                           ; Switch size 1, requested type "simple"
 17166                           ; Number of cases is 18, Range of values is 0 to 17
 17167                           ; switch strategies available:
 17168                           ; Name         Instructions Cycles
 17169                           ; simple_byte           55    28 (average)
 17170                           ;	Chosen strategy is simple_byte
 17171   011DA6  5034               	movf	(btemp+10)^0,w,c
 17172   011DA8  0A00               	xorlw	0	; case 0
 17173   011DAA  B4D8               	btfsc	status,2,c
 17174   011DAC  EF30  F08E         	goto	l665
 17175   011DB0  0A01               	xorlw	1	; case 1
 17176   011DB2  B4D8               	btfsc	status,2,c
 17177   011DB4  EF30  F08E         	goto	l4839
 17178   011DB8  0A03               	xorlw	3	; case 2
 17179   011DBA  B4D8               	btfsc	status,2,c
 17180   011DBC  EF30  F08E         	goto	l4839
 17181   011DC0  0A01               	xorlw	1	; case 3
 17182   011DC2  B4D8               	btfsc	status,2,c
 17183   011DC4  EF30  F08E         	goto	l4839
 17184   011DC8  0A07               	xorlw	7	; case 4
 17185   011DCA  B4D8               	btfsc	status,2,c
 17186   011DCC  EF30  F08E         	goto	l4839
 17187   011DD0  0A01               	xorlw	1	; case 5
 17188   011DD2  B4D8               	btfsc	status,2,c
 17189   011DD4  EF30  F08E         	goto	l4839
 17190   011DD8  0A03               	xorlw	3	; case 6
 17191   011DDA  B4D8               	btfsc	status,2,c
 17192   011DDC  EF30  F08E         	goto	l4839
 17193   011DE0  0A01               	xorlw	1	; case 7
 17194   011DE2  B4D8               	btfsc	status,2,c
 17195   011DE4  EF30  F08E         	goto	l4839
 17196   011DE8  0A0F               	xorlw	15	; case 8
 17197   011DEA  B4D8               	btfsc	status,2,c
 17198   011DEC  EF56  F08E         	goto	l674
 17199   011DF0  0A01               	xorlw	1	; case 9
 17200   011DF2  B4D8               	btfsc	status,2,c
 17201   011DF4  EF56  F08E         	goto	l4843
 17202   011DF8  0A03               	xorlw	3	; case 10
 17203   011DFA  B4D8               	btfsc	status,2,c
 17204   011DFC  EF56  F08E         	goto	l4843
 17205   011E00  0A01               	xorlw	1	; case 11
 17206   011E02  B4D8               	btfsc	status,2,c
 17207   011E04  EF56  F08E         	goto	l4843
 17208   011E08  0A07               	xorlw	7	; case 12
 17209   011E0A  B4D8               	btfsc	status,2,c
 17210   011E0C  EF56  F08E         	goto	l4843
 17211   011E10  0A01               	xorlw	1	; case 13
 17212   011E12  B4D8               	btfsc	status,2,c
 17213   011E14  EF56  F08E         	goto	l4843
 17214   011E18  0A03               	xorlw	3	; case 14
 17215   011E1A  B4D8               	btfsc	status,2,c
 17216   011E1C  EF56  F08E         	goto	l4843
 17217   011E20  0A01               	xorlw	1	; case 15
 17218   011E22  B4D8               	btfsc	status,2,c
 17219   011E24  EF7C  F08E         	goto	l4847
 17220   011E28  0A1F               	xorlw	31	; case 16
 17221   011E2A  B4D8               	btfsc	status,2,c
 17222   011E2C  EF7C  F08E         	goto	l4847
 17223   011E30  0A01               	xorlw	1	; case 17
 17224   011E32  B4D8               	btfsc	status,2,c
 17225   011E34  EFA2  F08E         	goto	l4851
 17226   011E38  EF2D  F08F         	goto	l682
 17227   011E3C                     l4861:
 17228                           
 17229                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 17230   011E3C  0EFC               	movlw	-4
 17231   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 17232   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 17233   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 17234   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 17235   011E4E  0E04               	movlw	4
 17236   011E50  6EE6               	movwf	postinc1,c
 17237   011E52  0E00               	movlw	0
 17238   011E54  6EE6               	movwf	postinc1,c
 17239   011E56  EC69  F09D         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 17240   011E5A                     l682:
 17241                           
 17242                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 17243   011E5A  0EFB               	movlw	251
 17244   011E5C  26E1               	addwf	fsr1l,f,c
 17245   011E5E  0EFF               	movlw	255
 17246   011E60  22E2               	addwfc	fsr1h,f,c
 17247   011E62  0012               	return		;funcret
 17248   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 17249                           	callstack 0
 17250                           
 17251 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 17252 ;; Defined at:
 17253 ;;		line 310 in file "can/can.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;  address         2  [STACK] unsigned short 
 17256 ;;  txd             4  [STACK] unsigned long 
 17257 ;; Auto vars:     Size  Location     Type
 17258 ;;  spiTransferS    2  [STACK] unsigned short 
 17259 ;;  i               1  [STACK] unsigned char 
 17260 ;;  spiTransferE    1  [STACK] char 
 17261 ;; Return value:  Size  Location     Type
 17262 ;;                  1  [STACK] char 
 17263 ;; Registers used:
 17264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 17265 ;; Tracked objects:
 17266 ;;		On entry : 0/0
 17267 ;;		On exit  : 0/0
 17268 ;;		Unchanged: 0/0
 17269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17274 ;;Total ram usage:        0 bytes
 17275 ;; Hardware stack levels used: 1
 17276 ;; Hardware stack levels required when called: 8
 17277 ;; This function calls:
 17278 ;;		_SpiTransfer
 17279 ;; This function is called by:
 17280 ;;		_DRV_CANFDSPI_Configure
 17281 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 17282 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 17283 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 17284 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 17285 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 17286 ;;		_DRV_CANFDSPI_TefConfigure
 17287 ;;		_DRV_CANFDSPI_TimeStampSet
 17288 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 17289 ;; This function uses a reentrant model
 17290 ;;
 17291                           
 17292                           	psect	text68
 17293   013AD2                     __ptext68:
 17294                           	callstack 0
 17295   013AD2                     _DRV_CANFDSPI_WriteWord:
 17296                           	callstack 0
 17297                           
 17298                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17299   013AD2  52E6               	movf	postinc1,f,c
 17300   013AD4  52E6               	movf	postinc1,f,c
 17301   013AD6  52E6               	movf	postinc1,f,c
 17302   013AD8  52E6               	movf	postinc1,f,c
 17303   013ADA                     
 17304                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 17305   013ADA  0E06               	movlw	6
 17306   013ADC  6E34               	movwf	(btemp+10)^0,c
 17307   013ADE  0E00               	movlw	0
 17308   013AE0  6E35               	movwf	(btemp+11)^0,c
 17309                           
 17310                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 17311   013AE2  0EFC               	movlw	-4
 17312   013AE4  C034  FFE3         	movff	btemp+10,plusw1
 17313   013AE8  0EFD               	movlw	-3
 17314   013AEA  C035  FFE3         	movff	btemp+11,plusw1
 17315   013AEE                     
 17316                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 17317                           ;stkvar	_address @ sp[(-4)+-2]
 17318   013AEE  0EFB               	movlw	251
 17319   013AF0  24E1               	addwf	fsr1l,w,c
 17320   013AF2  6ED9               	movwf	fsr2l,c
 17321   013AF4  0EFF               	movlw	255
 17322   013AF6  20E2               	addwfc	fsr1h,w,c
 17323   013AF8  6EDA               	movwf	fsr2h,c
 17324   013AFA  50DF               	movf	indf2,w,c
 17325   013AFC  0B0F               	andlw	15
 17326   013AFE  0F20               	addlw	32
 17327   013B00  0101               	movlb	1	; () banked
 17328   013B02  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 17329   013B04                     
 17330                           ; BSR set to: 1
 17331                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 17332                           ;stkvar	_address @ sp[(-4)+-2]
 17333   013B04  0EFA               	movlw	-6
 17334   013B06  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 17335   013B0A                     
 17336                           ; BSR set to: 1
 17337                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 17338                           ;stkvar	_i @ sp[(-4)+2]
 17339   013B0A  0EFE               	movlw	-2
 17340   013B0C  6AE3               	clrf	plusw1,c
 17341   013B0E                     l4679:
 17342                           
 17343                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 17344                           ;stkvar	_i @ sp[(-4)+2]
 17345   013B0E  0EFE               	movlw	-2
 17346   013B10  50E3               	movf	plusw1,w,c
 17347   013B12  6E34               	movwf	(btemp+10)^0,c
 17348   013B14  6A35               	clrf	(btemp+11)^0,c
 17349   013B16  0E02               	movlw	low (_spiTransmitBuffer+2)
 17350   013B18  2434               	addwf	(btemp+10)^0,w,c
 17351   013B1A  6ED9               	movwf	fsr2l,c
 17352   013B1C  0E01               	movlw	high (_spiTransmitBuffer+2)
 17353   013B1E  2035               	addwfc	(btemp+11)^0,w,c
 17354   013B20  6EDA               	movwf	fsr2h,c
 17355                           
 17356                           ;stkvar	_txd @ sp[(-4)+-6]
 17357   013B22  0EF6               	movlw	-10
 17358   013B24  CFE3 F032          	movff	plusw1,btemp+8
 17359   013B28  0EF7               	movlw	-9
 17360   013B2A  CFE3 F033          	movff	plusw1,btemp+9
 17361   013B2E  0EF8               	movlw	-8
 17362   013B30  CFE3 F034          	movff	plusw1,btemp+10
 17363   013B34  0EF9               	movlw	-7
 17364   013B36  CFE3 F035          	movff	plusw1,btemp+11
 17365                           
 17366                           ;stkvar	_i @ sp[(-4)+2]
 17367   013B3A  0EFE               	movlw	-2
 17368   013B3C  50E3               	movf	plusw1,w,c
 17369   013B3E  0D08               	mullw	8
 17370   013B40  50F3               	movf	243,w,c
 17371   013B42  2AE8               	incf	wreg,f,c
 17372   013B44  EFA9  F09D         	goto	u2340
 17373   013B48                     u2345:
 17374   013B48  90D8               	bcf	status,0,c
 17375   013B4A  3235               	rrcf	(btemp+11)^0,f,c
 17376   013B4C  3234               	rrcf	(btemp+10)^0,f,c
 17377   013B4E  3233               	rrcf	(btemp+9)^0,f,c
 17378   013B50  3232               	rrcf	(btemp+8)^0,f,c
 17379   013B52                     u2340:
 17380   013B52  2EE8               	decfsz	wreg,f,c
 17381   013B54  EFA4  F09D         	goto	u2345
 17382   013B58  5032               	movf	(btemp+8)^0,w,c
 17383   013B5A  6EDF               	movwf	indf2,c
 17384   013B5C                     
 17385                           ;can/can.c: 324:     }
 17386                           ;stkvar	_i @ sp[(-4)+2]
 17387   013B5C  0EFE               	movlw	-2
 17388   013B5E  2AE3               	incf	plusw1,f,c
 17389   013B60                     
 17390                           ;stkvar	_i @ sp[(-4)+2]
 17391   013B60  0EFE               	movlw	-2
 17392   013B62  CFE3 F02A          	movff	plusw1,btemp
 17393   013B66  0E03               	movlw	3
 17394   013B68  642A               	cpfsgt	btemp^0,c
 17395   013B6A  EFB9  F09D         	goto	u2351
 17396   013B6E  EFBB  F09D         	goto	u2350
 17397   013B72                     u2351:
 17398   013B72  EF87  F09D         	goto	l4679
 17399   013B76                     u2350:
 17400   013B76                     
 17401                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 17402                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 17403   013B76  0EFC               	movlw	-4
 17404   013B78  CFE3 FFE6          	movff	plusw1,postinc1
 17405   013B7C  CFE3 FFE6          	movff	plusw1,postinc1
 17406   013B80  0E00               	movlw	low _spiReceiveBuffer
 17407   013B82  6EE6               	movwf	postinc1,c
 17408   013B84  0E02               	movlw	high _spiReceiveBuffer
 17409   013B86  6EE6               	movwf	postinc1,c
 17410   013B88  0E00               	movlw	low _spiTransmitBuffer
 17411   013B8A  6EE6               	movwf	postinc1,c
 17412   013B8C  0E01               	movlw	high _spiTransmitBuffer
 17413   013B8E  6EE6               	movwf	postinc1,c
 17414   013B90  EC06  F09F         	call	_SpiTransfer	;wreg free
 17415                           
 17416                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 17417   013B94  0EFF               	movlw	-1
 17418   013B96  C02A  FFE3         	movff	btemp,plusw1
 17419   013B9A                     
 17420                           ;can/can.c: 328:     return spiTransferError;
 17421                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 17422   013B9A  0EFF               	movlw	-1
 17423   013B9C  CFE3 F02A          	movff	plusw1,btemp
 17424   013BA0                     
 17425                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 17426   013BA0  0EF6               	movlw	246
 17427   013BA2  26E1               	addwf	fsr1l,f,c
 17428   013BA4  0EFF               	movlw	255
 17429   013BA6  22E2               	addwfc	fsr1h,f,c
 17430   013BA8  0012               	return		;funcret
 17431   013BAA                     __end_of_DRV_CANFDSPI_WriteWord:
 17432                           	callstack 0
 17433                           
 17434 ;; *************** function _SpiTransfer *****************
 17435 ;; Defined at:
 17436 ;;		line 132 in file "can/can.c"
 17437 ;; Parameters:    Size  Location     Type
 17438 ;;  txPtr           2  [STACK] PTR unsigned char 
 17439 ;;		 -> spiTransmitBuffer(200), 
 17440 ;;  rxPtr           2  [STACK] PTR unsigned char 
 17441 ;;		 -> spiReceiveBuffer(200), 
 17442 ;;  size            2  [STACK] unsigned short 
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;  dummy           1  [STACK] volatile unsigned char 
 17445 ;; Return value:  Size  Location     Type
 17446 ;;                  1  [STACK] char 
 17447 ;; Registers used:
 17448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 17449 ;; Tracked objects:
 17450 ;;		On entry : 0/1
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;Total ram usage:        0 bytes
 17459 ;; Hardware stack levels used: 1
 17460 ;; Hardware stack levels required when called: 7
 17461 ;; This function calls:
 17462 ;;		Nothing
 17463 ;; This function is called by:
 17464 ;;		_DRV_CANFDSPI_Reset
 17465 ;;		_DRV_CANFDSPI_ReadByte
 17466 ;;		_DRV_CANFDSPI_WriteByte
 17467 ;;		_DRV_CANFDSPI_WriteWord
 17468 ;;		_DRV_CANFDSPI_WriteHalfWord
 17469 ;;		_DRV_CANFDSPI_ReadByteArray
 17470 ;;		_DRV_CANFDSPI_WriteByteArray
 17471 ;;		_DRV_CANFDSPI_ReadWordArray
 17472 ;; This function uses a reentrant model
 17473 ;;
 17474                           
 17475                           	psect	text69
 17476   013E0C                     __ptext69:
 17477                           	callstack 0
 17478   013E0C                     _SpiTransfer:
 17479                           	callstack 0
 17480                           
 17481                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17482   013E0C  52E6               	movf	postinc1,f,c
 17483   013E0E                     
 17484                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 17485   013E0E  988F               	bcf	143,4,c	;volatile
 17486                           
 17487                           ;can/can.c: 136:   while(size > 0)
 17488   013E10  EF53  F09F         	goto	l4045
 17489   013E14                     l145:
 17490                           
 17491                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 17492   013E14  9064               	bcf	100,0,c	;volatile
 17493   013E16                     
 17494                           ;can/can.c: 139:     dummy = SSP2BUF;
 17495                           ;stkvar	_dummy @ sp[(-1)+0]
 17496   013E16  0EFF               	movlw	-1
 17497   013E18  CF66 FFE3          	movff	3942,plusw1	;volatile
 17498   013E1C                     
 17499                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 17500                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17501   013E1C  0EFD               	movlw	-3
 17502   013E1E  CFE3 FFD9          	movff	plusw1,fsr2l
 17503   013E22  0EFE               	movlw	-2
 17504   013E24  CFE3 FFDA          	movff	plusw1,fsr2h
 17505   013E28  50DF               	movf	indf2,w,c
 17506   013E2A  6E66               	movwf	102,c	;volatile
 17507   013E2C                     l146:
 17508   013E2C  A064               	btfss	100,0,c	;volatile
 17509   013E2E  EF1B  F09F         	goto	u1701
 17510   013E32  EF1D  F09F         	goto	u1700
 17511   013E36                     u1701:
 17512   013E36  EF16  F09F         	goto	l146
 17513   013E3A                     u1700:
 17514   013E3A                     
 17515                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 17516                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17517   013E3A  0EFB               	movlw	-5
 17518   013E3C  CFE3 FFD9          	movff	plusw1,fsr2l
 17519   013E40  0EFC               	movlw	-4
 17520   013E42  CFE3 FFDA          	movff	plusw1,fsr2h
 17521   013E46  CF66 FFDF          	movff	3942,indf2	;volatile
 17522   013E4A                     
 17523                           ;can/can.c: 143:     txPtr++;
 17524                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17525   013E4A  0EFD               	movlw	-3
 17526   013E4C  50E3               	movf	plusw1,w,c
 17527   013E4E  0F01               	addlw	1
 17528   013E50  6E2A               	movwf	btemp^0,c
 17529   013E52  0EFD               	movlw	-3
 17530   013E54  C02A  FFE3         	movff	btemp,plusw1
 17531   013E58  6A2A               	clrf	btemp^0,c
 17532   013E5A  0EFE               	movlw	-2
 17533   013E5C  50E3               	movf	plusw1,w,c
 17534   013E5E  202A               	addwfc	btemp^0,w,c
 17535   013E60  6E2A               	movwf	btemp^0,c
 17536   013E62  0EFE               	movlw	-2
 17537   013E64  C02A  FFE3         	movff	btemp,plusw1
 17538   013E68                     
 17539                           ;can/can.c: 144:     rxPtr++;
 17540                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17541   013E68  0EFB               	movlw	-5
 17542   013E6A  50E3               	movf	plusw1,w,c
 17543   013E6C  0F01               	addlw	1
 17544   013E6E  6E2A               	movwf	btemp^0,c
 17545   013E70  0EFB               	movlw	-5
 17546   013E72  C02A  FFE3         	movff	btemp,plusw1
 17547   013E76  6A2A               	clrf	btemp^0,c
 17548   013E78  0EFC               	movlw	-4
 17549   013E7A  50E3               	movf	plusw1,w,c
 17550   013E7C  202A               	addwfc	btemp^0,w,c
 17551   013E7E  6E2A               	movwf	btemp^0,c
 17552   013E80  0EFC               	movlw	-4
 17553   013E82  C02A  FFE3         	movff	btemp,plusw1
 17554   013E86                     
 17555                           ;can/can.c: 145:     size--;
 17556                           ;stkvar	_size @ sp[(-1)+-6]
 17557   013E86  0EF9               	movlw	-7
 17558   013E88  CFE3 F02A          	movff	plusw1,btemp
 17559   013E8C  0E01               	movlw	1
 17560   013E8E  5E2A               	subwf	btemp^0,f,c
 17561   013E90  0EF9               	movlw	-7
 17562   013E92  C02A  FFE3         	movff	btemp,plusw1
 17563   013E96  0EFA               	movlw	-6
 17564   013E98  CFE3 F02A          	movff	plusw1,btemp
 17565   013E9C  0E00               	movlw	0
 17566   013E9E  5A2A               	subwfb	btemp^0,f,c
 17567   013EA0  0EFA               	movlw	-6
 17568   013EA2  C02A  FFE3         	movff	btemp,plusw1
 17569   013EA6                     l4045:
 17570                           
 17571                           ;can/can.c: 136:   while(size > 0)
 17572                           ;stkvar	_size @ sp[(-1)+-6]
 17573   013EA6  0EF9               	movlw	-7
 17574   013EA8  CFE3 F02A          	movff	plusw1,btemp
 17575   013EAC  0EFA               	movlw	-6
 17576   013EAE  50E3               	movf	plusw1,w,c
 17577   013EB0  102A               	iorwf	btemp^0,w,c
 17578   013EB2  A4D8               	btfss	status,2,c
 17579   013EB4  EF5E  F09F         	goto	u1711
 17580   013EB8  EF60  F09F         	goto	u1710
 17581   013EBC                     u1711:
 17582   013EBC  EF0A  F09F         	goto	l145
 17583   013EC0                     u1710:
 17584   013EC0                     
 17585                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17586   013EC0  888F               	bsf	143,4,c	;volatile
 17587   013EC2                     
 17588                           ;can/can.c: 148:   return 0;
 17589   013EC2  0E00               	movlw	0
 17590   013EC4  6E2A               	movwf	btemp^0,c
 17591   013EC6                     
 17592                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17593   013EC6  0EF9               	movlw	249
 17594   013EC8  26E1               	addwf	fsr1l,f,c
 17595   013ECA  0EFF               	movlw	255
 17596   013ECC  22E2               	addwfc	fsr1h,f,c
 17597   013ECE  0012               	return		;funcret
 17598   013ED0                     __end_of_SpiTransfer:
 17599                           	callstack 0
 17600                           
 17601 ;; *************** function _INTERRUPT_InterruptManager *****************
 17602 ;; Defined at:
 17603 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17604 ;; Parameters:    Size  Location     Type
 17605 ;;		None
 17606 ;; Auto vars:     Size  Location     Type
 17607 ;;		None
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  1    wreg      void 
 17610 ;; Registers used:
 17611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17620 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17621 ;;Total ram usage:       16 bytes
 17622 ;; Hardware stack levels used: 1
 17623 ;; Hardware stack levels required when called: 6
 17624 ;; This function calls:
 17625 ;;		_TMR0_ISR
 17626 ;; This function is called by:
 17627 ;;		Interrupt level 2
 17628 ;; This function uses a non-reentrant model
 17629 ;;
 17630                           
 17631                           	psect	intcode
 17632   000008                     __pintcode:
 17633                           	callstack 0
 17634   000008                     _INTERRUPT_InterruptManager:
 17635                           	callstack 16
 17636                           
 17637                           ;incstack = 0
 17638   000008  CFFA F04A          	movff	pclath,??_INTERRUPT_InterruptManager
 17639   00000C  CFFB F04B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17640   000010  CFE9 F04C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17641   000014  CFEA F04D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17642   000018  CFE1 F04E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17643   00001C  CFE2 F04F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17644   000020  CFD9 F050          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17645   000024  CFDA F051          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17646   000028  CFF3 F052          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17647   00002C  CFF4 F053          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17648   000030  C02A  F054         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17649   000034  C02B  F055         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17650   000038  C032  F056         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17651   00003C  C033  F057         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17652   000040  C034  F058         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17653   000044  C035  F059         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17654   000048  EE19  F031         	lfsr	1,___inthi_sp
 17655   00004C                     
 17656                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17657   00004C  AAF2               	btfss	242,5,c	;volatile
 17658   00004E  EF2B  F000         	goto	i2u327_41
 17659   000052  EF2D  F000         	goto	i2u327_40
 17660   000056                     i2u327_41:
 17661   000056  EF36  F000         	goto	i2l1039
 17662   00005A                     i2u327_40:
 17663   00005A  A4F2               	btfss	242,2,c	;volatile
 17664   00005C  EF32  F000         	goto	i2u328_41
 17665   000060  EF34  F000         	goto	i2u328_40
 17666   000064                     i2u328_41:
 17667   000064  EF36  F000         	goto	i2l1039
 17668   000068                     i2u328_40:
 17669   000068                     
 17670                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17671   000068  ECA7  F0A5         	call	_TMR0_ISR	;wreg free
 17672   00006C                     i2l1039:
 17673   00006C  C059  F035         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17674   000070  C058  F034         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17675   000074  C057  F033         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17676   000078  C056  F032         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17677   00007C  C055  F02B         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17678   000080  C054  F02A         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17679   000084  C053  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17680   000088  C052  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17681   00008C  C051  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17682   000090  C050  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17683   000094  C04F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17684   000098  C04E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17685   00009C  C04D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17686   0000A0  C04C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17687   0000A4  C04B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17688   0000A8  C04A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17689   0000AC  0011               	retfie		f
 17690   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17691                           	callstack 0
 17692                           
 17693 ;; *************** function _TMR0_ISR *****************
 17694 ;; Defined at:
 17695 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17696 ;; Parameters:    Size  Location     Type
 17697 ;;		None
 17698 ;; Auto vars:     Size  Location     Type
 17699 ;;		None
 17700 ;; Return value:  Size  Location     Type
 17701 ;;                  1  [STACK] void 
 17702 ;; Registers used:
 17703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17704 ;; Tracked objects:
 17705 ;;		On entry : 0/0
 17706 ;;		On exit  : 0/0
 17707 ;;		Unchanged: 0/0
 17708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17713 ;;Total ram usage:        0 bytes
 17714 ;; Hardware stack levels used: 1
 17715 ;; Hardware stack levels required when called: 5
 17716 ;; This function calls:
 17717 ;;		_TMR0_CallBack
 17718 ;; This function is called by:
 17719 ;;		_INTERRUPT_InterruptManager
 17720 ;; This function uses a reentrant model
 17721 ;;
 17722                           
 17723                           	psect	text71
 17724   014B4E                     __ptext71:
 17725                           	callstack 0
 17726   014B4E                     _TMR0_ISR:
 17727                           	callstack 16
 17728   014B4E                     
 17729                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17730   014B4E  94F2               	bcf	242,2,c	;volatile
 17731                           
 17732                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17733   014B50  C023  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17734                           
 17735                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17736   014B54  C022  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17737   014B58                     
 17738                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17739   014B58  0E01               	movlw	1
 17740   014B5A  6E17               	movwf	(_carState+22)^0,c
 17741   014B5C                     
 17742                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17743   014B5C  4A20               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17744   014B5E  2A21               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17745   014B60  5020               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17746   014B62  1021               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17747   014B64  B4D8               	btfsc	status,2,c
 17748   014B66  EFB7  F0A5         	goto	u315_41
 17749   014B6A  EFB9  F0A5         	goto	u315_40
 17750   014B6E                     u315_41:
 17751   014B6E  EFBD  F0A5         	goto	l1085
 17752   014B72                     u315_40:
 17753   014B72                     
 17754                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17755   014B72  EC76  F0A5         	call	_TMR0_CallBack	;wreg free
 17756   014B76                     
 17757                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17758   014B76  6A20               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17759   014B78  6A21               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17760   014B7A                     l1085:
 17761                           
 17762                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17763   014B7A  0012               	return		;funcret
 17764   014B7C                     __end_of_TMR0_ISR:
 17765                           	callstack 0
 17766                           
 17767 ;; *************** function _TMR0_CallBack *****************
 17768 ;; Defined at:
 17769 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;		None
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;		None
 17774 ;; Return value:  Size  Location     Type
 17775 ;;                  1  [STACK] void 
 17776 ;; Registers used:
 17777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17778 ;; Tracked objects:
 17779 ;;		On entry : 0/0
 17780 ;;		On exit  : 0/0
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17787 ;;Total ram usage:        0 bytes
 17788 ;; Hardware stack levels used: 1
 17789 ;; Hardware stack levels required when called: 4
 17790 ;; This function calls:
 17791 ;;		NULL
 17792 ;;		_TMR0_DefaultInterruptHandler
 17793 ;;		_XF_decrementAndQueueTimers
 17794 ;; This function is called by:
 17795 ;;		_TMR0_ISR
 17796 ;; This function uses a reentrant model
 17797 ;;
 17798                           
 17799                           	psect	text72
 17800   014AEC                     __ptext72:
 17801                           	callstack 0
 17802   014AEC                     _TMR0_CallBack:
 17803                           	callstack 16
 17804   014AEC                     
 17805                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17806   014AEC  0E01               	movlw	1
 17807   014AEE  6E16               	movwf	(_carState+21)^0,c
 17808   014AF0                     
 17809                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17810   014AF0  505A               	movf	_TMR0_InterruptHandler^0,w,c
 17811   014AF2  105B               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17812   014AF4  105C               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17813   014AF6  B4D8               	btfsc	status,2,c
 17814   014AF8  EF80  F0A5         	goto	u290_41
 17815   014AFC  EF82  F0A5         	goto	u290_40
 17816   014B00                     u290_41:
 17817   014B00  EF8F  F0A5         	goto	l1089
 17818   014B04                     u290_40:
 17819   014B04                     
 17820                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17821   014B04  D802               	call	u291_48
 17822   014B06  EF8F  F0A5         	goto	u291_49
 17823   014B0A                     u291_48:
 17824   014B0A  0005               	push	
 17825   014B0C  6EFA               	movwf	pclath,c
 17826   014B0E  505A               	movf	_TMR0_InterruptHandler^0,w,c
 17827   014B10  6EFD               	movwf	tosl,c
 17828   014B12  505B               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17829   014B14  6EFE               	movwf	tosh,c
 17830   014B16  505C               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17831   014B18  6EFF               	movwf	tosu,c
 17832   014B1A  50FA               	movf	pclath,w,c
 17833   014B1C  0012               	return		;indir
 17834   014B1E                     u291_49:
 17835   014B1E                     l1089:
 17836                           
 17837                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17838   014B1E  0012               	return		;funcret
 17839   014B20                     __end_of_TMR0_CallBack:
 17840                           	callstack 0
 17841                           
 17842 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17843 ;; Defined at:
 17844 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;		None
 17847 ;; Auto vars:     Size  Location     Type
 17848 ;;		None
 17849 ;; Return value:  Size  Location     Type
 17850 ;;                  1  [STACK] void 
 17851 ;; Registers used:
 17852 ;;		None
 17853 ;; Tracked objects:
 17854 ;;		On entry : 0/0
 17855 ;;		On exit  : 0/0
 17856 ;;		Unchanged: 0/0
 17857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17862 ;;Total ram usage:        0 bytes
 17863 ;; Hardware stack levels used: 1
 17864 ;; This function calls:
 17865 ;;		Nothing
 17866 ;; This function is called by:
 17867 ;;		_TMR0_Initialize
 17868 ;;		_TMR0_CallBack
 17869 ;; This function uses a reentrant model
 17870 ;;
 17871                           
 17872                           	psect	text73
 17873   014CC0                     __ptext73:
 17874                           	callstack 0
 17875   014CC0                     _TMR0_DefaultInterruptHandler:
 17876                           	callstack 19
 17877   014CC0                     
 17878                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17879   014CC0  0012               	return		;funcret
 17880   014CC2                     __end_of_TMR0_DefaultInterruptHandler:
 17881                           	callstack 0
 17882                           
 17883 ;; *************** function _XF_decrementAndQueueTimers *****************
 17884 ;; Defined at:
 17885 ;;		line 217 in file "xf/xf.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;		None
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  dummy           1  [STACK] unsigned char 
 17890 ;;  i               1  [STACK] unsigned char 
 17891 ;; Return value:  Size  Location     Type
 17892 ;;                  1  [STACK] void 
 17893 ;; Registers used:
 17894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17895 ;; Tracked objects:
 17896 ;;		On entry : 0/0
 17897 ;;		On exit  : 0/0
 17898 ;;		Unchanged: 0/0
 17899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17904 ;;Total ram usage:        0 bytes
 17905 ;; Hardware stack levels used: 1
 17906 ;; Hardware stack levels required when called: 3
 17907 ;; This function calls:
 17908 ;;		_XF_pushEvent
 17909 ;;		_XF_unscheduleTimer
 17910 ;; This function is called by:
 17911 ;;		_main
 17912 ;;		_TMR0_CallBack
 17913 ;; This function uses a reentrant model
 17914 ;;
 17915                           
 17916                           	psect	text74
 17917   01371C                     __ptext74:
 17918                           	callstack 0
 17919   01371C                     _XF_decrementAndQueueTimers:
 17920                           	callstack 0
 17921                           
 17922                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17923   01371C  52E6               	movf	postinc1,f,c
 17924   01371E  52E6               	movf	postinc1,f,c
 17925   013720                     
 17926                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17927                           ;stkvar	_i @ sp[(-2)+1]
 17928   013720  0EFF               	movlw	-1
 17929   013722  6AE3               	clrf	plusw1,c
 17930   013724                     l4727:
 17931                           
 17932                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17933                           ;stkvar	_i @ sp[(-2)+1]
 17934   013724  0EFF               	movlw	-1
 17935   013726  50E3               	movf	plusw1,w,c
 17936   013728  0D08               	mullw	8
 17937   01372A  0ECA               	movlw	low (_theXF+2)
 17938   01372C  24F3               	addwf	243,w,c
 17939   01372E  6ED9               	movwf	fsr2l,c
 17940   013730  0E02               	movlw	high (_theXF+2)
 17941   013732  20F4               	addwfc	prodh,w,c
 17942   013734  6EDA               	movwf	fsr2h,c
 17943   013736  50DF               	movf	indf2,w,c
 17944   013738  B4D8               	btfsc	status,2,c
 17945   01373A  EFA1  F09B         	goto	u238_41
 17946   01373E  EFA3  F09B         	goto	u238_40
 17947   013742                     u238_41:
 17948   013742  EFFD  F09B         	goto	l4739
 17949   013746                     u238_40:
 17950   013746                     
 17951                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17952                           ;stkvar	_i @ sp[(-2)+1]
 17953   013746  0EFF               	movlw	-1
 17954   013748  50E3               	movf	plusw1,w,c
 17955   01374A  0D08               	mullw	8
 17956   01374C  0EC8               	movlw	low _theXF
 17957   01374E  24F3               	addwf	243,w,c
 17958   013750  6ED9               	movwf	fsr2l,c
 17959   013752  0E02               	movlw	high _theXF
 17960   013754  20F4               	addwfc	prodh,w,c
 17961   013756  6EDA               	movwf	fsr2h,c
 17962   013758  0E0A               	movlw	10
 17963   01375A  5EDE               	subwf	postinc2,f,c
 17964   01375C  0E00               	movlw	0
 17965   01375E  5ADD               	subwfb	postdec2,f,c
 17966   013760                     
 17967                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17968                           ;stkvar	_i @ sp[(-2)+1]
 17969   013760  0EFF               	movlw	-1
 17970   013762  50E3               	movf	plusw1,w,c
 17971   013764  0D08               	mullw	8
 17972   013766  0EC8               	movlw	low _theXF
 17973   013768  24F3               	addwf	243,w,c
 17974   01376A  6ED9               	movwf	fsr2l,c
 17975   01376C  0E02               	movlw	high _theXF
 17976   01376E  20F4               	addwfc	prodh,w,c
 17977   013770  6EDA               	movwf	fsr2h,c
 17978   013772  50DE               	movf	postinc2,w,c
 17979   013774  10DE               	iorwf	postinc2,w,c
 17980   013776  A4D8               	btfss	status,2,c
 17981   013778  EFC0  F09B         	goto	u239_41
 17982   01377C  EFC2  F09B         	goto	u239_40
 17983   013780                     u239_41:
 17984   013780  EFFD  F09B         	goto	l4739
 17985   013784                     u239_40:
 17986   013784                     
 17987                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17988                           ;stkvar	_dummy @ sp[(-2)+0]
 17989   013784  0EFE               	movlw	254
 17990   013786  24E1               	addwf	fsr1l,w,c
 17991   013788  6E2A               	movwf	btemp^0,c
 17992   01378A  0EFF               	movlw	255
 17993   01378C  20E2               	addwfc	fsr1h,w,c
 17994   01378E  6E2B               	movwf	(btemp+1)^0,c
 17995   013790  C02A  FFE6         	movff	btemp,postinc1
 17996   013794  C02B  FFE6         	movff	btemp+1,postinc1
 17997   013798  0E01               	movlw	1
 17998   01379A  6EE6               	movwf	postinc1,c
 17999                           
 18000                           ;stkvar	_i @ sp[(-5)+1]
 18001   01379C  0EFC               	movlw	-4
 18002   01379E  50E3               	movf	plusw1,w,c
 18003   0137A0  0D08               	mullw	8
 18004   0137A2  0ECA               	movlw	low (_theXF+2)
 18005   0137A4  24F3               	addwf	243,w,c
 18006   0137A6  6ED9               	movwf	fsr2l,c
 18007   0137A8  0E02               	movlw	high (_theXF+2)
 18008   0137AA  20F4               	addwfc	prodh,w,c
 18009   0137AC  6EDA               	movwf	fsr2h,c
 18010   0137AE  0E06               	movlw	6
 18011   0137B0                     u240_41:
 18012   0137B0  CFDE FFE6          	movff	postinc2,postinc1
 18013   0137B4  2CE8               	decfsz	wreg,w,c
 18014   0137B6  EFD8  F09B         	goto	u240_41
 18015   0137BA  EC8F  F096         	call	_XF_pushEvent	;wreg free
 18016   0137BE  042A               	decf	btemp^0,w,c
 18017   0137C0  A4D8               	btfss	status,2,c
 18018   0137C2  EFE5  F09B         	goto	u241_41
 18019   0137C6  EFE7  F09B         	goto	u241_40
 18020   0137CA                     u241_41:
 18021   0137CA  EFF0  F09B         	goto	l4737
 18022   0137CE                     u241_40:
 18023   0137CE                     
 18024                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 18025   0137CE  0E01               	movlw	1
 18026   0137D0  6EE6               	movwf	postinc1,c
 18027                           
 18028                           ;stkvar	_i @ sp[(-3)+1]
 18029   0137D2  0EFE               	movlw	-2
 18030   0137D4  50E3               	movf	plusw1,w,c
 18031   0137D6  6EE6               	movwf	postinc1,c
 18032   0137D8  ECA1  F0A4         	call	_XF_unscheduleTimer	;wreg free
 18033                           
 18034                           ;xf/xf.c: 231:                 }
 18035   0137DC  EFFD  F09B         	goto	l4739
 18036   0137E0                     l4737:
 18037                           
 18038                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 18039                           ;stkvar	_i @ sp[(-2)+1]
 18040   0137E0  0EFF               	movlw	-1
 18041   0137E2  50E3               	movf	plusw1,w,c
 18042   0137E4  0D08               	mullw	8
 18043   0137E6  0EC8               	movlw	low _theXF
 18044   0137E8  24F3               	addwf	243,w,c
 18045   0137EA  6ED9               	movwf	fsr2l,c
 18046   0137EC  0E02               	movlw	high _theXF
 18047   0137EE  20F4               	addwfc	prodh,w,c
 18048   0137F0  6EDA               	movwf	fsr2h,c
 18049   0137F2  0E01               	movlw	1
 18050   0137F4  6EDE               	movwf	postinc2,c
 18051   0137F6  0E00               	movlw	0
 18052   0137F8  6EDD               	movwf	postdec2,c
 18053   0137FA                     l4739:
 18054                           
 18055                           ;xf/xf.c: 238:     }
 18056                           ;stkvar	_i @ sp[(-2)+1]
 18057   0137FA  0EFF               	movlw	-1
 18058   0137FC  2AE3               	incf	plusw1,f,c
 18059   0137FE                     
 18060                           ;stkvar	_i @ sp[(-2)+1]
 18061   0137FE  0EFF               	movlw	-1
 18062   013800  CFE3 F02A          	movff	plusw1,btemp
 18063   013804  0E0B               	movlw	11
 18064   013806  642A               	cpfsgt	btemp^0,c
 18065   013808  EF08  F09C         	goto	u242_41
 18066   01380C  EF0A  F09C         	goto	u242_40
 18067   013810                     u242_41:
 18068   013810  EF92  F09B         	goto	l4727
 18069   013814                     u242_40:
 18070   013814                     
 18071                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 18072   013814  52E5               	movf	postdec1,f,c
 18073   013816  52E5               	movf	postdec1,f,c
 18074   013818  0012               	return		;funcret
 18075   01381A                     __end_of_XF_decrementAndQueueTimers:
 18076                           	callstack 0
 18077                           
 18078 ;; *************** function _XF_unscheduleTimer *****************
 18079 ;; Defined at:
 18080 ;;		line 202 in file "xf/xf.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;  id              1  [STACK] unsigned char 
 18083 ;;  inISR           1  [STACK] _Bool 
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;		None
 18086 ;; Return value:  Size  Location     Type
 18087 ;;                  1  [STACK] void 
 18088 ;; Registers used:
 18089 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18099 ;;Total ram usage:        0 bytes
 18100 ;; Hardware stack levels used: 1
 18101 ;; Hardware stack levels required when called: 1
 18102 ;; This function calls:
 18103 ;;		_ENTERCRITICAL
 18104 ;;		_Event_init
 18105 ;;		_LEAVECRITICAL
 18106 ;; This function is called by:
 18107 ;;		_XF_decrementAndQueueTimers
 18108 ;; This function uses a reentrant model
 18109 ;;
 18110                           
 18111                           	psect	text75
 18112   014942                     __ptext75:
 18113                           	callstack 0
 18114   014942                     _XF_unscheduleTimer:
 18115                           	callstack 17
 18116   014942                     
 18117                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 18118                           ;stkvar	_inISR @ sp[(0)+-2]
 18119   014942  0EFE               	movlw	-2
 18120   014944  50E3               	movf	plusw1,w,c
 18121   014946  6EE6               	movwf	postinc1,c
 18122   014948  EC33  F0A6         	call	_ENTERCRITICAL	;wreg free
 18123   01494C                     
 18124                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 18125                           ;stkvar	_id @ sp[(0)+-1]
 18126   01494C  0EFF               	movlw	-1
 18127   01494E  50E3               	movf	plusw1,w,c
 18128   014950  0D08               	mullw	8
 18129   014952  0EC8               	movlw	low _theXF
 18130   014954  24F3               	addwf	243,w,c
 18131   014956  6ED9               	movwf	fsr2l,c
 18132   014958  0E02               	movlw	high _theXF
 18133   01495A  20F4               	addwfc	prodh,w,c
 18134   01495C  6EDA               	movwf	fsr2h,c
 18135   01495E  6ADE               	clrf	postinc2,c
 18136   014960  6ADD               	clrf	postdec2,c
 18137   014962                     
 18138                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 18139                           ;stkvar	_id @ sp[(0)+-1]
 18140   014962  0EFF               	movlw	-1
 18141   014964  50E3               	movf	plusw1,w,c
 18142   014966  0D08               	mullw	8
 18143   014968  0ECA               	movlw	low (_theXF+2)
 18144   01496A  24F3               	addwf	243,w,c
 18145   01496C  6E34               	movwf	(btemp+10)^0,c
 18146   01496E  0E02               	movlw	high (_theXF+2)
 18147   014970  20F4               	addwfc	prodh,w,c
 18148   014972  6E35               	movwf	(btemp+11)^0,c
 18149   014974  C034  FFE6         	movff	btemp+10,postinc1
 18150   014978  C035  FFE6         	movff	btemp+11,postinc1
 18151   01497C  ECF8  F0A4         	call	_Event_init	;wreg free
 18152   014980                     
 18153                           ;xf/xf.c: 207:     theXF.countTmr--;
 18154   014980  C3E1  FFE8         	movff	_theXF+281,wreg
 18155   014984  0FFF               	addlw	-1
 18156   014986  CFE8 F3E1          	movff	wreg,_theXF+281
 18157   01498A                     
 18158                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 18159                           ;stkvar	_inISR @ sp[(0)+-2]
 18160   01498A  0EFE               	movlw	-2
 18161   01498C  50E3               	movf	plusw1,w,c
 18162   01498E  6EE6               	movwf	postinc1,c
 18163   014990  EC27  F0A6         	call	_LEAVECRITICAL	;wreg free
 18164   014994                     
 18165                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 18166   014994  52E5               	movf	postdec1,f,c
 18167   014996  52E5               	movf	postdec1,f,c
 18168   014998  0012               	return		;funcret
 18169   01499A                     __end_of_XF_unscheduleTimer:
 18170                           	callstack 0
 18171                           
 18172                           	psect	rparam
 18173   000001                     ___rparam_used  equ	1
 18174   000000                     ___param_bank   equ	0
 18175   000000                     __Lparam        equ	__Lrparam
 18176   000000                     __Hparam        equ	__Hrparam
 18177                           
 18178                           	psect	temp
 18179   00002A                     btemp:
 18180                           	callstack 0
 18181   00002A                     	ds	32
 18182   00002A                     wtemp0          set	btemp
 18183   00002C                     wtemp1          set	btemp+2
 18184   00002E                     wtemp2          set	btemp+4
 18185   000030                     wtemp3          set	btemp+6
 18186   000032                     wtemp4          set	btemp+8
 18187   000034                     wtemp5          set	btemp+10
 18188   00002B                     wtemp8          set	btemp+1
 18189   00002A                     ttemp0          set	btemp
 18190   00002D                     ttemp1          set	btemp+3
 18191   000030                     ttemp2          set	btemp+6
 18192   000033                     ttemp3          set	btemp+9
 18193   00002B                     ttemp5          set	btemp+1
 18194   00002E                     ttemp6          set	btemp+4
 18195   000032                     ttemp7          set	btemp+8
 18196   00002A                     ltemp0          set	btemp
 18197   00002E                     ltemp1          set	btemp+4
 18198   000032                     ltemp2          set	btemp+8
 18199   00002A                     lltemp0         set	btemp
 18200   000032                     lltemp1         set	btemp+8
 18201   00003A                     lltemp2         set	btemp+16
 18202   000042                     lltemp3         set	btemp+24
 18203                           
 18204                           	psect	config
 18205                           
 18206                           ;Config register CONFIG1L @ 0x1FFF8
 18207                           ;	Watchdog Timer Enable bit
 18208                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 18209                           ;	Stack Overflow/Underflow Reset Enable bit
 18210                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 18211                           ;	Extended Instruction Set Enable bit
 18212                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 18213                           ;	Background Debugger Enable bit
 18214                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 18215   01FFF8                     	org	131064
 18216   01FFF8  A0                 	db	160
 18217                           
 18218                           ;Config register CONFIG1H @ 0x1FFF9
 18219                           ;	Code Protection bit
 18220                           ;	CP0 = OFF, Program memory is not code-protected
 18221   01FFF9                     	org	131065
 18222   01FFF9  F4                 	db	244
 18223                           
 18224                           ;Config register CONFIG2L @ 0x1FFFA
 18225                           ;	Oscillator Selection bits
 18226                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 18227                           ;	Default/Reset System Clock Select bit
 18228                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 18229                           ;	Fail-Safe Clock Monitor Enable
 18230                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 18231                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 18232                           ;	IESO = ON, Two-Speed Start-up enabled
 18233   01FFFA                     	org	131066
 18234   01FFFA  C5                 	db	197
 18235                           
 18236                           ;Config register CONFIG2H @ 0x1FFFB
 18237                           ;	Watchdog Timer Postscaler Select bits
 18238                           ;	WDTPS = 32768, 1:32768
 18239   01FFFB                     	org	131067
 18240   01FFFB  FF                 	db	255
 18241                           
 18242                           ;Config register CONFIG3L @ 0x1FFFC
 18243                           ;	External Address Bus Shift Enable bit
 18244                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 18245                           ;	External Memory Bus
 18246                           ;	MODE = MM, Microcontroller mode, external bus disabled
 18247                           ;	Data Bus Width Select bit
 18248                           ;	BW = 16, 16-Bit Data Width mode
 18249                           ;	External Bus Wait Enable bit
 18250                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 18251   01FFFC                     	org	131068
 18252   01FFFC  F8                 	db	248
 18253                           
 18254                           ;Config register CONFIG3H @ 0x1FFFD
 18255                           ;	ECCP2 MUX bit
 18256                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 18257                           ;	ECCP MUX bit
 18258                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 18259                           ;	Ethernet LED Enable bit
 18260                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 18261   01FFFD                     	org	131069
 18262   01FFFD  F7                 	db	247
 18263                           tosu	equ	0xFFF
 18264                           tosh	equ	0xFFE
 18265                           tosl	equ	0xFFD
 18266                           stkptr	equ	0xFFC
 18267                           pclatu	equ	0xFFB
 18268                           pclath	equ	0xFFA
 18269                           pcl	equ	0xFF9
 18270                           tblptru	equ	0xFF8
 18271                           tblptrh	equ	0xFF7
 18272                           tblptrl	equ	0xFF6
 18273                           tablat	equ	0xFF5
 18274                           prodh	equ	0xFF4
 18275                           prodl	equ	0xFF3
 18276                           indf0	equ	0xFEF
 18277                           postinc0	equ	0xFEE
 18278                           postdec0	equ	0xFED
 18279                           preinc0	equ	0xFEC
 18280                           plusw0	equ	0xFEB
 18281                           fsr0h	equ	0xFEA
 18282                           fsr0l	equ	0xFE9
 18283                           wreg	equ	0xFE8
 18284                           indf1	equ	0xFE7
 18285                           postinc1	equ	0xFE6
 18286                           postdec1	equ	0xFE5
 18287                           preinc1	equ	0xFE4
 18288                           plusw1	equ	0xFE3
 18289                           fsr1h	equ	0xFE2
 18290                           fsr1l	equ	0xFE1
 18291                           bsr	equ	0xFE0
 18292                           indf2	equ	0xFDF
 18293                           postinc2	equ	0xFDE
 18294                           postdec2	equ	0xFDD
 18295                           preinc2	equ	0xFDC
 18296                           plusw2	equ	0xFDB
 18297                           fsr2h	equ	0xFDA
 18298                           fsr2l	equ	0xFD9
 18299                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        3
    BSS         787
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      63
    BANK0           160      0      64
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5588 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5580 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 
		 -> txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 
		 -> txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   30159
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4713
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1397
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     992
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   14401
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 2     0      2    7052
              _handleAccelerationCAN
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        26    24      2    3428
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _handleAccelerationCAN                               29    29      0    3448
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6808
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1392
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1392
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1392
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1392
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     992
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _handleAccelerationCAN
         _CanSend
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      64     40.0%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      63    100.0%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     254      0.0%
DATA                 0      0    1063      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Mar 04 15:38:56 2025

                          handleAccelerationCAN@lastPower 005F  
                                  __end_of_updateCarState 22EE  
                                              _CanReceive 47B8  
                                         _timer0ReloadVal 0022  
                                                     l150 3EC6  
                                                     l222 466A  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3E14  
                                                     l401 3F7E  
                                                     l161 4746  
                                                     l146 3E2C  
                                                     l218 1C0E  
                                                     l154 24F2  
                                                     l322 14A8  
                                                     l171 48D8  
                                                     l251 2D14  
                                                     l412 4876  
                                                     l260 38FE  
                                                     l149 3EC0  
                                                     l317 1174  
                                                     l165 4812  
                                                     l174 49E6  
                                                     l254 34EE  
                                                     l158 42EE  
                                                     l327 44C0  
                                                     l184 3E02  
                                                     l168 4BA6  
                                                     l336 4552  
                                                     l264 0742  
                                                     l257 33B4  
                                                     l193 2B92  
                                                     l346 3274  
                                                     l179 3BA0  
                                                     l453 442A  
                                                     l293 4244  
                                                     l357 0E2A  
                                                     l623 493C  
                                                     l199 3608  
                                                     l482 4392  
                                                     l643 4C2E  
                                                     l635 4BC6  
                                                     l379 46DC  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 26D0  
                                                     l976 4C92  
                                                     l979 4CAA  
                                                     u905 1B50  
                                                     u915 1B7E  
                                                     u925 1BAC  
                                                     u935 1BDA  
                                                     u855 1A4C  
                                                     u865 1A70  
                                                     u875 1A92  
                                                     u885 1AF4  
                                                     u895 1B22  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4880  
                          _DRV_CANFDSPI_ModuleEventEnable 481C  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 4434  
                    _DRV_CANFDSPI_TransmitChannelEventGet 439C  
                                                    l1020 4B4C  
                                                    l1120 403A  
                                                    l1032 4CBA  
                                                    l1200 4CB2  
                                                    l1201 4CB2  
                                                    l1116 4CA2  
                                                    l1206 4CAC  
                                                    l1215 2FD4  
                                                    l1207 4CAC  
                                                    l1231 39E0  
                                                    l1223 2E94  
                                                    l1064 4AB2  
                                                    l1216 2FEC  
                                                    l1250 4C7A  
                                                    l1162 4A70  
                                                    l1234 39E8  
                                                    l1227 3D38  
                                                    l1092 4C10  
                                                    l1237 4994  
                                                    l1085 4B7A  
                                                    l3101 1BDA  
                                                    l1261 45E2  
                                                    l1246 3814  
                                                    l1254 4C62  
                                                    l1174 4AE2  
                                                    l1095 4CC0  
                                                    l1159 4A38  
                                                    l1432 2A06  
                                                    l1168 4C46  
                                                    l1089 4B1E  
                                                    l1177 4BF0  
                                                    l1257 3C6C  
                                                    l1460 4196  
                                                    l1452 3AC8  
                                                    l4101 48A0  
                                                    l4031 3E0E  
                                                    l4103 48C2  
                                                    l3151 3822  
                                                    l4111 351E  
                                                    l1528 2806  
                                                    l1544 22E4  
                                                    l4041 3E68  
                                                    l4033 3E16  
                                                    l3081 1A28  
                                                    l4105 48D2  
                                                    l5001 4910  
                                                    l3153 385E  
                                                    l1801 3132  
                                                    l4201 25F2  
                                                    l4121 3592  
                                                    l4113 351E  
                                                    l1529 287C  
                                                    l1554 22E4  
                                                    l4043 3E86  
                                                    l4035 3E1C  
                                                    l3091 1AF4  
                                                    l3083 1A4C  
                                                    l4051 499C  
                                                    l3155 387C  
                                                    l4203 2618  
                                                    l4211 26B8  
                                                    l4131 14BA  
                                                    l4123 35B0  
                                                    l4115 3534  
                                                    l1468 40E8  
                                                    l4037 3E3A  
                                                    l4045 3EA6  
                                                    l3093 1B22  
                                                    l3085 1A70  
                                                    l3077 19C2  
                                                    l5021 4828  
                                                    l5013 4820  
                                                    l4061 49BE  
                                                    l4053 499C  
                                                    l5005 4926  
                                                    l3157 38A8  
                                                    l5101 1196  
                                                    l3421 4C94  
                                                    l4221 4C78  
                                                    l4205 263E  
                                                    l4141 151A  
                                                    l4133 14E6  
                                                    l4125 35DE  
                                                    l4117 353A  
                                                    l4109 3500  
                                                    l4301 05EC  
                                                    l4047 3EC2  
                                                    l4039 3E4A  
                                                    l3095 1B50  
                                                    l3087 1A92  
                                                    l3079 19FE  
                                                    l5023 4860  
                                                    l5015 4820  
                                                    l4063 49E0  
                                                    l4055 499C  
                                                    l5031 45F4  
                                                    l5007 492A  
                                                    l3191 3450  
                                                    l3159 38D2  
                                                    l5103 11A8  
                                                    l5111 12D8  
                                                    l3431 4B36  
                                                    l3423 4C9C  
                                                    l4223 4C4E  
                                                    l4151 15B6  
                                                    l4143 1534  
                                                    l4135 14E6  
                                                    l4071 41C2  
                                                    l4127 3602  
                                                    l4119 3552  
                                                    l4311 064E  
                                                    l4303 05EC  
                                                    l4231 002A  
                                                    l1496 2014  
                                                    l3097 1B7E  
                                                    l3089 1AC6  
                                                    l5017 4820  
                                                    l4057 49B2  
                                                    l5041 4658  
                                                    l5033 461A  
                                                    l3193 3480  
                                                    l3185 33C6  
                                                    l5121 13EA  
                                                    l5113 1388  
                                                    l5105 11BE  
                                                    l3441 4B46  
                                                    l3433 4B3A  
                                                    l3425 4C9E  
                                                    l4225 4C60  
                                                    l4209 2664  
                                                    l4145 1552  
                                                    l4137 14FC  
                                                    l4081 4224  
                                                    l4073 41D2  
                                                    l4321 0704  
                                                    l4313 067C  
                                                    l4305 0604  
                                                    l4241 00A4  
                                                    l4233 005A  
                                                    l1497 20A6  
                                                    l3099 1BAC  
                                                    l5019 4820  
                                                    l4091 4882  
                                                    l4059 49B8  
                                                    l3195 34B4  
                                                    l3187 3402  
                                                    l5051 44F0  
                                                    l5115 13A6  
                                                    l5123 1462  
                                                    l5107 11F8  
                                                    l5131 444C  
                                                    l3419 4CB8  
                                                    l3443 4CA4  
                                                    l3435 4B3C  
                                                    l3427 4CA0  
                                                    l4219 4C66  
                                                    l4411 3016  
                                                    l4171 1674  
                                                    l4155 15C0  
                                                    l4147 1580  
                                                    l4139 1502  
                                                    l4083 4236  
                                                    l4075 41E0  
                                                    l4067 41A8  
                                                    l4315 0680  
                                                    l4307 0634  
                                                    l4251 0136  
                                                    l4243 00C0  
                                                    l4235 006C  
                                                    l4227 0008  
                                                    l5211 3C16  
                                                    l5203 3BB2  
                                                    l4093 4882  
                                                    l5037 4630  
                                                    l5029 45F0  
                                                    l3189 3426  
                                                    l5053 4518  
                                                    l5125 1488  
                                                    l5117 13B2  
                                                    l5109 123A  
                                                    l5133 4460  
                                                    l3445 4CA6  
                                                    l3437 4B3E  
                                                    l3429 4B20  
                                                    l4421 305C  
                                                    l4413 301C  
                                                    l4405 2FF6  
                                                    l4341 43A4  
                                                    l4173 1692  
                                                    l4165 15F8  
                                                    l4157 15D4  
                                                    l4149 15A4  
                                                    l4077 41F2  
                                                    l4069 41A8  
                                                    l4333 073C  
                                                    l4325 070C  
                                                    l4309 0646  
                                                    l4317 06A2  
                                                    l4261 01C0  
                                                    l4229 0008  
                                                    l5221 1E86  
                                                    l5301 276A  
                                                    l4501 2D48  
                                                    l5213 3C38  
                                                    l5205 3BBA  
                                                    l4095 4882  
                                                    l5039 4640  
                                                    l5047 44D2  
                                                    l5119 13CE  
                                                    l5071 0E74  
                                                    l5135 4470  
                                                    l3439 4B40  
                                                    l4431 30E0  
                                                    l4423 307A  
                                                    l4415 302C  
                                                    l4407 2FFA  
                                                    l4343 43B4  
                                                    l4191 252E  
                                                    l4183 2504  
                                                    l4175 16E0  
                                                    l4167 1638  
                                                    l4159 15E0  
                                                    l4087 423E  
                                                    l4079 4200  
                                                    l4327 0722  
                                                    l4319 06F2  
                                                    l4263 01E6  
                                                    l4271 02EA  
                                                    l4255 013E  
                                                    l4247 00C8  
                                                    l4239 0074  
                                                    l5231 1ED6  
                                                    l5223 1E8E  
                                                    l5303 2772  
                                                    l5143 47BA  
                                                    l4511 2DFA  
                                                    l4503 2D62  
                                                    l5207 3BD2  
                                                    l4097 4898  
                                                    l5057 452E  
                                                    l5049 44D2  
                                                    l5081 1054  
                                                    l5073 0E8A  
                                                    l5065 0E3C  
                                                    l5137 448E  
                                                    l5129 443A  
                                                    l5401 46F0  
                                                    l5161 4A84  
                                                    l4433 30EA  
                                                    l4425 307E  
                                                    l4417 3038  
                                                    l4409 300A  
                                                    l4353 4410  
                                                    l4345 43CE  
                                                    l4337 43A4  
                                                    l4193 255A  
                                                    l4185 2514  
                                                    l4169 1656  
                                                    l4177 16FE  
                                                    l4329 0734  
                                                    l4281 03FC  
                                                    l4273 039A  
                                                    l4265 01FC  
                                                    l4257 0172  
                                                    l4249 0102  
                                                    l5233 1EF4  
                                                    l5225 1EAC  
                                                    l5217 1E64  
                                                    l5321 2822  
                                                    l5313 27B6  
                                                    l4361 49FE  
                                                    l4601 0936  
                                                    l5153 480E  
                                                    l5145 47D6  
                                                    l4521 2E52  
                                                    l4513 2DFE  
                                                    l4505 2D82  
                                                    l5209 3BF8  
                                                    l4531 4942  
                                                    l5171 4AEC  
                                                    l4099 489E  
                                                    l5059 453E  
                                                    l5083 1072  
                                                    l5091 112E  
                                                    l5075 0EC4  
                                                    l5067 0E3C  
                                                    l5139 44AC  
                                                    l5403 4704  
                                                    l2923 4BF6  
                                                    l5163 4A9A  
                                                    l5411 4C8E  
                                                    l4427 308E  
                                                    l4419 3052  
                                                    l4435 3108  
                                                    l4355 4424  
                                                    l4347 43F6  
                                                    l4339 43A4  
                                                    l4195 2580  
                                                    l4187 2516  
                                                    l4291 0558  
                                                    l4275 03B8  
                                                    l4283 0448  
                                                    l4267 0236  
                                                    l4259 01A2  
                                                    l4443 4250  
                                                    l5251 1F92  
                                                    l5243 1F34  
                                                    l5235 1EFC  
                                                    l5227 1EB4  
                                                    l5219 1E68  
                                                    l5323 2836  
                                                    l5307 2794  
                                                    l5315 27F0  
                                                    l4363 4A1A  
                                                    l4611 0A70  
                                                    l5147 47E6  
                                                    l4371 390A  
                                                    l4523 2E7C  
                                                    l4515 2E08  
                                                    l4507 2DC2  
                                                    l4533 494C  
                                                    l5173 4AF0  
                                                    l5421 4B76  
                                                    l5413 4B4E  
                                                    l5341 22FE  
                                                    l5093 1154  
                                                    l5085 107E  
                                                    l5077 0F06  
                                                    l5069 0E4C  
                                                    l5405 4734  
                                                    l5165 4A9C  
                                                    l5157 4A7A  
                                                    l4437 311A  
                                                    l4429 30BC  
                                                    l5181 3C94  
                                                    l4349 4408  
                                                    l4197 25A6  
                                                    l4189 2518  
                                                    l4293 0560  
                                                    l4285 0470  
                                                    l4277 03C4  
                                                    l4269 0278  
                                                    l4445 4278  
                                                    l5253 1F9A  
                                                    l5245 1F4E  
                                                    l5229 1ED2  
                                                    l5261 1FFE  
                                                    l4541 4300  
                                                    l4461 2A52  
                                                    l4453 2A18  
                                                    l4621 0C82  
                                                    l4613 0BF0  
                                                    l4605 094C  
                                                    l5149 4806  
                                                    l4365 4AB4  
                                                    l4381 398A  
                                                    l4525 2E86  
                                                    l4517 2E22  
                                                    l4509 2DCC  
                                                    l4535 4962  
                                                    l5175 4B04  
                                                    l5415 4B58  
                                                    l4711 3DD8  
                                                    l5351 234C  
                                                    l5343 2308  
                                                    l5087 109A  
                                                    l5079 0FA4  
                                                    l5167 4A9E  
                                                    l5159 4A7C  
                                                    l5407 4C7E  
                                                    l4439 3126  
                                                    l5191 3CDC  
                                                    l5183 3C9E  
                                                    l4199 25CC  
                                                    l4295 05AA  
                                                    l4287 04BC  
                                                    l4279 03E0  
                                                    l4447 4294  
                                                    l5271 2040  
                                                    l5247 1F6C  
                                                    l5239 1F1E  
                                                    l5319 280E  
                                                    l5327 2842  
                                                    l4359 49F0  
                                                    l5431 2EE0  
                                                    l5423 2EA2  
                                                    l4551 4326  
                                                    l4543 4300  
                                                    l4471 2AF4  
                                                    l4463 2A6A  
                                                    l4455 2A36  
                                                    l4631 0D14  
                                                    l4623 0C9E  
                                                    l4615 0C1A  
                                                    l4607 0974  
                                                    l4367 4BD0  
                                                    l4383 3994  
                                                    l4519 2E26  
                                                    l4527 2E90  
                                                    l4537 4980  
                                                    l4721 3720  
                                                    l5417 4B5C  
                                                    l4713 3DFC  
                                                    l4705 3D7E  
                                                    l5361 23BA  
                                                    l5353 2364  
                                                    l5345 2320  
                                                    l5337 22F6  
                                                    l5097 1186  
                                                    l5089 10B6  
                                                    l5169 4AAE  
                                                    l5409 4C82  
                                                    l5193 3D00  
                                                    l5185 3CB2  
                                                    l5177 3C7E  
                                                    l4297 05AE  
                                                    l4289 050A  
                                                    l4449 42A4  
                                                    l4801 414A  
                                                    l5265 201C  
                                                    l5249 1F74  
                                                    l5441 2F2C  
                                                    l5433 2EFE  
                                                    l4553 4340  
                                                    l4545 4300  
                                                    l4473 2B00  
                                                    l4465 2A84  
                                                    l4457 2A36  
                                                    l4641 0DB0  
                                                    l4633 0D5E  
                                                    l4625 0CBA  
                                                    l4617 0C50  
                                                    l4609 099A  
                                                    l4385 39AE  
                                                    l4377 3918  
                                                    l5521 368A  
                                                    l5513 361A  
                                                    l4539 498A  
                                                    l4731 3760  
                                                    l5419 4B72  
                                                    l4707 3DBE  
                                                    l5371 2410  
                                                    l5363 23C0  
                                                    l5355 237A  
                                                    l5347 2330  
                                                    l5339 22FA  
                                                    l5099 1186  
                                                    l5195 3D2A  
                                                    l5187 3CBC  
                                                    l5179 3C82  
                                                    l4299 05E4  
                                                    l4811 406E  
                                                    l4803 415E  
                                                    l5267 202C  
                                                    l5275 205C  
                                                    l5259 1FBC  
                                                    l5291 2704  
                                                    l5451 4588  
                                                    l5443 2F5A  
                                                    l5435 2F24  
                                                    l4555 4368  
                                                    l4475 2B40  
                                                    l4467 2AA2  
                                                    l4459 2A4C  
                                                    l4491 46A4  
                                                    l4483 467A  
                                                    l4643 0DFA  
                                                    l4635 0D62  
                                                    l4627 0CD6  
                                                    l4619 0C6C  
                                                    l4563 0754  
                                                    l4387 39B2  
                                                    l4379 393A  
                                                    l4395 39C6  
                                                    l5531 36DC  
                                                    l5523 3698  
                                                    l5515 363C  
                                                    l4741 37FE  
                                                    l4733 3784  
                                                    l4709 3DC2  
                                                    l4661 4038  
                                                    l4653 3F88  
                                                    l4821 4B7C  
                                                    l5381 2472  
                                                    l5373 2424  
                                                    l5365 23D0  
                                                    l5357 238A  
                                                    l5349 233E  
                                                    l4813 4074  
                                                    l4805 416A  
                                                    l5269 203C  
                                                    l5293 2722  
                                                    l5285 26DA  
                                                    l5453 45A8  
                                                    l5445 2F90  
                                                    l5429 2EAA  
                                                    l4549 4316  
                                                    l4477 2B5E  
                                                    l4469 2AD0  
                                                    l4493 46B2  
                                                    l4485 467A  
                                                    l4645 0DFE  
                                                    l4629 0D0C  
                                                    l4637 0D88  
                                                    l4581 0840  
                                                    l4573 07BC  
                                                    l4565 075C  
                                                    l4717 4A3E  
                                                    l4397 39CA  
                                                    l4389 39BC  
                                                    l5461 20FA  
                                                    l5541 3710  
                                                    l5533 36EC  
                                                    l5525 369C  
                                                    l5517 364A  
                                                    l4735 37CE  
                                                    l4727 3724  
                                                    l4671 3B04  
                                                    l4655 3F96  
                                                    l4831 4B8A  
                                                    l4823 4B7C  
                                                    l4911 3F60  
                                                    l4903 3ED8  
                                                    l5391 24C4  
                                                    l5383 2482  
                                                    l5375 2434  
                                                    l5367 23E0  
                                                    l5359 23A2  
                                                    l4815 409C  
                                                    l4807 4046  
                                                    l4751 28F2  
                                                    l4743 288A  
                                                    l5295 272A  
                                                    l5287 26DE  
                                                    l5447 2FAE  
                                                    l4559 437E  
                                                    l4479 2B8C  
                                                    l4495 46D6  
                                                    l4487 467A  
                                                    l4639 0DA8  
                                                    l4647 0E20  
                                                    l4591 08AC  
                                                    l4583 0858  
                                                    l4575 07EC  
                                                    l4567 0776  
                                                    l4719 4C34  
                                                    l5471 21A0  
                                                    l5463 210C  
                                                    l5455 20B4  
                                                    l5535 36EE  
                                                    l5527 36A8  
                                                    l5519 367A  
                                                    l4737 37E0  
                                                    l4729 3746  
                                                    l4681 3B5C  
                                                    l4673 3B0A  
                                                    l4665 3ADA  
                                                    l4841 1C92  
                                                    l4657 3FDA  
                                                    l4825 4B7C  
                                                    l4905 3ED8  
                                                    l4921 32C2  
                                                    l5393 24C8  
                                                    l5385 2488  
                                                    l5377 2446  
                                                    l5369 23F8  
                                                    l4817 40B0  
                                                    l4809 405A  
                                                    l4761 296E  
                                                    l4753 290C  
                                                    l4745 2890  
                                                    l5289 26FC  
                                                    l5449 4564  
                                                    l4489 468A  
                                                    l4593 08C4  
                                                    l4585 086E  
                                                    l4569 07A6  
                                                    l5481 2212  
                                                    l5473 21C0  
                                                    l5465 2148  
                                                    l5537 36F0  
                                                    l5529 36D8  
                                                    l4739 37FA  
                                                    l4683 3B60  
                                                    l4667 3AEE  
                                                    l4851 1D44  
                                                    l4843 1CAC  
                                                    l4835 1C20  
                                                    l4691 3D4A  
                                                    l4659 4002  
                                                    l4827 4B80  
                                                    l4907 3F14  
                                                    l4931 3396  
                                                    l4923 32D2  
                                                    l4915 3286  
                                                    l5395 24DA  
                                                    l5387 24A4  
                                                    l5379 2462  
                                                    l4819 40BC  
                                                    l4771 29CA  
                                                    l4763 2974  
                                                    l4747 28A6  
                                                    l4755 2916  
                                                    l5299 274C  
                                                    l4595 08E4  
                                                    l4587 0880  
                                                    l4579 080C  
                                                    l4499 2D24  
                                                    l5483 2232  
                                                    l5475 21D6  
                                                    l5467 2184  
                                                    l5459 20F4  
                                                    l5539 370C  
                                                    l4685 3B76  
                                                    l4669 3AEE  
                                                    l4853 1D76  
                                                    l4845 1CDE  
                                                    l4861 1E3C  
                                                    l4837 1C20  
                                                    l4693 3D5E  
                                                    l4829 4B82  
                                                    l4909 3F3C  
                                                    l4941 2BA4  
                                                    l4933 3396  
                                                    l4925 3304  
                                                    l4917 3286  
                                                    l5397 24EA  
                                                    l5389 24B0  
                                                    l4773 29DA  
                                                    l4765 2988  
                                                    l4757 293E  
                                                    l4749 28DA  
                                                    l4781 3A36  
                                                    l4597 08FA  
                                                    l4589 089C  
                                                    l5485 2248  
                                                    l5477 21F6  
                                                    l5469 218A  
                                                    l4687 3B9A  
                                                    l4679 3B0E  
                                                    l4847 1CF8  
                                                    l4839 1C60  
                                                    l4871 1742  
                                                    l4695 3D5E  
                                                    l4951 2C8E  
                                                    l4943 2BE0  
                                                    l4927 333A  
                                                    l4919 3286  
                                                    l5399 46E6  
                                                    l4767 29B0  
                                                    l4759 2956  
                                                    l4791 3A9C  
                                                    l4783 3A42  
                                                    l4775 39FA  
                                                    l5751 27CA  
                                                    l4599 0904  
                                                    l5743 229C  
                                                    l5479 21FC  
                                                    l5761 1DA6  
                                                    l4849 1D2A  
                                                    l4881 1812  
                                                    l4873 177E  
                                                    l4697 3D74  
                                                    l4961 3144  
                                                    l4953 2CB6  
                                                    l4945 2BF0  
                                                    l4937 2BA4  
                                                    l4929 3370  
                                                    l4793 40FA  
                                                    l4769 29C4  
                                                    l4785 3A6A  
                                                    l4777 3A0E  
                                                    l5753 2856  
                                                    l5745 22D6  
                                                    l5489 2268  
                                                    l4859 1D90  
                                                    l4891 1900  
                                                    l4883 1848  
                                                    l4875 17A8  
                                                    l4699 3D7A  
                                                    l4971 3196  
                                                    l4963 3144  
                                                    l4955 2CDA  
                                                    l4947 2C24  
                                                    l4939 2BA4  
                                                    l4795 410E  
                                                    l4787 3A7E  
                                                    l4779 3A22  
                                                    l5755 1FD0  
                                                    l5747 22B2  
                                                    l4893 192E  
                                                    l4885 1876  
                                                    l4877 17CC  
                                                    l4869 1742  
                                                    l4981 3254  
                                                    l4973 31A6  
                                                    l4965 3144  
                                                    l4957 2CF4  
                                                    l4949 2C5E  
                                                    l4797 4122  
                                                    l4789 3A8A  
                                                    l5757 2070  
                                                    l5749 22C8  
                                                    l4895 195C  
                                                    l4887 18A4  
                                                    l4879 17F0  
                                                    l4975 31FE  
                                                    l4991 4BA8  
                                                    l5759 267A  
                                                    l4799 4128  
                                                    l4897 1992  
                                                    l4889 18D2  
                                                    l4977 322A  
                                                    l4969 315A  
                                                    l4985 4C18  
                                                    l4993 4BA8  
                                                    l4979 323A  
                                                    l4987 4C18  
                                                    l4997 48E6  
                                                    l4999 48EA  
                                     __end_of_XF_popEvent 3D42  
                                                    STR_1 FFED  
                                                    u2000 393A  
                                                    u2001 3936  
                                                    u2011 3982  
                                                    u2100 311A  
                                                    u2020 39AE  
                                                    u1045 3426  
                                                    u2101 3116  
                                                    u2021 39AA  
                                                    u2110 42A4  
                                                    u2030 39E0  
                                                    u2111 42A0  
                                                    u2031 39DC  
                                                    u2040 300A  
                                                    u3000 1F1A  
                                                    u2200 437A  
                                                    u2120 2AD0  
                                                    u2041 3006  
                                                    u3001 1F16  
                                                    u2201 4376  
                                                    u2121 2ACC  
                                                    u2050 302C  
                                                    u3010 1F30  
                                                    u2130 2B8C  
                                                    u2210 07B8  
                                                    u2051 3028  
                                                    u3011 1F2C  
                                                    u2131 2B88  
                                                    u2211 07B4  
                                                    u2060 3052  
                                                    u3020 1F4E  
                                                    u3100 276A  
                                                    u2300 0C6C  
                                                    u2220 0808  
                                                    u2140 2D62  
                                                    u2061 304E  
                                                    u3021 1F4A  
                                                    u3101 2766  
                                                    u2301 0C68  
                                                    u2221 0804  
                                                    u2141 2D5E  
                                                    _LATA 0F89  
                                                    u2070 308E  
                                                    u3030 1F6C  
                                                    u3110 2790  
                                                    u2310 0D84  
                                                    u2230 089C  
                                                    _LATB 0F8A  
                                                    u2071 308A  
                                                    u3031 1F68  
                                                    u3111 278C  
                                                    u2311 0D80  
                                                    u2231 0898  
                                                    u2151 2D96  
                                                    _LATC 0F8B  
                                                    u2080 30BC  
                                                    u3040 1F92  
                                                    u3120 27B2  
                                                    u2320 0E20  
                                                    u2240 08C4  
                                                    u2160 2DFA  
                                                    _LATD 0F8C  
                                                    u2081 30B8  
                                                    u3041 1F8E  
                                                    u3121 27AE  
                                                    u2321 0E1C  
                                                    u2241 08C0  
                                                    u2161 2DF6  
                                                    _LATE 0F8D  
                                                    u2330 3F96  
                                                    u2090 3108  
                                                    u3050 1FB8  
                                                    u3130 2802  
                                                    u2250 08FA  
                                                    u2170 2E22  
                                                    u3210 20F0  
                                                    _LATF 0F8E  
                                                    u2331 3F92  
                                                    u2091 3104  
                                                    u3051 1FB4  
                                                    u3131 27FE  
                                                    u2251 08F6  
                                                    u2171 2E1E  
                                                    u3211 20EC  
                                                    _LATG 0F8F  
                                                    u1700 3E3A  
                                                    u2340 3B52  
                                                    u3140 24DA  
                                                    u3060 2010  
                                                    u2260 0948  
                                                    u3220 210C  
                                                    _LATH 0F90  
                                                    u1701 3E36  
                                                    u3141 24D6  
                                                    u3061 200C  
                                                    u2261 0944  
                                                    u2181 2E74  
                                                    u3221 2108  
                                                    u1710 3EC0  
                                                    u2350 3B76  
                                                    u2510 4122  
                                                    u2430 28A6  
                                                    u3070 26FC  
                                                    u2190 4312  
                                                    u2270 099A  
                                                    u3230 21A0  
                                                    _LATJ 0F91  
                                                    u1711 3EBC  
                                                    u2351 3B72  
                                                    u2511 411E  
                                                    u2431 28A2  
                                                    u3071 26F8  
                                                    u2191 430E  
                                                    u2271 0996  
                                                    u3231 219C  
                                                    u1800 4C78  
                                                    u1720 41F2  
                                                    u2440 28DA  
                                                    u3080 2722  
                                                    u3208 45CE  
                                                    u3160 2F24  
                                                    u2280 0B66  
                                                    u3240 21D6  
                                                    u2345 3B48  
                                                    u1801 4C74  
                                                    u1721 41EE  
                                                    u2441 28D6  
                                                    u3081 271E  
                                                    u3209 45E2  
                                                    u3161 2F20  
                                                    u3241 21D2  
                                                    u2370 3DD8  
                                                    u1810 4C60  
                                                    u1730 4236  
                                                    u2530 406E  
                                                    u2450 293E  
                                                    u3090 2748  
                                                    u3170 2FD4  
                                                    u3250 2212  
                                                    u2371 3DD4  
                                                    u1811 4C5C  
                                                    u1731 4232  
                                                    u2531 406A  
                                                    u2451 293A  
                                                    u3091 2744  
                                                    u3171 2FD0  
                                                    u3251 220E  
                                                    u2364 3DB4  
                                                    u2700 0E74  
                                                    u1740 35DE  
                                                    u1820 006C  
                                                    u3260 2248  
                                                    u2605 1900  
                                                    u2365 3DAE  
                                                    u2701 0E70  
                                                    u1741 35DA  
                                                    u1821 0068  
                                                    u2285 0B5C  
                                                    u3261 2244  
                                                    u2710 0EFC  
                                                    u1750 1580  
                                                    u1830 00C0  
                                                    u3190 45A8  
                                                    u2615 192E  
                                                    u1751 157C  
                                                    u1831 00BC  
                                                    u3191 45A4  
                                                    u2295 0BAC  
                                                    u2800 1230  
                                                    u1760 15B6  
                                                    u1920 0500  
                                                    u1840 0136  
                                                    u2480 3A22  
                                                    u2625 195C  
                                                    u2545 17CC  
                                                    u1761 15B2  
                                                    u1905 035A  
                                                    u1841 0132  
                                                    u2481 3A1E  
                                                    u2650 3156  
                                                    u1770 1692  
                                                    u1930 054E  
                                                    u1850 01E6  
                                                    u2490 3A36  
                                                    u2555 17F0  
                                                    u2651 3152  
                                                    u2635 3F60  
                                                    u2715 0EF2  
                                                    u1771 168E  
                                                    u1915 0438  
                                                    u1851 01E2  
                                                    u2491 3A32  
                                                    u2740 0F92  
                                                    u1780 172C  
                                                    u1940 05E4  
                                                    u1860 026E  
                                                    u2565 1812  
                                                    u2645 2CDA  
                                                    u2805 1226  
                                                    u2725 0F32  
                                                    u1781 1728  
                                                    u1941 05E0  
                                                    u1925 04F6  
                                                    u2670 4922  
                                                    u2830 12C6  
                                                    u2750 0FD0  
                                                    u1790 252E  
                                                    u1950 0604  
                                                    u2575 1876  
                                                    u2671 491E  
                                                    u2815 1266  
                                                    u2735 0F5C  
                                                    u1791 252A  
                                                    u1951 0600  
                                                    u1935 0544  
                                                    u2680 462C  
                                                    u2840 1304  
                                                    u2920 3CB2  
                                                    u1960 06A2  
                                                    u1880 02DA  
                                                    u2585 18A4  
                                                    u2681 4628  
                                                    u2665 31EE  
                                                    u2825 1290  
                                                    u2745 0F88  
                                                    u2921 3CAE  
                                                    u1961 069E  
                                                    u1865 0264  
                                                    u3297 204A  
                                                    u2690 452A  
                                                    u1970 0704  
                                                    u1890 0316  
                                                    u2595 18D2  
                                                    u2691 4526  
                                                    u2835 12BC  
                                                    u2755 0FC6  
                                                    u1971 0700  
                                                    u1875 02A4  
                                                    u1980 0734  
                                                    u2845 12FA  
                                                    u2765 1014  
                                                    u1981 0730  
                                                    u1885 02D0  
                                                    u2790 11A8  
                                                    u1990 4408  
                                                    u2855 1348  
                                                    u2791 11A4  
                                                    u2775 10F2  
                                                    u1991 4404  
                                                    u1895 030C  
                                                    u2951 3C5E  
                                                    u2880 444C  
                                                    u2960 1E86  
                                                    u2865 1426  
                                                    u2785 111C  
                                                    u2881 4448  
                                                    u2961 1E82  
                                                    u2970 1EAC  
                                                    u2890 47E6  
                                                    u2875 1450  
                                                    u2971 1EA8  
                                                    u2891 47E2  
                                                    u2980 1ED2  
                                                    u2981 1ECE  
                                                    u2990 1EF4  
                                                    u2991 1EF0  
                       __end_of_DRV_CANFDSPI_TimeStampSet 4BD0  
                                    _motorControl_Process 1E64  
                                                    _main 3612  
                                        _XF_scheduleTimer 3908  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 002A  
                                            _CanSetFilter 46E6  
                                         __end_of_CanInit 24FC  
                                         __end_of_CanSend 42F8  
                                   _lightContol_BackLight 403E  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2FF2  
                                         __end_of_XF_post 3C76  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 33BE  
                     _DRV_CANFDSPI_TransmitQueueConfigure 327E  
                                 __end_of_TMR0_Initialize 4AB4  
                     __end_of_DRV_CANFDSPI_WriteByteArray 3612  
                             _DRV_CANFDSPI_WriteByteArray 34F8  
                           __end_of_OSCILLATOR_Initialize 4CAC  
                                         __end_of___awmod 313C  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 34F8  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 33BE  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 4B7C  
                                                   _dummy 001C  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2E9E  
                               motorControl_Process@state 005E  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 002A  
                                                   ltemp1 002E  
                                                   ltemp2 0032  
                            lightControl_Process@oldState 0024  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 002A  
                                                   ttemp1 002D  
                                                   ttemp2 0030  
                                                   ttemp3 0033  
                                                   ttemp5 002B  
                                                   ttemp6 002E  
                                                   ttemp7 0032  
                                                   status 0FD8  
                                                   wtemp0 002A  
                                                   wtemp1 002C  
                                                   wtemp2 002E  
                                                   wtemp3 0030  
                                                   wtemp4 0032  
                                                   wtemp5 0034  
                                                   wtemp8 002B  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 44CA  
                           _DRV_CANFDSPI_FilterToFifoLink 4434  
                               _DRV_CANFDSPI_TefConfigure 3ED0  
                                         __initialization 4750  
                                              _Event_init 49F0  
                                            __end_of_main 371C  
                             ?_INTERRUPT_InterruptManager 004A  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2B9C  
                              _DRV_CANFDSPI_ReadByteArray 2A10  
                                     __end_of_Event_setPE 4A7A  
                                     __end_of_Event_setId 4C4E  
                                           __activetblptr 0003  
                                          _Event_getDelay 4BD0  
                                             _XF_popEvent 3C76  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  i2l5511 0068  
                                                  i2l5507 004C  
                                                  u240_41 37B0  
                                                  i2l5509 005A  
                                                  u241_40 37CE  
                                                  u241_41 37CA  
                                                  u242_40 3814  
                                                  u242_41 3810  
                                                  u315_40 4B72  
                                                  u315_41 4B6E  
                                                  u238_40 3746  
                                                  u238_41 3742  
                                                  u239_40 3784  
                                                  u239_41 3780  
                                                  u290_40 4B04  
                                                  u290_41 4B00  
                                                  u291_48 4B0A  
                                                  u291_49 4B1E  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 4AB4  
                                          _XF_noMoreEvent 4CB2  
                                          _XF_noMoreTimer 4CAC  
                          __end_of_DRV_CANFDSPI_WriteByte 49F0  
                          __end_of_DRV_CANFDSPI_WriteWord 3BAA  
                                       __end_of_SPI2_Open 403E  
                                          _XF_executeOnce 455C  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 4776  
                                                  clear_1 4788  
                                                  clear_2 4794  
                                                  clear_3 47A0  
                                                  clear_4 47AC  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 4BF6  
                                            __pdataCOMRAM 005D  
                                                  lltemp0 002A  
                                                  lltemp1 0032  
                                                  lltemp2 003A  
                                                  lltemp3 0042  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3E0C  
                              _DRV_CANFDSPI_WriteHalfWord 3D42  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 4B20  
                                  __end_of_Event_setDelay 4AEC  
                                  __end_of_XF_noMoreEvent 4CB8  
                                  __end_of_XF_noMoreTimer 4CB2  
                                       _SYSTEM_Initialize 4C7E  
                         lightContol_FrontLight@lastLight 0027  
                                              __accesstop 0060  
                                 __end_of__initialization 47B2  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 45EC  
                                  _lightContol_FrontLight 40F2  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 004A  
                                              ___inthi_sp 0931  
                                             _Event_setPE 4A3E  
                                             _Event_setId 4C34  
                                __end_of_XF_scheduleTimer 39F2  
                                   TMR0_ISR@CountCallBack 0020  
                           __end_of_handleAccelerationCAN 2A10  
                                     __end_of_SpiTransfer 3ED0  
                                   __end_of_LEAVECRITICAL 4C66  
                               __end_of_SYSTEM_Initialize 4C94  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 005A  
                        __end_of_TMR0_SetInterruptHandler 4C18  
                               _DRV_CANFDSPI_TimeStampSet 4BA8  
                                            _XF_pushEvent 2D1E  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 4C7E  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 22EE  
                                                 _CanSend 424E  
                                                 _XF_init 2E9E  
                                                 _XF_post 3BAA  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 26DA  
                             _DRV_CANFDSPI_DlcToDataBytes 24FC  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 327E  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 313C  
                                                 ___awmod 2FF2  
                                                 uf318999 457C  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 439C  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 42F8  
                                                 __pcinit 4750  
                                                 __ramtop 1000  
                                                 __ptext0 3612  
                                                 __ptext1 20AC  
                                                 __ptext2 3BAA  
                                                 __ptext3 2D1E  
                                                 __ptext4 3908  
                                                 __ptext5 4CAC  
                                                 __ptext6 4CB2  
                                                 __ptext7 4AB4  
                                                 __ptext8 4BD0  
                                                 __ptext9 4A3E  
                                             _SpiTransfer 3E0C  
                                               _T0CONbits 0FD5  
                                                 us250999 4104  
                                                 us252999 4050  
                                                 us246999 297E  
                                                 us247999 3A04  
                                   _OSCILLATOR_Initialize 4CA4  
                                                 us293999 3CCE  
                                                 us294999 3CF6  
                              handleAccelerationCAN@F6656 0090  
                             lightContol_FrontLight@F6682 0070  
                                    end_of_initialization 47B2  
                              __end_of_DRV_CANFDSPI_Reset 4BA8  
                                      __end_of_CanReceive 481C  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3908  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 381A  
                                               _SPI2_Open 3F88  
                                _TMR0_SetInterruptHandler 4BF6  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 4CBC  
                            __end_of_lightControl_Process 2882  
                                           __pidataCOMRAM 4CBC  
                                         _SPI2_Initialize 4C94  
                                      _spi2_configuration FFE9  
                                     start_initialization 4750  
                           __end_of_DRV_CANFDSPI_ReadByte 48E2  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 4A3E  
                          __end_of_lightContol_FrontLight 41A0  
                              __end_of_XF_unscheduleTimer 499A  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0001  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2D1E  
                   _DRV_CANFDSPI_TransmitChannelConfigure 2B9C  
                                   _handleAccelerationCAN 2882  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 3AD2  
                               lightControl_Process@state 0025  
                                   _TMR0_InterruptHandler 005A  
                                  _PIN_MANAGER_Initialize 4B20  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 4CA4  
                            ??_INTERRUPT_InterruptManager 004A  
                                 motorControl@lastPercent 0029  
                                 motorControl@lastStarter 0028  
                                           _TMR0_CallBack 4AEC  
                                    _INTERRUPT_Initialize 4CB8  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 26DA  
                           __end_of_lightContol_BackLight 40F2  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 4672  
                        _DRV_CANFDSPI_OperationModeSelect 45EC  
                                                i2u327_40 005A  
                                                i2u327_41 0056  
                                                i2u328_40 0068  
                                                i2u328_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 4B7C  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 4B4E  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 0026  
                                           _LEAVECRITICAL 4C4E  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 4C34  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 4C18  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6676 0080  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 4750  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 424E  
                      _DRV_CANFDSPI_TransmitChannelUpdate 41A0  
                            motorControl_Process@oldState 005D  
                                                _carState 0001  
                       __end_of_DRV_CANFDSPI_TefConfigure 3F88  
                                                __ptext10 4C34  
                                                __ptext11 47B8  
                                                __ptext20 1E64  
                                                __ptext12 074C  
                                                __ptext21 39F2  
                                                __ptext13 4672  
                                                __ptext30 24FC  
                                                __ptext22 2882  
                                                __ptext14 2A10  
                                                __ptext31 439C  
                                                __ptext23 40F2  
                                                __ptext15 42F8  
                                                __ptext40 4B20  
                                                __ptext32 3C76  
                                                __ptext24 403E  
                                                __ptext16 2E9E  
                                                __ptext41 4CA4  
                                                __ptext33 2FF2  
                                                __ptext25 424E  
                                                __ptext17 49F0  
                                                __ptext50 327E  
                                                __ptext42 4CB8  
                                                __ptext34 4C4E  
                                                __ptext26 0000  
                                                __ptext18 455C  
                                                __ptext51 33BE  
                                                __ptext43 46E6  
                                                __ptext35 4C66  
                                                __ptext27 34F8  
                                                __ptext19 26DA  
                                                __ptext60 45EC  
                                                __ptext52 2B9C  
                                                __ptext44 4434  
                                                __ptext36 4C7E  
                                                __ptext28 41A0  
                                                __ptext61 499A  
                                                __ptext53 4BA8  
                                                __ptext45 0E34  
                                                __ptext37 4A7A  
                                                __ptext29 14B2  
                                                __ptext62 4880  
                                                __ptext54 4C18  
                                                __ptext46 117E  
                                                __ptext38 4BF6  
                                                __ptext71 4B4E  
                                                __ptext63 481C  
                                                __ptext55 48E2  
                                                __ptext47 44CA  
                                                __ptext39 4C94  
                                                __ptext72 4AEC  
                                                __ptext64 3D42  
                                                __ptext56 3ED0  
                                                __ptext48 22EE  
                                                __ptext73 4CC0  
                                                __ptext65 19BA  
                                                __ptext57 4B7C  
                                                __ptext49 381A  
                                                __ptext74 371C  
                                                __ptext66 173A  
                                                __ptext58 3F88  
                                                __ptext75 4942  
                                                __ptext67 1C18  
                                                __ptext59 313C  
                                                __ptext68 3AD2  
                                                __ptext69 3E0C  
                                           _ENTERCRITICAL 4C66  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 381A  
                              _XF_decrementAndQueueTimers 371C  
                    __end_of_TMR0_DefaultInterruptHandler 4CC2  
                            _TMR0_DefaultInterruptHandler 4CC0  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 4942  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 499A  
                            __end_of_motorControl_Process 20AC  
                                  _DRV_CANFDSPI_WriteWord 3AD2  
                                            _motorControl 39F2  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 455C  
                              _DRV_CANFDSPI_FilterDisable 44CA  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 4880  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 4942  
                            _DRV_CANFDSPI_TimeStampEnable 48E2  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 46E6  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 4672  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 20AC  
                                         _TMR0_Initialize 4A7A  
                              lightContol_BackLight@F6688 0060  
                          __end_of_PIN_MANAGER_Initialize 4B4E  
