

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Mar 03 14:22:59 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 23/03/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F97J60 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000FE0                     bsr             equ	4064
   129   000FE9                     fsr0            equ	4073
   130   000FEA                     fsr0h           equ	4074
   131   000FE9                     fsr0l           equ	4073
   132   000FE1                     fsr1            equ	4065
   133   000FE2                     fsr1h           equ	4066
   134   000FE1                     fsr1l           equ	4065
   135   000FD9                     fsr2            equ	4057
   136   000FDA                     fsr2h           equ	4058
   137   000FD9                     fsr2l           equ	4057
   138   000FEF                     indf0           equ	4079
   139   000FE7                     indf1           equ	4071
   140   000FDF                     indf2           equ	4063
   141   000FF2                     intcon          equ	4082
   142   000000                     nvmcon          equ	0
   143   000FF9                     pcl             equ	4089
   144   000FFA                     pclath          equ	4090
   145   000FFB                     pclatu          equ	4091
   146   000FEB                     plusw0          equ	4075
   147   000FE3                     plusw1          equ	4067
   148   000FDB                     plusw2          equ	4059
   149   000FED                     postdec0        equ	4077
   150   000FE5                     postdec1        equ	4069
   151   000FDD                     postdec2        equ	4061
   152   000FEE                     postinc0        equ	4078
   153   000FE6                     postinc1        equ	4070
   154   000FDE                     postinc2        equ	4062
   155   000FEC                     preinc0         equ	4076
   156   000FE4                     preinc1         equ	4068
   157   000FDC                     preinc2         equ	4060
   158   000FF3                     prod            equ	4083
   159   000FF4                     prodh           equ	4084
   160   000FF3                     prodl           equ	4083
   161   000FD8                     status          equ	4056
   162   000FF5                     tablat          equ	4085
   163   000FF6                     tblptr          equ	4086
   164   000FF7                     tblptrh         equ	4087
   165   000FF6                     tblptrl         equ	4086
   166   000FF8                     tblptru         equ	4088
   167   000FFD                     tosl            equ	4093
   168   000FE8                     wreg            equ	4072
   169   000E80                     MAADR5          equ	3712	;# 
   170   000E81                     MAADR6          equ	3713	;# 
   171   000E82                     MAADR3          equ	3714	;# 
   172   000E83                     MAADR4          equ	3715	;# 
   173   000E84                     MAADR1          equ	3716	;# 
   174   000E85                     MAADR2          equ	3717	;# 
   175   000E8A                     MISTAT          equ	3722	;# 
   176   000E97                     EFLOCON         equ	3735	;# 
   177   000E98                     EPAUS           equ	3736	;# 
   178   000E98                     EPAUSL          equ	3736	;# 
   179   000E99                     EPAUSH          equ	3737	;# 
   180   000EA0                     MACON1          equ	3744	;# 
   181   000EA2                     MACON3          equ	3746	;# 
   182   000EA3                     MACON4          equ	3747	;# 
   183   000EA4                     MABBIPG         equ	3748	;# 
   184   000EA6                     MAIPG           equ	3750	;# 
   185   000EA6                     MAIPGL          equ	3750	;# 
   186   000EA7                     MAIPGH          equ	3751	;# 
   187   000EAA                     MAMXFL          equ	3754	;# 
   188   000EAA                     MAMXFLL         equ	3754	;# 
   189   000EAB                     MAMXFLH         equ	3755	;# 
   190   000EB2                     MICMD           equ	3762	;# 
   191   000EB4                     MIREGADR        equ	3764	;# 
   192   000EB6                     MIWR            equ	3766	;# 
   193   000EB6                     MIWRL           equ	3766	;# 
   194   000EB7                     MIWRH           equ	3767	;# 
   195   000EB8                     MIRD            equ	3768	;# 
   196   000EB8                     MIRDL           equ	3768	;# 
   197   000EB9                     MIRDH           equ	3769	;# 
   198   000EC0                     EHT0            equ	3776	;# 
   199   000EC1                     EHT1            equ	3777	;# 
   200   000EC2                     EHT2            equ	3778	;# 
   201   000EC3                     EHT3            equ	3779	;# 
   202   000EC4                     EHT4            equ	3780	;# 
   203   000EC5                     EHT5            equ	3781	;# 
   204   000EC6                     EHT6            equ	3782	;# 
   205   000EC7                     EHT7            equ	3783	;# 
   206   000EC8                     EPMM0           equ	3784	;# 
   207   000EC9                     EPMM1           equ	3785	;# 
   208   000ECA                     EPMM2           equ	3786	;# 
   209   000ECB                     EPMM3           equ	3787	;# 
   210   000ECC                     EPMM4           equ	3788	;# 
   211   000ECD                     EPMM5           equ	3789	;# 
   212   000ECE                     EPMM6           equ	3790	;# 
   213   000ECF                     EPMM7           equ	3791	;# 
   214   000ED0                     EPMCS           equ	3792	;# 
   215   000ED0                     EPMCSL          equ	3792	;# 
   216   000ED1                     EPMCSH          equ	3793	;# 
   217   000ED4                     EPMO            equ	3796	;# 
   218   000ED4                     EPMOL           equ	3796	;# 
   219   000ED5                     EPMOH           equ	3797	;# 
   220   000ED8                     ERXFCON         equ	3800	;# 
   221   000ED9                     EPKTCNT         equ	3801	;# 
   222   000EE2                     EWRPT           equ	3810	;# 
   223   000EE2                     EWRPTL          equ	3810	;# 
   224   000EE3                     EWRPTH          equ	3811	;# 
   225   000EE4                     ETXST           equ	3812	;# 
   226   000EE4                     ETXSTL          equ	3812	;# 
   227   000EE5                     ETXSTH          equ	3813	;# 
   228   000EE6                     ETXND           equ	3814	;# 
   229   000EE6                     ETXNDL          equ	3814	;# 
   230   000EE7                     ETXNDH          equ	3815	;# 
   231   000EE8                     ERXST           equ	3816	;# 
   232   000EE8                     ERXSTL          equ	3816	;# 
   233   000EE9                     ERXSTH          equ	3817	;# 
   234   000EEA                     ERXND           equ	3818	;# 
   235   000EEA                     ERXNDL          equ	3818	;# 
   236   000EEB                     ERXNDH          equ	3819	;# 
   237   000EEC                     ERXRDPT         equ	3820	;# 
   238   000EEC                     ERXRDPTL        equ	3820	;# 
   239   000EED                     ERXRDPTH        equ	3821	;# 
   240   000EEE                     ERXWRPT         equ	3822	;# 
   241   000EEE                     ERXWRPTL        equ	3822	;# 
   242   000EEF                     ERXWRPTH        equ	3823	;# 
   243   000EF0                     EDMAST          equ	3824	;# 
   244   000EF0                     EDMASTL         equ	3824	;# 
   245   000EF1                     EDMASTH         equ	3825	;# 
   246   000EF2                     EDMAND          equ	3826	;# 
   247   000EF2                     EDMANDL         equ	3826	;# 
   248   000EF3                     EDMANDH         equ	3827	;# 
   249   000EF4                     EDMADST         equ	3828	;# 
   250   000EF4                     EDMADSTL        equ	3828	;# 
   251   000EF5                     EDMADSTH        equ	3829	;# 
   252   000EF6                     EDMACS          equ	3830	;# 
   253   000EF6                     EDMACSL         equ	3830	;# 
   254   000EF7                     EDMACSH         equ	3831	;# 
   255   000EFB                     EIE             equ	3835	;# 
   256   000EFD                     ESTAT           equ	3837	;# 
   257   000EFE                     ECON2           equ	3838	;# 
   258   000F60                     EIR             equ	3936	;# 
   259   000F61                     EDATA           equ	3937	;# 
   260   000F62                     SSP2CON2        equ	3938	;# 
   261   000F63                     SSP2CON1        equ	3939	;# 
   262   000F64                     SSP2STAT        equ	3940	;# 
   263   000F65                     SSP2ADD         equ	3941	;# 
   264   000F66                     SSP2BUF         equ	3942	;# 
   265   000F67                     ECCP2DEL        equ	3943	;# 
   266   000F68                     ECCP2AS         equ	3944	;# 
   267   000F69                     ECCP3DEL        equ	3945	;# 
   268   000F6A                     ECCP3AS         equ	3946	;# 
   269   000F6B                     RCSTA2          equ	3947	;# 
   270   000F6C                     TXSTA2          equ	3948	;# 
   271   000F6D                     TXREG2          equ	3949	;# 
   272   000F6E                     RCREG2          equ	3950	;# 
   273   000F6F                     SPBRG2          equ	3951	;# 
   274   000F70                     CCP5CON         equ	3952	;# 
   275   000F71                     CCPR5           equ	3953	;# 
   276   000F71                     CCPR5L          equ	3953	;# 
   277   000F72                     CCPR5H          equ	3954	;# 
   278   000F73                     CCP4CON         equ	3955	;# 
   279   000F74                     CCPR4           equ	3956	;# 
   280   000F74                     CCPR4L          equ	3956	;# 
   281   000F75                     CCPR4H          equ	3957	;# 
   282   000F76                     T4CON           equ	3958	;# 
   283   000F77                     PR4             equ	3959	;# 
   284   000F78                     TMR4            equ	3960	;# 
   285   000F79                     ECCP1DEL        equ	3961	;# 
   286   000F7A                     ERDPT           equ	3962	;# 
   287   000F7A                     ERDPTL          equ	3962	;# 
   288   000F7B                     ERDPTH          equ	3963	;# 
   289   000F7C                     BAUDCON2        equ	3964	;# 
   290   000F7C                     BAUDCTL2        equ	3964	;# 
   291   000F7D                     SPBRGH2         equ	3965	;# 
   292   000F7E                     BAUDCON1        equ	3966	;# 
   293   000F7E                     BAUDCON         equ	3966	;# 
   294   000F7E                     BAUDCTL         equ	3966	;# 
   295   000F7E                     BAUDCTL1        equ	3966	;# 
   296   000F7F                     SPBRGH1         equ	3967	;# 
   297   000F7F                     SPBRGH          equ	3967	;# 
   298   000F80                     PORTA           equ	3968	;# 
   299   000F81                     PORTB           equ	3969	;# 
   300   000F82                     PORTC           equ	3970	;# 
   301   000F83                     PORTD           equ	3971	;# 
   302   000F84                     PORTE           equ	3972	;# 
   303   000F85                     PORTF           equ	3973	;# 
   304   000F86                     PORTG           equ	3974	;# 
   305   000F87                     PORTH           equ	3975	;# 
   306   000F88                     PORTJ           equ	3976	;# 
   307   000F89                     LATA            equ	3977	;# 
   308   000F8A                     LATB            equ	3978	;# 
   309   000F8B                     LATC            equ	3979	;# 
   310   000F8C                     LATD            equ	3980	;# 
   311   000F8D                     LATE            equ	3981	;# 
   312   000F8E                     LATF            equ	3982	;# 
   313   000F8F                     LATG            equ	3983	;# 
   314   000F90                     LATH            equ	3984	;# 
   315   000F91                     LATJ            equ	3985	;# 
   316   000F92                     TRISA           equ	3986	;# 
   317   000F92                     DDRA            equ	3986	;# 
   318   000F93                     TRISB           equ	3987	;# 
   319   000F93                     DDRB            equ	3987	;# 
   320   000F94                     TRISC           equ	3988	;# 
   321   000F94                     DDRC            equ	3988	;# 
   322   000F95                     TRISD           equ	3989	;# 
   323   000F95                     DDRD            equ	3989	;# 
   324   000F96                     TRISE           equ	3990	;# 
   325   000F96                     DDRE            equ	3990	;# 
   326   000F97                     TRISF           equ	3991	;# 
   327   000F97                     DDRF            equ	3991	;# 
   328   000F98                     TRISG           equ	3992	;# 
   329   000F98                     DDRG            equ	3992	;# 
   330   000F99                     TRISH           equ	3993	;# 
   331   000F99                     DDRH            equ	3993	;# 
   332   000F9A                     TRISJ           equ	3994	;# 
   333   000F9A                     DDRJ            equ	3994	;# 
   334   000F9B                     OSCTUNE         equ	3995	;# 
   335   000F9C                     MEMCON          equ	3996	;# 
   336   000F9D                     PIE1            equ	3997	;# 
   337   000F9E                     PIR1            equ	3998	;# 
   338   000F9F                     IPR1            equ	3999	;# 
   339   000FA0                     PIE2            equ	4000	;# 
   340   000FA1                     PIR2            equ	4001	;# 
   341   000FA2                     IPR2            equ	4002	;# 
   342   000FA3                     PIE3            equ	4003	;# 
   343   000FA4                     PIR3            equ	4004	;# 
   344   000FA5                     IPR3            equ	4005	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FAB                     RCSTA1          equ	4011	;# 
   348   000FAB                     RCSTA           equ	4011	;# 
   349   000FAC                     TXSTA1          equ	4012	;# 
   350   000FAC                     TXSTA           equ	4012	;# 
   351   000FAD                     TXREG1          equ	4013	;# 
   352   000FAD                     TXREG           equ	4013	;# 
   353   000FAE                     RCREG1          equ	4014	;# 
   354   000FAE                     RCREG           equ	4014	;# 
   355   000FAF                     SPBRG1          equ	4015	;# 
   356   000FAF                     SPBRG           equ	4015	;# 
   357   000FB0                     PSPCON          equ	4016	;# 
   358   000FB1                     T3CON           equ	4017	;# 
   359   000FB2                     TMR3            equ	4018	;# 
   360   000FB2                     TMR3L           equ	4018	;# 
   361   000FB3                     TMR3H           equ	4019	;# 
   362   000FB4                     CMCON           equ	4020	;# 
   363   000FB5                     CVRCON          equ	4021	;# 
   364   000FB6                     ECCP1AS         equ	4022	;# 
   365   000FB7                     CCP3CON         equ	4023	;# 
   366   000FB7                     ECCP3CON        equ	4023	;# 
   367   000FB8                     CCPR3           equ	4024	;# 
   368   000FB8                     CCPR3L          equ	4024	;# 
   369   000FB9                     CCPR3H          equ	4025	;# 
   370   000FBA                     CCP2CON         equ	4026	;# 
   371   000FBA                     ECCP2CON        equ	4026	;# 
   372   000FBB                     CCPR2           equ	4027	;# 
   373   000FBB                     CCPR2L          equ	4027	;# 
   374   000FBC                     CCPR2H          equ	4028	;# 
   375   000FBD                     CCP1CON         equ	4029	;# 
   376   000FBD                     ECCP1CON        equ	4029	;# 
   377   000FBE                     CCPR1           equ	4030	;# 
   378   000FBE                     CCPR1L          equ	4030	;# 
   379   000FBF                     CCPR1H          equ	4031	;# 
   380   000FC0                     ADCON2          equ	4032	;# 
   381   000FC1                     ADCON1          equ	4033	;# 
   382   000FC2                     ADCON0          equ	4034	;# 
   383   000FC3                     ADRES           equ	4035	;# 
   384   000FC3                     ADRESL          equ	4035	;# 
   385   000FC4                     ADRESH          equ	4036	;# 
   386   000FC5                     SSP1CON2        equ	4037	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSP1CON1        equ	4038	;# 
   389   000FC6                     SSPCON1         equ	4038	;# 
   390   000FC7                     SSP1STAT        equ	4039	;# 
   391   000FC7                     SSPSTAT         equ	4039	;# 
   392   000FC8                     SSP1ADD         equ	4040	;# 
   393   000FC8                     SSPADD          equ	4040	;# 
   394   000FC9                     SSP1BUF         equ	4041	;# 
   395   000FC9                     SSPBUF          equ	4041	;# 
   396   000FCA                     T2CON           equ	4042	;# 
   397   000FCB                     PR2             equ	4043	;# 
   398   000FCC                     TMR2            equ	4044	;# 
   399   000FCD                     T1CON           equ	4045	;# 
   400   000FCE                     TMR1            equ	4046	;# 
   401   000FCE                     TMR1L           equ	4046	;# 
   402   000FCF                     TMR1H           equ	4047	;# 
   403   000FD0                     RCON            equ	4048	;# 
   404   000FD1                     WDTCON          equ	4049	;# 
   405   000FD2                     ECON1           equ	4050	;# 
   406   000FD3                     OSCCON          equ	4051	;# 
   407   000FD5                     T0CON           equ	4053	;# 
   408   000FD6                     TMR0            equ	4054	;# 
   409   000FD6                     TMR0L           equ	4054	;# 
   410   000FD7                     TMR0H           equ	4055	;# 
   411   000FD8                     STATUS          equ	4056	;# 
   412   000FD9                     FSR2            equ	4057	;# 
   413   000FD9                     FSR2L           equ	4057	;# 
   414   000FDA                     FSR2H           equ	4058	;# 
   415   000FDB                     PLUSW2          equ	4059	;# 
   416   000FDC                     PREINC2         equ	4060	;# 
   417   000FDD                     POSTDEC2        equ	4061	;# 
   418   000FDE                     POSTINC2        equ	4062	;# 
   419   000FDF                     INDF2           equ	4063	;# 
   420   000FE0                     BSR             equ	4064	;# 
   421   000FE1                     FSR1            equ	4065	;# 
   422   000FE1                     FSR1L           equ	4065	;# 
   423   000FE2                     FSR1H           equ	4066	;# 
   424   000FE3                     PLUSW1          equ	4067	;# 
   425   000FE4                     PREINC1         equ	4068	;# 
   426   000FE5                     POSTDEC1        equ	4069	;# 
   427   000FE6                     POSTINC1        equ	4070	;# 
   428   000FE7                     INDF1           equ	4071	;# 
   429   000FE8                     WREG            equ	4072	;# 
   430   000FE9                     FSR0            equ	4073	;# 
   431   000FE9                     FSR0L           equ	4073	;# 
   432   000FEA                     FSR0H           equ	4074	;# 
   433   000FEB                     PLUSW0          equ	4075	;# 
   434   000FEC                     PREINC0         equ	4076	;# 
   435   000FED                     POSTDEC0        equ	4077	;# 
   436   000FEE                     POSTINC0        equ	4078	;# 
   437   000FEF                     INDF0           equ	4079	;# 
   438   000FF0                     INTCON3         equ	4080	;# 
   439   000FF1                     INTCON2         equ	4081	;# 
   440   000FF2                     INTCON          equ	4082	;# 
   441   000FF3                     PROD            equ	4083	;# 
   442   000FF3                     PRODL           equ	4083	;# 
   443   000FF4                     PRODH           equ	4084	;# 
   444   000FF5                     TABLAT          equ	4085	;# 
   445   000FF6                     TBLPTR          equ	4086	;# 
   446   000FF6                     TBLPTRL         equ	4086	;# 
   447   000FF7                     TBLPTRH         equ	4087	;# 
   448   000FF8                     TBLPTRU         equ	4088	;# 
   449   000FF9                     PCLAT           equ	4089	;# 
   450   000FF9                     PC              equ	4089	;# 
   451   000FF9                     PCL             equ	4089	;# 
   452   000FFA                     PCLATH          equ	4090	;# 
   453   000FFB                     PCLATU          equ	4091	;# 
   454   000FFC                     STKPTR          equ	4092	;# 
   455   000FFD                     TOS             equ	4093	;# 
   456   000FFD                     TOSL            equ	4093	;# 
   457   000FFE                     TOSH            equ	4094	;# 
   458   000FFF                     TOSU            equ	4095	;# 
   459   000E80                     MAADR5          equ	3712	;# 
   460   000E81                     MAADR6          equ	3713	;# 
   461   000E82                     MAADR3          equ	3714	;# 
   462   000E83                     MAADR4          equ	3715	;# 
   463   000E84                     MAADR1          equ	3716	;# 
   464   000E85                     MAADR2          equ	3717	;# 
   465   000E8A                     MISTAT          equ	3722	;# 
   466   000E97                     EFLOCON         equ	3735	;# 
   467   000E98                     EPAUS           equ	3736	;# 
   468   000E98                     EPAUSL          equ	3736	;# 
   469   000E99                     EPAUSH          equ	3737	;# 
   470   000EA0                     MACON1          equ	3744	;# 
   471   000EA2                     MACON3          equ	3746	;# 
   472   000EA3                     MACON4          equ	3747	;# 
   473   000EA4                     MABBIPG         equ	3748	;# 
   474   000EA6                     MAIPG           equ	3750	;# 
   475   000EA6                     MAIPGL          equ	3750	;# 
   476   000EA7                     MAIPGH          equ	3751	;# 
   477   000EAA                     MAMXFL          equ	3754	;# 
   478   000EAA                     MAMXFLL         equ	3754	;# 
   479   000EAB                     MAMXFLH         equ	3755	;# 
   480   000EB2                     MICMD           equ	3762	;# 
   481   000EB4                     MIREGADR        equ	3764	;# 
   482   000EB6                     MIWR            equ	3766	;# 
   483   000EB6                     MIWRL           equ	3766	;# 
   484   000EB7                     MIWRH           equ	3767	;# 
   485   000EB8                     MIRD            equ	3768	;# 
   486   000EB8                     MIRDL           equ	3768	;# 
   487   000EB9                     MIRDH           equ	3769	;# 
   488   000EC0                     EHT0            equ	3776	;# 
   489   000EC1                     EHT1            equ	3777	;# 
   490   000EC2                     EHT2            equ	3778	;# 
   491   000EC3                     EHT3            equ	3779	;# 
   492   000EC4                     EHT4            equ	3780	;# 
   493   000EC5                     EHT5            equ	3781	;# 
   494   000EC6                     EHT6            equ	3782	;# 
   495   000EC7                     EHT7            equ	3783	;# 
   496   000EC8                     EPMM0           equ	3784	;# 
   497   000EC9                     EPMM1           equ	3785	;# 
   498   000ECA                     EPMM2           equ	3786	;# 
   499   000ECB                     EPMM3           equ	3787	;# 
   500   000ECC                     EPMM4           equ	3788	;# 
   501   000ECD                     EPMM5           equ	3789	;# 
   502   000ECE                     EPMM6           equ	3790	;# 
   503   000ECF                     EPMM7           equ	3791	;# 
   504   000ED0                     EPMCS           equ	3792	;# 
   505   000ED0                     EPMCSL          equ	3792	;# 
   506   000ED1                     EPMCSH          equ	3793	;# 
   507   000ED4                     EPMO            equ	3796	;# 
   508   000ED4                     EPMOL           equ	3796	;# 
   509   000ED5                     EPMOH           equ	3797	;# 
   510   000ED8                     ERXFCON         equ	3800	;# 
   511   000ED9                     EPKTCNT         equ	3801	;# 
   512   000EE2                     EWRPT           equ	3810	;# 
   513   000EE2                     EWRPTL          equ	3810	;# 
   514   000EE3                     EWRPTH          equ	3811	;# 
   515   000EE4                     ETXST           equ	3812	;# 
   516   000EE4                     ETXSTL          equ	3812	;# 
   517   000EE5                     ETXSTH          equ	3813	;# 
   518   000EE6                     ETXND           equ	3814	;# 
   519   000EE6                     ETXNDL          equ	3814	;# 
   520   000EE7                     ETXNDH          equ	3815	;# 
   521   000EE8                     ERXST           equ	3816	;# 
   522   000EE8                     ERXSTL          equ	3816	;# 
   523   000EE9                     ERXSTH          equ	3817	;# 
   524   000EEA                     ERXND           equ	3818	;# 
   525   000EEA                     ERXNDL          equ	3818	;# 
   526   000EEB                     ERXNDH          equ	3819	;# 
   527   000EEC                     ERXRDPT         equ	3820	;# 
   528   000EEC                     ERXRDPTL        equ	3820	;# 
   529   000EED                     ERXRDPTH        equ	3821	;# 
   530   000EEE                     ERXWRPT         equ	3822	;# 
   531   000EEE                     ERXWRPTL        equ	3822	;# 
   532   000EEF                     ERXWRPTH        equ	3823	;# 
   533   000EF0                     EDMAST          equ	3824	;# 
   534   000EF0                     EDMASTL         equ	3824	;# 
   535   000EF1                     EDMASTH         equ	3825	;# 
   536   000EF2                     EDMAND          equ	3826	;# 
   537   000EF2                     EDMANDL         equ	3826	;# 
   538   000EF3                     EDMANDH         equ	3827	;# 
   539   000EF4                     EDMADST         equ	3828	;# 
   540   000EF4                     EDMADSTL        equ	3828	;# 
   541   000EF5                     EDMADSTH        equ	3829	;# 
   542   000EF6                     EDMACS          equ	3830	;# 
   543   000EF6                     EDMACSL         equ	3830	;# 
   544   000EF7                     EDMACSH         equ	3831	;# 
   545   000EFB                     EIE             equ	3835	;# 
   546   000EFD                     ESTAT           equ	3837	;# 
   547   000EFE                     ECON2           equ	3838	;# 
   548   000F60                     EIR             equ	3936	;# 
   549   000F61                     EDATA           equ	3937	;# 
   550   000F62                     SSP2CON2        equ	3938	;# 
   551   000F63                     SSP2CON1        equ	3939	;# 
   552   000F64                     SSP2STAT        equ	3940	;# 
   553   000F65                     SSP2ADD         equ	3941	;# 
   554   000F66                     SSP2BUF         equ	3942	;# 
   555   000F67                     ECCP2DEL        equ	3943	;# 
   556   000F68                     ECCP2AS         equ	3944	;# 
   557   000F69                     ECCP3DEL        equ	3945	;# 
   558   000F6A                     ECCP3AS         equ	3946	;# 
   559   000F6B                     RCSTA2          equ	3947	;# 
   560   000F6C                     TXSTA2          equ	3948	;# 
   561   000F6D                     TXREG2          equ	3949	;# 
   562   000F6E                     RCREG2          equ	3950	;# 
   563   000F6F                     SPBRG2          equ	3951	;# 
   564   000F70                     CCP5CON         equ	3952	;# 
   565   000F71                     CCPR5           equ	3953	;# 
   566   000F71                     CCPR5L          equ	3953	;# 
   567   000F72                     CCPR5H          equ	3954	;# 
   568   000F73                     CCP4CON         equ	3955	;# 
   569   000F74                     CCPR4           equ	3956	;# 
   570   000F74                     CCPR4L          equ	3956	;# 
   571   000F75                     CCPR4H          equ	3957	;# 
   572   000F76                     T4CON           equ	3958	;# 
   573   000F77                     PR4             equ	3959	;# 
   574   000F78                     TMR4            equ	3960	;# 
   575   000F79                     ECCP1DEL        equ	3961	;# 
   576   000F7A                     ERDPT           equ	3962	;# 
   577   000F7A                     ERDPTL          equ	3962	;# 
   578   000F7B                     ERDPTH          equ	3963	;# 
   579   000F7C                     BAUDCON2        equ	3964	;# 
   580   000F7C                     BAUDCTL2        equ	3964	;# 
   581   000F7D                     SPBRGH2         equ	3965	;# 
   582   000F7E                     BAUDCON1        equ	3966	;# 
   583   000F7E                     BAUDCON         equ	3966	;# 
   584   000F7E                     BAUDCTL         equ	3966	;# 
   585   000F7E                     BAUDCTL1        equ	3966	;# 
   586   000F7F                     SPBRGH1         equ	3967	;# 
   587   000F7F                     SPBRGH          equ	3967	;# 
   588   000F80                     PORTA           equ	3968	;# 
   589   000F81                     PORTB           equ	3969	;# 
   590   000F82                     PORTC           equ	3970	;# 
   591   000F83                     PORTD           equ	3971	;# 
   592   000F84                     PORTE           equ	3972	;# 
   593   000F85                     PORTF           equ	3973	;# 
   594   000F86                     PORTG           equ	3974	;# 
   595   000F87                     PORTH           equ	3975	;# 
   596   000F88                     PORTJ           equ	3976	;# 
   597   000F89                     LATA            equ	3977	;# 
   598   000F8A                     LATB            equ	3978	;# 
   599   000F8B                     LATC            equ	3979	;# 
   600   000F8C                     LATD            equ	3980	;# 
   601   000F8D                     LATE            equ	3981	;# 
   602   000F8E                     LATF            equ	3982	;# 
   603   000F8F                     LATG            equ	3983	;# 
   604   000F90                     LATH            equ	3984	;# 
   605   000F91                     LATJ            equ	3985	;# 
   606   000F92                     TRISA           equ	3986	;# 
   607   000F92                     DDRA            equ	3986	;# 
   608   000F93                     TRISB           equ	3987	;# 
   609   000F93                     DDRB            equ	3987	;# 
   610   000F94                     TRISC           equ	3988	;# 
   611   000F94                     DDRC            equ	3988	;# 
   612   000F95                     TRISD           equ	3989	;# 
   613   000F95                     DDRD            equ	3989	;# 
   614   000F96                     TRISE           equ	3990	;# 
   615   000F96                     DDRE            equ	3990	;# 
   616   000F97                     TRISF           equ	3991	;# 
   617   000F97                     DDRF            equ	3991	;# 
   618   000F98                     TRISG           equ	3992	;# 
   619   000F98                     DDRG            equ	3992	;# 
   620   000F99                     TRISH           equ	3993	;# 
   621   000F99                     DDRH            equ	3993	;# 
   622   000F9A                     TRISJ           equ	3994	;# 
   623   000F9A                     DDRJ            equ	3994	;# 
   624   000F9B                     OSCTUNE         equ	3995	;# 
   625   000F9C                     MEMCON          equ	3996	;# 
   626   000F9D                     PIE1            equ	3997	;# 
   627   000F9E                     PIR1            equ	3998	;# 
   628   000F9F                     IPR1            equ	3999	;# 
   629   000FA0                     PIE2            equ	4000	;# 
   630   000FA1                     PIR2            equ	4001	;# 
   631   000FA2                     IPR2            equ	4002	;# 
   632   000FA3                     PIE3            equ	4003	;# 
   633   000FA4                     PIR3            equ	4004	;# 
   634   000FA5                     IPR3            equ	4005	;# 
   635   000FA6                     EECON1          equ	4006	;# 
   636   000FA7                     EECON2          equ	4007	;# 
   637   000FAB                     RCSTA1          equ	4011	;# 
   638   000FAB                     RCSTA           equ	4011	;# 
   639   000FAC                     TXSTA1          equ	4012	;# 
   640   000FAC                     TXSTA           equ	4012	;# 
   641   000FAD                     TXREG1          equ	4013	;# 
   642   000FAD                     TXREG           equ	4013	;# 
   643   000FAE                     RCREG1          equ	4014	;# 
   644   000FAE                     RCREG           equ	4014	;# 
   645   000FAF                     SPBRG1          equ	4015	;# 
   646   000FAF                     SPBRG           equ	4015	;# 
   647   000FB0                     PSPCON          equ	4016	;# 
   648   000FB1                     T3CON           equ	4017	;# 
   649   000FB2                     TMR3            equ	4018	;# 
   650   000FB2                     TMR3L           equ	4018	;# 
   651   000FB3                     TMR3H           equ	4019	;# 
   652   000FB4                     CMCON           equ	4020	;# 
   653   000FB5                     CVRCON          equ	4021	;# 
   654   000FB6                     ECCP1AS         equ	4022	;# 
   655   000FB7                     CCP3CON         equ	4023	;# 
   656   000FB7                     ECCP3CON        equ	4023	;# 
   657   000FB8                     CCPR3           equ	4024	;# 
   658   000FB8                     CCPR3L          equ	4024	;# 
   659   000FB9                     CCPR3H          equ	4025	;# 
   660   000FBA                     CCP2CON         equ	4026	;# 
   661   000FBA                     ECCP2CON        equ	4026	;# 
   662   000FBB                     CCPR2           equ	4027	;# 
   663   000FBB                     CCPR2L          equ	4027	;# 
   664   000FBC                     CCPR2H          equ	4028	;# 
   665   000FBD                     CCP1CON         equ	4029	;# 
   666   000FBD                     ECCP1CON        equ	4029	;# 
   667   000FBE                     CCPR1           equ	4030	;# 
   668   000FBE                     CCPR1L          equ	4030	;# 
   669   000FBF                     CCPR1H          equ	4031	;# 
   670   000FC0                     ADCON2          equ	4032	;# 
   671   000FC1                     ADCON1          equ	4033	;# 
   672   000FC2                     ADCON0          equ	4034	;# 
   673   000FC3                     ADRES           equ	4035	;# 
   674   000FC3                     ADRESL          equ	4035	;# 
   675   000FC4                     ADRESH          equ	4036	;# 
   676   000FC5                     SSP1CON2        equ	4037	;# 
   677   000FC5                     SSPCON2         equ	4037	;# 
   678   000FC6                     SSP1CON1        equ	4038	;# 
   679   000FC6                     SSPCON1         equ	4038	;# 
   680   000FC7                     SSP1STAT        equ	4039	;# 
   681   000FC7                     SSPSTAT         equ	4039	;# 
   682   000FC8                     SSP1ADD         equ	4040	;# 
   683   000FC8                     SSPADD          equ	4040	;# 
   684   000FC9                     SSP1BUF         equ	4041	;# 
   685   000FC9                     SSPBUF          equ	4041	;# 
   686   000FCA                     T2CON           equ	4042	;# 
   687   000FCB                     PR2             equ	4043	;# 
   688   000FCC                     TMR2            equ	4044	;# 
   689   000FCD                     T1CON           equ	4045	;# 
   690   000FCE                     TMR1            equ	4046	;# 
   691   000FCE                     TMR1L           equ	4046	;# 
   692   000FCF                     TMR1H           equ	4047	;# 
   693   000FD0                     RCON            equ	4048	;# 
   694   000FD1                     WDTCON          equ	4049	;# 
   695   000FD2                     ECON1           equ	4050	;# 
   696   000FD3                     OSCCON          equ	4051	;# 
   697   000FD5                     T0CON           equ	4053	;# 
   698   000FD6                     TMR0            equ	4054	;# 
   699   000FD6                     TMR0L           equ	4054	;# 
   700   000FD7                     TMR0H           equ	4055	;# 
   701   000FD8                     STATUS          equ	4056	;# 
   702   000FD9                     FSR2            equ	4057	;# 
   703   000FD9                     FSR2L           equ	4057	;# 
   704   000FDA                     FSR2H           equ	4058	;# 
   705   000FDB                     PLUSW2          equ	4059	;# 
   706   000FDC                     PREINC2         equ	4060	;# 
   707   000FDD                     POSTDEC2        equ	4061	;# 
   708   000FDE                     POSTINC2        equ	4062	;# 
   709   000FDF                     INDF2           equ	4063	;# 
   710   000FE0                     BSR             equ	4064	;# 
   711   000FE1                     FSR1            equ	4065	;# 
   712   000FE1                     FSR1L           equ	4065	;# 
   713   000FE2                     FSR1H           equ	4066	;# 
   714   000FE3                     PLUSW1          equ	4067	;# 
   715   000FE4                     PREINC1         equ	4068	;# 
   716   000FE5                     POSTDEC1        equ	4069	;# 
   717   000FE6                     POSTINC1        equ	4070	;# 
   718   000FE7                     INDF1           equ	4071	;# 
   719   000FE8                     WREG            equ	4072	;# 
   720   000FE9                     FSR0            equ	4073	;# 
   721   000FE9                     FSR0L           equ	4073	;# 
   722   000FEA                     FSR0H           equ	4074	;# 
   723   000FEB                     PLUSW0          equ	4075	;# 
   724   000FEC                     PREINC0         equ	4076	;# 
   725   000FED                     POSTDEC0        equ	4077	;# 
   726   000FEE                     POSTINC0        equ	4078	;# 
   727   000FEF                     INDF0           equ	4079	;# 
   728   000FF0                     INTCON3         equ	4080	;# 
   729   000FF1                     INTCON2         equ	4081	;# 
   730   000FF2                     INTCON          equ	4082	;# 
   731   000FF3                     PROD            equ	4083	;# 
   732   000FF3                     PRODL           equ	4083	;# 
   733   000FF4                     PRODH           equ	4084	;# 
   734   000FF5                     TABLAT          equ	4085	;# 
   735   000FF6                     TBLPTR          equ	4086	;# 
   736   000FF6                     TBLPTRL         equ	4086	;# 
   737   000FF7                     TBLPTRH         equ	4087	;# 
   738   000FF8                     TBLPTRU         equ	4088	;# 
   739   000FF9                     PCLAT           equ	4089	;# 
   740   000FF9                     PC              equ	4089	;# 
   741   000FF9                     PCL             equ	4089	;# 
   742   000FFA                     PCLATH          equ	4090	;# 
   743   000FFB                     PCLATU          equ	4091	;# 
   744   000FFC                     STKPTR          equ	4092	;# 
   745   000FFD                     TOS             equ	4093	;# 
   746   000FFD                     TOSL            equ	4093	;# 
   747   000FFE                     TOSH            equ	4094	;# 
   748   000FFF                     TOSU            equ	4095	;# 
   749   000E80                     MAADR5          equ	3712	;# 
   750   000E81                     MAADR6          equ	3713	;# 
   751   000E82                     MAADR3          equ	3714	;# 
   752   000E83                     MAADR4          equ	3715	;# 
   753   000E84                     MAADR1          equ	3716	;# 
   754   000E85                     MAADR2          equ	3717	;# 
   755   000E8A                     MISTAT          equ	3722	;# 
   756   000E97                     EFLOCON         equ	3735	;# 
   757   000E98                     EPAUS           equ	3736	;# 
   758   000E98                     EPAUSL          equ	3736	;# 
   759   000E99                     EPAUSH          equ	3737	;# 
   760   000EA0                     MACON1          equ	3744	;# 
   761   000EA2                     MACON3          equ	3746	;# 
   762   000EA3                     MACON4          equ	3747	;# 
   763   000EA4                     MABBIPG         equ	3748	;# 
   764   000EA6                     MAIPG           equ	3750	;# 
   765   000EA6                     MAIPGL          equ	3750	;# 
   766   000EA7                     MAIPGH          equ	3751	;# 
   767   000EAA                     MAMXFL          equ	3754	;# 
   768   000EAA                     MAMXFLL         equ	3754	;# 
   769   000EAB                     MAMXFLH         equ	3755	;# 
   770   000EB2                     MICMD           equ	3762	;# 
   771   000EB4                     MIREGADR        equ	3764	;# 
   772   000EB6                     MIWR            equ	3766	;# 
   773   000EB6                     MIWRL           equ	3766	;# 
   774   000EB7                     MIWRH           equ	3767	;# 
   775   000EB8                     MIRD            equ	3768	;# 
   776   000EB8                     MIRDL           equ	3768	;# 
   777   000EB9                     MIRDH           equ	3769	;# 
   778   000EC0                     EHT0            equ	3776	;# 
   779   000EC1                     EHT1            equ	3777	;# 
   780   000EC2                     EHT2            equ	3778	;# 
   781   000EC3                     EHT3            equ	3779	;# 
   782   000EC4                     EHT4            equ	3780	;# 
   783   000EC5                     EHT5            equ	3781	;# 
   784   000EC6                     EHT6            equ	3782	;# 
   785   000EC7                     EHT7            equ	3783	;# 
   786   000EC8                     EPMM0           equ	3784	;# 
   787   000EC9                     EPMM1           equ	3785	;# 
   788   000ECA                     EPMM2           equ	3786	;# 
   789   000ECB                     EPMM3           equ	3787	;# 
   790   000ECC                     EPMM4           equ	3788	;# 
   791   000ECD                     EPMM5           equ	3789	;# 
   792   000ECE                     EPMM6           equ	3790	;# 
   793   000ECF                     EPMM7           equ	3791	;# 
   794   000ED0                     EPMCS           equ	3792	;# 
   795   000ED0                     EPMCSL          equ	3792	;# 
   796   000ED1                     EPMCSH          equ	3793	;# 
   797   000ED4                     EPMO            equ	3796	;# 
   798   000ED4                     EPMOL           equ	3796	;# 
   799   000ED5                     EPMOH           equ	3797	;# 
   800   000ED8                     ERXFCON         equ	3800	;# 
   801   000ED9                     EPKTCNT         equ	3801	;# 
   802   000EE2                     EWRPT           equ	3810	;# 
   803   000EE2                     EWRPTL          equ	3810	;# 
   804   000EE3                     EWRPTH          equ	3811	;# 
   805   000EE4                     ETXST           equ	3812	;# 
   806   000EE4                     ETXSTL          equ	3812	;# 
   807   000EE5                     ETXSTH          equ	3813	;# 
   808   000EE6                     ETXND           equ	3814	;# 
   809   000EE6                     ETXNDL          equ	3814	;# 
   810   000EE7                     ETXNDH          equ	3815	;# 
   811   000EE8                     ERXST           equ	3816	;# 
   812   000EE8                     ERXSTL          equ	3816	;# 
   813   000EE9                     ERXSTH          equ	3817	;# 
   814   000EEA                     ERXND           equ	3818	;# 
   815   000EEA                     ERXNDL          equ	3818	;# 
   816   000EEB                     ERXNDH          equ	3819	;# 
   817   000EEC                     ERXRDPT         equ	3820	;# 
   818   000EEC                     ERXRDPTL        equ	3820	;# 
   819   000EED                     ERXRDPTH        equ	3821	;# 
   820   000EEE                     ERXWRPT         equ	3822	;# 
   821   000EEE                     ERXWRPTL        equ	3822	;# 
   822   000EEF                     ERXWRPTH        equ	3823	;# 
   823   000EF0                     EDMAST          equ	3824	;# 
   824   000EF0                     EDMASTL         equ	3824	;# 
   825   000EF1                     EDMASTH         equ	3825	;# 
   826   000EF2                     EDMAND          equ	3826	;# 
   827   000EF2                     EDMANDL         equ	3826	;# 
   828   000EF3                     EDMANDH         equ	3827	;# 
   829   000EF4                     EDMADST         equ	3828	;# 
   830   000EF4                     EDMADSTL        equ	3828	;# 
   831   000EF5                     EDMADSTH        equ	3829	;# 
   832   000EF6                     EDMACS          equ	3830	;# 
   833   000EF6                     EDMACSL         equ	3830	;# 
   834   000EF7                     EDMACSH         equ	3831	;# 
   835   000EFB                     EIE             equ	3835	;# 
   836   000EFD                     ESTAT           equ	3837	;# 
   837   000EFE                     ECON2           equ	3838	;# 
   838   000F60                     EIR             equ	3936	;# 
   839   000F61                     EDATA           equ	3937	;# 
   840   000F62                     SSP2CON2        equ	3938	;# 
   841   000F63                     SSP2CON1        equ	3939	;# 
   842   000F64                     SSP2STAT        equ	3940	;# 
   843   000F65                     SSP2ADD         equ	3941	;# 
   844   000F66                     SSP2BUF         equ	3942	;# 
   845   000F67                     ECCP2DEL        equ	3943	;# 
   846   000F68                     ECCP2AS         equ	3944	;# 
   847   000F69                     ECCP3DEL        equ	3945	;# 
   848   000F6A                     ECCP3AS         equ	3946	;# 
   849   000F6B                     RCSTA2          equ	3947	;# 
   850   000F6C                     TXSTA2          equ	3948	;# 
   851   000F6D                     TXREG2          equ	3949	;# 
   852   000F6E                     RCREG2          equ	3950	;# 
   853   000F6F                     SPBRG2          equ	3951	;# 
   854   000F70                     CCP5CON         equ	3952	;# 
   855   000F71                     CCPR5           equ	3953	;# 
   856   000F71                     CCPR5L          equ	3953	;# 
   857   000F72                     CCPR5H          equ	3954	;# 
   858   000F73                     CCP4CON         equ	3955	;# 
   859   000F74                     CCPR4           equ	3956	;# 
   860   000F74                     CCPR4L          equ	3956	;# 
   861   000F75                     CCPR4H          equ	3957	;# 
   862   000F76                     T4CON           equ	3958	;# 
   863   000F77                     PR4             equ	3959	;# 
   864   000F78                     TMR4            equ	3960	;# 
   865   000F79                     ECCP1DEL        equ	3961	;# 
   866   000F7A                     ERDPT           equ	3962	;# 
   867   000F7A                     ERDPTL          equ	3962	;# 
   868   000F7B                     ERDPTH          equ	3963	;# 
   869   000F7C                     BAUDCON2        equ	3964	;# 
   870   000F7C                     BAUDCTL2        equ	3964	;# 
   871   000F7D                     SPBRGH2         equ	3965	;# 
   872   000F7E                     BAUDCON1        equ	3966	;# 
   873   000F7E                     BAUDCON         equ	3966	;# 
   874   000F7E                     BAUDCTL         equ	3966	;# 
   875   000F7E                     BAUDCTL1        equ	3966	;# 
   876   000F7F                     SPBRGH1         equ	3967	;# 
   877   000F7F                     SPBRGH          equ	3967	;# 
   878   000F80                     PORTA           equ	3968	;# 
   879   000F81                     PORTB           equ	3969	;# 
   880   000F82                     PORTC           equ	3970	;# 
   881   000F83                     PORTD           equ	3971	;# 
   882   000F84                     PORTE           equ	3972	;# 
   883   000F85                     PORTF           equ	3973	;# 
   884   000F86                     PORTG           equ	3974	;# 
   885   000F87                     PORTH           equ	3975	;# 
   886   000F88                     PORTJ           equ	3976	;# 
   887   000F89                     LATA            equ	3977	;# 
   888   000F8A                     LATB            equ	3978	;# 
   889   000F8B                     LATC            equ	3979	;# 
   890   000F8C                     LATD            equ	3980	;# 
   891   000F8D                     LATE            equ	3981	;# 
   892   000F8E                     LATF            equ	3982	;# 
   893   000F8F                     LATG            equ	3983	;# 
   894   000F90                     LATH            equ	3984	;# 
   895   000F91                     LATJ            equ	3985	;# 
   896   000F92                     TRISA           equ	3986	;# 
   897   000F92                     DDRA            equ	3986	;# 
   898   000F93                     TRISB           equ	3987	;# 
   899   000F93                     DDRB            equ	3987	;# 
   900   000F94                     TRISC           equ	3988	;# 
   901   000F94                     DDRC            equ	3988	;# 
   902   000F95                     TRISD           equ	3989	;# 
   903   000F95                     DDRD            equ	3989	;# 
   904   000F96                     TRISE           equ	3990	;# 
   905   000F96                     DDRE            equ	3990	;# 
   906   000F97                     TRISF           equ	3991	;# 
   907   000F97                     DDRF            equ	3991	;# 
   908   000F98                     TRISG           equ	3992	;# 
   909   000F98                     DDRG            equ	3992	;# 
   910   000F99                     TRISH           equ	3993	;# 
   911   000F99                     DDRH            equ	3993	;# 
   912   000F9A                     TRISJ           equ	3994	;# 
   913   000F9A                     DDRJ            equ	3994	;# 
   914   000F9B                     OSCTUNE         equ	3995	;# 
   915   000F9C                     MEMCON          equ	3996	;# 
   916   000F9D                     PIE1            equ	3997	;# 
   917   000F9E                     PIR1            equ	3998	;# 
   918   000F9F                     IPR1            equ	3999	;# 
   919   000FA0                     PIE2            equ	4000	;# 
   920   000FA1                     PIR2            equ	4001	;# 
   921   000FA2                     IPR2            equ	4002	;# 
   922   000FA3                     PIE3            equ	4003	;# 
   923   000FA4                     PIR3            equ	4004	;# 
   924   000FA5                     IPR3            equ	4005	;# 
   925   000FA6                     EECON1          equ	4006	;# 
   926   000FA7                     EECON2          equ	4007	;# 
   927   000FAB                     RCSTA1          equ	4011	;# 
   928   000FAB                     RCSTA           equ	4011	;# 
   929   000FAC                     TXSTA1          equ	4012	;# 
   930   000FAC                     TXSTA           equ	4012	;# 
   931   000FAD                     TXREG1          equ	4013	;# 
   932   000FAD                     TXREG           equ	4013	;# 
   933   000FAE                     RCREG1          equ	4014	;# 
   934   000FAE                     RCREG           equ	4014	;# 
   935   000FAF                     SPBRG1          equ	4015	;# 
   936   000FAF                     SPBRG           equ	4015	;# 
   937   000FB0                     PSPCON          equ	4016	;# 
   938   000FB1                     T3CON           equ	4017	;# 
   939   000FB2                     TMR3            equ	4018	;# 
   940   000FB2                     TMR3L           equ	4018	;# 
   941   000FB3                     TMR3H           equ	4019	;# 
   942   000FB4                     CMCON           equ	4020	;# 
   943   000FB5                     CVRCON          equ	4021	;# 
   944   000FB6                     ECCP1AS         equ	4022	;# 
   945   000FB7                     CCP3CON         equ	4023	;# 
   946   000FB7                     ECCP3CON        equ	4023	;# 
   947   000FB8                     CCPR3           equ	4024	;# 
   948   000FB8                     CCPR3L          equ	4024	;# 
   949   000FB9                     CCPR3H          equ	4025	;# 
   950   000FBA                     CCP2CON         equ	4026	;# 
   951   000FBA                     ECCP2CON        equ	4026	;# 
   952   000FBB                     CCPR2           equ	4027	;# 
   953   000FBB                     CCPR2L          equ	4027	;# 
   954   000FBC                     CCPR2H          equ	4028	;# 
   955   000FBD                     CCP1CON         equ	4029	;# 
   956   000FBD                     ECCP1CON        equ	4029	;# 
   957   000FBE                     CCPR1           equ	4030	;# 
   958   000FBE                     CCPR1L          equ	4030	;# 
   959   000FBF                     CCPR1H          equ	4031	;# 
   960   000FC0                     ADCON2          equ	4032	;# 
   961   000FC1                     ADCON1          equ	4033	;# 
   962   000FC2                     ADCON0          equ	4034	;# 
   963   000FC3                     ADRES           equ	4035	;# 
   964   000FC3                     ADRESL          equ	4035	;# 
   965   000FC4                     ADRESH          equ	4036	;# 
   966   000FC5                     SSP1CON2        equ	4037	;# 
   967   000FC5                     SSPCON2         equ	4037	;# 
   968   000FC6                     SSP1CON1        equ	4038	;# 
   969   000FC6                     SSPCON1         equ	4038	;# 
   970   000FC7                     SSP1STAT        equ	4039	;# 
   971   000FC7                     SSPSTAT         equ	4039	;# 
   972   000FC8                     SSP1ADD         equ	4040	;# 
   973   000FC8                     SSPADD          equ	4040	;# 
   974   000FC9                     SSP1BUF         equ	4041	;# 
   975   000FC9                     SSPBUF          equ	4041	;# 
   976   000FCA                     T2CON           equ	4042	;# 
   977   000FCB                     PR2             equ	4043	;# 
   978   000FCC                     TMR2            equ	4044	;# 
   979   000FCD                     T1CON           equ	4045	;# 
   980   000FCE                     TMR1            equ	4046	;# 
   981   000FCE                     TMR1L           equ	4046	;# 
   982   000FCF                     TMR1H           equ	4047	;# 
   983   000FD0                     RCON            equ	4048	;# 
   984   000FD1                     WDTCON          equ	4049	;# 
   985   000FD2                     ECON1           equ	4050	;# 
   986   000FD3                     OSCCON          equ	4051	;# 
   987   000FD5                     T0CON           equ	4053	;# 
   988   000FD6                     TMR0            equ	4054	;# 
   989   000FD6                     TMR0L           equ	4054	;# 
   990   000FD7                     TMR0H           equ	4055	;# 
   991   000FD8                     STATUS          equ	4056	;# 
   992   000FD9                     FSR2            equ	4057	;# 
   993   000FD9                     FSR2L           equ	4057	;# 
   994   000FDA                     FSR2H           equ	4058	;# 
   995   000FDB                     PLUSW2          equ	4059	;# 
   996   000FDC                     PREINC2         equ	4060	;# 
   997   000FDD                     POSTDEC2        equ	4061	;# 
   998   000FDE                     POSTINC2        equ	4062	;# 
   999   000FDF                     INDF2           equ	4063	;# 
  1000   000FE0                     BSR             equ	4064	;# 
  1001   000FE1                     FSR1            equ	4065	;# 
  1002   000FE1                     FSR1L           equ	4065	;# 
  1003   000FE2                     FSR1H           equ	4066	;# 
  1004   000FE3                     PLUSW1          equ	4067	;# 
  1005   000FE4                     PREINC1         equ	4068	;# 
  1006   000FE5                     POSTDEC1        equ	4069	;# 
  1007   000FE6                     POSTINC1        equ	4070	;# 
  1008   000FE7                     INDF1           equ	4071	;# 
  1009   000FE8                     WREG            equ	4072	;# 
  1010   000FE9                     FSR0            equ	4073	;# 
  1011   000FE9                     FSR0L           equ	4073	;# 
  1012   000FEA                     FSR0H           equ	4074	;# 
  1013   000FEB                     PLUSW0          equ	4075	;# 
  1014   000FEC                     PREINC0         equ	4076	;# 
  1015   000FED                     POSTDEC0        equ	4077	;# 
  1016   000FEE                     POSTINC0        equ	4078	;# 
  1017   000FEF                     INDF0           equ	4079	;# 
  1018   000FF0                     INTCON3         equ	4080	;# 
  1019   000FF1                     INTCON2         equ	4081	;# 
  1020   000FF2                     INTCON          equ	4082	;# 
  1021   000FF3                     PROD            equ	4083	;# 
  1022   000FF3                     PRODL           equ	4083	;# 
  1023   000FF4                     PRODH           equ	4084	;# 
  1024   000FF5                     TABLAT          equ	4085	;# 
  1025   000FF6                     TBLPTR          equ	4086	;# 
  1026   000FF6                     TBLPTRL         equ	4086	;# 
  1027   000FF7                     TBLPTRH         equ	4087	;# 
  1028   000FF8                     TBLPTRU         equ	4088	;# 
  1029   000FF9                     PCLAT           equ	4089	;# 
  1030   000FF9                     PC              equ	4089	;# 
  1031   000FF9                     PCL             equ	4089	;# 
  1032   000FFA                     PCLATH          equ	4090	;# 
  1033   000FFB                     PCLATU          equ	4091	;# 
  1034   000FFC                     STKPTR          equ	4092	;# 
  1035   000FFD                     TOS             equ	4093	;# 
  1036   000FFD                     TOSL            equ	4093	;# 
  1037   000FFE                     TOSH            equ	4094	;# 
  1038   000FFF                     TOSU            equ	4095	;# 
  1039   000E80                     MAADR5          equ	3712	;# 
  1040   000E81                     MAADR6          equ	3713	;# 
  1041   000E82                     MAADR3          equ	3714	;# 
  1042   000E83                     MAADR4          equ	3715	;# 
  1043   000E84                     MAADR1          equ	3716	;# 
  1044   000E85                     MAADR2          equ	3717	;# 
  1045   000E8A                     MISTAT          equ	3722	;# 
  1046   000E97                     EFLOCON         equ	3735	;# 
  1047   000E98                     EPAUS           equ	3736	;# 
  1048   000E98                     EPAUSL          equ	3736	;# 
  1049   000E99                     EPAUSH          equ	3737	;# 
  1050   000EA0                     MACON1          equ	3744	;# 
  1051   000EA2                     MACON3          equ	3746	;# 
  1052   000EA3                     MACON4          equ	3747	;# 
  1053   000EA4                     MABBIPG         equ	3748	;# 
  1054   000EA6                     MAIPG           equ	3750	;# 
  1055   000EA6                     MAIPGL          equ	3750	;# 
  1056   000EA7                     MAIPGH          equ	3751	;# 
  1057   000EAA                     MAMXFL          equ	3754	;# 
  1058   000EAA                     MAMXFLL         equ	3754	;# 
  1059   000EAB                     MAMXFLH         equ	3755	;# 
  1060   000EB2                     MICMD           equ	3762	;# 
  1061   000EB4                     MIREGADR        equ	3764	;# 
  1062   000EB6                     MIWR            equ	3766	;# 
  1063   000EB6                     MIWRL           equ	3766	;# 
  1064   000EB7                     MIWRH           equ	3767	;# 
  1065   000EB8                     MIRD            equ	3768	;# 
  1066   000EB8                     MIRDL           equ	3768	;# 
  1067   000EB9                     MIRDH           equ	3769	;# 
  1068   000EC0                     EHT0            equ	3776	;# 
  1069   000EC1                     EHT1            equ	3777	;# 
  1070   000EC2                     EHT2            equ	3778	;# 
  1071   000EC3                     EHT3            equ	3779	;# 
  1072   000EC4                     EHT4            equ	3780	;# 
  1073   000EC5                     EHT5            equ	3781	;# 
  1074   000EC6                     EHT6            equ	3782	;# 
  1075   000EC7                     EHT7            equ	3783	;# 
  1076   000EC8                     EPMM0           equ	3784	;# 
  1077   000EC9                     EPMM1           equ	3785	;# 
  1078   000ECA                     EPMM2           equ	3786	;# 
  1079   000ECB                     EPMM3           equ	3787	;# 
  1080   000ECC                     EPMM4           equ	3788	;# 
  1081   000ECD                     EPMM5           equ	3789	;# 
  1082   000ECE                     EPMM6           equ	3790	;# 
  1083   000ECF                     EPMM7           equ	3791	;# 
  1084   000ED0                     EPMCS           equ	3792	;# 
  1085   000ED0                     EPMCSL          equ	3792	;# 
  1086   000ED1                     EPMCSH          equ	3793	;# 
  1087   000ED4                     EPMO            equ	3796	;# 
  1088   000ED4                     EPMOL           equ	3796	;# 
  1089   000ED5                     EPMOH           equ	3797	;# 
  1090   000ED8                     ERXFCON         equ	3800	;# 
  1091   000ED9                     EPKTCNT         equ	3801	;# 
  1092   000EE2                     EWRPT           equ	3810	;# 
  1093   000EE2                     EWRPTL          equ	3810	;# 
  1094   000EE3                     EWRPTH          equ	3811	;# 
  1095   000EE4                     ETXST           equ	3812	;# 
  1096   000EE4                     ETXSTL          equ	3812	;# 
  1097   000EE5                     ETXSTH          equ	3813	;# 
  1098   000EE6                     ETXND           equ	3814	;# 
  1099   000EE6                     ETXNDL          equ	3814	;# 
  1100   000EE7                     ETXNDH          equ	3815	;# 
  1101   000EE8                     ERXST           equ	3816	;# 
  1102   000EE8                     ERXSTL          equ	3816	;# 
  1103   000EE9                     ERXSTH          equ	3817	;# 
  1104   000EEA                     ERXND           equ	3818	;# 
  1105   000EEA                     ERXNDL          equ	3818	;# 
  1106   000EEB                     ERXNDH          equ	3819	;# 
  1107   000EEC                     ERXRDPT         equ	3820	;# 
  1108   000EEC                     ERXRDPTL        equ	3820	;# 
  1109   000EED                     ERXRDPTH        equ	3821	;# 
  1110   000EEE                     ERXWRPT         equ	3822	;# 
  1111   000EEE                     ERXWRPTL        equ	3822	;# 
  1112   000EEF                     ERXWRPTH        equ	3823	;# 
  1113   000EF0                     EDMAST          equ	3824	;# 
  1114   000EF0                     EDMASTL         equ	3824	;# 
  1115   000EF1                     EDMASTH         equ	3825	;# 
  1116   000EF2                     EDMAND          equ	3826	;# 
  1117   000EF2                     EDMANDL         equ	3826	;# 
  1118   000EF3                     EDMANDH         equ	3827	;# 
  1119   000EF4                     EDMADST         equ	3828	;# 
  1120   000EF4                     EDMADSTL        equ	3828	;# 
  1121   000EF5                     EDMADSTH        equ	3829	;# 
  1122   000EF6                     EDMACS          equ	3830	;# 
  1123   000EF6                     EDMACSL         equ	3830	;# 
  1124   000EF7                     EDMACSH         equ	3831	;# 
  1125   000EFB                     EIE             equ	3835	;# 
  1126   000EFD                     ESTAT           equ	3837	;# 
  1127   000EFE                     ECON2           equ	3838	;# 
  1128   000F60                     EIR             equ	3936	;# 
  1129   000F61                     EDATA           equ	3937	;# 
  1130   000F62                     SSP2CON2        equ	3938	;# 
  1131   000F63                     SSP2CON1        equ	3939	;# 
  1132   000F64                     SSP2STAT        equ	3940	;# 
  1133   000F65                     SSP2ADD         equ	3941	;# 
  1134   000F66                     SSP2BUF         equ	3942	;# 
  1135   000F67                     ECCP2DEL        equ	3943	;# 
  1136   000F68                     ECCP2AS         equ	3944	;# 
  1137   000F69                     ECCP3DEL        equ	3945	;# 
  1138   000F6A                     ECCP3AS         equ	3946	;# 
  1139   000F6B                     RCSTA2          equ	3947	;# 
  1140   000F6C                     TXSTA2          equ	3948	;# 
  1141   000F6D                     TXREG2          equ	3949	;# 
  1142   000F6E                     RCREG2          equ	3950	;# 
  1143   000F6F                     SPBRG2          equ	3951	;# 
  1144   000F70                     CCP5CON         equ	3952	;# 
  1145   000F71                     CCPR5           equ	3953	;# 
  1146   000F71                     CCPR5L          equ	3953	;# 
  1147   000F72                     CCPR5H          equ	3954	;# 
  1148   000F73                     CCP4CON         equ	3955	;# 
  1149   000F74                     CCPR4           equ	3956	;# 
  1150   000F74                     CCPR4L          equ	3956	;# 
  1151   000F75                     CCPR4H          equ	3957	;# 
  1152   000F76                     T4CON           equ	3958	;# 
  1153   000F77                     PR4             equ	3959	;# 
  1154   000F78                     TMR4            equ	3960	;# 
  1155   000F79                     ECCP1DEL        equ	3961	;# 
  1156   000F7A                     ERDPT           equ	3962	;# 
  1157   000F7A                     ERDPTL          equ	3962	;# 
  1158   000F7B                     ERDPTH          equ	3963	;# 
  1159   000F7C                     BAUDCON2        equ	3964	;# 
  1160   000F7C                     BAUDCTL2        equ	3964	;# 
  1161   000F7D                     SPBRGH2         equ	3965	;# 
  1162   000F7E                     BAUDCON1        equ	3966	;# 
  1163   000F7E                     BAUDCON         equ	3966	;# 
  1164   000F7E                     BAUDCTL         equ	3966	;# 
  1165   000F7E                     BAUDCTL1        equ	3966	;# 
  1166   000F7F                     SPBRGH1         equ	3967	;# 
  1167   000F7F                     SPBRGH          equ	3967	;# 
  1168   000F80                     PORTA           equ	3968	;# 
  1169   000F81                     PORTB           equ	3969	;# 
  1170   000F82                     PORTC           equ	3970	;# 
  1171   000F83                     PORTD           equ	3971	;# 
  1172   000F84                     PORTE           equ	3972	;# 
  1173   000F85                     PORTF           equ	3973	;# 
  1174   000F86                     PORTG           equ	3974	;# 
  1175   000F87                     PORTH           equ	3975	;# 
  1176   000F88                     PORTJ           equ	3976	;# 
  1177   000F89                     LATA            equ	3977	;# 
  1178   000F8A                     LATB            equ	3978	;# 
  1179   000F8B                     LATC            equ	3979	;# 
  1180   000F8C                     LATD            equ	3980	;# 
  1181   000F8D                     LATE            equ	3981	;# 
  1182   000F8E                     LATF            equ	3982	;# 
  1183   000F8F                     LATG            equ	3983	;# 
  1184   000F90                     LATH            equ	3984	;# 
  1185   000F91                     LATJ            equ	3985	;# 
  1186   000F92                     TRISA           equ	3986	;# 
  1187   000F92                     DDRA            equ	3986	;# 
  1188   000F93                     TRISB           equ	3987	;# 
  1189   000F93                     DDRB            equ	3987	;# 
  1190   000F94                     TRISC           equ	3988	;# 
  1191   000F94                     DDRC            equ	3988	;# 
  1192   000F95                     TRISD           equ	3989	;# 
  1193   000F95                     DDRD            equ	3989	;# 
  1194   000F96                     TRISE           equ	3990	;# 
  1195   000F96                     DDRE            equ	3990	;# 
  1196   000F97                     TRISF           equ	3991	;# 
  1197   000F97                     DDRF            equ	3991	;# 
  1198   000F98                     TRISG           equ	3992	;# 
  1199   000F98                     DDRG            equ	3992	;# 
  1200   000F99                     TRISH           equ	3993	;# 
  1201   000F99                     DDRH            equ	3993	;# 
  1202   000F9A                     TRISJ           equ	3994	;# 
  1203   000F9A                     DDRJ            equ	3994	;# 
  1204   000F9B                     OSCTUNE         equ	3995	;# 
  1205   000F9C                     MEMCON          equ	3996	;# 
  1206   000F9D                     PIE1            equ	3997	;# 
  1207   000F9E                     PIR1            equ	3998	;# 
  1208   000F9F                     IPR1            equ	3999	;# 
  1209   000FA0                     PIE2            equ	4000	;# 
  1210   000FA1                     PIR2            equ	4001	;# 
  1211   000FA2                     IPR2            equ	4002	;# 
  1212   000FA3                     PIE3            equ	4003	;# 
  1213   000FA4                     PIR3            equ	4004	;# 
  1214   000FA5                     IPR3            equ	4005	;# 
  1215   000FA6                     EECON1          equ	4006	;# 
  1216   000FA7                     EECON2          equ	4007	;# 
  1217   000FAB                     RCSTA1          equ	4011	;# 
  1218   000FAB                     RCSTA           equ	4011	;# 
  1219   000FAC                     TXSTA1          equ	4012	;# 
  1220   000FAC                     TXSTA           equ	4012	;# 
  1221   000FAD                     TXREG1          equ	4013	;# 
  1222   000FAD                     TXREG           equ	4013	;# 
  1223   000FAE                     RCREG1          equ	4014	;# 
  1224   000FAE                     RCREG           equ	4014	;# 
  1225   000FAF                     SPBRG1          equ	4015	;# 
  1226   000FAF                     SPBRG           equ	4015	;# 
  1227   000FB0                     PSPCON          equ	4016	;# 
  1228   000FB1                     T3CON           equ	4017	;# 
  1229   000FB2                     TMR3            equ	4018	;# 
  1230   000FB2                     TMR3L           equ	4018	;# 
  1231   000FB3                     TMR3H           equ	4019	;# 
  1232   000FB4                     CMCON           equ	4020	;# 
  1233   000FB5                     CVRCON          equ	4021	;# 
  1234   000FB6                     ECCP1AS         equ	4022	;# 
  1235   000FB7                     CCP3CON         equ	4023	;# 
  1236   000FB7                     ECCP3CON        equ	4023	;# 
  1237   000FB8                     CCPR3           equ	4024	;# 
  1238   000FB8                     CCPR3L          equ	4024	;# 
  1239   000FB9                     CCPR3H          equ	4025	;# 
  1240   000FBA                     CCP2CON         equ	4026	;# 
  1241   000FBA                     ECCP2CON        equ	4026	;# 
  1242   000FBB                     CCPR2           equ	4027	;# 
  1243   000FBB                     CCPR2L          equ	4027	;# 
  1244   000FBC                     CCPR2H          equ	4028	;# 
  1245   000FBD                     CCP1CON         equ	4029	;# 
  1246   000FBD                     ECCP1CON        equ	4029	;# 
  1247   000FBE                     CCPR1           equ	4030	;# 
  1248   000FBE                     CCPR1L          equ	4030	;# 
  1249   000FBF                     CCPR1H          equ	4031	;# 
  1250   000FC0                     ADCON2          equ	4032	;# 
  1251   000FC1                     ADCON1          equ	4033	;# 
  1252   000FC2                     ADCON0          equ	4034	;# 
  1253   000FC3                     ADRES           equ	4035	;# 
  1254   000FC3                     ADRESL          equ	4035	;# 
  1255   000FC4                     ADRESH          equ	4036	;# 
  1256   000FC5                     SSP1CON2        equ	4037	;# 
  1257   000FC5                     SSPCON2         equ	4037	;# 
  1258   000FC6                     SSP1CON1        equ	4038	;# 
  1259   000FC6                     SSPCON1         equ	4038	;# 
  1260   000FC7                     SSP1STAT        equ	4039	;# 
  1261   000FC7                     SSPSTAT         equ	4039	;# 
  1262   000FC8                     SSP1ADD         equ	4040	;# 
  1263   000FC8                     SSPADD          equ	4040	;# 
  1264   000FC9                     SSP1BUF         equ	4041	;# 
  1265   000FC9                     SSPBUF          equ	4041	;# 
  1266   000FCA                     T2CON           equ	4042	;# 
  1267   000FCB                     PR2             equ	4043	;# 
  1268   000FCC                     TMR2            equ	4044	;# 
  1269   000FCD                     T1CON           equ	4045	;# 
  1270   000FCE                     TMR1            equ	4046	;# 
  1271   000FCE                     TMR1L           equ	4046	;# 
  1272   000FCF                     TMR1H           equ	4047	;# 
  1273   000FD0                     RCON            equ	4048	;# 
  1274   000FD1                     WDTCON          equ	4049	;# 
  1275   000FD2                     ECON1           equ	4050	;# 
  1276   000FD3                     OSCCON          equ	4051	;# 
  1277   000FD5                     T0CON           equ	4053	;# 
  1278   000FD6                     TMR0            equ	4054	;# 
  1279   000FD6                     TMR0L           equ	4054	;# 
  1280   000FD7                     TMR0H           equ	4055	;# 
  1281   000FD8                     STATUS          equ	4056	;# 
  1282   000FD9                     FSR2            equ	4057	;# 
  1283   000FD9                     FSR2L           equ	4057	;# 
  1284   000FDA                     FSR2H           equ	4058	;# 
  1285   000FDB                     PLUSW2          equ	4059	;# 
  1286   000FDC                     PREINC2         equ	4060	;# 
  1287   000FDD                     POSTDEC2        equ	4061	;# 
  1288   000FDE                     POSTINC2        equ	4062	;# 
  1289   000FDF                     INDF2           equ	4063	;# 
  1290   000FE0                     BSR             equ	4064	;# 
  1291   000FE1                     FSR1            equ	4065	;# 
  1292   000FE1                     FSR1L           equ	4065	;# 
  1293   000FE2                     FSR1H           equ	4066	;# 
  1294   000FE3                     PLUSW1          equ	4067	;# 
  1295   000FE4                     PREINC1         equ	4068	;# 
  1296   000FE5                     POSTDEC1        equ	4069	;# 
  1297   000FE6                     POSTINC1        equ	4070	;# 
  1298   000FE7                     INDF1           equ	4071	;# 
  1299   000FE8                     WREG            equ	4072	;# 
  1300   000FE9                     FSR0            equ	4073	;# 
  1301   000FE9                     FSR0L           equ	4073	;# 
  1302   000FEA                     FSR0H           equ	4074	;# 
  1303   000FEB                     PLUSW0          equ	4075	;# 
  1304   000FEC                     PREINC0         equ	4076	;# 
  1305   000FED                     POSTDEC0        equ	4077	;# 
  1306   000FEE                     POSTINC0        equ	4078	;# 
  1307   000FEF                     INDF0           equ	4079	;# 
  1308   000FF0                     INTCON3         equ	4080	;# 
  1309   000FF1                     INTCON2         equ	4081	;# 
  1310   000FF2                     INTCON          equ	4082	;# 
  1311   000FF3                     PROD            equ	4083	;# 
  1312   000FF3                     PRODL           equ	4083	;# 
  1313   000FF4                     PRODH           equ	4084	;# 
  1314   000FF5                     TABLAT          equ	4085	;# 
  1315   000FF6                     TBLPTR          equ	4086	;# 
  1316   000FF6                     TBLPTRL         equ	4086	;# 
  1317   000FF7                     TBLPTRH         equ	4087	;# 
  1318   000FF8                     TBLPTRU         equ	4088	;# 
  1319   000FF9                     PCLAT           equ	4089	;# 
  1320   000FF9                     PC              equ	4089	;# 
  1321   000FF9                     PCL             equ	4089	;# 
  1322   000FFA                     PCLATH          equ	4090	;# 
  1323   000FFB                     PCLATU          equ	4091	;# 
  1324   000FFC                     STKPTR          equ	4092	;# 
  1325   000FFD                     TOS             equ	4093	;# 
  1326   000FFD                     TOSL            equ	4093	;# 
  1327   000FFE                     TOSH            equ	4094	;# 
  1328   000FFF                     TOSU            equ	4095	;# 
  1329   000E80                     MAADR5          equ	3712	;# 
  1330   000E81                     MAADR6          equ	3713	;# 
  1331   000E82                     MAADR3          equ	3714	;# 
  1332   000E83                     MAADR4          equ	3715	;# 
  1333   000E84                     MAADR1          equ	3716	;# 
  1334   000E85                     MAADR2          equ	3717	;# 
  1335   000E8A                     MISTAT          equ	3722	;# 
  1336   000E97                     EFLOCON         equ	3735	;# 
  1337   000E98                     EPAUS           equ	3736	;# 
  1338   000E98                     EPAUSL          equ	3736	;# 
  1339   000E99                     EPAUSH          equ	3737	;# 
  1340   000EA0                     MACON1          equ	3744	;# 
  1341   000EA2                     MACON3          equ	3746	;# 
  1342   000EA3                     MACON4          equ	3747	;# 
  1343   000EA4                     MABBIPG         equ	3748	;# 
  1344   000EA6                     MAIPG           equ	3750	;# 
  1345   000EA6                     MAIPGL          equ	3750	;# 
  1346   000EA7                     MAIPGH          equ	3751	;# 
  1347   000EAA                     MAMXFL          equ	3754	;# 
  1348   000EAA                     MAMXFLL         equ	3754	;# 
  1349   000EAB                     MAMXFLH         equ	3755	;# 
  1350   000EB2                     MICMD           equ	3762	;# 
  1351   000EB4                     MIREGADR        equ	3764	;# 
  1352   000EB6                     MIWR            equ	3766	;# 
  1353   000EB6                     MIWRL           equ	3766	;# 
  1354   000EB7                     MIWRH           equ	3767	;# 
  1355   000EB8                     MIRD            equ	3768	;# 
  1356   000EB8                     MIRDL           equ	3768	;# 
  1357   000EB9                     MIRDH           equ	3769	;# 
  1358   000EC0                     EHT0            equ	3776	;# 
  1359   000EC1                     EHT1            equ	3777	;# 
  1360   000EC2                     EHT2            equ	3778	;# 
  1361   000EC3                     EHT3            equ	3779	;# 
  1362   000EC4                     EHT4            equ	3780	;# 
  1363   000EC5                     EHT5            equ	3781	;# 
  1364   000EC6                     EHT6            equ	3782	;# 
  1365   000EC7                     EHT7            equ	3783	;# 
  1366   000EC8                     EPMM0           equ	3784	;# 
  1367   000EC9                     EPMM1           equ	3785	;# 
  1368   000ECA                     EPMM2           equ	3786	;# 
  1369   000ECB                     EPMM3           equ	3787	;# 
  1370   000ECC                     EPMM4           equ	3788	;# 
  1371   000ECD                     EPMM5           equ	3789	;# 
  1372   000ECE                     EPMM6           equ	3790	;# 
  1373   000ECF                     EPMM7           equ	3791	;# 
  1374   000ED0                     EPMCS           equ	3792	;# 
  1375   000ED0                     EPMCSL          equ	3792	;# 
  1376   000ED1                     EPMCSH          equ	3793	;# 
  1377   000ED4                     EPMO            equ	3796	;# 
  1378   000ED4                     EPMOL           equ	3796	;# 
  1379   000ED5                     EPMOH           equ	3797	;# 
  1380   000ED8                     ERXFCON         equ	3800	;# 
  1381   000ED9                     EPKTCNT         equ	3801	;# 
  1382   000EE2                     EWRPT           equ	3810	;# 
  1383   000EE2                     EWRPTL          equ	3810	;# 
  1384   000EE3                     EWRPTH          equ	3811	;# 
  1385   000EE4                     ETXST           equ	3812	;# 
  1386   000EE4                     ETXSTL          equ	3812	;# 
  1387   000EE5                     ETXSTH          equ	3813	;# 
  1388   000EE6                     ETXND           equ	3814	;# 
  1389   000EE6                     ETXNDL          equ	3814	;# 
  1390   000EE7                     ETXNDH          equ	3815	;# 
  1391   000EE8                     ERXST           equ	3816	;# 
  1392   000EE8                     ERXSTL          equ	3816	;# 
  1393   000EE9                     ERXSTH          equ	3817	;# 
  1394   000EEA                     ERXND           equ	3818	;# 
  1395   000EEA                     ERXNDL          equ	3818	;# 
  1396   000EEB                     ERXNDH          equ	3819	;# 
  1397   000EEC                     ERXRDPT         equ	3820	;# 
  1398   000EEC                     ERXRDPTL        equ	3820	;# 
  1399   000EED                     ERXRDPTH        equ	3821	;# 
  1400   000EEE                     ERXWRPT         equ	3822	;# 
  1401   000EEE                     ERXWRPTL        equ	3822	;# 
  1402   000EEF                     ERXWRPTH        equ	3823	;# 
  1403   000EF0                     EDMAST          equ	3824	;# 
  1404   000EF0                     EDMASTL         equ	3824	;# 
  1405   000EF1                     EDMASTH         equ	3825	;# 
  1406   000EF2                     EDMAND          equ	3826	;# 
  1407   000EF2                     EDMANDL         equ	3826	;# 
  1408   000EF3                     EDMANDH         equ	3827	;# 
  1409   000EF4                     EDMADST         equ	3828	;# 
  1410   000EF4                     EDMADSTL        equ	3828	;# 
  1411   000EF5                     EDMADSTH        equ	3829	;# 
  1412   000EF6                     EDMACS          equ	3830	;# 
  1413   000EF6                     EDMACSL         equ	3830	;# 
  1414   000EF7                     EDMACSH         equ	3831	;# 
  1415   000EFB                     EIE             equ	3835	;# 
  1416   000EFD                     ESTAT           equ	3837	;# 
  1417   000EFE                     ECON2           equ	3838	;# 
  1418   000F60                     EIR             equ	3936	;# 
  1419   000F61                     EDATA           equ	3937	;# 
  1420   000F62                     SSP2CON2        equ	3938	;# 
  1421   000F63                     SSP2CON1        equ	3939	;# 
  1422   000F64                     SSP2STAT        equ	3940	;# 
  1423   000F65                     SSP2ADD         equ	3941	;# 
  1424   000F66                     SSP2BUF         equ	3942	;# 
  1425   000F67                     ECCP2DEL        equ	3943	;# 
  1426   000F68                     ECCP2AS         equ	3944	;# 
  1427   000F69                     ECCP3DEL        equ	3945	;# 
  1428   000F6A                     ECCP3AS         equ	3946	;# 
  1429   000F6B                     RCSTA2          equ	3947	;# 
  1430   000F6C                     TXSTA2          equ	3948	;# 
  1431   000F6D                     TXREG2          equ	3949	;# 
  1432   000F6E                     RCREG2          equ	3950	;# 
  1433   000F6F                     SPBRG2          equ	3951	;# 
  1434   000F70                     CCP5CON         equ	3952	;# 
  1435   000F71                     CCPR5           equ	3953	;# 
  1436   000F71                     CCPR5L          equ	3953	;# 
  1437   000F72                     CCPR5H          equ	3954	;# 
  1438   000F73                     CCP4CON         equ	3955	;# 
  1439   000F74                     CCPR4           equ	3956	;# 
  1440   000F74                     CCPR4L          equ	3956	;# 
  1441   000F75                     CCPR4H          equ	3957	;# 
  1442   000F76                     T4CON           equ	3958	;# 
  1443   000F77                     PR4             equ	3959	;# 
  1444   000F78                     TMR4            equ	3960	;# 
  1445   000F79                     ECCP1DEL        equ	3961	;# 
  1446   000F7A                     ERDPT           equ	3962	;# 
  1447   000F7A                     ERDPTL          equ	3962	;# 
  1448   000F7B                     ERDPTH          equ	3963	;# 
  1449   000F7C                     BAUDCON2        equ	3964	;# 
  1450   000F7C                     BAUDCTL2        equ	3964	;# 
  1451   000F7D                     SPBRGH2         equ	3965	;# 
  1452   000F7E                     BAUDCON1        equ	3966	;# 
  1453   000F7E                     BAUDCON         equ	3966	;# 
  1454   000F7E                     BAUDCTL         equ	3966	;# 
  1455   000F7E                     BAUDCTL1        equ	3966	;# 
  1456   000F7F                     SPBRGH1         equ	3967	;# 
  1457   000F7F                     SPBRGH          equ	3967	;# 
  1458   000F80                     PORTA           equ	3968	;# 
  1459   000F81                     PORTB           equ	3969	;# 
  1460   000F82                     PORTC           equ	3970	;# 
  1461   000F83                     PORTD           equ	3971	;# 
  1462   000F84                     PORTE           equ	3972	;# 
  1463   000F85                     PORTF           equ	3973	;# 
  1464   000F86                     PORTG           equ	3974	;# 
  1465   000F87                     PORTH           equ	3975	;# 
  1466   000F88                     PORTJ           equ	3976	;# 
  1467   000F89                     LATA            equ	3977	;# 
  1468   000F8A                     LATB            equ	3978	;# 
  1469   000F8B                     LATC            equ	3979	;# 
  1470   000F8C                     LATD            equ	3980	;# 
  1471   000F8D                     LATE            equ	3981	;# 
  1472   000F8E                     LATF            equ	3982	;# 
  1473   000F8F                     LATG            equ	3983	;# 
  1474   000F90                     LATH            equ	3984	;# 
  1475   000F91                     LATJ            equ	3985	;# 
  1476   000F92                     TRISA           equ	3986	;# 
  1477   000F92                     DDRA            equ	3986	;# 
  1478   000F93                     TRISB           equ	3987	;# 
  1479   000F93                     DDRB            equ	3987	;# 
  1480   000F94                     TRISC           equ	3988	;# 
  1481   000F94                     DDRC            equ	3988	;# 
  1482   000F95                     TRISD           equ	3989	;# 
  1483   000F95                     DDRD            equ	3989	;# 
  1484   000F96                     TRISE           equ	3990	;# 
  1485   000F96                     DDRE            equ	3990	;# 
  1486   000F97                     TRISF           equ	3991	;# 
  1487   000F97                     DDRF            equ	3991	;# 
  1488   000F98                     TRISG           equ	3992	;# 
  1489   000F98                     DDRG            equ	3992	;# 
  1490   000F99                     TRISH           equ	3993	;# 
  1491   000F99                     DDRH            equ	3993	;# 
  1492   000F9A                     TRISJ           equ	3994	;# 
  1493   000F9A                     DDRJ            equ	3994	;# 
  1494   000F9B                     OSCTUNE         equ	3995	;# 
  1495   000F9C                     MEMCON          equ	3996	;# 
  1496   000F9D                     PIE1            equ	3997	;# 
  1497   000F9E                     PIR1            equ	3998	;# 
  1498   000F9F                     IPR1            equ	3999	;# 
  1499   000FA0                     PIE2            equ	4000	;# 
  1500   000FA1                     PIR2            equ	4001	;# 
  1501   000FA2                     IPR2            equ	4002	;# 
  1502   000FA3                     PIE3            equ	4003	;# 
  1503   000FA4                     PIR3            equ	4004	;# 
  1504   000FA5                     IPR3            equ	4005	;# 
  1505   000FA6                     EECON1          equ	4006	;# 
  1506   000FA7                     EECON2          equ	4007	;# 
  1507   000FAB                     RCSTA1          equ	4011	;# 
  1508   000FAB                     RCSTA           equ	4011	;# 
  1509   000FAC                     TXSTA1          equ	4012	;# 
  1510   000FAC                     TXSTA           equ	4012	;# 
  1511   000FAD                     TXREG1          equ	4013	;# 
  1512   000FAD                     TXREG           equ	4013	;# 
  1513   000FAE                     RCREG1          equ	4014	;# 
  1514   000FAE                     RCREG           equ	4014	;# 
  1515   000FAF                     SPBRG1          equ	4015	;# 
  1516   000FAF                     SPBRG           equ	4015	;# 
  1517   000FB0                     PSPCON          equ	4016	;# 
  1518   000FB1                     T3CON           equ	4017	;# 
  1519   000FB2                     TMR3            equ	4018	;# 
  1520   000FB2                     TMR3L           equ	4018	;# 
  1521   000FB3                     TMR3H           equ	4019	;# 
  1522   000FB4                     CMCON           equ	4020	;# 
  1523   000FB5                     CVRCON          equ	4021	;# 
  1524   000FB6                     ECCP1AS         equ	4022	;# 
  1525   000FB7                     CCP3CON         equ	4023	;# 
  1526   000FB7                     ECCP3CON        equ	4023	;# 
  1527   000FB8                     CCPR3           equ	4024	;# 
  1528   000FB8                     CCPR3L          equ	4024	;# 
  1529   000FB9                     CCPR3H          equ	4025	;# 
  1530   000FBA                     CCP2CON         equ	4026	;# 
  1531   000FBA                     ECCP2CON        equ	4026	;# 
  1532   000FBB                     CCPR2           equ	4027	;# 
  1533   000FBB                     CCPR2L          equ	4027	;# 
  1534   000FBC                     CCPR2H          equ	4028	;# 
  1535   000FBD                     CCP1CON         equ	4029	;# 
  1536   000FBD                     ECCP1CON        equ	4029	;# 
  1537   000FBE                     CCPR1           equ	4030	;# 
  1538   000FBE                     CCPR1L          equ	4030	;# 
  1539   000FBF                     CCPR1H          equ	4031	;# 
  1540   000FC0                     ADCON2          equ	4032	;# 
  1541   000FC1                     ADCON1          equ	4033	;# 
  1542   000FC2                     ADCON0          equ	4034	;# 
  1543   000FC3                     ADRES           equ	4035	;# 
  1544   000FC3                     ADRESL          equ	4035	;# 
  1545   000FC4                     ADRESH          equ	4036	;# 
  1546   000FC5                     SSP1CON2        equ	4037	;# 
  1547   000FC5                     SSPCON2         equ	4037	;# 
  1548   000FC6                     SSP1CON1        equ	4038	;# 
  1549   000FC6                     SSPCON1         equ	4038	;# 
  1550   000FC7                     SSP1STAT        equ	4039	;# 
  1551   000FC7                     SSPSTAT         equ	4039	;# 
  1552   000FC8                     SSP1ADD         equ	4040	;# 
  1553   000FC8                     SSPADD          equ	4040	;# 
  1554   000FC9                     SSP1BUF         equ	4041	;# 
  1555   000FC9                     SSPBUF          equ	4041	;# 
  1556   000FCA                     T2CON           equ	4042	;# 
  1557   000FCB                     PR2             equ	4043	;# 
  1558   000FCC                     TMR2            equ	4044	;# 
  1559   000FCD                     T1CON           equ	4045	;# 
  1560   000FCE                     TMR1            equ	4046	;# 
  1561   000FCE                     TMR1L           equ	4046	;# 
  1562   000FCF                     TMR1H           equ	4047	;# 
  1563   000FD0                     RCON            equ	4048	;# 
  1564   000FD1                     WDTCON          equ	4049	;# 
  1565   000FD2                     ECON1           equ	4050	;# 
  1566   000FD3                     OSCCON          equ	4051	;# 
  1567   000FD5                     T0CON           equ	4053	;# 
  1568   000FD6                     TMR0            equ	4054	;# 
  1569   000FD6                     TMR0L           equ	4054	;# 
  1570   000FD7                     TMR0H           equ	4055	;# 
  1571   000FD8                     STATUS          equ	4056	;# 
  1572   000FD9                     FSR2            equ	4057	;# 
  1573   000FD9                     FSR2L           equ	4057	;# 
  1574   000FDA                     FSR2H           equ	4058	;# 
  1575   000FDB                     PLUSW2          equ	4059	;# 
  1576   000FDC                     PREINC2         equ	4060	;# 
  1577   000FDD                     POSTDEC2        equ	4061	;# 
  1578   000FDE                     POSTINC2        equ	4062	;# 
  1579   000FDF                     INDF2           equ	4063	;# 
  1580   000FE0                     BSR             equ	4064	;# 
  1581   000FE1                     FSR1            equ	4065	;# 
  1582   000FE1                     FSR1L           equ	4065	;# 
  1583   000FE2                     FSR1H           equ	4066	;# 
  1584   000FE3                     PLUSW1          equ	4067	;# 
  1585   000FE4                     PREINC1         equ	4068	;# 
  1586   000FE5                     POSTDEC1        equ	4069	;# 
  1587   000FE6                     POSTINC1        equ	4070	;# 
  1588   000FE7                     INDF1           equ	4071	;# 
  1589   000FE8                     WREG            equ	4072	;# 
  1590   000FE9                     FSR0            equ	4073	;# 
  1591   000FE9                     FSR0L           equ	4073	;# 
  1592   000FEA                     FSR0H           equ	4074	;# 
  1593   000FEB                     PLUSW0          equ	4075	;# 
  1594   000FEC                     PREINC0         equ	4076	;# 
  1595   000FED                     POSTDEC0        equ	4077	;# 
  1596   000FEE                     POSTINC0        equ	4078	;# 
  1597   000FEF                     INDF0           equ	4079	;# 
  1598   000FF0                     INTCON3         equ	4080	;# 
  1599   000FF1                     INTCON2         equ	4081	;# 
  1600   000FF2                     INTCON          equ	4082	;# 
  1601   000FF3                     PROD            equ	4083	;# 
  1602   000FF3                     PRODL           equ	4083	;# 
  1603   000FF4                     PRODH           equ	4084	;# 
  1604   000FF5                     TABLAT          equ	4085	;# 
  1605   000FF6                     TBLPTR          equ	4086	;# 
  1606   000FF6                     TBLPTRL         equ	4086	;# 
  1607   000FF7                     TBLPTRH         equ	4087	;# 
  1608   000FF8                     TBLPTRU         equ	4088	;# 
  1609   000FF9                     PCLAT           equ	4089	;# 
  1610   000FF9                     PC              equ	4089	;# 
  1611   000FF9                     PCL             equ	4089	;# 
  1612   000FFA                     PCLATH          equ	4090	;# 
  1613   000FFB                     PCLATU          equ	4091	;# 
  1614   000FFC                     STKPTR          equ	4092	;# 
  1615   000FFD                     TOS             equ	4093	;# 
  1616   000FFD                     TOSL            equ	4093	;# 
  1617   000FFE                     TOSH            equ	4094	;# 
  1618   000FFF                     TOSU            equ	4095	;# 
  1619   000E80                     MAADR5          equ	3712	;# 
  1620   000E81                     MAADR6          equ	3713	;# 
  1621   000E82                     MAADR3          equ	3714	;# 
  1622   000E83                     MAADR4          equ	3715	;# 
  1623   000E84                     MAADR1          equ	3716	;# 
  1624   000E85                     MAADR2          equ	3717	;# 
  1625   000E8A                     MISTAT          equ	3722	;# 
  1626   000E97                     EFLOCON         equ	3735	;# 
  1627   000E98                     EPAUS           equ	3736	;# 
  1628   000E98                     EPAUSL          equ	3736	;# 
  1629   000E99                     EPAUSH          equ	3737	;# 
  1630   000EA0                     MACON1          equ	3744	;# 
  1631   000EA2                     MACON3          equ	3746	;# 
  1632   000EA3                     MACON4          equ	3747	;# 
  1633   000EA4                     MABBIPG         equ	3748	;# 
  1634   000EA6                     MAIPG           equ	3750	;# 
  1635   000EA6                     MAIPGL          equ	3750	;# 
  1636   000EA7                     MAIPGH          equ	3751	;# 
  1637   000EAA                     MAMXFL          equ	3754	;# 
  1638   000EAA                     MAMXFLL         equ	3754	;# 
  1639   000EAB                     MAMXFLH         equ	3755	;# 
  1640   000EB2                     MICMD           equ	3762	;# 
  1641   000EB4                     MIREGADR        equ	3764	;# 
  1642   000EB6                     MIWR            equ	3766	;# 
  1643   000EB6                     MIWRL           equ	3766	;# 
  1644   000EB7                     MIWRH           equ	3767	;# 
  1645   000EB8                     MIRD            equ	3768	;# 
  1646   000EB8                     MIRDL           equ	3768	;# 
  1647   000EB9                     MIRDH           equ	3769	;# 
  1648   000EC0                     EHT0            equ	3776	;# 
  1649   000EC1                     EHT1            equ	3777	;# 
  1650   000EC2                     EHT2            equ	3778	;# 
  1651   000EC3                     EHT3            equ	3779	;# 
  1652   000EC4                     EHT4            equ	3780	;# 
  1653   000EC5                     EHT5            equ	3781	;# 
  1654   000EC6                     EHT6            equ	3782	;# 
  1655   000EC7                     EHT7            equ	3783	;# 
  1656   000EC8                     EPMM0           equ	3784	;# 
  1657   000EC9                     EPMM1           equ	3785	;# 
  1658   000ECA                     EPMM2           equ	3786	;# 
  1659   000ECB                     EPMM3           equ	3787	;# 
  1660   000ECC                     EPMM4           equ	3788	;# 
  1661   000ECD                     EPMM5           equ	3789	;# 
  1662   000ECE                     EPMM6           equ	3790	;# 
  1663   000ECF                     EPMM7           equ	3791	;# 
  1664   000ED0                     EPMCS           equ	3792	;# 
  1665   000ED0                     EPMCSL          equ	3792	;# 
  1666   000ED1                     EPMCSH          equ	3793	;# 
  1667   000ED4                     EPMO            equ	3796	;# 
  1668   000ED4                     EPMOL           equ	3796	;# 
  1669   000ED5                     EPMOH           equ	3797	;# 
  1670   000ED8                     ERXFCON         equ	3800	;# 
  1671   000ED9                     EPKTCNT         equ	3801	;# 
  1672   000EE2                     EWRPT           equ	3810	;# 
  1673   000EE2                     EWRPTL          equ	3810	;# 
  1674   000EE3                     EWRPTH          equ	3811	;# 
  1675   000EE4                     ETXST           equ	3812	;# 
  1676   000EE4                     ETXSTL          equ	3812	;# 
  1677   000EE5                     ETXSTH          equ	3813	;# 
  1678   000EE6                     ETXND           equ	3814	;# 
  1679   000EE6                     ETXNDL          equ	3814	;# 
  1680   000EE7                     ETXNDH          equ	3815	;# 
  1681   000EE8                     ERXST           equ	3816	;# 
  1682   000EE8                     ERXSTL          equ	3816	;# 
  1683   000EE9                     ERXSTH          equ	3817	;# 
  1684   000EEA                     ERXND           equ	3818	;# 
  1685   000EEA                     ERXNDL          equ	3818	;# 
  1686   000EEB                     ERXNDH          equ	3819	;# 
  1687   000EEC                     ERXRDPT         equ	3820	;# 
  1688   000EEC                     ERXRDPTL        equ	3820	;# 
  1689   000EED                     ERXRDPTH        equ	3821	;# 
  1690   000EEE                     ERXWRPT         equ	3822	;# 
  1691   000EEE                     ERXWRPTL        equ	3822	;# 
  1692   000EEF                     ERXWRPTH        equ	3823	;# 
  1693   000EF0                     EDMAST          equ	3824	;# 
  1694   000EF0                     EDMASTL         equ	3824	;# 
  1695   000EF1                     EDMASTH         equ	3825	;# 
  1696   000EF2                     EDMAND          equ	3826	;# 
  1697   000EF2                     EDMANDL         equ	3826	;# 
  1698   000EF3                     EDMANDH         equ	3827	;# 
  1699   000EF4                     EDMADST         equ	3828	;# 
  1700   000EF4                     EDMADSTL        equ	3828	;# 
  1701   000EF5                     EDMADSTH        equ	3829	;# 
  1702   000EF6                     EDMACS          equ	3830	;# 
  1703   000EF6                     EDMACSL         equ	3830	;# 
  1704   000EF7                     EDMACSH         equ	3831	;# 
  1705   000EFB                     EIE             equ	3835	;# 
  1706   000EFD                     ESTAT           equ	3837	;# 
  1707   000EFE                     ECON2           equ	3838	;# 
  1708   000F60                     EIR             equ	3936	;# 
  1709   000F61                     EDATA           equ	3937	;# 
  1710   000F62                     SSP2CON2        equ	3938	;# 
  1711   000F63                     SSP2CON1        equ	3939	;# 
  1712   000F64                     SSP2STAT        equ	3940	;# 
  1713   000F65                     SSP2ADD         equ	3941	;# 
  1714   000F66                     SSP2BUF         equ	3942	;# 
  1715   000F67                     ECCP2DEL        equ	3943	;# 
  1716   000F68                     ECCP2AS         equ	3944	;# 
  1717   000F69                     ECCP3DEL        equ	3945	;# 
  1718   000F6A                     ECCP3AS         equ	3946	;# 
  1719   000F6B                     RCSTA2          equ	3947	;# 
  1720   000F6C                     TXSTA2          equ	3948	;# 
  1721   000F6D                     TXREG2          equ	3949	;# 
  1722   000F6E                     RCREG2          equ	3950	;# 
  1723   000F6F                     SPBRG2          equ	3951	;# 
  1724   000F70                     CCP5CON         equ	3952	;# 
  1725   000F71                     CCPR5           equ	3953	;# 
  1726   000F71                     CCPR5L          equ	3953	;# 
  1727   000F72                     CCPR5H          equ	3954	;# 
  1728   000F73                     CCP4CON         equ	3955	;# 
  1729   000F74                     CCPR4           equ	3956	;# 
  1730   000F74                     CCPR4L          equ	3956	;# 
  1731   000F75                     CCPR4H          equ	3957	;# 
  1732   000F76                     T4CON           equ	3958	;# 
  1733   000F77                     PR4             equ	3959	;# 
  1734   000F78                     TMR4            equ	3960	;# 
  1735   000F79                     ECCP1DEL        equ	3961	;# 
  1736   000F7A                     ERDPT           equ	3962	;# 
  1737   000F7A                     ERDPTL          equ	3962	;# 
  1738   000F7B                     ERDPTH          equ	3963	;# 
  1739   000F7C                     BAUDCON2        equ	3964	;# 
  1740   000F7C                     BAUDCTL2        equ	3964	;# 
  1741   000F7D                     SPBRGH2         equ	3965	;# 
  1742   000F7E                     BAUDCON1        equ	3966	;# 
  1743   000F7E                     BAUDCON         equ	3966	;# 
  1744   000F7E                     BAUDCTL         equ	3966	;# 
  1745   000F7E                     BAUDCTL1        equ	3966	;# 
  1746   000F7F                     SPBRGH1         equ	3967	;# 
  1747   000F7F                     SPBRGH          equ	3967	;# 
  1748   000F80                     PORTA           equ	3968	;# 
  1749   000F81                     PORTB           equ	3969	;# 
  1750   000F82                     PORTC           equ	3970	;# 
  1751   000F83                     PORTD           equ	3971	;# 
  1752   000F84                     PORTE           equ	3972	;# 
  1753   000F85                     PORTF           equ	3973	;# 
  1754   000F86                     PORTG           equ	3974	;# 
  1755   000F87                     PORTH           equ	3975	;# 
  1756   000F88                     PORTJ           equ	3976	;# 
  1757   000F89                     LATA            equ	3977	;# 
  1758   000F8A                     LATB            equ	3978	;# 
  1759   000F8B                     LATC            equ	3979	;# 
  1760   000F8C                     LATD            equ	3980	;# 
  1761   000F8D                     LATE            equ	3981	;# 
  1762   000F8E                     LATF            equ	3982	;# 
  1763   000F8F                     LATG            equ	3983	;# 
  1764   000F90                     LATH            equ	3984	;# 
  1765   000F91                     LATJ            equ	3985	;# 
  1766   000F92                     TRISA           equ	3986	;# 
  1767   000F92                     DDRA            equ	3986	;# 
  1768   000F93                     TRISB           equ	3987	;# 
  1769   000F93                     DDRB            equ	3987	;# 
  1770   000F94                     TRISC           equ	3988	;# 
  1771   000F94                     DDRC            equ	3988	;# 
  1772   000F95                     TRISD           equ	3989	;# 
  1773   000F95                     DDRD            equ	3989	;# 
  1774   000F96                     TRISE           equ	3990	;# 
  1775   000F96                     DDRE            equ	3990	;# 
  1776   000F97                     TRISF           equ	3991	;# 
  1777   000F97                     DDRF            equ	3991	;# 
  1778   000F98                     TRISG           equ	3992	;# 
  1779   000F98                     DDRG            equ	3992	;# 
  1780   000F99                     TRISH           equ	3993	;# 
  1781   000F99                     DDRH            equ	3993	;# 
  1782   000F9A                     TRISJ           equ	3994	;# 
  1783   000F9A                     DDRJ            equ	3994	;# 
  1784   000F9B                     OSCTUNE         equ	3995	;# 
  1785   000F9C                     MEMCON          equ	3996	;# 
  1786   000F9D                     PIE1            equ	3997	;# 
  1787   000F9E                     PIR1            equ	3998	;# 
  1788   000F9F                     IPR1            equ	3999	;# 
  1789   000FA0                     PIE2            equ	4000	;# 
  1790   000FA1                     PIR2            equ	4001	;# 
  1791   000FA2                     IPR2            equ	4002	;# 
  1792   000FA3                     PIE3            equ	4003	;# 
  1793   000FA4                     PIR3            equ	4004	;# 
  1794   000FA5                     IPR3            equ	4005	;# 
  1795   000FA6                     EECON1          equ	4006	;# 
  1796   000FA7                     EECON2          equ	4007	;# 
  1797   000FAB                     RCSTA1          equ	4011	;# 
  1798   000FAB                     RCSTA           equ	4011	;# 
  1799   000FAC                     TXSTA1          equ	4012	;# 
  1800   000FAC                     TXSTA           equ	4012	;# 
  1801   000FAD                     TXREG1          equ	4013	;# 
  1802   000FAD                     TXREG           equ	4013	;# 
  1803   000FAE                     RCREG1          equ	4014	;# 
  1804   000FAE                     RCREG           equ	4014	;# 
  1805   000FAF                     SPBRG1          equ	4015	;# 
  1806   000FAF                     SPBRG           equ	4015	;# 
  1807   000FB0                     PSPCON          equ	4016	;# 
  1808   000FB1                     T3CON           equ	4017	;# 
  1809   000FB2                     TMR3            equ	4018	;# 
  1810   000FB2                     TMR3L           equ	4018	;# 
  1811   000FB3                     TMR3H           equ	4019	;# 
  1812   000FB4                     CMCON           equ	4020	;# 
  1813   000FB5                     CVRCON          equ	4021	;# 
  1814   000FB6                     ECCP1AS         equ	4022	;# 
  1815   000FB7                     CCP3CON         equ	4023	;# 
  1816   000FB7                     ECCP3CON        equ	4023	;# 
  1817   000FB8                     CCPR3           equ	4024	;# 
  1818   000FB8                     CCPR3L          equ	4024	;# 
  1819   000FB9                     CCPR3H          equ	4025	;# 
  1820   000FBA                     CCP2CON         equ	4026	;# 
  1821   000FBA                     ECCP2CON        equ	4026	;# 
  1822   000FBB                     CCPR2           equ	4027	;# 
  1823   000FBB                     CCPR2L          equ	4027	;# 
  1824   000FBC                     CCPR2H          equ	4028	;# 
  1825   000FBD                     CCP1CON         equ	4029	;# 
  1826   000FBD                     ECCP1CON        equ	4029	;# 
  1827   000FBE                     CCPR1           equ	4030	;# 
  1828   000FBE                     CCPR1L          equ	4030	;# 
  1829   000FBF                     CCPR1H          equ	4031	;# 
  1830   000FC0                     ADCON2          equ	4032	;# 
  1831   000FC1                     ADCON1          equ	4033	;# 
  1832   000FC2                     ADCON0          equ	4034	;# 
  1833   000FC3                     ADRES           equ	4035	;# 
  1834   000FC3                     ADRESL          equ	4035	;# 
  1835   000FC4                     ADRESH          equ	4036	;# 
  1836   000FC5                     SSP1CON2        equ	4037	;# 
  1837   000FC5                     SSPCON2         equ	4037	;# 
  1838   000FC6                     SSP1CON1        equ	4038	;# 
  1839   000FC6                     SSPCON1         equ	4038	;# 
  1840   000FC7                     SSP1STAT        equ	4039	;# 
  1841   000FC7                     SSPSTAT         equ	4039	;# 
  1842   000FC8                     SSP1ADD         equ	4040	;# 
  1843   000FC8                     SSPADD          equ	4040	;# 
  1844   000FC9                     SSP1BUF         equ	4041	;# 
  1845   000FC9                     SSPBUF          equ	4041	;# 
  1846   000FCA                     T2CON           equ	4042	;# 
  1847   000FCB                     PR2             equ	4043	;# 
  1848   000FCC                     TMR2            equ	4044	;# 
  1849   000FCD                     T1CON           equ	4045	;# 
  1850   000FCE                     TMR1            equ	4046	;# 
  1851   000FCE                     TMR1L           equ	4046	;# 
  1852   000FCF                     TMR1H           equ	4047	;# 
  1853   000FD0                     RCON            equ	4048	;# 
  1854   000FD1                     WDTCON          equ	4049	;# 
  1855   000FD2                     ECON1           equ	4050	;# 
  1856   000FD3                     OSCCON          equ	4051	;# 
  1857   000FD5                     T0CON           equ	4053	;# 
  1858   000FD6                     TMR0            equ	4054	;# 
  1859   000FD6                     TMR0L           equ	4054	;# 
  1860   000FD7                     TMR0H           equ	4055	;# 
  1861   000FD8                     STATUS          equ	4056	;# 
  1862   000FD9                     FSR2            equ	4057	;# 
  1863   000FD9                     FSR2L           equ	4057	;# 
  1864   000FDA                     FSR2H           equ	4058	;# 
  1865   000FDB                     PLUSW2          equ	4059	;# 
  1866   000FDC                     PREINC2         equ	4060	;# 
  1867   000FDD                     POSTDEC2        equ	4061	;# 
  1868   000FDE                     POSTINC2        equ	4062	;# 
  1869   000FDF                     INDF2           equ	4063	;# 
  1870   000FE0                     BSR             equ	4064	;# 
  1871   000FE1                     FSR1            equ	4065	;# 
  1872   000FE1                     FSR1L           equ	4065	;# 
  1873   000FE2                     FSR1H           equ	4066	;# 
  1874   000FE3                     PLUSW1          equ	4067	;# 
  1875   000FE4                     PREINC1         equ	4068	;# 
  1876   000FE5                     POSTDEC1        equ	4069	;# 
  1877   000FE6                     POSTINC1        equ	4070	;# 
  1878   000FE7                     INDF1           equ	4071	;# 
  1879   000FE8                     WREG            equ	4072	;# 
  1880   000FE9                     FSR0            equ	4073	;# 
  1881   000FE9                     FSR0L           equ	4073	;# 
  1882   000FEA                     FSR0H           equ	4074	;# 
  1883   000FEB                     PLUSW0          equ	4075	;# 
  1884   000FEC                     PREINC0         equ	4076	;# 
  1885   000FED                     POSTDEC0        equ	4077	;# 
  1886   000FEE                     POSTINC0        equ	4078	;# 
  1887   000FEF                     INDF0           equ	4079	;# 
  1888   000FF0                     INTCON3         equ	4080	;# 
  1889   000FF1                     INTCON2         equ	4081	;# 
  1890   000FF2                     INTCON          equ	4082	;# 
  1891   000FF3                     PROD            equ	4083	;# 
  1892   000FF3                     PRODL           equ	4083	;# 
  1893   000FF4                     PRODH           equ	4084	;# 
  1894   000FF5                     TABLAT          equ	4085	;# 
  1895   000FF6                     TBLPTR          equ	4086	;# 
  1896   000FF6                     TBLPTRL         equ	4086	;# 
  1897   000FF7                     TBLPTRH         equ	4087	;# 
  1898   000FF8                     TBLPTRU         equ	4088	;# 
  1899   000FF9                     PCLAT           equ	4089	;# 
  1900   000FF9                     PC              equ	4089	;# 
  1901   000FF9                     PCL             equ	4089	;# 
  1902   000FFA                     PCLATH          equ	4090	;# 
  1903   000FFB                     PCLATU          equ	4091	;# 
  1904   000FFC                     STKPTR          equ	4092	;# 
  1905   000FFD                     TOS             equ	4093	;# 
  1906   000FFD                     TOSL            equ	4093	;# 
  1907   000FFE                     TOSH            equ	4094	;# 
  1908   000FFF                     TOSU            equ	4095	;# 
  1909   000E80                     MAADR5          equ	3712	;# 
  1910   000E81                     MAADR6          equ	3713	;# 
  1911   000E82                     MAADR3          equ	3714	;# 
  1912   000E83                     MAADR4          equ	3715	;# 
  1913   000E84                     MAADR1          equ	3716	;# 
  1914   000E85                     MAADR2          equ	3717	;# 
  1915   000E8A                     MISTAT          equ	3722	;# 
  1916   000E97                     EFLOCON         equ	3735	;# 
  1917   000E98                     EPAUS           equ	3736	;# 
  1918   000E98                     EPAUSL          equ	3736	;# 
  1919   000E99                     EPAUSH          equ	3737	;# 
  1920   000EA0                     MACON1          equ	3744	;# 
  1921   000EA2                     MACON3          equ	3746	;# 
  1922   000EA3                     MACON4          equ	3747	;# 
  1923   000EA4                     MABBIPG         equ	3748	;# 
  1924   000EA6                     MAIPG           equ	3750	;# 
  1925   000EA6                     MAIPGL          equ	3750	;# 
  1926   000EA7                     MAIPGH          equ	3751	;# 
  1927   000EAA                     MAMXFL          equ	3754	;# 
  1928   000EAA                     MAMXFLL         equ	3754	;# 
  1929   000EAB                     MAMXFLH         equ	3755	;# 
  1930   000EB2                     MICMD           equ	3762	;# 
  1931   000EB4                     MIREGADR        equ	3764	;# 
  1932   000EB6                     MIWR            equ	3766	;# 
  1933   000EB6                     MIWRL           equ	3766	;# 
  1934   000EB7                     MIWRH           equ	3767	;# 
  1935   000EB8                     MIRD            equ	3768	;# 
  1936   000EB8                     MIRDL           equ	3768	;# 
  1937   000EB9                     MIRDH           equ	3769	;# 
  1938   000EC0                     EHT0            equ	3776	;# 
  1939   000EC1                     EHT1            equ	3777	;# 
  1940   000EC2                     EHT2            equ	3778	;# 
  1941   000EC3                     EHT3            equ	3779	;# 
  1942   000EC4                     EHT4            equ	3780	;# 
  1943   000EC5                     EHT5            equ	3781	;# 
  1944   000EC6                     EHT6            equ	3782	;# 
  1945   000EC7                     EHT7            equ	3783	;# 
  1946   000EC8                     EPMM0           equ	3784	;# 
  1947   000EC9                     EPMM1           equ	3785	;# 
  1948   000ECA                     EPMM2           equ	3786	;# 
  1949   000ECB                     EPMM3           equ	3787	;# 
  1950   000ECC                     EPMM4           equ	3788	;# 
  1951   000ECD                     EPMM5           equ	3789	;# 
  1952   000ECE                     EPMM6           equ	3790	;# 
  1953   000ECF                     EPMM7           equ	3791	;# 
  1954   000ED0                     EPMCS           equ	3792	;# 
  1955   000ED0                     EPMCSL          equ	3792	;# 
  1956   000ED1                     EPMCSH          equ	3793	;# 
  1957   000ED4                     EPMO            equ	3796	;# 
  1958   000ED4                     EPMOL           equ	3796	;# 
  1959   000ED5                     EPMOH           equ	3797	;# 
  1960   000ED8                     ERXFCON         equ	3800	;# 
  1961   000ED9                     EPKTCNT         equ	3801	;# 
  1962   000EE2                     EWRPT           equ	3810	;# 
  1963   000EE2                     EWRPTL          equ	3810	;# 
  1964   000EE3                     EWRPTH          equ	3811	;# 
  1965   000EE4                     ETXST           equ	3812	;# 
  1966   000EE4                     ETXSTL          equ	3812	;# 
  1967   000EE5                     ETXSTH          equ	3813	;# 
  1968   000EE6                     ETXND           equ	3814	;# 
  1969   000EE6                     ETXNDL          equ	3814	;# 
  1970   000EE7                     ETXNDH          equ	3815	;# 
  1971   000EE8                     ERXST           equ	3816	;# 
  1972   000EE8                     ERXSTL          equ	3816	;# 
  1973   000EE9                     ERXSTH          equ	3817	;# 
  1974   000EEA                     ERXND           equ	3818	;# 
  1975   000EEA                     ERXNDL          equ	3818	;# 
  1976   000EEB                     ERXNDH          equ	3819	;# 
  1977   000EEC                     ERXRDPT         equ	3820	;# 
  1978   000EEC                     ERXRDPTL        equ	3820	;# 
  1979   000EED                     ERXRDPTH        equ	3821	;# 
  1980   000EEE                     ERXWRPT         equ	3822	;# 
  1981   000EEE                     ERXWRPTL        equ	3822	;# 
  1982   000EEF                     ERXWRPTH        equ	3823	;# 
  1983   000EF0                     EDMAST          equ	3824	;# 
  1984   000EF0                     EDMASTL         equ	3824	;# 
  1985   000EF1                     EDMASTH         equ	3825	;# 
  1986   000EF2                     EDMAND          equ	3826	;# 
  1987   000EF2                     EDMANDL         equ	3826	;# 
  1988   000EF3                     EDMANDH         equ	3827	;# 
  1989   000EF4                     EDMADST         equ	3828	;# 
  1990   000EF4                     EDMADSTL        equ	3828	;# 
  1991   000EF5                     EDMADSTH        equ	3829	;# 
  1992   000EF6                     EDMACS          equ	3830	;# 
  1993   000EF6                     EDMACSL         equ	3830	;# 
  1994   000EF7                     EDMACSH         equ	3831	;# 
  1995   000EFB                     EIE             equ	3835	;# 
  1996   000EFD                     ESTAT           equ	3837	;# 
  1997   000EFE                     ECON2           equ	3838	;# 
  1998   000F60                     EIR             equ	3936	;# 
  1999   000F61                     EDATA           equ	3937	;# 
  2000   000F62                     SSP2CON2        equ	3938	;# 
  2001   000F63                     SSP2CON1        equ	3939	;# 
  2002   000F64                     SSP2STAT        equ	3940	;# 
  2003   000F65                     SSP2ADD         equ	3941	;# 
  2004   000F66                     SSP2BUF         equ	3942	;# 
  2005   000F67                     ECCP2DEL        equ	3943	;# 
  2006   000F68                     ECCP2AS         equ	3944	;# 
  2007   000F69                     ECCP3DEL        equ	3945	;# 
  2008   000F6A                     ECCP3AS         equ	3946	;# 
  2009   000F6B                     RCSTA2          equ	3947	;# 
  2010   000F6C                     TXSTA2          equ	3948	;# 
  2011   000F6D                     TXREG2          equ	3949	;# 
  2012   000F6E                     RCREG2          equ	3950	;# 
  2013   000F6F                     SPBRG2          equ	3951	;# 
  2014   000F70                     CCP5CON         equ	3952	;# 
  2015   000F71                     CCPR5           equ	3953	;# 
  2016   000F71                     CCPR5L          equ	3953	;# 
  2017   000F72                     CCPR5H          equ	3954	;# 
  2018   000F73                     CCP4CON         equ	3955	;# 
  2019   000F74                     CCPR4           equ	3956	;# 
  2020   000F74                     CCPR4L          equ	3956	;# 
  2021   000F75                     CCPR4H          equ	3957	;# 
  2022   000F76                     T4CON           equ	3958	;# 
  2023   000F77                     PR4             equ	3959	;# 
  2024   000F78                     TMR4            equ	3960	;# 
  2025   000F79                     ECCP1DEL        equ	3961	;# 
  2026   000F7A                     ERDPT           equ	3962	;# 
  2027   000F7A                     ERDPTL          equ	3962	;# 
  2028   000F7B                     ERDPTH          equ	3963	;# 
  2029   000F7C                     BAUDCON2        equ	3964	;# 
  2030   000F7C                     BAUDCTL2        equ	3964	;# 
  2031   000F7D                     SPBRGH2         equ	3965	;# 
  2032   000F7E                     BAUDCON1        equ	3966	;# 
  2033   000F7E                     BAUDCON         equ	3966	;# 
  2034   000F7E                     BAUDCTL         equ	3966	;# 
  2035   000F7E                     BAUDCTL1        equ	3966	;# 
  2036   000F7F                     SPBRGH1         equ	3967	;# 
  2037   000F7F                     SPBRGH          equ	3967	;# 
  2038   000F80                     PORTA           equ	3968	;# 
  2039   000F81                     PORTB           equ	3969	;# 
  2040   000F82                     PORTC           equ	3970	;# 
  2041   000F83                     PORTD           equ	3971	;# 
  2042   000F84                     PORTE           equ	3972	;# 
  2043   000F85                     PORTF           equ	3973	;# 
  2044   000F86                     PORTG           equ	3974	;# 
  2045   000F87                     PORTH           equ	3975	;# 
  2046   000F88                     PORTJ           equ	3976	;# 
  2047   000F89                     LATA            equ	3977	;# 
  2048   000F8A                     LATB            equ	3978	;# 
  2049   000F8B                     LATC            equ	3979	;# 
  2050   000F8C                     LATD            equ	3980	;# 
  2051   000F8D                     LATE            equ	3981	;# 
  2052   000F8E                     LATF            equ	3982	;# 
  2053   000F8F                     LATG            equ	3983	;# 
  2054   000F90                     LATH            equ	3984	;# 
  2055   000F91                     LATJ            equ	3985	;# 
  2056   000F92                     TRISA           equ	3986	;# 
  2057   000F92                     DDRA            equ	3986	;# 
  2058   000F93                     TRISB           equ	3987	;# 
  2059   000F93                     DDRB            equ	3987	;# 
  2060   000F94                     TRISC           equ	3988	;# 
  2061   000F94                     DDRC            equ	3988	;# 
  2062   000F95                     TRISD           equ	3989	;# 
  2063   000F95                     DDRD            equ	3989	;# 
  2064   000F96                     TRISE           equ	3990	;# 
  2065   000F96                     DDRE            equ	3990	;# 
  2066   000F97                     TRISF           equ	3991	;# 
  2067   000F97                     DDRF            equ	3991	;# 
  2068   000F98                     TRISG           equ	3992	;# 
  2069   000F98                     DDRG            equ	3992	;# 
  2070   000F99                     TRISH           equ	3993	;# 
  2071   000F99                     DDRH            equ	3993	;# 
  2072   000F9A                     TRISJ           equ	3994	;# 
  2073   000F9A                     DDRJ            equ	3994	;# 
  2074   000F9B                     OSCTUNE         equ	3995	;# 
  2075   000F9C                     MEMCON          equ	3996	;# 
  2076   000F9D                     PIE1            equ	3997	;# 
  2077   000F9E                     PIR1            equ	3998	;# 
  2078   000F9F                     IPR1            equ	3999	;# 
  2079   000FA0                     PIE2            equ	4000	;# 
  2080   000FA1                     PIR2            equ	4001	;# 
  2081   000FA2                     IPR2            equ	4002	;# 
  2082   000FA3                     PIE3            equ	4003	;# 
  2083   000FA4                     PIR3            equ	4004	;# 
  2084   000FA5                     IPR3            equ	4005	;# 
  2085   000FA6                     EECON1          equ	4006	;# 
  2086   000FA7                     EECON2          equ	4007	;# 
  2087   000FAB                     RCSTA1          equ	4011	;# 
  2088   000FAB                     RCSTA           equ	4011	;# 
  2089   000FAC                     TXSTA1          equ	4012	;# 
  2090   000FAC                     TXSTA           equ	4012	;# 
  2091   000FAD                     TXREG1          equ	4013	;# 
  2092   000FAD                     TXREG           equ	4013	;# 
  2093   000FAE                     RCREG1          equ	4014	;# 
  2094   000FAE                     RCREG           equ	4014	;# 
  2095   000FAF                     SPBRG1          equ	4015	;# 
  2096   000FAF                     SPBRG           equ	4015	;# 
  2097   000FB0                     PSPCON          equ	4016	;# 
  2098   000FB1                     T3CON           equ	4017	;# 
  2099   000FB2                     TMR3            equ	4018	;# 
  2100   000FB2                     TMR3L           equ	4018	;# 
  2101   000FB3                     TMR3H           equ	4019	;# 
  2102   000FB4                     CMCON           equ	4020	;# 
  2103   000FB5                     CVRCON          equ	4021	;# 
  2104   000FB6                     ECCP1AS         equ	4022	;# 
  2105   000FB7                     CCP3CON         equ	4023	;# 
  2106   000FB7                     ECCP3CON        equ	4023	;# 
  2107   000FB8                     CCPR3           equ	4024	;# 
  2108   000FB8                     CCPR3L          equ	4024	;# 
  2109   000FB9                     CCPR3H          equ	4025	;# 
  2110   000FBA                     CCP2CON         equ	4026	;# 
  2111   000FBA                     ECCP2CON        equ	4026	;# 
  2112   000FBB                     CCPR2           equ	4027	;# 
  2113   000FBB                     CCPR2L          equ	4027	;# 
  2114   000FBC                     CCPR2H          equ	4028	;# 
  2115   000FBD                     CCP1CON         equ	4029	;# 
  2116   000FBD                     ECCP1CON        equ	4029	;# 
  2117   000FBE                     CCPR1           equ	4030	;# 
  2118   000FBE                     CCPR1L          equ	4030	;# 
  2119   000FBF                     CCPR1H          equ	4031	;# 
  2120   000FC0                     ADCON2          equ	4032	;# 
  2121   000FC1                     ADCON1          equ	4033	;# 
  2122   000FC2                     ADCON0          equ	4034	;# 
  2123   000FC3                     ADRES           equ	4035	;# 
  2124   000FC3                     ADRESL          equ	4035	;# 
  2125   000FC4                     ADRESH          equ	4036	;# 
  2126   000FC5                     SSP1CON2        equ	4037	;# 
  2127   000FC5                     SSPCON2         equ	4037	;# 
  2128   000FC6                     SSP1CON1        equ	4038	;# 
  2129   000FC6                     SSPCON1         equ	4038	;# 
  2130   000FC7                     SSP1STAT        equ	4039	;# 
  2131   000FC7                     SSPSTAT         equ	4039	;# 
  2132   000FC8                     SSP1ADD         equ	4040	;# 
  2133   000FC8                     SSPADD          equ	4040	;# 
  2134   000FC9                     SSP1BUF         equ	4041	;# 
  2135   000FC9                     SSPBUF          equ	4041	;# 
  2136   000FCA                     T2CON           equ	4042	;# 
  2137   000FCB                     PR2             equ	4043	;# 
  2138   000FCC                     TMR2            equ	4044	;# 
  2139   000FCD                     T1CON           equ	4045	;# 
  2140   000FCE                     TMR1            equ	4046	;# 
  2141   000FCE                     TMR1L           equ	4046	;# 
  2142   000FCF                     TMR1H           equ	4047	;# 
  2143   000FD0                     RCON            equ	4048	;# 
  2144   000FD1                     WDTCON          equ	4049	;# 
  2145   000FD2                     ECON1           equ	4050	;# 
  2146   000FD3                     OSCCON          equ	4051	;# 
  2147   000FD5                     T0CON           equ	4053	;# 
  2148   000FD6                     TMR0            equ	4054	;# 
  2149   000FD6                     TMR0L           equ	4054	;# 
  2150   000FD7                     TMR0H           equ	4055	;# 
  2151   000FD8                     STATUS          equ	4056	;# 
  2152   000FD9                     FSR2            equ	4057	;# 
  2153   000FD9                     FSR2L           equ	4057	;# 
  2154   000FDA                     FSR2H           equ	4058	;# 
  2155   000FDB                     PLUSW2          equ	4059	;# 
  2156   000FDC                     PREINC2         equ	4060	;# 
  2157   000FDD                     POSTDEC2        equ	4061	;# 
  2158   000FDE                     POSTINC2        equ	4062	;# 
  2159   000FDF                     INDF2           equ	4063	;# 
  2160   000FE0                     BSR             equ	4064	;# 
  2161   000FE1                     FSR1            equ	4065	;# 
  2162   000FE1                     FSR1L           equ	4065	;# 
  2163   000FE2                     FSR1H           equ	4066	;# 
  2164   000FE3                     PLUSW1          equ	4067	;# 
  2165   000FE4                     PREINC1         equ	4068	;# 
  2166   000FE5                     POSTDEC1        equ	4069	;# 
  2167   000FE6                     POSTINC1        equ	4070	;# 
  2168   000FE7                     INDF1           equ	4071	;# 
  2169   000FE8                     WREG            equ	4072	;# 
  2170   000FE9                     FSR0            equ	4073	;# 
  2171   000FE9                     FSR0L           equ	4073	;# 
  2172   000FEA                     FSR0H           equ	4074	;# 
  2173   000FEB                     PLUSW0          equ	4075	;# 
  2174   000FEC                     PREINC0         equ	4076	;# 
  2175   000FED                     POSTDEC0        equ	4077	;# 
  2176   000FEE                     POSTINC0        equ	4078	;# 
  2177   000FEF                     INDF0           equ	4079	;# 
  2178   000FF0                     INTCON3         equ	4080	;# 
  2179   000FF1                     INTCON2         equ	4081	;# 
  2180   000FF2                     INTCON          equ	4082	;# 
  2181   000FF3                     PROD            equ	4083	;# 
  2182   000FF3                     PRODL           equ	4083	;# 
  2183   000FF4                     PRODH           equ	4084	;# 
  2184   000FF5                     TABLAT          equ	4085	;# 
  2185   000FF6                     TBLPTR          equ	4086	;# 
  2186   000FF6                     TBLPTRL         equ	4086	;# 
  2187   000FF7                     TBLPTRH         equ	4087	;# 
  2188   000FF8                     TBLPTRU         equ	4088	;# 
  2189   000FF9                     PCLAT           equ	4089	;# 
  2190   000FF9                     PC              equ	4089	;# 
  2191   000FF9                     PCL             equ	4089	;# 
  2192   000FFA                     PCLATH          equ	4090	;# 
  2193   000FFB                     PCLATU          equ	4091	;# 
  2194   000FFC                     STKPTR          equ	4092	;# 
  2195   000FFD                     TOS             equ	4093	;# 
  2196   000FFD                     TOSL            equ	4093	;# 
  2197   000FFE                     TOSH            equ	4094	;# 
  2198   000FFF                     TOSU            equ	4095	;# 
  2199   000E80                     MAADR5          equ	3712	;# 
  2200   000E81                     MAADR6          equ	3713	;# 
  2201   000E82                     MAADR3          equ	3714	;# 
  2202   000E83                     MAADR4          equ	3715	;# 
  2203   000E84                     MAADR1          equ	3716	;# 
  2204   000E85                     MAADR2          equ	3717	;# 
  2205   000E8A                     MISTAT          equ	3722	;# 
  2206   000E97                     EFLOCON         equ	3735	;# 
  2207   000E98                     EPAUS           equ	3736	;# 
  2208   000E98                     EPAUSL          equ	3736	;# 
  2209   000E99                     EPAUSH          equ	3737	;# 
  2210   000EA0                     MACON1          equ	3744	;# 
  2211   000EA2                     MACON3          equ	3746	;# 
  2212   000EA3                     MACON4          equ	3747	;# 
  2213   000EA4                     MABBIPG         equ	3748	;# 
  2214   000EA6                     MAIPG           equ	3750	;# 
  2215   000EA6                     MAIPGL          equ	3750	;# 
  2216   000EA7                     MAIPGH          equ	3751	;# 
  2217   000EAA                     MAMXFL          equ	3754	;# 
  2218   000EAA                     MAMXFLL         equ	3754	;# 
  2219   000EAB                     MAMXFLH         equ	3755	;# 
  2220   000EB2                     MICMD           equ	3762	;# 
  2221   000EB4                     MIREGADR        equ	3764	;# 
  2222   000EB6                     MIWR            equ	3766	;# 
  2223   000EB6                     MIWRL           equ	3766	;# 
  2224   000EB7                     MIWRH           equ	3767	;# 
  2225   000EB8                     MIRD            equ	3768	;# 
  2226   000EB8                     MIRDL           equ	3768	;# 
  2227   000EB9                     MIRDH           equ	3769	;# 
  2228   000EC0                     EHT0            equ	3776	;# 
  2229   000EC1                     EHT1            equ	3777	;# 
  2230   000EC2                     EHT2            equ	3778	;# 
  2231   000EC3                     EHT3            equ	3779	;# 
  2232   000EC4                     EHT4            equ	3780	;# 
  2233   000EC5                     EHT5            equ	3781	;# 
  2234   000EC6                     EHT6            equ	3782	;# 
  2235   000EC7                     EHT7            equ	3783	;# 
  2236   000EC8                     EPMM0           equ	3784	;# 
  2237   000EC9                     EPMM1           equ	3785	;# 
  2238   000ECA                     EPMM2           equ	3786	;# 
  2239   000ECB                     EPMM3           equ	3787	;# 
  2240   000ECC                     EPMM4           equ	3788	;# 
  2241   000ECD                     EPMM5           equ	3789	;# 
  2242   000ECE                     EPMM6           equ	3790	;# 
  2243   000ECF                     EPMM7           equ	3791	;# 
  2244   000ED0                     EPMCS           equ	3792	;# 
  2245   000ED0                     EPMCSL          equ	3792	;# 
  2246   000ED1                     EPMCSH          equ	3793	;# 
  2247   000ED4                     EPMO            equ	3796	;# 
  2248   000ED4                     EPMOL           equ	3796	;# 
  2249   000ED5                     EPMOH           equ	3797	;# 
  2250   000ED8                     ERXFCON         equ	3800	;# 
  2251   000ED9                     EPKTCNT         equ	3801	;# 
  2252   000EE2                     EWRPT           equ	3810	;# 
  2253   000EE2                     EWRPTL          equ	3810	;# 
  2254   000EE3                     EWRPTH          equ	3811	;# 
  2255   000EE4                     ETXST           equ	3812	;# 
  2256   000EE4                     ETXSTL          equ	3812	;# 
  2257   000EE5                     ETXSTH          equ	3813	;# 
  2258   000EE6                     ETXND           equ	3814	;# 
  2259   000EE6                     ETXNDL          equ	3814	;# 
  2260   000EE7                     ETXNDH          equ	3815	;# 
  2261   000EE8                     ERXST           equ	3816	;# 
  2262   000EE8                     ERXSTL          equ	3816	;# 
  2263   000EE9                     ERXSTH          equ	3817	;# 
  2264   000EEA                     ERXND           equ	3818	;# 
  2265   000EEA                     ERXNDL          equ	3818	;# 
  2266   000EEB                     ERXNDH          equ	3819	;# 
  2267   000EEC                     ERXRDPT         equ	3820	;# 
  2268   000EEC                     ERXRDPTL        equ	3820	;# 
  2269   000EED                     ERXRDPTH        equ	3821	;# 
  2270   000EEE                     ERXWRPT         equ	3822	;# 
  2271   000EEE                     ERXWRPTL        equ	3822	;# 
  2272   000EEF                     ERXWRPTH        equ	3823	;# 
  2273   000EF0                     EDMAST          equ	3824	;# 
  2274   000EF0                     EDMASTL         equ	3824	;# 
  2275   000EF1                     EDMASTH         equ	3825	;# 
  2276   000EF2                     EDMAND          equ	3826	;# 
  2277   000EF2                     EDMANDL         equ	3826	;# 
  2278   000EF3                     EDMANDH         equ	3827	;# 
  2279   000EF4                     EDMADST         equ	3828	;# 
  2280   000EF4                     EDMADSTL        equ	3828	;# 
  2281   000EF5                     EDMADSTH        equ	3829	;# 
  2282   000EF6                     EDMACS          equ	3830	;# 
  2283   000EF6                     EDMACSL         equ	3830	;# 
  2284   000EF7                     EDMACSH         equ	3831	;# 
  2285   000EFB                     EIE             equ	3835	;# 
  2286   000EFD                     ESTAT           equ	3837	;# 
  2287   000EFE                     ECON2           equ	3838	;# 
  2288   000F60                     EIR             equ	3936	;# 
  2289   000F61                     EDATA           equ	3937	;# 
  2290   000F62                     SSP2CON2        equ	3938	;# 
  2291   000F63                     SSP2CON1        equ	3939	;# 
  2292   000F64                     SSP2STAT        equ	3940	;# 
  2293   000F65                     SSP2ADD         equ	3941	;# 
  2294   000F66                     SSP2BUF         equ	3942	;# 
  2295   000F67                     ECCP2DEL        equ	3943	;# 
  2296   000F68                     ECCP2AS         equ	3944	;# 
  2297   000F69                     ECCP3DEL        equ	3945	;# 
  2298   000F6A                     ECCP3AS         equ	3946	;# 
  2299   000F6B                     RCSTA2          equ	3947	;# 
  2300   000F6C                     TXSTA2          equ	3948	;# 
  2301   000F6D                     TXREG2          equ	3949	;# 
  2302   000F6E                     RCREG2          equ	3950	;# 
  2303   000F6F                     SPBRG2          equ	3951	;# 
  2304   000F70                     CCP5CON         equ	3952	;# 
  2305   000F71                     CCPR5           equ	3953	;# 
  2306   000F71                     CCPR5L          equ	3953	;# 
  2307   000F72                     CCPR5H          equ	3954	;# 
  2308   000F73                     CCP4CON         equ	3955	;# 
  2309   000F74                     CCPR4           equ	3956	;# 
  2310   000F74                     CCPR4L          equ	3956	;# 
  2311   000F75                     CCPR4H          equ	3957	;# 
  2312   000F76                     T4CON           equ	3958	;# 
  2313   000F77                     PR4             equ	3959	;# 
  2314   000F78                     TMR4            equ	3960	;# 
  2315   000F79                     ECCP1DEL        equ	3961	;# 
  2316   000F7A                     ERDPT           equ	3962	;# 
  2317   000F7A                     ERDPTL          equ	3962	;# 
  2318   000F7B                     ERDPTH          equ	3963	;# 
  2319   000F7C                     BAUDCON2        equ	3964	;# 
  2320   000F7C                     BAUDCTL2        equ	3964	;# 
  2321   000F7D                     SPBRGH2         equ	3965	;# 
  2322   000F7E                     BAUDCON1        equ	3966	;# 
  2323   000F7E                     BAUDCON         equ	3966	;# 
  2324   000F7E                     BAUDCTL         equ	3966	;# 
  2325   000F7E                     BAUDCTL1        equ	3966	;# 
  2326   000F7F                     SPBRGH1         equ	3967	;# 
  2327   000F7F                     SPBRGH          equ	3967	;# 
  2328   000F80                     PORTA           equ	3968	;# 
  2329   000F81                     PORTB           equ	3969	;# 
  2330   000F82                     PORTC           equ	3970	;# 
  2331   000F83                     PORTD           equ	3971	;# 
  2332   000F84                     PORTE           equ	3972	;# 
  2333   000F85                     PORTF           equ	3973	;# 
  2334   000F86                     PORTG           equ	3974	;# 
  2335   000F87                     PORTH           equ	3975	;# 
  2336   000F88                     PORTJ           equ	3976	;# 
  2337   000F89                     LATA            equ	3977	;# 
  2338   000F8A                     LATB            equ	3978	;# 
  2339   000F8B                     LATC            equ	3979	;# 
  2340   000F8C                     LATD            equ	3980	;# 
  2341   000F8D                     LATE            equ	3981	;# 
  2342   000F8E                     LATF            equ	3982	;# 
  2343   000F8F                     LATG            equ	3983	;# 
  2344   000F90                     LATH            equ	3984	;# 
  2345   000F91                     LATJ            equ	3985	;# 
  2346   000F92                     TRISA           equ	3986	;# 
  2347   000F92                     DDRA            equ	3986	;# 
  2348   000F93                     TRISB           equ	3987	;# 
  2349   000F93                     DDRB            equ	3987	;# 
  2350   000F94                     TRISC           equ	3988	;# 
  2351   000F94                     DDRC            equ	3988	;# 
  2352   000F95                     TRISD           equ	3989	;# 
  2353   000F95                     DDRD            equ	3989	;# 
  2354   000F96                     TRISE           equ	3990	;# 
  2355   000F96                     DDRE            equ	3990	;# 
  2356   000F97                     TRISF           equ	3991	;# 
  2357   000F97                     DDRF            equ	3991	;# 
  2358   000F98                     TRISG           equ	3992	;# 
  2359   000F98                     DDRG            equ	3992	;# 
  2360   000F99                     TRISH           equ	3993	;# 
  2361   000F99                     DDRH            equ	3993	;# 
  2362   000F9A                     TRISJ           equ	3994	;# 
  2363   000F9A                     DDRJ            equ	3994	;# 
  2364   000F9B                     OSCTUNE         equ	3995	;# 
  2365   000F9C                     MEMCON          equ	3996	;# 
  2366   000F9D                     PIE1            equ	3997	;# 
  2367   000F9E                     PIR1            equ	3998	;# 
  2368   000F9F                     IPR1            equ	3999	;# 
  2369   000FA0                     PIE2            equ	4000	;# 
  2370   000FA1                     PIR2            equ	4001	;# 
  2371   000FA2                     IPR2            equ	4002	;# 
  2372   000FA3                     PIE3            equ	4003	;# 
  2373   000FA4                     PIR3            equ	4004	;# 
  2374   000FA5                     IPR3            equ	4005	;# 
  2375   000FA6                     EECON1          equ	4006	;# 
  2376   000FA7                     EECON2          equ	4007	;# 
  2377   000FAB                     RCSTA1          equ	4011	;# 
  2378   000FAB                     RCSTA           equ	4011	;# 
  2379   000FAC                     TXSTA1          equ	4012	;# 
  2380   000FAC                     TXSTA           equ	4012	;# 
  2381   000FAD                     TXREG1          equ	4013	;# 
  2382   000FAD                     TXREG           equ	4013	;# 
  2383   000FAE                     RCREG1          equ	4014	;# 
  2384   000FAE                     RCREG           equ	4014	;# 
  2385   000FAF                     SPBRG1          equ	4015	;# 
  2386   000FAF                     SPBRG           equ	4015	;# 
  2387   000FB0                     PSPCON          equ	4016	;# 
  2388   000FB1                     T3CON           equ	4017	;# 
  2389   000FB2                     TMR3            equ	4018	;# 
  2390   000FB2                     TMR3L           equ	4018	;# 
  2391   000FB3                     TMR3H           equ	4019	;# 
  2392   000FB4                     CMCON           equ	4020	;# 
  2393   000FB5                     CVRCON          equ	4021	;# 
  2394   000FB6                     ECCP1AS         equ	4022	;# 
  2395   000FB7                     CCP3CON         equ	4023	;# 
  2396   000FB7                     ECCP3CON        equ	4023	;# 
  2397   000FB8                     CCPR3           equ	4024	;# 
  2398   000FB8                     CCPR3L          equ	4024	;# 
  2399   000FB9                     CCPR3H          equ	4025	;# 
  2400   000FBA                     CCP2CON         equ	4026	;# 
  2401   000FBA                     ECCP2CON        equ	4026	;# 
  2402   000FBB                     CCPR2           equ	4027	;# 
  2403   000FBB                     CCPR2L          equ	4027	;# 
  2404   000FBC                     CCPR2H          equ	4028	;# 
  2405   000FBD                     CCP1CON         equ	4029	;# 
  2406   000FBD                     ECCP1CON        equ	4029	;# 
  2407   000FBE                     CCPR1           equ	4030	;# 
  2408   000FBE                     CCPR1L          equ	4030	;# 
  2409   000FBF                     CCPR1H          equ	4031	;# 
  2410   000FC0                     ADCON2          equ	4032	;# 
  2411   000FC1                     ADCON1          equ	4033	;# 
  2412   000FC2                     ADCON0          equ	4034	;# 
  2413   000FC3                     ADRES           equ	4035	;# 
  2414   000FC3                     ADRESL          equ	4035	;# 
  2415   000FC4                     ADRESH          equ	4036	;# 
  2416   000FC5                     SSP1CON2        equ	4037	;# 
  2417   000FC5                     SSPCON2         equ	4037	;# 
  2418   000FC6                     SSP1CON1        equ	4038	;# 
  2419   000FC6                     SSPCON1         equ	4038	;# 
  2420   000FC7                     SSP1STAT        equ	4039	;# 
  2421   000FC7                     SSPSTAT         equ	4039	;# 
  2422   000FC8                     SSP1ADD         equ	4040	;# 
  2423   000FC8                     SSPADD          equ	4040	;# 
  2424   000FC9                     SSP1BUF         equ	4041	;# 
  2425   000FC9                     SSPBUF          equ	4041	;# 
  2426   000FCA                     T2CON           equ	4042	;# 
  2427   000FCB                     PR2             equ	4043	;# 
  2428   000FCC                     TMR2            equ	4044	;# 
  2429   000FCD                     T1CON           equ	4045	;# 
  2430   000FCE                     TMR1            equ	4046	;# 
  2431   000FCE                     TMR1L           equ	4046	;# 
  2432   000FCF                     TMR1H           equ	4047	;# 
  2433   000FD0                     RCON            equ	4048	;# 
  2434   000FD1                     WDTCON          equ	4049	;# 
  2435   000FD2                     ECON1           equ	4050	;# 
  2436   000FD3                     OSCCON          equ	4051	;# 
  2437   000FD5                     T0CON           equ	4053	;# 
  2438   000FD6                     TMR0            equ	4054	;# 
  2439   000FD6                     TMR0L           equ	4054	;# 
  2440   000FD7                     TMR0H           equ	4055	;# 
  2441   000FD8                     STATUS          equ	4056	;# 
  2442   000FD9                     FSR2            equ	4057	;# 
  2443   000FD9                     FSR2L           equ	4057	;# 
  2444   000FDA                     FSR2H           equ	4058	;# 
  2445   000FDB                     PLUSW2          equ	4059	;# 
  2446   000FDC                     PREINC2         equ	4060	;# 
  2447   000FDD                     POSTDEC2        equ	4061	;# 
  2448   000FDE                     POSTINC2        equ	4062	;# 
  2449   000FDF                     INDF2           equ	4063	;# 
  2450   000FE0                     BSR             equ	4064	;# 
  2451   000FE1                     FSR1            equ	4065	;# 
  2452   000FE1                     FSR1L           equ	4065	;# 
  2453   000FE2                     FSR1H           equ	4066	;# 
  2454   000FE3                     PLUSW1          equ	4067	;# 
  2455   000FE4                     PREINC1         equ	4068	;# 
  2456   000FE5                     POSTDEC1        equ	4069	;# 
  2457   000FE6                     POSTINC1        equ	4070	;# 
  2458   000FE7                     INDF1           equ	4071	;# 
  2459   000FE8                     WREG            equ	4072	;# 
  2460   000FE9                     FSR0            equ	4073	;# 
  2461   000FE9                     FSR0L           equ	4073	;# 
  2462   000FEA                     FSR0H           equ	4074	;# 
  2463   000FEB                     PLUSW0          equ	4075	;# 
  2464   000FEC                     PREINC0         equ	4076	;# 
  2465   000FED                     POSTDEC0        equ	4077	;# 
  2466   000FEE                     POSTINC0        equ	4078	;# 
  2467   000FEF                     INDF0           equ	4079	;# 
  2468   000FF0                     INTCON3         equ	4080	;# 
  2469   000FF1                     INTCON2         equ	4081	;# 
  2470   000FF2                     INTCON          equ	4082	;# 
  2471   000FF3                     PROD            equ	4083	;# 
  2472   000FF3                     PRODL           equ	4083	;# 
  2473   000FF4                     PRODH           equ	4084	;# 
  2474   000FF5                     TABLAT          equ	4085	;# 
  2475   000FF6                     TBLPTR          equ	4086	;# 
  2476   000FF6                     TBLPTRL         equ	4086	;# 
  2477   000FF7                     TBLPTRH         equ	4087	;# 
  2478   000FF8                     TBLPTRU         equ	4088	;# 
  2479   000FF9                     PCLAT           equ	4089	;# 
  2480   000FF9                     PC              equ	4089	;# 
  2481   000FF9                     PCL             equ	4089	;# 
  2482   000FFA                     PCLATH          equ	4090	;# 
  2483   000FFB                     PCLATU          equ	4091	;# 
  2484   000FFC                     STKPTR          equ	4092	;# 
  2485   000FFD                     TOS             equ	4093	;# 
  2486   000FFD                     TOSL            equ	4093	;# 
  2487   000FFE                     TOSH            equ	4094	;# 
  2488   000FFF                     TOSU            equ	4095	;# 
  2489   000E80                     MAADR5          equ	3712	;# 
  2490   000E81                     MAADR6          equ	3713	;# 
  2491   000E82                     MAADR3          equ	3714	;# 
  2492   000E83                     MAADR4          equ	3715	;# 
  2493   000E84                     MAADR1          equ	3716	;# 
  2494   000E85                     MAADR2          equ	3717	;# 
  2495   000E8A                     MISTAT          equ	3722	;# 
  2496   000E97                     EFLOCON         equ	3735	;# 
  2497   000E98                     EPAUS           equ	3736	;# 
  2498   000E98                     EPAUSL          equ	3736	;# 
  2499   000E99                     EPAUSH          equ	3737	;# 
  2500   000EA0                     MACON1          equ	3744	;# 
  2501   000EA2                     MACON3          equ	3746	;# 
  2502   000EA3                     MACON4          equ	3747	;# 
  2503   000EA4                     MABBIPG         equ	3748	;# 
  2504   000EA6                     MAIPG           equ	3750	;# 
  2505   000EA6                     MAIPGL          equ	3750	;# 
  2506   000EA7                     MAIPGH          equ	3751	;# 
  2507   000EAA                     MAMXFL          equ	3754	;# 
  2508   000EAA                     MAMXFLL         equ	3754	;# 
  2509   000EAB                     MAMXFLH         equ	3755	;# 
  2510   000EB2                     MICMD           equ	3762	;# 
  2511   000EB4                     MIREGADR        equ	3764	;# 
  2512   000EB6                     MIWR            equ	3766	;# 
  2513   000EB6                     MIWRL           equ	3766	;# 
  2514   000EB7                     MIWRH           equ	3767	;# 
  2515   000EB8                     MIRD            equ	3768	;# 
  2516   000EB8                     MIRDL           equ	3768	;# 
  2517   000EB9                     MIRDH           equ	3769	;# 
  2518   000EC0                     EHT0            equ	3776	;# 
  2519   000EC1                     EHT1            equ	3777	;# 
  2520   000EC2                     EHT2            equ	3778	;# 
  2521   000EC3                     EHT3            equ	3779	;# 
  2522   000EC4                     EHT4            equ	3780	;# 
  2523   000EC5                     EHT5            equ	3781	;# 
  2524   000EC6                     EHT6            equ	3782	;# 
  2525   000EC7                     EHT7            equ	3783	;# 
  2526   000EC8                     EPMM0           equ	3784	;# 
  2527   000EC9                     EPMM1           equ	3785	;# 
  2528   000ECA                     EPMM2           equ	3786	;# 
  2529   000ECB                     EPMM3           equ	3787	;# 
  2530   000ECC                     EPMM4           equ	3788	;# 
  2531   000ECD                     EPMM5           equ	3789	;# 
  2532   000ECE                     EPMM6           equ	3790	;# 
  2533   000ECF                     EPMM7           equ	3791	;# 
  2534   000ED0                     EPMCS           equ	3792	;# 
  2535   000ED0                     EPMCSL          equ	3792	;# 
  2536   000ED1                     EPMCSH          equ	3793	;# 
  2537   000ED4                     EPMO            equ	3796	;# 
  2538   000ED4                     EPMOL           equ	3796	;# 
  2539   000ED5                     EPMOH           equ	3797	;# 
  2540   000ED8                     ERXFCON         equ	3800	;# 
  2541   000ED9                     EPKTCNT         equ	3801	;# 
  2542   000EE2                     EWRPT           equ	3810	;# 
  2543   000EE2                     EWRPTL          equ	3810	;# 
  2544   000EE3                     EWRPTH          equ	3811	;# 
  2545   000EE4                     ETXST           equ	3812	;# 
  2546   000EE4                     ETXSTL          equ	3812	;# 
  2547   000EE5                     ETXSTH          equ	3813	;# 
  2548   000EE6                     ETXND           equ	3814	;# 
  2549   000EE6                     ETXNDL          equ	3814	;# 
  2550   000EE7                     ETXNDH          equ	3815	;# 
  2551   000EE8                     ERXST           equ	3816	;# 
  2552   000EE8                     ERXSTL          equ	3816	;# 
  2553   000EE9                     ERXSTH          equ	3817	;# 
  2554   000EEA                     ERXND           equ	3818	;# 
  2555   000EEA                     ERXNDL          equ	3818	;# 
  2556   000EEB                     ERXNDH          equ	3819	;# 
  2557   000EEC                     ERXRDPT         equ	3820	;# 
  2558   000EEC                     ERXRDPTL        equ	3820	;# 
  2559   000EED                     ERXRDPTH        equ	3821	;# 
  2560   000EEE                     ERXWRPT         equ	3822	;# 
  2561   000EEE                     ERXWRPTL        equ	3822	;# 
  2562   000EEF                     ERXWRPTH        equ	3823	;# 
  2563   000EF0                     EDMAST          equ	3824	;# 
  2564   000EF0                     EDMASTL         equ	3824	;# 
  2565   000EF1                     EDMASTH         equ	3825	;# 
  2566   000EF2                     EDMAND          equ	3826	;# 
  2567   000EF2                     EDMANDL         equ	3826	;# 
  2568   000EF3                     EDMANDH         equ	3827	;# 
  2569   000EF4                     EDMADST         equ	3828	;# 
  2570   000EF4                     EDMADSTL        equ	3828	;# 
  2571   000EF5                     EDMADSTH        equ	3829	;# 
  2572   000EF6                     EDMACS          equ	3830	;# 
  2573   000EF6                     EDMACSL         equ	3830	;# 
  2574   000EF7                     EDMACSH         equ	3831	;# 
  2575   000EFB                     EIE             equ	3835	;# 
  2576   000EFD                     ESTAT           equ	3837	;# 
  2577   000EFE                     ECON2           equ	3838	;# 
  2578   000F60                     EIR             equ	3936	;# 
  2579   000F61                     EDATA           equ	3937	;# 
  2580   000F62                     SSP2CON2        equ	3938	;# 
  2581   000F63                     SSP2CON1        equ	3939	;# 
  2582   000F64                     SSP2STAT        equ	3940	;# 
  2583   000F65                     SSP2ADD         equ	3941	;# 
  2584   000F66                     SSP2BUF         equ	3942	;# 
  2585   000F67                     ECCP2DEL        equ	3943	;# 
  2586   000F68                     ECCP2AS         equ	3944	;# 
  2587   000F69                     ECCP3DEL        equ	3945	;# 
  2588   000F6A                     ECCP3AS         equ	3946	;# 
  2589   000F6B                     RCSTA2          equ	3947	;# 
  2590   000F6C                     TXSTA2          equ	3948	;# 
  2591   000F6D                     TXREG2          equ	3949	;# 
  2592   000F6E                     RCREG2          equ	3950	;# 
  2593   000F6F                     SPBRG2          equ	3951	;# 
  2594   000F70                     CCP5CON         equ	3952	;# 
  2595   000F71                     CCPR5           equ	3953	;# 
  2596   000F71                     CCPR5L          equ	3953	;# 
  2597   000F72                     CCPR5H          equ	3954	;# 
  2598   000F73                     CCP4CON         equ	3955	;# 
  2599   000F74                     CCPR4           equ	3956	;# 
  2600   000F74                     CCPR4L          equ	3956	;# 
  2601   000F75                     CCPR4H          equ	3957	;# 
  2602   000F76                     T4CON           equ	3958	;# 
  2603   000F77                     PR4             equ	3959	;# 
  2604   000F78                     TMR4            equ	3960	;# 
  2605   000F79                     ECCP1DEL        equ	3961	;# 
  2606   000F7A                     ERDPT           equ	3962	;# 
  2607   000F7A                     ERDPTL          equ	3962	;# 
  2608   000F7B                     ERDPTH          equ	3963	;# 
  2609   000F7C                     BAUDCON2        equ	3964	;# 
  2610   000F7C                     BAUDCTL2        equ	3964	;# 
  2611   000F7D                     SPBRGH2         equ	3965	;# 
  2612   000F7E                     BAUDCON1        equ	3966	;# 
  2613   000F7E                     BAUDCON         equ	3966	;# 
  2614   000F7E                     BAUDCTL         equ	3966	;# 
  2615   000F7E                     BAUDCTL1        equ	3966	;# 
  2616   000F7F                     SPBRGH1         equ	3967	;# 
  2617   000F7F                     SPBRGH          equ	3967	;# 
  2618   000F80                     PORTA           equ	3968	;# 
  2619   000F81                     PORTB           equ	3969	;# 
  2620   000F82                     PORTC           equ	3970	;# 
  2621   000F83                     PORTD           equ	3971	;# 
  2622   000F84                     PORTE           equ	3972	;# 
  2623   000F85                     PORTF           equ	3973	;# 
  2624   000F86                     PORTG           equ	3974	;# 
  2625   000F87                     PORTH           equ	3975	;# 
  2626   000F88                     PORTJ           equ	3976	;# 
  2627   000F89                     LATA            equ	3977	;# 
  2628   000F8A                     LATB            equ	3978	;# 
  2629   000F8B                     LATC            equ	3979	;# 
  2630   000F8C                     LATD            equ	3980	;# 
  2631   000F8D                     LATE            equ	3981	;# 
  2632   000F8E                     LATF            equ	3982	;# 
  2633   000F8F                     LATG            equ	3983	;# 
  2634   000F90                     LATH            equ	3984	;# 
  2635   000F91                     LATJ            equ	3985	;# 
  2636   000F92                     TRISA           equ	3986	;# 
  2637   000F92                     DDRA            equ	3986	;# 
  2638   000F93                     TRISB           equ	3987	;# 
  2639   000F93                     DDRB            equ	3987	;# 
  2640   000F94                     TRISC           equ	3988	;# 
  2641   000F94                     DDRC            equ	3988	;# 
  2642   000F95                     TRISD           equ	3989	;# 
  2643   000F95                     DDRD            equ	3989	;# 
  2644   000F96                     TRISE           equ	3990	;# 
  2645   000F96                     DDRE            equ	3990	;# 
  2646   000F97                     TRISF           equ	3991	;# 
  2647   000F97                     DDRF            equ	3991	;# 
  2648   000F98                     TRISG           equ	3992	;# 
  2649   000F98                     DDRG            equ	3992	;# 
  2650   000F99                     TRISH           equ	3993	;# 
  2651   000F99                     DDRH            equ	3993	;# 
  2652   000F9A                     TRISJ           equ	3994	;# 
  2653   000F9A                     DDRJ            equ	3994	;# 
  2654   000F9B                     OSCTUNE         equ	3995	;# 
  2655   000F9C                     MEMCON          equ	3996	;# 
  2656   000F9D                     PIE1            equ	3997	;# 
  2657   000F9E                     PIR1            equ	3998	;# 
  2658   000F9F                     IPR1            equ	3999	;# 
  2659   000FA0                     PIE2            equ	4000	;# 
  2660   000FA1                     PIR2            equ	4001	;# 
  2661   000FA2                     IPR2            equ	4002	;# 
  2662   000FA3                     PIE3            equ	4003	;# 
  2663   000FA4                     PIR3            equ	4004	;# 
  2664   000FA5                     IPR3            equ	4005	;# 
  2665   000FA6                     EECON1          equ	4006	;# 
  2666   000FA7                     EECON2          equ	4007	;# 
  2667   000FAB                     RCSTA1          equ	4011	;# 
  2668   000FAB                     RCSTA           equ	4011	;# 
  2669   000FAC                     TXSTA1          equ	4012	;# 
  2670   000FAC                     TXSTA           equ	4012	;# 
  2671   000FAD                     TXREG1          equ	4013	;# 
  2672   000FAD                     TXREG           equ	4013	;# 
  2673   000FAE                     RCREG1          equ	4014	;# 
  2674   000FAE                     RCREG           equ	4014	;# 
  2675   000FAF                     SPBRG1          equ	4015	;# 
  2676   000FAF                     SPBRG           equ	4015	;# 
  2677   000FB0                     PSPCON          equ	4016	;# 
  2678   000FB1                     T3CON           equ	4017	;# 
  2679   000FB2                     TMR3            equ	4018	;# 
  2680   000FB2                     TMR3L           equ	4018	;# 
  2681   000FB3                     TMR3H           equ	4019	;# 
  2682   000FB4                     CMCON           equ	4020	;# 
  2683   000FB5                     CVRCON          equ	4021	;# 
  2684   000FB6                     ECCP1AS         equ	4022	;# 
  2685   000FB7                     CCP3CON         equ	4023	;# 
  2686   000FB7                     ECCP3CON        equ	4023	;# 
  2687   000FB8                     CCPR3           equ	4024	;# 
  2688   000FB8                     CCPR3L          equ	4024	;# 
  2689   000FB9                     CCPR3H          equ	4025	;# 
  2690   000FBA                     CCP2CON         equ	4026	;# 
  2691   000FBA                     ECCP2CON        equ	4026	;# 
  2692   000FBB                     CCPR2           equ	4027	;# 
  2693   000FBB                     CCPR2L          equ	4027	;# 
  2694   000FBC                     CCPR2H          equ	4028	;# 
  2695   000FBD                     CCP1CON         equ	4029	;# 
  2696   000FBD                     ECCP1CON        equ	4029	;# 
  2697   000FBE                     CCPR1           equ	4030	;# 
  2698   000FBE                     CCPR1L          equ	4030	;# 
  2699   000FBF                     CCPR1H          equ	4031	;# 
  2700   000FC0                     ADCON2          equ	4032	;# 
  2701   000FC1                     ADCON1          equ	4033	;# 
  2702   000FC2                     ADCON0          equ	4034	;# 
  2703   000FC3                     ADRES           equ	4035	;# 
  2704   000FC3                     ADRESL          equ	4035	;# 
  2705   000FC4                     ADRESH          equ	4036	;# 
  2706   000FC5                     SSP1CON2        equ	4037	;# 
  2707   000FC5                     SSPCON2         equ	4037	;# 
  2708   000FC6                     SSP1CON1        equ	4038	;# 
  2709   000FC6                     SSPCON1         equ	4038	;# 
  2710   000FC7                     SSP1STAT        equ	4039	;# 
  2711   000FC7                     SSPSTAT         equ	4039	;# 
  2712   000FC8                     SSP1ADD         equ	4040	;# 
  2713   000FC8                     SSPADD          equ	4040	;# 
  2714   000FC9                     SSP1BUF         equ	4041	;# 
  2715   000FC9                     SSPBUF          equ	4041	;# 
  2716   000FCA                     T2CON           equ	4042	;# 
  2717   000FCB                     PR2             equ	4043	;# 
  2718   000FCC                     TMR2            equ	4044	;# 
  2719   000FCD                     T1CON           equ	4045	;# 
  2720   000FCE                     TMR1            equ	4046	;# 
  2721   000FCE                     TMR1L           equ	4046	;# 
  2722   000FCF                     TMR1H           equ	4047	;# 
  2723   000FD0                     RCON            equ	4048	;# 
  2724   000FD1                     WDTCON          equ	4049	;# 
  2725   000FD2                     ECON1           equ	4050	;# 
  2726   000FD3                     OSCCON          equ	4051	;# 
  2727   000FD5                     T0CON           equ	4053	;# 
  2728   000FD6                     TMR0            equ	4054	;# 
  2729   000FD6                     TMR0L           equ	4054	;# 
  2730   000FD7                     TMR0H           equ	4055	;# 
  2731   000FD8                     STATUS          equ	4056	;# 
  2732   000FD9                     FSR2            equ	4057	;# 
  2733   000FD9                     FSR2L           equ	4057	;# 
  2734   000FDA                     FSR2H           equ	4058	;# 
  2735   000FDB                     PLUSW2          equ	4059	;# 
  2736   000FDC                     PREINC2         equ	4060	;# 
  2737   000FDD                     POSTDEC2        equ	4061	;# 
  2738   000FDE                     POSTINC2        equ	4062	;# 
  2739   000FDF                     INDF2           equ	4063	;# 
  2740   000FE0                     BSR             equ	4064	;# 
  2741   000FE1                     FSR1            equ	4065	;# 
  2742   000FE1                     FSR1L           equ	4065	;# 
  2743   000FE2                     FSR1H           equ	4066	;# 
  2744   000FE3                     PLUSW1          equ	4067	;# 
  2745   000FE4                     PREINC1         equ	4068	;# 
  2746   000FE5                     POSTDEC1        equ	4069	;# 
  2747   000FE6                     POSTINC1        equ	4070	;# 
  2748   000FE7                     INDF1           equ	4071	;# 
  2749   000FE8                     WREG            equ	4072	;# 
  2750   000FE9                     FSR0            equ	4073	;# 
  2751   000FE9                     FSR0L           equ	4073	;# 
  2752   000FEA                     FSR0H           equ	4074	;# 
  2753   000FEB                     PLUSW0          equ	4075	;# 
  2754   000FEC                     PREINC0         equ	4076	;# 
  2755   000FED                     POSTDEC0        equ	4077	;# 
  2756   000FEE                     POSTINC0        equ	4078	;# 
  2757   000FEF                     INDF0           equ	4079	;# 
  2758   000FF0                     INTCON3         equ	4080	;# 
  2759   000FF1                     INTCON2         equ	4081	;# 
  2760   000FF2                     INTCON          equ	4082	;# 
  2761   000FF3                     PROD            equ	4083	;# 
  2762   000FF3                     PRODL           equ	4083	;# 
  2763   000FF4                     PRODH           equ	4084	;# 
  2764   000FF5                     TABLAT          equ	4085	;# 
  2765   000FF6                     TBLPTR          equ	4086	;# 
  2766   000FF6                     TBLPTRL         equ	4086	;# 
  2767   000FF7                     TBLPTRH         equ	4087	;# 
  2768   000FF8                     TBLPTRU         equ	4088	;# 
  2769   000FF9                     PCLAT           equ	4089	;# 
  2770   000FF9                     PC              equ	4089	;# 
  2771   000FF9                     PCL             equ	4089	;# 
  2772   000FFA                     PCLATH          equ	4090	;# 
  2773   000FFB                     PCLATU          equ	4091	;# 
  2774   000FFC                     STKPTR          equ	4092	;# 
  2775   000FFD                     TOS             equ	4093	;# 
  2776   000FFD                     TOSL            equ	4093	;# 
  2777   000FFE                     TOSH            equ	4094	;# 
  2778   000FFF                     TOSU            equ	4095	;# 
  2779   000E80                     MAADR5          equ	3712	;# 
  2780   000E81                     MAADR6          equ	3713	;# 
  2781   000E82                     MAADR3          equ	3714	;# 
  2782   000E83                     MAADR4          equ	3715	;# 
  2783   000E84                     MAADR1          equ	3716	;# 
  2784   000E85                     MAADR2          equ	3717	;# 
  2785   000E8A                     MISTAT          equ	3722	;# 
  2786   000E97                     EFLOCON         equ	3735	;# 
  2787   000E98                     EPAUS           equ	3736	;# 
  2788   000E98                     EPAUSL          equ	3736	;# 
  2789   000E99                     EPAUSH          equ	3737	;# 
  2790   000EA0                     MACON1          equ	3744	;# 
  2791   000EA2                     MACON3          equ	3746	;# 
  2792   000EA3                     MACON4          equ	3747	;# 
  2793   000EA4                     MABBIPG         equ	3748	;# 
  2794   000EA6                     MAIPG           equ	3750	;# 
  2795   000EA6                     MAIPGL          equ	3750	;# 
  2796   000EA7                     MAIPGH          equ	3751	;# 
  2797   000EAA                     MAMXFL          equ	3754	;# 
  2798   000EAA                     MAMXFLL         equ	3754	;# 
  2799   000EAB                     MAMXFLH         equ	3755	;# 
  2800   000EB2                     MICMD           equ	3762	;# 
  2801   000EB4                     MIREGADR        equ	3764	;# 
  2802   000EB6                     MIWR            equ	3766	;# 
  2803   000EB6                     MIWRL           equ	3766	;# 
  2804   000EB7                     MIWRH           equ	3767	;# 
  2805   000EB8                     MIRD            equ	3768	;# 
  2806   000EB8                     MIRDL           equ	3768	;# 
  2807   000EB9                     MIRDH           equ	3769	;# 
  2808   000EC0                     EHT0            equ	3776	;# 
  2809   000EC1                     EHT1            equ	3777	;# 
  2810   000EC2                     EHT2            equ	3778	;# 
  2811   000EC3                     EHT3            equ	3779	;# 
  2812   000EC4                     EHT4            equ	3780	;# 
  2813   000EC5                     EHT5            equ	3781	;# 
  2814   000EC6                     EHT6            equ	3782	;# 
  2815   000EC7                     EHT7            equ	3783	;# 
  2816   000EC8                     EPMM0           equ	3784	;# 
  2817   000EC9                     EPMM1           equ	3785	;# 
  2818   000ECA                     EPMM2           equ	3786	;# 
  2819   000ECB                     EPMM3           equ	3787	;# 
  2820   000ECC                     EPMM4           equ	3788	;# 
  2821   000ECD                     EPMM5           equ	3789	;# 
  2822   000ECE                     EPMM6           equ	3790	;# 
  2823   000ECF                     EPMM7           equ	3791	;# 
  2824   000ED0                     EPMCS           equ	3792	;# 
  2825   000ED0                     EPMCSL          equ	3792	;# 
  2826   000ED1                     EPMCSH          equ	3793	;# 
  2827   000ED4                     EPMO            equ	3796	;# 
  2828   000ED4                     EPMOL           equ	3796	;# 
  2829   000ED5                     EPMOH           equ	3797	;# 
  2830   000ED8                     ERXFCON         equ	3800	;# 
  2831   000ED9                     EPKTCNT         equ	3801	;# 
  2832   000EE2                     EWRPT           equ	3810	;# 
  2833   000EE2                     EWRPTL          equ	3810	;# 
  2834   000EE3                     EWRPTH          equ	3811	;# 
  2835   000EE4                     ETXST           equ	3812	;# 
  2836   000EE4                     ETXSTL          equ	3812	;# 
  2837   000EE5                     ETXSTH          equ	3813	;# 
  2838   000EE6                     ETXND           equ	3814	;# 
  2839   000EE6                     ETXNDL          equ	3814	;# 
  2840   000EE7                     ETXNDH          equ	3815	;# 
  2841   000EE8                     ERXST           equ	3816	;# 
  2842   000EE8                     ERXSTL          equ	3816	;# 
  2843   000EE9                     ERXSTH          equ	3817	;# 
  2844   000EEA                     ERXND           equ	3818	;# 
  2845   000EEA                     ERXNDL          equ	3818	;# 
  2846   000EEB                     ERXNDH          equ	3819	;# 
  2847   000EEC                     ERXRDPT         equ	3820	;# 
  2848   000EEC                     ERXRDPTL        equ	3820	;# 
  2849   000EED                     ERXRDPTH        equ	3821	;# 
  2850   000EEE                     ERXWRPT         equ	3822	;# 
  2851   000EEE                     ERXWRPTL        equ	3822	;# 
  2852   000EEF                     ERXWRPTH        equ	3823	;# 
  2853   000EF0                     EDMAST          equ	3824	;# 
  2854   000EF0                     EDMASTL         equ	3824	;# 
  2855   000EF1                     EDMASTH         equ	3825	;# 
  2856   000EF2                     EDMAND          equ	3826	;# 
  2857   000EF2                     EDMANDL         equ	3826	;# 
  2858   000EF3                     EDMANDH         equ	3827	;# 
  2859   000EF4                     EDMADST         equ	3828	;# 
  2860   000EF4                     EDMADSTL        equ	3828	;# 
  2861   000EF5                     EDMADSTH        equ	3829	;# 
  2862   000EF6                     EDMACS          equ	3830	;# 
  2863   000EF6                     EDMACSL         equ	3830	;# 
  2864   000EF7                     EDMACSH         equ	3831	;# 
  2865   000EFB                     EIE             equ	3835	;# 
  2866   000EFD                     ESTAT           equ	3837	;# 
  2867   000EFE                     ECON2           equ	3838	;# 
  2868   000F60                     EIR             equ	3936	;# 
  2869   000F61                     EDATA           equ	3937	;# 
  2870   000F62                     SSP2CON2        equ	3938	;# 
  2871   000F63                     SSP2CON1        equ	3939	;# 
  2872   000F64                     SSP2STAT        equ	3940	;# 
  2873   000F65                     SSP2ADD         equ	3941	;# 
  2874   000F66                     SSP2BUF         equ	3942	;# 
  2875   000F67                     ECCP2DEL        equ	3943	;# 
  2876   000F68                     ECCP2AS         equ	3944	;# 
  2877   000F69                     ECCP3DEL        equ	3945	;# 
  2878   000F6A                     ECCP3AS         equ	3946	;# 
  2879   000F6B                     RCSTA2          equ	3947	;# 
  2880   000F6C                     TXSTA2          equ	3948	;# 
  2881   000F6D                     TXREG2          equ	3949	;# 
  2882   000F6E                     RCREG2          equ	3950	;# 
  2883   000F6F                     SPBRG2          equ	3951	;# 
  2884   000F70                     CCP5CON         equ	3952	;# 
  2885   000F71                     CCPR5           equ	3953	;# 
  2886   000F71                     CCPR5L          equ	3953	;# 
  2887   000F72                     CCPR5H          equ	3954	;# 
  2888   000F73                     CCP4CON         equ	3955	;# 
  2889   000F74                     CCPR4           equ	3956	;# 
  2890   000F74                     CCPR4L          equ	3956	;# 
  2891   000F75                     CCPR4H          equ	3957	;# 
  2892   000F76                     T4CON           equ	3958	;# 
  2893   000F77                     PR4             equ	3959	;# 
  2894   000F78                     TMR4            equ	3960	;# 
  2895   000F79                     ECCP1DEL        equ	3961	;# 
  2896   000F7A                     ERDPT           equ	3962	;# 
  2897   000F7A                     ERDPTL          equ	3962	;# 
  2898   000F7B                     ERDPTH          equ	3963	;# 
  2899   000F7C                     BAUDCON2        equ	3964	;# 
  2900   000F7C                     BAUDCTL2        equ	3964	;# 
  2901   000F7D                     SPBRGH2         equ	3965	;# 
  2902   000F7E                     BAUDCON1        equ	3966	;# 
  2903   000F7E                     BAUDCON         equ	3966	;# 
  2904   000F7E                     BAUDCTL         equ	3966	;# 
  2905   000F7E                     BAUDCTL1        equ	3966	;# 
  2906   000F7F                     SPBRGH1         equ	3967	;# 
  2907   000F7F                     SPBRGH          equ	3967	;# 
  2908   000F80                     PORTA           equ	3968	;# 
  2909   000F81                     PORTB           equ	3969	;# 
  2910   000F82                     PORTC           equ	3970	;# 
  2911   000F83                     PORTD           equ	3971	;# 
  2912   000F84                     PORTE           equ	3972	;# 
  2913   000F85                     PORTF           equ	3973	;# 
  2914   000F86                     PORTG           equ	3974	;# 
  2915   000F87                     PORTH           equ	3975	;# 
  2916   000F88                     PORTJ           equ	3976	;# 
  2917   000F89                     LATA            equ	3977	;# 
  2918   000F8A                     LATB            equ	3978	;# 
  2919   000F8B                     LATC            equ	3979	;# 
  2920   000F8C                     LATD            equ	3980	;# 
  2921   000F8D                     LATE            equ	3981	;# 
  2922   000F8E                     LATF            equ	3982	;# 
  2923   000F8F                     LATG            equ	3983	;# 
  2924   000F90                     LATH            equ	3984	;# 
  2925   000F91                     LATJ            equ	3985	;# 
  2926   000F92                     TRISA           equ	3986	;# 
  2927   000F92                     DDRA            equ	3986	;# 
  2928   000F93                     TRISB           equ	3987	;# 
  2929   000F93                     DDRB            equ	3987	;# 
  2930   000F94                     TRISC           equ	3988	;# 
  2931   000F94                     DDRC            equ	3988	;# 
  2932   000F95                     TRISD           equ	3989	;# 
  2933   000F95                     DDRD            equ	3989	;# 
  2934   000F96                     TRISE           equ	3990	;# 
  2935   000F96                     DDRE            equ	3990	;# 
  2936   000F97                     TRISF           equ	3991	;# 
  2937   000F97                     DDRF            equ	3991	;# 
  2938   000F98                     TRISG           equ	3992	;# 
  2939   000F98                     DDRG            equ	3992	;# 
  2940   000F99                     TRISH           equ	3993	;# 
  2941   000F99                     DDRH            equ	3993	;# 
  2942   000F9A                     TRISJ           equ	3994	;# 
  2943   000F9A                     DDRJ            equ	3994	;# 
  2944   000F9B                     OSCTUNE         equ	3995	;# 
  2945   000F9C                     MEMCON          equ	3996	;# 
  2946   000F9D                     PIE1            equ	3997	;# 
  2947   000F9E                     PIR1            equ	3998	;# 
  2948   000F9F                     IPR1            equ	3999	;# 
  2949   000FA0                     PIE2            equ	4000	;# 
  2950   000FA1                     PIR2            equ	4001	;# 
  2951   000FA2                     IPR2            equ	4002	;# 
  2952   000FA3                     PIE3            equ	4003	;# 
  2953   000FA4                     PIR3            equ	4004	;# 
  2954   000FA5                     IPR3            equ	4005	;# 
  2955   000FA6                     EECON1          equ	4006	;# 
  2956   000FA7                     EECON2          equ	4007	;# 
  2957   000FAB                     RCSTA1          equ	4011	;# 
  2958   000FAB                     RCSTA           equ	4011	;# 
  2959   000FAC                     TXSTA1          equ	4012	;# 
  2960   000FAC                     TXSTA           equ	4012	;# 
  2961   000FAD                     TXREG1          equ	4013	;# 
  2962   000FAD                     TXREG           equ	4013	;# 
  2963   000FAE                     RCREG1          equ	4014	;# 
  2964   000FAE                     RCREG           equ	4014	;# 
  2965   000FAF                     SPBRG1          equ	4015	;# 
  2966   000FAF                     SPBRG           equ	4015	;# 
  2967   000FB0                     PSPCON          equ	4016	;# 
  2968   000FB1                     T3CON           equ	4017	;# 
  2969   000FB2                     TMR3            equ	4018	;# 
  2970   000FB2                     TMR3L           equ	4018	;# 
  2971   000FB3                     TMR3H           equ	4019	;# 
  2972   000FB4                     CMCON           equ	4020	;# 
  2973   000FB5                     CVRCON          equ	4021	;# 
  2974   000FB6                     ECCP1AS         equ	4022	;# 
  2975   000FB7                     CCP3CON         equ	4023	;# 
  2976   000FB7                     ECCP3CON        equ	4023	;# 
  2977   000FB8                     CCPR3           equ	4024	;# 
  2978   000FB8                     CCPR3L          equ	4024	;# 
  2979   000FB9                     CCPR3H          equ	4025	;# 
  2980   000FBA                     CCP2CON         equ	4026	;# 
  2981   000FBA                     ECCP2CON        equ	4026	;# 
  2982   000FBB                     CCPR2           equ	4027	;# 
  2983   000FBB                     CCPR2L          equ	4027	;# 
  2984   000FBC                     CCPR2H          equ	4028	;# 
  2985   000FBD                     CCP1CON         equ	4029	;# 
  2986   000FBD                     ECCP1CON        equ	4029	;# 
  2987   000FBE                     CCPR1           equ	4030	;# 
  2988   000FBE                     CCPR1L          equ	4030	;# 
  2989   000FBF                     CCPR1H          equ	4031	;# 
  2990   000FC0                     ADCON2          equ	4032	;# 
  2991   000FC1                     ADCON1          equ	4033	;# 
  2992   000FC2                     ADCON0          equ	4034	;# 
  2993   000FC3                     ADRES           equ	4035	;# 
  2994   000FC3                     ADRESL          equ	4035	;# 
  2995   000FC4                     ADRESH          equ	4036	;# 
  2996   000FC5                     SSP1CON2        equ	4037	;# 
  2997   000FC5                     SSPCON2         equ	4037	;# 
  2998   000FC6                     SSP1CON1        equ	4038	;# 
  2999   000FC6                     SSPCON1         equ	4038	;# 
  3000   000FC7                     SSP1STAT        equ	4039	;# 
  3001   000FC7                     SSPSTAT         equ	4039	;# 
  3002   000FC8                     SSP1ADD         equ	4040	;# 
  3003   000FC8                     SSPADD          equ	4040	;# 
  3004   000FC9                     SSP1BUF         equ	4041	;# 
  3005   000FC9                     SSPBUF          equ	4041	;# 
  3006   000FCA                     T2CON           equ	4042	;# 
  3007   000FCB                     PR2             equ	4043	;# 
  3008   000FCC                     TMR2            equ	4044	;# 
  3009   000FCD                     T1CON           equ	4045	;# 
  3010   000FCE                     TMR1            equ	4046	;# 
  3011   000FCE                     TMR1L           equ	4046	;# 
  3012   000FCF                     TMR1H           equ	4047	;# 
  3013   000FD0                     RCON            equ	4048	;# 
  3014   000FD1                     WDTCON          equ	4049	;# 
  3015   000FD2                     ECON1           equ	4050	;# 
  3016   000FD3                     OSCCON          equ	4051	;# 
  3017   000FD5                     T0CON           equ	4053	;# 
  3018   000FD6                     TMR0            equ	4054	;# 
  3019   000FD6                     TMR0L           equ	4054	;# 
  3020   000FD7                     TMR0H           equ	4055	;# 
  3021   000FD8                     STATUS          equ	4056	;# 
  3022   000FD9                     FSR2            equ	4057	;# 
  3023   000FD9                     FSR2L           equ	4057	;# 
  3024   000FDA                     FSR2H           equ	4058	;# 
  3025   000FDB                     PLUSW2          equ	4059	;# 
  3026   000FDC                     PREINC2         equ	4060	;# 
  3027   000FDD                     POSTDEC2        equ	4061	;# 
  3028   000FDE                     POSTINC2        equ	4062	;# 
  3029   000FDF                     INDF2           equ	4063	;# 
  3030   000FE0                     BSR             equ	4064	;# 
  3031   000FE1                     FSR1            equ	4065	;# 
  3032   000FE1                     FSR1L           equ	4065	;# 
  3033   000FE2                     FSR1H           equ	4066	;# 
  3034   000FE3                     PLUSW1          equ	4067	;# 
  3035   000FE4                     PREINC1         equ	4068	;# 
  3036   000FE5                     POSTDEC1        equ	4069	;# 
  3037   000FE6                     POSTINC1        equ	4070	;# 
  3038   000FE7                     INDF1           equ	4071	;# 
  3039   000FE8                     WREG            equ	4072	;# 
  3040   000FE9                     FSR0            equ	4073	;# 
  3041   000FE9                     FSR0L           equ	4073	;# 
  3042   000FEA                     FSR0H           equ	4074	;# 
  3043   000FEB                     PLUSW0          equ	4075	;# 
  3044   000FEC                     PREINC0         equ	4076	;# 
  3045   000FED                     POSTDEC0        equ	4077	;# 
  3046   000FEE                     POSTINC0        equ	4078	;# 
  3047   000FEF                     INDF0           equ	4079	;# 
  3048   000FF0                     INTCON3         equ	4080	;# 
  3049   000FF1                     INTCON2         equ	4081	;# 
  3050   000FF2                     INTCON          equ	4082	;# 
  3051   000FF3                     PROD            equ	4083	;# 
  3052   000FF3                     PRODL           equ	4083	;# 
  3053   000FF4                     PRODH           equ	4084	;# 
  3054   000FF5                     TABLAT          equ	4085	;# 
  3055   000FF6                     TBLPTR          equ	4086	;# 
  3056   000FF6                     TBLPTRL         equ	4086	;# 
  3057   000FF7                     TBLPTRH         equ	4087	;# 
  3058   000FF8                     TBLPTRU         equ	4088	;# 
  3059   000FF9                     PCLAT           equ	4089	;# 
  3060   000FF9                     PC              equ	4089	;# 
  3061   000FF9                     PCL             equ	4089	;# 
  3062   000FFA                     PCLATH          equ	4090	;# 
  3063   000FFB                     PCLATU          equ	4091	;# 
  3064   000FFC                     STKPTR          equ	4092	;# 
  3065   000FFD                     TOS             equ	4093	;# 
  3066   000FFD                     TOSL            equ	4093	;# 
  3067   000FFE                     TOSH            equ	4094	;# 
  3068   000FFF                     TOSU            equ	4095	;# 
  3069                           
  3070 ;;_filterObj	offset	0
  3071 ;;_maskObj	offset	6
  3072 ;;_rxObj	offset	0
  3073 ;;_rxdata	offset	16
  3074 ;;_ev	offset	0
  3075 ;;_tmid	offset	6
  3076 ;;_processEvent	offset=-3 (param)
  3077 ;;_id	offset=-4 (param)
  3078 ;;_delay	offset=-6 (param)
  3079 ;;_tm	offset	0
  3080 ;;_temp	offset	2
  3081 ;;_ev	offset=-6 (param)
  3082 ;;_inISR	offset=-7 (param)
  3083 ;;_tmid	offset=-9 (param)
  3084 ;;_i	offset	0
  3085 ;;_tm	offset=-2 (param)
  3086 ;;_ev	offset=-8 (param)
  3087 ;;_inISR	offset=-9 (param)
  3088 ;;_me	offset=-2 (param)
  3089 ;;_delay	offset=-4 (param)
  3090 ;;_me	offset=-2 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_processEvent	offset=-5 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_eventID	offset=-3 (param)
  3095 ;;_rxFlags	offset	0
  3096 ;;_rxObj	offset=-2 (param)
  3097 ;;_rxd	offset=-4 (param)
  3098 ;;_temp32	offset	0
  3099 ;;_ba	offset	4
  3100 ;;_fifoReg	offset	80
  3101 ;;_ciFifoCon	offset	92
  3102 ;;_myReg	offset	97
  3103 ;;_ciFifoUa	offset	101
  3104 ;;_a	offset	105
  3105 ;;_i	offset	107
  3106 ;;_n	offset	108
  3107 ;;_spiTransferError	offset	109
  3108 ;;_channel	offset=-1 (param)
  3109 ;;_rxObj	offset=-3 (param)
  3110 ;;_rxd	offset=-5 (param)
  3111 ;;_nBytes	offset=-6 (param)
  3112 ;;_ciFifoCon	offset	0
  3113 ;;_a	offset	5
  3114 ;;_spiTransferError	offset	7
  3115 ;;_channel	offset=-1 (param)
  3116 ;;_i	offset	0
  3117 ;;_spiTransferSize	offset	2
  3118 ;;_spiTransferError	offset	4
  3119 ;;_address	offset=-2 (param)
  3120 ;;_rxd	offset=-4 (param)
  3121 ;;_nBytes	offset=-6 (param)
  3122 ;;_ciFifoSta	offset	0
  3123 ;;_a	offset	4
  3124 ;;_spiTransferError	offset	6
  3125 ;;_channel	offset=-1 (param)
  3126 ;;_flags	offset=-3 (param)
  3127 ;;_i	offset	0
  3128 ;;_me	offset=-2 (param)
  3129 ;;_ev	offset	0
  3130 ;;_ev	offset=-2 (param)
  3131 ;;_txMsg	offset	0
  3132 ;;_txdata	offset	16
  3133 ;;_percent	offset=-1 (param)
  3134 ;;_ev	offset=-2 (param)
  3135 ;;_txMsg	offset	0
  3136 ;;_txdata	offset	16
  3137 ;;_light	offset=-1 (param)
  3138 ;;_txMsg	offset	0
  3139 ;;_txdata	offset	16
  3140 ;;_light	offset=-1 (param)
  3141 ;;_txFlags	offset	0
  3142 ;;_txObj	offset=-2 (param)
  3143 ;;_txd	offset=-4 (param)
  3144 ;;_temp32	offset	0
  3145 ;;_txBuffer	offset	4
  3146 ;;_fifoReg	offset	80
  3147 ;;_ciFifoCon	offset	92
  3148 ;;_a	offset	97
  3149 ;;_ciFifoUa	offset	101
  3150 ;;_dataBytesInObject	offset	105
  3151 ;;_n	offset	109
  3152 ;;_spiTransferError	offset	111
  3153 ;;_i	offset	112
  3154 ;;_j	offset	113
  3155 ;;_channel	offset=-1 (param)
  3156 ;;_txObj	offset=-3 (param)
  3157 ;;_txd	offset=-5 (param)
  3158 ;;_txdNumBytes	offset=-9 (param)
  3159 ;;_flush	offset=-10 (param)
  3160 ;;_i	offset	0
  3161 ;;_spiTransferSize	offset	2
  3162 ;;_spiTransferError	offset	4
  3163 ;;_address	offset=-2 (param)
  3164 ;;_txd	offset=-4 (param)
  3165 ;;_nBytes	offset=-6 (param)
  3166 ;;_ciFifoCon	offset	0
  3167 ;;_a	offset	5
  3168 ;;_spiTransferError	offset	7
  3169 ;;_channel	offset=-1 (param)
  3170 ;;_flush	offset=-2 (param)
  3171 ;;_w	offset	0
  3172 ;;_i	offset	4
  3173 ;;_j	offset	6
  3174 ;;_spiTransferSize	offset	8
  3175 ;;_n	offset	10
  3176 ;;_spiTransferError	offset	12
  3177 ;;_address	offset=-2 (param)
  3178 ;;_rxd	offset=-4 (param)
  3179 ;;_nWords	offset=-6 (param)
  3180 ;;_dataBytesInObject	offset	0
  3181 ;;_dlc	offset=-1 (param)
  3182 ;;_ciFifoSta	offset	0
  3183 ;;_a	offset	4
  3184 ;;_spiTransferError	offset	6
  3185 ;;_channel	offset=-1 (param)
  3186 ;;_flags	offset=-3 (param)
  3187 ;;_ev	offset	0
  3188 ;;_inISR	offset=-6 (param)
  3189 ;;_sign	offset	0
  3190 ;;_counter	offset	1
  3191 ;;_dividend	offset=-2 (param)
  3192 ;;_divisor	offset=-4 (param)
  3193 ;;_inISR	offset=-1 (param)
  3194 ;;_inISR	offset=-1 (param)
  3195 ;;_InterruptHandler	offset=-3 (param)
  3196 ;;_filter	offset=-1 (param)
  3197 ;;_fObj	offset=-3 (param)
  3198 ;;_mObj	offset=-5 (param)
  3199 ;;_a	offset	0
  3200 ;;_fCtrl	offset	2
  3201 ;;_filter	offset=-1 (param)
  3202 ;;_channel	offset=-2 (param)
  3203 ;;_enable	offset=-3 (param)
  3204 ;;_temp32	offset	0
  3205 ;;_fObj	offset	4
  3206 ;;_a	offset	10
  3207 ;;_filter	offset=-1 (param)
  3208 ;;_id	offset=-3 (param)
  3209 ;;_temp32	offset	0
  3210 ;;_mObj	offset	4
  3211 ;;_a	offset	10
  3212 ;;_filter	offset=-1 (param)
  3213 ;;_mask	offset=-3 (param)
  3214 ;;_EXIDE	offset=-4 (param)
  3215 ;;_a	offset	0
  3216 ;;_spiTransferError	offset	2
  3217 ;;_fCtrl	offset	3
  3218 ;;_filter	offset=-1 (param)
  3219 ;;_txqConfig	offset	0
  3220 ;;_config	offset	4
  3221 ;;_rxfConfig	offset	7
  3222 ;;_txfConfig	offset	10
  3223 ;;_tefConfig	offset	12
  3224 ;;_bitTime	offset=-1 (param)
  3225 ;;_withISR	offset=-2 (param)
  3226 ;;_ciFifoCon	offset	0
  3227 ;;_config	offset=-2 (param)
  3228 ;;_ciFifoCon	offset	0
  3229 ;;_config	offset=-2 (param)
  3230 ;;_ciFifoCon	offset	0
  3231 ;;_config	offset=-2 (param)
  3232 ;;_ciFifoCon	offset	0
  3233 ;;_a	offset	5
  3234 ;;_channel	offset=-1 (param)
  3235 ;;_config	offset=-3 (param)
  3236 ;;_ts	offset=-4 (param)
  3237 ;;_ps	offset=-2 (param)
  3238 ;;_d	offset	0
  3239 ;;_spiTransferError	offset	1
  3240 ;;_ciTefCon	offset	0
  3241 ;;_config	offset=-2 (param)
  3242 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3243 ;;_ciFifoCon	offset	0
  3244 ;;_a	offset	5
  3245 ;;_channel	offset=-1 (param)
  3246 ;;_config	offset=-3 (param)
  3247 ;;_d	offset	0
  3248 ;;_spiTransferError	offset	1
  3249 ;;_opMode	offset=-1 (param)
  3250 ;;_spiTransferError	offset	0
  3251 ;;_address	offset=-2 (param)
  3252 ;;_txd	offset=-3 (param)
  3253 ;;_spiTransferError	offset	0
  3254 ;;_address	offset=-2 (param)
  3255 ;;_rxd	offset=-4 (param)
  3256 ;;_intEnables	offset	0
  3257 ;;_index	offset=-1 (param)
  3258 ;;_flags	offset=-3 (param)
  3259 ;;_spiTransferSize	offset	0
  3260 ;;_i	offset	2
  3261 ;;_spiTransferError	offset	3
  3262 ;;_address	offset=-2 (param)
  3263 ;;_txd	offset=-4 (param)
  3264 ;;_ciCon	offset	0
  3265 ;;_config	offset=-2 (param)
  3266 ;;_ciCon	offset	0
  3267 ;;_config	offset=-2 (param)
  3268 ;;_ciNbtcfg	offset	0
  3269 ;;_bitTime	offset=-1 (param)
  3270 ;;_spiTransferSize	offset	0
  3271 ;;_i	offset	2
  3272 ;;_spiTransferError	offset	3
  3273 ;;_address	offset=-2 (param)
  3274 ;;_txd	offset=-6 (param)
  3275 ;;_dummy	offset	0
  3276 ;;_txPtr	offset=-2 (param)
  3277 ;;_rxPtr	offset=-4 (param)
  3278 ;;_size	offset=-6 (param)
  3279 ;;_dummy	offset	0
  3280 ;;_i	offset	1
  3281 ;;_id	offset=-1 (param)
  3282 ;;_inISR	offset=-2 (param)
  3283 ;;_me	offset=-2 (param)
  3284 ;;_tm	offset	0
  3285 ;;_temp	offset	2
  3286 ;;_ev	offset=-6 (param)
  3287 ;;_inISR	offset=-7 (param)
  3288 ;;_tmid	offset=-9 (param)
  3289 ;;_sign	offset	0
  3290 ;;_counter	offset	1
  3291 ;;_dividend	offset=-2 (param)
  3292 ;;_divisor	offset=-4 (param)
  3293 ;;_i	offset	0
  3294 ;;_tm	offset=-2 (param)
  3295 ;;_ev	offset=-8 (param)
  3296 ;;_inISR	offset=-9 (param)
  3297 ;;_inISR	offset=-1 (param)
  3298 ;;_inISR	offset=-1 (param)
  3299 ;;_me	offset=-2 (param)
  3300 ;;_delay	offset=-4 (param)
  3301 ;;_me	offset=-2 (param)
  3302                           
  3303                           	psect	mediumconst
  3304   00FF8C                     __pmediumconst:
  3305                           	callstack 0
  3306   00FF8C  00                 	db	0
  3307   00FF8D                     _canControlResetValues:
  3308                           	callstack 0
  3309   00FF8D  0760               	dw	1888
  3310   00FF8F  0498               	dw	1176
  3311   00FF91  0F0F               	dw	3855
  3312   00FF93  003E               	dw	62
  3313   00FF95  0303               	dw	771
  3314   00FF97  000E               	dw	14
  3315   00FF99  1000               	dw	4096
  3316   00FF9B  0002               	dw	2
  3317   00FF9D  0000               	dw	0
  3318   00FF9F  0000               	dw	0
  3319   00FFA1  0000               	dw	0
  3320   00FFA3  0000               	dw	0
  3321   00FFA5  0040               	dw	64
  3322   00FFA7  4040               	dw	16448
  3323   00FFA9  0000               	dw	0
  3324   00FFAB  0000               	dw	0
  3325   00FFAD  0000               	dw	0
  3326   00FFAF  0000               	dw	0
  3327   00FFB1  0000               	dw	0
  3328   00FFB3  0000               	dw	0
  3329   00FFB5  0000               	dw	0
  3330   00FFB7  0000               	dw	0
  3331   00FFB9  0000               	dw	0
  3332   00FFBB  0000               	dw	0
  3333   00FFBD  0000               	dw	0
  3334   00FFBF  0000               	dw	0
  3335   00FFC1  0000               	dw	0
  3336   00FFC3  0020               	dw	32
  3337   00FFC5  0000               	dw	0
  3338   00FFC7  0000               	dw	0
  3339   00FFC9  0000               	dw	0
  3340   00FFCB  0000               	dw	0
  3341   00FFCD  0400               	dw	1024
  3342   00FFCF  0000               	dw	0
  3343   00FFD1  0000               	dw	0
  3344   00FFD3  0000               	dw	0
  3345   00FFD5  0000               	dw	0
  3346   00FFD7  0000               	dw	0
  3347   00FFD9  0000               	dw	0
  3348   00FFDB  0000               	dw	0
  3349   00FFDD                     __end_of_canControlResetValues:
  3350                           	callstack 0
  3351   00FFDD                     _canFifoResetValues:
  3352                           	callstack 0
  3353   00FFDD  0400               	dw	1024
  3354   00FFDF  0060               	dw	96
  3355   00FFE1  0000               	dw	0
  3356   00FFE3  0000               	dw	0
  3357   00FFE5  0000               	dw	0
  3358   00FFE7  0000               	dw	0
  3359   00FFE9                     __end_of_canFifoResetValues:
  3360                           	callstack 0
  3361   00FFE9                     _spi2_configuration:
  3362                           	callstack 0
  3363   00FFE9  01                 	db	1
  3364   00FFEA  40                 	db	64
  3365   00FFEB  00                 	db	0
  3366   00FFEC  00                 	db	0
  3367   00FFED                     __end_of_spi2_configuration:
  3368                           	callstack 0
  3369   00FFED                     STR_1:
  3370   00FFED  20                 	db	32
  3371   00FFEE  20                 	db	32
  3372   00FFEF  20                 	db	32
  3373   00FFF0  20                 	db	32
  3374   00FFF1  20                 	db	32
  3375   00FFF2  20                 	db	32
  3376   00FFF3  20                 	db	32
  3377   00FFF4  20                 	db	32
  3378   00FFF5  20                 	db	32
  3379   00FFF6  20                 	db	32
  3380   00FFF7  20                 	db	32
  3381   00FFF8  20                 	db	32
  3382   00FFF9  20                 	db	32
  3383   00FFFA  20                 	db	32
  3384   00FFFB  20                 	db	32
  3385   00FFFC  20                 	db	32
  3386   00FFFD  00                 	db	0
  3387   00FFED                     STR_2           equ	STR_1
  3388   00FFFE  00                 	db	0	; dummy byte at the end
  3389   000003                     __activetblptr  equ	3
  3390                           
  3391                           	psect	nvCOMRAM
  3392   000050                     __pnvCOMRAM:
  3393                           	callstack 0
  3394   000050                     _TMR0_InterruptHandler:
  3395                           	callstack 0
  3396   000050                     	ds	3
  3397   000F62                     _SSP2CON2       set	3938
  3398   000F63                     _SSP2CON1bits   set	3939
  3399   000F65                     _SSP2ADD        set	3941
  3400   000F63                     _SSP2CON1       set	3939
  3401   000F64                     _SSP2STAT       set	3940
  3402   000FD5                     _T0CON          set	4053
  3403   000FD6                     _TMR0L          set	4054
  3404   000FD7                     _TMR0H          set	4055
  3405   000FD5                     _T0CONbits      set	4053
  3406   000FF2                     _INTCONbits     set	4082
  3407   000FD0                     _RCONbits       set	4048
  3408   000FC1                     _ADCON1bits     set	4033
  3409   000F95                     _TRISD          set	3989
  3410   000F94                     _TRISC          set	3988
  3411   000F99                     _TRISH          set	3993
  3412   000F93                     _TRISB          set	3987
  3413   000F98                     _TRISG          set	3992
  3414   000F92                     _TRISA          set	3986
  3415   000F97                     _TRISF          set	3991
  3416   000F96                     _TRISE          set	3990
  3417   000F90                     _LATH           set	3984
  3418   000F8B                     _LATC           set	3979
  3419   000F8F                     _LATG           set	3983
  3420   000F8A                     _LATB           set	3978
  3421   000F8E                     _LATF           set	3982
  3422   000F89                     _LATA           set	3977
  3423   000F8C                     _LATD           set	3980
  3424   000F91                     _LATJ           set	3985
  3425   000F8D                     _LATE           set	3981
  3426   000F9B                     _OSCTUNE        set	3995
  3427   000FD3                     _OSCCON         set	4051
  3428   000F9A                     _TRISJ          set	3994
  3429   000F95                     _TRISDbits      set	3989
  3430   000F98                     _TRISGbits      set	3992
  3431   000F66                     _SSP2BUF        set	3942
  3432   000F64                     _SSP2STATbits   set	3940
  3433   000F8F                     _LATGbits       set	3983
  3434                           
  3435                           ; #config settings
  3436                           
  3437                           	psect	cinit
  3438   0146F0                     __pcinit:
  3439                           	callstack 0
  3440   0146F0                     start_initialization:
  3441                           	callstack 0
  3442   0146F0                     __initialization:
  3443                           	callstack 0
  3444                           
  3445                           ; Clear objects allocated to BIGRAM (282 bytes)
  3446   0146F0  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3447   0146F4  EE21 F01A          	lfsr	2,282
  3448   0146F8                     clear_0:
  3449   0146F8  6AEE               	clrf	postinc0,c
  3450   0146FA  50DD               	movf	postdec2,w,c
  3451   0146FC  50D9               	movf	fsr2l,w,c
  3452   0146FE  E1FC               	bnz	clear_0
  3453   014700  50DA               	movf	fsr2h,w,c
  3454   014702  E1FA               	bnz	clear_0
  3455                           
  3456                           ; Clear objects allocated to BANK2 (200 bytes)
  3457   014704  EE02  F000         	lfsr	0,__pbssBANK2
  3458   014708  0EC8               	movlw	200
  3459   01470A                     clear_1:
  3460   01470A  6AEE               	clrf	postinc0,c
  3461   01470C  06E8               	decf	wreg,f,c
  3462   01470E  E1FD               	bnz	clear_1
  3463                           
  3464                           ; Clear objects allocated to BANK1 (200 bytes)
  3465   014710  EE01  F000         	lfsr	0,__pbssBANK1
  3466   014714  0EC8               	movlw	200
  3467   014716                     clear_2:
  3468   014716  6AEE               	clrf	postinc0,c
  3469   014718  06E8               	decf	wreg,f,c
  3470   01471A  E1FD               	bnz	clear_2
  3471                           
  3472                           ; Clear objects allocated to BANK0 (59 bytes)
  3473   01471C  EE00  F060         	lfsr	0,__pbssBANK0
  3474   014720  0E3B               	movlw	59
  3475   014722                     clear_3:
  3476   014722  6AEE               	clrf	postinc0,c
  3477   014724  06E8               	decf	wreg,f,c
  3478   014726  E1FD               	bnz	clear_3
  3479                           
  3480                           ; Clear objects allocated to COMRAM (31 bytes)
  3481   014728  EE00  F021         	lfsr	0,__pbssCOMRAM
  3482   01472C  0E1F               	movlw	31
  3483   01472E                     clear_4:
  3484   01472E  6AEE               	clrf	postinc0,c
  3485   014730  06E8               	decf	wreg,f,c
  3486   014732  E1FD               	bnz	clear_4
  3487   014734                     end_of_initialization:
  3488                           	callstack 0
  3489   014734                     __end_of__initialization:
  3490                           	callstack 0
  3491   014734  0100               	movlb	0
  3492   014736  EFAC  F099         	goto	_main	;jump to C main() function
  3493                           
  3494                           	psect	bssCOMRAM
  3495   000021                     __pbssCOMRAM:
  3496                           	callstack 0
  3497   000021                     motorControl@F6642:
  3498                           	callstack 0
  3499   000021                     	ds	16
  3500   000031                     _dummy:
  3501                           	callstack 0
  3502   000031                     	ds	4
  3503   000035                     TMR0_ISR@CountCallBack:
  3504                           	callstack 0
  3505   000035                     	ds	2
  3506   000037                     _timer0ReloadVal:
  3507                           	callstack 0
  3508   000037                     	ds	2
  3509   000039                     lightControl_Process@oldState:
  3510                           	callstack 0
  3511   000039                     	ds	1
  3512   00003A                     lightControl_Process@state:
  3513                           	callstack 0
  3514   00003A                     	ds	1
  3515   00003B                     lightContol_BackLight@lastLight:
  3516                           	callstack 0
  3517   00003B                     	ds	1
  3518   00003C                     lightContol_FrontLight@lastLight:
  3519                           	callstack 0
  3520   00003C                     	ds	1
  3521   00003D                     motorControl_Process@oldState:
  3522                           	callstack 0
  3523   00003D                     	ds	1
  3524   00003E                     motorControl_Process@state:
  3525                           	callstack 0
  3526   00003E                     	ds	1
  3527   00003F                     motorControl@lastPercent:
  3528                           	callstack 0
  3529   00003F                     	ds	1
  3530                           
  3531                           	psect	bssBANK0
  3532   000060                     __pbssBANK0:
  3533                           	callstack 0
  3534   000060                     _carState:
  3535                           	callstack 0
  3536   000060                     	ds	27
  3537   00007B                     lightContol_BackLight@F6665:
  3538                           	callstack 0
  3539   00007B                     	ds	16
  3540   00008B                     lightContol_FrontLight@F6659:
  3541                           	callstack 0
  3542   00008B                     	ds	16
  3543                           
  3544                           	psect	bssBANK1
  3545   000100                     __pbssBANK1:
  3546                           	callstack 0
  3547   000100                     _spiTransmitBuffer:
  3548                           	callstack 0
  3549   000100                     	ds	200
  3550                           
  3551                           	psect	bssBANK2
  3552   000200                     __pbssBANK2:
  3553                           	callstack 0
  3554   000200                     _spiReceiveBuffer:
  3555                           	callstack 0
  3556   000200                     	ds	200
  3557                           
  3558                           	psect	bssBIGRAM
  3559   0002C8                     __pbssBIGRAM:
  3560                           	callstack 0
  3561   0002C8                     _theXF:
  3562                           	callstack 0
  3563   0002C8                     	ds	282
  3564                           
  3565                           	psect	cstackCOMRAM
  3566   000040                     __pcstackCOMRAM:
  3567                           	callstack 0
  3568   000040                     ??_INTERRUPT_InterruptManager:
  3569                           
  3570                           ; 1 bytes @ 0x0
  3571   000040                     	ds	16
  3572                           
  3573 ;;
  3574 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3575 ;;
  3576 ;; *************** function _main *****************
  3577 ;; Defined at:
  3578 ;;		line 56 in file "main.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  filterObj       6  [STACK] struct _CAN_FILTEROBJ_ID
  3583 ;;  maskObj         6  [STACK] struct _CAN_MASKOBJ_ID
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1  [STACK] void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels required when called: 15
  3599 ;; This function calls:
  3600 ;;		_CanInit
  3601 ;;		_CanSetFilter
  3602 ;;		_SYSTEM_Initialize
  3603 ;;		_TMR0_SetInterruptHandler
  3604 ;;		_XF_executeOnce
  3605 ;;		_XF_init
  3606 ;;		_XF_post
  3607 ;;		_updateCarState
  3608 ;; This function is called by:
  3609 ;;		Startup code after reset
  3610 ;; This function uses a reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text0
  3614   013358                     __ptext0:
  3615                           	callstack 0
  3616   013358                     _main:
  3617                           	callstack 0
  3618                           
  3619                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3620   013358  0E0C               	movlw	12
  3621   01335A  26E1               	addwf	fsr1l,f,c
  3622   01335C  0E00               	movlw	0
  3623   01335E  22E2               	addwfc	fsr1h,f,c
  3624   013360                     
  3625                           ;main.c: 58:     CAN_FILTEROBJ_ID filterObj;;main.c: 59:     CAN_MASKOBJ_ID maskObj;;mai
      +                          n.c: 62:     filterObj.ID = 1;
  3626   013360  0E01               	movlw	1
  3627   013362  6E09               	movwf	(btemp+8)^0,c
  3628   013364  6A0A               	clrf	(btemp+9)^0,c
  3629   013366  6A0B               	clrf	(btemp+10)^0,c
  3630   013368  6A0C               	clrf	(btemp+11)^0,c
  3631                           
  3632                           ;stkvar	_filterObj @ sp[(-12)+0]
  3633   01336A  0EF4               	movlw	-12
  3634   01336C  C009  FFE3         	movff	btemp+8,plusw1
  3635   013370  0EF5               	movlw	-11
  3636   013372  C00A  FFE3         	movff	btemp+9,plusw1
  3637   013376  0EF6               	movlw	-10
  3638   013378  C00B  FFE3         	movff	btemp+10,plusw1
  3639   01337C  0EF7               	movlw	-9
  3640   01337E  C00C  FFE3         	movff	btemp+11,plusw1
  3641   013382                     
  3642                           ;main.c: 63:     filterObj.SID11 = 0;
  3643                           ;stkvar	_filterObj @ sp[(-12)+0]
  3644   013382  0EF8               	movlw	248
  3645   013384  24E1               	addwf	fsr1l,w,c
  3646   013386  6ED9               	movwf	fsr2l,c
  3647   013388  0EFF               	movlw	255
  3648   01338A  20E2               	addwfc	fsr1h,w,c
  3649   01338C  6EDA               	movwf	fsr2h,c
  3650   01338E  6ADF               	clrf	indf2,c
  3651   013390                     
  3652                           ;main.c: 64:     filterObj.EXIDE = 0;
  3653                           ;stkvar	_filterObj @ sp[(-12)+0]
  3654   013390  0EF9               	movlw	249
  3655   013392  24E1               	addwf	fsr1l,w,c
  3656   013394  6ED9               	movwf	fsr2l,c
  3657   013396  0EFF               	movlw	255
  3658   013398  20E2               	addwfc	fsr1h,w,c
  3659   01339A  6EDA               	movwf	fsr2h,c
  3660   01339C  6ADF               	clrf	indf2,c
  3661                           
  3662                           ;main.c: 66:     maskObj.MID = 0x00F;
  3663   01339E  0E0F               	movlw	15
  3664   0133A0  6E09               	movwf	(btemp+8)^0,c
  3665   0133A2  6A0A               	clrf	(btemp+9)^0,c
  3666   0133A4  6A0B               	clrf	(btemp+10)^0,c
  3667   0133A6  6A0C               	clrf	(btemp+11)^0,c
  3668                           
  3669                           ;stkvar	_maskObj @ sp[(-12)+6]
  3670   0133A8  0EFA               	movlw	-6
  3671   0133AA  C009  FFE3         	movff	btemp+8,plusw1
  3672   0133AE  0EFB               	movlw	-5
  3673   0133B0  C00A  FFE3         	movff	btemp+9,plusw1
  3674   0133B4  0EFC               	movlw	-4
  3675   0133B6  C00B  FFE3         	movff	btemp+10,plusw1
  3676   0133BA  0EFD               	movlw	-3
  3677   0133BC  C00C  FFE3         	movff	btemp+11,plusw1
  3678   0133C0                     
  3679                           ;main.c: 67:     maskObj.MIDE = 1;
  3680                           ;stkvar	_maskObj @ sp[(-12)+6]
  3681   0133C0  0EFF               	movlw	255
  3682   0133C2  24E1               	addwf	fsr1l,w,c
  3683   0133C4  6ED9               	movwf	fsr2l,c
  3684   0133C6  0EFF               	movlw	255
  3685   0133C8  20E2               	addwfc	fsr1h,w,c
  3686   0133CA  6EDA               	movwf	fsr2h,c
  3687   0133CC  0E01               	movlw	1
  3688   0133CE  6EDF               	movwf	indf2,c
  3689   0133D0                     
  3690                           ;main.c: 68:     maskObj.MSID11 = 0;
  3691                           ;stkvar	_maskObj @ sp[(-12)+6]
  3692   0133D0  0EFE               	movlw	254
  3693   0133D2  24E1               	addwf	fsr1l,w,c
  3694   0133D4  6ED9               	movwf	fsr2l,c
  3695   0133D6  0EFF               	movlw	255
  3696   0133D8  20E2               	addwfc	fsr1h,w,c
  3697   0133DA  6EDA               	movwf	fsr2h,c
  3698   0133DC  6ADF               	clrf	indf2,c
  3699   0133DE                     
  3700                           ;main.c: 69:     SYSTEM_Initialize();
  3701   0133DE  ECBF  F0A4         	call	_SYSTEM_Initialize	;wreg free
  3702   0133E2                     
  3703                           ;main.c: 72:     CanInit(CAN_250K_500K, 0);
  3704   0133E2  0E00               	movlw	0
  3705   0133E4  6EE6               	movwf	postinc1,c
  3706   0133E6  0E08               	movlw	8
  3707   0133E8  6EE6               	movwf	postinc1,c
  3708   0133EA  EC32  F08F         	call	_CanInit	;wreg free
  3709   0133EE                     
  3710                           ;main.c: 73:     CanSetFilter(CAN_FILTER0, &filterObj, &maskObj);
  3711                           ;stkvar	_maskObj @ sp[(-12)+6]
  3712   0133EE  0EFA               	movlw	250
  3713   0133F0  24E1               	addwf	fsr1l,w,c
  3714   0133F2  6E01               	movwf	btemp^0,c
  3715   0133F4  0EFF               	movlw	255
  3716   0133F6  20E2               	addwfc	fsr1h,w,c
  3717   0133F8  6E02               	movwf	(btemp+1)^0,c
  3718   0133FA  C001  FFE6         	movff	btemp,postinc1
  3719   0133FE  C002  FFE6         	movff	btemp+1,postinc1
  3720                           
  3721                           ;stkvar	_filterObj @ sp[(-14)+0]
  3722   013402  0EF2               	movlw	242
  3723   013404  24E1               	addwf	fsr1l,w,c
  3724   013406  6E01               	movwf	btemp^0,c
  3725   013408  0EFF               	movlw	255
  3726   01340A  20E2               	addwfc	fsr1h,w,c
  3727   01340C  6E02               	movwf	(btemp+1)^0,c
  3728   01340E  C001  FFE6         	movff	btemp,postinc1
  3729   013412  C002  FFE6         	movff	btemp+1,postinc1
  3730   013416  0E00               	movlw	0
  3731   013418  6EE6               	movwf	postinc1,c
  3732   01341A  EC00  F0A2         	call	_CanSetFilter	;wreg free
  3733   01341E                     
  3734                           ;main.c: 75:     XF_init();
  3735   01341E  ECF2  F095         	call	_XF_init	;wreg free
  3736   013422                     
  3737                           ;main.c: 77:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3738   013422  0E62               	movlw	low _XF_decrementAndQueueTimers
  3739   013424  6EE6               	movwf	postinc1,c
  3740   013426  0E34               	movlw	high _XF_decrementAndQueueTimers
  3741   013428  6EE6               	movwf	postinc1,c
  3742   01342A  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3743   01342C  6EE6               	movwf	postinc1,c
  3744   01342E  EC7B  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
  3745   013432                     
  3746                           ;main.c: 85:     (INTCONbits.GIE = 1);
  3747   013432  8EF2               	bsf	242,7,c	;volatile
  3748   013434                     
  3749                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  3750   013434  8CF2               	bsf	242,6,c	;volatile
  3751   013436                     
  3752                           ;main.c: 95:     XF_post(lightControl_Process,E_INIT,0);
  3753   013436  0E00               	movlw	0
  3754   013438  6EE6               	movwf	postinc1,c
  3755   01343A  0E00               	movlw	0
  3756   01343C  6EE6               	movwf	postinc1,c
  3757   01343E  0E01               	movlw	1
  3758   013440  6EE6               	movwf	postinc1,c
  3759   013442  0E58               	movlw	low _lightControl_Process
  3760   013444  6EE6               	movwf	postinc1,c
  3761   013446  0E27               	movlw	high _lightControl_Process
  3762   013448  6EE6               	movwf	postinc1,c
  3763   01344A  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3764   01344C  6EE6               	movwf	postinc1,c
  3765   01344E  EC08  F09C         	call	_XF_post	;wreg free
  3766   013452                     l5368:
  3767                           
  3768                           ;main.c: 97:     {;main.c: 98:         updateCarState();
  3769   013452  EC28  F091         	call	_updateCarState	;wreg free
  3770   013456                     
  3771                           ;main.c: 99:         XF_executeOnce();
  3772   013456  EC3B  F0A1         	call	_XF_executeOnce	;wreg free
  3773   01345A  EF29  F09A         	goto	l5368
  3774   01345E  EF57  F000         	goto	start
  3775   013462                     __end_of_main:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _updateCarState *****************
  3779 ;; Defined at:
  3780 ;;		line 226 in file "carFunctions.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3785 ;;  rxdata          8  [STACK] unsigned char [8]
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1  [STACK] void 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;Total ram usage:        0 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 12
  3802 ;; This function calls:
  3803 ;;		_CanReceive
  3804 ;;		_XF_post
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text1
  3811   012250                     __ptext1:
  3812                           	callstack 0
  3813   012250                     _updateCarState:
  3814                           	callstack 0
  3815                           
  3816                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3817   012250  0E18               	movlw	24
  3818   012252  26E1               	addwf	fsr1l,f,c
  3819   012254  0E00               	movlw	0
  3820   012256  22E2               	addwfc	fsr1h,f,c
  3821   012258                     
  3822                           ;carFunctions.c: 229:     CAN_RX_MSGOBJ rxObj;;carFunctions.c: 230:     uint8_t rxdata[8
      +                          ];;carFunctions.c: 232:     if (CanReceive(&rxObj, rxdata) == 0)
  3823                           ;stkvar	_rxdata @ sp[(-24)+16]
  3824   012258  0EF8               	movlw	248
  3825   01225A  24E1               	addwf	fsr1l,w,c
  3826   01225C  6E01               	movwf	btemp^0,c
  3827   01225E  0EFF               	movlw	255
  3828   012260  20E2               	addwfc	fsr1h,w,c
  3829   012262  6E02               	movwf	(btemp+1)^0,c
  3830   012264  C001  FFE6         	movff	btemp,postinc1
  3831   012268  C002  FFE6         	movff	btemp+1,postinc1
  3832                           
  3833                           ;stkvar	_rxObj @ sp[(-26)+0]
  3834   01226C  0EE6               	movlw	230
  3835   01226E  24E1               	addwf	fsr1l,w,c
  3836   012270  6E01               	movwf	btemp^0,c
  3837   012272  0EFF               	movlw	255
  3838   012274  20E2               	addwfc	fsr1h,w,c
  3839   012276  6E02               	movwf	(btemp+1)^0,c
  3840   012278  C001  FFE6         	movff	btemp,postinc1
  3841   01227C  C002  FFE6         	movff	btemp+1,postinc1
  3842   012280  EC35  F0A2         	call	_CanReceive	;wreg free
  3843   012284  5001               	movf	btemp^0,w,c
  3844   012286  A4D8               	btfss	status,2,c
  3845   012288  EF48  F091         	goto	u2991
  3846   01228C  EF4A  F091         	goto	u2990
  3847   012290                     u2991:
  3848   012290  EF0B  F092         	goto	l1515
  3849   012294                     u2990:
  3850   012294  EFCD  F091         	goto	l5318
  3851   012298                     l5298:
  3852                           
  3853                           ;carFunctions.c: 238:                 carState.contactKey = rxdata[0];
  3854                           ;stkvar	_rxdata @ sp[(-24)+16]
  3855   012298  0EF8               	movlw	-8
  3856   01229A  CFE3 F06E          	movff	plusw1,_carState+14
  3857   01229E                     
  3858                           ;carFunctions.c: 240:                 if (rxdata[0] == 0)
  3859                           ;stkvar	_rxdata @ sp[(-24)+16]
  3860   01229E  0EF8               	movlw	-8
  3861   0122A0  50E3               	movf	plusw1,w,c
  3862   0122A2  A4D8               	btfss	status,2,c
  3863   0122A4  EF56  F091         	goto	u3001
  3864   0122A8  EF58  F091         	goto	u3000
  3865   0122AC                     u3001:
  3866   0122AC  EF76  F091         	goto	l5304
  3867   0122B0                     u3000:
  3868   0122B0                     
  3869                           ;carFunctions.c: 241:                 {;carFunctions.c: 242:                     XF_post
      +                          (lightControl_Process, E_CONTACT_OFF, 0);
  3870   0122B0  0E00               	movlw	0
  3871   0122B2  6EE6               	movwf	postinc1,c
  3872   0122B4  0E00               	movlw	0
  3873   0122B6  6EE6               	movwf	postinc1,c
  3874   0122B8  0E02               	movlw	2
  3875   0122BA  6EE6               	movwf	postinc1,c
  3876   0122BC  0E58               	movlw	low _lightControl_Process
  3877   0122BE  6EE6               	movwf	postinc1,c
  3878   0122C0  0E27               	movlw	high _lightControl_Process
  3879   0122C2  6EE6               	movwf	postinc1,c
  3880   0122C4  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3881   0122C6  6EE6               	movwf	postinc1,c
  3882   0122C8  EC08  F09C         	call	_XF_post	;wreg free
  3883                           
  3884                           ;carFunctions.c: 243:                     XF_post(motorControl_Process, E_CONTACT_OFF, 0
      +                          );
  3885   0122CC  0E00               	movlw	0
  3886   0122CE  6EE6               	movwf	postinc1,c
  3887   0122D0  0E00               	movlw	0
  3888   0122D2  6EE6               	movwf	postinc1,c
  3889   0122D4  0E02               	movlw	2
  3890   0122D6  6EE6               	movwf	postinc1,c
  3891   0122D8  0E20               	movlw	low _motorControl_Process
  3892   0122DA  6EE6               	movwf	postinc1,c
  3893   0122DC  0E24               	movlw	high _motorControl_Process
  3894   0122DE  6EE6               	movwf	postinc1,c
  3895   0122E0  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3896   0122E2  6EE6               	movwf	postinc1,c
  3897   0122E4  EC08  F09C         	call	_XF_post	;wreg free
  3898                           
  3899                           ;carFunctions.c: 244:                 }
  3900   0122E8  EF0B  F092         	goto	l1515
  3901   0122EC                     l5304:
  3902                           
  3903                           ;carFunctions.c: 246:                 {;carFunctions.c: 247:                     XF_post
      +                          (lightControl_Process, E_CONTACT_ON, 0);
  3904   0122EC  0E00               	movlw	0
  3905   0122EE  6EE6               	movwf	postinc1,c
  3906   0122F0  0E00               	movlw	0
  3907   0122F2  6EE6               	movwf	postinc1,c
  3908   0122F4  0E03               	movlw	3
  3909   0122F6  6EE6               	movwf	postinc1,c
  3910   0122F8  0E58               	movlw	low _lightControl_Process
  3911   0122FA  6EE6               	movwf	postinc1,c
  3912   0122FC  0E27               	movlw	high _lightControl_Process
  3913   0122FE  6EE6               	movwf	postinc1,c
  3914   012300  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3915   012302  6EE6               	movwf	postinc1,c
  3916   012304  EC08  F09C         	call	_XF_post	;wreg free
  3917                           
  3918                           ;carFunctions.c: 248:                     XF_post(motorControl_Process, E_CONTACT_ON, 0)
      +                          ;
  3919   012308  0E00               	movlw	0
  3920   01230A  6EE6               	movwf	postinc1,c
  3921   01230C  0E00               	movlw	0
  3922   01230E  6EE6               	movwf	postinc1,c
  3923   012310  0E03               	movlw	3
  3924   012312  6EE6               	movwf	postinc1,c
  3925   012314  0E20               	movlw	low _motorControl_Process
  3926   012316  6EE6               	movwf	postinc1,c
  3927   012318  0E24               	movlw	high _motorControl_Process
  3928   01231A  6EE6               	movwf	postinc1,c
  3929   01231C  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3930   01231E  6EE6               	movwf	postinc1,c
  3931   012320  EC08  F09C         	call	_XF_post	;wreg free
  3932   012324  EF0B  F092         	goto	l1515
  3933   012328                     l5306:
  3934                           
  3935                           ;carFunctions.c: 254:                 carState.brakePedal = rxdata[0];
  3936                           ;stkvar	_rxdata @ sp[(-24)+16]
  3937   012328  0EF8               	movlw	-8
  3938   01232A  CFE3 F06C          	movff	plusw1,_carState+12
  3939   01232E                     
  3940                           ;carFunctions.c: 256:                 if (rxdata[0] > 6)
  3941                           ;stkvar	_rxdata @ sp[(-24)+16]
  3942   01232E  0EF8               	movlw	-8
  3943   012330  CFE3 F001          	movff	plusw1,btemp
  3944   012334  0E06               	movlw	6
  3945   012336  6401               	cpfsgt	btemp^0,c
  3946   012338  EFA0  F091         	goto	u3011
  3947   01233C  EFA2  F091         	goto	u3010
  3948   012340                     u3011:
  3949   012340  EF0B  F092         	goto	l1515
  3950   012344                     u3010:
  3951   012344                     
  3952                           ;carFunctions.c: 257:                 {;carFunctions.c: 258:                     XF_post
      +                          (lightControl_Process, E_HIGH_BRAKE, 0);
  3953   012344  0E00               	movlw	0
  3954   012346  6EE6               	movwf	postinc1,c
  3955   012348  0E00               	movlw	0
  3956   01234A  6EE6               	movwf	postinc1,c
  3957   01234C  0E04               	movlw	4
  3958   01234E  6EE6               	movwf	postinc1,c
  3959   012350  0E58               	movlw	low _lightControl_Process
  3960   012352  6EE6               	movwf	postinc1,c
  3961   012354  0E27               	movlw	high _lightControl_Process
  3962   012356  6EE6               	movwf	postinc1,c
  3963   012358  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3964   01235A  6EE6               	movwf	postinc1,c
  3965   01235C  EC08  F09C         	call	_XF_post	;wreg free
  3966   012360  EF0B  F092         	goto	l1515
  3967   012364                     l5312:
  3968                           
  3969                           ;carFunctions.c: 265:                 if (rxdata[0] > 6)
  3970                           ;stkvar	_rxdata @ sp[(-24)+16]
  3971   012364  0EF8               	movlw	-8
  3972   012366  CFE3 F001          	movff	plusw1,btemp
  3973   01236A  0E06               	movlw	6
  3974   01236C  6401               	cpfsgt	btemp^0,c
  3975   01236E  EFBB  F091         	goto	u3021
  3976   012372  EFBD  F091         	goto	u3020
  3977   012376                     u3021:
  3978   012376  EF0B  F092         	goto	l1515
  3979   01237A                     u3020:
  3980   01237A                     
  3981                           ;carFunctions.c: 266:                 {;carFunctions.c: 267:                     XF_post
      +                          (motorControl_Process, E_ACCELERATION_ON, 0);
  3982   01237A  0E00               	movlw	0
  3983   01237C  6EE6               	movwf	postinc1,c
  3984   01237E  0E00               	movlw	0
  3985   012380  6EE6               	movwf	postinc1,c
  3986   012382  0E08               	movlw	8
  3987   012384  6EE6               	movwf	postinc1,c
  3988   012386  0E20               	movlw	low _motorControl_Process
  3989   012388  6EE6               	movwf	postinc1,c
  3990   01238A  0E24               	movlw	high _motorControl_Process
  3991   01238C  6EE6               	movwf	postinc1,c
  3992   01238E  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3993   012390  6EE6               	movwf	postinc1,c
  3994   012392  EC08  F09C         	call	_XF_post	;wreg free
  3995   012396  EF0B  F092         	goto	l1515
  3996   01239A                     l5318:
  3997                           
  3998                           ;stkvar	_rxObj @ sp[(-24)+0]
  3999   01239A  50E1               	movf	fsr1l,w,c
  4000   01239C  0FE8               	addlw	-24
  4001   01239E  6ED9               	movwf	fsr2l,c
  4002   0123A0  50E2               	movf	fsr1h,w,c
  4003   0123A2  6EDA               	movwf	fsr2h,c
  4004   0123A4  0EFF               	movlw	255
  4005   0123A6  22DA               	addwfc	fsr2h,f,c
  4006   0123A8  0EF0               	movlw	240
  4007   0123AA  14DE               	andwf	postinc2,w,c
  4008   0123AC  6E09               	movwf	(btemp+8)^0,c
  4009   0123AE  0E07               	movlw	7
  4010   0123B0  14DE               	andwf	postinc2,w,c
  4011   0123B2  6E0A               	movwf	(btemp+9)^0,c
  4012   0123B4  0E00               	movlw	0
  4013   0123B6  14DE               	andwf	postinc2,w,c
  4014   0123B8  6E0B               	movwf	(btemp+10)^0,c
  4015   0123BA  0E00               	movlw	0
  4016   0123BC  14DE               	andwf	postinc2,w,c
  4017   0123BE  6E0C               	movwf	(btemp+11)^0,c
  4018                           
  4019                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4020                           ; Switch size 1, requested type "simple"
  4021                           ; Number of cases is 1, Range of values is 0 to 0
  4022                           ; switch strategies available:
  4023                           ; Name         Instructions Cycles
  4024                           ; simple_byte            4     3 (average)
  4025                           ;	Chosen strategy is simple_byte
  4026   0123C0  500C               	movf	(btemp+11)^0,w,c
  4027   0123C2  0A00               	xorlw	0	; case 0
  4028   0123C4  B4D8               	btfsc	status,2,c
  4029   0123C6  EF04  F092         	goto	l5574
  4030   0123CA  EF0B  F092         	goto	l1515
  4031   0123CE                     l5572:
  4032                           
  4033                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4034                           ; Switch size 1, requested type "simple"
  4035                           ; Number of cases is 2, Range of values is 0 to 1
  4036                           ; switch strategies available:
  4037                           ; Name         Instructions Cycles
  4038                           ; simple_byte            7     4 (average)
  4039                           ;	Chosen strategy is simple_byte
  4040   0123CE  500A               	movf	(btemp+9)^0,w,c
  4041   0123D0  0A00               	xorlw	0	; case 0
  4042   0123D2  B4D8               	btfsc	status,2,c
  4043   0123D4  EFF2  F091         	goto	l5576
  4044   0123D8  0A01               	xorlw	1	; case 1
  4045   0123DA  B4D8               	btfsc	status,2,c
  4046   0123DC  EFFD  F091         	goto	l5578
  4047   0123E0  EF0B  F092         	goto	l1515
  4048   0123E4                     l5576:
  4049                           
  4050                           ; Switch size 1, requested type "simple"
  4051                           ; Number of cases is 2, Range of values is 64 to 80
  4052                           ; switch strategies available:
  4053                           ; Name         Instructions Cycles
  4054                           ; simple_byte            7     4 (average)
  4055                           ;	Chosen strategy is simple_byte
  4056   0123E4  5009               	movf	(btemp+8)^0,w,c
  4057   0123E6  0A40               	xorlw	64	; case 64
  4058   0123E8  B4D8               	btfsc	status,2,c
  4059   0123EA  EF94  F091         	goto	l5306
  4060   0123EE  0A10               	xorlw	16	; case 80
  4061   0123F0  B4D8               	btfsc	status,2,c
  4062   0123F2  EF4C  F091         	goto	l5298
  4063   0123F6  EF0B  F092         	goto	l1515
  4064   0123FA                     l5578:
  4065                           
  4066                           ; Switch size 1, requested type "simple"
  4067                           ; Number of cases is 1, Range of values is 64 to 64
  4068                           ; switch strategies available:
  4069                           ; Name         Instructions Cycles
  4070                           ; simple_byte            4     3 (average)
  4071                           ;	Chosen strategy is simple_byte
  4072   0123FA  5009               	movf	(btemp+8)^0,w,c
  4073   0123FC  0A40               	xorlw	64	; case 64
  4074   0123FE  B4D8               	btfsc	status,2,c
  4075   012400  EFB2  F091         	goto	l5312
  4076   012404  EF0B  F092         	goto	l1515
  4077   012408                     l5574:
  4078                           
  4079                           ; Switch size 1, requested type "simple"
  4080                           ; Number of cases is 1, Range of values is 0 to 0
  4081                           ; switch strategies available:
  4082                           ; Name         Instructions Cycles
  4083                           ; simple_byte            4     3 (average)
  4084                           ;	Chosen strategy is simple_byte
  4085   012408  500B               	movf	(btemp+10)^0,w,c
  4086   01240A  0A00               	xorlw	0	; case 0
  4087   01240C  B4D8               	btfsc	status,2,c
  4088   01240E  EFE7  F091         	goto	l5572
  4089   012412  EF0B  F092         	goto	l1515
  4090   012416                     l1515:
  4091                           
  4092                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4093   012416  0EE8               	movlw	232
  4094   012418  26E1               	addwf	fsr1l,f,c
  4095   01241A  0EFF               	movlw	255
  4096   01241C  22E2               	addwfc	fsr1h,f,c
  4097   01241E  0012               	return		;funcret
  4098   012420                     __end_of_updateCarState:
  4099                           	callstack 0
  4100                           
  4101 ;; *************** function _XF_post *****************
  4102 ;; Defined at:
  4103 ;;		line 274 in file "xf/xf.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4106 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4107 ;;  id              1  [STACK] unsigned char 
  4108 ;;  delay           2  [STACK] unsigned short 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  ev              6  [STACK] struct Event_
  4111 ;;  tmid            1  [STACK] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1  [STACK] unsigned char 
  4114 ;; Registers used:
  4115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used: 1
  4127 ;; Hardware stack levels required when called: 10
  4128 ;; This function calls:
  4129 ;;		_Event_init
  4130 ;;		_Event_setDelay
  4131 ;;		_Event_setId
  4132 ;;		_Event_setPE
  4133 ;;		_XF_pushEvent
  4134 ;; This function is called by:
  4135 ;;		_main
  4136 ;;		_updateCarState
  4137 ;; This function uses a reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text2
  4141   013810                     __ptext2:
  4142                           	callstack 0
  4143   013810                     _XF_post:
  4144                           	callstack 0
  4145                           
  4146                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4147   013810  0E07               	movlw	7
  4148   013812  26E1               	addwf	fsr1l,f,c
  4149   013814  0E00               	movlw	0
  4150   013816  22E2               	addwfc	fsr1h,f,c
  4151   013818                     
  4152                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4153                           ;stkvar	_tmid @ sp[(-7)+6]
  4154   013818  0EFF               	movlw	-1
  4155   01381A  6AE3               	clrf	plusw1,c
  4156   01381C  84E3               	bsf	plusw1,2,c
  4157   01381E  86E3               	bsf	plusw1,3,c	;indir
  4158   013820                     
  4159                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4160                           ;stkvar	_ev @ sp[(-7)+0]
  4161   013820  0EF9               	movlw	249
  4162   013822  24E1               	addwf	fsr1l,w,c
  4163   013824  6E01               	movwf	btemp^0,c
  4164   013826  0EFF               	movlw	255
  4165   013828  20E2               	addwfc	fsr1h,w,c
  4166   01382A  6E02               	movwf	(btemp+1)^0,c
  4167   01382C  C001  FFE6         	movff	btemp,postinc1
  4168   013830  C002  FFE6         	movff	btemp+1,postinc1
  4169   013834  EC51  F0A3         	call	_Event_init	;wreg free
  4170   013838                     
  4171                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4172                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4173   013838  0EF6               	movlw	-10
  4174   01383A  CFE3 FFE6          	movff	plusw1,postinc1
  4175   01383E  CFE3 FFE6          	movff	plusw1,postinc1
  4176   013842  CFE3 FFE6          	movff	plusw1,postinc1
  4177                           
  4178                           ;stkvar	_ev @ sp[(-10)+0]
  4179   013846  0EF6               	movlw	246
  4180   013848  24E1               	addwf	fsr1l,w,c
  4181   01384A  6E01               	movwf	btemp^0,c
  4182   01384C  0EFF               	movlw	255
  4183   01384E  20E2               	addwfc	fsr1h,w,c
  4184   013850  6E02               	movwf	(btemp+1)^0,c
  4185   013852  C001  FFE6         	movff	btemp,postinc1
  4186   013856  C002  FFE6         	movff	btemp+1,postinc1
  4187   01385A  EC9D  F0A3         	call	_Event_setPE	;wreg free
  4188   01385E                     
  4189                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4190                           ;stkvar	_id @ sp[(-7)+-4]
  4191   01385E  0EF5               	movlw	-11
  4192   013860  50E3               	movf	plusw1,w,c
  4193   013862  6EE6               	movwf	postinc1,c
  4194                           
  4195                           ;stkvar	_ev @ sp[(-8)+0]
  4196   013864  0EF8               	movlw	248
  4197   013866  24E1               	addwf	fsr1l,w,c
  4198   013868  6E01               	movwf	btemp^0,c
  4199   01386A  0EFF               	movlw	255
  4200   01386C  20E2               	addwfc	fsr1h,w,c
  4201   01386E  6E02               	movwf	(btemp+1)^0,c
  4202   013870  C001  FFE6         	movff	btemp,postinc1
  4203   013874  C002  FFE6         	movff	btemp+1,postinc1
  4204   013878  EC9A  F0A4         	call	_Event_setId	;wreg free
  4205   01387C                     
  4206                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4207                           ;stkvar	_delay @ sp[(-7)+-6]
  4208   01387C  0EF3               	movlw	-13
  4209   01387E  CFE3 FFE6          	movff	plusw1,postinc1
  4210   013882  CFE3 FFE6          	movff	plusw1,postinc1
  4211                           
  4212                           ;stkvar	_ev @ sp[(-9)+0]
  4213   013886  0EF7               	movlw	247
  4214   013888  24E1               	addwf	fsr1l,w,c
  4215   01388A  6E01               	movwf	btemp^0,c
  4216   01388C  0EFF               	movlw	255
  4217   01388E  20E2               	addwfc	fsr1h,w,c
  4218   013890  6E02               	movwf	(btemp+1)^0,c
  4219   013892  C001  FFE6         	movff	btemp,postinc1
  4220   013896  C002  FFE6         	movff	btemp+1,postinc1
  4221   01389A  ECD8  F0A3         	call	_Event_setDelay	;wreg free
  4222   01389E                     
  4223                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4224                           ;stkvar	_tmid @ sp[(-7)+6]
  4225   01389E  0EFF               	movlw	255
  4226   0138A0  24E1               	addwf	fsr1l,w,c
  4227   0138A2  6E01               	movwf	btemp^0,c
  4228   0138A4  0EFF               	movlw	255
  4229   0138A6  20E2               	addwfc	fsr1h,w,c
  4230   0138A8  6E02               	movwf	(btemp+1)^0,c
  4231   0138AA  C001  FFE6         	movff	btemp,postinc1
  4232   0138AE  C002  FFE6         	movff	btemp+1,postinc1
  4233   0138B2  0E00               	movlw	0
  4234   0138B4  6EE6               	movwf	postinc1,c
  4235                           
  4236                           ;stkvar	_ev @ sp[(-10)+0]
  4237   0138B6  0EF6               	movlw	246
  4238   0138B8  24E1               	addwf	fsr1l,w,c
  4239   0138BA  6ED9               	movwf	fsr2l,c
  4240   0138BC  0EFF               	movlw	255
  4241   0138BE  20E2               	addwfc	fsr1h,w,c
  4242   0138C0  6EDA               	movwf	fsr2h,c
  4243   0138C2  0E06               	movlw	6
  4244   0138C4                     u2781:
  4245   0138C4  CFDE FFE6          	movff	postinc2,postinc1
  4246   0138C8  2CE8               	decfsz	wreg,w,c
  4247   0138CA  EF62  F09C         	goto	u2781
  4248   0138CE  EC32  F095         	call	_XF_pushEvent	;wreg free
  4249   0138D2                     
  4250                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4251   0138D2  0EF3               	movlw	243
  4252   0138D4  26E1               	addwf	fsr1l,f,c
  4253   0138D6  0EFF               	movlw	255
  4254   0138D8  22E2               	addwfc	fsr1h,f,c
  4255   0138DA  0012               	return		;funcret
  4256   0138DC                     __end_of_XF_post:
  4257                           	callstack 0
  4258                           
  4259 ;; *************** function _XF_pushEvent *****************
  4260 ;; Defined at:
  4261 ;;		line 106 in file "xf/xf.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  ev              6  [STACK] struct Event_
  4264 ;;  inISR           1  [STACK] _Bool 
  4265 ;;  tmid            2  [STACK] PTR unsigned char 
  4266 ;;		 -> tmid(1), dummy(1), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  tm              2  [STACK] unsigned short 
  4269 ;;  temp            1  [STACK] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1  [STACK] _Bool 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;Total ram usage:        0 bytes
  4284 ;; Hardware stack levels used: 1
  4285 ;; Hardware stack levels required when called: 9
  4286 ;; This function calls:
  4287 ;;		_ENTERCRITICAL
  4288 ;;		_Event_getDelay
  4289 ;;		_Event_setDelay
  4290 ;;		_LEAVECRITICAL
  4291 ;;		_XF_noMoreEvent
  4292 ;;		_XF_scheduleTimer
  4293 ;;		___awmod
  4294 ;; This function is called by:
  4295 ;;		_XF_decrementAndQueueTimers
  4296 ;;		_XF_post
  4297 ;; This function uses a reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text3
  4301   012A64                     __ptext3:
  4302                           	callstack 0
  4303   012A64                     _XF_pushEvent:
  4304                           	callstack 0
  4305                           
  4306                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4307   012A64  52E6               	movf	postinc1,f,c
  4308   012A66  52E6               	movf	postinc1,f,c
  4309   012A68  52E6               	movf	postinc1,f,c
  4310   012A6A                     
  4311                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4312                           ;stkvar	_ev @ sp[(-3)+-6]
  4313   012A6A  0EF7               	movlw	247
  4314   012A6C  24E1               	addwf	fsr1l,w,c
  4315   012A6E  6E01               	movwf	btemp^0,c
  4316   012A70  0EFF               	movlw	255
  4317   012A72  20E2               	addwfc	fsr1h,w,c
  4318   012A74  6E02               	movwf	(btemp+1)^0,c
  4319   012A76  C001  FFE6         	movff	btemp,postinc1
  4320   012A7A  C002  FFE6         	movff	btemp+1,postinc1
  4321   012A7E  EC68  F0A4         	call	_Event_getDelay	;wreg free
  4322                           
  4323                           ;stkvar	_tm @ sp[(-3)+0]
  4324   012A82  0EFD               	movlw	-3
  4325   012A84  C001  FFE3         	movff	btemp,plusw1
  4326   012A88  0EFE               	movlw	-2
  4327   012A8A  C002  FFE3         	movff	btemp+1,plusw1
  4328   012A8E                     
  4329                           ;xf/xf.c: 111:     if ( tm > 0)
  4330                           ;stkvar	_tm @ sp[(-3)+0]
  4331   012A8E  0EFD               	movlw	-3
  4332   012A90  CFE3 F001          	movff	plusw1,btemp
  4333   012A94  0EFE               	movlw	-2
  4334   012A96  50E3               	movf	plusw1,w,c
  4335   012A98  1001               	iorwf	btemp^0,w,c
  4336   012A9A  B4D8               	btfsc	status,2,c
  4337   012A9C  EF52  F095         	goto	u2021
  4338   012AA0  EF54  F095         	goto	u2020
  4339   012AA4                     u2021:
  4340   012AA4  EF84  F095         	goto	l4402
  4341   012AA8                     u2020:
  4342   012AA8                     
  4343                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4344   012AA8  0E00               	movlw	0
  4345   012AAA  6EE6               	movwf	postinc1,c
  4346   012AAC  0E00               	movlw	0
  4347   012AAE  6EE6               	movwf	postinc1,c
  4348                           
  4349                           ;stkvar	_ev @ sp[(-5)+-6]
  4350   012AB0  0EF5               	movlw	245
  4351   012AB2  24E1               	addwf	fsr1l,w,c
  4352   012AB4  6E01               	movwf	btemp^0,c
  4353   012AB6  0EFF               	movlw	255
  4354   012AB8  20E2               	addwfc	fsr1h,w,c
  4355   012ABA  6E02               	movwf	(btemp+1)^0,c
  4356   012ABC  C001  FFE6         	movff	btemp,postinc1
  4357   012AC0  C002  FFE6         	movff	btemp+1,postinc1
  4358   012AC4  ECD8  F0A3         	call	_Event_setDelay	;wreg free
  4359   012AC8                     
  4360                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4361                           ;stkvar	_inISR @ sp[(-3)+-7]
  4362   012AC8  0EF6               	movlw	-10
  4363   012ACA  50E3               	movf	plusw1,w,c
  4364   012ACC  6EE6               	movwf	postinc1,c
  4365                           
  4366                           ;stkvar	_ev @ sp[(-4)+-6]
  4367   012ACE  0EF6               	movlw	246
  4368   012AD0  24E1               	addwf	fsr1l,w,c
  4369   012AD2  6ED9               	movwf	fsr2l,c
  4370   012AD4  0EFF               	movlw	255
  4371   012AD6  20E2               	addwfc	fsr1h,w,c
  4372   012AD8  6EDA               	movwf	fsr2h,c
  4373   012ADA  0E06               	movlw	6
  4374   012ADC                     u2031:
  4375   012ADC  CFDE FFE6          	movff	postinc2,postinc1
  4376   012AE0  2CE8               	decfsz	wreg,w,c
  4377   012AE2  EF6E  F095         	goto	u2031
  4378                           
  4379                           ;stkvar	_tm @ sp[(-10)+0]
  4380   012AE6  0EF6               	movlw	-10
  4381   012AE8  CFE3 FFE6          	movff	plusw1,postinc1
  4382   012AEC  CFE3 FFE6          	movff	plusw1,postinc1
  4383   012AF0  EC27  F09B         	call	_XF_scheduleTimer	;wreg free
  4384                           
  4385                           ;stkvar	_tmid @ sp[(-3)+-9]
  4386   012AF4  0EF4               	movlw	-12
  4387   012AF6  CFE3 FFD9          	movff	plusw1,fsr2l
  4388   012AFA  0EF5               	movlw	-11
  4389   012AFC  CFE3 FFDA          	movff	plusw1,fsr2h
  4390   012B00  C001  FFDF         	movff	btemp,indf2
  4391                           
  4392                           ;xf/xf.c: 115:     }
  4393   012B04  EFEB  F095         	goto	l4422
  4394   012B08                     l4402:
  4395                           
  4396                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4397                           ;stkvar	_inISR @ sp[(-3)+-7]
  4398   012B08  0EF6               	movlw	-10
  4399   012B0A  50E3               	movf	plusw1,w,c
  4400   012B0C  6EE6               	movwf	postinc1,c
  4401   012B0E  ECB3  F0A4         	call	_ENTERCRITICAL	;wreg free
  4402   012B12                     
  4403                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4404   012B12  EE23  F0DF         	lfsr	2,_theXF+279
  4405   012B16  50DF               	movf	indf2,w,c
  4406   012B18  6E0B               	movwf	(btemp+10)^0,c
  4407   012B1A  6A0C               	clrf	(btemp+11)^0,c
  4408   012B1C  0E01               	movlw	1
  4409   012B1E  260B               	addwf	(btemp+10)^0,f,c
  4410   012B20  0E00               	movlw	0
  4411   012B22  220C               	addwfc	(btemp+11)^0,f,c
  4412   012B24  BE0C               	btfsc	(btemp+11)^0,7,c
  4413   012B26  EF9E  F095         	goto	u2041
  4414   012B2A  500C               	movf	(btemp+11)^0,w,c
  4415   012B2C  E109               	bnz	u2040
  4416   012B2E  0E1E               	movlw	30
  4417   012B30  5C0B               	subwf	(btemp+10)^0,w,c
  4418   012B32  A0D8               	btfss	status,0,c
  4419   012B34  EF9E  F095         	goto	u2041
  4420   012B38  EFA0  F095         	goto	u2040
  4421   012B3C                     u2041:
  4422   012B3C  EFA2  F095         	goto	l4408
  4423   012B40                     u2040:
  4424   012B40                     
  4425                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4426   012B40  ECD9  F0A4         	call	_XF_noMoreEvent	;wreg free
  4427   012B44                     l4408:
  4428                           
  4429                           ;xf/xf.c: 123:         theXF.countEvt++;
  4430   012B44  C3DF  FFE8         	movff	_theXF+279,wreg
  4431   012B48  0F01               	addlw	1
  4432   012B4A  CFE8 F3DF          	movff	wreg,_theXF+279
  4433   012B4E                     
  4434                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4435   012B4E  EE23  F0DF         	lfsr	2,_theXF+279
  4436   012B52  EE03  F0DE         	lfsr	0,_theXF+278
  4437   012B56  50DE               	movf	postinc2,w,c
  4438   012B58  5CEE               	subwf	postinc0,w,c
  4439   012B5A  B0D8               	btfsc	status,0,c
  4440   012B5C  EFB2  F095         	goto	u2051
  4441   012B60  EFB4  F095         	goto	u2050
  4442   012B64                     u2051:
  4443   012B64  EFB6  F095         	goto	l4414
  4444   012B68                     u2050:
  4445   012B68                     
  4446                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4447   012B68  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4448   012B6C                     l4414:
  4449                           
  4450                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4451   012B6C  0E1E               	movlw	30
  4452   012B6E  6EE6               	movwf	postinc1,c
  4453   012B70  0E00               	movlw	0
  4454   012B72  6EE6               	movwf	postinc1,c
  4455   012B74  EE23  F0DC         	lfsr	2,_theXF+276
  4456   012B78  50DF               	movf	indf2,w,c
  4457   012B7A  6E0B               	movwf	(btemp+10)^0,c
  4458   012B7C  6A0C               	clrf	(btemp+11)^0,c
  4459   012B7E  0E01               	movlw	1
  4460   012B80  260B               	addwf	(btemp+10)^0,f,c
  4461   012B82  0E00               	movlw	0
  4462   012B84  220C               	addwfc	(btemp+11)^0,f,c
  4463   012B86  C00B  FFE6         	movff	btemp+10,postinc1
  4464   012B8A  C00C  FFE6         	movff	btemp+11,postinc1
  4465   012B8E  EC9C  F096         	call	___awmod	;wreg free
  4466                           
  4467                           ;stkvar	_temp @ sp[(-3)+2]
  4468   012B92  0EFF               	movlw	-1
  4469   012B94  C001  FFE3         	movff	btemp,plusw1
  4470   012B98                     
  4471                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4472                           ;stkvar	_ev @ sp[(-3)+-6]
  4473   012B98  0EF7               	movlw	247
  4474   012B9A  24E1               	addwf	fsr1l,w,c
  4475   012B9C  6ED9               	movwf	fsr2l,c
  4476   012B9E  0EFF               	movlw	255
  4477   012BA0  20E2               	addwfc	fsr1h,w,c
  4478   012BA2  6EDA               	movwf	fsr2h,c
  4479   012BA4  EE03  F0DC         	lfsr	0,_theXF+276
  4480   012BA8  50EF               	movf	indf0,w,c
  4481   012BAA  0D06               	mullw	6
  4482   012BAC  0E28               	movlw	low (_theXF+96)
  4483   012BAE  24F3               	addwf	243,w,c
  4484   012BB0  6EE9               	movwf	fsr0l,c
  4485   012BB2  0E03               	movlw	high (_theXF+96)
  4486   012BB4  20F4               	addwfc	prodh,w,c
  4487   012BB6  6EEA               	movwf	fsr0h,c
  4488   012BB8  0E05               	movlw	5
  4489   012BBA                     u2061:
  4490   012BBA  CFDB FFEB          	movff	plusw2,plusw0
  4491   012BBE  06E8               	decf	wreg,f,c
  4492   012BC0  E2FC               	bc	u2061
  4493   012BC2                     
  4494                           ;xf/xf.c: 130:         theXF.in = temp;
  4495                           ;stkvar	_temp @ sp[(-3)+2]
  4496   012BC2  0EFF               	movlw	-1
  4497   012BC4  CFE3 F00C          	movff	plusw1,btemp+11
  4498   012BC8  C00C  F3DC         	movff	btemp+11,_theXF+276
  4499   012BCC                     
  4500                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4501                           ;stkvar	_inISR @ sp[(-3)+-7]
  4502   012BCC  0EF6               	movlw	-10
  4503   012BCE  50E3               	movf	plusw1,w,c
  4504   012BD0  6EE6               	movwf	postinc1,c
  4505   012BD2  ECA7  F0A4         	call	_LEAVECRITICAL	;wreg free
  4506   012BD6                     l4422:
  4507                           
  4508                           ;xf/xf.c: 133:     return 1;
  4509   012BD6  0E01               	movlw	1
  4510   012BD8  6E01               	movwf	btemp^0,c
  4511   012BDA                     
  4512                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4513   012BDA  0EF4               	movlw	244
  4514   012BDC  26E1               	addwf	fsr1l,f,c
  4515   012BDE  0EFF               	movlw	255
  4516   012BE0  22E2               	addwfc	fsr1h,f,c
  4517   012BE2  0012               	return		;funcret
  4518   012BE4                     __end_of_XF_pushEvent:
  4519                           	callstack 0
  4520                           
  4521 ;; *************** function _XF_scheduleTimer *****************
  4522 ;; Defined at:
  4523 ;;		line 169 in file "xf/xf.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  tm              2  [STACK] unsigned short 
  4526 ;;  ev              6  [STACK] struct Event_
  4527 ;;  inISR           1  [STACK] _Bool 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  i               1  [STACK] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1  [STACK] unsigned char 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:        0 bytes
  4544 ;; Hardware stack levels used: 1
  4545 ;; Hardware stack levels required when called: 8
  4546 ;; This function calls:
  4547 ;;		_ENTERCRITICAL
  4548 ;;		_LEAVECRITICAL
  4549 ;;		_XF_noMoreTimer
  4550 ;; This function is called by:
  4551 ;;		_XF_pushEvent
  4552 ;; This function uses a reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text4
  4556   01364E                     __ptext4:
  4557                           	callstack 0
  4558   01364E                     _XF_scheduleTimer:
  4559                           	callstack 0
  4560                           
  4561                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4562   01364E  52E6               	movf	postinc1,f,c
  4563   013650                     
  4564                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4565                           ;stkvar	_inISR @ sp[(-1)+-9]
  4566   013650  0EF6               	movlw	-10
  4567   013652  50E3               	movf	plusw1,w,c
  4568   013654  6EE6               	movwf	postinc1,c
  4569   013656  ECB3  F0A4         	call	_ENTERCRITICAL	;wreg free
  4570                           
  4571                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4572                           ;stkvar	_i @ sp[(-1)+0]
  4573   01365A  0EFF               	movlw	-1
  4574   01365C  6AE3               	clrf	plusw1,c
  4575   01365E                     l4272:
  4576                           
  4577                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4578                           ;stkvar	_i @ sp[(-1)+0]
  4579   01365E  0EFF               	movlw	-1
  4580   013660  50E3               	movf	plusw1,w,c
  4581   013662  0D08               	mullw	8
  4582   013664  0ECA               	movlw	low (_theXF+2)
  4583   013666  24F3               	addwf	243,w,c
  4584   013668  6ED9               	movwf	fsr2l,c
  4585   01366A  0E02               	movlw	high (_theXF+2)
  4586   01366C  20F4               	addwfc	prodh,w,c
  4587   01366E  6EDA               	movwf	fsr2h,c
  4588   013670  50DF               	movf	indf2,w,c
  4589   013672  A4D8               	btfss	status,2,c
  4590   013674  EF3E  F09B         	goto	u1881
  4591   013678  EF40  F09B         	goto	u1880
  4592   01367C                     u1881:
  4593   01367C  EF86  F09B         	goto	l4290
  4594   013680                     u1880:
  4595   013680                     
  4596                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4597                           ;stkvar	_tm @ sp[(-1)+-2]
  4598   013680  50E1               	movf	fsr1l,w,c
  4599   013682  0FFD               	addlw	-3
  4600   013684  6ED9               	movwf	fsr2l,c
  4601   013686  50E2               	movf	fsr1h,w,c
  4602   013688  6EDA               	movwf	fsr2h,c
  4603   01368A  0EFF               	movlw	255
  4604   01368C  22DA               	addwfc	fsr2h,f,c
  4605                           
  4606                           ;stkvar	_i @ sp[(-1)+0]
  4607   01368E  0EFF               	movlw	-1
  4608   013690  50E3               	movf	plusw1,w,c
  4609   013692  0D08               	mullw	8
  4610   013694  0EC8               	movlw	low _theXF
  4611   013696  24F3               	addwf	243,w,c
  4612   013698  6EE9               	movwf	fsr0l,c
  4613   01369A  0E02               	movlw	high _theXF
  4614   01369C  20F4               	addwfc	prodh,w,c
  4615   01369E  6EEA               	movwf	fsr0h,c
  4616   0136A0  CFDE FFEE          	movff	postinc2,postinc0
  4617   0136A4  CFDD FFED          	movff	postdec2,postdec0
  4618                           
  4619                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4620                           ;stkvar	_ev @ sp[(-1)+-8]
  4621   0136A8  0EF7               	movlw	247
  4622   0136AA  24E1               	addwf	fsr1l,w,c
  4623   0136AC  6ED9               	movwf	fsr2l,c
  4624   0136AE  0EFF               	movlw	255
  4625   0136B0  20E2               	addwfc	fsr1h,w,c
  4626   0136B2  6EDA               	movwf	fsr2h,c
  4627                           
  4628                           ;stkvar	_i @ sp[(-1)+0]
  4629   0136B4  0EFF               	movlw	-1
  4630   0136B6  50E3               	movf	plusw1,w,c
  4631   0136B8  0D08               	mullw	8
  4632   0136BA  0ECA               	movlw	low (_theXF+2)
  4633   0136BC  24F3               	addwf	243,w,c
  4634   0136BE  6EE9               	movwf	fsr0l,c
  4635   0136C0  0E02               	movlw	high (_theXF+2)
  4636   0136C2  20F4               	addwfc	prodh,w,c
  4637   0136C4  6EEA               	movwf	fsr0h,c
  4638   0136C6  0E05               	movlw	5
  4639   0136C8                     u1891:
  4640   0136C8  CFDB FFEB          	movff	plusw2,plusw0
  4641   0136CC  06E8               	decf	wreg,f,c
  4642   0136CE  E2FC               	bc	u1891
  4643   0136D0                     
  4644                           ;xf/xf.c: 180:             theXF.countTmr++;
  4645   0136D0  C3E1  FFE8         	movff	_theXF+281,wreg
  4646   0136D4  0F01               	addlw	1
  4647   0136D6  CFE8 F3E1          	movff	wreg,_theXF+281
  4648   0136DA                     
  4649                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4650   0136DA  EE23  F0E1         	lfsr	2,_theXF+281
  4651   0136DE  EE03  F0E0         	lfsr	0,_theXF+280
  4652   0136E2  50DE               	movf	postinc2,w,c
  4653   0136E4  5CEE               	subwf	postinc0,w,c
  4654   0136E6  B0D8               	btfsc	status,0,c
  4655   0136E8  EF78  F09B         	goto	u1901
  4656   0136EC  EF7A  F09B         	goto	u1900
  4657   0136F0                     u1901:
  4658   0136F0  EF7C  F09B         	goto	l4282
  4659   0136F4                     u1900:
  4660   0136F4                     
  4661                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4662   0136F4  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4663   0136F8                     l4282:
  4664                           
  4665                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4666                           ;stkvar	_inISR @ sp[(-1)+-9]
  4667   0136F8  0EF6               	movlw	-10
  4668   0136FA  50E3               	movf	plusw1,w,c
  4669   0136FC  6EE6               	movwf	postinc1,c
  4670   0136FE  ECA7  F0A4         	call	_LEAVECRITICAL	;wreg free
  4671   013702                     
  4672                           ;xf/xf.c: 186:             return i;
  4673                           ;stkvar	_i @ sp[(-1)+0]
  4674   013702  0EFF               	movlw	-1
  4675   013704  CFE3 F001          	movff	plusw1,btemp
  4676   013708  EF97  F09B         	goto	l1234
  4677   01370C                     l4290:
  4678                           
  4679                           ;xf/xf.c: 189:     }
  4680                           ;stkvar	_i @ sp[(-1)+0]
  4681   01370C  0EFF               	movlw	-1
  4682   01370E  2AE3               	incf	plusw1,f,c
  4683   013710                     
  4684                           ;stkvar	_i @ sp[(-1)+0]
  4685   013710  0EFF               	movlw	-1
  4686   013712  CFE3 F001          	movff	plusw1,btemp
  4687   013716  0E0B               	movlw	11
  4688   013718  6401               	cpfsgt	btemp^0,c
  4689   01371A  EF91  F09B         	goto	u1911
  4690   01371E  EF93  F09B         	goto	u1910
  4691   013722                     u1911:
  4692   013722  EF2F  F09B         	goto	l4272
  4693   013726                     u1910:
  4694   013726                     
  4695                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4696   013726  ECD6  F0A4         	call	_XF_noMoreTimer	;wreg free
  4697   01372A  EF7C  F09B         	goto	l4282
  4698   01372E                     l1234:
  4699                           
  4700                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4701   01372E  0EF6               	movlw	246
  4702   013730  26E1               	addwf	fsr1l,f,c
  4703   013732  0EFF               	movlw	255
  4704   013734  22E2               	addwfc	fsr1h,f,c
  4705   013736  0012               	return		;funcret
  4706   013738                     __end_of_XF_scheduleTimer:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _XF_noMoreTimer *****************
  4710 ;; Defined at:
  4711 ;;		line 69 in file "xf/xf.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1  [STACK] void 
  4718 ;; Registers used:
  4719 ;;		None
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 7
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_XF_scheduleTimer
  4736 ;; This function uses a reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text5
  4740   0149AC                     __ptext5:
  4741                           	callstack 0
  4742   0149AC                     _XF_noMoreTimer:
  4743                           	callstack 9
  4744   0149AC                     l1206:
  4745   0149AC  EFD6  F0A4         	goto	l1206
  4746                           
  4747                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4748   0149B0  0012               	return		;funcret
  4749   0149B2                     __end_of_XF_noMoreTimer:
  4750                           	callstack 0
  4751                           
  4752 ;; *************** function _XF_noMoreEvent *****************
  4753 ;; Defined at:
  4754 ;;		line 65 in file "xf/xf.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1  [STACK] void 
  4761 ;; Registers used:
  4762 ;;		None
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used: 1
  4774 ;; Hardware stack levels required when called: 7
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_XF_pushEvent
  4779 ;; This function uses a reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text6
  4783   0149B2                     __ptext6:
  4784                           	callstack 0
  4785   0149B2                     _XF_noMoreEvent:
  4786                           	callstack 10
  4787   0149B2                     l1200:
  4788   0149B2  EFD9  F0A4         	goto	l1200
  4789                           
  4790                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4791   0149B6  0012               	return		;funcret
  4792   0149B8                     __end_of_XF_noMoreEvent:
  4793                           	callstack 0
  4794                           
  4795 ;; *************** function _Event_setDelay *****************
  4796 ;; Defined at:
  4797 ;;		line 32 in file "xf/event.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  me              2  [STACK] PTR struct Event_
  4800 ;;		 -> ev(6), 
  4801 ;;  delay           2  [STACK] unsigned short 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;		None
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1  [STACK] void 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;Total ram usage:        0 bytes
  4818 ;; Hardware stack levels used: 1
  4819 ;; Hardware stack levels required when called: 7
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		_XF_pushEvent
  4824 ;;		_XF_post
  4825 ;; This function uses a reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text7
  4829   0147B0                     __ptext7:
  4830                           	callstack 0
  4831   0147B0                     _Event_setDelay:
  4832                           	callstack 10
  4833   0147B0                     
  4834                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4835                           ;stkvar	_delay @ sp[(0)+-4]
  4836   0147B0  50E1               	movf	fsr1l,w,c
  4837   0147B2  0FFC               	addlw	-4
  4838   0147B4  6ED9               	movwf	fsr2l,c
  4839   0147B6  50E2               	movf	fsr1h,w,c
  4840   0147B8  6EDA               	movwf	fsr2h,c
  4841   0147BA  0EFF               	movlw	255
  4842   0147BC  22DA               	addwfc	fsr2h,f,c
  4843                           
  4844                           ;stkvar	_me @ sp[(0)+-2]
  4845   0147BE  0EFE               	movlw	-2
  4846   0147C0  CFE3 F00B          	movff	plusw1,btemp+10
  4847   0147C4  0EFF               	movlw	-1
  4848   0147C6  CFE3 F00C          	movff	plusw1,btemp+11
  4849   0147CA  0E04               	movlw	4
  4850   0147CC  240B               	addwf	(btemp+10)^0,w,c
  4851   0147CE  6EE9               	movwf	fsr0l,c
  4852   0147D0  0E00               	movlw	0
  4853   0147D2  200C               	addwfc	(btemp+11)^0,w,c
  4854   0147D4  6EEA               	movwf	fsr0h,c
  4855   0147D6  CFDE FFEE          	movff	postinc2,postinc0
  4856   0147DA  CFDD FFED          	movff	postdec2,postdec0
  4857   0147DE                     
  4858                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4859   0147DE  52E5               	movf	postdec1,f,c
  4860   0147E0  52E5               	movf	postdec1,f,c
  4861   0147E2  52E5               	movf	postdec1,f,c
  4862   0147E4  52E5               	movf	postdec1,f,c
  4863   0147E6  0012               	return		;funcret
  4864   0147E8                     __end_of_Event_setDelay:
  4865                           	callstack 0
  4866                           
  4867 ;; *************** function _Event_getDelay *****************
  4868 ;; Defined at:
  4869 ;;		line 37 in file "xf/event.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  me              2  [STACK] PTR struct Event_
  4872 ;;		 -> ev(6), 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;		None
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  2  [STACK] unsigned short 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;Total ram usage:        0 bytes
  4889 ;; Hardware stack levels used: 1
  4890 ;; Hardware stack levels required when called: 7
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_XF_pushEvent
  4895 ;; This function uses a reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text8
  4899   0148D0                     __ptext8:
  4900                           	callstack 0
  4901   0148D0                     _Event_getDelay:
  4902                           	callstack 10
  4903   0148D0                     
  4904                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  4905                           ;stkvar	_me @ sp[(0)+-2]
  4906   0148D0  0EFE               	movlw	-2
  4907   0148D2  CFE3 F00B          	movff	plusw1,btemp+10
  4908   0148D6  0EFF               	movlw	-1
  4909   0148D8  CFE3 F00C          	movff	plusw1,btemp+11
  4910   0148DC  0E04               	movlw	4
  4911   0148DE  240B               	addwf	(btemp+10)^0,w,c
  4912   0148E0  6ED9               	movwf	fsr2l,c
  4913   0148E2  0E00               	movlw	0
  4914   0148E4  200C               	addwfc	(btemp+11)^0,w,c
  4915   0148E6  6EDA               	movwf	fsr2h,c
  4916   0148E8  CFDE F001          	movff	postinc2,btemp
  4917   0148EC  CFDD F002          	movff	postdec2,btemp+1
  4918   0148F0                     
  4919                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  4920   0148F0  52E5               	movf	postdec1,f,c
  4921   0148F2  52E5               	movf	postdec1,f,c
  4922   0148F4  0012               	return		;funcret
  4923   0148F6                     __end_of_Event_getDelay:
  4924                           	callstack 0
  4925                           
  4926 ;; *************** function _Event_setPE *****************
  4927 ;; Defined at:
  4928 ;;		line 12 in file "xf/event.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  me              2  [STACK] PTR struct Event_
  4931 ;;		 -> ev(6), 
  4932 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4933 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;		None
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1  [STACK] void 
  4938 ;; Registers used:
  4939 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;Total ram usage:        0 bytes
  4950 ;; Hardware stack levels used: 1
  4951 ;; Hardware stack levels required when called: 7
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_XF_post
  4956 ;; This function uses a reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text9
  4960   01473A                     __ptext9:
  4961                           	callstack 0
  4962   01473A                     _Event_setPE:
  4963                           	callstack 21
  4964   01473A                     
  4965                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  4966                           ;stkvar	_processEvent @ sp[(0)+-5]
  4967   01473A  50E1               	movf	fsr1l,w,c
  4968   01473C  0FFB               	addlw	-5
  4969   01473E  6ED9               	movwf	fsr2l,c
  4970   014740  50E2               	movf	fsr1h,w,c
  4971   014742  6EDA               	movwf	fsr2h,c
  4972   014744  0EFF               	movlw	255
  4973   014746  22DA               	addwfc	fsr2h,f,c
  4974                           
  4975                           ;stkvar	_me @ sp[(0)+-2]
  4976   014748  0EFE               	movlw	-2
  4977   01474A  CFE3 F00B          	movff	plusw1,btemp+10
  4978   01474E  0EFF               	movlw	-1
  4979   014750  CFE3 F00C          	movff	plusw1,btemp+11
  4980   014754  0E01               	movlw	1
  4981   014756  240B               	addwf	(btemp+10)^0,w,c
  4982   014758  6EE9               	movwf	fsr0l,c
  4983   01475A  0E00               	movlw	0
  4984   01475C  200C               	addwfc	(btemp+11)^0,w,c
  4985   01475E  6EEA               	movwf	fsr0h,c
  4986   014760  CFDE FFEE          	movff	postinc2,postinc0
  4987   014764  CFDE FFEE          	movff	postinc2,postinc0
  4988   014768  CFDE FFEE          	movff	postinc2,postinc0
  4989   01476C                     
  4990                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  4991   01476C  0EFB               	movlw	251
  4992   01476E  26E1               	addwf	fsr1l,f,c
  4993   014770  0EFF               	movlw	255
  4994   014772  22E2               	addwfc	fsr1h,f,c
  4995   014774  0012               	return		;funcret
  4996   014776                     __end_of_Event_setPE:
  4997                           	callstack 0
  4998                           
  4999 ;; *************** function _Event_setId *****************
  5000 ;; Defined at:
  5001 ;;		line 22 in file "xf/event.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  me              2  [STACK] PTR struct Event_
  5004 ;;		 -> ev(6), 
  5005 ;;  eventID         1  [STACK] unsigned char 
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1  [STACK] void 
  5010 ;; Registers used:
  5011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/0
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;Total ram usage:        0 bytes
  5022 ;; Hardware stack levels used: 1
  5023 ;; Hardware stack levels required when called: 7
  5024 ;; This function calls:
  5025 ;;		Nothing
  5026 ;; This function is called by:
  5027 ;;		_XF_post
  5028 ;; This function uses a reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text10
  5032   014934                     __ptext10:
  5033                           	callstack 0
  5034   014934                     _Event_setId:
  5035                           	callstack 21
  5036   014934                     
  5037                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  5038                           ;stkvar	_eventID @ sp[(0)+-3]
  5039                           ;stkvar	_me @ sp[(0)+-2]
  5040   014934  0EFE               	movlw	-2
  5041   014936  CFE3 FFD9          	movff	plusw1,fsr2l
  5042   01493A  0EFF               	movlw	-1
  5043   01493C  CFE3 FFDA          	movff	plusw1,fsr2h
  5044   014940  0EFD               	movlw	-3
  5045   014942  CFE3 FFDF          	movff	plusw1,indf2
  5046   014946                     
  5047                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5048   014946  52E5               	movf	postdec1,f,c
  5049   014948  52E5               	movf	postdec1,f,c
  5050   01494A  52E5               	movf	postdec1,f,c
  5051   01494C  0012               	return		;funcret
  5052   01494E                     __end_of_Event_setId:
  5053                           	callstack 0
  5054                           
  5055 ;; *************** function _CanReceive *****************
  5056 ;; Defined at:
  5057 ;;		line 242 in file "can/can.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5060 ;;		 -> rxObj(16), 
  5061 ;;  rxd             2  [STACK] PTR unsigned char 
  5062 ;;		 -> rxdata(8), 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;  rxFlags         1  [STACK] enum E5588
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1  [STACK] char 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used: 1
  5080 ;; Hardware stack levels required when called: 11
  5081 ;; This function calls:
  5082 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5083 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5084 ;; This function is called by:
  5085 ;;		_updateCarState
  5086 ;; This function uses a reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text11
  5090   01446A                     __ptext11:
  5091                           	callstack 0
  5092   01446A                     _CanReceive:
  5093                           	callstack 0
  5094                           
  5095                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5096   01446A  52E6               	movf	postinc1,f,c
  5097   01446C                     
  5098                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5099                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5100   01446C  0EFF               	movlw	255
  5101   01446E  24E1               	addwf	fsr1l,w,c
  5102   014470  6E01               	movwf	btemp^0,c
  5103   014472  0EFF               	movlw	255
  5104   014474  20E2               	addwfc	fsr1h,w,c
  5105   014476  6E02               	movwf	(btemp+1)^0,c
  5106   014478  C001  FFE6         	movff	btemp,postinc1
  5107   01447C  C002  FFE6         	movff	btemp+1,postinc1
  5108   014480  0E02               	movlw	2
  5109   014482  6EE6               	movwf	postinc1,c
  5110   014484  EC09  F0A0         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5111   014488                     
  5112                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5113                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5114   014488  0EFF               	movlw	-1
  5115   01448A  A0E3               	btfss	plusw1,0,c
  5116   01448C  EF4A  F0A2         	goto	u2721
  5117   014490  EF4C  F0A2         	goto	u2720
  5118   014494                     u2721:
  5119   014494  EF60  F0A2         	goto	l5012
  5120   014498                     u2720:
  5121   014498                     
  5122                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5123   014498  0E08               	movlw	8
  5124   01449A  6EE6               	movwf	postinc1,c
  5125                           
  5126                           ;stkvar	_rxd @ sp[(-2)+-4]
  5127   01449C  0EFA               	movlw	-6
  5128   01449E  CFE3 FFE6          	movff	plusw1,postinc1
  5129   0144A2  CFE3 FFE6          	movff	plusw1,postinc1
  5130                           
  5131                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5132   0144A6  0EFA               	movlw	-6
  5133   0144A8  CFE3 FFE6          	movff	plusw1,postinc1
  5134   0144AC  CFE3 FFE6          	movff	plusw1,postinc1
  5135   0144B0  0E02               	movlw	2
  5136   0144B2  6EE6               	movwf	postinc1,c
  5137   0144B4  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5138   0144B8                     
  5139                           ;can/can.c: 249:     return 0;
  5140   0144B8  0E00               	movlw	0
  5141   0144BA  6E01               	movwf	btemp^0,c
  5142   0144BC  EF62  F0A2         	goto	l165
  5143   0144C0                     l5012:
  5144                           
  5145                           ;can/can.c: 251:   return -1;
  5146   0144C0  0EFF               	movlw	255
  5147   0144C2  6E01               	movwf	btemp^0,c
  5148   0144C4                     l165:
  5149                           
  5150                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5151   0144C4  0EFB               	movlw	251
  5152   0144C6  26E1               	addwf	fsr1l,f,c
  5153   0144C8  0EFF               	movlw	255
  5154   0144CA  22E2               	addwfc	fsr1h,f,c
  5155   0144CC  0012               	return		;funcret
  5156   0144CE                     __end_of_CanReceive:
  5157                           	callstack 0
  5158                           
  5159 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5160 ;; Defined at:
  5161 ;;		line 1236 in file "can/can.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  channel         1  [STACK] enum E5287
  5164 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5165 ;;		 -> rxObj(16), txMsg(16), 
  5166 ;;  rxd             2  [STACK] PTR unsigned char 
  5167 ;;		 -> rxdata(8), 
  5168 ;;  nBytes          1  [STACK] unsigned char 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  temp32          4  [STACK] unsigned long 
  5171 ;;  ba             76  [STACK] unsigned char [76]
  5172 ;;  fifoReg        12  [STACK] unsigned long [3]
  5173 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5174 ;;  myReg           4  [STACK] struct _REG_t
  5175 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5176 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5177 ;;  a               2  [STACK] unsigned short 
  5178 ;;  i               1  [STACK] unsigned char 
  5179 ;;  n               1  [STACK] unsigned char 
  5180 ;;  spiTransferE    1  [STACK] char 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1  [STACK] char 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 10
  5197 ;; This function calls:
  5198 ;;		_DRV_CANFDSPI_ReadByteArray
  5199 ;;		_DRV_CANFDSPI_ReadWordArray
  5200 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5201 ;; This function is called by:
  5202 ;;		_CanReceive
  5203 ;; This function uses a reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text12
  5207   01074C                     __ptext12:
  5208                           	callstack 0
  5209   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5210                           	callstack 0
  5211                           
  5212                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5213   01074C  0E6E               	movlw	110
  5214   01074E  26E1               	addwf	fsr1l,f,c
  5215   010750  0E00               	movlw	0
  5216   010752  22E2               	addwfc	fsr1h,f,c
  5217   010754                     
  5218                           ;can/can.c: 1241:     uint8_t i = 0;
  5219                           ;stkvar	_i @ sp[(-110)+107]
  5220   010754  0EFD               	movlw	-3
  5221   010756  6AE3               	clrf	plusw1,c
  5222                           
  5223                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5224                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5225   010758  0EFF               	movlw	-1
  5226   01075A  6AE3               	clrf	plusw1,c
  5227   01075C                     
  5228                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5229                           ;stkvar	_channel @ sp[(-110)+-1]
  5230   01075C  0E91               	movlw	-111
  5231   01075E  50E3               	movf	plusw1,w,c
  5232   010760  0D0C               	mullw	12
  5233   010762  0E50               	movlw	80
  5234   010764  26F3               	addwf	243,f,c
  5235   010766  0E00               	movlw	0
  5236   010768  22F4               	addwfc	244,f,c
  5237                           
  5238                           ;stkvar	_a @ sp[(-110)+105]
  5239   01076A  0EFB               	movlw	-5
  5240   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5241   010770  0EFC               	movlw	-4
  5242   010772  CFF4 FFE3          	movff	prodh,plusw1
  5243   010776                     
  5244                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5245   010776  0E03               	movlw	3
  5246   010778  6EE6               	movwf	postinc1,c
  5247   01077A  0E00               	movlw	0
  5248   01077C  6EE6               	movwf	postinc1,c
  5249                           
  5250                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5251   01077E  0EE0               	movlw	224
  5252   010780  24E1               	addwf	fsr1l,w,c
  5253   010782  6E01               	movwf	btemp^0,c
  5254   010784  0EFF               	movlw	255
  5255   010786  20E2               	addwfc	fsr1h,w,c
  5256   010788  6E02               	movwf	(btemp+1)^0,c
  5257   01078A  C001  FFE6         	movff	btemp,postinc1
  5258   01078E  C002  FFE6         	movff	btemp+1,postinc1
  5259                           
  5260                           ;stkvar	_a @ sp[(-114)+105]
  5261   010792  0EF7               	movlw	-9
  5262   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5263   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5264   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5265                           
  5266                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5267   0107A0  0EFF               	movlw	-1
  5268   0107A2  C001  FFE3         	movff	btemp,plusw1
  5269   0107A6                     
  5270                           ;can/can.c: 1253:     if (spiTransferError) {
  5271                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5272   0107A6  0EFF               	movlw	-1
  5273   0107A8  50E3               	movf	plusw1,w,c
  5274   0107AA  B4D8               	btfsc	status,2,c
  5275   0107AC  EFDA  F083         	goto	u2091
  5276   0107B0  EFDC  F083         	goto	u2090
  5277   0107B4                     u2091:
  5278   0107B4  EFDE  F083         	goto	l4468
  5279   0107B8                     u2090:
  5280   0107B8  EF15  F087         	goto	l357
  5281   0107BC                     l4468:
  5282                           
  5283                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5284                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5285   0107BC  0EE2               	movlw	-30
  5286   0107BE  CFE3 F009          	movff	plusw1,btemp+8
  5287   0107C2  0EE3               	movlw	-29
  5288   0107C4  CFE3 F00A          	movff	plusw1,btemp+9
  5289   0107C8  0EE4               	movlw	-28
  5290   0107CA  CFE3 F00B          	movff	plusw1,btemp+10
  5291   0107CE  0EE5               	movlw	-27
  5292   0107D0  CFE3 F00C          	movff	plusw1,btemp+11
  5293                           
  5294                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5295   0107D4  0EEE               	movlw	-18
  5296   0107D6  C009  FFE3         	movff	btemp+8,plusw1
  5297   0107DA  0EEF               	movlw	-17
  5298   0107DC  C00A  FFE3         	movff	btemp+9,plusw1
  5299   0107E0  0EF0               	movlw	-16
  5300   0107E2  C00B  FFE3         	movff	btemp+10,plusw1
  5301   0107E6  0EF1               	movlw	-15
  5302   0107E8  C00C  FFE3         	movff	btemp+11,plusw1
  5303   0107EC                     
  5304                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5305                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5306   0107EC  50E1               	movf	fsr1l,w,c
  5307   0107EE  0FEE               	addlw	-18
  5308   0107F0  6ED9               	movwf	fsr2l,c
  5309   0107F2  50E2               	movf	fsr1h,w,c
  5310   0107F4  6EDA               	movwf	fsr2h,c
  5311   0107F6  0EFF               	movlw	255
  5312   0107F8  22DA               	addwfc	fsr2h,f,c
  5313   0107FA  AEDF               	btfss	indf2,7,c
  5314   0107FC  EF02  F084         	goto	u2101
  5315   010800  EF04  F084         	goto	u2100
  5316   010804                     u2101:
  5317   010804  EF06  F084         	goto	l4474
  5318   010808                     u2100:
  5319   010808  EF15  F087         	goto	l357
  5320   01080C                     l4474:
  5321                           
  5322                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5323                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5324   01080C  0EEA               	movlw	234
  5325   01080E  24E1               	addwf	fsr1l,w,c
  5326   010810  6ED9               	movwf	fsr2l,c
  5327   010812  0EFF               	movlw	255
  5328   010814  20E2               	addwfc	fsr1h,w,c
  5329   010816  6EDA               	movwf	fsr2h,c
  5330   010818  CFDE F009          	movff	postinc2,btemp+8
  5331   01081C  CFDE F00A          	movff	postinc2,btemp+9
  5332   010820  CFDE F00B          	movff	postinc2,btemp+10
  5333   010824  CFDE F00C          	movff	postinc2,btemp+11
  5334                           
  5335                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5336   010828  0EF7               	movlw	-9
  5337   01082A  C009  FFE3         	movff	btemp+8,plusw1
  5338   01082E  0EF8               	movlw	-8
  5339   010830  C00A  FFE3         	movff	btemp+9,plusw1
  5340   010834  0EF9               	movlw	-7
  5341   010836  C00B  FFE3         	movff	btemp+10,plusw1
  5342   01083A  0EFA               	movlw	-6
  5343   01083C  C00C  FFE3         	movff	btemp+11,plusw1
  5344   010840                     
  5345                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5346                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5347                           ;stkvar	_a @ sp[(-110)+105]
  5348   010840  0EF7               	movlw	-9
  5349   010842  CFE3 F001          	movff	plusw1,btemp
  5350   010846  0EFB               	movlw	-5
  5351   010848  C001  FFE3         	movff	btemp,plusw1
  5352   01084C  0EF8               	movlw	-8
  5353   01084E  CFE3 F001          	movff	plusw1,btemp
  5354   010852  0EFC               	movlw	-4
  5355   010854  C001  FFE3         	movff	btemp,plusw1
  5356   010858                     
  5357                           ;can/can.c: 1273:     a += 0x400;
  5358                           ;stkvar	_a @ sp[(-110)+105]
  5359   010858  50E1               	movf	fsr1l,w,c
  5360   01085A  0FFB               	addlw	-5
  5361   01085C  6ED9               	movwf	fsr2l,c
  5362   01085E  50E2               	movf	fsr1h,w,c
  5363   010860  6EDA               	movwf	fsr2h,c
  5364   010862  0EFF               	movlw	255
  5365   010864  22DA               	addwfc	fsr2h,f,c
  5366   010866  0E00               	movlw	0
  5367   010868  26DE               	addwf	postinc2,f,c
  5368   01086A  0E04               	movlw	4
  5369   01086C  22DD               	addwfc	postdec2,f,c
  5370   01086E                     
  5371                           ;can/can.c: 1276:     n = nBytes + 8;
  5372   01086E  0E08               	movlw	8
  5373   010870  6E0C               	movwf	(btemp+11)^0,c
  5374                           
  5375                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5376   010872  0E8C               	movlw	-116
  5377   010874  50E3               	movf	plusw1,w,c
  5378   010876  240C               	addwf	(btemp+11)^0,w,c
  5379   010878  6E0B               	movwf	(btemp+10)^0,c
  5380                           
  5381                           ;stkvar	_n @ sp[(-110)+108]
  5382   01087A  0EFE               	movlw	-2
  5383   01087C  C00B  FFE3         	movff	btemp+10,plusw1
  5384   010880                     
  5385                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5386                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5387   010880  50E1               	movf	fsr1l,w,c
  5388   010882  0FEE               	addlw	-18
  5389   010884  6ED9               	movwf	fsr2l,c
  5390   010886  50E2               	movf	fsr1h,w,c
  5391   010888  6EDA               	movwf	fsr2h,c
  5392   01088A  0EFF               	movlw	255
  5393   01088C  22DA               	addwfc	fsr2h,f,c
  5394   01088E  AADF               	btfss	indf2,5,c
  5395   010890  EF4C  F084         	goto	u2111
  5396   010894  EF4E  F084         	goto	u2110
  5397   010898                     u2111:
  5398   010898  EF56  F084         	goto	l4486
  5399   01089C                     u2110:
  5400   01089C                     
  5401                           ;can/can.c: 1279:         n += 4;
  5402                           ;stkvar	_n @ sp[(-110)+108]
  5403   01089C  0EFE               	movlw	-2
  5404   01089E  CFE3 F001          	movff	plusw1,btemp
  5405   0108A2  0E04               	movlw	4
  5406   0108A4  2601               	addwf	btemp^0,f,c
  5407   0108A6  0EFE               	movlw	-2
  5408   0108A8  C001  FFE3         	movff	btemp,plusw1
  5409   0108AC                     l4486:
  5410                           
  5411                           ;can/can.c: 1283:     if (n % 4) {
  5412                           ;stkvar	_n @ sp[(-110)+108]
  5413   0108AC  0EFE               	movlw	-2
  5414   0108AE  CFE3 F00C          	movff	plusw1,btemp+11
  5415   0108B2  0E03               	movlw	3
  5416   0108B4  160C               	andwf	(btemp+11)^0,f,c
  5417   0108B6  B4D8               	btfsc	status,2,c
  5418   0108B8  EF60  F084         	goto	u2121
  5419   0108BC  EF62  F084         	goto	u2120
  5420   0108C0                     u2121:
  5421   0108C0  EF72  F084         	goto	l4490
  5422   0108C4                     u2120:
  5423   0108C4                     
  5424                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5425                           ;stkvar	_n @ sp[(-110)+108]
  5426   0108C4  0EFE               	movlw	-2
  5427   0108C6  CFE3 F00C          	movff	plusw1,btemp+11
  5428   0108CA  0E03               	movlw	3
  5429   0108CC  160C               	andwf	(btemp+11)^0,f,c
  5430                           
  5431                           ;stkvar	_n @ sp[(-110)+108]
  5432   0108CE  0EFE               	movlw	-2
  5433   0108D0  CFE3 F00B          	movff	plusw1,btemp+10
  5434   0108D4  500C               	movf	(btemp+11)^0,w,c
  5435   0108D6  5C0B               	subwf	(btemp+10)^0,w,c
  5436   0108D8  6E0C               	movwf	(btemp+11)^0,c
  5437   0108DA  0E04               	movlw	4
  5438   0108DC  260C               	addwf	(btemp+11)^0,f,c
  5439                           
  5440                           ;stkvar	_n @ sp[(-110)+108]
  5441   0108DE  0EFE               	movlw	-2
  5442   0108E0  C00C  FFE3         	movff	btemp+11,plusw1
  5443   0108E4                     l4490:
  5444                           
  5445                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5446                           ;stkvar	_n @ sp[(-110)+108]
  5447   0108E4  0EFE               	movlw	-2
  5448   0108E6  CFE3 F001          	movff	plusw1,btemp
  5449   0108EA  0E4C               	movlw	76
  5450   0108EC  6401               	cpfsgt	btemp^0,c
  5451   0108EE  EF7B  F084         	goto	u2131
  5452   0108F2  EF7D  F084         	goto	u2130
  5453   0108F6                     u2131:
  5454   0108F6  EF82  F084         	goto	l4494
  5455   0108FA                     u2130:
  5456   0108FA                     
  5457                           ;can/can.c: 1291:         n = 76;
  5458   0108FA  0E4C               	movlw	76
  5459   0108FC  6E0C               	movwf	(btemp+11)^0,c
  5460                           
  5461                           ;stkvar	_n @ sp[(-110)+108]
  5462   0108FE  0EFE               	movlw	-2
  5463   010900  C00C  FFE3         	movff	btemp+11,plusw1
  5464   010904                     l4494:
  5465                           
  5466                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5467                           ;stkvar	_n @ sp[(-110)+108]
  5468   010904  0EFE               	movlw	-2
  5469   010906  50E3               	movf	plusw1,w,c
  5470   010908  6EE6               	movwf	postinc1,c
  5471   01090A  0E00               	movlw	0
  5472   01090C  6EE6               	movwf	postinc1,c
  5473                           
  5474                           ;stkvar	_ba @ sp[(-112)+4]
  5475   01090E  0E94               	movlw	148
  5476   010910  24E1               	addwf	fsr1l,w,c
  5477   010912  6E01               	movwf	btemp^0,c
  5478   010914  0EFF               	movlw	255
  5479   010916  20E2               	addwfc	fsr1h,w,c
  5480   010918  6E02               	movwf	(btemp+1)^0,c
  5481   01091A  C001  FFE6         	movff	btemp,postinc1
  5482   01091E  C002  FFE6         	movff	btemp+1,postinc1
  5483                           
  5484                           ;stkvar	_a @ sp[(-114)+105]
  5485   010922  0EF7               	movlw	-9
  5486   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5487   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5488   01092C  ECE6  F092         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5489                           
  5490                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5491   010930  0EFF               	movlw	-1
  5492   010932  C001  FFE3         	movff	btemp,plusw1
  5493   010936                     
  5494                           ;can/can.c: 1295:     if (spiTransferError) {
  5495                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5496   010936  0EFF               	movlw	-1
  5497   010938  50E3               	movf	plusw1,w,c
  5498   01093A  B4D8               	btfsc	status,2,c
  5499   01093C  EFA2  F084         	goto	u2141
  5500   010940  EFA4  F084         	goto	u2140
  5501   010944                     u2141:
  5502   010944  EFA6  F084         	goto	l4500
  5503   010948                     u2140:
  5504   010948  EF15  F087         	goto	l357
  5505   01094C                     l4500:
  5506                           
  5507                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5508                           ;stkvar	_ba @ sp[(-110)+4]
  5509   01094C  0E9A               	movlw	154
  5510   01094E  24E1               	addwf	fsr1l,w,c
  5511   010950  6ED9               	movwf	fsr2l,c
  5512   010952  0EFF               	movlw	255
  5513   010954  20E2               	addwfc	fsr1h,w,c
  5514   010956  6EDA               	movwf	fsr2h,c
  5515                           
  5516                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5517   010958  0E8F               	movlw	-113
  5518   01095A  CFE3 F00B          	movff	plusw1,btemp+10
  5519   01095E  0E90               	movlw	-112
  5520   010960  CFE3 F00C          	movff	plusw1,btemp+11
  5521   010964  0E06               	movlw	6
  5522   010966  240B               	addwf	(btemp+10)^0,w,c
  5523   010968  6EE9               	movwf	fsr0l,c
  5524   01096A  0E00               	movlw	0
  5525   01096C  200C               	addwfc	(btemp+11)^0,w,c
  5526   01096E  6EEA               	movwf	fsr0h,c
  5527   010970  CFDF FFEF          	movff	indf2,indf0
  5528   010974                     
  5529                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5530                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5531   010974  0E8F               	movlw	-113
  5532   010976  CFE3 F00B          	movff	plusw1,btemp+10
  5533   01097A  0E90               	movlw	-112
  5534   01097C  CFE3 F00C          	movff	plusw1,btemp+11
  5535   010980  0E06               	movlw	6
  5536   010982  240B               	addwf	(btemp+10)^0,w,c
  5537   010984  6ED9               	movwf	fsr2l,c
  5538   010986  0E00               	movlw	0
  5539   010988  200C               	addwfc	(btemp+11)^0,w,c
  5540   01098A  6EDA               	movwf	fsr2h,c
  5541   01098C  B8DF               	btfsc	indf2,4,c
  5542   01098E  EFCB  F084         	goto	u2151
  5543   010992  EFCD  F084         	goto	u2150
  5544   010996                     u2151:
  5545   010996  EF38  F085         	goto	l4506
  5546   01099A                     u2150:
  5547   01099A                     
  5548                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5549                           ;stkvar	_ba @ sp[(-110)+4]
  5550   01099A  0E99               	movlw	153
  5551   01099C  24E1               	addwf	fsr1l,w,c
  5552   01099E  6ED9               	movwf	fsr2l,c
  5553   0109A0  0EFF               	movlw	255
  5554   0109A2  20E2               	addwfc	fsr1h,w,c
  5555   0109A4  6EDA               	movwf	fsr2h,c
  5556   0109A6  50DF               	movf	indf2,w,c
  5557   0109A8  6E0C               	movwf	(btemp+11)^0,c
  5558   0109AA  0E1F               	movlw	31
  5559   0109AC  160C               	andwf	(btemp+11)^0,f,c
  5560   0109AE  C00C  F005         	movff	btemp+11,btemp+4
  5561   0109B2  6A06               	clrf	(btemp+5)^0,c
  5562   0109B4  6A07               	clrf	(btemp+6)^0,c
  5563   0109B6  6A08               	clrf	(btemp+7)^0,c
  5564   0109B8  C005  F008         	movff	btemp+4,btemp+7
  5565   0109BC  6A07               	clrf	(btemp+6)^0,c
  5566   0109BE  6A06               	clrf	(btemp+5)^0,c
  5567   0109C0  6A05               	clrf	(btemp+4)^0,c
  5568                           
  5569                           ;stkvar	_ba @ sp[(-110)+4]
  5570   0109C2  0E97               	movlw	151
  5571   0109C4  24E1               	addwf	fsr1l,w,c
  5572   0109C6  6ED9               	movwf	fsr2l,c
  5573   0109C8  0EFF               	movlw	255
  5574   0109CA  20E2               	addwfc	fsr1h,w,c
  5575   0109CC  6EDA               	movwf	fsr2h,c
  5576   0109CE  50DF               	movf	indf2,w,c
  5577   0109D0  6E0C               	movwf	(btemp+11)^0,c
  5578   0109D2  C00C  F001         	movff	btemp+11,btemp
  5579   0109D6  6A02               	clrf	(btemp+1)^0,c
  5580   0109D8  6A03               	clrf	(btemp+2)^0,c
  5581   0109DA  6A04               	clrf	(btemp+3)^0,c
  5582   0109DC  C003  F004         	movff	btemp+2,btemp+3
  5583   0109E0  C002  F003         	movff	btemp+1,btemp+2
  5584   0109E4  C001  F002         	movff	btemp,btemp+1
  5585   0109E8  6A01               	clrf	btemp^0,c
  5586                           
  5587                           ;stkvar	_ba @ sp[(-110)+4]
  5588   0109EA  0E96               	movlw	-106
  5589   0109EC  50E3               	movf	plusw1,w,c
  5590   0109EE  6E09               	movwf	(btemp+8)^0,c
  5591   0109F0  6A0A               	clrf	(btemp+9)^0,c
  5592   0109F2  6A0B               	clrf	(btemp+10)^0,c
  5593   0109F4  6A0C               	clrf	(btemp+11)^0,c
  5594   0109F6  5001               	movf	btemp^0,w,c
  5595   0109F8  1209               	iorwf	(btemp+8)^0,f,c
  5596   0109FA  5002               	movf	(btemp+1)^0,w,c
  5597   0109FC  120A               	iorwf	(btemp+9)^0,f,c
  5598   0109FE  5003               	movf	(btemp+2)^0,w,c
  5599   010A00  120B               	iorwf	(btemp+10)^0,f,c
  5600   010A02  5004               	movf	(btemp+3)^0,w,c
  5601   010A04  120C               	iorwf	(btemp+11)^0,f,c
  5602                           
  5603                           ;stkvar	_ba @ sp[(-110)+4]
  5604   010A06  0E98               	movlw	152
  5605   010A08  24E1               	addwf	fsr1l,w,c
  5606   010A0A  6ED9               	movwf	fsr2l,c
  5607   010A0C  0EFF               	movlw	255
  5608   010A0E  20E2               	addwfc	fsr1h,w,c
  5609   010A10  6EDA               	movwf	fsr2h,c
  5610   010A12  50DF               	movf	indf2,w,c
  5611   010A14  6E01               	movwf	btemp^0,c
  5612   010A16  6A02               	clrf	(btemp+1)^0,c
  5613   010A18  6A03               	clrf	(btemp+2)^0,c
  5614   010A1A  6A04               	clrf	(btemp+3)^0,c
  5615   010A1C  C002  F004         	movff	btemp+1,btemp+3
  5616   010A20  C001  F003         	movff	btemp,btemp+2
  5617   010A24  6A02               	clrf	(btemp+1)^0,c
  5618   010A26  6A01               	clrf	btemp^0,c
  5619   010A28  5001               	movf	btemp^0,w,c
  5620   010A2A  1209               	iorwf	(btemp+8)^0,f,c
  5621   010A2C  5002               	movf	(btemp+1)^0,w,c
  5622   010A2E  120A               	iorwf	(btemp+9)^0,f,c
  5623   010A30  5003               	movf	(btemp+2)^0,w,c
  5624   010A32  120B               	iorwf	(btemp+10)^0,f,c
  5625   010A34  5004               	movf	(btemp+3)^0,w,c
  5626   010A36  120C               	iorwf	(btemp+11)^0,f,c
  5627   010A38  5005               	movf	(btemp+4)^0,w,c
  5628   010A3A  1009               	iorwf	(btemp+8)^0,w,c
  5629   010A3C  6E01               	movwf	btemp^0,c
  5630   010A3E  5006               	movf	(btemp+5)^0,w,c
  5631   010A40  100A               	iorwf	(btemp+9)^0,w,c
  5632   010A42  6E02               	movwf	(btemp+1)^0,c
  5633   010A44  5007               	movf	(btemp+6)^0,w,c
  5634   010A46  100B               	iorwf	(btemp+10)^0,w,c
  5635   010A48  6E03               	movwf	(btemp+2)^0,c
  5636   010A4A  5008               	movf	(btemp+7)^0,w,c
  5637   010A4C  100C               	iorwf	(btemp+11)^0,w,c
  5638   010A4E  6E04               	movwf	(btemp+3)^0,c
  5639                           
  5640                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5641   010A50  0E8F               	movlw	-113
  5642   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5643   010A56  0E90               	movlw	-112
  5644   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5645   010A5C  C001  FFDE         	movff	btemp,postinc2
  5646   010A60  C002  FFDE         	movff	btemp+1,postinc2
  5647   010A64  C003  FFDE         	movff	btemp+2,postinc2
  5648   010A68  C004  FFDE         	movff	btemp+3,postinc2
  5649                           
  5650                           ;can/can.c: 1320:     }
  5651   010A6C  EFF8  F085         	goto	l4508
  5652   010A70                     l4506:
  5653                           
  5654                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5655                           ;stkvar	_ba @ sp[(-110)+4]
  5656   010A70  0E99               	movlw	153
  5657   010A72  24E1               	addwf	fsr1l,w,c
  5658   010A74  6ED9               	movwf	fsr2l,c
  5659   010A76  0EFF               	movlw	255
  5660   010A78  20E2               	addwfc	fsr1h,w,c
  5661   010A7A  6EDA               	movwf	fsr2h,c
  5662   010A7C  50DF               	movf	indf2,w,c
  5663   010A7E  6E0C               	movwf	(btemp+11)^0,c
  5664   010A80  0E1F               	movlw	31
  5665   010A82  160C               	andwf	(btemp+11)^0,f,c
  5666   010A84  C00C  F005         	movff	btemp+11,btemp+4
  5667   010A88  6A06               	clrf	(btemp+5)^0,c
  5668   010A8A  6A07               	clrf	(btemp+6)^0,c
  5669   010A8C  6A08               	clrf	(btemp+7)^0,c
  5670   010A8E  C005  F008         	movff	btemp+4,btemp+7
  5671   010A92  6A07               	clrf	(btemp+6)^0,c
  5672   010A94  6A06               	clrf	(btemp+5)^0,c
  5673   010A96  6A05               	clrf	(btemp+4)^0,c
  5674                           
  5675                           ;stkvar	_ba @ sp[(-110)+4]
  5676   010A98  0E97               	movlw	151
  5677   010A9A  24E1               	addwf	fsr1l,w,c
  5678   010A9C  6ED9               	movwf	fsr2l,c
  5679   010A9E  0EFF               	movlw	255
  5680   010AA0  20E2               	addwfc	fsr1h,w,c
  5681   010AA2  6EDA               	movwf	fsr2h,c
  5682   010AA4  50DF               	movf	indf2,w,c
  5683   010AA6  6E0C               	movwf	(btemp+11)^0,c
  5684   010AA8  C00C  F001         	movff	btemp+11,btemp
  5685   010AAC  6A02               	clrf	(btemp+1)^0,c
  5686   010AAE  6A03               	clrf	(btemp+2)^0,c
  5687   010AB0  6A04               	clrf	(btemp+3)^0,c
  5688   010AB2  C003  F004         	movff	btemp+2,btemp+3
  5689   010AB6  C002  F003         	movff	btemp+1,btemp+2
  5690   010ABA  C001  F002         	movff	btemp,btemp+1
  5691   010ABE  6A01               	clrf	btemp^0,c
  5692                           
  5693                           ;stkvar	_ba @ sp[(-110)+4]
  5694   010AC0  0E96               	movlw	-106
  5695   010AC2  50E3               	movf	plusw1,w,c
  5696   010AC4  6E09               	movwf	(btemp+8)^0,c
  5697   010AC6  6A0A               	clrf	(btemp+9)^0,c
  5698   010AC8  6A0B               	clrf	(btemp+10)^0,c
  5699   010ACA  6A0C               	clrf	(btemp+11)^0,c
  5700   010ACC  5001               	movf	btemp^0,w,c
  5701   010ACE  1209               	iorwf	(btemp+8)^0,f,c
  5702   010AD0  5002               	movf	(btemp+1)^0,w,c
  5703   010AD2  120A               	iorwf	(btemp+9)^0,f,c
  5704   010AD4  5003               	movf	(btemp+2)^0,w,c
  5705   010AD6  120B               	iorwf	(btemp+10)^0,f,c
  5706   010AD8  5004               	movf	(btemp+3)^0,w,c
  5707   010ADA  120C               	iorwf	(btemp+11)^0,f,c
  5708                           
  5709                           ;stkvar	_ba @ sp[(-110)+4]
  5710   010ADC  0E98               	movlw	152
  5711   010ADE  24E1               	addwf	fsr1l,w,c
  5712   010AE0  6ED9               	movwf	fsr2l,c
  5713   010AE2  0EFF               	movlw	255
  5714   010AE4  20E2               	addwfc	fsr1h,w,c
  5715   010AE6  6EDA               	movwf	fsr2h,c
  5716   010AE8  50DF               	movf	indf2,w,c
  5717   010AEA  6E01               	movwf	btemp^0,c
  5718   010AEC  6A02               	clrf	(btemp+1)^0,c
  5719   010AEE  6A03               	clrf	(btemp+2)^0,c
  5720   010AF0  6A04               	clrf	(btemp+3)^0,c
  5721   010AF2  C002  F004         	movff	btemp+1,btemp+3
  5722   010AF6  C001  F003         	movff	btemp,btemp+2
  5723   010AFA  6A02               	clrf	(btemp+1)^0,c
  5724   010AFC  6A01               	clrf	btemp^0,c
  5725   010AFE  5001               	movf	btemp^0,w,c
  5726   010B00  1209               	iorwf	(btemp+8)^0,f,c
  5727   010B02  5002               	movf	(btemp+1)^0,w,c
  5728   010B04  120A               	iorwf	(btemp+9)^0,f,c
  5729   010B06  5003               	movf	(btemp+2)^0,w,c
  5730   010B08  120B               	iorwf	(btemp+10)^0,f,c
  5731   010B0A  5004               	movf	(btemp+3)^0,w,c
  5732   010B0C  120C               	iorwf	(btemp+11)^0,f,c
  5733   010B0E  5005               	movf	(btemp+4)^0,w,c
  5734   010B10  1009               	iorwf	(btemp+8)^0,w,c
  5735   010B12  6E01               	movwf	btemp^0,c
  5736   010B14  5006               	movf	(btemp+5)^0,w,c
  5737   010B16  100A               	iorwf	(btemp+9)^0,w,c
  5738   010B18  6E02               	movwf	(btemp+1)^0,c
  5739   010B1A  5007               	movf	(btemp+6)^0,w,c
  5740   010B1C  100B               	iorwf	(btemp+10)^0,w,c
  5741   010B1E  6E03               	movwf	(btemp+2)^0,c
  5742   010B20  5008               	movf	(btemp+7)^0,w,c
  5743   010B22  100C               	iorwf	(btemp+11)^0,w,c
  5744   010B24  6E04               	movwf	(btemp+3)^0,c
  5745                           
  5746                           ;stkvar	_temp32 @ sp[(-110)+0]
  5747   010B26  0E92               	movlw	-110
  5748   010B28  C001  FFE3         	movff	btemp,plusw1
  5749   010B2C  0E93               	movlw	-109
  5750   010B2E  C002  FFE3         	movff	btemp+1,plusw1
  5751   010B32  0E94               	movlw	-108
  5752   010B34  C003  FFE3         	movff	btemp+2,plusw1
  5753   010B38  0E95               	movlw	-107
  5754   010B3A  C004  FFE3         	movff	btemp+3,plusw1
  5755                           
  5756                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5757                           ;stkvar	_temp32 @ sp[(-110)+0]
  5758   010B3E  0E92               	movlw	-110
  5759   010B40  CFE3 F009          	movff	plusw1,btemp+8
  5760   010B44  0E93               	movlw	-109
  5761   010B46  CFE3 F00A          	movff	plusw1,btemp+9
  5762   010B4A  0E94               	movlw	-108
  5763   010B4C  CFE3 F00B          	movff	plusw1,btemp+10
  5764   010B50  0E95               	movlw	-107
  5765   010B52  CFE3 F00C          	movff	plusw1,btemp+11
  5766   010B56  0E0C               	movlw	12
  5767   010B58  EFB3  F085         	goto	u2160
  5768   010B5C                     u2165:
  5769   010B5C  90D8               	bcf	status,0,c
  5770   010B5E  320C               	rrcf	(btemp+11)^0,f,c
  5771   010B60  320B               	rrcf	(btemp+10)^0,f,c
  5772   010B62  320A               	rrcf	(btemp+9)^0,f,c
  5773   010B64  3209               	rrcf	(btemp+8)^0,f,c
  5774   010B66                     u2160:
  5775   010B66  2EE8               	decfsz	wreg,f,c
  5776   010B68  EFAE  F085         	goto	u2165
  5777   010B6C  0EFF               	movlw	255
  5778   010B6E  1409               	andwf	(btemp+8)^0,w,c
  5779   010B70  6E05               	movwf	(btemp+4)^0,c
  5780   010B72  0EFF               	movlw	255
  5781   010B74  140A               	andwf	(btemp+9)^0,w,c
  5782   010B76  6E06               	movwf	(btemp+5)^0,c
  5783   010B78  0E03               	movlw	3
  5784   010B7A  140B               	andwf	(btemp+10)^0,w,c
  5785   010B7C  6E07               	movwf	(btemp+6)^0,c
  5786   010B7E  0E00               	movlw	0
  5787   010B80  140C               	andwf	(btemp+11)^0,w,c
  5788   010B82  6E08               	movwf	(btemp+7)^0,c
  5789                           
  5790                           ;stkvar	_temp32 @ sp[(-110)+0]
  5791   010B84  50E1               	movf	fsr1l,w,c
  5792   010B86  0F92               	addlw	-110
  5793   010B88  6ED9               	movwf	fsr2l,c
  5794   010B8A  50E2               	movf	fsr1h,w,c
  5795   010B8C  6EDA               	movwf	fsr2h,c
  5796   010B8E  0EFF               	movlw	255
  5797   010B90  22DA               	addwfc	fsr2h,f,c
  5798   010B92  0EFF               	movlw	255
  5799   010B94  14DE               	andwf	postinc2,w,c
  5800   010B96  6E09               	movwf	(btemp+8)^0,c
  5801   010B98  0E07               	movlw	7
  5802   010B9A  14DE               	andwf	postinc2,w,c
  5803   010B9C  6E0A               	movwf	(btemp+9)^0,c
  5804   010B9E  0E00               	movlw	0
  5805   010BA0  14DE               	andwf	postinc2,w,c
  5806   010BA2  6E0B               	movwf	(btemp+10)^0,c
  5807   010BA4  0E00               	movlw	0
  5808   010BA6  14DE               	andwf	postinc2,w,c
  5809   010BA8  6E0C               	movwf	(btemp+11)^0,c
  5810   010BAA  0E12               	movlw	18
  5811   010BAC                     u2175:
  5812   010BAC  90D8               	bcf	status,0,c
  5813   010BAE  3609               	rlcf	(btemp+8)^0,f,c
  5814   010BB0  360A               	rlcf	(btemp+9)^0,f,c
  5815   010BB2  360B               	rlcf	(btemp+10)^0,f,c
  5816   010BB4  360C               	rlcf	(btemp+11)^0,f,c
  5817   010BB6  2EE8               	decfsz	wreg,f,c
  5818   010BB8  EFD6  F085         	goto	u2175
  5819   010BBC  5005               	movf	(btemp+4)^0,w,c
  5820   010BBE  1009               	iorwf	(btemp+8)^0,w,c
  5821   010BC0  6E01               	movwf	btemp^0,c
  5822   010BC2  5006               	movf	(btemp+5)^0,w,c
  5823   010BC4  100A               	iorwf	(btemp+9)^0,w,c
  5824   010BC6  6E02               	movwf	(btemp+1)^0,c
  5825   010BC8  5007               	movf	(btemp+6)^0,w,c
  5826   010BCA  100B               	iorwf	(btemp+10)^0,w,c
  5827   010BCC  6E03               	movwf	(btemp+2)^0,c
  5828   010BCE  5008               	movf	(btemp+7)^0,w,c
  5829   010BD0  100C               	iorwf	(btemp+11)^0,w,c
  5830   010BD2  6E04               	movwf	(btemp+3)^0,c
  5831                           
  5832                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5833   010BD4  0E8F               	movlw	-113
  5834   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5835   010BDA  0E90               	movlw	-112
  5836   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5837   010BE0  C001  FFDE         	movff	btemp,postinc2
  5838   010BE4  C002  FFDE         	movff	btemp+1,postinc2
  5839   010BE8  C003  FFDE         	movff	btemp+2,postinc2
  5840   010BEC  C004  FFDE         	movff	btemp+3,postinc2
  5841   010BF0                     l4508:
  5842                           
  5843                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5844                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5845   010BF0  0E8F               	movlw	-113
  5846   010BF2  CFE3 F00B          	movff	plusw1,btemp+10
  5847   010BF6  0E90               	movlw	-112
  5848   010BF8  CFE3 F00C          	movff	plusw1,btemp+11
  5849   010BFC  0E07               	movlw	7
  5850   010BFE  240B               	addwf	(btemp+10)^0,w,c
  5851   010C00  6ED9               	movwf	fsr2l,c
  5852   010C02  0E00               	movlw	0
  5853   010C04  200C               	addwfc	(btemp+11)^0,w,c
  5854   010C06  6EDA               	movwf	fsr2h,c
  5855                           
  5856                           ;stkvar	_ba @ sp[(-110)+4]
  5857   010C08  0E9B               	movlw	155
  5858   010C0A  24E1               	addwf	fsr1l,w,c
  5859   010C0C  6EE9               	movwf	fsr0l,c
  5860   010C0E  0EFF               	movlw	255
  5861   010C10  20E2               	addwfc	fsr1h,w,c
  5862   010C12  6EEA               	movwf	fsr0h,c
  5863   010C14  50EF               	movf	indf0,w,c
  5864   010C16  0B01               	andlw	1
  5865   010C18  6EDF               	movwf	indf2,c
  5866   010C1A                     
  5867                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5868                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5869   010C1A  0E8F               	movlw	-113
  5870   010C1C  CFE3 F00B          	movff	plusw1,btemp+10
  5871   010C20  0E90               	movlw	-112
  5872   010C22  CFE3 F00C          	movff	plusw1,btemp+11
  5873   010C26  0E08               	movlw	8
  5874   010C28  240B               	addwf	(btemp+10)^0,w,c
  5875   010C2A  6ED9               	movwf	fsr2l,c
  5876   010C2C  0E00               	movlw	0
  5877   010C2E  200C               	addwfc	(btemp+11)^0,w,c
  5878   010C30  6EDA               	movwf	fsr2h,c
  5879                           
  5880                           ;stkvar	_ba @ sp[(-110)+4]
  5881   010C32  0E9B               	movlw	155
  5882   010C34  24E1               	addwf	fsr1l,w,c
  5883   010C36  6EE9               	movwf	fsr0l,c
  5884   010C38  0EFF               	movlw	255
  5885   010C3A  20E2               	addwfc	fsr1h,w,c
  5886   010C3C  6EEA               	movwf	fsr0h,c
  5887   010C3E  50EF               	movf	indf0,w,c
  5888   010C40  6E0C               	movwf	(btemp+11)^0,c
  5889   010C42  90D8               	bcf	status,0,c
  5890   010C44  320C               	rrcf	(btemp+11)^0,f,c
  5891   010C46  90D8               	bcf	status,0,c
  5892   010C48  320C               	rrcf	(btemp+11)^0,f,c
  5893   010C4A  90D8               	bcf	status,0,c
  5894   010C4C  300C               	rrcf	(btemp+11)^0,w,c
  5895   010C4E  6EDF               	movwf	indf2,c
  5896   010C50                     
  5897                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5898                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5899   010C50  50E1               	movf	fsr1l,w,c
  5900   010C52  0FEE               	addlw	-18
  5901   010C54  6ED9               	movwf	fsr2l,c
  5902   010C56  50E2               	movf	fsr1h,w,c
  5903   010C58  6EDA               	movwf	fsr2h,c
  5904   010C5A  0EFF               	movlw	255
  5905   010C5C  22DA               	addwfc	fsr2h,f,c
  5906   010C5E  AADF               	btfss	indf2,5,c
  5907   010C60  EF34  F086         	goto	u2181
  5908   010C64  EF36  F086         	goto	u2180
  5909   010C68                     u2181:
  5910   010C68  EFC4  F086         	goto	l4532
  5911   010C6C                     u2180:
  5912   010C6C                     
  5913                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  5914                           ;stkvar	_ba @ sp[(-110)+4]
  5915   010C6C  0E9E               	movlw	158
  5916   010C6E  24E1               	addwf	fsr1l,w,c
  5917   010C70  6ED9               	movwf	fsr2l,c
  5918   010C72  0EFF               	movlw	255
  5919   010C74  20E2               	addwfc	fsr1h,w,c
  5920   010C76  6EDA               	movwf	fsr2h,c
  5921   010C78  50DF               	movf	indf2,w,c
  5922   010C7A  6E0C               	movwf	(btemp+11)^0,c
  5923                           
  5924                           ;stkvar	_myReg @ sp[(-110)+97]
  5925   010C7C  0EF3               	movlw	-13
  5926   010C7E  C00C  FFE3         	movff	btemp+11,plusw1
  5927   010C82                     
  5928                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  5929                           ;stkvar	_ba @ sp[(-110)+4]
  5930   010C82  0E9F               	movlw	159
  5931   010C84  24E1               	addwf	fsr1l,w,c
  5932   010C86  6ED9               	movwf	fsr2l,c
  5933   010C88  0EFF               	movlw	255
  5934   010C8A  20E2               	addwfc	fsr1h,w,c
  5935   010C8C  6EDA               	movwf	fsr2h,c
  5936                           
  5937                           ;stkvar	_myReg @ sp[(-110)+97]
  5938   010C8E  0EF4               	movlw	244
  5939   010C90  24E1               	addwf	fsr1l,w,c
  5940   010C92  6EE9               	movwf	fsr0l,c
  5941   010C94  0EFF               	movlw	255
  5942   010C96  20E2               	addwfc	fsr1h,w,c
  5943   010C98  6EEA               	movwf	fsr0h,c
  5944   010C9A  CFDF FFEF          	movff	indf2,indf0
  5945   010C9E                     
  5946                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  5947                           ;stkvar	_ba @ sp[(-110)+4]
  5948   010C9E  0EA0               	movlw	160
  5949   010CA0  24E1               	addwf	fsr1l,w,c
  5950   010CA2  6ED9               	movwf	fsr2l,c
  5951   010CA4  0EFF               	movlw	255
  5952   010CA6  20E2               	addwfc	fsr1h,w,c
  5953   010CA8  6EDA               	movwf	fsr2h,c
  5954                           
  5955                           ;stkvar	_myReg @ sp[(-110)+97]
  5956   010CAA  0EF5               	movlw	245
  5957   010CAC  24E1               	addwf	fsr1l,w,c
  5958   010CAE  6EE9               	movwf	fsr0l,c
  5959   010CB0  0EFF               	movlw	255
  5960   010CB2  20E2               	addwfc	fsr1h,w,c
  5961   010CB4  6EEA               	movwf	fsr0h,c
  5962   010CB6  CFDF FFEF          	movff	indf2,indf0
  5963   010CBA                     
  5964                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  5965                           ;stkvar	_ba @ sp[(-110)+4]
  5966   010CBA  0EA1               	movlw	161
  5967   010CBC  24E1               	addwf	fsr1l,w,c
  5968   010CBE  6ED9               	movwf	fsr2l,c
  5969   010CC0  0EFF               	movlw	255
  5970   010CC2  20E2               	addwfc	fsr1h,w,c
  5971   010CC4  6EDA               	movwf	fsr2h,c
  5972                           
  5973                           ;stkvar	_myReg @ sp[(-110)+97]
  5974   010CC6  0EF6               	movlw	246
  5975   010CC8  24E1               	addwf	fsr1l,w,c
  5976   010CCA  6EE9               	movwf	fsr0l,c
  5977   010CCC  0EFF               	movlw	255
  5978   010CCE  20E2               	addwfc	fsr1h,w,c
  5979   010CD0  6EEA               	movwf	fsr0h,c
  5980   010CD2  CFDF FFEF          	movff	indf2,indf0
  5981   010CD6                     
  5982                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  5983                           ;stkvar	_myReg @ sp[(-110)+97]
  5984   010CD6  50E1               	movf	fsr1l,w,c
  5985   010CD8  0FF3               	addlw	-13
  5986   010CDA  6ED9               	movwf	fsr2l,c
  5987   010CDC  50E2               	movf	fsr1h,w,c
  5988   010CDE  6EDA               	movwf	fsr2h,c
  5989   010CE0  0EFF               	movlw	255
  5990   010CE2  22DA               	addwfc	fsr2h,f,c
  5991                           
  5992                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5993   010CE4  0E8F               	movlw	-113
  5994   010CE6  CFE3 F00B          	movff	plusw1,btemp+10
  5995   010CEA  0E90               	movlw	-112
  5996   010CEC  CFE3 F00C          	movff	plusw1,btemp+11
  5997   010CF0  0E09               	movlw	9
  5998   010CF2  240B               	addwf	(btemp+10)^0,w,c
  5999   010CF4  6EE9               	movwf	fsr0l,c
  6000   010CF6  0E00               	movlw	0
  6001   010CF8  200C               	addwfc	(btemp+11)^0,w,c
  6002   010CFA  6EEA               	movwf	fsr0h,c
  6003   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  6004   010D00  CFDE FFEE          	movff	postinc2,postinc0
  6005   010D04  CFDE FFEE          	movff	postinc2,postinc0
  6006   010D08  CFDE FFEE          	movff	postinc2,postinc0
  6007   010D0C                     
  6008                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  6009                           ;stkvar	_i @ sp[(-110)+107]
  6010   010D0C  0EFD               	movlw	-3
  6011   010D0E  6AE3               	clrf	plusw1,c
  6012   010D10  EFB1  F086         	goto	l4530
  6013   010D14                     l4526:
  6014                           
  6015                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  6016                           ;stkvar	_i @ sp[(-110)+107]
  6017   010D14  0EFD               	movlw	-3
  6018   010D16  50E3               	movf	plusw1,w,c
  6019   010D18  6E0B               	movwf	(btemp+10)^0,c
  6020   010D1A  6A0C               	clrf	(btemp+11)^0,c
  6021   010D1C  0E0C               	movlw	12
  6022   010D1E  260B               	addwf	(btemp+10)^0,f,c
  6023   010D20  0E00               	movlw	0
  6024   010D22  220C               	addwfc	(btemp+11)^0,f,c
  6025                           
  6026                           ;stkvar	_ba @ sp[(-110)+4]
  6027   010D24  0E96               	movlw	150
  6028   010D26  24E1               	addwf	fsr1l,w,c
  6029   010D28  6E09               	movwf	(btemp+8)^0,c
  6030   010D2A  0EFF               	movlw	255
  6031   010D2C  20E2               	addwfc	fsr1h,w,c
  6032   010D2E  6E0A               	movwf	(btemp+9)^0,c
  6033   010D30  500B               	movf	(btemp+10)^0,w,c
  6034   010D32  2409               	addwf	(btemp+8)^0,w,c
  6035   010D34  6ED9               	movwf	fsr2l,c
  6036   010D36  500C               	movf	(btemp+11)^0,w,c
  6037   010D38  200A               	addwfc	(btemp+9)^0,w,c
  6038   010D3A  6EDA               	movwf	fsr2h,c
  6039                           
  6040                           ;stkvar	_i @ sp[(-110)+107]
  6041   010D3C  0EFD               	movlw	-3
  6042   010D3E  CFE3 F00C          	movff	plusw1,btemp+11
  6043                           
  6044                           ;stkvar	_rxd @ sp[(-110)+-5]
  6045   010D42  0E8D               	movlw	-115
  6046   010D44  CFE3 F009          	movff	plusw1,btemp+8
  6047   010D48  0E8E               	movlw	-114
  6048   010D4A  CFE3 F00A          	movff	plusw1,btemp+9
  6049   010D4E  500C               	movf	(btemp+11)^0,w,c
  6050   010D50  2409               	addwf	(btemp+8)^0,w,c
  6051   010D52  6EE9               	movwf	fsr0l,c
  6052   010D54  0E00               	movlw	0
  6053   010D56  200A               	addwfc	(btemp+9)^0,w,c
  6054   010D58  6EEA               	movwf	fsr0h,c
  6055   010D5A  CFDF FFEF          	movff	indf2,indf0
  6056   010D5E                     
  6057                           ;can/can.c: 1342:         }
  6058                           ;stkvar	_i @ sp[(-110)+107]
  6059   010D5E  0EFD               	movlw	-3
  6060   010D60  2AE3               	incf	plusw1,f,c
  6061   010D62                     l4530:
  6062                           
  6063                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6064                           ;stkvar	_i @ sp[(-110)+107]
  6065   010D62  50E1               	movf	fsr1l,w,c
  6066   010D64  0FFD               	addlw	-3
  6067   010D66  6ED9               	movwf	fsr2l,c
  6068   010D68  50E2               	movf	fsr1h,w,c
  6069   010D6A  6EDA               	movwf	fsr2h,c
  6070   010D6C  0EFF               	movlw	255
  6071   010D6E  22DA               	addwfc	fsr2h,f,c
  6072   010D70  0E8C               	movlw	-116
  6073   010D72  50E3               	movf	plusw1,w,c
  6074   010D74  5CDE               	subwf	postinc2,w,c
  6075   010D76  A0D8               	btfss	status,0,c
  6076   010D78  EFC0  F086         	goto	u2191
  6077   010D7C  EFC2  F086         	goto	u2190
  6078   010D80                     u2191:
  6079   010D80  EF8A  F086         	goto	l4526
  6080   010D84                     u2190:
  6081   010D84  EF10  F087         	goto	l4542
  6082   010D88                     l4532:
  6083                           
  6084                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6085                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6086   010D88  0E8F               	movlw	-113
  6087   010D8A  CFE3 F00B          	movff	plusw1,btemp+10
  6088   010D8E  0E90               	movlw	-112
  6089   010D90  CFE3 F00C          	movff	plusw1,btemp+11
  6090   010D94  0E09               	movlw	9
  6091   010D96  240B               	addwf	(btemp+10)^0,w,c
  6092   010D98  6ED9               	movwf	fsr2l,c
  6093   010D9A  0E00               	movlw	0
  6094   010D9C  200C               	addwfc	(btemp+11)^0,w,c
  6095   010D9E  6EDA               	movwf	fsr2h,c
  6096   010DA0  6ADE               	clrf	postinc2,c
  6097   010DA2  6ADE               	clrf	postinc2,c
  6098   010DA4  6ADE               	clrf	postinc2,c
  6099   010DA6  6ADD               	clrf	postdec2,c
  6100   010DA8                     
  6101                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6102                           ;stkvar	_i @ sp[(-110)+107]
  6103   010DA8  0EFD               	movlw	-3
  6104   010DAA  6AE3               	clrf	plusw1,c
  6105   010DAC  EFFF  F086         	goto	l4540
  6106   010DB0                     l4536:
  6107                           
  6108                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6109                           ;stkvar	_i @ sp[(-110)+107]
  6110   010DB0  0EFD               	movlw	-3
  6111   010DB2  50E3               	movf	plusw1,w,c
  6112   010DB4  6E0B               	movwf	(btemp+10)^0,c
  6113   010DB6  6A0C               	clrf	(btemp+11)^0,c
  6114   010DB8  0E08               	movlw	8
  6115   010DBA  260B               	addwf	(btemp+10)^0,f,c
  6116   010DBC  0E00               	movlw	0
  6117   010DBE  220C               	addwfc	(btemp+11)^0,f,c
  6118                           
  6119                           ;stkvar	_ba @ sp[(-110)+4]
  6120   010DC0  0E96               	movlw	150
  6121   010DC2  24E1               	addwf	fsr1l,w,c
  6122   010DC4  6E09               	movwf	(btemp+8)^0,c
  6123   010DC6  0EFF               	movlw	255
  6124   010DC8  20E2               	addwfc	fsr1h,w,c
  6125   010DCA  6E0A               	movwf	(btemp+9)^0,c
  6126   010DCC  500B               	movf	(btemp+10)^0,w,c
  6127   010DCE  2409               	addwf	(btemp+8)^0,w,c
  6128   010DD0  6ED9               	movwf	fsr2l,c
  6129   010DD2  500C               	movf	(btemp+11)^0,w,c
  6130   010DD4  200A               	addwfc	(btemp+9)^0,w,c
  6131   010DD6  6EDA               	movwf	fsr2h,c
  6132                           
  6133                           ;stkvar	_i @ sp[(-110)+107]
  6134   010DD8  0EFD               	movlw	-3
  6135   010DDA  CFE3 F00C          	movff	plusw1,btemp+11
  6136                           
  6137                           ;stkvar	_rxd @ sp[(-110)+-5]
  6138   010DDE  0E8D               	movlw	-115
  6139   010DE0  CFE3 F009          	movff	plusw1,btemp+8
  6140   010DE4  0E8E               	movlw	-114
  6141   010DE6  CFE3 F00A          	movff	plusw1,btemp+9
  6142   010DEA  500C               	movf	(btemp+11)^0,w,c
  6143   010DEC  2409               	addwf	(btemp+8)^0,w,c
  6144   010DEE  6EE9               	movwf	fsr0l,c
  6145   010DF0  0E00               	movlw	0
  6146   010DF2  200A               	addwfc	(btemp+9)^0,w,c
  6147   010DF4  6EEA               	movwf	fsr0h,c
  6148   010DF6  CFDF FFEF          	movff	indf2,indf0
  6149   010DFA                     
  6150                           ;can/can.c: 1349:         }
  6151                           ;stkvar	_i @ sp[(-110)+107]
  6152   010DFA  0EFD               	movlw	-3
  6153   010DFC  2AE3               	incf	plusw1,f,c
  6154   010DFE                     l4540:
  6155                           
  6156                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6157                           ;stkvar	_i @ sp[(-110)+107]
  6158   010DFE  50E1               	movf	fsr1l,w,c
  6159   010E00  0FFD               	addlw	-3
  6160   010E02  6ED9               	movwf	fsr2l,c
  6161   010E04  50E2               	movf	fsr1h,w,c
  6162   010E06  6EDA               	movwf	fsr2h,c
  6163   010E08  0EFF               	movlw	255
  6164   010E0A  22DA               	addwfc	fsr2h,f,c
  6165   010E0C  0E8C               	movlw	-116
  6166   010E0E  50E3               	movf	plusw1,w,c
  6167   010E10  5CDE               	subwf	postinc2,w,c
  6168   010E12  A0D8               	btfss	status,0,c
  6169   010E14  EF0E  F087         	goto	u2201
  6170   010E18  EF10  F087         	goto	u2200
  6171   010E1C                     u2201:
  6172   010E1C  EFD8  F086         	goto	l4536
  6173   010E20                     u2200:
  6174   010E20                     l4542:
  6175                           
  6176                           ;stkvar	_channel @ sp[(-110)+-1]
  6177   010E20  0E91               	movlw	-111
  6178   010E22  50E3               	movf	plusw1,w,c
  6179   010E24  6EE6               	movwf	postinc1,c
  6180   010E26  ECC6  F0A1         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6181   010E2A                     l357:
  6182                           
  6183                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6184   010E2A  0E8C               	movlw	140
  6185   010E2C  26E1               	addwf	fsr1l,f,c
  6186   010E2E  0EFF               	movlw	255
  6187   010E30  22E2               	addwfc	fsr1h,f,c
  6188   010E32  0012               	return		;funcret
  6189   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6190                           	callstack 0
  6191                           
  6192 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6193 ;; Defined at:
  6194 ;;		line 1378 in file "can/can.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  channel         1  [STACK] enum E5287
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6199 ;;  a               2  [STACK] unsigned short 
  6200 ;;  spiTransferE    1  [STACK] char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1  [STACK] char 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used: 1
  6216 ;; Hardware stack levels required when called: 9
  6217 ;; This function calls:
  6218 ;;		_DRV_CANFDSPI_WriteByte
  6219 ;; This function is called by:
  6220 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6221 ;; This function uses a reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text13
  6225   01438C                     __ptext13:
  6226                           	callstack 0
  6227   01438C                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6228                           	callstack 0
  6229                           
  6230                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6231   01438C  0E08               	movlw	8
  6232   01438E  26E1               	addwf	fsr1l,f,c
  6233   014390  0E00               	movlw	0
  6234   014392  22E2               	addwfc	fsr1h,f,c
  6235   014394                     
  6236                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6237                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6238   014394  0EF8               	movlw	-8
  6239   014396  6AE3               	clrf	plusw1,c
  6240   014398  0EF9               	movlw	-7
  6241   01439A  6AE3               	clrf	plusw1,c
  6242   01439C  0EFA               	movlw	-6
  6243   01439E  6AE3               	clrf	plusw1,c
  6244   0143A0  0EFB               	movlw	-5
  6245   0143A2  6AE3               	clrf	plusw1,c
  6246   0143A4                     
  6247                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6248                           ;stkvar	_channel @ sp[(-8)+-1]
  6249   0143A4  0EF7               	movlw	-9
  6250   0143A6  50E3               	movf	plusw1,w,c
  6251   0143A8  0D0C               	mullw	12
  6252   0143AA  0E51               	movlw	81
  6253   0143AC  26F3               	addwf	243,f,c
  6254   0143AE  0E00               	movlw	0
  6255   0143B0  22F4               	addwfc	244,f,c
  6256                           
  6257                           ;stkvar	_a @ sp[(-8)+5]
  6258   0143B2  0EFD               	movlw	-3
  6259   0143B4  CFF3 FFE3          	movff	prodl,plusw1
  6260   0143B8  0EFE               	movlw	-2
  6261   0143BA  CFF4 FFE3          	movff	prodh,plusw1
  6262   0143BE                     
  6263                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6264                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6265   0143BE  0EF9               	movlw	249
  6266   0143C0  24E1               	addwf	fsr1l,w,c
  6267   0143C2  6ED9               	movwf	fsr2l,c
  6268   0143C4  0EFF               	movlw	255
  6269   0143C6  20E2               	addwfc	fsr1h,w,c
  6270   0143C8  6EDA               	movwf	fsr2h,c
  6271   0143CA  80DF               	bsf	indf2,0,c
  6272   0143CC                     
  6273                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6274                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6275   0143CC  0EF9               	movlw	249
  6276   0143CE  24E1               	addwf	fsr1l,w,c
  6277   0143D0  6ED9               	movwf	fsr2l,c
  6278   0143D2  0EFF               	movlw	255
  6279   0143D4  20E2               	addwfc	fsr1h,w,c
  6280   0143D6  6EDA               	movwf	fsr2h,c
  6281   0143D8  50DF               	movf	indf2,w,c
  6282   0143DA  6EE6               	movwf	postinc1,c
  6283                           
  6284                           ;stkvar	_a @ sp[(-9)+5]
  6285   0143DC  0EFC               	movlw	-4
  6286   0143DE  CFE3 FFE6          	movff	plusw1,postinc1
  6287   0143E2  CFE3 FFE6          	movff	plusw1,postinc1
  6288   0143E6  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6289                           
  6290                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6291   0143EA  0EFF               	movlw	-1
  6292   0143EC  C001  FFE3         	movff	btemp,plusw1
  6293   0143F0                     
  6294                           ;can/can.c: 1393:     return spiTransferError;
  6295                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6296   0143F0  0EFF               	movlw	-1
  6297   0143F2  CFE3 F001          	movff	plusw1,btemp
  6298   0143F6                     
  6299                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6300   0143F6  0EF7               	movlw	247
  6301   0143F8  26E1               	addwf	fsr1l,f,c
  6302   0143FA  0EFF               	movlw	255
  6303   0143FC  22E2               	addwfc	fsr1h,f,c
  6304   0143FE  0012               	return		;funcret
  6305   014400                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6306                           	callstack 0
  6307                           
  6308 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6309 ;; Defined at:
  6310 ;;		line 356 in file "can/can.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  address         2  [STACK] unsigned short 
  6313 ;;  rxd             2  [STACK] PTR unsigned char 
  6314 ;;		 -> ba(12), ba(76), 
  6315 ;;  nBytes          2  [STACK] unsigned short 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  i               2  [STACK] unsigned short 
  6318 ;;  spiTransferS    2  [STACK] unsigned short 
  6319 ;;  spiTransferE    1  [STACK] char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1  [STACK] char 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;Total ram usage:        0 bytes
  6334 ;; Hardware stack levels used: 1
  6335 ;; Hardware stack levels required when called: 8
  6336 ;; This function calls:
  6337 ;;		_SpiTransfer
  6338 ;; This function is called by:
  6339 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6340 ;; This function uses a reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text14
  6344   0125CC                     __ptext14:
  6345                           	callstack 0
  6346   0125CC                     _DRV_CANFDSPI_ReadByteArray:
  6347                           	callstack 0
  6348                           
  6349                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6350   0125CC  0E05               	movlw	5
  6351   0125CE  26E1               	addwf	fsr1l,f,c
  6352   0125D0  0E00               	movlw	0
  6353   0125D2  22E2               	addwfc	fsr1h,f,c
  6354   0125D4                     
  6355                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6356                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6357   0125D4  0EF5               	movlw	-11
  6358   0125D6  50E3               	movf	plusw1,w,c
  6359   0125D8  0F02               	addlw	2
  6360   0125DA  6E0B               	movwf	(btemp+10)^0,c
  6361   0125DC  0EF6               	movlw	-10
  6362   0125DE  CFE3 F00C          	movff	plusw1,btemp+11
  6363   0125E2  0E00               	movlw	0
  6364   0125E4  220C               	addwfc	(btemp+11)^0,f,c
  6365                           
  6366                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6367   0125E6  0EFD               	movlw	-3
  6368   0125E8  C00B  FFE3         	movff	btemp+10,plusw1
  6369   0125EC  0EFE               	movlw	-2
  6370   0125EE  C00C  FFE3         	movff	btemp+11,plusw1
  6371   0125F2                     
  6372                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6373                           ;stkvar	_address @ sp[(-5)+-2]
  6374   0125F2  0EFA               	movlw	250
  6375   0125F4  24E1               	addwf	fsr1l,w,c
  6376   0125F6  6ED9               	movwf	fsr2l,c
  6377   0125F8  0EFF               	movlw	255
  6378   0125FA  20E2               	addwfc	fsr1h,w,c
  6379   0125FC  6EDA               	movwf	fsr2h,c
  6380   0125FE  50DF               	movf	indf2,w,c
  6381   012600  0B0F               	andlw	15
  6382   012602  0F30               	addlw	48
  6383   012604  0101               	movlb	1	; () banked
  6384   012606  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6385   012608                     
  6386                           ; BSR set to: 1
  6387                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6388                           ;stkvar	_address @ sp[(-5)+-2]
  6389   012608  0EF9               	movlw	-7
  6390   01260A  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6391   01260E                     
  6392                           ; BSR set to: 1
  6393                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6394   01260E  0E02               	movlw	2
  6395   012610  6E0B               	movwf	(btemp+10)^0,c
  6396   012612  0E00               	movlw	0
  6397   012614  6E0C               	movwf	(btemp+11)^0,c
  6398                           
  6399                           ;stkvar	_i @ sp[(-5)+0]
  6400   012616  0EFB               	movlw	-5
  6401   012618  C00B  FFE3         	movff	btemp+10,plusw1
  6402   01261C  0EFC               	movlw	-4
  6403   01261E  C00C  FFE3         	movff	btemp+11,plusw1
  6404   012622  EF2F  F093         	goto	l4362
  6405   012626                     l4358:
  6406                           
  6407                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6408                           ;stkvar	_i @ sp[(-5)+0]
  6409   012626  0EFB               	movlw	-5
  6410   012628  CFE3 F00B          	movff	plusw1,btemp+10
  6411   01262C  0EFC               	movlw	-4
  6412   01262E  CFE3 F00C          	movff	plusw1,btemp+11
  6413   012632  0E00               	movlw	low _spiTransmitBuffer
  6414   012634  240B               	addwf	(btemp+10)^0,w,c
  6415   012636  6ED9               	movwf	fsr2l,c
  6416   012638  0E01               	movlw	high _spiTransmitBuffer
  6417   01263A  200C               	addwfc	(btemp+11)^0,w,c
  6418   01263C  6EDA               	movwf	fsr2h,c
  6419   01263E  6ADF               	clrf	indf2,c
  6420   012640                     
  6421                           ;can/can.c: 370:     }
  6422                           ;stkvar	_i @ sp[(-5)+0]
  6423   012640  0EFB               	movlw	-5
  6424   012642  50E3               	movf	plusw1,w,c
  6425   012644  0F01               	addlw	1
  6426   012646  6E01               	movwf	btemp^0,c
  6427   012648  0EFB               	movlw	-5
  6428   01264A  C001  FFE3         	movff	btemp,plusw1
  6429   01264E  6A01               	clrf	btemp^0,c
  6430   012650  0EFC               	movlw	-4
  6431   012652  50E3               	movf	plusw1,w,c
  6432   012654  2001               	addwfc	btemp^0,w,c
  6433   012656  6E01               	movwf	btemp^0,c
  6434   012658  0EFC               	movlw	-4
  6435   01265A  C001  FFE3         	movff	btemp,plusw1
  6436   01265E                     l4362:
  6437                           
  6438                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6439   01265E  0EFD               	movlw	-3
  6440   012660  CFE3 F00B          	movff	plusw1,btemp+10
  6441   012664  0EFE               	movlw	-2
  6442   012666  CFE3 F00C          	movff	plusw1,btemp+11
  6443                           
  6444                           ;stkvar	_i @ sp[(-5)+0]
  6445   01266A  0EFB               	movlw	-5
  6446   01266C  CFE3 F009          	movff	plusw1,btemp+8
  6447   012670  0EFC               	movlw	-4
  6448   012672  CFE3 F00A          	movff	plusw1,btemp+9
  6449   012676  500B               	movf	(btemp+10)^0,w,c
  6450   012678  5C09               	subwf	(btemp+8)^0,w,c
  6451   01267A  500C               	movf	(btemp+11)^0,w,c
  6452   01267C  580A               	subwfb	(btemp+9)^0,w,c
  6453   01267E  A0D8               	btfss	status,0,c
  6454   012680  EF44  F093         	goto	u2001
  6455   012684  EF46  F093         	goto	u2000
  6456   012688                     u2001:
  6457   012688  EF13  F093         	goto	l4358
  6458   01268C                     u2000:
  6459   01268C                     
  6460                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6461                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6462   01268C  0EFD               	movlw	-3
  6463   01268E  CFE3 FFE6          	movff	plusw1,postinc1
  6464   012692  CFE3 FFE6          	movff	plusw1,postinc1
  6465   012696  0E00               	movlw	low _spiReceiveBuffer
  6466   012698  6EE6               	movwf	postinc1,c
  6467   01269A  0E02               	movlw	high _spiReceiveBuffer
  6468   01269C  6EE6               	movwf	postinc1,c
  6469   01269E  0E00               	movlw	low _spiTransmitBuffer
  6470   0126A0  6EE6               	movwf	postinc1,c
  6471   0126A2  0E01               	movlw	high _spiTransmitBuffer
  6472   0126A4  6EE6               	movwf	postinc1,c
  6473   0126A6  EC39  F09D         	call	_SpiTransfer	;wreg free
  6474                           
  6475                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6476   0126AA  0EFF               	movlw	-1
  6477   0126AC  C001  FFE3         	movff	btemp,plusw1
  6478   0126B0                     
  6479                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6480                           ;stkvar	_i @ sp[(-5)+0]
  6481   0126B0  0EFB               	movlw	-5
  6482   0126B2  6AE3               	clrf	plusw1,c
  6483   0126B4  0EFC               	movlw	-4
  6484   0126B6  6AE3               	clrf	plusw1,c
  6485   0126B8  EF8D  F093         	goto	l4372
  6486   0126BC                     l4368:
  6487                           
  6488                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6489                           ;stkvar	_i @ sp[(-5)+0]
  6490   0126BC  0EFB               	movlw	-5
  6491   0126BE  CFE3 F00B          	movff	plusw1,btemp+10
  6492   0126C2  0EFC               	movlw	-4
  6493   0126C4  CFE3 F00C          	movff	plusw1,btemp+11
  6494   0126C8  0E02               	movlw	low (_spiReceiveBuffer+2)
  6495   0126CA  240B               	addwf	(btemp+10)^0,w,c
  6496   0126CC  6ED9               	movwf	fsr2l,c
  6497   0126CE  0E02               	movlw	high (_spiReceiveBuffer+2)
  6498   0126D0  200C               	addwfc	(btemp+11)^0,w,c
  6499   0126D2  6EDA               	movwf	fsr2h,c
  6500                           
  6501                           ;stkvar	_i @ sp[(-5)+0]
  6502   0126D4  0EFB               	movlw	-5
  6503   0126D6  CFE3 F00B          	movff	plusw1,btemp+10
  6504   0126DA  0EFC               	movlw	-4
  6505   0126DC  CFE3 F00C          	movff	plusw1,btemp+11
  6506                           
  6507                           ;stkvar	_rxd @ sp[(-5)+-4]
  6508   0126E0  0EF7               	movlw	-9
  6509   0126E2  CFE3 F009          	movff	plusw1,btemp+8
  6510   0126E6  0EF8               	movlw	-8
  6511   0126E8  CFE3 F00A          	movff	plusw1,btemp+9
  6512   0126EC  500B               	movf	(btemp+10)^0,w,c
  6513   0126EE  2409               	addwf	(btemp+8)^0,w,c
  6514   0126F0  6EE9               	movwf	fsr0l,c
  6515   0126F2  500C               	movf	(btemp+11)^0,w,c
  6516   0126F4  200A               	addwfc	(btemp+9)^0,w,c
  6517   0126F6  6EEA               	movwf	fsr0h,c
  6518   0126F8  CFDF FFEF          	movff	indf2,indf0
  6519   0126FC                     
  6520                           ;can/can.c: 377:     }
  6521                           ;stkvar	_i @ sp[(-5)+0]
  6522   0126FC  0EFB               	movlw	-5
  6523   0126FE  50E3               	movf	plusw1,w,c
  6524   012700  0F01               	addlw	1
  6525   012702  6E01               	movwf	btemp^0,c
  6526   012704  0EFB               	movlw	-5
  6527   012706  C001  FFE3         	movff	btemp,plusw1
  6528   01270A  6A01               	clrf	btemp^0,c
  6529   01270C  0EFC               	movlw	-4
  6530   01270E  50E3               	movf	plusw1,w,c
  6531   012710  2001               	addwfc	btemp^0,w,c
  6532   012712  6E01               	movwf	btemp^0,c
  6533   012714  0EFC               	movlw	-4
  6534   012716  C001  FFE3         	movff	btemp,plusw1
  6535   01271A                     l4372:
  6536                           
  6537                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6538   01271A  0EF5               	movlw	-11
  6539   01271C  CFE3 F00B          	movff	plusw1,btemp+10
  6540   012720  0EF6               	movlw	-10
  6541   012722  CFE3 F00C          	movff	plusw1,btemp+11
  6542                           
  6543                           ;stkvar	_i @ sp[(-5)+0]
  6544   012726  0EFB               	movlw	-5
  6545   012728  CFE3 F009          	movff	plusw1,btemp+8
  6546   01272C  0EFC               	movlw	-4
  6547   01272E  CFE3 F00A          	movff	plusw1,btemp+9
  6548   012732  500B               	movf	(btemp+10)^0,w,c
  6549   012734  5C09               	subwf	(btemp+8)^0,w,c
  6550   012736  500C               	movf	(btemp+11)^0,w,c
  6551   012738  580A               	subwfb	(btemp+9)^0,w,c
  6552   01273A  A0D8               	btfss	status,0,c
  6553   01273C  EFA2  F093         	goto	u2011
  6554   012740  EFA4  F093         	goto	u2010
  6555   012744                     u2011:
  6556   012744  EF5E  F093         	goto	l4368
  6557   012748                     u2010:
  6558   012748                     
  6559                           ;can/can.c: 379:     return spiTransferError;
  6560                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6561   012748  0EFF               	movlw	-1
  6562   01274A  CFE3 F001          	movff	plusw1,btemp
  6563   01274E                     
  6564                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6565   01274E  0EF5               	movlw	245
  6566   012750  26E1               	addwf	fsr1l,f,c
  6567   012752  0EFF               	movlw	255
  6568   012754  22E2               	addwfc	fsr1h,f,c
  6569   012756  0012               	return		;funcret
  6570   012758                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6571                           	callstack 0
  6572                           
  6573 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6574 ;; Defined at:
  6575 ;;		line 1928 in file "can/can.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  channel         1  [STACK] enum E5287
  6578 ;;  flags           2  [STACK] PTR enum E5588
  6579 ;;		 -> rxFlags(1), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6582 ;;  a               2  [STACK] unsigned short 
  6583 ;;  spiTransferE    1  [STACK] char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1  [STACK] char 
  6586 ;; Registers used:
  6587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:        0 bytes
  6598 ;; Hardware stack levels used: 1
  6599 ;; Hardware stack levels required when called: 9
  6600 ;; This function calls:
  6601 ;;		_DRV_CANFDSPI_ReadByte
  6602 ;; This function is called by:
  6603 ;;		_CanReceive
  6604 ;; This function uses a reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text15
  6608   014012                     __ptext15:
  6609                           	callstack 0
  6610   014012                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6611                           	callstack 0
  6612                           
  6613                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6614   014012  0E07               	movlw	7
  6615   014014  26E1               	addwf	fsr1l,f,c
  6616   014016  0E00               	movlw	0
  6617   014018  22E2               	addwfc	fsr1h,f,c
  6618   01401A                     
  6619                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6620                           ;stkvar	_channel @ sp[(-7)+-1]
  6621   01401A  0EF8               	movlw	-8
  6622   01401C  50E3               	movf	plusw1,w,c
  6623   01401E  A4D8               	btfss	status,2,c
  6624   014020  EF14  F0A0         	goto	u2071
  6625   014024  EF16  F0A0         	goto	u2070
  6626   014028                     u2071:
  6627   014028  EF18  F0A0         	goto	l4444
  6628   01402C                     u2070:
  6629   01402C  EF56  F0A0         	goto	l482
  6630   014030                     l4444:
  6631                           
  6632                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6633                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6634   014030  0EF9               	movlw	-7
  6635   014032  6AE3               	clrf	plusw1,c
  6636   014034  0EFA               	movlw	-6
  6637   014036  6AE3               	clrf	plusw1,c
  6638   014038  0EFB               	movlw	-5
  6639   01403A  6AE3               	clrf	plusw1,c
  6640   01403C  0EFC               	movlw	-4
  6641   01403E  6AE3               	clrf	plusw1,c
  6642   014040                     
  6643                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6644                           ;stkvar	_channel @ sp[(-7)+-1]
  6645   014040  0EF8               	movlw	-8
  6646   014042  50E3               	movf	plusw1,w,c
  6647   014044  0D0C               	mullw	12
  6648   014046  0E54               	movlw	84
  6649   014048  26F3               	addwf	243,f,c
  6650   01404A  0E00               	movlw	0
  6651   01404C  22F4               	addwfc	244,f,c
  6652                           
  6653                           ;stkvar	_a @ sp[(-7)+4]
  6654   01404E  0EFD               	movlw	-3
  6655   014050  CFF3 FFE3          	movff	prodl,plusw1
  6656   014054  0EFE               	movlw	-2
  6657   014056  CFF4 FFE3          	movff	prodh,plusw1
  6658   01405A                     
  6659                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6660                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6661   01405A  0EF9               	movlw	249
  6662   01405C  24E1               	addwf	fsr1l,w,c
  6663   01405E  6E01               	movwf	btemp^0,c
  6664   014060  0EFF               	movlw	255
  6665   014062  20E2               	addwfc	fsr1h,w,c
  6666   014064  6E02               	movwf	(btemp+1)^0,c
  6667   014066  C001  FFE6         	movff	btemp,postinc1
  6668   01406A  C002  FFE6         	movff	btemp+1,postinc1
  6669                           
  6670                           ;stkvar	_a @ sp[(-9)+4]
  6671   01406E  0EFB               	movlw	-5
  6672   014070  CFE3 FFE6          	movff	plusw1,postinc1
  6673   014074  CFE3 FFE6          	movff	plusw1,postinc1
  6674   014078  EC99  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6675                           
  6676                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6677   01407C  0EFF               	movlw	-1
  6678   01407E  C001  FFE3         	movff	btemp,plusw1
  6679   014082                     
  6680                           ;can/can.c: 1942:     if (spiTransferError) {
  6681                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6682   014082  0EFF               	movlw	-1
  6683   014084  50E3               	movf	plusw1,w,c
  6684   014086  B4D8               	btfsc	status,2,c
  6685   014088  EF48  F0A0         	goto	u2081
  6686   01408C  EF4A  F0A0         	goto	u2080
  6687   014090                     u2081:
  6688   014090  EF4C  F0A0         	goto	l4454
  6689   014094                     u2080:
  6690   014094  EF56  F0A0         	goto	l482
  6691   014098                     l4454:
  6692                           
  6693                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6694                           ;stkvar	_flags @ sp[(-7)+-3]
  6695   014098  0EF6               	movlw	-10
  6696   01409A  CFE3 FFD9          	movff	plusw1,fsr2l
  6697   01409E  0EF7               	movlw	-9
  6698   0140A0  CFE3 FFDA          	movff	plusw1,fsr2h
  6699                           
  6700                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6701   0140A4  0EF9               	movlw	-7
  6702   0140A6  50E3               	movf	plusw1,w,c
  6703   0140A8  0B0F               	andlw	15
  6704   0140AA  6EDF               	movwf	indf2,c
  6705   0140AC                     l482:
  6706                           
  6707                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6708   0140AC  0EF6               	movlw	246
  6709   0140AE  26E1               	addwf	fsr1l,f,c
  6710   0140B0  0EFF               	movlw	255
  6711   0140B2  22E2               	addwfc	fsr1h,f,c
  6712   0140B4  0012               	return		;funcret
  6713   0140B6                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6714                           	callstack 0
  6715                           
  6716 ;; *************** function _XF_init *****************
  6717 ;; Defined at:
  6718 ;;		line 80 in file "xf/xf.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;		None
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;  i               2  [STACK] int 
  6723 ;; Return value:  Size  Location     Type
  6724 ;;                  1  [STACK] void 
  6725 ;; Registers used:
  6726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;Total ram usage:        0 bytes
  6737 ;; Hardware stack levels used: 1
  6738 ;; Hardware stack levels required when called: 8
  6739 ;; This function calls:
  6740 ;;		_Event_init
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text16
  6747   012BE4                     __ptext16:
  6748                           	callstack 0
  6749   012BE4                     _XF_init:
  6750                           	callstack 0
  6751                           
  6752                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6753   012BE4  52E6               	movf	postinc1,f,c
  6754   012BE6  52E6               	movf	postinc1,f,c
  6755   012BE8                     
  6756                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6757                           ;stkvar	_i @ sp[(-2)+0]
  6758   012BE8  0EFE               	movlw	-2
  6759   012BEA  6AE3               	clrf	plusw1,c
  6760   012BEC  0EFF               	movlw	-1
  6761   012BEE  6AE3               	clrf	plusw1,c
  6762   012BF0                     l5268:
  6763                           
  6764                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6765                           ;stkvar	_i @ sp[(-2)+0]
  6766   012BF0  0EFE               	movlw	-2
  6767   012BF2  CFE3 F00B          	movff	plusw1,btemp+10
  6768   012BF6  0EFF               	movlw	-1
  6769   012BF8  CFE3 F00C          	movff	plusw1,btemp+11
  6770   012BFC  0E06               	movlw	6
  6771   012BFE  020B               	mulwf	(btemp+10)^0,c
  6772   012C00  CFF3 F009          	movff	prodl,btemp+8
  6773   012C04  CFF4 F00A          	movff	prodh,btemp+9
  6774   012C08  020C               	mulwf	(btemp+11)^0,c
  6775   012C0A  50F3               	movf	prodl,w,c
  6776   012C0C  260A               	addwf	(btemp+9)^0,f,c
  6777   012C0E  0E28               	movlw	low (_theXF+96)
  6778   012C10  2409               	addwf	(btemp+8)^0,w,c
  6779   012C12  6E0B               	movwf	(btemp+10)^0,c
  6780   012C14  0E03               	movlw	high (_theXF+96)
  6781   012C16  200A               	addwfc	(btemp+9)^0,w,c
  6782   012C18  6E0C               	movwf	(btemp+11)^0,c
  6783   012C1A  C00B  FFE6         	movff	btemp+10,postinc1
  6784   012C1E  C00C  FFE6         	movff	btemp+11,postinc1
  6785   012C22  EC51  F0A3         	call	_Event_init	;wreg free
  6786   012C26                     
  6787                           ;xf/xf.c: 86:     }
  6788                           ;stkvar	_i @ sp[(-2)+0]
  6789   012C26  0EFE               	movlw	-2
  6790   012C28  50E3               	movf	plusw1,w,c
  6791   012C2A  0F01               	addlw	1
  6792   012C2C  6E01               	movwf	btemp^0,c
  6793   012C2E  0EFE               	movlw	-2
  6794   012C30  C001  FFE3         	movff	btemp,plusw1
  6795   012C34  6A01               	clrf	btemp^0,c
  6796   012C36  0EFF               	movlw	-1
  6797   012C38  50E3               	movf	plusw1,w,c
  6798   012C3A  2001               	addwfc	btemp^0,w,c
  6799   012C3C  6E01               	movwf	btemp^0,c
  6800   012C3E  0EFF               	movlw	-1
  6801   012C40  C001  FFE3         	movff	btemp,plusw1
  6802   012C44                     
  6803                           ;stkvar	_i @ sp[(-2)+0]
  6804   012C44  0EFF               	movlw	-1
  6805   012C46  BEE3               	btfsc	plusw1,7,c
  6806   012C48  EF33  F096         	goto	u2941
  6807   012C4C  0EFF               	movlw	-1
  6808   012C4E  50E3               	movf	plusw1,w,c
  6809   012C50  E10C               	bnz	u2940
  6810   012C52  0EFE               	movlw	-2
  6811   012C54  CFE3 F001          	movff	plusw1,btemp
  6812   012C58  0E1E               	movlw	30
  6813   012C5A  5E01               	subwf	btemp^0,f,c
  6814   012C5C  A0D8               	btfss	status,0,c
  6815   012C5E  EF33  F096         	goto	u2941
  6816   012C62  EF35  F096         	goto	u2940
  6817   012C66                     u2941:
  6818   012C66  EFF8  F095         	goto	l5268
  6819   012C6A                     u2940:
  6820   012C6A                     
  6821                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6822                           ;stkvar	_i @ sp[(-2)+0]
  6823   012C6A  0EFE               	movlw	-2
  6824   012C6C  6AE3               	clrf	plusw1,c
  6825   012C6E  0EFF               	movlw	-1
  6826   012C70  6AE3               	clrf	plusw1,c
  6827   012C72                     l5280:
  6828                           
  6829                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6830                           ;stkvar	_i @ sp[(-2)+0]
  6831   012C72  0EFE               	movlw	-2
  6832   012C74  CFE3 F00B          	movff	plusw1,btemp+10
  6833   012C78  0EFF               	movlw	-1
  6834   012C7A  CFE3 F00C          	movff	plusw1,btemp+11
  6835   012C7E  90D8               	bcf	status,0,c
  6836   012C80  360B               	rlcf	(btemp+10)^0,f,c
  6837   012C82  360C               	rlcf	(btemp+11)^0,f,c
  6838   012C84  90D8               	bcf	status,0,c
  6839   012C86  360B               	rlcf	(btemp+10)^0,f,c
  6840   012C88  360C               	rlcf	(btemp+11)^0,f,c
  6841   012C8A  90D8               	bcf	status,0,c
  6842   012C8C  360B               	rlcf	(btemp+10)^0,f,c
  6843   012C8E  360C               	rlcf	(btemp+11)^0,f,c
  6844   012C90  0EC8               	movlw	low _theXF
  6845   012C92  240B               	addwf	(btemp+10)^0,w,c
  6846   012C94  6ED9               	movwf	fsr2l,c
  6847   012C96  0E02               	movlw	high _theXF
  6848   012C98  200C               	addwfc	(btemp+11)^0,w,c
  6849   012C9A  6EDA               	movwf	fsr2h,c
  6850   012C9C  6ADE               	clrf	postinc2,c
  6851   012C9E  6ADD               	clrf	postdec2,c
  6852   012CA0                     
  6853                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6854                           ;stkvar	_i @ sp[(-2)+0]
  6855   012CA0  0EFE               	movlw	-2
  6856   012CA2  CFE3 F00B          	movff	plusw1,btemp+10
  6857   012CA6  0EFF               	movlw	-1
  6858   012CA8  CFE3 F00C          	movff	plusw1,btemp+11
  6859   012CAC  90D8               	bcf	status,0,c
  6860   012CAE  360B               	rlcf	(btemp+10)^0,f,c
  6861   012CB0  360C               	rlcf	(btemp+11)^0,f,c
  6862   012CB2  90D8               	bcf	status,0,c
  6863   012CB4  360B               	rlcf	(btemp+10)^0,f,c
  6864   012CB6  360C               	rlcf	(btemp+11)^0,f,c
  6865   012CB8  90D8               	bcf	status,0,c
  6866   012CBA  360B               	rlcf	(btemp+10)^0,f,c
  6867   012CBC  360C               	rlcf	(btemp+11)^0,f,c
  6868   012CBE  0ECA               	movlw	low (_theXF+2)
  6869   012CC0  240B               	addwf	(btemp+10)^0,w,c
  6870   012CC2  6E09               	movwf	(btemp+8)^0,c
  6871   012CC4  0E02               	movlw	high (_theXF+2)
  6872   012CC6  200C               	addwfc	(btemp+11)^0,w,c
  6873   012CC8  6E0A               	movwf	(btemp+9)^0,c
  6874   012CCA  C009  FFE6         	movff	btemp+8,postinc1
  6875   012CCE  C00A  FFE6         	movff	btemp+9,postinc1
  6876   012CD2  EC51  F0A3         	call	_Event_init	;wreg free
  6877   012CD6                     
  6878                           ;xf/xf.c: 92:     }
  6879                           ;stkvar	_i @ sp[(-2)+0]
  6880   012CD6  0EFE               	movlw	-2
  6881   012CD8  50E3               	movf	plusw1,w,c
  6882   012CDA  0F01               	addlw	1
  6883   012CDC  6E01               	movwf	btemp^0,c
  6884   012CDE  0EFE               	movlw	-2
  6885   012CE0  C001  FFE3         	movff	btemp,plusw1
  6886   012CE4  6A01               	clrf	btemp^0,c
  6887   012CE6  0EFF               	movlw	-1
  6888   012CE8  50E3               	movf	plusw1,w,c
  6889   012CEA  2001               	addwfc	btemp^0,w,c
  6890   012CEC  6E01               	movwf	btemp^0,c
  6891   012CEE  0EFF               	movlw	-1
  6892   012CF0  C001  FFE3         	movff	btemp,plusw1
  6893   012CF4                     
  6894                           ;stkvar	_i @ sp[(-2)+0]
  6895   012CF4  0EFF               	movlw	-1
  6896   012CF6  BEE3               	btfsc	plusw1,7,c
  6897   012CF8  EF8B  F096         	goto	u2951
  6898   012CFC  0EFF               	movlw	-1
  6899   012CFE  50E3               	movf	plusw1,w,c
  6900   012D00  E10C               	bnz	u2950
  6901   012D02  0EFE               	movlw	-2
  6902   012D04  CFE3 F001          	movff	plusw1,btemp
  6903   012D08  0E0C               	movlw	12
  6904   012D0A  5E01               	subwf	btemp^0,f,c
  6905   012D0C  A0D8               	btfss	status,0,c
  6906   012D0E  EF8B  F096         	goto	u2951
  6907   012D12  EF8D  F096         	goto	u2950
  6908   012D16                     u2951:
  6909   012D16  EF39  F096         	goto	l5280
  6910   012D1A                     u2950:
  6911   012D1A                     
  6912                           ;xf/xf.c: 93:     theXF.in = 0;
  6913   012D1A  0E00               	movlw	0
  6914   012D1C  CFE8 F3DC          	movff	wreg,_theXF+276
  6915                           
  6916                           ;xf/xf.c: 94:     theXF.out = 0;
  6917   012D20  0E00               	movlw	0
  6918   012D22  CFE8 F3DD          	movff	wreg,_theXF+277
  6919                           
  6920                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  6921   012D26  0E00               	movlw	0
  6922   012D28  CFE8 F3DE          	movff	wreg,_theXF+278
  6923                           
  6924                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  6925   012D2C  0E00               	movlw	0
  6926   012D2E  CFE8 F3DF          	movff	wreg,_theXF+279
  6927   012D32                     
  6928                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  6929   012D32  52E5               	movf	postdec1,f,c
  6930   012D34  52E5               	movf	postdec1,f,c
  6931   012D36  0012               	return		;funcret
  6932   012D38                     __end_of_XF_init:
  6933                           	callstack 0
  6934                           
  6935 ;; *************** function _Event_init *****************
  6936 ;; Defined at:
  6937 ;;		line 4 in file "xf/event.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  me              2  [STACK] PTR struct Event_
  6940 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1  [STACK] void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used: 1
  6958 ;; Hardware stack levels required when called: 7
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_XF_init
  6963 ;;		_XF_unscheduleTimer
  6964 ;;		_XF_post
  6965 ;; This function uses a reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text17
  6969   0146A2                     __ptext17:
  6970                           	callstack 0
  6971   0146A2                     _Event_init:
  6972                           	callstack 10
  6973   0146A2                     
  6974                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  6975                           ;stkvar	_me @ sp[(0)+-2]
  6976   0146A2  0EFE               	movlw	-2
  6977   0146A4  CFE3 FFD9          	movff	plusw1,fsr2l
  6978   0146A8  0EFF               	movlw	-1
  6979   0146AA  CFE3 FFDA          	movff	plusw1,fsr2h
  6980   0146AE  6ADF               	clrf	indf2,c
  6981   0146B0                     
  6982                           ;xf/event.c: 7:     me->delay = 0;
  6983                           ;stkvar	_me @ sp[(0)+-2]
  6984   0146B0  0EFE               	movlw	-2
  6985   0146B2  CFE3 F00B          	movff	plusw1,btemp+10
  6986   0146B6  0EFF               	movlw	-1
  6987   0146B8  CFE3 F00C          	movff	plusw1,btemp+11
  6988   0146BC  0E04               	movlw	4
  6989   0146BE  240B               	addwf	(btemp+10)^0,w,c
  6990   0146C0  6ED9               	movwf	fsr2l,c
  6991   0146C2  0E00               	movlw	0
  6992   0146C4  200C               	addwfc	(btemp+11)^0,w,c
  6993   0146C6  6EDA               	movwf	fsr2h,c
  6994   0146C8  6ADE               	clrf	postinc2,c
  6995   0146CA  6ADD               	clrf	postdec2,c
  6996   0146CC                     
  6997                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  6998                           ;stkvar	_me @ sp[(0)+-2]
  6999   0146CC  0EFE               	movlw	-2
  7000   0146CE  CFE3 F00B          	movff	plusw1,btemp+10
  7001   0146D2  0EFF               	movlw	-1
  7002   0146D4  CFE3 F00C          	movff	plusw1,btemp+11
  7003   0146D8  0E01               	movlw	1
  7004   0146DA  240B               	addwf	(btemp+10)^0,w,c
  7005   0146DC  6ED9               	movwf	fsr2l,c
  7006   0146DE  0E00               	movlw	0
  7007   0146E0  200C               	addwfc	(btemp+11)^0,w,c
  7008   0146E2  6EDA               	movwf	fsr2h,c
  7009   0146E4  6ADE               	clrf	postinc2,c
  7010   0146E6  6ADE               	clrf	postinc2,c
  7011   0146E8  6ADD               	clrf	postdec2,c
  7012   0146EA                     
  7013                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  7014   0146EA  52E5               	movf	postdec1,f,c
  7015   0146EC  52E5               	movf	postdec1,f,c
  7016   0146EE  0012               	return		;funcret
  7017   0146F0                     __end_of_Event_init:
  7018                           	callstack 0
  7019                           
  7020 ;; *************** function _XF_executeOnce *****************
  7021 ;; Defined at:
  7022 ;;		line 290 in file "xf/xf.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  ev              6  [STACK] struct Event_
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1  [STACK] void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;Total ram usage:        0 bytes
  7041 ;; Hardware stack levels used: 1
  7042 ;; Hardware stack levels required when called: 14
  7043 ;; This function calls:
  7044 ;;		_XF_popEvent
  7045 ;;		_lightControl_Process
  7046 ;;		_motorControl_Process
  7047 ;; This function is called by:
  7048 ;;		_main
  7049 ;; This function uses a reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text18
  7053   014276                     __ptext18:
  7054                           	callstack 0
  7055   014276                     _XF_executeOnce:
  7056                           	callstack 0
  7057                           
  7058                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7059   014276  0E06               	movlw	6
  7060   014278  26E1               	addwf	fsr1l,f,c
  7061   01427A  0E00               	movlw	0
  7062   01427C  22E2               	addwfc	fsr1h,f,c
  7063   01427E                     
  7064                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7065   01427E  0E00               	movlw	0
  7066   014280  6EE6               	movwf	postinc1,c
  7067   014282  EC6E  F09C         	call	_XF_popEvent	;wreg free
  7068                           
  7069                           ;stkvar	_ev @ sp[(-12)+0]
  7070   014286  0EFA               	movlw	250
  7071   014288  24E1               	addwf	fsr1l,w,c
  7072   01428A  6ED9               	movwf	fsr2l,c
  7073   01428C  0EFF               	movlw	255
  7074   01428E  20E2               	addwfc	fsr1h,w,c
  7075   014290  6EDA               	movwf	fsr2h,c
  7076   014292  0E06               	movlw	6
  7077   014294  6E01               	movwf	btemp^0,c
  7078   014296                     uf296999:
  7079   014296  50DD               	movf	postdec2,w,c
  7080   014298  52E5               	movf	postdec1,f,c
  7081   01429A  50E7               	movf	indf1,w,c
  7082   01429C  6EDF               	movwf	indf2,c
  7083   01429E  2E01               	decfsz	btemp^0,f,c
  7084   0142A0  D7FA               	bra	uf296999
  7085   0142A2                     
  7086                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7087                           ;stkvar	_ev @ sp[(-6)+0]
  7088   0142A2  0EFB               	movlw	251
  7089   0142A4  24E1               	addwf	fsr1l,w,c
  7090   0142A6  6ED9               	movwf	fsr2l,c
  7091   0142A8  0EFF               	movlw	255
  7092   0142AA  20E2               	addwfc	fsr1h,w,c
  7093   0142AC  6EDA               	movwf	fsr2h,c
  7094   0142AE  50DE               	movf	postinc2,w,c
  7095   0142B0  10DE               	iorwf	postinc2,w,c
  7096   0142B2  10DE               	iorwf	postinc2,w,c
  7097   0142B4  B4D8               	btfsc	status,2,c
  7098   0142B6  EF5F  F0A1         	goto	u2971
  7099   0142BA  EF61  F0A1         	goto	u2970
  7100   0142BE                     u2971:
  7101   0142BE  EF7E  F0A1         	goto	l1261
  7102   0142C2                     u2970:
  7103   0142C2                     
  7104                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7105                           ;stkvar	_ev @ sp[(-6)+0]
  7106   0142C2  0EFA               	movlw	250
  7107   0142C4  24E1               	addwf	fsr1l,w,c
  7108   0142C6  6E01               	movwf	btemp^0,c
  7109   0142C8  0EFF               	movlw	255
  7110   0142CA  20E2               	addwfc	fsr1h,w,c
  7111   0142CC  6E02               	movwf	(btemp+1)^0,c
  7112   0142CE  C001  FFE6         	movff	btemp,postinc1
  7113   0142D2  C002  FFE6         	movff	btemp+1,postinc1
  7114                           
  7115                           ;stkvar	_ev @ sp[(-8)+0]
  7116   0142D6  0EF9               	movlw	249
  7117   0142D8  24E1               	addwf	fsr1l,w,c
  7118   0142DA  6ED9               	movwf	fsr2l,c
  7119   0142DC  0EFF               	movlw	255
  7120   0142DE  20E2               	addwfc	fsr1h,w,c
  7121   0142E0  6EDA               	movwf	fsr2h,c
  7122   0142E2  D802               	call	u2988
  7123   0142E4  EF7E  F0A1         	goto	u2989
  7124   0142E8                     u2988:
  7125   0142E8  0005               	push	
  7126   0142EA  6EFA               	movwf	pclath,c
  7127   0142EC  50DE               	movf	postinc2,w,c
  7128   0142EE  6EFD               	movwf	tosl,c
  7129   0142F0  50DE               	movf	postinc2,w,c
  7130   0142F2  6EFE               	movwf	tosh,c
  7131   0142F4  50DE               	movf	postinc2,w,c
  7132   0142F6  6EFF               	movwf	tosu,c
  7133   0142F8  50FA               	movf	pclath,w,c
  7134   0142FA  0012               	return		;indir
  7135   0142FC                     u2989:
  7136   0142FC                     l1261:
  7137                           
  7138                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7139   0142FC  0EFA               	movlw	250
  7140   0142FE  26E1               	addwf	fsr1l,f,c
  7141   014300  0EFF               	movlw	255
  7142   014302  22E2               	addwfc	fsr1h,f,c
  7143   014304  0012               	return		;funcret
  7144   014306                     __end_of_XF_executeOnce:
  7145                           	callstack 0
  7146                           
  7147 ;; *************** function _lightControl_Process *****************
  7148 ;; Defined at:
  7149 ;;		line 150 in file "carFunctions.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  ev              2  [STACK] PTR struct Event_
  7152 ;;		 -> ev(6), 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;		None
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1  [STACK] _Bool 
  7157 ;; Registers used:
  7158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:        0 bytes
  7169 ;; Hardware stack levels used: 1
  7170 ;; Hardware stack levels required when called: 13
  7171 ;; This function calls:
  7172 ;;		_lightContol_BackLight
  7173 ;;		_lightContol_FrontLight
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;;		_updateCarState
  7177 ;;		_XF_executeOnce
  7178 ;; This function uses a reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text19
  7182   012758                     __ptext19:
  7183                           	callstack 0
  7184   012758                     _lightControl_Process:
  7185                           	callstack 16
  7186   012758                     
  7187                           ;carFunctions.c: 150: _Bool lightControl_Process(Event* ev);carFunctions.c: 151: {;carFu
      +                          nctions.c: 159:     static LightState state = INIT;;carFunctions.c: 160:     static Ligh
      +                          tState oldState = INIT;;carFunctions.c: 161:     switch(state)
  7188   012758  EF0B  F094         	goto	l5152
  7189   01275C                     l5130:
  7190                           
  7191                           ;carFunctions.c: 164:             if(ev->id == E_INIT){
  7192                           ;stkvar	_ev @ sp[(0)+-2]
  7193   01275C  0EFE               	movlw	-2
  7194   01275E  CFE3 FFD9          	movff	plusw1,fsr2l
  7195   012762  0EFF               	movlw	-1
  7196   012764  CFE3 FFDA          	movff	plusw1,fsr2h
  7197   012768  50DF               	movf	indf2,w,c
  7198   01276A  06E8               	decf	wreg,f,c
  7199   01276C  A4D8               	btfss	status,2,c
  7200   01276E  EFBB  F093         	goto	u2861
  7201   012772  EFBD  F093         	goto	u2860
  7202   012776                     u2861:
  7203   012776  EF28  F094         	goto	l5154
  7204   01277A                     u2860:
  7205   01277A                     l5132:
  7206                           
  7207                           ;carFunctions.c: 165:                 state = OFF;
  7208   01277A  0E01               	movlw	1
  7209   01277C  6E3A               	movwf	lightControl_Process@state^0,c
  7210   01277E  EF28  F094         	goto	l5154
  7211   012782                     l5134:
  7212                           
  7213                           ;carFunctions.c: 169:             if(ev->id == E_CONTACT_ON)
  7214                           ;stkvar	_ev @ sp[(0)+-2]
  7215   012782  0EFE               	movlw	-2
  7216   012784  CFE3 FFD9          	movff	plusw1,fsr2l
  7217   012788  0EFF               	movlw	-1
  7218   01278A  CFE3 FFDA          	movff	plusw1,fsr2h
  7219   01278E  50DF               	movf	indf2,w,c
  7220   012790  0A03               	xorlw	3
  7221   012792  A4D8               	btfss	status,2,c
  7222   012794  EFCE  F093         	goto	u2871
  7223   012798  EFD0  F093         	goto	u2870
  7224   01279C                     u2871:
  7225   01279C  EF28  F094         	goto	l5154
  7226   0127A0                     u2870:
  7227   0127A0                     l5136:
  7228                           
  7229                           ;carFunctions.c: 170:             {;carFunctions.c: 171:                 state = CRUISE;
  7230   0127A0  0E02               	movlw	2
  7231   0127A2  6E3A               	movwf	lightControl_Process@state^0,c
  7232   0127A4  EF28  F094         	goto	l5154
  7233   0127A8                     l5138:
  7234                           
  7235                           ;carFunctions.c: 176:             if(ev->id == E_CONTACT_OFF)
  7236                           ;stkvar	_ev @ sp[(0)+-2]
  7237   0127A8  0EFE               	movlw	-2
  7238   0127AA  CFE3 FFD9          	movff	plusw1,fsr2l
  7239   0127AE  0EFF               	movlw	-1
  7240   0127B0  CFE3 FFDA          	movff	plusw1,fsr2h
  7241   0127B4  50DF               	movf	indf2,w,c
  7242   0127B6  0A02               	xorlw	2
  7243   0127B8  A4D8               	btfss	status,2,c
  7244   0127BA  EFE1  F093         	goto	u2881
  7245   0127BE  EFE3  F093         	goto	u2880
  7246   0127C2                     u2881:
  7247   0127C2  EFE5  F093         	goto	l5142
  7248   0127C6                     u2880:
  7249   0127C6  EFBD  F093         	goto	l5132
  7250   0127CA                     l5142:
  7251                           
  7252                           ;stkvar	_ev @ sp[(0)+-2]
  7253   0127CA  0EFE               	movlw	-2
  7254   0127CC  CFE3 FFD9          	movff	plusw1,fsr2l
  7255   0127D0  0EFF               	movlw	-1
  7256   0127D2  CFE3 FFDA          	movff	plusw1,fsr2h
  7257   0127D6  50DF               	movf	indf2,w,c
  7258   0127D8  0A04               	xorlw	4
  7259   0127DA  A4D8               	btfss	status,2,c
  7260   0127DC  EFF2  F093         	goto	u2891
  7261   0127E0  EFF4  F093         	goto	u2890
  7262   0127E4                     u2891:
  7263   0127E4  EF28  F094         	goto	l5154
  7264   0127E8                     u2890:
  7265   0127E8                     
  7266                           ;carFunctions.c: 182:             {;carFunctions.c: 183:                 state = BRAKE;
  7267   0127E8  0E03               	movlw	3
  7268   0127EA  6E3A               	movwf	lightControl_Process@state^0,c
  7269   0127EC  EF28  F094         	goto	l5154
  7270   0127F0                     l5146:
  7271                           
  7272                           ;carFunctions.c: 187:             if(ev->id == E_CONTACT_OFF)
  7273                           ;stkvar	_ev @ sp[(0)+-2]
  7274   0127F0  0EFE               	movlw	-2
  7275   0127F2  CFE3 FFD9          	movff	plusw1,fsr2l
  7276   0127F6  0EFF               	movlw	-1
  7277   0127F8  CFE3 FFDA          	movff	plusw1,fsr2h
  7278   0127FC  50DF               	movf	indf2,w,c
  7279   0127FE  0A02               	xorlw	2
  7280   012800  A4D8               	btfss	status,2,c
  7281   012802  EF05  F094         	goto	u2901
  7282   012806  EF07  F094         	goto	u2900
  7283   01280A                     u2901:
  7284   01280A  EFD0  F093         	goto	l5136
  7285   01280E                     u2900:
  7286   01280E                     
  7287                           ;carFunctions.c: 188:             {;carFunctions.c: 189:                 state = OFF;
  7288   01280E  0E01               	movlw	1
  7289   012810  6E3A               	movwf	lightControl_Process@state^0,c
  7290   012812  EFD0  F093         	goto	l5136
  7291   012816                     l5152:
  7292   012816  503A               	movf	lightControl_Process@state^0,w,c
  7293   012818  6E0B               	movwf	(btemp+10)^0,c
  7294   01281A  6A0C               	clrf	(btemp+11)^0,c
  7295                           
  7296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7297                           ; Switch size 1, requested type "simple"
  7298                           ; Number of cases is 1, Range of values is 0 to 0
  7299                           ; switch strategies available:
  7300                           ; Name         Instructions Cycles
  7301                           ; simple_byte            4     3 (average)
  7302                           ;	Chosen strategy is simple_byte
  7303   01281C  500C               	movf	(btemp+11)^0,w,c
  7304   01281E  0A00               	xorlw	0	; case 0
  7305   012820  B4D8               	btfsc	status,2,c
  7306   012822  EF15  F094         	goto	l5580
  7307   012826  EF28  F094         	goto	l5154
  7308   01282A                     l5580:
  7309                           
  7310                           ; Switch size 1, requested type "simple"
  7311                           ; Number of cases is 4, Range of values is 0 to 3
  7312                           ; switch strategies available:
  7313                           ; Name         Instructions Cycles
  7314                           ; simple_byte           13     7 (average)
  7315                           ;	Chosen strategy is simple_byte
  7316   01282A  500B               	movf	(btemp+10)^0,w,c
  7317   01282C  0A00               	xorlw	0	; case 0
  7318   01282E  B4D8               	btfsc	status,2,c
  7319   012830  EFAE  F093         	goto	l5130
  7320   012834  0A01               	xorlw	1	; case 1
  7321   012836  B4D8               	btfsc	status,2,c
  7322   012838  EFC1  F093         	goto	l5134
  7323   01283C  0A03               	xorlw	3	; case 2
  7324   01283E  B4D8               	btfsc	status,2,c
  7325   012840  EFD4  F093         	goto	l5138
  7326   012844  0A01               	xorlw	1	; case 3
  7327   012846  B4D8               	btfsc	status,2,c
  7328   012848  EFF8  F093         	goto	l5146
  7329   01284C  EF28  F094         	goto	l5154
  7330   012850                     l5154:
  7331                           
  7332                           ;carFunctions.c: 199:    if(oldState == state)
  7333   012850  503A               	movf	lightControl_Process@state^0,w,c
  7334   012852  1839               	xorwf	lightControl_Process@oldState^0,w,c
  7335   012854  A4D8               	btfss	status,2,c
  7336   012856  EF2F  F094         	goto	u2911
  7337   01285A  EF31  F094         	goto	u2910
  7338   01285E                     u2911:
  7339   01285E  EF33  F094         	goto	l1493
  7340   012862                     u2910:
  7341   012862  EF6E  F094         	goto	l1494
  7342   012866                     l1493:
  7343                           
  7344                           ;carFunctions.c: 203:    oldState = state;
  7345   012866  C03A  F039         	movff	lightControl_Process@state,lightControl_Process@oldState
  7346                           
  7347                           ;carFunctions.c: 204:    switch(state)
  7348   01286A  EF51  F094         	goto	l5166
  7349   01286E                     l5158:
  7350                           
  7351                           ;carFunctions.c: 209:             lightContol_FrontLight(0);
  7352   01286E  0E00               	movlw	0
  7353   012870  6EE6               	movwf	postinc1,c
  7354   012872  EC06  F09F         	call	_lightContol_FrontLight	;wreg free
  7355                           
  7356                           ;carFunctions.c: 210:             lightContol_BackLight(0);
  7357   012876  0E00               	movlw	0
  7358   012878  6EE6               	movwf	postinc1,c
  7359   01287A  ECAC  F09E         	call	_lightContol_BackLight	;wreg free
  7360                           
  7361                           ;carFunctions.c: 211:             break;
  7362   01287E  EF6E  F094         	goto	l1494
  7363   012882                     l5160:
  7364                           
  7365                           ;carFunctions.c: 213:             lightContol_FrontLight(50);
  7366   012882  0E32               	movlw	50
  7367   012884  6EE6               	movwf	postinc1,c
  7368   012886  EC06  F09F         	call	_lightContol_FrontLight	;wreg free
  7369                           
  7370                           ;carFunctions.c: 214:             lightContol_BackLight(50);
  7371   01288A  0E32               	movlw	50
  7372   01288C  6EE6               	movwf	postinc1,c
  7373   01288E  ECAC  F09E         	call	_lightContol_BackLight	;wreg free
  7374                           
  7375                           ;carFunctions.c: 215:             break;
  7376   012892  EF6E  F094         	goto	l1494
  7377   012896                     l5162:
  7378                           
  7379                           ;carFunctions.c: 217:             lightContol_BackLight(100);
  7380   012896  0E64               	movlw	100
  7381   012898  6EE6               	movwf	postinc1,c
  7382   01289A  ECAC  F09E         	call	_lightContol_BackLight	;wreg free
  7383                           
  7384                           ;carFunctions.c: 218:             break;
  7385   01289E  EF6E  F094         	goto	l1494
  7386   0128A2                     l5166:
  7387   0128A2  503A               	movf	lightControl_Process@state^0,w,c
  7388   0128A4  6E0B               	movwf	(btemp+10)^0,c
  7389   0128A6  6A0C               	clrf	(btemp+11)^0,c
  7390                           
  7391                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7392                           ; Switch size 1, requested type "simple"
  7393                           ; Number of cases is 1, Range of values is 0 to 0
  7394                           ; switch strategies available:
  7395                           ; Name         Instructions Cycles
  7396                           ; simple_byte            4     3 (average)
  7397                           ;	Chosen strategy is simple_byte
  7398   0128A8  500C               	movf	(btemp+11)^0,w,c
  7399   0128AA  0A00               	xorlw	0	; case 0
  7400   0128AC  B4D8               	btfsc	status,2,c
  7401   0128AE  EF5B  F094         	goto	l5582
  7402   0128B2  EF6E  F094         	goto	l1494
  7403   0128B6                     l5582:
  7404                           
  7405                           ; Switch size 1, requested type "simple"
  7406                           ; Number of cases is 4, Range of values is 0 to 3
  7407                           ; switch strategies available:
  7408                           ; Name         Instructions Cycles
  7409                           ; simple_byte           13     7 (average)
  7410                           ;	Chosen strategy is simple_byte
  7411   0128B6  500B               	movf	(btemp+10)^0,w,c
  7412   0128B8  0A00               	xorlw	0	; case 0
  7413   0128BA  B4D8               	btfsc	status,2,c
  7414   0128BC  EF6E  F094         	goto	l1494
  7415   0128C0  0A01               	xorlw	1	; case 1
  7416   0128C2  B4D8               	btfsc	status,2,c
  7417   0128C4  EF37  F094         	goto	l5158
  7418   0128C8  0A03               	xorlw	3	; case 2
  7419   0128CA  B4D8               	btfsc	status,2,c
  7420   0128CC  EF41  F094         	goto	l5160
  7421   0128D0  0A01               	xorlw	1	; case 3
  7422   0128D2  B4D8               	btfsc	status,2,c
  7423   0128D4  EF4B  F094         	goto	l5162
  7424   0128D8  EF6E  F094         	goto	l1494
  7425   0128DC                     l1494:
  7426                           
  7427                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7428   0128DC  52E5               	movf	postdec1,f,c
  7429   0128DE  52E5               	movf	postdec1,f,c
  7430   0128E0  0012               	return		;funcret
  7431   0128E2                     __end_of_lightControl_Process:
  7432                           	callstack 0
  7433                           
  7434 ;; *************** function _motorControl_Process *****************
  7435 ;; Defined at:
  7436 ;;		line 38 in file "carFunctions.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;  ev              2  [STACK] PTR struct Event_
  7439 ;;		 -> ev(6), 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1  [STACK] _Bool 
  7444 ;; Registers used:
  7445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7455 ;;Total ram usage:        0 bytes
  7456 ;; Hardware stack levels used: 1
  7457 ;; Hardware stack levels required when called: 13
  7458 ;; This function calls:
  7459 ;;		_lightContol_BackLight
  7460 ;;		_lightContol_FrontLight
  7461 ;;		_motorControl
  7462 ;; This function is called by:
  7463 ;;		_updateCarState
  7464 ;;		_XF_executeOnce
  7465 ;; This function uses a reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text20
  7469   012420                     __ptext20:
  7470                           	callstack 0
  7471   012420                     _motorControl_Process:
  7472                           	callstack 16
  7473   012420                     
  7474                           ;carFunctions.c: 48:     static MotorState state = INIT;;carFunctions.c: 49:     static 
      +                          MotorState oldState = INIT;;carFunctions.c: 53:     switch(state)
  7475   012420  EF80  F092         	goto	l5104
  7476   012424                     l5078:
  7477                           
  7478                           ;carFunctions.c: 56:             if(ev->id == E_INIT){
  7479                           ;stkvar	_ev @ sp[(0)+-2]
  7480   012424  0EFE               	movlw	-2
  7481   012426  CFE3 FFD9          	movff	plusw1,fsr2l
  7482   01242A  0EFF               	movlw	-1
  7483   01242C  CFE3 FFDA          	movff	plusw1,fsr2h
  7484   012430  50DF               	movf	indf2,w,c
  7485   012432  06E8               	decf	wreg,f,c
  7486   012434  A4D8               	btfss	status,2,c
  7487   012436  EF1F  F092         	goto	u2791
  7488   01243A  EF21  F092         	goto	u2790
  7489   01243E                     u2791:
  7490   01243E  EF9D  F092         	goto	l5106
  7491   012442                     u2790:
  7492   012442                     l5080:
  7493                           
  7494                           ;carFunctions.c: 57:                 state = OFF;
  7495   012442  0E01               	movlw	1
  7496   012444  6E3E               	movwf	motorControl_Process@state^0,c
  7497   012446  EF9D  F092         	goto	l5106
  7498   01244A                     l5082:
  7499                           
  7500                           ;carFunctions.c: 61:             if(ev->id == E_CONTACT_ON)
  7501                           ;stkvar	_ev @ sp[(0)+-2]
  7502   01244A  0EFE               	movlw	-2
  7503   01244C  CFE3 FFD9          	movff	plusw1,fsr2l
  7504   012450  0EFF               	movlw	-1
  7505   012452  CFE3 FFDA          	movff	plusw1,fsr2h
  7506   012456  50DF               	movf	indf2,w,c
  7507   012458  0A03               	xorlw	3
  7508   01245A  A4D8               	btfss	status,2,c
  7509   01245C  EF32  F092         	goto	u2801
  7510   012460  EF34  F092         	goto	u2800
  7511   012464                     u2801:
  7512   012464  EF9D  F092         	goto	l5106
  7513   012468                     u2800:
  7514   012468                     
  7515                           ;carFunctions.c: 62:             {;carFunctions.c: 63:                 state = STANDBY;
  7516   012468  0E04               	movlw	4
  7517   01246A  6E3E               	movwf	motorControl_Process@state^0,c
  7518   01246C  EF9D  F092         	goto	l5106
  7519   012470                     l5086:
  7520                           
  7521                           ;carFunctions.c: 68:             if(ev->id == E_CONTACT_OFF)
  7522                           ;stkvar	_ev @ sp[(0)+-2]
  7523   012470  0EFE               	movlw	-2
  7524   012472  CFE3 FFD9          	movff	plusw1,fsr2l
  7525   012476  0EFF               	movlw	-1
  7526   012478  CFE3 FFDA          	movff	plusw1,fsr2h
  7527   01247C  50DF               	movf	indf2,w,c
  7528   01247E  0A02               	xorlw	2
  7529   012480  A4D8               	btfss	status,2,c
  7530   012482  EF45  F092         	goto	u2811
  7531   012486  EF47  F092         	goto	u2810
  7532   01248A                     u2811:
  7533   01248A  EF4B  F092         	goto	l5090
  7534   01248E                     u2810:
  7535   01248E                     
  7536                           ;carFunctions.c: 69:             {;carFunctions.c: 70:                 state = OFF;
  7537   01248E  0E01               	movlw	1
  7538   012490  6E3E               	movwf	motorControl_Process@state^0,c
  7539                           
  7540                           ;carFunctions.c: 71:             }else if(ev->id == E_ACCELERATION_OFF)
  7541   012492  EF5C  F092         	goto	l5094
  7542   012496                     l5090:
  7543                           
  7544                           ;stkvar	_ev @ sp[(0)+-2]
  7545   012496  0EFE               	movlw	-2
  7546   012498  CFE3 FFD9          	movff	plusw1,fsr2l
  7547   01249C  0EFF               	movlw	-1
  7548   01249E  CFE3 FFDA          	movff	plusw1,fsr2h
  7549   0124A2  50DF               	movf	indf2,w,c
  7550   0124A4  0A09               	xorlw	9
  7551   0124A6  A4D8               	btfss	status,2,c
  7552   0124A8  EF58  F092         	goto	u2821
  7553   0124AC  EF5A  F092         	goto	u2820
  7554   0124B0                     u2821:
  7555   0124B0  EF5C  F092         	goto	l5094
  7556   0124B4                     u2820:
  7557   0124B4                     
  7558                           ;carFunctions.c: 72:             {;carFunctions.c: 73:                 state = STANDBY;
  7559   0124B4  0E04               	movlw	4
  7560   0124B6  6E3E               	movwf	motorControl_Process@state^0,c
  7561   0124B8                     l5094:
  7562                           
  7563                           ;carFunctions.c: 76:             if(ev->id == E_CONTACT_OFF)
  7564                           ;stkvar	_ev @ sp[(0)+-2]
  7565   0124B8  0EFE               	movlw	-2
  7566   0124BA  CFE3 FFD9          	movff	plusw1,fsr2l
  7567   0124BE  0EFF               	movlw	-1
  7568   0124C0  CFE3 FFDA          	movff	plusw1,fsr2h
  7569   0124C4  50DF               	movf	indf2,w,c
  7570   0124C6  0A02               	xorlw	2
  7571   0124C8  A4D8               	btfss	status,2,c
  7572   0124CA  EF69  F092         	goto	u2831
  7573   0124CE  EF6B  F092         	goto	u2830
  7574   0124D2                     u2831:
  7575   0124D2  EF6D  F092         	goto	l5098
  7576   0124D6                     u2830:
  7577   0124D6  EF21  F092         	goto	l5080
  7578   0124DA                     l5098:
  7579                           
  7580                           ;stkvar	_ev @ sp[(0)+-2]
  7581   0124DA  0EFE               	movlw	-2
  7582   0124DC  CFE3 FFD9          	movff	plusw1,fsr2l
  7583   0124E0  0EFF               	movlw	-1
  7584   0124E2  CFE3 FFDA          	movff	plusw1,fsr2h
  7585   0124E6  50DF               	movf	indf2,w,c
  7586   0124E8  0A08               	xorlw	8
  7587   0124EA  A4D8               	btfss	status,2,c
  7588   0124EC  EF7A  F092         	goto	u2841
  7589   0124F0  EF7C  F092         	goto	u2840
  7590   0124F4                     u2841:
  7591   0124F4  EF9D  F092         	goto	l5106
  7592   0124F8                     u2840:
  7593   0124F8                     
  7594                           ;carFunctions.c: 80:             {;carFunctions.c: 81:                 state = CRUISE;
  7595   0124F8  0E02               	movlw	2
  7596   0124FA  6E3E               	movwf	motorControl_Process@state^0,c
  7597   0124FC  EF9D  F092         	goto	l5106
  7598   012500                     l5104:
  7599   012500  503E               	movf	motorControl_Process@state^0,w,c
  7600   012502  6E0B               	movwf	(btemp+10)^0,c
  7601   012504  6A0C               	clrf	(btemp+11)^0,c
  7602                           
  7603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7604                           ; Switch size 1, requested type "simple"
  7605                           ; Number of cases is 1, Range of values is 0 to 0
  7606                           ; switch strategies available:
  7607                           ; Name         Instructions Cycles
  7608                           ; simple_byte            4     3 (average)
  7609                           ;	Chosen strategy is simple_byte
  7610   012506  500C               	movf	(btemp+11)^0,w,c
  7611   012508  0A00               	xorlw	0	; case 0
  7612   01250A  B4D8               	btfsc	status,2,c
  7613   01250C  EF8A  F092         	goto	l5584
  7614   012510  EF9D  F092         	goto	l5106
  7615   012514                     l5584:
  7616                           
  7617                           ; Switch size 1, requested type "simple"
  7618                           ; Number of cases is 4, Range of values is 0 to 4
  7619                           ; switch strategies available:
  7620                           ; Name         Instructions Cycles
  7621                           ; simple_byte           13     7 (average)
  7622                           ;	Chosen strategy is simple_byte
  7623   012514  500B               	movf	(btemp+10)^0,w,c
  7624   012516  0A00               	xorlw	0	; case 0
  7625   012518  B4D8               	btfsc	status,2,c
  7626   01251A  EF12  F092         	goto	l5078
  7627   01251E  0A01               	xorlw	1	; case 1
  7628   012520  B4D8               	btfsc	status,2,c
  7629   012522  EF25  F092         	goto	l5082
  7630   012526  0A03               	xorlw	3	; case 2
  7631   012528  B4D8               	btfsc	status,2,c
  7632   01252A  EF38  F092         	goto	l5086
  7633   01252E  0A06               	xorlw	6	; case 4
  7634   012530  B4D8               	btfsc	status,2,c
  7635   012532  EF5C  F092         	goto	l5094
  7636   012536  EF9D  F092         	goto	l5106
  7637   01253A                     l5106:
  7638                           
  7639                           ;carFunctions.c: 88:     if(oldState == state)
  7640   01253A  503E               	movf	motorControl_Process@state^0,w,c
  7641   01253C  183D               	xorwf	motorControl_Process@oldState^0,w,c
  7642   01253E  A4D8               	btfss	status,2,c
  7643   012540  EFA4  F092         	goto	u2851
  7644   012544  EFA6  F092         	goto	u2850
  7645   012548                     u2851:
  7646   012548  EFA8  F092         	goto	l1447
  7647   01254C                     u2850:
  7648   01254C  EFE3  F092         	goto	l1448
  7649   012550                     l1447:
  7650                           
  7651                           ;carFunctions.c: 92:    oldState = state;
  7652   012550  C03E  F03D         	movff	motorControl_Process@state,motorControl_Process@oldState
  7653                           
  7654                           ;carFunctions.c: 95:    switch(state)
  7655   012554  EFC2  F092         	goto	l5118
  7656   012558                     l5110:
  7657                           
  7658                           ;carFunctions.c: 100:             motorControl(0);
  7659   012558  0E00               	movlw	0
  7660   01255A  6EE6               	movwf	postinc1,c
  7661   01255C  EC52  F09E         	call	_motorControl	;wreg free
  7662                           
  7663                           ;carFunctions.c: 101:             break;
  7664   012560  EFE3  F092         	goto	l1448
  7665   012564                     l5112:
  7666                           
  7667                           ;carFunctions.c: 103:             lightContol_FrontLight(50);
  7668   012564  0E32               	movlw	50
  7669   012566  6EE6               	movwf	postinc1,c
  7670   012568  EC06  F09F         	call	_lightContol_FrontLight	;wreg free
  7671                           
  7672                           ;carFunctions.c: 104:             lightContol_BackLight(50);
  7673   01256C  0E32               	movlw	50
  7674   01256E  6EE6               	movwf	postinc1,c
  7675   012570  ECAC  F09E         	call	_lightContol_BackLight	;wreg free
  7676                           
  7677                           ;carFunctions.c: 105:             break;
  7678   012574  EFE3  F092         	goto	l1448
  7679   012578                     l5114:
  7680                           
  7681                           ;carFunctions.c: 107:            motorControl(10);
  7682   012578  0E0A               	movlw	10
  7683   01257A  6EE6               	movwf	postinc1,c
  7684   01257C  EC52  F09E         	call	_motorControl	;wreg free
  7685                           
  7686                           ;carFunctions.c: 108:            break;
  7687   012580  EFE3  F092         	goto	l1448
  7688   012584                     l5118:
  7689   012584  503E               	movf	motorControl_Process@state^0,w,c
  7690   012586  6E0B               	movwf	(btemp+10)^0,c
  7691   012588  6A0C               	clrf	(btemp+11)^0,c
  7692                           
  7693                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7694                           ; Switch size 1, requested type "simple"
  7695                           ; Number of cases is 1, Range of values is 0 to 0
  7696                           ; switch strategies available:
  7697                           ; Name         Instructions Cycles
  7698                           ; simple_byte            4     3 (average)
  7699                           ;	Chosen strategy is simple_byte
  7700   01258A  500C               	movf	(btemp+11)^0,w,c
  7701   01258C  0A00               	xorlw	0	; case 0
  7702   01258E  B4D8               	btfsc	status,2,c
  7703   012590  EFCC  F092         	goto	l5586
  7704   012594  EFE3  F092         	goto	l1448
  7705   012598                     l5586:
  7706                           
  7707                           ; Switch size 1, requested type "simple"
  7708                           ; Number of cases is 5, Range of values is 0 to 4
  7709                           ; switch strategies available:
  7710                           ; Name         Instructions Cycles
  7711                           ; simple_byte           16     9 (average)
  7712                           ;	Chosen strategy is simple_byte
  7713   012598  500B               	movf	(btemp+10)^0,w,c
  7714   01259A  0A00               	xorlw	0	; case 0
  7715   01259C  B4D8               	btfsc	status,2,c
  7716   01259E  EFE3  F092         	goto	l1448
  7717   0125A2  0A01               	xorlw	1	; case 1
  7718   0125A4  B4D8               	btfsc	status,2,c
  7719   0125A6  EFAC  F092         	goto	l5110
  7720   0125AA  0A03               	xorlw	3	; case 2
  7721   0125AC  B4D8               	btfsc	status,2,c
  7722   0125AE  EFB2  F092         	goto	l5112
  7723   0125B2  0A01               	xorlw	1	; case 3
  7724   0125B4  B4D8               	btfsc	status,2,c
  7725   0125B6  EFE3  F092         	goto	l1448
  7726   0125BA  0A07               	xorlw	7	; case 4
  7727   0125BC  B4D8               	btfsc	status,2,c
  7728   0125BE  EFBC  F092         	goto	l5114
  7729   0125C2  EFE3  F092         	goto	l1448
  7730   0125C6                     l1448:
  7731                           
  7732                           ; _motorControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7733   0125C6  52E5               	movf	postdec1,f,c
  7734   0125C8  52E5               	movf	postdec1,f,c
  7735   0125CA  0012               	return		;funcret
  7736   0125CC                     __end_of_motorControl_Process:
  7737                           	callstack 0
  7738                           
  7739 ;; *************** function _motorControl *****************
  7740 ;; Defined at:
  7741 ;;		line 24 in file "carFunctions.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  percent         1  [STACK] unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7746 ;;  txdata          8  [STACK] unsigned char [8]
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  1  [STACK] void 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used: 1
  7762 ;; Hardware stack levels required when called: 12
  7763 ;; This function calls:
  7764 ;;		_CanSend
  7765 ;; This function is called by:
  7766 ;;		_motorControl_Process
  7767 ;; This function uses a reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text21
  7771   013CA4                     __ptext21:
  7772                           	callstack 0
  7773   013CA4                     _motorControl:
  7774                           	callstack 0
  7775                           
  7776                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7777   013CA4  0E18               	movlw	24
  7778   013CA6  26E1               	addwf	fsr1l,f,c
  7779   013CA8  0E00               	movlw	0
  7780   013CAA  22E2               	addwfc	fsr1h,f,c
  7781   013CAC                     
  7782                           ;carFunctions.c: 25:     static uint8_t lastPercent=0;;carFunctions.c: 26:     CAN_TX_MS
      +                          GOBJ txMsg={0};
  7783   013CAC  EE20  F021         	lfsr	2,motorControl@F6642
  7784                           
  7785                           ;stkvar	_txMsg @ sp[(-24)+0]
  7786   013CB0  0E10               	movlw	16
  7787   013CB2  6E01               	movwf	btemp^0,c
  7788   013CB4  0EE8               	movlw	-24
  7789   013CB6                     us231999:
  7790   013CB6  CFDE FFE3          	movff	postinc2,plusw1
  7791   013CBA  28E8               	incf	wreg,w,c
  7792   013CBC  2E01               	decfsz	btemp^0,f,c
  7793   013CBE  D7FB               	bra	us231999
  7794   013CC0                     
  7795                           ;carFunctions.c: 27:     uint8_t txdata[8];;carFunctions.c: 28:         if(lastPercent!=
      +                           percent) {
  7796                           ;stkvar	_percent @ sp[(-24)+-1]
  7797   013CC0  0EE7               	movlw	-25
  7798   013CC2  50E3               	movf	plusw1,w,c
  7799   013CC4  183F               	xorwf	motorControl@lastPercent^0,w,c
  7800   013CC6  B4D8               	btfsc	status,2,c
  7801   013CC8  EF68  F09E         	goto	u2321
  7802   013CCC  EF6A  F09E         	goto	u2320
  7803   013CD0                     u2321:
  7804   013CD0  EFA7  F09E         	goto	l1425
  7805   013CD4                     u2320:
  7806   013CD4                     
  7807                           ;carFunctions.c: 29:             lastPercent = percent;
  7808                           ;stkvar	_percent @ sp[(-24)+-1]
  7809   013CD4  0EE7               	movlw	-25
  7810   013CD6  CFE3 F03F          	movff	plusw1,motorControl@lastPercent
  7811   013CDA                     
  7812                           ;carFunctions.c: 31:             txMsg.bF.id.ID = (0x112);
  7813   013CDA  0E12               	movlw	18
  7814   013CDC  6E09               	movwf	(btemp+8)^0,c
  7815   013CDE  0E01               	movlw	1
  7816   013CE0  6E0A               	movwf	(btemp+9)^0,c
  7817   013CE2  0E00               	movlw	0
  7818   013CE4  6E0B               	movwf	(btemp+10)^0,c
  7819   013CE6  0E00               	movlw	0
  7820   013CE8  6E0C               	movwf	(btemp+11)^0,c
  7821                           
  7822                           ;stkvar	_txMsg @ sp[(-24)+0]
  7823   013CEA  0EE8               	movlw	-24
  7824   013CEC  C009  FFE3         	movff	btemp+8,plusw1
  7825   013CF0  0EE9               	movlw	-23
  7826   013CF2  C00A  FFE3         	movff	btemp+9,plusw1
  7827   013CF6  0EEA               	movlw	-22
  7828   013CF8  C00B  FFE3         	movff	btemp+10,plusw1
  7829   013CFC  0EEB               	movlw	-21
  7830   013CFE  C00C  FFE3         	movff	btemp+11,plusw1
  7831   013D02                     
  7832                           ;carFunctions.c: 32:             txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7833                           ;stkvar	_txMsg @ sp[(-24)+0]
  7834   013D02  0EEE               	movlw	238
  7835   013D04  24E1               	addwf	fsr1l,w,c
  7836   013D06  6ED9               	movwf	fsr2l,c
  7837   013D08  0EFF               	movlw	255
  7838   013D0A  20E2               	addwfc	fsr1h,w,c
  7839   013D0C  6EDA               	movwf	fsr2h,c
  7840   013D0E  50DF               	movf	223,w,c
  7841   013D10  0BF0               	andlw	-16
  7842   013D12  0901               	iorlw	1
  7843   013D14  6EDF               	movwf	223,c
  7844   013D16                     
  7845                           ;carFunctions.c: 33:             txdata[0] = percent;
  7846                           ;stkvar	_percent @ sp[(-24)+-1]
  7847                           ;stkvar	_txdata @ sp[(-24)+16]
  7848   013D16  0EE7               	movlw	-25
  7849   013D18  CFE3 F001          	movff	plusw1,btemp
  7850   013D1C  0EF8               	movlw	-8
  7851   013D1E  C001  FFE3         	movff	btemp,plusw1
  7852   013D22                     
  7853                           ;carFunctions.c: 34:         CanSend(&txMsg,txdata);
  7854                           ;stkvar	_txdata @ sp[(-24)+16]
  7855   013D22  0EF8               	movlw	248
  7856   013D24  24E1               	addwf	fsr1l,w,c
  7857   013D26  6E01               	movwf	btemp^0,c
  7858   013D28  0EFF               	movlw	255
  7859   013D2A  20E2               	addwfc	fsr1h,w,c
  7860   013D2C  6E02               	movwf	(btemp+1)^0,c
  7861   013D2E  C001  FFE6         	movff	btemp,postinc1
  7862   013D32  C002  FFE6         	movff	btemp+1,postinc1
  7863                           
  7864                           ;stkvar	_txMsg @ sp[(-26)+0]
  7865   013D36  0EE6               	movlw	230
  7866   013D38  24E1               	addwf	fsr1l,w,c
  7867   013D3A  6E01               	movwf	btemp^0,c
  7868   013D3C  0EFF               	movlw	255
  7869   013D3E  20E2               	addwfc	fsr1h,w,c
  7870   013D40  6E02               	movwf	(btemp+1)^0,c
  7871   013D42  C001  FFE6         	movff	btemp,postinc1
  7872   013D46  C002  FFE6         	movff	btemp+1,postinc1
  7873   013D4A  ECB4  F09F         	call	_CanSend	;wreg free
  7874   013D4E                     l1425:
  7875                           
  7876                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
  7877   013D4E  0EE7               	movlw	231
  7878   013D50  26E1               	addwf	fsr1l,f,c
  7879   013D52  0EFF               	movlw	255
  7880   013D54  22E2               	addwfc	fsr1h,f,c
  7881   013D56  0012               	return		;funcret
  7882   013D58                     __end_of_motorControl:
  7883                           	callstack 0
  7884                           
  7885 ;; *************** function _lightContol_FrontLight *****************
  7886 ;; Defined at:
  7887 ;;		line 120 in file "carFunctions.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  light           1  [STACK] unsigned char 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7892 ;;  txdata          8  [STACK] unsigned char [8]
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1  [STACK] void 
  7895 ;; Registers used:
  7896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used: 1
  7908 ;; Hardware stack levels required when called: 12
  7909 ;; This function calls:
  7910 ;;		_CanSend
  7911 ;; This function is called by:
  7912 ;;		_motorControl_Process
  7913 ;;		_lightControl_Process
  7914 ;; This function uses a reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text22
  7918   013E0C                     __ptext22:
  7919                           	callstack 0
  7920   013E0C                     _lightContol_FrontLight:
  7921                           	callstack 0
  7922                           
  7923                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7924   013E0C  0E18               	movlw	24
  7925   013E0E  26E1               	addwf	fsr1l,f,c
  7926   013E10  0E00               	movlw	0
  7927   013E12  22E2               	addwfc	fsr1h,f,c
  7928   013E14                     
  7929                           ;carFunctions.c: 120: void lightContol_FrontLight(uint8_t light);carFunctions.c: 121: {;
      +                          carFunctions.c: 123: static uint8_t lastLight=0;;carFunctions.c: 124: CAN_TX_MSGOBJ txMs
      +                          g={0};
  7930   013E14  EE20  F08B         	lfsr	2,lightContol_FrontLight@F6659
  7931                           
  7932                           ;stkvar	_txMsg @ sp[(-24)+0]
  7933   013E18  0E10               	movlw	16
  7934   013E1A  6E01               	movwf	btemp^0,c
  7935   013E1C  0EE8               	movlw	-24
  7936   013E1E                     us233999:
  7937   013E1E  CFDE FFE3          	movff	postinc2,plusw1
  7938   013E22  28E8               	incf	wreg,w,c
  7939   013E24  2E01               	decfsz	btemp^0,f,c
  7940   013E26  D7FB               	bra	us233999
  7941   013E28                     
  7942                           ;carFunctions.c: 125: uint8_t txdata[8];;carFunctions.c: 126:     if(lastLight!= light) 
      +                          {
  7943                           ;stkvar	_light @ sp[(-24)+-1]
  7944   013E28  0EE7               	movlw	-25
  7945   013E2A  50E3               	movf	plusw1,w,c
  7946   013E2C  183C               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  7947   013E2E  B4D8               	btfsc	status,2,c
  7948   013E30  EF1C  F09F         	goto	u2341
  7949   013E34  EF1E  F09F         	goto	u2340
  7950   013E38                     u2341:
  7951   013E38  EF58  F09F         	goto	l1464
  7952   013E3C                     u2340:
  7953   013E3C                     
  7954                           ;carFunctions.c: 127:         lastLight = light;
  7955                           ;stkvar	_light @ sp[(-24)+-1]
  7956   013E3C  0EE7               	movlw	-25
  7957   013E3E  CFE3 F03C          	movff	plusw1,lightContol_FrontLight@lastLight
  7958   013E42                     
  7959                           ;carFunctions.c: 129:         txMsg.bF.id.ID = (0x19);
  7960   013E42  0E19               	movlw	25
  7961   013E44  6E09               	movwf	(btemp+8)^0,c
  7962   013E46  6A0A               	clrf	(btemp+9)^0,c
  7963   013E48  6A0B               	clrf	(btemp+10)^0,c
  7964   013E4A  6A0C               	clrf	(btemp+11)^0,c
  7965                           
  7966                           ;stkvar	_txMsg @ sp[(-24)+0]
  7967   013E4C  0EE8               	movlw	-24
  7968   013E4E  C009  FFE3         	movff	btemp+8,plusw1
  7969   013E52  0EE9               	movlw	-23
  7970   013E54  C00A  FFE3         	movff	btemp+9,plusw1
  7971   013E58  0EEA               	movlw	-22
  7972   013E5A  C00B  FFE3         	movff	btemp+10,plusw1
  7973   013E5E  0EEB               	movlw	-21
  7974   013E60  C00C  FFE3         	movff	btemp+11,plusw1
  7975   013E64                     
  7976                           ;carFunctions.c: 130:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7977                           ;stkvar	_txMsg @ sp[(-24)+0]
  7978   013E64  0EEE               	movlw	238
  7979   013E66  24E1               	addwf	fsr1l,w,c
  7980   013E68  6ED9               	movwf	fsr2l,c
  7981   013E6A  0EFF               	movlw	255
  7982   013E6C  20E2               	addwfc	fsr1h,w,c
  7983   013E6E  6EDA               	movwf	fsr2h,c
  7984   013E70  50DF               	movf	223,w,c
  7985   013E72  0BF0               	andlw	-16
  7986   013E74  0901               	iorlw	1
  7987   013E76  6EDF               	movwf	223,c
  7988   013E78                     
  7989                           ;carFunctions.c: 131:         txdata[0] = light;
  7990                           ;stkvar	_light @ sp[(-24)+-1]
  7991                           ;stkvar	_txdata @ sp[(-24)+16]
  7992   013E78  0EE7               	movlw	-25
  7993   013E7A  CFE3 F001          	movff	plusw1,btemp
  7994   013E7E  0EF8               	movlw	-8
  7995   013E80  C001  FFE3         	movff	btemp,plusw1
  7996   013E84                     
  7997                           ;carFunctions.c: 132:         CanSend(&txMsg,txdata);
  7998                           ;stkvar	_txdata @ sp[(-24)+16]
  7999   013E84  0EF8               	movlw	248
  8000   013E86  24E1               	addwf	fsr1l,w,c
  8001   013E88  6E01               	movwf	btemp^0,c
  8002   013E8A  0EFF               	movlw	255
  8003   013E8C  20E2               	addwfc	fsr1h,w,c
  8004   013E8E  6E02               	movwf	(btemp+1)^0,c
  8005   013E90  C001  FFE6         	movff	btemp,postinc1
  8006   013E94  C002  FFE6         	movff	btemp+1,postinc1
  8007                           
  8008                           ;stkvar	_txMsg @ sp[(-26)+0]
  8009   013E98  0EE6               	movlw	230
  8010   013E9A  24E1               	addwf	fsr1l,w,c
  8011   013E9C  6E01               	movwf	btemp^0,c
  8012   013E9E  0EFF               	movlw	255
  8013   013EA0  20E2               	addwfc	fsr1h,w,c
  8014   013EA2  6E02               	movwf	(btemp+1)^0,c
  8015   013EA4  C001  FFE6         	movff	btemp,postinc1
  8016   013EA8  C002  FFE6         	movff	btemp+1,postinc1
  8017   013EAC  ECB4  F09F         	call	_CanSend	;wreg free
  8018   013EB0                     l1464:
  8019                           
  8020                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  8021   013EB0  0EE7               	movlw	231
  8022   013EB2  26E1               	addwf	fsr1l,f,c
  8023   013EB4  0EFF               	movlw	255
  8024   013EB6  22E2               	addwfc	fsr1h,f,c
  8025   013EB8  0012               	return		;funcret
  8026   013EBA                     __end_of_lightContol_FrontLight:
  8027                           	callstack 0
  8028                           
  8029 ;; *************** function _lightContol_BackLight *****************
  8030 ;; Defined at:
  8031 ;;		line 135 in file "carFunctions.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;  light           1  [STACK] unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8036 ;;  txdata          8  [STACK] unsigned char [8]
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1  [STACK] void 
  8039 ;; Registers used:
  8040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8050 ;;Total ram usage:        0 bytes
  8051 ;; Hardware stack levels used: 1
  8052 ;; Hardware stack levels required when called: 12
  8053 ;; This function calls:
  8054 ;;		_CanSend
  8055 ;; This function is called by:
  8056 ;;		_motorControl_Process
  8057 ;;		_lightControl_Process
  8058 ;; This function uses a reentrant model
  8059 ;;
  8060                           
  8061                           	psect	text23
  8062   013D58                     __ptext23:
  8063                           	callstack 0
  8064   013D58                     _lightContol_BackLight:
  8065                           	callstack 0
  8066                           
  8067                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8068   013D58  0E18               	movlw	24
  8069   013D5A  26E1               	addwf	fsr1l,f,c
  8070   013D5C  0E00               	movlw	0
  8071   013D5E  22E2               	addwfc	fsr1h,f,c
  8072   013D60                     
  8073                           ;carFunctions.c: 135: void lightContol_BackLight(uint8_t light);carFunctions.c: 136: {;c
      +                          arFunctions.c: 137:     static uint8_t lastLight=0;;carFunctions.c: 138:     CAN_TX_MSGO
      +                          BJ txMsg={0};
  8074   013D60  EE20  F07B         	lfsr	2,lightContol_BackLight@F6665
  8075                           
  8076                           ;stkvar	_txMsg @ sp[(-24)+0]
  8077   013D64  0E10               	movlw	16
  8078   013D66  6E01               	movwf	btemp^0,c
  8079   013D68  0EE8               	movlw	-24
  8080   013D6A                     us235999:
  8081   013D6A  CFDE FFE3          	movff	postinc2,plusw1
  8082   013D6E  28E8               	incf	wreg,w,c
  8083   013D70  2E01               	decfsz	btemp^0,f,c
  8084   013D72  D7FB               	bra	us235999
  8085   013D74                     
  8086                           ;carFunctions.c: 139:     uint8_t txdata[8];;carFunctions.c: 140:     if(lastLight!= lig
      +                          ht) {
  8087                           ;stkvar	_light @ sp[(-24)+-1]
  8088   013D74  0EE7               	movlw	-25
  8089   013D76  50E3               	movf	plusw1,w,c
  8090   013D78  183B               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8091   013D7A  B4D8               	btfsc	status,2,c
  8092   013D7C  EFC2  F09E         	goto	u2361
  8093   013D80  EFC4  F09E         	goto	u2360
  8094   013D84                     u2361:
  8095   013D84  EF01  F09F         	goto	l1472
  8096   013D88                     u2360:
  8097   013D88                     
  8098                           ;carFunctions.c: 141:         lastLight = light;
  8099                           ;stkvar	_light @ sp[(-24)+-1]
  8100   013D88  0EE7               	movlw	-25
  8101   013D8A  CFE3 F03B          	movff	plusw1,lightContol_BackLight@lastLight
  8102   013D8E                     
  8103                           ;carFunctions.c: 143:         txMsg.bF.id.ID = (0x119);
  8104   013D8E  0E19               	movlw	25
  8105   013D90  6E09               	movwf	(btemp+8)^0,c
  8106   013D92  0E01               	movlw	1
  8107   013D94  6E0A               	movwf	(btemp+9)^0,c
  8108   013D96  0E00               	movlw	0
  8109   013D98  6E0B               	movwf	(btemp+10)^0,c
  8110   013D9A  0E00               	movlw	0
  8111   013D9C  6E0C               	movwf	(btemp+11)^0,c
  8112                           
  8113                           ;stkvar	_txMsg @ sp[(-24)+0]
  8114   013D9E  0EE8               	movlw	-24
  8115   013DA0  C009  FFE3         	movff	btemp+8,plusw1
  8116   013DA4  0EE9               	movlw	-23
  8117   013DA6  C00A  FFE3         	movff	btemp+9,plusw1
  8118   013DAA  0EEA               	movlw	-22
  8119   013DAC  C00B  FFE3         	movff	btemp+10,plusw1
  8120   013DB0  0EEB               	movlw	-21
  8121   013DB2  C00C  FFE3         	movff	btemp+11,plusw1
  8122   013DB6                     
  8123                           ;carFunctions.c: 144:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8124                           ;stkvar	_txMsg @ sp[(-24)+0]
  8125   013DB6  0EEE               	movlw	238
  8126   013DB8  24E1               	addwf	fsr1l,w,c
  8127   013DBA  6ED9               	movwf	fsr2l,c
  8128   013DBC  0EFF               	movlw	255
  8129   013DBE  20E2               	addwfc	fsr1h,w,c
  8130   013DC0  6EDA               	movwf	fsr2h,c
  8131   013DC2  50DF               	movf	223,w,c
  8132   013DC4  0BF0               	andlw	-16
  8133   013DC6  0901               	iorlw	1
  8134   013DC8  6EDF               	movwf	223,c
  8135   013DCA                     
  8136                           ;carFunctions.c: 145:         txdata[0] = light;
  8137                           ;stkvar	_light @ sp[(-24)+-1]
  8138                           ;stkvar	_txdata @ sp[(-24)+16]
  8139   013DCA  0EE7               	movlw	-25
  8140   013DCC  CFE3 F001          	movff	plusw1,btemp
  8141   013DD0  0EF8               	movlw	-8
  8142   013DD2  C001  FFE3         	movff	btemp,plusw1
  8143   013DD6                     
  8144                           ;carFunctions.c: 146:         CanSend(&txMsg,txdata);
  8145                           ;stkvar	_txdata @ sp[(-24)+16]
  8146   013DD6  0EF8               	movlw	248
  8147   013DD8  24E1               	addwf	fsr1l,w,c
  8148   013DDA  6E01               	movwf	btemp^0,c
  8149   013DDC  0EFF               	movlw	255
  8150   013DDE  20E2               	addwfc	fsr1h,w,c
  8151   013DE0  6E02               	movwf	(btemp+1)^0,c
  8152   013DE2  C001  FFE6         	movff	btemp,postinc1
  8153   013DE6  C002  FFE6         	movff	btemp+1,postinc1
  8154                           
  8155                           ;stkvar	_txMsg @ sp[(-26)+0]
  8156   013DEA  0EE6               	movlw	230
  8157   013DEC  24E1               	addwf	fsr1l,w,c
  8158   013DEE  6E01               	movwf	btemp^0,c
  8159   013DF0  0EFF               	movlw	255
  8160   013DF2  20E2               	addwfc	fsr1h,w,c
  8161   013DF4  6E02               	movwf	(btemp+1)^0,c
  8162   013DF6  C001  FFE6         	movff	btemp,postinc1
  8163   013DFA  C002  FFE6         	movff	btemp+1,postinc1
  8164   013DFE  ECB4  F09F         	call	_CanSend	;wreg free
  8165   013E02                     l1472:
  8166                           
  8167                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8168   013E02  0EE7               	movlw	231
  8169   013E04  26E1               	addwf	fsr1l,f,c
  8170   013E06  0EFF               	movlw	255
  8171   013E08  22E2               	addwfc	fsr1h,f,c
  8172   013E0A  0012               	return		;funcret
  8173   013E0C                     __end_of_lightContol_BackLight:
  8174                           	callstack 0
  8175                           
  8176 ;; *************** function _CanSend *****************
  8177 ;; Defined at:
  8178 ;;		line 217 in file "can/can.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8181 ;;		 -> txMsg(16), 
  8182 ;;  txd             2  [STACK] PTR unsigned char 
  8183 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  txFlags         1  [STACK] enum E5580
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  1  [STACK] char 
  8188 ;; Registers used:
  8189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;Total ram usage:        0 bytes
  8200 ;; Hardware stack levels used: 1
  8201 ;; Hardware stack levels required when called: 11
  8202 ;; This function calls:
  8203 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8204 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8205 ;; This function is called by:
  8206 ;;		_motorControl
  8207 ;;		_lightContol_FrontLight
  8208 ;;		_lightContol_BackLight
  8209 ;; This function uses a reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text24
  8213   013F68                     __ptext24:
  8214                           	callstack 0
  8215   013F68                     _CanSend:
  8216                           	callstack 0
  8217                           
  8218                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8219   013F68  52E6               	movf	postinc1,f,c
  8220   013F6A                     
  8221                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8222                           ;stkvar	_txObj @ sp[(-1)+-2]
  8223   013F6A  0EFD               	movlw	-3
  8224   013F6C  CFE3 F00B          	movff	plusw1,btemp+10
  8225   013F70  0EFE               	movlw	-2
  8226   013F72  CFE3 F00C          	movff	plusw1,btemp+11
  8227   013F76  0E08               	movlw	8
  8228   013F78  240B               	addwf	(btemp+10)^0,w,c
  8229   013F7A  6ED9               	movwf	fsr2l,c
  8230   013F7C  0E00               	movlw	0
  8231   013F7E  200C               	addwfc	(btemp+11)^0,w,c
  8232   013F80  6EDA               	movwf	fsr2h,c
  8233   013F82  0E01               	movlw	1
  8234   013F84  6EDE               	movwf	postinc2,c
  8235   013F86  0E00               	movlw	0
  8236   013F88  6EDE               	movwf	postinc2,c
  8237   013F8A  0E00               	movlw	0
  8238   013F8C  6EDE               	movwf	postinc2,c
  8239   013F8E  0E00               	movlw	0
  8240   013F90  6EDD               	movwf	postdec2,c
  8241   013F92                     
  8242                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8243                           ;stkvar	_txFlags @ sp[(-1)+0]
  8244   013F92  0EFF               	movlw	255
  8245   013F94  24E1               	addwf	fsr1l,w,c
  8246   013F96  6E01               	movwf	btemp^0,c
  8247   013F98  0EFF               	movlw	255
  8248   013F9A  20E2               	addwfc	fsr1h,w,c
  8249   013F9C  6E02               	movwf	(btemp+1)^0,c
  8250   013F9E  C001  FFE6         	movff	btemp,postinc1
  8251   013FA2  C002  FFE6         	movff	btemp+1,postinc1
  8252   013FA6  0E01               	movlw	1
  8253   013FA8  6EE6               	movwf	postinc1,c
  8254   013FAA  EC5B  F0A0         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8255   013FAE                     
  8256                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8257                           ;stkvar	_txFlags @ sp[(-1)+0]
  8258   013FAE  0EFF               	movlw	-1
  8259   013FB0  A0E3               	btfss	plusw1,0,c
  8260   013FB2  EFDD  F09F         	goto	u1991
  8261   013FB6  EFDF  F09F         	goto	u1990
  8262   013FBA                     u1991:
  8263   013FBA  EF04  F0A0         	goto	l158
  8264   013FBE                     u1990:
  8265   013FBE                     
  8266                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8267   013FBE  0E01               	movlw	1
  8268   013FC0  6EE6               	movwf	postinc1,c
  8269                           
  8270                           ;stkvar	_txObj @ sp[(-2)+-2]
  8271   013FC2  0EFC               	movlw	-4
  8272   013FC4  CFE3 F00B          	movff	plusw1,btemp+10
  8273   013FC8  0EFD               	movlw	-3
  8274   013FCA  CFE3 F00C          	movff	plusw1,btemp+11
  8275   013FCE  0E06               	movlw	6
  8276   013FD0  240B               	addwf	(btemp+10)^0,w,c
  8277   013FD2  6ED9               	movwf	fsr2l,c
  8278   013FD4  0E00               	movlw	0
  8279   013FD6  200C               	addwfc	(btemp+11)^0,w,c
  8280   013FD8  6EDA               	movwf	fsr2h,c
  8281   013FDA  50DF               	movf	223,w,c
  8282   013FDC  0B0F               	andlw	15
  8283   013FDE  6E0C               	movwf	(btemp+11)^0,c
  8284   013FE0  C00C  FFE6         	movff	btemp+11,postinc1
  8285   013FE4  0E00               	movlw	0
  8286   013FE6  6EE6               	movwf	postinc1,c
  8287   013FE8  6EE6               	movwf	postinc1,c
  8288   013FEA  6EE6               	movwf	postinc1,c
  8289                           
  8290                           ;stkvar	_txd @ sp[(-6)+-4]
  8291   013FEC  0EF6               	movlw	-10
  8292   013FEE  CFE3 FFE6          	movff	plusw1,postinc1
  8293   013FF2  CFE3 FFE6          	movff	plusw1,postinc1
  8294                           
  8295                           ;stkvar	_txObj @ sp[(-8)+-2]
  8296   013FF6  0EF6               	movlw	-10
  8297   013FF8  CFE3 FFE6          	movff	plusw1,postinc1
  8298   013FFC  CFE3 FFE6          	movff	plusw1,postinc1
  8299   014000  0E01               	movlw	1
  8300   014002  6EE6               	movwf	postinc1,c
  8301   014004  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8302   014008                     l158:
  8303                           
  8304                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8305   014008  0EFB               	movlw	251
  8306   01400A  26E1               	addwf	fsr1l,f,c
  8307   01400C  0EFF               	movlw	255
  8308   01400E  22E2               	addwfc	fsr1h,f,c
  8309   014010  0012               	return		;funcret
  8310   014012                     __end_of_CanSend:
  8311                           	callstack 0
  8312                           
  8313 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8314 ;; Defined at:
  8315 ;;		line 706 in file "can/can.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  channel         1  [STACK] enum E5287
  8318 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8319 ;;		 -> txMsg(16), 
  8320 ;;  txd             2  [STACK] PTR unsigned char 
  8321 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8322 ;;  txdNumBytes     4  [STACK] unsigned long 
  8323 ;;  flush           1  [STACK] _Bool 
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  temp32          4  [STACK] unsigned long 
  8326 ;;  txBuffer       76  [STACK] unsigned char [76]
  8327 ;;  fifoReg        12  [STACK] unsigned long [3]
  8328 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8329 ;;  a               4  [STACK] unsigned long 
  8330 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8331 ;;  dataBytesInO    4  [STACK] unsigned long 
  8332 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8333 ;;  n               2  [STACK] unsigned short 
  8334 ;;  spiTransferE    1  [STACK] char 
  8335 ;;  i               1  [STACK] unsigned char 
  8336 ;;  j               1  [STACK] unsigned char 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1  [STACK] char 
  8339 ;; Registers used:
  8340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8350 ;;Total ram usage:        0 bytes
  8351 ;; Hardware stack levels used: 1
  8352 ;; Hardware stack levels required when called: 10
  8353 ;; This function calls:
  8354 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8355 ;;		_DRV_CANFDSPI_ReadWordArray
  8356 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8357 ;;		_DRV_CANFDSPI_WriteByteArray
  8358 ;; This function is called by:
  8359 ;;		_CanSend
  8360 ;; This function uses a reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text25
  8364   010000                     __ptext25:
  8365                           	callstack 0
  8366   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8367                           	callstack 0
  8368                           
  8369                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8370   010000  0E72               	movlw	114
  8371   010002  26E1               	addwf	fsr1l,f,c
  8372   010004  0E00               	movlw	0
  8373   010006  22E2               	addwfc	fsr1h,f,c
  8374   010008                     
  8375                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8376                           ;stkvar	_channel @ sp[(-114)+-1]
  8377   010008  0E8D               	movlw	-115
  8378   01000A  50E3               	movf	plusw1,w,c
  8379   01000C  0D0C               	mullw	12
  8380   01000E  0E50               	movlw	80
  8381   010010  26F3               	addwf	243,f,c
  8382   010012  0E00               	movlw	0
  8383   010014  22F4               	addwfc	244,f,c
  8384                           
  8385                           ;stkvar	_a @ sp[(-114)+97]
  8386   010016  0EEF               	movlw	-17
  8387   010018  CFF3 FFE3          	movff	prodl,plusw1
  8388   01001C  0EF0               	movlw	-16
  8389   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8390   010022  0EF1               	movlw	-15
  8391   010024  6AE3               	clrf	plusw1,c
  8392   010026  0EF2               	movlw	-14
  8393   010028  6AE3               	clrf	plusw1,c
  8394   01002A                     
  8395                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8396   01002A  0E03               	movlw	3
  8397   01002C  6EE6               	movwf	postinc1,c
  8398   01002E  0E00               	movlw	0
  8399   010030  6EE6               	movwf	postinc1,c
  8400                           
  8401                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8402   010032  0EDC               	movlw	220
  8403   010034  24E1               	addwf	fsr1l,w,c
  8404   010036  6E01               	movwf	btemp^0,c
  8405   010038  0EFF               	movlw	255
  8406   01003A  20E2               	addwfc	fsr1h,w,c
  8407   01003C  6E02               	movwf	(btemp+1)^0,c
  8408   01003E  C001  FFE6         	movff	btemp,postinc1
  8409   010042  C002  FFE6         	movff	btemp+1,postinc1
  8410                           
  8411                           ;stkvar	_a @ sp[(-118)+97]
  8412   010046  0EEB               	movlw	-21
  8413   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8414   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8415   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8416                           
  8417                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8418   010054  0EFD               	movlw	-3
  8419   010056  C001  FFE3         	movff	btemp,plusw1
  8420   01005A                     
  8421                           ;can/can.c: 722:     if (spiTransferError) {
  8422                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8423   01005A  0EFD               	movlw	-3
  8424   01005C  50E3               	movf	plusw1,w,c
  8425   01005E  B4D8               	btfsc	status,2,c
  8426   010060  EF34  F080         	goto	u1701
  8427   010064  EF36  F080         	goto	u1700
  8428   010068                     u1701:
  8429   010068  EF3A  F080         	goto	l4134
  8430   01006C                     u1700:
  8431   01006C                     
  8432                           ;can/can.c: 723:         return -1;
  8433   01006C  0EFF               	movlw	255
  8434   01006E  6E01               	movwf	btemp^0,c
  8435   010070  EFA1  F083         	goto	l264
  8436   010074                     l4134:
  8437                           
  8438                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8439                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8440   010074  0EDE               	movlw	-34
  8441   010076  CFE3 F009          	movff	plusw1,btemp+8
  8442   01007A  0EDF               	movlw	-33
  8443   01007C  CFE3 F00A          	movff	plusw1,btemp+9
  8444   010080  0EE0               	movlw	-32
  8445   010082  CFE3 F00B          	movff	plusw1,btemp+10
  8446   010086  0EE1               	movlw	-31
  8447   010088  CFE3 F00C          	movff	plusw1,btemp+11
  8448                           
  8449                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8450   01008C  0EEA               	movlw	-22
  8451   01008E  C009  FFE3         	movff	btemp+8,plusw1
  8452   010092  0EEB               	movlw	-21
  8453   010094  C00A  FFE3         	movff	btemp+9,plusw1
  8454   010098  0EEC               	movlw	-20
  8455   01009A  C00B  FFE3         	movff	btemp+10,plusw1
  8456   01009E  0EED               	movlw	-19
  8457   0100A0  C00C  FFE3         	movff	btemp+11,plusw1
  8458   0100A4                     
  8459                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8460                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8461   0100A4  50E1               	movf	fsr1l,w,c
  8462   0100A6  0FEA               	addlw	-22
  8463   0100A8  6ED9               	movwf	fsr2l,c
  8464   0100AA  50E2               	movf	fsr1h,w,c
  8465   0100AC  6EDA               	movwf	fsr2h,c
  8466   0100AE  0EFF               	movlw	255
  8467   0100B0  22DA               	addwfc	fsr2h,f,c
  8468   0100B2  BEDF               	btfsc	indf2,7,c
  8469   0100B4  EF5E  F080         	goto	u1711
  8470   0100B8  EF60  F080         	goto	u1710
  8471   0100BC                     u1711:
  8472   0100BC  EF64  F080         	goto	l4142
  8473   0100C0                     u1710:
  8474   0100C0                     
  8475                           ;can/can.c: 729:         return -2;
  8476   0100C0  0EFE               	movlw	254
  8477   0100C2  6E01               	movwf	btemp^0,c
  8478   0100C4  EFA1  F083         	goto	l264
  8479   0100C8                     l4142:
  8480                           
  8481                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8482                           ;stkvar	_txObj @ sp[(-114)+-3]
  8483   0100C8  0E8B               	movlw	-117
  8484   0100CA  CFE3 F00B          	movff	plusw1,btemp+10
  8485   0100CE  0E8C               	movlw	-116
  8486   0100D0  CFE3 F00C          	movff	plusw1,btemp+11
  8487   0100D4  0E06               	movlw	6
  8488   0100D6  240B               	addwf	(btemp+10)^0,w,c
  8489   0100D8  6ED9               	movwf	fsr2l,c
  8490   0100DA  0E00               	movlw	0
  8491   0100DC  200C               	addwfc	(btemp+11)^0,w,c
  8492   0100DE  6EDA               	movwf	fsr2h,c
  8493   0100E0  50DF               	movf	223,w,c
  8494   0100E2  0B0F               	andlw	15
  8495   0100E4  6EE6               	movwf	postinc1,c
  8496   0100E6  EC39  F090         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  8497                           
  8498                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8499   0100EA  0EF7               	movlw	-9
  8500   0100EC  C001  FFE3         	movff	btemp,plusw1
  8501   0100F0  0EF8               	movlw	-8
  8502   0100F2  C002  FFE3         	movff	btemp+1,plusw1
  8503   0100F6  0EF9               	movlw	-7
  8504   0100F8  C003  FFE3         	movff	btemp+2,plusw1
  8505   0100FC  0EFA               	movlw	-6
  8506   0100FE  C004  FFE3         	movff	btemp+3,plusw1
  8507   010102                     
  8508                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  8509                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8510                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8511   010102  50E1               	movf	fsr1l,w,c
  8512   010104  0FF7               	addlw	-9
  8513   010106  6ED9               	movwf	fsr2l,c
  8514   010108  50E2               	movf	fsr1h,w,c
  8515   01010A  6EDA               	movwf	fsr2h,c
  8516   01010C  0EFF               	movlw	255
  8517   01010E  22DA               	addwfc	fsr2h,f,c
  8518   010110  0E85               	movlw	-123
  8519   010112  50E3               	movf	plusw1,w,c
  8520   010114  5CDE               	subwf	postinc2,w,c
  8521   010116  0E86               	movlw	-122
  8522   010118  50E3               	movf	plusw1,w,c
  8523   01011A  58DE               	subwfb	postinc2,w,c
  8524   01011C  0E87               	movlw	-121
  8525   01011E  50E3               	movf	plusw1,w,c
  8526   010120  58DE               	subwfb	postinc2,w,c
  8527   010122  0E88               	movlw	-120
  8528   010124  50E3               	movf	plusw1,w,c
  8529   010126  58DE               	subwfb	postinc2,w,c
  8530   010128  B0D8               	btfsc	status,0,c
  8531   01012A  EF99  F080         	goto	u1721
  8532   01012E  EF9B  F080         	goto	u1720
  8533   010132                     u1721:
  8534   010132  EF9F  F080         	goto	l4150
  8535   010136                     u1720:
  8536   010136                     
  8537                           ;can/can.c: 735:         return -3;
  8538   010136  0EFD               	movlw	253
  8539   010138  6E01               	movwf	btemp^0,c
  8540   01013A  EFA1  F083         	goto	l264
  8541   01013E                     l4150:
  8542                           
  8543                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  8544                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8545   01013E  0EE6               	movlw	230
  8546   010140  24E1               	addwf	fsr1l,w,c
  8547   010142  6ED9               	movwf	fsr2l,c
  8548   010144  0EFF               	movlw	255
  8549   010146  20E2               	addwfc	fsr1h,w,c
  8550   010148  6EDA               	movwf	fsr2h,c
  8551   01014A  CFDE F009          	movff	postinc2,btemp+8
  8552   01014E  CFDE F00A          	movff	postinc2,btemp+9
  8553   010152  CFDE F00B          	movff	postinc2,btemp+10
  8554   010156  CFDE F00C          	movff	postinc2,btemp+11
  8555                           
  8556                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8557   01015A  0EF3               	movlw	-13
  8558   01015C  C009  FFE3         	movff	btemp+8,plusw1
  8559   010160  0EF4               	movlw	-12
  8560   010162  C00A  FFE3         	movff	btemp+9,plusw1
  8561   010166  0EF5               	movlw	-11
  8562   010168  C00B  FFE3         	movff	btemp+10,plusw1
  8563   01016C  0EF6               	movlw	-10
  8564   01016E  C00C  FFE3         	movff	btemp+11,plusw1
  8565   010172                     
  8566                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  8567                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8568   010172  0EF3               	movlw	-13
  8569   010174  CFE3 F009          	movff	plusw1,btemp+8
  8570   010178  0EF4               	movlw	-12
  8571   01017A  CFE3 F00A          	movff	plusw1,btemp+9
  8572   01017E  0EF5               	movlw	-11
  8573   010180  CFE3 F00B          	movff	plusw1,btemp+10
  8574   010184  0EF6               	movlw	-10
  8575   010186  CFE3 F00C          	movff	plusw1,btemp+11
  8576                           
  8577                           ;stkvar	_a @ sp[(-114)+97]
  8578   01018A  0EEF               	movlw	-17
  8579   01018C  C009  FFE3         	movff	btemp+8,plusw1
  8580   010190  0EF0               	movlw	-16
  8581   010192  C00A  FFE3         	movff	btemp+9,plusw1
  8582   010196  0EF1               	movlw	-15
  8583   010198  C00B  FFE3         	movff	btemp+10,plusw1
  8584   01019C  0EF2               	movlw	-14
  8585   01019E  C00C  FFE3         	movff	btemp+11,plusw1
  8586   0101A2                     
  8587                           ;can/can.c: 748:     a += 0x400;
  8588                           ;stkvar	_a @ sp[(-114)+97]
  8589   0101A2  50E1               	movf	fsr1l,w,c
  8590   0101A4  0FEF               	addlw	-17
  8591   0101A6  6ED9               	movwf	fsr2l,c
  8592   0101A8  50E2               	movf	fsr1h,w,c
  8593   0101AA  6EDA               	movwf	fsr2h,c
  8594   0101AC  0EFF               	movlw	255
  8595   0101AE  22DA               	addwfc	fsr2h,f,c
  8596   0101B0  0E00               	movlw	0
  8597   0101B2  26DE               	addwf	postinc2,f,c
  8598   0101B4  0E04               	movlw	4
  8599   0101B6  22DE               	addwfc	postinc2,f,c
  8600   0101B8  0E00               	movlw	0
  8601   0101BA  22DE               	addwfc	postinc2,f,c
  8602   0101BC  0E00               	movlw	0
  8603   0101BE  22DE               	addwfc	postinc2,f,c
  8604   0101C0                     
  8605                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  8606                           ;stkvar	_txObj @ sp[(-114)+-3]
  8607   0101C0  0E8B               	movlw	-117
  8608   0101C2  CFE3 F00B          	movff	plusw1,btemp+10
  8609   0101C6  0E8C               	movlw	-116
  8610   0101C8  CFE3 F00C          	movff	plusw1,btemp+11
  8611   0101CC  0E06               	movlw	6
  8612   0101CE  240B               	addwf	(btemp+10)^0,w,c
  8613   0101D0  6ED9               	movwf	fsr2l,c
  8614   0101D2  0E00               	movlw	0
  8615   0101D4  200C               	addwfc	(btemp+11)^0,w,c
  8616   0101D6  6EDA               	movwf	fsr2h,c
  8617   0101D8  B8DF               	btfsc	indf2,4,c
  8618   0101DA  EFF1  F080         	goto	u1731
  8619   0101DE  EFF3  F080         	goto	u1730
  8620   0101E2                     u1731:
  8621   0101E2  EF75  F081         	goto	l4166
  8622   0101E6                     u1730:
  8623   0101E6                     
  8624                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  8625                           ;stkvar	_txObj @ sp[(-114)+-3]
  8626   0101E6  0E8B               	movlw	-117
  8627   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8628   0101EC  0E8C               	movlw	-116
  8629   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8630   0101F2  50DF               	movf	indf2,w,c
  8631   0101F4  6E0C               	movwf	(btemp+11)^0,c
  8632                           
  8633                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8634   0101F6  0E92               	movlw	-110
  8635   0101F8  C00C  FFE3         	movff	btemp+11,plusw1
  8636   0101FC                     
  8637                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  8638                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8639   0101FC  0E93               	movlw	147
  8640   0101FE  24E1               	addwf	fsr1l,w,c
  8641   010200  6ED9               	movwf	fsr2l,c
  8642   010202  0EFF               	movlw	255
  8643   010204  20E2               	addwfc	fsr1h,w,c
  8644   010206  6EDA               	movwf	fsr2h,c
  8645                           
  8646                           ;stkvar	_txObj @ sp[(-114)+-3]
  8647   010208  0E8B               	movlw	-117
  8648   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  8649   01020E  0E8C               	movlw	-116
  8650   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  8651   010214  CFEE F009          	movff	postinc0,btemp+8
  8652   010218  CFEE F00A          	movff	postinc0,btemp+9
  8653   01021C  CFEE F00B          	movff	postinc0,btemp+10
  8654   010220  CFEE F00C          	movff	postinc0,btemp+11
  8655   010224  C00A  F009         	movff	btemp+9,btemp+8
  8656   010228  C00B  F00A         	movff	btemp+10,btemp+9
  8657   01022C  C00C  F00B         	movff	btemp+11,btemp+10
  8658   010230  6A0C               	clrf	(btemp+11)^0,c
  8659   010232  5009               	movf	(btemp+8)^0,w,c
  8660   010234  6EDF               	movwf	indf2,c
  8661   010236                     
  8662                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  8663                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8664   010236  0E94               	movlw	148
  8665   010238  24E1               	addwf	fsr1l,w,c
  8666   01023A  6ED9               	movwf	fsr2l,c
  8667   01023C  0EFF               	movlw	255
  8668   01023E  20E2               	addwfc	fsr1h,w,c
  8669   010240  6EDA               	movwf	fsr2h,c
  8670                           
  8671                           ;stkvar	_txObj @ sp[(-114)+-3]
  8672   010242  0E8B               	movlw	-117
  8673   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  8674   010248  0E8C               	movlw	-116
  8675   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  8676   01024E  CFEE F009          	movff	postinc0,btemp+8
  8677   010252  CFEE F00A          	movff	postinc0,btemp+9
  8678   010256  CFEE F00B          	movff	postinc0,btemp+10
  8679   01025A  CFEE F00C          	movff	postinc0,btemp+11
  8680   01025E  0E11               	movlw	17
  8681   010260  EF37  F081         	goto	u1740
  8682   010264                     u1745:
  8683   010264  90D8               	bcf	status,0,c
  8684   010266  320C               	rrcf	(btemp+11)^0,f,c
  8685   010268  320B               	rrcf	(btemp+10)^0,f,c
  8686   01026A  320A               	rrcf	(btemp+9)^0,f,c
  8687   01026C  3209               	rrcf	(btemp+8)^0,f,c
  8688   01026E                     u1740:
  8689   01026E  2EE8               	decfsz	wreg,f,c
  8690   010270  EF32  F081         	goto	u1745
  8691   010274  5009               	movf	(btemp+8)^0,w,c
  8692   010276  6EDF               	movwf	indf2,c
  8693   010278                     
  8694                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  8695                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8696   010278  0E95               	movlw	149
  8697   01027A  24E1               	addwf	fsr1l,w,c
  8698   01027C  6ED9               	movwf	fsr2l,c
  8699   01027E  0EFF               	movlw	255
  8700   010280  20E2               	addwfc	fsr1h,w,c
  8701   010282  6EDA               	movwf	fsr2h,c
  8702                           
  8703                           ;stkvar	_txObj @ sp[(-114)+-3]
  8704   010284  0E8B               	movlw	-117
  8705   010286  CFE3 F00B          	movff	plusw1,btemp+10
  8706   01028A  0E8C               	movlw	-116
  8707   01028C  CFE3 F00C          	movff	plusw1,btemp+11
  8708   010290  0E04               	movlw	4
  8709   010292  240B               	addwf	(btemp+10)^0,w,c
  8710   010294  6EE9               	movwf	fsr0l,c
  8711   010296  0E00               	movlw	0
  8712   010298  200C               	addwfc	(btemp+11)^0,w,c
  8713   01029A  6EEA               	movwf	fsr0h,c
  8714   01029C  50EF               	movf	indf0,w,c
  8715   01029E  6E0C               	movwf	(btemp+11)^0,c
  8716   0102A0  0E05               	movlw	5
  8717   0102A2  6E01               	movwf	btemp^0,c
  8718   0102A4                     u1755:
  8719   0102A4  90D8               	bcf	status,0,c
  8720   0102A6  360C               	rlcf	(btemp+11)^0,f,c
  8721   0102A8  2E01               	decfsz	btemp^0,f,c
  8722   0102AA  EF52  F081         	goto	u1755
  8723                           
  8724                           ;stkvar	_txObj @ sp[(-114)+-3]
  8725   0102AE  0E8B               	movlw	-117
  8726   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8727   0102B4  0E8C               	movlw	-116
  8728   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8729   0102BA  CFEE F005          	movff	postinc0,btemp+4
  8730   0102BE  CFEE F006          	movff	postinc0,btemp+5
  8731   0102C2  CFEE F007          	movff	postinc0,btemp+6
  8732   0102C6  CFEE F008          	movff	postinc0,btemp+7
  8733   0102CA  0E19               	movlw	25
  8734   0102CC  EF6D  F081         	goto	u1760
  8735   0102D0                     u1765:
  8736   0102D0  90D8               	bcf	status,0,c
  8737   0102D2  3208               	rrcf	(btemp+7)^0,f,c
  8738   0102D4  3207               	rrcf	(btemp+6)^0,f,c
  8739   0102D6  3206               	rrcf	(btemp+5)^0,f,c
  8740   0102D8  3205               	rrcf	(btemp+4)^0,f,c
  8741   0102DA                     u1760:
  8742   0102DA  2EE8               	decfsz	wreg,f,c
  8743   0102DC  EF68  F081         	goto	u1765
  8744   0102E0  5005               	movf	(btemp+4)^0,w,c
  8745   0102E2  100C               	iorwf	(btemp+11)^0,w,c
  8746   0102E4  6EDF               	movwf	indf2,c
  8747                           
  8748                           ;can/can.c: 770:     }
  8749   0102E6  EF24  F082         	goto	l4178
  8750   0102EA                     l4166:
  8751                           
  8752                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8753                           ;stkvar	_txObj @ sp[(-114)+-3]
  8754   0102EA  0E8B               	movlw	-117
  8755   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8756   0102F0  0E8C               	movlw	-116
  8757   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8758   0102F6  CFDE F009          	movff	postinc2,btemp+8
  8759   0102FA  CFDE F00A          	movff	postinc2,btemp+9
  8760   0102FE  CFDE F00B          	movff	postinc2,btemp+10
  8761   010302  CFDE F00C          	movff	postinc2,btemp+11
  8762   010306  0E13               	movlw	19
  8763   010308  EF8B  F081         	goto	u1770
  8764   01030C                     u1775:
  8765   01030C  90D8               	bcf	status,0,c
  8766   01030E  320C               	rrcf	(btemp+11)^0,f,c
  8767   010310  320B               	rrcf	(btemp+10)^0,f,c
  8768   010312  320A               	rrcf	(btemp+9)^0,f,c
  8769   010314  3209               	rrcf	(btemp+8)^0,f,c
  8770   010316                     u1770:
  8771   010316  2EE8               	decfsz	wreg,f,c
  8772   010318  EF86  F081         	goto	u1775
  8773   01031C  0EFF               	movlw	255
  8774   01031E  1409               	andwf	(btemp+8)^0,w,c
  8775   010320  6E05               	movwf	(btemp+4)^0,c
  8776   010322  0E07               	movlw	7
  8777   010324  140A               	andwf	(btemp+9)^0,w,c
  8778   010326  6E06               	movwf	(btemp+5)^0,c
  8779   010328  0E00               	movlw	0
  8780   01032A  140B               	andwf	(btemp+10)^0,w,c
  8781   01032C  6E07               	movwf	(btemp+6)^0,c
  8782   01032E  0E00               	movlw	0
  8783   010330  140C               	andwf	(btemp+11)^0,w,c
  8784   010332  6E08               	movwf	(btemp+7)^0,c
  8785                           
  8786                           ;stkvar	_txObj @ sp[(-114)+-3]
  8787   010334  0E8B               	movlw	-117
  8788   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8789   01033A  0E8C               	movlw	-116
  8790   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  8791   010340  0EFF               	movlw	255
  8792   010342  14DE               	andwf	postinc2,w,c
  8793   010344  6E09               	movwf	(btemp+8)^0,c
  8794   010346  0EFF               	movlw	255
  8795   010348  14DE               	andwf	postinc2,w,c
  8796   01034A  6E0A               	movwf	(btemp+9)^0,c
  8797   01034C  0E03               	movlw	3
  8798   01034E  14DE               	andwf	postinc2,w,c
  8799   010350  6E0B               	movwf	(btemp+10)^0,c
  8800   010352  0E00               	movlw	0
  8801   010354  14DE               	andwf	postinc2,w,c
  8802   010356  6E0C               	movwf	(btemp+11)^0,c
  8803   010358  0E0B               	movlw	11
  8804   01035A                     u1785:
  8805   01035A  90D8               	bcf	status,0,c
  8806   01035C  3609               	rlcf	(btemp+8)^0,f,c
  8807   01035E  360A               	rlcf	(btemp+9)^0,f,c
  8808   010360  360B               	rlcf	(btemp+10)^0,f,c
  8809   010362  360C               	rlcf	(btemp+11)^0,f,c
  8810   010364  2EE8               	decfsz	wreg,f,c
  8811   010366  EFAD  F081         	goto	u1785
  8812   01036A  5005               	movf	(btemp+4)^0,w,c
  8813   01036C  1009               	iorwf	(btemp+8)^0,w,c
  8814   01036E  6E01               	movwf	btemp^0,c
  8815   010370  5006               	movf	(btemp+5)^0,w,c
  8816   010372  100A               	iorwf	(btemp+9)^0,w,c
  8817   010374  6E02               	movwf	(btemp+1)^0,c
  8818   010376  5007               	movf	(btemp+6)^0,w,c
  8819   010378  100B               	iorwf	(btemp+10)^0,w,c
  8820   01037A  6E03               	movwf	(btemp+2)^0,c
  8821   01037C  5008               	movf	(btemp+7)^0,w,c
  8822   01037E  100C               	iorwf	(btemp+11)^0,w,c
  8823   010380  6E04               	movwf	(btemp+3)^0,c
  8824                           
  8825                           ;stkvar	_temp32 @ sp[(-114)+0]
  8826   010382  0E8E               	movlw	-114
  8827   010384  C001  FFE3         	movff	btemp,plusw1
  8828   010388  0E8F               	movlw	-113
  8829   01038A  C002  FFE3         	movff	btemp+1,plusw1
  8830   01038E  0E90               	movlw	-112
  8831   010390  C003  FFE3         	movff	btemp+2,plusw1
  8832   010394  0E91               	movlw	-111
  8833   010396  C004  FFE3         	movff	btemp+3,plusw1
  8834   01039A                     
  8835                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  8836                           ;stkvar	_temp32 @ sp[(-114)+0]
  8837   01039A  50E1               	movf	fsr1l,w,c
  8838   01039C  0F8E               	addlw	-114
  8839   01039E  6ED9               	movwf	fsr2l,c
  8840   0103A0  50E2               	movf	fsr1h,w,c
  8841   0103A2  6EDA               	movwf	fsr2h,c
  8842   0103A4  0EFF               	movlw	255
  8843   0103A6  22DA               	addwfc	fsr2h,f,c
  8844   0103A8  0EFF               	movlw	255
  8845   0103AA  16DE               	andwf	postinc2,f,c
  8846   0103AC  0EFF               	movlw	255
  8847   0103AE  16DE               	andwf	postinc2,f,c
  8848   0103B0  0EFF               	movlw	255
  8849   0103B2  16DE               	andwf	postinc2,f,c
  8850   0103B4  0E1F               	movlw	31
  8851   0103B6  16DE               	andwf	postinc2,f,c
  8852   0103B8                     
  8853                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  8854                           ;stkvar	_temp32 @ sp[(-114)+0]
  8855                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8856   0103B8  0E8E               	movlw	-114
  8857   0103BA  CFE3 F001          	movff	plusw1,btemp
  8858   0103BE  0E92               	movlw	-110
  8859   0103C0  C001  FFE3         	movff	btemp,plusw1
  8860   0103C4                     
  8861                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  8862                           ;stkvar	_temp32 @ sp[(-114)+0]
  8863   0103C4  0E8F               	movlw	143
  8864   0103C6  24E1               	addwf	fsr1l,w,c
  8865   0103C8  6ED9               	movwf	fsr2l,c
  8866   0103CA  0EFF               	movlw	255
  8867   0103CC  20E2               	addwfc	fsr1h,w,c
  8868   0103CE  6EDA               	movwf	fsr2h,c
  8869                           
  8870                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8871   0103D0  0E93               	movlw	147
  8872   0103D2  24E1               	addwf	fsr1l,w,c
  8873   0103D4  6EE9               	movwf	fsr0l,c
  8874   0103D6  0EFF               	movlw	255
  8875   0103D8  20E2               	addwfc	fsr1h,w,c
  8876   0103DA  6EEA               	movwf	fsr0h,c
  8877   0103DC  CFDF FFEF          	movff	indf2,indf0
  8878   0103E0                     
  8879                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  8880                           ;stkvar	_temp32 @ sp[(-114)+0]
  8881   0103E0  0E90               	movlw	144
  8882   0103E2  24E1               	addwf	fsr1l,w,c
  8883   0103E4  6ED9               	movwf	fsr2l,c
  8884   0103E6  0EFF               	movlw	255
  8885   0103E8  20E2               	addwfc	fsr1h,w,c
  8886   0103EA  6EDA               	movwf	fsr2h,c
  8887                           
  8888                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8889   0103EC  0E94               	movlw	148
  8890   0103EE  24E1               	addwf	fsr1l,w,c
  8891   0103F0  6EE9               	movwf	fsr0l,c
  8892   0103F2  0EFF               	movlw	255
  8893   0103F4  20E2               	addwfc	fsr1h,w,c
  8894   0103F6  6EEA               	movwf	fsr0h,c
  8895   0103F8  CFDF FFEF          	movff	indf2,indf0
  8896   0103FC                     
  8897                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  8898                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8899   0103FC  0E95               	movlw	149
  8900   0103FE  24E1               	addwf	fsr1l,w,c
  8901   010400  6ED9               	movwf	fsr2l,c
  8902   010402  0EFF               	movlw	255
  8903   010404  20E2               	addwfc	fsr1h,w,c
  8904   010406  6EDA               	movwf	fsr2h,c
  8905                           
  8906                           ;stkvar	_temp32 @ sp[(-114)+0]
  8907   010408  0E91               	movlw	145
  8908   01040A  24E1               	addwf	fsr1l,w,c
  8909   01040C  6EE9               	movwf	fsr0l,c
  8910   01040E  0EFF               	movlw	255
  8911   010410  20E2               	addwfc	fsr1h,w,c
  8912   010412  6EEA               	movwf	fsr0h,c
  8913   010414  50EF               	movf	indf0,w,c
  8914   010416  6E0C               	movwf	(btemp+11)^0,c
  8915                           
  8916                           ;stkvar	_txObj @ sp[(-114)+-3]
  8917   010418  0E8B               	movlw	-117
  8918   01041A  CFE3 F009          	movff	plusw1,btemp+8
  8919   01041E  0E8C               	movlw	-116
  8920   010420  CFE3 F00A          	movff	plusw1,btemp+9
  8921   010424  0E04               	movlw	4
  8922   010426  2409               	addwf	(btemp+8)^0,w,c
  8923   010428  6EE9               	movwf	fsr0l,c
  8924   01042A  0E00               	movlw	0
  8925   01042C  200A               	addwfc	(btemp+9)^0,w,c
  8926   01042E  6EEA               	movwf	fsr0h,c
  8927   010430  50EF               	movf	indf0,w,c
  8928   010432  6E0B               	movwf	(btemp+10)^0,c
  8929   010434  0E05               	movlw	5
  8930   010436  6E01               	movwf	btemp^0,c
  8931   010438                     u1795:
  8932   010438  90D8               	bcf	status,0,c
  8933   01043A  360B               	rlcf	(btemp+10)^0,f,c
  8934   01043C  2E01               	decfsz	btemp^0,f,c
  8935   01043E  EF1C  F082         	goto	u1795
  8936   010442  500B               	movf	(btemp+10)^0,w,c
  8937   010444  100C               	iorwf	(btemp+11)^0,w,c
  8938   010446  6EDF               	movwf	indf2,c
  8939   010448                     l4178:
  8940                           
  8941                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  8942                           ;stkvar	_txObj @ sp[(-114)+-3]
  8943   010448  0E8B               	movlw	-117
  8944   01044A  CFE3 F00B          	movff	plusw1,btemp+10
  8945   01044E  0E8C               	movlw	-116
  8946   010450  CFE3 F00C          	movff	plusw1,btemp+11
  8947   010454  0E06               	movlw	6
  8948   010456  240B               	addwf	(btemp+10)^0,w,c
  8949   010458  6ED9               	movwf	fsr2l,c
  8950   01045A  0E00               	movlw	0
  8951   01045C  200C               	addwfc	(btemp+11)^0,w,c
  8952   01045E  6EDA               	movwf	fsr2h,c
  8953                           
  8954                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8955   010460  0E96               	movlw	150
  8956   010462  24E1               	addwf	fsr1l,w,c
  8957   010464  6EE9               	movwf	fsr0l,c
  8958   010466  0EFF               	movlw	255
  8959   010468  20E2               	addwfc	fsr1h,w,c
  8960   01046A  6EEA               	movwf	fsr0h,c
  8961   01046C  CFDF FFEF          	movff	indf2,indf0
  8962   010470                     
  8963                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  8964                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8965   010470  0E97               	movlw	151
  8966   010472  24E1               	addwf	fsr1l,w,c
  8967   010474  6ED9               	movwf	fsr2l,c
  8968   010476  0EFF               	movlw	255
  8969   010478  20E2               	addwfc	fsr1h,w,c
  8970   01047A  6EDA               	movwf	fsr2h,c
  8971                           
  8972                           ;stkvar	_txObj @ sp[(-114)+-3]
  8973   01047C  0E8B               	movlw	-117
  8974   01047E  CFE3 F00B          	movff	plusw1,btemp+10
  8975   010482  0E8C               	movlw	-116
  8976   010484  CFE3 F00C          	movff	plusw1,btemp+11
  8977   010488  0E07               	movlw	7
  8978   01048A  240B               	addwf	(btemp+10)^0,w,c
  8979   01048C  6EE9               	movwf	fsr0l,c
  8980   01048E  0E00               	movlw	0
  8981   010490  200C               	addwfc	(btemp+11)^0,w,c
  8982   010492  6EEA               	movwf	fsr0h,c
  8983   010494  50EF               	movf	indf0,w,c
  8984   010496  6E0C               	movwf	(btemp+11)^0,c
  8985                           
  8986                           ;stkvar	_txObj @ sp[(-114)+-3]
  8987   010498  0E8B               	movlw	-117
  8988   01049A  CFE3 F009          	movff	plusw1,btemp+8
  8989   01049E  0E8C               	movlw	-116
  8990   0104A0  CFE3 F00A          	movff	plusw1,btemp+9
  8991   0104A4  0E08               	movlw	8
  8992   0104A6  2409               	addwf	(btemp+8)^0,w,c
  8993   0104A8  6EE9               	movwf	fsr0l,c
  8994   0104AA  0E00               	movlw	0
  8995   0104AC  200A               	addwfc	(btemp+9)^0,w,c
  8996   0104AE  6EEA               	movwf	fsr0h,c
  8997   0104B0  50EF               	movf	indf0,w,c
  8998   0104B2  6E0B               	movwf	(btemp+10)^0,c
  8999   0104B4  90D8               	bcf	status,0,c
  9000   0104B6  340B               	rlcf	(btemp+10)^0,w,c
  9001   0104B8  100C               	iorwf	(btemp+11)^0,w,c
  9002   0104BA  6EDF               	movwf	indf2,c
  9003   0104BC                     
  9004                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  9005                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9006   0104BC  0E98               	movlw	152
  9007   0104BE  24E1               	addwf	fsr1l,w,c
  9008   0104C0  6ED9               	movwf	fsr2l,c
  9009   0104C2  0EFF               	movlw	255
  9010   0104C4  20E2               	addwfc	fsr1h,w,c
  9011   0104C6  6EDA               	movwf	fsr2h,c
  9012                           
  9013                           ;stkvar	_txObj @ sp[(-114)+-3]
  9014   0104C8  0E8B               	movlw	-117
  9015   0104CA  CFE3 F00B          	movff	plusw1,btemp+10
  9016   0104CE  0E8C               	movlw	-116
  9017   0104D0  CFE3 F00C          	movff	plusw1,btemp+11
  9018   0104D4  0E08               	movlw	8
  9019   0104D6  240B               	addwf	(btemp+10)^0,w,c
  9020   0104D8  6EE9               	movwf	fsr0l,c
  9021   0104DA  0E00               	movlw	0
  9022   0104DC  200C               	addwfc	(btemp+11)^0,w,c
  9023   0104DE  6EEA               	movwf	fsr0h,c
  9024   0104E0  CFEE F009          	movff	postinc0,btemp+8
  9025   0104E4  CFEE F00A          	movff	postinc0,btemp+9
  9026   0104E8  CFEE F00B          	movff	postinc0,btemp+10
  9027   0104EC  CFEE F00C          	movff	postinc0,btemp+11
  9028   0104F0  0E08               	movlw	8
  9029   0104F2  EF80  F082         	goto	u1800
  9030   0104F6                     u1805:
  9031   0104F6  90D8               	bcf	status,0,c
  9032   0104F8  320C               	rrcf	(btemp+11)^0,f,c
  9033   0104FA  320B               	rrcf	(btemp+10)^0,f,c
  9034   0104FC  320A               	rrcf	(btemp+9)^0,f,c
  9035   0104FE  3209               	rrcf	(btemp+8)^0,f,c
  9036   010500                     u1800:
  9037   010500  2EE8               	decfsz	wreg,f,c
  9038   010502  EF7B  F082         	goto	u1805
  9039   010506  5009               	movf	(btemp+8)^0,w,c
  9040   010508  6EDF               	movwf	indf2,c
  9041   01050A                     
  9042                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  9043                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9044   01050A  0E99               	movlw	153
  9045   01050C  24E1               	addwf	fsr1l,w,c
  9046   01050E  6ED9               	movwf	fsr2l,c
  9047   010510  0EFF               	movlw	255
  9048   010512  20E2               	addwfc	fsr1h,w,c
  9049   010514  6EDA               	movwf	fsr2h,c
  9050                           
  9051                           ;stkvar	_txObj @ sp[(-114)+-3]
  9052   010516  0E8B               	movlw	-117
  9053   010518  CFE3 F00B          	movff	plusw1,btemp+10
  9054   01051C  0E8C               	movlw	-116
  9055   01051E  CFE3 F00C          	movff	plusw1,btemp+11
  9056   010522  0E08               	movlw	8
  9057   010524  240B               	addwf	(btemp+10)^0,w,c
  9058   010526  6EE9               	movwf	fsr0l,c
  9059   010528  0E00               	movlw	0
  9060   01052A  200C               	addwfc	(btemp+11)^0,w,c
  9061   01052C  6EEA               	movwf	fsr0h,c
  9062   01052E  CFEE F009          	movff	postinc0,btemp+8
  9063   010532  CFEE F00A          	movff	postinc0,btemp+9
  9064   010536  CFEE F00B          	movff	postinc0,btemp+10
  9065   01053A  CFEE F00C          	movff	postinc0,btemp+11
  9066   01053E  0E10               	movlw	16
  9067   010540  EFA7  F082         	goto	u1810
  9068   010544                     u1815:
  9069   010544  90D8               	bcf	status,0,c
  9070   010546  320C               	rrcf	(btemp+11)^0,f,c
  9071   010548  320B               	rrcf	(btemp+10)^0,f,c
  9072   01054A  320A               	rrcf	(btemp+9)^0,f,c
  9073   01054C  3209               	rrcf	(btemp+8)^0,f,c
  9074   01054E                     u1810:
  9075   01054E  2EE8               	decfsz	wreg,f,c
  9076   010550  EFA2  F082         	goto	u1815
  9077   010554  5009               	movf	(btemp+8)^0,w,c
  9078   010556  6EDF               	movwf	indf2,c
  9079   010558                     
  9080                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9081                           ;stkvar	_i @ sp[(-114)+112]
  9082   010558  0EFE               	movlw	-2
  9083   01055A  6AE3               	clrf	plusw1,c
  9084   01055C  EFD7  F082         	goto	l4192
  9085   010560                     l4188:
  9086                           
  9087                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9088                           ;stkvar	_i @ sp[(-114)+112]
  9089   010560  0EFE               	movlw	-2
  9090   010562  CFE3 F00C          	movff	plusw1,btemp+11
  9091                           
  9092                           ;stkvar	_txd @ sp[(-114)+-5]
  9093   010566  0E89               	movlw	-119
  9094   010568  CFE3 F009          	movff	plusw1,btemp+8
  9095   01056C  0E8A               	movlw	-118
  9096   01056E  CFE3 F00A          	movff	plusw1,btemp+9
  9097   010572  500C               	movf	(btemp+11)^0,w,c
  9098   010574  2409               	addwf	(btemp+8)^0,w,c
  9099   010576  6ED9               	movwf	fsr2l,c
  9100   010578  0E00               	movlw	0
  9101   01057A  200A               	addwfc	(btemp+9)^0,w,c
  9102   01057C  6EDA               	movwf	fsr2h,c
  9103                           
  9104                           ;stkvar	_i @ sp[(-114)+112]
  9105   01057E  0EFE               	movlw	-2
  9106   010580  50E3               	movf	plusw1,w,c
  9107   010582  6E0B               	movwf	(btemp+10)^0,c
  9108   010584  6A0C               	clrf	(btemp+11)^0,c
  9109   010586  0E08               	movlw	8
  9110   010588  260B               	addwf	(btemp+10)^0,f,c
  9111   01058A  0E00               	movlw	0
  9112   01058C  220C               	addwfc	(btemp+11)^0,f,c
  9113                           
  9114                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9115   01058E  0E92               	movlw	146
  9116   010590  24E1               	addwf	fsr1l,w,c
  9117   010592  6E09               	movwf	(btemp+8)^0,c
  9118   010594  0EFF               	movlw	255
  9119   010596  20E2               	addwfc	fsr1h,w,c
  9120   010598  6E0A               	movwf	(btemp+9)^0,c
  9121   01059A  500B               	movf	(btemp+10)^0,w,c
  9122   01059C  2409               	addwf	(btemp+8)^0,w,c
  9123   01059E  6EE9               	movwf	fsr0l,c
  9124   0105A0  500C               	movf	(btemp+11)^0,w,c
  9125   0105A2  200A               	addwfc	(btemp+9)^0,w,c
  9126   0105A4  6EEA               	movwf	fsr0h,c
  9127   0105A6  CFDF FFEF          	movff	indf2,indf0
  9128   0105AA                     
  9129                           ;can/can.c: 790:     }
  9130                           ;stkvar	_i @ sp[(-114)+112]
  9131   0105AA  0EFE               	movlw	-2
  9132   0105AC  2AE3               	incf	plusw1,f,c
  9133   0105AE                     l4192:
  9134                           
  9135                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9136                           ;stkvar	_i @ sp[(-114)+112]
  9137   0105AE  0EFE               	movlw	-2
  9138   0105B0  CFE3 F00C          	movff	plusw1,btemp+11
  9139   0105B4  C00C  F005         	movff	btemp+11,btemp+4
  9140   0105B8  6A06               	clrf	(btemp+5)^0,c
  9141   0105BA  6A07               	clrf	(btemp+6)^0,c
  9142   0105BC  6A08               	clrf	(btemp+7)^0,c
  9143   0105BE  0E85               	movlw	-123
  9144   0105C0  50E3               	movf	plusw1,w,c
  9145   0105C2  5C05               	subwf	(btemp+4)^0,w,c
  9146   0105C4  0E86               	movlw	-122
  9147   0105C6  50E3               	movf	plusw1,w,c
  9148   0105C8  5806               	subwfb	(btemp+5)^0,w,c
  9149   0105CA  0E87               	movlw	-121
  9150   0105CC  50E3               	movf	plusw1,w,c
  9151   0105CE  5807               	subwfb	(btemp+6)^0,w,c
  9152   0105D0  0E88               	movlw	-120
  9153   0105D2  50E3               	movf	plusw1,w,c
  9154   0105D4  5808               	subwfb	(btemp+7)^0,w,c
  9155   0105D6  A0D8               	btfss	status,0,c
  9156   0105D8  EFF0  F082         	goto	u1821
  9157   0105DC  EFF2  F082         	goto	u1820
  9158   0105E0                     u1821:
  9159   0105E0  EFB0  F082         	goto	l4188
  9160   0105E4                     u1820:
  9161   0105E4                     
  9162                           ;can/can.c: 793:     uint16_t n = 0;
  9163                           ;stkvar	_n @ sp[(-114)+109]
  9164   0105E4  0EFB               	movlw	-5
  9165   0105E6  6AE3               	clrf	plusw1,c
  9166   0105E8  0EFC               	movlw	-4
  9167   0105EA  6AE3               	clrf	plusw1,c
  9168   0105EC                     
  9169                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9170                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9171   0105EC  0E85               	movlw	-123
  9172   0105EE  CFE3 F00C          	movff	plusw1,btemp+11
  9173   0105F2  0E03               	movlw	3
  9174   0105F4  160C               	andwf	(btemp+11)^0,f,c
  9175   0105F6  B4D8               	btfsc	status,2,c
  9176   0105F8  EF00  F083         	goto	u1831
  9177   0105FC  EF02  F083         	goto	u1830
  9178   010600                     u1831:
  9179   010600  EF51  F083         	goto	l4212
  9180   010604                     u1830:
  9181   010604                     
  9182                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9183                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9184   010604  0E85               	movlw	-123
  9185   010606  CFE3 F00B          	movff	plusw1,btemp+10
  9186   01060A  0E86               	movlw	-122
  9187   01060C  CFE3 F00C          	movff	plusw1,btemp+11
  9188   010610  0E03               	movlw	3
  9189   010612  160B               	andwf	(btemp+10)^0,f,c
  9190   010614  0E00               	movlw	0
  9191   010616  160C               	andwf	(btemp+11)^0,f,c
  9192   010618  500B               	movf	(btemp+10)^0,w,c
  9193   01061A  0804               	sublw	4
  9194   01061C  6E09               	movwf	(btemp+8)^0,c
  9195   01061E  500C               	movf	(btemp+11)^0,w,c
  9196   010620  A0D8               	btfss	status,0,c
  9197   010622  2AE8               	incf	wreg,f,c
  9198   010624  0800               	sublw	0
  9199   010626  6E0A               	movwf	(btemp+9)^0,c
  9200                           
  9201                           ;stkvar	_n @ sp[(-114)+109]
  9202   010628  0EFB               	movlw	-5
  9203   01062A  C009  FFE3         	movff	btemp+8,plusw1
  9204   01062E  0EFC               	movlw	-4
  9205   010630  C00A  FFE3         	movff	btemp+9,plusw1
  9206   010634                     
  9207                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9208   010634  0E08               	movlw	8
  9209   010636  6E0C               	movwf	(btemp+11)^0,c
  9210                           
  9211                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9212   010638  0E85               	movlw	-123
  9213   01063A  50E3               	movf	plusw1,w,c
  9214   01063C  240C               	addwf	(btemp+11)^0,w,c
  9215   01063E  6E0B               	movwf	(btemp+10)^0,c
  9216                           
  9217                           ;stkvar	_i @ sp[(-114)+112]
  9218   010640  0EFE               	movlw	-2
  9219   010642  C00B  FFE3         	movff	btemp+10,plusw1
  9220   010646                     
  9221                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9222                           ;stkvar	_j @ sp[(-114)+113]
  9223   010646  0EFF               	movlw	-1
  9224   010648  6AE3               	clrf	plusw1,c
  9225   01064A  EF40  F083         	goto	l4210
  9226   01064E                     l4206:
  9227                           
  9228                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9229                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9230   01064E  0E92               	movlw	146
  9231   010650  24E1               	addwf	fsr1l,w,c
  9232   010652  6E0B               	movwf	(btemp+10)^0,c
  9233   010654  0EFF               	movlw	255
  9234   010656  20E2               	addwfc	fsr1h,w,c
  9235   010658  6E0C               	movwf	(btemp+11)^0,c
  9236                           
  9237                           ;stkvar	_i @ sp[(-114)+112]
  9238   01065A  0EFE               	movlw	-2
  9239   01065C  50E3               	movf	plusw1,w,c
  9240   01065E  260B               	addwf	(btemp+10)^0,f,c
  9241   010660  0E00               	movlw	0
  9242   010662  220C               	addwfc	(btemp+11)^0,f,c
  9243                           
  9244                           ;stkvar	_j @ sp[(-114)+113]
  9245   010664  0EFF               	movlw	-1
  9246   010666  50E3               	movf	plusw1,w,c
  9247   010668  260B               	addwf	(btemp+10)^0,f,c
  9248   01066A  0E00               	movlw	0
  9249   01066C  220C               	addwfc	(btemp+11)^0,f,c
  9250   01066E  0E08               	movlw	8
  9251   010670  240B               	addwf	(btemp+10)^0,w,c
  9252   010672  6ED9               	movwf	fsr2l,c
  9253   010674  0E00               	movlw	0
  9254   010676  200C               	addwfc	(btemp+11)^0,w,c
  9255   010678  6EDA               	movwf	fsr2h,c
  9256   01067A  6ADF               	clrf	indf2,c
  9257   01067C                     
  9258                           ;can/can.c: 803:         }
  9259                           ;stkvar	_j @ sp[(-114)+113]
  9260   01067C  0EFF               	movlw	-1
  9261   01067E  2AE3               	incf	plusw1,f,c
  9262   010680                     l4210:
  9263                           
  9264                           ;stkvar	_n @ sp[(-114)+109]
  9265                           ;stkvar	_j @ sp[(-114)+113]
  9266   010680  0EFF               	movlw	-1
  9267   010682  50E3               	movf	plusw1,w,c
  9268   010684  6E0B               	movwf	(btemp+10)^0,c
  9269   010686  6A0C               	clrf	(btemp+11)^0,c
  9270   010688  0EFB               	movlw	-5
  9271   01068A  50E3               	movf	plusw1,w,c
  9272   01068C  5C0B               	subwf	(btemp+10)^0,w,c
  9273   01068E  0EFC               	movlw	-4
  9274   010690  50E3               	movf	plusw1,w,c
  9275   010692  580C               	subwfb	(btemp+11)^0,w,c
  9276   010694  A0D8               	btfss	status,0,c
  9277   010696  EF4F  F083         	goto	u1841
  9278   01069A  EF51  F083         	goto	u1840
  9279   01069E                     u1841:
  9280   01069E  EF27  F083         	goto	l4206
  9281   0106A2                     u1840:
  9282   0106A2                     l4212:
  9283                           
  9284                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9285                           ;stkvar	_n @ sp[(-114)+109]
  9286                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9287   0106A2  0E85               	movlw	-123
  9288   0106A4  CFE3 F00B          	movff	plusw1,btemp+10
  9289   0106A8  0E86               	movlw	-122
  9290   0106AA  CFE3 F00C          	movff	plusw1,btemp+11
  9291   0106AE  0EFB               	movlw	-5
  9292   0106B0  50E3               	movf	plusw1,w,c
  9293   0106B2  260B               	addwf	(btemp+10)^0,f,c
  9294   0106B4  0EFC               	movlw	-4
  9295   0106B6  50E3               	movf	plusw1,w,c
  9296   0106B8  220C               	addwfc	(btemp+11)^0,f,c
  9297   0106BA  0E08               	movlw	8
  9298   0106BC  260B               	addwf	(btemp+10)^0,f,c
  9299   0106BE  0E00               	movlw	0
  9300   0106C0  220C               	addwfc	(btemp+11)^0,f,c
  9301   0106C2  C00B  FFE6         	movff	btemp+10,postinc1
  9302   0106C6  C00C  FFE6         	movff	btemp+11,postinc1
  9303                           
  9304                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9305   0106CA  0E90               	movlw	144
  9306   0106CC  24E1               	addwf	fsr1l,w,c
  9307   0106CE  6E01               	movwf	btemp^0,c
  9308   0106D0  0EFF               	movlw	255
  9309   0106D2  20E2               	addwfc	fsr1h,w,c
  9310   0106D4  6E02               	movwf	(btemp+1)^0,c
  9311   0106D6  C001  FFE6         	movff	btemp,postinc1
  9312   0106DA  C002  FFE6         	movff	btemp+1,postinc1
  9313                           
  9314                           ;stkvar	_a @ sp[(-118)+97]
  9315   0106DE  0EEB               	movlw	-21
  9316   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9317   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9318   0106E8  EC1F  F099         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9319                           
  9320                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9321   0106EC  0EFD               	movlw	-3
  9322   0106EE  C001  FFE3         	movff	btemp,plusw1
  9323   0106F2                     
  9324                           ;can/can.c: 807:     if (spiTransferError) {
  9325                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9326   0106F2  0EFD               	movlw	-3
  9327   0106F4  50E3               	movf	plusw1,w,c
  9328   0106F6  B4D8               	btfsc	status,2,c
  9329   0106F8  EF80  F083         	goto	u1851
  9330   0106FC  EF82  F083         	goto	u1850
  9331   010700                     u1851:
  9332   010700  EF86  F083         	goto	l4220
  9333   010704                     u1850:
  9334   010704                     
  9335                           ;can/can.c: 808:         return -4;
  9336   010704  0EFC               	movlw	252
  9337   010706  6E01               	movwf	btemp^0,c
  9338   010708  EFA1  F083         	goto	l264
  9339   01070C                     l4220:
  9340                           
  9341                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9342                           ;stkvar	_flush @ sp[(-114)+-10]
  9343   01070C  0E84               	movlw	-124
  9344   01070E  50E3               	movf	plusw1,w,c
  9345   010710  6EE6               	movwf	postinc1,c
  9346                           
  9347                           ;stkvar	_channel @ sp[(-115)+-1]
  9348   010712  0E8C               	movlw	-116
  9349   010714  50E3               	movf	plusw1,w,c
  9350   010716  6EE6               	movwf	postinc1,c
  9351   010718  EC5D  F09F         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9352                           
  9353                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9354   01071C  0EFD               	movlw	-3
  9355   01071E  C001  FFE3         	movff	btemp,plusw1
  9356   010722                     
  9357                           ;can/can.c: 813:     if (spiTransferError) {
  9358                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9359   010722  0EFD               	movlw	-3
  9360   010724  50E3               	movf	plusw1,w,c
  9361   010726  B4D8               	btfsc	status,2,c
  9362   010728  EF98  F083         	goto	u1861
  9363   01072C  EF9A  F083         	goto	u1860
  9364   010730                     u1861:
  9365   010730  EF9E  F083         	goto	l4228
  9366   010734                     u1860:
  9367   010734                     
  9368                           ;can/can.c: 814:         return -5;
  9369   010734  0EFB               	movlw	251
  9370   010736  6E01               	movwf	btemp^0,c
  9371   010738  EFA1  F083         	goto	l264
  9372   01073C                     l4228:
  9373                           
  9374                           ;can/can.c: 817:     return spiTransferError;
  9375                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9376   01073C  0EFD               	movlw	-3
  9377   01073E  CFE3 F001          	movff	plusw1,btemp
  9378   010742                     l264:
  9379                           
  9380                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9381   010742  0E84               	movlw	132
  9382   010744  26E1               	addwf	fsr1l,f,c
  9383   010746  0EFF               	movlw	255
  9384   010748  22E2               	addwfc	fsr1h,f,c
  9385   01074A  0012               	return		;funcret
  9386   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9387                           	callstack 0
  9388                           
  9389 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9390 ;; Defined at:
  9391 ;;		line 383 in file "can/can.c"
  9392 ;; Parameters:    Size  Location     Type
  9393 ;;  address         2  [STACK] unsigned short 
  9394 ;;  txd             2  [STACK] PTR unsigned char 
  9395 ;;		 -> txd(200), txBuffer(76), 
  9396 ;;  nBytes          2  [STACK] unsigned short 
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;  i               2  [STACK] unsigned short 
  9399 ;;  spiTransferS    2  [STACK] unsigned short 
  9400 ;;  spiTransferE    1  [STACK] char 
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1  [STACK] char 
  9403 ;; Registers used:
  9404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9414 ;;Total ram usage:        0 bytes
  9415 ;; Hardware stack levels used: 1
  9416 ;; Hardware stack levels required when called: 8
  9417 ;; This function calls:
  9418 ;;		_SpiTransfer
  9419 ;; This function is called by:
  9420 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9421 ;; This function uses a reentrant model
  9422 ;;
  9423                           
  9424                           	psect	text26
  9425   01323E                     __ptext26:
  9426                           	callstack 0
  9427   01323E                     _DRV_CANFDSPI_WriteByteArray:
  9428                           	callstack 0
  9429                           
  9430                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9431   01323E  0E05               	movlw	5
  9432   013240  26E1               	addwf	fsr1l,f,c
  9433   013242  0E00               	movlw	0
  9434   013244  22E2               	addwfc	fsr1h,f,c
  9435   013246                     
  9436                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9437                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9438   013246  0EF5               	movlw	-11
  9439   013248  50E3               	movf	plusw1,w,c
  9440   01324A  0F02               	addlw	2
  9441   01324C  6E0B               	movwf	(btemp+10)^0,c
  9442   01324E  0EF6               	movlw	-10
  9443   013250  CFE3 F00C          	movff	plusw1,btemp+11
  9444   013254  0E00               	movlw	0
  9445   013256  220C               	addwfc	(btemp+11)^0,f,c
  9446                           
  9447                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9448   013258  0EFD               	movlw	-3
  9449   01325A  C00B  FFE3         	movff	btemp+10,plusw1
  9450   01325E  0EFE               	movlw	-2
  9451   013260  C00C  FFE3         	movff	btemp+11,plusw1
  9452   013264                     
  9453                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9454                           ;stkvar	_address @ sp[(-5)+-2]
  9455   013264  0EFA               	movlw	250
  9456   013266  24E1               	addwf	fsr1l,w,c
  9457   013268  6ED9               	movwf	fsr2l,c
  9458   01326A  0EFF               	movlw	255
  9459   01326C  20E2               	addwfc	fsr1h,w,c
  9460   01326E  6EDA               	movwf	fsr2h,c
  9461   013270  50DF               	movf	indf2,w,c
  9462   013272  0B0F               	andlw	15
  9463   013274  0F20               	addlw	32
  9464   013276  0101               	movlb	1	; () banked
  9465   013278  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9466   01327A                     
  9467                           ; BSR set to: 1
  9468                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9469                           ;stkvar	_address @ sp[(-5)+-2]
  9470   01327A  0EF9               	movlw	-7
  9471   01327C  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9472   013280                     
  9473                           ; BSR set to: 1
  9474                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9475   013280  0E02               	movlw	2
  9476   013282  6E0B               	movwf	(btemp+10)^0,c
  9477   013284  0E00               	movlw	0
  9478   013286  6E0C               	movwf	(btemp+11)^0,c
  9479                           
  9480                           ;stkvar	_i @ sp[(-5)+0]
  9481   013288  0EFB               	movlw	-5
  9482   01328A  C00B  FFE3         	movff	btemp+10,plusw1
  9483   01328E  0EFC               	movlw	-4
  9484   013290  C00C  FFE3         	movff	btemp+11,plusw1
  9485   013294  EF7B  F099         	goto	l4018
  9486   013298                     l4014:
  9487                           
  9488                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9489                           ;stkvar	_i @ sp[(-5)+0]
  9490                           ;stkvar	_txd @ sp[(-5)+-4]
  9491   013298  0EF7               	movlw	-9
  9492   01329A  CFE3 F00B          	movff	plusw1,btemp+10
  9493   01329E  0EF8               	movlw	-8
  9494   0132A0  CFE3 F00C          	movff	plusw1,btemp+11
  9495   0132A4  0EFB               	movlw	-5
  9496   0132A6  50E3               	movf	plusw1,w,c
  9497   0132A8  260B               	addwf	(btemp+10)^0,f,c
  9498   0132AA  0EFC               	movlw	-4
  9499   0132AC  50E3               	movf	plusw1,w,c
  9500   0132AE  220C               	addwfc	(btemp+11)^0,f,c
  9501   0132B0  0EFE               	movlw	254
  9502   0132B2  240B               	addwf	(btemp+10)^0,w,c
  9503   0132B4  6ED9               	movwf	fsr2l,c
  9504   0132B6  0EFF               	movlw	255
  9505   0132B8  200C               	addwfc	(btemp+11)^0,w,c
  9506   0132BA  6EDA               	movwf	fsr2h,c
  9507                           
  9508                           ;stkvar	_i @ sp[(-5)+0]
  9509   0132BC  0EFB               	movlw	-5
  9510   0132BE  CFE3 F00B          	movff	plusw1,btemp+10
  9511   0132C2  0EFC               	movlw	-4
  9512   0132C4  CFE3 F00C          	movff	plusw1,btemp+11
  9513   0132C8  0E00               	movlw	low _spiTransmitBuffer
  9514   0132CA  240B               	addwf	(btemp+10)^0,w,c
  9515   0132CC  6EE9               	movwf	fsr0l,c
  9516   0132CE  0E01               	movlw	high _spiTransmitBuffer
  9517   0132D0  200C               	addwfc	(btemp+11)^0,w,c
  9518   0132D2  6EEA               	movwf	fsr0h,c
  9519   0132D4  CFDF FFEF          	movff	indf2,indf0
  9520   0132D8                     
  9521                           ;can/can.c: 397:     }
  9522                           ;stkvar	_i @ sp[(-5)+0]
  9523   0132D8  0EFB               	movlw	-5
  9524   0132DA  50E3               	movf	plusw1,w,c
  9525   0132DC  0F01               	addlw	1
  9526   0132DE  6E01               	movwf	btemp^0,c
  9527   0132E0  0EFB               	movlw	-5
  9528   0132E2  C001  FFE3         	movff	btemp,plusw1
  9529   0132E6  6A01               	clrf	btemp^0,c
  9530   0132E8  0EFC               	movlw	-4
  9531   0132EA  50E3               	movf	plusw1,w,c
  9532   0132EC  2001               	addwfc	btemp^0,w,c
  9533   0132EE  6E01               	movwf	btemp^0,c
  9534   0132F0  0EFC               	movlw	-4
  9535   0132F2  C001  FFE3         	movff	btemp,plusw1
  9536   0132F6                     l4018:
  9537                           
  9538                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9539   0132F6  0EFD               	movlw	-3
  9540   0132F8  CFE3 F00B          	movff	plusw1,btemp+10
  9541   0132FC  0EFE               	movlw	-2
  9542   0132FE  CFE3 F00C          	movff	plusw1,btemp+11
  9543                           
  9544                           ;stkvar	_i @ sp[(-5)+0]
  9545   013302  0EFB               	movlw	-5
  9546   013304  CFE3 F009          	movff	plusw1,btemp+8
  9547   013308  0EFC               	movlw	-4
  9548   01330A  CFE3 F00A          	movff	plusw1,btemp+9
  9549   01330E  500B               	movf	(btemp+10)^0,w,c
  9550   013310  5C09               	subwf	(btemp+8)^0,w,c
  9551   013312  500C               	movf	(btemp+11)^0,w,c
  9552   013314  580A               	subwfb	(btemp+9)^0,w,c
  9553   013316  A0D8               	btfss	status,0,c
  9554   013318  EF90  F099         	goto	u1621
  9555   01331C  EF92  F099         	goto	u1620
  9556   013320                     u1621:
  9557   013320  EF4C  F099         	goto	l4014
  9558   013324                     u1620:
  9559   013324                     
  9560                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  9561                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9562   013324  0EFD               	movlw	-3
  9563   013326  CFE3 FFE6          	movff	plusw1,postinc1
  9564   01332A  CFE3 FFE6          	movff	plusw1,postinc1
  9565   01332E  0E00               	movlw	low _spiReceiveBuffer
  9566   013330  6EE6               	movwf	postinc1,c
  9567   013332  0E02               	movlw	high _spiReceiveBuffer
  9568   013334  6EE6               	movwf	postinc1,c
  9569   013336  0E00               	movlw	low _spiTransmitBuffer
  9570   013338  6EE6               	movwf	postinc1,c
  9571   01333A  0E01               	movlw	high _spiTransmitBuffer
  9572   01333C  6EE6               	movwf	postinc1,c
  9573   01333E  EC39  F09D         	call	_SpiTransfer	;wreg free
  9574                           
  9575                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9576   013342  0EFF               	movlw	-1
  9577   013344  C001  FFE3         	movff	btemp,plusw1
  9578   013348                     
  9579                           ;can/can.c: 401:     return spiTransferError;
  9580                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9581   013348  0EFF               	movlw	-1
  9582   01334A  CFE3 F001          	movff	plusw1,btemp
  9583   01334E                     
  9584                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9585   01334E  0EF5               	movlw	245
  9586   013350  26E1               	addwf	fsr1l,f,c
  9587   013352  0EFF               	movlw	255
  9588   013354  22E2               	addwfc	fsr1h,f,c
  9589   013356  0012               	return		;funcret
  9590   013358                     __end_of_DRV_CANFDSPI_WriteByteArray:
  9591                           	callstack 0
  9592                           
  9593 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  9594 ;; Defined at:
  9595 ;;		line 880 in file "can/can.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;  channel         1  [STACK] enum E5287
  9598 ;;  flush           1  [STACK] _Bool 
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  9601 ;;  a               2  [STACK] unsigned short 
  9602 ;;  spiTransferE    1  [STACK] char 
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  1  [STACK] char 
  9605 ;; Registers used:
  9606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;Total ram usage:        0 bytes
  9617 ;; Hardware stack levels used: 1
  9618 ;; Hardware stack levels required when called: 9
  9619 ;; This function calls:
  9620 ;;		_DRV_CANFDSPI_WriteByte
  9621 ;; This function is called by:
  9622 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9623 ;; This function uses a reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text27
  9627   013EBA                     __ptext27:
  9628                           	callstack 0
  9629   013EBA                     _DRV_CANFDSPI_TransmitChannelUpdate:
  9630                           	callstack 0
  9631                           
  9632                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9633   013EBA  0E08               	movlw	8
  9634   013EBC  26E1               	addwf	fsr1l,f,c
  9635   013EBE  0E00               	movlw	0
  9636   013EC0  22E2               	addwfc	fsr1h,f,c
  9637   013EC2                     
  9638                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  9639                           ;stkvar	_channel @ sp[(-8)+-1]
  9640   013EC2  0EF7               	movlw	-9
  9641   013EC4  50E3               	movf	plusw1,w,c
  9642   013EC6  0D0C               	mullw	12
  9643   013EC8  0E51               	movlw	81
  9644   013ECA  26F3               	addwf	243,f,c
  9645   013ECC  0E00               	movlw	0
  9646   013ECE  22F4               	addwfc	244,f,c
  9647                           
  9648                           ;stkvar	_a @ sp[(-8)+5]
  9649   013ED0  0EFD               	movlw	-3
  9650   013ED2  CFF3 FFE3          	movff	prodl,plusw1
  9651   013ED6  0EFE               	movlw	-2
  9652   013ED8  CFF4 FFE3          	movff	prodh,plusw1
  9653   013EDC                     
  9654                           ;can/can.c: 889:     ciFifoCon.word = 0;
  9655                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9656   013EDC  0EF8               	movlw	-8
  9657   013EDE  6AE3               	clrf	plusw1,c
  9658   013EE0  0EF9               	movlw	-7
  9659   013EE2  6AE3               	clrf	plusw1,c
  9660   013EE4  0EFA               	movlw	-6
  9661   013EE6  6AE3               	clrf	plusw1,c
  9662   013EE8  0EFB               	movlw	-5
  9663   013EEA  6AE3               	clrf	plusw1,c
  9664   013EEC                     
  9665                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  9666                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9667   013EEC  0EF9               	movlw	249
  9668   013EEE  24E1               	addwf	fsr1l,w,c
  9669   013EF0  6ED9               	movwf	fsr2l,c
  9670   013EF2  0EFF               	movlw	255
  9671   013EF4  20E2               	addwfc	fsr1h,w,c
  9672   013EF6  6EDA               	movwf	fsr2h,c
  9673   013EF8  80DF               	bsf	indf2,0,c
  9674   013EFA                     
  9675                           ;can/can.c: 893:     if (flush) {
  9676                           ;stkvar	_flush @ sp[(-8)+-2]
  9677   013EFA  0EF6               	movlw	-10
  9678   013EFC  50E3               	movf	plusw1,w,c
  9679   013EFE  B4D8               	btfsc	status,2,c
  9680   013F00  EF84  F09F         	goto	u1601
  9681   013F04  EF86  F09F         	goto	u1600
  9682   013F08                     u1601:
  9683   013F08  EF8D  F09F         	goto	l3974
  9684   013F0C                     u1600:
  9685   013F0C                     
  9686                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  9687                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9688   013F0C  0EF9               	movlw	249
  9689   013F0E  24E1               	addwf	fsr1l,w,c
  9690   013F10  6ED9               	movwf	fsr2l,c
  9691   013F12  0EFF               	movlw	255
  9692   013F14  20E2               	addwfc	fsr1h,w,c
  9693   013F16  6EDA               	movwf	fsr2h,c
  9694   013F18  82DF               	bsf	indf2,1,c
  9695   013F1A                     l3974:
  9696                           
  9697                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  9698                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9699   013F1A  0EF9               	movlw	249
  9700   013F1C  24E1               	addwf	fsr1l,w,c
  9701   013F1E  6ED9               	movwf	fsr2l,c
  9702   013F20  0EFF               	movlw	255
  9703   013F22  20E2               	addwfc	fsr1h,w,c
  9704   013F24  6EDA               	movwf	fsr2h,c
  9705   013F26  50DF               	movf	indf2,w,c
  9706   013F28  6EE6               	movwf	postinc1,c
  9707                           
  9708                           ;stkvar	_a @ sp[(-9)+5]
  9709   013F2A  0EFC               	movlw	-4
  9710   013F2C  CFE3 FFE6          	movff	plusw1,postinc1
  9711   013F30  CFE3 FFE6          	movff	plusw1,postinc1
  9712   013F34  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9713                           
  9714                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9715   013F38  0EFF               	movlw	-1
  9716   013F3A  C001  FFE3         	movff	btemp,plusw1
  9717   013F3E                     
  9718                           ;can/can.c: 898:     if (spiTransferError) {
  9719                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9720   013F3E  0EFF               	movlw	-1
  9721   013F40  50E3               	movf	plusw1,w,c
  9722   013F42  B4D8               	btfsc	status,2,c
  9723   013F44  EFA6  F09F         	goto	u1611
  9724   013F48  EFA8  F09F         	goto	u1610
  9725   013F4C                     u1611:
  9726   013F4C  EFAC  F09F         	goto	l3982
  9727   013F50                     u1610:
  9728   013F50                     
  9729                           ;can/can.c: 899:         return -1;
  9730   013F50  0EFF               	movlw	255
  9731   013F52  6E01               	movwf	btemp^0,c
  9732   013F54  EFAF  F09F         	goto	l293
  9733   013F58                     l3982:
  9734                           
  9735                           ;can/can.c: 902:     return spiTransferError;
  9736                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9737   013F58  0EFF               	movlw	-1
  9738   013F5A  CFE3 F001          	movff	plusw1,btemp
  9739   013F5E                     l293:
  9740                           
  9741                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9742   013F5E  0EF6               	movlw	246
  9743   013F60  26E1               	addwf	fsr1l,f,c
  9744   013F62  0EFF               	movlw	255
  9745   013F64  22E2               	addwfc	fsr1h,f,c
  9746   013F66  0012               	return		;funcret
  9747   013F68                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9748                           	callstack 0
  9749                           
  9750 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9751 ;; Defined at:
  9752 ;;		line 405 in file "can/can.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  address         2  [STACK] unsigned short 
  9755 ;;  rxd             2  [STACK] PTR unsigned long 
  9756 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9757 ;;		 -> fifoReg(12), 
  9758 ;;  nWords          2  [STACK] unsigned short 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  w               4  [STACK] struct _REG_t
  9761 ;;  i               2  [STACK] unsigned short 
  9762 ;;  j               2  [STACK] unsigned short 
  9763 ;;  spiTransferS    2  [STACK] unsigned short 
  9764 ;;  n               2  [STACK] unsigned short 
  9765 ;;  spiTransferE    1  [STACK] char 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1  [STACK] char 
  9768 ;; Registers used:
  9769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;Total ram usage:        0 bytes
  9780 ;; Hardware stack levels used: 1
  9781 ;; Hardware stack levels required when called: 8
  9782 ;; This function calls:
  9783 ;;		_SpiTransfer
  9784 ;; This function is called by:
  9785 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9786 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9787 ;; This function uses a reentrant model
  9788 ;;
  9789                           
  9790                           	psect	text28
  9791   0114B2                     __ptext28:
  9792                           	callstack 0
  9793   0114B2                     _DRV_CANFDSPI_ReadWordArray:
  9794                           	callstack 0
  9795                           
  9796                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  9797   0114B2  0E0D               	movlw	13
  9798   0114B4  26E1               	addwf	fsr1l,f,c
  9799   0114B6  0E00               	movlw	0
  9800   0114B8  22E2               	addwfc	fsr1h,f,c
  9801   0114BA                     
  9802                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
  9803                           ;stkvar	_nWords @ sp[(-13)+-6]
  9804   0114BA  0EED               	movlw	-19
  9805   0114BC  CFE3 F00B          	movff	plusw1,btemp+10
  9806   0114C0  0EEE               	movlw	-18
  9807   0114C2  CFE3 F00C          	movff	plusw1,btemp+11
  9808   0114C6  90D8               	bcf	status,0,c
  9809   0114C8  360B               	rlcf	(btemp+10)^0,f,c
  9810   0114CA  360C               	rlcf	(btemp+11)^0,f,c
  9811   0114CC  90D8               	bcf	status,0,c
  9812   0114CE  360B               	rlcf	(btemp+10)^0,f,c
  9813   0114D0  360C               	rlcf	(btemp+11)^0,f,c
  9814   0114D2  0E02               	movlw	2
  9815   0114D4  260B               	addwf	(btemp+10)^0,f,c
  9816   0114D6  0E00               	movlw	0
  9817   0114D8  220C               	addwfc	(btemp+11)^0,f,c
  9818                           
  9819                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9820   0114DA  0EFB               	movlw	-5
  9821   0114DC  C00B  FFE3         	movff	btemp+10,plusw1
  9822   0114E0  0EFC               	movlw	-4
  9823   0114E2  C00C  FFE3         	movff	btemp+11,plusw1
  9824   0114E6                     
  9825                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
  9826                           ;stkvar	_address @ sp[(-13)+-2]
  9827   0114E6  0EF2               	movlw	242
  9828   0114E8  24E1               	addwf	fsr1l,w,c
  9829   0114EA  6ED9               	movwf	fsr2l,c
  9830   0114EC  0EFF               	movlw	255
  9831   0114EE  20E2               	addwfc	fsr1h,w,c
  9832   0114F0  6EDA               	movwf	fsr2h,c
  9833   0114F2  50DF               	movf	indf2,w,c
  9834   0114F4  0B0F               	andlw	15
  9835   0114F6  0F30               	addlw	48
  9836   0114F8  0101               	movlb	1	; () banked
  9837   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9838   0114FC                     
  9839                           ; BSR set to: 1
  9840                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
  9841                           ;stkvar	_address @ sp[(-13)+-2]
  9842   0114FC  0EF1               	movlw	-15
  9843   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9844   011502                     
  9845                           ; BSR set to: 1
  9846                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
  9847   011502  0E02               	movlw	2
  9848   011504  6E0B               	movwf	(btemp+10)^0,c
  9849   011506  0E00               	movlw	0
  9850   011508  6E0C               	movwf	(btemp+11)^0,c
  9851                           
  9852                           ;stkvar	_i @ sp[(-13)+4]
  9853   01150A  0EF7               	movlw	-9
  9854   01150C  C00B  FFE3         	movff	btemp+10,plusw1
  9855   011510  0EF8               	movlw	-8
  9856   011512  C00C  FFE3         	movff	btemp+11,plusw1
  9857   011516  EFA9  F08A         	goto	l4040
  9858   01151A                     l4036:
  9859                           
  9860                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
  9861                           ;stkvar	_i @ sp[(-13)+4]
  9862   01151A  0EF7               	movlw	-9
  9863   01151C  CFE3 F00B          	movff	plusw1,btemp+10
  9864   011520  0EF8               	movlw	-8
  9865   011522  CFE3 F00C          	movff	plusw1,btemp+11
  9866   011526  0E00               	movlw	low _spiTransmitBuffer
  9867   011528  240B               	addwf	(btemp+10)^0,w,c
  9868   01152A  6ED9               	movwf	fsr2l,c
  9869   01152C  0E01               	movlw	high _spiTransmitBuffer
  9870   01152E  200C               	addwfc	(btemp+11)^0,w,c
  9871   011530  6EDA               	movwf	fsr2h,c
  9872   011532  6ADF               	clrf	indf2,c
  9873   011534                     
  9874                           ;can/can.c: 420:     }
  9875                           ;stkvar	_i @ sp[(-13)+4]
  9876   011534  0EF7               	movlw	-9
  9877   011536  50E3               	movf	plusw1,w,c
  9878   011538  0F01               	addlw	1
  9879   01153A  6E01               	movwf	btemp^0,c
  9880   01153C  0EF7               	movlw	-9
  9881   01153E  C001  FFE3         	movff	btemp,plusw1
  9882   011542  6A01               	clrf	btemp^0,c
  9883   011544  0EF8               	movlw	-8
  9884   011546  50E3               	movf	plusw1,w,c
  9885   011548  2001               	addwfc	btemp^0,w,c
  9886   01154A  6E01               	movwf	btemp^0,c
  9887   01154C  0EF8               	movlw	-8
  9888   01154E  C001  FFE3         	movff	btemp,plusw1
  9889   011552                     l4040:
  9890                           
  9891                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9892   011552  0EFB               	movlw	-5
  9893   011554  CFE3 F00B          	movff	plusw1,btemp+10
  9894   011558  0EFC               	movlw	-4
  9895   01155A  CFE3 F00C          	movff	plusw1,btemp+11
  9896                           
  9897                           ;stkvar	_i @ sp[(-13)+4]
  9898   01155E  0EF7               	movlw	-9
  9899   011560  CFE3 F009          	movff	plusw1,btemp+8
  9900   011564  0EF8               	movlw	-8
  9901   011566  CFE3 F00A          	movff	plusw1,btemp+9
  9902   01156A  500B               	movf	(btemp+10)^0,w,c
  9903   01156C  5C09               	subwf	(btemp+8)^0,w,c
  9904   01156E  500C               	movf	(btemp+11)^0,w,c
  9905   011570  580A               	subwfb	(btemp+9)^0,w,c
  9906   011572  A0D8               	btfss	status,0,c
  9907   011574  EFBE  F08A         	goto	u1631
  9908   011578  EFC0  F08A         	goto	u1630
  9909   01157C                     u1631:
  9910   01157C  EF8D  F08A         	goto	l4036
  9911   011580                     u1630:
  9912   011580                     
  9913                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
  9914                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9915   011580  0EFB               	movlw	-5
  9916   011582  CFE3 FFE6          	movff	plusw1,postinc1
  9917   011586  CFE3 FFE6          	movff	plusw1,postinc1
  9918   01158A  0E00               	movlw	low _spiReceiveBuffer
  9919   01158C  6EE6               	movwf	postinc1,c
  9920   01158E  0E02               	movlw	high _spiReceiveBuffer
  9921   011590  6EE6               	movwf	postinc1,c
  9922   011592  0E00               	movlw	low _spiTransmitBuffer
  9923   011594  6EE6               	movwf	postinc1,c
  9924   011596  0E01               	movlw	high _spiTransmitBuffer
  9925   011598  6EE6               	movwf	postinc1,c
  9926   01159A  EC39  F09D         	call	_SpiTransfer	;wreg free
  9927                           
  9928                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9929   01159E  0EFF               	movlw	-1
  9930   0115A0  C001  FFE3         	movff	btemp,plusw1
  9931   0115A4                     
  9932                           ;can/can.c: 423:     if (spiTransferError) {
  9933                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9934   0115A4  0EFF               	movlw	-1
  9935   0115A6  50E3               	movf	plusw1,w,c
  9936   0115A8  B4D8               	btfsc	status,2,c
  9937   0115AA  EFD9  F08A         	goto	u1641
  9938   0115AE  EFDB  F08A         	goto	u1640
  9939   0115B2                     u1641:
  9940   0115B2  EFE0  F08A         	goto	l4050
  9941   0115B6                     u1640:
  9942   0115B6                     l4046:
  9943                           
  9944                           ;can/can.c: 424:         return spiTransferError;
  9945                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9946   0115B6  0EFF               	movlw	-1
  9947   0115B8  CFE3 F001          	movff	plusw1,btemp
  9948   0115BC  EF98  F08B         	goto	l206
  9949   0115C0                     l4050:
  9950                           
  9951                           ;can/can.c: 428:     n = 2;
  9952   0115C0  0E02               	movlw	2
  9953   0115C2  6E0B               	movwf	(btemp+10)^0,c
  9954   0115C4  0E00               	movlw	0
  9955   0115C6  6E0C               	movwf	(btemp+11)^0,c
  9956                           
  9957                           ;stkvar	_n @ sp[(-13)+10]
  9958   0115C8  0EFD               	movlw	-3
  9959   0115CA  C00B  FFE3         	movff	btemp+10,plusw1
  9960   0115CE  0EFE               	movlw	-2
  9961   0115D0  C00C  FFE3         	movff	btemp+11,plusw1
  9962   0115D4                     
  9963                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
  9964                           ;stkvar	_i @ sp[(-13)+4]
  9965   0115D4  0EF7               	movlw	-9
  9966   0115D6  6AE3               	clrf	plusw1,c
  9967   0115D8  0EF8               	movlw	-8
  9968   0115DA  6AE3               	clrf	plusw1,c
  9969   0115DC  EF7F  F08B         	goto	l4072
  9970   0115E0                     l4054:
  9971                           
  9972                           ;can/can.c: 430:         w.word = 0;
  9973                           ;stkvar	_w @ sp[(-13)+0]
  9974   0115E0  0EF3               	movlw	-13
  9975   0115E2  6AE3               	clrf	plusw1,c
  9976   0115E4  0EF4               	movlw	-12
  9977   0115E6  6AE3               	clrf	plusw1,c
  9978   0115E8  0EF5               	movlw	-11
  9979   0115EA  6AE3               	clrf	plusw1,c
  9980   0115EC  0EF6               	movlw	-10
  9981   0115EE  6AE3               	clrf	plusw1,c
  9982                           
  9983                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
  9984                           ;stkvar	_j @ sp[(-13)+6]
  9985   0115F0  0EF9               	movlw	-7
  9986   0115F2  6AE3               	clrf	plusw1,c
  9987   0115F4  0EFA               	movlw	-6
  9988   0115F6  6AE3               	clrf	plusw1,c
  9989   0115F8                     l4060:
  9990                           
  9991                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
  9992                           ;stkvar	_n @ sp[(-13)+10]
  9993   0115F8  0EFD               	movlw	-3
  9994   0115FA  CFE3 F00B          	movff	plusw1,btemp+10
  9995   0115FE  0EFE               	movlw	-2
  9996   011600  CFE3 F00C          	movff	plusw1,btemp+11
  9997   011604  0E00               	movlw	low _spiReceiveBuffer
  9998   011606  240B               	addwf	(btemp+10)^0,w,c
  9999   011608  6ED9               	movwf	fsr2l,c
 10000   01160A  0E02               	movlw	high _spiReceiveBuffer
 10001   01160C  200C               	addwfc	(btemp+11)^0,w,c
 10002   01160E  6EDA               	movwf	fsr2h,c
 10003                           
 10004                           ;stkvar	_j @ sp[(-13)+6]
 10005   011610  0EF9               	movlw	-7
 10006   011612  CFE3 F00B          	movff	plusw1,btemp+10
 10007   011616  0EFA               	movlw	-6
 10008   011618  CFE3 F00C          	movff	plusw1,btemp+11
 10009                           
 10010                           ;stkvar	_w @ sp[(-13)+0]
 10011   01161C  0EF3               	movlw	243
 10012   01161E  24E1               	addwf	fsr1l,w,c
 10013   011620  6E09               	movwf	(btemp+8)^0,c
 10014   011622  0EFF               	movlw	255
 10015   011624  20E2               	addwfc	fsr1h,w,c
 10016   011626  6E0A               	movwf	(btemp+9)^0,c
 10017   011628  500B               	movf	(btemp+10)^0,w,c
 10018   01162A  2409               	addwf	(btemp+8)^0,w,c
 10019   01162C  6EE9               	movwf	fsr0l,c
 10020   01162E  500C               	movf	(btemp+11)^0,w,c
 10021   011630  200A               	addwfc	(btemp+9)^0,w,c
 10022   011632  6EEA               	movwf	fsr0h,c
 10023   011634  CFDF FFEF          	movff	indf2,indf0
 10024   011638                     
 10025                           ;can/can.c: 433:         }
 10026                           ;stkvar	_j @ sp[(-13)+6]
 10027   011638  0EF9               	movlw	-7
 10028   01163A  50E3               	movf	plusw1,w,c
 10029   01163C  0F01               	addlw	1
 10030   01163E  6E01               	movwf	btemp^0,c
 10031   011640  0EF9               	movlw	-7
 10032   011642  C001  FFE3         	movff	btemp,plusw1
 10033   011646  6A01               	clrf	btemp^0,c
 10034   011648  0EFA               	movlw	-6
 10035   01164A  50E3               	movf	plusw1,w,c
 10036   01164C  2001               	addwfc	btemp^0,w,c
 10037   01164E  6E01               	movwf	btemp^0,c
 10038   011650  0EFA               	movlw	-6
 10039   011652  C001  FFE3         	movff	btemp,plusw1
 10040   011656                     
 10041                           ;stkvar	_n @ sp[(-13)+10]
 10042   011656  0EFD               	movlw	-3
 10043   011658  50E3               	movf	plusw1,w,c
 10044   01165A  0F01               	addlw	1
 10045   01165C  6E01               	movwf	btemp^0,c
 10046   01165E  0EFD               	movlw	-3
 10047   011660  C001  FFE3         	movff	btemp,plusw1
 10048   011664  6A01               	clrf	btemp^0,c
 10049   011666  0EFE               	movlw	-2
 10050   011668  50E3               	movf	plusw1,w,c
 10051   01166A  2001               	addwfc	btemp^0,w,c
 10052   01166C  6E01               	movwf	btemp^0,c
 10053   01166E  0EFE               	movlw	-2
 10054   011670  C001  FFE3         	movff	btemp,plusw1
 10055   011674                     
 10056                           ;stkvar	_j @ sp[(-13)+6]
 10057   011674  0EFA               	movlw	-6
 10058   011676  50E3               	movf	plusw1,w,c
 10059   011678  E10C               	bnz	u1650
 10060   01167A  0EF9               	movlw	-7
 10061   01167C  CFE3 F001          	movff	plusw1,btemp
 10062   011680  0E04               	movlw	4
 10063   011682  5E01               	subwf	btemp^0,f,c
 10064   011684  A0D8               	btfss	status,0,c
 10065   011686  EF47  F08B         	goto	u1651
 10066   01168A  EF49  F08B         	goto	u1650
 10067   01168E                     u1651:
 10068   01168E  EFFC  F08A         	goto	l4060
 10069   011692                     u1650:
 10070   011692                     
 10071                           ;can/can.c: 434:         rxd[i] = w.word;
 10072                           ;stkvar	_w @ sp[(-13)+0]
 10073   011692  50E1               	movf	fsr1l,w,c
 10074   011694  0FF3               	addlw	-13
 10075   011696  6ED9               	movwf	fsr2l,c
 10076   011698  50E2               	movf	fsr1h,w,c
 10077   01169A  6EDA               	movwf	fsr2h,c
 10078   01169C  0EFF               	movlw	255
 10079   01169E  22DA               	addwfc	fsr2h,f,c
 10080                           
 10081                           ;stkvar	_i @ sp[(-13)+4]
 10082   0116A0  0EF7               	movlw	-9
 10083   0116A2  CFE3 F00B          	movff	plusw1,btemp+10
 10084   0116A6  0EF8               	movlw	-8
 10085   0116A8  CFE3 F00C          	movff	plusw1,btemp+11
 10086   0116AC  90D8               	bcf	status,0,c
 10087   0116AE  360B               	rlcf	(btemp+10)^0,f,c
 10088   0116B0  360C               	rlcf	(btemp+11)^0,f,c
 10089   0116B2  90D8               	bcf	status,0,c
 10090   0116B4  360B               	rlcf	(btemp+10)^0,f,c
 10091   0116B6  360C               	rlcf	(btemp+11)^0,f,c
 10092                           
 10093                           ;stkvar	_rxd @ sp[(-13)+-4]
 10094   0116B8  0EEF               	movlw	-17
 10095   0116BA  CFE3 F009          	movff	plusw1,btemp+8
 10096   0116BE  0EF0               	movlw	-16
 10097   0116C0  CFE3 F00A          	movff	plusw1,btemp+9
 10098   0116C4  500B               	movf	(btemp+10)^0,w,c
 10099   0116C6  2409               	addwf	(btemp+8)^0,w,c
 10100   0116C8  6EE9               	movwf	fsr0l,c
 10101   0116CA  500C               	movf	(btemp+11)^0,w,c
 10102   0116CC  200A               	addwfc	(btemp+9)^0,w,c
 10103   0116CE  6EEA               	movwf	fsr0h,c
 10104   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10105   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10106   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10107   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10108   0116E0                     
 10109                           ;can/can.c: 435:     }
 10110                           ;stkvar	_i @ sp[(-13)+4]
 10111   0116E0  0EF7               	movlw	-9
 10112   0116E2  50E3               	movf	plusw1,w,c
 10113   0116E4  0F01               	addlw	1
 10114   0116E6  6E01               	movwf	btemp^0,c
 10115   0116E8  0EF7               	movlw	-9
 10116   0116EA  C001  FFE3         	movff	btemp,plusw1
 10117   0116EE  6A01               	clrf	btemp^0,c
 10118   0116F0  0EF8               	movlw	-8
 10119   0116F2  50E3               	movf	plusw1,w,c
 10120   0116F4  2001               	addwfc	btemp^0,w,c
 10121   0116F6  6E01               	movwf	btemp^0,c
 10122   0116F8  0EF8               	movlw	-8
 10123   0116FA  C001  FFE3         	movff	btemp,plusw1
 10124   0116FE                     l4072:
 10125                           
 10126                           ;stkvar	_nWords @ sp[(-13)+-6]
 10127   0116FE  0EED               	movlw	-19
 10128   011700  CFE3 F00B          	movff	plusw1,btemp+10
 10129   011704  0EEE               	movlw	-18
 10130   011706  CFE3 F00C          	movff	plusw1,btemp+11
 10131                           
 10132                           ;stkvar	_i @ sp[(-13)+4]
 10133   01170A  0EF7               	movlw	-9
 10134   01170C  CFE3 F009          	movff	plusw1,btemp+8
 10135   011710  0EF8               	movlw	-8
 10136   011712  CFE3 F00A          	movff	plusw1,btemp+9
 10137   011716  500B               	movf	(btemp+10)^0,w,c
 10138   011718  5C09               	subwf	(btemp+8)^0,w,c
 10139   01171A  500C               	movf	(btemp+11)^0,w,c
 10140   01171C  580A               	subwfb	(btemp+9)^0,w,c
 10141   01171E  A0D8               	btfss	status,0,c
 10142   011720  EF94  F08B         	goto	u1661
 10143   011724  EF96  F08B         	goto	u1660
 10144   011728                     u1661:
 10145   011728  EFF0  F08A         	goto	l4054
 10146   01172C                     u1660:
 10147   01172C  EFDB  F08A         	goto	l4046
 10148   011730                     l206:
 10149                           
 10150                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10151   011730  0EED               	movlw	237
 10152   011732  26E1               	addwf	fsr1l,f,c
 10153   011734  0EFF               	movlw	255
 10154   011736  22E2               	addwfc	fsr1h,f,c
 10155   011738  0012               	return		;funcret
 10156   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10157                           	callstack 0
 10158                           
 10159 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10160 ;; Defined at:
 10161 ;;		line 3766 in file "can/can.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  dlc             1  [STACK] enum E5461
 10164 ;; Auto vars:     Size  Location     Type
 10165 ;;  dataBytesInO    4  [STACK] unsigned long 
 10166 ;; Return value:  Size  Location     Type
 10167 ;;                  4  [STACK] unsigned long 
 10168 ;; Registers used:
 10169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10170 ;; Tracked objects:
 10171 ;;		On entry : 0/0
 10172 ;;		On exit  : 0/0
 10173 ;;		Unchanged: 0/0
 10174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10179 ;;Total ram usage:        0 bytes
 10180 ;; Hardware stack levels used: 1
 10181 ;; Hardware stack levels required when called: 7
 10182 ;; This function calls:
 10183 ;;		Nothing
 10184 ;; This function is called by:
 10185 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10186 ;; This function uses a reentrant model
 10187 ;;
 10188                           
 10189                           	psect	text29
 10190   012072                     __ptext29:
 10191                           	callstack 0
 10192   012072                     _DRV_CANFDSPI_DlcToDataBytes:
 10193                           	callstack 0
 10194                           
 10195                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10196   012072  52E6               	movf	postinc1,f,c
 10197   012074  52E6               	movf	postinc1,f,c
 10198   012076  52E6               	movf	postinc1,f,c
 10199   012078  52E6               	movf	postinc1,f,c
 10200   01207A                     
 10201                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10202                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10203   01207A  0EFC               	movlw	-4
 10204   01207C  6AE3               	clrf	plusw1,c
 10205   01207E  0EFD               	movlw	-3
 10206   012080  6AE3               	clrf	plusw1,c
 10207   012082  0EFE               	movlw	-2
 10208   012084  6AE3               	clrf	plusw1,c
 10209   012086  0EFF               	movlw	-1
 10210   012088  6AE3               	clrf	plusw1,c
 10211   01208A                     
 10212                           ;can/can.c: 3770:     __nop();
 10213   01208A  0000               	nop	
 10214   01208C                     
 10215                           ;can/can.c: 3771:     __nop();
 10216   01208C  0000               	nop	
 10217   01208E                     
 10218                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10219                           ;stkvar	_dlc @ sp[(-4)+-1]
 10220   01208E  0EFB               	movlw	-5
 10221   012090  CFE3 F001          	movff	plusw1,btemp
 10222   012094  0E09               	movlw	9
 10223   012096  6001               	cpfslt	btemp^0,c
 10224   012098  EF50  F090         	goto	u1671
 10225   01209C  EF52  F090         	goto	u1670
 10226   0120A0                     u1671:
 10227   0120A0  EFED  F090         	goto	l4104
 10228   0120A4                     u1670:
 10229   0120A4                     
 10230                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10231                           ;stkvar	_dlc @ sp[(-4)+-1]
 10232   0120A4  0EFB               	movlw	-5
 10233   0120A6  CFE3 F00C          	movff	plusw1,btemp+11
 10234   0120AA  C00C  F005         	movff	btemp+11,btemp+4
 10235   0120AE  6A06               	clrf	(btemp+5)^0,c
 10236   0120B0  6A07               	clrf	(btemp+6)^0,c
 10237   0120B2  6A08               	clrf	(btemp+7)^0,c
 10238                           
 10239                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10240   0120B4  0EFC               	movlw	-4
 10241   0120B6  C005  FFE3         	movff	btemp+4,plusw1
 10242   0120BA  0EFD               	movlw	-3
 10243   0120BC  C006  FFE3         	movff	btemp+5,plusw1
 10244   0120C0  0EFE               	movlw	-2
 10245   0120C2  C007  FFE3         	movff	btemp+6,plusw1
 10246   0120C6  0EFF               	movlw	-1
 10247   0120C8  C008  FFE3         	movff	btemp+7,plusw1
 10248                           
 10249                           ;can/can.c: 3775:     } else {
 10250   0120CC  EF17  F091         	goto	l4106
 10251   0120D0                     l4088:
 10252                           
 10253                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10254   0120D0  0E0C               	movlw	12
 10255   0120D2  6E09               	movwf	(btemp+8)^0,c
 10256   0120D4  6A0A               	clrf	(btemp+9)^0,c
 10257   0120D6  6A0B               	clrf	(btemp+10)^0,c
 10258   0120D8  6A0C               	clrf	(btemp+11)^0,c
 10259                           
 10260                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10261   0120DA  0EFC               	movlw	-4
 10262   0120DC  C009  FFE3         	movff	btemp+8,plusw1
 10263   0120E0  0EFD               	movlw	-3
 10264   0120E2  C00A  FFE3         	movff	btemp+9,plusw1
 10265   0120E6  0EFE               	movlw	-2
 10266   0120E8  C00B  FFE3         	movff	btemp+10,plusw1
 10267   0120EC  0EFF               	movlw	-1
 10268   0120EE  C00C  FFE3         	movff	btemp+11,plusw1
 10269                           
 10270                           ;can/can.c: 3779:                 break;
 10271   0120F2  EF17  F091         	goto	l4106
 10272   0120F6                     l4090:
 10273                           
 10274                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10275   0120F6  0E10               	movlw	16
 10276   0120F8  6E09               	movwf	(btemp+8)^0,c
 10277   0120FA  6A0A               	clrf	(btemp+9)^0,c
 10278   0120FC  6A0B               	clrf	(btemp+10)^0,c
 10279   0120FE  6A0C               	clrf	(btemp+11)^0,c
 10280                           
 10281                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10282   012100  0EFC               	movlw	-4
 10283   012102  C009  FFE3         	movff	btemp+8,plusw1
 10284   012106  0EFD               	movlw	-3
 10285   012108  C00A  FFE3         	movff	btemp+9,plusw1
 10286   01210C  0EFE               	movlw	-2
 10287   01210E  C00B  FFE3         	movff	btemp+10,plusw1
 10288   012112  0EFF               	movlw	-1
 10289   012114  C00C  FFE3         	movff	btemp+11,plusw1
 10290                           
 10291                           ;can/can.c: 3782:                 break;
 10292   012118  EF17  F091         	goto	l4106
 10293   01211C                     l4092:
 10294                           
 10295                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10296   01211C  0E14               	movlw	20
 10297   01211E  6E09               	movwf	(btemp+8)^0,c
 10298   012120  6A0A               	clrf	(btemp+9)^0,c
 10299   012122  6A0B               	clrf	(btemp+10)^0,c
 10300   012124  6A0C               	clrf	(btemp+11)^0,c
 10301                           
 10302                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10303   012126  0EFC               	movlw	-4
 10304   012128  C009  FFE3         	movff	btemp+8,plusw1
 10305   01212C  0EFD               	movlw	-3
 10306   01212E  C00A  FFE3         	movff	btemp+9,plusw1
 10307   012132  0EFE               	movlw	-2
 10308   012134  C00B  FFE3         	movff	btemp+10,plusw1
 10309   012138  0EFF               	movlw	-1
 10310   01213A  C00C  FFE3         	movff	btemp+11,plusw1
 10311                           
 10312                           ;can/can.c: 3785:                 break;
 10313   01213E  EF17  F091         	goto	l4106
 10314   012142                     l4094:
 10315                           
 10316                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10317   012142  0E18               	movlw	24
 10318   012144  6E09               	movwf	(btemp+8)^0,c
 10319   012146  6A0A               	clrf	(btemp+9)^0,c
 10320   012148  6A0B               	clrf	(btemp+10)^0,c
 10321   01214A  6A0C               	clrf	(btemp+11)^0,c
 10322                           
 10323                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10324   01214C  0EFC               	movlw	-4
 10325   01214E  C009  FFE3         	movff	btemp+8,plusw1
 10326   012152  0EFD               	movlw	-3
 10327   012154  C00A  FFE3         	movff	btemp+9,plusw1
 10328   012158  0EFE               	movlw	-2
 10329   01215A  C00B  FFE3         	movff	btemp+10,plusw1
 10330   01215E  0EFF               	movlw	-1
 10331   012160  C00C  FFE3         	movff	btemp+11,plusw1
 10332                           
 10333                           ;can/can.c: 3788:                 break;
 10334   012164  EF17  F091         	goto	l4106
 10335   012168                     l4096:
 10336                           
 10337                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10338   012168  0E20               	movlw	32
 10339   01216A  6E09               	movwf	(btemp+8)^0,c
 10340   01216C  6A0A               	clrf	(btemp+9)^0,c
 10341   01216E  6A0B               	clrf	(btemp+10)^0,c
 10342   012170  6A0C               	clrf	(btemp+11)^0,c
 10343                           
 10344                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10345   012172  0EFC               	movlw	-4
 10346   012174  C009  FFE3         	movff	btemp+8,plusw1
 10347   012178  0EFD               	movlw	-3
 10348   01217A  C00A  FFE3         	movff	btemp+9,plusw1
 10349   01217E  0EFE               	movlw	-2
 10350   012180  C00B  FFE3         	movff	btemp+10,plusw1
 10351   012184  0EFF               	movlw	-1
 10352   012186  C00C  FFE3         	movff	btemp+11,plusw1
 10353                           
 10354                           ;can/can.c: 3791:                 break;
 10355   01218A  EF17  F091         	goto	l4106
 10356   01218E                     l4098:
 10357                           
 10358                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10359   01218E  0E30               	movlw	48
 10360   012190  6E09               	movwf	(btemp+8)^0,c
 10361   012192  6A0A               	clrf	(btemp+9)^0,c
 10362   012194  6A0B               	clrf	(btemp+10)^0,c
 10363   012196  6A0C               	clrf	(btemp+11)^0,c
 10364                           
 10365                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10366   012198  0EFC               	movlw	-4
 10367   01219A  C009  FFE3         	movff	btemp+8,plusw1
 10368   01219E  0EFD               	movlw	-3
 10369   0121A0  C00A  FFE3         	movff	btemp+9,plusw1
 10370   0121A4  0EFE               	movlw	-2
 10371   0121A6  C00B  FFE3         	movff	btemp+10,plusw1
 10372   0121AA  0EFF               	movlw	-1
 10373   0121AC  C00C  FFE3         	movff	btemp+11,plusw1
 10374                           
 10375                           ;can/can.c: 3794:                 break;
 10376   0121B0  EF17  F091         	goto	l4106
 10377   0121B4                     l4100:
 10378                           
 10379                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10380   0121B4  0E40               	movlw	64
 10381   0121B6  6E09               	movwf	(btemp+8)^0,c
 10382   0121B8  6A0A               	clrf	(btemp+9)^0,c
 10383   0121BA  6A0B               	clrf	(btemp+10)^0,c
 10384   0121BC  6A0C               	clrf	(btemp+11)^0,c
 10385                           
 10386                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10387   0121BE  0EFC               	movlw	-4
 10388   0121C0  C009  FFE3         	movff	btemp+8,plusw1
 10389   0121C4  0EFD               	movlw	-3
 10390   0121C6  C00A  FFE3         	movff	btemp+9,plusw1
 10391   0121CA  0EFE               	movlw	-2
 10392   0121CC  C00B  FFE3         	movff	btemp+10,plusw1
 10393   0121D0  0EFF               	movlw	-1
 10394   0121D2  C00C  FFE3         	movff	btemp+11,plusw1
 10395                           
 10396                           ;can/can.c: 3797:                 break;
 10397   0121D6  EF17  F091         	goto	l4106
 10398   0121DA                     l4104:
 10399                           
 10400                           ;stkvar	_dlc @ sp[(-4)+-1]
 10401   0121DA  0EFB               	movlw	-5
 10402   0121DC  50E3               	movf	plusw1,w,c
 10403   0121DE  6E0B               	movwf	(btemp+10)^0,c
 10404   0121E0  6A0C               	clrf	(btemp+11)^0,c
 10405                           
 10406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10407                           ; Switch size 1, requested type "simple"
 10408                           ; Number of cases is 1, Range of values is 0 to 0
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            4     3 (average)
 10412                           ;	Chosen strategy is simple_byte
 10413   0121E2  500C               	movf	(btemp+11)^0,w,c
 10414   0121E4  0A00               	xorlw	0	; case 0
 10415   0121E6  B4D8               	btfsc	status,2,c
 10416   0121E8  EFF8  F090         	goto	l5588
 10417   0121EC  EF17  F091         	goto	l4106
 10418   0121F0                     l5588:
 10419                           
 10420                           ; Switch size 1, requested type "simple"
 10421                           ; Number of cases is 7, Range of values is 9 to 15
 10422                           ; switch strategies available:
 10423                           ; Name         Instructions Cycles
 10424                           ; simple_byte           22    12 (average)
 10425                           ;	Chosen strategy is simple_byte
 10426   0121F0  500B               	movf	(btemp+10)^0,w,c
 10427   0121F2  0A09               	xorlw	9	; case 9
 10428   0121F4  B4D8               	btfsc	status,2,c
 10429   0121F6  EF68  F090         	goto	l4088
 10430   0121FA  0A03               	xorlw	3	; case 10
 10431   0121FC  B4D8               	btfsc	status,2,c
 10432   0121FE  EF7B  F090         	goto	l4090
 10433   012202  0A01               	xorlw	1	; case 11
 10434   012204  B4D8               	btfsc	status,2,c
 10435   012206  EF8E  F090         	goto	l4092
 10436   01220A  0A07               	xorlw	7	; case 12
 10437   01220C  B4D8               	btfsc	status,2,c
 10438   01220E  EFA1  F090         	goto	l4094
 10439   012212  0A01               	xorlw	1	; case 13
 10440   012214  B4D8               	btfsc	status,2,c
 10441   012216  EFB4  F090         	goto	l4096
 10442   01221A  0A03               	xorlw	3	; case 14
 10443   01221C  B4D8               	btfsc	status,2,c
 10444   01221E  EFC7  F090         	goto	l4098
 10445   012222  0A01               	xorlw	1	; case 15
 10446   012224  B4D8               	btfsc	status,2,c
 10447   012226  EFDA  F090         	goto	l4100
 10448   01222A  EF17  F091         	goto	l4106
 10449   01222E                     l4106:
 10450                           
 10451                           ;can/can.c: 3803:     return dataBytesInObject;
 10452                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10453   01222E  0EFC               	movlw	-4
 10454   012230  CFE3 F001          	movff	plusw1,btemp
 10455   012234  0EFD               	movlw	-3
 10456   012236  CFE3 F002          	movff	plusw1,btemp+1
 10457   01223A  0EFE               	movlw	-2
 10458   01223C  CFE3 F003          	movff	plusw1,btemp+2
 10459   012240  0EFF               	movlw	-1
 10460   012242  CFE3 F004          	movff	plusw1,btemp+3
 10461   012246                     
 10462                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10463   012246  0EFB               	movlw	251
 10464   012248  26E1               	addwf	fsr1l,f,c
 10465   01224A  0EFF               	movlw	255
 10466   01224C  22E2               	addwfc	fsr1h,f,c
 10467   01224E  0012               	return		;funcret
 10468   012250                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10469                           	callstack 0
 10470                           
 10471 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10472 ;; Defined at:
 10473 ;;		line 1776 in file "can/can.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;  channel         1  [STACK] enum E5287
 10476 ;;  flags           2  [STACK] PTR enum E5580
 10477 ;;		 -> txFlags(1), 
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10480 ;;  a               2  [STACK] unsigned short 
 10481 ;;  spiTransferE    1  [STACK] char 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  1  [STACK] char 
 10484 ;; Registers used:
 10485 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;Total ram usage:        0 bytes
 10496 ;; Hardware stack levels used: 1
 10497 ;; Hardware stack levels required when called: 9
 10498 ;; This function calls:
 10499 ;;		_DRV_CANFDSPI_ReadByte
 10500 ;; This function is called by:
 10501 ;;		_CanSend
 10502 ;; This function uses a reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text30
 10506   0140B6                     __ptext30:
 10507                           	callstack 0
 10508   0140B6                     _DRV_CANFDSPI_TransmitChannelEventGet:
 10509                           	callstack 0
 10510                           
 10511                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10512   0140B6  0E07               	movlw	7
 10513   0140B8  26E1               	addwf	fsr1l,f,c
 10514   0140BA  0E00               	movlw	0
 10515   0140BC  22E2               	addwfc	fsr1h,f,c
 10516   0140BE                     
 10517                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 10518                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10519   0140BE  0EF9               	movlw	-7
 10520   0140C0  6AE3               	clrf	plusw1,c
 10521   0140C2  0EFA               	movlw	-6
 10522   0140C4  6AE3               	clrf	plusw1,c
 10523   0140C6  0EFB               	movlw	-5
 10524   0140C8  6AE3               	clrf	plusw1,c
 10525   0140CA  0EFC               	movlw	-4
 10526   0140CC  6AE3               	clrf	plusw1,c
 10527   0140CE                     
 10528                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 10529                           ;stkvar	_channel @ sp[(-7)+-1]
 10530   0140CE  0EF8               	movlw	-8
 10531   0140D0  50E3               	movf	plusw1,w,c
 10532   0140D2  0D0C               	mullw	12
 10533   0140D4  0E54               	movlw	84
 10534   0140D6  26F3               	addwf	243,f,c
 10535   0140D8  0E00               	movlw	0
 10536   0140DA  22F4               	addwfc	244,f,c
 10537                           
 10538                           ;stkvar	_a @ sp[(-7)+4]
 10539   0140DC  0EFD               	movlw	-3
 10540   0140DE  CFF3 FFE3          	movff	prodl,plusw1
 10541   0140E2  0EFE               	movlw	-2
 10542   0140E4  CFF4 FFE3          	movff	prodh,plusw1
 10543   0140E8                     
 10544                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 10545                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10546   0140E8  0EF9               	movlw	249
 10547   0140EA  24E1               	addwf	fsr1l,w,c
 10548   0140EC  6E01               	movwf	btemp^0,c
 10549   0140EE  0EFF               	movlw	255
 10550   0140F0  20E2               	addwfc	fsr1h,w,c
 10551   0140F2  6E02               	movwf	(btemp+1)^0,c
 10552   0140F4  C001  FFE6         	movff	btemp,postinc1
 10553   0140F8  C002  FFE6         	movff	btemp+1,postinc1
 10554                           
 10555                           ;stkvar	_a @ sp[(-9)+4]
 10556   0140FC  0EFB               	movlw	-5
 10557   0140FE  CFE3 FFE6          	movff	plusw1,postinc1
 10558   014102  CFE3 FFE6          	movff	plusw1,postinc1
 10559   014106  EC99  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 10560                           
 10561                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10562   01410A  0EFF               	movlw	-1
 10563   01410C  C001  FFE3         	movff	btemp,plusw1
 10564   014110                     
 10565                           ;can/can.c: 1788:     if (spiTransferError) {
 10566                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10567   014110  0EFF               	movlw	-1
 10568   014112  50E3               	movf	plusw1,w,c
 10569   014114  B4D8               	btfsc	status,2,c
 10570   014116  EF8F  F0A0         	goto	u1871
 10571   01411A  EF91  F0A0         	goto	u1870
 10572   01411E                     u1871:
 10573   01411E  EF95  F0A0         	goto	l4248
 10574   014122                     u1870:
 10575   014122                     
 10576                           ;can/can.c: 1789:         return -1;
 10577   014122  0EFF               	movlw	255
 10578   014124  6E01               	movwf	btemp^0,c
 10579   014126  EFA2  F0A0         	goto	l453
 10580   01412A                     l4248:
 10581                           
 10582                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 10583                           ;stkvar	_flags @ sp[(-7)+-3]
 10584   01412A  0EF6               	movlw	-10
 10585   01412C  CFE3 FFD9          	movff	plusw1,fsr2l
 10586   014130  0EF7               	movlw	-9
 10587   014132  CFE3 FFDA          	movff	plusw1,fsr2h
 10588                           
 10589                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10590   014136  0EF9               	movlw	-7
 10591   014138  50E3               	movf	plusw1,w,c
 10592   01413A  0B17               	andlw	23
 10593   01413C  6EDF               	movwf	indf2,c
 10594   01413E                     
 10595                           ;can/can.c: 1795:     return spiTransferError;
 10596                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10597   01413E  0EFF               	movlw	-1
 10598   014140  CFE3 F001          	movff	plusw1,btemp
 10599   014144                     l453:
 10600                           
 10601                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 10602   014144  0EF6               	movlw	246
 10603   014146  26E1               	addwf	fsr1l,f,c
 10604   014148  0EFF               	movlw	255
 10605   01414A  22E2               	addwfc	fsr1h,f,c
 10606   01414C  0012               	return		;funcret
 10607   01414E                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 10608                           	callstack 0
 10609                           
 10610 ;; *************** function _XF_popEvent *****************
 10611 ;; Defined at:
 10612 ;;		line 142 in file "xf/xf.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;  inISR           1  [STACK] _Bool 
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;  ev              6  [STACK] struct Event_
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  6  [STACK] struct Event_
 10619 ;; Registers used:
 10620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used: 1
 10632 ;; Hardware stack levels required when called: 8
 10633 ;; This function calls:
 10634 ;;		_ENTERCRITICAL
 10635 ;;		_LEAVECRITICAL
 10636 ;;		___awmod
 10637 ;; This function is called by:
 10638 ;;		_XF_executeOnce
 10639 ;; This function uses a reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text31
 10643   0138DC                     __ptext31:
 10644                           	callstack 0
 10645   0138DC                     _XF_popEvent:
 10646                           	callstack 0
 10647                           
 10648                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 10649   0138DC  0E0B               	movlw	11
 10650   0138DE  26E1               	addwf	fsr1l,f,c
 10651   0138E0  0E00               	movlw	0
 10652   0138E2  22E2               	addwfc	fsr1h,f,c
 10653   0138E4                     
 10654                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 10655                           ;stkvar	_ev @ sp[(-6)+0]
 10656   0138E4  0EFA               	movlw	-6
 10657   0138E6  6AE3               	clrf	plusw1,c
 10658   0138E8                     
 10659                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 10660                           ;stkvar	_ev @ sp[(-6)+0]
 10661   0138E8  0EFB               	movlw	251
 10662   0138EA  24E1               	addwf	fsr1l,w,c
 10663   0138EC  6ED9               	movwf	fsr2l,c
 10664   0138EE  0EFF               	movlw	255
 10665   0138F0  20E2               	addwfc	fsr1h,w,c
 10666   0138F2  6EDA               	movwf	fsr2h,c
 10667   0138F4  6ADE               	clrf	postinc2,c
 10668   0138F6  6ADE               	clrf	postinc2,c
 10669   0138F8  6ADD               	clrf	postdec2,c
 10670   0138FA                     
 10671                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 10672                           ;stkvar	_inISR @ sp[(-6)+-6]
 10673   0138FA  0EF4               	movlw	-12
 10674   0138FC  50E3               	movf	plusw1,w,c
 10675   0138FE  6EE6               	movwf	postinc1,c
 10676   013900  ECB3  F0A4         	call	_ENTERCRITICAL	;wreg free
 10677   013904                     
 10678                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 10679   013904  EE23  F0DF         	lfsr	2,_theXF+279
 10680   013908  50DF               	movf	indf2,w,c
 10681   01390A  A4D8               	btfss	status,2,c
 10682   01390C  EF8A  F09C         	goto	u2751
 10683   013910  EF8C  F09C         	goto	u2750
 10684   013914                     u2751:
 10685   013914  EFA1  F09C         	goto	l5050
 10686   013918                     u2750:
 10687   013918                     l5044:
 10688                           
 10689                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 10690                           ;stkvar	_inISR @ sp[(-6)+-6]
 10691   013918  0EF4               	movlw	-12
 10692   01391A  50E3               	movf	plusw1,w,c
 10693   01391C  6EE6               	movwf	postinc1,c
 10694   01391E  ECA7  F0A4         	call	_LEAVECRITICAL	;wreg free
 10695   013922                     
 10696                           ;xf/xf.c: 152:       return ev;
 10697                           ;stkvar	_ev @ sp[(-6)+0]
 10698   013922  0EFA               	movlw	250
 10699   013924  24E1               	addwf	fsr1l,w,c
 10700   013926  6ED9               	movwf	fsr2l,c
 10701   013928  0EFF               	movlw	255
 10702   01392A  20E2               	addwfc	fsr1h,w,c
 10703   01392C  6EDA               	movwf	fsr2h,c
 10704                           
 10705                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 10706   01392E  0E06               	movlw	6
 10707   013930  6E01               	movwf	btemp^0,c
 10708   013932  0EF4               	movlw	-12
 10709   013934                     us276999:
 10710   013934  CFDE FFE3          	movff	postinc2,plusw1
 10711   013938  28E8               	incf	wreg,w,c
 10712   01393A  2E01               	decfsz	btemp^0,f,c
 10713   01393C  D7FB               	bra	us276999
 10714   01393E  EFCF  F09C         	goto	l1227
 10715   013942                     l5050:
 10716                           
 10717                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10718   013942  EE23  F0DD         	lfsr	2,_theXF+277
 10719   013946  50DF               	movf	indf2,w,c
 10720   013948  0D06               	mullw	6
 10721   01394A  0E28               	movlw	low (_theXF+96)
 10722   01394C  24F3               	addwf	243,w,c
 10723   01394E  6ED9               	movwf	fsr2l,c
 10724   013950  0E03               	movlw	high (_theXF+96)
 10725   013952  20F4               	addwfc	prodh,w,c
 10726   013954  6EDA               	movwf	fsr2h,c
 10727                           
 10728                           ;stkvar	_ev @ sp[(-6)+0]
 10729   013956  0E06               	movlw	6
 10730   013958  6E01               	movwf	btemp^0,c
 10731   01395A  0EFA               	movlw	-6
 10732   01395C                     us277999:
 10733   01395C  CFDE FFE3          	movff	postinc2,plusw1
 10734   013960  28E8               	incf	wreg,w,c
 10735   013962  2E01               	decfsz	btemp^0,f,c
 10736   013964  D7FB               	bra	us277999
 10737   013966                     
 10738                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10739   013966  0E1E               	movlw	30
 10740   013968  6EE6               	movwf	postinc1,c
 10741   01396A  0E00               	movlw	0
 10742   01396C  6EE6               	movwf	postinc1,c
 10743   01396E  EE23  F0DD         	lfsr	2,_theXF+277
 10744   013972  50DF               	movf	indf2,w,c
 10745   013974  6E0B               	movwf	(btemp+10)^0,c
 10746   013976  6A0C               	clrf	(btemp+11)^0,c
 10747   013978  0E01               	movlw	1
 10748   01397A  260B               	addwf	(btemp+10)^0,f,c
 10749   01397C  0E00               	movlw	0
 10750   01397E  220C               	addwfc	(btemp+11)^0,f,c
 10751   013980  C00B  FFE6         	movff	btemp+10,postinc1
 10752   013984  C00C  FFE6         	movff	btemp+11,postinc1
 10753   013988  EC9C  F096         	call	___awmod	;wreg free
 10754   01398C  C001  F3DD         	movff	btemp,_theXF+277
 10755   013990                     
 10756                           ;xf/xf.c: 156:     theXF.countEvt--;
 10757   013990  C3DF  FFE8         	movff	_theXF+279,wreg
 10758   013994  0FFF               	addlw	-1
 10759   013996  CFE8 F3DF          	movff	wreg,_theXF+279
 10760   01399A  EF8C  F09C         	goto	l5044
 10761   01399E                     l1227:
 10762                           
 10763                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10764   01399E  0EFA               	movlw	250
 10765   0139A0  26E1               	addwf	fsr1l,f,c
 10766   0139A2  0EFF               	movlw	255
 10767   0139A4  22E2               	addwfc	fsr1h,f,c
 10768   0139A6  0012               	return		;funcret
 10769   0139A8                     __end_of_XF_popEvent:
 10770                           	callstack 0
 10771                           
 10772 ;; *************** function ___awmod *****************
 10773 ;; Defined at:
 10774 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;  dividend        2  [STACK] int 
 10777 ;;  divisor         2  [STACK] int 
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;  sign            1  [STACK] unsigned char 
 10780 ;;  counter         1  [STACK] unsigned char 
 10781 ;; Return value:  Size  Location     Type
 10782 ;;                  2  [STACK] int 
 10783 ;; Registers used:
 10784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10785 ;; Tracked objects:
 10786 ;;		On entry : 0/0
 10787 ;;		On exit  : 0/0
 10788 ;;		Unchanged: 0/0
 10789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;Total ram usage:        0 bytes
 10795 ;; Hardware stack levels used: 1
 10796 ;; Hardware stack levels required when called: 7
 10797 ;; This function calls:
 10798 ;;		Nothing
 10799 ;; This function is called by:
 10800 ;;		_XF_pushEvent
 10801 ;;		_XF_popEvent
 10802 ;; This function uses a reentrant model
 10803 ;;
 10804                           
 10805                           	psect	text32
 10806   012D38                     __ptext32:
 10807                           	callstack 0
 10808   012D38                     ___awmod:
 10809                           	callstack 0
 10810                           
 10811                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10812   012D38  52E6               	movf	postinc1,f,c
 10813   012D3A  52E6               	movf	postinc1,f,c
 10814   012D3C                     
 10815                           ;stkvar	_sign @ sp[(-2)+0]
 10816   012D3C  0EFE               	movlw	-2
 10817   012D3E  6AE3               	clrf	plusw1,c
 10818   012D40                     
 10819                           ;stkvar	_dividend @ sp[(-2)+-2]
 10820   012D40  0EFD               	movlw	-3
 10821   012D42  BEE3               	btfsc	plusw1,7,c
 10822   012D44  EFA8  F096         	goto	u1920
 10823   012D48  EFA6  F096         	goto	u1921
 10824   012D4C                     u1921:
 10825   012D4C  EFB1  F096         	goto	l4308
 10826   012D50                     u1920:
 10827   012D50                     
 10828                           ;stkvar	_dividend @ sp[(-2)+-2]
 10829                           ;stkvar	_dividend @ sp[(-2)+-2]
 10830   012D50  0EFC               	movlw	-4
 10831   012D52  6CE3               	negf	plusw1,c
 10832   012D54  0EFD               	movlw	-3
 10833   012D56  1EE3               	comf	plusw1,f,c
 10834   012D58  B0D8               	btfsc	status,0,c
 10835   012D5A  2AE3               	incf	plusw1,f,c
 10836   012D5C                     
 10837                           ;stkvar	_sign @ sp[(-2)+0]
 10838   012D5C  0EFE               	movlw	-2
 10839   012D5E  6AE3               	clrf	plusw1,c
 10840   012D60  2AE3               	incf	plusw1,f,c
 10841   012D62                     l4308:
 10842                           
 10843                           ;stkvar	_divisor @ sp[(-2)+-4]
 10844   012D62  0EFB               	movlw	-5
 10845   012D64  BEE3               	btfsc	plusw1,7,c
 10846   012D66  EFB9  F096         	goto	u1930
 10847   012D6A  EFB7  F096         	goto	u1931
 10848   012D6E                     u1931:
 10849   012D6E  EFBF  F096         	goto	l4312
 10850   012D72                     u1930:
 10851   012D72                     
 10852                           ;stkvar	_divisor @ sp[(-2)+-4]
 10853                           ;stkvar	_divisor @ sp[(-2)+-4]
 10854   012D72  0EFA               	movlw	-6
 10855   012D74  6CE3               	negf	plusw1,c
 10856   012D76  0EFB               	movlw	-5
 10857   012D78  1EE3               	comf	plusw1,f,c
 10858   012D7A  B0D8               	btfsc	status,0,c
 10859   012D7C  2AE3               	incf	plusw1,f,c
 10860   012D7E                     l4312:
 10861                           
 10862                           ;stkvar	_divisor @ sp[(-2)+-4]
 10863   012D7E  0EFA               	movlw	-6
 10864   012D80  CFE3 F001          	movff	plusw1,btemp
 10865   012D84  0EFB               	movlw	-5
 10866   012D86  50E3               	movf	plusw1,w,c
 10867   012D88  1001               	iorwf	btemp^0,w,c
 10868   012D8A  B4D8               	btfsc	status,2,c
 10869   012D8C  EFCA  F096         	goto	u1941
 10870   012D90  EFCC  F096         	goto	u1940
 10871   012D94                     u1941:
 10872   012D94  EF27  F097         	goto	l4330
 10873   012D98                     u1940:
 10874   012D98                     
 10875                           ;stkvar	_counter @ sp[(-2)+1]
 10876   012D98  0EFF               	movlw	-1
 10877   012D9A  6AE3               	clrf	plusw1,c
 10878   012D9C  2AE3               	incf	plusw1,f,c
 10879   012D9E  EFE2  F096         	goto	l4320
 10880   012DA2                     l4316:
 10881                           
 10882                           ;stkvar	_divisor @ sp[(-2)+-4]
 10883   012DA2  0EFA               	movlw	-6
 10884   012DA4  50E3               	movf	plusw1,w,c
 10885   012DA6  90D8               	bcf	status,0,c
 10886   012DA8  34E8               	rlcf	wreg,w,c
 10887   012DAA  6E01               	movwf	btemp^0,c
 10888   012DAC  0EFA               	movlw	-6
 10889   012DAE  C001  FFE3         	movff	btemp,plusw1
 10890   012DB2  0EFB               	movlw	-5
 10891   012DB4  50E3               	movf	plusw1,w,c
 10892   012DB6  34E8               	rlcf	wreg,w,c
 10893   012DB8  6E01               	movwf	btemp^0,c
 10894   012DBA  0EFB               	movlw	-5
 10895   012DBC  C001  FFE3         	movff	btemp,plusw1
 10896   012DC0                     
 10897                           ;stkvar	_counter @ sp[(-2)+1]
 10898   012DC0  0EFF               	movlw	-1
 10899   012DC2  2AE3               	incf	plusw1,f,c
 10900   012DC4                     l4320:
 10901                           
 10902                           ;stkvar	_divisor @ sp[(-2)+-4]
 10903   012DC4  0EFB               	movlw	-5
 10904   012DC6  AEE3               	btfss	plusw1,7,c
 10905   012DC8  EFE8  F096         	goto	u1951
 10906   012DCC  EFEA  F096         	goto	u1950
 10907   012DD0                     u1951:
 10908   012DD0  EFD1  F096         	goto	l4316
 10909   012DD4                     u1950:
 10910   012DD4                     l4322:
 10911                           
 10912                           ;stkvar	_divisor @ sp[(-2)+-4]
 10913   012DD4  0EFA               	movlw	-6
 10914   012DD6  CFE3 F00B          	movff	plusw1,btemp+10
 10915   012DDA  0EFB               	movlw	-5
 10916   012DDC  CFE3 F00C          	movff	plusw1,btemp+11
 10917                           
 10918                           ;stkvar	_dividend @ sp[(-2)+-2]
 10919   012DE0  0EFC               	movlw	-4
 10920   012DE2  CFE3 F009          	movff	plusw1,btemp+8
 10921   012DE6  0EFD               	movlw	-3
 10922   012DE8  CFE3 F00A          	movff	plusw1,btemp+9
 10923   012DEC  500B               	movf	(btemp+10)^0,w,c
 10924   012DEE  5C09               	subwf	(btemp+8)^0,w,c
 10925   012DF0  500C               	movf	(btemp+11)^0,w,c
 10926   012DF2  580A               	subwfb	(btemp+9)^0,w,c
 10927   012DF4  A0D8               	btfss	status,0,c
 10928   012DF6  EFFF  F096         	goto	u1961
 10929   012DFA  EF01  F097         	goto	u1960
 10930   012DFE                     u1961:
 10931   012DFE  EF13  F097         	goto	l4326
 10932   012E02                     u1960:
 10933   012E02                     
 10934                           ;stkvar	_divisor @ sp[(-2)+-4]
 10935                           ;stkvar	_dividend @ sp[(-2)+-2]
 10936   012E02  0EFC               	movlw	-4
 10937   012E04  50E3               	movf	plusw1,w,c
 10938   012E06  6E01               	movwf	btemp^0,c
 10939   012E08  0EFA               	movlw	-6
 10940   012E0A  50E3               	movf	plusw1,w,c
 10941   012E0C  5E01               	subwf	btemp^0,f,c
 10942   012E0E  0EFC               	movlw	-4
 10943   012E10  C001  FFE3         	movff	btemp,plusw1
 10944   012E14  0EFD               	movlw	-3
 10945   012E16  50E3               	movf	plusw1,w,c
 10946   012E18  6E01               	movwf	btemp^0,c
 10947   012E1A  0EFB               	movlw	-5
 10948   012E1C  50E3               	movf	plusw1,w,c
 10949   012E1E  5A01               	subwfb	btemp^0,f,c
 10950   012E20  0EFD               	movlw	-3
 10951   012E22  C001  FFE3         	movff	btemp,plusw1
 10952   012E26                     l4326:
 10953                           
 10954                           ;stkvar	_divisor @ sp[(-2)+-4]
 10955   012E26  90D8               	bcf	status,0,c
 10956   012E28  0EFB               	movlw	-5
 10957   012E2A  32E3               	rrcf	plusw1,f,c
 10958   012E2C  0EFA               	movlw	-6
 10959   012E2E  32E3               	rrcf	plusw1,f,c
 10960   012E30                     
 10961                           ;stkvar	_counter @ sp[(-2)+1]
 10962   012E30  0EFF               	movlw	-1
 10963   012E32  50E3               	movf	plusw1,w,c
 10964   012E34  6E01               	movwf	btemp^0,c
 10965   012E36  0E01               	movlw	1
 10966   012E38  5E01               	subwf	btemp^0,f,c
 10967   012E3A  0EFF               	movlw	-1
 10968   012E3C  C001  FFE3         	movff	btemp,plusw1
 10969   012E40  A4D8               	btfss	status,2,c
 10970   012E42  EF25  F097         	goto	u1971
 10971   012E46  EF27  F097         	goto	u1970
 10972   012E4A                     u1971:
 10973   012E4A  EFEA  F096         	goto	l4322
 10974   012E4E                     u1970:
 10975   012E4E                     l4330:
 10976                           
 10977                           ;stkvar	_sign @ sp[(-2)+0]
 10978   012E4E  0EFE               	movlw	-2
 10979   012E50  50E3               	movf	plusw1,w,c
 10980   012E52  B4D8               	btfsc	status,2,c
 10981   012E54  EF2E  F097         	goto	u1981
 10982   012E58  EF30  F097         	goto	u1980
 10983   012E5C                     u1981:
 10984   012E5C  EF36  F097         	goto	l4334
 10985   012E60                     u1980:
 10986   012E60                     
 10987                           ;stkvar	_dividend @ sp[(-2)+-2]
 10988                           ;stkvar	_dividend @ sp[(-2)+-2]
 10989   012E60  0EFC               	movlw	-4
 10990   012E62  6CE3               	negf	plusw1,c
 10991   012E64  0EFD               	movlw	-3
 10992   012E66  1EE3               	comf	plusw1,f,c
 10993   012E68  B0D8               	btfsc	status,0,c
 10994   012E6A  2AE3               	incf	plusw1,f,c
 10995   012E6C                     l4334:
 10996                           
 10997                           ;stkvar	_dividend @ sp[(-2)+-2]
 10998   012E6C  0EFC               	movlw	-4
 10999   012E6E  CFE3 F001          	movff	plusw1,btemp
 11000   012E72  0EFD               	movlw	-3
 11001   012E74  CFE3 F002          	movff	plusw1,btemp+1
 11002   012E78                     
 11003                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 11004   012E78  0EFA               	movlw	250
 11005   012E7A  26E1               	addwf	fsr1l,f,c
 11006   012E7C  0EFF               	movlw	255
 11007   012E7E  22E2               	addwfc	fsr1h,f,c
 11008   012E80  0012               	return		;funcret
 11009   012E82                     __end_of___awmod:
 11010                           	callstack 0
 11011                           
 11012 ;; *************** function _LEAVECRITICAL *****************
 11013 ;; Defined at:
 11014 ;;		line 265 in file "xf/xf.c"
 11015 ;; Parameters:    Size  Location     Type
 11016 ;;  inISR           1  [STACK] _Bool 
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;		None
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1  [STACK] void 
 11021 ;; Registers used:
 11022 ;;		wreg, fsr1l, fsr1h, status,2
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11032 ;;Total ram usage:        0 bytes
 11033 ;; Hardware stack levels used: 1
 11034 ;; Hardware stack levels required when called: 7
 11035 ;; This function calls:
 11036 ;;		Nothing
 11037 ;; This function is called by:
 11038 ;;		_XF_pushEvent
 11039 ;;		_XF_popEvent
 11040 ;;		_XF_scheduleTimer
 11041 ;;		_XF_unscheduleTimer
 11042 ;; This function uses a reentrant model
 11043 ;;
 11044                           
 11045                           	psect	text33
 11046   01494E                     __ptext33:
 11047                           	callstack 0
 11048   01494E                     _LEAVECRITICAL:
 11049                           	callstack 10
 11050   01494E                     
 11051                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11052                           ;stkvar	_inISR @ sp[(0)+-1]
 11053   01494E  0EFF               	movlw	-1
 11054   014950  50E3               	movf	plusw1,w,c
 11055   014952  A4D8               	btfss	status,2,c
 11056   014954  EFAE  F0A4         	goto	u1691
 11057   014958  EFB0  F0A4         	goto	u1690
 11058   01495C                     u1691:
 11059   01495C  EFB1  F0A4         	goto	l1254
 11060   014960                     u1690:
 11061   014960                     
 11062                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11063   014960  8EF2               	bsf	242,7,c	;volatile
 11064   014962                     l1254:
 11065                           
 11066                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11067   014962  52E5               	movf	postdec1,f,c
 11068   014964  0012               	return		;funcret
 11069   014966                     __end_of_LEAVECRITICAL:
 11070                           	callstack 0
 11071                           
 11072 ;; *************** function _ENTERCRITICAL *****************
 11073 ;; Defined at:
 11074 ;;		line 250 in file "xf/xf.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;  inISR           1  [STACK] _Bool 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1  [STACK] void 
 11081 ;; Registers used:
 11082 ;;		wreg, fsr1l, fsr1h, status,2
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;Total ram usage:        0 bytes
 11093 ;; Hardware stack levels used: 1
 11094 ;; Hardware stack levels required when called: 7
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_XF_pushEvent
 11099 ;;		_XF_popEvent
 11100 ;;		_XF_scheduleTimer
 11101 ;;		_XF_unscheduleTimer
 11102 ;; This function uses a reentrant model
 11103 ;;
 11104                           
 11105                           	psect	text34
 11106   014966                     __ptext34:
 11107                           	callstack 0
 11108   014966                     _ENTERCRITICAL:
 11109                           	callstack 10
 11110   014966                     
 11111                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11112                           ;stkvar	_inISR @ sp[(0)+-1]
 11113   014966  0EFF               	movlw	-1
 11114   014968  50E3               	movf	plusw1,w,c
 11115   01496A  A4D8               	btfss	status,2,c
 11116   01496C  EFBA  F0A4         	goto	u1681
 11117   014970  EFBC  F0A4         	goto	u1680
 11118   014974                     u1681:
 11119   014974  EFBD  F0A4         	goto	l1250
 11120   014978                     u1680:
 11121   014978                     
 11122                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11123   014978  9EF2               	bcf	242,7,c	;volatile
 11124   01497A                     l1250:
 11125                           
 11126                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11127   01497A  52E5               	movf	postdec1,f,c
 11128   01497C  0012               	return		;funcret
 11129   01497E                     __end_of_ENTERCRITICAL:
 11130                           	callstack 0
 11131                           
 11132 ;; *************** function _SYSTEM_Initialize *****************
 11133 ;; Defined at:
 11134 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;		None
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  1  [STACK] void 
 11141 ;; Registers used:
 11142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11152 ;;Total ram usage:        0 bytes
 11153 ;; Hardware stack levels used: 1
 11154 ;; Hardware stack levels required when called: 9
 11155 ;; This function calls:
 11156 ;;		_INTERRUPT_Initialize
 11157 ;;		_OSCILLATOR_Initialize
 11158 ;;		_PIN_MANAGER_Initialize
 11159 ;;		_SPI2_Initialize
 11160 ;;		_TMR0_Initialize
 11161 ;; This function is called by:
 11162 ;;		_main
 11163 ;; This function uses a reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text35
 11167   01497E                     __ptext35:
 11168                           	callstack 0
 11169   01497E                     _SYSTEM_Initialize:
 11170                           	callstack 21
 11171   01497E                     
 11172                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11173   01497E  ECDC  F0A4         	call	_INTERRUPT_Initialize	;wreg free
 11174   014982                     
 11175                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11176   014982  ECCA  F0A4         	call	_SPI2_Initialize	;wreg free
 11177                           
 11178                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11179   014986  EC27  F0A4         	call	_PIN_MANAGER_Initialize	;wreg free
 11180                           
 11181                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11182   01498A  ECD2  F0A4         	call	_OSCILLATOR_Initialize	;wreg free
 11183   01498E                     
 11184                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11185   01498E  ECBB  F0A3         	call	_TMR0_Initialize	;wreg free
 11186   014992                     
 11187                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11188   014992  0012               	return		;funcret
 11189   014994                     __end_of_SYSTEM_Initialize:
 11190                           	callstack 0
 11191                           
 11192 ;; *************** function _TMR0_Initialize *****************
 11193 ;; Defined at:
 11194 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1  [STACK] void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;Total ram usage:        0 bytes
 11213 ;; Hardware stack levels used: 1
 11214 ;; Hardware stack levels required when called: 8
 11215 ;; This function calls:
 11216 ;;		_TMR0_SetInterruptHandler
 11217 ;; This function is called by:
 11218 ;;		_SYSTEM_Initialize
 11219 ;; This function uses a reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text36
 11223   014776                     __ptext36:
 11224                           	callstack 0
 11225   014776                     _TMR0_Initialize:
 11226                           	callstack 21
 11227   014776                     
 11228                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11229   014776  9CD5               	bcf	213,6,c	;volatile
 11230   014778                     
 11231                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11232   014778  0EFD               	movlw	253
 11233   01477A  6ED7               	movwf	215,c	;volatile
 11234                           
 11235                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11236   01477C  0E9D               	movlw	157
 11237   01477E  6ED6               	movwf	214,c	;volatile
 11238   014780                     
 11239                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11240   014780  50D6               	movf	214,w,c	;volatile
 11241   014782  CFD7 F001          	movff	4055,btemp	;volatile
 11242   014786  6A02               	clrf	(btemp+1)^0,c
 11243   014788  C001  F002         	movff	btemp,btemp+1
 11244   01478C  6A01               	clrf	btemp^0,c
 11245   01478E  1001               	iorwf	btemp^0,w,c
 11246   014790  6E37               	movwf	_timer0ReloadVal^0,c	;volatile
 11247   014792  5002               	movf	(btemp+1)^0,w,c
 11248   014794  6E38               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11249   014796                     
 11250                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11251   014796  94F2               	bcf	242,2,c	;volatile
 11252   014798                     
 11253                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11254   014798  8AF2               	bsf	242,5,c	;volatile
 11255   01479A                     
 11256                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11257   01479A  0EBC               	movlw	low _TMR0_DefaultInterruptHandler
 11258   01479C  6EE6               	movwf	postinc1,c
 11259   01479E  0E49               	movlw	high _TMR0_DefaultInterruptHandler
 11260   0147A0  6EE6               	movwf	postinc1,c
 11261   0147A2  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11262   0147A4  6EE6               	movwf	postinc1,c
 11263   0147A6  EC7B  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
 11264   0147AA                     
 11265                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11266   0147AA  0E97               	movlw	151
 11267   0147AC  6ED5               	movwf	213,c	;volatile
 11268   0147AE                     
 11269                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11270   0147AE  0012               	return		;funcret
 11271   0147B0                     __end_of_TMR0_Initialize:
 11272                           	callstack 0
 11273                           
 11274 ;; *************** function _TMR0_SetInterruptHandler *****************
 11275 ;; Defined at:
 11276 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11279 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;		None
 11282 ;; Return value:  Size  Location     Type
 11283 ;;                  1  [STACK] void 
 11284 ;; Registers used:
 11285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11286 ;; Tracked objects:
 11287 ;;		On entry : 0/0
 11288 ;;		On exit  : 0/0
 11289 ;;		Unchanged: 0/0
 11290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;Total ram usage:        0 bytes
 11296 ;; Hardware stack levels used: 1
 11297 ;; Hardware stack levels required when called: 7
 11298 ;; This function calls:
 11299 ;;		Nothing
 11300 ;; This function is called by:
 11301 ;;		_TMR0_Initialize
 11302 ;;		_main
 11303 ;; This function uses a reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text37
 11307   0148F6                     __ptext37:
 11308                           	callstack 0
 11309   0148F6                     _TMR0_SetInterruptHandler:
 11310                           	callstack 23
 11311   0148F6                     
 11312                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11313                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11314   0148F6  50E1               	movf	fsr1l,w,c
 11315   0148F8  0FFD               	addlw	-3
 11316   0148FA  6ED9               	movwf	fsr2l,c
 11317   0148FC  50E2               	movf	fsr1h,w,c
 11318   0148FE  6EDA               	movwf	fsr2h,c
 11319   014900  0EFF               	movlw	255
 11320   014902  22DA               	addwfc	fsr2h,f,c
 11321   014904  CFDE F050          	movff	postinc2,_TMR0_InterruptHandler
 11322   014908  CFDE F051          	movff	postinc2,_TMR0_InterruptHandler+1
 11323   01490C  CFDD F052          	movff	postdec2,_TMR0_InterruptHandler+2
 11324   014910                     
 11325                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11326   014910  52E5               	movf	postdec1,f,c
 11327   014912  52E5               	movf	postdec1,f,c
 11328   014914  52E5               	movf	postdec1,f,c
 11329   014916  0012               	return		;funcret
 11330   014918                     __end_of_TMR0_SetInterruptHandler:
 11331                           	callstack 0
 11332                           
 11333 ;; *************** function _SPI2_Initialize *****************
 11334 ;; Defined at:
 11335 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;		None
 11338 ;; Auto vars:     Size  Location     Type
 11339 ;;		None
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  1  [STACK] void 
 11342 ;; Registers used:
 11343 ;;		wreg, status,2
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;Total ram usage:        0 bytes
 11354 ;; Hardware stack levels used: 1
 11355 ;; Hardware stack levels required when called: 7
 11356 ;; This function calls:
 11357 ;;		Nothing
 11358 ;; This function is called by:
 11359 ;;		_SYSTEM_Initialize
 11360 ;; This function uses a reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text38
 11364   014994                     __ptext38:
 11365                           	callstack 0
 11366   014994                     _SPI2_Initialize:
 11367                           	callstack 22
 11368   014994                     
 11369                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11370   014994  0E40               	movlw	64
 11371   014996  6E64               	movwf	100,c	;volatile
 11372                           
 11373                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11374   014998  0E01               	movlw	1
 11375   01499A  6E63               	movwf	99,c	;volatile
 11376   01499C                     
 11377                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11378   01499C  6A65               	clrf	101,c	;volatile
 11379   01499E                     
 11380                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11381   01499E  9C95               	bcf	149,6,c	;volatile
 11382   0149A0                     
 11383                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11384   0149A0  9A63               	bcf	99,5,c	;volatile
 11385   0149A2                     
 11386                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11387   0149A2  0012               	return		;funcret
 11388   0149A4                     __end_of_SPI2_Initialize:
 11389                           	callstack 0
 11390                           
 11391 ;; *************** function _PIN_MANAGER_Initialize *****************
 11392 ;; Defined at:
 11393 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11394 ;; Parameters:    Size  Location     Type
 11395 ;;		None
 11396 ;; Auto vars:     Size  Location     Type
 11397 ;;		None
 11398 ;; Return value:  Size  Location     Type
 11399 ;;                  1  [STACK] void 
 11400 ;; Registers used:
 11401 ;;		wreg, status,2
 11402 ;; Tracked objects:
 11403 ;;		On entry : 0/0
 11404 ;;		On exit  : 0/0
 11405 ;;		Unchanged: 0/0
 11406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;Total ram usage:        0 bytes
 11412 ;; Hardware stack levels used: 1
 11413 ;; Hardware stack levels required when called: 7
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		_SYSTEM_Initialize
 11418 ;; This function uses a reentrant model
 11419 ;;
 11420                           
 11421                           	psect	text39
 11422   01484E                     __ptext39:
 11423                           	callstack 0
 11424   01484E                     _PIN_MANAGER_Initialize:
 11425                           	callstack 22
 11426   01484E                     
 11427                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11428   01484E  6A8D               	clrf	141,c	;volatile
 11429                           
 11430                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11431   014850  6A91               	clrf	145,c	;volatile
 11432                           
 11433                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11434   014852  6A8C               	clrf	140,c	;volatile
 11435                           
 11436                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11437   014854  6A89               	clrf	137,c	;volatile
 11438                           
 11439                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11440   014856  6A8E               	clrf	142,c	;volatile
 11441                           
 11442                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11443   014858  6A8A               	clrf	138,c	;volatile
 11444                           
 11445                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11446   01485A  6A8F               	clrf	143,c	;volatile
 11447                           
 11448                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11449   01485C  6A8B               	clrf	139,c	;volatile
 11450                           
 11451                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11452   01485E  6A90               	clrf	144,c	;volatile
 11453                           
 11454                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11455   014860  6896               	setf	150,c	;volatile
 11456                           
 11457                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11458   014862  6897               	setf	151,c	;volatile
 11459   014864                     
 11460                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11461   014864  0E3F               	movlw	63
 11462   014866  6E92               	movwf	146,c	;volatile
 11463   014868                     
 11464                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11465   014868  6898               	setf	152,c	;volatile
 11466   01486A                     
 11467                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11468   01486A  6893               	setf	147,c	;volatile
 11469   01486C                     
 11470                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11471   01486C  6899               	setf	153,c	;volatile
 11472   01486E                     
 11473                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11474   01486E  6894               	setf	148,c	;volatile
 11475                           
 11476                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11477   014870  0EAF               	movlw	175
 11478   014872  6E95               	movwf	149,c	;volatile
 11479   014874                     
 11480                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11481   014874  689A               	setf	154,c	;volatile
 11482                           
 11483                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11484   014876  0EF0               	movlw	-16
 11485   014878  16C1               	andwf	193,f,c	;volatile
 11486   01487A                     
 11487                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11488   01487A  0012               	return		;funcret
 11489   01487C                     __end_of_PIN_MANAGER_Initialize:
 11490                           	callstack 0
 11491                           
 11492 ;; *************** function _OSCILLATOR_Initialize *****************
 11493 ;; Defined at:
 11494 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1  [STACK] void 
 11501 ;; Registers used:
 11502 ;;		wreg, status,2
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;Total ram usage:        0 bytes
 11513 ;; Hardware stack levels used: 1
 11514 ;; Hardware stack levels required when called: 7
 11515 ;; This function calls:
 11516 ;;		Nothing
 11517 ;; This function is called by:
 11518 ;;		_SYSTEM_Initialize
 11519 ;; This function uses a reentrant model
 11520 ;;
 11521                           
 11522                           	psect	text40
 11523   0149A4                     __ptext40:
 11524                           	callstack 0
 11525   0149A4                     _OSCILLATOR_Initialize:
 11526                           	callstack 22
 11527   0149A4                     
 11528                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 11529   0149A4  6AD3               	clrf	211,c	;volatile
 11530   0149A6                     
 11531                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 11532   0149A6  0E50               	movlw	80
 11533   0149A8  6E9B               	movwf	155,c	;volatile
 11534   0149AA                     
 11535                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 11536   0149AA  0012               	return		;funcret
 11537   0149AC                     __end_of_OSCILLATOR_Initialize:
 11538                           	callstack 0
 11539                           
 11540 ;; *************** function _INTERRUPT_Initialize *****************
 11541 ;; Defined at:
 11542 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;		None
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;		None
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1  [STACK] void 
 11549 ;; Registers used:
 11550 ;;		None
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;Total ram usage:        0 bytes
 11561 ;; Hardware stack levels used: 1
 11562 ;; Hardware stack levels required when called: 7
 11563 ;; This function calls:
 11564 ;;		Nothing
 11565 ;; This function is called by:
 11566 ;;		_SYSTEM_Initialize
 11567 ;; This function uses a reentrant model
 11568 ;;
 11569                           
 11570                           	psect	text41
 11571   0149B8                     __ptext41:
 11572                           	callstack 0
 11573   0149B8                     _INTERRUPT_Initialize:
 11574                           	callstack 22
 11575   0149B8                     
 11576                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 11577   0149B8  9ED0               	bcf	208,7,c	;volatile
 11578   0149BA                     
 11579                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 11580   0149BA  0012               	return		;funcret
 11581   0149BC                     __end_of_INTERRUPT_Initialize:
 11582                           	callstack 0
 11583                           
 11584 ;; *************** function _CanSetFilter *****************
 11585 ;; Defined at:
 11586 ;;		line 231 in file "can/can.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;  filter          1  [STACK] enum E5322
 11589 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 11590 ;;		 -> filterObj(6), 
 11591 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 11592 ;;		 -> maskObj(6), 
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;		None
 11595 ;; Return value:  Size  Location     Type
 11596 ;;                  1  [STACK] void 
 11597 ;; Registers used:
 11598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;Total ram usage:        0 bytes
 11609 ;; Hardware stack levels used: 1
 11610 ;; Hardware stack levels required when called: 10
 11611 ;; This function calls:
 11612 ;;		_DRV_CANFDSPI_FilterDisable
 11613 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 11614 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 11615 ;;		_DRV_CANFDSPI_FilterToFifoLink
 11616 ;; This function is called by:
 11617 ;;		_main
 11618 ;; This function uses a reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text42
 11622   014400                     __ptext42:
 11623                           	callstack 0
 11624   014400                     _CanSetFilter:
 11625                           	callstack 20
 11626   014400                     
 11627                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 11628                           ;stkvar	_filter @ sp[(0)+-1]
 11629   014400  0EFF               	movlw	-1
 11630   014402  50E3               	movf	plusw1,w,c
 11631   014404  6EE6               	movwf	postinc1,c
 11632   014406  ECF2  F0A0         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 11633   01440A                     
 11634                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 11635                           ;stkvar	_fObj @ sp[(0)+-3]
 11636   01440A  0EFD               	movlw	-3
 11637   01440C  CFE3 FFE6          	movff	plusw1,postinc1
 11638   014410  CFE3 FFE6          	movff	plusw1,postinc1
 11639                           
 11640                           ;stkvar	_filter @ sp[(-2)+-1]
 11641   014414  0EFD               	movlw	-3
 11642   014416  50E3               	movf	plusw1,w,c
 11643   014418  6EE6               	movwf	postinc1,c
 11644   01441A  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 11645   01441E                     
 11646                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 11647                           ;stkvar	_fObj @ sp[(0)+-3]
 11648   01441E  0EFD               	movlw	-3
 11649   014420  CFE3 F00B          	movff	plusw1,btemp+10
 11650   014424  0EFE               	movlw	-2
 11651   014426  CFE3 F00C          	movff	plusw1,btemp+11
 11652   01442A  0E05               	movlw	5
 11653   01442C  240B               	addwf	(btemp+10)^0,w,c
 11654   01442E  6ED9               	movwf	fsr2l,c
 11655   014430  0E00               	movlw	0
 11656   014432  200C               	addwfc	(btemp+11)^0,w,c
 11657   014434  6EDA               	movwf	fsr2h,c
 11658   014436  50DF               	movf	indf2,w,c
 11659   014438  6EE6               	movwf	postinc1,c
 11660                           
 11661                           ;stkvar	_mObj @ sp[(-1)+-5]
 11662   01443A  0EFA               	movlw	-6
 11663   01443C  CFE3 FFE6          	movff	plusw1,postinc1
 11664   014440  CFE3 FFE6          	movff	plusw1,postinc1
 11665                           
 11666                           ;stkvar	_filter @ sp[(-3)+-1]
 11667   014444  0EFC               	movlw	-4
 11668   014446  50E3               	movf	plusw1,w,c
 11669   014448  6EE6               	movwf	postinc1,c
 11670   01444A  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 11671   01444E                     
 11672                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 11673   01444E  0E01               	movlw	1
 11674   014450  6EE6               	movwf	postinc1,c
 11675   014452  0E02               	movlw	2
 11676   014454  6EE6               	movwf	postinc1,c
 11677                           
 11678                           ;stkvar	_filter @ sp[(-2)+-1]
 11679   014456  0EFD               	movlw	-3
 11680   014458  50E3               	movf	plusw1,w,c
 11681   01445A  6EE6               	movwf	postinc1,c
 11682   01445C  ECA7  F0A0         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 11683   014460                     
 11684                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 11685   014460  0EFB               	movlw	251
 11686   014462  26E1               	addwf	fsr1l,f,c
 11687   014464  0EFF               	movlw	255
 11688   014466  22E2               	addwfc	fsr1h,f,c
 11689   014468  0012               	return		;funcret
 11690   01446A                     __end_of_CanSetFilter:
 11691                           	callstack 0
 11692                           
 11693 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 11694 ;; Defined at:
 11695 ;;		line 1072 in file "can/can.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  filter          1  [STACK] enum E5322
 11698 ;;  channel         1  [STACK] enum E5287
 11699 ;;  enable          1  [STACK] _Bool 
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;  a               2  [STACK] unsigned short 
 11702 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 11703 ;;  spiTransferE    1    0        char 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1  [STACK] char 
 11706 ;; Registers used:
 11707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11717 ;;Total ram usage:        0 bytes
 11718 ;; Hardware stack levels used: 1
 11719 ;; Hardware stack levels required when called: 9
 11720 ;; This function calls:
 11721 ;;		_DRV_CANFDSPI_WriteByte
 11722 ;; This function is called by:
 11723 ;;		_CanSetFilter
 11724 ;; This function uses a reentrant model
 11725 ;;
 11726                           
 11727                           	psect	text43
 11728   01414E                     __ptext43:
 11729                           	callstack 0
 11730   01414E                     _DRV_CANFDSPI_FilterToFifoLink:
 11731                           	callstack 0
 11732                           
 11733                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11734   01414E  52E6               	movf	postinc1,f,c
 11735   014150  52E6               	movf	postinc1,f,c
 11736   014152  52E6               	movf	postinc1,f,c
 11737   014154                     
 11738                           ;can/can.c: 1080:     if (enable) {
 11739                           ;stkvar	_enable @ sp[(-3)+-3]
 11740   014154  0EFA               	movlw	-6
 11741   014156  50E3               	movf	plusw1,w,c
 11742   014158  B4D8               	btfsc	status,2,c
 11743   01415A  EFB1  F0A0         	goto	u2711
 11744   01415E  EFB3  F0A0         	goto	u2710
 11745   014162                     u2711:
 11746   014162  EFBD  F0A0         	goto	l4992
 11747   014166                     u2710:
 11748   014166                     
 11749                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11750                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11751   014166  50E1               	movf	fsr1l,w,c
 11752   014168  0FFF               	addlw	-1
 11753   01416A  6ED9               	movwf	fsr2l,c
 11754   01416C  50E2               	movf	fsr1h,w,c
 11755   01416E  6EDA               	movwf	fsr2h,c
 11756   014170  0EFF               	movlw	255
 11757   014172  22DA               	addwfc	fsr2h,f,c
 11758   014174  8EDF               	bsf	indf2,7,c
 11759                           
 11760                           ;can/can.c: 1082:     } else {
 11761   014176  EFC5  F0A0         	goto	l4994
 11762   01417A                     l4992:
 11763                           
 11764                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11765                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11766   01417A  50E1               	movf	fsr1l,w,c
 11767   01417C  0FFF               	addlw	-1
 11768   01417E  6ED9               	movwf	fsr2l,c
 11769   014180  50E2               	movf	fsr1h,w,c
 11770   014182  6EDA               	movwf	fsr2h,c
 11771   014184  0EFF               	movlw	255
 11772   014186  22DA               	addwfc	fsr2h,f,c
 11773   014188  9EDF               	bcf	indf2,7,c
 11774   01418A                     l4994:
 11775                           
 11776                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11777                           ;stkvar	_channel @ sp[(-3)+-2]
 11778   01418A  0EFB               	movlw	-5
 11779   01418C  CFE3 F00C          	movff	plusw1,btemp+11
 11780                           
 11781                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11782   014190  50E1               	movf	fsr1l,w,c
 11783   014192  0FFF               	addlw	-1
 11784   014194  6ED9               	movwf	fsr2l,c
 11785   014196  50E2               	movf	fsr1h,w,c
 11786   014198  6EDA               	movwf	fsr2h,c
 11787   01419A  0EFF               	movlw	255
 11788   01419C  22DA               	addwfc	fsr2h,f,c
 11789   01419E  50DF               	movf	223,w,c
 11790   0141A0  180C               	xorwf	(btemp+11)^0,w,c
 11791   0141A2  0BE0               	andlw	-32
 11792   0141A4  180C               	xorwf	(btemp+11)^0,w,c
 11793   0141A6  6EDF               	movwf	223,c
 11794   0141A8                     
 11795                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 11796                           ;stkvar	_filter @ sp[(-3)+-1]
 11797   0141A8  0EFC               	movlw	-4
 11798   0141AA  CFE3 F00C          	movff	plusw1,btemp+11
 11799   0141AE  0ED0               	movlw	208
 11800   0141B0  240C               	addwf	(btemp+11)^0,w,c
 11801   0141B2  6E09               	movwf	(btemp+8)^0,c
 11802   0141B4  6A0A               	clrf	(btemp+9)^0,c
 11803   0141B6  0E01               	movlw	1
 11804   0141B8  220A               	addwfc	(btemp+9)^0,f,c
 11805                           
 11806                           ;stkvar	_a @ sp[(-3)+0]
 11807   0141BA  0EFD               	movlw	-3
 11808   0141BC  C009  FFE3         	movff	btemp+8,plusw1
 11809   0141C0  0EFE               	movlw	-2
 11810   0141C2  C00A  FFE3         	movff	btemp+9,plusw1
 11811   0141C6                     
 11812                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11813   0141C6  0EFF               	movlw	-1
 11814   0141C8  50E3               	movf	plusw1,w,c
 11815   0141CA  6EE6               	movwf	postinc1,c
 11816                           
 11817                           ;stkvar	_a @ sp[(-4)+0]
 11818   0141CC  0EFC               	movlw	-4
 11819   0141CE  CFE3 FFE6          	movff	plusw1,postinc1
 11820   0141D2  CFE3 FFE6          	movff	plusw1,postinc1
 11821   0141D6  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 11822   0141DA                     
 11823                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 11824   0141DA  0EFA               	movlw	250
 11825   0141DC  26E1               	addwf	fsr1l,f,c
 11826   0141DE  0EFF               	movlw	255
 11827   0141E0  22E2               	addwfc	fsr1h,f,c
 11828   0141E2  0012               	return		;funcret
 11829   0141E4                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 11830                           	callstack 0
 11831                           
 11832 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 11833 ;; Defined at:
 11834 ;;		line 1001 in file "can/can.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;  filter          1  [STACK] enum E5322
 11837 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 11838 ;;		 -> filterObj(6), 
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  temp32          4  [STACK] unsigned long 
 11841 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 11842 ;;  a               2  [STACK] unsigned short 
 11843 ;;  spiTransferE    1    0        char 
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1  [STACK] char 
 11846 ;; Registers used:
 11847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used: 1
 11859 ;; Hardware stack levels required when called: 9
 11860 ;; This function calls:
 11861 ;;		_DRV_CANFDSPI_WriteWord
 11862 ;; This function is called by:
 11863 ;;		_CanSetFilter
 11864 ;; This function uses a reentrant model
 11865 ;;
 11866                           
 11867                           	psect	text44
 11868   010E34                     __ptext44:
 11869                           	callstack 0
 11870   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 11871                           	callstack 0
 11872                           
 11873                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11874   010E34  0E0C               	movlw	12
 11875   010E36  26E1               	addwf	fsr1l,f,c
 11876   010E38  0E00               	movlw	0
 11877   010E3A  22E2               	addwfc	fsr1h,f,c
 11878   010E3C                     
 11879                           ;can/can.c: 1009:     fObj.word = 0;
 11880                           ;stkvar	_fObj @ sp[(-12)+4]
 11881   010E3C  0EF8               	movlw	-8
 11882   010E3E  6AE3               	clrf	plusw1,c
 11883   010E40  0EF9               	movlw	-7
 11884   010E42  6AE3               	clrf	plusw1,c
 11885   010E44  0EFA               	movlw	-6
 11886   010E46  6AE3               	clrf	plusw1,c
 11887   010E48  0EFB               	movlw	-5
 11888   010E4A  6AE3               	clrf	plusw1,c
 11889   010E4C                     
 11890                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 11891                           ;stkvar	_id @ sp[(-12)+-3]
 11892   010E4C  0EF1               	movlw	-15
 11893   010E4E  CFE3 F00B          	movff	plusw1,btemp+10
 11894   010E52  0EF2               	movlw	-14
 11895   010E54  CFE3 F00C          	movff	plusw1,btemp+11
 11896   010E58  0E05               	movlw	5
 11897   010E5A  240B               	addwf	(btemp+10)^0,w,c
 11898   010E5C  6ED9               	movwf	fsr2l,c
 11899   010E5E  0E00               	movlw	0
 11900   010E60  200C               	addwfc	(btemp+11)^0,w,c
 11901   010E62  6EDA               	movwf	fsr2h,c
 11902   010E64  50DF               	movf	indf2,w,c
 11903   010E66  A4D8               	btfss	status,2,c
 11904   010E68  EF38  F087         	goto	u2531
 11905   010E6C  EF3A  F087         	goto	u2530
 11906   010E70                     u2531:
 11907   010E70  EFD2  F087         	goto	l4938
 11908   010E74                     u2530:
 11909   010E74                     
 11910                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 11911                           ;stkvar	_id @ sp[(-12)+-3]
 11912   010E74  0EF1               	movlw	-15
 11913   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 11914   010E7A  0EF2               	movlw	-14
 11915   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 11916   010E80  50DF               	movf	indf2,w,c
 11917   010E82  6E0C               	movwf	(btemp+11)^0,c
 11918                           
 11919                           ;stkvar	_fObj @ sp[(-12)+4]
 11920   010E84  0EF8               	movlw	-8
 11921   010E86  C00C  FFE3         	movff	btemp+11,plusw1
 11922   010E8A                     
 11923                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 11924                           ;stkvar	_fObj @ sp[(-12)+4]
 11925   010E8A  0EF9               	movlw	249
 11926   010E8C  24E1               	addwf	fsr1l,w,c
 11927   010E8E  6ED9               	movwf	fsr2l,c
 11928   010E90  0EFF               	movlw	255
 11929   010E92  20E2               	addwfc	fsr1h,w,c
 11930   010E94  6EDA               	movwf	fsr2h,c
 11931                           
 11932                           ;stkvar	_id @ sp[(-12)+-3]
 11933   010E96  0EF1               	movlw	-15
 11934   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 11935   010E9C  0EF2               	movlw	-14
 11936   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 11937   010EA2  CFEE F009          	movff	postinc0,btemp+8
 11938   010EA6  CFEE F00A          	movff	postinc0,btemp+9
 11939   010EAA  CFEE F00B          	movff	postinc0,btemp+10
 11940   010EAE  CFEE F00C          	movff	postinc0,btemp+11
 11941   010EB2  C00A  F009         	movff	btemp+9,btemp+8
 11942   010EB6  C00B  F00A         	movff	btemp+10,btemp+9
 11943   010EBA  C00C  F00B         	movff	btemp+11,btemp+10
 11944   010EBE  6A0C               	clrf	(btemp+11)^0,c
 11945   010EC0  5009               	movf	(btemp+8)^0,w,c
 11946   010EC2  6EDF               	movwf	indf2,c
 11947   010EC4                     
 11948                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 11949                           ;stkvar	_fObj @ sp[(-12)+4]
 11950   010EC4  0EFA               	movlw	250
 11951   010EC6  24E1               	addwf	fsr1l,w,c
 11952   010EC8  6ED9               	movwf	fsr2l,c
 11953   010ECA  0EFF               	movlw	255
 11954   010ECC  20E2               	addwfc	fsr1h,w,c
 11955   010ECE  6EDA               	movwf	fsr2h,c
 11956                           
 11957                           ;stkvar	_id @ sp[(-12)+-3]
 11958   010ED0  0EF1               	movlw	-15
 11959   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 11960   010ED6  0EF2               	movlw	-14
 11961   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 11962   010EDC  CFEE F009          	movff	postinc0,btemp+8
 11963   010EE0  CFEE F00A          	movff	postinc0,btemp+9
 11964   010EE4  CFEE F00B          	movff	postinc0,btemp+10
 11965   010EE8  CFEE F00C          	movff	postinc0,btemp+11
 11966   010EEC  0E11               	movlw	17
 11967   010EEE  EF7E  F087         	goto	u2540
 11968   010EF2                     u2545:
 11969   010EF2  90D8               	bcf	status,0,c
 11970   010EF4  320C               	rrcf	(btemp+11)^0,f,c
 11971   010EF6  320B               	rrcf	(btemp+10)^0,f,c
 11972   010EF8  320A               	rrcf	(btemp+9)^0,f,c
 11973   010EFA  3209               	rrcf	(btemp+8)^0,f,c
 11974   010EFC                     u2540:
 11975   010EFC  2EE8               	decfsz	wreg,f,c
 11976   010EFE  EF79  F087         	goto	u2545
 11977   010F02  5009               	movf	(btemp+8)^0,w,c
 11978   010F04  6EDF               	movwf	indf2,c
 11979   010F06                     
 11980                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 11981                           ;stkvar	_fObj @ sp[(-12)+4]
 11982   010F06  0EFB               	movlw	251
 11983   010F08  24E1               	addwf	fsr1l,w,c
 11984   010F0A  6ED9               	movwf	fsr2l,c
 11985   010F0C  0EFF               	movlw	255
 11986   010F0E  20E2               	addwfc	fsr1h,w,c
 11987   010F10  6EDA               	movwf	fsr2h,c
 11988                           
 11989                           ;stkvar	_id @ sp[(-12)+-3]
 11990   010F12  0EF1               	movlw	-15
 11991   010F14  CFE3 F00B          	movff	plusw1,btemp+10
 11992   010F18  0EF2               	movlw	-14
 11993   010F1A  CFE3 F00C          	movff	plusw1,btemp+11
 11994   010F1E  0E05               	movlw	5
 11995   010F20  240B               	addwf	(btemp+10)^0,w,c
 11996   010F22  6EE9               	movwf	fsr0l,c
 11997   010F24  0E00               	movlw	0
 11998   010F26  200C               	addwfc	(btemp+11)^0,w,c
 11999   010F28  6EEA               	movwf	fsr0h,c
 12000   010F2A  50EF               	movf	indf0,w,c
 12001   010F2C  6E0C               	movwf	(btemp+11)^0,c
 12002   010F2E  0E06               	movlw	6
 12003   010F30  6E01               	movwf	btemp^0,c
 12004   010F32                     u2555:
 12005   010F32  90D8               	bcf	status,0,c
 12006   010F34  360C               	rlcf	(btemp+11)^0,f,c
 12007   010F36  2E01               	decfsz	btemp^0,f,c
 12008   010F38  EF99  F087         	goto	u2555
 12009                           
 12010                           ;stkvar	_id @ sp[(-12)+-3]
 12011   010F3C  0EF1               	movlw	-15
 12012   010F3E  CFE3 F009          	movff	plusw1,btemp+8
 12013   010F42  0EF2               	movlw	-14
 12014   010F44  CFE3 F00A          	movff	plusw1,btemp+9
 12015   010F48  0E04               	movlw	4
 12016   010F4A  2409               	addwf	(btemp+8)^0,w,c
 12017   010F4C  6EE9               	movwf	fsr0l,c
 12018   010F4E  0E00               	movlw	0
 12019   010F50  200A               	addwfc	(btemp+9)^0,w,c
 12020   010F52  6EEA               	movwf	fsr0h,c
 12021   010F54  50EF               	movf	indf0,w,c
 12022   010F56  6E0B               	movwf	(btemp+10)^0,c
 12023   010F58  0E05               	movlw	5
 12024   010F5A  6E01               	movwf	btemp^0,c
 12025   010F5C                     u2565:
 12026   010F5C  90D8               	bcf	status,0,c
 12027   010F5E  360B               	rlcf	(btemp+10)^0,f,c
 12028   010F60  2E01               	decfsz	btemp^0,f,c
 12029   010F62  EFAE  F087         	goto	u2565
 12030                           
 12031                           ;stkvar	_id @ sp[(-12)+-3]
 12032   010F66  0EF1               	movlw	-15
 12033   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 12034   010F6C  0EF2               	movlw	-14
 12035   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 12036   010F72  CFEE F005          	movff	postinc0,btemp+4
 12037   010F76  CFEE F006          	movff	postinc0,btemp+5
 12038   010F7A  CFEE F007          	movff	postinc0,btemp+6
 12039   010F7E  CFEE F008          	movff	postinc0,btemp+7
 12040   010F82  0E19               	movlw	25
 12041   010F84  EFC9  F087         	goto	u2570
 12042   010F88                     u2575:
 12043   010F88  90D8               	bcf	status,0,c
 12044   010F8A  3208               	rrcf	(btemp+7)^0,f,c
 12045   010F8C  3207               	rrcf	(btemp+6)^0,f,c
 12046   010F8E  3206               	rrcf	(btemp+5)^0,f,c
 12047   010F90  3205               	rrcf	(btemp+4)^0,f,c
 12048   010F92                     u2570:
 12049   010F92  2EE8               	decfsz	wreg,f,c
 12050   010F94  EFC4  F087         	goto	u2575
 12051   010F98  5005               	movf	(btemp+4)^0,w,c
 12052   010F9A  100B               	iorwf	(btemp+10)^0,w,c
 12053   010F9C  100C               	iorwf	(btemp+11)^0,w,c
 12054   010F9E  6EDF               	movwf	indf2,c
 12055                           
 12056                           ;can/can.c: 1017:     }
 12057   010FA0  EF97  F088         	goto	l4950
 12058   010FA4                     l4938:
 12059                           
 12060                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12061                           ;stkvar	_id @ sp[(-12)+-3]
 12062   010FA4  0EF1               	movlw	-15
 12063   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12064   010FAA  0EF2               	movlw	-14
 12065   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12066   010FB0  CFDE F009          	movff	postinc2,btemp+8
 12067   010FB4  CFDE F00A          	movff	postinc2,btemp+9
 12068   010FB8  CFDE F00B          	movff	postinc2,btemp+10
 12069   010FBC  CFDE F00C          	movff	postinc2,btemp+11
 12070   010FC0  0E13               	movlw	19
 12071   010FC2  EFE8  F087         	goto	u2580
 12072   010FC6                     u2585:
 12073   010FC6  90D8               	bcf	status,0,c
 12074   010FC8  320C               	rrcf	(btemp+11)^0,f,c
 12075   010FCA  320B               	rrcf	(btemp+10)^0,f,c
 12076   010FCC  320A               	rrcf	(btemp+9)^0,f,c
 12077   010FCE  3209               	rrcf	(btemp+8)^0,f,c
 12078   010FD0                     u2580:
 12079   010FD0  2EE8               	decfsz	wreg,f,c
 12080   010FD2  EFE3  F087         	goto	u2585
 12081   010FD6  0EFF               	movlw	255
 12082   010FD8  1409               	andwf	(btemp+8)^0,w,c
 12083   010FDA  6E05               	movwf	(btemp+4)^0,c
 12084   010FDC  0E07               	movlw	7
 12085   010FDE  140A               	andwf	(btemp+9)^0,w,c
 12086   010FE0  6E06               	movwf	(btemp+5)^0,c
 12087   010FE2  0E00               	movlw	0
 12088   010FE4  140B               	andwf	(btemp+10)^0,w,c
 12089   010FE6  6E07               	movwf	(btemp+6)^0,c
 12090   010FE8  0E00               	movlw	0
 12091   010FEA  140C               	andwf	(btemp+11)^0,w,c
 12092   010FEC  6E08               	movwf	(btemp+7)^0,c
 12093                           
 12094                           ;stkvar	_id @ sp[(-12)+-3]
 12095   010FEE  0EF1               	movlw	-15
 12096   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12097   010FF4  0EF2               	movlw	-14
 12098   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12099   010FFA  0EFF               	movlw	255
 12100   010FFC  14DE               	andwf	postinc2,w,c
 12101   010FFE  6E09               	movwf	(btemp+8)^0,c
 12102   011000  0EFF               	movlw	255
 12103   011002  14DE               	andwf	postinc2,w,c
 12104   011004  6E0A               	movwf	(btemp+9)^0,c
 12105   011006  0E03               	movlw	3
 12106   011008  14DE               	andwf	postinc2,w,c
 12107   01100A  6E0B               	movwf	(btemp+10)^0,c
 12108   01100C  0E00               	movlw	0
 12109   01100E  14DE               	andwf	postinc2,w,c
 12110   011010  6E0C               	movwf	(btemp+11)^0,c
 12111   011012  0E0B               	movlw	11
 12112   011014                     u2595:
 12113   011014  90D8               	bcf	status,0,c
 12114   011016  3609               	rlcf	(btemp+8)^0,f,c
 12115   011018  360A               	rlcf	(btemp+9)^0,f,c
 12116   01101A  360B               	rlcf	(btemp+10)^0,f,c
 12117   01101C  360C               	rlcf	(btemp+11)^0,f,c
 12118   01101E  2EE8               	decfsz	wreg,f,c
 12119   011020  EF0A  F088         	goto	u2595
 12120   011024  5005               	movf	(btemp+4)^0,w,c
 12121   011026  1009               	iorwf	(btemp+8)^0,w,c
 12122   011028  6E01               	movwf	btemp^0,c
 12123   01102A  5006               	movf	(btemp+5)^0,w,c
 12124   01102C  100A               	iorwf	(btemp+9)^0,w,c
 12125   01102E  6E02               	movwf	(btemp+1)^0,c
 12126   011030  5007               	movf	(btemp+6)^0,w,c
 12127   011032  100B               	iorwf	(btemp+10)^0,w,c
 12128   011034  6E03               	movwf	(btemp+2)^0,c
 12129   011036  5008               	movf	(btemp+7)^0,w,c
 12130   011038  100C               	iorwf	(btemp+11)^0,w,c
 12131   01103A  6E04               	movwf	(btemp+3)^0,c
 12132                           
 12133                           ;stkvar	_temp32 @ sp[(-12)+0]
 12134   01103C  0EF4               	movlw	-12
 12135   01103E  C001  FFE3         	movff	btemp,plusw1
 12136   011042  0EF5               	movlw	-11
 12137   011044  C002  FFE3         	movff	btemp+1,plusw1
 12138   011048  0EF6               	movlw	-10
 12139   01104A  C003  FFE3         	movff	btemp+2,plusw1
 12140   01104E  0EF7               	movlw	-9
 12141   011050  C004  FFE3         	movff	btemp+3,plusw1
 12142   011054                     
 12143                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12144                           ;stkvar	_temp32 @ sp[(-12)+0]
 12145   011054  50E1               	movf	fsr1l,w,c
 12146   011056  0FF4               	addlw	-12
 12147   011058  6ED9               	movwf	fsr2l,c
 12148   01105A  50E2               	movf	fsr1h,w,c
 12149   01105C  6EDA               	movwf	fsr2h,c
 12150   01105E  0EFF               	movlw	255
 12151   011060  22DA               	addwfc	fsr2h,f,c
 12152   011062  0EFF               	movlw	255
 12153   011064  16DE               	andwf	postinc2,f,c
 12154   011066  0EFF               	movlw	255
 12155   011068  16DE               	andwf	postinc2,f,c
 12156   01106A  0EFF               	movlw	255
 12157   01106C  16DE               	andwf	postinc2,f,c
 12158   01106E  0E1F               	movlw	31
 12159   011070  16DE               	andwf	postinc2,f,c
 12160   011072                     
 12161                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12162                           ;stkvar	_temp32 @ sp[(-12)+0]
 12163                           ;stkvar	_fObj @ sp[(-12)+4]
 12164   011072  0EF4               	movlw	-12
 12165   011074  CFE3 F001          	movff	plusw1,btemp
 12166   011078  0EF8               	movlw	-8
 12167   01107A  C001  FFE3         	movff	btemp,plusw1
 12168   01107E                     
 12169                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12170                           ;stkvar	_temp32 @ sp[(-12)+0]
 12171   01107E  0EF5               	movlw	245
 12172   011080  24E1               	addwf	fsr1l,w,c
 12173   011082  6ED9               	movwf	fsr2l,c
 12174   011084  0EFF               	movlw	255
 12175   011086  20E2               	addwfc	fsr1h,w,c
 12176   011088  6EDA               	movwf	fsr2h,c
 12177                           
 12178                           ;stkvar	_fObj @ sp[(-12)+4]
 12179   01108A  0EF9               	movlw	249
 12180   01108C  24E1               	addwf	fsr1l,w,c
 12181   01108E  6EE9               	movwf	fsr0l,c
 12182   011090  0EFF               	movlw	255
 12183   011092  20E2               	addwfc	fsr1h,w,c
 12184   011094  6EEA               	movwf	fsr0h,c
 12185   011096  CFDF FFEF          	movff	indf2,indf0
 12186   01109A                     
 12187                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12188                           ;stkvar	_temp32 @ sp[(-12)+0]
 12189   01109A  0EF6               	movlw	246
 12190   01109C  24E1               	addwf	fsr1l,w,c
 12191   01109E  6ED9               	movwf	fsr2l,c
 12192   0110A0  0EFF               	movlw	255
 12193   0110A2  20E2               	addwfc	fsr1h,w,c
 12194   0110A4  6EDA               	movwf	fsr2h,c
 12195                           
 12196                           ;stkvar	_fObj @ sp[(-12)+4]
 12197   0110A6  0EFA               	movlw	250
 12198   0110A8  24E1               	addwf	fsr1l,w,c
 12199   0110AA  6EE9               	movwf	fsr0l,c
 12200   0110AC  0EFF               	movlw	255
 12201   0110AE  20E2               	addwfc	fsr1h,w,c
 12202   0110B0  6EEA               	movwf	fsr0h,c
 12203   0110B2  CFDF FFEF          	movff	indf2,indf0
 12204   0110B6                     
 12205                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12206                           ;stkvar	_fObj @ sp[(-12)+4]
 12207   0110B6  0EFB               	movlw	251
 12208   0110B8  24E1               	addwf	fsr1l,w,c
 12209   0110BA  6ED9               	movwf	fsr2l,c
 12210   0110BC  0EFF               	movlw	255
 12211   0110BE  20E2               	addwfc	fsr1h,w,c
 12212   0110C0  6EDA               	movwf	fsr2h,c
 12213                           
 12214                           ;stkvar	_temp32 @ sp[(-12)+0]
 12215   0110C2  0EF7               	movlw	247
 12216   0110C4  24E1               	addwf	fsr1l,w,c
 12217   0110C6  6EE9               	movwf	fsr0l,c
 12218   0110C8  0EFF               	movlw	255
 12219   0110CA  20E2               	addwfc	fsr1h,w,c
 12220   0110CC  6EEA               	movwf	fsr0h,c
 12221   0110CE  50EF               	movf	indf0,w,c
 12222   0110D0  6E0C               	movwf	(btemp+11)^0,c
 12223                           
 12224                           ;stkvar	_id @ sp[(-12)+-3]
 12225   0110D2  0EF1               	movlw	-15
 12226   0110D4  CFE3 F009          	movff	plusw1,btemp+8
 12227   0110D8  0EF2               	movlw	-14
 12228   0110DA  CFE3 F00A          	movff	plusw1,btemp+9
 12229   0110DE  0E05               	movlw	5
 12230   0110E0  2409               	addwf	(btemp+8)^0,w,c
 12231   0110E2  6EE9               	movwf	fsr0l,c
 12232   0110E4  0E00               	movlw	0
 12233   0110E6  200A               	addwfc	(btemp+9)^0,w,c
 12234   0110E8  6EEA               	movwf	fsr0h,c
 12235   0110EA  50EF               	movf	indf0,w,c
 12236   0110EC  6E0B               	movwf	(btemp+10)^0,c
 12237   0110EE  0E06               	movlw	6
 12238   0110F0  6E01               	movwf	btemp^0,c
 12239   0110F2                     u2605:
 12240   0110F2  90D8               	bcf	status,0,c
 12241   0110F4  360B               	rlcf	(btemp+10)^0,f,c
 12242   0110F6  2E01               	decfsz	btemp^0,f,c
 12243   0110F8  EF79  F088         	goto	u2605
 12244                           
 12245                           ;stkvar	_id @ sp[(-12)+-3]
 12246   0110FC  0EF1               	movlw	-15
 12247   0110FE  CFE3 F009          	movff	plusw1,btemp+8
 12248   011102  0EF2               	movlw	-14
 12249   011104  CFE3 F00A          	movff	plusw1,btemp+9
 12250   011108  0E04               	movlw	4
 12251   01110A  2409               	addwf	(btemp+8)^0,w,c
 12252   01110C  6EE9               	movwf	fsr0l,c
 12253   01110E  0E00               	movlw	0
 12254   011110  200A               	addwfc	(btemp+9)^0,w,c
 12255   011112  6EEA               	movwf	fsr0h,c
 12256   011114  50EF               	movf	indf0,w,c
 12257   011116  6E0A               	movwf	(btemp+9)^0,c
 12258   011118  0E05               	movlw	5
 12259   01111A  6E01               	movwf	btemp^0,c
 12260   01111C                     u2615:
 12261   01111C  90D8               	bcf	status,0,c
 12262   01111E  360A               	rlcf	(btemp+9)^0,f,c
 12263   011120  2E01               	decfsz	btemp^0,f,c
 12264   011122  EF8E  F088         	goto	u2615
 12265   011126  500A               	movf	(btemp+9)^0,w,c
 12266   011128  100B               	iorwf	(btemp+10)^0,w,c
 12267   01112A  100C               	iorwf	(btemp+11)^0,w,c
 12268   01112C  6EDF               	movwf	indf2,c
 12269   01112E                     l4950:
 12270                           
 12271                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12272                           ;stkvar	_filter @ sp[(-12)+-1]
 12273   01112E  0EF3               	movlw	-13
 12274   011130  50E3               	movf	plusw1,w,c
 12275   011132  0D08               	mullw	8
 12276   011134  CFF3 F00B          	movff	prodl,btemp+10
 12277   011138  CFF4 F00C          	movff	prodh,btemp+11
 12278   01113C  0EF0               	movlw	240
 12279   01113E  240B               	addwf	(btemp+10)^0,w,c
 12280   011140  6E09               	movwf	(btemp+8)^0,c
 12281   011142  0E01               	movlw	1
 12282   011144  200C               	addwfc	(btemp+11)^0,w,c
 12283   011146  6E0A               	movwf	(btemp+9)^0,c
 12284                           
 12285                           ;stkvar	_a @ sp[(-12)+10]
 12286   011148  0EFE               	movlw	-2
 12287   01114A  C009  FFE3         	movff	btemp+8,plusw1
 12288   01114E  0EFF               	movlw	-1
 12289   011150  C00A  FFE3         	movff	btemp+9,plusw1
 12290   011154                     
 12291                           ;stkvar	_fObj @ sp[(-12)+4]
 12292   011154  0EF8               	movlw	-8
 12293   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12294   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12295   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12296   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12297                           
 12298                           ;stkvar	_a @ sp[(-16)+10]
 12299   011166  0EFA               	movlw	-6
 12300   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12301   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12302   011170  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12303   011174                     
 12304                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12305   011174  0EF1               	movlw	241
 12306   011176  26E1               	addwf	fsr1l,f,c
 12307   011178  0EFF               	movlw	255
 12308   01117A  22E2               	addwfc	fsr1h,f,c
 12309   01117C  0012               	return		;funcret
 12310   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12311                           	callstack 0
 12312                           
 12313 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12314 ;; Defined at:
 12315 ;;		line 1035 in file "can/can.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;  filter          1  [STACK] enum E5322
 12318 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12319 ;;		 -> maskObj(6), 
 12320 ;;  EXIDE           1  [STACK] unsigned char 
 12321 ;; Auto vars:     Size  Location     Type
 12322 ;;  temp32          4  [STACK] unsigned long 
 12323 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12324 ;;  a               2  [STACK] unsigned short 
 12325 ;;  spiTransferE    1    0        char 
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  1  [STACK] char 
 12328 ;; Registers used:
 12329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12330 ;; Tracked objects:
 12331 ;;		On entry : 0/0
 12332 ;;		On exit  : 0/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;Total ram usage:        0 bytes
 12340 ;; Hardware stack levels used: 1
 12341 ;; Hardware stack levels required when called: 9
 12342 ;; This function calls:
 12343 ;;		_DRV_CANFDSPI_WriteWord
 12344 ;; This function is called by:
 12345 ;;		_CanSetFilter
 12346 ;; This function uses a reentrant model
 12347 ;;
 12348                           
 12349                           	psect	text45
 12350   01117E                     __ptext45:
 12351                           	callstack 0
 12352   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12353                           	callstack 0
 12354                           
 12355                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12356   01117E  0E0C               	movlw	12
 12357   011180  26E1               	addwf	fsr1l,f,c
 12358   011182  0E00               	movlw	0
 12359   011184  22E2               	addwfc	fsr1h,f,c
 12360   011186                     
 12361                           ;can/can.c: 1043:     mObj.word = 0;
 12362                           ;stkvar	_mObj @ sp[(-12)+4]
 12363   011186  0EF8               	movlw	-8
 12364   011188  6AE3               	clrf	plusw1,c
 12365   01118A  0EF9               	movlw	-7
 12366   01118C  6AE3               	clrf	plusw1,c
 12367   01118E  0EFA               	movlw	-6
 12368   011190  6AE3               	clrf	plusw1,c
 12369   011192  0EFB               	movlw	-5
 12370   011194  6AE3               	clrf	plusw1,c
 12371   011196                     
 12372                           ;can/can.c: 1047:     if(EXIDE == 0)
 12373                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12374   011196  0EF0               	movlw	-16
 12375   011198  50E3               	movf	plusw1,w,c
 12376   01119A  A4D8               	btfss	status,2,c
 12377   01119C  EFD2  F088         	goto	u2621
 12378   0111A0  EFD4  F088         	goto	u2620
 12379   0111A4                     u2621:
 12380   0111A4  EF6C  F089         	goto	l4970
 12381   0111A8                     u2620:
 12382   0111A8                     
 12383                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12384                           ;stkvar	_mask @ sp[(-12)+-3]
 12385   0111A8  0EF1               	movlw	-15
 12386   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12387   0111AE  0EF2               	movlw	-14
 12388   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12389   0111B4  50DF               	movf	indf2,w,c
 12390   0111B6  6E0C               	movwf	(btemp+11)^0,c
 12391                           
 12392                           ;stkvar	_mObj @ sp[(-12)+4]
 12393   0111B8  0EF8               	movlw	-8
 12394   0111BA  C00C  FFE3         	movff	btemp+11,plusw1
 12395   0111BE                     
 12396                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12397                           ;stkvar	_mObj @ sp[(-12)+4]
 12398   0111BE  0EF9               	movlw	249
 12399   0111C0  24E1               	addwf	fsr1l,w,c
 12400   0111C2  6ED9               	movwf	fsr2l,c
 12401   0111C4  0EFF               	movlw	255
 12402   0111C6  20E2               	addwfc	fsr1h,w,c
 12403   0111C8  6EDA               	movwf	fsr2h,c
 12404                           
 12405                           ;stkvar	_mask @ sp[(-12)+-3]
 12406   0111CA  0EF1               	movlw	-15
 12407   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12408   0111D0  0EF2               	movlw	-14
 12409   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12410   0111D6  CFEE F009          	movff	postinc0,btemp+8
 12411   0111DA  CFEE F00A          	movff	postinc0,btemp+9
 12412   0111DE  CFEE F00B          	movff	postinc0,btemp+10
 12413   0111E2  CFEE F00C          	movff	postinc0,btemp+11
 12414   0111E6  C00A  F009         	movff	btemp+9,btemp+8
 12415   0111EA  C00B  F00A         	movff	btemp+10,btemp+9
 12416   0111EE  C00C  F00B         	movff	btemp+11,btemp+10
 12417   0111F2  6A0C               	clrf	(btemp+11)^0,c
 12418   0111F4  5009               	movf	(btemp+8)^0,w,c
 12419   0111F6  6EDF               	movwf	indf2,c
 12420   0111F8                     
 12421                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12422                           ;stkvar	_mObj @ sp[(-12)+4]
 12423   0111F8  0EFA               	movlw	250
 12424   0111FA  24E1               	addwf	fsr1l,w,c
 12425   0111FC  6ED9               	movwf	fsr2l,c
 12426   0111FE  0EFF               	movlw	255
 12427   011200  20E2               	addwfc	fsr1h,w,c
 12428   011202  6EDA               	movwf	fsr2h,c
 12429                           
 12430                           ;stkvar	_mask @ sp[(-12)+-3]
 12431   011204  0EF1               	movlw	-15
 12432   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12433   01120A  0EF2               	movlw	-14
 12434   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12435   011210  CFEE F009          	movff	postinc0,btemp+8
 12436   011214  CFEE F00A          	movff	postinc0,btemp+9
 12437   011218  CFEE F00B          	movff	postinc0,btemp+10
 12438   01121C  CFEE F00C          	movff	postinc0,btemp+11
 12439   011220  0E11               	movlw	17
 12440   011222  EF18  F089         	goto	u2630
 12441   011226                     u2635:
 12442   011226  90D8               	bcf	status,0,c
 12443   011228  320C               	rrcf	(btemp+11)^0,f,c
 12444   01122A  320B               	rrcf	(btemp+10)^0,f,c
 12445   01122C  320A               	rrcf	(btemp+9)^0,f,c
 12446   01122E  3209               	rrcf	(btemp+8)^0,f,c
 12447   011230                     u2630:
 12448   011230  2EE8               	decfsz	wreg,f,c
 12449   011232  EF13  F089         	goto	u2635
 12450   011236  5009               	movf	(btemp+8)^0,w,c
 12451   011238  6EDF               	movwf	indf2,c
 12452   01123A                     
 12453                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12454                           ;stkvar	_mObj @ sp[(-12)+4]
 12455   01123A  0EFB               	movlw	251
 12456   01123C  24E1               	addwf	fsr1l,w,c
 12457   01123E  6ED9               	movwf	fsr2l,c
 12458   011240  0EFF               	movlw	255
 12459   011242  20E2               	addwfc	fsr1h,w,c
 12460   011244  6EDA               	movwf	fsr2h,c
 12461                           
 12462                           ;stkvar	_mask @ sp[(-12)+-3]
 12463   011246  0EF1               	movlw	-15
 12464   011248  CFE3 F00B          	movff	plusw1,btemp+10
 12465   01124C  0EF2               	movlw	-14
 12466   01124E  CFE3 F00C          	movff	plusw1,btemp+11
 12467   011252  0E05               	movlw	5
 12468   011254  240B               	addwf	(btemp+10)^0,w,c
 12469   011256  6EE9               	movwf	fsr0l,c
 12470   011258  0E00               	movlw	0
 12471   01125A  200C               	addwfc	(btemp+11)^0,w,c
 12472   01125C  6EEA               	movwf	fsr0h,c
 12473   01125E  50EF               	movf	indf0,w,c
 12474   011260  6E0C               	movwf	(btemp+11)^0,c
 12475   011262  0E06               	movlw	6
 12476   011264  6E01               	movwf	btemp^0,c
 12477   011266                     u2645:
 12478   011266  90D8               	bcf	status,0,c
 12479   011268  360C               	rlcf	(btemp+11)^0,f,c
 12480   01126A  2E01               	decfsz	btemp^0,f,c
 12481   01126C  EF33  F089         	goto	u2645
 12482                           
 12483                           ;stkvar	_mask @ sp[(-12)+-3]
 12484   011270  0EF1               	movlw	-15
 12485   011272  CFE3 F009          	movff	plusw1,btemp+8
 12486   011276  0EF2               	movlw	-14
 12487   011278  CFE3 F00A          	movff	plusw1,btemp+9
 12488   01127C  0E04               	movlw	4
 12489   01127E  2409               	addwf	(btemp+8)^0,w,c
 12490   011280  6EE9               	movwf	fsr0l,c
 12491   011282  0E00               	movlw	0
 12492   011284  200A               	addwfc	(btemp+9)^0,w,c
 12493   011286  6EEA               	movwf	fsr0h,c
 12494   011288  50EF               	movf	indf0,w,c
 12495   01128A  6E0B               	movwf	(btemp+10)^0,c
 12496   01128C  0E05               	movlw	5
 12497   01128E  6E01               	movwf	btemp^0,c
 12498   011290                     u2655:
 12499   011290  90D8               	bcf	status,0,c
 12500   011292  360B               	rlcf	(btemp+10)^0,f,c
 12501   011294  2E01               	decfsz	btemp^0,f,c
 12502   011296  EF48  F089         	goto	u2655
 12503                           
 12504                           ;stkvar	_mask @ sp[(-12)+-3]
 12505   01129A  0EF1               	movlw	-15
 12506   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 12507   0112A0  0EF2               	movlw	-14
 12508   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 12509   0112A6  CFEE F005          	movff	postinc0,btemp+4
 12510   0112AA  CFEE F006          	movff	postinc0,btemp+5
 12511   0112AE  CFEE F007          	movff	postinc0,btemp+6
 12512   0112B2  CFEE F008          	movff	postinc0,btemp+7
 12513   0112B6  0E19               	movlw	25
 12514   0112B8  EF63  F089         	goto	u2660
 12515   0112BC                     u2665:
 12516   0112BC  90D8               	bcf	status,0,c
 12517   0112BE  3208               	rrcf	(btemp+7)^0,f,c
 12518   0112C0  3207               	rrcf	(btemp+6)^0,f,c
 12519   0112C2  3206               	rrcf	(btemp+5)^0,f,c
 12520   0112C4  3205               	rrcf	(btemp+4)^0,f,c
 12521   0112C6                     u2660:
 12522   0112C6  2EE8               	decfsz	wreg,f,c
 12523   0112C8  EF5E  F089         	goto	u2665
 12524   0112CC  5005               	movf	(btemp+4)^0,w,c
 12525   0112CE  100B               	iorwf	(btemp+10)^0,w,c
 12526   0112D0  100C               	iorwf	(btemp+11)^0,w,c
 12527   0112D2  6EDF               	movwf	indf2,c
 12528                           
 12529                           ;can/can.c: 1053:     }
 12530   0112D4  EF31  F08A         	goto	l4982
 12531   0112D8                     l4970:
 12532                           
 12533                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 12534                           ;stkvar	_mask @ sp[(-12)+-3]
 12535   0112D8  0EF1               	movlw	-15
 12536   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 12537   0112DE  0EF2               	movlw	-14
 12538   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 12539   0112E4  CFDE F009          	movff	postinc2,btemp+8
 12540   0112E8  CFDE F00A          	movff	postinc2,btemp+9
 12541   0112EC  CFDE F00B          	movff	postinc2,btemp+10
 12542   0112F0  CFDE F00C          	movff	postinc2,btemp+11
 12543   0112F4  0E13               	movlw	19
 12544   0112F6  EF82  F089         	goto	u2670
 12545   0112FA                     u2675:
 12546   0112FA  90D8               	bcf	status,0,c
 12547   0112FC  320C               	rrcf	(btemp+11)^0,f,c
 12548   0112FE  320B               	rrcf	(btemp+10)^0,f,c
 12549   011300  320A               	rrcf	(btemp+9)^0,f,c
 12550   011302  3209               	rrcf	(btemp+8)^0,f,c
 12551   011304                     u2670:
 12552   011304  2EE8               	decfsz	wreg,f,c
 12553   011306  EF7D  F089         	goto	u2675
 12554   01130A  0EFF               	movlw	255
 12555   01130C  1409               	andwf	(btemp+8)^0,w,c
 12556   01130E  6E05               	movwf	(btemp+4)^0,c
 12557   011310  0E07               	movlw	7
 12558   011312  140A               	andwf	(btemp+9)^0,w,c
 12559   011314  6E06               	movwf	(btemp+5)^0,c
 12560   011316  0E00               	movlw	0
 12561   011318  140B               	andwf	(btemp+10)^0,w,c
 12562   01131A  6E07               	movwf	(btemp+6)^0,c
 12563   01131C  0E00               	movlw	0
 12564   01131E  140C               	andwf	(btemp+11)^0,w,c
 12565   011320  6E08               	movwf	(btemp+7)^0,c
 12566                           
 12567                           ;stkvar	_mask @ sp[(-12)+-3]
 12568   011322  0EF1               	movlw	-15
 12569   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 12570   011328  0EF2               	movlw	-14
 12571   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 12572   01132E  0EFF               	movlw	255
 12573   011330  14DE               	andwf	postinc2,w,c
 12574   011332  6E09               	movwf	(btemp+8)^0,c
 12575   011334  0EFF               	movlw	255
 12576   011336  14DE               	andwf	postinc2,w,c
 12577   011338  6E0A               	movwf	(btemp+9)^0,c
 12578   01133A  0E03               	movlw	3
 12579   01133C  14DE               	andwf	postinc2,w,c
 12580   01133E  6E0B               	movwf	(btemp+10)^0,c
 12581   011340  0E00               	movlw	0
 12582   011342  14DE               	andwf	postinc2,w,c
 12583   011344  6E0C               	movwf	(btemp+11)^0,c
 12584   011346  0E0B               	movlw	11
 12585   011348                     u2685:
 12586   011348  90D8               	bcf	status,0,c
 12587   01134A  3609               	rlcf	(btemp+8)^0,f,c
 12588   01134C  360A               	rlcf	(btemp+9)^0,f,c
 12589   01134E  360B               	rlcf	(btemp+10)^0,f,c
 12590   011350  360C               	rlcf	(btemp+11)^0,f,c
 12591   011352  2EE8               	decfsz	wreg,f,c
 12592   011354  EFA4  F089         	goto	u2685
 12593   011358  5005               	movf	(btemp+4)^0,w,c
 12594   01135A  1009               	iorwf	(btemp+8)^0,w,c
 12595   01135C  6E01               	movwf	btemp^0,c
 12596   01135E  5006               	movf	(btemp+5)^0,w,c
 12597   011360  100A               	iorwf	(btemp+9)^0,w,c
 12598   011362  6E02               	movwf	(btemp+1)^0,c
 12599   011364  5007               	movf	(btemp+6)^0,w,c
 12600   011366  100B               	iorwf	(btemp+10)^0,w,c
 12601   011368  6E03               	movwf	(btemp+2)^0,c
 12602   01136A  5008               	movf	(btemp+7)^0,w,c
 12603   01136C  100C               	iorwf	(btemp+11)^0,w,c
 12604   01136E  6E04               	movwf	(btemp+3)^0,c
 12605                           
 12606                           ;stkvar	_temp32 @ sp[(-12)+0]
 12607   011370  0EF4               	movlw	-12
 12608   011372  C001  FFE3         	movff	btemp,plusw1
 12609   011376  0EF5               	movlw	-11
 12610   011378  C002  FFE3         	movff	btemp+1,plusw1
 12611   01137C  0EF6               	movlw	-10
 12612   01137E  C003  FFE3         	movff	btemp+2,plusw1
 12613   011382  0EF7               	movlw	-9
 12614   011384  C004  FFE3         	movff	btemp+3,plusw1
 12615   011388                     
 12616                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 12617                           ;stkvar	_temp32 @ sp[(-12)+0]
 12618   011388  50E1               	movf	fsr1l,w,c
 12619   01138A  0FF4               	addlw	-12
 12620   01138C  6ED9               	movwf	fsr2l,c
 12621   01138E  50E2               	movf	fsr1h,w,c
 12622   011390  6EDA               	movwf	fsr2h,c
 12623   011392  0EFF               	movlw	255
 12624   011394  22DA               	addwfc	fsr2h,f,c
 12625   011396  0EFF               	movlw	255
 12626   011398  16DE               	andwf	postinc2,f,c
 12627   01139A  0EFF               	movlw	255
 12628   01139C  16DE               	andwf	postinc2,f,c
 12629   01139E  0EFF               	movlw	255
 12630   0113A0  16DE               	andwf	postinc2,f,c
 12631   0113A2  0E1F               	movlw	31
 12632   0113A4  16DE               	andwf	postinc2,f,c
 12633   0113A6                     
 12634                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 12635                           ;stkvar	_temp32 @ sp[(-12)+0]
 12636                           ;stkvar	_mObj @ sp[(-12)+4]
 12637   0113A6  0EF4               	movlw	-12
 12638   0113A8  CFE3 F001          	movff	plusw1,btemp
 12639   0113AC  0EF8               	movlw	-8
 12640   0113AE  C001  FFE3         	movff	btemp,plusw1
 12641   0113B2                     
 12642                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 12643                           ;stkvar	_temp32 @ sp[(-12)+0]
 12644   0113B2  0EF5               	movlw	245
 12645   0113B4  24E1               	addwf	fsr1l,w,c
 12646   0113B6  6ED9               	movwf	fsr2l,c
 12647   0113B8  0EFF               	movlw	255
 12648   0113BA  20E2               	addwfc	fsr1h,w,c
 12649   0113BC  6EDA               	movwf	fsr2h,c
 12650                           
 12651                           ;stkvar	_mObj @ sp[(-12)+4]
 12652   0113BE  0EF9               	movlw	249
 12653   0113C0  24E1               	addwf	fsr1l,w,c
 12654   0113C2  6EE9               	movwf	fsr0l,c
 12655   0113C4  0EFF               	movlw	255
 12656   0113C6  20E2               	addwfc	fsr1h,w,c
 12657   0113C8  6EEA               	movwf	fsr0h,c
 12658   0113CA  CFDF FFEF          	movff	indf2,indf0
 12659   0113CE                     
 12660                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 12661                           ;stkvar	_temp32 @ sp[(-12)+0]
 12662   0113CE  0EF6               	movlw	246
 12663   0113D0  24E1               	addwf	fsr1l,w,c
 12664   0113D2  6ED9               	movwf	fsr2l,c
 12665   0113D4  0EFF               	movlw	255
 12666   0113D6  20E2               	addwfc	fsr1h,w,c
 12667   0113D8  6EDA               	movwf	fsr2h,c
 12668                           
 12669                           ;stkvar	_mObj @ sp[(-12)+4]
 12670   0113DA  0EFA               	movlw	250
 12671   0113DC  24E1               	addwf	fsr1l,w,c
 12672   0113DE  6EE9               	movwf	fsr0l,c
 12673   0113E0  0EFF               	movlw	255
 12674   0113E2  20E2               	addwfc	fsr1h,w,c
 12675   0113E4  6EEA               	movwf	fsr0h,c
 12676   0113E6  CFDF FFEF          	movff	indf2,indf0
 12677   0113EA                     
 12678                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 12679                           ;stkvar	_mObj @ sp[(-12)+4]
 12680   0113EA  0EFB               	movlw	251
 12681   0113EC  24E1               	addwf	fsr1l,w,c
 12682   0113EE  6ED9               	movwf	fsr2l,c
 12683   0113F0  0EFF               	movlw	255
 12684   0113F2  20E2               	addwfc	fsr1h,w,c
 12685   0113F4  6EDA               	movwf	fsr2h,c
 12686                           
 12687                           ;stkvar	_temp32 @ sp[(-12)+0]
 12688   0113F6  0EF7               	movlw	247
 12689   0113F8  24E1               	addwf	fsr1l,w,c
 12690   0113FA  6EE9               	movwf	fsr0l,c
 12691   0113FC  0EFF               	movlw	255
 12692   0113FE  20E2               	addwfc	fsr1h,w,c
 12693   011400  6EEA               	movwf	fsr0h,c
 12694   011402  50EF               	movf	indf0,w,c
 12695   011404  6E0C               	movwf	(btemp+11)^0,c
 12696                           
 12697                           ;stkvar	_mask @ sp[(-12)+-3]
 12698   011406  0EF1               	movlw	-15
 12699   011408  CFE3 F009          	movff	plusw1,btemp+8
 12700   01140C  0EF2               	movlw	-14
 12701   01140E  CFE3 F00A          	movff	plusw1,btemp+9
 12702   011412  0E05               	movlw	5
 12703   011414  2409               	addwf	(btemp+8)^0,w,c
 12704   011416  6EE9               	movwf	fsr0l,c
 12705   011418  0E00               	movlw	0
 12706   01141A  200A               	addwfc	(btemp+9)^0,w,c
 12707   01141C  6EEA               	movwf	fsr0h,c
 12708   01141E  50EF               	movf	indf0,w,c
 12709   011420  6E0B               	movwf	(btemp+10)^0,c
 12710   011422  0E06               	movlw	6
 12711   011424  6E01               	movwf	btemp^0,c
 12712   011426                     u2695:
 12713   011426  90D8               	bcf	status,0,c
 12714   011428  360B               	rlcf	(btemp+10)^0,f,c
 12715   01142A  2E01               	decfsz	btemp^0,f,c
 12716   01142C  EF13  F08A         	goto	u2695
 12717                           
 12718                           ;stkvar	_mask @ sp[(-12)+-3]
 12719   011430  0EF1               	movlw	-15
 12720   011432  CFE3 F009          	movff	plusw1,btemp+8
 12721   011436  0EF2               	movlw	-14
 12722   011438  CFE3 F00A          	movff	plusw1,btemp+9
 12723   01143C  0E04               	movlw	4
 12724   01143E  2409               	addwf	(btemp+8)^0,w,c
 12725   011440  6EE9               	movwf	fsr0l,c
 12726   011442  0E00               	movlw	0
 12727   011444  200A               	addwfc	(btemp+9)^0,w,c
 12728   011446  6EEA               	movwf	fsr0h,c
 12729   011448  50EF               	movf	indf0,w,c
 12730   01144A  6E0A               	movwf	(btemp+9)^0,c
 12731   01144C  0E05               	movlw	5
 12732   01144E  6E01               	movwf	btemp^0,c
 12733   011450                     u2705:
 12734   011450  90D8               	bcf	status,0,c
 12735   011452  360A               	rlcf	(btemp+9)^0,f,c
 12736   011454  2E01               	decfsz	btemp^0,f,c
 12737   011456  EF28  F08A         	goto	u2705
 12738   01145A  500A               	movf	(btemp+9)^0,w,c
 12739   01145C  100B               	iorwf	(btemp+10)^0,w,c
 12740   01145E  100C               	iorwf	(btemp+11)^0,w,c
 12741   011460  6EDF               	movwf	indf2,c
 12742   011462                     l4982:
 12743                           
 12744                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12745                           ;stkvar	_filter @ sp[(-12)+-1]
 12746   011462  0EF3               	movlw	-13
 12747   011464  50E3               	movf	plusw1,w,c
 12748   011466  0D08               	mullw	8
 12749   011468  CFF3 F00B          	movff	prodl,btemp+10
 12750   01146C  CFF4 F00C          	movff	prodh,btemp+11
 12751   011470  0EF4               	movlw	244
 12752   011472  240B               	addwf	(btemp+10)^0,w,c
 12753   011474  6E09               	movwf	(btemp+8)^0,c
 12754   011476  0E01               	movlw	1
 12755   011478  200C               	addwfc	(btemp+11)^0,w,c
 12756   01147A  6E0A               	movwf	(btemp+9)^0,c
 12757                           
 12758                           ;stkvar	_a @ sp[(-12)+10]
 12759   01147C  0EFE               	movlw	-2
 12760   01147E  C009  FFE3         	movff	btemp+8,plusw1
 12761   011482  0EFF               	movlw	-1
 12762   011484  C00A  FFE3         	movff	btemp+9,plusw1
 12763   011488                     
 12764                           ;stkvar	_mObj @ sp[(-12)+4]
 12765   011488  0EF8               	movlw	-8
 12766   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12767   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12768   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12769   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12770                           
 12771                           ;stkvar	_a @ sp[(-16)+10]
 12772   01149A  0EFA               	movlw	-6
 12773   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12774   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12775   0114A4  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12776   0114A8                     
 12777                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12778   0114A8  0EF0               	movlw	240
 12779   0114AA  26E1               	addwf	fsr1l,f,c
 12780   0114AC  0EFF               	movlw	255
 12781   0114AE  22E2               	addwfc	fsr1h,f,c
 12782   0114B0  0012               	return		;funcret
 12783   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12784                           	callstack 0
 12785                           
 12786 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12787 ;; Defined at:
 12788 ;;		line 1121 in file "can/can.c"
 12789 ;; Parameters:    Size  Location     Type
 12790 ;;  filter          1  [STACK] enum E5322
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;  a               2  [STACK] unsigned short 
 12793 ;;  spiTransferE    1  [STACK] char 
 12794 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1  [STACK] char 
 12797 ;; Registers used:
 12798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;Total ram usage:        0 bytes
 12809 ;; Hardware stack levels used: 1
 12810 ;; Hardware stack levels required when called: 9
 12811 ;; This function calls:
 12812 ;;		_DRV_CANFDSPI_ReadByte
 12813 ;;		_DRV_CANFDSPI_WriteByte
 12814 ;; This function is called by:
 12815 ;;		_CanSetFilter
 12816 ;; This function uses a reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text46
 12820   0141E4                     __ptext46:
 12821                           	callstack 0
 12822   0141E4                     _DRV_CANFDSPI_FilterDisable:
 12823                           	callstack 0
 12824                           
 12825                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12826   0141E4  52E6               	movf	postinc1,f,c
 12827   0141E6  52E6               	movf	postinc1,f,c
 12828   0141E8  52E6               	movf	postinc1,f,c
 12829   0141EA  52E6               	movf	postinc1,f,c
 12830   0141EC                     
 12831                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12832                           ;stkvar	_filter @ sp[(-4)+-1]
 12833   0141EC  0EFB               	movlw	-5
 12834   0141EE  CFE3 F00C          	movff	plusw1,btemp+11
 12835   0141F2  0ED0               	movlw	208
 12836   0141F4  240C               	addwf	(btemp+11)^0,w,c
 12837   0141F6  6E09               	movwf	(btemp+8)^0,c
 12838   0141F8  6A0A               	clrf	(btemp+9)^0,c
 12839   0141FA  0E01               	movlw	1
 12840   0141FC  220A               	addwfc	(btemp+9)^0,f,c
 12841                           
 12842                           ;stkvar	_a @ sp[(-4)+0]
 12843   0141FE  0EFC               	movlw	-4
 12844   014200  C009  FFE3         	movff	btemp+8,plusw1
 12845   014204  0EFD               	movlw	-3
 12846   014206  C00A  FFE3         	movff	btemp+9,plusw1
 12847   01420A                     
 12848                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 12849                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12850   01420A  0EFF               	movlw	255
 12851   01420C  24E1               	addwf	fsr1l,w,c
 12852   01420E  6E01               	movwf	btemp^0,c
 12853   014210  0EFF               	movlw	255
 12854   014212  20E2               	addwfc	fsr1h,w,c
 12855   014214  6E02               	movwf	(btemp+1)^0,c
 12856   014216  C001  FFE6         	movff	btemp,postinc1
 12857   01421A  C002  FFE6         	movff	btemp+1,postinc1
 12858                           
 12859                           ;stkvar	_a @ sp[(-6)+0]
 12860   01421E  0EFA               	movlw	-6
 12861   014220  CFE3 FFE6          	movff	plusw1,postinc1
 12862   014224  CFE3 FFE6          	movff	plusw1,postinc1
 12863   014228  EC99  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 12864                           
 12865                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12866   01422C  0EFE               	movlw	-2
 12867   01422E  C001  FFE3         	movff	btemp,plusw1
 12868   014232                     
 12869                           ;can/can.c: 1131:     if (spiTransferError) {
 12870                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12871   014232  0EFE               	movlw	-2
 12872   014234  50E3               	movf	plusw1,w,c
 12873   014236  B4D8               	btfsc	status,2,c
 12874   014238  EF20  F0A1         	goto	u2521
 12875   01423C  EF22  F0A1         	goto	u2520
 12876   014240                     u2521:
 12877   014240  EF24  F0A1         	goto	l4916
 12878   014244                     u2520:
 12879   014244  EF36  F0A1         	goto	l336
 12880   014248                     l4916:
 12881                           
 12882                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 12883                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12884   014248  50E1               	movf	fsr1l,w,c
 12885   01424A  0FFF               	addlw	-1
 12886   01424C  6ED9               	movwf	fsr2l,c
 12887   01424E  50E2               	movf	fsr1h,w,c
 12888   014250  6EDA               	movwf	fsr2h,c
 12889   014252  0EFF               	movlw	255
 12890   014254  22DA               	addwfc	fsr2h,f,c
 12891   014256  9EDF               	bcf	indf2,7,c
 12892   014258                     
 12893                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12894   014258  0EFF               	movlw	-1
 12895   01425A  50E3               	movf	plusw1,w,c
 12896   01425C  6EE6               	movwf	postinc1,c
 12897                           
 12898                           ;stkvar	_a @ sp[(-5)+0]
 12899   01425E  0EFB               	movlw	-5
 12900   014260  CFE3 FFE6          	movff	plusw1,postinc1
 12901   014264  CFE3 FFE6          	movff	plusw1,postinc1
 12902   014268  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12903   01426C                     l336:
 12904                           
 12905                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 12906   01426C  0EFB               	movlw	251
 12907   01426E  26E1               	addwf	fsr1l,f,c
 12908   014270  0EFF               	movlw	255
 12909   014272  22E2               	addwfc	fsr1h,f,c
 12910   014274  0012               	return		;funcret
 12911   014276                     __end_of_DRV_CANFDSPI_FilterDisable:
 12912                           	callstack 0
 12913                           
 12914 ;; *************** function _CanInit *****************
 12915 ;; Defined at:
 12916 ;;		line 156 in file "can/can.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  bitTime         1  [STACK] enum E5604
 12919 ;;  withISR         1  [STACK] _Bool 
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 12922 ;;  config          3  [STACK] struct _CAN_CONFIG
 12923 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 12924 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 12925 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1  [STACK] void 
 12928 ;; Registers used:
 12929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;Total ram usage:        0 bytes
 12940 ;; Hardware stack levels used: 1
 12941 ;; Hardware stack levels required when called: 10
 12942 ;; This function calls:
 12943 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 12944 ;;		_DRV_CANFDSPI_Configure
 12945 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 12946 ;;		_DRV_CANFDSPI_ModuleEventEnable
 12947 ;;		_DRV_CANFDSPI_OperationModeSelect
 12948 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 12949 ;;		_DRV_CANFDSPI_Reset
 12950 ;;		_DRV_CANFDSPI_TefConfigure
 12951 ;;		_DRV_CANFDSPI_TimeStampEnable
 12952 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 12953 ;;		_DRV_CANFDSPI_TimeStampSet
 12954 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 12955 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 12956 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 12957 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 12958 ;; This function is called by:
 12959 ;;		_main
 12960 ;; This function uses a reentrant model
 12961 ;;
 12962                           
 12963                           	psect	text47
 12964   011E64                     __ptext47:
 12965                           	callstack 0
 12966   011E64                     _CanInit:
 12967                           	callstack 0
 12968                           
 12969                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12970   011E64  0E0D               	movlw	13
 12971   011E66  26E1               	addwf	fsr1l,f,c
 12972   011E68  0E00               	movlw	0
 12973   011E6A  22E2               	addwfc	fsr1h,f,c
 12974   011E6C                     
 12975                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 12976   011E6C  9898               	bcf	152,4,c	;volatile
 12977                           
 12978                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 12979   011E6E  888F               	bsf	143,4,c	;volatile
 12980   011E70                     
 12981                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 12982   011E70  EC3E  F0A4         	call	_DRV_CANFDSPI_Reset	;wreg free
 12983   011E74                     
 12984                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 12985                           ;stkvar	_bitTime @ sp[(-13)+-1]
 12986   011E74  0EF2               	movlw	-14
 12987   011E76  50E3               	movf	plusw1,w,c
 12988   011E78  6EE6               	movwf	postinc1,c
 12989   011E7A  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 12990   011E7E                     
 12991                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 12992                           ;stkvar	_config @ sp[(-13)+4]
 12993   011E7E  0EF7               	movlw	247
 12994   011E80  24E1               	addwf	fsr1l,w,c
 12995   011E82  6E01               	movwf	btemp^0,c
 12996   011E84  0EFF               	movlw	255
 12997   011E86  20E2               	addwfc	fsr1h,w,c
 12998   011E88  6E02               	movwf	(btemp+1)^0,c
 12999   011E8A  C001  FFE6         	movff	btemp,postinc1
 13000   011E8E  C002  FFE6         	movff	btemp+1,postinc1
 13001   011E92  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 13002   011E96                     
 13003                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 13004                           ;stkvar	_config @ sp[(-13)+4]
 13005   011E96  50E1               	movf	fsr1l,w,c
 13006   011E98  0FF7               	addlw	-9
 13007   011E9A  6ED9               	movwf	fsr2l,c
 13008   011E9C  50E2               	movf	fsr1h,w,c
 13009   011E9E  6EDA               	movwf	fsr2h,c
 13010   011EA0  0EFF               	movlw	255
 13011   011EA2  22DA               	addwfc	fsr2h,f,c
 13012   011EA4  8ADF               	bsf	indf2,5,c
 13013   011EA6                     
 13014                           ;can/can.c: 166:     config.StoreInTEF = 1;
 13015                           ;stkvar	_config @ sp[(-13)+4]
 13016   011EA6  0EF8               	movlw	248
 13017   011EA8  24E1               	addwf	fsr1l,w,c
 13018   011EAA  6ED9               	movwf	fsr2l,c
 13019   011EAC  0EFF               	movlw	255
 13020   011EAE  20E2               	addwfc	fsr1h,w,c
 13021   011EB0  6EDA               	movwf	fsr2h,c
 13022   011EB2  8CDF               	bsf	indf2,6,c
 13023   011EB4                     
 13024                           ;can/can.c: 167:     config.TXQEnable = 1;
 13025                           ;stkvar	_config @ sp[(-13)+4]
 13026   011EB4  0EF8               	movlw	248
 13027   011EB6  24E1               	addwf	fsr1l,w,c
 13028   011EB8  6ED9               	movwf	fsr2l,c
 13029   011EBA  0EFF               	movlw	255
 13030   011EBC  20E2               	addwfc	fsr1h,w,c
 13031   011EBE  6EDA               	movwf	fsr2h,c
 13032   011EC0  8EDF               	bsf	indf2,7,c
 13033   011EC2                     
 13034                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 13035                           ;stkvar	_config @ sp[(-13)+4]
 13036   011EC2  0EF7               	movlw	247
 13037   011EC4  24E1               	addwf	fsr1l,w,c
 13038   011EC6  6E01               	movwf	btemp^0,c
 13039   011EC8  0EFF               	movlw	255
 13040   011ECA  20E2               	addwfc	fsr1h,w,c
 13041   011ECC  6E02               	movwf	(btemp+1)^0,c
 13042   011ECE  C001  FFE6         	movff	btemp,postinc1
 13043   011ED2  C002  FFE6         	movff	btemp+1,postinc1
 13044   011ED6  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 13045   011EDA                     
 13046                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 13047                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13048   011EDA  50E1               	movf	fsr1l,w,c
 13049   011EDC  0FFF               	addlw	-1
 13050   011EDE  6ED9               	movwf	fsr2l,c
 13051   011EE0  50E2               	movf	fsr1h,w,c
 13052   011EE2  6EDA               	movwf	fsr2h,c
 13053   011EE4  0EFF               	movlw	255
 13054   011EE6  22DA               	addwfc	fsr2h,f,c
 13055   011EE8  50DF               	movf	223,w,c
 13056   011EEA  0BC1               	andlw	-63
 13057   011EEC  0916               	iorlw	22
 13058   011EEE  6EDF               	movwf	223,c
 13059   011EF0                     
 13060                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13061                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13062   011EF0  50E1               	movf	fsr1l,w,c
 13063   011EF2  0FFF               	addlw	-1
 13064   011EF4  6ED9               	movwf	fsr2l,c
 13065   011EF6  50E2               	movf	fsr1h,w,c
 13066   011EF8  6EDA               	movwf	fsr2h,c
 13067   011EFA  0EFF               	movlw	255
 13068   011EFC  22DA               	addwfc	fsr2h,f,c
 13069   011EFE  80DF               	bsf	indf2,0,c
 13070   011F00                     
 13071                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13072                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13073   011F00  0EFF               	movlw	255
 13074   011F02  24E1               	addwf	fsr1l,w,c
 13075   011F04  6E01               	movwf	btemp^0,c
 13076   011F06  0EFF               	movlw	255
 13077   011F08  20E2               	addwfc	fsr1h,w,c
 13078   011F0A  6E02               	movwf	(btemp+1)^0,c
 13079   011F0C  C001  FFE6         	movff	btemp,postinc1
 13080   011F10  C002  FFE6         	movff	btemp+1,postinc1
 13081   011F14  EC9B  F09D         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13082   011F18                     
 13083                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13084                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13085   011F18  0EF3               	movlw	243
 13086   011F1A  24E1               	addwf	fsr1l,w,c
 13087   011F1C  6E01               	movwf	btemp^0,c
 13088   011F1E  0EFF               	movlw	255
 13089   011F20  20E2               	addwfc	fsr1h,w,c
 13090   011F22  6E02               	movwf	(btemp+1)^0,c
 13091   011F24  C001  FFE6         	movff	btemp,postinc1
 13092   011F28  C002  FFE6         	movff	btemp+1,postinc1
 13093   011F2C  ECB0  F09A         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13094   011F30                     
 13095                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13096                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13097   011F30  0EF3               	movlw	-13
 13098   011F32  6AE3               	clrf	plusw1,c
 13099   011F34  2AE3               	incf	plusw1,f,c
 13100   011F36                     
 13101                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13102                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13103   011F36  0EF5               	movlw	245
 13104   011F38  24E1               	addwf	fsr1l,w,c
 13105   011F3A  6ED9               	movwf	fsr2l,c
 13106   011F3C  0EFF               	movlw	255
 13107   011F3E  20E2               	addwfc	fsr1h,w,c
 13108   011F40  6EDA               	movwf	fsr2h,c
 13109   011F42  0E07               	movlw	7
 13110   011F44  6EDF               	movwf	indf2,c
 13111   011F46                     
 13112                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13113                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13114   011F46  0EF6               	movlw	246
 13115   011F48  24E1               	addwf	fsr1l,w,c
 13116   011F4A  6ED9               	movwf	fsr2l,c
 13117   011F4C  0EFF               	movlw	255
 13118   011F4E  20E2               	addwfc	fsr1h,w,c
 13119   011F50  6EDA               	movwf	fsr2h,c
 13120   011F52  0E05               	movlw	5
 13121   011F54  6EDF               	movwf	indf2,c
 13122   011F56                     
 13123                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13124                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13125   011F56  0EF3               	movlw	243
 13126   011F58  24E1               	addwf	fsr1l,w,c
 13127   011F5A  6E01               	movwf	btemp^0,c
 13128   011F5C  0EFF               	movlw	255
 13129   011F5E  20E2               	addwfc	fsr1h,w,c
 13130   011F60  6E02               	movwf	(btemp+1)^0,c
 13131   011F62  C001  FFE6         	movff	btemp,postinc1
 13132   011F66  C002  FFE6         	movff	btemp+1,postinc1
 13133   011F6A  ECE2  F097         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13134   011F6E                     
 13135                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13136                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13137   011F6E  0EFD               	movlw	253
 13138   011F70  24E1               	addwf	fsr1l,w,c
 13139   011F72  6E01               	movwf	btemp^0,c
 13140   011F74  0EFF               	movlw	255
 13141   011F76  20E2               	addwfc	fsr1h,w,c
 13142   011F78  6E02               	movwf	(btemp+1)^0,c
 13143   011F7A  C001  FFE6         	movff	btemp,postinc1
 13144   011F7E  C002  FFE6         	movff	btemp+1,postinc1
 13145   011F82  EC82  F098         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13146   011F86                     
 13147                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13148                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13149   011F86  0EFE               	movlw	254
 13150   011F88  24E1               	addwf	fsr1l,w,c
 13151   011F8A  6ED9               	movwf	fsr2l,c
 13152   011F8C  0EFF               	movlw	255
 13153   011F8E  20E2               	addwfc	fsr1h,w,c
 13154   011F90  6EDA               	movwf	fsr2h,c
 13155   011F92  50DF               	movf	223,w,c
 13156   011F94  0BE0               	andlw	-32
 13157   011F96  0904               	iorlw	4
 13158   011F98  6EDF               	movwf	223,c
 13159   011F9A                     
 13160                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13161                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13162   011F9A  0EFE               	movlw	254
 13163   011F9C  24E1               	addwf	fsr1l,w,c
 13164   011F9E  6ED9               	movwf	fsr2l,c
 13165   011FA0  0EFF               	movlw	255
 13166   011FA2  20E2               	addwfc	fsr1h,w,c
 13167   011FA4  6EDA               	movwf	fsr2h,c
 13168   011FA6  0EE0               	movlw	224
 13169   011FA8  12DF               	iorwf	223,f,c
 13170   011FAA                     
 13171                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13172                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13173   011FAA  50E1               	movf	fsr1l,w,c
 13174   011FAC  0FFD               	addlw	-3
 13175   011FAE  6ED9               	movwf	fsr2l,c
 13176   011FB0  50E2               	movf	fsr1h,w,c
 13177   011FB2  6EDA               	movwf	fsr2h,c
 13178   011FB4  0EFF               	movlw	255
 13179   011FB6  22DA               	addwfc	fsr2h,f,c
 13180   011FB8  0EC1               	movlw	-63
 13181   011FBA  16DF               	andwf	223,f,c
 13182   011FBC                     
 13183                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13184                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13185   011FBC  0EFD               	movlw	253
 13186   011FBE  24E1               	addwf	fsr1l,w,c
 13187   011FC0  6E01               	movwf	btemp^0,c
 13188   011FC2  0EFF               	movlw	255
 13189   011FC4  20E2               	addwfc	fsr1h,w,c
 13190   011FC6  6E02               	movwf	(btemp+1)^0,c
 13191   011FC8  C001  FFE6         	movff	btemp,postinc1
 13192   011FCC  C002  FFE6         	movff	btemp+1,postinc1
 13193   011FD0  0E01               	movlw	1
 13194   011FD2  6EE6               	movwf	postinc1,c
 13195   011FD4  EC71  F094         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13196   011FD8                     
 13197                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13198                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13199   011FD8  0EFB               	movlw	251
 13200   011FDA  24E1               	addwf	fsr1l,w,c
 13201   011FDC  6ED9               	movwf	fsr2l,c
 13202   011FDE  0EFF               	movlw	255
 13203   011FE0  20E2               	addwfc	fsr1h,w,c
 13204   011FE2  6EDA               	movwf	fsr2h,c
 13205   011FE4  0E0F               	movlw	15
 13206   011FE6  6EDF               	movwf	indf2,c
 13207   011FE8                     
 13208                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13209                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13210   011FE8  0EFC               	movlw	252
 13211   011FEA  24E1               	addwf	fsr1l,w,c
 13212   011FEC  6ED9               	movwf	fsr2l,c
 13213   011FEE  0EFF               	movlw	255
 13214   011FF0  20E2               	addwfc	fsr1h,w,c
 13215   011FF2  6EDA               	movwf	fsr2h,c
 13216   011FF4  0E07               	movlw	7
 13217   011FF6  6EDF               	movwf	indf2,c
 13218   011FF8                     
 13219                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13220                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13221   011FF8  0EFA               	movlw	-6
 13222   011FFA  6AE3               	clrf	plusw1,c
 13223   011FFC  2AE3               	incf	plusw1,f,c
 13224   011FFE                     
 13225                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13226                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13227   011FFE  0EFA               	movlw	250
 13228   012000  24E1               	addwf	fsr1l,w,c
 13229   012002  6E01               	movwf	btemp^0,c
 13230   012004  0EFF               	movlw	255
 13231   012006  20E2               	addwfc	fsr1h,w,c
 13232   012008  6E02               	movwf	(btemp+1)^0,c
 13233   01200A  C001  FFE6         	movff	btemp,postinc1
 13234   01200E  C002  FFE6         	movff	btemp+1,postinc1
 13235   012012  0E02               	movlw	2
 13236   012014  6EE6               	movwf	postinc1,c
 13237   012016  EC41  F097         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13238   01201A                     
 13239                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13240   01201A  0E27               	movlw	39
 13241   01201C  6EE6               	movwf	postinc1,c
 13242   01201E  0E00               	movlw	0
 13243   012020  6EE6               	movwf	postinc1,c
 13244   012022  EC8C  F0A4         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13245   012026                     
 13246                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13247   012026  0E00               	movlw	0
 13248   012028  6EE6               	movwf	postinc1,c
 13249   01202A  0E00               	movlw	0
 13250   01202C  6EE6               	movwf	postinc1,c
 13251   01202E  0E00               	movlw	0
 13252   012030  6EE6               	movwf	postinc1,c
 13253   012032  0E00               	movlw	0
 13254   012034  6EE6               	movwf	postinc1,c
 13255   012036  EC54  F0A4         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13256   01203A                     
 13257                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13258   01203A  ECCA  F0A2         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13259   01203E                     
 13260                           ;can/can.c: 209:     if(withISR == 1)
 13261                           ;stkvar	_withISR @ sp[(-13)+-2]
 13262   01203E  0EF1               	movlw	-15
 13263   012040  04E3               	decf	plusw1,w,c
 13264   012042  A4D8               	btfss	status,2,c
 13265   012044  EF26  F090         	goto	u2921
 13266   012048  EF28  F090         	goto	u2920
 13267   01204C                     u2921:
 13268   01204C  EF30  F090         	goto	l5236
 13269   012050                     u2920:
 13270   012050                     
 13271                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13272   012050  0E02               	movlw	2
 13273   012052  6EE6               	movwf	postinc1,c
 13274   012054  0E00               	movlw	0
 13275   012056  6EE6               	movwf	postinc1,c
 13276   012058  0E00               	movlw	0
 13277   01205A  6EE6               	movwf	postinc1,c
 13278   01205C  EC67  F0A2         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13279   012060                     l5236:
 13280                           
 13281                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13282   012060  0E06               	movlw	6
 13283   012062  6EE6               	movwf	postinc1,c
 13284   012064  EC83  F0A1         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13285   012068                     
 13286                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13287   012068  0EF1               	movlw	241
 13288   01206A  26E1               	addwf	fsr1l,f,c
 13289   01206C  0EFF               	movlw	255
 13290   01206E  22E2               	addwfc	fsr1h,f,c
 13291   012070  0012               	return		;funcret
 13292   012072                     __end_of_CanInit:
 13293                           	callstack 0
 13294                           
 13295 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13296 ;; Defined at:
 13297 ;;		line 693 in file "can/can.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13300 ;;		 -> txqConfig(4), 
 13301 ;; Auto vars:     Size  Location     Type
 13302 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13303 ;; Return value:  Size  Location     Type
 13304 ;;                  1  [STACK] char 
 13305 ;; Registers used:
 13306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;Total ram usage:        0 bytes
 13317 ;; Hardware stack levels used: 1
 13318 ;; Hardware stack levels required when called: 7
 13319 ;; This function calls:
 13320 ;;		Nothing
 13321 ;; This function is called by:
 13322 ;;		_CanInit
 13323 ;; This function uses a reentrant model
 13324 ;;
 13325                           
 13326                           	psect	text48
 13327   013560                     __ptext48:
 13328                           	callstack 0
 13329   013560                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13330                           	callstack 0
 13331                           
 13332                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13333   013560  0E05               	movlw	5
 13334   013562  26E1               	addwf	fsr1l,f,c
 13335   013564  0E00               	movlw	0
 13336   013566  22E2               	addwfc	fsr1h,f,c
 13337   013568                     
 13338                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13339   013568  0EDD               	movlw	low _canFifoResetValues
 13340   01356A  6EF6               	movwf	tblptrl,c
 13341   01356C                     	if	1	;There is more than 1 active tblptr byte
 13342   01356C  0EFF               	movlw	high _canFifoResetValues
 13343   01356E  6EF7               	movwf	tblptrh,c
 13344   013570                     	endif
 13345   013570                     	if	1	;There are 3 active tblptr bytes
 13346   013570  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13347   013572  6EF8               	movwf	tblptru,c
 13348   013574                     	endif
 13349   013574  0009               	tblrd		*+
 13350   013576  CFF5 F009          	movff	tablat,btemp+8
 13351   01357A  0009               	tblrd		*+
 13352   01357C  CFF5 F00A          	movff	tablat,btemp+9
 13353   013580  0009               	tblrd		*+
 13354   013582  CFF5 F00B          	movff	tablat,btemp+10
 13355   013586  0009               	tblrd		*+
 13356   013588  CFF5 F00C          	movff	tablat,btemp+11
 13357                           
 13358                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13359   01358C  0EFB               	movlw	-5
 13360   01358E  C009  FFE3         	movff	btemp+8,plusw1
 13361   013592  0EFC               	movlw	-4
 13362   013594  C00A  FFE3         	movff	btemp+9,plusw1
 13363   013598  0EFD               	movlw	-3
 13364   01359A  C00B  FFE3         	movff	btemp+10,plusw1
 13365   01359E  0EFE               	movlw	-2
 13366   0135A0  C00C  FFE3         	movff	btemp+11,plusw1
 13367   0135A4                     
 13368                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13369                           ;stkvar	_config @ sp[(-5)+-2]
 13370   0135A4  0EF9               	movlw	-7
 13371   0135A6  CFE3 FFD9          	movff	plusw1,fsr2l
 13372   0135AA  0EFA               	movlw	-6
 13373   0135AC  CFE3 FFDA          	movff	plusw1,fsr2h
 13374                           
 13375                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13376   0135B0  0EFD               	movlw	253
 13377   0135B2  24E1               	addwf	fsr1l,w,c
 13378   0135B4  6EE9               	movwf	fsr0l,c
 13379   0135B6  0EFF               	movlw	255
 13380   0135B8  20E2               	addwfc	fsr1h,w,c
 13381   0135BA  6EEA               	movwf	fsr0h,c
 13382   0135BC  50EF               	movf	239,w,c
 13383   0135BE  0B1F               	andlw	31
 13384   0135C0  6EDF               	movwf	indf2,c
 13385   0135C2                     
 13386                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13387                           ;stkvar	_config @ sp[(-5)+-2]
 13388   0135C2  0EF9               	movlw	-7
 13389   0135C4  CFE3 F00B          	movff	plusw1,btemp+10
 13390   0135C8  0EFA               	movlw	-6
 13391   0135CA  CFE3 F00C          	movff	plusw1,btemp+11
 13392   0135CE  0E01               	movlw	1
 13393   0135D0  240B               	addwf	(btemp+10)^0,w,c
 13394   0135D2  6ED9               	movwf	fsr2l,c
 13395   0135D4  0E00               	movlw	0
 13396   0135D6  200C               	addwfc	(btemp+11)^0,w,c
 13397   0135D8  6EDA               	movwf	fsr2h,c
 13398                           
 13399                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13400   0135DA  0EFD               	movlw	253
 13401   0135DC  24E1               	addwf	fsr1l,w,c
 13402   0135DE  6EE9               	movwf	fsr0l,c
 13403   0135E0  0EFF               	movlw	255
 13404   0135E2  20E2               	addwfc	fsr1h,w,c
 13405   0135E4  6EEA               	movwf	fsr0h,c
 13406   0135E6  38EF               	swapf	239,w,c
 13407   0135E8  32E8               	rrcf	wreg,f,c
 13408   0135EA  0B03               	andlw	3
 13409   0135EC  6EDF               	movwf	indf2,c
 13410   0135EE                     
 13411                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13412                           ;stkvar	_config @ sp[(-5)+-2]
 13413   0135EE  0EF9               	movlw	-7
 13414   0135F0  CFE3 F00B          	movff	plusw1,btemp+10
 13415   0135F4  0EFA               	movlw	-6
 13416   0135F6  CFE3 F00C          	movff	plusw1,btemp+11
 13417   0135FA  0E02               	movlw	2
 13418   0135FC  240B               	addwf	(btemp+10)^0,w,c
 13419   0135FE  6ED9               	movwf	fsr2l,c
 13420   013600  0E00               	movlw	0
 13421   013602  200C               	addwfc	(btemp+11)^0,w,c
 13422   013604  6EDA               	movwf	fsr2h,c
 13423                           
 13424                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13425   013606  0EFE               	movlw	254
 13426   013608  24E1               	addwf	fsr1l,w,c
 13427   01360A  6EE9               	movwf	fsr0l,c
 13428   01360C  0EFF               	movlw	255
 13429   01360E  20E2               	addwfc	fsr1h,w,c
 13430   013610  6EEA               	movwf	fsr0h,c
 13431   013612  50EF               	movf	239,w,c
 13432   013614  0B1F               	andlw	31
 13433   013616  6EDF               	movwf	indf2,c
 13434   013618                     
 13435                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13436                           ;stkvar	_config @ sp[(-5)+-2]
 13437   013618  0EF9               	movlw	-7
 13438   01361A  CFE3 F00B          	movff	plusw1,btemp+10
 13439   01361E  0EFA               	movlw	-6
 13440   013620  CFE3 F00C          	movff	plusw1,btemp+11
 13441   013624  0E03               	movlw	3
 13442   013626  240B               	addwf	(btemp+10)^0,w,c
 13443   013628  6ED9               	movwf	fsr2l,c
 13444   01362A  0E00               	movlw	0
 13445   01362C  200C               	addwfc	(btemp+11)^0,w,c
 13446   01362E  6EDA               	movwf	fsr2h,c
 13447                           
 13448                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13449   013630  0EFE               	movlw	254
 13450   013632  24E1               	addwf	fsr1l,w,c
 13451   013634  6EE9               	movwf	fsr0l,c
 13452   013636  0EFF               	movlw	255
 13453   013638  20E2               	addwfc	fsr1h,w,c
 13454   01363A  6EEA               	movwf	fsr0h,c
 13455   01363C  38EF               	swapf	239,w,c
 13456   01363E  32E8               	rrcf	wreg,f,c
 13457   013640  0B07               	andlw	7
 13458   013642  6EDF               	movwf	indf2,c
 13459   013644                     
 13460                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13461   013644  0EF9               	movlw	249
 13462   013646  26E1               	addwf	fsr1l,f,c
 13463   013648  0EFF               	movlw	255
 13464   01364A  22E2               	addwfc	fsr1h,f,c
 13465   01364C  0012               	return		;funcret
 13466   01364E                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13467                           	callstack 0
 13468                           
 13469 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13470 ;; Defined at:
 13471 ;;		line 671 in file "can/can.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13474 ;;		 -> txqConfig(4), 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13477 ;;  a               2    0        unsigned short 
 13478 ;;  spiTransferE    1    0        char 
 13479 ;; Return value:  Size  Location     Type
 13480 ;;                  1  [STACK] char 
 13481 ;; Registers used:
 13482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13483 ;; Tracked objects:
 13484 ;;		On entry : 0/0
 13485 ;;		On exit  : 0/0
 13486 ;;		Unchanged: 0/0
 13487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;Total ram usage:        0 bytes
 13493 ;; Hardware stack levels used: 1
 13494 ;; Hardware stack levels required when called: 9
 13495 ;; This function calls:
 13496 ;;		_DRV_CANFDSPI_WriteWord
 13497 ;; This function is called by:
 13498 ;;		_CanInit
 13499 ;; This function uses a reentrant model
 13500 ;;
 13501                           
 13502                           	psect	text49
 13503   012FC4                     __ptext49:
 13504                           	callstack 0
 13505   012FC4                     _DRV_CANFDSPI_TransmitQueueConfigure:
 13506                           	callstack 0
 13507                           
 13508                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13509   012FC4  52E6               	movf	postinc1,f,c
 13510   012FC6  52E6               	movf	postinc1,f,c
 13511   012FC8  52E6               	movf	postinc1,f,c
 13512   012FCA  52E6               	movf	postinc1,f,c
 13513   012FCC                     
 13514                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 13515   012FCC  0EDD               	movlw	low _canFifoResetValues
 13516   012FCE  6EF6               	movwf	tblptrl,c
 13517   012FD0                     	if	1	;There is more than 1 active tblptr byte
 13518   012FD0  0EFF               	movlw	high _canFifoResetValues
 13519   012FD2  6EF7               	movwf	tblptrh,c
 13520   012FD4                     	endif
 13521   012FD4                     	if	1	;There are 3 active tblptr bytes
 13522   012FD4  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13523   012FD6  6EF8               	movwf	tblptru,c
 13524   012FD8                     	endif
 13525   012FD8  0009               	tblrd		*+
 13526   012FDA  CFF5 F009          	movff	tablat,btemp+8
 13527   012FDE  0009               	tblrd		*+
 13528   012FE0  CFF5 F00A          	movff	tablat,btemp+9
 13529   012FE4  0009               	tblrd		*+
 13530   012FE6  CFF5 F00B          	movff	tablat,btemp+10
 13531   012FEA  0009               	tblrd		*+
 13532   012FEC  CFF5 F00C          	movff	tablat,btemp+11
 13533                           
 13534                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13535   012FF0  0EFC               	movlw	-4
 13536   012FF2  C009  FFE3         	movff	btemp+8,plusw1
 13537   012FF6  0EFD               	movlw	-3
 13538   012FF8  C00A  FFE3         	movff	btemp+9,plusw1
 13539   012FFC  0EFE               	movlw	-2
 13540   012FFE  C00B  FFE3         	movff	btemp+10,plusw1
 13541   013002  0EFF               	movlw	-1
 13542   013004  C00C  FFE3         	movff	btemp+11,plusw1
 13543   013008                     
 13544                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 13545                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13546   013008  50E1               	movf	fsr1l,w,c
 13547   01300A  0FFC               	addlw	-4
 13548   01300C  6ED9               	movwf	fsr2l,c
 13549   01300E  50E2               	movf	fsr1h,w,c
 13550   013010  6EDA               	movwf	fsr2h,c
 13551   013012  0EFF               	movlw	255
 13552   013014  22DA               	addwfc	fsr2h,f,c
 13553   013016  8EDF               	bsf	indf2,7,c
 13554   013018                     
 13555                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13556                           ;stkvar	_config @ sp[(-4)+-2]
 13557   013018  0EFA               	movlw	-6
 13558   01301A  CFE3 F00B          	movff	plusw1,btemp+10
 13559   01301E  0EFB               	movlw	-5
 13560   013020  CFE3 F00C          	movff	plusw1,btemp+11
 13561   013024  0E02               	movlw	2
 13562   013026  240B               	addwf	(btemp+10)^0,w,c
 13563   013028  6ED9               	movwf	fsr2l,c
 13564   01302A  0E00               	movlw	0
 13565   01302C  200C               	addwfc	(btemp+11)^0,w,c
 13566   01302E  6EDA               	movwf	fsr2h,c
 13567   013030  50DF               	movf	indf2,w,c
 13568   013032  6E0C               	movwf	(btemp+11)^0,c
 13569                           
 13570                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13571   013034  0EFF               	movlw	255
 13572   013036  24E1               	addwf	fsr1l,w,c
 13573   013038  6ED9               	movwf	fsr2l,c
 13574   01303A  0EFF               	movlw	255
 13575   01303C  20E2               	addwfc	fsr1h,w,c
 13576   01303E  6EDA               	movwf	fsr2h,c
 13577   013040  50DF               	movf	223,w,c
 13578   013042  180C               	xorwf	(btemp+11)^0,w,c
 13579   013044  0BE0               	andlw	-32
 13580   013046  180C               	xorwf	(btemp+11)^0,w,c
 13581   013048  6EDF               	movwf	223,c
 13582   01304A                     
 13583                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13584                           ;stkvar	_config @ sp[(-4)+-2]
 13585   01304A  0EFA               	movlw	-6
 13586   01304C  CFE3 F00B          	movff	plusw1,btemp+10
 13587   013050  0EFB               	movlw	-5
 13588   013052  CFE3 F00C          	movff	plusw1,btemp+11
 13589   013056  0E03               	movlw	3
 13590   013058  240B               	addwf	(btemp+10)^0,w,c
 13591   01305A  6ED9               	movwf	fsr2l,c
 13592   01305C  0E00               	movlw	0
 13593   01305E  200C               	addwfc	(btemp+11)^0,w,c
 13594   013060  6EDA               	movwf	fsr2h,c
 13595   013062  50DF               	movf	indf2,w,c
 13596   013064  6E0C               	movwf	(btemp+11)^0,c
 13597                           
 13598                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13599   013066  0EFF               	movlw	255
 13600   013068  24E1               	addwf	fsr1l,w,c
 13601   01306A  6ED9               	movwf	fsr2l,c
 13602   01306C  0EFF               	movlw	255
 13603   01306E  20E2               	addwfc	fsr1h,w,c
 13604   013070  6EDA               	movwf	fsr2h,c
 13605   013072  3A0C               	swapf	(btemp+11)^0,f,c
 13606   013074  460C               	rlncf	(btemp+11)^0,f,c
 13607   013076  50DF               	movf	223,w,c
 13608   013078  180C               	xorwf	(btemp+11)^0,w,c
 13609   01307A  0B1F               	andlw	-225
 13610   01307C  180C               	xorwf	(btemp+11)^0,w,c
 13611   01307E  6EDF               	movwf	223,c
 13612   013080                     
 13613                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13614                           ;stkvar	_config @ sp[(-4)+-2]
 13615   013080  0EFA               	movlw	-6
 13616   013082  CFE3 F00B          	movff	plusw1,btemp+10
 13617   013086  0EFB               	movlw	-5
 13618   013088  CFE3 F00C          	movff	plusw1,btemp+11
 13619   01308C  0E01               	movlw	1
 13620   01308E  240B               	addwf	(btemp+10)^0,w,c
 13621   013090  6ED9               	movwf	fsr2l,c
 13622   013092  0E00               	movlw	0
 13623   013094  200C               	addwfc	(btemp+11)^0,w,c
 13624   013096  6EDA               	movwf	fsr2h,c
 13625   013098  50DF               	movf	indf2,w,c
 13626   01309A  6E0C               	movwf	(btemp+11)^0,c
 13627                           
 13628                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13629   01309C  0EFE               	movlw	254
 13630   01309E  24E1               	addwf	fsr1l,w,c
 13631   0130A0  6ED9               	movwf	fsr2l,c
 13632   0130A2  0EFF               	movlw	255
 13633   0130A4  20E2               	addwfc	fsr1h,w,c
 13634   0130A6  6EDA               	movwf	fsr2h,c
 13635   0130A8  3A0C               	swapf	(btemp+11)^0,f,c
 13636   0130AA  460C               	rlncf	(btemp+11)^0,f,c
 13637   0130AC  50DF               	movf	223,w,c
 13638   0130AE  180C               	xorwf	(btemp+11)^0,w,c
 13639   0130B0  0B9F               	andlw	-97
 13640   0130B2  180C               	xorwf	(btemp+11)^0,w,c
 13641   0130B4  6EDF               	movwf	223,c
 13642   0130B6                     
 13643                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13644                           ;stkvar	_config @ sp[(-4)+-2]
 13645   0130B6  0EFA               	movlw	-6
 13646   0130B8  CFE3 FFD9          	movff	plusw1,fsr2l
 13647   0130BC  0EFB               	movlw	-5
 13648   0130BE  CFE3 FFDA          	movff	plusw1,fsr2h
 13649   0130C2  50DF               	movf	indf2,w,c
 13650   0130C4  6E0C               	movwf	(btemp+11)^0,c
 13651                           
 13652                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13653   0130C6  0EFE               	movlw	254
 13654   0130C8  24E1               	addwf	fsr1l,w,c
 13655   0130CA  6ED9               	movwf	fsr2l,c
 13656   0130CC  0EFF               	movlw	255
 13657   0130CE  20E2               	addwfc	fsr1h,w,c
 13658   0130D0  6EDA               	movwf	fsr2h,c
 13659   0130D2  50DF               	movf	223,w,c
 13660   0130D4  180C               	xorwf	(btemp+11)^0,w,c
 13661   0130D6  0BE0               	andlw	-32
 13662   0130D8  180C               	xorwf	(btemp+11)^0,w,c
 13663   0130DA  6EDF               	movwf	223,c
 13664   0130DC                     
 13665                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13666   0130DC  0EFC               	movlw	-4
 13667   0130DE  CFE3 FFE6          	movff	plusw1,postinc1
 13668   0130E2  CFE3 FFE6          	movff	plusw1,postinc1
 13669   0130E6  CFE3 FFE6          	movff	plusw1,postinc1
 13670   0130EA  CFE3 FFE6          	movff	plusw1,postinc1
 13671   0130EE  0E50               	movlw	80
 13672   0130F0  6EE6               	movwf	postinc1,c
 13673   0130F2  0E00               	movlw	0
 13674   0130F4  6EE6               	movwf	postinc1,c
 13675   0130F6  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13676   0130FA                     
 13677                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 13678   0130FA  0EFA               	movlw	250
 13679   0130FC  26E1               	addwf	fsr1l,f,c
 13680   0130FE  0EFF               	movlw	255
 13681   013100  22E2               	addwfc	fsr1h,f,c
 13682   013102  0012               	return		;funcret
 13683   013104                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 13684                           	callstack 0
 13685                           
 13686 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 13687 ;; Defined at:
 13688 ;;		line 657 in file "can/can.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13691 ;;		 -> txfConfig(2), 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13694 ;; Return value:  Size  Location     Type
 13695 ;;                  1  [STACK] char 
 13696 ;; Registers used:
 13697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13698 ;; Tracked objects:
 13699 ;;		On entry : 0/0
 13700 ;;		On exit  : 0/0
 13701 ;;		Unchanged: 0/0
 13702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13707 ;;Total ram usage:        0 bytes
 13708 ;; Hardware stack levels used: 1
 13709 ;; Hardware stack levels required when called: 7
 13710 ;; This function calls:
 13711 ;;		Nothing
 13712 ;; This function is called by:
 13713 ;;		_CanInit
 13714 ;; This function uses a reentrant model
 13715 ;;
 13716                           
 13717                           	psect	text50
 13718   013104                     __ptext50:
 13719                           	callstack 0
 13720   013104                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13721                           	callstack 0
 13722                           
 13723                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13724   013104  0E05               	movlw	5
 13725   013106  26E1               	addwf	fsr1l,f,c
 13726   013108  0E00               	movlw	0
 13727   01310A  22E2               	addwfc	fsr1h,f,c
 13728   01310C                     
 13729                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13730   01310C  0EDD               	movlw	low _canFifoResetValues
 13731   01310E  6EF6               	movwf	tblptrl,c
 13732   013110                     	if	1	;There is more than 1 active tblptr byte
 13733   013110  0EFF               	movlw	high _canFifoResetValues
 13734   013112  6EF7               	movwf	tblptrh,c
 13735   013114                     	endif
 13736   013114                     	if	1	;There are 3 active tblptr bytes
 13737   013114  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13738   013116  6EF8               	movwf	tblptru,c
 13739   013118                     	endif
 13740   013118  0009               	tblrd		*+
 13741   01311A  CFF5 F009          	movff	tablat,btemp+8
 13742   01311E  0009               	tblrd		*+
 13743   013120  CFF5 F00A          	movff	tablat,btemp+9
 13744   013124  0009               	tblrd		*+
 13745   013126  CFF5 F00B          	movff	tablat,btemp+10
 13746   01312A  0009               	tblrd		*+
 13747   01312C  CFF5 F00C          	movff	tablat,btemp+11
 13748                           
 13749                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13750   013130  0EFB               	movlw	-5
 13751   013132  C009  FFE3         	movff	btemp+8,plusw1
 13752   013136  0EFC               	movlw	-4
 13753   013138  C00A  FFE3         	movff	btemp+9,plusw1
 13754   01313C  0EFD               	movlw	-3
 13755   01313E  C00B  FFE3         	movff	btemp+10,plusw1
 13756   013142  0EFE               	movlw	-2
 13757   013144  C00C  FFE3         	movff	btemp+11,plusw1
 13758   013148                     
 13759                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13760                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13761   013148  50E1               	movf	fsr1l,w,c
 13762   01314A  0FFB               	addlw	-5
 13763   01314C  6ED9               	movwf	fsr2l,c
 13764   01314E  50E2               	movf	fsr1h,w,c
 13765   013150  6EDA               	movwf	fsr2h,c
 13766   013152  0EFF               	movlw	255
 13767   013154  22DA               	addwfc	fsr2h,f,c
 13768                           
 13769                           ;stkvar	_config @ sp[(-5)+-2]
 13770   013156  0EF9               	movlw	-7
 13771   013158  CFE3 FFE9          	movff	plusw1,fsr0l
 13772   01315C  0EFA               	movlw	-6
 13773   01315E  CFE3 FFEA          	movff	plusw1,fsr0h
 13774   013162  90EF               	bcf	indf0,0,c
 13775   013164  ACDF               	btfss	indf2,6,c
 13776   013166  EFB6  F098         	goto	u995
 13777   01316A  80EF               	bsf	indf0,0,c
 13778   01316C                     u995:
 13779   01316C                     
 13780                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13781                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13782   01316C  0EFD               	movlw	253
 13783   01316E  24E1               	addwf	fsr1l,w,c
 13784   013170  6ED9               	movwf	fsr2l,c
 13785   013172  0EFF               	movlw	255
 13786   013174  20E2               	addwfc	fsr1h,w,c
 13787   013176  6EDA               	movwf	fsr2h,c
 13788   013178  50DF               	movf	223,w,c
 13789   01317A  0B1F               	andlw	31
 13790   01317C  6E0C               	movwf	(btemp+11)^0,c
 13791                           
 13792                           ;stkvar	_config @ sp[(-5)+-2]
 13793   01317E  0EF9               	movlw	-7
 13794   013180  CFE3 FFD9          	movff	plusw1,fsr2l
 13795   013184  0EFA               	movlw	-6
 13796   013186  CFE3 FFDA          	movff	plusw1,fsr2h
 13797   01318A  460C               	rlncf	(btemp+11)^0,f,c
 13798   01318C  50DF               	movf	223,w,c
 13799   01318E  180C               	xorwf	(btemp+11)^0,w,c
 13800   013190  0BC1               	andlw	-63
 13801   013192  180C               	xorwf	(btemp+11)^0,w,c
 13802   013194  6EDF               	movwf	223,c
 13803   013196                     
 13804                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13805                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13806   013196  0EFD               	movlw	253
 13807   013198  24E1               	addwf	fsr1l,w,c
 13808   01319A  6ED9               	movwf	fsr2l,c
 13809   01319C  0EFF               	movlw	255
 13810   01319E  20E2               	addwfc	fsr1h,w,c
 13811   0131A0  6EDA               	movwf	fsr2h,c
 13812   0131A2  38DF               	swapf	223,w,c
 13813   0131A4  32E8               	rrcf	wreg,f,c
 13814   0131A6  0B03               	andlw	3
 13815   0131A8  6E0C               	movwf	(btemp+11)^0,c
 13816                           
 13817                           ;stkvar	_config @ sp[(-5)+-2]
 13818   0131AA  0EF9               	movlw	-7
 13819   0131AC  CFE3 FFD9          	movff	plusw1,fsr2l
 13820   0131B0  0EFA               	movlw	-6
 13821   0131B2  CFE3 FFDA          	movff	plusw1,fsr2h
 13822   0131B6  3A0C               	swapf	(btemp+11)^0,f,c
 13823   0131B8  460C               	rlncf	(btemp+11)^0,f,c
 13824   0131BA  460C               	rlncf	(btemp+11)^0,f,c
 13825   0131BC  50DF               	movf	223,w,c
 13826   0131BE  180C               	xorwf	(btemp+11)^0,w,c
 13827   0131C0  0B3F               	andlw	-193
 13828   0131C2  180C               	xorwf	(btemp+11)^0,w,c
 13829   0131C4  6EDF               	movwf	223,c
 13830   0131C6                     
 13831                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13832                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13833   0131C6  0EFE               	movlw	254
 13834   0131C8  24E1               	addwf	fsr1l,w,c
 13835   0131CA  6ED9               	movwf	fsr2l,c
 13836   0131CC  0EFF               	movlw	255
 13837   0131CE  20E2               	addwfc	fsr1h,w,c
 13838   0131D0  6EDA               	movwf	fsr2h,c
 13839   0131D2  50DF               	movf	223,w,c
 13840   0131D4  0B1F               	andlw	31
 13841   0131D6  6E0C               	movwf	(btemp+11)^0,c
 13842                           
 13843                           ;stkvar	_config @ sp[(-5)+-2]
 13844   0131D8  0EF9               	movlw	-7
 13845   0131DA  CFE3 F009          	movff	plusw1,btemp+8
 13846   0131DE  0EFA               	movlw	-6
 13847   0131E0  CFE3 F00A          	movff	plusw1,btemp+9
 13848   0131E4  0E01               	movlw	1
 13849   0131E6  2409               	addwf	(btemp+8)^0,w,c
 13850   0131E8  6ED9               	movwf	fsr2l,c
 13851   0131EA  0E00               	movlw	0
 13852   0131EC  200A               	addwfc	(btemp+9)^0,w,c
 13853   0131EE  6EDA               	movwf	fsr2h,c
 13854   0131F0  50DF               	movf	223,w,c
 13855   0131F2  180C               	xorwf	(btemp+11)^0,w,c
 13856   0131F4  0BE0               	andlw	-32
 13857   0131F6  180C               	xorwf	(btemp+11)^0,w,c
 13858   0131F8  6EDF               	movwf	223,c
 13859   0131FA                     
 13860                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13861                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13862   0131FA  0EFE               	movlw	254
 13863   0131FC  24E1               	addwf	fsr1l,w,c
 13864   0131FE  6ED9               	movwf	fsr2l,c
 13865   013200  0EFF               	movlw	255
 13866   013202  20E2               	addwfc	fsr1h,w,c
 13867   013204  6EDA               	movwf	fsr2h,c
 13868   013206  38DF               	swapf	223,w,c
 13869   013208  32E8               	rrcf	wreg,f,c
 13870   01320A  0B07               	andlw	7
 13871   01320C  6E0C               	movwf	(btemp+11)^0,c
 13872                           
 13873                           ;stkvar	_config @ sp[(-5)+-2]
 13874   01320E  0EF9               	movlw	-7
 13875   013210  CFE3 F009          	movff	plusw1,btemp+8
 13876   013214  0EFA               	movlw	-6
 13877   013216  CFE3 F00A          	movff	plusw1,btemp+9
 13878   01321A  0E01               	movlw	1
 13879   01321C  2409               	addwf	(btemp+8)^0,w,c
 13880   01321E  6ED9               	movwf	fsr2l,c
 13881   013220  0E00               	movlw	0
 13882   013222  200A               	addwfc	(btemp+9)^0,w,c
 13883   013224  6EDA               	movwf	fsr2h,c
 13884   013226  3A0C               	swapf	(btemp+11)^0,f,c
 13885   013228  460C               	rlncf	(btemp+11)^0,f,c
 13886   01322A  50DF               	movf	223,w,c
 13887   01322C  180C               	xorwf	(btemp+11)^0,w,c
 13888   01322E  0B1F               	andlw	-225
 13889   013230  180C               	xorwf	(btemp+11)^0,w,c
 13890   013232  6EDF               	movwf	223,c
 13891   013234                     
 13892                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13893   013234  0EF9               	movlw	249
 13894   013236  26E1               	addwf	fsr1l,f,c
 13895   013238  0EFF               	movlw	255
 13896   01323A  22E2               	addwfc	fsr1h,f,c
 13897   01323C  0012               	return		;funcret
 13898   01323E                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13899                           	callstack 0
 13900                           
 13901 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 13902 ;; Defined at:
 13903 ;;		line 633 in file "can/can.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;  channel         1  [STACK] enum E5287
 13906 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13907 ;;		 -> txfConfig(2), 
 13908 ;; Auto vars:     Size  Location     Type
 13909 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13910 ;;  a               2  [STACK] unsigned short 
 13911 ;;  spiTransferE    1    0        char 
 13912 ;; Return value:  Size  Location     Type
 13913 ;;                  1  [STACK] char 
 13914 ;; Registers used:
 13915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13916 ;; Tracked objects:
 13917 ;;		On entry : 0/0
 13918 ;;		On exit  : 0/0
 13919 ;;		Unchanged: 0/0
 13920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13925 ;;Total ram usage:        0 bytes
 13926 ;; Hardware stack levels used: 1
 13927 ;; Hardware stack levels required when called: 9
 13928 ;; This function calls:
 13929 ;;		_DRV_CANFDSPI_WriteWord
 13930 ;; This function is called by:
 13931 ;;		_CanInit
 13932 ;; This function uses a reentrant model
 13933 ;;
 13934                           
 13935                           	psect	text51
 13936   0128E2                     __ptext51:
 13937                           	callstack 0
 13938   0128E2                     _DRV_CANFDSPI_TransmitChannelConfigure:
 13939                           	callstack 0
 13940                           
 13941                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13942   0128E2  0E07               	movlw	7
 13943   0128E4  26E1               	addwf	fsr1l,f,c
 13944   0128E6  0E00               	movlw	0
 13945   0128E8  22E2               	addwfc	fsr1h,f,c
 13946   0128EA                     
 13947                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 13948   0128EA  0EDD               	movlw	low _canFifoResetValues
 13949   0128EC  6EF6               	movwf	tblptrl,c
 13950   0128EE                     	if	1	;There is more than 1 active tblptr byte
 13951   0128EE  0EFF               	movlw	high _canFifoResetValues
 13952   0128F0  6EF7               	movwf	tblptrh,c
 13953   0128F2                     	endif
 13954   0128F2                     	if	1	;There are 3 active tblptr bytes
 13955   0128F2  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13956   0128F4  6EF8               	movwf	tblptru,c
 13957   0128F6                     	endif
 13958   0128F6  0009               	tblrd		*+
 13959   0128F8  CFF5 F009          	movff	tablat,btemp+8
 13960   0128FC  0009               	tblrd		*+
 13961   0128FE  CFF5 F00A          	movff	tablat,btemp+9
 13962   012902  0009               	tblrd		*+
 13963   012904  CFF5 F00B          	movff	tablat,btemp+10
 13964   012908  0009               	tblrd		*+
 13965   01290A  CFF5 F00C          	movff	tablat,btemp+11
 13966                           
 13967                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13968   01290E  0EF9               	movlw	-7
 13969   012910  C009  FFE3         	movff	btemp+8,plusw1
 13970   012914  0EFA               	movlw	-6
 13971   012916  C00A  FFE3         	movff	btemp+9,plusw1
 13972   01291A  0EFB               	movlw	-5
 13973   01291C  C00B  FFE3         	movff	btemp+10,plusw1
 13974   012920  0EFC               	movlw	-4
 13975   012922  C00C  FFE3         	movff	btemp+11,plusw1
 13976   012926                     
 13977                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 13978                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13979   012926  50E1               	movf	fsr1l,w,c
 13980   012928  0FF9               	addlw	-7
 13981   01292A  6ED9               	movwf	fsr2l,c
 13982   01292C  50E2               	movf	fsr1h,w,c
 13983   01292E  6EDA               	movwf	fsr2h,c
 13984   012930  0EFF               	movlw	255
 13985   012932  22DA               	addwfc	fsr2h,f,c
 13986   012934  8EDF               	bsf	indf2,7,c
 13987   012936                     
 13988                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13989                           ;stkvar	_config @ sp[(-7)+-3]
 13990   012936  0EF6               	movlw	-10
 13991   012938  CFE3 F00B          	movff	plusw1,btemp+10
 13992   01293C  0EF7               	movlw	-9
 13993   01293E  CFE3 F00C          	movff	plusw1,btemp+11
 13994   012942  0E01               	movlw	1
 13995   012944  240B               	addwf	(btemp+10)^0,w,c
 13996   012946  6ED9               	movwf	fsr2l,c
 13997   012948  0E00               	movlw	0
 13998   01294A  200C               	addwfc	(btemp+11)^0,w,c
 13999   01294C  6EDA               	movwf	fsr2h,c
 14000   01294E  50DF               	movf	223,w,c
 14001   012950  0B1F               	andlw	31
 14002   012952  6E0C               	movwf	(btemp+11)^0,c
 14003                           
 14004                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14005   012954  0EFC               	movlw	252
 14006   012956  24E1               	addwf	fsr1l,w,c
 14007   012958  6ED9               	movwf	fsr2l,c
 14008   01295A  0EFF               	movlw	255
 14009   01295C  20E2               	addwfc	fsr1h,w,c
 14010   01295E  6EDA               	movwf	fsr2h,c
 14011   012960  50DF               	movf	223,w,c
 14012   012962  180C               	xorwf	(btemp+11)^0,w,c
 14013   012964  0BE0               	andlw	-32
 14014   012966  180C               	xorwf	(btemp+11)^0,w,c
 14015   012968  6EDF               	movwf	223,c
 14016   01296A                     
 14017                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14018                           ;stkvar	_config @ sp[(-7)+-3]
 14019   01296A  0EF6               	movlw	-10
 14020   01296C  CFE3 F00B          	movff	plusw1,btemp+10
 14021   012970  0EF7               	movlw	-9
 14022   012972  CFE3 F00C          	movff	plusw1,btemp+11
 14023   012976  0E01               	movlw	1
 14024   012978  240B               	addwf	(btemp+10)^0,w,c
 14025   01297A  6ED9               	movwf	fsr2l,c
 14026   01297C  0E00               	movlw	0
 14027   01297E  200C               	addwfc	(btemp+11)^0,w,c
 14028   012980  6EDA               	movwf	fsr2h,c
 14029   012982  38DF               	swapf	223,w,c
 14030   012984  32E8               	rrcf	wreg,f,c
 14031   012986  0B07               	andlw	7
 14032   012988  6E0C               	movwf	(btemp+11)^0,c
 14033                           
 14034                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14035   01298A  0EFC               	movlw	252
 14036   01298C  24E1               	addwf	fsr1l,w,c
 14037   01298E  6ED9               	movwf	fsr2l,c
 14038   012990  0EFF               	movlw	255
 14039   012992  20E2               	addwfc	fsr1h,w,c
 14040   012994  6EDA               	movwf	fsr2h,c
 14041   012996  3A0C               	swapf	(btemp+11)^0,f,c
 14042   012998  460C               	rlncf	(btemp+11)^0,f,c
 14043   01299A  50DF               	movf	223,w,c
 14044   01299C  180C               	xorwf	(btemp+11)^0,w,c
 14045   01299E  0B1F               	andlw	-225
 14046   0129A0  180C               	xorwf	(btemp+11)^0,w,c
 14047   0129A2  6EDF               	movwf	223,c
 14048   0129A4                     
 14049                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14050                           ;stkvar	_config @ sp[(-7)+-3]
 14051   0129A4  0EF6               	movlw	-10
 14052   0129A6  CFE3 FFD9          	movff	plusw1,fsr2l
 14053   0129AA  0EF7               	movlw	-9
 14054   0129AC  CFE3 FFDA          	movff	plusw1,fsr2h
 14055   0129B0  38DF               	swapf	223,w,c
 14056   0129B2  32E8               	rrcf	wreg,f,c
 14057   0129B4  32E8               	rrcf	wreg,f,c
 14058   0129B6  0B03               	andlw	3
 14059   0129B8  6E0C               	movwf	(btemp+11)^0,c
 14060                           
 14061                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14062   0129BA  0EFB               	movlw	251
 14063   0129BC  24E1               	addwf	fsr1l,w,c
 14064   0129BE  6ED9               	movwf	fsr2l,c
 14065   0129C0  0EFF               	movlw	255
 14066   0129C2  20E2               	addwfc	fsr1h,w,c
 14067   0129C4  6EDA               	movwf	fsr2h,c
 14068   0129C6  3A0C               	swapf	(btemp+11)^0,f,c
 14069   0129C8  460C               	rlncf	(btemp+11)^0,f,c
 14070   0129CA  50DF               	movf	223,w,c
 14071   0129CC  180C               	xorwf	(btemp+11)^0,w,c
 14072   0129CE  0B9F               	andlw	-97
 14073   0129D0  180C               	xorwf	(btemp+11)^0,w,c
 14074   0129D2  6EDF               	movwf	223,c
 14075   0129D4                     
 14076                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14077                           ;stkvar	_config @ sp[(-7)+-3]
 14078   0129D4  0EF6               	movlw	-10
 14079   0129D6  CFE3 FFD9          	movff	plusw1,fsr2l
 14080   0129DA  0EF7               	movlw	-9
 14081   0129DC  CFE3 FFDA          	movff	plusw1,fsr2h
 14082   0129E0  30DF               	rrcf	223,w,c
 14083   0129E2  0B1F               	andlw	31
 14084   0129E4  6E0C               	movwf	(btemp+11)^0,c
 14085                           
 14086                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14087   0129E6  0EFB               	movlw	251
 14088   0129E8  24E1               	addwf	fsr1l,w,c
 14089   0129EA  6ED9               	movwf	fsr2l,c
 14090   0129EC  0EFF               	movlw	255
 14091   0129EE  20E2               	addwfc	fsr1h,w,c
 14092   0129F0  6EDA               	movwf	fsr2h,c
 14093   0129F2  50DF               	movf	223,w,c
 14094   0129F4  180C               	xorwf	(btemp+11)^0,w,c
 14095   0129F6  0BE0               	andlw	-32
 14096   0129F8  180C               	xorwf	(btemp+11)^0,w,c
 14097   0129FA  6EDF               	movwf	223,c
 14098   0129FC                     
 14099                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14100                           ;stkvar	_config @ sp[(-7)+-3]
 14101   0129FC  0EF6               	movlw	-10
 14102   0129FE  CFE3 FFD9          	movff	plusw1,fsr2l
 14103   012A02  0EF7               	movlw	-9
 14104   012A04  CFE3 FFDA          	movff	plusw1,fsr2h
 14105                           
 14106                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14107   012A08  50E1               	movf	fsr1l,w,c
 14108   012A0A  0FF9               	addlw	-7
 14109   012A0C  6EE9               	movwf	fsr0l,c
 14110   012A0E  50E2               	movf	fsr1h,w,c
 14111   012A10  6EEA               	movwf	fsr0h,c
 14112   012A12  0EFF               	movlw	255
 14113   012A14  22EA               	addwfc	fsr0h,f,c
 14114   012A16  9CEF               	bcf	indf0,6,c
 14115   012A18  A0DF               	btfss	indf2,0,c
 14116   012A1A  EF10  F095         	goto	u2475
 14117   012A1E  8CEF               	bsf	indf0,6,c
 14118   012A20                     u2475:
 14119   012A20                     
 14120                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14121                           ;stkvar	_channel @ sp[(-7)+-1]
 14122   012A20  0EF8               	movlw	-8
 14123   012A22  50E3               	movf	plusw1,w,c
 14124   012A24  0D0C               	mullw	12
 14125   012A26  0E50               	movlw	80
 14126   012A28  26F3               	addwf	243,f,c
 14127   012A2A  0E00               	movlw	0
 14128   012A2C  22F4               	addwfc	244,f,c
 14129                           
 14130                           ;stkvar	_a @ sp[(-7)+5]
 14131   012A2E  0EFE               	movlw	-2
 14132   012A30  CFF3 FFE3          	movff	prodl,plusw1
 14133   012A34  0EFF               	movlw	-1
 14134   012A36  CFF4 FFE3          	movff	prodh,plusw1
 14135   012A3A                     
 14136                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14137   012A3A  0EF9               	movlw	-7
 14138   012A3C  CFE3 FFE6          	movff	plusw1,postinc1
 14139   012A40  CFE3 FFE6          	movff	plusw1,postinc1
 14140   012A44  CFE3 FFE6          	movff	plusw1,postinc1
 14141   012A48  CFE3 FFE6          	movff	plusw1,postinc1
 14142                           
 14143                           ;stkvar	_a @ sp[(-11)+5]
 14144   012A4C  0EFA               	movlw	-6
 14145   012A4E  CFE3 FFE6          	movff	plusw1,postinc1
 14146   012A52  CFE3 FFE6          	movff	plusw1,postinc1
 14147   012A56  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14148   012A5A                     
 14149                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14150   012A5A  0EF6               	movlw	246
 14151   012A5C  26E1               	addwf	fsr1l,f,c
 14152   012A5E  0EFF               	movlw	255
 14153   012A60  22E2               	addwfc	fsr1h,f,c
 14154   012A62  0012               	return		;funcret
 14155   012A64                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14156                           	callstack 0
 14157                           
 14158 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14159 ;; Defined at:
 14160 ;;		line 2690 in file "can/can.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;  ts              4  [STACK] unsigned long 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  spiTransferE    1    0        char 
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1  [STACK] char 
 14167 ;; Registers used:
 14168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;Total ram usage:        0 bytes
 14179 ;; Hardware stack levels used: 1
 14180 ;; Hardware stack levels required when called: 9
 14181 ;; This function calls:
 14182 ;;		_DRV_CANFDSPI_WriteWord
 14183 ;; This function is called by:
 14184 ;;		_CanInit
 14185 ;; This function uses a reentrant model
 14186 ;;
 14187                           
 14188                           	psect	text52
 14189   0148A8                     __ptext52:
 14190                           	callstack 0
 14191   0148A8                     _DRV_CANFDSPI_TimeStampSet:
 14192                           	callstack 20
 14193   0148A8                     
 14194                           ;stkvar	_ts @ sp[(0)+-4]
 14195   0148A8  0EFC               	movlw	-4
 14196   0148AA  CFE3 FFE6          	movff	plusw1,postinc1
 14197   0148AE  CFE3 FFE6          	movff	plusw1,postinc1
 14198   0148B2  CFE3 FFE6          	movff	plusw1,postinc1
 14199   0148B6  CFE3 FFE6          	movff	plusw1,postinc1
 14200   0148BA  0E10               	movlw	16
 14201   0148BC  6EE6               	movwf	postinc1,c
 14202   0148BE  0E00               	movlw	0
 14203   0148C0  6EE6               	movwf	postinc1,c
 14204   0148C2  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14205   0148C6                     
 14206                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14207   0148C6  52E5               	movf	postdec1,f,c
 14208   0148C8  52E5               	movf	postdec1,f,c
 14209   0148CA  52E5               	movf	postdec1,f,c
 14210   0148CC  52E5               	movf	postdec1,f,c
 14211   0148CE  0012               	return		;funcret
 14212   0148D0                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14213                           	callstack 0
 14214                           
 14215 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14216 ;; Defined at:
 14217 ;;		line 2725 in file "can/can.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  ps              2  [STACK] unsigned short 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;  spiTransferE    1    0        char 
 14222 ;; Return value:  Size  Location     Type
 14223 ;;                  1  [STACK] char 
 14224 ;; Registers used:
 14225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14226 ;; Tracked objects:
 14227 ;;		On entry : 0/0
 14228 ;;		On exit  : 0/0
 14229 ;;		Unchanged: 0/0
 14230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14235 ;;Total ram usage:        0 bytes
 14236 ;; Hardware stack levels used: 1
 14237 ;; Hardware stack levels required when called: 9
 14238 ;; This function calls:
 14239 ;;		_DRV_CANFDSPI_WriteHalfWord
 14240 ;; This function is called by:
 14241 ;;		_CanInit
 14242 ;; This function uses a reentrant model
 14243 ;;
 14244                           
 14245                           	psect	text53
 14246   014918                     __ptext53:
 14247                           	callstack 0
 14248   014918                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14249                           	callstack 20
 14250   014918                     
 14251                           ;stkvar	_ps @ sp[(0)+-2]
 14252   014918  0EFE               	movlw	-2
 14253   01491A  CFE3 FFE6          	movff	plusw1,postinc1
 14254   01491E  CFE3 FFE6          	movff	plusw1,postinc1
 14255   014922  0E14               	movlw	20
 14256   014924  6EE6               	movwf	postinc1,c
 14257   014926  0E00               	movlw	0
 14258   014928  6EE6               	movwf	postinc1,c
 14259   01492A  ECD4  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14260   01492E                     
 14261                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14262   01492E  52E5               	movf	postdec1,f,c
 14263   014930  52E5               	movf	postdec1,f,c
 14264   014932  0012               	return		;funcret
 14265   014934                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14266                           	callstack 0
 14267                           
 14268 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14269 ;; Defined at:
 14270 ;;		line 2634 in file "can/can.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;		None
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;  d               1  [STACK] unsigned char 
 14275 ;;  spiTransferE    1  [STACK] char 
 14276 ;; Return value:  Size  Location     Type
 14277 ;;                  1  [STACK] char 
 14278 ;; Registers used:
 14279 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14280 ;; Tracked objects:
 14281 ;;		On entry : 0/0
 14282 ;;		On exit  : 0/0
 14283 ;;		Unchanged: 0/0
 14284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;Total ram usage:        0 bytes
 14290 ;; Hardware stack levels used: 1
 14291 ;; Hardware stack levels required when called: 9
 14292 ;; This function calls:
 14293 ;;		_DRV_CANFDSPI_ReadByte
 14294 ;;		_DRV_CANFDSPI_WriteByte
 14295 ;; This function is called by:
 14296 ;;		_CanInit
 14297 ;; This function uses a reentrant model
 14298 ;;
 14299                           
 14300                           	psect	text54
 14301   014594                     __ptext54:
 14302                           	callstack 0
 14303   014594                     _DRV_CANFDSPI_TimeStampEnable:
 14304                           	callstack 0
 14305                           
 14306                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14307   014594  52E6               	movf	postinc1,f,c
 14308   014596  52E6               	movf	postinc1,f,c
 14309   014598                     
 14310                           ;can/can.c: 2637:     uint8_t d = 0;
 14311                           ;stkvar	_d @ sp[(-2)+0]
 14312   014598  0EFE               	movlw	-2
 14313   01459A  6AE3               	clrf	plusw1,c
 14314   01459C                     
 14315                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14316                           ;stkvar	_d @ sp[(-2)+0]
 14317   01459C  0EFE               	movlw	254
 14318   01459E  24E1               	addwf	fsr1l,w,c
 14319   0145A0  6E01               	movwf	btemp^0,c
 14320   0145A2  0EFF               	movlw	255
 14321   0145A4  20E2               	addwfc	fsr1h,w,c
 14322   0145A6  6E02               	movwf	(btemp+1)^0,c
 14323   0145A8  C001  FFE6         	movff	btemp,postinc1
 14324   0145AC  C002  FFE6         	movff	btemp+1,postinc1
 14325   0145B0  0E16               	movlw	22
 14326   0145B2  6EE6               	movwf	postinc1,c
 14327   0145B4  0E00               	movlw	0
 14328   0145B6  6EE6               	movwf	postinc1,c
 14329   0145B8  EC99  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14330                           
 14331                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14332   0145BC  0EFF               	movlw	-1
 14333   0145BE  C001  FFE3         	movff	btemp,plusw1
 14334   0145C2                     
 14335                           ;can/can.c: 2641:     if (spiTransferError) {
 14336                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14337   0145C2  0EFF               	movlw	-1
 14338   0145C4  50E3               	movf	plusw1,w,c
 14339   0145C6  B4D8               	btfsc	status,2,c
 14340   0145C8  EFE8  F0A2         	goto	u2501
 14341   0145CC  EFEA  F0A2         	goto	u2500
 14342   0145D0                     u2501:
 14343   0145D0  EFEC  F0A2         	goto	l4864
 14344   0145D4                     u2500:
 14345   0145D4  EFF7  F0A2         	goto	l623
 14346   0145D8                     l4864:
 14347                           
 14348                           ;can/can.c: 2646:     d |= 0x01;
 14349                           ;stkvar	_d @ sp[(-2)+0]
 14350   0145D8  0EFE               	movlw	-2
 14351   0145DA  80E3               	bsf	plusw1,0,c
 14352   0145DC                     
 14353                           ;stkvar	_d @ sp[(-2)+0]
 14354   0145DC  0EFE               	movlw	-2
 14355   0145DE  50E3               	movf	plusw1,w,c
 14356   0145E0  6EE6               	movwf	postinc1,c
 14357   0145E2  0E16               	movlw	22
 14358   0145E4  6EE6               	movwf	postinc1,c
 14359   0145E6  0E00               	movlw	0
 14360   0145E8  6EE6               	movwf	postinc1,c
 14361   0145EA  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14362   0145EE                     l623:
 14363                           
 14364                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14365   0145EE  52E5               	movf	postdec1,f,c
 14366   0145F0  52E5               	movf	postdec1,f,c
 14367   0145F2  0012               	return		;funcret
 14368   0145F4                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14369                           	callstack 0
 14370                           
 14371 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14372 ;; Defined at:
 14373 ;;		line 1539 in file "can/can.c"
 14374 ;; Parameters:    Size  Location     Type
 14375 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14376 ;;		 -> tefConfig(1), 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14379 ;;  spiTransferE    1    0        char 
 14380 ;; Return value:  Size  Location     Type
 14381 ;;                  1  [STACK] char 
 14382 ;; Registers used:
 14383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14384 ;; Tracked objects:
 14385 ;;		On entry : 0/0
 14386 ;;		On exit  : 0/0
 14387 ;;		Unchanged: 0/0
 14388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14393 ;;Total ram usage:        0 bytes
 14394 ;; Hardware stack levels used: 1
 14395 ;; Hardware stack levels required when called: 9
 14396 ;; This function calls:
 14397 ;;		_DRV_CANFDSPI_WriteWord
 14398 ;; This function is called by:
 14399 ;;		_CanInit
 14400 ;; This function uses a reentrant model
 14401 ;;
 14402                           
 14403                           	psect	text55
 14404   013B36                     __ptext55:
 14405                           	callstack 0
 14406   013B36                     _DRV_CANFDSPI_TefConfigure:
 14407                           	callstack 0
 14408                           
 14409                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14410   013B36  52E6               	movf	postinc1,f,c
 14411   013B38  52E6               	movf	postinc1,f,c
 14412   013B3A  52E6               	movf	postinc1,f,c
 14413   013B3C  52E6               	movf	postinc1,f,c
 14414   013B3E                     
 14415                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14416   013B3E  0EDD               	movlw	low _canFifoResetValues
 14417   013B40  6EF6               	movwf	tblptrl,c
 14418   013B42                     	if	1	;There is more than 1 active tblptr byte
 14419   013B42  0EFF               	movlw	high _canFifoResetValues
 14420   013B44  6EF7               	movwf	tblptrh,c
 14421   013B46                     	endif
 14422   013B46                     	if	1	;There are 3 active tblptr bytes
 14423   013B46  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14424   013B48  6EF8               	movwf	tblptru,c
 14425   013B4A                     	endif
 14426   013B4A  0009               	tblrd		*+
 14427   013B4C  CFF5 F009          	movff	tablat,btemp+8
 14428   013B50  0009               	tblrd		*+
 14429   013B52  CFF5 F00A          	movff	tablat,btemp+9
 14430   013B56  0009               	tblrd		*+
 14431   013B58  CFF5 F00B          	movff	tablat,btemp+10
 14432   013B5C  0009               	tblrd		*+
 14433   013B5E  CFF5 F00C          	movff	tablat,btemp+11
 14434                           
 14435                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14436   013B62  0EFC               	movlw	-4
 14437   013B64  C009  FFE3         	movff	btemp+8,plusw1
 14438   013B68  0EFD               	movlw	-3
 14439   013B6A  C00A  FFE3         	movff	btemp+9,plusw1
 14440   013B6E  0EFE               	movlw	-2
 14441   013B70  C00B  FFE3         	movff	btemp+10,plusw1
 14442   013B74  0EFF               	movlw	-1
 14443   013B76  C00C  FFE3         	movff	btemp+11,plusw1
 14444   013B7A                     
 14445                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14446                           ;stkvar	_config @ sp[(-4)+-2]
 14447   013B7A  0EFA               	movlw	-6
 14448   013B7C  CFE3 FFD9          	movff	plusw1,fsr2l
 14449   013B80  0EFB               	movlw	-5
 14450   013B82  CFE3 FFDA          	movff	plusw1,fsr2h
 14451   013B86  30DF               	rrcf	223,w,c
 14452   013B88  0B1F               	andlw	31
 14453   013B8A  6E0C               	movwf	(btemp+11)^0,c
 14454                           
 14455                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14456   013B8C  0EFF               	movlw	255
 14457   013B8E  24E1               	addwf	fsr1l,w,c
 14458   013B90  6ED9               	movwf	fsr2l,c
 14459   013B92  0EFF               	movlw	255
 14460   013B94  20E2               	addwfc	fsr1h,w,c
 14461   013B96  6EDA               	movwf	fsr2h,c
 14462   013B98  50DF               	movf	223,w,c
 14463   013B9A  180C               	xorwf	(btemp+11)^0,w,c
 14464   013B9C  0BE0               	andlw	-32
 14465   013B9E  180C               	xorwf	(btemp+11)^0,w,c
 14466   013BA0  6EDF               	movwf	223,c
 14467   013BA2                     
 14468                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14469                           ;stkvar	_config @ sp[(-4)+-2]
 14470   013BA2  0EFA               	movlw	-6
 14471   013BA4  CFE3 FFD9          	movff	plusw1,fsr2l
 14472   013BA8  0EFB               	movlw	-5
 14473   013BAA  CFE3 FFDA          	movff	plusw1,fsr2h
 14474                           
 14475                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14476   013BAE  50E1               	movf	fsr1l,w,c
 14477   013BB0  0FFC               	addlw	-4
 14478   013BB2  6EE9               	movwf	fsr0l,c
 14479   013BB4  50E2               	movf	fsr1h,w,c
 14480   013BB6  6EEA               	movwf	fsr0h,c
 14481   013BB8  0EFF               	movlw	255
 14482   013BBA  22EA               	addwfc	fsr0h,f,c
 14483   013BBC  9AEF               	bcf	indf0,5,c
 14484   013BBE  A0DF               	btfss	indf2,0,c
 14485   013BC0  EFE3  F09D         	goto	u2465
 14486   013BC4  8AEF               	bsf	indf0,5,c
 14487   013BC6                     u2465:
 14488   013BC6                     
 14489                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14490   013BC6  0EFC               	movlw	-4
 14491   013BC8  CFE3 FFE6          	movff	plusw1,postinc1
 14492   013BCC  CFE3 FFE6          	movff	plusw1,postinc1
 14493   013BD0  CFE3 FFE6          	movff	plusw1,postinc1
 14494   013BD4  CFE3 FFE6          	movff	plusw1,postinc1
 14495   013BD8  0E40               	movlw	64
 14496   013BDA  6EE6               	movwf	postinc1,c
 14497   013BDC  0E00               	movlw	0
 14498   013BDE  6EE6               	movwf	postinc1,c
 14499   013BE0  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14500   013BE4                     
 14501                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 14502   013BE4  0EFA               	movlw	250
 14503   013BE6  26E1               	addwf	fsr1l,f,c
 14504   013BE8  0EFF               	movlw	255
 14505   013BEA  22E2               	addwfc	fsr1h,f,c
 14506   013BEC  0012               	return		;funcret
 14507   013BEE                     __end_of_DRV_CANFDSPI_TefConfigure:
 14508                           	callstack 0
 14509                           
 14510 ;; *************** function _DRV_CANFDSPI_Reset *****************
 14511 ;; Defined at:
 14512 ;;		line 257 in file "can/can.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;		None
 14515 ;; Auto vars:     Size  Location     Type
 14516 ;;  spiTransferS    2    0        unsigned short 
 14517 ;;  spiTransferE    1    0        char 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  1  [STACK] char 
 14520 ;; Registers used:
 14521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 14522 ;; Tracked objects:
 14523 ;;		On entry : 0/0
 14524 ;;		On exit  : 0/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;Total ram usage:        0 bytes
 14532 ;; Hardware stack levels used: 1
 14533 ;; Hardware stack levels required when called: 8
 14534 ;; This function calls:
 14535 ;;		_SPI2_Open
 14536 ;;		_SpiTransfer
 14537 ;; This function is called by:
 14538 ;;		_CanInit
 14539 ;; This function uses a reentrant model
 14540 ;;
 14541                           
 14542                           	psect	text56
 14543   01487C                     __ptext56:
 14544                           	callstack 0
 14545   01487C                     _DRV_CANFDSPI_Reset:
 14546                           	callstack 21
 14547   01487C                     
 14548                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 14549   01487C  0101               	movlb	1	; () banked
 14550   01487E  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 14551   014880                     
 14552                           ; BSR set to: 1
 14553                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 14554   014880  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 14555   014882                     
 14556                           ; BSR set to: 1
 14557                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 14558   014882  0E00               	movlw	0
 14559   014884  6EE6               	movwf	postinc1,c
 14560   014886  ECF7  F09D         	call	_SPI2_Open	;wreg free
 14561   01488A  0E02               	movlw	2
 14562   01488C  6EE6               	movwf	postinc1,c
 14563   01488E  0E00               	movlw	0
 14564   014890  6EE6               	movwf	postinc1,c
 14565   014892  0E00               	movlw	low _spiReceiveBuffer
 14566   014894  6EE6               	movwf	postinc1,c
 14567   014896  0E02               	movlw	high _spiReceiveBuffer
 14568   014898  6EE6               	movwf	postinc1,c
 14569   01489A  0E00               	movlw	low _spiTransmitBuffer
 14570   01489C  6EE6               	movwf	postinc1,c
 14571   01489E  0E01               	movlw	high _spiTransmitBuffer
 14572   0148A0  6EE6               	movwf	postinc1,c
 14573   0148A2  EC39  F09D         	call	_SpiTransfer	;wreg free
 14574   0148A6                     
 14575                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 14576   0148A6  0012               	return		;funcret
 14577   0148A8                     __end_of_DRV_CANFDSPI_Reset:
 14578                           	callstack 0
 14579                           
 14580 ;; *************** function _SPI2_Open *****************
 14581 ;; Defined at:
 14582 ;;		line 72 in file "mcc_generated_files/spi2.c"
 14583 ;; Parameters:    Size  Location     Type
 14584 ;;  spi2UniqueCo    1  [STACK] enum E358
 14585 ;; Auto vars:     Size  Location     Type
 14586 ;;		None
 14587 ;; Return value:  Size  Location     Type
 14588 ;;                  1  [STACK] _Bool 
 14589 ;; Registers used:
 14590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 14591 ;; Tracked objects:
 14592 ;;		On entry : 3F/1
 14593 ;;		On exit  : 0/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14600 ;;Total ram usage:        0 bytes
 14601 ;; Hardware stack levels used: 1
 14602 ;; Hardware stack levels required when called: 7
 14603 ;; This function calls:
 14604 ;;		Nothing
 14605 ;; This function is called by:
 14606 ;;		_DRV_CANFDSPI_Reset
 14607 ;; This function uses a reentrant model
 14608 ;;
 14609                           
 14610                           	psect	text57
 14611   013BEE                     __ptext57:
 14612                           	callstack 0
 14613   013BEE                     _SPI2_Open:
 14614                           	callstack 21
 14615   013BEE                     
 14616                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 14617   013BEE  BA63               	btfsc	99,5,c	;volatile
 14618   013BF0  EFFC  F09D         	goto	u2211
 14619   013BF4  EFFE  F09D         	goto	u2210
 14620   013BF8                     u2211:
 14621   013BF8  EF50  F09E         	goto	l1120
 14622   013BFC                     u2210:
 14623   013BFC                     
 14624                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 14625                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14626   013BFC  0EFF               	movlw	-1
 14627   013BFE  50E3               	movf	plusw1,w,c
 14628   013C00  0D04               	mullw	4
 14629   013C02  0E01               	movlw	1
 14630   013C04  26F3               	addwf	243,f,c
 14631   013C06  0E00               	movlw	0
 14632   013C08  22F4               	addwfc	244,f,c
 14633   013C0A  0EE9               	movlw	low _spi2_configuration
 14634   013C0C  24F3               	addwf	243,w,c
 14635   013C0E  6EF6               	movwf	tblptrl,c
 14636   013C10  0EFF               	movlw	high _spi2_configuration
 14637   013C12  20F4               	addwfc	244,w,c
 14638   013C14  6EF7               	movwf	tblptrh,c
 14639   013C16                     	if	1	;There are 3 active tblptr bytes
 14640   013C16  6AF8               	clrf	tblptru,c
 14641   013C18  0E00               	movlw	low (__mediumconst shr (0+16))
 14642   013C1A  22F8               	addwfc	tblptru,f,c
 14643   013C1C                     	endif
 14644   013C1C  0008               	tblrd		*
 14645   013C1E  CFF5 FF64          	movff	tablat,3940	;volatile
 14646                           
 14647                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 14648                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14649   013C22  0EFF               	movlw	-1
 14650   013C24  50E3               	movf	plusw1,w,c
 14651   013C26  0D04               	mullw	4
 14652   013C28  0EE9               	movlw	low _spi2_configuration
 14653   013C2A  24F3               	addwf	243,w,c
 14654   013C2C  6EF6               	movwf	tblptrl,c
 14655   013C2E  0EFF               	movlw	high _spi2_configuration
 14656   013C30  20F4               	addwfc	244,w,c
 14657   013C32  6EF7               	movwf	tblptrh,c
 14658   013C34                     	if	1	;There are 3 active tblptr bytes
 14659   013C34  6AF8               	clrf	tblptru,c
 14660   013C36  0E00               	movlw	low (__mediumconst shr (0+16))
 14661   013C38  22F8               	addwfc	tblptru,f,c
 14662   013C3A                     	endif
 14663   013C3A  0008               	tblrd		*
 14664   013C3C  CFF5 FF63          	movff	tablat,3939	;volatile
 14665   013C40                     
 14666                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 14667   013C40  6A62               	clrf	98,c	;volatile
 14668                           
 14669                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 14670                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14671   013C42  0EFF               	movlw	-1
 14672   013C44  50E3               	movf	plusw1,w,c
 14673   013C46  0D04               	mullw	4
 14674   013C48  0E02               	movlw	2
 14675   013C4A  26F3               	addwf	243,f,c
 14676   013C4C  0E00               	movlw	0
 14677   013C4E  22F4               	addwfc	244,f,c
 14678   013C50  0EE9               	movlw	low _spi2_configuration
 14679   013C52  24F3               	addwf	243,w,c
 14680   013C54  6EF6               	movwf	tblptrl,c
 14681   013C56  0EFF               	movlw	high _spi2_configuration
 14682   013C58  20F4               	addwfc	244,w,c
 14683   013C5A  6EF7               	movwf	tblptrh,c
 14684   013C5C                     	if	1	;There are 3 active tblptr bytes
 14685   013C5C  6AF8               	clrf	tblptru,c
 14686   013C5E  0E00               	movlw	low (__mediumconst shr (0+16))
 14687   013C60  22F8               	addwfc	tblptru,f,c
 14688   013C62                     	endif
 14689   013C62  0008               	tblrd		*
 14690   013C64  CFF5 FF65          	movff	tablat,3941	;volatile
 14691   013C68                     
 14692                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 14693                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14694   013C68  0EFF               	movlw	-1
 14695   013C6A  50E3               	movf	plusw1,w,c
 14696   013C6C  0D04               	mullw	4
 14697   013C6E  0E03               	movlw	3
 14698   013C70  26F3               	addwf	243,f,c
 14699   013C72  0E00               	movlw	0
 14700   013C74  22F4               	addwfc	244,f,c
 14701   013C76  0EE9               	movlw	low _spi2_configuration
 14702   013C78  24F3               	addwf	243,w,c
 14703   013C7A  6EF6               	movwf	tblptrl,c
 14704   013C7C  0EFF               	movlw	high _spi2_configuration
 14705   013C7E  20F4               	addwfc	244,w,c
 14706   013C80  6EF7               	movwf	tblptrh,c
 14707   013C82                     	if	1	;There are 3 active tblptr bytes
 14708   013C82  6AF8               	clrf	tblptru,c
 14709   013C84  0E00               	movlw	low (__mediumconst shr (0+16))
 14710   013C86  22F8               	addwfc	tblptru,f,c
 14711   013C88                     	endif
 14712   013C88  0008               	tblrd		*
 14713   013C8A  CFF5 F00C          	movff	tablat,btemp+11
 14714   013C8E  3A0C               	swapf	(btemp+11)^0,f,c
 14715   013C90  460C               	rlncf	(btemp+11)^0,f,c
 14716   013C92  460C               	rlncf	(btemp+11)^0,f,c
 14717   013C94  5095               	movf	149,w,c	;volatile
 14718   013C96  180C               	xorwf	(btemp+11)^0,w,c
 14719   013C98  0BBF               	andlw	-65
 14720   013C9A  180C               	xorwf	(btemp+11)^0,w,c
 14721   013C9C  6E95               	movwf	149,c	;volatile
 14722   013C9E                     
 14723                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14724   013C9E  8A63               	bsf	99,5,c	;volatile
 14725   013CA0                     l1120:
 14726                           
 14727                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14728   013CA0  52E5               	movf	postdec1,f,c
 14729   013CA2  0012               	return		;funcret
 14730   013CA4                     __end_of_SPI2_Open:
 14731                           	callstack 0
 14732                           
 14733 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14734 ;; Defined at:
 14735 ;;		line 1172 in file "can/can.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  channel         1  [STACK] enum E5287
 14738 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14739 ;;		 -> rxfConfig(3), 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14742 ;;  a               2  [STACK] unsigned short 
 14743 ;;  spiTransferE    1    0        char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;                  1  [STACK] char 
 14746 ;; Registers used:
 14747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14748 ;; Tracked objects:
 14749 ;;		On entry : 0/0
 14750 ;;		On exit  : 0/0
 14751 ;;		Unchanged: 0/0
 14752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;Total ram usage:        0 bytes
 14758 ;; Hardware stack levels used: 1
 14759 ;; Hardware stack levels required when called: 9
 14760 ;; This function calls:
 14761 ;;		_DRV_CANFDSPI_WriteWord
 14762 ;; This function is called by:
 14763 ;;		_CanInit
 14764 ;; This function uses a reentrant model
 14765 ;;
 14766                           
 14767                           	psect	text58
 14768   012E82                     __ptext58:
 14769                           	callstack 0
 14770   012E82                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14771                           	callstack 0
 14772                           
 14773                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14774   012E82  0E07               	movlw	7
 14775   012E84  26E1               	addwf	fsr1l,f,c
 14776   012E86  0E00               	movlw	0
 14777   012E88  22E2               	addwfc	fsr1h,f,c
 14778   012E8A                     
 14779                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14780                           ;stkvar	_channel @ sp[(-7)+-1]
 14781   012E8A  0EF8               	movlw	-8
 14782   012E8C  50E3               	movf	plusw1,w,c
 14783   012E8E  A4D8               	btfss	status,2,c
 14784   012E90  EF4C  F097         	goto	u2481
 14785   012E94  EF4E  F097         	goto	u2480
 14786   012E98                     u2481:
 14787   012E98  EF50  F097         	goto	l4828
 14788   012E9C                     u2480:
 14789   012E9C  EFDD  F097         	goto	l346
 14790   012EA0                     l4828:
 14791                           
 14792                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 14793   012EA0  0EDD               	movlw	low _canFifoResetValues
 14794   012EA2  6EF6               	movwf	tblptrl,c
 14795   012EA4                     	if	1	;There is more than 1 active tblptr byte
 14796   012EA4  0EFF               	movlw	high _canFifoResetValues
 14797   012EA6  6EF7               	movwf	tblptrh,c
 14798   012EA8                     	endif
 14799   012EA8                     	if	1	;There are 3 active tblptr bytes
 14800   012EA8  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14801   012EAA  6EF8               	movwf	tblptru,c
 14802   012EAC                     	endif
 14803   012EAC  0009               	tblrd		*+
 14804   012EAE  CFF5 F009          	movff	tablat,btemp+8
 14805   012EB2  0009               	tblrd		*+
 14806   012EB4  CFF5 F00A          	movff	tablat,btemp+9
 14807   012EB8  0009               	tblrd		*+
 14808   012EBA  CFF5 F00B          	movff	tablat,btemp+10
 14809   012EBE  0009               	tblrd		*+
 14810   012EC0  CFF5 F00C          	movff	tablat,btemp+11
 14811                           
 14812                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14813   012EC4  0EF9               	movlw	-7
 14814   012EC6  C009  FFE3         	movff	btemp+8,plusw1
 14815   012ECA  0EFA               	movlw	-6
 14816   012ECC  C00A  FFE3         	movff	btemp+9,plusw1
 14817   012ED0  0EFB               	movlw	-5
 14818   012ED2  C00B  FFE3         	movff	btemp+10,plusw1
 14819   012ED6  0EFC               	movlw	-4
 14820   012ED8  C00C  FFE3         	movff	btemp+11,plusw1
 14821   012EDC                     
 14822                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 14823                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14824   012EDC  50E1               	movf	fsr1l,w,c
 14825   012EDE  0FF9               	addlw	-7
 14826   012EE0  6ED9               	movwf	fsr2l,c
 14827   012EE2  50E2               	movf	fsr1h,w,c
 14828   012EE4  6EDA               	movwf	fsr2h,c
 14829   012EE6  0EFF               	movlw	255
 14830   012EE8  22DA               	addwfc	fsr2h,f,c
 14831   012EEA  9EDF               	bcf	indf2,7,c
 14832   012EEC                     
 14833                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 14834                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14835   012EEC  0EFC               	movlw	252
 14836   012EEE  24E1               	addwf	fsr1l,w,c
 14837   012EF0  6ED9               	movwf	fsr2l,c
 14838   012EF2  0EFF               	movlw	255
 14839   012EF4  20E2               	addwfc	fsr1h,w,c
 14840   012EF6  6EDA               	movwf	fsr2h,c
 14841                           
 14842                           ;stkvar	_config @ sp[(-7)+-3]
 14843   012EF8  0EF6               	movlw	-10
 14844   012EFA  CFE3 F00B          	movff	plusw1,btemp+10
 14845   012EFE  0EF7               	movlw	-9
 14846   012F00  CFE3 F00C          	movff	plusw1,btemp+11
 14847   012F04  0E01               	movlw	1
 14848   012F06  240B               	addwf	(btemp+10)^0,w,c
 14849   012F08  6EE9               	movwf	fsr0l,c
 14850   012F0A  0E00               	movlw	0
 14851   012F0C  200C               	addwfc	(btemp+11)^0,w,c
 14852   012F0E  6EEA               	movwf	fsr0h,c
 14853   012F10  50EF               	movf	indf0,w,c
 14854   012F12  6E0C               	movwf	(btemp+11)^0,c
 14855                           
 14856                           ;stkvar	_config @ sp[(-7)+-3]
 14857   012F14  0EF6               	movlw	-10
 14858   012F16  CFE3 F009          	movff	plusw1,btemp+8
 14859   012F1A  0EF7               	movlw	-9
 14860   012F1C  CFE3 F00A          	movff	plusw1,btemp+9
 14861   012F20  0E02               	movlw	2
 14862   012F22  2409               	addwf	(btemp+8)^0,w,c
 14863   012F24  6EE9               	movwf	fsr0l,c
 14864   012F26  0E00               	movlw	0
 14865   012F28  200A               	addwfc	(btemp+9)^0,w,c
 14866   012F2A  6EEA               	movwf	fsr0h,c
 14867   012F2C  50EF               	movf	indf0,w,c
 14868   012F2E  6E0B               	movwf	(btemp+10)^0,c
 14869   012F30  0E05               	movlw	5
 14870   012F32  6E01               	movwf	btemp^0,c
 14871   012F34                     u2495:
 14872   012F34  90D8               	bcf	status,0,c
 14873   012F36  360B               	rlcf	(btemp+10)^0,f,c
 14874   012F38  2E01               	decfsz	btemp^0,f,c
 14875   012F3A  EF9A  F097         	goto	u2495
 14876   012F3E  500B               	movf	(btemp+10)^0,w,c
 14877   012F40  100C               	iorwf	(btemp+11)^0,w,c
 14878   012F42  6EDF               	movwf	indf2,c
 14879   012F44                     
 14880                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 14881                           ;stkvar	_config @ sp[(-7)+-3]
 14882   012F44  0EF6               	movlw	-10
 14883   012F46  CFE3 FFD9          	movff	plusw1,fsr2l
 14884   012F4A  0EF7               	movlw	-9
 14885   012F4C  CFE3 FFDA          	movff	plusw1,fsr2h
 14886   012F50  50DF               	movf	indf2,w,c
 14887   012F52  6E0C               	movwf	(btemp+11)^0,c
 14888                           
 14889                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14890   012F54  50E1               	movf	fsr1l,w,c
 14891   012F56  0FF9               	addlw	-7
 14892   012F58  6ED9               	movwf	fsr2l,c
 14893   012F5A  50E2               	movf	fsr1h,w,c
 14894   012F5C  6EDA               	movwf	fsr2h,c
 14895   012F5E  0EFF               	movlw	255
 14896   012F60  22DA               	addwfc	fsr2h,f,c
 14897   012F62  3A0C               	swapf	(btemp+11)^0,f,c
 14898   012F64  460C               	rlncf	(btemp+11)^0,f,c
 14899   012F66  50DF               	movf	223,w,c
 14900   012F68  180C               	xorwf	(btemp+11)^0,w,c
 14901   012F6A  0BDF               	andlw	-33
 14902   012F6C  180C               	xorwf	(btemp+11)^0,w,c
 14903   012F6E  6EDF               	movwf	223,c
 14904   012F70                     
 14905                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 14906                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14907   012F70  50E1               	movf	fsr1l,w,c
 14908   012F72  0FF9               	addlw	-7
 14909   012F74  6ED9               	movwf	fsr2l,c
 14910   012F76  50E2               	movf	fsr1h,w,c
 14911   012F78  6EDA               	movwf	fsr2h,c
 14912   012F7A  0EFF               	movlw	255
 14913   012F7C  22DA               	addwfc	fsr2h,f,c
 14914   012F7E  80DF               	bsf	indf2,0,c
 14915   012F80                     
 14916                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 14917                           ;stkvar	_channel @ sp[(-7)+-1]
 14918   012F80  0EF8               	movlw	-8
 14919   012F82  50E3               	movf	plusw1,w,c
 14920   012F84  0D0C               	mullw	12
 14921   012F86  0E50               	movlw	80
 14922   012F88  26F3               	addwf	243,f,c
 14923   012F8A  0E00               	movlw	0
 14924   012F8C  22F4               	addwfc	244,f,c
 14925                           
 14926                           ;stkvar	_a @ sp[(-7)+5]
 14927   012F8E  0EFE               	movlw	-2
 14928   012F90  CFF3 FFE3          	movff	prodl,plusw1
 14929   012F94  0EFF               	movlw	-1
 14930   012F96  CFF4 FFE3          	movff	prodh,plusw1
 14931   012F9A                     
 14932                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14933   012F9A  0EF9               	movlw	-7
 14934   012F9C  CFE3 FFE6          	movff	plusw1,postinc1
 14935   012FA0  CFE3 FFE6          	movff	plusw1,postinc1
 14936   012FA4  CFE3 FFE6          	movff	plusw1,postinc1
 14937   012FA8  CFE3 FFE6          	movff	plusw1,postinc1
 14938                           
 14939                           ;stkvar	_a @ sp[(-11)+5]
 14940   012FAC  0EFA               	movlw	-6
 14941   012FAE  CFE3 FFE6          	movff	plusw1,postinc1
 14942   012FB2  CFE3 FFE6          	movff	plusw1,postinc1
 14943   012FB6  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14944   012FBA                     l346:
 14945                           
 14946                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14947   012FBA  0EF6               	movlw	246
 14948   012FBC  26E1               	addwf	fsr1l,f,c
 14949   012FBE  0EFF               	movlw	255
 14950   012FC0  22E2               	addwfc	fsr1h,f,c
 14951   012FC2  0012               	return		;funcret
 14952   012FC4                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 14953                           	callstack 0
 14954                           
 14955 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 14956 ;; Defined at:
 14957 ;;		line 499 in file "can/can.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;  opMode          1  [STACK] enum E5357
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  d               1  [STACK] unsigned char 
 14962 ;;  spiTransferE    1  [STACK] char 
 14963 ;; Return value:  Size  Location     Type
 14964 ;;                  1  [STACK] char 
 14965 ;; Registers used:
 14966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;Total ram usage:        0 bytes
 14977 ;; Hardware stack levels used: 1
 14978 ;; Hardware stack levels required when called: 9
 14979 ;; This function calls:
 14980 ;;		_DRV_CANFDSPI_ReadByte
 14981 ;;		_DRV_CANFDSPI_WriteByte
 14982 ;; This function is called by:
 14983 ;;		_CanInit
 14984 ;; This function uses a reentrant model
 14985 ;;
 14986                           
 14987                           	psect	text59
 14988   014306                     __ptext59:
 14989                           	callstack 0
 14990   014306                     _DRV_CANFDSPI_OperationModeSelect:
 14991                           	callstack 0
 14992                           
 14993                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14994   014306  52E6               	movf	postinc1,f,c
 14995   014308  52E6               	movf	postinc1,f,c
 14996   01430A                     
 14997                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 14998                           ;stkvar	_d @ sp[(-2)+0]
 14999   01430A  0EFE               	movlw	-2
 15000   01430C  6AE3               	clrf	plusw1,c
 15001   01430E                     
 15002                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 15003                           ;stkvar	_d @ sp[(-2)+0]
 15004   01430E  0EFE               	movlw	254
 15005   014310  24E1               	addwf	fsr1l,w,c
 15006   014312  6E01               	movwf	btemp^0,c
 15007   014314  0EFF               	movlw	255
 15008   014316  20E2               	addwfc	fsr1h,w,c
 15009   014318  6E02               	movwf	(btemp+1)^0,c
 15010   01431A  C001  FFE6         	movff	btemp,postinc1
 15011   01431E  C002  FFE6         	movff	btemp+1,postinc1
 15012   014322  0E03               	movlw	3
 15013   014324  6EE6               	movwf	postinc1,c
 15014   014326  0E00               	movlw	0
 15015   014328  6EE6               	movwf	postinc1,c
 15016   01432A  EC99  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 15017                           
 15018                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15019   01432E  0EFF               	movlw	-1
 15020   014330  C001  FFE3         	movff	btemp,plusw1
 15021   014334                     
 15022                           ;can/can.c: 506:     if (spiTransferError) {
 15023                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15024   014334  0EFF               	movlw	-1
 15025   014336  50E3               	movf	plusw1,w,c
 15026   014338  B4D8               	btfsc	status,2,c
 15027   01433A  EFA1  F0A1         	goto	u2511
 15028   01433E  EFA3  F0A1         	goto	u2510
 15029   014342                     u2511:
 15030   014342  EFA5  F0A1         	goto	l4896
 15031   014346                     u2510:
 15032   014346  EFC2  F0A1         	goto	l222
 15033   01434A                     l4896:
 15034                           
 15035                           ;can/can.c: 511:     d &= ~0x07;
 15036                           ;stkvar	_d @ sp[(-2)+0]
 15037   01434A  0EFE               	movlw	-2
 15038   01434C  CFE3 F001          	movff	plusw1,btemp
 15039   014350  0EF8               	movlw	248
 15040   014352  1601               	andwf	btemp^0,f,c
 15041   014354  0EFE               	movlw	-2
 15042   014356  C001  FFE3         	movff	btemp,plusw1
 15043   01435A                     
 15044                           ;can/can.c: 512:     d |= opMode;
 15045                           ;stkvar	_opMode @ sp[(-2)+-1]
 15046   01435A  0EFD               	movlw	-3
 15047   01435C  CFE3 F00C          	movff	plusw1,btemp+11
 15048                           
 15049                           ;stkvar	_d @ sp[(-2)+0]
 15050   014360  50E1               	movf	fsr1l,w,c
 15051   014362  0FFE               	addlw	-2
 15052   014364  6ED9               	movwf	fsr2l,c
 15053   014366  50E2               	movf	fsr1h,w,c
 15054   014368  6EDA               	movwf	fsr2h,c
 15055   01436A  0EFF               	movlw	255
 15056   01436C  22DA               	addwfc	fsr2h,f,c
 15057   01436E  500C               	movf	(btemp+11)^0,w,c
 15058   014370  12DF               	iorwf	indf2,f,c
 15059   014372                     
 15060                           ;stkvar	_d @ sp[(-2)+0]
 15061   014372  0EFE               	movlw	-2
 15062   014374  50E3               	movf	plusw1,w,c
 15063   014376  6EE6               	movwf	postinc1,c
 15064   014378  0E03               	movlw	3
 15065   01437A  6EE6               	movwf	postinc1,c
 15066   01437C  0E00               	movlw	0
 15067   01437E  6EE6               	movwf	postinc1,c
 15068   014380  EC26  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15069   014384                     l222:
 15070                           
 15071                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15072   014384  52E5               	movf	postdec1,f,c
 15073   014386  52E5               	movf	postdec1,f,c
 15074   014388  52E5               	movf	postdec1,f,c
 15075   01438A  0012               	return		;funcret
 15076   01438C                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15077                           	callstack 0
 15078                           
 15079 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15080 ;; Defined at:
 15081 ;;		line 294 in file "can/can.c"
 15082 ;; Parameters:    Size  Location     Type
 15083 ;;  address         2  [STACK] unsigned short 
 15084 ;;  txd             1  [STACK] unsigned char 
 15085 ;; Auto vars:     Size  Location     Type
 15086 ;;  spiTransferS    2    0        unsigned short 
 15087 ;;  spiTransferE    1  [STACK] char 
 15088 ;; Return value:  Size  Location     Type
 15089 ;;                  1  [STACK] char 
 15090 ;; Registers used:
 15091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15092 ;; Tracked objects:
 15093 ;;		On entry : 0/0
 15094 ;;		On exit  : 0/0
 15095 ;;		Unchanged: 0/0
 15096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;Total ram usage:        0 bytes
 15102 ;; Hardware stack levels used: 1
 15103 ;; Hardware stack levels required when called: 8
 15104 ;; This function calls:
 15105 ;;		_SpiTransfer
 15106 ;; This function is called by:
 15107 ;;		_DRV_CANFDSPI_OperationModeSelect
 15108 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15109 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15110 ;;		_DRV_CANFDSPI_FilterDisable
 15111 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15112 ;;		_DRV_CANFDSPI_TimeStampEnable
 15113 ;; This function uses a reentrant model
 15114 ;;
 15115                           
 15116                           	psect	text60
 15117   01464C                     __ptext60:
 15118                           	callstack 0
 15119   01464C                     _DRV_CANFDSPI_WriteByte:
 15120                           	callstack 0
 15121                           
 15122                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15123   01464C  52E6               	movf	postinc1,f,c
 15124   01464E                     
 15125                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15126                           ;stkvar	_address @ sp[(-1)+-2]
 15127   01464E  0EFE               	movlw	254
 15128   014650  24E1               	addwf	fsr1l,w,c
 15129   014652  6ED9               	movwf	fsr2l,c
 15130   014654  0EFF               	movlw	255
 15131   014656  20E2               	addwfc	fsr1h,w,c
 15132   014658  6EDA               	movwf	fsr2h,c
 15133   01465A  50DF               	movf	indf2,w,c
 15134   01465C  0B0F               	andlw	15
 15135   01465E  0F20               	addlw	32
 15136   014660  0101               	movlb	1	; () banked
 15137   014662  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15138   014664                     
 15139                           ; BSR set to: 1
 15140                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15141                           ;stkvar	_address @ sp[(-1)+-2]
 15142   014664  0EFD               	movlw	-3
 15143   014666  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15144   01466A                     
 15145                           ; BSR set to: 1
 15146                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15147                           ;stkvar	_txd @ sp[(-1)+-3]
 15148   01466A  0EFC               	movlw	-4
 15149   01466C  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15150   014670                     
 15151                           ; BSR set to: 1
 15152                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15153   014670  0E03               	movlw	3
 15154   014672  6EE6               	movwf	postinc1,c
 15155   014674  0E00               	movlw	0
 15156   014676  6EE6               	movwf	postinc1,c
 15157   014678  0E00               	movlw	low _spiReceiveBuffer
 15158   01467A  6EE6               	movwf	postinc1,c
 15159   01467C  0E02               	movlw	high _spiReceiveBuffer
 15160   01467E  6EE6               	movwf	postinc1,c
 15161   014680  0E00               	movlw	low _spiTransmitBuffer
 15162   014682  6EE6               	movwf	postinc1,c
 15163   014684  0E01               	movlw	high _spiTransmitBuffer
 15164   014686  6EE6               	movwf	postinc1,c
 15165   014688  EC39  F09D         	call	_SpiTransfer	;wreg free
 15166                           
 15167                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15168   01468C  0EFF               	movlw	-1
 15169   01468E  C001  FFE3         	movff	btemp,plusw1
 15170   014692                     
 15171                           ;can/can.c: 306:     return spiTransferError;
 15172                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15173   014692  0EFF               	movlw	-1
 15174   014694  CFE3 F001          	movff	plusw1,btemp
 15175   014698                     
 15176                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15177   014698  52E5               	movf	postdec1,f,c
 15178   01469A  52E5               	movf	postdec1,f,c
 15179   01469C  52E5               	movf	postdec1,f,c
 15180   01469E  52E5               	movf	postdec1,f,c
 15181   0146A0  0012               	return		;funcret
 15182   0146A2                     __end_of_DRV_CANFDSPI_WriteByte:
 15183                           	callstack 0
 15184                           
 15185 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15186 ;; Defined at:
 15187 ;;		line 276 in file "can/can.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;  address         2  [STACK] unsigned short 
 15190 ;;  rxd             2  [STACK] PTR unsigned char 
 15191 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15192 ;;		 -> d(1), d(1), d(1), crc(1), 
 15193 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15194 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15195 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15196 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15197 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15198 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15199 ;;		 -> d(1), d(1), 
 15200 ;; Auto vars:     Size  Location     Type
 15201 ;;  spiTransferS    2    0        unsigned short 
 15202 ;;  spiTransferE    1  [STACK] char 
 15203 ;; Return value:  Size  Location     Type
 15204 ;;                  1  [STACK] char 
 15205 ;; Registers used:
 15206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15207 ;; Tracked objects:
 15208 ;;		On entry : 0/0
 15209 ;;		On exit  : 0/0
 15210 ;;		Unchanged: 0/0
 15211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15216 ;;Total ram usage:        0 bytes
 15217 ;; Hardware stack levels used: 1
 15218 ;; Hardware stack levels required when called: 8
 15219 ;; This function calls:
 15220 ;;		_SpiTransfer
 15221 ;; This function is called by:
 15222 ;;		_DRV_CANFDSPI_OperationModeSelect
 15223 ;;		_DRV_CANFDSPI_FilterDisable
 15224 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15225 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15226 ;;		_DRV_CANFDSPI_TimeStampEnable
 15227 ;; This function uses a reentrant model
 15228 ;;
 15229                           
 15230                           	psect	text61
 15231   014532                     __ptext61:
 15232                           	callstack 0
 15233   014532                     _DRV_CANFDSPI_ReadByte:
 15234                           	callstack 0
 15235                           
 15236                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15237   014532  52E6               	movf	postinc1,f,c
 15238   014534                     
 15239                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15240                           ;stkvar	_address @ sp[(-1)+-2]
 15241   014534  0EFE               	movlw	254
 15242   014536  24E1               	addwf	fsr1l,w,c
 15243   014538  6ED9               	movwf	fsr2l,c
 15244   01453A  0EFF               	movlw	255
 15245   01453C  20E2               	addwfc	fsr1h,w,c
 15246   01453E  6EDA               	movwf	fsr2h,c
 15247   014540  50DF               	movf	indf2,w,c
 15248   014542  0B0F               	andlw	15
 15249   014544  0F30               	addlw	48
 15250   014546  0101               	movlb	1	; () banked
 15251   014548  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15252   01454A                     
 15253                           ; BSR set to: 1
 15254                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15255                           ;stkvar	_address @ sp[(-1)+-2]
 15256   01454A  0EFD               	movlw	-3
 15257   01454C  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15258   014550                     
 15259                           ; BSR set to: 1
 15260                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15261   014550  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15262   014552                     
 15263                           ; BSR set to: 1
 15264                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15265   014552  0E03               	movlw	3
 15266   014554  6EE6               	movwf	postinc1,c
 15267   014556  0E00               	movlw	0
 15268   014558  6EE6               	movwf	postinc1,c
 15269   01455A  0E00               	movlw	low _spiReceiveBuffer
 15270   01455C  6EE6               	movwf	postinc1,c
 15271   01455E  0E02               	movlw	high _spiReceiveBuffer
 15272   014560  6EE6               	movwf	postinc1,c
 15273   014562  0E00               	movlw	low _spiTransmitBuffer
 15274   014564  6EE6               	movwf	postinc1,c
 15275   014566  0E01               	movlw	high _spiTransmitBuffer
 15276   014568  6EE6               	movwf	postinc1,c
 15277   01456A  EC39  F09D         	call	_SpiTransfer	;wreg free
 15278                           
 15279                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15280   01456E  0EFF               	movlw	-1
 15281   014570  C001  FFE3         	movff	btemp,plusw1
 15282   014574                     
 15283                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15284                           ;stkvar	_rxd @ sp[(-1)+-4]
 15285   014574  0EFB               	movlw	-5
 15286   014576  CFE3 FFD9          	movff	plusw1,fsr2l
 15287   01457A  0EFC               	movlw	-4
 15288   01457C  CFE3 FFDA          	movff	plusw1,fsr2h
 15289   014580  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15290   014584                     
 15291                           ;can/can.c: 291:     return spiTransferError;
 15292                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15293   014584  0EFF               	movlw	-1
 15294   014586  CFE3 F001          	movff	plusw1,btemp
 15295   01458A                     
 15296                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15297   01458A  0EFB               	movlw	251
 15298   01458C  26E1               	addwf	fsr1l,f,c
 15299   01458E  0EFF               	movlw	255
 15300   014590  22E2               	addwfc	fsr1h,f,c
 15301   014592  0012               	return		;funcret
 15302   014594                     __end_of_DRV_CANFDSPI_ReadByte:
 15303                           	callstack 0
 15304                           
 15305 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15306 ;; Defined at:
 15307 ;;		line 1591 in file "can/can.c"
 15308 ;; Parameters:    Size  Location     Type
 15309 ;;  index           1  [STACK] unsigned char 
 15310 ;;  flags           2  [STACK] enum E5563
 15311 ;; Auto vars:     Size  Location     Type
 15312 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15313 ;;  a               2    0        unsigned short 
 15314 ;;  spiTransferE    1    0        char 
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1  [STACK] char 
 15317 ;; Registers used:
 15318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used: 1
 15330 ;; Hardware stack levels required when called: 9
 15331 ;; This function calls:
 15332 ;;		_DRV_CANFDSPI_WriteHalfWord
 15333 ;; This function is called by:
 15334 ;;		_CanInit
 15335 ;; This function uses a reentrant model
 15336 ;;
 15337                           
 15338                           	psect	text62
 15339   0144CE                     __ptext62:
 15340                           	callstack 0
 15341   0144CE                     _DRV_CANFDSPI_ModuleEventEnable:
 15342                           	callstack 0
 15343                           
 15344                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15345   0144CE  52E6               	movf	postinc1,f,c
 15346   0144D0  52E6               	movf	postinc1,f,c
 15347   0144D2                     
 15348                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15349                           ;stkvar	_intEnables @ sp[(-2)+0]
 15350   0144D2  0EFE               	movlw	-2
 15351   0144D4  6AE3               	clrf	plusw1,c
 15352   0144D6  0EFF               	movlw	-1
 15353   0144D8  6AE3               	clrf	plusw1,c
 15354   0144DA                     
 15355                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15356                           ;stkvar	_flags @ sp[(-2)+-3]
 15357   0144DA  0EFB               	movlw	-5
 15358   0144DC  CFE3 F00B          	movff	plusw1,btemp+10
 15359   0144E0  0EFC               	movlw	-4
 15360   0144E2  CFE3 F00C          	movff	plusw1,btemp+11
 15361   0144E6  0E1F               	movlw	31
 15362   0144E8  140B               	andwf	(btemp+10)^0,w,c
 15363   0144EA  6E09               	movwf	(btemp+8)^0,c
 15364   0144EC  0EFF               	movlw	255
 15365   0144EE  140C               	andwf	(btemp+11)^0,w,c
 15366   0144F0  6E0A               	movwf	(btemp+9)^0,c
 15367                           
 15368                           ;stkvar	_intEnables @ sp[(-2)+0]
 15369   0144F2  0EFE               	movlw	-2
 15370   0144F4  CFE3 F001          	movff	plusw1,btemp
 15371   0144F8  5009               	movf	(btemp+8)^0,w,c
 15372   0144FA  1201               	iorwf	btemp^0,f,c
 15373   0144FC  0EFE               	movlw	-2
 15374   0144FE  C001  FFE3         	movff	btemp,plusw1
 15375   014502  0EFF               	movlw	-1
 15376   014504  CFE3 F001          	movff	plusw1,btemp
 15377   014508  500A               	movf	(btemp+9)^0,w,c
 15378   01450A  1201               	iorwf	btemp^0,f,c
 15379   01450C  0EFF               	movlw	-1
 15380   01450E  C001  FFE3         	movff	btemp,plusw1
 15381   014512                     
 15382                           ;stkvar	_intEnables @ sp[(-2)+0]
 15383   014512  0EFE               	movlw	-2
 15384   014514  CFE3 FFE6          	movff	plusw1,postinc1
 15385   014518  CFE3 FFE6          	movff	plusw1,postinc1
 15386   01451C  0E1E               	movlw	30
 15387   01451E  6EE6               	movwf	postinc1,c
 15388   014520  0E00               	movlw	0
 15389   014522  6EE6               	movwf	postinc1,c
 15390   014524  ECD4  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15391   014528                     
 15392                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15393   014528  0EFB               	movlw	251
 15394   01452A  26E1               	addwf	fsr1l,f,c
 15395   01452C  0EFF               	movlw	255
 15396   01452E  22E2               	addwfc	fsr1h,f,c
 15397   014530  0012               	return		;funcret
 15398   014532                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15399                           	callstack 0
 15400                           
 15401 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15402 ;; Defined at:
 15403 ;;		line 332 in file "can/can.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  address         2  [STACK] unsigned short 
 15406 ;;  txd             2  [STACK] unsigned short 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  spiTransferS    2  [STACK] unsigned short 
 15409 ;;  i               1  [STACK] unsigned char 
 15410 ;;  spiTransferE    1  [STACK] char 
 15411 ;; Return value:  Size  Location     Type
 15412 ;;                  1  [STACK] char 
 15413 ;; Registers used:
 15414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15424 ;;Total ram usage:        0 bytes
 15425 ;; Hardware stack levels used: 1
 15426 ;; Hardware stack levels required when called: 8
 15427 ;; This function calls:
 15428 ;;		_SpiTransfer
 15429 ;; This function is called by:
 15430 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15431 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15432 ;; This function uses a reentrant model
 15433 ;;
 15434                           
 15435                           	psect	text63
 15436   0139A8                     __ptext63:
 15437                           	callstack 0
 15438   0139A8                     _DRV_CANFDSPI_WriteHalfWord:
 15439                           	callstack 0
 15440                           
 15441                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15442   0139A8  52E6               	movf	postinc1,f,c
 15443   0139AA  52E6               	movf	postinc1,f,c
 15444   0139AC  52E6               	movf	postinc1,f,c
 15445   0139AE  52E6               	movf	postinc1,f,c
 15446   0139B0                     
 15447                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15448   0139B0  0E04               	movlw	4
 15449   0139B2  6E0B               	movwf	(btemp+10)^0,c
 15450   0139B4  0E00               	movlw	0
 15451   0139B6  6E0C               	movwf	(btemp+11)^0,c
 15452                           
 15453                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15454   0139B8  0EFC               	movlw	-4
 15455   0139BA  C00B  FFE3         	movff	btemp+10,plusw1
 15456   0139BE  0EFD               	movlw	-3
 15457   0139C0  C00C  FFE3         	movff	btemp+11,plusw1
 15458   0139C4                     
 15459                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15460                           ;stkvar	_address @ sp[(-4)+-2]
 15461   0139C4  0EFB               	movlw	251
 15462   0139C6  24E1               	addwf	fsr1l,w,c
 15463   0139C8  6ED9               	movwf	fsr2l,c
 15464   0139CA  0EFF               	movlw	255
 15465   0139CC  20E2               	addwfc	fsr1h,w,c
 15466   0139CE  6EDA               	movwf	fsr2h,c
 15467   0139D0  50DF               	movf	indf2,w,c
 15468   0139D2  0B0F               	andlw	15
 15469   0139D4  0F20               	addlw	32
 15470   0139D6  0101               	movlb	1	; () banked
 15471   0139D8  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15472   0139DA                     
 15473                           ; BSR set to: 1
 15474                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15475                           ;stkvar	_address @ sp[(-4)+-2]
 15476   0139DA  0EFA               	movlw	-6
 15477   0139DC  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15478   0139E0                     
 15479                           ; BSR set to: 1
 15480                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15481                           ;stkvar	_i @ sp[(-4)+2]
 15482   0139E0  0EFE               	movlw	-2
 15483   0139E2  6AE3               	clrf	plusw1,c
 15484   0139E4                     l4600:
 15485                           
 15486                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15487                           ;stkvar	_i @ sp[(-4)+2]
 15488   0139E4  0EFE               	movlw	-2
 15489   0139E6  50E3               	movf	plusw1,w,c
 15490   0139E8  6E0B               	movwf	(btemp+10)^0,c
 15491   0139EA  6A0C               	clrf	(btemp+11)^0,c
 15492   0139EC  0E02               	movlw	low (_spiTransmitBuffer+2)
 15493   0139EE  240B               	addwf	(btemp+10)^0,w,c
 15494   0139F0  6ED9               	movwf	fsr2l,c
 15495   0139F2  0E01               	movlw	high (_spiTransmitBuffer+2)
 15496   0139F4  200C               	addwfc	(btemp+11)^0,w,c
 15497   0139F6  6EDA               	movwf	fsr2h,c
 15498                           
 15499                           ;stkvar	_i @ sp[(-4)+2]
 15500   0139F8  0EFE               	movlw	-2
 15501   0139FA  50E3               	movf	plusw1,w,c
 15502   0139FC  0D08               	mullw	8
 15503   0139FE  CFF3 F00C          	movff	prodl,btemp+11
 15504                           
 15505                           ;stkvar	_txd @ sp[(-4)+-4]
 15506   013A02  0EF8               	movlw	-8
 15507   013A04  CFE3 F009          	movff	plusw1,btemp+8
 15508   013A08  0EF9               	movlw	-7
 15509   013A0A  CFE3 F00A          	movff	plusw1,btemp+9
 15510   013A0E  2A0C               	incf	(btemp+11)^0,f,c
 15511   013A10  EF0D  F09D         	goto	u2244
 15512   013A14                     u2245:
 15513   013A14  90D8               	bcf	status,0,c
 15514   013A16  320A               	rrcf	(btemp+9)^0,f,c
 15515   013A18  3209               	rrcf	(btemp+8)^0,f,c
 15516   013A1A                     u2244:
 15517   013A1A  2E0C               	decfsz	(btemp+11)^0,f,c
 15518   013A1C  EF0A  F09D         	goto	u2245
 15519   013A20  5009               	movf	(btemp+8)^0,w,c
 15520   013A22  6EDF               	movwf	indf2,c
 15521   013A24                     
 15522                           ;can/can.c: 346:     }
 15523                           ;stkvar	_i @ sp[(-4)+2]
 15524   013A24  0EFE               	movlw	-2
 15525   013A26  2AE3               	incf	plusw1,f,c
 15526   013A28                     
 15527                           ;stkvar	_i @ sp[(-4)+2]
 15528   013A28  0EFE               	movlw	-2
 15529   013A2A  CFE3 F001          	movff	plusw1,btemp
 15530   013A2E  0E01               	movlw	1
 15531   013A30  6401               	cpfsgt	btemp^0,c
 15532   013A32  EF1D  F09D         	goto	u2251
 15533   013A36  EF1F  F09D         	goto	u2250
 15534   013A3A                     u2251:
 15535   013A3A  EFF2  F09C         	goto	l4600
 15536   013A3E                     u2250:
 15537   013A3E                     
 15538                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 15539                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15540   013A3E  0EFC               	movlw	-4
 15541   013A40  CFE3 FFE6          	movff	plusw1,postinc1
 15542   013A44  CFE3 FFE6          	movff	plusw1,postinc1
 15543   013A48  0E00               	movlw	low _spiReceiveBuffer
 15544   013A4A  6EE6               	movwf	postinc1,c
 15545   013A4C  0E02               	movlw	high _spiReceiveBuffer
 15546   013A4E  6EE6               	movwf	postinc1,c
 15547   013A50  0E00               	movlw	low _spiTransmitBuffer
 15548   013A52  6EE6               	movwf	postinc1,c
 15549   013A54  0E01               	movlw	high _spiTransmitBuffer
 15550   013A56  6EE6               	movwf	postinc1,c
 15551   013A58  EC39  F09D         	call	_SpiTransfer	;wreg free
 15552                           
 15553                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15554   013A5C  0EFF               	movlw	-1
 15555   013A5E  C001  FFE3         	movff	btemp,plusw1
 15556   013A62                     
 15557                           ;can/can.c: 350:     return spiTransferError;
 15558                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15559   013A62  0EFF               	movlw	-1
 15560   013A64  CFE3 F001          	movff	plusw1,btemp
 15561   013A68                     
 15562                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 15563   013A68  0EF8               	movlw	248
 15564   013A6A  26E1               	addwf	fsr1l,f,c
 15565   013A6C  0EFF               	movlw	255
 15566   013A6E  22E2               	addwfc	fsr1h,f,c
 15567   013A70  0012               	return		;funcret
 15568   013A72                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 15569                           	callstack 0
 15570                           
 15571 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 15572 ;; Defined at:
 15573 ;;		line 474 in file "can/can.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15576 ;;		 -> config(3), 
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15579 ;; Return value:  Size  Location     Type
 15580 ;;                  1  [STACK] char 
 15581 ;; Registers used:
 15582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 15583 ;; Tracked objects:
 15584 ;;		On entry : 0/0
 15585 ;;		On exit  : 0/0
 15586 ;;		Unchanged: 0/0
 15587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15592 ;;Total ram usage:        0 bytes
 15593 ;; Hardware stack levels used: 1
 15594 ;; Hardware stack levels required when called: 7
 15595 ;; This function calls:
 15596 ;;		Nothing
 15597 ;; This function is called by:
 15598 ;;		_CanInit
 15599 ;; This function uses a reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text64
 15603   0119BA                     __ptext64:
 15604                           	callstack 0
 15605   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 15606                           	callstack 0
 15607                           
 15608                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15609   0119BA  52E6               	movf	postinc1,f,c
 15610   0119BC  52E6               	movf	postinc1,f,c
 15611   0119BE  52E6               	movf	postinc1,f,c
 15612   0119C0  52E6               	movf	postinc1,f,c
 15613   0119C2                     
 15614                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 15615   0119C2  0E8D               	movlw	low _canControlResetValues
 15616   0119C4  6EF6               	movwf	tblptrl,c
 15617   0119C6                     	if	1	;There is more than 1 active tblptr byte
 15618   0119C6  0EFF               	movlw	high _canControlResetValues
 15619   0119C8  6EF7               	movwf	tblptrh,c
 15620   0119CA                     	endif
 15621   0119CA                     	if	1	;There are 3 active tblptr bytes
 15622   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15623   0119CC  6EF8               	movwf	tblptru,c
 15624   0119CE                     	endif
 15625   0119CE  0009               	tblrd		*+
 15626   0119D0  CFF5 F009          	movff	tablat,btemp+8
 15627   0119D4  0009               	tblrd		*+
 15628   0119D6  CFF5 F00A          	movff	tablat,btemp+9
 15629   0119DA  0009               	tblrd		*+
 15630   0119DC  CFF5 F00B          	movff	tablat,btemp+10
 15631   0119E0  0009               	tblrd		*+
 15632   0119E2  CFF5 F00C          	movff	tablat,btemp+11
 15633                           
 15634                           ;stkvar	_ciCon @ sp[(-4)+0]
 15635   0119E6  0EFC               	movlw	-4
 15636   0119E8  C009  FFE3         	movff	btemp+8,plusw1
 15637   0119EC  0EFD               	movlw	-3
 15638   0119EE  C00A  FFE3         	movff	btemp+9,plusw1
 15639   0119F2  0EFE               	movlw	-2
 15640   0119F4  C00B  FFE3         	movff	btemp+10,plusw1
 15641   0119F8  0EFF               	movlw	-1
 15642   0119FA  C00C  FFE3         	movff	btemp+11,plusw1
 15643   0119FE                     
 15644                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 15645                           ;stkvar	_ciCon @ sp[(-4)+0]
 15646   0119FE  50E1               	movf	fsr1l,w,c
 15647   011A00  0FFC               	addlw	-4
 15648   011A02  6ED9               	movwf	fsr2l,c
 15649   011A04  50E2               	movf	fsr1h,w,c
 15650   011A06  6EDA               	movwf	fsr2h,c
 15651   011A08  0EFF               	movlw	255
 15652   011A0A  22DA               	addwfc	fsr2h,f,c
 15653   011A0C  50DF               	movf	223,w,c
 15654   011A0E  0B1F               	andlw	31
 15655   011A10  6E0C               	movwf	(btemp+11)^0,c
 15656                           
 15657                           ;stkvar	_config @ sp[(-4)+-2]
 15658   011A12  0EFA               	movlw	-6
 15659   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 15660   011A18  0EFB               	movlw	-5
 15661   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 15662   011A1E  50DF               	movf	223,w,c
 15663   011A20  180C               	xorwf	(btemp+11)^0,w,c
 15664   011A22  0BE0               	andlw	-32
 15665   011A24  180C               	xorwf	(btemp+11)^0,w,c
 15666   011A26  6EDF               	movwf	223,c
 15667   011A28                     
 15668                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 15669                           ;stkvar	_ciCon @ sp[(-4)+0]
 15670   011A28  50E1               	movf	fsr1l,w,c
 15671   011A2A  0FFC               	addlw	-4
 15672   011A2C  6ED9               	movwf	fsr2l,c
 15673   011A2E  50E2               	movf	fsr1h,w,c
 15674   011A30  6EDA               	movwf	fsr2h,c
 15675   011A32  0EFF               	movlw	255
 15676   011A34  22DA               	addwfc	fsr2h,f,c
 15677                           
 15678                           ;stkvar	_config @ sp[(-4)+-2]
 15679   011A36  0EFA               	movlw	-6
 15680   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 15681   011A3C  0EFB               	movlw	-5
 15682   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 15683   011A42  9AEF               	bcf	indf0,5,c
 15684   011A44  AADF               	btfss	indf2,5,c
 15685   011A46  EF26  F08D         	goto	u805
 15686   011A4A  8AEF               	bsf	indf0,5,c
 15687   011A4C                     u805:
 15688   011A4C                     
 15689                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 15690                           ;stkvar	_ciCon @ sp[(-4)+0]
 15691   011A4C  50E1               	movf	fsr1l,w,c
 15692   011A4E  0FFC               	addlw	-4
 15693   011A50  6ED9               	movwf	fsr2l,c
 15694   011A52  50E2               	movf	fsr1h,w,c
 15695   011A54  6EDA               	movwf	fsr2h,c
 15696   011A56  0EFF               	movlw	255
 15697   011A58  22DA               	addwfc	fsr2h,f,c
 15698                           
 15699                           ;stkvar	_config @ sp[(-4)+-2]
 15700   011A5A  0EFA               	movlw	-6
 15701   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 15702   011A60  0EFB               	movlw	-5
 15703   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 15704   011A66  9CEF               	bcf	indf0,6,c
 15705   011A68  ACDF               	btfss	indf2,6,c
 15706   011A6A  EF38  F08D         	goto	u815
 15707   011A6E  8CEF               	bsf	indf0,6,c
 15708   011A70                     u815:
 15709   011A70                     
 15710                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15711                           ;stkvar	_ciCon @ sp[(-4)+0]
 15712   011A70  0EFD               	movlw	253
 15713   011A72  24E1               	addwf	fsr1l,w,c
 15714   011A74  6ED9               	movwf	fsr2l,c
 15715   011A76  0EFF               	movlw	255
 15716   011A78  20E2               	addwfc	fsr1h,w,c
 15717   011A7A  6EDA               	movwf	fsr2h,c
 15718                           
 15719                           ;stkvar	_config @ sp[(-4)+-2]
 15720   011A7C  0EFA               	movlw	-6
 15721   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15722   011A82  0EFB               	movlw	-5
 15723   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15724   011A88  9EEF               	bcf	indf0,7,c
 15725   011A8A  A0DF               	btfss	indf2,0,c
 15726   011A8C  EF49  F08D         	goto	u825
 15727   011A90  8EEF               	bsf	indf0,7,c
 15728   011A92                     u825:
 15729   011A92                     
 15730                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15731                           ;stkvar	_ciCon @ sp[(-4)+0]
 15732   011A92  0EFD               	movlw	253
 15733   011A94  24E1               	addwf	fsr1l,w,c
 15734   011A96  6ED9               	movwf	fsr2l,c
 15735   011A98  0EFF               	movlw	255
 15736   011A9A  20E2               	addwfc	fsr1h,w,c
 15737   011A9C  6EDA               	movwf	fsr2h,c
 15738   011A9E  30DF               	rrcf	223,w,c
 15739   011AA0  0B03               	andlw	3
 15740   011AA2  6E0C               	movwf	(btemp+11)^0,c
 15741                           
 15742                           ;stkvar	_config @ sp[(-4)+-2]
 15743   011AA4  0EFA               	movlw	-6
 15744   011AA6  CFE3 F009          	movff	plusw1,btemp+8
 15745   011AAA  0EFB               	movlw	-5
 15746   011AAC  CFE3 F00A          	movff	plusw1,btemp+9
 15747   011AB0  0E01               	movlw	1
 15748   011AB2  2409               	addwf	(btemp+8)^0,w,c
 15749   011AB4  6ED9               	movwf	fsr2l,c
 15750   011AB6  0E00               	movlw	0
 15751   011AB8  200A               	addwfc	(btemp+9)^0,w,c
 15752   011ABA  6EDA               	movwf	fsr2h,c
 15753   011ABC  50DF               	movf	223,w,c
 15754   011ABE  180C               	xorwf	(btemp+11)^0,w,c
 15755   011AC0  0BFC               	andlw	-4
 15756   011AC2  180C               	xorwf	(btemp+11)^0,w,c
 15757   011AC4  6EDF               	movwf	223,c
 15758   011AC6                     
 15759                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15760                           ;stkvar	_ciCon @ sp[(-4)+0]
 15761   011AC6  0EFD               	movlw	253
 15762   011AC8  24E1               	addwf	fsr1l,w,c
 15763   011ACA  6ED9               	movwf	fsr2l,c
 15764   011ACC  0EFF               	movlw	255
 15765   011ACE  20E2               	addwfc	fsr1h,w,c
 15766   011AD0  6EDA               	movwf	fsr2h,c
 15767                           
 15768                           ;stkvar	_config @ sp[(-4)+-2]
 15769   011AD2  0EFA               	movlw	-6
 15770   011AD4  CFE3 F00B          	movff	plusw1,btemp+10
 15771   011AD8  0EFB               	movlw	-5
 15772   011ADA  CFE3 F00C          	movff	plusw1,btemp+11
 15773   011ADE  0E01               	movlw	1
 15774   011AE0  240B               	addwf	(btemp+10)^0,w,c
 15775   011AE2  6EE9               	movwf	fsr0l,c
 15776   011AE4  0E00               	movlw	0
 15777   011AE6  200C               	addwfc	(btemp+11)^0,w,c
 15778   011AE8  6EEA               	movwf	fsr0h,c
 15779   011AEA  94EF               	bcf	indf0,2,c
 15780   011AEC  A8DF               	btfss	indf2,4,c
 15781   011AEE  EF7A  F08D         	goto	u835
 15782   011AF2  84EF               	bsf	indf0,2,c
 15783   011AF4                     u835:
 15784   011AF4                     
 15785                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15786                           ;stkvar	_ciCon @ sp[(-4)+0]
 15787   011AF4  0EFE               	movlw	254
 15788   011AF6  24E1               	addwf	fsr1l,w,c
 15789   011AF8  6ED9               	movwf	fsr2l,c
 15790   011AFA  0EFF               	movlw	255
 15791   011AFC  20E2               	addwfc	fsr1h,w,c
 15792   011AFE  6EDA               	movwf	fsr2h,c
 15793                           
 15794                           ;stkvar	_config @ sp[(-4)+-2]
 15795   011B00  0EFA               	movlw	-6
 15796   011B02  CFE3 F00B          	movff	plusw1,btemp+10
 15797   011B06  0EFB               	movlw	-5
 15798   011B08  CFE3 F00C          	movff	plusw1,btemp+11
 15799   011B0C  0E01               	movlw	1
 15800   011B0E  240B               	addwf	(btemp+10)^0,w,c
 15801   011B10  6EE9               	movwf	fsr0l,c
 15802   011B12  0E00               	movlw	0
 15803   011B14  200C               	addwfc	(btemp+11)^0,w,c
 15804   011B16  6EEA               	movwf	fsr0h,c
 15805   011B18  96EF               	bcf	indf0,3,c
 15806   011B1A  A0DF               	btfss	indf2,0,c
 15807   011B1C  EF91  F08D         	goto	u845
 15808   011B20  86EF               	bsf	indf0,3,c
 15809   011B22                     u845:
 15810   011B22                     
 15811                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 15812                           ;stkvar	_ciCon @ sp[(-4)+0]
 15813   011B22  0EFE               	movlw	254
 15814   011B24  24E1               	addwf	fsr1l,w,c
 15815   011B26  6ED9               	movwf	fsr2l,c
 15816   011B28  0EFF               	movlw	255
 15817   011B2A  20E2               	addwfc	fsr1h,w,c
 15818   011B2C  6EDA               	movwf	fsr2h,c
 15819                           
 15820                           ;stkvar	_config @ sp[(-4)+-2]
 15821   011B2E  0EFA               	movlw	-6
 15822   011B30  CFE3 F00B          	movff	plusw1,btemp+10
 15823   011B34  0EFB               	movlw	-5
 15824   011B36  CFE3 F00C          	movff	plusw1,btemp+11
 15825   011B3A  0E01               	movlw	1
 15826   011B3C  240B               	addwf	(btemp+10)^0,w,c
 15827   011B3E  6EE9               	movwf	fsr0l,c
 15828   011B40  0E00               	movlw	0
 15829   011B42  200C               	addwfc	(btemp+11)^0,w,c
 15830   011B44  6EEA               	movwf	fsr0h,c
 15831   011B46  98EF               	bcf	indf0,4,c
 15832   011B48  A2DF               	btfss	indf2,1,c
 15833   011B4A  EFA8  F08D         	goto	u855
 15834   011B4E  88EF               	bsf	indf0,4,c
 15835   011B50                     u855:
 15836   011B50                     
 15837                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 15838                           ;stkvar	_ciCon @ sp[(-4)+0]
 15839   011B50  0EFE               	movlw	254
 15840   011B52  24E1               	addwf	fsr1l,w,c
 15841   011B54  6ED9               	movwf	fsr2l,c
 15842   011B56  0EFF               	movlw	255
 15843   011B58  20E2               	addwfc	fsr1h,w,c
 15844   011B5A  6EDA               	movwf	fsr2h,c
 15845                           
 15846                           ;stkvar	_config @ sp[(-4)+-2]
 15847   011B5C  0EFA               	movlw	-6
 15848   011B5E  CFE3 F00B          	movff	plusw1,btemp+10
 15849   011B62  0EFB               	movlw	-5
 15850   011B64  CFE3 F00C          	movff	plusw1,btemp+11
 15851   011B68  0E01               	movlw	1
 15852   011B6A  240B               	addwf	(btemp+10)^0,w,c
 15853   011B6C  6EE9               	movwf	fsr0l,c
 15854   011B6E  0E00               	movlw	0
 15855   011B70  200C               	addwfc	(btemp+11)^0,w,c
 15856   011B72  6EEA               	movwf	fsr0h,c
 15857   011B74  9AEF               	bcf	indf0,5,c
 15858   011B76  A4DF               	btfss	indf2,2,c
 15859   011B78  EFBF  F08D         	goto	u865
 15860   011B7C  8AEF               	bsf	indf0,5,c
 15861   011B7E                     u865:
 15862   011B7E                     
 15863                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 15864                           ;stkvar	_ciCon @ sp[(-4)+0]
 15865   011B7E  0EFE               	movlw	254
 15866   011B80  24E1               	addwf	fsr1l,w,c
 15867   011B82  6ED9               	movwf	fsr2l,c
 15868   011B84  0EFF               	movlw	255
 15869   011B86  20E2               	addwfc	fsr1h,w,c
 15870   011B88  6EDA               	movwf	fsr2h,c
 15871                           
 15872                           ;stkvar	_config @ sp[(-4)+-2]
 15873   011B8A  0EFA               	movlw	-6
 15874   011B8C  CFE3 F00B          	movff	plusw1,btemp+10
 15875   011B90  0EFB               	movlw	-5
 15876   011B92  CFE3 F00C          	movff	plusw1,btemp+11
 15877   011B96  0E01               	movlw	1
 15878   011B98  240B               	addwf	(btemp+10)^0,w,c
 15879   011B9A  6EE9               	movwf	fsr0l,c
 15880   011B9C  0E00               	movlw	0
 15881   011B9E  200C               	addwfc	(btemp+11)^0,w,c
 15882   011BA0  6EEA               	movwf	fsr0h,c
 15883   011BA2  9CEF               	bcf	indf0,6,c
 15884   011BA4  A6DF               	btfss	indf2,3,c
 15885   011BA6  EFD6  F08D         	goto	u875
 15886   011BAA  8CEF               	bsf	indf0,6,c
 15887   011BAC                     u875:
 15888   011BAC                     
 15889                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 15890                           ;stkvar	_ciCon @ sp[(-4)+0]
 15891   011BAC  0EFE               	movlw	254
 15892   011BAE  24E1               	addwf	fsr1l,w,c
 15893   011BB0  6ED9               	movwf	fsr2l,c
 15894   011BB2  0EFF               	movlw	255
 15895   011BB4  20E2               	addwfc	fsr1h,w,c
 15896   011BB6  6EDA               	movwf	fsr2h,c
 15897                           
 15898                           ;stkvar	_config @ sp[(-4)+-2]
 15899   011BB8  0EFA               	movlw	-6
 15900   011BBA  CFE3 F00B          	movff	plusw1,btemp+10
 15901   011BBE  0EFB               	movlw	-5
 15902   011BC0  CFE3 F00C          	movff	plusw1,btemp+11
 15903   011BC4  0E01               	movlw	1
 15904   011BC6  240B               	addwf	(btemp+10)^0,w,c
 15905   011BC8  6EE9               	movwf	fsr0l,c
 15906   011BCA  0E00               	movlw	0
 15907   011BCC  200C               	addwfc	(btemp+11)^0,w,c
 15908   011BCE  6EEA               	movwf	fsr0h,c
 15909   011BD0  9EEF               	bcf	indf0,7,c
 15910   011BD2  A8DF               	btfss	indf2,4,c
 15911   011BD4  EFED  F08D         	goto	u885
 15912   011BD8  8EEF               	bsf	indf0,7,c
 15913   011BDA                     u885:
 15914   011BDA                     
 15915                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 15916                           ;stkvar	_ciCon @ sp[(-4)+0]
 15917   011BDA  0EFF               	movlw	255
 15918   011BDC  24E1               	addwf	fsr1l,w,c
 15919   011BDE  6ED9               	movwf	fsr2l,c
 15920   011BE0  0EFF               	movlw	255
 15921   011BE2  20E2               	addwfc	fsr1h,w,c
 15922   011BE4  6EDA               	movwf	fsr2h,c
 15923   011BE6  38DF               	swapf	223,w,c
 15924   011BE8  0B0F               	andlw	15
 15925   011BEA  6E0C               	movwf	(btemp+11)^0,c
 15926                           
 15927                           ;stkvar	_config @ sp[(-4)+-2]
 15928   011BEC  0EFA               	movlw	-6
 15929   011BEE  CFE3 F009          	movff	plusw1,btemp+8
 15930   011BF2  0EFB               	movlw	-5
 15931   011BF4  CFE3 F00A          	movff	plusw1,btemp+9
 15932   011BF8  0E02               	movlw	2
 15933   011BFA  2409               	addwf	(btemp+8)^0,w,c
 15934   011BFC  6ED9               	movwf	fsr2l,c
 15935   011BFE  0E00               	movlw	0
 15936   011C00  200A               	addwfc	(btemp+9)^0,w,c
 15937   011C02  6EDA               	movwf	fsr2h,c
 15938   011C04  50DF               	movf	223,w,c
 15939   011C06  180C               	xorwf	(btemp+11)^0,w,c
 15940   011C08  0BF0               	andlw	-16
 15941   011C0A  180C               	xorwf	(btemp+11)^0,w,c
 15942   011C0C  6EDF               	movwf	223,c
 15943   011C0E                     
 15944                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 15945   011C0E  0EFA               	movlw	250
 15946   011C10  26E1               	addwf	fsr1l,f,c
 15947   011C12  0EFF               	movlw	255
 15948   011C14  22E2               	addwfc	fsr1h,f,c
 15949   011C16  0012               	return		;funcret
 15950   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 15951                           	callstack 0
 15952                           
 15953 ;; *************** function _DRV_CANFDSPI_Configure *****************
 15954 ;; Defined at:
 15955 ;;		line 446 in file "can/can.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15958 ;;		 -> config(3), 
 15959 ;; Auto vars:     Size  Location     Type
 15960 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15961 ;;  spiTransferE    1    0        char 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;                  1  [STACK] char 
 15964 ;; Registers used:
 15965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15975 ;;Total ram usage:        0 bytes
 15976 ;; Hardware stack levels used: 1
 15977 ;; Hardware stack levels required when called: 9
 15978 ;; This function calls:
 15979 ;;		_DRV_CANFDSPI_WriteWord
 15980 ;; This function is called by:
 15981 ;;		_CanInit
 15982 ;; This function uses a reentrant model
 15983 ;;
 15984                           
 15985                           	psect	text65
 15986   01173A                     __ptext65:
 15987                           	callstack 0
 15988   01173A                     _DRV_CANFDSPI_Configure:
 15989                           	callstack 0
 15990                           
 15991                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15992   01173A  52E6               	movf	postinc1,f,c
 15993   01173C  52E6               	movf	postinc1,f,c
 15994   01173E  52E6               	movf	postinc1,f,c
 15995   011740  52E6               	movf	postinc1,f,c
 15996   011742                     
 15997                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 15998   011742  0E8D               	movlw	low _canControlResetValues
 15999   011744  6EF6               	movwf	tblptrl,c
 16000   011746                     	if	1	;There is more than 1 active tblptr byte
 16001   011746  0EFF               	movlw	high _canControlResetValues
 16002   011748  6EF7               	movwf	tblptrh,c
 16003   01174A                     	endif
 16004   01174A                     	if	1	;There are 3 active tblptr bytes
 16005   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16006   01174C  6EF8               	movwf	tblptru,c
 16007   01174E                     	endif
 16008   01174E  0009               	tblrd		*+
 16009   011750  CFF5 F009          	movff	tablat,btemp+8
 16010   011754  0009               	tblrd		*+
 16011   011756  CFF5 F00A          	movff	tablat,btemp+9
 16012   01175A  0009               	tblrd		*+
 16013   01175C  CFF5 F00B          	movff	tablat,btemp+10
 16014   011760  0009               	tblrd		*+
 16015   011762  CFF5 F00C          	movff	tablat,btemp+11
 16016                           
 16017                           ;stkvar	_ciCon @ sp[(-4)+0]
 16018   011766  0EFC               	movlw	-4
 16019   011768  C009  FFE3         	movff	btemp+8,plusw1
 16020   01176C  0EFD               	movlw	-3
 16021   01176E  C00A  FFE3         	movff	btemp+9,plusw1
 16022   011772  0EFE               	movlw	-2
 16023   011774  C00B  FFE3         	movff	btemp+10,plusw1
 16024   011778  0EFF               	movlw	-1
 16025   01177A  C00C  FFE3         	movff	btemp+11,plusw1
 16026   01177E                     
 16027                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 16028                           ;stkvar	_config @ sp[(-4)+-2]
 16029   01177E  0EFA               	movlw	-6
 16030   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 16031   011784  0EFB               	movlw	-5
 16032   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 16033   01178A  50DF               	movf	223,w,c
 16034   01178C  0B1F               	andlw	31
 16035   01178E  6E0C               	movwf	(btemp+11)^0,c
 16036                           
 16037                           ;stkvar	_ciCon @ sp[(-4)+0]
 16038   011790  50E1               	movf	fsr1l,w,c
 16039   011792  0FFC               	addlw	-4
 16040   011794  6ED9               	movwf	fsr2l,c
 16041   011796  50E2               	movf	fsr1h,w,c
 16042   011798  6EDA               	movwf	fsr2h,c
 16043   01179A  0EFF               	movlw	255
 16044   01179C  22DA               	addwfc	fsr2h,f,c
 16045   01179E  50DF               	movf	223,w,c
 16046   0117A0  180C               	xorwf	(btemp+11)^0,w,c
 16047   0117A2  0BE0               	andlw	-32
 16048   0117A4  180C               	xorwf	(btemp+11)^0,w,c
 16049   0117A6  6EDF               	movwf	223,c
 16050   0117A8                     
 16051                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16052                           ;stkvar	_config @ sp[(-4)+-2]
 16053   0117A8  0EFA               	movlw	-6
 16054   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16055   0117AE  0EFB               	movlw	-5
 16056   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16057                           
 16058                           ;stkvar	_ciCon @ sp[(-4)+0]
 16059   0117B4  50E1               	movf	fsr1l,w,c
 16060   0117B6  0FFC               	addlw	-4
 16061   0117B8  6EE9               	movwf	fsr0l,c
 16062   0117BA  50E2               	movf	fsr1h,w,c
 16063   0117BC  6EEA               	movwf	fsr0h,c
 16064   0117BE  0EFF               	movlw	255
 16065   0117C0  22EA               	addwfc	fsr0h,f,c
 16066   0117C2  9AEF               	bcf	indf0,5,c
 16067   0117C4  AADF               	btfss	indf2,5,c
 16068   0117C6  EFE6  F08B         	goto	u2375
 16069   0117CA  8AEF               	bsf	indf0,5,c
 16070   0117CC                     u2375:
 16071   0117CC                     
 16072                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16073                           ;stkvar	_config @ sp[(-4)+-2]
 16074   0117CC  0EFA               	movlw	-6
 16075   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16076   0117D2  0EFB               	movlw	-5
 16077   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16078                           
 16079                           ;stkvar	_ciCon @ sp[(-4)+0]
 16080   0117D8  50E1               	movf	fsr1l,w,c
 16081   0117DA  0FFC               	addlw	-4
 16082   0117DC  6EE9               	movwf	fsr0l,c
 16083   0117DE  50E2               	movf	fsr1h,w,c
 16084   0117E0  6EEA               	movwf	fsr0h,c
 16085   0117E2  0EFF               	movlw	255
 16086   0117E4  22EA               	addwfc	fsr0h,f,c
 16087   0117E6  9CEF               	bcf	indf0,6,c
 16088   0117E8  ACDF               	btfss	indf2,6,c
 16089   0117EA  EFF8  F08B         	goto	u2385
 16090   0117EE  8CEF               	bsf	indf0,6,c
 16091   0117F0                     u2385:
 16092   0117F0                     
 16093                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16094                           ;stkvar	_config @ sp[(-4)+-2]
 16095   0117F0  0EFA               	movlw	-6
 16096   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16097   0117F6  0EFB               	movlw	-5
 16098   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16099                           
 16100                           ;stkvar	_ciCon @ sp[(-4)+0]
 16101   0117FC  0EFD               	movlw	253
 16102   0117FE  24E1               	addwf	fsr1l,w,c
 16103   011800  6EE9               	movwf	fsr0l,c
 16104   011802  0EFF               	movlw	255
 16105   011804  20E2               	addwfc	fsr1h,w,c
 16106   011806  6EEA               	movwf	fsr0h,c
 16107   011808  90EF               	bcf	indf0,0,c
 16108   01180A  AEDF               	btfss	indf2,7,c
 16109   01180C  EF09  F08C         	goto	u2395
 16110   011810  80EF               	bsf	indf0,0,c
 16111   011812                     u2395:
 16112   011812                     
 16113                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16114                           ;stkvar	_config @ sp[(-4)+-2]
 16115   011812  0EFA               	movlw	-6
 16116   011814  CFE3 F00B          	movff	plusw1,btemp+10
 16117   011818  0EFB               	movlw	-5
 16118   01181A  CFE3 F00C          	movff	plusw1,btemp+11
 16119   01181E  0E01               	movlw	1
 16120   011820  240B               	addwf	(btemp+10)^0,w,c
 16121   011822  6ED9               	movwf	fsr2l,c
 16122   011824  0E00               	movlw	0
 16123   011826  200C               	addwfc	(btemp+11)^0,w,c
 16124   011828  6EDA               	movwf	fsr2h,c
 16125   01182A  50DF               	movf	223,w,c
 16126   01182C  0B03               	andlw	3
 16127   01182E  6E0C               	movwf	(btemp+11)^0,c
 16128                           
 16129                           ;stkvar	_ciCon @ sp[(-4)+0]
 16130   011830  0EFD               	movlw	253
 16131   011832  24E1               	addwf	fsr1l,w,c
 16132   011834  6ED9               	movwf	fsr2l,c
 16133   011836  0EFF               	movlw	255
 16134   011838  20E2               	addwfc	fsr1h,w,c
 16135   01183A  6EDA               	movwf	fsr2h,c
 16136   01183C  460C               	rlncf	(btemp+11)^0,f,c
 16137   01183E  50DF               	movf	223,w,c
 16138   011840  180C               	xorwf	(btemp+11)^0,w,c
 16139   011842  0BF9               	andlw	-7
 16140   011844  180C               	xorwf	(btemp+11)^0,w,c
 16141   011846  6EDF               	movwf	223,c
 16142   011848                     
 16143                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16144                           ;stkvar	_config @ sp[(-4)+-2]
 16145   011848  0EFA               	movlw	-6
 16146   01184A  CFE3 F00B          	movff	plusw1,btemp+10
 16147   01184E  0EFB               	movlw	-5
 16148   011850  CFE3 F00C          	movff	plusw1,btemp+11
 16149   011854  0E01               	movlw	1
 16150   011856  240B               	addwf	(btemp+10)^0,w,c
 16151   011858  6ED9               	movwf	fsr2l,c
 16152   01185A  0E00               	movlw	0
 16153   01185C  200C               	addwfc	(btemp+11)^0,w,c
 16154   01185E  6EDA               	movwf	fsr2h,c
 16155                           
 16156                           ;stkvar	_ciCon @ sp[(-4)+0]
 16157   011860  0EFD               	movlw	253
 16158   011862  24E1               	addwf	fsr1l,w,c
 16159   011864  6EE9               	movwf	fsr0l,c
 16160   011866  0EFF               	movlw	255
 16161   011868  20E2               	addwfc	fsr1h,w,c
 16162   01186A  6EEA               	movwf	fsr0h,c
 16163   01186C  98EF               	bcf	indf0,4,c
 16164   01186E  A4DF               	btfss	indf2,2,c
 16165   011870  EF3B  F08C         	goto	u2405
 16166   011874  88EF               	bsf	indf0,4,c
 16167   011876                     u2405:
 16168   011876                     
 16169                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16170                           ;stkvar	_config @ sp[(-4)+-2]
 16171   011876  0EFA               	movlw	-6
 16172   011878  CFE3 F00B          	movff	plusw1,btemp+10
 16173   01187C  0EFB               	movlw	-5
 16174   01187E  CFE3 F00C          	movff	plusw1,btemp+11
 16175   011882  0E01               	movlw	1
 16176   011884  240B               	addwf	(btemp+10)^0,w,c
 16177   011886  6ED9               	movwf	fsr2l,c
 16178   011888  0E00               	movlw	0
 16179   01188A  200C               	addwfc	(btemp+11)^0,w,c
 16180   01188C  6EDA               	movwf	fsr2h,c
 16181                           
 16182                           ;stkvar	_ciCon @ sp[(-4)+0]
 16183   01188E  0EFE               	movlw	254
 16184   011890  24E1               	addwf	fsr1l,w,c
 16185   011892  6EE9               	movwf	fsr0l,c
 16186   011894  0EFF               	movlw	255
 16187   011896  20E2               	addwfc	fsr1h,w,c
 16188   011898  6EEA               	movwf	fsr0h,c
 16189   01189A  90EF               	bcf	indf0,0,c
 16190   01189C  A6DF               	btfss	indf2,3,c
 16191   01189E  EF52  F08C         	goto	u2415
 16192   0118A2  80EF               	bsf	indf0,0,c
 16193   0118A4                     u2415:
 16194   0118A4                     
 16195                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16196                           ;stkvar	_config @ sp[(-4)+-2]
 16197   0118A4  0EFA               	movlw	-6
 16198   0118A6  CFE3 F00B          	movff	plusw1,btemp+10
 16199   0118AA  0EFB               	movlw	-5
 16200   0118AC  CFE3 F00C          	movff	plusw1,btemp+11
 16201   0118B0  0E01               	movlw	1
 16202   0118B2  240B               	addwf	(btemp+10)^0,w,c
 16203   0118B4  6ED9               	movwf	fsr2l,c
 16204   0118B6  0E00               	movlw	0
 16205   0118B8  200C               	addwfc	(btemp+11)^0,w,c
 16206   0118BA  6EDA               	movwf	fsr2h,c
 16207                           
 16208                           ;stkvar	_ciCon @ sp[(-4)+0]
 16209   0118BC  0EFE               	movlw	254
 16210   0118BE  24E1               	addwf	fsr1l,w,c
 16211   0118C0  6EE9               	movwf	fsr0l,c
 16212   0118C2  0EFF               	movlw	255
 16213   0118C4  20E2               	addwfc	fsr1h,w,c
 16214   0118C6  6EEA               	movwf	fsr0h,c
 16215   0118C8  92EF               	bcf	indf0,1,c
 16216   0118CA  A8DF               	btfss	indf2,4,c
 16217   0118CC  EF69  F08C         	goto	u2425
 16218   0118D0  82EF               	bsf	indf0,1,c
 16219   0118D2                     u2425:
 16220   0118D2                     
 16221                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16222                           ;stkvar	_config @ sp[(-4)+-2]
 16223   0118D2  0EFA               	movlw	-6
 16224   0118D4  CFE3 F00B          	movff	plusw1,btemp+10
 16225   0118D8  0EFB               	movlw	-5
 16226   0118DA  CFE3 F00C          	movff	plusw1,btemp+11
 16227   0118DE  0E01               	movlw	1
 16228   0118E0  240B               	addwf	(btemp+10)^0,w,c
 16229   0118E2  6ED9               	movwf	fsr2l,c
 16230   0118E4  0E00               	movlw	0
 16231   0118E6  200C               	addwfc	(btemp+11)^0,w,c
 16232   0118E8  6EDA               	movwf	fsr2h,c
 16233                           
 16234                           ;stkvar	_ciCon @ sp[(-4)+0]
 16235   0118EA  0EFE               	movlw	254
 16236   0118EC  24E1               	addwf	fsr1l,w,c
 16237   0118EE  6EE9               	movwf	fsr0l,c
 16238   0118F0  0EFF               	movlw	255
 16239   0118F2  20E2               	addwfc	fsr1h,w,c
 16240   0118F4  6EEA               	movwf	fsr0h,c
 16241   0118F6  94EF               	bcf	indf0,2,c
 16242   0118F8  AADF               	btfss	indf2,5,c
 16243   0118FA  EF80  F08C         	goto	u2435
 16244   0118FE  84EF               	bsf	indf0,2,c
 16245   011900                     u2435:
 16246   011900                     
 16247                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16248                           ;stkvar	_config @ sp[(-4)+-2]
 16249   011900  0EFA               	movlw	-6
 16250   011902  CFE3 F00B          	movff	plusw1,btemp+10
 16251   011906  0EFB               	movlw	-5
 16252   011908  CFE3 F00C          	movff	plusw1,btemp+11
 16253   01190C  0E01               	movlw	1
 16254   01190E  240B               	addwf	(btemp+10)^0,w,c
 16255   011910  6ED9               	movwf	fsr2l,c
 16256   011912  0E00               	movlw	0
 16257   011914  200C               	addwfc	(btemp+11)^0,w,c
 16258   011916  6EDA               	movwf	fsr2h,c
 16259                           
 16260                           ;stkvar	_ciCon @ sp[(-4)+0]
 16261   011918  0EFE               	movlw	254
 16262   01191A  24E1               	addwf	fsr1l,w,c
 16263   01191C  6EE9               	movwf	fsr0l,c
 16264   01191E  0EFF               	movlw	255
 16265   011920  20E2               	addwfc	fsr1h,w,c
 16266   011922  6EEA               	movwf	fsr0h,c
 16267   011924  96EF               	bcf	indf0,3,c
 16268   011926  ACDF               	btfss	indf2,6,c
 16269   011928  EF97  F08C         	goto	u2445
 16270   01192C  86EF               	bsf	indf0,3,c
 16271   01192E                     u2445:
 16272   01192E                     
 16273                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16274                           ;stkvar	_config @ sp[(-4)+-2]
 16275   01192E  0EFA               	movlw	-6
 16276   011930  CFE3 F00B          	movff	plusw1,btemp+10
 16277   011934  0EFB               	movlw	-5
 16278   011936  CFE3 F00C          	movff	plusw1,btemp+11
 16279   01193A  0E01               	movlw	1
 16280   01193C  240B               	addwf	(btemp+10)^0,w,c
 16281   01193E  6ED9               	movwf	fsr2l,c
 16282   011940  0E00               	movlw	0
 16283   011942  200C               	addwfc	(btemp+11)^0,w,c
 16284   011944  6EDA               	movwf	fsr2h,c
 16285                           
 16286                           ;stkvar	_ciCon @ sp[(-4)+0]
 16287   011946  0EFE               	movlw	254
 16288   011948  24E1               	addwf	fsr1l,w,c
 16289   01194A  6EE9               	movwf	fsr0l,c
 16290   01194C  0EFF               	movlw	255
 16291   01194E  20E2               	addwfc	fsr1h,w,c
 16292   011950  6EEA               	movwf	fsr0h,c
 16293   011952  98EF               	bcf	indf0,4,c
 16294   011954  AEDF               	btfss	indf2,7,c
 16295   011956  EFAE  F08C         	goto	u2455
 16296   01195A  88EF               	bsf	indf0,4,c
 16297   01195C                     u2455:
 16298   01195C                     
 16299                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16300                           ;stkvar	_config @ sp[(-4)+-2]
 16301   01195C  0EFA               	movlw	-6
 16302   01195E  CFE3 F00B          	movff	plusw1,btemp+10
 16303   011962  0EFB               	movlw	-5
 16304   011964  CFE3 F00C          	movff	plusw1,btemp+11
 16305   011968  0E02               	movlw	2
 16306   01196A  240B               	addwf	(btemp+10)^0,w,c
 16307   01196C  6ED9               	movwf	fsr2l,c
 16308   01196E  0E00               	movlw	0
 16309   011970  200C               	addwfc	(btemp+11)^0,w,c
 16310   011972  6EDA               	movwf	fsr2h,c
 16311   011974  50DF               	movf	223,w,c
 16312   011976  0B0F               	andlw	15
 16313   011978  6E0C               	movwf	(btemp+11)^0,c
 16314                           
 16315                           ;stkvar	_ciCon @ sp[(-4)+0]
 16316   01197A  0EFF               	movlw	255
 16317   01197C  24E1               	addwf	fsr1l,w,c
 16318   01197E  6ED9               	movwf	fsr2l,c
 16319   011980  0EFF               	movlw	255
 16320   011982  20E2               	addwfc	fsr1h,w,c
 16321   011984  6EDA               	movwf	fsr2h,c
 16322   011986  3A0C               	swapf	(btemp+11)^0,f,c
 16323   011988  50DF               	movf	223,w,c
 16324   01198A  180C               	xorwf	(btemp+11)^0,w,c
 16325   01198C  0B0F               	andlw	-241
 16326   01198E  180C               	xorwf	(btemp+11)^0,w,c
 16327   011990  6EDF               	movwf	223,c
 16328   011992                     
 16329                           ;stkvar	_ciCon @ sp[(-4)+0]
 16330   011992  0EFC               	movlw	-4
 16331   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16332   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16333   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16334   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16335   0119A4  0E00               	movlw	0
 16336   0119A6  6EE6               	movwf	postinc1,c
 16337   0119A8  0E00               	movlw	0
 16338   0119AA  6EE6               	movwf	postinc1,c
 16339   0119AC  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16340   0119B0                     
 16341                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16342   0119B0  0EFA               	movlw	250
 16343   0119B2  26E1               	addwf	fsr1l,f,c
 16344   0119B4  0EFF               	movlw	255
 16345   0119B6  22E2               	addwfc	fsr1h,f,c
 16346   0119B8  0012               	return		;funcret
 16347   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16348                           	callstack 0
 16349                           
 16350 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16351 ;; Defined at:
 16352 ;;		line 2825 in file "can/can.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  bitTime         1  [STACK] enum E5604
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16357 ;;  spiTransferE    1    0        char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;                  1  [STACK] char 
 16360 ;; Registers used:
 16361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16371 ;;Total ram usage:        0 bytes
 16372 ;; Hardware stack levels used: 1
 16373 ;; Hardware stack levels required when called: 9
 16374 ;; This function calls:
 16375 ;;		_DRV_CANFDSPI_WriteWord
 16376 ;; This function is called by:
 16377 ;;		_CanInit
 16378 ;; This function uses a reentrant model
 16379 ;;
 16380                           
 16381                           	psect	text66
 16382   011C18                     __ptext66:
 16383                           	callstack 0
 16384   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16385                           	callstack 0
 16386                           
 16387                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16388   011C18  52E6               	movf	postinc1,f,c
 16389   011C1A  52E6               	movf	postinc1,f,c
 16390   011C1C  52E6               	movf	postinc1,f,c
 16391   011C1E  52E6               	movf	postinc1,f,c
 16392   011C20                     
 16393                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16394   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16395   011C22  6EF6               	movwf	tblptrl,c
 16396   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16397   011C26  6EF7               	movwf	tblptrh,c
 16398   011C28                     	if	0	;tblptru may be non-zero
 16399   011C28                     	endif
 16400   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16401   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16402   011C2A  6EF8               	movwf	tblptru,c
 16403   011C2C                     	endif
 16404   011C2C  0009               	tblrd		*+
 16405   011C2E  CFF5 F009          	movff	tablat,btemp+8
 16406   011C32  0009               	tblrd		*+
 16407   011C34  CFF5 F00A          	movff	tablat,btemp+9
 16408   011C38  0009               	tblrd		*+
 16409   011C3A  CFF5 F00B          	movff	tablat,btemp+10
 16410   011C3E  0009               	tblrd		*+
 16411   011C40  CFF5 F00C          	movff	tablat,btemp+11
 16412                           
 16413                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16414   011C44  0EFC               	movlw	-4
 16415   011C46  C009  FFE3         	movff	btemp+8,plusw1
 16416   011C4A  0EFD               	movlw	-3
 16417   011C4C  C00A  FFE3         	movff	btemp+9,plusw1
 16418   011C50  0EFE               	movlw	-2
 16419   011C52  C00B  FFE3         	movff	btemp+10,plusw1
 16420   011C56  0EFF               	movlw	-1
 16421   011C58  C00C  FFE3         	movff	btemp+11,plusw1
 16422                           
 16423                           ;can/can.c: 2834:     switch (bitTime) {
 16424   011C5C  EFC8  F08E         	goto	l4718
 16425   011C60                     l665:
 16426   011C60                     l4698:
 16427                           
 16428                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16429                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16430   011C60  0EFF               	movlw	255
 16431   011C62  24E1               	addwf	fsr1l,w,c
 16432   011C64  6ED9               	movwf	fsr2l,c
 16433   011C66  0EFF               	movlw	255
 16434   011C68  20E2               	addwfc	fsr1h,w,c
 16435   011C6A  6EDA               	movwf	fsr2h,c
 16436   011C6C  6ADF               	clrf	indf2,c
 16437                           
 16438                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16439                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16440   011C6E  0EFE               	movlw	254
 16441   011C70  24E1               	addwf	fsr1l,w,c
 16442   011C72  6ED9               	movwf	fsr2l,c
 16443   011C74  0EFF               	movlw	255
 16444   011C76  20E2               	addwfc	fsr1h,w,c
 16445   011C78  6EDA               	movwf	fsr2h,c
 16446   011C7A  0E3E               	movlw	62
 16447   011C7C  6EDF               	movwf	indf2,c
 16448                           
 16449                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16450                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16451   011C7E  0EFD               	movlw	253
 16452   011C80  24E1               	addwf	fsr1l,w,c
 16453   011C82  6ED9               	movwf	fsr2l,c
 16454   011C84  0EFF               	movlw	255
 16455   011C86  20E2               	addwfc	fsr1h,w,c
 16456   011C88  6EDA               	movwf	fsr2h,c
 16457   011C8A  50DF               	movf	223,w,c
 16458   011C8C  0B80               	andlw	-128
 16459   011C8E  090F               	iorlw	15
 16460   011C90  6EDF               	movwf	223,c
 16461   011C92                     
 16462                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16463                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16464   011C92  50E1               	movf	fsr1l,w,c
 16465   011C94  0FFC               	addlw	-4
 16466   011C96  6ED9               	movwf	fsr2l,c
 16467   011C98  50E2               	movf	fsr1h,w,c
 16468   011C9A  6EDA               	movwf	fsr2h,c
 16469   011C9C  0EFF               	movlw	255
 16470   011C9E  22DA               	addwfc	fsr2h,f,c
 16471   011CA0  50DF               	movf	223,w,c
 16472   011CA2  0B80               	andlw	-128
 16473   011CA4  090F               	iorlw	15
 16474   011CA6  6EDF               	movwf	223,c
 16475                           
 16476                           ;can/can.c: 2848:             break;
 16477   011CA8  EF1E  F08F         	goto	l4720
 16478   011CAC                     l674:
 16479   011CAC                     l4702:
 16480                           
 16481                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16482                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16483   011CAC  0EFF               	movlw	255
 16484   011CAE  24E1               	addwf	fsr1l,w,c
 16485   011CB0  6ED9               	movwf	fsr2l,c
 16486   011CB2  0EFF               	movlw	255
 16487   011CB4  20E2               	addwfc	fsr1h,w,c
 16488   011CB6  6EDA               	movwf	fsr2h,c
 16489   011CB8  6ADF               	clrf	indf2,c
 16490                           
 16491                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 16492                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16493   011CBA  0EFE               	movlw	254
 16494   011CBC  24E1               	addwf	fsr1l,w,c
 16495   011CBE  6ED9               	movwf	fsr2l,c
 16496   011CC0  0EFF               	movlw	255
 16497   011CC2  20E2               	addwfc	fsr1h,w,c
 16498   011CC4  6EDA               	movwf	fsr2h,c
 16499   011CC6  0E7E               	movlw	126
 16500   011CC8  6EDF               	movwf	indf2,c
 16501                           
 16502                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 16503                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16504   011CCA  0EFD               	movlw	253
 16505   011CCC  24E1               	addwf	fsr1l,w,c
 16506   011CCE  6ED9               	movwf	fsr2l,c
 16507   011CD0  0EFF               	movlw	255
 16508   011CD2  20E2               	addwfc	fsr1h,w,c
 16509   011CD4  6EDA               	movwf	fsr2h,c
 16510   011CD6  50DF               	movf	223,w,c
 16511   011CD8  0B80               	andlw	-128
 16512   011CDA  091F               	iorlw	31
 16513   011CDC  6EDF               	movwf	223,c
 16514   011CDE                     
 16515                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 16516                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16517   011CDE  50E1               	movf	fsr1l,w,c
 16518   011CE0  0FFC               	addlw	-4
 16519   011CE2  6ED9               	movwf	fsr2l,c
 16520   011CE4  50E2               	movf	fsr1h,w,c
 16521   011CE6  6EDA               	movwf	fsr2h,c
 16522   011CE8  0EFF               	movlw	255
 16523   011CEA  22DA               	addwfc	fsr2h,f,c
 16524   011CEC  50DF               	movf	223,w,c
 16525   011CEE  0B80               	andlw	-128
 16526   011CF0  091F               	iorlw	31
 16527   011CF2  6EDF               	movwf	223,c
 16528                           
 16529                           ;can/can.c: 2862:             break;
 16530   011CF4  EF1E  F08F         	goto	l4720
 16531   011CF8                     l4706:
 16532                           
 16533                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 16534                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16535   011CF8  0EFF               	movlw	255
 16536   011CFA  24E1               	addwf	fsr1l,w,c
 16537   011CFC  6ED9               	movwf	fsr2l,c
 16538   011CFE  0EFF               	movlw	255
 16539   011D00  20E2               	addwfc	fsr1h,w,c
 16540   011D02  6EDA               	movwf	fsr2h,c
 16541   011D04  6ADF               	clrf	indf2,c
 16542                           
 16543                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 16544                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16545   011D06  0EFE               	movlw	254
 16546   011D08  24E1               	addwf	fsr1l,w,c
 16547   011D0A  6ED9               	movwf	fsr2l,c
 16548   011D0C  0EFF               	movlw	255
 16549   011D0E  20E2               	addwfc	fsr1h,w,c
 16550   011D10  6EDA               	movwf	fsr2h,c
 16551   011D12  0E1E               	movlw	30
 16552   011D14  6EDF               	movwf	indf2,c
 16553                           
 16554                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 16555                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16556   011D16  0EFD               	movlw	253
 16557   011D18  24E1               	addwf	fsr1l,w,c
 16558   011D1A  6ED9               	movwf	fsr2l,c
 16559   011D1C  0EFF               	movlw	255
 16560   011D1E  20E2               	addwfc	fsr1h,w,c
 16561   011D20  6EDA               	movwf	fsr2h,c
 16562   011D22  50DF               	movf	223,w,c
 16563   011D24  0B80               	andlw	-128
 16564   011D26  0907               	iorlw	7
 16565   011D28  6EDF               	movwf	223,c
 16566   011D2A                     
 16567                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 16568                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16569   011D2A  50E1               	movf	fsr1l,w,c
 16570   011D2C  0FFC               	addlw	-4
 16571   011D2E  6ED9               	movwf	fsr2l,c
 16572   011D30  50E2               	movf	fsr1h,w,c
 16573   011D32  6EDA               	movwf	fsr2h,c
 16574   011D34  0EFF               	movlw	255
 16575   011D36  22DA               	addwfc	fsr2h,f,c
 16576   011D38  50DF               	movf	223,w,c
 16577   011D3A  0B80               	andlw	-128
 16578   011D3C  0907               	iorlw	7
 16579   011D3E  6EDF               	movwf	223,c
 16580                           
 16581                           ;can/can.c: 2870:             break;
 16582   011D40  EF1E  F08F         	goto	l4720
 16583   011D44                     l4710:
 16584                           
 16585                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 16586                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16587   011D44  0EFF               	movlw	255
 16588   011D46  24E1               	addwf	fsr1l,w,c
 16589   011D48  6ED9               	movwf	fsr2l,c
 16590   011D4A  0EFF               	movlw	255
 16591   011D4C  20E2               	addwfc	fsr1h,w,c
 16592   011D4E  6EDA               	movwf	fsr2h,c
 16593   011D50  6ADF               	clrf	indf2,c
 16594                           
 16595                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 16596                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16597   011D52  0EFE               	movlw	254
 16598   011D54  24E1               	addwf	fsr1l,w,c
 16599   011D56  6ED9               	movwf	fsr2l,c
 16600   011D58  0EFF               	movlw	255
 16601   011D5A  20E2               	addwfc	fsr1h,w,c
 16602   011D5C  6EDA               	movwf	fsr2h,c
 16603   011D5E  0EFE               	movlw	254
 16604   011D60  6EDF               	movwf	indf2,c
 16605                           
 16606                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 16607                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16608   011D62  0EFD               	movlw	253
 16609   011D64  24E1               	addwf	fsr1l,w,c
 16610   011D66  6ED9               	movwf	fsr2l,c
 16611   011D68  0EFF               	movlw	255
 16612   011D6A  20E2               	addwfc	fsr1h,w,c
 16613   011D6C  6EDA               	movwf	fsr2h,c
 16614   011D6E  50DF               	movf	223,w,c
 16615   011D70  0B80               	andlw	-128
 16616   011D72  093F               	iorlw	63
 16617   011D74  6EDF               	movwf	223,c
 16618   011D76                     
 16619                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 16620                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16621   011D76  50E1               	movf	fsr1l,w,c
 16622   011D78  0FFC               	addlw	-4
 16623   011D7A  6ED9               	movwf	fsr2l,c
 16624   011D7C  50E2               	movf	fsr1h,w,c
 16625   011D7E  6EDA               	movwf	fsr2h,c
 16626   011D80  0EFF               	movlw	255
 16627   011D82  22DA               	addwfc	fsr2h,f,c
 16628   011D84  50DF               	movf	223,w,c
 16629   011D86  0B80               	andlw	-128
 16630   011D88  093F               	iorlw	63
 16631   011D8A  6EDF               	movwf	223,c
 16632                           
 16633                           ;can/can.c: 2877:             break;
 16634   011D8C  EF1E  F08F         	goto	l4720
 16635   011D90                     l4718:
 16636                           
 16637                           ;stkvar	_bitTime @ sp[(-4)+-1]
 16638   011D90  0EFB               	movlw	-5
 16639   011D92  50E3               	movf	plusw1,w,c
 16640   011D94  6E0B               	movwf	(btemp+10)^0,c
 16641   011D96  6A0C               	clrf	(btemp+11)^0,c
 16642                           
 16643                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16644                           ; Switch size 1, requested type "simple"
 16645                           ; Number of cases is 1, Range of values is 0 to 0
 16646                           ; switch strategies available:
 16647                           ; Name         Instructions Cycles
 16648                           ; simple_byte            4     3 (average)
 16649                           ;	Chosen strategy is simple_byte
 16650   011D98  500C               	movf	(btemp+11)^0,w,c
 16651   011D9A  0A00               	xorlw	0	; case 0
 16652   011D9C  B4D8               	btfsc	status,2,c
 16653   011D9E  EFD3  F08E         	goto	l5590
 16654   011DA2  EF2D  F08F         	goto	l682
 16655   011DA6                     l5590:
 16656                           
 16657                           ; Switch size 1, requested type "simple"
 16658                           ; Number of cases is 18, Range of values is 0 to 17
 16659                           ; switch strategies available:
 16660                           ; Name         Instructions Cycles
 16661                           ; simple_byte           55    28 (average)
 16662                           ;	Chosen strategy is simple_byte
 16663   011DA6  500B               	movf	(btemp+10)^0,w,c
 16664   011DA8  0A00               	xorlw	0	; case 0
 16665   011DAA  B4D8               	btfsc	status,2,c
 16666   011DAC  EF30  F08E         	goto	l665
 16667   011DB0  0A01               	xorlw	1	; case 1
 16668   011DB2  B4D8               	btfsc	status,2,c
 16669   011DB4  EF30  F08E         	goto	l4698
 16670   011DB8  0A03               	xorlw	3	; case 2
 16671   011DBA  B4D8               	btfsc	status,2,c
 16672   011DBC  EF30  F08E         	goto	l4698
 16673   011DC0  0A01               	xorlw	1	; case 3
 16674   011DC2  B4D8               	btfsc	status,2,c
 16675   011DC4  EF30  F08E         	goto	l4698
 16676   011DC8  0A07               	xorlw	7	; case 4
 16677   011DCA  B4D8               	btfsc	status,2,c
 16678   011DCC  EF30  F08E         	goto	l4698
 16679   011DD0  0A01               	xorlw	1	; case 5
 16680   011DD2  B4D8               	btfsc	status,2,c
 16681   011DD4  EF30  F08E         	goto	l4698
 16682   011DD8  0A03               	xorlw	3	; case 6
 16683   011DDA  B4D8               	btfsc	status,2,c
 16684   011DDC  EF30  F08E         	goto	l4698
 16685   011DE0  0A01               	xorlw	1	; case 7
 16686   011DE2  B4D8               	btfsc	status,2,c
 16687   011DE4  EF30  F08E         	goto	l4698
 16688   011DE8  0A0F               	xorlw	15	; case 8
 16689   011DEA  B4D8               	btfsc	status,2,c
 16690   011DEC  EF56  F08E         	goto	l674
 16691   011DF0  0A01               	xorlw	1	; case 9
 16692   011DF2  B4D8               	btfsc	status,2,c
 16693   011DF4  EF56  F08E         	goto	l4702
 16694   011DF8  0A03               	xorlw	3	; case 10
 16695   011DFA  B4D8               	btfsc	status,2,c
 16696   011DFC  EF56  F08E         	goto	l4702
 16697   011E00  0A01               	xorlw	1	; case 11
 16698   011E02  B4D8               	btfsc	status,2,c
 16699   011E04  EF56  F08E         	goto	l4702
 16700   011E08  0A07               	xorlw	7	; case 12
 16701   011E0A  B4D8               	btfsc	status,2,c
 16702   011E0C  EF56  F08E         	goto	l4702
 16703   011E10  0A01               	xorlw	1	; case 13
 16704   011E12  B4D8               	btfsc	status,2,c
 16705   011E14  EF56  F08E         	goto	l4702
 16706   011E18  0A03               	xorlw	3	; case 14
 16707   011E1A  B4D8               	btfsc	status,2,c
 16708   011E1C  EF56  F08E         	goto	l4702
 16709   011E20  0A01               	xorlw	1	; case 15
 16710   011E22  B4D8               	btfsc	status,2,c
 16711   011E24  EF7C  F08E         	goto	l4706
 16712   011E28  0A1F               	xorlw	31	; case 16
 16713   011E2A  B4D8               	btfsc	status,2,c
 16714   011E2C  EF7C  F08E         	goto	l4706
 16715   011E30  0A01               	xorlw	1	; case 17
 16716   011E32  B4D8               	btfsc	status,2,c
 16717   011E34  EFA2  F08E         	goto	l4710
 16718   011E38  EF2D  F08F         	goto	l682
 16719   011E3C                     l4720:
 16720                           
 16721                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16722   011E3C  0EFC               	movlw	-4
 16723   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16724   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16725   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16726   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16727   011E4E  0E04               	movlw	4
 16728   011E50  6EE6               	movwf	postinc1,c
 16729   011E52  0E00               	movlw	0
 16730   011E54  6EE6               	movwf	postinc1,c
 16731   011E56  EC9C  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16732   011E5A                     l682:
 16733                           
 16734                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16735   011E5A  0EFB               	movlw	251
 16736   011E5C  26E1               	addwf	fsr1l,f,c
 16737   011E5E  0EFF               	movlw	255
 16738   011E60  22E2               	addwfc	fsr1h,f,c
 16739   011E62  0012               	return		;funcret
 16740   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16741                           	callstack 0
 16742                           
 16743 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16744 ;; Defined at:
 16745 ;;		line 310 in file "can/can.c"
 16746 ;; Parameters:    Size  Location     Type
 16747 ;;  address         2  [STACK] unsigned short 
 16748 ;;  txd             4  [STACK] unsigned long 
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;  spiTransferS    2  [STACK] unsigned short 
 16751 ;;  i               1  [STACK] unsigned char 
 16752 ;;  spiTransferE    1  [STACK] char 
 16753 ;; Return value:  Size  Location     Type
 16754 ;;                  1  [STACK] char 
 16755 ;; Registers used:
 16756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16757 ;; Tracked objects:
 16758 ;;		On entry : 0/0
 16759 ;;		On exit  : 0/0
 16760 ;;		Unchanged: 0/0
 16761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16766 ;;Total ram usage:        0 bytes
 16767 ;; Hardware stack levels used: 1
 16768 ;; Hardware stack levels required when called: 8
 16769 ;; This function calls:
 16770 ;;		_SpiTransfer
 16771 ;; This function is called by:
 16772 ;;		_DRV_CANFDSPI_Configure
 16773 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16774 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16775 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16776 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16777 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16778 ;;		_DRV_CANFDSPI_TefConfigure
 16779 ;;		_DRV_CANFDSPI_TimeStampSet
 16780 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16781 ;; This function uses a reentrant model
 16782 ;;
 16783                           
 16784                           	psect	text67
 16785   013738                     __ptext67:
 16786                           	callstack 0
 16787   013738                     _DRV_CANFDSPI_WriteWord:
 16788                           	callstack 0
 16789                           
 16790                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16791   013738  52E6               	movf	postinc1,f,c
 16792   01373A  52E6               	movf	postinc1,f,c
 16793   01373C  52E6               	movf	postinc1,f,c
 16794   01373E  52E6               	movf	postinc1,f,c
 16795   013740                     
 16796                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 16797   013740  0E06               	movlw	6
 16798   013742  6E0B               	movwf	(btemp+10)^0,c
 16799   013744  0E00               	movlw	0
 16800   013746  6E0C               	movwf	(btemp+11)^0,c
 16801                           
 16802                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16803   013748  0EFC               	movlw	-4
 16804   01374A  C00B  FFE3         	movff	btemp+10,plusw1
 16805   01374E  0EFD               	movlw	-3
 16806   013750  C00C  FFE3         	movff	btemp+11,plusw1
 16807   013754                     
 16808                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 16809                           ;stkvar	_address @ sp[(-4)+-2]
 16810   013754  0EFB               	movlw	251
 16811   013756  24E1               	addwf	fsr1l,w,c
 16812   013758  6ED9               	movwf	fsr2l,c
 16813   01375A  0EFF               	movlw	255
 16814   01375C  20E2               	addwfc	fsr1h,w,c
 16815   01375E  6EDA               	movwf	fsr2h,c
 16816   013760  50DF               	movf	indf2,w,c
 16817   013762  0B0F               	andlw	15
 16818   013764  0F20               	addlw	32
 16819   013766  0101               	movlb	1	; () banked
 16820   013768  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 16821   01376A                     
 16822                           ; BSR set to: 1
 16823                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 16824                           ;stkvar	_address @ sp[(-4)+-2]
 16825   01376A  0EFA               	movlw	-6
 16826   01376C  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 16827   013770                     
 16828                           ; BSR set to: 1
 16829                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 16830                           ;stkvar	_i @ sp[(-4)+2]
 16831   013770  0EFE               	movlw	-2
 16832   013772  6AE3               	clrf	plusw1,c
 16833   013774                     l4574:
 16834                           
 16835                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 16836                           ;stkvar	_i @ sp[(-4)+2]
 16837   013774  0EFE               	movlw	-2
 16838   013776  50E3               	movf	plusw1,w,c
 16839   013778  6E0B               	movwf	(btemp+10)^0,c
 16840   01377A  6A0C               	clrf	(btemp+11)^0,c
 16841   01377C  0E02               	movlw	low (_spiTransmitBuffer+2)
 16842   01377E  240B               	addwf	(btemp+10)^0,w,c
 16843   013780  6ED9               	movwf	fsr2l,c
 16844   013782  0E01               	movlw	high (_spiTransmitBuffer+2)
 16845   013784  200C               	addwfc	(btemp+11)^0,w,c
 16846   013786  6EDA               	movwf	fsr2h,c
 16847                           
 16848                           ;stkvar	_txd @ sp[(-4)+-6]
 16849   013788  0EF6               	movlw	-10
 16850   01378A  CFE3 F009          	movff	plusw1,btemp+8
 16851   01378E  0EF7               	movlw	-9
 16852   013790  CFE3 F00A          	movff	plusw1,btemp+9
 16853   013794  0EF8               	movlw	-8
 16854   013796  CFE3 F00B          	movff	plusw1,btemp+10
 16855   01379A  0EF9               	movlw	-7
 16856   01379C  CFE3 F00C          	movff	plusw1,btemp+11
 16857                           
 16858                           ;stkvar	_i @ sp[(-4)+2]
 16859   0137A0  0EFE               	movlw	-2
 16860   0137A2  50E3               	movf	plusw1,w,c
 16861   0137A4  0D08               	mullw	8
 16862   0137A6  50F3               	movf	243,w,c
 16863   0137A8  2AE8               	incf	wreg,f,c
 16864   0137AA  EFDC  F09B         	goto	u2220
 16865   0137AE                     u2225:
 16866   0137AE  90D8               	bcf	status,0,c
 16867   0137B0  320C               	rrcf	(btemp+11)^0,f,c
 16868   0137B2  320B               	rrcf	(btemp+10)^0,f,c
 16869   0137B4  320A               	rrcf	(btemp+9)^0,f,c
 16870   0137B6  3209               	rrcf	(btemp+8)^0,f,c
 16871   0137B8                     u2220:
 16872   0137B8  2EE8               	decfsz	wreg,f,c
 16873   0137BA  EFD7  F09B         	goto	u2225
 16874   0137BE  5009               	movf	(btemp+8)^0,w,c
 16875   0137C0  6EDF               	movwf	indf2,c
 16876   0137C2                     
 16877                           ;can/can.c: 324:     }
 16878                           ;stkvar	_i @ sp[(-4)+2]
 16879   0137C2  0EFE               	movlw	-2
 16880   0137C4  2AE3               	incf	plusw1,f,c
 16881   0137C6                     
 16882                           ;stkvar	_i @ sp[(-4)+2]
 16883   0137C6  0EFE               	movlw	-2
 16884   0137C8  CFE3 F001          	movff	plusw1,btemp
 16885   0137CC  0E03               	movlw	3
 16886   0137CE  6401               	cpfsgt	btemp^0,c
 16887   0137D0  EFEC  F09B         	goto	u2231
 16888   0137D4  EFEE  F09B         	goto	u2230
 16889   0137D8                     u2231:
 16890   0137D8  EFBA  F09B         	goto	l4574
 16891   0137DC                     u2230:
 16892   0137DC                     
 16893                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16894                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16895   0137DC  0EFC               	movlw	-4
 16896   0137DE  CFE3 FFE6          	movff	plusw1,postinc1
 16897   0137E2  CFE3 FFE6          	movff	plusw1,postinc1
 16898   0137E6  0E00               	movlw	low _spiReceiveBuffer
 16899   0137E8  6EE6               	movwf	postinc1,c
 16900   0137EA  0E02               	movlw	high _spiReceiveBuffer
 16901   0137EC  6EE6               	movwf	postinc1,c
 16902   0137EE  0E00               	movlw	low _spiTransmitBuffer
 16903   0137F0  6EE6               	movwf	postinc1,c
 16904   0137F2  0E01               	movlw	high _spiTransmitBuffer
 16905   0137F4  6EE6               	movwf	postinc1,c
 16906   0137F6  EC39  F09D         	call	_SpiTransfer	;wreg free
 16907                           
 16908                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16909   0137FA  0EFF               	movlw	-1
 16910   0137FC  C001  FFE3         	movff	btemp,plusw1
 16911   013800                     
 16912                           ;can/can.c: 328:     return spiTransferError;
 16913                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16914   013800  0EFF               	movlw	-1
 16915   013802  CFE3 F001          	movff	plusw1,btemp
 16916   013806                     
 16917                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 16918   013806  0EF6               	movlw	246
 16919   013808  26E1               	addwf	fsr1l,f,c
 16920   01380A  0EFF               	movlw	255
 16921   01380C  22E2               	addwfc	fsr1h,f,c
 16922   01380E  0012               	return		;funcret
 16923   013810                     __end_of_DRV_CANFDSPI_WriteWord:
 16924                           	callstack 0
 16925                           
 16926 ;; *************** function _SpiTransfer *****************
 16927 ;; Defined at:
 16928 ;;		line 132 in file "can/can.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;  txPtr           2  [STACK] PTR unsigned char 
 16931 ;;		 -> spiTransmitBuffer(200), 
 16932 ;;  rxPtr           2  [STACK] PTR unsigned char 
 16933 ;;		 -> spiReceiveBuffer(200), 
 16934 ;;  size            2  [STACK] unsigned short 
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;  dummy           1  [STACK] volatile unsigned char 
 16937 ;; Return value:  Size  Location     Type
 16938 ;;                  1  [STACK] char 
 16939 ;; Registers used:
 16940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/1
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16950 ;;Total ram usage:        0 bytes
 16951 ;; Hardware stack levels used: 1
 16952 ;; Hardware stack levels required when called: 7
 16953 ;; This function calls:
 16954 ;;		Nothing
 16955 ;; This function is called by:
 16956 ;;		_DRV_CANFDSPI_Reset
 16957 ;;		_DRV_CANFDSPI_ReadByte
 16958 ;;		_DRV_CANFDSPI_WriteByte
 16959 ;;		_DRV_CANFDSPI_WriteWord
 16960 ;;		_DRV_CANFDSPI_WriteHalfWord
 16961 ;;		_DRV_CANFDSPI_ReadByteArray
 16962 ;;		_DRV_CANFDSPI_WriteByteArray
 16963 ;;		_DRV_CANFDSPI_ReadWordArray
 16964 ;; This function uses a reentrant model
 16965 ;;
 16966                           
 16967                           	psect	text68
 16968   013A72                     __ptext68:
 16969                           	callstack 0
 16970   013A72                     _SpiTransfer:
 16971                           	callstack 0
 16972                           
 16973                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16974   013A72  52E6               	movf	postinc1,f,c
 16975   013A74                     
 16976                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 16977   013A74  988F               	bcf	143,4,c	;volatile
 16978                           
 16979                           ;can/can.c: 136:   while(size > 0)
 16980   013A76  EF86  F09D         	goto	l3940
 16981   013A7A                     l145:
 16982                           
 16983                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 16984   013A7A  9064               	bcf	100,0,c	;volatile
 16985   013A7C                     
 16986                           ;can/can.c: 139:     dummy = SSP2BUF;
 16987                           ;stkvar	_dummy @ sp[(-1)+0]
 16988   013A7C  0EFF               	movlw	-1
 16989   013A7E  CF66 FFE3          	movff	3942,plusw1	;volatile
 16990   013A82                     
 16991                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 16992                           ;stkvar	_txPtr @ sp[(-1)+-2]
 16993   013A82  0EFD               	movlw	-3
 16994   013A84  CFE3 FFD9          	movff	plusw1,fsr2l
 16995   013A88  0EFE               	movlw	-2
 16996   013A8A  CFE3 FFDA          	movff	plusw1,fsr2h
 16997   013A8E  50DF               	movf	indf2,w,c
 16998   013A90  6E66               	movwf	102,c	;volatile
 16999   013A92                     l146:
 17000   013A92  A064               	btfss	100,0,c	;volatile
 17001   013A94  EF4E  F09D         	goto	u1581
 17002   013A98  EF50  F09D         	goto	u1580
 17003   013A9C                     u1581:
 17004   013A9C  EF49  F09D         	goto	l146
 17005   013AA0                     u1580:
 17006   013AA0                     
 17007                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 17008                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17009   013AA0  0EFB               	movlw	-5
 17010   013AA2  CFE3 FFD9          	movff	plusw1,fsr2l
 17011   013AA6  0EFC               	movlw	-4
 17012   013AA8  CFE3 FFDA          	movff	plusw1,fsr2h
 17013   013AAC  CF66 FFDF          	movff	3942,indf2	;volatile
 17014   013AB0                     
 17015                           ;can/can.c: 143:     txPtr++;
 17016                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17017   013AB0  0EFD               	movlw	-3
 17018   013AB2  50E3               	movf	plusw1,w,c
 17019   013AB4  0F01               	addlw	1
 17020   013AB6  6E01               	movwf	btemp^0,c
 17021   013AB8  0EFD               	movlw	-3
 17022   013ABA  C001  FFE3         	movff	btemp,plusw1
 17023   013ABE  6A01               	clrf	btemp^0,c
 17024   013AC0  0EFE               	movlw	-2
 17025   013AC2  50E3               	movf	plusw1,w,c
 17026   013AC4  2001               	addwfc	btemp^0,w,c
 17027   013AC6  6E01               	movwf	btemp^0,c
 17028   013AC8  0EFE               	movlw	-2
 17029   013ACA  C001  FFE3         	movff	btemp,plusw1
 17030   013ACE                     
 17031                           ;can/can.c: 144:     rxPtr++;
 17032                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17033   013ACE  0EFB               	movlw	-5
 17034   013AD0  50E3               	movf	plusw1,w,c
 17035   013AD2  0F01               	addlw	1
 17036   013AD4  6E01               	movwf	btemp^0,c
 17037   013AD6  0EFB               	movlw	-5
 17038   013AD8  C001  FFE3         	movff	btemp,plusw1
 17039   013ADC  6A01               	clrf	btemp^0,c
 17040   013ADE  0EFC               	movlw	-4
 17041   013AE0  50E3               	movf	plusw1,w,c
 17042   013AE2  2001               	addwfc	btemp^0,w,c
 17043   013AE4  6E01               	movwf	btemp^0,c
 17044   013AE6  0EFC               	movlw	-4
 17045   013AE8  C001  FFE3         	movff	btemp,plusw1
 17046   013AEC                     
 17047                           ;can/can.c: 145:     size--;
 17048                           ;stkvar	_size @ sp[(-1)+-6]
 17049   013AEC  0EF9               	movlw	-7
 17050   013AEE  CFE3 F001          	movff	plusw1,btemp
 17051   013AF2  0E01               	movlw	1
 17052   013AF4  5E01               	subwf	btemp^0,f,c
 17053   013AF6  0EF9               	movlw	-7
 17054   013AF8  C001  FFE3         	movff	btemp,plusw1
 17055   013AFC  0EFA               	movlw	-6
 17056   013AFE  CFE3 F001          	movff	plusw1,btemp
 17057   013B02  0E00               	movlw	0
 17058   013B04  5A01               	subwfb	btemp^0,f,c
 17059   013B06  0EFA               	movlw	-6
 17060   013B08  C001  FFE3         	movff	btemp,plusw1
 17061   013B0C                     l3940:
 17062                           
 17063                           ;can/can.c: 136:   while(size > 0)
 17064                           ;stkvar	_size @ sp[(-1)+-6]
 17065   013B0C  0EF9               	movlw	-7
 17066   013B0E  CFE3 F001          	movff	plusw1,btemp
 17067   013B12  0EFA               	movlw	-6
 17068   013B14  50E3               	movf	plusw1,w,c
 17069   013B16  1001               	iorwf	btemp^0,w,c
 17070   013B18  A4D8               	btfss	status,2,c
 17071   013B1A  EF91  F09D         	goto	u1591
 17072   013B1E  EF93  F09D         	goto	u1590
 17073   013B22                     u1591:
 17074   013B22  EF3D  F09D         	goto	l145
 17075   013B26                     u1590:
 17076   013B26                     
 17077                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17078   013B26  888F               	bsf	143,4,c	;volatile
 17079   013B28                     
 17080                           ;can/can.c: 148:   return 0;
 17081   013B28  0E00               	movlw	0
 17082   013B2A  6E01               	movwf	btemp^0,c
 17083   013B2C                     
 17084                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17085   013B2C  0EF9               	movlw	249
 17086   013B2E  26E1               	addwf	fsr1l,f,c
 17087   013B30  0EFF               	movlw	255
 17088   013B32  22E2               	addwfc	fsr1h,f,c
 17089   013B34  0012               	return		;funcret
 17090   013B36                     __end_of_SpiTransfer:
 17091                           	callstack 0
 17092                           
 17093 ;; *************** function _INTERRUPT_InterruptManager *****************
 17094 ;; Defined at:
 17095 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17096 ;; Parameters:    Size  Location     Type
 17097 ;;		None
 17098 ;; Auto vars:     Size  Location     Type
 17099 ;;		None
 17100 ;; Return value:  Size  Location     Type
 17101 ;;                  1    wreg      void 
 17102 ;; Registers used:
 17103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17104 ;; Tracked objects:
 17105 ;;		On entry : 0/0
 17106 ;;		On exit  : 0/0
 17107 ;;		Unchanged: 0/0
 17108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17111 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17112 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17113 ;;Total ram usage:       16 bytes
 17114 ;; Hardware stack levels used: 1
 17115 ;; Hardware stack levels required when called: 6
 17116 ;; This function calls:
 17117 ;;		_TMR0_ISR
 17118 ;; This function is called by:
 17119 ;;		Interrupt level 2
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           	psect	intcode
 17124   000008                     __pintcode:
 17125                           	callstack 0
 17126   000008                     _INTERRUPT_InterruptManager:
 17127                           	callstack 16
 17128                           
 17129                           ;incstack = 0
 17130   000008  CFFA F040          	movff	pclath,??_INTERRUPT_InterruptManager
 17131   00000C  CFFB F041          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17132   000010  CFE9 F042          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17133   000014  CFEA F043          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17134   000018  CFE1 F044          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17135   00001C  CFE2 F045          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17136   000020  CFD9 F046          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17137   000024  CFDA F047          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17138   000028  CFF3 F048          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17139   00002C  CFF4 F049          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17140   000030  C001  F04A         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17141   000034  C002  F04B         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17142   000038  C009  F04C         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17143   00003C  C00A  F04D         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17144   000040  C00B  F04E         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17145   000044  C00C  F04F         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17146   000048  EE19  F031         	lfsr	1,___inthi_sp
 17147   00004C                     
 17148                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17149   00004C  AAF2               	btfss	242,5,c	;volatile
 17150   00004E  EF2B  F000         	goto	i2u303_41
 17151   000052  EF2D  F000         	goto	i2u303_40
 17152   000056                     i2u303_41:
 17153   000056  EF36  F000         	goto	i2l1039
 17154   00005A                     i2u303_40:
 17155   00005A  A4F2               	btfss	242,2,c	;volatile
 17156   00005C  EF32  F000         	goto	i2u304_41
 17157   000060  EF34  F000         	goto	i2u304_40
 17158   000064                     i2u304_41:
 17159   000064  EF36  F000         	goto	i2l1039
 17160   000068                     i2u304_40:
 17161   000068                     
 17162                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17163   000068  EC0F  F0A4         	call	_TMR0_ISR	;wreg free
 17164   00006C                     i2l1039:
 17165   00006C  C04F  F00C         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17166   000070  C04E  F00B         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17167   000074  C04D  F00A         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17168   000078  C04C  F009         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17169   00007C  C04B  F002         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17170   000080  C04A  F001         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17171   000084  C049  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17172   000088  C048  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17173   00008C  C047  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17174   000090  C046  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17175   000094  C045  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17176   000098  C044  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17177   00009C  C043  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17178   0000A0  C042  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17179   0000A4  C041  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17180   0000A8  C040  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17181   0000AC  0011               	retfie		f
 17182   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17183                           	callstack 0
 17184                           
 17185 ;; *************** function _TMR0_ISR *****************
 17186 ;; Defined at:
 17187 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17188 ;; Parameters:    Size  Location     Type
 17189 ;;		None
 17190 ;; Auto vars:     Size  Location     Type
 17191 ;;		None
 17192 ;; Return value:  Size  Location     Type
 17193 ;;                  1  [STACK] void 
 17194 ;; Registers used:
 17195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17196 ;; Tracked objects:
 17197 ;;		On entry : 0/0
 17198 ;;		On exit  : 0/0
 17199 ;;		Unchanged: 0/0
 17200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17205 ;;Total ram usage:        0 bytes
 17206 ;; Hardware stack levels used: 1
 17207 ;; Hardware stack levels required when called: 5
 17208 ;; This function calls:
 17209 ;;		_TMR0_CallBack
 17210 ;; This function is called by:
 17211 ;;		_INTERRUPT_InterruptManager
 17212 ;; This function uses a reentrant model
 17213 ;;
 17214                           
 17215                           	psect	text70
 17216   01481E                     __ptext70:
 17217                           	callstack 0
 17218   01481E                     _TMR0_ISR:
 17219                           	callstack 16
 17220   01481E                     
 17221                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17222   01481E  94F2               	bcf	242,2,c	;volatile
 17223                           
 17224                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17225   014820  C038  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17226                           
 17227                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17228   014824  C037  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17229   014828                     
 17230                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17231   014828  0E01               	movlw	1
 17232   01482A  0100               	movlb	0	; () banked
 17233   01482C  6F76               	movwf	(_carState+22)& (0+255),b
 17234   01482E                     
 17235                           ; BSR set to: 0
 17236                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17237   01482E  4A35               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17238   014830  2A36               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17239   014832  5035               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17240   014834  1036               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17241   014836  B4D8               	btfsc	status,2,c
 17242   014838  EF20  F0A4         	goto	u293_41
 17243   01483C  EF22  F0A4         	goto	u293_40
 17244   014840                     u293_41:
 17245   014840  EF26  F0A4         	goto	l1085
 17246   014844                     u293_40:
 17247   014844                     
 17248                           ; BSR set to: 0
 17249                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17250   014844  ECF4  F0A3         	call	_TMR0_CallBack	;wreg free
 17251   014848                     
 17252                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17253   014848  6A35               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17254   01484A  6A36               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17255   01484C                     l1085:
 17256                           
 17257                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17258   01484C  0012               	return		;funcret
 17259   01484E                     __end_of_TMR0_ISR:
 17260                           	callstack 0
 17261                           
 17262 ;; *************** function _TMR0_CallBack *****************
 17263 ;; Defined at:
 17264 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17265 ;; Parameters:    Size  Location     Type
 17266 ;;		None
 17267 ;; Auto vars:     Size  Location     Type
 17268 ;;		None
 17269 ;; Return value:  Size  Location     Type
 17270 ;;                  1  [STACK] void 
 17271 ;; Registers used:
 17272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17273 ;; Tracked objects:
 17274 ;;		On entry : 3F/0
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;Total ram usage:        0 bytes
 17283 ;; Hardware stack levels used: 1
 17284 ;; Hardware stack levels required when called: 4
 17285 ;; This function calls:
 17286 ;;		NULL
 17287 ;;		_TMR0_DefaultInterruptHandler
 17288 ;;		_XF_decrementAndQueueTimers
 17289 ;; This function is called by:
 17290 ;;		_TMR0_ISR
 17291 ;; This function uses a reentrant model
 17292 ;;
 17293                           
 17294                           	psect	text71
 17295   0147E8                     __ptext71:
 17296                           	callstack 0
 17297   0147E8                     _TMR0_CallBack:
 17298                           	callstack 16
 17299   0147E8                     
 17300                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17301   0147E8  0E01               	movlw	1
 17302   0147EA  0100               	movlb	0	; () banked
 17303   0147EC  6F75               	movwf	(_carState+21)& (0+255),b
 17304   0147EE                     
 17305                           ; BSR set to: 0
 17306                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17307   0147EE  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17308   0147F0  1051               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17309   0147F2  1052               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17310   0147F4  B4D8               	btfsc	status,2,c
 17311   0147F6  EFFF  F0A3         	goto	u273_41
 17312   0147FA  EF01  F0A4         	goto	u273_40
 17313   0147FE                     u273_41:
 17314   0147FE  EF0E  F0A4         	goto	l1089
 17315   014802                     u273_40:
 17316   014802                     
 17317                           ; BSR set to: 0
 17318                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17319   014802  D802               	call	u274_48
 17320   014804  EF0E  F0A4         	goto	u274_49
 17321   014808                     u274_48:
 17322   014808  0005               	push	
 17323   01480A  6EFA               	movwf	pclath,c
 17324   01480C  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17325   01480E  6EFD               	movwf	tosl,c
 17326   014810  5051               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17327   014812  6EFE               	movwf	tosh,c
 17328   014814  5052               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17329   014816  6EFF               	movwf	tosu,c
 17330   014818  50FA               	movf	pclath,w,c
 17331   01481A  0012               	return		;indir
 17332   01481C                     u274_49:
 17333   01481C                     l1089:
 17334                           
 17335                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17336   01481C  0012               	return		;funcret
 17337   01481E                     __end_of_TMR0_CallBack:
 17338                           	callstack 0
 17339                           
 17340 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17341 ;; Defined at:
 17342 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;		None
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;		None
 17347 ;; Return value:  Size  Location     Type
 17348 ;;                  1  [STACK] void 
 17349 ;; Registers used:
 17350 ;;		None
 17351 ;; Tracked objects:
 17352 ;;		On entry : 3F/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17360 ;;Total ram usage:        0 bytes
 17361 ;; Hardware stack levels used: 1
 17362 ;; This function calls:
 17363 ;;		Nothing
 17364 ;; This function is called by:
 17365 ;;		_TMR0_Initialize
 17366 ;;		_TMR0_CallBack
 17367 ;; This function uses a reentrant model
 17368 ;;
 17369                           
 17370                           	psect	text72
 17371   0149BC                     __ptext72:
 17372                           	callstack 0
 17373   0149BC                     _TMR0_DefaultInterruptHandler:
 17374                           	callstack 19
 17375   0149BC                     
 17376                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17377   0149BC  0012               	return		;funcret
 17378   0149BE                     __end_of_TMR0_DefaultInterruptHandler:
 17379                           	callstack 0
 17380                           
 17381 ;; *************** function _XF_decrementAndQueueTimers *****************
 17382 ;; Defined at:
 17383 ;;		line 217 in file "xf/xf.c"
 17384 ;; Parameters:    Size  Location     Type
 17385 ;;		None
 17386 ;; Auto vars:     Size  Location     Type
 17387 ;;  dummy           1  [STACK] unsigned char 
 17388 ;;  i               1  [STACK] unsigned char 
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  1  [STACK] void 
 17391 ;; Registers used:
 17392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17393 ;; Tracked objects:
 17394 ;;		On entry : 3F/0
 17395 ;;		On exit  : 0/0
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17402 ;;Total ram usage:        0 bytes
 17403 ;; Hardware stack levels used: 1
 17404 ;; Hardware stack levels required when called: 3
 17405 ;; This function calls:
 17406 ;;		_XF_pushEvent
 17407 ;;		_XF_unscheduleTimer
 17408 ;; This function is called by:
 17409 ;;		_main
 17410 ;;		_TMR0_CallBack
 17411 ;; This function uses a reentrant model
 17412 ;;
 17413                           
 17414                           	psect	text73
 17415   013462                     __ptext73:
 17416                           	callstack 0
 17417   013462                     _XF_decrementAndQueueTimers:
 17418                           	callstack 0
 17419                           
 17420                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17421   013462  52E6               	movf	postinc1,f,c
 17422   013464  52E6               	movf	postinc1,f,c
 17423   013466                     
 17424                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17425                           ;stkvar	_i @ sp[(-2)+1]
 17426   013466  0EFF               	movlw	-1
 17427   013468  6AE3               	clrf	plusw1,c
 17428   01346A                     l4622:
 17429                           
 17430                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17431                           ;stkvar	_i @ sp[(-2)+1]
 17432   01346A  0EFF               	movlw	-1
 17433   01346C  50E3               	movf	plusw1,w,c
 17434   01346E  0D08               	mullw	8
 17435   013470  0ECA               	movlw	low (_theXF+2)
 17436   013472  24F3               	addwf	243,w,c
 17437   013474  6ED9               	movwf	fsr2l,c
 17438   013476  0E02               	movlw	high (_theXF+2)
 17439   013478  20F4               	addwfc	prodh,w,c
 17440   01347A  6EDA               	movwf	fsr2h,c
 17441   01347C  50DF               	movf	indf2,w,c
 17442   01347E  B4D8               	btfsc	status,2,c
 17443   013480  EF44  F09A         	goto	u226_41
 17444   013484  EF46  F09A         	goto	u226_40
 17445   013488                     u226_41:
 17446   013488  EFA0  F09A         	goto	l4634
 17447   01348C                     u226_40:
 17448   01348C                     
 17449                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17450                           ;stkvar	_i @ sp[(-2)+1]
 17451   01348C  0EFF               	movlw	-1
 17452   01348E  50E3               	movf	plusw1,w,c
 17453   013490  0D08               	mullw	8
 17454   013492  0EC8               	movlw	low _theXF
 17455   013494  24F3               	addwf	243,w,c
 17456   013496  6ED9               	movwf	fsr2l,c
 17457   013498  0E02               	movlw	high _theXF
 17458   01349A  20F4               	addwfc	prodh,w,c
 17459   01349C  6EDA               	movwf	fsr2h,c
 17460   01349E  0E0A               	movlw	10
 17461   0134A0  5EDE               	subwf	postinc2,f,c
 17462   0134A2  0E00               	movlw	0
 17463   0134A4  5ADD               	subwfb	postdec2,f,c
 17464   0134A6                     
 17465                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17466                           ;stkvar	_i @ sp[(-2)+1]
 17467   0134A6  0EFF               	movlw	-1
 17468   0134A8  50E3               	movf	plusw1,w,c
 17469   0134AA  0D08               	mullw	8
 17470   0134AC  0EC8               	movlw	low _theXF
 17471   0134AE  24F3               	addwf	243,w,c
 17472   0134B0  6ED9               	movwf	fsr2l,c
 17473   0134B2  0E02               	movlw	high _theXF
 17474   0134B4  20F4               	addwfc	prodh,w,c
 17475   0134B6  6EDA               	movwf	fsr2h,c
 17476   0134B8  50DE               	movf	postinc2,w,c
 17477   0134BA  10DE               	iorwf	postinc2,w,c
 17478   0134BC  A4D8               	btfss	status,2,c
 17479   0134BE  EF63  F09A         	goto	u227_41
 17480   0134C2  EF65  F09A         	goto	u227_40
 17481   0134C6                     u227_41:
 17482   0134C6  EFA0  F09A         	goto	l4634
 17483   0134CA                     u227_40:
 17484   0134CA                     
 17485                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17486                           ;stkvar	_dummy @ sp[(-2)+0]
 17487   0134CA  0EFE               	movlw	254
 17488   0134CC  24E1               	addwf	fsr1l,w,c
 17489   0134CE  6E01               	movwf	btemp^0,c
 17490   0134D0  0EFF               	movlw	255
 17491   0134D2  20E2               	addwfc	fsr1h,w,c
 17492   0134D4  6E02               	movwf	(btemp+1)^0,c
 17493   0134D6  C001  FFE6         	movff	btemp,postinc1
 17494   0134DA  C002  FFE6         	movff	btemp+1,postinc1
 17495   0134DE  0E01               	movlw	1
 17496   0134E0  6EE6               	movwf	postinc1,c
 17497                           
 17498                           ;stkvar	_i @ sp[(-5)+1]
 17499   0134E2  0EFC               	movlw	-4
 17500   0134E4  50E3               	movf	plusw1,w,c
 17501   0134E6  0D08               	mullw	8
 17502   0134E8  0ECA               	movlw	low (_theXF+2)
 17503   0134EA  24F3               	addwf	243,w,c
 17504   0134EC  6ED9               	movwf	fsr2l,c
 17505   0134EE  0E02               	movlw	high (_theXF+2)
 17506   0134F0  20F4               	addwfc	prodh,w,c
 17507   0134F2  6EDA               	movwf	fsr2h,c
 17508   0134F4  0E06               	movlw	6
 17509   0134F6                     u228_41:
 17510   0134F6  CFDE FFE6          	movff	postinc2,postinc1
 17511   0134FA  2CE8               	decfsz	wreg,w,c
 17512   0134FC  EF7B  F09A         	goto	u228_41
 17513   013500  EC32  F095         	call	_XF_pushEvent	;wreg free
 17514   013504  0401               	decf	btemp^0,w,c
 17515   013506  A4D8               	btfss	status,2,c
 17516   013508  EF88  F09A         	goto	u229_41
 17517   01350C  EF8A  F09A         	goto	u229_40
 17518   013510                     u229_41:
 17519   013510  EF93  F09A         	goto	l4632
 17520   013514                     u229_40:
 17521   013514                     
 17522                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 17523   013514  0E01               	movlw	1
 17524   013516  6EE6               	movwf	postinc1,c
 17525                           
 17526                           ;stkvar	_i @ sp[(-3)+1]
 17527   013518  0EFE               	movlw	-2
 17528   01351A  50E3               	movf	plusw1,w,c
 17529   01351C  6EE6               	movwf	postinc1,c
 17530   01351E  ECFA  F0A2         	call	_XF_unscheduleTimer	;wreg free
 17531                           
 17532                           ;xf/xf.c: 231:                 }
 17533   013522  EFA0  F09A         	goto	l4634
 17534   013526                     l4632:
 17535                           
 17536                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 17537                           ;stkvar	_i @ sp[(-2)+1]
 17538   013526  0EFF               	movlw	-1
 17539   013528  50E3               	movf	plusw1,w,c
 17540   01352A  0D08               	mullw	8
 17541   01352C  0EC8               	movlw	low _theXF
 17542   01352E  24F3               	addwf	243,w,c
 17543   013530  6ED9               	movwf	fsr2l,c
 17544   013532  0E02               	movlw	high _theXF
 17545   013534  20F4               	addwfc	prodh,w,c
 17546   013536  6EDA               	movwf	fsr2h,c
 17547   013538  0E01               	movlw	1
 17548   01353A  6EDE               	movwf	postinc2,c
 17549   01353C  0E00               	movlw	0
 17550   01353E  6EDD               	movwf	postdec2,c
 17551   013540                     l4634:
 17552                           
 17553                           ;xf/xf.c: 238:     }
 17554                           ;stkvar	_i @ sp[(-2)+1]
 17555   013540  0EFF               	movlw	-1
 17556   013542  2AE3               	incf	plusw1,f,c
 17557   013544                     
 17558                           ;stkvar	_i @ sp[(-2)+1]
 17559   013544  0EFF               	movlw	-1
 17560   013546  CFE3 F001          	movff	plusw1,btemp
 17561   01354A  0E0B               	movlw	11
 17562   01354C  6401               	cpfsgt	btemp^0,c
 17563   01354E  EFAB  F09A         	goto	u230_41
 17564   013552  EFAD  F09A         	goto	u230_40
 17565   013556                     u230_41:
 17566   013556  EF35  F09A         	goto	l4622
 17567   01355A                     u230_40:
 17568   01355A                     
 17569                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 17570   01355A  52E5               	movf	postdec1,f,c
 17571   01355C  52E5               	movf	postdec1,f,c
 17572   01355E  0012               	return		;funcret
 17573   013560                     __end_of_XF_decrementAndQueueTimers:
 17574                           	callstack 0
 17575                           
 17576 ;; *************** function _XF_unscheduleTimer *****************
 17577 ;; Defined at:
 17578 ;;		line 202 in file "xf/xf.c"
 17579 ;; Parameters:    Size  Location     Type
 17580 ;;  id              1  [STACK] unsigned char 
 17581 ;;  inISR           1  [STACK] _Bool 
 17582 ;; Auto vars:     Size  Location     Type
 17583 ;;		None
 17584 ;; Return value:  Size  Location     Type
 17585 ;;                  1  [STACK] void 
 17586 ;; Registers used:
 17587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 17588 ;; Tracked objects:
 17589 ;;		On entry : 0/0
 17590 ;;		On exit  : 0/0
 17591 ;;		Unchanged: 0/0
 17592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17597 ;;Total ram usage:        0 bytes
 17598 ;; Hardware stack levels used: 1
 17599 ;; Hardware stack levels required when called: 1
 17600 ;; This function calls:
 17601 ;;		_ENTERCRITICAL
 17602 ;;		_Event_init
 17603 ;;		_LEAVECRITICAL
 17604 ;; This function is called by:
 17605 ;;		_XF_decrementAndQueueTimers
 17606 ;; This function uses a reentrant model
 17607 ;;
 17608                           
 17609                           	psect	text74
 17610   0145F4                     __ptext74:
 17611                           	callstack 0
 17612   0145F4                     _XF_unscheduleTimer:
 17613                           	callstack 17
 17614   0145F4                     
 17615                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 17616                           ;stkvar	_inISR @ sp[(0)+-2]
 17617   0145F4  0EFE               	movlw	-2
 17618   0145F6  50E3               	movf	plusw1,w,c
 17619   0145F8  6EE6               	movwf	postinc1,c
 17620   0145FA  ECB3  F0A4         	call	_ENTERCRITICAL	;wreg free
 17621   0145FE                     
 17622                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 17623                           ;stkvar	_id @ sp[(0)+-1]
 17624   0145FE  0EFF               	movlw	-1
 17625   014600  50E3               	movf	plusw1,w,c
 17626   014602  0D08               	mullw	8
 17627   014604  0EC8               	movlw	low _theXF
 17628   014606  24F3               	addwf	243,w,c
 17629   014608  6ED9               	movwf	fsr2l,c
 17630   01460A  0E02               	movlw	high _theXF
 17631   01460C  20F4               	addwfc	prodh,w,c
 17632   01460E  6EDA               	movwf	fsr2h,c
 17633   014610  6ADE               	clrf	postinc2,c
 17634   014612  6ADD               	clrf	postdec2,c
 17635   014614                     
 17636                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 17637                           ;stkvar	_id @ sp[(0)+-1]
 17638   014614  0EFF               	movlw	-1
 17639   014616  50E3               	movf	plusw1,w,c
 17640   014618  0D08               	mullw	8
 17641   01461A  0ECA               	movlw	low (_theXF+2)
 17642   01461C  24F3               	addwf	243,w,c
 17643   01461E  6E0B               	movwf	(btemp+10)^0,c
 17644   014620  0E02               	movlw	high (_theXF+2)
 17645   014622  20F4               	addwfc	prodh,w,c
 17646   014624  6E0C               	movwf	(btemp+11)^0,c
 17647   014626  C00B  FFE6         	movff	btemp+10,postinc1
 17648   01462A  C00C  FFE6         	movff	btemp+11,postinc1
 17649   01462E  EC51  F0A3         	call	_Event_init	;wreg free
 17650   014632                     
 17651                           ;xf/xf.c: 207:     theXF.countTmr--;
 17652   014632  C3E1  FFE8         	movff	_theXF+281,wreg
 17653   014636  0FFF               	addlw	-1
 17654   014638  CFE8 F3E1          	movff	wreg,_theXF+281
 17655   01463C                     
 17656                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 17657                           ;stkvar	_inISR @ sp[(0)+-2]
 17658   01463C  0EFE               	movlw	-2
 17659   01463E  50E3               	movf	plusw1,w,c
 17660   014640  6EE6               	movwf	postinc1,c
 17661   014642  ECA7  F0A4         	call	_LEAVECRITICAL	;wreg free
 17662   014646                     
 17663                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17664   014646  52E5               	movf	postdec1,f,c
 17665   014648  52E5               	movf	postdec1,f,c
 17666   01464A  0012               	return		;funcret
 17667   01464C                     __end_of_XF_unscheduleTimer:
 17668                           	callstack 0
 17669                           
 17670                           	psect	rparam
 17671   000001                     ___rparam_used  equ	1
 17672   000000                     ___param_bank   equ	0
 17673   000000                     __Lparam        equ	__Lrparam
 17674   000000                     __Hparam        equ	__Hrparam
 17675                           
 17676                           	psect	temp
 17677   000001                     btemp:
 17678                           	callstack 0
 17679   000001                     	ds	32
 17680   000001                     wtemp0          set	btemp
 17681   000003                     wtemp1          set	btemp+2
 17682   000005                     wtemp2          set	btemp+4
 17683   000007                     wtemp3          set	btemp+6
 17684   000009                     wtemp4          set	btemp+8
 17685   00000B                     wtemp5          set	btemp+10
 17686   000002                     wtemp8          set	btemp+1
 17687   000001                     ttemp0          set	btemp
 17688   000004                     ttemp1          set	btemp+3
 17689   000007                     ttemp2          set	btemp+6
 17690   00000A                     ttemp3          set	btemp+9
 17691   000002                     ttemp5          set	btemp+1
 17692   000005                     ttemp6          set	btemp+4
 17693   000009                     ttemp7          set	btemp+8
 17694   000001                     ltemp0          set	btemp
 17695   000005                     ltemp1          set	btemp+4
 17696   000009                     ltemp2          set	btemp+8
 17697   000001                     lltemp0         set	btemp
 17698   000009                     lltemp1         set	btemp+8
 17699   000011                     lltemp2         set	btemp+16
 17700   000019                     lltemp3         set	btemp+24
 17701                           
 17702                           	psect	config
 17703                           
 17704                           ;Config register CONFIG1L @ 0x1FFF8
 17705                           ;	Watchdog Timer Enable bit
 17706                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 17707                           ;	Stack Overflow/Underflow Reset Enable bit
 17708                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17709                           ;	Extended Instruction Set Enable bit
 17710                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17711                           ;	Background Debugger Enable bit
 17712                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17713   01FFF8                     	org	131064
 17714   01FFF8  A0                 	db	160
 17715                           
 17716                           ;Config register CONFIG1H @ 0x1FFF9
 17717                           ;	Code Protection bit
 17718                           ;	CP0 = OFF, Program memory is not code-protected
 17719   01FFF9                     	org	131065
 17720   01FFF9  F4                 	db	244
 17721                           
 17722                           ;Config register CONFIG2L @ 0x1FFFA
 17723                           ;	Oscillator Selection bits
 17724                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17725                           ;	Default/Reset System Clock Select bit
 17726                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17727                           ;	Fail-Safe Clock Monitor Enable
 17728                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17729                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17730                           ;	IESO = ON, Two-Speed Start-up enabled
 17731   01FFFA                     	org	131066
 17732   01FFFA  C5                 	db	197
 17733                           
 17734                           ;Config register CONFIG2H @ 0x1FFFB
 17735                           ;	Watchdog Timer Postscaler Select bits
 17736                           ;	WDTPS = 32768, 1:32768
 17737   01FFFB                     	org	131067
 17738   01FFFB  FF                 	db	255
 17739                           
 17740                           ;Config register CONFIG3L @ 0x1FFFC
 17741                           ;	External Address Bus Shift Enable bit
 17742                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17743                           ;	External Memory Bus
 17744                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17745                           ;	Data Bus Width Select bit
 17746                           ;	BW = 16, 16-Bit Data Width mode
 17747                           ;	External Bus Wait Enable bit
 17748                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17749   01FFFC                     	org	131068
 17750   01FFFC  F8                 	db	248
 17751                           
 17752                           ;Config register CONFIG3H @ 0x1FFFD
 17753                           ;	ECCP2 MUX bit
 17754                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17755                           ;	ECCP MUX bit
 17756                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17757                           ;	Ethernet LED Enable bit
 17758                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17759   01FFFD                     	org	131069
 17760   01FFFD  F7                 	db	247
 17761                           tosu	equ	0xFFF
 17762                           tosh	equ	0xFFE
 17763                           tosl	equ	0xFFD
 17764                           stkptr	equ	0xFFC
 17765                           pclatu	equ	0xFFB
 17766                           pclath	equ	0xFFA
 17767                           pcl	equ	0xFF9
 17768                           tblptru	equ	0xFF8
 17769                           tblptrh	equ	0xFF7
 17770                           tblptrl	equ	0xFF6
 17771                           tablat	equ	0xFF5
 17772                           prodh	equ	0xFF4
 17773                           prodl	equ	0xFF3
 17774                           indf0	equ	0xFEF
 17775                           postinc0	equ	0xFEE
 17776                           postdec0	equ	0xFED
 17777                           preinc0	equ	0xFEC
 17778                           plusw0	equ	0xFEB
 17779                           fsr0h	equ	0xFEA
 17780                           fsr0l	equ	0xFE9
 17781                           wreg	equ	0xFE8
 17782                           indf1	equ	0xFE7
 17783                           postinc1	equ	0xFE6
 17784                           postdec1	equ	0xFE5
 17785                           preinc1	equ	0xFE4
 17786                           plusw1	equ	0xFE3
 17787                           fsr1h	equ	0xFE2
 17788                           fsr1l	equ	0xFE1
 17789                           bsr	equ	0xFE0
 17790                           indf2	equ	0xFDF
 17791                           postinc2	equ	0xFDE
 17792                           postdec2	equ	0xFDD
 17793                           preinc2	equ	0xFDC
 17794                           plusw2	equ	0xFDB
 17795                           fsr2h	equ	0xFDA
 17796                           fsr2l	equ	0xFD9
 17797                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        0
    BSS         772
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      50
    BANK0           160      0      59
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5588 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5580 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   33195
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4644
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1394
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     989
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   17509
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 2     0      2   10182
              _lightContol_BackLight
             _lightContol_FrontLight
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        25    24      1    3374
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6786
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1389
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1389
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1389
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1389
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     989
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _lightContol_BackLight
       _lightContol_FrontLight
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      59     36.9%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      50     79.4%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     250      0.0%
DATA                 0      0    1041      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Mar 03 14:22:59 2025

                                  __end_of_updateCarState 2420  
                                              _CanReceive 446A  
                                         _timer0ReloadVal 0037  
                                                     l150 3B2C  
                                                     l222 4384  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3A7A  
                                                     l401 3BE4  
                                                     l161 4460  
                                                     l146 3A92  
                                                     l218 1C0E  
                                                     l154 2068  
                                                     l322 14A8  
                                                     l171 458A  
                                                     l251 2A5A  
                                                     l412 4528  
                                                     l260 3644  
                                                     l149 3B26  
                                                     l317 1174  
                                                     l165 44C4  
                                                     l174 4698  
                                                     l254 3234  
                                                     l158 4008  
                                                     l327 41DA  
                                                     l184 3A68  
                                                     l168 48A6  
                                                     l336 426C  
                                                     l264 0742  
                                                     l257 30FA  
                                                     l193 274E  
                                                     l346 2FBA  
                                                     l179 3806  
                                                     l453 4144  
                                                     l293 3F5E  
                                                     l357 0E2A  
                                                     l623 45EE  
                                                     l199 334E  
                                                     l482 40AC  
                                                     l643 492E  
                                                     l635 48C6  
                                                     l379 43F6  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 2246  
                                                     l976 4992  
                                                     l979 49AA  
                                                     u805 1A4C  
                                                     u815 1A70  
                                                     u825 1A92  
                                                     u835 1AF4  
                                                     u845 1B22  
                                                     u855 1B50  
                                                     u865 1B7E  
                                                     u875 1BAC  
                                                     u885 1BDA  
                                                     u995 316C  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4532  
                          _DRV_CANFDSPI_ModuleEventEnable 44CE  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 414E  
                    _DRV_CANFDSPI_TransmitChannelEventGet 40B6  
                                                    l1020 487A  
                                                    l1120 3CA0  
                                                    l1032 49BA  
                                                    l1200 49B2  
                                                    l1201 49B2  
                                                    l1116 49A2  
                                                    l1206 49AC  
                                                    l1215 2D1A  
                                                    l1207 49AC  
                                                    l1231 3726  
                                                    l1223 2BDA  
                                                    l1064 47AE  
                                                    l1216 2D32  
                                                    l3010 1A70  
                                                    l3002 19C2  
                                                    l1250 497A  
                                                    l1162 476C  
                                                    l1234 372E  
                                                    l1227 399E  
                                                    l3020 1B50  
                                                    l3012 1A92  
                                                    l3004 19FE  
                                                    l1092 4910  
                                                    l1237 4646  
                                                    l1085 484C  
                                                    l1261 42FC  
                                                    l1246 355A  
                                                    l3022 1B7E  
                                                    l3014 1AC6  
                                                    l3006 1A28  
                                                    l3110 310C  
                                                    l1254 4962  
                                                    l1174 47DE  
                                                    l1095 49BC  
                                                    l1159 46EA  
                                                    l3024 1BAC  
                                                    l3016 1AF4  
                                                    l3008 1A4C  
                                                    l4000 4584  
                                                    l3120 31FA  
                                                    l3112 3148  
                                                    l1168 4946  
                                                    l1089 481C  
                                                    l1425 3D4E  
                                                    l1177 48F0  
                                                    l1257 38D2  
                                                    l3026 1BDA  
                                                    l3018 1B22  
                                                    l3114 316C  
                                                    l4010 327A  
                                                    l1515 2416  
                                                    l3116 3196  
                                                    l4100 21B4  
                                                    l4020 3324  
                                                    l4012 3280  
                                                    l4004 3246  
                                                    l3118 31C6  
                                                    l4030 14E6  
                                                    l4022 3348  
                                                    l4014 3298  
                                                    l4006 3264  
                                                    l1447 2550  
                                                    l3080 35C2  
                                                    l4120 4960  
                                                    l4104 21DA  
                                                    l4040 1552  
                                                    l4032 14FC  
                                                    l4016 32D8  
                                                    l4008 3264  
                                                    l4200 0604  
                                                    l1472 3E02  
                                                    l1464 3EB0  
                                                    l1448 25C6  
                                                    l3082 35EE  
                                                    l4114 4966  
                                                    l4106 222E  
                                                    l4050 15C0  
                                                    l4042 1580  
                                                    l4034 1502  
                                                    l4026 14BA  
                                                    l4018 32F6  
                                                    l4210 0680  
                                                    l4202 0634  
                                                    l4130 006C  
                                                    l4122 0008  
                                                    l5002 446C  
                                                    l3084 3618  
                                                    l3076 3568  
                                                    l5020 4780  
                                                    l4116 4978  
                                                    l4300 2D3C  
                                                    l4060 15F8  
                                                    l4052 15D4  
                                                    l4044 15A4  
                                                    l4036 151A  
                                                    l4028 14E6  
                                                    l4220 070C  
                                                    l4204 0646  
                                                    l4212 06A2  
                                                    l4124 0008  
                                                    l5100 24F8  
                                                    l5012 44C0  
                                                    l5004 4488  
                                                    l1493 2866  
                                                    l5030 47E8  
                                                    l3078 35A4  
                                                    l3350 499E  
                                                    l5022 4796  
                                                    l4118 494E  
                                                    l4310 2D72  
                                                    l4302 2D40  
                                                    l4070 16E0  
                                                    l4062 1638  
                                                    l4054 15E0  
                                                    l4046 15B6  
                                                    l4038 1534  
                                                    l4222 0722  
                                                    l4214 06F2  
                                                    l4206 064E  
                                                    l4150 013E  
                                                    l4142 00C8  
                                                    l4134 0074  
                                                    l4126 002A  
                                                    l5110 2558  
                                                    l1494 28DC  
                                                    l5006 4498  
                                                    l5032 47EE  
                                                    l5200 1F30  
                                                    l3344 49B8  
                                                    l3360 486A  
                                                    l3352 49A0  
                                                    l5024 4798  
                                                    l5016 4776  
                                                    l4320 2DC4  
                                                    l4312 2D7E  
                                                    l4304 2D50  
                                                    l5040 38FA  
                                                    l4240 40E8  
                                                    l4232 40BE  
                                                    l4080 208A  
                                                    l4064 1656  
                                                    l4072 16FE  
                                                    l4224 0734  
                                                    l4216 0704  
                                                    l4208 067C  
                                                    l4160 01FC  
                                                    l4152 0172  
                                                    l4144 0102  
                                                    l4136 00A4  
                                                    l4128 005A  
                                                    l5112 2564  
                                                    l5104 2500  
                                                    l5008 44B8  
                                                    l4400 2AC8  
                                                    l5034 4802  
                                                    l5210 1F86  
                                                    l5202 1F36  
                                                    l3370 49A6  
                                                    l3362 486C  
                                                    l3354 484E  
                                                    l3346 4994  
                                                    l5026 479A  
                                                    l5018 4778  
                                                    l1762 2E78  
                                                    l4322 2DD4  
                                                    l4314 2D98  
                                                    l4330 2E4E  
                                                    l4306 2D5C  
                                                    l5050 3942  
                                                    l5042 3904  
                                                    l4250 413E  
                                                    l4242 4110  
                                                    l4234 40BE  
                                                    l4090 20F6  
                                                    l4082 208C  
                                                    l4066 1674  
                                                    l4170 03B8  
                                                    l4162 0236  
                                                    l4154 01A2  
                                                    l4146 0136  
                                                    l4138 00C0  
                                                    l5114 2578  
                                                    l5106 253A  
                                                    l5130 275C  
                                                    l4410 2B4E  
                                                    l4402 2B08  
                                                    l5220 1FE8  
                                                    l5212 1F9A  
                                                    l5204 1F46  
                                                    l3364 486E  
                                                    l3356 4864  
                                                    l3348 499C  
                                                    l5028 47AA  
                                                    l4332 2E60  
                                                    l4324 2E02  
                                                    l4316 2DA2  
                                                    l4308 2D62  
                                                    l5052 3966  
                                                    l5044 3918  
                                                    l5036 38E4  
                                                    l4244 4122  
                                                    l4236 40BE  
                                                    l4092 211C  
                                                    l4084 208E  
                                                    l4068 1692  
                                                    l4228 073C  
                                                    l4180 0470  
                                                    l4172 03C4  
                                                    l4164 0278  
                                                    l4156 01C0  
                                                    l4340 3F92  
                                                    l5132 277A  
                                                    l4500 094C  
                                                    l4260 47B0  
                                                    l4420 2BCC  
                                                    l4412 2B68  
                                                    l4404 2B12  
                                                    l5300 229E  
                                                    l4430 4614  
                                                    l5230 203A  
                                                    l5222 1FF8  
                                                    l5214 1FAA  
                                                    l5206 1F56  
                                                    l3366 4874  
                                                    l3358 4868  
                                                    l4334 2E6C  
                                                    l4326 2E26  
                                                    l4318 2DC0  
                                                    l5054 3990  
                                                    l5046 3922  
                                                    l5038 38E8  
                                                    l4238 40CE  
                                                    l4094 2142  
                                                    l4086 20A4  
                                                    l4078 207A  
                                                    l4190 05AA  
                                                    l4182 04BC  
                                                    l4174 03E0  
                                                    l4158 01E6  
                                                    l4166 02EA  
                                                    l4342 3FAE  
                                                    l5118 2584  
                                                    l5142 27CA  
                                                    l5134 2782  
                                                    l4254 46A2  
                                                    l4350 25F2  
                                                    l4510 0C1A  
                                                    l4502 0974  
                                                    l4262 48D0  
                                                    l4414 2B6C  
                                                    l4406 2B40  
                                                    l4422 2BD6  
                                                    l5070 387C  
                                                    l5062 3818  
                                                    l5310 2344  
                                                    l5302 22B0  
                                                    l4432 4632  
                                                    l4600 39E4  
                                                    l5232 203E  
                                                    l5224 1FFE  
                                                    l5216 1FBC  
                                                    l5208 1F6E  
                                                    l5240 440A  
                                                    l3368 49A4  
                                                    l4328 2E30  
                                                    l4248 412A  
                                                    l4096 2168  
                                                    l4088 20D0  
                                                    l4192 05AE  
                                                    l4184 050A  
                                                    l4176 03FC  
                                                    l4168 039A  
                                                    l4344 3FBE  
                                                    l5080 2442  
                                                    l5160 2882  
                                                    l5144 27E8  
                                                    l5136 27A0  
                                                    l5152 2816  
                                                    l5128 2758  
                                                    l4256 46B0  
                                                    l4440 401A  
                                                    l4360 2640  
                                                    l4352 25F2  
                                                    l4520 0CBA  
                                                    l4512 0C50  
                                                    l4504 099A  
                                                    l4280 36F4  
                                                    l4272 365E  
                                                    l4416 2B98  
                                                    l4408 2B44  
                                                    l5072 389E  
                                                    l5064 3820  
                                                    l5312 2364  
                                                    l5304 22EC  
                                                    l4434 463C  
                                                    l4426 45F4  
                                                    l4602 3A24  
                                                    l5234 2050  
                                                    l5226 201A  
                                                    l5218 1FD8  
                                                    l5242 441E  
                                                    l5250 498E  
                                                    l4098 218E  
                                                    l4194 05E4  
                                                    l4186 0558  
                                                    l4178 0448  
                                                    l4338 3F6A  
                                                    l5090 2496  
                                                    l5082 244A  
                                                    l5162 2896  
                                                    l5146 27F0  
                                                    l5138 27A8  
                                                    l5154 2850  
                                                    l4258 46CC  
                                                    l4450 4082  
                                                    l4370 26FC  
                                                    l4362 265E  
                                                    l4354 2608  
                                                    l4530 0D62  
                                                    l4522 0CD6  
                                                    l4514 0C6C  
                                                    l4506 0A70  
                                                    l4282 36F8  
                                                    l4274 3680  
                                                    l4290 370C  
                                                    l4266 3650  
                                                    l4418 2BC2  
                                                    l5066 3838  
                                                    l5314 237A  
                                                    l5306 2328  
                                                    l4428 45FE  
                                                    l5260 4848  
                                                    l5252 481E  
                                                    l4700 1C92  
                                                    l4604 3A28  
                                                    l5236 2060  
                                                    l5228 2026  
                                                    l5180 1E74  
                                                    l5244 444E  
                                                    l4196 05EC  
                                                    l4188 0560  
                                                    l5092 24B4  
                                                    l5084 2468  
                                                    l5076 2420  
                                                    l5148 280E  
                                                    l4444 4030  
                                                    l4436 401A  
                                                    l4372 271A  
                                                    l4364 268C  
                                                    l4356 260E  
                                                    l4348 25D4  
                                                    l4380 4394  
                                                    l4540 0DFE  
                                                    l4524 0D0C  
                                                    l4516 0C82  
                                                    l4532 0D88  
                                                    l4508 0BF0  
                                                    l4460 075C  
                                                    l4612 473A  
                                                    l4292 3710  
                                                    l4284 3702  
                                                    l4276 36D0  
                                                    l5068 385E  
                                                    l5308 232E  
                                                    l4630 3514  
                                                    l4622 346A  
                                                    l5254 4828  
                                                    l4710 1D44  
                                                    l4702 1CAC  
                                                    l4606 3A3E  
                                                    l4550 3BFC  
                                                    l5190 1EC2  
                                                    l5182 1E7E  
                                                    l5238 4400  
                                                    l5246 497E  
                                                    l4198 05EC  
                                                    l5094 24B8  
                                                    l5086 2470  
                                                    l5078 2424  
                                                    l5158 286E  
                                                    l5166 28A2  
                                                    l5270 2C26  
                                                    l5262 2BE8  
                                                    l4454 4098  
                                                    l4446 4040  
                                                    l4438 401A  
                                                    l4374 2748  
                                                    l4366 26B0  
                                                    l4358 2626  
                                                    l4390 43F0  
                                                    l4382 4394  
                                                    l4534 0DA8  
                                                    l4542 0E20  
                                                    l4526 0D14  
                                                    l4518 0C9E  
                                                    l4470 07EC  
                                                    l4462 0776  
                                                    l4614 4934  
                                                    l4278 36DA  
                                                    l5318 239A  
                                                    l5350 33D0  
                                                    l5342 3360  
                                                    l4632 3526  
                                                    l4624 348C  
                                                    l4616 3466  
                                                    l5256 482E  
                                                    l4560 3740  
                                                    l4712 1D76  
                                                    l4704 1CDE  
                                                    l4720 1E3C  
                                                    l4608 3A62  
                                                    l4552 3C40  
                                                    l4800 28EA  
                                                    l5192 1EDA  
                                                    l5184 1E96  
                                                    l5176 1E6C  
                                                    l5248 4982  
                                                    l4640 3CC0  
                                                    l5088 248E  
                                                    l5280 2C72  
                                                    l5272 2C44  
                                                    l4448 405A  
                                                    l4368 26BC  
                                                    l4384 43A4  
                                                    l4536 0DB0  
                                                    l4528 0D5E  
                                                    l4480 086E  
                                                    l4464 07A6  
                                                    l5360 3422  
                                                    l5352 33DE  
                                                    l5344 3382  
                                                    l4626 34A6  
                                                    l4634 3540  
                                                    l5258 4844  
                                                    l3930 3A82  
                                                    l4562 3754  
                                                    l4706 1CF8  
                                                    l4730 1742  
                                                    l4554 3C68  
                                                    l4810 29D4  
                                                    l4802 2926  
                                                    l5194 1EF0  
                                                    l5186 1EA6  
                                                    l5178 1E70  
                                                    l4650 3D22  
                                                    l4642 3CD4  
                                                    l5098 24DA  
                                                    l5290 42A2  
                                                    l5282 2CA0  
                                                    l5274 2C6A  
                                                    l4386 43BE  
                                                    l4378 4394  
                                                    l4538 0DFA  
                                                    l4490 08E4  
                                                    l4482 0880  
                                                    l4474 080C  
                                                    l4458 0754  
                                                    l4394 2A6A  
                                                    l5370 3456  
                                                    l5362 3432  
                                                    l5354 33E2  
                                                    l5346 3390  
                                                    l4636 3544  
                                                    l4628 34CA  
                                                    l3932 3AA0  
                                                    l3940 3B0C  
                                                    l4580 37DC  
                                                    l4564 3754  
                                                    l4708 1D2A  
                                                    l4740 1812  
                                                    l4732 177E  
                                                    l4900 4372  
                                                    l4820 2E8A  
                                                    l4556 3C9E  
                                                    l4548 3BEE  
                                                    l4812 29FC  
                                                    l4804 2936  
                                                    l5196 1F00  
                                                    l5188 1EB4  
                                                    l2884 48F6  
                                                    l4660 3E64  
                                                    l4652 3E14  
                                                    l4644 3CDA  
                                                    l5292 42C2  
                                                    l5284 2CD6  
                                                    l5268 2BF0  
                                                    l4388 43CC  
                                                    l4492 08FA  
                                                    l4484 089C  
                                                    l4476 0840  
                                                    l4468 07BC  
                                                    l4396 2A8E  
                                                    l5364 3434  
                                                    l5356 33EE  
                                                    l5348 33C0  
                                                    l3942 3B28  
                                                    l3934 3AB0  
                                                    l3926 3A74  
                                                    l4582 3800  
                                                    l4574 3774  
                                                    l4566 376A  
                                                    l4718 1D90  
                                                    l4750 1900  
                                                    l4742 1848  
                                                    l4734 17A8  
                                                    l4590 39C4  
                                                    l3950 464E  
                                                    l4830 2EDC  
                                                    l4822 2E8A  
                                                    l4814 2A20  
                                                    l4806 296A  
                                                    l5198 1F18  
                                                    l4910 420A  
                                                    l4670 3D88  
                                                    l4662 3E78  
                                                    l4654 3E28  
                                                    l4646 3D02  
                                                    l4638 3CAC  
                                                    l5286 2CF4  
                                                    l4494 0904  
                                                    l4486 08AC  
                                                    l4478 0858  
                                                    l4398 2AA8  
                                                    l5294 2258  
                                                    l5366 3436  
                                                    l5358 341E  
                                                    l3936 3ACE  
                                                    l3928 3A7C  
                                                    l4576 37C2  
                                                    l4568 3770  
                                                    l4752 192E  
                                                    l4744 1876  
                                                    l4736 17CC  
                                                    l4728 1742  
                                                    l4592 39DA  
                                                    l3952 4664  
                                                    l4840 2F9A  
                                                    l4832 2EEC  
                                                    l4824 2E8A  
                                                    l4680 487C  
                                                    l4816 2A3A  
                                                    l4808 29A4  
                                                    l4912 4232  
                                                    l4672 3D8E  
                                                    l4664 3E84  
                                                    l4656 3E3C  
                                                    l4648 3D16  
                                                    l5288 427E  
                                                    l4496 0936  
                                                    l4488 08C4  
                                                    l5368 3452  
                                                    l3938 3AEC  
                                                    l4578 37C6  
                                                    l4754 195C  
                                                    l4746 18A4  
                                                    l4738 17F0  
                                                    l4594 39E0  
                                                    l4586 39B0  
                                                    l3954 466A  
                                                    l3946 464E  
                                                    l4834 2F44  
                                                    l4690 488A  
                                                    l4682 487C  
                                                    l4770 3BC6  
                                                    l4762 3B3E  
                                                    l4850 48A8  
                                                    l4906 41EC  
                                                    l4930 0E74  
                                                    l3970 3EFA  
                                                    l3962 3EC2  
                                                    l4674 3DB6  
                                                    l4666 3D60  
                                                    l4658 3E42  
                                                    l5298 2298  
                                                    l4756 1992  
                                                    l4748 18D2  
                                                    l4588 39C4  
                                                    l3956 4670  
                                                    l3948 464E  
                                                    l4836 2F70  
                                                    l4828 2EA0  
                                                    l4684 487C  
                                                    l4764 3B3E  
                                                    l4860 45C2  
                                                    l4844 4918  
                                                    l4852 48A8  
                                                    l4780 3008  
                                                    l4916 4248  
                                                    l4908 41EC  
                                                    l4940 1054  
                                                    l4932 0E8A  
                                                    l4924 0E3C  
                                                    l3972 3F0C  
                                                    l3964 3EC2  
                                                    l4676 3DCA  
                                                    l4668 3D74  
                                                    l5580 282A  
                                                    l5572 23CE  
                                                    l5590 1DA6  
                                                    l4694 1C20  
                                                    l3990 4534  
                                                    l3958 4692  
                                                    l4838 2F80  
                                                    l4686 4880  
                                                    l4766 3B7A  
                                                    l4846 4918  
                                                    l4790 30DC  
                                                    l4782 3018  
                                                    l4774 2FCC  
                                                    l4918 4258  
                                                    l4942 1072  
                                                    l4950 112E  
                                                    l4934 0EC4  
                                                    l4926 0E3C  
                                                    l3982 3F58  
                                                    l3974 3F1A  
                                                    l3966 3EDC  
                                                    l4678 3DD6  
                                                    l5582 28B6  
                                                    l5574 2408  
                                                    l4696 1C20  
                                                    l4880 44DA  
                                                    l4872 44D2  
                                                    l3992 454A  
                                                    l4688 4882  
                                                    l4768 3BA2  
                                                    l4864 45D8  
                                                    l4856 4598  
                                                    l4792 30DC  
                                                    l4784 304A  
                                                    l4776 2FCC  
                                                    l4960 1196  
                                                    l4952 1154  
                                                    l4944 107E  
                                                    l4936 0F06  
                                                    l4928 0E4C  
                                                    l3976 3F3E  
                                                    l3968 3EEC  
                                                    l5584 2514  
                                                    l5576 23E4  
                                                    l4698 1C60  
                                                    l4882 4512  
                                                    l4874 44D2  
                                                    l3994 4550  
                                                    l3986 4534  
                                                    l4890 430E  
                                                    l4866 45DC  
                                                    l4858 459C  
                                                    l4786 3080  
                                                    l4778 2FCC  
                                                    l4962 11A8  
                                                    l4970 12D8  
                                                    l4946 109A  
                                                    l4938 0FA4  
                                                    l3978 3F50  
                                                    l5586 2598  
                                                    l5578 23FA  
                                                    l4876 44D2  
                                                    l3996 4552  
                                                    l3988 4534  
                                                    l4892 4334  
                                                    l4796 28EA  
                                                    l4788 30B6  
                                                    l4980 13EA  
                                                    l4972 1388  
                                                    l4964 11BE  
                                                    l4956 1186  
                                                    l4948 10B6  
                                                    l5588 21F0  
                                                    l4878 44D2  
                                                    l3998 4574  
                                                    l4798 28EA  
                                                    l4974 13A6  
                                                    l4982 1462  
                                                    l4966 11F8  
                                                    l4958 1186  
                                                    l4990 4166  
                                                    l4896 434A  
                                                    l4888 430A  
                                                    l4984 1488  
                                                    l4976 13B2  
                                                    l4968 123A  
                                                    l4992 417A  
                                                    l4898 435A  
                                                    l4978 13CE  
                                                    l4994 418A  
                                                    l4996 41A8  
                                                    l4988 4154  
                                                    l4998 41C6  
                                     __end_of_XF_popEvent 39A8  
                                                    STR_1 FFED  
                                                    u2000 268C  
                                                    u2001 2688  
                                                    u2010 2748  
                                                    u2011 2744  
                                                    u2100 0808  
                                                    u2020 2AA8  
                                                    u2101 0804  
                                                    u2021 2AA4  
                                                    u2110 089C  
                                                    u2111 0898  
                                                    u2031 2ADC  
                                                    u2200 0E20  
                                                    u2120 08C4  
                                                    u2040 2B40  
                                                    u3000 22B0  
                                                    u2201 0E1C  
                                                    u2121 08C0  
                                                    u2041 2B3C  
                                                    u3001 22AC  
                                                    u2210 3BFC  
                                                    u2130 08FA  
                                                    u2050 2B68  
                                                    u3010 2344  
                                                    u2211 3BF8  
                                                    u2131 08F6  
                                                    u2051 2B64  
                                                    u3011 2340  
                                                    u2220 37B8  
                                                    u2140 0948  
                                                    u3020 237A  
                                                    u2141 0944  
                                                    u2061 2BBA  
                                                    u3021 2376  
                                                    _LATA 0F89  
                                                    u2230 37DC  
                                                    u2070 402C  
                                                    u2150 099A  
                                                    _LATB 0F8A  
                                                    u2231 37D8  
                                                    u2071 4028  
                                                    u2151 0996  
                                                    _LATC 0F8B  
                                                    u1600 3F0C  
                                                    u2320 3CD4  
                                                    u2080 4094  
                                                    u2160 0B66  
                                                    _LATD 0F8C  
                                                    u2225 37AE  
                                                    u1601 3F08  
                                                    u2321 3CD0  
                                                    u2081 4090  
                                                    _LATE 0F8D  
                                                    u2250 3A3E  
                                                    u1610 3F50  
                                                    u2090 07B8  
                                                    _LATF 0F8E  
                                                    u2251 3A3A  
                                                    u1611 3F4C  
                                                    u2091 07B4  
                                                    _LATG 0F8F  
                                                    u2244 3A1A  
                                                    u2500 45D4  
                                                    u1620 3324  
                                                    u1700 006C  
                                                    u2340 3E3C  
                                                    u2180 0C6C  
                                                    _LATH 0F90  
                                                    u2405 1876  
                                                    u2245 3A14  
                                                    u2501 45D0  
                                                    u1621 3320  
                                                    u1701 0068  
                                                    u2341 3E38  
                                                    u2181 0C68  
                                                    u2165 0B5C  
                                                    u2510 4346  
                                                    u1630 1580  
                                                    u1710 00C0  
                                                    u2190 0D84  
                                                    _LATJ 0F91  
                                                    u2415 18A4  
                                                    u2511 4342  
                                                    u1631 157C  
                                                    u1711 00BC  
                                                    u2191 0D80  
                                                    u2175 0BAC  
                                                    u2520 4244  
                                                    u1640 15B6  
                                                    u1800 0500  
                                                    u1720 0136  
                                                    u2360 3D88  
                                                    u2425 18D2  
                                                    u2521 4240  
                                                    u1641 15B2  
                                                    u1721 0132  
                                                    u2361 3D84  
                                                    u2530 0E74  
                                                    u1650 1692  
                                                    u1810 054E  
                                                    u1730 01E6  
                                                    u2435 1900  
                                                    u2531 0E70  
                                                    u1651 168E  
                                                    u1731 01E2  
                                                    u1580 3AA0  
                                                    u2620 11A8  
                                                    u2540 0EFC  
                                                    u1660 172C  
                                                    u1820 05E4  
                                                    u1740 026E  
                                                    u1900 36F4  
                                                    u1581 3A9C  
                                                    u2445 192E  
                                                    u2621 11A4  
                                                    u2605 10F2  
                                                    u1661 1728  
                                                    u1821 05E0  
                                                    u1805 04F6  
                                                    u1901 36F0  
                                                    u1590 3B26  
                                                    u2630 1230  
                                                    u2710 4166  
                                                    u1670 20A4  
                                                    u1830 0604  
                                                    u1910 3726  
                                                    u1591 3B22  
                                                    u2455 195C  
                                                    u2375 17CC  
                                                    u2615 111C  
                                                    u2711 4162  
                                                    u1671 20A0  
                                                    u1831 0600  
                                                    u1815 0544  
                                                    u1911 3722  
                                                    u2480 2E9C  
                                                    u1680 4978  
                                                    u1920 2D50  
                                                    u1840 06A2  
                                                    u1760 02DA  
                                                    u2800 2468  
                                                    u2720 4498  
                                                    u2385 17F0  
                                                    u2481 2E98  
                                                    u2465 3BC6  
                                                    u2705 1450  
                                                    u2545 0EF2  
                                                    u1681 4974  
                                                    u1921 2D4C  
                                                    u1841 069E  
                                                    u1745 0264  
                                                    u2801 2464  
                                                    u2721 4494  
                                                    u2570 0F92  
                                                    u1690 4960  
                                                    u1930 2D72  
                                                    u1850 0704  
                                                    u1770 0316  
                                                    u2810 248E  
                                                    u2395 1812  
                                                    u2475 2A20  
                                                    u2635 1226  
                                                    u2555 0F32  
                                                    u1691 495C  
                                                    u1931 2D6E  
                                                    u1851 0700  
                                                    u1755 02A4  
                                                    u2811 248A  
                                                    u2660 12C6  
                                                    u2580 0FD0  
                                                    u1940 2D98  
                                                    u1860 0734  
                                                    u2820 24B4  
                                                    u2900 280E  
                                                    u2645 1266  
                                                    u2565 0F5C  
                                                    u1941 2D94  
                                                    u1861 0730  
                                                    u1765 02D0  
                                                    u2821 24B0  
                                                    u2901 280A  
                                                    u2670 1304  
                                                    u1950 2DD4  
                                                    u2750 3918  
                                                    u1870 4122  
                                                    u2830 24D6  
                                                    u2910 2862  
                                                    u2495 2F34  
                                                    u2655 1290  
                                                    u2575 0F88  
                                                    u1951 2DD0  
                                                    u2751 3914  
                                                    u1871 411E  
                                                    u1775 030C  
                                                    u2831 24D2  
                                                    u2911 285E  
                                                    u2920 2050  
                                                    u1960 2E02  
                                                    u2840 24F8  
                                                    u1880 3680  
                                                    u2921 204C  
                                                    u2665 12BC  
                                                    u2585 0FC6  
                                                    u1961 2DFE  
                                                    u1785 035A  
                                                    u2841 24F4  
                                                    u1881 367C  
                                                    u1970 2E4E  
                                                    u2850 254C  
                                                    u2675 12FA  
                                                    u2595 1014  
                                                    u1971 2E4A  
                                                    u1795 0438  
                                                    u2851 2548  
                                                    u1891 36C8  
                                                    u1980 2E60  
                                                    u2860 277A  
                                                    u2940 2C6A  
                                                    u2685 1348  
                                                    u1981 2E5C  
                                                    u2861 2776  
                                                    u2941 2C66  
                                                    u2781 38C4  
                                                    u1990 3FBE  
                                                    u2790 2442  
                                                    u2870 27A0  
                                                    u2950 2D1A  
                                                    u2695 1426  
                                                    u1991 3FBA  
                                                    u2791 243E  
                                                    u2871 279C  
                                                    u2951 2D16  
                                                    u2880 27C6  
                                                    u2881 27C2  
                                                    u2890 27E8  
                                                    u2970 42C2  
                                                    u2891 27E4  
                                                    u2971 42BE  
                                                    u2990 2294  
                                                    u2991 2290  
                                                    u2988 42E8  
                                                    u2989 42FC  
                       __end_of_DRV_CANFDSPI_TimeStampSet 48D0  
                                    _motorControl_Process 2420  
                                                    _main 3358  
                                        _XF_scheduleTimer 364E  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 0001  
                                            _CanSetFilter 4400  
                                         __end_of_CanInit 2072  
                                         __end_of_CanSend 4012  
                                   _lightContol_BackLight 3D58  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2D38  
                                         __end_of_XF_post 38DC  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 3104  
                     _DRV_CANFDSPI_TransmitQueueConfigure 2FC4  
                                 __end_of_TMR0_Initialize 47B0  
                     __end_of_DRV_CANFDSPI_WriteByteArray 3358  
                             _DRV_CANFDSPI_WriteByteArray 323E  
                           __end_of_OSCILLATOR_Initialize 49AC  
                                         __end_of___awmod 2E82  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 323E  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3104  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 484E  
                                                   _dummy 0031  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2BE4  
                               motorControl_Process@state 003E  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 0001  
                                                   ltemp1 0005  
                                                   ltemp2 0009  
                            lightControl_Process@oldState 0039  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 0001  
                                                   ttemp1 0004  
                                                   ttemp2 0007  
                                                   ttemp3 000A  
                                                   ttemp5 0002  
                                                   ttemp6 0005  
                                                   ttemp7 0009  
                                                   status 0FD8  
                                                   wtemp0 0001  
                                                   wtemp1 0003  
                                                   wtemp2 0005  
                                                   wtemp3 0007  
                                                   wtemp4 0009  
                                                   wtemp5 000B  
                                                   wtemp8 0002  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 41E4  
                           _DRV_CANFDSPI_FilterToFifoLink 414E  
                               _DRV_CANFDSPI_TefConfigure 3B36  
                                         __initialization 46F0  
                                              _Event_init 46A2  
                                            __end_of_main 3462  
                             ?_INTERRUPT_InterruptManager 0040  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2758  
                              _DRV_CANFDSPI_ReadByteArray 25CC  
                                     __end_of_Event_setPE 4776  
                                     __end_of_Event_setId 494E  
                                           __activetblptr 0003  
                                          _Event_getDelay 48D0  
                                             _XF_popEvent 38DC  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  u230_40 355A  
                                                  u230_41 3556  
                                                  i2l5340 0068  
                                                  i2l5336 004C  
                                                  i2l5338 005A  
                                                  u226_40 348C  
                                                  u226_41 3488  
                                                  u227_40 34CA  
                                                  u227_41 34C6  
                                                  u228_41 34F6  
                                                  u229_40 3514  
                                                  u229_41 3510  
                                                  u273_40 4802  
                                                  u273_41 47FE  
                                                  u274_48 4808  
                                                  u274_49 481C  
                                                  u293_40 4844  
                                                  u293_41 4840  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 47B0  
                                          _XF_noMoreEvent 49B2  
                                          _XF_noMoreTimer 49AC  
                          __end_of_DRV_CANFDSPI_WriteByte 46A2  
                          __end_of_DRV_CANFDSPI_WriteWord 3810  
                                       __end_of_SPI2_Open 3CA4  
                                          _XF_executeOnce 4276  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 46F8  
                                                  clear_1 470A  
                                                  clear_2 4716  
                                                  clear_3 4722  
                                                  clear_4 472E  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 48F6  
                                                  lltemp0 0001  
                                                  lltemp1 0009  
                                                  lltemp2 0011  
                                                  lltemp3 0019  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3A72  
                              _DRV_CANFDSPI_WriteHalfWord 39A8  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 481E  
                                  __end_of_Event_setDelay 47E8  
                                  __end_of_XF_noMoreEvent 49B8  
                                  __end_of_XF_noMoreTimer 49B2  
                                       _SYSTEM_Initialize 497E  
                         lightContol_FrontLight@lastLight 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 4734  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 4306  
                                  _lightContol_FrontLight 3E0C  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 0040  
                                              ___inthi_sp 0931  
                                             _Event_setPE 473A  
                                             _Event_setId 4934  
                                __end_of_XF_scheduleTimer 3738  
                                   TMR0_ISR@CountCallBack 0035  
                                     __end_of_SpiTransfer 3B36  
                                   __end_of_LEAVECRITICAL 4966  
                               __end_of_SYSTEM_Initialize 4994  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 0050  
                        __end_of_TMR0_SetInterruptHandler 4918  
                               _DRV_CANFDSPI_TimeStampSet 48A8  
                                            _XF_pushEvent 2A64  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 497E  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 1E64  
                                                 _CanSend 3F68  
                                                 _XF_init 2BE4  
                                                 _XF_post 3810  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 2250  
                             _DRV_CANFDSPI_DlcToDataBytes 2072  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 2FC4  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2E82  
                                                 ___awmod 2D38  
                                                 uf296999 4296  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 40B6  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 4012  
                                                 __pcinit 46F0  
                                                 __ramtop 1000  
                                                 __ptext0 3358  
                                                 __ptext1 2250  
                                                 __ptext2 3810  
                                                 __ptext3 2A64  
                                                 __ptext4 364E  
                                                 __ptext5 49AC  
                                                 __ptext6 49B2  
                                                 __ptext7 47B0  
                                                 __ptext8 48D0  
                                                 __ptext9 473A  
                                             _SpiTransfer 3A72  
                                               _T0CONbits 0FD5  
                                                 us231999 3CB6  
                                                 us233999 3E1E  
                                                 us235999 3D6A  
                                   _OSCILLATOR_Initialize 49A4  
                                                 us276999 3934  
                                                 us277999 395C  
                             lightContol_FrontLight@F6659 008B  
                                    end_of_initialization 4734  
                              __end_of_DRV_CANFDSPI_Reset 48A8  
                                      __end_of_CanReceive 44CE  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 364E  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3560  
                                               _SPI2_Open 3BEE  
                                _TMR0_SetInterruptHandler 48F6  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 49BC  
                            __end_of_lightControl_Process 28E2  
                                         _SPI2_Initialize 4994  
                                      _spi2_configuration FFE9  
                                     start_initialization 46F0  
                           __end_of_DRV_CANFDSPI_ReadByte 4594  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 46F0  
                          __end_of_lightContol_FrontLight 3EBA  
                              __end_of_XF_unscheduleTimer 464C  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0021  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2A64  
                   _DRV_CANFDSPI_TransmitChannelConfigure 28E2  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 3D58  
                               lightControl_Process@state 003A  
                                   _TMR0_InterruptHandler 0050  
                                  _PIN_MANAGER_Initialize 484E  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 49A4  
                            ??_INTERRUPT_InterruptManager 0040  
                                 motorControl@lastPercent 003F  
                                           _TMR0_CallBack 47E8  
                                    _INTERRUPT_Initialize 49B8  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 2758  
                           __end_of_lightContol_BackLight 3E0C  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 438C  
                        _DRV_CANFDSPI_OperationModeSelect 4306  
                                                i2u303_40 005A  
                                                i2u303_41 0056  
                                                i2u304_40 0068  
                                                i2u304_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 487C  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 481E  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 003B  
                                           _LEAVECRITICAL 494E  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 4934  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 4918  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6642 0021  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 446A  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 3F68  
                      _DRV_CANFDSPI_TransmitChannelUpdate 3EBA  
                            motorControl_Process@oldState 003D  
                                                _carState 0060  
                       __end_of_DRV_CANFDSPI_TefConfigure 3BEE  
                                                __ptext10 4934  
                                                __ptext11 446A  
                                                __ptext20 2420  
                                                __ptext12 074C  
                                                __ptext21 3CA4  
                                                __ptext13 438C  
                                                __ptext30 40B6  
                                                __ptext22 3E0C  
                                                __ptext14 25CC  
                                                __ptext31 38DC  
                                                __ptext23 3D58  
                                                __ptext15 4012  
                                                __ptext40 49A4  
                                                __ptext32 2D38  
                                                __ptext24 3F68  
                                                __ptext16 2BE4  
                                                __ptext41 49B8  
                                                __ptext33 494E  
                                                __ptext25 0000  
                                                __ptext17 46A2  
                                                __ptext50 3104  
                                                __ptext42 4400  
                                                __ptext34 4966  
                                                __ptext26 323E  
                                                __ptext18 4276  
                                                __ptext51 28E2  
                                                __ptext43 414E  
                                                __ptext35 497E  
                                                __ptext27 3EBA  
                                                __ptext19 2758  
                                                __ptext60 464C  
                                                __ptext52 48A8  
                                                __ptext44 0E34  
                                                __ptext36 4776  
                                                __ptext28 14B2  
                                                __ptext61 4532  
                                                __ptext53 4918  
                                                __ptext45 117E  
                                                __ptext37 48F6  
                                                __ptext29 2072  
                                                __ptext70 481E  
                                                __ptext62 44CE  
                                                __ptext54 4594  
                                                __ptext46 41E4  
                                                __ptext38 4994  
                                                __ptext71 47E8  
                                                __ptext63 39A8  
                                                __ptext55 3B36  
                                                __ptext47 1E64  
                                                __ptext39 484E  
                                                __ptext72 49BC  
                                                __ptext64 19BA  
                                                __ptext56 487C  
                                                __ptext48 3560  
                                                __ptext73 3462  
                                                __ptext65 173A  
                                                __ptext57 3BEE  
                                                __ptext49 2FC4  
                                                __ptext74 45F4  
                                                __ptext66 1C18  
                                                __ptext58 2E82  
                                                __ptext67 3738  
                                                __ptext59 4306  
                                                __ptext68 3A72  
                                           _ENTERCRITICAL 4966  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 3560  
                              _XF_decrementAndQueueTimers 3462  
                    __end_of_TMR0_DefaultInterruptHandler 49BE  
                            _TMR0_DefaultInterruptHandler 49BC  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 45F4  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 464C  
                            __end_of_motorControl_Process 25CC  
                                  _DRV_CANFDSPI_WriteWord 3738  
                                            _motorControl 3CA4  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 4276  
                              _DRV_CANFDSPI_FilterDisable 41E4  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 4532  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 45F4  
                            _DRV_CANFDSPI_TimeStampEnable 4594  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 4400  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 438C  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 2250  
                                         _TMR0_Initialize 4776  
                              lightContol_BackLight@F6665 007B  
                          __end_of_PIN_MANAGER_Initialize 487C  
