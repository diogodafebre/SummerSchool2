

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Mar 03 14:29:22 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 23/03/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F97J60 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000FE0                     bsr             equ	4064
   129   000FE9                     fsr0            equ	4073
   130   000FEA                     fsr0h           equ	4074
   131   000FE9                     fsr0l           equ	4073
   132   000FE1                     fsr1            equ	4065
   133   000FE2                     fsr1h           equ	4066
   134   000FE1                     fsr1l           equ	4065
   135   000FD9                     fsr2            equ	4057
   136   000FDA                     fsr2h           equ	4058
   137   000FD9                     fsr2l           equ	4057
   138   000FEF                     indf0           equ	4079
   139   000FE7                     indf1           equ	4071
   140   000FDF                     indf2           equ	4063
   141   000FF2                     intcon          equ	4082
   142   000000                     nvmcon          equ	0
   143   000FF9                     pcl             equ	4089
   144   000FFA                     pclath          equ	4090
   145   000FFB                     pclatu          equ	4091
   146   000FEB                     plusw0          equ	4075
   147   000FE3                     plusw1          equ	4067
   148   000FDB                     plusw2          equ	4059
   149   000FED                     postdec0        equ	4077
   150   000FE5                     postdec1        equ	4069
   151   000FDD                     postdec2        equ	4061
   152   000FEE                     postinc0        equ	4078
   153   000FE6                     postinc1        equ	4070
   154   000FDE                     postinc2        equ	4062
   155   000FEC                     preinc0         equ	4076
   156   000FE4                     preinc1         equ	4068
   157   000FDC                     preinc2         equ	4060
   158   000FF3                     prod            equ	4083
   159   000FF4                     prodh           equ	4084
   160   000FF3                     prodl           equ	4083
   161   000FD8                     status          equ	4056
   162   000FF5                     tablat          equ	4085
   163   000FF6                     tblptr          equ	4086
   164   000FF7                     tblptrh         equ	4087
   165   000FF6                     tblptrl         equ	4086
   166   000FF8                     tblptru         equ	4088
   167   000FFD                     tosl            equ	4093
   168   000FE8                     wreg            equ	4072
   169   000E80                     MAADR5          equ	3712	;# 
   170   000E81                     MAADR6          equ	3713	;# 
   171   000E82                     MAADR3          equ	3714	;# 
   172   000E83                     MAADR4          equ	3715	;# 
   173   000E84                     MAADR1          equ	3716	;# 
   174   000E85                     MAADR2          equ	3717	;# 
   175   000E8A                     MISTAT          equ	3722	;# 
   176   000E97                     EFLOCON         equ	3735	;# 
   177   000E98                     EPAUS           equ	3736	;# 
   178   000E98                     EPAUSL          equ	3736	;# 
   179   000E99                     EPAUSH          equ	3737	;# 
   180   000EA0                     MACON1          equ	3744	;# 
   181   000EA2                     MACON3          equ	3746	;# 
   182   000EA3                     MACON4          equ	3747	;# 
   183   000EA4                     MABBIPG         equ	3748	;# 
   184   000EA6                     MAIPG           equ	3750	;# 
   185   000EA6                     MAIPGL          equ	3750	;# 
   186   000EA7                     MAIPGH          equ	3751	;# 
   187   000EAA                     MAMXFL          equ	3754	;# 
   188   000EAA                     MAMXFLL         equ	3754	;# 
   189   000EAB                     MAMXFLH         equ	3755	;# 
   190   000EB2                     MICMD           equ	3762	;# 
   191   000EB4                     MIREGADR        equ	3764	;# 
   192   000EB6                     MIWR            equ	3766	;# 
   193   000EB6                     MIWRL           equ	3766	;# 
   194   000EB7                     MIWRH           equ	3767	;# 
   195   000EB8                     MIRD            equ	3768	;# 
   196   000EB8                     MIRDL           equ	3768	;# 
   197   000EB9                     MIRDH           equ	3769	;# 
   198   000EC0                     EHT0            equ	3776	;# 
   199   000EC1                     EHT1            equ	3777	;# 
   200   000EC2                     EHT2            equ	3778	;# 
   201   000EC3                     EHT3            equ	3779	;# 
   202   000EC4                     EHT4            equ	3780	;# 
   203   000EC5                     EHT5            equ	3781	;# 
   204   000EC6                     EHT6            equ	3782	;# 
   205   000EC7                     EHT7            equ	3783	;# 
   206   000EC8                     EPMM0           equ	3784	;# 
   207   000EC9                     EPMM1           equ	3785	;# 
   208   000ECA                     EPMM2           equ	3786	;# 
   209   000ECB                     EPMM3           equ	3787	;# 
   210   000ECC                     EPMM4           equ	3788	;# 
   211   000ECD                     EPMM5           equ	3789	;# 
   212   000ECE                     EPMM6           equ	3790	;# 
   213   000ECF                     EPMM7           equ	3791	;# 
   214   000ED0                     EPMCS           equ	3792	;# 
   215   000ED0                     EPMCSL          equ	3792	;# 
   216   000ED1                     EPMCSH          equ	3793	;# 
   217   000ED4                     EPMO            equ	3796	;# 
   218   000ED4                     EPMOL           equ	3796	;# 
   219   000ED5                     EPMOH           equ	3797	;# 
   220   000ED8                     ERXFCON         equ	3800	;# 
   221   000ED9                     EPKTCNT         equ	3801	;# 
   222   000EE2                     EWRPT           equ	3810	;# 
   223   000EE2                     EWRPTL          equ	3810	;# 
   224   000EE3                     EWRPTH          equ	3811	;# 
   225   000EE4                     ETXST           equ	3812	;# 
   226   000EE4                     ETXSTL          equ	3812	;# 
   227   000EE5                     ETXSTH          equ	3813	;# 
   228   000EE6                     ETXND           equ	3814	;# 
   229   000EE6                     ETXNDL          equ	3814	;# 
   230   000EE7                     ETXNDH          equ	3815	;# 
   231   000EE8                     ERXST           equ	3816	;# 
   232   000EE8                     ERXSTL          equ	3816	;# 
   233   000EE9                     ERXSTH          equ	3817	;# 
   234   000EEA                     ERXND           equ	3818	;# 
   235   000EEA                     ERXNDL          equ	3818	;# 
   236   000EEB                     ERXNDH          equ	3819	;# 
   237   000EEC                     ERXRDPT         equ	3820	;# 
   238   000EEC                     ERXRDPTL        equ	3820	;# 
   239   000EED                     ERXRDPTH        equ	3821	;# 
   240   000EEE                     ERXWRPT         equ	3822	;# 
   241   000EEE                     ERXWRPTL        equ	3822	;# 
   242   000EEF                     ERXWRPTH        equ	3823	;# 
   243   000EF0                     EDMAST          equ	3824	;# 
   244   000EF0                     EDMASTL         equ	3824	;# 
   245   000EF1                     EDMASTH         equ	3825	;# 
   246   000EF2                     EDMAND          equ	3826	;# 
   247   000EF2                     EDMANDL         equ	3826	;# 
   248   000EF3                     EDMANDH         equ	3827	;# 
   249   000EF4                     EDMADST         equ	3828	;# 
   250   000EF4                     EDMADSTL        equ	3828	;# 
   251   000EF5                     EDMADSTH        equ	3829	;# 
   252   000EF6                     EDMACS          equ	3830	;# 
   253   000EF6                     EDMACSL         equ	3830	;# 
   254   000EF7                     EDMACSH         equ	3831	;# 
   255   000EFB                     EIE             equ	3835	;# 
   256   000EFD                     ESTAT           equ	3837	;# 
   257   000EFE                     ECON2           equ	3838	;# 
   258   000F60                     EIR             equ	3936	;# 
   259   000F61                     EDATA           equ	3937	;# 
   260   000F62                     SSP2CON2        equ	3938	;# 
   261   000F63                     SSP2CON1        equ	3939	;# 
   262   000F64                     SSP2STAT        equ	3940	;# 
   263   000F65                     SSP2ADD         equ	3941	;# 
   264   000F66                     SSP2BUF         equ	3942	;# 
   265   000F67                     ECCP2DEL        equ	3943	;# 
   266   000F68                     ECCP2AS         equ	3944	;# 
   267   000F69                     ECCP3DEL        equ	3945	;# 
   268   000F6A                     ECCP3AS         equ	3946	;# 
   269   000F6B                     RCSTA2          equ	3947	;# 
   270   000F6C                     TXSTA2          equ	3948	;# 
   271   000F6D                     TXREG2          equ	3949	;# 
   272   000F6E                     RCREG2          equ	3950	;# 
   273   000F6F                     SPBRG2          equ	3951	;# 
   274   000F70                     CCP5CON         equ	3952	;# 
   275   000F71                     CCPR5           equ	3953	;# 
   276   000F71                     CCPR5L          equ	3953	;# 
   277   000F72                     CCPR5H          equ	3954	;# 
   278   000F73                     CCP4CON         equ	3955	;# 
   279   000F74                     CCPR4           equ	3956	;# 
   280   000F74                     CCPR4L          equ	3956	;# 
   281   000F75                     CCPR4H          equ	3957	;# 
   282   000F76                     T4CON           equ	3958	;# 
   283   000F77                     PR4             equ	3959	;# 
   284   000F78                     TMR4            equ	3960	;# 
   285   000F79                     ECCP1DEL        equ	3961	;# 
   286   000F7A                     ERDPT           equ	3962	;# 
   287   000F7A                     ERDPTL          equ	3962	;# 
   288   000F7B                     ERDPTH          equ	3963	;# 
   289   000F7C                     BAUDCON2        equ	3964	;# 
   290   000F7C                     BAUDCTL2        equ	3964	;# 
   291   000F7D                     SPBRGH2         equ	3965	;# 
   292   000F7E                     BAUDCON1        equ	3966	;# 
   293   000F7E                     BAUDCON         equ	3966	;# 
   294   000F7E                     BAUDCTL         equ	3966	;# 
   295   000F7E                     BAUDCTL1        equ	3966	;# 
   296   000F7F                     SPBRGH1         equ	3967	;# 
   297   000F7F                     SPBRGH          equ	3967	;# 
   298   000F80                     PORTA           equ	3968	;# 
   299   000F81                     PORTB           equ	3969	;# 
   300   000F82                     PORTC           equ	3970	;# 
   301   000F83                     PORTD           equ	3971	;# 
   302   000F84                     PORTE           equ	3972	;# 
   303   000F85                     PORTF           equ	3973	;# 
   304   000F86                     PORTG           equ	3974	;# 
   305   000F87                     PORTH           equ	3975	;# 
   306   000F88                     PORTJ           equ	3976	;# 
   307   000F89                     LATA            equ	3977	;# 
   308   000F8A                     LATB            equ	3978	;# 
   309   000F8B                     LATC            equ	3979	;# 
   310   000F8C                     LATD            equ	3980	;# 
   311   000F8D                     LATE            equ	3981	;# 
   312   000F8E                     LATF            equ	3982	;# 
   313   000F8F                     LATG            equ	3983	;# 
   314   000F90                     LATH            equ	3984	;# 
   315   000F91                     LATJ            equ	3985	;# 
   316   000F92                     TRISA           equ	3986	;# 
   317   000F92                     DDRA            equ	3986	;# 
   318   000F93                     TRISB           equ	3987	;# 
   319   000F93                     DDRB            equ	3987	;# 
   320   000F94                     TRISC           equ	3988	;# 
   321   000F94                     DDRC            equ	3988	;# 
   322   000F95                     TRISD           equ	3989	;# 
   323   000F95                     DDRD            equ	3989	;# 
   324   000F96                     TRISE           equ	3990	;# 
   325   000F96                     DDRE            equ	3990	;# 
   326   000F97                     TRISF           equ	3991	;# 
   327   000F97                     DDRF            equ	3991	;# 
   328   000F98                     TRISG           equ	3992	;# 
   329   000F98                     DDRG            equ	3992	;# 
   330   000F99                     TRISH           equ	3993	;# 
   331   000F99                     DDRH            equ	3993	;# 
   332   000F9A                     TRISJ           equ	3994	;# 
   333   000F9A                     DDRJ            equ	3994	;# 
   334   000F9B                     OSCTUNE         equ	3995	;# 
   335   000F9C                     MEMCON          equ	3996	;# 
   336   000F9D                     PIE1            equ	3997	;# 
   337   000F9E                     PIR1            equ	3998	;# 
   338   000F9F                     IPR1            equ	3999	;# 
   339   000FA0                     PIE2            equ	4000	;# 
   340   000FA1                     PIR2            equ	4001	;# 
   341   000FA2                     IPR2            equ	4002	;# 
   342   000FA3                     PIE3            equ	4003	;# 
   343   000FA4                     PIR3            equ	4004	;# 
   344   000FA5                     IPR3            equ	4005	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FAB                     RCSTA1          equ	4011	;# 
   348   000FAB                     RCSTA           equ	4011	;# 
   349   000FAC                     TXSTA1          equ	4012	;# 
   350   000FAC                     TXSTA           equ	4012	;# 
   351   000FAD                     TXREG1          equ	4013	;# 
   352   000FAD                     TXREG           equ	4013	;# 
   353   000FAE                     RCREG1          equ	4014	;# 
   354   000FAE                     RCREG           equ	4014	;# 
   355   000FAF                     SPBRG1          equ	4015	;# 
   356   000FAF                     SPBRG           equ	4015	;# 
   357   000FB0                     PSPCON          equ	4016	;# 
   358   000FB1                     T3CON           equ	4017	;# 
   359   000FB2                     TMR3            equ	4018	;# 
   360   000FB2                     TMR3L           equ	4018	;# 
   361   000FB3                     TMR3H           equ	4019	;# 
   362   000FB4                     CMCON           equ	4020	;# 
   363   000FB5                     CVRCON          equ	4021	;# 
   364   000FB6                     ECCP1AS         equ	4022	;# 
   365   000FB7                     CCP3CON         equ	4023	;# 
   366   000FB7                     ECCP3CON        equ	4023	;# 
   367   000FB8                     CCPR3           equ	4024	;# 
   368   000FB8                     CCPR3L          equ	4024	;# 
   369   000FB9                     CCPR3H          equ	4025	;# 
   370   000FBA                     CCP2CON         equ	4026	;# 
   371   000FBA                     ECCP2CON        equ	4026	;# 
   372   000FBB                     CCPR2           equ	4027	;# 
   373   000FBB                     CCPR2L          equ	4027	;# 
   374   000FBC                     CCPR2H          equ	4028	;# 
   375   000FBD                     CCP1CON         equ	4029	;# 
   376   000FBD                     ECCP1CON        equ	4029	;# 
   377   000FBE                     CCPR1           equ	4030	;# 
   378   000FBE                     CCPR1L          equ	4030	;# 
   379   000FBF                     CCPR1H          equ	4031	;# 
   380   000FC0                     ADCON2          equ	4032	;# 
   381   000FC1                     ADCON1          equ	4033	;# 
   382   000FC2                     ADCON0          equ	4034	;# 
   383   000FC3                     ADRES           equ	4035	;# 
   384   000FC3                     ADRESL          equ	4035	;# 
   385   000FC4                     ADRESH          equ	4036	;# 
   386   000FC5                     SSP1CON2        equ	4037	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSP1CON1        equ	4038	;# 
   389   000FC6                     SSPCON1         equ	4038	;# 
   390   000FC7                     SSP1STAT        equ	4039	;# 
   391   000FC7                     SSPSTAT         equ	4039	;# 
   392   000FC8                     SSP1ADD         equ	4040	;# 
   393   000FC8                     SSPADD          equ	4040	;# 
   394   000FC9                     SSP1BUF         equ	4041	;# 
   395   000FC9                     SSPBUF          equ	4041	;# 
   396   000FCA                     T2CON           equ	4042	;# 
   397   000FCB                     PR2             equ	4043	;# 
   398   000FCC                     TMR2            equ	4044	;# 
   399   000FCD                     T1CON           equ	4045	;# 
   400   000FCE                     TMR1            equ	4046	;# 
   401   000FCE                     TMR1L           equ	4046	;# 
   402   000FCF                     TMR1H           equ	4047	;# 
   403   000FD0                     RCON            equ	4048	;# 
   404   000FD1                     WDTCON          equ	4049	;# 
   405   000FD2                     ECON1           equ	4050	;# 
   406   000FD3                     OSCCON          equ	4051	;# 
   407   000FD5                     T0CON           equ	4053	;# 
   408   000FD6                     TMR0            equ	4054	;# 
   409   000FD6                     TMR0L           equ	4054	;# 
   410   000FD7                     TMR0H           equ	4055	;# 
   411   000FD8                     STATUS          equ	4056	;# 
   412   000FD9                     FSR2            equ	4057	;# 
   413   000FD9                     FSR2L           equ	4057	;# 
   414   000FDA                     FSR2H           equ	4058	;# 
   415   000FDB                     PLUSW2          equ	4059	;# 
   416   000FDC                     PREINC2         equ	4060	;# 
   417   000FDD                     POSTDEC2        equ	4061	;# 
   418   000FDE                     POSTINC2        equ	4062	;# 
   419   000FDF                     INDF2           equ	4063	;# 
   420   000FE0                     BSR             equ	4064	;# 
   421   000FE1                     FSR1            equ	4065	;# 
   422   000FE1                     FSR1L           equ	4065	;# 
   423   000FE2                     FSR1H           equ	4066	;# 
   424   000FE3                     PLUSW1          equ	4067	;# 
   425   000FE4                     PREINC1         equ	4068	;# 
   426   000FE5                     POSTDEC1        equ	4069	;# 
   427   000FE6                     POSTINC1        equ	4070	;# 
   428   000FE7                     INDF1           equ	4071	;# 
   429   000FE8                     WREG            equ	4072	;# 
   430   000FE9                     FSR0            equ	4073	;# 
   431   000FE9                     FSR0L           equ	4073	;# 
   432   000FEA                     FSR0H           equ	4074	;# 
   433   000FEB                     PLUSW0          equ	4075	;# 
   434   000FEC                     PREINC0         equ	4076	;# 
   435   000FED                     POSTDEC0        equ	4077	;# 
   436   000FEE                     POSTINC0        equ	4078	;# 
   437   000FEF                     INDF0           equ	4079	;# 
   438   000FF0                     INTCON3         equ	4080	;# 
   439   000FF1                     INTCON2         equ	4081	;# 
   440   000FF2                     INTCON          equ	4082	;# 
   441   000FF3                     PROD            equ	4083	;# 
   442   000FF3                     PRODL           equ	4083	;# 
   443   000FF4                     PRODH           equ	4084	;# 
   444   000FF5                     TABLAT          equ	4085	;# 
   445   000FF6                     TBLPTR          equ	4086	;# 
   446   000FF6                     TBLPTRL         equ	4086	;# 
   447   000FF7                     TBLPTRH         equ	4087	;# 
   448   000FF8                     TBLPTRU         equ	4088	;# 
   449   000FF9                     PCLAT           equ	4089	;# 
   450   000FF9                     PC              equ	4089	;# 
   451   000FF9                     PCL             equ	4089	;# 
   452   000FFA                     PCLATH          equ	4090	;# 
   453   000FFB                     PCLATU          equ	4091	;# 
   454   000FFC                     STKPTR          equ	4092	;# 
   455   000FFD                     TOS             equ	4093	;# 
   456   000FFD                     TOSL            equ	4093	;# 
   457   000FFE                     TOSH            equ	4094	;# 
   458   000FFF                     TOSU            equ	4095	;# 
   459   000E80                     MAADR5          equ	3712	;# 
   460   000E81                     MAADR6          equ	3713	;# 
   461   000E82                     MAADR3          equ	3714	;# 
   462   000E83                     MAADR4          equ	3715	;# 
   463   000E84                     MAADR1          equ	3716	;# 
   464   000E85                     MAADR2          equ	3717	;# 
   465   000E8A                     MISTAT          equ	3722	;# 
   466   000E97                     EFLOCON         equ	3735	;# 
   467   000E98                     EPAUS           equ	3736	;# 
   468   000E98                     EPAUSL          equ	3736	;# 
   469   000E99                     EPAUSH          equ	3737	;# 
   470   000EA0                     MACON1          equ	3744	;# 
   471   000EA2                     MACON3          equ	3746	;# 
   472   000EA3                     MACON4          equ	3747	;# 
   473   000EA4                     MABBIPG         equ	3748	;# 
   474   000EA6                     MAIPG           equ	3750	;# 
   475   000EA6                     MAIPGL          equ	3750	;# 
   476   000EA7                     MAIPGH          equ	3751	;# 
   477   000EAA                     MAMXFL          equ	3754	;# 
   478   000EAA                     MAMXFLL         equ	3754	;# 
   479   000EAB                     MAMXFLH         equ	3755	;# 
   480   000EB2                     MICMD           equ	3762	;# 
   481   000EB4                     MIREGADR        equ	3764	;# 
   482   000EB6                     MIWR            equ	3766	;# 
   483   000EB6                     MIWRL           equ	3766	;# 
   484   000EB7                     MIWRH           equ	3767	;# 
   485   000EB8                     MIRD            equ	3768	;# 
   486   000EB8                     MIRDL           equ	3768	;# 
   487   000EB9                     MIRDH           equ	3769	;# 
   488   000EC0                     EHT0            equ	3776	;# 
   489   000EC1                     EHT1            equ	3777	;# 
   490   000EC2                     EHT2            equ	3778	;# 
   491   000EC3                     EHT3            equ	3779	;# 
   492   000EC4                     EHT4            equ	3780	;# 
   493   000EC5                     EHT5            equ	3781	;# 
   494   000EC6                     EHT6            equ	3782	;# 
   495   000EC7                     EHT7            equ	3783	;# 
   496   000EC8                     EPMM0           equ	3784	;# 
   497   000EC9                     EPMM1           equ	3785	;# 
   498   000ECA                     EPMM2           equ	3786	;# 
   499   000ECB                     EPMM3           equ	3787	;# 
   500   000ECC                     EPMM4           equ	3788	;# 
   501   000ECD                     EPMM5           equ	3789	;# 
   502   000ECE                     EPMM6           equ	3790	;# 
   503   000ECF                     EPMM7           equ	3791	;# 
   504   000ED0                     EPMCS           equ	3792	;# 
   505   000ED0                     EPMCSL          equ	3792	;# 
   506   000ED1                     EPMCSH          equ	3793	;# 
   507   000ED4                     EPMO            equ	3796	;# 
   508   000ED4                     EPMOL           equ	3796	;# 
   509   000ED5                     EPMOH           equ	3797	;# 
   510   000ED8                     ERXFCON         equ	3800	;# 
   511   000ED9                     EPKTCNT         equ	3801	;# 
   512   000EE2                     EWRPT           equ	3810	;# 
   513   000EE2                     EWRPTL          equ	3810	;# 
   514   000EE3                     EWRPTH          equ	3811	;# 
   515   000EE4                     ETXST           equ	3812	;# 
   516   000EE4                     ETXSTL          equ	3812	;# 
   517   000EE5                     ETXSTH          equ	3813	;# 
   518   000EE6                     ETXND           equ	3814	;# 
   519   000EE6                     ETXNDL          equ	3814	;# 
   520   000EE7                     ETXNDH          equ	3815	;# 
   521   000EE8                     ERXST           equ	3816	;# 
   522   000EE8                     ERXSTL          equ	3816	;# 
   523   000EE9                     ERXSTH          equ	3817	;# 
   524   000EEA                     ERXND           equ	3818	;# 
   525   000EEA                     ERXNDL          equ	3818	;# 
   526   000EEB                     ERXNDH          equ	3819	;# 
   527   000EEC                     ERXRDPT         equ	3820	;# 
   528   000EEC                     ERXRDPTL        equ	3820	;# 
   529   000EED                     ERXRDPTH        equ	3821	;# 
   530   000EEE                     ERXWRPT         equ	3822	;# 
   531   000EEE                     ERXWRPTL        equ	3822	;# 
   532   000EEF                     ERXWRPTH        equ	3823	;# 
   533   000EF0                     EDMAST          equ	3824	;# 
   534   000EF0                     EDMASTL         equ	3824	;# 
   535   000EF1                     EDMASTH         equ	3825	;# 
   536   000EF2                     EDMAND          equ	3826	;# 
   537   000EF2                     EDMANDL         equ	3826	;# 
   538   000EF3                     EDMANDH         equ	3827	;# 
   539   000EF4                     EDMADST         equ	3828	;# 
   540   000EF4                     EDMADSTL        equ	3828	;# 
   541   000EF5                     EDMADSTH        equ	3829	;# 
   542   000EF6                     EDMACS          equ	3830	;# 
   543   000EF6                     EDMACSL         equ	3830	;# 
   544   000EF7                     EDMACSH         equ	3831	;# 
   545   000EFB                     EIE             equ	3835	;# 
   546   000EFD                     ESTAT           equ	3837	;# 
   547   000EFE                     ECON2           equ	3838	;# 
   548   000F60                     EIR             equ	3936	;# 
   549   000F61                     EDATA           equ	3937	;# 
   550   000F62                     SSP2CON2        equ	3938	;# 
   551   000F63                     SSP2CON1        equ	3939	;# 
   552   000F64                     SSP2STAT        equ	3940	;# 
   553   000F65                     SSP2ADD         equ	3941	;# 
   554   000F66                     SSP2BUF         equ	3942	;# 
   555   000F67                     ECCP2DEL        equ	3943	;# 
   556   000F68                     ECCP2AS         equ	3944	;# 
   557   000F69                     ECCP3DEL        equ	3945	;# 
   558   000F6A                     ECCP3AS         equ	3946	;# 
   559   000F6B                     RCSTA2          equ	3947	;# 
   560   000F6C                     TXSTA2          equ	3948	;# 
   561   000F6D                     TXREG2          equ	3949	;# 
   562   000F6E                     RCREG2          equ	3950	;# 
   563   000F6F                     SPBRG2          equ	3951	;# 
   564   000F70                     CCP5CON         equ	3952	;# 
   565   000F71                     CCPR5           equ	3953	;# 
   566   000F71                     CCPR5L          equ	3953	;# 
   567   000F72                     CCPR5H          equ	3954	;# 
   568   000F73                     CCP4CON         equ	3955	;# 
   569   000F74                     CCPR4           equ	3956	;# 
   570   000F74                     CCPR4L          equ	3956	;# 
   571   000F75                     CCPR4H          equ	3957	;# 
   572   000F76                     T4CON           equ	3958	;# 
   573   000F77                     PR4             equ	3959	;# 
   574   000F78                     TMR4            equ	3960	;# 
   575   000F79                     ECCP1DEL        equ	3961	;# 
   576   000F7A                     ERDPT           equ	3962	;# 
   577   000F7A                     ERDPTL          equ	3962	;# 
   578   000F7B                     ERDPTH          equ	3963	;# 
   579   000F7C                     BAUDCON2        equ	3964	;# 
   580   000F7C                     BAUDCTL2        equ	3964	;# 
   581   000F7D                     SPBRGH2         equ	3965	;# 
   582   000F7E                     BAUDCON1        equ	3966	;# 
   583   000F7E                     BAUDCON         equ	3966	;# 
   584   000F7E                     BAUDCTL         equ	3966	;# 
   585   000F7E                     BAUDCTL1        equ	3966	;# 
   586   000F7F                     SPBRGH1         equ	3967	;# 
   587   000F7F                     SPBRGH          equ	3967	;# 
   588   000F80                     PORTA           equ	3968	;# 
   589   000F81                     PORTB           equ	3969	;# 
   590   000F82                     PORTC           equ	3970	;# 
   591   000F83                     PORTD           equ	3971	;# 
   592   000F84                     PORTE           equ	3972	;# 
   593   000F85                     PORTF           equ	3973	;# 
   594   000F86                     PORTG           equ	3974	;# 
   595   000F87                     PORTH           equ	3975	;# 
   596   000F88                     PORTJ           equ	3976	;# 
   597   000F89                     LATA            equ	3977	;# 
   598   000F8A                     LATB            equ	3978	;# 
   599   000F8B                     LATC            equ	3979	;# 
   600   000F8C                     LATD            equ	3980	;# 
   601   000F8D                     LATE            equ	3981	;# 
   602   000F8E                     LATF            equ	3982	;# 
   603   000F8F                     LATG            equ	3983	;# 
   604   000F90                     LATH            equ	3984	;# 
   605   000F91                     LATJ            equ	3985	;# 
   606   000F92                     TRISA           equ	3986	;# 
   607   000F92                     DDRA            equ	3986	;# 
   608   000F93                     TRISB           equ	3987	;# 
   609   000F93                     DDRB            equ	3987	;# 
   610   000F94                     TRISC           equ	3988	;# 
   611   000F94                     DDRC            equ	3988	;# 
   612   000F95                     TRISD           equ	3989	;# 
   613   000F95                     DDRD            equ	3989	;# 
   614   000F96                     TRISE           equ	3990	;# 
   615   000F96                     DDRE            equ	3990	;# 
   616   000F97                     TRISF           equ	3991	;# 
   617   000F97                     DDRF            equ	3991	;# 
   618   000F98                     TRISG           equ	3992	;# 
   619   000F98                     DDRG            equ	3992	;# 
   620   000F99                     TRISH           equ	3993	;# 
   621   000F99                     DDRH            equ	3993	;# 
   622   000F9A                     TRISJ           equ	3994	;# 
   623   000F9A                     DDRJ            equ	3994	;# 
   624   000F9B                     OSCTUNE         equ	3995	;# 
   625   000F9C                     MEMCON          equ	3996	;# 
   626   000F9D                     PIE1            equ	3997	;# 
   627   000F9E                     PIR1            equ	3998	;# 
   628   000F9F                     IPR1            equ	3999	;# 
   629   000FA0                     PIE2            equ	4000	;# 
   630   000FA1                     PIR2            equ	4001	;# 
   631   000FA2                     IPR2            equ	4002	;# 
   632   000FA3                     PIE3            equ	4003	;# 
   633   000FA4                     PIR3            equ	4004	;# 
   634   000FA5                     IPR3            equ	4005	;# 
   635   000FA6                     EECON1          equ	4006	;# 
   636   000FA7                     EECON2          equ	4007	;# 
   637   000FAB                     RCSTA1          equ	4011	;# 
   638   000FAB                     RCSTA           equ	4011	;# 
   639   000FAC                     TXSTA1          equ	4012	;# 
   640   000FAC                     TXSTA           equ	4012	;# 
   641   000FAD                     TXREG1          equ	4013	;# 
   642   000FAD                     TXREG           equ	4013	;# 
   643   000FAE                     RCREG1          equ	4014	;# 
   644   000FAE                     RCREG           equ	4014	;# 
   645   000FAF                     SPBRG1          equ	4015	;# 
   646   000FAF                     SPBRG           equ	4015	;# 
   647   000FB0                     PSPCON          equ	4016	;# 
   648   000FB1                     T3CON           equ	4017	;# 
   649   000FB2                     TMR3            equ	4018	;# 
   650   000FB2                     TMR3L           equ	4018	;# 
   651   000FB3                     TMR3H           equ	4019	;# 
   652   000FB4                     CMCON           equ	4020	;# 
   653   000FB5                     CVRCON          equ	4021	;# 
   654   000FB6                     ECCP1AS         equ	4022	;# 
   655   000FB7                     CCP3CON         equ	4023	;# 
   656   000FB7                     ECCP3CON        equ	4023	;# 
   657   000FB8                     CCPR3           equ	4024	;# 
   658   000FB8                     CCPR3L          equ	4024	;# 
   659   000FB9                     CCPR3H          equ	4025	;# 
   660   000FBA                     CCP2CON         equ	4026	;# 
   661   000FBA                     ECCP2CON        equ	4026	;# 
   662   000FBB                     CCPR2           equ	4027	;# 
   663   000FBB                     CCPR2L          equ	4027	;# 
   664   000FBC                     CCPR2H          equ	4028	;# 
   665   000FBD                     CCP1CON         equ	4029	;# 
   666   000FBD                     ECCP1CON        equ	4029	;# 
   667   000FBE                     CCPR1           equ	4030	;# 
   668   000FBE                     CCPR1L          equ	4030	;# 
   669   000FBF                     CCPR1H          equ	4031	;# 
   670   000FC0                     ADCON2          equ	4032	;# 
   671   000FC1                     ADCON1          equ	4033	;# 
   672   000FC2                     ADCON0          equ	4034	;# 
   673   000FC3                     ADRES           equ	4035	;# 
   674   000FC3                     ADRESL          equ	4035	;# 
   675   000FC4                     ADRESH          equ	4036	;# 
   676   000FC5                     SSP1CON2        equ	4037	;# 
   677   000FC5                     SSPCON2         equ	4037	;# 
   678   000FC6                     SSP1CON1        equ	4038	;# 
   679   000FC6                     SSPCON1         equ	4038	;# 
   680   000FC7                     SSP1STAT        equ	4039	;# 
   681   000FC7                     SSPSTAT         equ	4039	;# 
   682   000FC8                     SSP1ADD         equ	4040	;# 
   683   000FC8                     SSPADD          equ	4040	;# 
   684   000FC9                     SSP1BUF         equ	4041	;# 
   685   000FC9                     SSPBUF          equ	4041	;# 
   686   000FCA                     T2CON           equ	4042	;# 
   687   000FCB                     PR2             equ	4043	;# 
   688   000FCC                     TMR2            equ	4044	;# 
   689   000FCD                     T1CON           equ	4045	;# 
   690   000FCE                     TMR1            equ	4046	;# 
   691   000FCE                     TMR1L           equ	4046	;# 
   692   000FCF                     TMR1H           equ	4047	;# 
   693   000FD0                     RCON            equ	4048	;# 
   694   000FD1                     WDTCON          equ	4049	;# 
   695   000FD2                     ECON1           equ	4050	;# 
   696   000FD3                     OSCCON          equ	4051	;# 
   697   000FD5                     T0CON           equ	4053	;# 
   698   000FD6                     TMR0            equ	4054	;# 
   699   000FD6                     TMR0L           equ	4054	;# 
   700   000FD7                     TMR0H           equ	4055	;# 
   701   000FD8                     STATUS          equ	4056	;# 
   702   000FD9                     FSR2            equ	4057	;# 
   703   000FD9                     FSR2L           equ	4057	;# 
   704   000FDA                     FSR2H           equ	4058	;# 
   705   000FDB                     PLUSW2          equ	4059	;# 
   706   000FDC                     PREINC2         equ	4060	;# 
   707   000FDD                     POSTDEC2        equ	4061	;# 
   708   000FDE                     POSTINC2        equ	4062	;# 
   709   000FDF                     INDF2           equ	4063	;# 
   710   000FE0                     BSR             equ	4064	;# 
   711   000FE1                     FSR1            equ	4065	;# 
   712   000FE1                     FSR1L           equ	4065	;# 
   713   000FE2                     FSR1H           equ	4066	;# 
   714   000FE3                     PLUSW1          equ	4067	;# 
   715   000FE4                     PREINC1         equ	4068	;# 
   716   000FE5                     POSTDEC1        equ	4069	;# 
   717   000FE6                     POSTINC1        equ	4070	;# 
   718   000FE7                     INDF1           equ	4071	;# 
   719   000FE8                     WREG            equ	4072	;# 
   720   000FE9                     FSR0            equ	4073	;# 
   721   000FE9                     FSR0L           equ	4073	;# 
   722   000FEA                     FSR0H           equ	4074	;# 
   723   000FEB                     PLUSW0          equ	4075	;# 
   724   000FEC                     PREINC0         equ	4076	;# 
   725   000FED                     POSTDEC0        equ	4077	;# 
   726   000FEE                     POSTINC0        equ	4078	;# 
   727   000FEF                     INDF0           equ	4079	;# 
   728   000FF0                     INTCON3         equ	4080	;# 
   729   000FF1                     INTCON2         equ	4081	;# 
   730   000FF2                     INTCON          equ	4082	;# 
   731   000FF3                     PROD            equ	4083	;# 
   732   000FF3                     PRODL           equ	4083	;# 
   733   000FF4                     PRODH           equ	4084	;# 
   734   000FF5                     TABLAT          equ	4085	;# 
   735   000FF6                     TBLPTR          equ	4086	;# 
   736   000FF6                     TBLPTRL         equ	4086	;# 
   737   000FF7                     TBLPTRH         equ	4087	;# 
   738   000FF8                     TBLPTRU         equ	4088	;# 
   739   000FF9                     PCLAT           equ	4089	;# 
   740   000FF9                     PC              equ	4089	;# 
   741   000FF9                     PCL             equ	4089	;# 
   742   000FFA                     PCLATH          equ	4090	;# 
   743   000FFB                     PCLATU          equ	4091	;# 
   744   000FFC                     STKPTR          equ	4092	;# 
   745   000FFD                     TOS             equ	4093	;# 
   746   000FFD                     TOSL            equ	4093	;# 
   747   000FFE                     TOSH            equ	4094	;# 
   748   000FFF                     TOSU            equ	4095	;# 
   749   000E80                     MAADR5          equ	3712	;# 
   750   000E81                     MAADR6          equ	3713	;# 
   751   000E82                     MAADR3          equ	3714	;# 
   752   000E83                     MAADR4          equ	3715	;# 
   753   000E84                     MAADR1          equ	3716	;# 
   754   000E85                     MAADR2          equ	3717	;# 
   755   000E8A                     MISTAT          equ	3722	;# 
   756   000E97                     EFLOCON         equ	3735	;# 
   757   000E98                     EPAUS           equ	3736	;# 
   758   000E98                     EPAUSL          equ	3736	;# 
   759   000E99                     EPAUSH          equ	3737	;# 
   760   000EA0                     MACON1          equ	3744	;# 
   761   000EA2                     MACON3          equ	3746	;# 
   762   000EA3                     MACON4          equ	3747	;# 
   763   000EA4                     MABBIPG         equ	3748	;# 
   764   000EA6                     MAIPG           equ	3750	;# 
   765   000EA6                     MAIPGL          equ	3750	;# 
   766   000EA7                     MAIPGH          equ	3751	;# 
   767   000EAA                     MAMXFL          equ	3754	;# 
   768   000EAA                     MAMXFLL         equ	3754	;# 
   769   000EAB                     MAMXFLH         equ	3755	;# 
   770   000EB2                     MICMD           equ	3762	;# 
   771   000EB4                     MIREGADR        equ	3764	;# 
   772   000EB6                     MIWR            equ	3766	;# 
   773   000EB6                     MIWRL           equ	3766	;# 
   774   000EB7                     MIWRH           equ	3767	;# 
   775   000EB8                     MIRD            equ	3768	;# 
   776   000EB8                     MIRDL           equ	3768	;# 
   777   000EB9                     MIRDH           equ	3769	;# 
   778   000EC0                     EHT0            equ	3776	;# 
   779   000EC1                     EHT1            equ	3777	;# 
   780   000EC2                     EHT2            equ	3778	;# 
   781   000EC3                     EHT3            equ	3779	;# 
   782   000EC4                     EHT4            equ	3780	;# 
   783   000EC5                     EHT5            equ	3781	;# 
   784   000EC6                     EHT6            equ	3782	;# 
   785   000EC7                     EHT7            equ	3783	;# 
   786   000EC8                     EPMM0           equ	3784	;# 
   787   000EC9                     EPMM1           equ	3785	;# 
   788   000ECA                     EPMM2           equ	3786	;# 
   789   000ECB                     EPMM3           equ	3787	;# 
   790   000ECC                     EPMM4           equ	3788	;# 
   791   000ECD                     EPMM5           equ	3789	;# 
   792   000ECE                     EPMM6           equ	3790	;# 
   793   000ECF                     EPMM7           equ	3791	;# 
   794   000ED0                     EPMCS           equ	3792	;# 
   795   000ED0                     EPMCSL          equ	3792	;# 
   796   000ED1                     EPMCSH          equ	3793	;# 
   797   000ED4                     EPMO            equ	3796	;# 
   798   000ED4                     EPMOL           equ	3796	;# 
   799   000ED5                     EPMOH           equ	3797	;# 
   800   000ED8                     ERXFCON         equ	3800	;# 
   801   000ED9                     EPKTCNT         equ	3801	;# 
   802   000EE2                     EWRPT           equ	3810	;# 
   803   000EE2                     EWRPTL          equ	3810	;# 
   804   000EE3                     EWRPTH          equ	3811	;# 
   805   000EE4                     ETXST           equ	3812	;# 
   806   000EE4                     ETXSTL          equ	3812	;# 
   807   000EE5                     ETXSTH          equ	3813	;# 
   808   000EE6                     ETXND           equ	3814	;# 
   809   000EE6                     ETXNDL          equ	3814	;# 
   810   000EE7                     ETXNDH          equ	3815	;# 
   811   000EE8                     ERXST           equ	3816	;# 
   812   000EE8                     ERXSTL          equ	3816	;# 
   813   000EE9                     ERXSTH          equ	3817	;# 
   814   000EEA                     ERXND           equ	3818	;# 
   815   000EEA                     ERXNDL          equ	3818	;# 
   816   000EEB                     ERXNDH          equ	3819	;# 
   817   000EEC                     ERXRDPT         equ	3820	;# 
   818   000EEC                     ERXRDPTL        equ	3820	;# 
   819   000EED                     ERXRDPTH        equ	3821	;# 
   820   000EEE                     ERXWRPT         equ	3822	;# 
   821   000EEE                     ERXWRPTL        equ	3822	;# 
   822   000EEF                     ERXWRPTH        equ	3823	;# 
   823   000EF0                     EDMAST          equ	3824	;# 
   824   000EF0                     EDMASTL         equ	3824	;# 
   825   000EF1                     EDMASTH         equ	3825	;# 
   826   000EF2                     EDMAND          equ	3826	;# 
   827   000EF2                     EDMANDL         equ	3826	;# 
   828   000EF3                     EDMANDH         equ	3827	;# 
   829   000EF4                     EDMADST         equ	3828	;# 
   830   000EF4                     EDMADSTL        equ	3828	;# 
   831   000EF5                     EDMADSTH        equ	3829	;# 
   832   000EF6                     EDMACS          equ	3830	;# 
   833   000EF6                     EDMACSL         equ	3830	;# 
   834   000EF7                     EDMACSH         equ	3831	;# 
   835   000EFB                     EIE             equ	3835	;# 
   836   000EFD                     ESTAT           equ	3837	;# 
   837   000EFE                     ECON2           equ	3838	;# 
   838   000F60                     EIR             equ	3936	;# 
   839   000F61                     EDATA           equ	3937	;# 
   840   000F62                     SSP2CON2        equ	3938	;# 
   841   000F63                     SSP2CON1        equ	3939	;# 
   842   000F64                     SSP2STAT        equ	3940	;# 
   843   000F65                     SSP2ADD         equ	3941	;# 
   844   000F66                     SSP2BUF         equ	3942	;# 
   845   000F67                     ECCP2DEL        equ	3943	;# 
   846   000F68                     ECCP2AS         equ	3944	;# 
   847   000F69                     ECCP3DEL        equ	3945	;# 
   848   000F6A                     ECCP3AS         equ	3946	;# 
   849   000F6B                     RCSTA2          equ	3947	;# 
   850   000F6C                     TXSTA2          equ	3948	;# 
   851   000F6D                     TXREG2          equ	3949	;# 
   852   000F6E                     RCREG2          equ	3950	;# 
   853   000F6F                     SPBRG2          equ	3951	;# 
   854   000F70                     CCP5CON         equ	3952	;# 
   855   000F71                     CCPR5           equ	3953	;# 
   856   000F71                     CCPR5L          equ	3953	;# 
   857   000F72                     CCPR5H          equ	3954	;# 
   858   000F73                     CCP4CON         equ	3955	;# 
   859   000F74                     CCPR4           equ	3956	;# 
   860   000F74                     CCPR4L          equ	3956	;# 
   861   000F75                     CCPR4H          equ	3957	;# 
   862   000F76                     T4CON           equ	3958	;# 
   863   000F77                     PR4             equ	3959	;# 
   864   000F78                     TMR4            equ	3960	;# 
   865   000F79                     ECCP1DEL        equ	3961	;# 
   866   000F7A                     ERDPT           equ	3962	;# 
   867   000F7A                     ERDPTL          equ	3962	;# 
   868   000F7B                     ERDPTH          equ	3963	;# 
   869   000F7C                     BAUDCON2        equ	3964	;# 
   870   000F7C                     BAUDCTL2        equ	3964	;# 
   871   000F7D                     SPBRGH2         equ	3965	;# 
   872   000F7E                     BAUDCON1        equ	3966	;# 
   873   000F7E                     BAUDCON         equ	3966	;# 
   874   000F7E                     BAUDCTL         equ	3966	;# 
   875   000F7E                     BAUDCTL1        equ	3966	;# 
   876   000F7F                     SPBRGH1         equ	3967	;# 
   877   000F7F                     SPBRGH          equ	3967	;# 
   878   000F80                     PORTA           equ	3968	;# 
   879   000F81                     PORTB           equ	3969	;# 
   880   000F82                     PORTC           equ	3970	;# 
   881   000F83                     PORTD           equ	3971	;# 
   882   000F84                     PORTE           equ	3972	;# 
   883   000F85                     PORTF           equ	3973	;# 
   884   000F86                     PORTG           equ	3974	;# 
   885   000F87                     PORTH           equ	3975	;# 
   886   000F88                     PORTJ           equ	3976	;# 
   887   000F89                     LATA            equ	3977	;# 
   888   000F8A                     LATB            equ	3978	;# 
   889   000F8B                     LATC            equ	3979	;# 
   890   000F8C                     LATD            equ	3980	;# 
   891   000F8D                     LATE            equ	3981	;# 
   892   000F8E                     LATF            equ	3982	;# 
   893   000F8F                     LATG            equ	3983	;# 
   894   000F90                     LATH            equ	3984	;# 
   895   000F91                     LATJ            equ	3985	;# 
   896   000F92                     TRISA           equ	3986	;# 
   897   000F92                     DDRA            equ	3986	;# 
   898   000F93                     TRISB           equ	3987	;# 
   899   000F93                     DDRB            equ	3987	;# 
   900   000F94                     TRISC           equ	3988	;# 
   901   000F94                     DDRC            equ	3988	;# 
   902   000F95                     TRISD           equ	3989	;# 
   903   000F95                     DDRD            equ	3989	;# 
   904   000F96                     TRISE           equ	3990	;# 
   905   000F96                     DDRE            equ	3990	;# 
   906   000F97                     TRISF           equ	3991	;# 
   907   000F97                     DDRF            equ	3991	;# 
   908   000F98                     TRISG           equ	3992	;# 
   909   000F98                     DDRG            equ	3992	;# 
   910   000F99                     TRISH           equ	3993	;# 
   911   000F99                     DDRH            equ	3993	;# 
   912   000F9A                     TRISJ           equ	3994	;# 
   913   000F9A                     DDRJ            equ	3994	;# 
   914   000F9B                     OSCTUNE         equ	3995	;# 
   915   000F9C                     MEMCON          equ	3996	;# 
   916   000F9D                     PIE1            equ	3997	;# 
   917   000F9E                     PIR1            equ	3998	;# 
   918   000F9F                     IPR1            equ	3999	;# 
   919   000FA0                     PIE2            equ	4000	;# 
   920   000FA1                     PIR2            equ	4001	;# 
   921   000FA2                     IPR2            equ	4002	;# 
   922   000FA3                     PIE3            equ	4003	;# 
   923   000FA4                     PIR3            equ	4004	;# 
   924   000FA5                     IPR3            equ	4005	;# 
   925   000FA6                     EECON1          equ	4006	;# 
   926   000FA7                     EECON2          equ	4007	;# 
   927   000FAB                     RCSTA1          equ	4011	;# 
   928   000FAB                     RCSTA           equ	4011	;# 
   929   000FAC                     TXSTA1          equ	4012	;# 
   930   000FAC                     TXSTA           equ	4012	;# 
   931   000FAD                     TXREG1          equ	4013	;# 
   932   000FAD                     TXREG           equ	4013	;# 
   933   000FAE                     RCREG1          equ	4014	;# 
   934   000FAE                     RCREG           equ	4014	;# 
   935   000FAF                     SPBRG1          equ	4015	;# 
   936   000FAF                     SPBRG           equ	4015	;# 
   937   000FB0                     PSPCON          equ	4016	;# 
   938   000FB1                     T3CON           equ	4017	;# 
   939   000FB2                     TMR3            equ	4018	;# 
   940   000FB2                     TMR3L           equ	4018	;# 
   941   000FB3                     TMR3H           equ	4019	;# 
   942   000FB4                     CMCON           equ	4020	;# 
   943   000FB5                     CVRCON          equ	4021	;# 
   944   000FB6                     ECCP1AS         equ	4022	;# 
   945   000FB7                     CCP3CON         equ	4023	;# 
   946   000FB7                     ECCP3CON        equ	4023	;# 
   947   000FB8                     CCPR3           equ	4024	;# 
   948   000FB8                     CCPR3L          equ	4024	;# 
   949   000FB9                     CCPR3H          equ	4025	;# 
   950   000FBA                     CCP2CON         equ	4026	;# 
   951   000FBA                     ECCP2CON        equ	4026	;# 
   952   000FBB                     CCPR2           equ	4027	;# 
   953   000FBB                     CCPR2L          equ	4027	;# 
   954   000FBC                     CCPR2H          equ	4028	;# 
   955   000FBD                     CCP1CON         equ	4029	;# 
   956   000FBD                     ECCP1CON        equ	4029	;# 
   957   000FBE                     CCPR1           equ	4030	;# 
   958   000FBE                     CCPR1L          equ	4030	;# 
   959   000FBF                     CCPR1H          equ	4031	;# 
   960   000FC0                     ADCON2          equ	4032	;# 
   961   000FC1                     ADCON1          equ	4033	;# 
   962   000FC2                     ADCON0          equ	4034	;# 
   963   000FC3                     ADRES           equ	4035	;# 
   964   000FC3                     ADRESL          equ	4035	;# 
   965   000FC4                     ADRESH          equ	4036	;# 
   966   000FC5                     SSP1CON2        equ	4037	;# 
   967   000FC5                     SSPCON2         equ	4037	;# 
   968   000FC6                     SSP1CON1        equ	4038	;# 
   969   000FC6                     SSPCON1         equ	4038	;# 
   970   000FC7                     SSP1STAT        equ	4039	;# 
   971   000FC7                     SSPSTAT         equ	4039	;# 
   972   000FC8                     SSP1ADD         equ	4040	;# 
   973   000FC8                     SSPADD          equ	4040	;# 
   974   000FC9                     SSP1BUF         equ	4041	;# 
   975   000FC9                     SSPBUF          equ	4041	;# 
   976   000FCA                     T2CON           equ	4042	;# 
   977   000FCB                     PR2             equ	4043	;# 
   978   000FCC                     TMR2            equ	4044	;# 
   979   000FCD                     T1CON           equ	4045	;# 
   980   000FCE                     TMR1            equ	4046	;# 
   981   000FCE                     TMR1L           equ	4046	;# 
   982   000FCF                     TMR1H           equ	4047	;# 
   983   000FD0                     RCON            equ	4048	;# 
   984   000FD1                     WDTCON          equ	4049	;# 
   985   000FD2                     ECON1           equ	4050	;# 
   986   000FD3                     OSCCON          equ	4051	;# 
   987   000FD5                     T0CON           equ	4053	;# 
   988   000FD6                     TMR0            equ	4054	;# 
   989   000FD6                     TMR0L           equ	4054	;# 
   990   000FD7                     TMR0H           equ	4055	;# 
   991   000FD8                     STATUS          equ	4056	;# 
   992   000FD9                     FSR2            equ	4057	;# 
   993   000FD9                     FSR2L           equ	4057	;# 
   994   000FDA                     FSR2H           equ	4058	;# 
   995   000FDB                     PLUSW2          equ	4059	;# 
   996   000FDC                     PREINC2         equ	4060	;# 
   997   000FDD                     POSTDEC2        equ	4061	;# 
   998   000FDE                     POSTINC2        equ	4062	;# 
   999   000FDF                     INDF2           equ	4063	;# 
  1000   000FE0                     BSR             equ	4064	;# 
  1001   000FE1                     FSR1            equ	4065	;# 
  1002   000FE1                     FSR1L           equ	4065	;# 
  1003   000FE2                     FSR1H           equ	4066	;# 
  1004   000FE3                     PLUSW1          equ	4067	;# 
  1005   000FE4                     PREINC1         equ	4068	;# 
  1006   000FE5                     POSTDEC1        equ	4069	;# 
  1007   000FE6                     POSTINC1        equ	4070	;# 
  1008   000FE7                     INDF1           equ	4071	;# 
  1009   000FE8                     WREG            equ	4072	;# 
  1010   000FE9                     FSR0            equ	4073	;# 
  1011   000FE9                     FSR0L           equ	4073	;# 
  1012   000FEA                     FSR0H           equ	4074	;# 
  1013   000FEB                     PLUSW0          equ	4075	;# 
  1014   000FEC                     PREINC0         equ	4076	;# 
  1015   000FED                     POSTDEC0        equ	4077	;# 
  1016   000FEE                     POSTINC0        equ	4078	;# 
  1017   000FEF                     INDF0           equ	4079	;# 
  1018   000FF0                     INTCON3         equ	4080	;# 
  1019   000FF1                     INTCON2         equ	4081	;# 
  1020   000FF2                     INTCON          equ	4082	;# 
  1021   000FF3                     PROD            equ	4083	;# 
  1022   000FF3                     PRODL           equ	4083	;# 
  1023   000FF4                     PRODH           equ	4084	;# 
  1024   000FF5                     TABLAT          equ	4085	;# 
  1025   000FF6                     TBLPTR          equ	4086	;# 
  1026   000FF6                     TBLPTRL         equ	4086	;# 
  1027   000FF7                     TBLPTRH         equ	4087	;# 
  1028   000FF8                     TBLPTRU         equ	4088	;# 
  1029   000FF9                     PCLAT           equ	4089	;# 
  1030   000FF9                     PC              equ	4089	;# 
  1031   000FF9                     PCL             equ	4089	;# 
  1032   000FFA                     PCLATH          equ	4090	;# 
  1033   000FFB                     PCLATU          equ	4091	;# 
  1034   000FFC                     STKPTR          equ	4092	;# 
  1035   000FFD                     TOS             equ	4093	;# 
  1036   000FFD                     TOSL            equ	4093	;# 
  1037   000FFE                     TOSH            equ	4094	;# 
  1038   000FFF                     TOSU            equ	4095	;# 
  1039   000E80                     MAADR5          equ	3712	;# 
  1040   000E81                     MAADR6          equ	3713	;# 
  1041   000E82                     MAADR3          equ	3714	;# 
  1042   000E83                     MAADR4          equ	3715	;# 
  1043   000E84                     MAADR1          equ	3716	;# 
  1044   000E85                     MAADR2          equ	3717	;# 
  1045   000E8A                     MISTAT          equ	3722	;# 
  1046   000E97                     EFLOCON         equ	3735	;# 
  1047   000E98                     EPAUS           equ	3736	;# 
  1048   000E98                     EPAUSL          equ	3736	;# 
  1049   000E99                     EPAUSH          equ	3737	;# 
  1050   000EA0                     MACON1          equ	3744	;# 
  1051   000EA2                     MACON3          equ	3746	;# 
  1052   000EA3                     MACON4          equ	3747	;# 
  1053   000EA4                     MABBIPG         equ	3748	;# 
  1054   000EA6                     MAIPG           equ	3750	;# 
  1055   000EA6                     MAIPGL          equ	3750	;# 
  1056   000EA7                     MAIPGH          equ	3751	;# 
  1057   000EAA                     MAMXFL          equ	3754	;# 
  1058   000EAA                     MAMXFLL         equ	3754	;# 
  1059   000EAB                     MAMXFLH         equ	3755	;# 
  1060   000EB2                     MICMD           equ	3762	;# 
  1061   000EB4                     MIREGADR        equ	3764	;# 
  1062   000EB6                     MIWR            equ	3766	;# 
  1063   000EB6                     MIWRL           equ	3766	;# 
  1064   000EB7                     MIWRH           equ	3767	;# 
  1065   000EB8                     MIRD            equ	3768	;# 
  1066   000EB8                     MIRDL           equ	3768	;# 
  1067   000EB9                     MIRDH           equ	3769	;# 
  1068   000EC0                     EHT0            equ	3776	;# 
  1069   000EC1                     EHT1            equ	3777	;# 
  1070   000EC2                     EHT2            equ	3778	;# 
  1071   000EC3                     EHT3            equ	3779	;# 
  1072   000EC4                     EHT4            equ	3780	;# 
  1073   000EC5                     EHT5            equ	3781	;# 
  1074   000EC6                     EHT6            equ	3782	;# 
  1075   000EC7                     EHT7            equ	3783	;# 
  1076   000EC8                     EPMM0           equ	3784	;# 
  1077   000EC9                     EPMM1           equ	3785	;# 
  1078   000ECA                     EPMM2           equ	3786	;# 
  1079   000ECB                     EPMM3           equ	3787	;# 
  1080   000ECC                     EPMM4           equ	3788	;# 
  1081   000ECD                     EPMM5           equ	3789	;# 
  1082   000ECE                     EPMM6           equ	3790	;# 
  1083   000ECF                     EPMM7           equ	3791	;# 
  1084   000ED0                     EPMCS           equ	3792	;# 
  1085   000ED0                     EPMCSL          equ	3792	;# 
  1086   000ED1                     EPMCSH          equ	3793	;# 
  1087   000ED4                     EPMO            equ	3796	;# 
  1088   000ED4                     EPMOL           equ	3796	;# 
  1089   000ED5                     EPMOH           equ	3797	;# 
  1090   000ED8                     ERXFCON         equ	3800	;# 
  1091   000ED9                     EPKTCNT         equ	3801	;# 
  1092   000EE2                     EWRPT           equ	3810	;# 
  1093   000EE2                     EWRPTL          equ	3810	;# 
  1094   000EE3                     EWRPTH          equ	3811	;# 
  1095   000EE4                     ETXST           equ	3812	;# 
  1096   000EE4                     ETXSTL          equ	3812	;# 
  1097   000EE5                     ETXSTH          equ	3813	;# 
  1098   000EE6                     ETXND           equ	3814	;# 
  1099   000EE6                     ETXNDL          equ	3814	;# 
  1100   000EE7                     ETXNDH          equ	3815	;# 
  1101   000EE8                     ERXST           equ	3816	;# 
  1102   000EE8                     ERXSTL          equ	3816	;# 
  1103   000EE9                     ERXSTH          equ	3817	;# 
  1104   000EEA                     ERXND           equ	3818	;# 
  1105   000EEA                     ERXNDL          equ	3818	;# 
  1106   000EEB                     ERXNDH          equ	3819	;# 
  1107   000EEC                     ERXRDPT         equ	3820	;# 
  1108   000EEC                     ERXRDPTL        equ	3820	;# 
  1109   000EED                     ERXRDPTH        equ	3821	;# 
  1110   000EEE                     ERXWRPT         equ	3822	;# 
  1111   000EEE                     ERXWRPTL        equ	3822	;# 
  1112   000EEF                     ERXWRPTH        equ	3823	;# 
  1113   000EF0                     EDMAST          equ	3824	;# 
  1114   000EF0                     EDMASTL         equ	3824	;# 
  1115   000EF1                     EDMASTH         equ	3825	;# 
  1116   000EF2                     EDMAND          equ	3826	;# 
  1117   000EF2                     EDMANDL         equ	3826	;# 
  1118   000EF3                     EDMANDH         equ	3827	;# 
  1119   000EF4                     EDMADST         equ	3828	;# 
  1120   000EF4                     EDMADSTL        equ	3828	;# 
  1121   000EF5                     EDMADSTH        equ	3829	;# 
  1122   000EF6                     EDMACS          equ	3830	;# 
  1123   000EF6                     EDMACSL         equ	3830	;# 
  1124   000EF7                     EDMACSH         equ	3831	;# 
  1125   000EFB                     EIE             equ	3835	;# 
  1126   000EFD                     ESTAT           equ	3837	;# 
  1127   000EFE                     ECON2           equ	3838	;# 
  1128   000F60                     EIR             equ	3936	;# 
  1129   000F61                     EDATA           equ	3937	;# 
  1130   000F62                     SSP2CON2        equ	3938	;# 
  1131   000F63                     SSP2CON1        equ	3939	;# 
  1132   000F64                     SSP2STAT        equ	3940	;# 
  1133   000F65                     SSP2ADD         equ	3941	;# 
  1134   000F66                     SSP2BUF         equ	3942	;# 
  1135   000F67                     ECCP2DEL        equ	3943	;# 
  1136   000F68                     ECCP2AS         equ	3944	;# 
  1137   000F69                     ECCP3DEL        equ	3945	;# 
  1138   000F6A                     ECCP3AS         equ	3946	;# 
  1139   000F6B                     RCSTA2          equ	3947	;# 
  1140   000F6C                     TXSTA2          equ	3948	;# 
  1141   000F6D                     TXREG2          equ	3949	;# 
  1142   000F6E                     RCREG2          equ	3950	;# 
  1143   000F6F                     SPBRG2          equ	3951	;# 
  1144   000F70                     CCP5CON         equ	3952	;# 
  1145   000F71                     CCPR5           equ	3953	;# 
  1146   000F71                     CCPR5L          equ	3953	;# 
  1147   000F72                     CCPR5H          equ	3954	;# 
  1148   000F73                     CCP4CON         equ	3955	;# 
  1149   000F74                     CCPR4           equ	3956	;# 
  1150   000F74                     CCPR4L          equ	3956	;# 
  1151   000F75                     CCPR4H          equ	3957	;# 
  1152   000F76                     T4CON           equ	3958	;# 
  1153   000F77                     PR4             equ	3959	;# 
  1154   000F78                     TMR4            equ	3960	;# 
  1155   000F79                     ECCP1DEL        equ	3961	;# 
  1156   000F7A                     ERDPT           equ	3962	;# 
  1157   000F7A                     ERDPTL          equ	3962	;# 
  1158   000F7B                     ERDPTH          equ	3963	;# 
  1159   000F7C                     BAUDCON2        equ	3964	;# 
  1160   000F7C                     BAUDCTL2        equ	3964	;# 
  1161   000F7D                     SPBRGH2         equ	3965	;# 
  1162   000F7E                     BAUDCON1        equ	3966	;# 
  1163   000F7E                     BAUDCON         equ	3966	;# 
  1164   000F7E                     BAUDCTL         equ	3966	;# 
  1165   000F7E                     BAUDCTL1        equ	3966	;# 
  1166   000F7F                     SPBRGH1         equ	3967	;# 
  1167   000F7F                     SPBRGH          equ	3967	;# 
  1168   000F80                     PORTA           equ	3968	;# 
  1169   000F81                     PORTB           equ	3969	;# 
  1170   000F82                     PORTC           equ	3970	;# 
  1171   000F83                     PORTD           equ	3971	;# 
  1172   000F84                     PORTE           equ	3972	;# 
  1173   000F85                     PORTF           equ	3973	;# 
  1174   000F86                     PORTG           equ	3974	;# 
  1175   000F87                     PORTH           equ	3975	;# 
  1176   000F88                     PORTJ           equ	3976	;# 
  1177   000F89                     LATA            equ	3977	;# 
  1178   000F8A                     LATB            equ	3978	;# 
  1179   000F8B                     LATC            equ	3979	;# 
  1180   000F8C                     LATD            equ	3980	;# 
  1181   000F8D                     LATE            equ	3981	;# 
  1182   000F8E                     LATF            equ	3982	;# 
  1183   000F8F                     LATG            equ	3983	;# 
  1184   000F90                     LATH            equ	3984	;# 
  1185   000F91                     LATJ            equ	3985	;# 
  1186   000F92                     TRISA           equ	3986	;# 
  1187   000F92                     DDRA            equ	3986	;# 
  1188   000F93                     TRISB           equ	3987	;# 
  1189   000F93                     DDRB            equ	3987	;# 
  1190   000F94                     TRISC           equ	3988	;# 
  1191   000F94                     DDRC            equ	3988	;# 
  1192   000F95                     TRISD           equ	3989	;# 
  1193   000F95                     DDRD            equ	3989	;# 
  1194   000F96                     TRISE           equ	3990	;# 
  1195   000F96                     DDRE            equ	3990	;# 
  1196   000F97                     TRISF           equ	3991	;# 
  1197   000F97                     DDRF            equ	3991	;# 
  1198   000F98                     TRISG           equ	3992	;# 
  1199   000F98                     DDRG            equ	3992	;# 
  1200   000F99                     TRISH           equ	3993	;# 
  1201   000F99                     DDRH            equ	3993	;# 
  1202   000F9A                     TRISJ           equ	3994	;# 
  1203   000F9A                     DDRJ            equ	3994	;# 
  1204   000F9B                     OSCTUNE         equ	3995	;# 
  1205   000F9C                     MEMCON          equ	3996	;# 
  1206   000F9D                     PIE1            equ	3997	;# 
  1207   000F9E                     PIR1            equ	3998	;# 
  1208   000F9F                     IPR1            equ	3999	;# 
  1209   000FA0                     PIE2            equ	4000	;# 
  1210   000FA1                     PIR2            equ	4001	;# 
  1211   000FA2                     IPR2            equ	4002	;# 
  1212   000FA3                     PIE3            equ	4003	;# 
  1213   000FA4                     PIR3            equ	4004	;# 
  1214   000FA5                     IPR3            equ	4005	;# 
  1215   000FA6                     EECON1          equ	4006	;# 
  1216   000FA7                     EECON2          equ	4007	;# 
  1217   000FAB                     RCSTA1          equ	4011	;# 
  1218   000FAB                     RCSTA           equ	4011	;# 
  1219   000FAC                     TXSTA1          equ	4012	;# 
  1220   000FAC                     TXSTA           equ	4012	;# 
  1221   000FAD                     TXREG1          equ	4013	;# 
  1222   000FAD                     TXREG           equ	4013	;# 
  1223   000FAE                     RCREG1          equ	4014	;# 
  1224   000FAE                     RCREG           equ	4014	;# 
  1225   000FAF                     SPBRG1          equ	4015	;# 
  1226   000FAF                     SPBRG           equ	4015	;# 
  1227   000FB0                     PSPCON          equ	4016	;# 
  1228   000FB1                     T3CON           equ	4017	;# 
  1229   000FB2                     TMR3            equ	4018	;# 
  1230   000FB2                     TMR3L           equ	4018	;# 
  1231   000FB3                     TMR3H           equ	4019	;# 
  1232   000FB4                     CMCON           equ	4020	;# 
  1233   000FB5                     CVRCON          equ	4021	;# 
  1234   000FB6                     ECCP1AS         equ	4022	;# 
  1235   000FB7                     CCP3CON         equ	4023	;# 
  1236   000FB7                     ECCP3CON        equ	4023	;# 
  1237   000FB8                     CCPR3           equ	4024	;# 
  1238   000FB8                     CCPR3L          equ	4024	;# 
  1239   000FB9                     CCPR3H          equ	4025	;# 
  1240   000FBA                     CCP2CON         equ	4026	;# 
  1241   000FBA                     ECCP2CON        equ	4026	;# 
  1242   000FBB                     CCPR2           equ	4027	;# 
  1243   000FBB                     CCPR2L          equ	4027	;# 
  1244   000FBC                     CCPR2H          equ	4028	;# 
  1245   000FBD                     CCP1CON         equ	4029	;# 
  1246   000FBD                     ECCP1CON        equ	4029	;# 
  1247   000FBE                     CCPR1           equ	4030	;# 
  1248   000FBE                     CCPR1L          equ	4030	;# 
  1249   000FBF                     CCPR1H          equ	4031	;# 
  1250   000FC0                     ADCON2          equ	4032	;# 
  1251   000FC1                     ADCON1          equ	4033	;# 
  1252   000FC2                     ADCON0          equ	4034	;# 
  1253   000FC3                     ADRES           equ	4035	;# 
  1254   000FC3                     ADRESL          equ	4035	;# 
  1255   000FC4                     ADRESH          equ	4036	;# 
  1256   000FC5                     SSP1CON2        equ	4037	;# 
  1257   000FC5                     SSPCON2         equ	4037	;# 
  1258   000FC6                     SSP1CON1        equ	4038	;# 
  1259   000FC6                     SSPCON1         equ	4038	;# 
  1260   000FC7                     SSP1STAT        equ	4039	;# 
  1261   000FC7                     SSPSTAT         equ	4039	;# 
  1262   000FC8                     SSP1ADD         equ	4040	;# 
  1263   000FC8                     SSPADD          equ	4040	;# 
  1264   000FC9                     SSP1BUF         equ	4041	;# 
  1265   000FC9                     SSPBUF          equ	4041	;# 
  1266   000FCA                     T2CON           equ	4042	;# 
  1267   000FCB                     PR2             equ	4043	;# 
  1268   000FCC                     TMR2            equ	4044	;# 
  1269   000FCD                     T1CON           equ	4045	;# 
  1270   000FCE                     TMR1            equ	4046	;# 
  1271   000FCE                     TMR1L           equ	4046	;# 
  1272   000FCF                     TMR1H           equ	4047	;# 
  1273   000FD0                     RCON            equ	4048	;# 
  1274   000FD1                     WDTCON          equ	4049	;# 
  1275   000FD2                     ECON1           equ	4050	;# 
  1276   000FD3                     OSCCON          equ	4051	;# 
  1277   000FD5                     T0CON           equ	4053	;# 
  1278   000FD6                     TMR0            equ	4054	;# 
  1279   000FD6                     TMR0L           equ	4054	;# 
  1280   000FD7                     TMR0H           equ	4055	;# 
  1281   000FD8                     STATUS          equ	4056	;# 
  1282   000FD9                     FSR2            equ	4057	;# 
  1283   000FD9                     FSR2L           equ	4057	;# 
  1284   000FDA                     FSR2H           equ	4058	;# 
  1285   000FDB                     PLUSW2          equ	4059	;# 
  1286   000FDC                     PREINC2         equ	4060	;# 
  1287   000FDD                     POSTDEC2        equ	4061	;# 
  1288   000FDE                     POSTINC2        equ	4062	;# 
  1289   000FDF                     INDF2           equ	4063	;# 
  1290   000FE0                     BSR             equ	4064	;# 
  1291   000FE1                     FSR1            equ	4065	;# 
  1292   000FE1                     FSR1L           equ	4065	;# 
  1293   000FE2                     FSR1H           equ	4066	;# 
  1294   000FE3                     PLUSW1          equ	4067	;# 
  1295   000FE4                     PREINC1         equ	4068	;# 
  1296   000FE5                     POSTDEC1        equ	4069	;# 
  1297   000FE6                     POSTINC1        equ	4070	;# 
  1298   000FE7                     INDF1           equ	4071	;# 
  1299   000FE8                     WREG            equ	4072	;# 
  1300   000FE9                     FSR0            equ	4073	;# 
  1301   000FE9                     FSR0L           equ	4073	;# 
  1302   000FEA                     FSR0H           equ	4074	;# 
  1303   000FEB                     PLUSW0          equ	4075	;# 
  1304   000FEC                     PREINC0         equ	4076	;# 
  1305   000FED                     POSTDEC0        equ	4077	;# 
  1306   000FEE                     POSTINC0        equ	4078	;# 
  1307   000FEF                     INDF0           equ	4079	;# 
  1308   000FF0                     INTCON3         equ	4080	;# 
  1309   000FF1                     INTCON2         equ	4081	;# 
  1310   000FF2                     INTCON          equ	4082	;# 
  1311   000FF3                     PROD            equ	4083	;# 
  1312   000FF3                     PRODL           equ	4083	;# 
  1313   000FF4                     PRODH           equ	4084	;# 
  1314   000FF5                     TABLAT          equ	4085	;# 
  1315   000FF6                     TBLPTR          equ	4086	;# 
  1316   000FF6                     TBLPTRL         equ	4086	;# 
  1317   000FF7                     TBLPTRH         equ	4087	;# 
  1318   000FF8                     TBLPTRU         equ	4088	;# 
  1319   000FF9                     PCLAT           equ	4089	;# 
  1320   000FF9                     PC              equ	4089	;# 
  1321   000FF9                     PCL             equ	4089	;# 
  1322   000FFA                     PCLATH          equ	4090	;# 
  1323   000FFB                     PCLATU          equ	4091	;# 
  1324   000FFC                     STKPTR          equ	4092	;# 
  1325   000FFD                     TOS             equ	4093	;# 
  1326   000FFD                     TOSL            equ	4093	;# 
  1327   000FFE                     TOSH            equ	4094	;# 
  1328   000FFF                     TOSU            equ	4095	;# 
  1329   000E80                     MAADR5          equ	3712	;# 
  1330   000E81                     MAADR6          equ	3713	;# 
  1331   000E82                     MAADR3          equ	3714	;# 
  1332   000E83                     MAADR4          equ	3715	;# 
  1333   000E84                     MAADR1          equ	3716	;# 
  1334   000E85                     MAADR2          equ	3717	;# 
  1335   000E8A                     MISTAT          equ	3722	;# 
  1336   000E97                     EFLOCON         equ	3735	;# 
  1337   000E98                     EPAUS           equ	3736	;# 
  1338   000E98                     EPAUSL          equ	3736	;# 
  1339   000E99                     EPAUSH          equ	3737	;# 
  1340   000EA0                     MACON1          equ	3744	;# 
  1341   000EA2                     MACON3          equ	3746	;# 
  1342   000EA3                     MACON4          equ	3747	;# 
  1343   000EA4                     MABBIPG         equ	3748	;# 
  1344   000EA6                     MAIPG           equ	3750	;# 
  1345   000EA6                     MAIPGL          equ	3750	;# 
  1346   000EA7                     MAIPGH          equ	3751	;# 
  1347   000EAA                     MAMXFL          equ	3754	;# 
  1348   000EAA                     MAMXFLL         equ	3754	;# 
  1349   000EAB                     MAMXFLH         equ	3755	;# 
  1350   000EB2                     MICMD           equ	3762	;# 
  1351   000EB4                     MIREGADR        equ	3764	;# 
  1352   000EB6                     MIWR            equ	3766	;# 
  1353   000EB6                     MIWRL           equ	3766	;# 
  1354   000EB7                     MIWRH           equ	3767	;# 
  1355   000EB8                     MIRD            equ	3768	;# 
  1356   000EB8                     MIRDL           equ	3768	;# 
  1357   000EB9                     MIRDH           equ	3769	;# 
  1358   000EC0                     EHT0            equ	3776	;# 
  1359   000EC1                     EHT1            equ	3777	;# 
  1360   000EC2                     EHT2            equ	3778	;# 
  1361   000EC3                     EHT3            equ	3779	;# 
  1362   000EC4                     EHT4            equ	3780	;# 
  1363   000EC5                     EHT5            equ	3781	;# 
  1364   000EC6                     EHT6            equ	3782	;# 
  1365   000EC7                     EHT7            equ	3783	;# 
  1366   000EC8                     EPMM0           equ	3784	;# 
  1367   000EC9                     EPMM1           equ	3785	;# 
  1368   000ECA                     EPMM2           equ	3786	;# 
  1369   000ECB                     EPMM3           equ	3787	;# 
  1370   000ECC                     EPMM4           equ	3788	;# 
  1371   000ECD                     EPMM5           equ	3789	;# 
  1372   000ECE                     EPMM6           equ	3790	;# 
  1373   000ECF                     EPMM7           equ	3791	;# 
  1374   000ED0                     EPMCS           equ	3792	;# 
  1375   000ED0                     EPMCSL          equ	3792	;# 
  1376   000ED1                     EPMCSH          equ	3793	;# 
  1377   000ED4                     EPMO            equ	3796	;# 
  1378   000ED4                     EPMOL           equ	3796	;# 
  1379   000ED5                     EPMOH           equ	3797	;# 
  1380   000ED8                     ERXFCON         equ	3800	;# 
  1381   000ED9                     EPKTCNT         equ	3801	;# 
  1382   000EE2                     EWRPT           equ	3810	;# 
  1383   000EE2                     EWRPTL          equ	3810	;# 
  1384   000EE3                     EWRPTH          equ	3811	;# 
  1385   000EE4                     ETXST           equ	3812	;# 
  1386   000EE4                     ETXSTL          equ	3812	;# 
  1387   000EE5                     ETXSTH          equ	3813	;# 
  1388   000EE6                     ETXND           equ	3814	;# 
  1389   000EE6                     ETXNDL          equ	3814	;# 
  1390   000EE7                     ETXNDH          equ	3815	;# 
  1391   000EE8                     ERXST           equ	3816	;# 
  1392   000EE8                     ERXSTL          equ	3816	;# 
  1393   000EE9                     ERXSTH          equ	3817	;# 
  1394   000EEA                     ERXND           equ	3818	;# 
  1395   000EEA                     ERXNDL          equ	3818	;# 
  1396   000EEB                     ERXNDH          equ	3819	;# 
  1397   000EEC                     ERXRDPT         equ	3820	;# 
  1398   000EEC                     ERXRDPTL        equ	3820	;# 
  1399   000EED                     ERXRDPTH        equ	3821	;# 
  1400   000EEE                     ERXWRPT         equ	3822	;# 
  1401   000EEE                     ERXWRPTL        equ	3822	;# 
  1402   000EEF                     ERXWRPTH        equ	3823	;# 
  1403   000EF0                     EDMAST          equ	3824	;# 
  1404   000EF0                     EDMASTL         equ	3824	;# 
  1405   000EF1                     EDMASTH         equ	3825	;# 
  1406   000EF2                     EDMAND          equ	3826	;# 
  1407   000EF2                     EDMANDL         equ	3826	;# 
  1408   000EF3                     EDMANDH         equ	3827	;# 
  1409   000EF4                     EDMADST         equ	3828	;# 
  1410   000EF4                     EDMADSTL        equ	3828	;# 
  1411   000EF5                     EDMADSTH        equ	3829	;# 
  1412   000EF6                     EDMACS          equ	3830	;# 
  1413   000EF6                     EDMACSL         equ	3830	;# 
  1414   000EF7                     EDMACSH         equ	3831	;# 
  1415   000EFB                     EIE             equ	3835	;# 
  1416   000EFD                     ESTAT           equ	3837	;# 
  1417   000EFE                     ECON2           equ	3838	;# 
  1418   000F60                     EIR             equ	3936	;# 
  1419   000F61                     EDATA           equ	3937	;# 
  1420   000F62                     SSP2CON2        equ	3938	;# 
  1421   000F63                     SSP2CON1        equ	3939	;# 
  1422   000F64                     SSP2STAT        equ	3940	;# 
  1423   000F65                     SSP2ADD         equ	3941	;# 
  1424   000F66                     SSP2BUF         equ	3942	;# 
  1425   000F67                     ECCP2DEL        equ	3943	;# 
  1426   000F68                     ECCP2AS         equ	3944	;# 
  1427   000F69                     ECCP3DEL        equ	3945	;# 
  1428   000F6A                     ECCP3AS         equ	3946	;# 
  1429   000F6B                     RCSTA2          equ	3947	;# 
  1430   000F6C                     TXSTA2          equ	3948	;# 
  1431   000F6D                     TXREG2          equ	3949	;# 
  1432   000F6E                     RCREG2          equ	3950	;# 
  1433   000F6F                     SPBRG2          equ	3951	;# 
  1434   000F70                     CCP5CON         equ	3952	;# 
  1435   000F71                     CCPR5           equ	3953	;# 
  1436   000F71                     CCPR5L          equ	3953	;# 
  1437   000F72                     CCPR5H          equ	3954	;# 
  1438   000F73                     CCP4CON         equ	3955	;# 
  1439   000F74                     CCPR4           equ	3956	;# 
  1440   000F74                     CCPR4L          equ	3956	;# 
  1441   000F75                     CCPR4H          equ	3957	;# 
  1442   000F76                     T4CON           equ	3958	;# 
  1443   000F77                     PR4             equ	3959	;# 
  1444   000F78                     TMR4            equ	3960	;# 
  1445   000F79                     ECCP1DEL        equ	3961	;# 
  1446   000F7A                     ERDPT           equ	3962	;# 
  1447   000F7A                     ERDPTL          equ	3962	;# 
  1448   000F7B                     ERDPTH          equ	3963	;# 
  1449   000F7C                     BAUDCON2        equ	3964	;# 
  1450   000F7C                     BAUDCTL2        equ	3964	;# 
  1451   000F7D                     SPBRGH2         equ	3965	;# 
  1452   000F7E                     BAUDCON1        equ	3966	;# 
  1453   000F7E                     BAUDCON         equ	3966	;# 
  1454   000F7E                     BAUDCTL         equ	3966	;# 
  1455   000F7E                     BAUDCTL1        equ	3966	;# 
  1456   000F7F                     SPBRGH1         equ	3967	;# 
  1457   000F7F                     SPBRGH          equ	3967	;# 
  1458   000F80                     PORTA           equ	3968	;# 
  1459   000F81                     PORTB           equ	3969	;# 
  1460   000F82                     PORTC           equ	3970	;# 
  1461   000F83                     PORTD           equ	3971	;# 
  1462   000F84                     PORTE           equ	3972	;# 
  1463   000F85                     PORTF           equ	3973	;# 
  1464   000F86                     PORTG           equ	3974	;# 
  1465   000F87                     PORTH           equ	3975	;# 
  1466   000F88                     PORTJ           equ	3976	;# 
  1467   000F89                     LATA            equ	3977	;# 
  1468   000F8A                     LATB            equ	3978	;# 
  1469   000F8B                     LATC            equ	3979	;# 
  1470   000F8C                     LATD            equ	3980	;# 
  1471   000F8D                     LATE            equ	3981	;# 
  1472   000F8E                     LATF            equ	3982	;# 
  1473   000F8F                     LATG            equ	3983	;# 
  1474   000F90                     LATH            equ	3984	;# 
  1475   000F91                     LATJ            equ	3985	;# 
  1476   000F92                     TRISA           equ	3986	;# 
  1477   000F92                     DDRA            equ	3986	;# 
  1478   000F93                     TRISB           equ	3987	;# 
  1479   000F93                     DDRB            equ	3987	;# 
  1480   000F94                     TRISC           equ	3988	;# 
  1481   000F94                     DDRC            equ	3988	;# 
  1482   000F95                     TRISD           equ	3989	;# 
  1483   000F95                     DDRD            equ	3989	;# 
  1484   000F96                     TRISE           equ	3990	;# 
  1485   000F96                     DDRE            equ	3990	;# 
  1486   000F97                     TRISF           equ	3991	;# 
  1487   000F97                     DDRF            equ	3991	;# 
  1488   000F98                     TRISG           equ	3992	;# 
  1489   000F98                     DDRG            equ	3992	;# 
  1490   000F99                     TRISH           equ	3993	;# 
  1491   000F99                     DDRH            equ	3993	;# 
  1492   000F9A                     TRISJ           equ	3994	;# 
  1493   000F9A                     DDRJ            equ	3994	;# 
  1494   000F9B                     OSCTUNE         equ	3995	;# 
  1495   000F9C                     MEMCON          equ	3996	;# 
  1496   000F9D                     PIE1            equ	3997	;# 
  1497   000F9E                     PIR1            equ	3998	;# 
  1498   000F9F                     IPR1            equ	3999	;# 
  1499   000FA0                     PIE2            equ	4000	;# 
  1500   000FA1                     PIR2            equ	4001	;# 
  1501   000FA2                     IPR2            equ	4002	;# 
  1502   000FA3                     PIE3            equ	4003	;# 
  1503   000FA4                     PIR3            equ	4004	;# 
  1504   000FA5                     IPR3            equ	4005	;# 
  1505   000FA6                     EECON1          equ	4006	;# 
  1506   000FA7                     EECON2          equ	4007	;# 
  1507   000FAB                     RCSTA1          equ	4011	;# 
  1508   000FAB                     RCSTA           equ	4011	;# 
  1509   000FAC                     TXSTA1          equ	4012	;# 
  1510   000FAC                     TXSTA           equ	4012	;# 
  1511   000FAD                     TXREG1          equ	4013	;# 
  1512   000FAD                     TXREG           equ	4013	;# 
  1513   000FAE                     RCREG1          equ	4014	;# 
  1514   000FAE                     RCREG           equ	4014	;# 
  1515   000FAF                     SPBRG1          equ	4015	;# 
  1516   000FAF                     SPBRG           equ	4015	;# 
  1517   000FB0                     PSPCON          equ	4016	;# 
  1518   000FB1                     T3CON           equ	4017	;# 
  1519   000FB2                     TMR3            equ	4018	;# 
  1520   000FB2                     TMR3L           equ	4018	;# 
  1521   000FB3                     TMR3H           equ	4019	;# 
  1522   000FB4                     CMCON           equ	4020	;# 
  1523   000FB5                     CVRCON          equ	4021	;# 
  1524   000FB6                     ECCP1AS         equ	4022	;# 
  1525   000FB7                     CCP3CON         equ	4023	;# 
  1526   000FB7                     ECCP3CON        equ	4023	;# 
  1527   000FB8                     CCPR3           equ	4024	;# 
  1528   000FB8                     CCPR3L          equ	4024	;# 
  1529   000FB9                     CCPR3H          equ	4025	;# 
  1530   000FBA                     CCP2CON         equ	4026	;# 
  1531   000FBA                     ECCP2CON        equ	4026	;# 
  1532   000FBB                     CCPR2           equ	4027	;# 
  1533   000FBB                     CCPR2L          equ	4027	;# 
  1534   000FBC                     CCPR2H          equ	4028	;# 
  1535   000FBD                     CCP1CON         equ	4029	;# 
  1536   000FBD                     ECCP1CON        equ	4029	;# 
  1537   000FBE                     CCPR1           equ	4030	;# 
  1538   000FBE                     CCPR1L          equ	4030	;# 
  1539   000FBF                     CCPR1H          equ	4031	;# 
  1540   000FC0                     ADCON2          equ	4032	;# 
  1541   000FC1                     ADCON1          equ	4033	;# 
  1542   000FC2                     ADCON0          equ	4034	;# 
  1543   000FC3                     ADRES           equ	4035	;# 
  1544   000FC3                     ADRESL          equ	4035	;# 
  1545   000FC4                     ADRESH          equ	4036	;# 
  1546   000FC5                     SSP1CON2        equ	4037	;# 
  1547   000FC5                     SSPCON2         equ	4037	;# 
  1548   000FC6                     SSP1CON1        equ	4038	;# 
  1549   000FC6                     SSPCON1         equ	4038	;# 
  1550   000FC7                     SSP1STAT        equ	4039	;# 
  1551   000FC7                     SSPSTAT         equ	4039	;# 
  1552   000FC8                     SSP1ADD         equ	4040	;# 
  1553   000FC8                     SSPADD          equ	4040	;# 
  1554   000FC9                     SSP1BUF         equ	4041	;# 
  1555   000FC9                     SSPBUF          equ	4041	;# 
  1556   000FCA                     T2CON           equ	4042	;# 
  1557   000FCB                     PR2             equ	4043	;# 
  1558   000FCC                     TMR2            equ	4044	;# 
  1559   000FCD                     T1CON           equ	4045	;# 
  1560   000FCE                     TMR1            equ	4046	;# 
  1561   000FCE                     TMR1L           equ	4046	;# 
  1562   000FCF                     TMR1H           equ	4047	;# 
  1563   000FD0                     RCON            equ	4048	;# 
  1564   000FD1                     WDTCON          equ	4049	;# 
  1565   000FD2                     ECON1           equ	4050	;# 
  1566   000FD3                     OSCCON          equ	4051	;# 
  1567   000FD5                     T0CON           equ	4053	;# 
  1568   000FD6                     TMR0            equ	4054	;# 
  1569   000FD6                     TMR0L           equ	4054	;# 
  1570   000FD7                     TMR0H           equ	4055	;# 
  1571   000FD8                     STATUS          equ	4056	;# 
  1572   000FD9                     FSR2            equ	4057	;# 
  1573   000FD9                     FSR2L           equ	4057	;# 
  1574   000FDA                     FSR2H           equ	4058	;# 
  1575   000FDB                     PLUSW2          equ	4059	;# 
  1576   000FDC                     PREINC2         equ	4060	;# 
  1577   000FDD                     POSTDEC2        equ	4061	;# 
  1578   000FDE                     POSTINC2        equ	4062	;# 
  1579   000FDF                     INDF2           equ	4063	;# 
  1580   000FE0                     BSR             equ	4064	;# 
  1581   000FE1                     FSR1            equ	4065	;# 
  1582   000FE1                     FSR1L           equ	4065	;# 
  1583   000FE2                     FSR1H           equ	4066	;# 
  1584   000FE3                     PLUSW1          equ	4067	;# 
  1585   000FE4                     PREINC1         equ	4068	;# 
  1586   000FE5                     POSTDEC1        equ	4069	;# 
  1587   000FE6                     POSTINC1        equ	4070	;# 
  1588   000FE7                     INDF1           equ	4071	;# 
  1589   000FE8                     WREG            equ	4072	;# 
  1590   000FE9                     FSR0            equ	4073	;# 
  1591   000FE9                     FSR0L           equ	4073	;# 
  1592   000FEA                     FSR0H           equ	4074	;# 
  1593   000FEB                     PLUSW0          equ	4075	;# 
  1594   000FEC                     PREINC0         equ	4076	;# 
  1595   000FED                     POSTDEC0        equ	4077	;# 
  1596   000FEE                     POSTINC0        equ	4078	;# 
  1597   000FEF                     INDF0           equ	4079	;# 
  1598   000FF0                     INTCON3         equ	4080	;# 
  1599   000FF1                     INTCON2         equ	4081	;# 
  1600   000FF2                     INTCON          equ	4082	;# 
  1601   000FF3                     PROD            equ	4083	;# 
  1602   000FF3                     PRODL           equ	4083	;# 
  1603   000FF4                     PRODH           equ	4084	;# 
  1604   000FF5                     TABLAT          equ	4085	;# 
  1605   000FF6                     TBLPTR          equ	4086	;# 
  1606   000FF6                     TBLPTRL         equ	4086	;# 
  1607   000FF7                     TBLPTRH         equ	4087	;# 
  1608   000FF8                     TBLPTRU         equ	4088	;# 
  1609   000FF9                     PCLAT           equ	4089	;# 
  1610   000FF9                     PC              equ	4089	;# 
  1611   000FF9                     PCL             equ	4089	;# 
  1612   000FFA                     PCLATH          equ	4090	;# 
  1613   000FFB                     PCLATU          equ	4091	;# 
  1614   000FFC                     STKPTR          equ	4092	;# 
  1615   000FFD                     TOS             equ	4093	;# 
  1616   000FFD                     TOSL            equ	4093	;# 
  1617   000FFE                     TOSH            equ	4094	;# 
  1618   000FFF                     TOSU            equ	4095	;# 
  1619   000E80                     MAADR5          equ	3712	;# 
  1620   000E81                     MAADR6          equ	3713	;# 
  1621   000E82                     MAADR3          equ	3714	;# 
  1622   000E83                     MAADR4          equ	3715	;# 
  1623   000E84                     MAADR1          equ	3716	;# 
  1624   000E85                     MAADR2          equ	3717	;# 
  1625   000E8A                     MISTAT          equ	3722	;# 
  1626   000E97                     EFLOCON         equ	3735	;# 
  1627   000E98                     EPAUS           equ	3736	;# 
  1628   000E98                     EPAUSL          equ	3736	;# 
  1629   000E99                     EPAUSH          equ	3737	;# 
  1630   000EA0                     MACON1          equ	3744	;# 
  1631   000EA2                     MACON3          equ	3746	;# 
  1632   000EA3                     MACON4          equ	3747	;# 
  1633   000EA4                     MABBIPG         equ	3748	;# 
  1634   000EA6                     MAIPG           equ	3750	;# 
  1635   000EA6                     MAIPGL          equ	3750	;# 
  1636   000EA7                     MAIPGH          equ	3751	;# 
  1637   000EAA                     MAMXFL          equ	3754	;# 
  1638   000EAA                     MAMXFLL         equ	3754	;# 
  1639   000EAB                     MAMXFLH         equ	3755	;# 
  1640   000EB2                     MICMD           equ	3762	;# 
  1641   000EB4                     MIREGADR        equ	3764	;# 
  1642   000EB6                     MIWR            equ	3766	;# 
  1643   000EB6                     MIWRL           equ	3766	;# 
  1644   000EB7                     MIWRH           equ	3767	;# 
  1645   000EB8                     MIRD            equ	3768	;# 
  1646   000EB8                     MIRDL           equ	3768	;# 
  1647   000EB9                     MIRDH           equ	3769	;# 
  1648   000EC0                     EHT0            equ	3776	;# 
  1649   000EC1                     EHT1            equ	3777	;# 
  1650   000EC2                     EHT2            equ	3778	;# 
  1651   000EC3                     EHT3            equ	3779	;# 
  1652   000EC4                     EHT4            equ	3780	;# 
  1653   000EC5                     EHT5            equ	3781	;# 
  1654   000EC6                     EHT6            equ	3782	;# 
  1655   000EC7                     EHT7            equ	3783	;# 
  1656   000EC8                     EPMM0           equ	3784	;# 
  1657   000EC9                     EPMM1           equ	3785	;# 
  1658   000ECA                     EPMM2           equ	3786	;# 
  1659   000ECB                     EPMM3           equ	3787	;# 
  1660   000ECC                     EPMM4           equ	3788	;# 
  1661   000ECD                     EPMM5           equ	3789	;# 
  1662   000ECE                     EPMM6           equ	3790	;# 
  1663   000ECF                     EPMM7           equ	3791	;# 
  1664   000ED0                     EPMCS           equ	3792	;# 
  1665   000ED0                     EPMCSL          equ	3792	;# 
  1666   000ED1                     EPMCSH          equ	3793	;# 
  1667   000ED4                     EPMO            equ	3796	;# 
  1668   000ED4                     EPMOL           equ	3796	;# 
  1669   000ED5                     EPMOH           equ	3797	;# 
  1670   000ED8                     ERXFCON         equ	3800	;# 
  1671   000ED9                     EPKTCNT         equ	3801	;# 
  1672   000EE2                     EWRPT           equ	3810	;# 
  1673   000EE2                     EWRPTL          equ	3810	;# 
  1674   000EE3                     EWRPTH          equ	3811	;# 
  1675   000EE4                     ETXST           equ	3812	;# 
  1676   000EE4                     ETXSTL          equ	3812	;# 
  1677   000EE5                     ETXSTH          equ	3813	;# 
  1678   000EE6                     ETXND           equ	3814	;# 
  1679   000EE6                     ETXNDL          equ	3814	;# 
  1680   000EE7                     ETXNDH          equ	3815	;# 
  1681   000EE8                     ERXST           equ	3816	;# 
  1682   000EE8                     ERXSTL          equ	3816	;# 
  1683   000EE9                     ERXSTH          equ	3817	;# 
  1684   000EEA                     ERXND           equ	3818	;# 
  1685   000EEA                     ERXNDL          equ	3818	;# 
  1686   000EEB                     ERXNDH          equ	3819	;# 
  1687   000EEC                     ERXRDPT         equ	3820	;# 
  1688   000EEC                     ERXRDPTL        equ	3820	;# 
  1689   000EED                     ERXRDPTH        equ	3821	;# 
  1690   000EEE                     ERXWRPT         equ	3822	;# 
  1691   000EEE                     ERXWRPTL        equ	3822	;# 
  1692   000EEF                     ERXWRPTH        equ	3823	;# 
  1693   000EF0                     EDMAST          equ	3824	;# 
  1694   000EF0                     EDMASTL         equ	3824	;# 
  1695   000EF1                     EDMASTH         equ	3825	;# 
  1696   000EF2                     EDMAND          equ	3826	;# 
  1697   000EF2                     EDMANDL         equ	3826	;# 
  1698   000EF3                     EDMANDH         equ	3827	;# 
  1699   000EF4                     EDMADST         equ	3828	;# 
  1700   000EF4                     EDMADSTL        equ	3828	;# 
  1701   000EF5                     EDMADSTH        equ	3829	;# 
  1702   000EF6                     EDMACS          equ	3830	;# 
  1703   000EF6                     EDMACSL         equ	3830	;# 
  1704   000EF7                     EDMACSH         equ	3831	;# 
  1705   000EFB                     EIE             equ	3835	;# 
  1706   000EFD                     ESTAT           equ	3837	;# 
  1707   000EFE                     ECON2           equ	3838	;# 
  1708   000F60                     EIR             equ	3936	;# 
  1709   000F61                     EDATA           equ	3937	;# 
  1710   000F62                     SSP2CON2        equ	3938	;# 
  1711   000F63                     SSP2CON1        equ	3939	;# 
  1712   000F64                     SSP2STAT        equ	3940	;# 
  1713   000F65                     SSP2ADD         equ	3941	;# 
  1714   000F66                     SSP2BUF         equ	3942	;# 
  1715   000F67                     ECCP2DEL        equ	3943	;# 
  1716   000F68                     ECCP2AS         equ	3944	;# 
  1717   000F69                     ECCP3DEL        equ	3945	;# 
  1718   000F6A                     ECCP3AS         equ	3946	;# 
  1719   000F6B                     RCSTA2          equ	3947	;# 
  1720   000F6C                     TXSTA2          equ	3948	;# 
  1721   000F6D                     TXREG2          equ	3949	;# 
  1722   000F6E                     RCREG2          equ	3950	;# 
  1723   000F6F                     SPBRG2          equ	3951	;# 
  1724   000F70                     CCP5CON         equ	3952	;# 
  1725   000F71                     CCPR5           equ	3953	;# 
  1726   000F71                     CCPR5L          equ	3953	;# 
  1727   000F72                     CCPR5H          equ	3954	;# 
  1728   000F73                     CCP4CON         equ	3955	;# 
  1729   000F74                     CCPR4           equ	3956	;# 
  1730   000F74                     CCPR4L          equ	3956	;# 
  1731   000F75                     CCPR4H          equ	3957	;# 
  1732   000F76                     T4CON           equ	3958	;# 
  1733   000F77                     PR4             equ	3959	;# 
  1734   000F78                     TMR4            equ	3960	;# 
  1735   000F79                     ECCP1DEL        equ	3961	;# 
  1736   000F7A                     ERDPT           equ	3962	;# 
  1737   000F7A                     ERDPTL          equ	3962	;# 
  1738   000F7B                     ERDPTH          equ	3963	;# 
  1739   000F7C                     BAUDCON2        equ	3964	;# 
  1740   000F7C                     BAUDCTL2        equ	3964	;# 
  1741   000F7D                     SPBRGH2         equ	3965	;# 
  1742   000F7E                     BAUDCON1        equ	3966	;# 
  1743   000F7E                     BAUDCON         equ	3966	;# 
  1744   000F7E                     BAUDCTL         equ	3966	;# 
  1745   000F7E                     BAUDCTL1        equ	3966	;# 
  1746   000F7F                     SPBRGH1         equ	3967	;# 
  1747   000F7F                     SPBRGH          equ	3967	;# 
  1748   000F80                     PORTA           equ	3968	;# 
  1749   000F81                     PORTB           equ	3969	;# 
  1750   000F82                     PORTC           equ	3970	;# 
  1751   000F83                     PORTD           equ	3971	;# 
  1752   000F84                     PORTE           equ	3972	;# 
  1753   000F85                     PORTF           equ	3973	;# 
  1754   000F86                     PORTG           equ	3974	;# 
  1755   000F87                     PORTH           equ	3975	;# 
  1756   000F88                     PORTJ           equ	3976	;# 
  1757   000F89                     LATA            equ	3977	;# 
  1758   000F8A                     LATB            equ	3978	;# 
  1759   000F8B                     LATC            equ	3979	;# 
  1760   000F8C                     LATD            equ	3980	;# 
  1761   000F8D                     LATE            equ	3981	;# 
  1762   000F8E                     LATF            equ	3982	;# 
  1763   000F8F                     LATG            equ	3983	;# 
  1764   000F90                     LATH            equ	3984	;# 
  1765   000F91                     LATJ            equ	3985	;# 
  1766   000F92                     TRISA           equ	3986	;# 
  1767   000F92                     DDRA            equ	3986	;# 
  1768   000F93                     TRISB           equ	3987	;# 
  1769   000F93                     DDRB            equ	3987	;# 
  1770   000F94                     TRISC           equ	3988	;# 
  1771   000F94                     DDRC            equ	3988	;# 
  1772   000F95                     TRISD           equ	3989	;# 
  1773   000F95                     DDRD            equ	3989	;# 
  1774   000F96                     TRISE           equ	3990	;# 
  1775   000F96                     DDRE            equ	3990	;# 
  1776   000F97                     TRISF           equ	3991	;# 
  1777   000F97                     DDRF            equ	3991	;# 
  1778   000F98                     TRISG           equ	3992	;# 
  1779   000F98                     DDRG            equ	3992	;# 
  1780   000F99                     TRISH           equ	3993	;# 
  1781   000F99                     DDRH            equ	3993	;# 
  1782   000F9A                     TRISJ           equ	3994	;# 
  1783   000F9A                     DDRJ            equ	3994	;# 
  1784   000F9B                     OSCTUNE         equ	3995	;# 
  1785   000F9C                     MEMCON          equ	3996	;# 
  1786   000F9D                     PIE1            equ	3997	;# 
  1787   000F9E                     PIR1            equ	3998	;# 
  1788   000F9F                     IPR1            equ	3999	;# 
  1789   000FA0                     PIE2            equ	4000	;# 
  1790   000FA1                     PIR2            equ	4001	;# 
  1791   000FA2                     IPR2            equ	4002	;# 
  1792   000FA3                     PIE3            equ	4003	;# 
  1793   000FA4                     PIR3            equ	4004	;# 
  1794   000FA5                     IPR3            equ	4005	;# 
  1795   000FA6                     EECON1          equ	4006	;# 
  1796   000FA7                     EECON2          equ	4007	;# 
  1797   000FAB                     RCSTA1          equ	4011	;# 
  1798   000FAB                     RCSTA           equ	4011	;# 
  1799   000FAC                     TXSTA1          equ	4012	;# 
  1800   000FAC                     TXSTA           equ	4012	;# 
  1801   000FAD                     TXREG1          equ	4013	;# 
  1802   000FAD                     TXREG           equ	4013	;# 
  1803   000FAE                     RCREG1          equ	4014	;# 
  1804   000FAE                     RCREG           equ	4014	;# 
  1805   000FAF                     SPBRG1          equ	4015	;# 
  1806   000FAF                     SPBRG           equ	4015	;# 
  1807   000FB0                     PSPCON          equ	4016	;# 
  1808   000FB1                     T3CON           equ	4017	;# 
  1809   000FB2                     TMR3            equ	4018	;# 
  1810   000FB2                     TMR3L           equ	4018	;# 
  1811   000FB3                     TMR3H           equ	4019	;# 
  1812   000FB4                     CMCON           equ	4020	;# 
  1813   000FB5                     CVRCON          equ	4021	;# 
  1814   000FB6                     ECCP1AS         equ	4022	;# 
  1815   000FB7                     CCP3CON         equ	4023	;# 
  1816   000FB7                     ECCP3CON        equ	4023	;# 
  1817   000FB8                     CCPR3           equ	4024	;# 
  1818   000FB8                     CCPR3L          equ	4024	;# 
  1819   000FB9                     CCPR3H          equ	4025	;# 
  1820   000FBA                     CCP2CON         equ	4026	;# 
  1821   000FBA                     ECCP2CON        equ	4026	;# 
  1822   000FBB                     CCPR2           equ	4027	;# 
  1823   000FBB                     CCPR2L          equ	4027	;# 
  1824   000FBC                     CCPR2H          equ	4028	;# 
  1825   000FBD                     CCP1CON         equ	4029	;# 
  1826   000FBD                     ECCP1CON        equ	4029	;# 
  1827   000FBE                     CCPR1           equ	4030	;# 
  1828   000FBE                     CCPR1L          equ	4030	;# 
  1829   000FBF                     CCPR1H          equ	4031	;# 
  1830   000FC0                     ADCON2          equ	4032	;# 
  1831   000FC1                     ADCON1          equ	4033	;# 
  1832   000FC2                     ADCON0          equ	4034	;# 
  1833   000FC3                     ADRES           equ	4035	;# 
  1834   000FC3                     ADRESL          equ	4035	;# 
  1835   000FC4                     ADRESH          equ	4036	;# 
  1836   000FC5                     SSP1CON2        equ	4037	;# 
  1837   000FC5                     SSPCON2         equ	4037	;# 
  1838   000FC6                     SSP1CON1        equ	4038	;# 
  1839   000FC6                     SSPCON1         equ	4038	;# 
  1840   000FC7                     SSP1STAT        equ	4039	;# 
  1841   000FC7                     SSPSTAT         equ	4039	;# 
  1842   000FC8                     SSP1ADD         equ	4040	;# 
  1843   000FC8                     SSPADD          equ	4040	;# 
  1844   000FC9                     SSP1BUF         equ	4041	;# 
  1845   000FC9                     SSPBUF          equ	4041	;# 
  1846   000FCA                     T2CON           equ	4042	;# 
  1847   000FCB                     PR2             equ	4043	;# 
  1848   000FCC                     TMR2            equ	4044	;# 
  1849   000FCD                     T1CON           equ	4045	;# 
  1850   000FCE                     TMR1            equ	4046	;# 
  1851   000FCE                     TMR1L           equ	4046	;# 
  1852   000FCF                     TMR1H           equ	4047	;# 
  1853   000FD0                     RCON            equ	4048	;# 
  1854   000FD1                     WDTCON          equ	4049	;# 
  1855   000FD2                     ECON1           equ	4050	;# 
  1856   000FD3                     OSCCON          equ	4051	;# 
  1857   000FD5                     T0CON           equ	4053	;# 
  1858   000FD6                     TMR0            equ	4054	;# 
  1859   000FD6                     TMR0L           equ	4054	;# 
  1860   000FD7                     TMR0H           equ	4055	;# 
  1861   000FD8                     STATUS          equ	4056	;# 
  1862   000FD9                     FSR2            equ	4057	;# 
  1863   000FD9                     FSR2L           equ	4057	;# 
  1864   000FDA                     FSR2H           equ	4058	;# 
  1865   000FDB                     PLUSW2          equ	4059	;# 
  1866   000FDC                     PREINC2         equ	4060	;# 
  1867   000FDD                     POSTDEC2        equ	4061	;# 
  1868   000FDE                     POSTINC2        equ	4062	;# 
  1869   000FDF                     INDF2           equ	4063	;# 
  1870   000FE0                     BSR             equ	4064	;# 
  1871   000FE1                     FSR1            equ	4065	;# 
  1872   000FE1                     FSR1L           equ	4065	;# 
  1873   000FE2                     FSR1H           equ	4066	;# 
  1874   000FE3                     PLUSW1          equ	4067	;# 
  1875   000FE4                     PREINC1         equ	4068	;# 
  1876   000FE5                     POSTDEC1        equ	4069	;# 
  1877   000FE6                     POSTINC1        equ	4070	;# 
  1878   000FE7                     INDF1           equ	4071	;# 
  1879   000FE8                     WREG            equ	4072	;# 
  1880   000FE9                     FSR0            equ	4073	;# 
  1881   000FE9                     FSR0L           equ	4073	;# 
  1882   000FEA                     FSR0H           equ	4074	;# 
  1883   000FEB                     PLUSW0          equ	4075	;# 
  1884   000FEC                     PREINC0         equ	4076	;# 
  1885   000FED                     POSTDEC0        equ	4077	;# 
  1886   000FEE                     POSTINC0        equ	4078	;# 
  1887   000FEF                     INDF0           equ	4079	;# 
  1888   000FF0                     INTCON3         equ	4080	;# 
  1889   000FF1                     INTCON2         equ	4081	;# 
  1890   000FF2                     INTCON          equ	4082	;# 
  1891   000FF3                     PROD            equ	4083	;# 
  1892   000FF3                     PRODL           equ	4083	;# 
  1893   000FF4                     PRODH           equ	4084	;# 
  1894   000FF5                     TABLAT          equ	4085	;# 
  1895   000FF6                     TBLPTR          equ	4086	;# 
  1896   000FF6                     TBLPTRL         equ	4086	;# 
  1897   000FF7                     TBLPTRH         equ	4087	;# 
  1898   000FF8                     TBLPTRU         equ	4088	;# 
  1899   000FF9                     PCLAT           equ	4089	;# 
  1900   000FF9                     PC              equ	4089	;# 
  1901   000FF9                     PCL             equ	4089	;# 
  1902   000FFA                     PCLATH          equ	4090	;# 
  1903   000FFB                     PCLATU          equ	4091	;# 
  1904   000FFC                     STKPTR          equ	4092	;# 
  1905   000FFD                     TOS             equ	4093	;# 
  1906   000FFD                     TOSL            equ	4093	;# 
  1907   000FFE                     TOSH            equ	4094	;# 
  1908   000FFF                     TOSU            equ	4095	;# 
  1909   000E80                     MAADR5          equ	3712	;# 
  1910   000E81                     MAADR6          equ	3713	;# 
  1911   000E82                     MAADR3          equ	3714	;# 
  1912   000E83                     MAADR4          equ	3715	;# 
  1913   000E84                     MAADR1          equ	3716	;# 
  1914   000E85                     MAADR2          equ	3717	;# 
  1915   000E8A                     MISTAT          equ	3722	;# 
  1916   000E97                     EFLOCON         equ	3735	;# 
  1917   000E98                     EPAUS           equ	3736	;# 
  1918   000E98                     EPAUSL          equ	3736	;# 
  1919   000E99                     EPAUSH          equ	3737	;# 
  1920   000EA0                     MACON1          equ	3744	;# 
  1921   000EA2                     MACON3          equ	3746	;# 
  1922   000EA3                     MACON4          equ	3747	;# 
  1923   000EA4                     MABBIPG         equ	3748	;# 
  1924   000EA6                     MAIPG           equ	3750	;# 
  1925   000EA6                     MAIPGL          equ	3750	;# 
  1926   000EA7                     MAIPGH          equ	3751	;# 
  1927   000EAA                     MAMXFL          equ	3754	;# 
  1928   000EAA                     MAMXFLL         equ	3754	;# 
  1929   000EAB                     MAMXFLH         equ	3755	;# 
  1930   000EB2                     MICMD           equ	3762	;# 
  1931   000EB4                     MIREGADR        equ	3764	;# 
  1932   000EB6                     MIWR            equ	3766	;# 
  1933   000EB6                     MIWRL           equ	3766	;# 
  1934   000EB7                     MIWRH           equ	3767	;# 
  1935   000EB8                     MIRD            equ	3768	;# 
  1936   000EB8                     MIRDL           equ	3768	;# 
  1937   000EB9                     MIRDH           equ	3769	;# 
  1938   000EC0                     EHT0            equ	3776	;# 
  1939   000EC1                     EHT1            equ	3777	;# 
  1940   000EC2                     EHT2            equ	3778	;# 
  1941   000EC3                     EHT3            equ	3779	;# 
  1942   000EC4                     EHT4            equ	3780	;# 
  1943   000EC5                     EHT5            equ	3781	;# 
  1944   000EC6                     EHT6            equ	3782	;# 
  1945   000EC7                     EHT7            equ	3783	;# 
  1946   000EC8                     EPMM0           equ	3784	;# 
  1947   000EC9                     EPMM1           equ	3785	;# 
  1948   000ECA                     EPMM2           equ	3786	;# 
  1949   000ECB                     EPMM3           equ	3787	;# 
  1950   000ECC                     EPMM4           equ	3788	;# 
  1951   000ECD                     EPMM5           equ	3789	;# 
  1952   000ECE                     EPMM6           equ	3790	;# 
  1953   000ECF                     EPMM7           equ	3791	;# 
  1954   000ED0                     EPMCS           equ	3792	;# 
  1955   000ED0                     EPMCSL          equ	3792	;# 
  1956   000ED1                     EPMCSH          equ	3793	;# 
  1957   000ED4                     EPMO            equ	3796	;# 
  1958   000ED4                     EPMOL           equ	3796	;# 
  1959   000ED5                     EPMOH           equ	3797	;# 
  1960   000ED8                     ERXFCON         equ	3800	;# 
  1961   000ED9                     EPKTCNT         equ	3801	;# 
  1962   000EE2                     EWRPT           equ	3810	;# 
  1963   000EE2                     EWRPTL          equ	3810	;# 
  1964   000EE3                     EWRPTH          equ	3811	;# 
  1965   000EE4                     ETXST           equ	3812	;# 
  1966   000EE4                     ETXSTL          equ	3812	;# 
  1967   000EE5                     ETXSTH          equ	3813	;# 
  1968   000EE6                     ETXND           equ	3814	;# 
  1969   000EE6                     ETXNDL          equ	3814	;# 
  1970   000EE7                     ETXNDH          equ	3815	;# 
  1971   000EE8                     ERXST           equ	3816	;# 
  1972   000EE8                     ERXSTL          equ	3816	;# 
  1973   000EE9                     ERXSTH          equ	3817	;# 
  1974   000EEA                     ERXND           equ	3818	;# 
  1975   000EEA                     ERXNDL          equ	3818	;# 
  1976   000EEB                     ERXNDH          equ	3819	;# 
  1977   000EEC                     ERXRDPT         equ	3820	;# 
  1978   000EEC                     ERXRDPTL        equ	3820	;# 
  1979   000EED                     ERXRDPTH        equ	3821	;# 
  1980   000EEE                     ERXWRPT         equ	3822	;# 
  1981   000EEE                     ERXWRPTL        equ	3822	;# 
  1982   000EEF                     ERXWRPTH        equ	3823	;# 
  1983   000EF0                     EDMAST          equ	3824	;# 
  1984   000EF0                     EDMASTL         equ	3824	;# 
  1985   000EF1                     EDMASTH         equ	3825	;# 
  1986   000EF2                     EDMAND          equ	3826	;# 
  1987   000EF2                     EDMANDL         equ	3826	;# 
  1988   000EF3                     EDMANDH         equ	3827	;# 
  1989   000EF4                     EDMADST         equ	3828	;# 
  1990   000EF4                     EDMADSTL        equ	3828	;# 
  1991   000EF5                     EDMADSTH        equ	3829	;# 
  1992   000EF6                     EDMACS          equ	3830	;# 
  1993   000EF6                     EDMACSL         equ	3830	;# 
  1994   000EF7                     EDMACSH         equ	3831	;# 
  1995   000EFB                     EIE             equ	3835	;# 
  1996   000EFD                     ESTAT           equ	3837	;# 
  1997   000EFE                     ECON2           equ	3838	;# 
  1998   000F60                     EIR             equ	3936	;# 
  1999   000F61                     EDATA           equ	3937	;# 
  2000   000F62                     SSP2CON2        equ	3938	;# 
  2001   000F63                     SSP2CON1        equ	3939	;# 
  2002   000F64                     SSP2STAT        equ	3940	;# 
  2003   000F65                     SSP2ADD         equ	3941	;# 
  2004   000F66                     SSP2BUF         equ	3942	;# 
  2005   000F67                     ECCP2DEL        equ	3943	;# 
  2006   000F68                     ECCP2AS         equ	3944	;# 
  2007   000F69                     ECCP3DEL        equ	3945	;# 
  2008   000F6A                     ECCP3AS         equ	3946	;# 
  2009   000F6B                     RCSTA2          equ	3947	;# 
  2010   000F6C                     TXSTA2          equ	3948	;# 
  2011   000F6D                     TXREG2          equ	3949	;# 
  2012   000F6E                     RCREG2          equ	3950	;# 
  2013   000F6F                     SPBRG2          equ	3951	;# 
  2014   000F70                     CCP5CON         equ	3952	;# 
  2015   000F71                     CCPR5           equ	3953	;# 
  2016   000F71                     CCPR5L          equ	3953	;# 
  2017   000F72                     CCPR5H          equ	3954	;# 
  2018   000F73                     CCP4CON         equ	3955	;# 
  2019   000F74                     CCPR4           equ	3956	;# 
  2020   000F74                     CCPR4L          equ	3956	;# 
  2021   000F75                     CCPR4H          equ	3957	;# 
  2022   000F76                     T4CON           equ	3958	;# 
  2023   000F77                     PR4             equ	3959	;# 
  2024   000F78                     TMR4            equ	3960	;# 
  2025   000F79                     ECCP1DEL        equ	3961	;# 
  2026   000F7A                     ERDPT           equ	3962	;# 
  2027   000F7A                     ERDPTL          equ	3962	;# 
  2028   000F7B                     ERDPTH          equ	3963	;# 
  2029   000F7C                     BAUDCON2        equ	3964	;# 
  2030   000F7C                     BAUDCTL2        equ	3964	;# 
  2031   000F7D                     SPBRGH2         equ	3965	;# 
  2032   000F7E                     BAUDCON1        equ	3966	;# 
  2033   000F7E                     BAUDCON         equ	3966	;# 
  2034   000F7E                     BAUDCTL         equ	3966	;# 
  2035   000F7E                     BAUDCTL1        equ	3966	;# 
  2036   000F7F                     SPBRGH1         equ	3967	;# 
  2037   000F7F                     SPBRGH          equ	3967	;# 
  2038   000F80                     PORTA           equ	3968	;# 
  2039   000F81                     PORTB           equ	3969	;# 
  2040   000F82                     PORTC           equ	3970	;# 
  2041   000F83                     PORTD           equ	3971	;# 
  2042   000F84                     PORTE           equ	3972	;# 
  2043   000F85                     PORTF           equ	3973	;# 
  2044   000F86                     PORTG           equ	3974	;# 
  2045   000F87                     PORTH           equ	3975	;# 
  2046   000F88                     PORTJ           equ	3976	;# 
  2047   000F89                     LATA            equ	3977	;# 
  2048   000F8A                     LATB            equ	3978	;# 
  2049   000F8B                     LATC            equ	3979	;# 
  2050   000F8C                     LATD            equ	3980	;# 
  2051   000F8D                     LATE            equ	3981	;# 
  2052   000F8E                     LATF            equ	3982	;# 
  2053   000F8F                     LATG            equ	3983	;# 
  2054   000F90                     LATH            equ	3984	;# 
  2055   000F91                     LATJ            equ	3985	;# 
  2056   000F92                     TRISA           equ	3986	;# 
  2057   000F92                     DDRA            equ	3986	;# 
  2058   000F93                     TRISB           equ	3987	;# 
  2059   000F93                     DDRB            equ	3987	;# 
  2060   000F94                     TRISC           equ	3988	;# 
  2061   000F94                     DDRC            equ	3988	;# 
  2062   000F95                     TRISD           equ	3989	;# 
  2063   000F95                     DDRD            equ	3989	;# 
  2064   000F96                     TRISE           equ	3990	;# 
  2065   000F96                     DDRE            equ	3990	;# 
  2066   000F97                     TRISF           equ	3991	;# 
  2067   000F97                     DDRF            equ	3991	;# 
  2068   000F98                     TRISG           equ	3992	;# 
  2069   000F98                     DDRG            equ	3992	;# 
  2070   000F99                     TRISH           equ	3993	;# 
  2071   000F99                     DDRH            equ	3993	;# 
  2072   000F9A                     TRISJ           equ	3994	;# 
  2073   000F9A                     DDRJ            equ	3994	;# 
  2074   000F9B                     OSCTUNE         equ	3995	;# 
  2075   000F9C                     MEMCON          equ	3996	;# 
  2076   000F9D                     PIE1            equ	3997	;# 
  2077   000F9E                     PIR1            equ	3998	;# 
  2078   000F9F                     IPR1            equ	3999	;# 
  2079   000FA0                     PIE2            equ	4000	;# 
  2080   000FA1                     PIR2            equ	4001	;# 
  2081   000FA2                     IPR2            equ	4002	;# 
  2082   000FA3                     PIE3            equ	4003	;# 
  2083   000FA4                     PIR3            equ	4004	;# 
  2084   000FA5                     IPR3            equ	4005	;# 
  2085   000FA6                     EECON1          equ	4006	;# 
  2086   000FA7                     EECON2          equ	4007	;# 
  2087   000FAB                     RCSTA1          equ	4011	;# 
  2088   000FAB                     RCSTA           equ	4011	;# 
  2089   000FAC                     TXSTA1          equ	4012	;# 
  2090   000FAC                     TXSTA           equ	4012	;# 
  2091   000FAD                     TXREG1          equ	4013	;# 
  2092   000FAD                     TXREG           equ	4013	;# 
  2093   000FAE                     RCREG1          equ	4014	;# 
  2094   000FAE                     RCREG           equ	4014	;# 
  2095   000FAF                     SPBRG1          equ	4015	;# 
  2096   000FAF                     SPBRG           equ	4015	;# 
  2097   000FB0                     PSPCON          equ	4016	;# 
  2098   000FB1                     T3CON           equ	4017	;# 
  2099   000FB2                     TMR3            equ	4018	;# 
  2100   000FB2                     TMR3L           equ	4018	;# 
  2101   000FB3                     TMR3H           equ	4019	;# 
  2102   000FB4                     CMCON           equ	4020	;# 
  2103   000FB5                     CVRCON          equ	4021	;# 
  2104   000FB6                     ECCP1AS         equ	4022	;# 
  2105   000FB7                     CCP3CON         equ	4023	;# 
  2106   000FB7                     ECCP3CON        equ	4023	;# 
  2107   000FB8                     CCPR3           equ	4024	;# 
  2108   000FB8                     CCPR3L          equ	4024	;# 
  2109   000FB9                     CCPR3H          equ	4025	;# 
  2110   000FBA                     CCP2CON         equ	4026	;# 
  2111   000FBA                     ECCP2CON        equ	4026	;# 
  2112   000FBB                     CCPR2           equ	4027	;# 
  2113   000FBB                     CCPR2L          equ	4027	;# 
  2114   000FBC                     CCPR2H          equ	4028	;# 
  2115   000FBD                     CCP1CON         equ	4029	;# 
  2116   000FBD                     ECCP1CON        equ	4029	;# 
  2117   000FBE                     CCPR1           equ	4030	;# 
  2118   000FBE                     CCPR1L          equ	4030	;# 
  2119   000FBF                     CCPR1H          equ	4031	;# 
  2120   000FC0                     ADCON2          equ	4032	;# 
  2121   000FC1                     ADCON1          equ	4033	;# 
  2122   000FC2                     ADCON0          equ	4034	;# 
  2123   000FC3                     ADRES           equ	4035	;# 
  2124   000FC3                     ADRESL          equ	4035	;# 
  2125   000FC4                     ADRESH          equ	4036	;# 
  2126   000FC5                     SSP1CON2        equ	4037	;# 
  2127   000FC5                     SSPCON2         equ	4037	;# 
  2128   000FC6                     SSP1CON1        equ	4038	;# 
  2129   000FC6                     SSPCON1         equ	4038	;# 
  2130   000FC7                     SSP1STAT        equ	4039	;# 
  2131   000FC7                     SSPSTAT         equ	4039	;# 
  2132   000FC8                     SSP1ADD         equ	4040	;# 
  2133   000FC8                     SSPADD          equ	4040	;# 
  2134   000FC9                     SSP1BUF         equ	4041	;# 
  2135   000FC9                     SSPBUF          equ	4041	;# 
  2136   000FCA                     T2CON           equ	4042	;# 
  2137   000FCB                     PR2             equ	4043	;# 
  2138   000FCC                     TMR2            equ	4044	;# 
  2139   000FCD                     T1CON           equ	4045	;# 
  2140   000FCE                     TMR1            equ	4046	;# 
  2141   000FCE                     TMR1L           equ	4046	;# 
  2142   000FCF                     TMR1H           equ	4047	;# 
  2143   000FD0                     RCON            equ	4048	;# 
  2144   000FD1                     WDTCON          equ	4049	;# 
  2145   000FD2                     ECON1           equ	4050	;# 
  2146   000FD3                     OSCCON          equ	4051	;# 
  2147   000FD5                     T0CON           equ	4053	;# 
  2148   000FD6                     TMR0            equ	4054	;# 
  2149   000FD6                     TMR0L           equ	4054	;# 
  2150   000FD7                     TMR0H           equ	4055	;# 
  2151   000FD8                     STATUS          equ	4056	;# 
  2152   000FD9                     FSR2            equ	4057	;# 
  2153   000FD9                     FSR2L           equ	4057	;# 
  2154   000FDA                     FSR2H           equ	4058	;# 
  2155   000FDB                     PLUSW2          equ	4059	;# 
  2156   000FDC                     PREINC2         equ	4060	;# 
  2157   000FDD                     POSTDEC2        equ	4061	;# 
  2158   000FDE                     POSTINC2        equ	4062	;# 
  2159   000FDF                     INDF2           equ	4063	;# 
  2160   000FE0                     BSR             equ	4064	;# 
  2161   000FE1                     FSR1            equ	4065	;# 
  2162   000FE1                     FSR1L           equ	4065	;# 
  2163   000FE2                     FSR1H           equ	4066	;# 
  2164   000FE3                     PLUSW1          equ	4067	;# 
  2165   000FE4                     PREINC1         equ	4068	;# 
  2166   000FE5                     POSTDEC1        equ	4069	;# 
  2167   000FE6                     POSTINC1        equ	4070	;# 
  2168   000FE7                     INDF1           equ	4071	;# 
  2169   000FE8                     WREG            equ	4072	;# 
  2170   000FE9                     FSR0            equ	4073	;# 
  2171   000FE9                     FSR0L           equ	4073	;# 
  2172   000FEA                     FSR0H           equ	4074	;# 
  2173   000FEB                     PLUSW0          equ	4075	;# 
  2174   000FEC                     PREINC0         equ	4076	;# 
  2175   000FED                     POSTDEC0        equ	4077	;# 
  2176   000FEE                     POSTINC0        equ	4078	;# 
  2177   000FEF                     INDF0           equ	4079	;# 
  2178   000FF0                     INTCON3         equ	4080	;# 
  2179   000FF1                     INTCON2         equ	4081	;# 
  2180   000FF2                     INTCON          equ	4082	;# 
  2181   000FF3                     PROD            equ	4083	;# 
  2182   000FF3                     PRODL           equ	4083	;# 
  2183   000FF4                     PRODH           equ	4084	;# 
  2184   000FF5                     TABLAT          equ	4085	;# 
  2185   000FF6                     TBLPTR          equ	4086	;# 
  2186   000FF6                     TBLPTRL         equ	4086	;# 
  2187   000FF7                     TBLPTRH         equ	4087	;# 
  2188   000FF8                     TBLPTRU         equ	4088	;# 
  2189   000FF9                     PCLAT           equ	4089	;# 
  2190   000FF9                     PC              equ	4089	;# 
  2191   000FF9                     PCL             equ	4089	;# 
  2192   000FFA                     PCLATH          equ	4090	;# 
  2193   000FFB                     PCLATU          equ	4091	;# 
  2194   000FFC                     STKPTR          equ	4092	;# 
  2195   000FFD                     TOS             equ	4093	;# 
  2196   000FFD                     TOSL            equ	4093	;# 
  2197   000FFE                     TOSH            equ	4094	;# 
  2198   000FFF                     TOSU            equ	4095	;# 
  2199   000E80                     MAADR5          equ	3712	;# 
  2200   000E81                     MAADR6          equ	3713	;# 
  2201   000E82                     MAADR3          equ	3714	;# 
  2202   000E83                     MAADR4          equ	3715	;# 
  2203   000E84                     MAADR1          equ	3716	;# 
  2204   000E85                     MAADR2          equ	3717	;# 
  2205   000E8A                     MISTAT          equ	3722	;# 
  2206   000E97                     EFLOCON         equ	3735	;# 
  2207   000E98                     EPAUS           equ	3736	;# 
  2208   000E98                     EPAUSL          equ	3736	;# 
  2209   000E99                     EPAUSH          equ	3737	;# 
  2210   000EA0                     MACON1          equ	3744	;# 
  2211   000EA2                     MACON3          equ	3746	;# 
  2212   000EA3                     MACON4          equ	3747	;# 
  2213   000EA4                     MABBIPG         equ	3748	;# 
  2214   000EA6                     MAIPG           equ	3750	;# 
  2215   000EA6                     MAIPGL          equ	3750	;# 
  2216   000EA7                     MAIPGH          equ	3751	;# 
  2217   000EAA                     MAMXFL          equ	3754	;# 
  2218   000EAA                     MAMXFLL         equ	3754	;# 
  2219   000EAB                     MAMXFLH         equ	3755	;# 
  2220   000EB2                     MICMD           equ	3762	;# 
  2221   000EB4                     MIREGADR        equ	3764	;# 
  2222   000EB6                     MIWR            equ	3766	;# 
  2223   000EB6                     MIWRL           equ	3766	;# 
  2224   000EB7                     MIWRH           equ	3767	;# 
  2225   000EB8                     MIRD            equ	3768	;# 
  2226   000EB8                     MIRDL           equ	3768	;# 
  2227   000EB9                     MIRDH           equ	3769	;# 
  2228   000EC0                     EHT0            equ	3776	;# 
  2229   000EC1                     EHT1            equ	3777	;# 
  2230   000EC2                     EHT2            equ	3778	;# 
  2231   000EC3                     EHT3            equ	3779	;# 
  2232   000EC4                     EHT4            equ	3780	;# 
  2233   000EC5                     EHT5            equ	3781	;# 
  2234   000EC6                     EHT6            equ	3782	;# 
  2235   000EC7                     EHT7            equ	3783	;# 
  2236   000EC8                     EPMM0           equ	3784	;# 
  2237   000EC9                     EPMM1           equ	3785	;# 
  2238   000ECA                     EPMM2           equ	3786	;# 
  2239   000ECB                     EPMM3           equ	3787	;# 
  2240   000ECC                     EPMM4           equ	3788	;# 
  2241   000ECD                     EPMM5           equ	3789	;# 
  2242   000ECE                     EPMM6           equ	3790	;# 
  2243   000ECF                     EPMM7           equ	3791	;# 
  2244   000ED0                     EPMCS           equ	3792	;# 
  2245   000ED0                     EPMCSL          equ	3792	;# 
  2246   000ED1                     EPMCSH          equ	3793	;# 
  2247   000ED4                     EPMO            equ	3796	;# 
  2248   000ED4                     EPMOL           equ	3796	;# 
  2249   000ED5                     EPMOH           equ	3797	;# 
  2250   000ED8                     ERXFCON         equ	3800	;# 
  2251   000ED9                     EPKTCNT         equ	3801	;# 
  2252   000EE2                     EWRPT           equ	3810	;# 
  2253   000EE2                     EWRPTL          equ	3810	;# 
  2254   000EE3                     EWRPTH          equ	3811	;# 
  2255   000EE4                     ETXST           equ	3812	;# 
  2256   000EE4                     ETXSTL          equ	3812	;# 
  2257   000EE5                     ETXSTH          equ	3813	;# 
  2258   000EE6                     ETXND           equ	3814	;# 
  2259   000EE6                     ETXNDL          equ	3814	;# 
  2260   000EE7                     ETXNDH          equ	3815	;# 
  2261   000EE8                     ERXST           equ	3816	;# 
  2262   000EE8                     ERXSTL          equ	3816	;# 
  2263   000EE9                     ERXSTH          equ	3817	;# 
  2264   000EEA                     ERXND           equ	3818	;# 
  2265   000EEA                     ERXNDL          equ	3818	;# 
  2266   000EEB                     ERXNDH          equ	3819	;# 
  2267   000EEC                     ERXRDPT         equ	3820	;# 
  2268   000EEC                     ERXRDPTL        equ	3820	;# 
  2269   000EED                     ERXRDPTH        equ	3821	;# 
  2270   000EEE                     ERXWRPT         equ	3822	;# 
  2271   000EEE                     ERXWRPTL        equ	3822	;# 
  2272   000EEF                     ERXWRPTH        equ	3823	;# 
  2273   000EF0                     EDMAST          equ	3824	;# 
  2274   000EF0                     EDMASTL         equ	3824	;# 
  2275   000EF1                     EDMASTH         equ	3825	;# 
  2276   000EF2                     EDMAND          equ	3826	;# 
  2277   000EF2                     EDMANDL         equ	3826	;# 
  2278   000EF3                     EDMANDH         equ	3827	;# 
  2279   000EF4                     EDMADST         equ	3828	;# 
  2280   000EF4                     EDMADSTL        equ	3828	;# 
  2281   000EF5                     EDMADSTH        equ	3829	;# 
  2282   000EF6                     EDMACS          equ	3830	;# 
  2283   000EF6                     EDMACSL         equ	3830	;# 
  2284   000EF7                     EDMACSH         equ	3831	;# 
  2285   000EFB                     EIE             equ	3835	;# 
  2286   000EFD                     ESTAT           equ	3837	;# 
  2287   000EFE                     ECON2           equ	3838	;# 
  2288   000F60                     EIR             equ	3936	;# 
  2289   000F61                     EDATA           equ	3937	;# 
  2290   000F62                     SSP2CON2        equ	3938	;# 
  2291   000F63                     SSP2CON1        equ	3939	;# 
  2292   000F64                     SSP2STAT        equ	3940	;# 
  2293   000F65                     SSP2ADD         equ	3941	;# 
  2294   000F66                     SSP2BUF         equ	3942	;# 
  2295   000F67                     ECCP2DEL        equ	3943	;# 
  2296   000F68                     ECCP2AS         equ	3944	;# 
  2297   000F69                     ECCP3DEL        equ	3945	;# 
  2298   000F6A                     ECCP3AS         equ	3946	;# 
  2299   000F6B                     RCSTA2          equ	3947	;# 
  2300   000F6C                     TXSTA2          equ	3948	;# 
  2301   000F6D                     TXREG2          equ	3949	;# 
  2302   000F6E                     RCREG2          equ	3950	;# 
  2303   000F6F                     SPBRG2          equ	3951	;# 
  2304   000F70                     CCP5CON         equ	3952	;# 
  2305   000F71                     CCPR5           equ	3953	;# 
  2306   000F71                     CCPR5L          equ	3953	;# 
  2307   000F72                     CCPR5H          equ	3954	;# 
  2308   000F73                     CCP4CON         equ	3955	;# 
  2309   000F74                     CCPR4           equ	3956	;# 
  2310   000F74                     CCPR4L          equ	3956	;# 
  2311   000F75                     CCPR4H          equ	3957	;# 
  2312   000F76                     T4CON           equ	3958	;# 
  2313   000F77                     PR4             equ	3959	;# 
  2314   000F78                     TMR4            equ	3960	;# 
  2315   000F79                     ECCP1DEL        equ	3961	;# 
  2316   000F7A                     ERDPT           equ	3962	;# 
  2317   000F7A                     ERDPTL          equ	3962	;# 
  2318   000F7B                     ERDPTH          equ	3963	;# 
  2319   000F7C                     BAUDCON2        equ	3964	;# 
  2320   000F7C                     BAUDCTL2        equ	3964	;# 
  2321   000F7D                     SPBRGH2         equ	3965	;# 
  2322   000F7E                     BAUDCON1        equ	3966	;# 
  2323   000F7E                     BAUDCON         equ	3966	;# 
  2324   000F7E                     BAUDCTL         equ	3966	;# 
  2325   000F7E                     BAUDCTL1        equ	3966	;# 
  2326   000F7F                     SPBRGH1         equ	3967	;# 
  2327   000F7F                     SPBRGH          equ	3967	;# 
  2328   000F80                     PORTA           equ	3968	;# 
  2329   000F81                     PORTB           equ	3969	;# 
  2330   000F82                     PORTC           equ	3970	;# 
  2331   000F83                     PORTD           equ	3971	;# 
  2332   000F84                     PORTE           equ	3972	;# 
  2333   000F85                     PORTF           equ	3973	;# 
  2334   000F86                     PORTG           equ	3974	;# 
  2335   000F87                     PORTH           equ	3975	;# 
  2336   000F88                     PORTJ           equ	3976	;# 
  2337   000F89                     LATA            equ	3977	;# 
  2338   000F8A                     LATB            equ	3978	;# 
  2339   000F8B                     LATC            equ	3979	;# 
  2340   000F8C                     LATD            equ	3980	;# 
  2341   000F8D                     LATE            equ	3981	;# 
  2342   000F8E                     LATF            equ	3982	;# 
  2343   000F8F                     LATG            equ	3983	;# 
  2344   000F90                     LATH            equ	3984	;# 
  2345   000F91                     LATJ            equ	3985	;# 
  2346   000F92                     TRISA           equ	3986	;# 
  2347   000F92                     DDRA            equ	3986	;# 
  2348   000F93                     TRISB           equ	3987	;# 
  2349   000F93                     DDRB            equ	3987	;# 
  2350   000F94                     TRISC           equ	3988	;# 
  2351   000F94                     DDRC            equ	3988	;# 
  2352   000F95                     TRISD           equ	3989	;# 
  2353   000F95                     DDRD            equ	3989	;# 
  2354   000F96                     TRISE           equ	3990	;# 
  2355   000F96                     DDRE            equ	3990	;# 
  2356   000F97                     TRISF           equ	3991	;# 
  2357   000F97                     DDRF            equ	3991	;# 
  2358   000F98                     TRISG           equ	3992	;# 
  2359   000F98                     DDRG            equ	3992	;# 
  2360   000F99                     TRISH           equ	3993	;# 
  2361   000F99                     DDRH            equ	3993	;# 
  2362   000F9A                     TRISJ           equ	3994	;# 
  2363   000F9A                     DDRJ            equ	3994	;# 
  2364   000F9B                     OSCTUNE         equ	3995	;# 
  2365   000F9C                     MEMCON          equ	3996	;# 
  2366   000F9D                     PIE1            equ	3997	;# 
  2367   000F9E                     PIR1            equ	3998	;# 
  2368   000F9F                     IPR1            equ	3999	;# 
  2369   000FA0                     PIE2            equ	4000	;# 
  2370   000FA1                     PIR2            equ	4001	;# 
  2371   000FA2                     IPR2            equ	4002	;# 
  2372   000FA3                     PIE3            equ	4003	;# 
  2373   000FA4                     PIR3            equ	4004	;# 
  2374   000FA5                     IPR3            equ	4005	;# 
  2375   000FA6                     EECON1          equ	4006	;# 
  2376   000FA7                     EECON2          equ	4007	;# 
  2377   000FAB                     RCSTA1          equ	4011	;# 
  2378   000FAB                     RCSTA           equ	4011	;# 
  2379   000FAC                     TXSTA1          equ	4012	;# 
  2380   000FAC                     TXSTA           equ	4012	;# 
  2381   000FAD                     TXREG1          equ	4013	;# 
  2382   000FAD                     TXREG           equ	4013	;# 
  2383   000FAE                     RCREG1          equ	4014	;# 
  2384   000FAE                     RCREG           equ	4014	;# 
  2385   000FAF                     SPBRG1          equ	4015	;# 
  2386   000FAF                     SPBRG           equ	4015	;# 
  2387   000FB0                     PSPCON          equ	4016	;# 
  2388   000FB1                     T3CON           equ	4017	;# 
  2389   000FB2                     TMR3            equ	4018	;# 
  2390   000FB2                     TMR3L           equ	4018	;# 
  2391   000FB3                     TMR3H           equ	4019	;# 
  2392   000FB4                     CMCON           equ	4020	;# 
  2393   000FB5                     CVRCON          equ	4021	;# 
  2394   000FB6                     ECCP1AS         equ	4022	;# 
  2395   000FB7                     CCP3CON         equ	4023	;# 
  2396   000FB7                     ECCP3CON        equ	4023	;# 
  2397   000FB8                     CCPR3           equ	4024	;# 
  2398   000FB8                     CCPR3L          equ	4024	;# 
  2399   000FB9                     CCPR3H          equ	4025	;# 
  2400   000FBA                     CCP2CON         equ	4026	;# 
  2401   000FBA                     ECCP2CON        equ	4026	;# 
  2402   000FBB                     CCPR2           equ	4027	;# 
  2403   000FBB                     CCPR2L          equ	4027	;# 
  2404   000FBC                     CCPR2H          equ	4028	;# 
  2405   000FBD                     CCP1CON         equ	4029	;# 
  2406   000FBD                     ECCP1CON        equ	4029	;# 
  2407   000FBE                     CCPR1           equ	4030	;# 
  2408   000FBE                     CCPR1L          equ	4030	;# 
  2409   000FBF                     CCPR1H          equ	4031	;# 
  2410   000FC0                     ADCON2          equ	4032	;# 
  2411   000FC1                     ADCON1          equ	4033	;# 
  2412   000FC2                     ADCON0          equ	4034	;# 
  2413   000FC3                     ADRES           equ	4035	;# 
  2414   000FC3                     ADRESL          equ	4035	;# 
  2415   000FC4                     ADRESH          equ	4036	;# 
  2416   000FC5                     SSP1CON2        equ	4037	;# 
  2417   000FC5                     SSPCON2         equ	4037	;# 
  2418   000FC6                     SSP1CON1        equ	4038	;# 
  2419   000FC6                     SSPCON1         equ	4038	;# 
  2420   000FC7                     SSP1STAT        equ	4039	;# 
  2421   000FC7                     SSPSTAT         equ	4039	;# 
  2422   000FC8                     SSP1ADD         equ	4040	;# 
  2423   000FC8                     SSPADD          equ	4040	;# 
  2424   000FC9                     SSP1BUF         equ	4041	;# 
  2425   000FC9                     SSPBUF          equ	4041	;# 
  2426   000FCA                     T2CON           equ	4042	;# 
  2427   000FCB                     PR2             equ	4043	;# 
  2428   000FCC                     TMR2            equ	4044	;# 
  2429   000FCD                     T1CON           equ	4045	;# 
  2430   000FCE                     TMR1            equ	4046	;# 
  2431   000FCE                     TMR1L           equ	4046	;# 
  2432   000FCF                     TMR1H           equ	4047	;# 
  2433   000FD0                     RCON            equ	4048	;# 
  2434   000FD1                     WDTCON          equ	4049	;# 
  2435   000FD2                     ECON1           equ	4050	;# 
  2436   000FD3                     OSCCON          equ	4051	;# 
  2437   000FD5                     T0CON           equ	4053	;# 
  2438   000FD6                     TMR0            equ	4054	;# 
  2439   000FD6                     TMR0L           equ	4054	;# 
  2440   000FD7                     TMR0H           equ	4055	;# 
  2441   000FD8                     STATUS          equ	4056	;# 
  2442   000FD9                     FSR2            equ	4057	;# 
  2443   000FD9                     FSR2L           equ	4057	;# 
  2444   000FDA                     FSR2H           equ	4058	;# 
  2445   000FDB                     PLUSW2          equ	4059	;# 
  2446   000FDC                     PREINC2         equ	4060	;# 
  2447   000FDD                     POSTDEC2        equ	4061	;# 
  2448   000FDE                     POSTINC2        equ	4062	;# 
  2449   000FDF                     INDF2           equ	4063	;# 
  2450   000FE0                     BSR             equ	4064	;# 
  2451   000FE1                     FSR1            equ	4065	;# 
  2452   000FE1                     FSR1L           equ	4065	;# 
  2453   000FE2                     FSR1H           equ	4066	;# 
  2454   000FE3                     PLUSW1          equ	4067	;# 
  2455   000FE4                     PREINC1         equ	4068	;# 
  2456   000FE5                     POSTDEC1        equ	4069	;# 
  2457   000FE6                     POSTINC1        equ	4070	;# 
  2458   000FE7                     INDF1           equ	4071	;# 
  2459   000FE8                     WREG            equ	4072	;# 
  2460   000FE9                     FSR0            equ	4073	;# 
  2461   000FE9                     FSR0L           equ	4073	;# 
  2462   000FEA                     FSR0H           equ	4074	;# 
  2463   000FEB                     PLUSW0          equ	4075	;# 
  2464   000FEC                     PREINC0         equ	4076	;# 
  2465   000FED                     POSTDEC0        equ	4077	;# 
  2466   000FEE                     POSTINC0        equ	4078	;# 
  2467   000FEF                     INDF0           equ	4079	;# 
  2468   000FF0                     INTCON3         equ	4080	;# 
  2469   000FF1                     INTCON2         equ	4081	;# 
  2470   000FF2                     INTCON          equ	4082	;# 
  2471   000FF3                     PROD            equ	4083	;# 
  2472   000FF3                     PRODL           equ	4083	;# 
  2473   000FF4                     PRODH           equ	4084	;# 
  2474   000FF5                     TABLAT          equ	4085	;# 
  2475   000FF6                     TBLPTR          equ	4086	;# 
  2476   000FF6                     TBLPTRL         equ	4086	;# 
  2477   000FF7                     TBLPTRH         equ	4087	;# 
  2478   000FF8                     TBLPTRU         equ	4088	;# 
  2479   000FF9                     PCLAT           equ	4089	;# 
  2480   000FF9                     PC              equ	4089	;# 
  2481   000FF9                     PCL             equ	4089	;# 
  2482   000FFA                     PCLATH          equ	4090	;# 
  2483   000FFB                     PCLATU          equ	4091	;# 
  2484   000FFC                     STKPTR          equ	4092	;# 
  2485   000FFD                     TOS             equ	4093	;# 
  2486   000FFD                     TOSL            equ	4093	;# 
  2487   000FFE                     TOSH            equ	4094	;# 
  2488   000FFF                     TOSU            equ	4095	;# 
  2489   000E80                     MAADR5          equ	3712	;# 
  2490   000E81                     MAADR6          equ	3713	;# 
  2491   000E82                     MAADR3          equ	3714	;# 
  2492   000E83                     MAADR4          equ	3715	;# 
  2493   000E84                     MAADR1          equ	3716	;# 
  2494   000E85                     MAADR2          equ	3717	;# 
  2495   000E8A                     MISTAT          equ	3722	;# 
  2496   000E97                     EFLOCON         equ	3735	;# 
  2497   000E98                     EPAUS           equ	3736	;# 
  2498   000E98                     EPAUSL          equ	3736	;# 
  2499   000E99                     EPAUSH          equ	3737	;# 
  2500   000EA0                     MACON1          equ	3744	;# 
  2501   000EA2                     MACON3          equ	3746	;# 
  2502   000EA3                     MACON4          equ	3747	;# 
  2503   000EA4                     MABBIPG         equ	3748	;# 
  2504   000EA6                     MAIPG           equ	3750	;# 
  2505   000EA6                     MAIPGL          equ	3750	;# 
  2506   000EA7                     MAIPGH          equ	3751	;# 
  2507   000EAA                     MAMXFL          equ	3754	;# 
  2508   000EAA                     MAMXFLL         equ	3754	;# 
  2509   000EAB                     MAMXFLH         equ	3755	;# 
  2510   000EB2                     MICMD           equ	3762	;# 
  2511   000EB4                     MIREGADR        equ	3764	;# 
  2512   000EB6                     MIWR            equ	3766	;# 
  2513   000EB6                     MIWRL           equ	3766	;# 
  2514   000EB7                     MIWRH           equ	3767	;# 
  2515   000EB8                     MIRD            equ	3768	;# 
  2516   000EB8                     MIRDL           equ	3768	;# 
  2517   000EB9                     MIRDH           equ	3769	;# 
  2518   000EC0                     EHT0            equ	3776	;# 
  2519   000EC1                     EHT1            equ	3777	;# 
  2520   000EC2                     EHT2            equ	3778	;# 
  2521   000EC3                     EHT3            equ	3779	;# 
  2522   000EC4                     EHT4            equ	3780	;# 
  2523   000EC5                     EHT5            equ	3781	;# 
  2524   000EC6                     EHT6            equ	3782	;# 
  2525   000EC7                     EHT7            equ	3783	;# 
  2526   000EC8                     EPMM0           equ	3784	;# 
  2527   000EC9                     EPMM1           equ	3785	;# 
  2528   000ECA                     EPMM2           equ	3786	;# 
  2529   000ECB                     EPMM3           equ	3787	;# 
  2530   000ECC                     EPMM4           equ	3788	;# 
  2531   000ECD                     EPMM5           equ	3789	;# 
  2532   000ECE                     EPMM6           equ	3790	;# 
  2533   000ECF                     EPMM7           equ	3791	;# 
  2534   000ED0                     EPMCS           equ	3792	;# 
  2535   000ED0                     EPMCSL          equ	3792	;# 
  2536   000ED1                     EPMCSH          equ	3793	;# 
  2537   000ED4                     EPMO            equ	3796	;# 
  2538   000ED4                     EPMOL           equ	3796	;# 
  2539   000ED5                     EPMOH           equ	3797	;# 
  2540   000ED8                     ERXFCON         equ	3800	;# 
  2541   000ED9                     EPKTCNT         equ	3801	;# 
  2542   000EE2                     EWRPT           equ	3810	;# 
  2543   000EE2                     EWRPTL          equ	3810	;# 
  2544   000EE3                     EWRPTH          equ	3811	;# 
  2545   000EE4                     ETXST           equ	3812	;# 
  2546   000EE4                     ETXSTL          equ	3812	;# 
  2547   000EE5                     ETXSTH          equ	3813	;# 
  2548   000EE6                     ETXND           equ	3814	;# 
  2549   000EE6                     ETXNDL          equ	3814	;# 
  2550   000EE7                     ETXNDH          equ	3815	;# 
  2551   000EE8                     ERXST           equ	3816	;# 
  2552   000EE8                     ERXSTL          equ	3816	;# 
  2553   000EE9                     ERXSTH          equ	3817	;# 
  2554   000EEA                     ERXND           equ	3818	;# 
  2555   000EEA                     ERXNDL          equ	3818	;# 
  2556   000EEB                     ERXNDH          equ	3819	;# 
  2557   000EEC                     ERXRDPT         equ	3820	;# 
  2558   000EEC                     ERXRDPTL        equ	3820	;# 
  2559   000EED                     ERXRDPTH        equ	3821	;# 
  2560   000EEE                     ERXWRPT         equ	3822	;# 
  2561   000EEE                     ERXWRPTL        equ	3822	;# 
  2562   000EEF                     ERXWRPTH        equ	3823	;# 
  2563   000EF0                     EDMAST          equ	3824	;# 
  2564   000EF0                     EDMASTL         equ	3824	;# 
  2565   000EF1                     EDMASTH         equ	3825	;# 
  2566   000EF2                     EDMAND          equ	3826	;# 
  2567   000EF2                     EDMANDL         equ	3826	;# 
  2568   000EF3                     EDMANDH         equ	3827	;# 
  2569   000EF4                     EDMADST         equ	3828	;# 
  2570   000EF4                     EDMADSTL        equ	3828	;# 
  2571   000EF5                     EDMADSTH        equ	3829	;# 
  2572   000EF6                     EDMACS          equ	3830	;# 
  2573   000EF6                     EDMACSL         equ	3830	;# 
  2574   000EF7                     EDMACSH         equ	3831	;# 
  2575   000EFB                     EIE             equ	3835	;# 
  2576   000EFD                     ESTAT           equ	3837	;# 
  2577   000EFE                     ECON2           equ	3838	;# 
  2578   000F60                     EIR             equ	3936	;# 
  2579   000F61                     EDATA           equ	3937	;# 
  2580   000F62                     SSP2CON2        equ	3938	;# 
  2581   000F63                     SSP2CON1        equ	3939	;# 
  2582   000F64                     SSP2STAT        equ	3940	;# 
  2583   000F65                     SSP2ADD         equ	3941	;# 
  2584   000F66                     SSP2BUF         equ	3942	;# 
  2585   000F67                     ECCP2DEL        equ	3943	;# 
  2586   000F68                     ECCP2AS         equ	3944	;# 
  2587   000F69                     ECCP3DEL        equ	3945	;# 
  2588   000F6A                     ECCP3AS         equ	3946	;# 
  2589   000F6B                     RCSTA2          equ	3947	;# 
  2590   000F6C                     TXSTA2          equ	3948	;# 
  2591   000F6D                     TXREG2          equ	3949	;# 
  2592   000F6E                     RCREG2          equ	3950	;# 
  2593   000F6F                     SPBRG2          equ	3951	;# 
  2594   000F70                     CCP5CON         equ	3952	;# 
  2595   000F71                     CCPR5           equ	3953	;# 
  2596   000F71                     CCPR5L          equ	3953	;# 
  2597   000F72                     CCPR5H          equ	3954	;# 
  2598   000F73                     CCP4CON         equ	3955	;# 
  2599   000F74                     CCPR4           equ	3956	;# 
  2600   000F74                     CCPR4L          equ	3956	;# 
  2601   000F75                     CCPR4H          equ	3957	;# 
  2602   000F76                     T4CON           equ	3958	;# 
  2603   000F77                     PR4             equ	3959	;# 
  2604   000F78                     TMR4            equ	3960	;# 
  2605   000F79                     ECCP1DEL        equ	3961	;# 
  2606   000F7A                     ERDPT           equ	3962	;# 
  2607   000F7A                     ERDPTL          equ	3962	;# 
  2608   000F7B                     ERDPTH          equ	3963	;# 
  2609   000F7C                     BAUDCON2        equ	3964	;# 
  2610   000F7C                     BAUDCTL2        equ	3964	;# 
  2611   000F7D                     SPBRGH2         equ	3965	;# 
  2612   000F7E                     BAUDCON1        equ	3966	;# 
  2613   000F7E                     BAUDCON         equ	3966	;# 
  2614   000F7E                     BAUDCTL         equ	3966	;# 
  2615   000F7E                     BAUDCTL1        equ	3966	;# 
  2616   000F7F                     SPBRGH1         equ	3967	;# 
  2617   000F7F                     SPBRGH          equ	3967	;# 
  2618   000F80                     PORTA           equ	3968	;# 
  2619   000F81                     PORTB           equ	3969	;# 
  2620   000F82                     PORTC           equ	3970	;# 
  2621   000F83                     PORTD           equ	3971	;# 
  2622   000F84                     PORTE           equ	3972	;# 
  2623   000F85                     PORTF           equ	3973	;# 
  2624   000F86                     PORTG           equ	3974	;# 
  2625   000F87                     PORTH           equ	3975	;# 
  2626   000F88                     PORTJ           equ	3976	;# 
  2627   000F89                     LATA            equ	3977	;# 
  2628   000F8A                     LATB            equ	3978	;# 
  2629   000F8B                     LATC            equ	3979	;# 
  2630   000F8C                     LATD            equ	3980	;# 
  2631   000F8D                     LATE            equ	3981	;# 
  2632   000F8E                     LATF            equ	3982	;# 
  2633   000F8F                     LATG            equ	3983	;# 
  2634   000F90                     LATH            equ	3984	;# 
  2635   000F91                     LATJ            equ	3985	;# 
  2636   000F92                     TRISA           equ	3986	;# 
  2637   000F92                     DDRA            equ	3986	;# 
  2638   000F93                     TRISB           equ	3987	;# 
  2639   000F93                     DDRB            equ	3987	;# 
  2640   000F94                     TRISC           equ	3988	;# 
  2641   000F94                     DDRC            equ	3988	;# 
  2642   000F95                     TRISD           equ	3989	;# 
  2643   000F95                     DDRD            equ	3989	;# 
  2644   000F96                     TRISE           equ	3990	;# 
  2645   000F96                     DDRE            equ	3990	;# 
  2646   000F97                     TRISF           equ	3991	;# 
  2647   000F97                     DDRF            equ	3991	;# 
  2648   000F98                     TRISG           equ	3992	;# 
  2649   000F98                     DDRG            equ	3992	;# 
  2650   000F99                     TRISH           equ	3993	;# 
  2651   000F99                     DDRH            equ	3993	;# 
  2652   000F9A                     TRISJ           equ	3994	;# 
  2653   000F9A                     DDRJ            equ	3994	;# 
  2654   000F9B                     OSCTUNE         equ	3995	;# 
  2655   000F9C                     MEMCON          equ	3996	;# 
  2656   000F9D                     PIE1            equ	3997	;# 
  2657   000F9E                     PIR1            equ	3998	;# 
  2658   000F9F                     IPR1            equ	3999	;# 
  2659   000FA0                     PIE2            equ	4000	;# 
  2660   000FA1                     PIR2            equ	4001	;# 
  2661   000FA2                     IPR2            equ	4002	;# 
  2662   000FA3                     PIE3            equ	4003	;# 
  2663   000FA4                     PIR3            equ	4004	;# 
  2664   000FA5                     IPR3            equ	4005	;# 
  2665   000FA6                     EECON1          equ	4006	;# 
  2666   000FA7                     EECON2          equ	4007	;# 
  2667   000FAB                     RCSTA1          equ	4011	;# 
  2668   000FAB                     RCSTA           equ	4011	;# 
  2669   000FAC                     TXSTA1          equ	4012	;# 
  2670   000FAC                     TXSTA           equ	4012	;# 
  2671   000FAD                     TXREG1          equ	4013	;# 
  2672   000FAD                     TXREG           equ	4013	;# 
  2673   000FAE                     RCREG1          equ	4014	;# 
  2674   000FAE                     RCREG           equ	4014	;# 
  2675   000FAF                     SPBRG1          equ	4015	;# 
  2676   000FAF                     SPBRG           equ	4015	;# 
  2677   000FB0                     PSPCON          equ	4016	;# 
  2678   000FB1                     T3CON           equ	4017	;# 
  2679   000FB2                     TMR3            equ	4018	;# 
  2680   000FB2                     TMR3L           equ	4018	;# 
  2681   000FB3                     TMR3H           equ	4019	;# 
  2682   000FB4                     CMCON           equ	4020	;# 
  2683   000FB5                     CVRCON          equ	4021	;# 
  2684   000FB6                     ECCP1AS         equ	4022	;# 
  2685   000FB7                     CCP3CON         equ	4023	;# 
  2686   000FB7                     ECCP3CON        equ	4023	;# 
  2687   000FB8                     CCPR3           equ	4024	;# 
  2688   000FB8                     CCPR3L          equ	4024	;# 
  2689   000FB9                     CCPR3H          equ	4025	;# 
  2690   000FBA                     CCP2CON         equ	4026	;# 
  2691   000FBA                     ECCP2CON        equ	4026	;# 
  2692   000FBB                     CCPR2           equ	4027	;# 
  2693   000FBB                     CCPR2L          equ	4027	;# 
  2694   000FBC                     CCPR2H          equ	4028	;# 
  2695   000FBD                     CCP1CON         equ	4029	;# 
  2696   000FBD                     ECCP1CON        equ	4029	;# 
  2697   000FBE                     CCPR1           equ	4030	;# 
  2698   000FBE                     CCPR1L          equ	4030	;# 
  2699   000FBF                     CCPR1H          equ	4031	;# 
  2700   000FC0                     ADCON2          equ	4032	;# 
  2701   000FC1                     ADCON1          equ	4033	;# 
  2702   000FC2                     ADCON0          equ	4034	;# 
  2703   000FC3                     ADRES           equ	4035	;# 
  2704   000FC3                     ADRESL          equ	4035	;# 
  2705   000FC4                     ADRESH          equ	4036	;# 
  2706   000FC5                     SSP1CON2        equ	4037	;# 
  2707   000FC5                     SSPCON2         equ	4037	;# 
  2708   000FC6                     SSP1CON1        equ	4038	;# 
  2709   000FC6                     SSPCON1         equ	4038	;# 
  2710   000FC7                     SSP1STAT        equ	4039	;# 
  2711   000FC7                     SSPSTAT         equ	4039	;# 
  2712   000FC8                     SSP1ADD         equ	4040	;# 
  2713   000FC8                     SSPADD          equ	4040	;# 
  2714   000FC9                     SSP1BUF         equ	4041	;# 
  2715   000FC9                     SSPBUF          equ	4041	;# 
  2716   000FCA                     T2CON           equ	4042	;# 
  2717   000FCB                     PR2             equ	4043	;# 
  2718   000FCC                     TMR2            equ	4044	;# 
  2719   000FCD                     T1CON           equ	4045	;# 
  2720   000FCE                     TMR1            equ	4046	;# 
  2721   000FCE                     TMR1L           equ	4046	;# 
  2722   000FCF                     TMR1H           equ	4047	;# 
  2723   000FD0                     RCON            equ	4048	;# 
  2724   000FD1                     WDTCON          equ	4049	;# 
  2725   000FD2                     ECON1           equ	4050	;# 
  2726   000FD3                     OSCCON          equ	4051	;# 
  2727   000FD5                     T0CON           equ	4053	;# 
  2728   000FD6                     TMR0            equ	4054	;# 
  2729   000FD6                     TMR0L           equ	4054	;# 
  2730   000FD7                     TMR0H           equ	4055	;# 
  2731   000FD8                     STATUS          equ	4056	;# 
  2732   000FD9                     FSR2            equ	4057	;# 
  2733   000FD9                     FSR2L           equ	4057	;# 
  2734   000FDA                     FSR2H           equ	4058	;# 
  2735   000FDB                     PLUSW2          equ	4059	;# 
  2736   000FDC                     PREINC2         equ	4060	;# 
  2737   000FDD                     POSTDEC2        equ	4061	;# 
  2738   000FDE                     POSTINC2        equ	4062	;# 
  2739   000FDF                     INDF2           equ	4063	;# 
  2740   000FE0                     BSR             equ	4064	;# 
  2741   000FE1                     FSR1            equ	4065	;# 
  2742   000FE1                     FSR1L           equ	4065	;# 
  2743   000FE2                     FSR1H           equ	4066	;# 
  2744   000FE3                     PLUSW1          equ	4067	;# 
  2745   000FE4                     PREINC1         equ	4068	;# 
  2746   000FE5                     POSTDEC1        equ	4069	;# 
  2747   000FE6                     POSTINC1        equ	4070	;# 
  2748   000FE7                     INDF1           equ	4071	;# 
  2749   000FE8                     WREG            equ	4072	;# 
  2750   000FE9                     FSR0            equ	4073	;# 
  2751   000FE9                     FSR0L           equ	4073	;# 
  2752   000FEA                     FSR0H           equ	4074	;# 
  2753   000FEB                     PLUSW0          equ	4075	;# 
  2754   000FEC                     PREINC0         equ	4076	;# 
  2755   000FED                     POSTDEC0        equ	4077	;# 
  2756   000FEE                     POSTINC0        equ	4078	;# 
  2757   000FEF                     INDF0           equ	4079	;# 
  2758   000FF0                     INTCON3         equ	4080	;# 
  2759   000FF1                     INTCON2         equ	4081	;# 
  2760   000FF2                     INTCON          equ	4082	;# 
  2761   000FF3                     PROD            equ	4083	;# 
  2762   000FF3                     PRODL           equ	4083	;# 
  2763   000FF4                     PRODH           equ	4084	;# 
  2764   000FF5                     TABLAT          equ	4085	;# 
  2765   000FF6                     TBLPTR          equ	4086	;# 
  2766   000FF6                     TBLPTRL         equ	4086	;# 
  2767   000FF7                     TBLPTRH         equ	4087	;# 
  2768   000FF8                     TBLPTRU         equ	4088	;# 
  2769   000FF9                     PCLAT           equ	4089	;# 
  2770   000FF9                     PC              equ	4089	;# 
  2771   000FF9                     PCL             equ	4089	;# 
  2772   000FFA                     PCLATH          equ	4090	;# 
  2773   000FFB                     PCLATU          equ	4091	;# 
  2774   000FFC                     STKPTR          equ	4092	;# 
  2775   000FFD                     TOS             equ	4093	;# 
  2776   000FFD                     TOSL            equ	4093	;# 
  2777   000FFE                     TOSH            equ	4094	;# 
  2778   000FFF                     TOSU            equ	4095	;# 
  2779   000E80                     MAADR5          equ	3712	;# 
  2780   000E81                     MAADR6          equ	3713	;# 
  2781   000E82                     MAADR3          equ	3714	;# 
  2782   000E83                     MAADR4          equ	3715	;# 
  2783   000E84                     MAADR1          equ	3716	;# 
  2784   000E85                     MAADR2          equ	3717	;# 
  2785   000E8A                     MISTAT          equ	3722	;# 
  2786   000E97                     EFLOCON         equ	3735	;# 
  2787   000E98                     EPAUS           equ	3736	;# 
  2788   000E98                     EPAUSL          equ	3736	;# 
  2789   000E99                     EPAUSH          equ	3737	;# 
  2790   000EA0                     MACON1          equ	3744	;# 
  2791   000EA2                     MACON3          equ	3746	;# 
  2792   000EA3                     MACON4          equ	3747	;# 
  2793   000EA4                     MABBIPG         equ	3748	;# 
  2794   000EA6                     MAIPG           equ	3750	;# 
  2795   000EA6                     MAIPGL          equ	3750	;# 
  2796   000EA7                     MAIPGH          equ	3751	;# 
  2797   000EAA                     MAMXFL          equ	3754	;# 
  2798   000EAA                     MAMXFLL         equ	3754	;# 
  2799   000EAB                     MAMXFLH         equ	3755	;# 
  2800   000EB2                     MICMD           equ	3762	;# 
  2801   000EB4                     MIREGADR        equ	3764	;# 
  2802   000EB6                     MIWR            equ	3766	;# 
  2803   000EB6                     MIWRL           equ	3766	;# 
  2804   000EB7                     MIWRH           equ	3767	;# 
  2805   000EB8                     MIRD            equ	3768	;# 
  2806   000EB8                     MIRDL           equ	3768	;# 
  2807   000EB9                     MIRDH           equ	3769	;# 
  2808   000EC0                     EHT0            equ	3776	;# 
  2809   000EC1                     EHT1            equ	3777	;# 
  2810   000EC2                     EHT2            equ	3778	;# 
  2811   000EC3                     EHT3            equ	3779	;# 
  2812   000EC4                     EHT4            equ	3780	;# 
  2813   000EC5                     EHT5            equ	3781	;# 
  2814   000EC6                     EHT6            equ	3782	;# 
  2815   000EC7                     EHT7            equ	3783	;# 
  2816   000EC8                     EPMM0           equ	3784	;# 
  2817   000EC9                     EPMM1           equ	3785	;# 
  2818   000ECA                     EPMM2           equ	3786	;# 
  2819   000ECB                     EPMM3           equ	3787	;# 
  2820   000ECC                     EPMM4           equ	3788	;# 
  2821   000ECD                     EPMM5           equ	3789	;# 
  2822   000ECE                     EPMM6           equ	3790	;# 
  2823   000ECF                     EPMM7           equ	3791	;# 
  2824   000ED0                     EPMCS           equ	3792	;# 
  2825   000ED0                     EPMCSL          equ	3792	;# 
  2826   000ED1                     EPMCSH          equ	3793	;# 
  2827   000ED4                     EPMO            equ	3796	;# 
  2828   000ED4                     EPMOL           equ	3796	;# 
  2829   000ED5                     EPMOH           equ	3797	;# 
  2830   000ED8                     ERXFCON         equ	3800	;# 
  2831   000ED9                     EPKTCNT         equ	3801	;# 
  2832   000EE2                     EWRPT           equ	3810	;# 
  2833   000EE2                     EWRPTL          equ	3810	;# 
  2834   000EE3                     EWRPTH          equ	3811	;# 
  2835   000EE4                     ETXST           equ	3812	;# 
  2836   000EE4                     ETXSTL          equ	3812	;# 
  2837   000EE5                     ETXSTH          equ	3813	;# 
  2838   000EE6                     ETXND           equ	3814	;# 
  2839   000EE6                     ETXNDL          equ	3814	;# 
  2840   000EE7                     ETXNDH          equ	3815	;# 
  2841   000EE8                     ERXST           equ	3816	;# 
  2842   000EE8                     ERXSTL          equ	3816	;# 
  2843   000EE9                     ERXSTH          equ	3817	;# 
  2844   000EEA                     ERXND           equ	3818	;# 
  2845   000EEA                     ERXNDL          equ	3818	;# 
  2846   000EEB                     ERXNDH          equ	3819	;# 
  2847   000EEC                     ERXRDPT         equ	3820	;# 
  2848   000EEC                     ERXRDPTL        equ	3820	;# 
  2849   000EED                     ERXRDPTH        equ	3821	;# 
  2850   000EEE                     ERXWRPT         equ	3822	;# 
  2851   000EEE                     ERXWRPTL        equ	3822	;# 
  2852   000EEF                     ERXWRPTH        equ	3823	;# 
  2853   000EF0                     EDMAST          equ	3824	;# 
  2854   000EF0                     EDMASTL         equ	3824	;# 
  2855   000EF1                     EDMASTH         equ	3825	;# 
  2856   000EF2                     EDMAND          equ	3826	;# 
  2857   000EF2                     EDMANDL         equ	3826	;# 
  2858   000EF3                     EDMANDH         equ	3827	;# 
  2859   000EF4                     EDMADST         equ	3828	;# 
  2860   000EF4                     EDMADSTL        equ	3828	;# 
  2861   000EF5                     EDMADSTH        equ	3829	;# 
  2862   000EF6                     EDMACS          equ	3830	;# 
  2863   000EF6                     EDMACSL         equ	3830	;# 
  2864   000EF7                     EDMACSH         equ	3831	;# 
  2865   000EFB                     EIE             equ	3835	;# 
  2866   000EFD                     ESTAT           equ	3837	;# 
  2867   000EFE                     ECON2           equ	3838	;# 
  2868   000F60                     EIR             equ	3936	;# 
  2869   000F61                     EDATA           equ	3937	;# 
  2870   000F62                     SSP2CON2        equ	3938	;# 
  2871   000F63                     SSP2CON1        equ	3939	;# 
  2872   000F64                     SSP2STAT        equ	3940	;# 
  2873   000F65                     SSP2ADD         equ	3941	;# 
  2874   000F66                     SSP2BUF         equ	3942	;# 
  2875   000F67                     ECCP2DEL        equ	3943	;# 
  2876   000F68                     ECCP2AS         equ	3944	;# 
  2877   000F69                     ECCP3DEL        equ	3945	;# 
  2878   000F6A                     ECCP3AS         equ	3946	;# 
  2879   000F6B                     RCSTA2          equ	3947	;# 
  2880   000F6C                     TXSTA2          equ	3948	;# 
  2881   000F6D                     TXREG2          equ	3949	;# 
  2882   000F6E                     RCREG2          equ	3950	;# 
  2883   000F6F                     SPBRG2          equ	3951	;# 
  2884   000F70                     CCP5CON         equ	3952	;# 
  2885   000F71                     CCPR5           equ	3953	;# 
  2886   000F71                     CCPR5L          equ	3953	;# 
  2887   000F72                     CCPR5H          equ	3954	;# 
  2888   000F73                     CCP4CON         equ	3955	;# 
  2889   000F74                     CCPR4           equ	3956	;# 
  2890   000F74                     CCPR4L          equ	3956	;# 
  2891   000F75                     CCPR4H          equ	3957	;# 
  2892   000F76                     T4CON           equ	3958	;# 
  2893   000F77                     PR4             equ	3959	;# 
  2894   000F78                     TMR4            equ	3960	;# 
  2895   000F79                     ECCP1DEL        equ	3961	;# 
  2896   000F7A                     ERDPT           equ	3962	;# 
  2897   000F7A                     ERDPTL          equ	3962	;# 
  2898   000F7B                     ERDPTH          equ	3963	;# 
  2899   000F7C                     BAUDCON2        equ	3964	;# 
  2900   000F7C                     BAUDCTL2        equ	3964	;# 
  2901   000F7D                     SPBRGH2         equ	3965	;# 
  2902   000F7E                     BAUDCON1        equ	3966	;# 
  2903   000F7E                     BAUDCON         equ	3966	;# 
  2904   000F7E                     BAUDCTL         equ	3966	;# 
  2905   000F7E                     BAUDCTL1        equ	3966	;# 
  2906   000F7F                     SPBRGH1         equ	3967	;# 
  2907   000F7F                     SPBRGH          equ	3967	;# 
  2908   000F80                     PORTA           equ	3968	;# 
  2909   000F81                     PORTB           equ	3969	;# 
  2910   000F82                     PORTC           equ	3970	;# 
  2911   000F83                     PORTD           equ	3971	;# 
  2912   000F84                     PORTE           equ	3972	;# 
  2913   000F85                     PORTF           equ	3973	;# 
  2914   000F86                     PORTG           equ	3974	;# 
  2915   000F87                     PORTH           equ	3975	;# 
  2916   000F88                     PORTJ           equ	3976	;# 
  2917   000F89                     LATA            equ	3977	;# 
  2918   000F8A                     LATB            equ	3978	;# 
  2919   000F8B                     LATC            equ	3979	;# 
  2920   000F8C                     LATD            equ	3980	;# 
  2921   000F8D                     LATE            equ	3981	;# 
  2922   000F8E                     LATF            equ	3982	;# 
  2923   000F8F                     LATG            equ	3983	;# 
  2924   000F90                     LATH            equ	3984	;# 
  2925   000F91                     LATJ            equ	3985	;# 
  2926   000F92                     TRISA           equ	3986	;# 
  2927   000F92                     DDRA            equ	3986	;# 
  2928   000F93                     TRISB           equ	3987	;# 
  2929   000F93                     DDRB            equ	3987	;# 
  2930   000F94                     TRISC           equ	3988	;# 
  2931   000F94                     DDRC            equ	3988	;# 
  2932   000F95                     TRISD           equ	3989	;# 
  2933   000F95                     DDRD            equ	3989	;# 
  2934   000F96                     TRISE           equ	3990	;# 
  2935   000F96                     DDRE            equ	3990	;# 
  2936   000F97                     TRISF           equ	3991	;# 
  2937   000F97                     DDRF            equ	3991	;# 
  2938   000F98                     TRISG           equ	3992	;# 
  2939   000F98                     DDRG            equ	3992	;# 
  2940   000F99                     TRISH           equ	3993	;# 
  2941   000F99                     DDRH            equ	3993	;# 
  2942   000F9A                     TRISJ           equ	3994	;# 
  2943   000F9A                     DDRJ            equ	3994	;# 
  2944   000F9B                     OSCTUNE         equ	3995	;# 
  2945   000F9C                     MEMCON          equ	3996	;# 
  2946   000F9D                     PIE1            equ	3997	;# 
  2947   000F9E                     PIR1            equ	3998	;# 
  2948   000F9F                     IPR1            equ	3999	;# 
  2949   000FA0                     PIE2            equ	4000	;# 
  2950   000FA1                     PIR2            equ	4001	;# 
  2951   000FA2                     IPR2            equ	4002	;# 
  2952   000FA3                     PIE3            equ	4003	;# 
  2953   000FA4                     PIR3            equ	4004	;# 
  2954   000FA5                     IPR3            equ	4005	;# 
  2955   000FA6                     EECON1          equ	4006	;# 
  2956   000FA7                     EECON2          equ	4007	;# 
  2957   000FAB                     RCSTA1          equ	4011	;# 
  2958   000FAB                     RCSTA           equ	4011	;# 
  2959   000FAC                     TXSTA1          equ	4012	;# 
  2960   000FAC                     TXSTA           equ	4012	;# 
  2961   000FAD                     TXREG1          equ	4013	;# 
  2962   000FAD                     TXREG           equ	4013	;# 
  2963   000FAE                     RCREG1          equ	4014	;# 
  2964   000FAE                     RCREG           equ	4014	;# 
  2965   000FAF                     SPBRG1          equ	4015	;# 
  2966   000FAF                     SPBRG           equ	4015	;# 
  2967   000FB0                     PSPCON          equ	4016	;# 
  2968   000FB1                     T3CON           equ	4017	;# 
  2969   000FB2                     TMR3            equ	4018	;# 
  2970   000FB2                     TMR3L           equ	4018	;# 
  2971   000FB3                     TMR3H           equ	4019	;# 
  2972   000FB4                     CMCON           equ	4020	;# 
  2973   000FB5                     CVRCON          equ	4021	;# 
  2974   000FB6                     ECCP1AS         equ	4022	;# 
  2975   000FB7                     CCP3CON         equ	4023	;# 
  2976   000FB7                     ECCP3CON        equ	4023	;# 
  2977   000FB8                     CCPR3           equ	4024	;# 
  2978   000FB8                     CCPR3L          equ	4024	;# 
  2979   000FB9                     CCPR3H          equ	4025	;# 
  2980   000FBA                     CCP2CON         equ	4026	;# 
  2981   000FBA                     ECCP2CON        equ	4026	;# 
  2982   000FBB                     CCPR2           equ	4027	;# 
  2983   000FBB                     CCPR2L          equ	4027	;# 
  2984   000FBC                     CCPR2H          equ	4028	;# 
  2985   000FBD                     CCP1CON         equ	4029	;# 
  2986   000FBD                     ECCP1CON        equ	4029	;# 
  2987   000FBE                     CCPR1           equ	4030	;# 
  2988   000FBE                     CCPR1L          equ	4030	;# 
  2989   000FBF                     CCPR1H          equ	4031	;# 
  2990   000FC0                     ADCON2          equ	4032	;# 
  2991   000FC1                     ADCON1          equ	4033	;# 
  2992   000FC2                     ADCON0          equ	4034	;# 
  2993   000FC3                     ADRES           equ	4035	;# 
  2994   000FC3                     ADRESL          equ	4035	;# 
  2995   000FC4                     ADRESH          equ	4036	;# 
  2996   000FC5                     SSP1CON2        equ	4037	;# 
  2997   000FC5                     SSPCON2         equ	4037	;# 
  2998   000FC6                     SSP1CON1        equ	4038	;# 
  2999   000FC6                     SSPCON1         equ	4038	;# 
  3000   000FC7                     SSP1STAT        equ	4039	;# 
  3001   000FC7                     SSPSTAT         equ	4039	;# 
  3002   000FC8                     SSP1ADD         equ	4040	;# 
  3003   000FC8                     SSPADD          equ	4040	;# 
  3004   000FC9                     SSP1BUF         equ	4041	;# 
  3005   000FC9                     SSPBUF          equ	4041	;# 
  3006   000FCA                     T2CON           equ	4042	;# 
  3007   000FCB                     PR2             equ	4043	;# 
  3008   000FCC                     TMR2            equ	4044	;# 
  3009   000FCD                     T1CON           equ	4045	;# 
  3010   000FCE                     TMR1            equ	4046	;# 
  3011   000FCE                     TMR1L           equ	4046	;# 
  3012   000FCF                     TMR1H           equ	4047	;# 
  3013   000FD0                     RCON            equ	4048	;# 
  3014   000FD1                     WDTCON          equ	4049	;# 
  3015   000FD2                     ECON1           equ	4050	;# 
  3016   000FD3                     OSCCON          equ	4051	;# 
  3017   000FD5                     T0CON           equ	4053	;# 
  3018   000FD6                     TMR0            equ	4054	;# 
  3019   000FD6                     TMR0L           equ	4054	;# 
  3020   000FD7                     TMR0H           equ	4055	;# 
  3021   000FD8                     STATUS          equ	4056	;# 
  3022   000FD9                     FSR2            equ	4057	;# 
  3023   000FD9                     FSR2L           equ	4057	;# 
  3024   000FDA                     FSR2H           equ	4058	;# 
  3025   000FDB                     PLUSW2          equ	4059	;# 
  3026   000FDC                     PREINC2         equ	4060	;# 
  3027   000FDD                     POSTDEC2        equ	4061	;# 
  3028   000FDE                     POSTINC2        equ	4062	;# 
  3029   000FDF                     INDF2           equ	4063	;# 
  3030   000FE0                     BSR             equ	4064	;# 
  3031   000FE1                     FSR1            equ	4065	;# 
  3032   000FE1                     FSR1L           equ	4065	;# 
  3033   000FE2                     FSR1H           equ	4066	;# 
  3034   000FE3                     PLUSW1          equ	4067	;# 
  3035   000FE4                     PREINC1         equ	4068	;# 
  3036   000FE5                     POSTDEC1        equ	4069	;# 
  3037   000FE6                     POSTINC1        equ	4070	;# 
  3038   000FE7                     INDF1           equ	4071	;# 
  3039   000FE8                     WREG            equ	4072	;# 
  3040   000FE9                     FSR0            equ	4073	;# 
  3041   000FE9                     FSR0L           equ	4073	;# 
  3042   000FEA                     FSR0H           equ	4074	;# 
  3043   000FEB                     PLUSW0          equ	4075	;# 
  3044   000FEC                     PREINC0         equ	4076	;# 
  3045   000FED                     POSTDEC0        equ	4077	;# 
  3046   000FEE                     POSTINC0        equ	4078	;# 
  3047   000FEF                     INDF0           equ	4079	;# 
  3048   000FF0                     INTCON3         equ	4080	;# 
  3049   000FF1                     INTCON2         equ	4081	;# 
  3050   000FF2                     INTCON          equ	4082	;# 
  3051   000FF3                     PROD            equ	4083	;# 
  3052   000FF3                     PRODL           equ	4083	;# 
  3053   000FF4                     PRODH           equ	4084	;# 
  3054   000FF5                     TABLAT          equ	4085	;# 
  3055   000FF6                     TBLPTR          equ	4086	;# 
  3056   000FF6                     TBLPTRL         equ	4086	;# 
  3057   000FF7                     TBLPTRH         equ	4087	;# 
  3058   000FF8                     TBLPTRU         equ	4088	;# 
  3059   000FF9                     PCLAT           equ	4089	;# 
  3060   000FF9                     PC              equ	4089	;# 
  3061   000FF9                     PCL             equ	4089	;# 
  3062   000FFA                     PCLATH          equ	4090	;# 
  3063   000FFB                     PCLATU          equ	4091	;# 
  3064   000FFC                     STKPTR          equ	4092	;# 
  3065   000FFD                     TOS             equ	4093	;# 
  3066   000FFD                     TOSL            equ	4093	;# 
  3067   000FFE                     TOSH            equ	4094	;# 
  3068   000FFF                     TOSU            equ	4095	;# 
  3069                           
  3070 ;;_filterObj	offset	0
  3071 ;;_maskObj	offset	6
  3072 ;;_rxObj	offset	0
  3073 ;;_rxdata	offset	16
  3074 ;;_ev	offset	0
  3075 ;;_tmid	offset	6
  3076 ;;_processEvent	offset=-3 (param)
  3077 ;;_id	offset=-4 (param)
  3078 ;;_delay	offset=-6 (param)
  3079 ;;_tm	offset	0
  3080 ;;_temp	offset	2
  3081 ;;_ev	offset=-6 (param)
  3082 ;;_inISR	offset=-7 (param)
  3083 ;;_tmid	offset=-9 (param)
  3084 ;;_i	offset	0
  3085 ;;_tm	offset=-2 (param)
  3086 ;;_ev	offset=-8 (param)
  3087 ;;_inISR	offset=-9 (param)
  3088 ;;_me	offset=-2 (param)
  3089 ;;_delay	offset=-4 (param)
  3090 ;;_me	offset=-2 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_processEvent	offset=-5 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_eventID	offset=-3 (param)
  3095 ;;_rxFlags	offset	0
  3096 ;;_rxObj	offset=-2 (param)
  3097 ;;_rxd	offset=-4 (param)
  3098 ;;_temp32	offset	0
  3099 ;;_ba	offset	4
  3100 ;;_fifoReg	offset	80
  3101 ;;_ciFifoCon	offset	92
  3102 ;;_myReg	offset	97
  3103 ;;_ciFifoUa	offset	101
  3104 ;;_a	offset	105
  3105 ;;_i	offset	107
  3106 ;;_n	offset	108
  3107 ;;_spiTransferError	offset	109
  3108 ;;_channel	offset=-1 (param)
  3109 ;;_rxObj	offset=-3 (param)
  3110 ;;_rxd	offset=-5 (param)
  3111 ;;_nBytes	offset=-6 (param)
  3112 ;;_ciFifoCon	offset	0
  3113 ;;_a	offset	5
  3114 ;;_spiTransferError	offset	7
  3115 ;;_channel	offset=-1 (param)
  3116 ;;_i	offset	0
  3117 ;;_spiTransferSize	offset	2
  3118 ;;_spiTransferError	offset	4
  3119 ;;_address	offset=-2 (param)
  3120 ;;_rxd	offset=-4 (param)
  3121 ;;_nBytes	offset=-6 (param)
  3122 ;;_ciFifoSta	offset	0
  3123 ;;_a	offset	4
  3124 ;;_spiTransferError	offset	6
  3125 ;;_channel	offset=-1 (param)
  3126 ;;_flags	offset=-3 (param)
  3127 ;;_i	offset	0
  3128 ;;_me	offset=-2 (param)
  3129 ;;_ev	offset	0
  3130 ;;_ev	offset=-2 (param)
  3131 ;;_txMsg	offset	0
  3132 ;;_txdata	offset	16
  3133 ;;_percent	offset=-1 (param)
  3134 ;;_ev	offset=-2 (param)
  3135 ;;_txMsg	offset	0
  3136 ;;_txdata	offset	16
  3137 ;;_light	offset=-1 (param)
  3138 ;;_txMsg	offset	0
  3139 ;;_txdata	offset	16
  3140 ;;_light	offset=-1 (param)
  3141 ;;_txFlags	offset	0
  3142 ;;_txObj	offset=-2 (param)
  3143 ;;_txd	offset=-4 (param)
  3144 ;;_temp32	offset	0
  3145 ;;_txBuffer	offset	4
  3146 ;;_fifoReg	offset	80
  3147 ;;_ciFifoCon	offset	92
  3148 ;;_a	offset	97
  3149 ;;_ciFifoUa	offset	101
  3150 ;;_dataBytesInObject	offset	105
  3151 ;;_n	offset	109
  3152 ;;_spiTransferError	offset	111
  3153 ;;_i	offset	112
  3154 ;;_j	offset	113
  3155 ;;_channel	offset=-1 (param)
  3156 ;;_txObj	offset=-3 (param)
  3157 ;;_txd	offset=-5 (param)
  3158 ;;_txdNumBytes	offset=-9 (param)
  3159 ;;_flush	offset=-10 (param)
  3160 ;;_i	offset	0
  3161 ;;_spiTransferSize	offset	2
  3162 ;;_spiTransferError	offset	4
  3163 ;;_address	offset=-2 (param)
  3164 ;;_txd	offset=-4 (param)
  3165 ;;_nBytes	offset=-6 (param)
  3166 ;;_ciFifoCon	offset	0
  3167 ;;_a	offset	5
  3168 ;;_spiTransferError	offset	7
  3169 ;;_channel	offset=-1 (param)
  3170 ;;_flush	offset=-2 (param)
  3171 ;;_w	offset	0
  3172 ;;_i	offset	4
  3173 ;;_j	offset	6
  3174 ;;_spiTransferSize	offset	8
  3175 ;;_n	offset	10
  3176 ;;_spiTransferError	offset	12
  3177 ;;_address	offset=-2 (param)
  3178 ;;_rxd	offset=-4 (param)
  3179 ;;_nWords	offset=-6 (param)
  3180 ;;_dataBytesInObject	offset	0
  3181 ;;_dlc	offset=-1 (param)
  3182 ;;_ciFifoSta	offset	0
  3183 ;;_a	offset	4
  3184 ;;_spiTransferError	offset	6
  3185 ;;_channel	offset=-1 (param)
  3186 ;;_flags	offset=-3 (param)
  3187 ;;_ev	offset	0
  3188 ;;_inISR	offset=-6 (param)
  3189 ;;_sign	offset	0
  3190 ;;_counter	offset	1
  3191 ;;_dividend	offset=-2 (param)
  3192 ;;_divisor	offset=-4 (param)
  3193 ;;_inISR	offset=-1 (param)
  3194 ;;_inISR	offset=-1 (param)
  3195 ;;_InterruptHandler	offset=-3 (param)
  3196 ;;_filter	offset=-1 (param)
  3197 ;;_fObj	offset=-3 (param)
  3198 ;;_mObj	offset=-5 (param)
  3199 ;;_a	offset	0
  3200 ;;_fCtrl	offset	2
  3201 ;;_filter	offset=-1 (param)
  3202 ;;_channel	offset=-2 (param)
  3203 ;;_enable	offset=-3 (param)
  3204 ;;_temp32	offset	0
  3205 ;;_fObj	offset	4
  3206 ;;_a	offset	10
  3207 ;;_filter	offset=-1 (param)
  3208 ;;_id	offset=-3 (param)
  3209 ;;_temp32	offset	0
  3210 ;;_mObj	offset	4
  3211 ;;_a	offset	10
  3212 ;;_filter	offset=-1 (param)
  3213 ;;_mask	offset=-3 (param)
  3214 ;;_EXIDE	offset=-4 (param)
  3215 ;;_a	offset	0
  3216 ;;_spiTransferError	offset	2
  3217 ;;_fCtrl	offset	3
  3218 ;;_filter	offset=-1 (param)
  3219 ;;_txqConfig	offset	0
  3220 ;;_config	offset	4
  3221 ;;_rxfConfig	offset	7
  3222 ;;_txfConfig	offset	10
  3223 ;;_tefConfig	offset	12
  3224 ;;_bitTime	offset=-1 (param)
  3225 ;;_withISR	offset=-2 (param)
  3226 ;;_ciFifoCon	offset	0
  3227 ;;_config	offset=-2 (param)
  3228 ;;_ciFifoCon	offset	0
  3229 ;;_config	offset=-2 (param)
  3230 ;;_ciFifoCon	offset	0
  3231 ;;_config	offset=-2 (param)
  3232 ;;_ciFifoCon	offset	0
  3233 ;;_a	offset	5
  3234 ;;_channel	offset=-1 (param)
  3235 ;;_config	offset=-3 (param)
  3236 ;;_ts	offset=-4 (param)
  3237 ;;_ps	offset=-2 (param)
  3238 ;;_d	offset	0
  3239 ;;_spiTransferError	offset	1
  3240 ;;_ciTefCon	offset	0
  3241 ;;_config	offset=-2 (param)
  3242 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3243 ;;_ciFifoCon	offset	0
  3244 ;;_a	offset	5
  3245 ;;_channel	offset=-1 (param)
  3246 ;;_config	offset=-3 (param)
  3247 ;;_d	offset	0
  3248 ;;_spiTransferError	offset	1
  3249 ;;_opMode	offset=-1 (param)
  3250 ;;_spiTransferError	offset	0
  3251 ;;_address	offset=-2 (param)
  3252 ;;_txd	offset=-3 (param)
  3253 ;;_spiTransferError	offset	0
  3254 ;;_address	offset=-2 (param)
  3255 ;;_rxd	offset=-4 (param)
  3256 ;;_intEnables	offset	0
  3257 ;;_index	offset=-1 (param)
  3258 ;;_flags	offset=-3 (param)
  3259 ;;_spiTransferSize	offset	0
  3260 ;;_i	offset	2
  3261 ;;_spiTransferError	offset	3
  3262 ;;_address	offset=-2 (param)
  3263 ;;_txd	offset=-4 (param)
  3264 ;;_ciCon	offset	0
  3265 ;;_config	offset=-2 (param)
  3266 ;;_ciCon	offset	0
  3267 ;;_config	offset=-2 (param)
  3268 ;;_ciNbtcfg	offset	0
  3269 ;;_bitTime	offset=-1 (param)
  3270 ;;_spiTransferSize	offset	0
  3271 ;;_i	offset	2
  3272 ;;_spiTransferError	offset	3
  3273 ;;_address	offset=-2 (param)
  3274 ;;_txd	offset=-6 (param)
  3275 ;;_dummy	offset	0
  3276 ;;_txPtr	offset=-2 (param)
  3277 ;;_rxPtr	offset=-4 (param)
  3278 ;;_size	offset=-6 (param)
  3279 ;;_dummy	offset	0
  3280 ;;_i	offset	1
  3281 ;;_id	offset=-1 (param)
  3282 ;;_inISR	offset=-2 (param)
  3283 ;;_me	offset=-2 (param)
  3284 ;;_tm	offset	0
  3285 ;;_temp	offset	2
  3286 ;;_ev	offset=-6 (param)
  3287 ;;_inISR	offset=-7 (param)
  3288 ;;_tmid	offset=-9 (param)
  3289 ;;_sign	offset	0
  3290 ;;_counter	offset	1
  3291 ;;_dividend	offset=-2 (param)
  3292 ;;_divisor	offset=-4 (param)
  3293 ;;_i	offset	0
  3294 ;;_tm	offset=-2 (param)
  3295 ;;_ev	offset=-8 (param)
  3296 ;;_inISR	offset=-9 (param)
  3297 ;;_inISR	offset=-1 (param)
  3298 ;;_inISR	offset=-1 (param)
  3299 ;;_me	offset=-2 (param)
  3300 ;;_delay	offset=-4 (param)
  3301 ;;_me	offset=-2 (param)
  3302                           
  3303                           	psect	mediumconst
  3304   00FF8C                     __pmediumconst:
  3305                           	callstack 0
  3306   00FF8C  00                 	db	0
  3307   00FF8D                     _canControlResetValues:
  3308                           	callstack 0
  3309   00FF8D  0760               	dw	1888
  3310   00FF8F  0498               	dw	1176
  3311   00FF91  0F0F               	dw	3855
  3312   00FF93  003E               	dw	62
  3313   00FF95  0303               	dw	771
  3314   00FF97  000E               	dw	14
  3315   00FF99  1000               	dw	4096
  3316   00FF9B  0002               	dw	2
  3317   00FF9D  0000               	dw	0
  3318   00FF9F  0000               	dw	0
  3319   00FFA1  0000               	dw	0
  3320   00FFA3  0000               	dw	0
  3321   00FFA5  0040               	dw	64
  3322   00FFA7  4040               	dw	16448
  3323   00FFA9  0000               	dw	0
  3324   00FFAB  0000               	dw	0
  3325   00FFAD  0000               	dw	0
  3326   00FFAF  0000               	dw	0
  3327   00FFB1  0000               	dw	0
  3328   00FFB3  0000               	dw	0
  3329   00FFB5  0000               	dw	0
  3330   00FFB7  0000               	dw	0
  3331   00FFB9  0000               	dw	0
  3332   00FFBB  0000               	dw	0
  3333   00FFBD  0000               	dw	0
  3334   00FFBF  0000               	dw	0
  3335   00FFC1  0000               	dw	0
  3336   00FFC3  0020               	dw	32
  3337   00FFC5  0000               	dw	0
  3338   00FFC7  0000               	dw	0
  3339   00FFC9  0000               	dw	0
  3340   00FFCB  0000               	dw	0
  3341   00FFCD  0400               	dw	1024
  3342   00FFCF  0000               	dw	0
  3343   00FFD1  0000               	dw	0
  3344   00FFD3  0000               	dw	0
  3345   00FFD5  0000               	dw	0
  3346   00FFD7  0000               	dw	0
  3347   00FFD9  0000               	dw	0
  3348   00FFDB  0000               	dw	0
  3349   00FFDD                     __end_of_canControlResetValues:
  3350                           	callstack 0
  3351   00FFDD                     _canFifoResetValues:
  3352                           	callstack 0
  3353   00FFDD  0400               	dw	1024
  3354   00FFDF  0060               	dw	96
  3355   00FFE1  0000               	dw	0
  3356   00FFE3  0000               	dw	0
  3357   00FFE5  0000               	dw	0
  3358   00FFE7  0000               	dw	0
  3359   00FFE9                     __end_of_canFifoResetValues:
  3360                           	callstack 0
  3361   00FFE9                     _spi2_configuration:
  3362                           	callstack 0
  3363   00FFE9  01                 	db	1
  3364   00FFEA  40                 	db	64
  3365   00FFEB  00                 	db	0
  3366   00FFEC  00                 	db	0
  3367   00FFED                     __end_of_spi2_configuration:
  3368                           	callstack 0
  3369   00FFED                     STR_1:
  3370   00FFED  20                 	db	32
  3371   00FFEE  20                 	db	32
  3372   00FFEF  20                 	db	32
  3373   00FFF0  20                 	db	32
  3374   00FFF1  20                 	db	32
  3375   00FFF2  20                 	db	32
  3376   00FFF3  20                 	db	32
  3377   00FFF4  20                 	db	32
  3378   00FFF5  20                 	db	32
  3379   00FFF6  20                 	db	32
  3380   00FFF7  20                 	db	32
  3381   00FFF8  20                 	db	32
  3382   00FFF9  20                 	db	32
  3383   00FFFA  20                 	db	32
  3384   00FFFB  20                 	db	32
  3385   00FFFC  20                 	db	32
  3386   00FFFD  00                 	db	0
  3387   00FFED                     STR_2           equ	STR_1
  3388   00FFFE  00                 	db	0	; dummy byte at the end
  3389   000003                     __activetblptr  equ	3
  3390                           
  3391                           	psect	nvCOMRAM
  3392   000050                     __pnvCOMRAM:
  3393                           	callstack 0
  3394   000050                     _TMR0_InterruptHandler:
  3395                           	callstack 0
  3396   000050                     	ds	3
  3397   000F62                     _SSP2CON2       set	3938
  3398   000F63                     _SSP2CON1bits   set	3939
  3399   000F65                     _SSP2ADD        set	3941
  3400   000F63                     _SSP2CON1       set	3939
  3401   000F64                     _SSP2STAT       set	3940
  3402   000FD5                     _T0CON          set	4053
  3403   000FD6                     _TMR0L          set	4054
  3404   000FD7                     _TMR0H          set	4055
  3405   000FD5                     _T0CONbits      set	4053
  3406   000FF2                     _INTCONbits     set	4082
  3407   000FD0                     _RCONbits       set	4048
  3408   000FC1                     _ADCON1bits     set	4033
  3409   000F95                     _TRISD          set	3989
  3410   000F94                     _TRISC          set	3988
  3411   000F99                     _TRISH          set	3993
  3412   000F93                     _TRISB          set	3987
  3413   000F98                     _TRISG          set	3992
  3414   000F92                     _TRISA          set	3986
  3415   000F97                     _TRISF          set	3991
  3416   000F96                     _TRISE          set	3990
  3417   000F90                     _LATH           set	3984
  3418   000F8B                     _LATC           set	3979
  3419   000F8F                     _LATG           set	3983
  3420   000F8A                     _LATB           set	3978
  3421   000F8E                     _LATF           set	3982
  3422   000F89                     _LATA           set	3977
  3423   000F8C                     _LATD           set	3980
  3424   000F91                     _LATJ           set	3985
  3425   000F8D                     _LATE           set	3981
  3426   000F9B                     _OSCTUNE        set	3995
  3427   000FD3                     _OSCCON         set	4051
  3428   000F9A                     _TRISJ          set	3994
  3429   000F95                     _TRISDbits      set	3989
  3430   000F98                     _TRISGbits      set	3992
  3431   000F66                     _SSP2BUF        set	3942
  3432   000F64                     _SSP2STATbits   set	3940
  3433   000F8F                     _LATGbits       set	3983
  3434                           
  3435                           ; #config settings
  3436                           
  3437                           	psect	cinit
  3438   014744                     __pcinit:
  3439                           	callstack 0
  3440   014744                     start_initialization:
  3441                           	callstack 0
  3442   014744                     __initialization:
  3443                           	callstack 0
  3444                           
  3445                           ; Clear objects allocated to BIGRAM (282 bytes)
  3446   014744  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3447   014748  EE21 F01A          	lfsr	2,282
  3448   01474C                     clear_0:
  3449   01474C  6AEE               	clrf	postinc0,c
  3450   01474E  50DD               	movf	postdec2,w,c
  3451   014750  50D9               	movf	fsr2l,w,c
  3452   014752  E1FC               	bnz	clear_0
  3453   014754  50DA               	movf	fsr2h,w,c
  3454   014756  E1FA               	bnz	clear_0
  3455                           
  3456                           ; Clear objects allocated to BANK2 (200 bytes)
  3457   014758  EE02  F000         	lfsr	0,__pbssBANK2
  3458   01475C  0EC8               	movlw	200
  3459   01475E                     clear_1:
  3460   01475E  6AEE               	clrf	postinc0,c
  3461   014760  06E8               	decf	wreg,f,c
  3462   014762  E1FD               	bnz	clear_1
  3463                           
  3464                           ; Clear objects allocated to BANK1 (200 bytes)
  3465   014764  EE01  F000         	lfsr	0,__pbssBANK1
  3466   014768  0EC8               	movlw	200
  3467   01476A                     clear_2:
  3468   01476A  6AEE               	clrf	postinc0,c
  3469   01476C  06E8               	decf	wreg,f,c
  3470   01476E  E1FD               	bnz	clear_2
  3471                           
  3472                           ; Clear objects allocated to BANK0 (59 bytes)
  3473   014770  EE00  F060         	lfsr	0,__pbssBANK0
  3474   014774  0E3B               	movlw	59
  3475   014776                     clear_3:
  3476   014776  6AEE               	clrf	postinc0,c
  3477   014778  06E8               	decf	wreg,f,c
  3478   01477A  E1FD               	bnz	clear_3
  3479                           
  3480                           ; Clear objects allocated to COMRAM (31 bytes)
  3481   01477C  EE00  F021         	lfsr	0,__pbssCOMRAM
  3482   014780  0E1F               	movlw	31
  3483   014782                     clear_4:
  3484   014782  6AEE               	clrf	postinc0,c
  3485   014784  06E8               	decf	wreg,f,c
  3486   014786  E1FD               	bnz	clear_4
  3487   014788                     end_of_initialization:
  3488                           	callstack 0
  3489   014788                     __end_of__initialization:
  3490                           	callstack 0
  3491   014788  0100               	movlb	0
  3492   01478A  EFD6  F099         	goto	_main	;jump to C main() function
  3493                           
  3494                           	psect	bssCOMRAM
  3495   000021                     __pbssCOMRAM:
  3496                           	callstack 0
  3497   000021                     motorControl@F6643:
  3498                           	callstack 0
  3499   000021                     	ds	16
  3500   000031                     _dummy:
  3501                           	callstack 0
  3502   000031                     	ds	4
  3503   000035                     TMR0_ISR@CountCallBack:
  3504                           	callstack 0
  3505   000035                     	ds	2
  3506   000037                     _timer0ReloadVal:
  3507                           	callstack 0
  3508   000037                     	ds	2
  3509   000039                     lightControl_Process@oldState:
  3510                           	callstack 0
  3511   000039                     	ds	1
  3512   00003A                     lightControl_Process@state:
  3513                           	callstack 0
  3514   00003A                     	ds	1
  3515   00003B                     lightContol_BackLight@lastLight:
  3516                           	callstack 0
  3517   00003B                     	ds	1
  3518   00003C                     lightContol_FrontLight@lastLight:
  3519                           	callstack 0
  3520   00003C                     	ds	1
  3521   00003D                     motorControl_Process@oldState:
  3522                           	callstack 0
  3523   00003D                     	ds	1
  3524   00003E                     motorControl_Process@state:
  3525                           	callstack 0
  3526   00003E                     	ds	1
  3527   00003F                     motorControl@lastPercent:
  3528                           	callstack 0
  3529   00003F                     	ds	1
  3530                           
  3531                           	psect	bssBANK0
  3532   000060                     __pbssBANK0:
  3533                           	callstack 0
  3534   000060                     _carState:
  3535                           	callstack 0
  3536   000060                     	ds	27
  3537   00007B                     lightContol_BackLight@F6666:
  3538                           	callstack 0
  3539   00007B                     	ds	16
  3540   00008B                     lightContol_FrontLight@F6660:
  3541                           	callstack 0
  3542   00008B                     	ds	16
  3543                           
  3544                           	psect	bssBANK1
  3545   000100                     __pbssBANK1:
  3546                           	callstack 0
  3547   000100                     _spiTransmitBuffer:
  3548                           	callstack 0
  3549   000100                     	ds	200
  3550                           
  3551                           	psect	bssBANK2
  3552   000200                     __pbssBANK2:
  3553                           	callstack 0
  3554   000200                     _spiReceiveBuffer:
  3555                           	callstack 0
  3556   000200                     	ds	200
  3557                           
  3558                           	psect	bssBIGRAM
  3559   0002C8                     __pbssBIGRAM:
  3560                           	callstack 0
  3561   0002C8                     _theXF:
  3562                           	callstack 0
  3563   0002C8                     	ds	282
  3564                           
  3565                           	psect	cstackCOMRAM
  3566   000040                     __pcstackCOMRAM:
  3567                           	callstack 0
  3568   000040                     ??_INTERRUPT_InterruptManager:
  3569                           
  3570                           ; 1 bytes @ 0x0
  3571   000040                     	ds	16
  3572                           
  3573 ;;
  3574 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3575 ;;
  3576 ;; *************** function _main *****************
  3577 ;; Defined at:
  3578 ;;		line 56 in file "main.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  filterObj       6  [STACK] struct _CAN_FILTEROBJ_ID
  3583 ;;  maskObj         6  [STACK] struct _CAN_MASKOBJ_ID
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1  [STACK] void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels required when called: 15
  3599 ;; This function calls:
  3600 ;;		_CanInit
  3601 ;;		_CanSetFilter
  3602 ;;		_SYSTEM_Initialize
  3603 ;;		_TMR0_SetInterruptHandler
  3604 ;;		_XF_executeOnce
  3605 ;;		_XF_init
  3606 ;;		_XF_post
  3607 ;;		_updateCarState
  3608 ;; This function is called by:
  3609 ;;		Startup code after reset
  3610 ;; This function uses a reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text0
  3614   0133AC                     __ptext0:
  3615                           	callstack 0
  3616   0133AC                     _main:
  3617                           	callstack 0
  3618                           
  3619                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3620   0133AC  0E0C               	movlw	12
  3621   0133AE  26E1               	addwf	fsr1l,f,c
  3622   0133B0  0E00               	movlw	0
  3623   0133B2  22E2               	addwfc	fsr1h,f,c
  3624   0133B4                     
  3625                           ;main.c: 58:     CAN_FILTEROBJ_ID filterObj;;main.c: 59:     CAN_MASKOBJ_ID maskObj;;mai
      +                          n.c: 62:     filterObj.ID = 1;
  3626   0133B4  0E01               	movlw	1
  3627   0133B6  6E09               	movwf	(btemp+8)^0,c
  3628   0133B8  6A0A               	clrf	(btemp+9)^0,c
  3629   0133BA  6A0B               	clrf	(btemp+10)^0,c
  3630   0133BC  6A0C               	clrf	(btemp+11)^0,c
  3631                           
  3632                           ;stkvar	_filterObj @ sp[(-12)+0]
  3633   0133BE  0EF4               	movlw	-12
  3634   0133C0  C009  FFE3         	movff	btemp+8,plusw1
  3635   0133C4  0EF5               	movlw	-11
  3636   0133C6  C00A  FFE3         	movff	btemp+9,plusw1
  3637   0133CA  0EF6               	movlw	-10
  3638   0133CC  C00B  FFE3         	movff	btemp+10,plusw1
  3639   0133D0  0EF7               	movlw	-9
  3640   0133D2  C00C  FFE3         	movff	btemp+11,plusw1
  3641   0133D6                     
  3642                           ;main.c: 63:     filterObj.SID11 = 0;
  3643                           ;stkvar	_filterObj @ sp[(-12)+0]
  3644   0133D6  0EF8               	movlw	248
  3645   0133D8  24E1               	addwf	fsr1l,w,c
  3646   0133DA  6ED9               	movwf	fsr2l,c
  3647   0133DC  0EFF               	movlw	255
  3648   0133DE  20E2               	addwfc	fsr1h,w,c
  3649   0133E0  6EDA               	movwf	fsr2h,c
  3650   0133E2  6ADF               	clrf	indf2,c
  3651   0133E4                     
  3652                           ;main.c: 64:     filterObj.EXIDE = 0;
  3653                           ;stkvar	_filterObj @ sp[(-12)+0]
  3654   0133E4  0EF9               	movlw	249
  3655   0133E6  24E1               	addwf	fsr1l,w,c
  3656   0133E8  6ED9               	movwf	fsr2l,c
  3657   0133EA  0EFF               	movlw	255
  3658   0133EC  20E2               	addwfc	fsr1h,w,c
  3659   0133EE  6EDA               	movwf	fsr2h,c
  3660   0133F0  6ADF               	clrf	indf2,c
  3661                           
  3662                           ;main.c: 66:     maskObj.MID = 0x00F;
  3663   0133F2  0E0F               	movlw	15
  3664   0133F4  6E09               	movwf	(btemp+8)^0,c
  3665   0133F6  6A0A               	clrf	(btemp+9)^0,c
  3666   0133F8  6A0B               	clrf	(btemp+10)^0,c
  3667   0133FA  6A0C               	clrf	(btemp+11)^0,c
  3668                           
  3669                           ;stkvar	_maskObj @ sp[(-12)+6]
  3670   0133FC  0EFA               	movlw	-6
  3671   0133FE  C009  FFE3         	movff	btemp+8,plusw1
  3672   013402  0EFB               	movlw	-5
  3673   013404  C00A  FFE3         	movff	btemp+9,plusw1
  3674   013408  0EFC               	movlw	-4
  3675   01340A  C00B  FFE3         	movff	btemp+10,plusw1
  3676   01340E  0EFD               	movlw	-3
  3677   013410  C00C  FFE3         	movff	btemp+11,plusw1
  3678   013414                     
  3679                           ;main.c: 67:     maskObj.MIDE = 1;
  3680                           ;stkvar	_maskObj @ sp[(-12)+6]
  3681   013414  0EFF               	movlw	255
  3682   013416  24E1               	addwf	fsr1l,w,c
  3683   013418  6ED9               	movwf	fsr2l,c
  3684   01341A  0EFF               	movlw	255
  3685   01341C  20E2               	addwfc	fsr1h,w,c
  3686   01341E  6EDA               	movwf	fsr2h,c
  3687   013420  0E01               	movlw	1
  3688   013422  6EDF               	movwf	indf2,c
  3689   013424                     
  3690                           ;main.c: 68:     maskObj.MSID11 = 0;
  3691                           ;stkvar	_maskObj @ sp[(-12)+6]
  3692   013424  0EFE               	movlw	254
  3693   013426  24E1               	addwf	fsr1l,w,c
  3694   013428  6ED9               	movwf	fsr2l,c
  3695   01342A  0EFF               	movlw	255
  3696   01342C  20E2               	addwfc	fsr1h,w,c
  3697   01342E  6EDA               	movwf	fsr2h,c
  3698   013430  6ADF               	clrf	indf2,c
  3699   013432                     
  3700                           ;main.c: 69:     SYSTEM_Initialize();
  3701   013432  ECE9  F0A4         	call	_SYSTEM_Initialize	;wreg free
  3702   013436                     
  3703                           ;main.c: 72:     CanInit(CAN_250K_500K, 0);
  3704   013436  0E00               	movlw	0
  3705   013438  6EE6               	movwf	postinc1,c
  3706   01343A  0E08               	movlw	8
  3707   01343C  6EE6               	movwf	postinc1,c
  3708   01343E  EC32  F08F         	call	_CanInit	;wreg free
  3709   013442                     
  3710                           ;main.c: 73:     CanSetFilter(CAN_FILTER0, &filterObj, &maskObj);
  3711                           ;stkvar	_maskObj @ sp[(-12)+6]
  3712   013442  0EFA               	movlw	250
  3713   013444  24E1               	addwf	fsr1l,w,c
  3714   013446  6E01               	movwf	btemp^0,c
  3715   013448  0EFF               	movlw	255
  3716   01344A  20E2               	addwfc	fsr1h,w,c
  3717   01344C  6E02               	movwf	(btemp+1)^0,c
  3718   01344E  C001  FFE6         	movff	btemp,postinc1
  3719   013452  C002  FFE6         	movff	btemp+1,postinc1
  3720                           
  3721                           ;stkvar	_filterObj @ sp[(-14)+0]
  3722   013456  0EF2               	movlw	242
  3723   013458  24E1               	addwf	fsr1l,w,c
  3724   01345A  6E01               	movwf	btemp^0,c
  3725   01345C  0EFF               	movlw	255
  3726   01345E  20E2               	addwfc	fsr1h,w,c
  3727   013460  6E02               	movwf	(btemp+1)^0,c
  3728   013462  C001  FFE6         	movff	btemp,postinc1
  3729   013466  C002  FFE6         	movff	btemp+1,postinc1
  3730   01346A  0E00               	movlw	0
  3731   01346C  6EE6               	movwf	postinc1,c
  3732   01346E  EC2A  F0A2         	call	_CanSetFilter	;wreg free
  3733   013472                     
  3734                           ;main.c: 75:     XF_init();
  3735   013472  EC1C  F096         	call	_XF_init	;wreg free
  3736   013476                     
  3737                           ;main.c: 77:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3738   013476  0EB6               	movlw	low _XF_decrementAndQueueTimers
  3739   013478  6EE6               	movwf	postinc1,c
  3740   01347A  0E34               	movlw	high _XF_decrementAndQueueTimers
  3741   01347C  6EE6               	movwf	postinc1,c
  3742   01347E  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3743   013480  6EE6               	movwf	postinc1,c
  3744   013482  ECA5  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
  3745   013486                     
  3746                           ;main.c: 85:     (INTCONbits.GIE = 1);
  3747   013486  8EF2               	bsf	242,7,c	;volatile
  3748   013488                     
  3749                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  3750   013488  8CF2               	bsf	242,6,c	;volatile
  3751   01348A                     
  3752                           ;main.c: 95:     XF_post(lightControl_Process,E_INIT,0);
  3753   01348A  0E00               	movlw	0
  3754   01348C  6EE6               	movwf	postinc1,c
  3755   01348E  0E00               	movlw	0
  3756   013490  6EE6               	movwf	postinc1,c
  3757   013492  0E01               	movlw	1
  3758   013494  6EE6               	movwf	postinc1,c
  3759   013496  0E02               	movlw	low _lightControl_Process
  3760   013498  6EE6               	movwf	postinc1,c
  3761   01349A  0E26               	movlw	high _lightControl_Process
  3762   01349C  6EE6               	movwf	postinc1,c
  3763   01349E  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3764   0134A0  6EE6               	movwf	postinc1,c
  3765   0134A2  EC32  F09C         	call	_XF_post	;wreg free
  3766   0134A6                     l5386:
  3767                           
  3768                           ;main.c: 97:     {;main.c: 98:         updateCarState();
  3769   0134A6  EC39  F090         	call	_updateCarState	;wreg free
  3770   0134AA                     
  3771                           ;main.c: 99:         XF_executeOnce();
  3772   0134AA  EC65  F0A1         	call	_XF_executeOnce	;wreg free
  3773   0134AE  EF53  F09A         	goto	l5386
  3774   0134B2  EF57  F000         	goto	start
  3775   0134B6                     __end_of_main:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _updateCarState *****************
  3779 ;; Defined at:
  3780 ;;		line 230 in file "carFunctions.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3785 ;;  rxdata          8  [STACK] unsigned char [8]
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1  [STACK] void 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;Total ram usage:        0 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 12
  3802 ;; This function calls:
  3803 ;;		_CanReceive
  3804 ;;		_XF_post
  3805 ;; This function is called by:
  3806 ;;		_main
  3807 ;; This function uses a reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text1
  3811   012072                     __ptext1:
  3812                           	callstack 0
  3813   012072                     _updateCarState:
  3814                           	callstack 0
  3815                           
  3816                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3817   012072  0E18               	movlw	24
  3818   012074  26E1               	addwf	fsr1l,f,c
  3819   012076  0E00               	movlw	0
  3820   012078  22E2               	addwfc	fsr1h,f,c
  3821   01207A                     
  3822                           ;carFunctions.c: 233:     CAN_RX_MSGOBJ rxObj;;carFunctions.c: 234:     uint8_t rxdata[8
      +                          ];;carFunctions.c: 236:     if (CanReceive(&rxObj, rxdata) == 0)
  3823                           ;stkvar	_rxdata @ sp[(-24)+16]
  3824   01207A  0EF8               	movlw	248
  3825   01207C  24E1               	addwf	fsr1l,w,c
  3826   01207E  6E01               	movwf	btemp^0,c
  3827   012080  0EFF               	movlw	255
  3828   012082  20E2               	addwfc	fsr1h,w,c
  3829   012084  6E02               	movwf	(btemp+1)^0,c
  3830   012086  C001  FFE6         	movff	btemp,postinc1
  3831   01208A  C002  FFE6         	movff	btemp+1,postinc1
  3832                           
  3833                           ;stkvar	_rxObj @ sp[(-26)+0]
  3834   01208E  0EE6               	movlw	230
  3835   012090  24E1               	addwf	fsr1l,w,c
  3836   012092  6E01               	movwf	btemp^0,c
  3837   012094  0EFF               	movlw	255
  3838   012096  20E2               	addwfc	fsr1h,w,c
  3839   012098  6E02               	movwf	(btemp+1)^0,c
  3840   01209A  C001  FFE6         	movff	btemp,postinc1
  3841   01209E  C002  FFE6         	movff	btemp+1,postinc1
  3842   0120A2  EC5F  F0A2         	call	_CanReceive	;wreg free
  3843   0120A6  5001               	movf	btemp^0,w,c
  3844   0120A8  A4D8               	btfss	status,2,c
  3845   0120AA  EF59  F090         	goto	u3021
  3846   0120AE  EF5B  F090         	goto	u3020
  3847   0120B2                     u3021:
  3848   0120B2  EF37  F091         	goto	l1517
  3849   0120B6                     u3020:
  3850   0120B6  EFF9  F090         	goto	l5336
  3851   0120BA                     l5312:
  3852                           
  3853                           ;carFunctions.c: 242:                 carState.contactKey = rxdata[0];
  3854                           ;stkvar	_rxdata @ sp[(-24)+16]
  3855   0120BA  0EF8               	movlw	-8
  3856   0120BC  CFE3 F06E          	movff	plusw1,_carState+14
  3857   0120C0                     
  3858                           ;carFunctions.c: 244:                 if (rxdata[0] == 0)
  3859                           ;stkvar	_rxdata @ sp[(-24)+16]
  3860   0120C0  0EF8               	movlw	-8
  3861   0120C2  50E3               	movf	plusw1,w,c
  3862   0120C4  A4D8               	btfss	status,2,c
  3863   0120C6  EF67  F090         	goto	u3031
  3864   0120CA  EF69  F090         	goto	u3030
  3865   0120CE                     u3031:
  3866   0120CE  EF87  F090         	goto	l5318
  3867   0120D2                     u3030:
  3868   0120D2                     
  3869                           ;carFunctions.c: 245:                 {;carFunctions.c: 246:                     XF_post
      +                          (lightControl_Process, E_CONTACT_OFF, 0);
  3870   0120D2  0E00               	movlw	0
  3871   0120D4  6EE6               	movwf	postinc1,c
  3872   0120D6  0E00               	movlw	0
  3873   0120D8  6EE6               	movwf	postinc1,c
  3874   0120DA  0E02               	movlw	2
  3875   0120DC  6EE6               	movwf	postinc1,c
  3876   0120DE  0E02               	movlw	low _lightControl_Process
  3877   0120E0  6EE6               	movwf	postinc1,c
  3878   0120E2  0E26               	movlw	high _lightControl_Process
  3879   0120E4  6EE6               	movwf	postinc1,c
  3880   0120E6  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3881   0120E8  6EE6               	movwf	postinc1,c
  3882   0120EA  EC32  F09C         	call	_XF_post	;wreg free
  3883                           
  3884                           ;carFunctions.c: 247:                     XF_post(motorControl_Process, E_CONTACT_OFF, 0
      +                          );
  3885   0120EE  0E00               	movlw	0
  3886   0120F0  6EE6               	movwf	postinc1,c
  3887   0120F2  0E00               	movlw	0
  3888   0120F4  6EE6               	movwf	postinc1,c
  3889   0120F6  0E02               	movlw	2
  3890   0120F8  6EE6               	movwf	postinc1,c
  3891   0120FA  0E56               	movlw	low _motorControl_Process
  3892   0120FC  6EE6               	movwf	postinc1,c
  3893   0120FE  0E24               	movlw	high _motorControl_Process
  3894   012100  6EE6               	movwf	postinc1,c
  3895   012102  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3896   012104  6EE6               	movwf	postinc1,c
  3897   012106  EC32  F09C         	call	_XF_post	;wreg free
  3898                           
  3899                           ;carFunctions.c: 248:                 }
  3900   01210A  EF37  F091         	goto	l1517
  3901   01210E                     l5318:
  3902                           
  3903                           ;carFunctions.c: 250:                 {;carFunctions.c: 251:                     XF_post
      +                          (lightControl_Process, E_CONTACT_ON, 0);
  3904   01210E  0E00               	movlw	0
  3905   012110  6EE6               	movwf	postinc1,c
  3906   012112  0E00               	movlw	0
  3907   012114  6EE6               	movwf	postinc1,c
  3908   012116  0E03               	movlw	3
  3909   012118  6EE6               	movwf	postinc1,c
  3910   01211A  0E02               	movlw	low _lightControl_Process
  3911   01211C  6EE6               	movwf	postinc1,c
  3912   01211E  0E26               	movlw	high _lightControl_Process
  3913   012120  6EE6               	movwf	postinc1,c
  3914   012122  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3915   012124  6EE6               	movwf	postinc1,c
  3916   012126  EC32  F09C         	call	_XF_post	;wreg free
  3917                           
  3918                           ;carFunctions.c: 252:                     XF_post(motorControl_Process, E_CONTACT_ON, 0)
      +                          ;
  3919   01212A  0E00               	movlw	0
  3920   01212C  6EE6               	movwf	postinc1,c
  3921   01212E  0E00               	movlw	0
  3922   012130  6EE6               	movwf	postinc1,c
  3923   012132  0E03               	movlw	3
  3924   012134  6EE6               	movwf	postinc1,c
  3925   012136  0E56               	movlw	low _motorControl_Process
  3926   012138  6EE6               	movwf	postinc1,c
  3927   01213A  0E24               	movlw	high _motorControl_Process
  3928   01213C  6EE6               	movwf	postinc1,c
  3929   01213E  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3930   012140  6EE6               	movwf	postinc1,c
  3931   012142  EC32  F09C         	call	_XF_post	;wreg free
  3932   012146  EF37  F091         	goto	l1517
  3933   01214A                     l5320:
  3934                           
  3935                           ;carFunctions.c: 258:                 carState.brakePedal = rxdata[0];
  3936                           ;stkvar	_rxdata @ sp[(-24)+16]
  3937   01214A  0EF8               	movlw	-8
  3938   01214C  CFE3 F06C          	movff	plusw1,_carState+12
  3939   012150                     
  3940                           ;carFunctions.c: 260:                 if (rxdata[0] > 6)
  3941                           ;stkvar	_rxdata @ sp[(-24)+16]
  3942   012150  0EF8               	movlw	-8
  3943   012152  CFE3 F001          	movff	plusw1,btemp
  3944   012156  0E06               	movlw	6
  3945   012158  6401               	cpfsgt	btemp^0,c
  3946   01215A  EFB1  F090         	goto	u3041
  3947   01215E  EFB3  F090         	goto	u3040
  3948   012162                     u3041:
  3949   012162  EFC3  F090         	goto	l5326
  3950   012166                     u3040:
  3951   012166                     
  3952                           ;carFunctions.c: 261:                 {;carFunctions.c: 262:                     XF_post
      +                          (lightControl_Process, E_HIGH_BRAKE, 0);
  3953   012166  0E00               	movlw	0
  3954   012168  6EE6               	movwf	postinc1,c
  3955   01216A  0E00               	movlw	0
  3956   01216C  6EE6               	movwf	postinc1,c
  3957   01216E  0E04               	movlw	4
  3958   012170  6EE6               	movwf	postinc1,c
  3959   012172  0E02               	movlw	low _lightControl_Process
  3960   012174  6EE6               	movwf	postinc1,c
  3961   012176  0E26               	movlw	high _lightControl_Process
  3962   012178  6EE6               	movwf	postinc1,c
  3963   01217A  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3964   01217C  6EE6               	movwf	postinc1,c
  3965   01217E  EC32  F09C         	call	_XF_post	;wreg free
  3966                           
  3967                           ;carFunctions.c: 263:                 }else if (rxdata[0] < 6)
  3968   012182  EF37  F091         	goto	l1517
  3969   012186                     l5326:
  3970                           
  3971                           ;stkvar	_rxdata @ sp[(-24)+16]
  3972   012186  0EF8               	movlw	-8
  3973   012188  CFE3 F001          	movff	plusw1,btemp
  3974   01218C  0E06               	movlw	6
  3975   01218E  6001               	cpfslt	btemp^0,c
  3976   012190  EFCC  F090         	goto	u3051
  3977   012194  EFCE  F090         	goto	u3050
  3978   012198                     u3051:
  3979   012198  EF37  F091         	goto	l1509
  3980   01219C                     u3050:
  3981   01219C                     
  3982                           ;carFunctions.c: 264:                 {;carFunctions.c: 265:                     XF_post
      +                          (lightControl_Process, E_HIGH_BRAKE_RELASED, 0);
  3983   01219C  0E00               	movlw	0
  3984   01219E  6EE6               	movwf	postinc1,c
  3985   0121A0  0E00               	movlw	0
  3986   0121A2  6EE6               	movwf	postinc1,c
  3987   0121A4  0E0A               	movlw	10
  3988   0121A6  6EE6               	movwf	postinc1,c
  3989   0121A8  0E02               	movlw	low _lightControl_Process
  3990   0121AA  6EE6               	movwf	postinc1,c
  3991   0121AC  0E26               	movlw	high _lightControl_Process
  3992   0121AE  6EE6               	movwf	postinc1,c
  3993   0121B0  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3994   0121B2  6EE6               	movwf	postinc1,c
  3995   0121B4  EC32  F09C         	call	_XF_post	;wreg free
  3996   0121B8  EF37  F091         	goto	l1517
  3997   0121BC                     l5330:
  3998                           
  3999                           ;carFunctions.c: 272:                 if (rxdata[0] > 6)
  4000                           ;stkvar	_rxdata @ sp[(-24)+16]
  4001   0121BC  0EF8               	movlw	-8
  4002   0121BE  CFE3 F001          	movff	plusw1,btemp
  4003   0121C2  0E06               	movlw	6
  4004   0121C4  6401               	cpfsgt	btemp^0,c
  4005   0121C6  EFE7  F090         	goto	u3061
  4006   0121CA  EFE9  F090         	goto	u3060
  4007   0121CE                     u3061:
  4008   0121CE  EF37  F091         	goto	l1517
  4009   0121D2                     u3060:
  4010   0121D2                     
  4011                           ;carFunctions.c: 273:                 {;carFunctions.c: 274:                     XF_post
      +                          (motorControl_Process, E_ACCELERATION_ON, 0);
  4012   0121D2  0E00               	movlw	0
  4013   0121D4  6EE6               	movwf	postinc1,c
  4014   0121D6  0E00               	movlw	0
  4015   0121D8  6EE6               	movwf	postinc1,c
  4016   0121DA  0E08               	movlw	8
  4017   0121DC  6EE6               	movwf	postinc1,c
  4018   0121DE  0E56               	movlw	low _motorControl_Process
  4019   0121E0  6EE6               	movwf	postinc1,c
  4020   0121E2  0E24               	movlw	high _motorControl_Process
  4021   0121E4  6EE6               	movwf	postinc1,c
  4022   0121E6  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4023   0121E8  6EE6               	movwf	postinc1,c
  4024   0121EA  EC32  F09C         	call	_XF_post	;wreg free
  4025   0121EE  EF37  F091         	goto	l1517
  4026   0121F2                     l5336:
  4027                           
  4028                           ;stkvar	_rxObj @ sp[(-24)+0]
  4029   0121F2  50E1               	movf	fsr1l,w,c
  4030   0121F4  0FE8               	addlw	-24
  4031   0121F6  6ED9               	movwf	fsr2l,c
  4032   0121F8  50E2               	movf	fsr1h,w,c
  4033   0121FA  6EDA               	movwf	fsr2h,c
  4034   0121FC  0EFF               	movlw	255
  4035   0121FE  22DA               	addwfc	fsr2h,f,c
  4036   012200  0EF0               	movlw	240
  4037   012202  14DE               	andwf	postinc2,w,c
  4038   012204  6E09               	movwf	(btemp+8)^0,c
  4039   012206  0E07               	movlw	7
  4040   012208  14DE               	andwf	postinc2,w,c
  4041   01220A  6E0A               	movwf	(btemp+9)^0,c
  4042   01220C  0E00               	movlw	0
  4043   01220E  14DE               	andwf	postinc2,w,c
  4044   012210  6E0B               	movwf	(btemp+10)^0,c
  4045   012212  0E00               	movlw	0
  4046   012214  14DE               	andwf	postinc2,w,c
  4047   012216  6E0C               	movwf	(btemp+11)^0,c
  4048                           
  4049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4050                           ; Switch size 1, requested type "simple"
  4051                           ; Number of cases is 1, Range of values is 0 to 0
  4052                           ; switch strategies available:
  4053                           ; Name         Instructions Cycles
  4054                           ; simple_byte            4     3 (average)
  4055                           ;	Chosen strategy is simple_byte
  4056   012218  500C               	movf	(btemp+11)^0,w,c
  4057   01221A  0A00               	xorlw	0	; case 0
  4058   01221C  B4D8               	btfsc	status,2,c
  4059   01221E  EF30  F091         	goto	l5592
  4060   012222  EF37  F091         	goto	l1517
  4061   012226                     l5590:
  4062                           
  4063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4064                           ; Switch size 1, requested type "simple"
  4065                           ; Number of cases is 2, Range of values is 0 to 1
  4066                           ; switch strategies available:
  4067                           ; Name         Instructions Cycles
  4068                           ; simple_byte            7     4 (average)
  4069                           ;	Chosen strategy is simple_byte
  4070   012226  500A               	movf	(btemp+9)^0,w,c
  4071   012228  0A00               	xorlw	0	; case 0
  4072   01222A  B4D8               	btfsc	status,2,c
  4073   01222C  EF1E  F091         	goto	l5594
  4074   012230  0A01               	xorlw	1	; case 1
  4075   012232  B4D8               	btfsc	status,2,c
  4076   012234  EF29  F091         	goto	l5596
  4077   012238  EF37  F091         	goto	l1517
  4078   01223C                     l5594:
  4079                           
  4080                           ; Switch size 1, requested type "simple"
  4081                           ; Number of cases is 2, Range of values is 64 to 80
  4082                           ; switch strategies available:
  4083                           ; Name         Instructions Cycles
  4084                           ; simple_byte            7     4 (average)
  4085                           ;	Chosen strategy is simple_byte
  4086   01223C  5009               	movf	(btemp+8)^0,w,c
  4087   01223E  0A40               	xorlw	64	; case 64
  4088   012240  B4D8               	btfsc	status,2,c
  4089   012242  EFA5  F090         	goto	l5320
  4090   012246  0A10               	xorlw	16	; case 80
  4091   012248  B4D8               	btfsc	status,2,c
  4092   01224A  EF5D  F090         	goto	l5312
  4093   01224E  EF37  F091         	goto	l1517
  4094   012252                     l5596:
  4095                           
  4096                           ; Switch size 1, requested type "simple"
  4097                           ; Number of cases is 1, Range of values is 64 to 64
  4098                           ; switch strategies available:
  4099                           ; Name         Instructions Cycles
  4100                           ; simple_byte            4     3 (average)
  4101                           ;	Chosen strategy is simple_byte
  4102   012252  5009               	movf	(btemp+8)^0,w,c
  4103   012254  0A40               	xorlw	64	; case 64
  4104   012256  B4D8               	btfsc	status,2,c
  4105   012258  EFDE  F090         	goto	l5330
  4106   01225C  EF37  F091         	goto	l1517
  4107   012260                     l5592:
  4108                           
  4109                           ; Switch size 1, requested type "simple"
  4110                           ; Number of cases is 1, Range of values is 0 to 0
  4111                           ; switch strategies available:
  4112                           ; Name         Instructions Cycles
  4113                           ; simple_byte            4     3 (average)
  4114                           ;	Chosen strategy is simple_byte
  4115   012260  500B               	movf	(btemp+10)^0,w,c
  4116   012262  0A00               	xorlw	0	; case 0
  4117   012264  B4D8               	btfsc	status,2,c
  4118   012266  EF13  F091         	goto	l5590
  4119   01226A  EF37  F091         	goto	l1517
  4120   01226E                     l1509:
  4121   01226E                     l1517:
  4122                           
  4123                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4124   01226E  0EE8               	movlw	232
  4125   012270  26E1               	addwf	fsr1l,f,c
  4126   012272  0EFF               	movlw	255
  4127   012274  22E2               	addwfc	fsr1h,f,c
  4128   012276  0012               	return		;funcret
  4129   012278                     __end_of_updateCarState:
  4130                           	callstack 0
  4131                           
  4132 ;; *************** function _XF_post *****************
  4133 ;; Defined at:
  4134 ;;		line 274 in file "xf/xf.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4137 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4138 ;;  id              1  [STACK] unsigned char 
  4139 ;;  delay           2  [STACK] unsigned short 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  ev              6  [STACK] struct Event_
  4142 ;;  tmid            1  [STACK] unsigned char 
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1  [STACK] unsigned char 
  4145 ;; Registers used:
  4146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used: 1
  4158 ;; Hardware stack levels required when called: 10
  4159 ;; This function calls:
  4160 ;;		_Event_init
  4161 ;;		_Event_setDelay
  4162 ;;		_Event_setId
  4163 ;;		_Event_setPE
  4164 ;;		_XF_pushEvent
  4165 ;; This function is called by:
  4166 ;;		_main
  4167 ;;		_updateCarState
  4168 ;; This function uses a reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text2
  4172   013864                     __ptext2:
  4173                           	callstack 0
  4174   013864                     _XF_post:
  4175                           	callstack 0
  4176                           
  4177                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4178   013864  0E07               	movlw	7
  4179   013866  26E1               	addwf	fsr1l,f,c
  4180   013868  0E00               	movlw	0
  4181   01386A  22E2               	addwfc	fsr1h,f,c
  4182   01386C                     
  4183                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4184                           ;stkvar	_tmid @ sp[(-7)+6]
  4185   01386C  0EFF               	movlw	-1
  4186   01386E  6AE3               	clrf	plusw1,c
  4187   013870  84E3               	bsf	plusw1,2,c
  4188   013872  86E3               	bsf	plusw1,3,c	;indir
  4189   013874                     
  4190                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4191                           ;stkvar	_ev @ sp[(-7)+0]
  4192   013874  0EF9               	movlw	249
  4193   013876  24E1               	addwf	fsr1l,w,c
  4194   013878  6E01               	movwf	btemp^0,c
  4195   01387A  0EFF               	movlw	255
  4196   01387C  20E2               	addwfc	fsr1h,w,c
  4197   01387E  6E02               	movwf	(btemp+1)^0,c
  4198   013880  C001  FFE6         	movff	btemp,postinc1
  4199   013884  C002  FFE6         	movff	btemp+1,postinc1
  4200   013888  EC7B  F0A3         	call	_Event_init	;wreg free
  4201   01388C                     
  4202                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4203                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4204   01388C  0EF6               	movlw	-10
  4205   01388E  CFE3 FFE6          	movff	plusw1,postinc1
  4206   013892  CFE3 FFE6          	movff	plusw1,postinc1
  4207   013896  CFE3 FFE6          	movff	plusw1,postinc1
  4208                           
  4209                           ;stkvar	_ev @ sp[(-10)+0]
  4210   01389A  0EF6               	movlw	246
  4211   01389C  24E1               	addwf	fsr1l,w,c
  4212   01389E  6E01               	movwf	btemp^0,c
  4213   0138A0  0EFF               	movlw	255
  4214   0138A2  20E2               	addwfc	fsr1h,w,c
  4215   0138A4  6E02               	movwf	(btemp+1)^0,c
  4216   0138A6  C001  FFE6         	movff	btemp,postinc1
  4217   0138AA  C002  FFE6         	movff	btemp+1,postinc1
  4218   0138AE  ECC7  F0A3         	call	_Event_setPE	;wreg free
  4219   0138B2                     
  4220                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4221                           ;stkvar	_id @ sp[(-7)+-4]
  4222   0138B2  0EF5               	movlw	-11
  4223   0138B4  50E3               	movf	plusw1,w,c
  4224   0138B6  6EE6               	movwf	postinc1,c
  4225                           
  4226                           ;stkvar	_ev @ sp[(-8)+0]
  4227   0138B8  0EF8               	movlw	248
  4228   0138BA  24E1               	addwf	fsr1l,w,c
  4229   0138BC  6E01               	movwf	btemp^0,c
  4230   0138BE  0EFF               	movlw	255
  4231   0138C0  20E2               	addwfc	fsr1h,w,c
  4232   0138C2  6E02               	movwf	(btemp+1)^0,c
  4233   0138C4  C001  FFE6         	movff	btemp,postinc1
  4234   0138C8  C002  FFE6         	movff	btemp+1,postinc1
  4235   0138CC  ECC4  F0A4         	call	_Event_setId	;wreg free
  4236   0138D0                     
  4237                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4238                           ;stkvar	_delay @ sp[(-7)+-6]
  4239   0138D0  0EF3               	movlw	-13
  4240   0138D2  CFE3 FFE6          	movff	plusw1,postinc1
  4241   0138D6  CFE3 FFE6          	movff	plusw1,postinc1
  4242                           
  4243                           ;stkvar	_ev @ sp[(-9)+0]
  4244   0138DA  0EF7               	movlw	247
  4245   0138DC  24E1               	addwf	fsr1l,w,c
  4246   0138DE  6E01               	movwf	btemp^0,c
  4247   0138E0  0EFF               	movlw	255
  4248   0138E2  20E2               	addwfc	fsr1h,w,c
  4249   0138E4  6E02               	movwf	(btemp+1)^0,c
  4250   0138E6  C001  FFE6         	movff	btemp,postinc1
  4251   0138EA  C002  FFE6         	movff	btemp+1,postinc1
  4252   0138EE  EC02  F0A4         	call	_Event_setDelay	;wreg free
  4253   0138F2                     
  4254                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4255                           ;stkvar	_tmid @ sp[(-7)+6]
  4256   0138F2  0EFF               	movlw	255
  4257   0138F4  24E1               	addwf	fsr1l,w,c
  4258   0138F6  6E01               	movwf	btemp^0,c
  4259   0138F8  0EFF               	movlw	255
  4260   0138FA  20E2               	addwfc	fsr1h,w,c
  4261   0138FC  6E02               	movwf	(btemp+1)^0,c
  4262   0138FE  C001  FFE6         	movff	btemp,postinc1
  4263   013902  C002  FFE6         	movff	btemp+1,postinc1
  4264   013906  0E00               	movlw	0
  4265   013908  6EE6               	movwf	postinc1,c
  4266                           
  4267                           ;stkvar	_ev @ sp[(-10)+0]
  4268   01390A  0EF6               	movlw	246
  4269   01390C  24E1               	addwf	fsr1l,w,c
  4270   01390E  6ED9               	movwf	fsr2l,c
  4271   013910  0EFF               	movlw	255
  4272   013912  20E2               	addwfc	fsr1h,w,c
  4273   013914  6EDA               	movwf	fsr2h,c
  4274   013916  0E06               	movlw	6
  4275   013918                     u2801:
  4276   013918  CFDE FFE6          	movff	postinc2,postinc1
  4277   01391C  2CE8               	decfsz	wreg,w,c
  4278   01391E  EF8C  F09C         	goto	u2801
  4279   013922  EC5C  F095         	call	_XF_pushEvent	;wreg free
  4280   013926                     
  4281                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4282   013926  0EF3               	movlw	243
  4283   013928  26E1               	addwf	fsr1l,f,c
  4284   01392A  0EFF               	movlw	255
  4285   01392C  22E2               	addwfc	fsr1h,f,c
  4286   01392E  0012               	return		;funcret
  4287   013930                     __end_of_XF_post:
  4288                           	callstack 0
  4289                           
  4290 ;; *************** function _XF_pushEvent *****************
  4291 ;; Defined at:
  4292 ;;		line 106 in file "xf/xf.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  ev              6  [STACK] struct Event_
  4295 ;;  inISR           1  [STACK] _Bool 
  4296 ;;  tmid            2  [STACK] PTR unsigned char 
  4297 ;;		 -> tmid(1), dummy(1), 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  tm              2  [STACK] unsigned short 
  4300 ;;  temp            1  [STACK] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1  [STACK] _Bool 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;Total ram usage:        0 bytes
  4315 ;; Hardware stack levels used: 1
  4316 ;; Hardware stack levels required when called: 9
  4317 ;; This function calls:
  4318 ;;		_ENTERCRITICAL
  4319 ;;		_Event_getDelay
  4320 ;;		_Event_setDelay
  4321 ;;		_LEAVECRITICAL
  4322 ;;		_XF_noMoreEvent
  4323 ;;		_XF_scheduleTimer
  4324 ;;		___awmod
  4325 ;; This function is called by:
  4326 ;;		_XF_decrementAndQueueTimers
  4327 ;;		_XF_post
  4328 ;; This function uses a reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text3
  4332   012AB8                     __ptext3:
  4333                           	callstack 0
  4334   012AB8                     _XF_pushEvent:
  4335                           	callstack 0
  4336                           
  4337                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4338   012AB8  52E6               	movf	postinc1,f,c
  4339   012ABA  52E6               	movf	postinc1,f,c
  4340   012ABC  52E6               	movf	postinc1,f,c
  4341   012ABE                     
  4342                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4343                           ;stkvar	_ev @ sp[(-3)+-6]
  4344   012ABE  0EF7               	movlw	247
  4345   012AC0  24E1               	addwf	fsr1l,w,c
  4346   012AC2  6E01               	movwf	btemp^0,c
  4347   012AC4  0EFF               	movlw	255
  4348   012AC6  20E2               	addwfc	fsr1h,w,c
  4349   012AC8  6E02               	movwf	(btemp+1)^0,c
  4350   012ACA  C001  FFE6         	movff	btemp,postinc1
  4351   012ACE  C002  FFE6         	movff	btemp+1,postinc1
  4352   012AD2  EC92  F0A4         	call	_Event_getDelay	;wreg free
  4353                           
  4354                           ;stkvar	_tm @ sp[(-3)+0]
  4355   012AD6  0EFD               	movlw	-3
  4356   012AD8  C001  FFE3         	movff	btemp,plusw1
  4357   012ADC  0EFE               	movlw	-2
  4358   012ADE  C002  FFE3         	movff	btemp+1,plusw1
  4359   012AE2                     
  4360                           ;xf/xf.c: 111:     if ( tm > 0)
  4361                           ;stkvar	_tm @ sp[(-3)+0]
  4362   012AE2  0EFD               	movlw	-3
  4363   012AE4  CFE3 F001          	movff	plusw1,btemp
  4364   012AE8  0EFE               	movlw	-2
  4365   012AEA  50E3               	movf	plusw1,w,c
  4366   012AEC  1001               	iorwf	btemp^0,w,c
  4367   012AEE  B4D8               	btfsc	status,2,c
  4368   012AF0  EF7C  F095         	goto	u2041
  4369   012AF4  EF7E  F095         	goto	u2040
  4370   012AF8                     u2041:
  4371   012AF8  EFAE  F095         	goto	l4412
  4372   012AFC                     u2040:
  4373   012AFC                     
  4374                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4375   012AFC  0E00               	movlw	0
  4376   012AFE  6EE6               	movwf	postinc1,c
  4377   012B00  0E00               	movlw	0
  4378   012B02  6EE6               	movwf	postinc1,c
  4379                           
  4380                           ;stkvar	_ev @ sp[(-5)+-6]
  4381   012B04  0EF5               	movlw	245
  4382   012B06  24E1               	addwf	fsr1l,w,c
  4383   012B08  6E01               	movwf	btemp^0,c
  4384   012B0A  0EFF               	movlw	255
  4385   012B0C  20E2               	addwfc	fsr1h,w,c
  4386   012B0E  6E02               	movwf	(btemp+1)^0,c
  4387   012B10  C001  FFE6         	movff	btemp,postinc1
  4388   012B14  C002  FFE6         	movff	btemp+1,postinc1
  4389   012B18  EC02  F0A4         	call	_Event_setDelay	;wreg free
  4390   012B1C                     
  4391                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4392                           ;stkvar	_inISR @ sp[(-3)+-7]
  4393   012B1C  0EF6               	movlw	-10
  4394   012B1E  50E3               	movf	plusw1,w,c
  4395   012B20  6EE6               	movwf	postinc1,c
  4396                           
  4397                           ;stkvar	_ev @ sp[(-4)+-6]
  4398   012B22  0EF6               	movlw	246
  4399   012B24  24E1               	addwf	fsr1l,w,c
  4400   012B26  6ED9               	movwf	fsr2l,c
  4401   012B28  0EFF               	movlw	255
  4402   012B2A  20E2               	addwfc	fsr1h,w,c
  4403   012B2C  6EDA               	movwf	fsr2h,c
  4404   012B2E  0E06               	movlw	6
  4405   012B30                     u2051:
  4406   012B30  CFDE FFE6          	movff	postinc2,postinc1
  4407   012B34  2CE8               	decfsz	wreg,w,c
  4408   012B36  EF98  F095         	goto	u2051
  4409                           
  4410                           ;stkvar	_tm @ sp[(-10)+0]
  4411   012B3A  0EF6               	movlw	-10
  4412   012B3C  CFE3 FFE6          	movff	plusw1,postinc1
  4413   012B40  CFE3 FFE6          	movff	plusw1,postinc1
  4414   012B44  EC51  F09B         	call	_XF_scheduleTimer	;wreg free
  4415                           
  4416                           ;stkvar	_tmid @ sp[(-3)+-9]
  4417   012B48  0EF4               	movlw	-12
  4418   012B4A  CFE3 FFD9          	movff	plusw1,fsr2l
  4419   012B4E  0EF5               	movlw	-11
  4420   012B50  CFE3 FFDA          	movff	plusw1,fsr2h
  4421   012B54  C001  FFDF         	movff	btemp,indf2
  4422                           
  4423                           ;xf/xf.c: 115:     }
  4424   012B58  EF15  F096         	goto	l4432
  4425   012B5C                     l4412:
  4426                           
  4427                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4428                           ;stkvar	_inISR @ sp[(-3)+-7]
  4429   012B5C  0EF6               	movlw	-10
  4430   012B5E  50E3               	movf	plusw1,w,c
  4431   012B60  6EE6               	movwf	postinc1,c
  4432   012B62  ECDD  F0A4         	call	_ENTERCRITICAL	;wreg free
  4433   012B66                     
  4434                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4435   012B66  EE23  F0DF         	lfsr	2,_theXF+279
  4436   012B6A  50DF               	movf	indf2,w,c
  4437   012B6C  6E0B               	movwf	(btemp+10)^0,c
  4438   012B6E  6A0C               	clrf	(btemp+11)^0,c
  4439   012B70  0E01               	movlw	1
  4440   012B72  260B               	addwf	(btemp+10)^0,f,c
  4441   012B74  0E00               	movlw	0
  4442   012B76  220C               	addwfc	(btemp+11)^0,f,c
  4443   012B78  BE0C               	btfsc	(btemp+11)^0,7,c
  4444   012B7A  EFC8  F095         	goto	u2061
  4445   012B7E  500C               	movf	(btemp+11)^0,w,c
  4446   012B80  E109               	bnz	u2060
  4447   012B82  0E1E               	movlw	30
  4448   012B84  5C0B               	subwf	(btemp+10)^0,w,c
  4449   012B86  A0D8               	btfss	status,0,c
  4450   012B88  EFC8  F095         	goto	u2061
  4451   012B8C  EFCA  F095         	goto	u2060
  4452   012B90                     u2061:
  4453   012B90  EFCC  F095         	goto	l4418
  4454   012B94                     u2060:
  4455   012B94                     
  4456                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4457   012B94  EC03  F0A5         	call	_XF_noMoreEvent	;wreg free
  4458   012B98                     l4418:
  4459                           
  4460                           ;xf/xf.c: 123:         theXF.countEvt++;
  4461   012B98  C3DF  FFE8         	movff	_theXF+279,wreg
  4462   012B9C  0F01               	addlw	1
  4463   012B9E  CFE8 F3DF          	movff	wreg,_theXF+279
  4464   012BA2                     
  4465                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4466   012BA2  EE23  F0DF         	lfsr	2,_theXF+279
  4467   012BA6  EE03  F0DE         	lfsr	0,_theXF+278
  4468   012BAA  50DE               	movf	postinc2,w,c
  4469   012BAC  5CEE               	subwf	postinc0,w,c
  4470   012BAE  B0D8               	btfsc	status,0,c
  4471   012BB0  EFDC  F095         	goto	u2071
  4472   012BB4  EFDE  F095         	goto	u2070
  4473   012BB8                     u2071:
  4474   012BB8  EFE0  F095         	goto	l4424
  4475   012BBC                     u2070:
  4476   012BBC                     
  4477                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4478   012BBC  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4479   012BC0                     l4424:
  4480                           
  4481                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4482   012BC0  0E1E               	movlw	30
  4483   012BC2  6EE6               	movwf	postinc1,c
  4484   012BC4  0E00               	movlw	0
  4485   012BC6  6EE6               	movwf	postinc1,c
  4486   012BC8  EE23  F0DC         	lfsr	2,_theXF+276
  4487   012BCC  50DF               	movf	indf2,w,c
  4488   012BCE  6E0B               	movwf	(btemp+10)^0,c
  4489   012BD0  6A0C               	clrf	(btemp+11)^0,c
  4490   012BD2  0E01               	movlw	1
  4491   012BD4  260B               	addwf	(btemp+10)^0,f,c
  4492   012BD6  0E00               	movlw	0
  4493   012BD8  220C               	addwfc	(btemp+11)^0,f,c
  4494   012BDA  C00B  FFE6         	movff	btemp+10,postinc1
  4495   012BDE  C00C  FFE6         	movff	btemp+11,postinc1
  4496   012BE2  ECC6  F096         	call	___awmod	;wreg free
  4497                           
  4498                           ;stkvar	_temp @ sp[(-3)+2]
  4499   012BE6  0EFF               	movlw	-1
  4500   012BE8  C001  FFE3         	movff	btemp,plusw1
  4501   012BEC                     
  4502                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4503                           ;stkvar	_ev @ sp[(-3)+-6]
  4504   012BEC  0EF7               	movlw	247
  4505   012BEE  24E1               	addwf	fsr1l,w,c
  4506   012BF0  6ED9               	movwf	fsr2l,c
  4507   012BF2  0EFF               	movlw	255
  4508   012BF4  20E2               	addwfc	fsr1h,w,c
  4509   012BF6  6EDA               	movwf	fsr2h,c
  4510   012BF8  EE03  F0DC         	lfsr	0,_theXF+276
  4511   012BFC  50EF               	movf	indf0,w,c
  4512   012BFE  0D06               	mullw	6
  4513   012C00  0E28               	movlw	low (_theXF+96)
  4514   012C02  24F3               	addwf	243,w,c
  4515   012C04  6EE9               	movwf	fsr0l,c
  4516   012C06  0E03               	movlw	high (_theXF+96)
  4517   012C08  20F4               	addwfc	prodh,w,c
  4518   012C0A  6EEA               	movwf	fsr0h,c
  4519   012C0C  0E05               	movlw	5
  4520   012C0E                     u2081:
  4521   012C0E  CFDB FFEB          	movff	plusw2,plusw0
  4522   012C12  06E8               	decf	wreg,f,c
  4523   012C14  E2FC               	bc	u2081
  4524   012C16                     
  4525                           ;xf/xf.c: 130:         theXF.in = temp;
  4526                           ;stkvar	_temp @ sp[(-3)+2]
  4527   012C16  0EFF               	movlw	-1
  4528   012C18  CFE3 F00C          	movff	plusw1,btemp+11
  4529   012C1C  C00C  F3DC         	movff	btemp+11,_theXF+276
  4530   012C20                     
  4531                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4532                           ;stkvar	_inISR @ sp[(-3)+-7]
  4533   012C20  0EF6               	movlw	-10
  4534   012C22  50E3               	movf	plusw1,w,c
  4535   012C24  6EE6               	movwf	postinc1,c
  4536   012C26  ECD1  F0A4         	call	_LEAVECRITICAL	;wreg free
  4537   012C2A                     l4432:
  4538                           
  4539                           ;xf/xf.c: 133:     return 1;
  4540   012C2A  0E01               	movlw	1
  4541   012C2C  6E01               	movwf	btemp^0,c
  4542   012C2E                     
  4543                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4544   012C2E  0EF4               	movlw	244
  4545   012C30  26E1               	addwf	fsr1l,f,c
  4546   012C32  0EFF               	movlw	255
  4547   012C34  22E2               	addwfc	fsr1h,f,c
  4548   012C36  0012               	return		;funcret
  4549   012C38                     __end_of_XF_pushEvent:
  4550                           	callstack 0
  4551                           
  4552 ;; *************** function _XF_scheduleTimer *****************
  4553 ;; Defined at:
  4554 ;;		line 169 in file "xf/xf.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  tm              2  [STACK] unsigned short 
  4557 ;;  ev              6  [STACK] struct Event_
  4558 ;;  inISR           1  [STACK] _Bool 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  i               1  [STACK] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1  [STACK] unsigned char 
  4563 ;; Registers used:
  4564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used: 1
  4576 ;; Hardware stack levels required when called: 8
  4577 ;; This function calls:
  4578 ;;		_ENTERCRITICAL
  4579 ;;		_LEAVECRITICAL
  4580 ;;		_XF_noMoreTimer
  4581 ;; This function is called by:
  4582 ;;		_XF_pushEvent
  4583 ;; This function uses a reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text4
  4587   0136A2                     __ptext4:
  4588                           	callstack 0
  4589   0136A2                     _XF_scheduleTimer:
  4590                           	callstack 0
  4591                           
  4592                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4593   0136A2  52E6               	movf	postinc1,f,c
  4594   0136A4                     
  4595                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4596                           ;stkvar	_inISR @ sp[(-1)+-9]
  4597   0136A4  0EF6               	movlw	-10
  4598   0136A6  50E3               	movf	plusw1,w,c
  4599   0136A8  6EE6               	movwf	postinc1,c
  4600   0136AA  ECDD  F0A4         	call	_ENTERCRITICAL	;wreg free
  4601                           
  4602                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4603                           ;stkvar	_i @ sp[(-1)+0]
  4604   0136AE  0EFF               	movlw	-1
  4605   0136B0  6AE3               	clrf	plusw1,c
  4606   0136B2                     l4282:
  4607                           
  4608                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4609                           ;stkvar	_i @ sp[(-1)+0]
  4610   0136B2  0EFF               	movlw	-1
  4611   0136B4  50E3               	movf	plusw1,w,c
  4612   0136B6  0D08               	mullw	8
  4613   0136B8  0ECA               	movlw	low (_theXF+2)
  4614   0136BA  24F3               	addwf	243,w,c
  4615   0136BC  6ED9               	movwf	fsr2l,c
  4616   0136BE  0E02               	movlw	high (_theXF+2)
  4617   0136C0  20F4               	addwfc	prodh,w,c
  4618   0136C2  6EDA               	movwf	fsr2h,c
  4619   0136C4  50DF               	movf	indf2,w,c
  4620   0136C6  A4D8               	btfss	status,2,c
  4621   0136C8  EF68  F09B         	goto	u1901
  4622   0136CC  EF6A  F09B         	goto	u1900
  4623   0136D0                     u1901:
  4624   0136D0  EFB0  F09B         	goto	l4300
  4625   0136D4                     u1900:
  4626   0136D4                     
  4627                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4628                           ;stkvar	_tm @ sp[(-1)+-2]
  4629   0136D4  50E1               	movf	fsr1l,w,c
  4630   0136D6  0FFD               	addlw	-3
  4631   0136D8  6ED9               	movwf	fsr2l,c
  4632   0136DA  50E2               	movf	fsr1h,w,c
  4633   0136DC  6EDA               	movwf	fsr2h,c
  4634   0136DE  0EFF               	movlw	255
  4635   0136E0  22DA               	addwfc	fsr2h,f,c
  4636                           
  4637                           ;stkvar	_i @ sp[(-1)+0]
  4638   0136E2  0EFF               	movlw	-1
  4639   0136E4  50E3               	movf	plusw1,w,c
  4640   0136E6  0D08               	mullw	8
  4641   0136E8  0EC8               	movlw	low _theXF
  4642   0136EA  24F3               	addwf	243,w,c
  4643   0136EC  6EE9               	movwf	fsr0l,c
  4644   0136EE  0E02               	movlw	high _theXF
  4645   0136F0  20F4               	addwfc	prodh,w,c
  4646   0136F2  6EEA               	movwf	fsr0h,c
  4647   0136F4  CFDE FFEE          	movff	postinc2,postinc0
  4648   0136F8  CFDD FFED          	movff	postdec2,postdec0
  4649                           
  4650                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4651                           ;stkvar	_ev @ sp[(-1)+-8]
  4652   0136FC  0EF7               	movlw	247
  4653   0136FE  24E1               	addwf	fsr1l,w,c
  4654   013700  6ED9               	movwf	fsr2l,c
  4655   013702  0EFF               	movlw	255
  4656   013704  20E2               	addwfc	fsr1h,w,c
  4657   013706  6EDA               	movwf	fsr2h,c
  4658                           
  4659                           ;stkvar	_i @ sp[(-1)+0]
  4660   013708  0EFF               	movlw	-1
  4661   01370A  50E3               	movf	plusw1,w,c
  4662   01370C  0D08               	mullw	8
  4663   01370E  0ECA               	movlw	low (_theXF+2)
  4664   013710  24F3               	addwf	243,w,c
  4665   013712  6EE9               	movwf	fsr0l,c
  4666   013714  0E02               	movlw	high (_theXF+2)
  4667   013716  20F4               	addwfc	prodh,w,c
  4668   013718  6EEA               	movwf	fsr0h,c
  4669   01371A  0E05               	movlw	5
  4670   01371C                     u1911:
  4671   01371C  CFDB FFEB          	movff	plusw2,plusw0
  4672   013720  06E8               	decf	wreg,f,c
  4673   013722  E2FC               	bc	u1911
  4674   013724                     
  4675                           ;xf/xf.c: 180:             theXF.countTmr++;
  4676   013724  C3E1  FFE8         	movff	_theXF+281,wreg
  4677   013728  0F01               	addlw	1
  4678   01372A  CFE8 F3E1          	movff	wreg,_theXF+281
  4679   01372E                     
  4680                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4681   01372E  EE23  F0E1         	lfsr	2,_theXF+281
  4682   013732  EE03  F0E0         	lfsr	0,_theXF+280
  4683   013736  50DE               	movf	postinc2,w,c
  4684   013738  5CEE               	subwf	postinc0,w,c
  4685   01373A  B0D8               	btfsc	status,0,c
  4686   01373C  EFA2  F09B         	goto	u1921
  4687   013740  EFA4  F09B         	goto	u1920
  4688   013744                     u1921:
  4689   013744  EFA6  F09B         	goto	l4292
  4690   013748                     u1920:
  4691   013748                     
  4692                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4693   013748  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4694   01374C                     l4292:
  4695                           
  4696                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4697                           ;stkvar	_inISR @ sp[(-1)+-9]
  4698   01374C  0EF6               	movlw	-10
  4699   01374E  50E3               	movf	plusw1,w,c
  4700   013750  6EE6               	movwf	postinc1,c
  4701   013752  ECD1  F0A4         	call	_LEAVECRITICAL	;wreg free
  4702   013756                     
  4703                           ;xf/xf.c: 186:             return i;
  4704                           ;stkvar	_i @ sp[(-1)+0]
  4705   013756  0EFF               	movlw	-1
  4706   013758  CFE3 F001          	movff	plusw1,btemp
  4707   01375C  EFC1  F09B         	goto	l1234
  4708   013760                     l4300:
  4709                           
  4710                           ;xf/xf.c: 189:     }
  4711                           ;stkvar	_i @ sp[(-1)+0]
  4712   013760  0EFF               	movlw	-1
  4713   013762  2AE3               	incf	plusw1,f,c
  4714   013764                     
  4715                           ;stkvar	_i @ sp[(-1)+0]
  4716   013764  0EFF               	movlw	-1
  4717   013766  CFE3 F001          	movff	plusw1,btemp
  4718   01376A  0E0B               	movlw	11
  4719   01376C  6401               	cpfsgt	btemp^0,c
  4720   01376E  EFBB  F09B         	goto	u1931
  4721   013772  EFBD  F09B         	goto	u1930
  4722   013776                     u1931:
  4723   013776  EF59  F09B         	goto	l4282
  4724   01377A                     u1930:
  4725   01377A                     
  4726                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4727   01377A  EC00  F0A5         	call	_XF_noMoreTimer	;wreg free
  4728   01377E  EFA6  F09B         	goto	l4292
  4729   013782                     l1234:
  4730                           
  4731                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4732   013782  0EF6               	movlw	246
  4733   013784  26E1               	addwf	fsr1l,f,c
  4734   013786  0EFF               	movlw	255
  4735   013788  22E2               	addwfc	fsr1h,f,c
  4736   01378A  0012               	return		;funcret
  4737   01378C                     __end_of_XF_scheduleTimer:
  4738                           	callstack 0
  4739                           
  4740 ;; *************** function _XF_noMoreTimer *****************
  4741 ;; Defined at:
  4742 ;;		line 69 in file "xf/xf.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;		None
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1  [STACK] void 
  4749 ;; Registers used:
  4750 ;;		None
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;Total ram usage:        0 bytes
  4761 ;; Hardware stack levels used: 1
  4762 ;; Hardware stack levels required when called: 7
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_XF_scheduleTimer
  4767 ;; This function uses a reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text5
  4771   014A00                     __ptext5:
  4772                           	callstack 0
  4773   014A00                     _XF_noMoreTimer:
  4774                           	callstack 9
  4775   014A00                     l1206:
  4776   014A00  EF00  F0A5         	goto	l1206
  4777                           
  4778                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4779   014A04  0012               	return		;funcret
  4780   014A06                     __end_of_XF_noMoreTimer:
  4781                           	callstack 0
  4782                           
  4783 ;; *************** function _XF_noMoreEvent *****************
  4784 ;; Defined at:
  4785 ;;		line 65 in file "xf/xf.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1  [STACK] void 
  4792 ;; Registers used:
  4793 ;;		None
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        0 bytes
  4804 ;; Hardware stack levels used: 1
  4805 ;; Hardware stack levels required when called: 7
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_XF_pushEvent
  4810 ;; This function uses a reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text6
  4814   014A06                     __ptext6:
  4815                           	callstack 0
  4816   014A06                     _XF_noMoreEvent:
  4817                           	callstack 10
  4818   014A06                     l1200:
  4819   014A06  EF03  F0A5         	goto	l1200
  4820                           
  4821                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4822   014A0A  0012               	return		;funcret
  4823   014A0C                     __end_of_XF_noMoreEvent:
  4824                           	callstack 0
  4825                           
  4826 ;; *************** function _Event_setDelay *****************
  4827 ;; Defined at:
  4828 ;;		line 32 in file "xf/event.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  me              2  [STACK] PTR struct Event_
  4831 ;;		 -> ev(6), 
  4832 ;;  delay           2  [STACK] unsigned short 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1  [STACK] void 
  4837 ;; Registers used:
  4838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;Total ram usage:        0 bytes
  4849 ;; Hardware stack levels used: 1
  4850 ;; Hardware stack levels required when called: 7
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_XF_pushEvent
  4855 ;;		_XF_post
  4856 ;; This function uses a reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text7
  4860   014804                     __ptext7:
  4861                           	callstack 0
  4862   014804                     _Event_setDelay:
  4863                           	callstack 10
  4864   014804                     
  4865                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4866                           ;stkvar	_delay @ sp[(0)+-4]
  4867   014804  50E1               	movf	fsr1l,w,c
  4868   014806  0FFC               	addlw	-4
  4869   014808  6ED9               	movwf	fsr2l,c
  4870   01480A  50E2               	movf	fsr1h,w,c
  4871   01480C  6EDA               	movwf	fsr2h,c
  4872   01480E  0EFF               	movlw	255
  4873   014810  22DA               	addwfc	fsr2h,f,c
  4874                           
  4875                           ;stkvar	_me @ sp[(0)+-2]
  4876   014812  0EFE               	movlw	-2
  4877   014814  CFE3 F00B          	movff	plusw1,btemp+10
  4878   014818  0EFF               	movlw	-1
  4879   01481A  CFE3 F00C          	movff	plusw1,btemp+11
  4880   01481E  0E04               	movlw	4
  4881   014820  240B               	addwf	(btemp+10)^0,w,c
  4882   014822  6EE9               	movwf	fsr0l,c
  4883   014824  0E00               	movlw	0
  4884   014826  200C               	addwfc	(btemp+11)^0,w,c
  4885   014828  6EEA               	movwf	fsr0h,c
  4886   01482A  CFDE FFEE          	movff	postinc2,postinc0
  4887   01482E  CFDD FFED          	movff	postdec2,postdec0
  4888   014832                     
  4889                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4890   014832  52E5               	movf	postdec1,f,c
  4891   014834  52E5               	movf	postdec1,f,c
  4892   014836  52E5               	movf	postdec1,f,c
  4893   014838  52E5               	movf	postdec1,f,c
  4894   01483A  0012               	return		;funcret
  4895   01483C                     __end_of_Event_setDelay:
  4896                           	callstack 0
  4897                           
  4898 ;; *************** function _Event_getDelay *****************
  4899 ;; Defined at:
  4900 ;;		line 37 in file "xf/event.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;  me              2  [STACK] PTR struct Event_
  4903 ;;		 -> ev(6), 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;                  2  [STACK] unsigned short 
  4908 ;; Registers used:
  4909 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;Total ram usage:        0 bytes
  4920 ;; Hardware stack levels used: 1
  4921 ;; Hardware stack levels required when called: 7
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_XF_pushEvent
  4926 ;; This function uses a reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text8
  4930   014924                     __ptext8:
  4931                           	callstack 0
  4932   014924                     _Event_getDelay:
  4933                           	callstack 10
  4934   014924                     
  4935                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  4936                           ;stkvar	_me @ sp[(0)+-2]
  4937   014924  0EFE               	movlw	-2
  4938   014926  CFE3 F00B          	movff	plusw1,btemp+10
  4939   01492A  0EFF               	movlw	-1
  4940   01492C  CFE3 F00C          	movff	plusw1,btemp+11
  4941   014930  0E04               	movlw	4
  4942   014932  240B               	addwf	(btemp+10)^0,w,c
  4943   014934  6ED9               	movwf	fsr2l,c
  4944   014936  0E00               	movlw	0
  4945   014938  200C               	addwfc	(btemp+11)^0,w,c
  4946   01493A  6EDA               	movwf	fsr2h,c
  4947   01493C  CFDE F001          	movff	postinc2,btemp
  4948   014940  CFDD F002          	movff	postdec2,btemp+1
  4949   014944                     
  4950                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  4951   014944  52E5               	movf	postdec1,f,c
  4952   014946  52E5               	movf	postdec1,f,c
  4953   014948  0012               	return		;funcret
  4954   01494A                     __end_of_Event_getDelay:
  4955                           	callstack 0
  4956                           
  4957 ;; *************** function _Event_setPE *****************
  4958 ;; Defined at:
  4959 ;;		line 12 in file "xf/event.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  me              2  [STACK] PTR struct Event_
  4962 ;;		 -> ev(6), 
  4963 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4964 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1  [STACK] void 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used: 1
  4982 ;; Hardware stack levels required when called: 7
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_XF_post
  4987 ;; This function uses a reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text9
  4991   01478E                     __ptext9:
  4992                           	callstack 0
  4993   01478E                     _Event_setPE:
  4994                           	callstack 21
  4995   01478E                     
  4996                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  4997                           ;stkvar	_processEvent @ sp[(0)+-5]
  4998   01478E  50E1               	movf	fsr1l,w,c
  4999   014790  0FFB               	addlw	-5
  5000   014792  6ED9               	movwf	fsr2l,c
  5001   014794  50E2               	movf	fsr1h,w,c
  5002   014796  6EDA               	movwf	fsr2h,c
  5003   014798  0EFF               	movlw	255
  5004   01479A  22DA               	addwfc	fsr2h,f,c
  5005                           
  5006                           ;stkvar	_me @ sp[(0)+-2]
  5007   01479C  0EFE               	movlw	-2
  5008   01479E  CFE3 F00B          	movff	plusw1,btemp+10
  5009   0147A2  0EFF               	movlw	-1
  5010   0147A4  CFE3 F00C          	movff	plusw1,btemp+11
  5011   0147A8  0E01               	movlw	1
  5012   0147AA  240B               	addwf	(btemp+10)^0,w,c
  5013   0147AC  6EE9               	movwf	fsr0l,c
  5014   0147AE  0E00               	movlw	0
  5015   0147B0  200C               	addwfc	(btemp+11)^0,w,c
  5016   0147B2  6EEA               	movwf	fsr0h,c
  5017   0147B4  CFDE FFEE          	movff	postinc2,postinc0
  5018   0147B8  CFDE FFEE          	movff	postinc2,postinc0
  5019   0147BC  CFDE FFEE          	movff	postinc2,postinc0
  5020   0147C0                     
  5021                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  5022   0147C0  0EFB               	movlw	251
  5023   0147C2  26E1               	addwf	fsr1l,f,c
  5024   0147C4  0EFF               	movlw	255
  5025   0147C6  22E2               	addwfc	fsr1h,f,c
  5026   0147C8  0012               	return		;funcret
  5027   0147CA                     __end_of_Event_setPE:
  5028                           	callstack 0
  5029                           
  5030 ;; *************** function _Event_setId *****************
  5031 ;; Defined at:
  5032 ;;		line 22 in file "xf/event.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  me              2  [STACK] PTR struct Event_
  5035 ;;		 -> ev(6), 
  5036 ;;  eventID         1  [STACK] unsigned char 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1  [STACK] void 
  5041 ;; Registers used:
  5042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used: 1
  5054 ;; Hardware stack levels required when called: 7
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_XF_post
  5059 ;; This function uses a reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text10
  5063   014988                     __ptext10:
  5064                           	callstack 0
  5065   014988                     _Event_setId:
  5066                           	callstack 21
  5067   014988                     
  5068                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  5069                           ;stkvar	_eventID @ sp[(0)+-3]
  5070                           ;stkvar	_me @ sp[(0)+-2]
  5071   014988  0EFE               	movlw	-2
  5072   01498A  CFE3 FFD9          	movff	plusw1,fsr2l
  5073   01498E  0EFF               	movlw	-1
  5074   014990  CFE3 FFDA          	movff	plusw1,fsr2h
  5075   014994  0EFD               	movlw	-3
  5076   014996  CFE3 FFDF          	movff	plusw1,indf2
  5077   01499A                     
  5078                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5079   01499A  52E5               	movf	postdec1,f,c
  5080   01499C  52E5               	movf	postdec1,f,c
  5081   01499E  52E5               	movf	postdec1,f,c
  5082   0149A0  0012               	return		;funcret
  5083   0149A2                     __end_of_Event_setId:
  5084                           	callstack 0
  5085                           
  5086 ;; *************** function _CanReceive *****************
  5087 ;; Defined at:
  5088 ;;		line 242 in file "can/can.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5091 ;;		 -> rxObj(16), 
  5092 ;;  rxd             2  [STACK] PTR unsigned char 
  5093 ;;		 -> rxdata(8), 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  rxFlags         1  [STACK] enum E5588
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  1  [STACK] char 
  5098 ;; Registers used:
  5099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;Total ram usage:        0 bytes
  5110 ;; Hardware stack levels used: 1
  5111 ;; Hardware stack levels required when called: 11
  5112 ;; This function calls:
  5113 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5114 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5115 ;; This function is called by:
  5116 ;;		_updateCarState
  5117 ;; This function uses a reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text11
  5121   0144BE                     __ptext11:
  5122                           	callstack 0
  5123   0144BE                     _CanReceive:
  5124                           	callstack 0
  5125                           
  5126                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5127   0144BE  52E6               	movf	postinc1,f,c
  5128   0144C0                     
  5129                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5130                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5131   0144C0  0EFF               	movlw	255
  5132   0144C2  24E1               	addwf	fsr1l,w,c
  5133   0144C4  6E01               	movwf	btemp^0,c
  5134   0144C6  0EFF               	movlw	255
  5135   0144C8  20E2               	addwfc	fsr1h,w,c
  5136   0144CA  6E02               	movwf	(btemp+1)^0,c
  5137   0144CC  C001  FFE6         	movff	btemp,postinc1
  5138   0144D0  C002  FFE6         	movff	btemp+1,postinc1
  5139   0144D4  0E02               	movlw	2
  5140   0144D6  6EE6               	movwf	postinc1,c
  5141   0144D8  EC33  F0A0         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5142   0144DC                     
  5143                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5144                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5145   0144DC  0EFF               	movlw	-1
  5146   0144DE  A0E3               	btfss	plusw1,0,c
  5147   0144E0  EF74  F0A2         	goto	u2741
  5148   0144E4  EF76  F0A2         	goto	u2740
  5149   0144E8                     u2741:
  5150   0144E8  EF8A  F0A2         	goto	l5022
  5151   0144EC                     u2740:
  5152   0144EC                     
  5153                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5154   0144EC  0E08               	movlw	8
  5155   0144EE  6EE6               	movwf	postinc1,c
  5156                           
  5157                           ;stkvar	_rxd @ sp[(-2)+-4]
  5158   0144F0  0EFA               	movlw	-6
  5159   0144F2  CFE3 FFE6          	movff	plusw1,postinc1
  5160   0144F6  CFE3 FFE6          	movff	plusw1,postinc1
  5161                           
  5162                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5163   0144FA  0EFA               	movlw	-6
  5164   0144FC  CFE3 FFE6          	movff	plusw1,postinc1
  5165   014500  CFE3 FFE6          	movff	plusw1,postinc1
  5166   014504  0E02               	movlw	2
  5167   014506  6EE6               	movwf	postinc1,c
  5168   014508  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5169   01450C                     
  5170                           ;can/can.c: 249:     return 0;
  5171   01450C  0E00               	movlw	0
  5172   01450E  6E01               	movwf	btemp^0,c
  5173   014510  EF8C  F0A2         	goto	l165
  5174   014514                     l5022:
  5175                           
  5176                           ;can/can.c: 251:   return -1;
  5177   014514  0EFF               	movlw	255
  5178   014516  6E01               	movwf	btemp^0,c
  5179   014518                     l165:
  5180                           
  5181                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5182   014518  0EFB               	movlw	251
  5183   01451A  26E1               	addwf	fsr1l,f,c
  5184   01451C  0EFF               	movlw	255
  5185   01451E  22E2               	addwfc	fsr1h,f,c
  5186   014520  0012               	return		;funcret
  5187   014522                     __end_of_CanReceive:
  5188                           	callstack 0
  5189                           
  5190 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5191 ;; Defined at:
  5192 ;;		line 1236 in file "can/can.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  channel         1  [STACK] enum E5287
  5195 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5196 ;;		 -> rxObj(16), txMsg(16), 
  5197 ;;  rxd             2  [STACK] PTR unsigned char 
  5198 ;;		 -> rxdata(8), 
  5199 ;;  nBytes          1  [STACK] unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  temp32          4  [STACK] unsigned long 
  5202 ;;  ba             76  [STACK] unsigned char [76]
  5203 ;;  fifoReg        12  [STACK] unsigned long [3]
  5204 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5205 ;;  myReg           4  [STACK] struct _REG_t
  5206 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5207 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5208 ;;  a               2  [STACK] unsigned short 
  5209 ;;  i               1  [STACK] unsigned char 
  5210 ;;  n               1  [STACK] unsigned char 
  5211 ;;  spiTransferE    1  [STACK] char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1  [STACK] char 
  5214 ;; Registers used:
  5215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;Total ram usage:        0 bytes
  5226 ;; Hardware stack levels used: 1
  5227 ;; Hardware stack levels required when called: 10
  5228 ;; This function calls:
  5229 ;;		_DRV_CANFDSPI_ReadByteArray
  5230 ;;		_DRV_CANFDSPI_ReadWordArray
  5231 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5232 ;; This function is called by:
  5233 ;;		_CanReceive
  5234 ;; This function uses a reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text12
  5238   01074C                     __ptext12:
  5239                           	callstack 0
  5240   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5241                           	callstack 0
  5242                           
  5243                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5244   01074C  0E6E               	movlw	110
  5245   01074E  26E1               	addwf	fsr1l,f,c
  5246   010750  0E00               	movlw	0
  5247   010752  22E2               	addwfc	fsr1h,f,c
  5248   010754                     
  5249                           ;can/can.c: 1241:     uint8_t i = 0;
  5250                           ;stkvar	_i @ sp[(-110)+107]
  5251   010754  0EFD               	movlw	-3
  5252   010756  6AE3               	clrf	plusw1,c
  5253                           
  5254                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5255                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5256   010758  0EFF               	movlw	-1
  5257   01075A  6AE3               	clrf	plusw1,c
  5258   01075C                     
  5259                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5260                           ;stkvar	_channel @ sp[(-110)+-1]
  5261   01075C  0E91               	movlw	-111
  5262   01075E  50E3               	movf	plusw1,w,c
  5263   010760  0D0C               	mullw	12
  5264   010762  0E50               	movlw	80
  5265   010764  26F3               	addwf	243,f,c
  5266   010766  0E00               	movlw	0
  5267   010768  22F4               	addwfc	244,f,c
  5268                           
  5269                           ;stkvar	_a @ sp[(-110)+105]
  5270   01076A  0EFB               	movlw	-5
  5271   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5272   010770  0EFC               	movlw	-4
  5273   010772  CFF4 FFE3          	movff	prodh,plusw1
  5274   010776                     
  5275                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5276   010776  0E03               	movlw	3
  5277   010778  6EE6               	movwf	postinc1,c
  5278   01077A  0E00               	movlw	0
  5279   01077C  6EE6               	movwf	postinc1,c
  5280                           
  5281                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5282   01077E  0EE0               	movlw	224
  5283   010780  24E1               	addwf	fsr1l,w,c
  5284   010782  6E01               	movwf	btemp^0,c
  5285   010784  0EFF               	movlw	255
  5286   010786  20E2               	addwfc	fsr1h,w,c
  5287   010788  6E02               	movwf	(btemp+1)^0,c
  5288   01078A  C001  FFE6         	movff	btemp,postinc1
  5289   01078E  C002  FFE6         	movff	btemp+1,postinc1
  5290                           
  5291                           ;stkvar	_a @ sp[(-114)+105]
  5292   010792  0EF7               	movlw	-9
  5293   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5294   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5295   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5296                           
  5297                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5298   0107A0  0EFF               	movlw	-1
  5299   0107A2  C001  FFE3         	movff	btemp,plusw1
  5300   0107A6                     
  5301                           ;can/can.c: 1253:     if (spiTransferError) {
  5302                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5303   0107A6  0EFF               	movlw	-1
  5304   0107A8  50E3               	movf	plusw1,w,c
  5305   0107AA  B4D8               	btfsc	status,2,c
  5306   0107AC  EFDA  F083         	goto	u2111
  5307   0107B0  EFDC  F083         	goto	u2110
  5308   0107B4                     u2111:
  5309   0107B4  EFDE  F083         	goto	l4478
  5310   0107B8                     u2110:
  5311   0107B8  EF15  F087         	goto	l357
  5312   0107BC                     l4478:
  5313                           
  5314                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5315                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5316   0107BC  0EE2               	movlw	-30
  5317   0107BE  CFE3 F009          	movff	plusw1,btemp+8
  5318   0107C2  0EE3               	movlw	-29
  5319   0107C4  CFE3 F00A          	movff	plusw1,btemp+9
  5320   0107C8  0EE4               	movlw	-28
  5321   0107CA  CFE3 F00B          	movff	plusw1,btemp+10
  5322   0107CE  0EE5               	movlw	-27
  5323   0107D0  CFE3 F00C          	movff	plusw1,btemp+11
  5324                           
  5325                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5326   0107D4  0EEE               	movlw	-18
  5327   0107D6  C009  FFE3         	movff	btemp+8,plusw1
  5328   0107DA  0EEF               	movlw	-17
  5329   0107DC  C00A  FFE3         	movff	btemp+9,plusw1
  5330   0107E0  0EF0               	movlw	-16
  5331   0107E2  C00B  FFE3         	movff	btemp+10,plusw1
  5332   0107E6  0EF1               	movlw	-15
  5333   0107E8  C00C  FFE3         	movff	btemp+11,plusw1
  5334   0107EC                     
  5335                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5336                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5337   0107EC  50E1               	movf	fsr1l,w,c
  5338   0107EE  0FEE               	addlw	-18
  5339   0107F0  6ED9               	movwf	fsr2l,c
  5340   0107F2  50E2               	movf	fsr1h,w,c
  5341   0107F4  6EDA               	movwf	fsr2h,c
  5342   0107F6  0EFF               	movlw	255
  5343   0107F8  22DA               	addwfc	fsr2h,f,c
  5344   0107FA  AEDF               	btfss	indf2,7,c
  5345   0107FC  EF02  F084         	goto	u2121
  5346   010800  EF04  F084         	goto	u2120
  5347   010804                     u2121:
  5348   010804  EF06  F084         	goto	l4484
  5349   010808                     u2120:
  5350   010808  EF15  F087         	goto	l357
  5351   01080C                     l4484:
  5352                           
  5353                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5354                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5355   01080C  0EEA               	movlw	234
  5356   01080E  24E1               	addwf	fsr1l,w,c
  5357   010810  6ED9               	movwf	fsr2l,c
  5358   010812  0EFF               	movlw	255
  5359   010814  20E2               	addwfc	fsr1h,w,c
  5360   010816  6EDA               	movwf	fsr2h,c
  5361   010818  CFDE F009          	movff	postinc2,btemp+8
  5362   01081C  CFDE F00A          	movff	postinc2,btemp+9
  5363   010820  CFDE F00B          	movff	postinc2,btemp+10
  5364   010824  CFDE F00C          	movff	postinc2,btemp+11
  5365                           
  5366                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5367   010828  0EF7               	movlw	-9
  5368   01082A  C009  FFE3         	movff	btemp+8,plusw1
  5369   01082E  0EF8               	movlw	-8
  5370   010830  C00A  FFE3         	movff	btemp+9,plusw1
  5371   010834  0EF9               	movlw	-7
  5372   010836  C00B  FFE3         	movff	btemp+10,plusw1
  5373   01083A  0EFA               	movlw	-6
  5374   01083C  C00C  FFE3         	movff	btemp+11,plusw1
  5375   010840                     
  5376                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5377                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5378                           ;stkvar	_a @ sp[(-110)+105]
  5379   010840  0EF7               	movlw	-9
  5380   010842  CFE3 F001          	movff	plusw1,btemp
  5381   010846  0EFB               	movlw	-5
  5382   010848  C001  FFE3         	movff	btemp,plusw1
  5383   01084C  0EF8               	movlw	-8
  5384   01084E  CFE3 F001          	movff	plusw1,btemp
  5385   010852  0EFC               	movlw	-4
  5386   010854  C001  FFE3         	movff	btemp,plusw1
  5387   010858                     
  5388                           ;can/can.c: 1273:     a += 0x400;
  5389                           ;stkvar	_a @ sp[(-110)+105]
  5390   010858  50E1               	movf	fsr1l,w,c
  5391   01085A  0FFB               	addlw	-5
  5392   01085C  6ED9               	movwf	fsr2l,c
  5393   01085E  50E2               	movf	fsr1h,w,c
  5394   010860  6EDA               	movwf	fsr2h,c
  5395   010862  0EFF               	movlw	255
  5396   010864  22DA               	addwfc	fsr2h,f,c
  5397   010866  0E00               	movlw	0
  5398   010868  26DE               	addwf	postinc2,f,c
  5399   01086A  0E04               	movlw	4
  5400   01086C  22DD               	addwfc	postdec2,f,c
  5401   01086E                     
  5402                           ;can/can.c: 1276:     n = nBytes + 8;
  5403   01086E  0E08               	movlw	8
  5404   010870  6E0C               	movwf	(btemp+11)^0,c
  5405                           
  5406                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5407   010872  0E8C               	movlw	-116
  5408   010874  50E3               	movf	plusw1,w,c
  5409   010876  240C               	addwf	(btemp+11)^0,w,c
  5410   010878  6E0B               	movwf	(btemp+10)^0,c
  5411                           
  5412                           ;stkvar	_n @ sp[(-110)+108]
  5413   01087A  0EFE               	movlw	-2
  5414   01087C  C00B  FFE3         	movff	btemp+10,plusw1
  5415   010880                     
  5416                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5417                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5418   010880  50E1               	movf	fsr1l,w,c
  5419   010882  0FEE               	addlw	-18
  5420   010884  6ED9               	movwf	fsr2l,c
  5421   010886  50E2               	movf	fsr1h,w,c
  5422   010888  6EDA               	movwf	fsr2h,c
  5423   01088A  0EFF               	movlw	255
  5424   01088C  22DA               	addwfc	fsr2h,f,c
  5425   01088E  AADF               	btfss	indf2,5,c
  5426   010890  EF4C  F084         	goto	u2131
  5427   010894  EF4E  F084         	goto	u2130
  5428   010898                     u2131:
  5429   010898  EF56  F084         	goto	l4496
  5430   01089C                     u2130:
  5431   01089C                     
  5432                           ;can/can.c: 1279:         n += 4;
  5433                           ;stkvar	_n @ sp[(-110)+108]
  5434   01089C  0EFE               	movlw	-2
  5435   01089E  CFE3 F001          	movff	plusw1,btemp
  5436   0108A2  0E04               	movlw	4
  5437   0108A4  2601               	addwf	btemp^0,f,c
  5438   0108A6  0EFE               	movlw	-2
  5439   0108A8  C001  FFE3         	movff	btemp,plusw1
  5440   0108AC                     l4496:
  5441                           
  5442                           ;can/can.c: 1283:     if (n % 4) {
  5443                           ;stkvar	_n @ sp[(-110)+108]
  5444   0108AC  0EFE               	movlw	-2
  5445   0108AE  CFE3 F00C          	movff	plusw1,btemp+11
  5446   0108B2  0E03               	movlw	3
  5447   0108B4  160C               	andwf	(btemp+11)^0,f,c
  5448   0108B6  B4D8               	btfsc	status,2,c
  5449   0108B8  EF60  F084         	goto	u2141
  5450   0108BC  EF62  F084         	goto	u2140
  5451   0108C0                     u2141:
  5452   0108C0  EF72  F084         	goto	l4500
  5453   0108C4                     u2140:
  5454   0108C4                     
  5455                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5456                           ;stkvar	_n @ sp[(-110)+108]
  5457   0108C4  0EFE               	movlw	-2
  5458   0108C6  CFE3 F00C          	movff	plusw1,btemp+11
  5459   0108CA  0E03               	movlw	3
  5460   0108CC  160C               	andwf	(btemp+11)^0,f,c
  5461                           
  5462                           ;stkvar	_n @ sp[(-110)+108]
  5463   0108CE  0EFE               	movlw	-2
  5464   0108D0  CFE3 F00B          	movff	plusw1,btemp+10
  5465   0108D4  500C               	movf	(btemp+11)^0,w,c
  5466   0108D6  5C0B               	subwf	(btemp+10)^0,w,c
  5467   0108D8  6E0C               	movwf	(btemp+11)^0,c
  5468   0108DA  0E04               	movlw	4
  5469   0108DC  260C               	addwf	(btemp+11)^0,f,c
  5470                           
  5471                           ;stkvar	_n @ sp[(-110)+108]
  5472   0108DE  0EFE               	movlw	-2
  5473   0108E0  C00C  FFE3         	movff	btemp+11,plusw1
  5474   0108E4                     l4500:
  5475                           
  5476                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5477                           ;stkvar	_n @ sp[(-110)+108]
  5478   0108E4  0EFE               	movlw	-2
  5479   0108E6  CFE3 F001          	movff	plusw1,btemp
  5480   0108EA  0E4C               	movlw	76
  5481   0108EC  6401               	cpfsgt	btemp^0,c
  5482   0108EE  EF7B  F084         	goto	u2151
  5483   0108F2  EF7D  F084         	goto	u2150
  5484   0108F6                     u2151:
  5485   0108F6  EF82  F084         	goto	l4504
  5486   0108FA                     u2150:
  5487   0108FA                     
  5488                           ;can/can.c: 1291:         n = 76;
  5489   0108FA  0E4C               	movlw	76
  5490   0108FC  6E0C               	movwf	(btemp+11)^0,c
  5491                           
  5492                           ;stkvar	_n @ sp[(-110)+108]
  5493   0108FE  0EFE               	movlw	-2
  5494   010900  C00C  FFE3         	movff	btemp+11,plusw1
  5495   010904                     l4504:
  5496                           
  5497                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5498                           ;stkvar	_n @ sp[(-110)+108]
  5499   010904  0EFE               	movlw	-2
  5500   010906  50E3               	movf	plusw1,w,c
  5501   010908  6EE6               	movwf	postinc1,c
  5502   01090A  0E00               	movlw	0
  5503   01090C  6EE6               	movwf	postinc1,c
  5504                           
  5505                           ;stkvar	_ba @ sp[(-112)+4]
  5506   01090E  0E94               	movlw	148
  5507   010910  24E1               	addwf	fsr1l,w,c
  5508   010912  6E01               	movwf	btemp^0,c
  5509   010914  0EFF               	movlw	255
  5510   010916  20E2               	addwfc	fsr1h,w,c
  5511   010918  6E02               	movwf	(btemp+1)^0,c
  5512   01091A  C001  FFE6         	movff	btemp,postinc1
  5513   01091E  C002  FFE6         	movff	btemp+1,postinc1
  5514                           
  5515                           ;stkvar	_a @ sp[(-114)+105]
  5516   010922  0EF7               	movlw	-9
  5517   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5518   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5519   01092C  ECD5  F093         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5520                           
  5521                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5522   010930  0EFF               	movlw	-1
  5523   010932  C001  FFE3         	movff	btemp,plusw1
  5524   010936                     
  5525                           ;can/can.c: 1295:     if (spiTransferError) {
  5526                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5527   010936  0EFF               	movlw	-1
  5528   010938  50E3               	movf	plusw1,w,c
  5529   01093A  B4D8               	btfsc	status,2,c
  5530   01093C  EFA2  F084         	goto	u2161
  5531   010940  EFA4  F084         	goto	u2160
  5532   010944                     u2161:
  5533   010944  EFA6  F084         	goto	l4510
  5534   010948                     u2160:
  5535   010948  EF15  F087         	goto	l357
  5536   01094C                     l4510:
  5537                           
  5538                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5539                           ;stkvar	_ba @ sp[(-110)+4]
  5540   01094C  0E9A               	movlw	154
  5541   01094E  24E1               	addwf	fsr1l,w,c
  5542   010950  6ED9               	movwf	fsr2l,c
  5543   010952  0EFF               	movlw	255
  5544   010954  20E2               	addwfc	fsr1h,w,c
  5545   010956  6EDA               	movwf	fsr2h,c
  5546                           
  5547                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5548   010958  0E8F               	movlw	-113
  5549   01095A  CFE3 F00B          	movff	plusw1,btemp+10
  5550   01095E  0E90               	movlw	-112
  5551   010960  CFE3 F00C          	movff	plusw1,btemp+11
  5552   010964  0E06               	movlw	6
  5553   010966  240B               	addwf	(btemp+10)^0,w,c
  5554   010968  6EE9               	movwf	fsr0l,c
  5555   01096A  0E00               	movlw	0
  5556   01096C  200C               	addwfc	(btemp+11)^0,w,c
  5557   01096E  6EEA               	movwf	fsr0h,c
  5558   010970  CFDF FFEF          	movff	indf2,indf0
  5559   010974                     
  5560                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5561                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5562   010974  0E8F               	movlw	-113
  5563   010976  CFE3 F00B          	movff	plusw1,btemp+10
  5564   01097A  0E90               	movlw	-112
  5565   01097C  CFE3 F00C          	movff	plusw1,btemp+11
  5566   010980  0E06               	movlw	6
  5567   010982  240B               	addwf	(btemp+10)^0,w,c
  5568   010984  6ED9               	movwf	fsr2l,c
  5569   010986  0E00               	movlw	0
  5570   010988  200C               	addwfc	(btemp+11)^0,w,c
  5571   01098A  6EDA               	movwf	fsr2h,c
  5572   01098C  B8DF               	btfsc	indf2,4,c
  5573   01098E  EFCB  F084         	goto	u2171
  5574   010992  EFCD  F084         	goto	u2170
  5575   010996                     u2171:
  5576   010996  EF38  F085         	goto	l4516
  5577   01099A                     u2170:
  5578   01099A                     
  5579                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5580                           ;stkvar	_ba @ sp[(-110)+4]
  5581   01099A  0E99               	movlw	153
  5582   01099C  24E1               	addwf	fsr1l,w,c
  5583   01099E  6ED9               	movwf	fsr2l,c
  5584   0109A0  0EFF               	movlw	255
  5585   0109A2  20E2               	addwfc	fsr1h,w,c
  5586   0109A4  6EDA               	movwf	fsr2h,c
  5587   0109A6  50DF               	movf	indf2,w,c
  5588   0109A8  6E0C               	movwf	(btemp+11)^0,c
  5589   0109AA  0E1F               	movlw	31
  5590   0109AC  160C               	andwf	(btemp+11)^0,f,c
  5591   0109AE  C00C  F005         	movff	btemp+11,btemp+4
  5592   0109B2  6A06               	clrf	(btemp+5)^0,c
  5593   0109B4  6A07               	clrf	(btemp+6)^0,c
  5594   0109B6  6A08               	clrf	(btemp+7)^0,c
  5595   0109B8  C005  F008         	movff	btemp+4,btemp+7
  5596   0109BC  6A07               	clrf	(btemp+6)^0,c
  5597   0109BE  6A06               	clrf	(btemp+5)^0,c
  5598   0109C0  6A05               	clrf	(btemp+4)^0,c
  5599                           
  5600                           ;stkvar	_ba @ sp[(-110)+4]
  5601   0109C2  0E97               	movlw	151
  5602   0109C4  24E1               	addwf	fsr1l,w,c
  5603   0109C6  6ED9               	movwf	fsr2l,c
  5604   0109C8  0EFF               	movlw	255
  5605   0109CA  20E2               	addwfc	fsr1h,w,c
  5606   0109CC  6EDA               	movwf	fsr2h,c
  5607   0109CE  50DF               	movf	indf2,w,c
  5608   0109D0  6E0C               	movwf	(btemp+11)^0,c
  5609   0109D2  C00C  F001         	movff	btemp+11,btemp
  5610   0109D6  6A02               	clrf	(btemp+1)^0,c
  5611   0109D8  6A03               	clrf	(btemp+2)^0,c
  5612   0109DA  6A04               	clrf	(btemp+3)^0,c
  5613   0109DC  C003  F004         	movff	btemp+2,btemp+3
  5614   0109E0  C002  F003         	movff	btemp+1,btemp+2
  5615   0109E4  C001  F002         	movff	btemp,btemp+1
  5616   0109E8  6A01               	clrf	btemp^0,c
  5617                           
  5618                           ;stkvar	_ba @ sp[(-110)+4]
  5619   0109EA  0E96               	movlw	-106
  5620   0109EC  50E3               	movf	plusw1,w,c
  5621   0109EE  6E09               	movwf	(btemp+8)^0,c
  5622   0109F0  6A0A               	clrf	(btemp+9)^0,c
  5623   0109F2  6A0B               	clrf	(btemp+10)^0,c
  5624   0109F4  6A0C               	clrf	(btemp+11)^0,c
  5625   0109F6  5001               	movf	btemp^0,w,c
  5626   0109F8  1209               	iorwf	(btemp+8)^0,f,c
  5627   0109FA  5002               	movf	(btemp+1)^0,w,c
  5628   0109FC  120A               	iorwf	(btemp+9)^0,f,c
  5629   0109FE  5003               	movf	(btemp+2)^0,w,c
  5630   010A00  120B               	iorwf	(btemp+10)^0,f,c
  5631   010A02  5004               	movf	(btemp+3)^0,w,c
  5632   010A04  120C               	iorwf	(btemp+11)^0,f,c
  5633                           
  5634                           ;stkvar	_ba @ sp[(-110)+4]
  5635   010A06  0E98               	movlw	152
  5636   010A08  24E1               	addwf	fsr1l,w,c
  5637   010A0A  6ED9               	movwf	fsr2l,c
  5638   010A0C  0EFF               	movlw	255
  5639   010A0E  20E2               	addwfc	fsr1h,w,c
  5640   010A10  6EDA               	movwf	fsr2h,c
  5641   010A12  50DF               	movf	indf2,w,c
  5642   010A14  6E01               	movwf	btemp^0,c
  5643   010A16  6A02               	clrf	(btemp+1)^0,c
  5644   010A18  6A03               	clrf	(btemp+2)^0,c
  5645   010A1A  6A04               	clrf	(btemp+3)^0,c
  5646   010A1C  C002  F004         	movff	btemp+1,btemp+3
  5647   010A20  C001  F003         	movff	btemp,btemp+2
  5648   010A24  6A02               	clrf	(btemp+1)^0,c
  5649   010A26  6A01               	clrf	btemp^0,c
  5650   010A28  5001               	movf	btemp^0,w,c
  5651   010A2A  1209               	iorwf	(btemp+8)^0,f,c
  5652   010A2C  5002               	movf	(btemp+1)^0,w,c
  5653   010A2E  120A               	iorwf	(btemp+9)^0,f,c
  5654   010A30  5003               	movf	(btemp+2)^0,w,c
  5655   010A32  120B               	iorwf	(btemp+10)^0,f,c
  5656   010A34  5004               	movf	(btemp+3)^0,w,c
  5657   010A36  120C               	iorwf	(btemp+11)^0,f,c
  5658   010A38  5005               	movf	(btemp+4)^0,w,c
  5659   010A3A  1009               	iorwf	(btemp+8)^0,w,c
  5660   010A3C  6E01               	movwf	btemp^0,c
  5661   010A3E  5006               	movf	(btemp+5)^0,w,c
  5662   010A40  100A               	iorwf	(btemp+9)^0,w,c
  5663   010A42  6E02               	movwf	(btemp+1)^0,c
  5664   010A44  5007               	movf	(btemp+6)^0,w,c
  5665   010A46  100B               	iorwf	(btemp+10)^0,w,c
  5666   010A48  6E03               	movwf	(btemp+2)^0,c
  5667   010A4A  5008               	movf	(btemp+7)^0,w,c
  5668   010A4C  100C               	iorwf	(btemp+11)^0,w,c
  5669   010A4E  6E04               	movwf	(btemp+3)^0,c
  5670                           
  5671                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5672   010A50  0E8F               	movlw	-113
  5673   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5674   010A56  0E90               	movlw	-112
  5675   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5676   010A5C  C001  FFDE         	movff	btemp,postinc2
  5677   010A60  C002  FFDE         	movff	btemp+1,postinc2
  5678   010A64  C003  FFDE         	movff	btemp+2,postinc2
  5679   010A68  C004  FFDE         	movff	btemp+3,postinc2
  5680                           
  5681                           ;can/can.c: 1320:     }
  5682   010A6C  EFF8  F085         	goto	l4518
  5683   010A70                     l4516:
  5684                           
  5685                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5686                           ;stkvar	_ba @ sp[(-110)+4]
  5687   010A70  0E99               	movlw	153
  5688   010A72  24E1               	addwf	fsr1l,w,c
  5689   010A74  6ED9               	movwf	fsr2l,c
  5690   010A76  0EFF               	movlw	255
  5691   010A78  20E2               	addwfc	fsr1h,w,c
  5692   010A7A  6EDA               	movwf	fsr2h,c
  5693   010A7C  50DF               	movf	indf2,w,c
  5694   010A7E  6E0C               	movwf	(btemp+11)^0,c
  5695   010A80  0E1F               	movlw	31
  5696   010A82  160C               	andwf	(btemp+11)^0,f,c
  5697   010A84  C00C  F005         	movff	btemp+11,btemp+4
  5698   010A88  6A06               	clrf	(btemp+5)^0,c
  5699   010A8A  6A07               	clrf	(btemp+6)^0,c
  5700   010A8C  6A08               	clrf	(btemp+7)^0,c
  5701   010A8E  C005  F008         	movff	btemp+4,btemp+7
  5702   010A92  6A07               	clrf	(btemp+6)^0,c
  5703   010A94  6A06               	clrf	(btemp+5)^0,c
  5704   010A96  6A05               	clrf	(btemp+4)^0,c
  5705                           
  5706                           ;stkvar	_ba @ sp[(-110)+4]
  5707   010A98  0E97               	movlw	151
  5708   010A9A  24E1               	addwf	fsr1l,w,c
  5709   010A9C  6ED9               	movwf	fsr2l,c
  5710   010A9E  0EFF               	movlw	255
  5711   010AA0  20E2               	addwfc	fsr1h,w,c
  5712   010AA2  6EDA               	movwf	fsr2h,c
  5713   010AA4  50DF               	movf	indf2,w,c
  5714   010AA6  6E0C               	movwf	(btemp+11)^0,c
  5715   010AA8  C00C  F001         	movff	btemp+11,btemp
  5716   010AAC  6A02               	clrf	(btemp+1)^0,c
  5717   010AAE  6A03               	clrf	(btemp+2)^0,c
  5718   010AB0  6A04               	clrf	(btemp+3)^0,c
  5719   010AB2  C003  F004         	movff	btemp+2,btemp+3
  5720   010AB6  C002  F003         	movff	btemp+1,btemp+2
  5721   010ABA  C001  F002         	movff	btemp,btemp+1
  5722   010ABE  6A01               	clrf	btemp^0,c
  5723                           
  5724                           ;stkvar	_ba @ sp[(-110)+4]
  5725   010AC0  0E96               	movlw	-106
  5726   010AC2  50E3               	movf	plusw1,w,c
  5727   010AC4  6E09               	movwf	(btemp+8)^0,c
  5728   010AC6  6A0A               	clrf	(btemp+9)^0,c
  5729   010AC8  6A0B               	clrf	(btemp+10)^0,c
  5730   010ACA  6A0C               	clrf	(btemp+11)^0,c
  5731   010ACC  5001               	movf	btemp^0,w,c
  5732   010ACE  1209               	iorwf	(btemp+8)^0,f,c
  5733   010AD0  5002               	movf	(btemp+1)^0,w,c
  5734   010AD2  120A               	iorwf	(btemp+9)^0,f,c
  5735   010AD4  5003               	movf	(btemp+2)^0,w,c
  5736   010AD6  120B               	iorwf	(btemp+10)^0,f,c
  5737   010AD8  5004               	movf	(btemp+3)^0,w,c
  5738   010ADA  120C               	iorwf	(btemp+11)^0,f,c
  5739                           
  5740                           ;stkvar	_ba @ sp[(-110)+4]
  5741   010ADC  0E98               	movlw	152
  5742   010ADE  24E1               	addwf	fsr1l,w,c
  5743   010AE0  6ED9               	movwf	fsr2l,c
  5744   010AE2  0EFF               	movlw	255
  5745   010AE4  20E2               	addwfc	fsr1h,w,c
  5746   010AE6  6EDA               	movwf	fsr2h,c
  5747   010AE8  50DF               	movf	indf2,w,c
  5748   010AEA  6E01               	movwf	btemp^0,c
  5749   010AEC  6A02               	clrf	(btemp+1)^0,c
  5750   010AEE  6A03               	clrf	(btemp+2)^0,c
  5751   010AF0  6A04               	clrf	(btemp+3)^0,c
  5752   010AF2  C002  F004         	movff	btemp+1,btemp+3
  5753   010AF6  C001  F003         	movff	btemp,btemp+2
  5754   010AFA  6A02               	clrf	(btemp+1)^0,c
  5755   010AFC  6A01               	clrf	btemp^0,c
  5756   010AFE  5001               	movf	btemp^0,w,c
  5757   010B00  1209               	iorwf	(btemp+8)^0,f,c
  5758   010B02  5002               	movf	(btemp+1)^0,w,c
  5759   010B04  120A               	iorwf	(btemp+9)^0,f,c
  5760   010B06  5003               	movf	(btemp+2)^0,w,c
  5761   010B08  120B               	iorwf	(btemp+10)^0,f,c
  5762   010B0A  5004               	movf	(btemp+3)^0,w,c
  5763   010B0C  120C               	iorwf	(btemp+11)^0,f,c
  5764   010B0E  5005               	movf	(btemp+4)^0,w,c
  5765   010B10  1009               	iorwf	(btemp+8)^0,w,c
  5766   010B12  6E01               	movwf	btemp^0,c
  5767   010B14  5006               	movf	(btemp+5)^0,w,c
  5768   010B16  100A               	iorwf	(btemp+9)^0,w,c
  5769   010B18  6E02               	movwf	(btemp+1)^0,c
  5770   010B1A  5007               	movf	(btemp+6)^0,w,c
  5771   010B1C  100B               	iorwf	(btemp+10)^0,w,c
  5772   010B1E  6E03               	movwf	(btemp+2)^0,c
  5773   010B20  5008               	movf	(btemp+7)^0,w,c
  5774   010B22  100C               	iorwf	(btemp+11)^0,w,c
  5775   010B24  6E04               	movwf	(btemp+3)^0,c
  5776                           
  5777                           ;stkvar	_temp32 @ sp[(-110)+0]
  5778   010B26  0E92               	movlw	-110
  5779   010B28  C001  FFE3         	movff	btemp,plusw1
  5780   010B2C  0E93               	movlw	-109
  5781   010B2E  C002  FFE3         	movff	btemp+1,plusw1
  5782   010B32  0E94               	movlw	-108
  5783   010B34  C003  FFE3         	movff	btemp+2,plusw1
  5784   010B38  0E95               	movlw	-107
  5785   010B3A  C004  FFE3         	movff	btemp+3,plusw1
  5786                           
  5787                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5788                           ;stkvar	_temp32 @ sp[(-110)+0]
  5789   010B3E  0E92               	movlw	-110
  5790   010B40  CFE3 F009          	movff	plusw1,btemp+8
  5791   010B44  0E93               	movlw	-109
  5792   010B46  CFE3 F00A          	movff	plusw1,btemp+9
  5793   010B4A  0E94               	movlw	-108
  5794   010B4C  CFE3 F00B          	movff	plusw1,btemp+10
  5795   010B50  0E95               	movlw	-107
  5796   010B52  CFE3 F00C          	movff	plusw1,btemp+11
  5797   010B56  0E0C               	movlw	12
  5798   010B58  EFB3  F085         	goto	u2180
  5799   010B5C                     u2185:
  5800   010B5C  90D8               	bcf	status,0,c
  5801   010B5E  320C               	rrcf	(btemp+11)^0,f,c
  5802   010B60  320B               	rrcf	(btemp+10)^0,f,c
  5803   010B62  320A               	rrcf	(btemp+9)^0,f,c
  5804   010B64  3209               	rrcf	(btemp+8)^0,f,c
  5805   010B66                     u2180:
  5806   010B66  2EE8               	decfsz	wreg,f,c
  5807   010B68  EFAE  F085         	goto	u2185
  5808   010B6C  0EFF               	movlw	255
  5809   010B6E  1409               	andwf	(btemp+8)^0,w,c
  5810   010B70  6E05               	movwf	(btemp+4)^0,c
  5811   010B72  0EFF               	movlw	255
  5812   010B74  140A               	andwf	(btemp+9)^0,w,c
  5813   010B76  6E06               	movwf	(btemp+5)^0,c
  5814   010B78  0E03               	movlw	3
  5815   010B7A  140B               	andwf	(btemp+10)^0,w,c
  5816   010B7C  6E07               	movwf	(btemp+6)^0,c
  5817   010B7E  0E00               	movlw	0
  5818   010B80  140C               	andwf	(btemp+11)^0,w,c
  5819   010B82  6E08               	movwf	(btemp+7)^0,c
  5820                           
  5821                           ;stkvar	_temp32 @ sp[(-110)+0]
  5822   010B84  50E1               	movf	fsr1l,w,c
  5823   010B86  0F92               	addlw	-110
  5824   010B88  6ED9               	movwf	fsr2l,c
  5825   010B8A  50E2               	movf	fsr1h,w,c
  5826   010B8C  6EDA               	movwf	fsr2h,c
  5827   010B8E  0EFF               	movlw	255
  5828   010B90  22DA               	addwfc	fsr2h,f,c
  5829   010B92  0EFF               	movlw	255
  5830   010B94  14DE               	andwf	postinc2,w,c
  5831   010B96  6E09               	movwf	(btemp+8)^0,c
  5832   010B98  0E07               	movlw	7
  5833   010B9A  14DE               	andwf	postinc2,w,c
  5834   010B9C  6E0A               	movwf	(btemp+9)^0,c
  5835   010B9E  0E00               	movlw	0
  5836   010BA0  14DE               	andwf	postinc2,w,c
  5837   010BA2  6E0B               	movwf	(btemp+10)^0,c
  5838   010BA4  0E00               	movlw	0
  5839   010BA6  14DE               	andwf	postinc2,w,c
  5840   010BA8  6E0C               	movwf	(btemp+11)^0,c
  5841   010BAA  0E12               	movlw	18
  5842   010BAC                     u2195:
  5843   010BAC  90D8               	bcf	status,0,c
  5844   010BAE  3609               	rlcf	(btemp+8)^0,f,c
  5845   010BB0  360A               	rlcf	(btemp+9)^0,f,c
  5846   010BB2  360B               	rlcf	(btemp+10)^0,f,c
  5847   010BB4  360C               	rlcf	(btemp+11)^0,f,c
  5848   010BB6  2EE8               	decfsz	wreg,f,c
  5849   010BB8  EFD6  F085         	goto	u2195
  5850   010BBC  5005               	movf	(btemp+4)^0,w,c
  5851   010BBE  1009               	iorwf	(btemp+8)^0,w,c
  5852   010BC0  6E01               	movwf	btemp^0,c
  5853   010BC2  5006               	movf	(btemp+5)^0,w,c
  5854   010BC4  100A               	iorwf	(btemp+9)^0,w,c
  5855   010BC6  6E02               	movwf	(btemp+1)^0,c
  5856   010BC8  5007               	movf	(btemp+6)^0,w,c
  5857   010BCA  100B               	iorwf	(btemp+10)^0,w,c
  5858   010BCC  6E03               	movwf	(btemp+2)^0,c
  5859   010BCE  5008               	movf	(btemp+7)^0,w,c
  5860   010BD0  100C               	iorwf	(btemp+11)^0,w,c
  5861   010BD2  6E04               	movwf	(btemp+3)^0,c
  5862                           
  5863                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5864   010BD4  0E8F               	movlw	-113
  5865   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5866   010BDA  0E90               	movlw	-112
  5867   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5868   010BE0  C001  FFDE         	movff	btemp,postinc2
  5869   010BE4  C002  FFDE         	movff	btemp+1,postinc2
  5870   010BE8  C003  FFDE         	movff	btemp+2,postinc2
  5871   010BEC  C004  FFDE         	movff	btemp+3,postinc2
  5872   010BF0                     l4518:
  5873                           
  5874                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5875                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5876   010BF0  0E8F               	movlw	-113
  5877   010BF2  CFE3 F00B          	movff	plusw1,btemp+10
  5878   010BF6  0E90               	movlw	-112
  5879   010BF8  CFE3 F00C          	movff	plusw1,btemp+11
  5880   010BFC  0E07               	movlw	7
  5881   010BFE  240B               	addwf	(btemp+10)^0,w,c
  5882   010C00  6ED9               	movwf	fsr2l,c
  5883   010C02  0E00               	movlw	0
  5884   010C04  200C               	addwfc	(btemp+11)^0,w,c
  5885   010C06  6EDA               	movwf	fsr2h,c
  5886                           
  5887                           ;stkvar	_ba @ sp[(-110)+4]
  5888   010C08  0E9B               	movlw	155
  5889   010C0A  24E1               	addwf	fsr1l,w,c
  5890   010C0C  6EE9               	movwf	fsr0l,c
  5891   010C0E  0EFF               	movlw	255
  5892   010C10  20E2               	addwfc	fsr1h,w,c
  5893   010C12  6EEA               	movwf	fsr0h,c
  5894   010C14  50EF               	movf	indf0,w,c
  5895   010C16  0B01               	andlw	1
  5896   010C18  6EDF               	movwf	indf2,c
  5897   010C1A                     
  5898                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5899                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5900   010C1A  0E8F               	movlw	-113
  5901   010C1C  CFE3 F00B          	movff	plusw1,btemp+10
  5902   010C20  0E90               	movlw	-112
  5903   010C22  CFE3 F00C          	movff	plusw1,btemp+11
  5904   010C26  0E08               	movlw	8
  5905   010C28  240B               	addwf	(btemp+10)^0,w,c
  5906   010C2A  6ED9               	movwf	fsr2l,c
  5907   010C2C  0E00               	movlw	0
  5908   010C2E  200C               	addwfc	(btemp+11)^0,w,c
  5909   010C30  6EDA               	movwf	fsr2h,c
  5910                           
  5911                           ;stkvar	_ba @ sp[(-110)+4]
  5912   010C32  0E9B               	movlw	155
  5913   010C34  24E1               	addwf	fsr1l,w,c
  5914   010C36  6EE9               	movwf	fsr0l,c
  5915   010C38  0EFF               	movlw	255
  5916   010C3A  20E2               	addwfc	fsr1h,w,c
  5917   010C3C  6EEA               	movwf	fsr0h,c
  5918   010C3E  50EF               	movf	indf0,w,c
  5919   010C40  6E0C               	movwf	(btemp+11)^0,c
  5920   010C42  90D8               	bcf	status,0,c
  5921   010C44  320C               	rrcf	(btemp+11)^0,f,c
  5922   010C46  90D8               	bcf	status,0,c
  5923   010C48  320C               	rrcf	(btemp+11)^0,f,c
  5924   010C4A  90D8               	bcf	status,0,c
  5925   010C4C  300C               	rrcf	(btemp+11)^0,w,c
  5926   010C4E  6EDF               	movwf	indf2,c
  5927   010C50                     
  5928                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5929                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5930   010C50  50E1               	movf	fsr1l,w,c
  5931   010C52  0FEE               	addlw	-18
  5932   010C54  6ED9               	movwf	fsr2l,c
  5933   010C56  50E2               	movf	fsr1h,w,c
  5934   010C58  6EDA               	movwf	fsr2h,c
  5935   010C5A  0EFF               	movlw	255
  5936   010C5C  22DA               	addwfc	fsr2h,f,c
  5937   010C5E  AADF               	btfss	indf2,5,c
  5938   010C60  EF34  F086         	goto	u2201
  5939   010C64  EF36  F086         	goto	u2200
  5940   010C68                     u2201:
  5941   010C68  EFC4  F086         	goto	l4542
  5942   010C6C                     u2200:
  5943   010C6C                     
  5944                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  5945                           ;stkvar	_ba @ sp[(-110)+4]
  5946   010C6C  0E9E               	movlw	158
  5947   010C6E  24E1               	addwf	fsr1l,w,c
  5948   010C70  6ED9               	movwf	fsr2l,c
  5949   010C72  0EFF               	movlw	255
  5950   010C74  20E2               	addwfc	fsr1h,w,c
  5951   010C76  6EDA               	movwf	fsr2h,c
  5952   010C78  50DF               	movf	indf2,w,c
  5953   010C7A  6E0C               	movwf	(btemp+11)^0,c
  5954                           
  5955                           ;stkvar	_myReg @ sp[(-110)+97]
  5956   010C7C  0EF3               	movlw	-13
  5957   010C7E  C00C  FFE3         	movff	btemp+11,plusw1
  5958   010C82                     
  5959                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  5960                           ;stkvar	_ba @ sp[(-110)+4]
  5961   010C82  0E9F               	movlw	159
  5962   010C84  24E1               	addwf	fsr1l,w,c
  5963   010C86  6ED9               	movwf	fsr2l,c
  5964   010C88  0EFF               	movlw	255
  5965   010C8A  20E2               	addwfc	fsr1h,w,c
  5966   010C8C  6EDA               	movwf	fsr2h,c
  5967                           
  5968                           ;stkvar	_myReg @ sp[(-110)+97]
  5969   010C8E  0EF4               	movlw	244
  5970   010C90  24E1               	addwf	fsr1l,w,c
  5971   010C92  6EE9               	movwf	fsr0l,c
  5972   010C94  0EFF               	movlw	255
  5973   010C96  20E2               	addwfc	fsr1h,w,c
  5974   010C98  6EEA               	movwf	fsr0h,c
  5975   010C9A  CFDF FFEF          	movff	indf2,indf0
  5976   010C9E                     
  5977                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  5978                           ;stkvar	_ba @ sp[(-110)+4]
  5979   010C9E  0EA0               	movlw	160
  5980   010CA0  24E1               	addwf	fsr1l,w,c
  5981   010CA2  6ED9               	movwf	fsr2l,c
  5982   010CA4  0EFF               	movlw	255
  5983   010CA6  20E2               	addwfc	fsr1h,w,c
  5984   010CA8  6EDA               	movwf	fsr2h,c
  5985                           
  5986                           ;stkvar	_myReg @ sp[(-110)+97]
  5987   010CAA  0EF5               	movlw	245
  5988   010CAC  24E1               	addwf	fsr1l,w,c
  5989   010CAE  6EE9               	movwf	fsr0l,c
  5990   010CB0  0EFF               	movlw	255
  5991   010CB2  20E2               	addwfc	fsr1h,w,c
  5992   010CB4  6EEA               	movwf	fsr0h,c
  5993   010CB6  CFDF FFEF          	movff	indf2,indf0
  5994   010CBA                     
  5995                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  5996                           ;stkvar	_ba @ sp[(-110)+4]
  5997   010CBA  0EA1               	movlw	161
  5998   010CBC  24E1               	addwf	fsr1l,w,c
  5999   010CBE  6ED9               	movwf	fsr2l,c
  6000   010CC0  0EFF               	movlw	255
  6001   010CC2  20E2               	addwfc	fsr1h,w,c
  6002   010CC4  6EDA               	movwf	fsr2h,c
  6003                           
  6004                           ;stkvar	_myReg @ sp[(-110)+97]
  6005   010CC6  0EF6               	movlw	246
  6006   010CC8  24E1               	addwf	fsr1l,w,c
  6007   010CCA  6EE9               	movwf	fsr0l,c
  6008   010CCC  0EFF               	movlw	255
  6009   010CCE  20E2               	addwfc	fsr1h,w,c
  6010   010CD0  6EEA               	movwf	fsr0h,c
  6011   010CD2  CFDF FFEF          	movff	indf2,indf0
  6012   010CD6                     
  6013                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  6014                           ;stkvar	_myReg @ sp[(-110)+97]
  6015   010CD6  50E1               	movf	fsr1l,w,c
  6016   010CD8  0FF3               	addlw	-13
  6017   010CDA  6ED9               	movwf	fsr2l,c
  6018   010CDC  50E2               	movf	fsr1h,w,c
  6019   010CDE  6EDA               	movwf	fsr2h,c
  6020   010CE0  0EFF               	movlw	255
  6021   010CE2  22DA               	addwfc	fsr2h,f,c
  6022                           
  6023                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6024   010CE4  0E8F               	movlw	-113
  6025   010CE6  CFE3 F00B          	movff	plusw1,btemp+10
  6026   010CEA  0E90               	movlw	-112
  6027   010CEC  CFE3 F00C          	movff	plusw1,btemp+11
  6028   010CF0  0E09               	movlw	9
  6029   010CF2  240B               	addwf	(btemp+10)^0,w,c
  6030   010CF4  6EE9               	movwf	fsr0l,c
  6031   010CF6  0E00               	movlw	0
  6032   010CF8  200C               	addwfc	(btemp+11)^0,w,c
  6033   010CFA  6EEA               	movwf	fsr0h,c
  6034   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  6035   010D00  CFDE FFEE          	movff	postinc2,postinc0
  6036   010D04  CFDE FFEE          	movff	postinc2,postinc0
  6037   010D08  CFDE FFEE          	movff	postinc2,postinc0
  6038   010D0C                     
  6039                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  6040                           ;stkvar	_i @ sp[(-110)+107]
  6041   010D0C  0EFD               	movlw	-3
  6042   010D0E  6AE3               	clrf	plusw1,c
  6043   010D10  EFB1  F086         	goto	l4540
  6044   010D14                     l4536:
  6045                           
  6046                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  6047                           ;stkvar	_i @ sp[(-110)+107]
  6048   010D14  0EFD               	movlw	-3
  6049   010D16  50E3               	movf	plusw1,w,c
  6050   010D18  6E0B               	movwf	(btemp+10)^0,c
  6051   010D1A  6A0C               	clrf	(btemp+11)^0,c
  6052   010D1C  0E0C               	movlw	12
  6053   010D1E  260B               	addwf	(btemp+10)^0,f,c
  6054   010D20  0E00               	movlw	0
  6055   010D22  220C               	addwfc	(btemp+11)^0,f,c
  6056                           
  6057                           ;stkvar	_ba @ sp[(-110)+4]
  6058   010D24  0E96               	movlw	150
  6059   010D26  24E1               	addwf	fsr1l,w,c
  6060   010D28  6E09               	movwf	(btemp+8)^0,c
  6061   010D2A  0EFF               	movlw	255
  6062   010D2C  20E2               	addwfc	fsr1h,w,c
  6063   010D2E  6E0A               	movwf	(btemp+9)^0,c
  6064   010D30  500B               	movf	(btemp+10)^0,w,c
  6065   010D32  2409               	addwf	(btemp+8)^0,w,c
  6066   010D34  6ED9               	movwf	fsr2l,c
  6067   010D36  500C               	movf	(btemp+11)^0,w,c
  6068   010D38  200A               	addwfc	(btemp+9)^0,w,c
  6069   010D3A  6EDA               	movwf	fsr2h,c
  6070                           
  6071                           ;stkvar	_i @ sp[(-110)+107]
  6072   010D3C  0EFD               	movlw	-3
  6073   010D3E  CFE3 F00C          	movff	plusw1,btemp+11
  6074                           
  6075                           ;stkvar	_rxd @ sp[(-110)+-5]
  6076   010D42  0E8D               	movlw	-115
  6077   010D44  CFE3 F009          	movff	plusw1,btemp+8
  6078   010D48  0E8E               	movlw	-114
  6079   010D4A  CFE3 F00A          	movff	plusw1,btemp+9
  6080   010D4E  500C               	movf	(btemp+11)^0,w,c
  6081   010D50  2409               	addwf	(btemp+8)^0,w,c
  6082   010D52  6EE9               	movwf	fsr0l,c
  6083   010D54  0E00               	movlw	0
  6084   010D56  200A               	addwfc	(btemp+9)^0,w,c
  6085   010D58  6EEA               	movwf	fsr0h,c
  6086   010D5A  CFDF FFEF          	movff	indf2,indf0
  6087   010D5E                     
  6088                           ;can/can.c: 1342:         }
  6089                           ;stkvar	_i @ sp[(-110)+107]
  6090   010D5E  0EFD               	movlw	-3
  6091   010D60  2AE3               	incf	plusw1,f,c
  6092   010D62                     l4540:
  6093                           
  6094                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6095                           ;stkvar	_i @ sp[(-110)+107]
  6096   010D62  50E1               	movf	fsr1l,w,c
  6097   010D64  0FFD               	addlw	-3
  6098   010D66  6ED9               	movwf	fsr2l,c
  6099   010D68  50E2               	movf	fsr1h,w,c
  6100   010D6A  6EDA               	movwf	fsr2h,c
  6101   010D6C  0EFF               	movlw	255
  6102   010D6E  22DA               	addwfc	fsr2h,f,c
  6103   010D70  0E8C               	movlw	-116
  6104   010D72  50E3               	movf	plusw1,w,c
  6105   010D74  5CDE               	subwf	postinc2,w,c
  6106   010D76  A0D8               	btfss	status,0,c
  6107   010D78  EFC0  F086         	goto	u2211
  6108   010D7C  EFC2  F086         	goto	u2210
  6109   010D80                     u2211:
  6110   010D80  EF8A  F086         	goto	l4536
  6111   010D84                     u2210:
  6112   010D84  EF10  F087         	goto	l4552
  6113   010D88                     l4542:
  6114                           
  6115                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6116                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6117   010D88  0E8F               	movlw	-113
  6118   010D8A  CFE3 F00B          	movff	plusw1,btemp+10
  6119   010D8E  0E90               	movlw	-112
  6120   010D90  CFE3 F00C          	movff	plusw1,btemp+11
  6121   010D94  0E09               	movlw	9
  6122   010D96  240B               	addwf	(btemp+10)^0,w,c
  6123   010D98  6ED9               	movwf	fsr2l,c
  6124   010D9A  0E00               	movlw	0
  6125   010D9C  200C               	addwfc	(btemp+11)^0,w,c
  6126   010D9E  6EDA               	movwf	fsr2h,c
  6127   010DA0  6ADE               	clrf	postinc2,c
  6128   010DA2  6ADE               	clrf	postinc2,c
  6129   010DA4  6ADE               	clrf	postinc2,c
  6130   010DA6  6ADD               	clrf	postdec2,c
  6131   010DA8                     
  6132                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6133                           ;stkvar	_i @ sp[(-110)+107]
  6134   010DA8  0EFD               	movlw	-3
  6135   010DAA  6AE3               	clrf	plusw1,c
  6136   010DAC  EFFF  F086         	goto	l4550
  6137   010DB0                     l4546:
  6138                           
  6139                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6140                           ;stkvar	_i @ sp[(-110)+107]
  6141   010DB0  0EFD               	movlw	-3
  6142   010DB2  50E3               	movf	plusw1,w,c
  6143   010DB4  6E0B               	movwf	(btemp+10)^0,c
  6144   010DB6  6A0C               	clrf	(btemp+11)^0,c
  6145   010DB8  0E08               	movlw	8
  6146   010DBA  260B               	addwf	(btemp+10)^0,f,c
  6147   010DBC  0E00               	movlw	0
  6148   010DBE  220C               	addwfc	(btemp+11)^0,f,c
  6149                           
  6150                           ;stkvar	_ba @ sp[(-110)+4]
  6151   010DC0  0E96               	movlw	150
  6152   010DC2  24E1               	addwf	fsr1l,w,c
  6153   010DC4  6E09               	movwf	(btemp+8)^0,c
  6154   010DC6  0EFF               	movlw	255
  6155   010DC8  20E2               	addwfc	fsr1h,w,c
  6156   010DCA  6E0A               	movwf	(btemp+9)^0,c
  6157   010DCC  500B               	movf	(btemp+10)^0,w,c
  6158   010DCE  2409               	addwf	(btemp+8)^0,w,c
  6159   010DD0  6ED9               	movwf	fsr2l,c
  6160   010DD2  500C               	movf	(btemp+11)^0,w,c
  6161   010DD4  200A               	addwfc	(btemp+9)^0,w,c
  6162   010DD6  6EDA               	movwf	fsr2h,c
  6163                           
  6164                           ;stkvar	_i @ sp[(-110)+107]
  6165   010DD8  0EFD               	movlw	-3
  6166   010DDA  CFE3 F00C          	movff	plusw1,btemp+11
  6167                           
  6168                           ;stkvar	_rxd @ sp[(-110)+-5]
  6169   010DDE  0E8D               	movlw	-115
  6170   010DE0  CFE3 F009          	movff	plusw1,btemp+8
  6171   010DE4  0E8E               	movlw	-114
  6172   010DE6  CFE3 F00A          	movff	plusw1,btemp+9
  6173   010DEA  500C               	movf	(btemp+11)^0,w,c
  6174   010DEC  2409               	addwf	(btemp+8)^0,w,c
  6175   010DEE  6EE9               	movwf	fsr0l,c
  6176   010DF0  0E00               	movlw	0
  6177   010DF2  200A               	addwfc	(btemp+9)^0,w,c
  6178   010DF4  6EEA               	movwf	fsr0h,c
  6179   010DF6  CFDF FFEF          	movff	indf2,indf0
  6180   010DFA                     
  6181                           ;can/can.c: 1349:         }
  6182                           ;stkvar	_i @ sp[(-110)+107]
  6183   010DFA  0EFD               	movlw	-3
  6184   010DFC  2AE3               	incf	plusw1,f,c
  6185   010DFE                     l4550:
  6186                           
  6187                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6188                           ;stkvar	_i @ sp[(-110)+107]
  6189   010DFE  50E1               	movf	fsr1l,w,c
  6190   010E00  0FFD               	addlw	-3
  6191   010E02  6ED9               	movwf	fsr2l,c
  6192   010E04  50E2               	movf	fsr1h,w,c
  6193   010E06  6EDA               	movwf	fsr2h,c
  6194   010E08  0EFF               	movlw	255
  6195   010E0A  22DA               	addwfc	fsr2h,f,c
  6196   010E0C  0E8C               	movlw	-116
  6197   010E0E  50E3               	movf	plusw1,w,c
  6198   010E10  5CDE               	subwf	postinc2,w,c
  6199   010E12  A0D8               	btfss	status,0,c
  6200   010E14  EF0E  F087         	goto	u2221
  6201   010E18  EF10  F087         	goto	u2220
  6202   010E1C                     u2221:
  6203   010E1C  EFD8  F086         	goto	l4546
  6204   010E20                     u2220:
  6205   010E20                     l4552:
  6206                           
  6207                           ;stkvar	_channel @ sp[(-110)+-1]
  6208   010E20  0E91               	movlw	-111
  6209   010E22  50E3               	movf	plusw1,w,c
  6210   010E24  6EE6               	movwf	postinc1,c
  6211   010E26  ECF0  F0A1         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6212   010E2A                     l357:
  6213                           
  6214                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6215   010E2A  0E8C               	movlw	140
  6216   010E2C  26E1               	addwf	fsr1l,f,c
  6217   010E2E  0EFF               	movlw	255
  6218   010E30  22E2               	addwfc	fsr1h,f,c
  6219   010E32  0012               	return		;funcret
  6220   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6221                           	callstack 0
  6222                           
  6223 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6224 ;; Defined at:
  6225 ;;		line 1378 in file "can/can.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  channel         1  [STACK] enum E5287
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6230 ;;  a               2  [STACK] unsigned short 
  6231 ;;  spiTransferE    1  [STACK] char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1  [STACK] char 
  6234 ;; Registers used:
  6235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;Total ram usage:        0 bytes
  6246 ;; Hardware stack levels used: 1
  6247 ;; Hardware stack levels required when called: 9
  6248 ;; This function calls:
  6249 ;;		_DRV_CANFDSPI_WriteByte
  6250 ;; This function is called by:
  6251 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6252 ;; This function uses a reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text13
  6256   0143E0                     __ptext13:
  6257                           	callstack 0
  6258   0143E0                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6259                           	callstack 0
  6260                           
  6261                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6262   0143E0  0E08               	movlw	8
  6263   0143E2  26E1               	addwf	fsr1l,f,c
  6264   0143E4  0E00               	movlw	0
  6265   0143E6  22E2               	addwfc	fsr1h,f,c
  6266   0143E8                     
  6267                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6268                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6269   0143E8  0EF8               	movlw	-8
  6270   0143EA  6AE3               	clrf	plusw1,c
  6271   0143EC  0EF9               	movlw	-7
  6272   0143EE  6AE3               	clrf	plusw1,c
  6273   0143F0  0EFA               	movlw	-6
  6274   0143F2  6AE3               	clrf	plusw1,c
  6275   0143F4  0EFB               	movlw	-5
  6276   0143F6  6AE3               	clrf	plusw1,c
  6277   0143F8                     
  6278                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6279                           ;stkvar	_channel @ sp[(-8)+-1]
  6280   0143F8  0EF7               	movlw	-9
  6281   0143FA  50E3               	movf	plusw1,w,c
  6282   0143FC  0D0C               	mullw	12
  6283   0143FE  0E51               	movlw	81
  6284   014400  26F3               	addwf	243,f,c
  6285   014402  0E00               	movlw	0
  6286   014404  22F4               	addwfc	244,f,c
  6287                           
  6288                           ;stkvar	_a @ sp[(-8)+5]
  6289   014406  0EFD               	movlw	-3
  6290   014408  CFF3 FFE3          	movff	prodl,plusw1
  6291   01440C  0EFE               	movlw	-2
  6292   01440E  CFF4 FFE3          	movff	prodh,plusw1
  6293   014412                     
  6294                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6295                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6296   014412  0EF9               	movlw	249
  6297   014414  24E1               	addwf	fsr1l,w,c
  6298   014416  6ED9               	movwf	fsr2l,c
  6299   014418  0EFF               	movlw	255
  6300   01441A  20E2               	addwfc	fsr1h,w,c
  6301   01441C  6EDA               	movwf	fsr2h,c
  6302   01441E  80DF               	bsf	indf2,0,c
  6303   014420                     
  6304                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6305                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6306   014420  0EF9               	movlw	249
  6307   014422  24E1               	addwf	fsr1l,w,c
  6308   014424  6ED9               	movwf	fsr2l,c
  6309   014426  0EFF               	movlw	255
  6310   014428  20E2               	addwfc	fsr1h,w,c
  6311   01442A  6EDA               	movwf	fsr2h,c
  6312   01442C  50DF               	movf	indf2,w,c
  6313   01442E  6EE6               	movwf	postinc1,c
  6314                           
  6315                           ;stkvar	_a @ sp[(-9)+5]
  6316   014430  0EFC               	movlw	-4
  6317   014432  CFE3 FFE6          	movff	plusw1,postinc1
  6318   014436  CFE3 FFE6          	movff	plusw1,postinc1
  6319   01443A  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6320                           
  6321                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6322   01443E  0EFF               	movlw	-1
  6323   014440  C001  FFE3         	movff	btemp,plusw1
  6324   014444                     
  6325                           ;can/can.c: 1393:     return spiTransferError;
  6326                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6327   014444  0EFF               	movlw	-1
  6328   014446  CFE3 F001          	movff	plusw1,btemp
  6329   01444A                     
  6330                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6331   01444A  0EF7               	movlw	247
  6332   01444C  26E1               	addwf	fsr1l,f,c
  6333   01444E  0EFF               	movlw	255
  6334   014450  22E2               	addwfc	fsr1h,f,c
  6335   014452  0012               	return		;funcret
  6336   014454                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6337                           	callstack 0
  6338                           
  6339 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6340 ;; Defined at:
  6341 ;;		line 356 in file "can/can.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  address         2  [STACK] unsigned short 
  6344 ;;  rxd             2  [STACK] PTR unsigned char 
  6345 ;;		 -> ba(12), ba(76), 
  6346 ;;  nBytes          2  [STACK] unsigned short 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  i               2  [STACK] unsigned short 
  6349 ;;  spiTransferS    2  [STACK] unsigned short 
  6350 ;;  spiTransferE    1  [STACK] char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1  [STACK] char 
  6353 ;; Registers used:
  6354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;Total ram usage:        0 bytes
  6365 ;; Hardware stack levels used: 1
  6366 ;; Hardware stack levels required when called: 8
  6367 ;; This function calls:
  6368 ;;		_SpiTransfer
  6369 ;; This function is called by:
  6370 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6371 ;; This function uses a reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text14
  6375   0127AA                     __ptext14:
  6376                           	callstack 0
  6377   0127AA                     _DRV_CANFDSPI_ReadByteArray:
  6378                           	callstack 0
  6379                           
  6380                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6381   0127AA  0E05               	movlw	5
  6382   0127AC  26E1               	addwf	fsr1l,f,c
  6383   0127AE  0E00               	movlw	0
  6384   0127B0  22E2               	addwfc	fsr1h,f,c
  6385   0127B2                     
  6386                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6387                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6388   0127B2  0EF5               	movlw	-11
  6389   0127B4  50E3               	movf	plusw1,w,c
  6390   0127B6  0F02               	addlw	2
  6391   0127B8  6E0B               	movwf	(btemp+10)^0,c
  6392   0127BA  0EF6               	movlw	-10
  6393   0127BC  CFE3 F00C          	movff	plusw1,btemp+11
  6394   0127C0  0E00               	movlw	0
  6395   0127C2  220C               	addwfc	(btemp+11)^0,f,c
  6396                           
  6397                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6398   0127C4  0EFD               	movlw	-3
  6399   0127C6  C00B  FFE3         	movff	btemp+10,plusw1
  6400   0127CA  0EFE               	movlw	-2
  6401   0127CC  C00C  FFE3         	movff	btemp+11,plusw1
  6402   0127D0                     
  6403                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6404                           ;stkvar	_address @ sp[(-5)+-2]
  6405   0127D0  0EFA               	movlw	250
  6406   0127D2  24E1               	addwf	fsr1l,w,c
  6407   0127D4  6ED9               	movwf	fsr2l,c
  6408   0127D6  0EFF               	movlw	255
  6409   0127D8  20E2               	addwfc	fsr1h,w,c
  6410   0127DA  6EDA               	movwf	fsr2h,c
  6411   0127DC  50DF               	movf	indf2,w,c
  6412   0127DE  0B0F               	andlw	15
  6413   0127E0  0F30               	addlw	48
  6414   0127E2  0101               	movlb	1	; () banked
  6415   0127E4  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6416   0127E6                     
  6417                           ; BSR set to: 1
  6418                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6419                           ;stkvar	_address @ sp[(-5)+-2]
  6420   0127E6  0EF9               	movlw	-7
  6421   0127E8  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6422   0127EC                     
  6423                           ; BSR set to: 1
  6424                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6425   0127EC  0E02               	movlw	2
  6426   0127EE  6E0B               	movwf	(btemp+10)^0,c
  6427   0127F0  0E00               	movlw	0
  6428   0127F2  6E0C               	movwf	(btemp+11)^0,c
  6429                           
  6430                           ;stkvar	_i @ sp[(-5)+0]
  6431   0127F4  0EFB               	movlw	-5
  6432   0127F6  C00B  FFE3         	movff	btemp+10,plusw1
  6433   0127FA  0EFC               	movlw	-4
  6434   0127FC  C00C  FFE3         	movff	btemp+11,plusw1
  6435   012800  EF1E  F094         	goto	l4372
  6436   012804                     l4368:
  6437                           
  6438                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6439                           ;stkvar	_i @ sp[(-5)+0]
  6440   012804  0EFB               	movlw	-5
  6441   012806  CFE3 F00B          	movff	plusw1,btemp+10
  6442   01280A  0EFC               	movlw	-4
  6443   01280C  CFE3 F00C          	movff	plusw1,btemp+11
  6444   012810  0E00               	movlw	low _spiTransmitBuffer
  6445   012812  240B               	addwf	(btemp+10)^0,w,c
  6446   012814  6ED9               	movwf	fsr2l,c
  6447   012816  0E01               	movlw	high _spiTransmitBuffer
  6448   012818  200C               	addwfc	(btemp+11)^0,w,c
  6449   01281A  6EDA               	movwf	fsr2h,c
  6450   01281C  6ADF               	clrf	indf2,c
  6451   01281E                     
  6452                           ;can/can.c: 370:     }
  6453                           ;stkvar	_i @ sp[(-5)+0]
  6454   01281E  0EFB               	movlw	-5
  6455   012820  50E3               	movf	plusw1,w,c
  6456   012822  0F01               	addlw	1
  6457   012824  6E01               	movwf	btemp^0,c
  6458   012826  0EFB               	movlw	-5
  6459   012828  C001  FFE3         	movff	btemp,plusw1
  6460   01282C  6A01               	clrf	btemp^0,c
  6461   01282E  0EFC               	movlw	-4
  6462   012830  50E3               	movf	plusw1,w,c
  6463   012832  2001               	addwfc	btemp^0,w,c
  6464   012834  6E01               	movwf	btemp^0,c
  6465   012836  0EFC               	movlw	-4
  6466   012838  C001  FFE3         	movff	btemp,plusw1
  6467   01283C                     l4372:
  6468                           
  6469                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6470   01283C  0EFD               	movlw	-3
  6471   01283E  CFE3 F00B          	movff	plusw1,btemp+10
  6472   012842  0EFE               	movlw	-2
  6473   012844  CFE3 F00C          	movff	plusw1,btemp+11
  6474                           
  6475                           ;stkvar	_i @ sp[(-5)+0]
  6476   012848  0EFB               	movlw	-5
  6477   01284A  CFE3 F009          	movff	plusw1,btemp+8
  6478   01284E  0EFC               	movlw	-4
  6479   012850  CFE3 F00A          	movff	plusw1,btemp+9
  6480   012854  500B               	movf	(btemp+10)^0,w,c
  6481   012856  5C09               	subwf	(btemp+8)^0,w,c
  6482   012858  500C               	movf	(btemp+11)^0,w,c
  6483   01285A  580A               	subwfb	(btemp+9)^0,w,c
  6484   01285C  A0D8               	btfss	status,0,c
  6485   01285E  EF33  F094         	goto	u2021
  6486   012862  EF35  F094         	goto	u2020
  6487   012866                     u2021:
  6488   012866  EF02  F094         	goto	l4368
  6489   01286A                     u2020:
  6490   01286A                     
  6491                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6492                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6493   01286A  0EFD               	movlw	-3
  6494   01286C  CFE3 FFE6          	movff	plusw1,postinc1
  6495   012870  CFE3 FFE6          	movff	plusw1,postinc1
  6496   012874  0E00               	movlw	low _spiReceiveBuffer
  6497   012876  6EE6               	movwf	postinc1,c
  6498   012878  0E02               	movlw	high _spiReceiveBuffer
  6499   01287A  6EE6               	movwf	postinc1,c
  6500   01287C  0E00               	movlw	low _spiTransmitBuffer
  6501   01287E  6EE6               	movwf	postinc1,c
  6502   012880  0E01               	movlw	high _spiTransmitBuffer
  6503   012882  6EE6               	movwf	postinc1,c
  6504   012884  EC63  F09D         	call	_SpiTransfer	;wreg free
  6505                           
  6506                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6507   012888  0EFF               	movlw	-1
  6508   01288A  C001  FFE3         	movff	btemp,plusw1
  6509   01288E                     
  6510                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6511                           ;stkvar	_i @ sp[(-5)+0]
  6512   01288E  0EFB               	movlw	-5
  6513   012890  6AE3               	clrf	plusw1,c
  6514   012892  0EFC               	movlw	-4
  6515   012894  6AE3               	clrf	plusw1,c
  6516   012896  EF7C  F094         	goto	l4382
  6517   01289A                     l4378:
  6518                           
  6519                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6520                           ;stkvar	_i @ sp[(-5)+0]
  6521   01289A  0EFB               	movlw	-5
  6522   01289C  CFE3 F00B          	movff	plusw1,btemp+10
  6523   0128A0  0EFC               	movlw	-4
  6524   0128A2  CFE3 F00C          	movff	plusw1,btemp+11
  6525   0128A6  0E02               	movlw	low (_spiReceiveBuffer+2)
  6526   0128A8  240B               	addwf	(btemp+10)^0,w,c
  6527   0128AA  6ED9               	movwf	fsr2l,c
  6528   0128AC  0E02               	movlw	high (_spiReceiveBuffer+2)
  6529   0128AE  200C               	addwfc	(btemp+11)^0,w,c
  6530   0128B0  6EDA               	movwf	fsr2h,c
  6531                           
  6532                           ;stkvar	_i @ sp[(-5)+0]
  6533   0128B2  0EFB               	movlw	-5
  6534   0128B4  CFE3 F00B          	movff	plusw1,btemp+10
  6535   0128B8  0EFC               	movlw	-4
  6536   0128BA  CFE3 F00C          	movff	plusw1,btemp+11
  6537                           
  6538                           ;stkvar	_rxd @ sp[(-5)+-4]
  6539   0128BE  0EF7               	movlw	-9
  6540   0128C0  CFE3 F009          	movff	plusw1,btemp+8
  6541   0128C4  0EF8               	movlw	-8
  6542   0128C6  CFE3 F00A          	movff	plusw1,btemp+9
  6543   0128CA  500B               	movf	(btemp+10)^0,w,c
  6544   0128CC  2409               	addwf	(btemp+8)^0,w,c
  6545   0128CE  6EE9               	movwf	fsr0l,c
  6546   0128D0  500C               	movf	(btemp+11)^0,w,c
  6547   0128D2  200A               	addwfc	(btemp+9)^0,w,c
  6548   0128D4  6EEA               	movwf	fsr0h,c
  6549   0128D6  CFDF FFEF          	movff	indf2,indf0
  6550   0128DA                     
  6551                           ;can/can.c: 377:     }
  6552                           ;stkvar	_i @ sp[(-5)+0]
  6553   0128DA  0EFB               	movlw	-5
  6554   0128DC  50E3               	movf	plusw1,w,c
  6555   0128DE  0F01               	addlw	1
  6556   0128E0  6E01               	movwf	btemp^0,c
  6557   0128E2  0EFB               	movlw	-5
  6558   0128E4  C001  FFE3         	movff	btemp,plusw1
  6559   0128E8  6A01               	clrf	btemp^0,c
  6560   0128EA  0EFC               	movlw	-4
  6561   0128EC  50E3               	movf	plusw1,w,c
  6562   0128EE  2001               	addwfc	btemp^0,w,c
  6563   0128F0  6E01               	movwf	btemp^0,c
  6564   0128F2  0EFC               	movlw	-4
  6565   0128F4  C001  FFE3         	movff	btemp,plusw1
  6566   0128F8                     l4382:
  6567                           
  6568                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6569   0128F8  0EF5               	movlw	-11
  6570   0128FA  CFE3 F00B          	movff	plusw1,btemp+10
  6571   0128FE  0EF6               	movlw	-10
  6572   012900  CFE3 F00C          	movff	plusw1,btemp+11
  6573                           
  6574                           ;stkvar	_i @ sp[(-5)+0]
  6575   012904  0EFB               	movlw	-5
  6576   012906  CFE3 F009          	movff	plusw1,btemp+8
  6577   01290A  0EFC               	movlw	-4
  6578   01290C  CFE3 F00A          	movff	plusw1,btemp+9
  6579   012910  500B               	movf	(btemp+10)^0,w,c
  6580   012912  5C09               	subwf	(btemp+8)^0,w,c
  6581   012914  500C               	movf	(btemp+11)^0,w,c
  6582   012916  580A               	subwfb	(btemp+9)^0,w,c
  6583   012918  A0D8               	btfss	status,0,c
  6584   01291A  EF91  F094         	goto	u2031
  6585   01291E  EF93  F094         	goto	u2030
  6586   012922                     u2031:
  6587   012922  EF4D  F094         	goto	l4378
  6588   012926                     u2030:
  6589   012926                     
  6590                           ;can/can.c: 379:     return spiTransferError;
  6591                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6592   012926  0EFF               	movlw	-1
  6593   012928  CFE3 F001          	movff	plusw1,btemp
  6594   01292C                     
  6595                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6596   01292C  0EF5               	movlw	245
  6597   01292E  26E1               	addwf	fsr1l,f,c
  6598   012930  0EFF               	movlw	255
  6599   012932  22E2               	addwfc	fsr1h,f,c
  6600   012934  0012               	return		;funcret
  6601   012936                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6602                           	callstack 0
  6603                           
  6604 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6605 ;; Defined at:
  6606 ;;		line 1928 in file "can/can.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  channel         1  [STACK] enum E5287
  6609 ;;  flags           2  [STACK] PTR enum E5588
  6610 ;;		 -> rxFlags(1), 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6613 ;;  a               2  [STACK] unsigned short 
  6614 ;;  spiTransferE    1  [STACK] char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1  [STACK] char 
  6617 ;; Registers used:
  6618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used: 1
  6630 ;; Hardware stack levels required when called: 9
  6631 ;; This function calls:
  6632 ;;		_DRV_CANFDSPI_ReadByte
  6633 ;; This function is called by:
  6634 ;;		_CanReceive
  6635 ;; This function uses a reentrant model
  6636 ;;
  6637                           
  6638                           	psect	text15
  6639   014066                     __ptext15:
  6640                           	callstack 0
  6641   014066                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6642                           	callstack 0
  6643                           
  6644                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6645   014066  0E07               	movlw	7
  6646   014068  26E1               	addwf	fsr1l,f,c
  6647   01406A  0E00               	movlw	0
  6648   01406C  22E2               	addwfc	fsr1h,f,c
  6649   01406E                     
  6650                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6651                           ;stkvar	_channel @ sp[(-7)+-1]
  6652   01406E  0EF8               	movlw	-8
  6653   014070  50E3               	movf	plusw1,w,c
  6654   014072  A4D8               	btfss	status,2,c
  6655   014074  EF3E  F0A0         	goto	u2091
  6656   014078  EF40  F0A0         	goto	u2090
  6657   01407C                     u2091:
  6658   01407C  EF42  F0A0         	goto	l4454
  6659   014080                     u2090:
  6660   014080  EF80  F0A0         	goto	l482
  6661   014084                     l4454:
  6662                           
  6663                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6664                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6665   014084  0EF9               	movlw	-7
  6666   014086  6AE3               	clrf	plusw1,c
  6667   014088  0EFA               	movlw	-6
  6668   01408A  6AE3               	clrf	plusw1,c
  6669   01408C  0EFB               	movlw	-5
  6670   01408E  6AE3               	clrf	plusw1,c
  6671   014090  0EFC               	movlw	-4
  6672   014092  6AE3               	clrf	plusw1,c
  6673   014094                     
  6674                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6675                           ;stkvar	_channel @ sp[(-7)+-1]
  6676   014094  0EF8               	movlw	-8
  6677   014096  50E3               	movf	plusw1,w,c
  6678   014098  0D0C               	mullw	12
  6679   01409A  0E54               	movlw	84
  6680   01409C  26F3               	addwf	243,f,c
  6681   01409E  0E00               	movlw	0
  6682   0140A0  22F4               	addwfc	244,f,c
  6683                           
  6684                           ;stkvar	_a @ sp[(-7)+4]
  6685   0140A2  0EFD               	movlw	-3
  6686   0140A4  CFF3 FFE3          	movff	prodl,plusw1
  6687   0140A8  0EFE               	movlw	-2
  6688   0140AA  CFF4 FFE3          	movff	prodh,plusw1
  6689   0140AE                     
  6690                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6691                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6692   0140AE  0EF9               	movlw	249
  6693   0140B0  24E1               	addwf	fsr1l,w,c
  6694   0140B2  6E01               	movwf	btemp^0,c
  6695   0140B4  0EFF               	movlw	255
  6696   0140B6  20E2               	addwfc	fsr1h,w,c
  6697   0140B8  6E02               	movwf	(btemp+1)^0,c
  6698   0140BA  C001  FFE6         	movff	btemp,postinc1
  6699   0140BE  C002  FFE6         	movff	btemp+1,postinc1
  6700                           
  6701                           ;stkvar	_a @ sp[(-9)+4]
  6702   0140C2  0EFB               	movlw	-5
  6703   0140C4  CFE3 FFE6          	movff	plusw1,postinc1
  6704   0140C8  CFE3 FFE6          	movff	plusw1,postinc1
  6705   0140CC  ECC3  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6706                           
  6707                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6708   0140D0  0EFF               	movlw	-1
  6709   0140D2  C001  FFE3         	movff	btemp,plusw1
  6710   0140D6                     
  6711                           ;can/can.c: 1942:     if (spiTransferError) {
  6712                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6713   0140D6  0EFF               	movlw	-1
  6714   0140D8  50E3               	movf	plusw1,w,c
  6715   0140DA  B4D8               	btfsc	status,2,c
  6716   0140DC  EF72  F0A0         	goto	u2101
  6717   0140E0  EF74  F0A0         	goto	u2100
  6718   0140E4                     u2101:
  6719   0140E4  EF76  F0A0         	goto	l4464
  6720   0140E8                     u2100:
  6721   0140E8  EF80  F0A0         	goto	l482
  6722   0140EC                     l4464:
  6723                           
  6724                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6725                           ;stkvar	_flags @ sp[(-7)+-3]
  6726   0140EC  0EF6               	movlw	-10
  6727   0140EE  CFE3 FFD9          	movff	plusw1,fsr2l
  6728   0140F2  0EF7               	movlw	-9
  6729   0140F4  CFE3 FFDA          	movff	plusw1,fsr2h
  6730                           
  6731                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6732   0140F8  0EF9               	movlw	-7
  6733   0140FA  50E3               	movf	plusw1,w,c
  6734   0140FC  0B0F               	andlw	15
  6735   0140FE  6EDF               	movwf	indf2,c
  6736   014100                     l482:
  6737                           
  6738                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6739   014100  0EF6               	movlw	246
  6740   014102  26E1               	addwf	fsr1l,f,c
  6741   014104  0EFF               	movlw	255
  6742   014106  22E2               	addwfc	fsr1h,f,c
  6743   014108  0012               	return		;funcret
  6744   01410A                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6745                           	callstack 0
  6746                           
  6747 ;; *************** function _XF_init *****************
  6748 ;; Defined at:
  6749 ;;		line 80 in file "xf/xf.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  i               2  [STACK] int 
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1  [STACK] void 
  6756 ;; Registers used:
  6757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;Total ram usage:        0 bytes
  6768 ;; Hardware stack levels used: 1
  6769 ;; Hardware stack levels required when called: 8
  6770 ;; This function calls:
  6771 ;;		_Event_init
  6772 ;; This function is called by:
  6773 ;;		_main
  6774 ;; This function uses a reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text16
  6778   012C38                     __ptext16:
  6779                           	callstack 0
  6780   012C38                     _XF_init:
  6781                           	callstack 0
  6782                           
  6783                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6784   012C38  52E6               	movf	postinc1,f,c
  6785   012C3A  52E6               	movf	postinc1,f,c
  6786   012C3C                     
  6787                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6788                           ;stkvar	_i @ sp[(-2)+0]
  6789   012C3C  0EFE               	movlw	-2
  6790   012C3E  6AE3               	clrf	plusw1,c
  6791   012C40  0EFF               	movlw	-1
  6792   012C42  6AE3               	clrf	plusw1,c
  6793   012C44                     l5282:
  6794                           
  6795                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6796                           ;stkvar	_i @ sp[(-2)+0]
  6797   012C44  0EFE               	movlw	-2
  6798   012C46  CFE3 F00B          	movff	plusw1,btemp+10
  6799   012C4A  0EFF               	movlw	-1
  6800   012C4C  CFE3 F00C          	movff	plusw1,btemp+11
  6801   012C50  0E06               	movlw	6
  6802   012C52  020B               	mulwf	(btemp+10)^0,c
  6803   012C54  CFF3 F009          	movff	prodl,btemp+8
  6804   012C58  CFF4 F00A          	movff	prodh,btemp+9
  6805   012C5C  020C               	mulwf	(btemp+11)^0,c
  6806   012C5E  50F3               	movf	prodl,w,c
  6807   012C60  260A               	addwf	(btemp+9)^0,f,c
  6808   012C62  0E28               	movlw	low (_theXF+96)
  6809   012C64  2409               	addwf	(btemp+8)^0,w,c
  6810   012C66  6E0B               	movwf	(btemp+10)^0,c
  6811   012C68  0E03               	movlw	high (_theXF+96)
  6812   012C6A  200A               	addwfc	(btemp+9)^0,w,c
  6813   012C6C  6E0C               	movwf	(btemp+11)^0,c
  6814   012C6E  C00B  FFE6         	movff	btemp+10,postinc1
  6815   012C72  C00C  FFE6         	movff	btemp+11,postinc1
  6816   012C76  EC7B  F0A3         	call	_Event_init	;wreg free
  6817   012C7A                     
  6818                           ;xf/xf.c: 86:     }
  6819                           ;stkvar	_i @ sp[(-2)+0]
  6820   012C7A  0EFE               	movlw	-2
  6821   012C7C  50E3               	movf	plusw1,w,c
  6822   012C7E  0F01               	addlw	1
  6823   012C80  6E01               	movwf	btemp^0,c
  6824   012C82  0EFE               	movlw	-2
  6825   012C84  C001  FFE3         	movff	btemp,plusw1
  6826   012C88  6A01               	clrf	btemp^0,c
  6827   012C8A  0EFF               	movlw	-1
  6828   012C8C  50E3               	movf	plusw1,w,c
  6829   012C8E  2001               	addwfc	btemp^0,w,c
  6830   012C90  6E01               	movwf	btemp^0,c
  6831   012C92  0EFF               	movlw	-1
  6832   012C94  C001  FFE3         	movff	btemp,plusw1
  6833   012C98                     
  6834                           ;stkvar	_i @ sp[(-2)+0]
  6835   012C98  0EFF               	movlw	-1
  6836   012C9A  BEE3               	btfsc	plusw1,7,c
  6837   012C9C  EF5D  F096         	goto	u2971
  6838   012CA0  0EFF               	movlw	-1
  6839   012CA2  50E3               	movf	plusw1,w,c
  6840   012CA4  E10C               	bnz	u2970
  6841   012CA6  0EFE               	movlw	-2
  6842   012CA8  CFE3 F001          	movff	plusw1,btemp
  6843   012CAC  0E1E               	movlw	30
  6844   012CAE  5E01               	subwf	btemp^0,f,c
  6845   012CB0  A0D8               	btfss	status,0,c
  6846   012CB2  EF5D  F096         	goto	u2971
  6847   012CB6  EF5F  F096         	goto	u2970
  6848   012CBA                     u2971:
  6849   012CBA  EF22  F096         	goto	l5282
  6850   012CBE                     u2970:
  6851   012CBE                     
  6852                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6853                           ;stkvar	_i @ sp[(-2)+0]
  6854   012CBE  0EFE               	movlw	-2
  6855   012CC0  6AE3               	clrf	plusw1,c
  6856   012CC2  0EFF               	movlw	-1
  6857   012CC4  6AE3               	clrf	plusw1,c
  6858   012CC6                     l5294:
  6859                           
  6860                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6861                           ;stkvar	_i @ sp[(-2)+0]
  6862   012CC6  0EFE               	movlw	-2
  6863   012CC8  CFE3 F00B          	movff	plusw1,btemp+10
  6864   012CCC  0EFF               	movlw	-1
  6865   012CCE  CFE3 F00C          	movff	plusw1,btemp+11
  6866   012CD2  90D8               	bcf	status,0,c
  6867   012CD4  360B               	rlcf	(btemp+10)^0,f,c
  6868   012CD6  360C               	rlcf	(btemp+11)^0,f,c
  6869   012CD8  90D8               	bcf	status,0,c
  6870   012CDA  360B               	rlcf	(btemp+10)^0,f,c
  6871   012CDC  360C               	rlcf	(btemp+11)^0,f,c
  6872   012CDE  90D8               	bcf	status,0,c
  6873   012CE0  360B               	rlcf	(btemp+10)^0,f,c
  6874   012CE2  360C               	rlcf	(btemp+11)^0,f,c
  6875   012CE4  0EC8               	movlw	low _theXF
  6876   012CE6  240B               	addwf	(btemp+10)^0,w,c
  6877   012CE8  6ED9               	movwf	fsr2l,c
  6878   012CEA  0E02               	movlw	high _theXF
  6879   012CEC  200C               	addwfc	(btemp+11)^0,w,c
  6880   012CEE  6EDA               	movwf	fsr2h,c
  6881   012CF0  6ADE               	clrf	postinc2,c
  6882   012CF2  6ADD               	clrf	postdec2,c
  6883   012CF4                     
  6884                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6885                           ;stkvar	_i @ sp[(-2)+0]
  6886   012CF4  0EFE               	movlw	-2
  6887   012CF6  CFE3 F00B          	movff	plusw1,btemp+10
  6888   012CFA  0EFF               	movlw	-1
  6889   012CFC  CFE3 F00C          	movff	plusw1,btemp+11
  6890   012D00  90D8               	bcf	status,0,c
  6891   012D02  360B               	rlcf	(btemp+10)^0,f,c
  6892   012D04  360C               	rlcf	(btemp+11)^0,f,c
  6893   012D06  90D8               	bcf	status,0,c
  6894   012D08  360B               	rlcf	(btemp+10)^0,f,c
  6895   012D0A  360C               	rlcf	(btemp+11)^0,f,c
  6896   012D0C  90D8               	bcf	status,0,c
  6897   012D0E  360B               	rlcf	(btemp+10)^0,f,c
  6898   012D10  360C               	rlcf	(btemp+11)^0,f,c
  6899   012D12  0ECA               	movlw	low (_theXF+2)
  6900   012D14  240B               	addwf	(btemp+10)^0,w,c
  6901   012D16  6E09               	movwf	(btemp+8)^0,c
  6902   012D18  0E02               	movlw	high (_theXF+2)
  6903   012D1A  200C               	addwfc	(btemp+11)^0,w,c
  6904   012D1C  6E0A               	movwf	(btemp+9)^0,c
  6905   012D1E  C009  FFE6         	movff	btemp+8,postinc1
  6906   012D22  C00A  FFE6         	movff	btemp+9,postinc1
  6907   012D26  EC7B  F0A3         	call	_Event_init	;wreg free
  6908   012D2A                     
  6909                           ;xf/xf.c: 92:     }
  6910                           ;stkvar	_i @ sp[(-2)+0]
  6911   012D2A  0EFE               	movlw	-2
  6912   012D2C  50E3               	movf	plusw1,w,c
  6913   012D2E  0F01               	addlw	1
  6914   012D30  6E01               	movwf	btemp^0,c
  6915   012D32  0EFE               	movlw	-2
  6916   012D34  C001  FFE3         	movff	btemp,plusw1
  6917   012D38  6A01               	clrf	btemp^0,c
  6918   012D3A  0EFF               	movlw	-1
  6919   012D3C  50E3               	movf	plusw1,w,c
  6920   012D3E  2001               	addwfc	btemp^0,w,c
  6921   012D40  6E01               	movwf	btemp^0,c
  6922   012D42  0EFF               	movlw	-1
  6923   012D44  C001  FFE3         	movff	btemp,plusw1
  6924   012D48                     
  6925                           ;stkvar	_i @ sp[(-2)+0]
  6926   012D48  0EFF               	movlw	-1
  6927   012D4A  BEE3               	btfsc	plusw1,7,c
  6928   012D4C  EFB5  F096         	goto	u2981
  6929   012D50  0EFF               	movlw	-1
  6930   012D52  50E3               	movf	plusw1,w,c
  6931   012D54  E10C               	bnz	u2980
  6932   012D56  0EFE               	movlw	-2
  6933   012D58  CFE3 F001          	movff	plusw1,btemp
  6934   012D5C  0E0C               	movlw	12
  6935   012D5E  5E01               	subwf	btemp^0,f,c
  6936   012D60  A0D8               	btfss	status,0,c
  6937   012D62  EFB5  F096         	goto	u2981
  6938   012D66  EFB7  F096         	goto	u2980
  6939   012D6A                     u2981:
  6940   012D6A  EF63  F096         	goto	l5294
  6941   012D6E                     u2980:
  6942   012D6E                     
  6943                           ;xf/xf.c: 93:     theXF.in = 0;
  6944   012D6E  0E00               	movlw	0
  6945   012D70  CFE8 F3DC          	movff	wreg,_theXF+276
  6946                           
  6947                           ;xf/xf.c: 94:     theXF.out = 0;
  6948   012D74  0E00               	movlw	0
  6949   012D76  CFE8 F3DD          	movff	wreg,_theXF+277
  6950                           
  6951                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  6952   012D7A  0E00               	movlw	0
  6953   012D7C  CFE8 F3DE          	movff	wreg,_theXF+278
  6954                           
  6955                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  6956   012D80  0E00               	movlw	0
  6957   012D82  CFE8 F3DF          	movff	wreg,_theXF+279
  6958   012D86                     
  6959                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  6960   012D86  52E5               	movf	postdec1,f,c
  6961   012D88  52E5               	movf	postdec1,f,c
  6962   012D8A  0012               	return		;funcret
  6963   012D8C                     __end_of_XF_init:
  6964                           	callstack 0
  6965                           
  6966 ;; *************** function _Event_init *****************
  6967 ;; Defined at:
  6968 ;;		line 4 in file "xf/event.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  me              2  [STACK] PTR struct Event_
  6971 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;		None
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1  [STACK] void 
  6976 ;; Registers used:
  6977 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;Total ram usage:        0 bytes
  6988 ;; Hardware stack levels used: 1
  6989 ;; Hardware stack levels required when called: 7
  6990 ;; This function calls:
  6991 ;;		Nothing
  6992 ;; This function is called by:
  6993 ;;		_XF_init
  6994 ;;		_XF_unscheduleTimer
  6995 ;;		_XF_post
  6996 ;; This function uses a reentrant model
  6997 ;;
  6998                           
  6999                           	psect	text17
  7000   0146F6                     __ptext17:
  7001                           	callstack 0
  7002   0146F6                     _Event_init:
  7003                           	callstack 10
  7004   0146F6                     
  7005                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  7006                           ;stkvar	_me @ sp[(0)+-2]
  7007   0146F6  0EFE               	movlw	-2
  7008   0146F8  CFE3 FFD9          	movff	plusw1,fsr2l
  7009   0146FC  0EFF               	movlw	-1
  7010   0146FE  CFE3 FFDA          	movff	plusw1,fsr2h
  7011   014702  6ADF               	clrf	indf2,c
  7012   014704                     
  7013                           ;xf/event.c: 7:     me->delay = 0;
  7014                           ;stkvar	_me @ sp[(0)+-2]
  7015   014704  0EFE               	movlw	-2
  7016   014706  CFE3 F00B          	movff	plusw1,btemp+10
  7017   01470A  0EFF               	movlw	-1
  7018   01470C  CFE3 F00C          	movff	plusw1,btemp+11
  7019   014710  0E04               	movlw	4
  7020   014712  240B               	addwf	(btemp+10)^0,w,c
  7021   014714  6ED9               	movwf	fsr2l,c
  7022   014716  0E00               	movlw	0
  7023   014718  200C               	addwfc	(btemp+11)^0,w,c
  7024   01471A  6EDA               	movwf	fsr2h,c
  7025   01471C  6ADE               	clrf	postinc2,c
  7026   01471E  6ADD               	clrf	postdec2,c
  7027   014720                     
  7028                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  7029                           ;stkvar	_me @ sp[(0)+-2]
  7030   014720  0EFE               	movlw	-2
  7031   014722  CFE3 F00B          	movff	plusw1,btemp+10
  7032   014726  0EFF               	movlw	-1
  7033   014728  CFE3 F00C          	movff	plusw1,btemp+11
  7034   01472C  0E01               	movlw	1
  7035   01472E  240B               	addwf	(btemp+10)^0,w,c
  7036   014730  6ED9               	movwf	fsr2l,c
  7037   014732  0E00               	movlw	0
  7038   014734  200C               	addwfc	(btemp+11)^0,w,c
  7039   014736  6EDA               	movwf	fsr2h,c
  7040   014738  6ADE               	clrf	postinc2,c
  7041   01473A  6ADE               	clrf	postinc2,c
  7042   01473C  6ADD               	clrf	postdec2,c
  7043   01473E                     
  7044                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  7045   01473E  52E5               	movf	postdec1,f,c
  7046   014740  52E5               	movf	postdec1,f,c
  7047   014742  0012               	return		;funcret
  7048   014744                     __end_of_Event_init:
  7049                           	callstack 0
  7050                           
  7051 ;; *************** function _XF_executeOnce *****************
  7052 ;; Defined at:
  7053 ;;		line 290 in file "xf/xf.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  ev              6  [STACK] struct Event_
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1  [STACK] void 
  7060 ;; Registers used:
  7061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used: 1
  7073 ;; Hardware stack levels required when called: 14
  7074 ;; This function calls:
  7075 ;;		_XF_popEvent
  7076 ;;		_lightControl_Process
  7077 ;;		_motorControl_Process
  7078 ;; This function is called by:
  7079 ;;		_main
  7080 ;; This function uses a reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text18
  7084   0142CA                     __ptext18:
  7085                           	callstack 0
  7086   0142CA                     _XF_executeOnce:
  7087                           	callstack 0
  7088                           
  7089                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7090   0142CA  0E06               	movlw	6
  7091   0142CC  26E1               	addwf	fsr1l,f,c
  7092   0142CE  0E00               	movlw	0
  7093   0142D0  22E2               	addwfc	fsr1h,f,c
  7094   0142D2                     
  7095                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7096   0142D2  0E00               	movlw	0
  7097   0142D4  6EE6               	movwf	postinc1,c
  7098   0142D6  EC98  F09C         	call	_XF_popEvent	;wreg free
  7099                           
  7100                           ;stkvar	_ev @ sp[(-12)+0]
  7101   0142DA  0EFA               	movlw	250
  7102   0142DC  24E1               	addwf	fsr1l,w,c
  7103   0142DE  6ED9               	movwf	fsr2l,c
  7104   0142E0  0EFF               	movlw	255
  7105   0142E2  20E2               	addwfc	fsr1h,w,c
  7106   0142E4  6EDA               	movwf	fsr2h,c
  7107   0142E6  0E06               	movlw	6
  7108   0142E8  6E01               	movwf	btemp^0,c
  7109   0142EA                     uf299999:
  7110   0142EA  50DD               	movf	postdec2,w,c
  7111   0142EC  52E5               	movf	postdec1,f,c
  7112   0142EE  50E7               	movf	indf1,w,c
  7113   0142F0  6EDF               	movwf	indf2,c
  7114   0142F2  2E01               	decfsz	btemp^0,f,c
  7115   0142F4  D7FA               	bra	uf299999
  7116   0142F6                     
  7117                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7118                           ;stkvar	_ev @ sp[(-6)+0]
  7119   0142F6  0EFB               	movlw	251
  7120   0142F8  24E1               	addwf	fsr1l,w,c
  7121   0142FA  6ED9               	movwf	fsr2l,c
  7122   0142FC  0EFF               	movlw	255
  7123   0142FE  20E2               	addwfc	fsr1h,w,c
  7124   014300  6EDA               	movwf	fsr2h,c
  7125   014302  50DE               	movf	postinc2,w,c
  7126   014304  10DE               	iorwf	postinc2,w,c
  7127   014306  10DE               	iorwf	postinc2,w,c
  7128   014308  B4D8               	btfsc	status,2,c
  7129   01430A  EF89  F0A1         	goto	u3001
  7130   01430E  EF8B  F0A1         	goto	u3000
  7131   014312                     u3001:
  7132   014312  EFA8  F0A1         	goto	l1261
  7133   014316                     u3000:
  7134   014316                     
  7135                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7136                           ;stkvar	_ev @ sp[(-6)+0]
  7137   014316  0EFA               	movlw	250
  7138   014318  24E1               	addwf	fsr1l,w,c
  7139   01431A  6E01               	movwf	btemp^0,c
  7140   01431C  0EFF               	movlw	255
  7141   01431E  20E2               	addwfc	fsr1h,w,c
  7142   014320  6E02               	movwf	(btemp+1)^0,c
  7143   014322  C001  FFE6         	movff	btemp,postinc1
  7144   014326  C002  FFE6         	movff	btemp+1,postinc1
  7145                           
  7146                           ;stkvar	_ev @ sp[(-8)+0]
  7147   01432A  0EF9               	movlw	249
  7148   01432C  24E1               	addwf	fsr1l,w,c
  7149   01432E  6ED9               	movwf	fsr2l,c
  7150   014330  0EFF               	movlw	255
  7151   014332  20E2               	addwfc	fsr1h,w,c
  7152   014334  6EDA               	movwf	fsr2h,c
  7153   014336  D802               	call	u3018
  7154   014338  EFA8  F0A1         	goto	u3019
  7155   01433C                     u3018:
  7156   01433C  0005               	push	
  7157   01433E  6EFA               	movwf	pclath,c
  7158   014340  50DE               	movf	postinc2,w,c
  7159   014342  6EFD               	movwf	tosl,c
  7160   014344  50DE               	movf	postinc2,w,c
  7161   014346  6EFE               	movwf	tosh,c
  7162   014348  50DE               	movf	postinc2,w,c
  7163   01434A  6EFF               	movwf	tosu,c
  7164   01434C  50FA               	movf	pclath,w,c
  7165   01434E  0012               	return		;indir
  7166   014350                     u3019:
  7167   014350                     l1261:
  7168                           
  7169                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7170   014350  0EFA               	movlw	250
  7171   014352  26E1               	addwf	fsr1l,f,c
  7172   014354  0EFF               	movlw	255
  7173   014356  22E2               	addwfc	fsr1h,f,c
  7174   014358  0012               	return		;funcret
  7175   01435A                     __end_of_XF_executeOnce:
  7176                           	callstack 0
  7177                           
  7178 ;; *************** function _lightControl_Process *****************
  7179 ;; Defined at:
  7180 ;;		line 150 in file "carFunctions.c"
  7181 ;; Parameters:    Size  Location     Type
  7182 ;;  ev              2  [STACK] PTR struct Event_
  7183 ;;		 -> ev(6), 
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  1  [STACK] _Bool 
  7188 ;; Registers used:
  7189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;Total ram usage:        0 bytes
  7200 ;; Hardware stack levels used: 1
  7201 ;; Hardware stack levels required when called: 13
  7202 ;; This function calls:
  7203 ;;		_lightContol_BackLight
  7204 ;;		_lightContol_FrontLight
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;;		_updateCarState
  7208 ;;		_XF_executeOnce
  7209 ;; This function uses a reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text19
  7213   012602                     __ptext19:
  7214                           	callstack 0
  7215   012602                     _lightControl_Process:
  7216                           	callstack 16
  7217   012602                     
  7218                           ;carFunctions.c: 150: _Bool lightControl_Process(Event* ev);carFunctions.c: 151: {;carFu
      +                          nctions.c: 159:     static LightState state = INIT;;carFunctions.c: 160:     static Ligh
      +                          tState oldState = INIT;;carFunctions.c: 161:     switch(state)
  7219   012602  EF6F  F093         	goto	l5166
  7220   012606                     l5140:
  7221                           
  7222                           ;carFunctions.c: 164:             if(ev->id == E_INIT){
  7223                           ;stkvar	_ev @ sp[(0)+-2]
  7224   012606  0EFE               	movlw	-2
  7225   012608  CFE3 FFD9          	movff	plusw1,fsr2l
  7226   01260C  0EFF               	movlw	-1
  7227   01260E  CFE3 FFDA          	movff	plusw1,fsr2h
  7228   012612  50DF               	movf	indf2,w,c
  7229   012614  06E8               	decf	wreg,f,c
  7230   012616  A4D8               	btfss	status,2,c
  7231   012618  EF10  F093         	goto	u2881
  7232   01261C  EF12  F093         	goto	u2880
  7233   012620                     u2881:
  7234   012620  EF8C  F093         	goto	l5168
  7235   012624                     u2880:
  7236   012624                     l5142:
  7237                           
  7238                           ;carFunctions.c: 165:                 state = OFF;
  7239   012624  0E01               	movlw	1
  7240   012626  6E3A               	movwf	lightControl_Process@state^0,c
  7241   012628  EF8C  F093         	goto	l5168
  7242   01262C                     l5144:
  7243                           
  7244                           ;carFunctions.c: 169:             if(ev->id == E_CONTACT_ON)
  7245                           ;stkvar	_ev @ sp[(0)+-2]
  7246   01262C  0EFE               	movlw	-2
  7247   01262E  CFE3 FFD9          	movff	plusw1,fsr2l
  7248   012632  0EFF               	movlw	-1
  7249   012634  CFE3 FFDA          	movff	plusw1,fsr2h
  7250   012638  50DF               	movf	indf2,w,c
  7251   01263A  0A03               	xorlw	3
  7252   01263C  A4D8               	btfss	status,2,c
  7253   01263E  EF23  F093         	goto	u2891
  7254   012642  EF25  F093         	goto	u2890
  7255   012646                     u2891:
  7256   012646  EF8C  F093         	goto	l5168
  7257   01264A                     u2890:
  7258   01264A                     l5146:
  7259                           
  7260                           ;carFunctions.c: 170:             {;carFunctions.c: 171:                 state = CRUISE;
  7261   01264A  0E02               	movlw	2
  7262   01264C  6E3A               	movwf	lightControl_Process@state^0,c
  7263   01264E  EF8C  F093         	goto	l5168
  7264   012652                     l5148:
  7265                           
  7266                           ;carFunctions.c: 176:             if(ev->id == E_CONTACT_OFF)
  7267                           ;stkvar	_ev @ sp[(0)+-2]
  7268   012652  0EFE               	movlw	-2
  7269   012654  CFE3 FFD9          	movff	plusw1,fsr2l
  7270   012658  0EFF               	movlw	-1
  7271   01265A  CFE3 FFDA          	movff	plusw1,fsr2h
  7272   01265E  50DF               	movf	indf2,w,c
  7273   012660  0A02               	xorlw	2
  7274   012662  A4D8               	btfss	status,2,c
  7275   012664  EF36  F093         	goto	u2901
  7276   012668  EF38  F093         	goto	u2900
  7277   01266C                     u2901:
  7278   01266C  EF3A  F093         	goto	l5152
  7279   012670                     u2900:
  7280   012670  EF12  F093         	goto	l5142
  7281   012674                     l5152:
  7282                           
  7283                           ;stkvar	_ev @ sp[(0)+-2]
  7284   012674  0EFE               	movlw	-2
  7285   012676  CFE3 FFD9          	movff	plusw1,fsr2l
  7286   01267A  0EFF               	movlw	-1
  7287   01267C  CFE3 FFDA          	movff	plusw1,fsr2h
  7288   012680  50DF               	movf	indf2,w,c
  7289   012682  0A04               	xorlw	4
  7290   012684  A4D8               	btfss	status,2,c
  7291   012686  EF47  F093         	goto	u2911
  7292   01268A  EF49  F093         	goto	u2910
  7293   01268E                     u2911:
  7294   01268E  EF8C  F093         	goto	l5168
  7295   012692                     u2910:
  7296   012692                     
  7297                           ;carFunctions.c: 182:             {;carFunctions.c: 183:                 state = BRAKE;
  7298   012692  0E03               	movlw	3
  7299   012694  6E3A               	movwf	lightControl_Process@state^0,c
  7300   012696  EF8C  F093         	goto	l5168
  7301   01269A                     l5156:
  7302                           
  7303                           ;carFunctions.c: 187:             if(ev->id == E_CONTACT_OFF)
  7304                           ;stkvar	_ev @ sp[(0)+-2]
  7305   01269A  0EFE               	movlw	-2
  7306   01269C  CFE3 FFD9          	movff	plusw1,fsr2l
  7307   0126A0  0EFF               	movlw	-1
  7308   0126A2  CFE3 FFDA          	movff	plusw1,fsr2h
  7309   0126A6  50DF               	movf	indf2,w,c
  7310   0126A8  0A02               	xorlw	2
  7311   0126AA  A4D8               	btfss	status,2,c
  7312   0126AC  EF5A  F093         	goto	u2921
  7313   0126B0  EF5C  F093         	goto	u2920
  7314   0126B4                     u2921:
  7315   0126B4  EF5E  F093         	goto	l5160
  7316   0126B8                     u2920:
  7317   0126B8                     
  7318                           ;carFunctions.c: 188:             {;carFunctions.c: 189:                 state = OFF;
  7319   0126B8  0E01               	movlw	1
  7320   0126BA  6E3A               	movwf	lightControl_Process@state^0,c
  7321   0126BC                     l5160:
  7322                           
  7323                           ;carFunctions.c: 193:             if (ev->id == E_HIGH_BRAKE_RELASED){
  7324                           ;stkvar	_ev @ sp[(0)+-2]
  7325   0126BC  0EFE               	movlw	-2
  7326   0126BE  CFE3 FFD9          	movff	plusw1,fsr2l
  7327   0126C2  0EFF               	movlw	-1
  7328   0126C4  CFE3 FFDA          	movff	plusw1,fsr2h
  7329   0126C8  50DF               	movf	indf2,w,c
  7330   0126CA  0A0A               	xorlw	10
  7331   0126CC  A4D8               	btfss	status,2,c
  7332   0126CE  EF6B  F093         	goto	u2931
  7333   0126D2  EF6D  F093         	goto	u2930
  7334   0126D6                     u2931:
  7335   0126D6  EF8C  F093         	goto	l5168
  7336   0126DA                     u2930:
  7337   0126DA  EF25  F093         	goto	l5146
  7338   0126DE                     l5166:
  7339   0126DE  503A               	movf	lightControl_Process@state^0,w,c
  7340   0126E0  6E0B               	movwf	(btemp+10)^0,c
  7341   0126E2  6A0C               	clrf	(btemp+11)^0,c
  7342                           
  7343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7344                           ; Switch size 1, requested type "simple"
  7345                           ; Number of cases is 1, Range of values is 0 to 0
  7346                           ; switch strategies available:
  7347                           ; Name         Instructions Cycles
  7348                           ; simple_byte            4     3 (average)
  7349                           ;	Chosen strategy is simple_byte
  7350   0126E4  500C               	movf	(btemp+11)^0,w,c
  7351   0126E6  0A00               	xorlw	0	; case 0
  7352   0126E8  B4D8               	btfsc	status,2,c
  7353   0126EA  EF79  F093         	goto	l5598
  7354   0126EE  EF8C  F093         	goto	l5168
  7355   0126F2                     l5598:
  7356                           
  7357                           ; Switch size 1, requested type "simple"
  7358                           ; Number of cases is 4, Range of values is 0 to 3
  7359                           ; switch strategies available:
  7360                           ; Name         Instructions Cycles
  7361                           ; simple_byte           13     7 (average)
  7362                           ;	Chosen strategy is simple_byte
  7363   0126F2  500B               	movf	(btemp+10)^0,w,c
  7364   0126F4  0A00               	xorlw	0	; case 0
  7365   0126F6  B4D8               	btfsc	status,2,c
  7366   0126F8  EF03  F093         	goto	l5140
  7367   0126FC  0A01               	xorlw	1	; case 1
  7368   0126FE  B4D8               	btfsc	status,2,c
  7369   012700  EF16  F093         	goto	l5144
  7370   012704  0A03               	xorlw	3	; case 2
  7371   012706  B4D8               	btfsc	status,2,c
  7372   012708  EF29  F093         	goto	l5148
  7373   01270C  0A01               	xorlw	1	; case 3
  7374   01270E  B4D8               	btfsc	status,2,c
  7375   012710  EF4D  F093         	goto	l5156
  7376   012714  EF8C  F093         	goto	l5168
  7377   012718                     l5168:
  7378                           
  7379                           ;carFunctions.c: 203:    if(oldState == state)
  7380   012718  503A               	movf	lightControl_Process@state^0,w,c
  7381   01271A  1839               	xorwf	lightControl_Process@oldState^0,w,c
  7382   01271C  A4D8               	btfss	status,2,c
  7383   01271E  EF93  F093         	goto	u2941
  7384   012722  EF95  F093         	goto	u2940
  7385   012726                     u2941:
  7386   012726  EF97  F093         	goto	l1493
  7387   01272A                     u2940:
  7388   01272A  EFD2  F093         	goto	l1494
  7389   01272E                     l1493:
  7390                           
  7391                           ;carFunctions.c: 207:    oldState = state;
  7392   01272E  C03A  F039         	movff	lightControl_Process@state,lightControl_Process@oldState
  7393                           
  7394                           ;carFunctions.c: 208:    switch(state)
  7395   012732  EFB5  F093         	goto	l5180
  7396   012736                     l5172:
  7397                           
  7398                           ;carFunctions.c: 213:             lightContol_FrontLight(0);
  7399   012736  0E00               	movlw	0
  7400   012738  6EE6               	movwf	postinc1,c
  7401   01273A  EC30  F09F         	call	_lightContol_FrontLight	;wreg free
  7402                           
  7403                           ;carFunctions.c: 214:             lightContol_BackLight(0);
  7404   01273E  0E00               	movlw	0
  7405   012740  6EE6               	movwf	postinc1,c
  7406   012742  ECD6  F09E         	call	_lightContol_BackLight	;wreg free
  7407                           
  7408                           ;carFunctions.c: 215:             break;
  7409   012746  EFD2  F093         	goto	l1494
  7410   01274A                     l5174:
  7411                           
  7412                           ;carFunctions.c: 217:             lightContol_FrontLight(50);
  7413   01274A  0E32               	movlw	50
  7414   01274C  6EE6               	movwf	postinc1,c
  7415   01274E  EC30  F09F         	call	_lightContol_FrontLight	;wreg free
  7416                           
  7417                           ;carFunctions.c: 218:             lightContol_BackLight(50);
  7418   012752  0E32               	movlw	50
  7419   012754  6EE6               	movwf	postinc1,c
  7420   012756  ECD6  F09E         	call	_lightContol_BackLight	;wreg free
  7421                           
  7422                           ;carFunctions.c: 219:             break;
  7423   01275A  EFD2  F093         	goto	l1494
  7424   01275E                     l5176:
  7425                           
  7426                           ;carFunctions.c: 221:             lightContol_BackLight(100);
  7427   01275E  0E64               	movlw	100
  7428   012760  6EE6               	movwf	postinc1,c
  7429   012762  ECD6  F09E         	call	_lightContol_BackLight	;wreg free
  7430                           
  7431                           ;carFunctions.c: 222:             break;
  7432   012766  EFD2  F093         	goto	l1494
  7433   01276A                     l5180:
  7434   01276A  503A               	movf	lightControl_Process@state^0,w,c
  7435   01276C  6E0B               	movwf	(btemp+10)^0,c
  7436   01276E  6A0C               	clrf	(btemp+11)^0,c
  7437                           
  7438                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7439                           ; Switch size 1, requested type "simple"
  7440                           ; Number of cases is 1, Range of values is 0 to 0
  7441                           ; switch strategies available:
  7442                           ; Name         Instructions Cycles
  7443                           ; simple_byte            4     3 (average)
  7444                           ;	Chosen strategy is simple_byte
  7445   012770  500C               	movf	(btemp+11)^0,w,c
  7446   012772  0A00               	xorlw	0	; case 0
  7447   012774  B4D8               	btfsc	status,2,c
  7448   012776  EFBF  F093         	goto	l5600
  7449   01277A  EFD2  F093         	goto	l1494
  7450   01277E                     l5600:
  7451                           
  7452                           ; Switch size 1, requested type "simple"
  7453                           ; Number of cases is 4, Range of values is 0 to 3
  7454                           ; switch strategies available:
  7455                           ; Name         Instructions Cycles
  7456                           ; simple_byte           13     7 (average)
  7457                           ;	Chosen strategy is simple_byte
  7458   01277E  500B               	movf	(btemp+10)^0,w,c
  7459   012780  0A00               	xorlw	0	; case 0
  7460   012782  B4D8               	btfsc	status,2,c
  7461   012784  EFD2  F093         	goto	l1494
  7462   012788  0A01               	xorlw	1	; case 1
  7463   01278A  B4D8               	btfsc	status,2,c
  7464   01278C  EF9B  F093         	goto	l5172
  7465   012790  0A03               	xorlw	3	; case 2
  7466   012792  B4D8               	btfsc	status,2,c
  7467   012794  EFA5  F093         	goto	l5174
  7468   012798  0A01               	xorlw	1	; case 3
  7469   01279A  B4D8               	btfsc	status,2,c
  7470   01279C  EFAF  F093         	goto	l5176
  7471   0127A0  EFD2  F093         	goto	l1494
  7472   0127A4                     l1494:
  7473                           
  7474                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7475   0127A4  52E5               	movf	postdec1,f,c
  7476   0127A6  52E5               	movf	postdec1,f,c
  7477   0127A8  0012               	return		;funcret
  7478   0127AA                     __end_of_lightControl_Process:
  7479                           	callstack 0
  7480                           
  7481 ;; *************** function _motorControl_Process *****************
  7482 ;; Defined at:
  7483 ;;		line 38 in file "carFunctions.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;  ev              2  [STACK] PTR struct Event_
  7486 ;;		 -> ev(6), 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1  [STACK] _Bool 
  7491 ;; Registers used:
  7492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;Total ram usage:        0 bytes
  7503 ;; Hardware stack levels used: 1
  7504 ;; Hardware stack levels required when called: 13
  7505 ;; This function calls:
  7506 ;;		_lightContol_BackLight
  7507 ;;		_lightContol_FrontLight
  7508 ;;		_motorControl
  7509 ;; This function is called by:
  7510 ;;		_updateCarState
  7511 ;;		_XF_executeOnce
  7512 ;; This function uses a reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text20
  7516   012456                     __ptext20:
  7517                           	callstack 0
  7518   012456                     _motorControl_Process:
  7519                           	callstack 16
  7520   012456                     
  7521                           ;carFunctions.c: 48:     static MotorState state = INIT;;carFunctions.c: 49:     static 
      +                          MotorState oldState = INIT;;carFunctions.c: 53:     switch(state)
  7522   012456  EF9B  F092         	goto	l5114
  7523   01245A                     l5088:
  7524                           
  7525                           ;carFunctions.c: 56:             if(ev->id == E_INIT){
  7526                           ;stkvar	_ev @ sp[(0)+-2]
  7527   01245A  0EFE               	movlw	-2
  7528   01245C  CFE3 FFD9          	movff	plusw1,fsr2l
  7529   012460  0EFF               	movlw	-1
  7530   012462  CFE3 FFDA          	movff	plusw1,fsr2h
  7531   012466  50DF               	movf	indf2,w,c
  7532   012468  06E8               	decf	wreg,f,c
  7533   01246A  A4D8               	btfss	status,2,c
  7534   01246C  EF3A  F092         	goto	u2811
  7535   012470  EF3C  F092         	goto	u2810
  7536   012474                     u2811:
  7537   012474  EFB8  F092         	goto	l5116
  7538   012478                     u2810:
  7539   012478                     l5090:
  7540                           
  7541                           ;carFunctions.c: 57:                 state = OFF;
  7542   012478  0E01               	movlw	1
  7543   01247A  6E3E               	movwf	motorControl_Process@state^0,c
  7544   01247C  EFB8  F092         	goto	l5116
  7545   012480                     l5092:
  7546                           
  7547                           ;carFunctions.c: 61:             if(ev->id == E_CONTACT_ON)
  7548                           ;stkvar	_ev @ sp[(0)+-2]
  7549   012480  0EFE               	movlw	-2
  7550   012482  CFE3 FFD9          	movff	plusw1,fsr2l
  7551   012486  0EFF               	movlw	-1
  7552   012488  CFE3 FFDA          	movff	plusw1,fsr2h
  7553   01248C  50DF               	movf	indf2,w,c
  7554   01248E  0A03               	xorlw	3
  7555   012490  A4D8               	btfss	status,2,c
  7556   012492  EF4D  F092         	goto	u2821
  7557   012496  EF4F  F092         	goto	u2820
  7558   01249A                     u2821:
  7559   01249A  EFB8  F092         	goto	l5116
  7560   01249E                     u2820:
  7561   01249E                     
  7562                           ;carFunctions.c: 62:             {;carFunctions.c: 63:                 state = STANDBY;
  7563   01249E  0E04               	movlw	4
  7564   0124A0  6E3E               	movwf	motorControl_Process@state^0,c
  7565   0124A2  EFB8  F092         	goto	l5116
  7566   0124A6                     l5096:
  7567                           
  7568                           ;carFunctions.c: 68:             if(ev->id == E_CONTACT_OFF)
  7569                           ;stkvar	_ev @ sp[(0)+-2]
  7570   0124A6  0EFE               	movlw	-2
  7571   0124A8  CFE3 FFD9          	movff	plusw1,fsr2l
  7572   0124AC  0EFF               	movlw	-1
  7573   0124AE  CFE3 FFDA          	movff	plusw1,fsr2h
  7574   0124B2  50DF               	movf	indf2,w,c
  7575   0124B4  0A02               	xorlw	2
  7576   0124B6  A4D8               	btfss	status,2,c
  7577   0124B8  EF60  F092         	goto	u2831
  7578   0124BC  EF62  F092         	goto	u2830
  7579   0124C0                     u2831:
  7580   0124C0  EF66  F092         	goto	l5100
  7581   0124C4                     u2830:
  7582   0124C4                     
  7583                           ;carFunctions.c: 69:             {;carFunctions.c: 70:                 state = OFF;
  7584   0124C4  0E01               	movlw	1
  7585   0124C6  6E3E               	movwf	motorControl_Process@state^0,c
  7586                           
  7587                           ;carFunctions.c: 71:             }else if(ev->id == E_ACCELERATION_OFF)
  7588   0124C8  EF77  F092         	goto	l5104
  7589   0124CC                     l5100:
  7590                           
  7591                           ;stkvar	_ev @ sp[(0)+-2]
  7592   0124CC  0EFE               	movlw	-2
  7593   0124CE  CFE3 FFD9          	movff	plusw1,fsr2l
  7594   0124D2  0EFF               	movlw	-1
  7595   0124D4  CFE3 FFDA          	movff	plusw1,fsr2h
  7596   0124D8  50DF               	movf	indf2,w,c
  7597   0124DA  0A09               	xorlw	9
  7598   0124DC  A4D8               	btfss	status,2,c
  7599   0124DE  EF73  F092         	goto	u2841
  7600   0124E2  EF75  F092         	goto	u2840
  7601   0124E6                     u2841:
  7602   0124E6  EF77  F092         	goto	l5104
  7603   0124EA                     u2840:
  7604   0124EA                     
  7605                           ;carFunctions.c: 72:             {;carFunctions.c: 73:                 state = STANDBY;
  7606   0124EA  0E04               	movlw	4
  7607   0124EC  6E3E               	movwf	motorControl_Process@state^0,c
  7608   0124EE                     l5104:
  7609                           
  7610                           ;carFunctions.c: 76:             if(ev->id == E_CONTACT_OFF)
  7611                           ;stkvar	_ev @ sp[(0)+-2]
  7612   0124EE  0EFE               	movlw	-2
  7613   0124F0  CFE3 FFD9          	movff	plusw1,fsr2l
  7614   0124F4  0EFF               	movlw	-1
  7615   0124F6  CFE3 FFDA          	movff	plusw1,fsr2h
  7616   0124FA  50DF               	movf	indf2,w,c
  7617   0124FC  0A02               	xorlw	2
  7618   0124FE  A4D8               	btfss	status,2,c
  7619   012500  EF84  F092         	goto	u2851
  7620   012504  EF86  F092         	goto	u2850
  7621   012508                     u2851:
  7622   012508  EF88  F092         	goto	l5108
  7623   01250C                     u2850:
  7624   01250C  EF3C  F092         	goto	l5090
  7625   012510                     l5108:
  7626                           
  7627                           ;stkvar	_ev @ sp[(0)+-2]
  7628   012510  0EFE               	movlw	-2
  7629   012512  CFE3 FFD9          	movff	plusw1,fsr2l
  7630   012516  0EFF               	movlw	-1
  7631   012518  CFE3 FFDA          	movff	plusw1,fsr2h
  7632   01251C  50DF               	movf	indf2,w,c
  7633   01251E  0A08               	xorlw	8
  7634   012520  A4D8               	btfss	status,2,c
  7635   012522  EF95  F092         	goto	u2861
  7636   012526  EF97  F092         	goto	u2860
  7637   01252A                     u2861:
  7638   01252A  EFB8  F092         	goto	l5116
  7639   01252E                     u2860:
  7640   01252E                     
  7641                           ;carFunctions.c: 80:             {;carFunctions.c: 81:                 state = CRUISE;
  7642   01252E  0E02               	movlw	2
  7643   012530  6E3E               	movwf	motorControl_Process@state^0,c
  7644   012532  EFB8  F092         	goto	l5116
  7645   012536                     l5114:
  7646   012536  503E               	movf	motorControl_Process@state^0,w,c
  7647   012538  6E0B               	movwf	(btemp+10)^0,c
  7648   01253A  6A0C               	clrf	(btemp+11)^0,c
  7649                           
  7650                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7651                           ; Switch size 1, requested type "simple"
  7652                           ; Number of cases is 1, Range of values is 0 to 0
  7653                           ; switch strategies available:
  7654                           ; Name         Instructions Cycles
  7655                           ; simple_byte            4     3 (average)
  7656                           ;	Chosen strategy is simple_byte
  7657   01253C  500C               	movf	(btemp+11)^0,w,c
  7658   01253E  0A00               	xorlw	0	; case 0
  7659   012540  B4D8               	btfsc	status,2,c
  7660   012542  EFA5  F092         	goto	l5602
  7661   012546  EFB8  F092         	goto	l5116
  7662   01254A                     l5602:
  7663                           
  7664                           ; Switch size 1, requested type "simple"
  7665                           ; Number of cases is 4, Range of values is 0 to 4
  7666                           ; switch strategies available:
  7667                           ; Name         Instructions Cycles
  7668                           ; simple_byte           13     7 (average)
  7669                           ;	Chosen strategy is simple_byte
  7670   01254A  500B               	movf	(btemp+10)^0,w,c
  7671   01254C  0A00               	xorlw	0	; case 0
  7672   01254E  B4D8               	btfsc	status,2,c
  7673   012550  EF2D  F092         	goto	l5088
  7674   012554  0A01               	xorlw	1	; case 1
  7675   012556  B4D8               	btfsc	status,2,c
  7676   012558  EF40  F092         	goto	l5092
  7677   01255C  0A03               	xorlw	3	; case 2
  7678   01255E  B4D8               	btfsc	status,2,c
  7679   012560  EF53  F092         	goto	l5096
  7680   012564  0A06               	xorlw	6	; case 4
  7681   012566  B4D8               	btfsc	status,2,c
  7682   012568  EF77  F092         	goto	l5104
  7683   01256C  EFB8  F092         	goto	l5116
  7684   012570                     l5116:
  7685                           
  7686                           ;carFunctions.c: 88:     if(oldState == state)
  7687   012570  503E               	movf	motorControl_Process@state^0,w,c
  7688   012572  183D               	xorwf	motorControl_Process@oldState^0,w,c
  7689   012574  A4D8               	btfss	status,2,c
  7690   012576  EFBF  F092         	goto	u2871
  7691   01257A  EFC1  F092         	goto	u2870
  7692   01257E                     u2871:
  7693   01257E  EFC3  F092         	goto	l1447
  7694   012582                     u2870:
  7695   012582  EFFE  F092         	goto	l1448
  7696   012586                     l1447:
  7697                           
  7698                           ;carFunctions.c: 92:    oldState = state;
  7699   012586  C03E  F03D         	movff	motorControl_Process@state,motorControl_Process@oldState
  7700                           
  7701                           ;carFunctions.c: 95:    switch(state)
  7702   01258A  EFDD  F092         	goto	l5128
  7703   01258E                     l5120:
  7704                           
  7705                           ;carFunctions.c: 100:             motorControl(0);
  7706   01258E  0E00               	movlw	0
  7707   012590  6EE6               	movwf	postinc1,c
  7708   012592  EC7C  F09E         	call	_motorControl	;wreg free
  7709                           
  7710                           ;carFunctions.c: 101:             break;
  7711   012596  EFFE  F092         	goto	l1448
  7712   01259A                     l5122:
  7713                           
  7714                           ;carFunctions.c: 103:             lightContol_FrontLight(50);
  7715   01259A  0E32               	movlw	50
  7716   01259C  6EE6               	movwf	postinc1,c
  7717   01259E  EC30  F09F         	call	_lightContol_FrontLight	;wreg free
  7718                           
  7719                           ;carFunctions.c: 104:             lightContol_BackLight(50);
  7720   0125A2  0E32               	movlw	50
  7721   0125A4  6EE6               	movwf	postinc1,c
  7722   0125A6  ECD6  F09E         	call	_lightContol_BackLight	;wreg free
  7723                           
  7724                           ;carFunctions.c: 105:             break;
  7725   0125AA  EFFE  F092         	goto	l1448
  7726   0125AE                     l5124:
  7727                           
  7728                           ;carFunctions.c: 107:            motorControl(10);
  7729   0125AE  0E0A               	movlw	10
  7730   0125B0  6EE6               	movwf	postinc1,c
  7731   0125B2  EC7C  F09E         	call	_motorControl	;wreg free
  7732                           
  7733                           ;carFunctions.c: 108:            break;
  7734   0125B6  EFFE  F092         	goto	l1448
  7735   0125BA                     l5128:
  7736   0125BA  503E               	movf	motorControl_Process@state^0,w,c
  7737   0125BC  6E0B               	movwf	(btemp+10)^0,c
  7738   0125BE  6A0C               	clrf	(btemp+11)^0,c
  7739                           
  7740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7741                           ; Switch size 1, requested type "simple"
  7742                           ; Number of cases is 1, Range of values is 0 to 0
  7743                           ; switch strategies available:
  7744                           ; Name         Instructions Cycles
  7745                           ; simple_byte            4     3 (average)
  7746                           ;	Chosen strategy is simple_byte
  7747   0125C0  500C               	movf	(btemp+11)^0,w,c
  7748   0125C2  0A00               	xorlw	0	; case 0
  7749   0125C4  B4D8               	btfsc	status,2,c
  7750   0125C6  EFE7  F092         	goto	l5604
  7751   0125CA  EFFE  F092         	goto	l1448
  7752   0125CE                     l5604:
  7753                           
  7754                           ; Switch size 1, requested type "simple"
  7755                           ; Number of cases is 5, Range of values is 0 to 4
  7756                           ; switch strategies available:
  7757                           ; Name         Instructions Cycles
  7758                           ; simple_byte           16     9 (average)
  7759                           ;	Chosen strategy is simple_byte
  7760   0125CE  500B               	movf	(btemp+10)^0,w,c
  7761   0125D0  0A00               	xorlw	0	; case 0
  7762   0125D2  B4D8               	btfsc	status,2,c
  7763   0125D4  EFFE  F092         	goto	l1448
  7764   0125D8  0A01               	xorlw	1	; case 1
  7765   0125DA  B4D8               	btfsc	status,2,c
  7766   0125DC  EFC7  F092         	goto	l5120
  7767   0125E0  0A03               	xorlw	3	; case 2
  7768   0125E2  B4D8               	btfsc	status,2,c
  7769   0125E4  EFCD  F092         	goto	l5122
  7770   0125E8  0A01               	xorlw	1	; case 3
  7771   0125EA  B4D8               	btfsc	status,2,c
  7772   0125EC  EFFE  F092         	goto	l1448
  7773   0125F0  0A07               	xorlw	7	; case 4
  7774   0125F2  B4D8               	btfsc	status,2,c
  7775   0125F4  EFD7  F092         	goto	l5124
  7776   0125F8  EFFE  F092         	goto	l1448
  7777   0125FC                     l1448:
  7778                           
  7779                           ; _motorControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7780   0125FC  52E5               	movf	postdec1,f,c
  7781   0125FE  52E5               	movf	postdec1,f,c
  7782   012600  0012               	return		;funcret
  7783   012602                     __end_of_motorControl_Process:
  7784                           	callstack 0
  7785                           
  7786 ;; *************** function _motorControl *****************
  7787 ;; Defined at:
  7788 ;;		line 24 in file "carFunctions.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  percent         1  [STACK] unsigned char 
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7793 ;;  txdata          8  [STACK] unsigned char [8]
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1  [STACK] void 
  7796 ;; Registers used:
  7797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7798 ;; Tracked objects:
  7799 ;;		On entry : 0/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;Total ram usage:        0 bytes
  7808 ;; Hardware stack levels used: 1
  7809 ;; Hardware stack levels required when called: 12
  7810 ;; This function calls:
  7811 ;;		_CanSend
  7812 ;; This function is called by:
  7813 ;;		_motorControl_Process
  7814 ;; This function uses a reentrant model
  7815 ;;
  7816                           
  7817                           	psect	text21
  7818   013CF8                     __ptext21:
  7819                           	callstack 0
  7820   013CF8                     _motorControl:
  7821                           	callstack 0
  7822                           
  7823                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7824   013CF8  0E18               	movlw	24
  7825   013CFA  26E1               	addwf	fsr1l,f,c
  7826   013CFC  0E00               	movlw	0
  7827   013CFE  22E2               	addwfc	fsr1h,f,c
  7828   013D00                     
  7829                           ;carFunctions.c: 25:     static uint8_t lastPercent=0;;carFunctions.c: 26:     CAN_TX_MS
      +                          GOBJ txMsg={0};
  7830   013D00  EE20  F021         	lfsr	2,motorControl@F6643
  7831                           
  7832                           ;stkvar	_txMsg @ sp[(-24)+0]
  7833   013D04  0E10               	movlw	16
  7834   013D06  6E01               	movwf	btemp^0,c
  7835   013D08  0EE8               	movlw	-24
  7836   013D0A                     us233999:
  7837   013D0A  CFDE FFE3          	movff	postinc2,plusw1
  7838   013D0E  28E8               	incf	wreg,w,c
  7839   013D10  2E01               	decfsz	btemp^0,f,c
  7840   013D12  D7FB               	bra	us233999
  7841   013D14                     
  7842                           ;carFunctions.c: 27:     uint8_t txdata[8];;carFunctions.c: 28:         if(lastPercent!=
      +                           percent) {
  7843                           ;stkvar	_percent @ sp[(-24)+-1]
  7844   013D14  0EE7               	movlw	-25
  7845   013D16  50E3               	movf	plusw1,w,c
  7846   013D18  183F               	xorwf	motorControl@lastPercent^0,w,c
  7847   013D1A  B4D8               	btfsc	status,2,c
  7848   013D1C  EF92  F09E         	goto	u2341
  7849   013D20  EF94  F09E         	goto	u2340
  7850   013D24                     u2341:
  7851   013D24  EFD1  F09E         	goto	l1425
  7852   013D28                     u2340:
  7853   013D28                     
  7854                           ;carFunctions.c: 29:             lastPercent = percent;
  7855                           ;stkvar	_percent @ sp[(-24)+-1]
  7856   013D28  0EE7               	movlw	-25
  7857   013D2A  CFE3 F03F          	movff	plusw1,motorControl@lastPercent
  7858   013D2E                     
  7859                           ;carFunctions.c: 31:             txMsg.bF.id.ID = (0x112);
  7860   013D2E  0E12               	movlw	18
  7861   013D30  6E09               	movwf	(btemp+8)^0,c
  7862   013D32  0E01               	movlw	1
  7863   013D34  6E0A               	movwf	(btemp+9)^0,c
  7864   013D36  0E00               	movlw	0
  7865   013D38  6E0B               	movwf	(btemp+10)^0,c
  7866   013D3A  0E00               	movlw	0
  7867   013D3C  6E0C               	movwf	(btemp+11)^0,c
  7868                           
  7869                           ;stkvar	_txMsg @ sp[(-24)+0]
  7870   013D3E  0EE8               	movlw	-24
  7871   013D40  C009  FFE3         	movff	btemp+8,plusw1
  7872   013D44  0EE9               	movlw	-23
  7873   013D46  C00A  FFE3         	movff	btemp+9,plusw1
  7874   013D4A  0EEA               	movlw	-22
  7875   013D4C  C00B  FFE3         	movff	btemp+10,plusw1
  7876   013D50  0EEB               	movlw	-21
  7877   013D52  C00C  FFE3         	movff	btemp+11,plusw1
  7878   013D56                     
  7879                           ;carFunctions.c: 32:             txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7880                           ;stkvar	_txMsg @ sp[(-24)+0]
  7881   013D56  0EEE               	movlw	238
  7882   013D58  24E1               	addwf	fsr1l,w,c
  7883   013D5A  6ED9               	movwf	fsr2l,c
  7884   013D5C  0EFF               	movlw	255
  7885   013D5E  20E2               	addwfc	fsr1h,w,c
  7886   013D60  6EDA               	movwf	fsr2h,c
  7887   013D62  50DF               	movf	223,w,c
  7888   013D64  0BF0               	andlw	-16
  7889   013D66  0901               	iorlw	1
  7890   013D68  6EDF               	movwf	223,c
  7891   013D6A                     
  7892                           ;carFunctions.c: 33:             txdata[0] = percent;
  7893                           ;stkvar	_percent @ sp[(-24)+-1]
  7894                           ;stkvar	_txdata @ sp[(-24)+16]
  7895   013D6A  0EE7               	movlw	-25
  7896   013D6C  CFE3 F001          	movff	plusw1,btemp
  7897   013D70  0EF8               	movlw	-8
  7898   013D72  C001  FFE3         	movff	btemp,plusw1
  7899   013D76                     
  7900                           ;carFunctions.c: 34:         CanSend(&txMsg,txdata);
  7901                           ;stkvar	_txdata @ sp[(-24)+16]
  7902   013D76  0EF8               	movlw	248
  7903   013D78  24E1               	addwf	fsr1l,w,c
  7904   013D7A  6E01               	movwf	btemp^0,c
  7905   013D7C  0EFF               	movlw	255
  7906   013D7E  20E2               	addwfc	fsr1h,w,c
  7907   013D80  6E02               	movwf	(btemp+1)^0,c
  7908   013D82  C001  FFE6         	movff	btemp,postinc1
  7909   013D86  C002  FFE6         	movff	btemp+1,postinc1
  7910                           
  7911                           ;stkvar	_txMsg @ sp[(-26)+0]
  7912   013D8A  0EE6               	movlw	230
  7913   013D8C  24E1               	addwf	fsr1l,w,c
  7914   013D8E  6E01               	movwf	btemp^0,c
  7915   013D90  0EFF               	movlw	255
  7916   013D92  20E2               	addwfc	fsr1h,w,c
  7917   013D94  6E02               	movwf	(btemp+1)^0,c
  7918   013D96  C001  FFE6         	movff	btemp,postinc1
  7919   013D9A  C002  FFE6         	movff	btemp+1,postinc1
  7920   013D9E  ECDE  F09F         	call	_CanSend	;wreg free
  7921   013DA2                     l1425:
  7922                           
  7923                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
  7924   013DA2  0EE7               	movlw	231
  7925   013DA4  26E1               	addwf	fsr1l,f,c
  7926   013DA6  0EFF               	movlw	255
  7927   013DA8  22E2               	addwfc	fsr1h,f,c
  7928   013DAA  0012               	return		;funcret
  7929   013DAC                     __end_of_motorControl:
  7930                           	callstack 0
  7931                           
  7932 ;; *************** function _lightContol_FrontLight *****************
  7933 ;; Defined at:
  7934 ;;		line 120 in file "carFunctions.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  light           1  [STACK] unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7939 ;;  txdata          8  [STACK] unsigned char [8]
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1  [STACK] void 
  7942 ;; Registers used:
  7943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;Total ram usage:        0 bytes
  7954 ;; Hardware stack levels used: 1
  7955 ;; Hardware stack levels required when called: 12
  7956 ;; This function calls:
  7957 ;;		_CanSend
  7958 ;; This function is called by:
  7959 ;;		_motorControl_Process
  7960 ;;		_lightControl_Process
  7961 ;; This function uses a reentrant model
  7962 ;;
  7963                           
  7964                           	psect	text22
  7965   013E60                     __ptext22:
  7966                           	callstack 0
  7967   013E60                     _lightContol_FrontLight:
  7968                           	callstack 0
  7969                           
  7970                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7971   013E60  0E18               	movlw	24
  7972   013E62  26E1               	addwf	fsr1l,f,c
  7973   013E64  0E00               	movlw	0
  7974   013E66  22E2               	addwfc	fsr1h,f,c
  7975   013E68                     
  7976                           ;carFunctions.c: 120: void lightContol_FrontLight(uint8_t light);carFunctions.c: 121: {;
      +                          carFunctions.c: 123: static uint8_t lastLight=0;;carFunctions.c: 124: CAN_TX_MSGOBJ txMs
      +                          g={0};
  7977   013E68  EE20  F08B         	lfsr	2,lightContol_FrontLight@F6660
  7978                           
  7979                           ;stkvar	_txMsg @ sp[(-24)+0]
  7980   013E6C  0E10               	movlw	16
  7981   013E6E  6E01               	movwf	btemp^0,c
  7982   013E70  0EE8               	movlw	-24
  7983   013E72                     us235999:
  7984   013E72  CFDE FFE3          	movff	postinc2,plusw1
  7985   013E76  28E8               	incf	wreg,w,c
  7986   013E78  2E01               	decfsz	btemp^0,f,c
  7987   013E7A  D7FB               	bra	us235999
  7988   013E7C                     
  7989                           ;carFunctions.c: 125: uint8_t txdata[8];;carFunctions.c: 126:     if(lastLight!= light) 
      +                          {
  7990                           ;stkvar	_light @ sp[(-24)+-1]
  7991   013E7C  0EE7               	movlw	-25
  7992   013E7E  50E3               	movf	plusw1,w,c
  7993   013E80  183C               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  7994   013E82  B4D8               	btfsc	status,2,c
  7995   013E84  EF46  F09F         	goto	u2361
  7996   013E88  EF48  F09F         	goto	u2360
  7997   013E8C                     u2361:
  7998   013E8C  EF82  F09F         	goto	l1464
  7999   013E90                     u2360:
  8000   013E90                     
  8001                           ;carFunctions.c: 127:         lastLight = light;
  8002                           ;stkvar	_light @ sp[(-24)+-1]
  8003   013E90  0EE7               	movlw	-25
  8004   013E92  CFE3 F03C          	movff	plusw1,lightContol_FrontLight@lastLight
  8005   013E96                     
  8006                           ;carFunctions.c: 129:         txMsg.bF.id.ID = (0x19);
  8007   013E96  0E19               	movlw	25
  8008   013E98  6E09               	movwf	(btemp+8)^0,c
  8009   013E9A  6A0A               	clrf	(btemp+9)^0,c
  8010   013E9C  6A0B               	clrf	(btemp+10)^0,c
  8011   013E9E  6A0C               	clrf	(btemp+11)^0,c
  8012                           
  8013                           ;stkvar	_txMsg @ sp[(-24)+0]
  8014   013EA0  0EE8               	movlw	-24
  8015   013EA2  C009  FFE3         	movff	btemp+8,plusw1
  8016   013EA6  0EE9               	movlw	-23
  8017   013EA8  C00A  FFE3         	movff	btemp+9,plusw1
  8018   013EAC  0EEA               	movlw	-22
  8019   013EAE  C00B  FFE3         	movff	btemp+10,plusw1
  8020   013EB2  0EEB               	movlw	-21
  8021   013EB4  C00C  FFE3         	movff	btemp+11,plusw1
  8022   013EB8                     
  8023                           ;carFunctions.c: 130:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8024                           ;stkvar	_txMsg @ sp[(-24)+0]
  8025   013EB8  0EEE               	movlw	238
  8026   013EBA  24E1               	addwf	fsr1l,w,c
  8027   013EBC  6ED9               	movwf	fsr2l,c
  8028   013EBE  0EFF               	movlw	255
  8029   013EC0  20E2               	addwfc	fsr1h,w,c
  8030   013EC2  6EDA               	movwf	fsr2h,c
  8031   013EC4  50DF               	movf	223,w,c
  8032   013EC6  0BF0               	andlw	-16
  8033   013EC8  0901               	iorlw	1
  8034   013ECA  6EDF               	movwf	223,c
  8035   013ECC                     
  8036                           ;carFunctions.c: 131:         txdata[0] = light;
  8037                           ;stkvar	_light @ sp[(-24)+-1]
  8038                           ;stkvar	_txdata @ sp[(-24)+16]
  8039   013ECC  0EE7               	movlw	-25
  8040   013ECE  CFE3 F001          	movff	plusw1,btemp
  8041   013ED2  0EF8               	movlw	-8
  8042   013ED4  C001  FFE3         	movff	btemp,plusw1
  8043   013ED8                     
  8044                           ;carFunctions.c: 132:         CanSend(&txMsg,txdata);
  8045                           ;stkvar	_txdata @ sp[(-24)+16]
  8046   013ED8  0EF8               	movlw	248
  8047   013EDA  24E1               	addwf	fsr1l,w,c
  8048   013EDC  6E01               	movwf	btemp^0,c
  8049   013EDE  0EFF               	movlw	255
  8050   013EE0  20E2               	addwfc	fsr1h,w,c
  8051   013EE2  6E02               	movwf	(btemp+1)^0,c
  8052   013EE4  C001  FFE6         	movff	btemp,postinc1
  8053   013EE8  C002  FFE6         	movff	btemp+1,postinc1
  8054                           
  8055                           ;stkvar	_txMsg @ sp[(-26)+0]
  8056   013EEC  0EE6               	movlw	230
  8057   013EEE  24E1               	addwf	fsr1l,w,c
  8058   013EF0  6E01               	movwf	btemp^0,c
  8059   013EF2  0EFF               	movlw	255
  8060   013EF4  20E2               	addwfc	fsr1h,w,c
  8061   013EF6  6E02               	movwf	(btemp+1)^0,c
  8062   013EF8  C001  FFE6         	movff	btemp,postinc1
  8063   013EFC  C002  FFE6         	movff	btemp+1,postinc1
  8064   013F00  ECDE  F09F         	call	_CanSend	;wreg free
  8065   013F04                     l1464:
  8066                           
  8067                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  8068   013F04  0EE7               	movlw	231
  8069   013F06  26E1               	addwf	fsr1l,f,c
  8070   013F08  0EFF               	movlw	255
  8071   013F0A  22E2               	addwfc	fsr1h,f,c
  8072   013F0C  0012               	return		;funcret
  8073   013F0E                     __end_of_lightContol_FrontLight:
  8074                           	callstack 0
  8075                           
  8076 ;; *************** function _lightContol_BackLight *****************
  8077 ;; Defined at:
  8078 ;;		line 135 in file "carFunctions.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  light           1  [STACK] unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8083 ;;  txdata          8  [STACK] unsigned char [8]
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1  [STACK] void 
  8086 ;; Registers used:
  8087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;Total ram usage:        0 bytes
  8098 ;; Hardware stack levels used: 1
  8099 ;; Hardware stack levels required when called: 12
  8100 ;; This function calls:
  8101 ;;		_CanSend
  8102 ;; This function is called by:
  8103 ;;		_motorControl_Process
  8104 ;;		_lightControl_Process
  8105 ;; This function uses a reentrant model
  8106 ;;
  8107                           
  8108                           	psect	text23
  8109   013DAC                     __ptext23:
  8110                           	callstack 0
  8111   013DAC                     _lightContol_BackLight:
  8112                           	callstack 0
  8113                           
  8114                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8115   013DAC  0E18               	movlw	24
  8116   013DAE  26E1               	addwf	fsr1l,f,c
  8117   013DB0  0E00               	movlw	0
  8118   013DB2  22E2               	addwfc	fsr1h,f,c
  8119   013DB4                     
  8120                           ;carFunctions.c: 135: void lightContol_BackLight(uint8_t light);carFunctions.c: 136: {;c
      +                          arFunctions.c: 137:     static uint8_t lastLight=0;;carFunctions.c: 138:     CAN_TX_MSGO
      +                          BJ txMsg={0};
  8121   013DB4  EE20  F07B         	lfsr	2,lightContol_BackLight@F6666
  8122                           
  8123                           ;stkvar	_txMsg @ sp[(-24)+0]
  8124   013DB8  0E10               	movlw	16
  8125   013DBA  6E01               	movwf	btemp^0,c
  8126   013DBC  0EE8               	movlw	-24
  8127   013DBE                     us237999:
  8128   013DBE  CFDE FFE3          	movff	postinc2,plusw1
  8129   013DC2  28E8               	incf	wreg,w,c
  8130   013DC4  2E01               	decfsz	btemp^0,f,c
  8131   013DC6  D7FB               	bra	us237999
  8132   013DC8                     
  8133                           ;carFunctions.c: 139:     uint8_t txdata[8];;carFunctions.c: 140:     if(lastLight!= lig
      +                          ht) {
  8134                           ;stkvar	_light @ sp[(-24)+-1]
  8135   013DC8  0EE7               	movlw	-25
  8136   013DCA  50E3               	movf	plusw1,w,c
  8137   013DCC  183B               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8138   013DCE  B4D8               	btfsc	status,2,c
  8139   013DD0  EFEC  F09E         	goto	u2381
  8140   013DD4  EFEE  F09E         	goto	u2380
  8141   013DD8                     u2381:
  8142   013DD8  EF2B  F09F         	goto	l1472
  8143   013DDC                     u2380:
  8144   013DDC                     
  8145                           ;carFunctions.c: 141:         lastLight = light;
  8146                           ;stkvar	_light @ sp[(-24)+-1]
  8147   013DDC  0EE7               	movlw	-25
  8148   013DDE  CFE3 F03B          	movff	plusw1,lightContol_BackLight@lastLight
  8149   013DE2                     
  8150                           ;carFunctions.c: 143:         txMsg.bF.id.ID = (0x119);
  8151   013DE2  0E19               	movlw	25
  8152   013DE4  6E09               	movwf	(btemp+8)^0,c
  8153   013DE6  0E01               	movlw	1
  8154   013DE8  6E0A               	movwf	(btemp+9)^0,c
  8155   013DEA  0E00               	movlw	0
  8156   013DEC  6E0B               	movwf	(btemp+10)^0,c
  8157   013DEE  0E00               	movlw	0
  8158   013DF0  6E0C               	movwf	(btemp+11)^0,c
  8159                           
  8160                           ;stkvar	_txMsg @ sp[(-24)+0]
  8161   013DF2  0EE8               	movlw	-24
  8162   013DF4  C009  FFE3         	movff	btemp+8,plusw1
  8163   013DF8  0EE9               	movlw	-23
  8164   013DFA  C00A  FFE3         	movff	btemp+9,plusw1
  8165   013DFE  0EEA               	movlw	-22
  8166   013E00  C00B  FFE3         	movff	btemp+10,plusw1
  8167   013E04  0EEB               	movlw	-21
  8168   013E06  C00C  FFE3         	movff	btemp+11,plusw1
  8169   013E0A                     
  8170                           ;carFunctions.c: 144:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8171                           ;stkvar	_txMsg @ sp[(-24)+0]
  8172   013E0A  0EEE               	movlw	238
  8173   013E0C  24E1               	addwf	fsr1l,w,c
  8174   013E0E  6ED9               	movwf	fsr2l,c
  8175   013E10  0EFF               	movlw	255
  8176   013E12  20E2               	addwfc	fsr1h,w,c
  8177   013E14  6EDA               	movwf	fsr2h,c
  8178   013E16  50DF               	movf	223,w,c
  8179   013E18  0BF0               	andlw	-16
  8180   013E1A  0901               	iorlw	1
  8181   013E1C  6EDF               	movwf	223,c
  8182   013E1E                     
  8183                           ;carFunctions.c: 145:         txdata[0] = light;
  8184                           ;stkvar	_light @ sp[(-24)+-1]
  8185                           ;stkvar	_txdata @ sp[(-24)+16]
  8186   013E1E  0EE7               	movlw	-25
  8187   013E20  CFE3 F001          	movff	plusw1,btemp
  8188   013E24  0EF8               	movlw	-8
  8189   013E26  C001  FFE3         	movff	btemp,plusw1
  8190   013E2A                     
  8191                           ;carFunctions.c: 146:         CanSend(&txMsg,txdata);
  8192                           ;stkvar	_txdata @ sp[(-24)+16]
  8193   013E2A  0EF8               	movlw	248
  8194   013E2C  24E1               	addwf	fsr1l,w,c
  8195   013E2E  6E01               	movwf	btemp^0,c
  8196   013E30  0EFF               	movlw	255
  8197   013E32  20E2               	addwfc	fsr1h,w,c
  8198   013E34  6E02               	movwf	(btemp+1)^0,c
  8199   013E36  C001  FFE6         	movff	btemp,postinc1
  8200   013E3A  C002  FFE6         	movff	btemp+1,postinc1
  8201                           
  8202                           ;stkvar	_txMsg @ sp[(-26)+0]
  8203   013E3E  0EE6               	movlw	230
  8204   013E40  24E1               	addwf	fsr1l,w,c
  8205   013E42  6E01               	movwf	btemp^0,c
  8206   013E44  0EFF               	movlw	255
  8207   013E46  20E2               	addwfc	fsr1h,w,c
  8208   013E48  6E02               	movwf	(btemp+1)^0,c
  8209   013E4A  C001  FFE6         	movff	btemp,postinc1
  8210   013E4E  C002  FFE6         	movff	btemp+1,postinc1
  8211   013E52  ECDE  F09F         	call	_CanSend	;wreg free
  8212   013E56                     l1472:
  8213                           
  8214                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8215   013E56  0EE7               	movlw	231
  8216   013E58  26E1               	addwf	fsr1l,f,c
  8217   013E5A  0EFF               	movlw	255
  8218   013E5C  22E2               	addwfc	fsr1h,f,c
  8219   013E5E  0012               	return		;funcret
  8220   013E60                     __end_of_lightContol_BackLight:
  8221                           	callstack 0
  8222                           
  8223 ;; *************** function _CanSend *****************
  8224 ;; Defined at:
  8225 ;;		line 217 in file "can/can.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8228 ;;		 -> txMsg(16), 
  8229 ;;  txd             2  [STACK] PTR unsigned char 
  8230 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  txFlags         1  [STACK] enum E5580
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1  [STACK] char 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        0 bytes
  8247 ;; Hardware stack levels used: 1
  8248 ;; Hardware stack levels required when called: 11
  8249 ;; This function calls:
  8250 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8251 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8252 ;; This function is called by:
  8253 ;;		_motorControl
  8254 ;;		_lightContol_FrontLight
  8255 ;;		_lightContol_BackLight
  8256 ;; This function uses a reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text24
  8260   013FBC                     __ptext24:
  8261                           	callstack 0
  8262   013FBC                     _CanSend:
  8263                           	callstack 0
  8264                           
  8265                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8266   013FBC  52E6               	movf	postinc1,f,c
  8267   013FBE                     
  8268                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8269                           ;stkvar	_txObj @ sp[(-1)+-2]
  8270   013FBE  0EFD               	movlw	-3
  8271   013FC0  CFE3 F00B          	movff	plusw1,btemp+10
  8272   013FC4  0EFE               	movlw	-2
  8273   013FC6  CFE3 F00C          	movff	plusw1,btemp+11
  8274   013FCA  0E08               	movlw	8
  8275   013FCC  240B               	addwf	(btemp+10)^0,w,c
  8276   013FCE  6ED9               	movwf	fsr2l,c
  8277   013FD0  0E00               	movlw	0
  8278   013FD2  200C               	addwfc	(btemp+11)^0,w,c
  8279   013FD4  6EDA               	movwf	fsr2h,c
  8280   013FD6  0E01               	movlw	1
  8281   013FD8  6EDE               	movwf	postinc2,c
  8282   013FDA  0E00               	movlw	0
  8283   013FDC  6EDE               	movwf	postinc2,c
  8284   013FDE  0E00               	movlw	0
  8285   013FE0  6EDE               	movwf	postinc2,c
  8286   013FE2  0E00               	movlw	0
  8287   013FE4  6EDD               	movwf	postdec2,c
  8288   013FE6                     
  8289                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8290                           ;stkvar	_txFlags @ sp[(-1)+0]
  8291   013FE6  0EFF               	movlw	255
  8292   013FE8  24E1               	addwf	fsr1l,w,c
  8293   013FEA  6E01               	movwf	btemp^0,c
  8294   013FEC  0EFF               	movlw	255
  8295   013FEE  20E2               	addwfc	fsr1h,w,c
  8296   013FF0  6E02               	movwf	(btemp+1)^0,c
  8297   013FF2  C001  FFE6         	movff	btemp,postinc1
  8298   013FF6  C002  FFE6         	movff	btemp+1,postinc1
  8299   013FFA  0E01               	movlw	1
  8300   013FFC  6EE6               	movwf	postinc1,c
  8301   013FFE  EC85  F0A0         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8302   014002                     
  8303                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8304                           ;stkvar	_txFlags @ sp[(-1)+0]
  8305   014002  0EFF               	movlw	-1
  8306   014004  A0E3               	btfss	plusw1,0,c
  8307   014006  EF07  F0A0         	goto	u2011
  8308   01400A  EF09  F0A0         	goto	u2010
  8309   01400E                     u2011:
  8310   01400E  EF2E  F0A0         	goto	l158
  8311   014012                     u2010:
  8312   014012                     
  8313                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8314   014012  0E01               	movlw	1
  8315   014014  6EE6               	movwf	postinc1,c
  8316                           
  8317                           ;stkvar	_txObj @ sp[(-2)+-2]
  8318   014016  0EFC               	movlw	-4
  8319   014018  CFE3 F00B          	movff	plusw1,btemp+10
  8320   01401C  0EFD               	movlw	-3
  8321   01401E  CFE3 F00C          	movff	plusw1,btemp+11
  8322   014022  0E06               	movlw	6
  8323   014024  240B               	addwf	(btemp+10)^0,w,c
  8324   014026  6ED9               	movwf	fsr2l,c
  8325   014028  0E00               	movlw	0
  8326   01402A  200C               	addwfc	(btemp+11)^0,w,c
  8327   01402C  6EDA               	movwf	fsr2h,c
  8328   01402E  50DF               	movf	223,w,c
  8329   014030  0B0F               	andlw	15
  8330   014032  6E0C               	movwf	(btemp+11)^0,c
  8331   014034  C00C  FFE6         	movff	btemp+11,postinc1
  8332   014038  0E00               	movlw	0
  8333   01403A  6EE6               	movwf	postinc1,c
  8334   01403C  6EE6               	movwf	postinc1,c
  8335   01403E  6EE6               	movwf	postinc1,c
  8336                           
  8337                           ;stkvar	_txd @ sp[(-6)+-4]
  8338   014040  0EF6               	movlw	-10
  8339   014042  CFE3 FFE6          	movff	plusw1,postinc1
  8340   014046  CFE3 FFE6          	movff	plusw1,postinc1
  8341                           
  8342                           ;stkvar	_txObj @ sp[(-8)+-2]
  8343   01404A  0EF6               	movlw	-10
  8344   01404C  CFE3 FFE6          	movff	plusw1,postinc1
  8345   014050  CFE3 FFE6          	movff	plusw1,postinc1
  8346   014054  0E01               	movlw	1
  8347   014056  6EE6               	movwf	postinc1,c
  8348   014058  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8349   01405C                     l158:
  8350                           
  8351                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8352   01405C  0EFB               	movlw	251
  8353   01405E  26E1               	addwf	fsr1l,f,c
  8354   014060  0EFF               	movlw	255
  8355   014062  22E2               	addwfc	fsr1h,f,c
  8356   014064  0012               	return		;funcret
  8357   014066                     __end_of_CanSend:
  8358                           	callstack 0
  8359                           
  8360 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8361 ;; Defined at:
  8362 ;;		line 706 in file "can/can.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  channel         1  [STACK] enum E5287
  8365 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8366 ;;		 -> txMsg(16), 
  8367 ;;  txd             2  [STACK] PTR unsigned char 
  8368 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8369 ;;  txdNumBytes     4  [STACK] unsigned long 
  8370 ;;  flush           1  [STACK] _Bool 
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  temp32          4  [STACK] unsigned long 
  8373 ;;  txBuffer       76  [STACK] unsigned char [76]
  8374 ;;  fifoReg        12  [STACK] unsigned long [3]
  8375 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8376 ;;  a               4  [STACK] unsigned long 
  8377 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8378 ;;  dataBytesInO    4  [STACK] unsigned long 
  8379 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8380 ;;  n               2  [STACK] unsigned short 
  8381 ;;  spiTransferE    1  [STACK] char 
  8382 ;;  i               1  [STACK] unsigned char 
  8383 ;;  j               1  [STACK] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1  [STACK] char 
  8386 ;; Registers used:
  8387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;Total ram usage:        0 bytes
  8398 ;; Hardware stack levels used: 1
  8399 ;; Hardware stack levels required when called: 10
  8400 ;; This function calls:
  8401 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8402 ;;		_DRV_CANFDSPI_ReadWordArray
  8403 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8404 ;;		_DRV_CANFDSPI_WriteByteArray
  8405 ;; This function is called by:
  8406 ;;		_CanSend
  8407 ;; This function uses a reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text25
  8411   010000                     __ptext25:
  8412                           	callstack 0
  8413   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8414                           	callstack 0
  8415                           
  8416                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8417   010000  0E72               	movlw	114
  8418   010002  26E1               	addwf	fsr1l,f,c
  8419   010004  0E00               	movlw	0
  8420   010006  22E2               	addwfc	fsr1h,f,c
  8421   010008                     
  8422                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8423                           ;stkvar	_channel @ sp[(-114)+-1]
  8424   010008  0E8D               	movlw	-115
  8425   01000A  50E3               	movf	plusw1,w,c
  8426   01000C  0D0C               	mullw	12
  8427   01000E  0E50               	movlw	80
  8428   010010  26F3               	addwf	243,f,c
  8429   010012  0E00               	movlw	0
  8430   010014  22F4               	addwfc	244,f,c
  8431                           
  8432                           ;stkvar	_a @ sp[(-114)+97]
  8433   010016  0EEF               	movlw	-17
  8434   010018  CFF3 FFE3          	movff	prodl,plusw1
  8435   01001C  0EF0               	movlw	-16
  8436   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8437   010022  0EF1               	movlw	-15
  8438   010024  6AE3               	clrf	plusw1,c
  8439   010026  0EF2               	movlw	-14
  8440   010028  6AE3               	clrf	plusw1,c
  8441   01002A                     
  8442                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8443   01002A  0E03               	movlw	3
  8444   01002C  6EE6               	movwf	postinc1,c
  8445   01002E  0E00               	movlw	0
  8446   010030  6EE6               	movwf	postinc1,c
  8447                           
  8448                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8449   010032  0EDC               	movlw	220
  8450   010034  24E1               	addwf	fsr1l,w,c
  8451   010036  6E01               	movwf	btemp^0,c
  8452   010038  0EFF               	movlw	255
  8453   01003A  20E2               	addwfc	fsr1h,w,c
  8454   01003C  6E02               	movwf	(btemp+1)^0,c
  8455   01003E  C001  FFE6         	movff	btemp,postinc1
  8456   010042  C002  FFE6         	movff	btemp+1,postinc1
  8457                           
  8458                           ;stkvar	_a @ sp[(-118)+97]
  8459   010046  0EEB               	movlw	-21
  8460   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8461   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8462   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8463                           
  8464                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8465   010054  0EFD               	movlw	-3
  8466   010056  C001  FFE3         	movff	btemp,plusw1
  8467   01005A                     
  8468                           ;can/can.c: 722:     if (spiTransferError) {
  8469                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8470   01005A  0EFD               	movlw	-3
  8471   01005C  50E3               	movf	plusw1,w,c
  8472   01005E  B4D8               	btfsc	status,2,c
  8473   010060  EF34  F080         	goto	u1721
  8474   010064  EF36  F080         	goto	u1720
  8475   010068                     u1721:
  8476   010068  EF3A  F080         	goto	l4144
  8477   01006C                     u1720:
  8478   01006C                     
  8479                           ;can/can.c: 723:         return -1;
  8480   01006C  0EFF               	movlw	255
  8481   01006E  6E01               	movwf	btemp^0,c
  8482   010070  EFA1  F083         	goto	l264
  8483   010074                     l4144:
  8484                           
  8485                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8486                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8487   010074  0EDE               	movlw	-34
  8488   010076  CFE3 F009          	movff	plusw1,btemp+8
  8489   01007A  0EDF               	movlw	-33
  8490   01007C  CFE3 F00A          	movff	plusw1,btemp+9
  8491   010080  0EE0               	movlw	-32
  8492   010082  CFE3 F00B          	movff	plusw1,btemp+10
  8493   010086  0EE1               	movlw	-31
  8494   010088  CFE3 F00C          	movff	plusw1,btemp+11
  8495                           
  8496                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8497   01008C  0EEA               	movlw	-22
  8498   01008E  C009  FFE3         	movff	btemp+8,plusw1
  8499   010092  0EEB               	movlw	-21
  8500   010094  C00A  FFE3         	movff	btemp+9,plusw1
  8501   010098  0EEC               	movlw	-20
  8502   01009A  C00B  FFE3         	movff	btemp+10,plusw1
  8503   01009E  0EED               	movlw	-19
  8504   0100A0  C00C  FFE3         	movff	btemp+11,plusw1
  8505   0100A4                     
  8506                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8507                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8508   0100A4  50E1               	movf	fsr1l,w,c
  8509   0100A6  0FEA               	addlw	-22
  8510   0100A8  6ED9               	movwf	fsr2l,c
  8511   0100AA  50E2               	movf	fsr1h,w,c
  8512   0100AC  6EDA               	movwf	fsr2h,c
  8513   0100AE  0EFF               	movlw	255
  8514   0100B0  22DA               	addwfc	fsr2h,f,c
  8515   0100B2  BEDF               	btfsc	indf2,7,c
  8516   0100B4  EF5E  F080         	goto	u1731
  8517   0100B8  EF60  F080         	goto	u1730
  8518   0100BC                     u1731:
  8519   0100BC  EF64  F080         	goto	l4152
  8520   0100C0                     u1730:
  8521   0100C0                     
  8522                           ;can/can.c: 729:         return -2;
  8523   0100C0  0EFE               	movlw	254
  8524   0100C2  6E01               	movwf	btemp^0,c
  8525   0100C4  EFA1  F083         	goto	l264
  8526   0100C8                     l4152:
  8527                           
  8528                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8529                           ;stkvar	_txObj @ sp[(-114)+-3]
  8530   0100C8  0E8B               	movlw	-117
  8531   0100CA  CFE3 F00B          	movff	plusw1,btemp+10
  8532   0100CE  0E8C               	movlw	-116
  8533   0100D0  CFE3 F00C          	movff	plusw1,btemp+11
  8534   0100D4  0E06               	movlw	6
  8535   0100D6  240B               	addwf	(btemp+10)^0,w,c
  8536   0100D8  6ED9               	movwf	fsr2l,c
  8537   0100DA  0E00               	movlw	0
  8538   0100DC  200C               	addwfc	(btemp+11)^0,w,c
  8539   0100DE  6EDA               	movwf	fsr2h,c
  8540   0100E0  50DF               	movf	223,w,c
  8541   0100E2  0B0F               	andlw	15
  8542   0100E4  6EE6               	movwf	postinc1,c
  8543   0100E6  EC3C  F091         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  8544                           
  8545                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8546   0100EA  0EF7               	movlw	-9
  8547   0100EC  C001  FFE3         	movff	btemp,plusw1
  8548   0100F0  0EF8               	movlw	-8
  8549   0100F2  C002  FFE3         	movff	btemp+1,plusw1
  8550   0100F6  0EF9               	movlw	-7
  8551   0100F8  C003  FFE3         	movff	btemp+2,plusw1
  8552   0100FC  0EFA               	movlw	-6
  8553   0100FE  C004  FFE3         	movff	btemp+3,plusw1
  8554   010102                     
  8555                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  8556                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8557                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8558   010102  50E1               	movf	fsr1l,w,c
  8559   010104  0FF7               	addlw	-9
  8560   010106  6ED9               	movwf	fsr2l,c
  8561   010108  50E2               	movf	fsr1h,w,c
  8562   01010A  6EDA               	movwf	fsr2h,c
  8563   01010C  0EFF               	movlw	255
  8564   01010E  22DA               	addwfc	fsr2h,f,c
  8565   010110  0E85               	movlw	-123
  8566   010112  50E3               	movf	plusw1,w,c
  8567   010114  5CDE               	subwf	postinc2,w,c
  8568   010116  0E86               	movlw	-122
  8569   010118  50E3               	movf	plusw1,w,c
  8570   01011A  58DE               	subwfb	postinc2,w,c
  8571   01011C  0E87               	movlw	-121
  8572   01011E  50E3               	movf	plusw1,w,c
  8573   010120  58DE               	subwfb	postinc2,w,c
  8574   010122  0E88               	movlw	-120
  8575   010124  50E3               	movf	plusw1,w,c
  8576   010126  58DE               	subwfb	postinc2,w,c
  8577   010128  B0D8               	btfsc	status,0,c
  8578   01012A  EF99  F080         	goto	u1741
  8579   01012E  EF9B  F080         	goto	u1740
  8580   010132                     u1741:
  8581   010132  EF9F  F080         	goto	l4160
  8582   010136                     u1740:
  8583   010136                     
  8584                           ;can/can.c: 735:         return -3;
  8585   010136  0EFD               	movlw	253
  8586   010138  6E01               	movwf	btemp^0,c
  8587   01013A  EFA1  F083         	goto	l264
  8588   01013E                     l4160:
  8589                           
  8590                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  8591                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8592   01013E  0EE6               	movlw	230
  8593   010140  24E1               	addwf	fsr1l,w,c
  8594   010142  6ED9               	movwf	fsr2l,c
  8595   010144  0EFF               	movlw	255
  8596   010146  20E2               	addwfc	fsr1h,w,c
  8597   010148  6EDA               	movwf	fsr2h,c
  8598   01014A  CFDE F009          	movff	postinc2,btemp+8
  8599   01014E  CFDE F00A          	movff	postinc2,btemp+9
  8600   010152  CFDE F00B          	movff	postinc2,btemp+10
  8601   010156  CFDE F00C          	movff	postinc2,btemp+11
  8602                           
  8603                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8604   01015A  0EF3               	movlw	-13
  8605   01015C  C009  FFE3         	movff	btemp+8,plusw1
  8606   010160  0EF4               	movlw	-12
  8607   010162  C00A  FFE3         	movff	btemp+9,plusw1
  8608   010166  0EF5               	movlw	-11
  8609   010168  C00B  FFE3         	movff	btemp+10,plusw1
  8610   01016C  0EF6               	movlw	-10
  8611   01016E  C00C  FFE3         	movff	btemp+11,plusw1
  8612   010172                     
  8613                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  8614                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8615   010172  0EF3               	movlw	-13
  8616   010174  CFE3 F009          	movff	plusw1,btemp+8
  8617   010178  0EF4               	movlw	-12
  8618   01017A  CFE3 F00A          	movff	plusw1,btemp+9
  8619   01017E  0EF5               	movlw	-11
  8620   010180  CFE3 F00B          	movff	plusw1,btemp+10
  8621   010184  0EF6               	movlw	-10
  8622   010186  CFE3 F00C          	movff	plusw1,btemp+11
  8623                           
  8624                           ;stkvar	_a @ sp[(-114)+97]
  8625   01018A  0EEF               	movlw	-17
  8626   01018C  C009  FFE3         	movff	btemp+8,plusw1
  8627   010190  0EF0               	movlw	-16
  8628   010192  C00A  FFE3         	movff	btemp+9,plusw1
  8629   010196  0EF1               	movlw	-15
  8630   010198  C00B  FFE3         	movff	btemp+10,plusw1
  8631   01019C  0EF2               	movlw	-14
  8632   01019E  C00C  FFE3         	movff	btemp+11,plusw1
  8633   0101A2                     
  8634                           ;can/can.c: 748:     a += 0x400;
  8635                           ;stkvar	_a @ sp[(-114)+97]
  8636   0101A2  50E1               	movf	fsr1l,w,c
  8637   0101A4  0FEF               	addlw	-17
  8638   0101A6  6ED9               	movwf	fsr2l,c
  8639   0101A8  50E2               	movf	fsr1h,w,c
  8640   0101AA  6EDA               	movwf	fsr2h,c
  8641   0101AC  0EFF               	movlw	255
  8642   0101AE  22DA               	addwfc	fsr2h,f,c
  8643   0101B0  0E00               	movlw	0
  8644   0101B2  26DE               	addwf	postinc2,f,c
  8645   0101B4  0E04               	movlw	4
  8646   0101B6  22DE               	addwfc	postinc2,f,c
  8647   0101B8  0E00               	movlw	0
  8648   0101BA  22DE               	addwfc	postinc2,f,c
  8649   0101BC  0E00               	movlw	0
  8650   0101BE  22DE               	addwfc	postinc2,f,c
  8651   0101C0                     
  8652                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  8653                           ;stkvar	_txObj @ sp[(-114)+-3]
  8654   0101C0  0E8B               	movlw	-117
  8655   0101C2  CFE3 F00B          	movff	plusw1,btemp+10
  8656   0101C6  0E8C               	movlw	-116
  8657   0101C8  CFE3 F00C          	movff	plusw1,btemp+11
  8658   0101CC  0E06               	movlw	6
  8659   0101CE  240B               	addwf	(btemp+10)^0,w,c
  8660   0101D0  6ED9               	movwf	fsr2l,c
  8661   0101D2  0E00               	movlw	0
  8662   0101D4  200C               	addwfc	(btemp+11)^0,w,c
  8663   0101D6  6EDA               	movwf	fsr2h,c
  8664   0101D8  B8DF               	btfsc	indf2,4,c
  8665   0101DA  EFF1  F080         	goto	u1751
  8666   0101DE  EFF3  F080         	goto	u1750
  8667   0101E2                     u1751:
  8668   0101E2  EF75  F081         	goto	l4176
  8669   0101E6                     u1750:
  8670   0101E6                     
  8671                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  8672                           ;stkvar	_txObj @ sp[(-114)+-3]
  8673   0101E6  0E8B               	movlw	-117
  8674   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8675   0101EC  0E8C               	movlw	-116
  8676   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8677   0101F2  50DF               	movf	indf2,w,c
  8678   0101F4  6E0C               	movwf	(btemp+11)^0,c
  8679                           
  8680                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8681   0101F6  0E92               	movlw	-110
  8682   0101F8  C00C  FFE3         	movff	btemp+11,plusw1
  8683   0101FC                     
  8684                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  8685                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8686   0101FC  0E93               	movlw	147
  8687   0101FE  24E1               	addwf	fsr1l,w,c
  8688   010200  6ED9               	movwf	fsr2l,c
  8689   010202  0EFF               	movlw	255
  8690   010204  20E2               	addwfc	fsr1h,w,c
  8691   010206  6EDA               	movwf	fsr2h,c
  8692                           
  8693                           ;stkvar	_txObj @ sp[(-114)+-3]
  8694   010208  0E8B               	movlw	-117
  8695   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  8696   01020E  0E8C               	movlw	-116
  8697   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  8698   010214  CFEE F009          	movff	postinc0,btemp+8
  8699   010218  CFEE F00A          	movff	postinc0,btemp+9
  8700   01021C  CFEE F00B          	movff	postinc0,btemp+10
  8701   010220  CFEE F00C          	movff	postinc0,btemp+11
  8702   010224  C00A  F009         	movff	btemp+9,btemp+8
  8703   010228  C00B  F00A         	movff	btemp+10,btemp+9
  8704   01022C  C00C  F00B         	movff	btemp+11,btemp+10
  8705   010230  6A0C               	clrf	(btemp+11)^0,c
  8706   010232  5009               	movf	(btemp+8)^0,w,c
  8707   010234  6EDF               	movwf	indf2,c
  8708   010236                     
  8709                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  8710                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8711   010236  0E94               	movlw	148
  8712   010238  24E1               	addwf	fsr1l,w,c
  8713   01023A  6ED9               	movwf	fsr2l,c
  8714   01023C  0EFF               	movlw	255
  8715   01023E  20E2               	addwfc	fsr1h,w,c
  8716   010240  6EDA               	movwf	fsr2h,c
  8717                           
  8718                           ;stkvar	_txObj @ sp[(-114)+-3]
  8719   010242  0E8B               	movlw	-117
  8720   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  8721   010248  0E8C               	movlw	-116
  8722   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  8723   01024E  CFEE F009          	movff	postinc0,btemp+8
  8724   010252  CFEE F00A          	movff	postinc0,btemp+9
  8725   010256  CFEE F00B          	movff	postinc0,btemp+10
  8726   01025A  CFEE F00C          	movff	postinc0,btemp+11
  8727   01025E  0E11               	movlw	17
  8728   010260  EF37  F081         	goto	u1760
  8729   010264                     u1765:
  8730   010264  90D8               	bcf	status,0,c
  8731   010266  320C               	rrcf	(btemp+11)^0,f,c
  8732   010268  320B               	rrcf	(btemp+10)^0,f,c
  8733   01026A  320A               	rrcf	(btemp+9)^0,f,c
  8734   01026C  3209               	rrcf	(btemp+8)^0,f,c
  8735   01026E                     u1760:
  8736   01026E  2EE8               	decfsz	wreg,f,c
  8737   010270  EF32  F081         	goto	u1765
  8738   010274  5009               	movf	(btemp+8)^0,w,c
  8739   010276  6EDF               	movwf	indf2,c
  8740   010278                     
  8741                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  8742                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8743   010278  0E95               	movlw	149
  8744   01027A  24E1               	addwf	fsr1l,w,c
  8745   01027C  6ED9               	movwf	fsr2l,c
  8746   01027E  0EFF               	movlw	255
  8747   010280  20E2               	addwfc	fsr1h,w,c
  8748   010282  6EDA               	movwf	fsr2h,c
  8749                           
  8750                           ;stkvar	_txObj @ sp[(-114)+-3]
  8751   010284  0E8B               	movlw	-117
  8752   010286  CFE3 F00B          	movff	plusw1,btemp+10
  8753   01028A  0E8C               	movlw	-116
  8754   01028C  CFE3 F00C          	movff	plusw1,btemp+11
  8755   010290  0E04               	movlw	4
  8756   010292  240B               	addwf	(btemp+10)^0,w,c
  8757   010294  6EE9               	movwf	fsr0l,c
  8758   010296  0E00               	movlw	0
  8759   010298  200C               	addwfc	(btemp+11)^0,w,c
  8760   01029A  6EEA               	movwf	fsr0h,c
  8761   01029C  50EF               	movf	indf0,w,c
  8762   01029E  6E0C               	movwf	(btemp+11)^0,c
  8763   0102A0  0E05               	movlw	5
  8764   0102A2  6E01               	movwf	btemp^0,c
  8765   0102A4                     u1775:
  8766   0102A4  90D8               	bcf	status,0,c
  8767   0102A6  360C               	rlcf	(btemp+11)^0,f,c
  8768   0102A8  2E01               	decfsz	btemp^0,f,c
  8769   0102AA  EF52  F081         	goto	u1775
  8770                           
  8771                           ;stkvar	_txObj @ sp[(-114)+-3]
  8772   0102AE  0E8B               	movlw	-117
  8773   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8774   0102B4  0E8C               	movlw	-116
  8775   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8776   0102BA  CFEE F005          	movff	postinc0,btemp+4
  8777   0102BE  CFEE F006          	movff	postinc0,btemp+5
  8778   0102C2  CFEE F007          	movff	postinc0,btemp+6
  8779   0102C6  CFEE F008          	movff	postinc0,btemp+7
  8780   0102CA  0E19               	movlw	25
  8781   0102CC  EF6D  F081         	goto	u1780
  8782   0102D0                     u1785:
  8783   0102D0  90D8               	bcf	status,0,c
  8784   0102D2  3208               	rrcf	(btemp+7)^0,f,c
  8785   0102D4  3207               	rrcf	(btemp+6)^0,f,c
  8786   0102D6  3206               	rrcf	(btemp+5)^0,f,c
  8787   0102D8  3205               	rrcf	(btemp+4)^0,f,c
  8788   0102DA                     u1780:
  8789   0102DA  2EE8               	decfsz	wreg,f,c
  8790   0102DC  EF68  F081         	goto	u1785
  8791   0102E0  5005               	movf	(btemp+4)^0,w,c
  8792   0102E2  100C               	iorwf	(btemp+11)^0,w,c
  8793   0102E4  6EDF               	movwf	indf2,c
  8794                           
  8795                           ;can/can.c: 770:     }
  8796   0102E6  EF24  F082         	goto	l4188
  8797   0102EA                     l4176:
  8798                           
  8799                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8800                           ;stkvar	_txObj @ sp[(-114)+-3]
  8801   0102EA  0E8B               	movlw	-117
  8802   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8803   0102F0  0E8C               	movlw	-116
  8804   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8805   0102F6  CFDE F009          	movff	postinc2,btemp+8
  8806   0102FA  CFDE F00A          	movff	postinc2,btemp+9
  8807   0102FE  CFDE F00B          	movff	postinc2,btemp+10
  8808   010302  CFDE F00C          	movff	postinc2,btemp+11
  8809   010306  0E13               	movlw	19
  8810   010308  EF8B  F081         	goto	u1790
  8811   01030C                     u1795:
  8812   01030C  90D8               	bcf	status,0,c
  8813   01030E  320C               	rrcf	(btemp+11)^0,f,c
  8814   010310  320B               	rrcf	(btemp+10)^0,f,c
  8815   010312  320A               	rrcf	(btemp+9)^0,f,c
  8816   010314  3209               	rrcf	(btemp+8)^0,f,c
  8817   010316                     u1790:
  8818   010316  2EE8               	decfsz	wreg,f,c
  8819   010318  EF86  F081         	goto	u1795
  8820   01031C  0EFF               	movlw	255
  8821   01031E  1409               	andwf	(btemp+8)^0,w,c
  8822   010320  6E05               	movwf	(btemp+4)^0,c
  8823   010322  0E07               	movlw	7
  8824   010324  140A               	andwf	(btemp+9)^0,w,c
  8825   010326  6E06               	movwf	(btemp+5)^0,c
  8826   010328  0E00               	movlw	0
  8827   01032A  140B               	andwf	(btemp+10)^0,w,c
  8828   01032C  6E07               	movwf	(btemp+6)^0,c
  8829   01032E  0E00               	movlw	0
  8830   010330  140C               	andwf	(btemp+11)^0,w,c
  8831   010332  6E08               	movwf	(btemp+7)^0,c
  8832                           
  8833                           ;stkvar	_txObj @ sp[(-114)+-3]
  8834   010334  0E8B               	movlw	-117
  8835   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8836   01033A  0E8C               	movlw	-116
  8837   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  8838   010340  0EFF               	movlw	255
  8839   010342  14DE               	andwf	postinc2,w,c
  8840   010344  6E09               	movwf	(btemp+8)^0,c
  8841   010346  0EFF               	movlw	255
  8842   010348  14DE               	andwf	postinc2,w,c
  8843   01034A  6E0A               	movwf	(btemp+9)^0,c
  8844   01034C  0E03               	movlw	3
  8845   01034E  14DE               	andwf	postinc2,w,c
  8846   010350  6E0B               	movwf	(btemp+10)^0,c
  8847   010352  0E00               	movlw	0
  8848   010354  14DE               	andwf	postinc2,w,c
  8849   010356  6E0C               	movwf	(btemp+11)^0,c
  8850   010358  0E0B               	movlw	11
  8851   01035A                     u1805:
  8852   01035A  90D8               	bcf	status,0,c
  8853   01035C  3609               	rlcf	(btemp+8)^0,f,c
  8854   01035E  360A               	rlcf	(btemp+9)^0,f,c
  8855   010360  360B               	rlcf	(btemp+10)^0,f,c
  8856   010362  360C               	rlcf	(btemp+11)^0,f,c
  8857   010364  2EE8               	decfsz	wreg,f,c
  8858   010366  EFAD  F081         	goto	u1805
  8859   01036A  5005               	movf	(btemp+4)^0,w,c
  8860   01036C  1009               	iorwf	(btemp+8)^0,w,c
  8861   01036E  6E01               	movwf	btemp^0,c
  8862   010370  5006               	movf	(btemp+5)^0,w,c
  8863   010372  100A               	iorwf	(btemp+9)^0,w,c
  8864   010374  6E02               	movwf	(btemp+1)^0,c
  8865   010376  5007               	movf	(btemp+6)^0,w,c
  8866   010378  100B               	iorwf	(btemp+10)^0,w,c
  8867   01037A  6E03               	movwf	(btemp+2)^0,c
  8868   01037C  5008               	movf	(btemp+7)^0,w,c
  8869   01037E  100C               	iorwf	(btemp+11)^0,w,c
  8870   010380  6E04               	movwf	(btemp+3)^0,c
  8871                           
  8872                           ;stkvar	_temp32 @ sp[(-114)+0]
  8873   010382  0E8E               	movlw	-114
  8874   010384  C001  FFE3         	movff	btemp,plusw1
  8875   010388  0E8F               	movlw	-113
  8876   01038A  C002  FFE3         	movff	btemp+1,plusw1
  8877   01038E  0E90               	movlw	-112
  8878   010390  C003  FFE3         	movff	btemp+2,plusw1
  8879   010394  0E91               	movlw	-111
  8880   010396  C004  FFE3         	movff	btemp+3,plusw1
  8881   01039A                     
  8882                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  8883                           ;stkvar	_temp32 @ sp[(-114)+0]
  8884   01039A  50E1               	movf	fsr1l,w,c
  8885   01039C  0F8E               	addlw	-114
  8886   01039E  6ED9               	movwf	fsr2l,c
  8887   0103A0  50E2               	movf	fsr1h,w,c
  8888   0103A2  6EDA               	movwf	fsr2h,c
  8889   0103A4  0EFF               	movlw	255
  8890   0103A6  22DA               	addwfc	fsr2h,f,c
  8891   0103A8  0EFF               	movlw	255
  8892   0103AA  16DE               	andwf	postinc2,f,c
  8893   0103AC  0EFF               	movlw	255
  8894   0103AE  16DE               	andwf	postinc2,f,c
  8895   0103B0  0EFF               	movlw	255
  8896   0103B2  16DE               	andwf	postinc2,f,c
  8897   0103B4  0E1F               	movlw	31
  8898   0103B6  16DE               	andwf	postinc2,f,c
  8899   0103B8                     
  8900                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  8901                           ;stkvar	_temp32 @ sp[(-114)+0]
  8902                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8903   0103B8  0E8E               	movlw	-114
  8904   0103BA  CFE3 F001          	movff	plusw1,btemp
  8905   0103BE  0E92               	movlw	-110
  8906   0103C0  C001  FFE3         	movff	btemp,plusw1
  8907   0103C4                     
  8908                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  8909                           ;stkvar	_temp32 @ sp[(-114)+0]
  8910   0103C4  0E8F               	movlw	143
  8911   0103C6  24E1               	addwf	fsr1l,w,c
  8912   0103C8  6ED9               	movwf	fsr2l,c
  8913   0103CA  0EFF               	movlw	255
  8914   0103CC  20E2               	addwfc	fsr1h,w,c
  8915   0103CE  6EDA               	movwf	fsr2h,c
  8916                           
  8917                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8918   0103D0  0E93               	movlw	147
  8919   0103D2  24E1               	addwf	fsr1l,w,c
  8920   0103D4  6EE9               	movwf	fsr0l,c
  8921   0103D6  0EFF               	movlw	255
  8922   0103D8  20E2               	addwfc	fsr1h,w,c
  8923   0103DA  6EEA               	movwf	fsr0h,c
  8924   0103DC  CFDF FFEF          	movff	indf2,indf0
  8925   0103E0                     
  8926                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  8927                           ;stkvar	_temp32 @ sp[(-114)+0]
  8928   0103E0  0E90               	movlw	144
  8929   0103E2  24E1               	addwf	fsr1l,w,c
  8930   0103E4  6ED9               	movwf	fsr2l,c
  8931   0103E6  0EFF               	movlw	255
  8932   0103E8  20E2               	addwfc	fsr1h,w,c
  8933   0103EA  6EDA               	movwf	fsr2h,c
  8934                           
  8935                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8936   0103EC  0E94               	movlw	148
  8937   0103EE  24E1               	addwf	fsr1l,w,c
  8938   0103F0  6EE9               	movwf	fsr0l,c
  8939   0103F2  0EFF               	movlw	255
  8940   0103F4  20E2               	addwfc	fsr1h,w,c
  8941   0103F6  6EEA               	movwf	fsr0h,c
  8942   0103F8  CFDF FFEF          	movff	indf2,indf0
  8943   0103FC                     
  8944                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  8945                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8946   0103FC  0E95               	movlw	149
  8947   0103FE  24E1               	addwf	fsr1l,w,c
  8948   010400  6ED9               	movwf	fsr2l,c
  8949   010402  0EFF               	movlw	255
  8950   010404  20E2               	addwfc	fsr1h,w,c
  8951   010406  6EDA               	movwf	fsr2h,c
  8952                           
  8953                           ;stkvar	_temp32 @ sp[(-114)+0]
  8954   010408  0E91               	movlw	145
  8955   01040A  24E1               	addwf	fsr1l,w,c
  8956   01040C  6EE9               	movwf	fsr0l,c
  8957   01040E  0EFF               	movlw	255
  8958   010410  20E2               	addwfc	fsr1h,w,c
  8959   010412  6EEA               	movwf	fsr0h,c
  8960   010414  50EF               	movf	indf0,w,c
  8961   010416  6E0C               	movwf	(btemp+11)^0,c
  8962                           
  8963                           ;stkvar	_txObj @ sp[(-114)+-3]
  8964   010418  0E8B               	movlw	-117
  8965   01041A  CFE3 F009          	movff	plusw1,btemp+8
  8966   01041E  0E8C               	movlw	-116
  8967   010420  CFE3 F00A          	movff	plusw1,btemp+9
  8968   010424  0E04               	movlw	4
  8969   010426  2409               	addwf	(btemp+8)^0,w,c
  8970   010428  6EE9               	movwf	fsr0l,c
  8971   01042A  0E00               	movlw	0
  8972   01042C  200A               	addwfc	(btemp+9)^0,w,c
  8973   01042E  6EEA               	movwf	fsr0h,c
  8974   010430  50EF               	movf	indf0,w,c
  8975   010432  6E0B               	movwf	(btemp+10)^0,c
  8976   010434  0E05               	movlw	5
  8977   010436  6E01               	movwf	btemp^0,c
  8978   010438                     u1815:
  8979   010438  90D8               	bcf	status,0,c
  8980   01043A  360B               	rlcf	(btemp+10)^0,f,c
  8981   01043C  2E01               	decfsz	btemp^0,f,c
  8982   01043E  EF1C  F082         	goto	u1815
  8983   010442  500B               	movf	(btemp+10)^0,w,c
  8984   010444  100C               	iorwf	(btemp+11)^0,w,c
  8985   010446  6EDF               	movwf	indf2,c
  8986   010448                     l4188:
  8987                           
  8988                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  8989                           ;stkvar	_txObj @ sp[(-114)+-3]
  8990   010448  0E8B               	movlw	-117
  8991   01044A  CFE3 F00B          	movff	plusw1,btemp+10
  8992   01044E  0E8C               	movlw	-116
  8993   010450  CFE3 F00C          	movff	plusw1,btemp+11
  8994   010454  0E06               	movlw	6
  8995   010456  240B               	addwf	(btemp+10)^0,w,c
  8996   010458  6ED9               	movwf	fsr2l,c
  8997   01045A  0E00               	movlw	0
  8998   01045C  200C               	addwfc	(btemp+11)^0,w,c
  8999   01045E  6EDA               	movwf	fsr2h,c
  9000                           
  9001                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9002   010460  0E96               	movlw	150
  9003   010462  24E1               	addwf	fsr1l,w,c
  9004   010464  6EE9               	movwf	fsr0l,c
  9005   010466  0EFF               	movlw	255
  9006   010468  20E2               	addwfc	fsr1h,w,c
  9007   01046A  6EEA               	movwf	fsr0h,c
  9008   01046C  CFDF FFEF          	movff	indf2,indf0
  9009   010470                     
  9010                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  9011                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9012   010470  0E97               	movlw	151
  9013   010472  24E1               	addwf	fsr1l,w,c
  9014   010474  6ED9               	movwf	fsr2l,c
  9015   010476  0EFF               	movlw	255
  9016   010478  20E2               	addwfc	fsr1h,w,c
  9017   01047A  6EDA               	movwf	fsr2h,c
  9018                           
  9019                           ;stkvar	_txObj @ sp[(-114)+-3]
  9020   01047C  0E8B               	movlw	-117
  9021   01047E  CFE3 F00B          	movff	plusw1,btemp+10
  9022   010482  0E8C               	movlw	-116
  9023   010484  CFE3 F00C          	movff	plusw1,btemp+11
  9024   010488  0E07               	movlw	7
  9025   01048A  240B               	addwf	(btemp+10)^0,w,c
  9026   01048C  6EE9               	movwf	fsr0l,c
  9027   01048E  0E00               	movlw	0
  9028   010490  200C               	addwfc	(btemp+11)^0,w,c
  9029   010492  6EEA               	movwf	fsr0h,c
  9030   010494  50EF               	movf	indf0,w,c
  9031   010496  6E0C               	movwf	(btemp+11)^0,c
  9032                           
  9033                           ;stkvar	_txObj @ sp[(-114)+-3]
  9034   010498  0E8B               	movlw	-117
  9035   01049A  CFE3 F009          	movff	plusw1,btemp+8
  9036   01049E  0E8C               	movlw	-116
  9037   0104A0  CFE3 F00A          	movff	plusw1,btemp+9
  9038   0104A4  0E08               	movlw	8
  9039   0104A6  2409               	addwf	(btemp+8)^0,w,c
  9040   0104A8  6EE9               	movwf	fsr0l,c
  9041   0104AA  0E00               	movlw	0
  9042   0104AC  200A               	addwfc	(btemp+9)^0,w,c
  9043   0104AE  6EEA               	movwf	fsr0h,c
  9044   0104B0  50EF               	movf	indf0,w,c
  9045   0104B2  6E0B               	movwf	(btemp+10)^0,c
  9046   0104B4  90D8               	bcf	status,0,c
  9047   0104B6  340B               	rlcf	(btemp+10)^0,w,c
  9048   0104B8  100C               	iorwf	(btemp+11)^0,w,c
  9049   0104BA  6EDF               	movwf	indf2,c
  9050   0104BC                     
  9051                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  9052                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9053   0104BC  0E98               	movlw	152
  9054   0104BE  24E1               	addwf	fsr1l,w,c
  9055   0104C0  6ED9               	movwf	fsr2l,c
  9056   0104C2  0EFF               	movlw	255
  9057   0104C4  20E2               	addwfc	fsr1h,w,c
  9058   0104C6  6EDA               	movwf	fsr2h,c
  9059                           
  9060                           ;stkvar	_txObj @ sp[(-114)+-3]
  9061   0104C8  0E8B               	movlw	-117
  9062   0104CA  CFE3 F00B          	movff	plusw1,btemp+10
  9063   0104CE  0E8C               	movlw	-116
  9064   0104D0  CFE3 F00C          	movff	plusw1,btemp+11
  9065   0104D4  0E08               	movlw	8
  9066   0104D6  240B               	addwf	(btemp+10)^0,w,c
  9067   0104D8  6EE9               	movwf	fsr0l,c
  9068   0104DA  0E00               	movlw	0
  9069   0104DC  200C               	addwfc	(btemp+11)^0,w,c
  9070   0104DE  6EEA               	movwf	fsr0h,c
  9071   0104E0  CFEE F009          	movff	postinc0,btemp+8
  9072   0104E4  CFEE F00A          	movff	postinc0,btemp+9
  9073   0104E8  CFEE F00B          	movff	postinc0,btemp+10
  9074   0104EC  CFEE F00C          	movff	postinc0,btemp+11
  9075   0104F0  0E08               	movlw	8
  9076   0104F2  EF80  F082         	goto	u1820
  9077   0104F6                     u1825:
  9078   0104F6  90D8               	bcf	status,0,c
  9079   0104F8  320C               	rrcf	(btemp+11)^0,f,c
  9080   0104FA  320B               	rrcf	(btemp+10)^0,f,c
  9081   0104FC  320A               	rrcf	(btemp+9)^0,f,c
  9082   0104FE  3209               	rrcf	(btemp+8)^0,f,c
  9083   010500                     u1820:
  9084   010500  2EE8               	decfsz	wreg,f,c
  9085   010502  EF7B  F082         	goto	u1825
  9086   010506  5009               	movf	(btemp+8)^0,w,c
  9087   010508  6EDF               	movwf	indf2,c
  9088   01050A                     
  9089                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  9090                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9091   01050A  0E99               	movlw	153
  9092   01050C  24E1               	addwf	fsr1l,w,c
  9093   01050E  6ED9               	movwf	fsr2l,c
  9094   010510  0EFF               	movlw	255
  9095   010512  20E2               	addwfc	fsr1h,w,c
  9096   010514  6EDA               	movwf	fsr2h,c
  9097                           
  9098                           ;stkvar	_txObj @ sp[(-114)+-3]
  9099   010516  0E8B               	movlw	-117
  9100   010518  CFE3 F00B          	movff	plusw1,btemp+10
  9101   01051C  0E8C               	movlw	-116
  9102   01051E  CFE3 F00C          	movff	plusw1,btemp+11
  9103   010522  0E08               	movlw	8
  9104   010524  240B               	addwf	(btemp+10)^0,w,c
  9105   010526  6EE9               	movwf	fsr0l,c
  9106   010528  0E00               	movlw	0
  9107   01052A  200C               	addwfc	(btemp+11)^0,w,c
  9108   01052C  6EEA               	movwf	fsr0h,c
  9109   01052E  CFEE F009          	movff	postinc0,btemp+8
  9110   010532  CFEE F00A          	movff	postinc0,btemp+9
  9111   010536  CFEE F00B          	movff	postinc0,btemp+10
  9112   01053A  CFEE F00C          	movff	postinc0,btemp+11
  9113   01053E  0E10               	movlw	16
  9114   010540  EFA7  F082         	goto	u1830
  9115   010544                     u1835:
  9116   010544  90D8               	bcf	status,0,c
  9117   010546  320C               	rrcf	(btemp+11)^0,f,c
  9118   010548  320B               	rrcf	(btemp+10)^0,f,c
  9119   01054A  320A               	rrcf	(btemp+9)^0,f,c
  9120   01054C  3209               	rrcf	(btemp+8)^0,f,c
  9121   01054E                     u1830:
  9122   01054E  2EE8               	decfsz	wreg,f,c
  9123   010550  EFA2  F082         	goto	u1835
  9124   010554  5009               	movf	(btemp+8)^0,w,c
  9125   010556  6EDF               	movwf	indf2,c
  9126   010558                     
  9127                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9128                           ;stkvar	_i @ sp[(-114)+112]
  9129   010558  0EFE               	movlw	-2
  9130   01055A  6AE3               	clrf	plusw1,c
  9131   01055C  EFD7  F082         	goto	l4202
  9132   010560                     l4198:
  9133                           
  9134                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9135                           ;stkvar	_i @ sp[(-114)+112]
  9136   010560  0EFE               	movlw	-2
  9137   010562  CFE3 F00C          	movff	plusw1,btemp+11
  9138                           
  9139                           ;stkvar	_txd @ sp[(-114)+-5]
  9140   010566  0E89               	movlw	-119
  9141   010568  CFE3 F009          	movff	plusw1,btemp+8
  9142   01056C  0E8A               	movlw	-118
  9143   01056E  CFE3 F00A          	movff	plusw1,btemp+9
  9144   010572  500C               	movf	(btemp+11)^0,w,c
  9145   010574  2409               	addwf	(btemp+8)^0,w,c
  9146   010576  6ED9               	movwf	fsr2l,c
  9147   010578  0E00               	movlw	0
  9148   01057A  200A               	addwfc	(btemp+9)^0,w,c
  9149   01057C  6EDA               	movwf	fsr2h,c
  9150                           
  9151                           ;stkvar	_i @ sp[(-114)+112]
  9152   01057E  0EFE               	movlw	-2
  9153   010580  50E3               	movf	plusw1,w,c
  9154   010582  6E0B               	movwf	(btemp+10)^0,c
  9155   010584  6A0C               	clrf	(btemp+11)^0,c
  9156   010586  0E08               	movlw	8
  9157   010588  260B               	addwf	(btemp+10)^0,f,c
  9158   01058A  0E00               	movlw	0
  9159   01058C  220C               	addwfc	(btemp+11)^0,f,c
  9160                           
  9161                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9162   01058E  0E92               	movlw	146
  9163   010590  24E1               	addwf	fsr1l,w,c
  9164   010592  6E09               	movwf	(btemp+8)^0,c
  9165   010594  0EFF               	movlw	255
  9166   010596  20E2               	addwfc	fsr1h,w,c
  9167   010598  6E0A               	movwf	(btemp+9)^0,c
  9168   01059A  500B               	movf	(btemp+10)^0,w,c
  9169   01059C  2409               	addwf	(btemp+8)^0,w,c
  9170   01059E  6EE9               	movwf	fsr0l,c
  9171   0105A0  500C               	movf	(btemp+11)^0,w,c
  9172   0105A2  200A               	addwfc	(btemp+9)^0,w,c
  9173   0105A4  6EEA               	movwf	fsr0h,c
  9174   0105A6  CFDF FFEF          	movff	indf2,indf0
  9175   0105AA                     
  9176                           ;can/can.c: 790:     }
  9177                           ;stkvar	_i @ sp[(-114)+112]
  9178   0105AA  0EFE               	movlw	-2
  9179   0105AC  2AE3               	incf	plusw1,f,c
  9180   0105AE                     l4202:
  9181                           
  9182                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9183                           ;stkvar	_i @ sp[(-114)+112]
  9184   0105AE  0EFE               	movlw	-2
  9185   0105B0  CFE3 F00C          	movff	plusw1,btemp+11
  9186   0105B4  C00C  F005         	movff	btemp+11,btemp+4
  9187   0105B8  6A06               	clrf	(btemp+5)^0,c
  9188   0105BA  6A07               	clrf	(btemp+6)^0,c
  9189   0105BC  6A08               	clrf	(btemp+7)^0,c
  9190   0105BE  0E85               	movlw	-123
  9191   0105C0  50E3               	movf	plusw1,w,c
  9192   0105C2  5C05               	subwf	(btemp+4)^0,w,c
  9193   0105C4  0E86               	movlw	-122
  9194   0105C6  50E3               	movf	plusw1,w,c
  9195   0105C8  5806               	subwfb	(btemp+5)^0,w,c
  9196   0105CA  0E87               	movlw	-121
  9197   0105CC  50E3               	movf	plusw1,w,c
  9198   0105CE  5807               	subwfb	(btemp+6)^0,w,c
  9199   0105D0  0E88               	movlw	-120
  9200   0105D2  50E3               	movf	plusw1,w,c
  9201   0105D4  5808               	subwfb	(btemp+7)^0,w,c
  9202   0105D6  A0D8               	btfss	status,0,c
  9203   0105D8  EFF0  F082         	goto	u1841
  9204   0105DC  EFF2  F082         	goto	u1840
  9205   0105E0                     u1841:
  9206   0105E0  EFB0  F082         	goto	l4198
  9207   0105E4                     u1840:
  9208   0105E4                     
  9209                           ;can/can.c: 793:     uint16_t n = 0;
  9210                           ;stkvar	_n @ sp[(-114)+109]
  9211   0105E4  0EFB               	movlw	-5
  9212   0105E6  6AE3               	clrf	plusw1,c
  9213   0105E8  0EFC               	movlw	-4
  9214   0105EA  6AE3               	clrf	plusw1,c
  9215   0105EC                     
  9216                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9217                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9218   0105EC  0E85               	movlw	-123
  9219   0105EE  CFE3 F00C          	movff	plusw1,btemp+11
  9220   0105F2  0E03               	movlw	3
  9221   0105F4  160C               	andwf	(btemp+11)^0,f,c
  9222   0105F6  B4D8               	btfsc	status,2,c
  9223   0105F8  EF00  F083         	goto	u1851
  9224   0105FC  EF02  F083         	goto	u1850
  9225   010600                     u1851:
  9226   010600  EF51  F083         	goto	l4222
  9227   010604                     u1850:
  9228   010604                     
  9229                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9230                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9231   010604  0E85               	movlw	-123
  9232   010606  CFE3 F00B          	movff	plusw1,btemp+10
  9233   01060A  0E86               	movlw	-122
  9234   01060C  CFE3 F00C          	movff	plusw1,btemp+11
  9235   010610  0E03               	movlw	3
  9236   010612  160B               	andwf	(btemp+10)^0,f,c
  9237   010614  0E00               	movlw	0
  9238   010616  160C               	andwf	(btemp+11)^0,f,c
  9239   010618  500B               	movf	(btemp+10)^0,w,c
  9240   01061A  0804               	sublw	4
  9241   01061C  6E09               	movwf	(btemp+8)^0,c
  9242   01061E  500C               	movf	(btemp+11)^0,w,c
  9243   010620  A0D8               	btfss	status,0,c
  9244   010622  2AE8               	incf	wreg,f,c
  9245   010624  0800               	sublw	0
  9246   010626  6E0A               	movwf	(btemp+9)^0,c
  9247                           
  9248                           ;stkvar	_n @ sp[(-114)+109]
  9249   010628  0EFB               	movlw	-5
  9250   01062A  C009  FFE3         	movff	btemp+8,plusw1
  9251   01062E  0EFC               	movlw	-4
  9252   010630  C00A  FFE3         	movff	btemp+9,plusw1
  9253   010634                     
  9254                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9255   010634  0E08               	movlw	8
  9256   010636  6E0C               	movwf	(btemp+11)^0,c
  9257                           
  9258                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9259   010638  0E85               	movlw	-123
  9260   01063A  50E3               	movf	plusw1,w,c
  9261   01063C  240C               	addwf	(btemp+11)^0,w,c
  9262   01063E  6E0B               	movwf	(btemp+10)^0,c
  9263                           
  9264                           ;stkvar	_i @ sp[(-114)+112]
  9265   010640  0EFE               	movlw	-2
  9266   010642  C00B  FFE3         	movff	btemp+10,plusw1
  9267   010646                     
  9268                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9269                           ;stkvar	_j @ sp[(-114)+113]
  9270   010646  0EFF               	movlw	-1
  9271   010648  6AE3               	clrf	plusw1,c
  9272   01064A  EF40  F083         	goto	l4220
  9273   01064E                     l4216:
  9274                           
  9275                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9276                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9277   01064E  0E92               	movlw	146
  9278   010650  24E1               	addwf	fsr1l,w,c
  9279   010652  6E0B               	movwf	(btemp+10)^0,c
  9280   010654  0EFF               	movlw	255
  9281   010656  20E2               	addwfc	fsr1h,w,c
  9282   010658  6E0C               	movwf	(btemp+11)^0,c
  9283                           
  9284                           ;stkvar	_i @ sp[(-114)+112]
  9285   01065A  0EFE               	movlw	-2
  9286   01065C  50E3               	movf	plusw1,w,c
  9287   01065E  260B               	addwf	(btemp+10)^0,f,c
  9288   010660  0E00               	movlw	0
  9289   010662  220C               	addwfc	(btemp+11)^0,f,c
  9290                           
  9291                           ;stkvar	_j @ sp[(-114)+113]
  9292   010664  0EFF               	movlw	-1
  9293   010666  50E3               	movf	plusw1,w,c
  9294   010668  260B               	addwf	(btemp+10)^0,f,c
  9295   01066A  0E00               	movlw	0
  9296   01066C  220C               	addwfc	(btemp+11)^0,f,c
  9297   01066E  0E08               	movlw	8
  9298   010670  240B               	addwf	(btemp+10)^0,w,c
  9299   010672  6ED9               	movwf	fsr2l,c
  9300   010674  0E00               	movlw	0
  9301   010676  200C               	addwfc	(btemp+11)^0,w,c
  9302   010678  6EDA               	movwf	fsr2h,c
  9303   01067A  6ADF               	clrf	indf2,c
  9304   01067C                     
  9305                           ;can/can.c: 803:         }
  9306                           ;stkvar	_j @ sp[(-114)+113]
  9307   01067C  0EFF               	movlw	-1
  9308   01067E  2AE3               	incf	plusw1,f,c
  9309   010680                     l4220:
  9310                           
  9311                           ;stkvar	_n @ sp[(-114)+109]
  9312                           ;stkvar	_j @ sp[(-114)+113]
  9313   010680  0EFF               	movlw	-1
  9314   010682  50E3               	movf	plusw1,w,c
  9315   010684  6E0B               	movwf	(btemp+10)^0,c
  9316   010686  6A0C               	clrf	(btemp+11)^0,c
  9317   010688  0EFB               	movlw	-5
  9318   01068A  50E3               	movf	plusw1,w,c
  9319   01068C  5C0B               	subwf	(btemp+10)^0,w,c
  9320   01068E  0EFC               	movlw	-4
  9321   010690  50E3               	movf	plusw1,w,c
  9322   010692  580C               	subwfb	(btemp+11)^0,w,c
  9323   010694  A0D8               	btfss	status,0,c
  9324   010696  EF4F  F083         	goto	u1861
  9325   01069A  EF51  F083         	goto	u1860
  9326   01069E                     u1861:
  9327   01069E  EF27  F083         	goto	l4216
  9328   0106A2                     u1860:
  9329   0106A2                     l4222:
  9330                           
  9331                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9332                           ;stkvar	_n @ sp[(-114)+109]
  9333                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9334   0106A2  0E85               	movlw	-123
  9335   0106A4  CFE3 F00B          	movff	plusw1,btemp+10
  9336   0106A8  0E86               	movlw	-122
  9337   0106AA  CFE3 F00C          	movff	plusw1,btemp+11
  9338   0106AE  0EFB               	movlw	-5
  9339   0106B0  50E3               	movf	plusw1,w,c
  9340   0106B2  260B               	addwf	(btemp+10)^0,f,c
  9341   0106B4  0EFC               	movlw	-4
  9342   0106B6  50E3               	movf	plusw1,w,c
  9343   0106B8  220C               	addwfc	(btemp+11)^0,f,c
  9344   0106BA  0E08               	movlw	8
  9345   0106BC  260B               	addwf	(btemp+10)^0,f,c
  9346   0106BE  0E00               	movlw	0
  9347   0106C0  220C               	addwfc	(btemp+11)^0,f,c
  9348   0106C2  C00B  FFE6         	movff	btemp+10,postinc1
  9349   0106C6  C00C  FFE6         	movff	btemp+11,postinc1
  9350                           
  9351                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9352   0106CA  0E90               	movlw	144
  9353   0106CC  24E1               	addwf	fsr1l,w,c
  9354   0106CE  6E01               	movwf	btemp^0,c
  9355   0106D0  0EFF               	movlw	255
  9356   0106D2  20E2               	addwfc	fsr1h,w,c
  9357   0106D4  6E02               	movwf	(btemp+1)^0,c
  9358   0106D6  C001  FFE6         	movff	btemp,postinc1
  9359   0106DA  C002  FFE6         	movff	btemp+1,postinc1
  9360                           
  9361                           ;stkvar	_a @ sp[(-118)+97]
  9362   0106DE  0EEB               	movlw	-21
  9363   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9364   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9365   0106E8  EC49  F099         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9366                           
  9367                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9368   0106EC  0EFD               	movlw	-3
  9369   0106EE  C001  FFE3         	movff	btemp,plusw1
  9370   0106F2                     
  9371                           ;can/can.c: 807:     if (spiTransferError) {
  9372                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9373   0106F2  0EFD               	movlw	-3
  9374   0106F4  50E3               	movf	plusw1,w,c
  9375   0106F6  B4D8               	btfsc	status,2,c
  9376   0106F8  EF80  F083         	goto	u1871
  9377   0106FC  EF82  F083         	goto	u1870
  9378   010700                     u1871:
  9379   010700  EF86  F083         	goto	l4230
  9380   010704                     u1870:
  9381   010704                     
  9382                           ;can/can.c: 808:         return -4;
  9383   010704  0EFC               	movlw	252
  9384   010706  6E01               	movwf	btemp^0,c
  9385   010708  EFA1  F083         	goto	l264
  9386   01070C                     l4230:
  9387                           
  9388                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9389                           ;stkvar	_flush @ sp[(-114)+-10]
  9390   01070C  0E84               	movlw	-124
  9391   01070E  50E3               	movf	plusw1,w,c
  9392   010710  6EE6               	movwf	postinc1,c
  9393                           
  9394                           ;stkvar	_channel @ sp[(-115)+-1]
  9395   010712  0E8C               	movlw	-116
  9396   010714  50E3               	movf	plusw1,w,c
  9397   010716  6EE6               	movwf	postinc1,c
  9398   010718  EC87  F09F         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9399                           
  9400                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9401   01071C  0EFD               	movlw	-3
  9402   01071E  C001  FFE3         	movff	btemp,plusw1
  9403   010722                     
  9404                           ;can/can.c: 813:     if (spiTransferError) {
  9405                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9406   010722  0EFD               	movlw	-3
  9407   010724  50E3               	movf	plusw1,w,c
  9408   010726  B4D8               	btfsc	status,2,c
  9409   010728  EF98  F083         	goto	u1881
  9410   01072C  EF9A  F083         	goto	u1880
  9411   010730                     u1881:
  9412   010730  EF9E  F083         	goto	l4238
  9413   010734                     u1880:
  9414   010734                     
  9415                           ;can/can.c: 814:         return -5;
  9416   010734  0EFB               	movlw	251
  9417   010736  6E01               	movwf	btemp^0,c
  9418   010738  EFA1  F083         	goto	l264
  9419   01073C                     l4238:
  9420                           
  9421                           ;can/can.c: 817:     return spiTransferError;
  9422                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9423   01073C  0EFD               	movlw	-3
  9424   01073E  CFE3 F001          	movff	plusw1,btemp
  9425   010742                     l264:
  9426                           
  9427                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9428   010742  0E84               	movlw	132
  9429   010744  26E1               	addwf	fsr1l,f,c
  9430   010746  0EFF               	movlw	255
  9431   010748  22E2               	addwfc	fsr1h,f,c
  9432   01074A  0012               	return		;funcret
  9433   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9434                           	callstack 0
  9435                           
  9436 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9437 ;; Defined at:
  9438 ;;		line 383 in file "can/can.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  address         2  [STACK] unsigned short 
  9441 ;;  txd             2  [STACK] PTR unsigned char 
  9442 ;;		 -> txd(200), txBuffer(76), 
  9443 ;;  nBytes          2  [STACK] unsigned short 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;  i               2  [STACK] unsigned short 
  9446 ;;  spiTransferS    2  [STACK] unsigned short 
  9447 ;;  spiTransferE    1  [STACK] char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1  [STACK] char 
  9450 ;; Registers used:
  9451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;Total ram usage:        0 bytes
  9462 ;; Hardware stack levels used: 1
  9463 ;; Hardware stack levels required when called: 8
  9464 ;; This function calls:
  9465 ;;		_SpiTransfer
  9466 ;; This function is called by:
  9467 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9468 ;; This function uses a reentrant model
  9469 ;;
  9470                           
  9471                           	psect	text26
  9472   013292                     __ptext26:
  9473                           	callstack 0
  9474   013292                     _DRV_CANFDSPI_WriteByteArray:
  9475                           	callstack 0
  9476                           
  9477                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9478   013292  0E05               	movlw	5
  9479   013294  26E1               	addwf	fsr1l,f,c
  9480   013296  0E00               	movlw	0
  9481   013298  22E2               	addwfc	fsr1h,f,c
  9482   01329A                     
  9483                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9484                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9485   01329A  0EF5               	movlw	-11
  9486   01329C  50E3               	movf	plusw1,w,c
  9487   01329E  0F02               	addlw	2
  9488   0132A0  6E0B               	movwf	(btemp+10)^0,c
  9489   0132A2  0EF6               	movlw	-10
  9490   0132A4  CFE3 F00C          	movff	plusw1,btemp+11
  9491   0132A8  0E00               	movlw	0
  9492   0132AA  220C               	addwfc	(btemp+11)^0,f,c
  9493                           
  9494                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9495   0132AC  0EFD               	movlw	-3
  9496   0132AE  C00B  FFE3         	movff	btemp+10,plusw1
  9497   0132B2  0EFE               	movlw	-2
  9498   0132B4  C00C  FFE3         	movff	btemp+11,plusw1
  9499   0132B8                     
  9500                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9501                           ;stkvar	_address @ sp[(-5)+-2]
  9502   0132B8  0EFA               	movlw	250
  9503   0132BA  24E1               	addwf	fsr1l,w,c
  9504   0132BC  6ED9               	movwf	fsr2l,c
  9505   0132BE  0EFF               	movlw	255
  9506   0132C0  20E2               	addwfc	fsr1h,w,c
  9507   0132C2  6EDA               	movwf	fsr2h,c
  9508   0132C4  50DF               	movf	indf2,w,c
  9509   0132C6  0B0F               	andlw	15
  9510   0132C8  0F20               	addlw	32
  9511   0132CA  0101               	movlb	1	; () banked
  9512   0132CC  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9513   0132CE                     
  9514                           ; BSR set to: 1
  9515                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9516                           ;stkvar	_address @ sp[(-5)+-2]
  9517   0132CE  0EF9               	movlw	-7
  9518   0132D0  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9519   0132D4                     
  9520                           ; BSR set to: 1
  9521                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9522   0132D4  0E02               	movlw	2
  9523   0132D6  6E0B               	movwf	(btemp+10)^0,c
  9524   0132D8  0E00               	movlw	0
  9525   0132DA  6E0C               	movwf	(btemp+11)^0,c
  9526                           
  9527                           ;stkvar	_i @ sp[(-5)+0]
  9528   0132DC  0EFB               	movlw	-5
  9529   0132DE  C00B  FFE3         	movff	btemp+10,plusw1
  9530   0132E2  0EFC               	movlw	-4
  9531   0132E4  C00C  FFE3         	movff	btemp+11,plusw1
  9532   0132E8  EFA5  F099         	goto	l4028
  9533   0132EC                     l4024:
  9534                           
  9535                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9536                           ;stkvar	_i @ sp[(-5)+0]
  9537                           ;stkvar	_txd @ sp[(-5)+-4]
  9538   0132EC  0EF7               	movlw	-9
  9539   0132EE  CFE3 F00B          	movff	plusw1,btemp+10
  9540   0132F2  0EF8               	movlw	-8
  9541   0132F4  CFE3 F00C          	movff	plusw1,btemp+11
  9542   0132F8  0EFB               	movlw	-5
  9543   0132FA  50E3               	movf	plusw1,w,c
  9544   0132FC  260B               	addwf	(btemp+10)^0,f,c
  9545   0132FE  0EFC               	movlw	-4
  9546   013300  50E3               	movf	plusw1,w,c
  9547   013302  220C               	addwfc	(btemp+11)^0,f,c
  9548   013304  0EFE               	movlw	254
  9549   013306  240B               	addwf	(btemp+10)^0,w,c
  9550   013308  6ED9               	movwf	fsr2l,c
  9551   01330A  0EFF               	movlw	255
  9552   01330C  200C               	addwfc	(btemp+11)^0,w,c
  9553   01330E  6EDA               	movwf	fsr2h,c
  9554                           
  9555                           ;stkvar	_i @ sp[(-5)+0]
  9556   013310  0EFB               	movlw	-5
  9557   013312  CFE3 F00B          	movff	plusw1,btemp+10
  9558   013316  0EFC               	movlw	-4
  9559   013318  CFE3 F00C          	movff	plusw1,btemp+11
  9560   01331C  0E00               	movlw	low _spiTransmitBuffer
  9561   01331E  240B               	addwf	(btemp+10)^0,w,c
  9562   013320  6EE9               	movwf	fsr0l,c
  9563   013322  0E01               	movlw	high _spiTransmitBuffer
  9564   013324  200C               	addwfc	(btemp+11)^0,w,c
  9565   013326  6EEA               	movwf	fsr0h,c
  9566   013328  CFDF FFEF          	movff	indf2,indf0
  9567   01332C                     
  9568                           ;can/can.c: 397:     }
  9569                           ;stkvar	_i @ sp[(-5)+0]
  9570   01332C  0EFB               	movlw	-5
  9571   01332E  50E3               	movf	plusw1,w,c
  9572   013330  0F01               	addlw	1
  9573   013332  6E01               	movwf	btemp^0,c
  9574   013334  0EFB               	movlw	-5
  9575   013336  C001  FFE3         	movff	btemp,plusw1
  9576   01333A  6A01               	clrf	btemp^0,c
  9577   01333C  0EFC               	movlw	-4
  9578   01333E  50E3               	movf	plusw1,w,c
  9579   013340  2001               	addwfc	btemp^0,w,c
  9580   013342  6E01               	movwf	btemp^0,c
  9581   013344  0EFC               	movlw	-4
  9582   013346  C001  FFE3         	movff	btemp,plusw1
  9583   01334A                     l4028:
  9584                           
  9585                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9586   01334A  0EFD               	movlw	-3
  9587   01334C  CFE3 F00B          	movff	plusw1,btemp+10
  9588   013350  0EFE               	movlw	-2
  9589   013352  CFE3 F00C          	movff	plusw1,btemp+11
  9590                           
  9591                           ;stkvar	_i @ sp[(-5)+0]
  9592   013356  0EFB               	movlw	-5
  9593   013358  CFE3 F009          	movff	plusw1,btemp+8
  9594   01335C  0EFC               	movlw	-4
  9595   01335E  CFE3 F00A          	movff	plusw1,btemp+9
  9596   013362  500B               	movf	(btemp+10)^0,w,c
  9597   013364  5C09               	subwf	(btemp+8)^0,w,c
  9598   013366  500C               	movf	(btemp+11)^0,w,c
  9599   013368  580A               	subwfb	(btemp+9)^0,w,c
  9600   01336A  A0D8               	btfss	status,0,c
  9601   01336C  EFBA  F099         	goto	u1641
  9602   013370  EFBC  F099         	goto	u1640
  9603   013374                     u1641:
  9604   013374  EF76  F099         	goto	l4024
  9605   013378                     u1640:
  9606   013378                     
  9607                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  9608                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9609   013378  0EFD               	movlw	-3
  9610   01337A  CFE3 FFE6          	movff	plusw1,postinc1
  9611   01337E  CFE3 FFE6          	movff	plusw1,postinc1
  9612   013382  0E00               	movlw	low _spiReceiveBuffer
  9613   013384  6EE6               	movwf	postinc1,c
  9614   013386  0E02               	movlw	high _spiReceiveBuffer
  9615   013388  6EE6               	movwf	postinc1,c
  9616   01338A  0E00               	movlw	low _spiTransmitBuffer
  9617   01338C  6EE6               	movwf	postinc1,c
  9618   01338E  0E01               	movlw	high _spiTransmitBuffer
  9619   013390  6EE6               	movwf	postinc1,c
  9620   013392  EC63  F09D         	call	_SpiTransfer	;wreg free
  9621                           
  9622                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9623   013396  0EFF               	movlw	-1
  9624   013398  C001  FFE3         	movff	btemp,plusw1
  9625   01339C                     
  9626                           ;can/can.c: 401:     return spiTransferError;
  9627                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9628   01339C  0EFF               	movlw	-1
  9629   01339E  CFE3 F001          	movff	plusw1,btemp
  9630   0133A2                     
  9631                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9632   0133A2  0EF5               	movlw	245
  9633   0133A4  26E1               	addwf	fsr1l,f,c
  9634   0133A6  0EFF               	movlw	255
  9635   0133A8  22E2               	addwfc	fsr1h,f,c
  9636   0133AA  0012               	return		;funcret
  9637   0133AC                     __end_of_DRV_CANFDSPI_WriteByteArray:
  9638                           	callstack 0
  9639                           
  9640 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  9641 ;; Defined at:
  9642 ;;		line 880 in file "can/can.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;  channel         1  [STACK] enum E5287
  9645 ;;  flush           1  [STACK] _Bool 
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  9648 ;;  a               2  [STACK] unsigned short 
  9649 ;;  spiTransferE    1  [STACK] char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1  [STACK] char 
  9652 ;; Registers used:
  9653 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;Total ram usage:        0 bytes
  9664 ;; Hardware stack levels used: 1
  9665 ;; Hardware stack levels required when called: 9
  9666 ;; This function calls:
  9667 ;;		_DRV_CANFDSPI_WriteByte
  9668 ;; This function is called by:
  9669 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9670 ;; This function uses a reentrant model
  9671 ;;
  9672                           
  9673                           	psect	text27
  9674   013F0E                     __ptext27:
  9675                           	callstack 0
  9676   013F0E                     _DRV_CANFDSPI_TransmitChannelUpdate:
  9677                           	callstack 0
  9678                           
  9679                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9680   013F0E  0E08               	movlw	8
  9681   013F10  26E1               	addwf	fsr1l,f,c
  9682   013F12  0E00               	movlw	0
  9683   013F14  22E2               	addwfc	fsr1h,f,c
  9684   013F16                     
  9685                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  9686                           ;stkvar	_channel @ sp[(-8)+-1]
  9687   013F16  0EF7               	movlw	-9
  9688   013F18  50E3               	movf	plusw1,w,c
  9689   013F1A  0D0C               	mullw	12
  9690   013F1C  0E51               	movlw	81
  9691   013F1E  26F3               	addwf	243,f,c
  9692   013F20  0E00               	movlw	0
  9693   013F22  22F4               	addwfc	244,f,c
  9694                           
  9695                           ;stkvar	_a @ sp[(-8)+5]
  9696   013F24  0EFD               	movlw	-3
  9697   013F26  CFF3 FFE3          	movff	prodl,plusw1
  9698   013F2A  0EFE               	movlw	-2
  9699   013F2C  CFF4 FFE3          	movff	prodh,plusw1
  9700   013F30                     
  9701                           ;can/can.c: 889:     ciFifoCon.word = 0;
  9702                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9703   013F30  0EF8               	movlw	-8
  9704   013F32  6AE3               	clrf	plusw1,c
  9705   013F34  0EF9               	movlw	-7
  9706   013F36  6AE3               	clrf	plusw1,c
  9707   013F38  0EFA               	movlw	-6
  9708   013F3A  6AE3               	clrf	plusw1,c
  9709   013F3C  0EFB               	movlw	-5
  9710   013F3E  6AE3               	clrf	plusw1,c
  9711   013F40                     
  9712                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  9713                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9714   013F40  0EF9               	movlw	249
  9715   013F42  24E1               	addwf	fsr1l,w,c
  9716   013F44  6ED9               	movwf	fsr2l,c
  9717   013F46  0EFF               	movlw	255
  9718   013F48  20E2               	addwfc	fsr1h,w,c
  9719   013F4A  6EDA               	movwf	fsr2h,c
  9720   013F4C  80DF               	bsf	indf2,0,c
  9721   013F4E                     
  9722                           ;can/can.c: 893:     if (flush) {
  9723                           ;stkvar	_flush @ sp[(-8)+-2]
  9724   013F4E  0EF6               	movlw	-10
  9725   013F50  50E3               	movf	plusw1,w,c
  9726   013F52  B4D8               	btfsc	status,2,c
  9727   013F54  EFAE  F09F         	goto	u1621
  9728   013F58  EFB0  F09F         	goto	u1620
  9729   013F5C                     u1621:
  9730   013F5C  EFB7  F09F         	goto	l3984
  9731   013F60                     u1620:
  9732   013F60                     
  9733                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  9734                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9735   013F60  0EF9               	movlw	249
  9736   013F62  24E1               	addwf	fsr1l,w,c
  9737   013F64  6ED9               	movwf	fsr2l,c
  9738   013F66  0EFF               	movlw	255
  9739   013F68  20E2               	addwfc	fsr1h,w,c
  9740   013F6A  6EDA               	movwf	fsr2h,c
  9741   013F6C  82DF               	bsf	indf2,1,c
  9742   013F6E                     l3984:
  9743                           
  9744                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  9745                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9746   013F6E  0EF9               	movlw	249
  9747   013F70  24E1               	addwf	fsr1l,w,c
  9748   013F72  6ED9               	movwf	fsr2l,c
  9749   013F74  0EFF               	movlw	255
  9750   013F76  20E2               	addwfc	fsr1h,w,c
  9751   013F78  6EDA               	movwf	fsr2h,c
  9752   013F7A  50DF               	movf	indf2,w,c
  9753   013F7C  6EE6               	movwf	postinc1,c
  9754                           
  9755                           ;stkvar	_a @ sp[(-9)+5]
  9756   013F7E  0EFC               	movlw	-4
  9757   013F80  CFE3 FFE6          	movff	plusw1,postinc1
  9758   013F84  CFE3 FFE6          	movff	plusw1,postinc1
  9759   013F88  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9760                           
  9761                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9762   013F8C  0EFF               	movlw	-1
  9763   013F8E  C001  FFE3         	movff	btemp,plusw1
  9764   013F92                     
  9765                           ;can/can.c: 898:     if (spiTransferError) {
  9766                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9767   013F92  0EFF               	movlw	-1
  9768   013F94  50E3               	movf	plusw1,w,c
  9769   013F96  B4D8               	btfsc	status,2,c
  9770   013F98  EFD0  F09F         	goto	u1631
  9771   013F9C  EFD2  F09F         	goto	u1630
  9772   013FA0                     u1631:
  9773   013FA0  EFD6  F09F         	goto	l3992
  9774   013FA4                     u1630:
  9775   013FA4                     
  9776                           ;can/can.c: 899:         return -1;
  9777   013FA4  0EFF               	movlw	255
  9778   013FA6  6E01               	movwf	btemp^0,c
  9779   013FA8  EFD9  F09F         	goto	l293
  9780   013FAC                     l3992:
  9781                           
  9782                           ;can/can.c: 902:     return spiTransferError;
  9783                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9784   013FAC  0EFF               	movlw	-1
  9785   013FAE  CFE3 F001          	movff	plusw1,btemp
  9786   013FB2                     l293:
  9787                           
  9788                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9789   013FB2  0EF6               	movlw	246
  9790   013FB4  26E1               	addwf	fsr1l,f,c
  9791   013FB6  0EFF               	movlw	255
  9792   013FB8  22E2               	addwfc	fsr1h,f,c
  9793   013FBA  0012               	return		;funcret
  9794   013FBC                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9795                           	callstack 0
  9796                           
  9797 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9798 ;; Defined at:
  9799 ;;		line 405 in file "can/can.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  address         2  [STACK] unsigned short 
  9802 ;;  rxd             2  [STACK] PTR unsigned long 
  9803 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9804 ;;		 -> fifoReg(12), 
  9805 ;;  nWords          2  [STACK] unsigned short 
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  w               4  [STACK] struct _REG_t
  9808 ;;  i               2  [STACK] unsigned short 
  9809 ;;  j               2  [STACK] unsigned short 
  9810 ;;  spiTransferS    2  [STACK] unsigned short 
  9811 ;;  n               2  [STACK] unsigned short 
  9812 ;;  spiTransferE    1  [STACK] char 
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1  [STACK] char 
  9815 ;; Registers used:
  9816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used: 1
  9828 ;; Hardware stack levels required when called: 8
  9829 ;; This function calls:
  9830 ;;		_SpiTransfer
  9831 ;; This function is called by:
  9832 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9833 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9834 ;; This function uses a reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text28
  9838   0114B2                     __ptext28:
  9839                           	callstack 0
  9840   0114B2                     _DRV_CANFDSPI_ReadWordArray:
  9841                           	callstack 0
  9842                           
  9843                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  9844   0114B2  0E0D               	movlw	13
  9845   0114B4  26E1               	addwf	fsr1l,f,c
  9846   0114B6  0E00               	movlw	0
  9847   0114B8  22E2               	addwfc	fsr1h,f,c
  9848   0114BA                     
  9849                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
  9850                           ;stkvar	_nWords @ sp[(-13)+-6]
  9851   0114BA  0EED               	movlw	-19
  9852   0114BC  CFE3 F00B          	movff	plusw1,btemp+10
  9853   0114C0  0EEE               	movlw	-18
  9854   0114C2  CFE3 F00C          	movff	plusw1,btemp+11
  9855   0114C6  90D8               	bcf	status,0,c
  9856   0114C8  360B               	rlcf	(btemp+10)^0,f,c
  9857   0114CA  360C               	rlcf	(btemp+11)^0,f,c
  9858   0114CC  90D8               	bcf	status,0,c
  9859   0114CE  360B               	rlcf	(btemp+10)^0,f,c
  9860   0114D0  360C               	rlcf	(btemp+11)^0,f,c
  9861   0114D2  0E02               	movlw	2
  9862   0114D4  260B               	addwf	(btemp+10)^0,f,c
  9863   0114D6  0E00               	movlw	0
  9864   0114D8  220C               	addwfc	(btemp+11)^0,f,c
  9865                           
  9866                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9867   0114DA  0EFB               	movlw	-5
  9868   0114DC  C00B  FFE3         	movff	btemp+10,plusw1
  9869   0114E0  0EFC               	movlw	-4
  9870   0114E2  C00C  FFE3         	movff	btemp+11,plusw1
  9871   0114E6                     
  9872                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
  9873                           ;stkvar	_address @ sp[(-13)+-2]
  9874   0114E6  0EF2               	movlw	242
  9875   0114E8  24E1               	addwf	fsr1l,w,c
  9876   0114EA  6ED9               	movwf	fsr2l,c
  9877   0114EC  0EFF               	movlw	255
  9878   0114EE  20E2               	addwfc	fsr1h,w,c
  9879   0114F0  6EDA               	movwf	fsr2h,c
  9880   0114F2  50DF               	movf	indf2,w,c
  9881   0114F4  0B0F               	andlw	15
  9882   0114F6  0F30               	addlw	48
  9883   0114F8  0101               	movlb	1	; () banked
  9884   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9885   0114FC                     
  9886                           ; BSR set to: 1
  9887                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
  9888                           ;stkvar	_address @ sp[(-13)+-2]
  9889   0114FC  0EF1               	movlw	-15
  9890   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9891   011502                     
  9892                           ; BSR set to: 1
  9893                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
  9894   011502  0E02               	movlw	2
  9895   011504  6E0B               	movwf	(btemp+10)^0,c
  9896   011506  0E00               	movlw	0
  9897   011508  6E0C               	movwf	(btemp+11)^0,c
  9898                           
  9899                           ;stkvar	_i @ sp[(-13)+4]
  9900   01150A  0EF7               	movlw	-9
  9901   01150C  C00B  FFE3         	movff	btemp+10,plusw1
  9902   011510  0EF8               	movlw	-8
  9903   011512  C00C  FFE3         	movff	btemp+11,plusw1
  9904   011516  EFA9  F08A         	goto	l4050
  9905   01151A                     l4046:
  9906                           
  9907                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
  9908                           ;stkvar	_i @ sp[(-13)+4]
  9909   01151A  0EF7               	movlw	-9
  9910   01151C  CFE3 F00B          	movff	plusw1,btemp+10
  9911   011520  0EF8               	movlw	-8
  9912   011522  CFE3 F00C          	movff	plusw1,btemp+11
  9913   011526  0E00               	movlw	low _spiTransmitBuffer
  9914   011528  240B               	addwf	(btemp+10)^0,w,c
  9915   01152A  6ED9               	movwf	fsr2l,c
  9916   01152C  0E01               	movlw	high _spiTransmitBuffer
  9917   01152E  200C               	addwfc	(btemp+11)^0,w,c
  9918   011530  6EDA               	movwf	fsr2h,c
  9919   011532  6ADF               	clrf	indf2,c
  9920   011534                     
  9921                           ;can/can.c: 420:     }
  9922                           ;stkvar	_i @ sp[(-13)+4]
  9923   011534  0EF7               	movlw	-9
  9924   011536  50E3               	movf	plusw1,w,c
  9925   011538  0F01               	addlw	1
  9926   01153A  6E01               	movwf	btemp^0,c
  9927   01153C  0EF7               	movlw	-9
  9928   01153E  C001  FFE3         	movff	btemp,plusw1
  9929   011542  6A01               	clrf	btemp^0,c
  9930   011544  0EF8               	movlw	-8
  9931   011546  50E3               	movf	plusw1,w,c
  9932   011548  2001               	addwfc	btemp^0,w,c
  9933   01154A  6E01               	movwf	btemp^0,c
  9934   01154C  0EF8               	movlw	-8
  9935   01154E  C001  FFE3         	movff	btemp,plusw1
  9936   011552                     l4050:
  9937                           
  9938                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9939   011552  0EFB               	movlw	-5
  9940   011554  CFE3 F00B          	movff	plusw1,btemp+10
  9941   011558  0EFC               	movlw	-4
  9942   01155A  CFE3 F00C          	movff	plusw1,btemp+11
  9943                           
  9944                           ;stkvar	_i @ sp[(-13)+4]
  9945   01155E  0EF7               	movlw	-9
  9946   011560  CFE3 F009          	movff	plusw1,btemp+8
  9947   011564  0EF8               	movlw	-8
  9948   011566  CFE3 F00A          	movff	plusw1,btemp+9
  9949   01156A  500B               	movf	(btemp+10)^0,w,c
  9950   01156C  5C09               	subwf	(btemp+8)^0,w,c
  9951   01156E  500C               	movf	(btemp+11)^0,w,c
  9952   011570  580A               	subwfb	(btemp+9)^0,w,c
  9953   011572  A0D8               	btfss	status,0,c
  9954   011574  EFBE  F08A         	goto	u1651
  9955   011578  EFC0  F08A         	goto	u1650
  9956   01157C                     u1651:
  9957   01157C  EF8D  F08A         	goto	l4046
  9958   011580                     u1650:
  9959   011580                     
  9960                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
  9961                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9962   011580  0EFB               	movlw	-5
  9963   011582  CFE3 FFE6          	movff	plusw1,postinc1
  9964   011586  CFE3 FFE6          	movff	plusw1,postinc1
  9965   01158A  0E00               	movlw	low _spiReceiveBuffer
  9966   01158C  6EE6               	movwf	postinc1,c
  9967   01158E  0E02               	movlw	high _spiReceiveBuffer
  9968   011590  6EE6               	movwf	postinc1,c
  9969   011592  0E00               	movlw	low _spiTransmitBuffer
  9970   011594  6EE6               	movwf	postinc1,c
  9971   011596  0E01               	movlw	high _spiTransmitBuffer
  9972   011598  6EE6               	movwf	postinc1,c
  9973   01159A  EC63  F09D         	call	_SpiTransfer	;wreg free
  9974                           
  9975                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9976   01159E  0EFF               	movlw	-1
  9977   0115A0  C001  FFE3         	movff	btemp,plusw1
  9978   0115A4                     
  9979                           ;can/can.c: 423:     if (spiTransferError) {
  9980                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9981   0115A4  0EFF               	movlw	-1
  9982   0115A6  50E3               	movf	plusw1,w,c
  9983   0115A8  B4D8               	btfsc	status,2,c
  9984   0115AA  EFD9  F08A         	goto	u1661
  9985   0115AE  EFDB  F08A         	goto	u1660
  9986   0115B2                     u1661:
  9987   0115B2  EFE0  F08A         	goto	l4060
  9988   0115B6                     u1660:
  9989   0115B6                     l4056:
  9990                           
  9991                           ;can/can.c: 424:         return spiTransferError;
  9992                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9993   0115B6  0EFF               	movlw	-1
  9994   0115B8  CFE3 F001          	movff	plusw1,btemp
  9995   0115BC  EF98  F08B         	goto	l206
  9996   0115C0                     l4060:
  9997                           
  9998                           ;can/can.c: 428:     n = 2;
  9999   0115C0  0E02               	movlw	2
 10000   0115C2  6E0B               	movwf	(btemp+10)^0,c
 10001   0115C4  0E00               	movlw	0
 10002   0115C6  6E0C               	movwf	(btemp+11)^0,c
 10003                           
 10004                           ;stkvar	_n @ sp[(-13)+10]
 10005   0115C8  0EFD               	movlw	-3
 10006   0115CA  C00B  FFE3         	movff	btemp+10,plusw1
 10007   0115CE  0EFE               	movlw	-2
 10008   0115D0  C00C  FFE3         	movff	btemp+11,plusw1
 10009   0115D4                     
 10010                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
 10011                           ;stkvar	_i @ sp[(-13)+4]
 10012   0115D4  0EF7               	movlw	-9
 10013   0115D6  6AE3               	clrf	plusw1,c
 10014   0115D8  0EF8               	movlw	-8
 10015   0115DA  6AE3               	clrf	plusw1,c
 10016   0115DC  EF7F  F08B         	goto	l4082
 10017   0115E0                     l4064:
 10018                           
 10019                           ;can/can.c: 430:         w.word = 0;
 10020                           ;stkvar	_w @ sp[(-13)+0]
 10021   0115E0  0EF3               	movlw	-13
 10022   0115E2  6AE3               	clrf	plusw1,c
 10023   0115E4  0EF4               	movlw	-12
 10024   0115E6  6AE3               	clrf	plusw1,c
 10025   0115E8  0EF5               	movlw	-11
 10026   0115EA  6AE3               	clrf	plusw1,c
 10027   0115EC  0EF6               	movlw	-10
 10028   0115EE  6AE3               	clrf	plusw1,c
 10029                           
 10030                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
 10031                           ;stkvar	_j @ sp[(-13)+6]
 10032   0115F0  0EF9               	movlw	-7
 10033   0115F2  6AE3               	clrf	plusw1,c
 10034   0115F4  0EFA               	movlw	-6
 10035   0115F6  6AE3               	clrf	plusw1,c
 10036   0115F8                     l4070:
 10037                           
 10038                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
 10039                           ;stkvar	_n @ sp[(-13)+10]
 10040   0115F8  0EFD               	movlw	-3
 10041   0115FA  CFE3 F00B          	movff	plusw1,btemp+10
 10042   0115FE  0EFE               	movlw	-2
 10043   011600  CFE3 F00C          	movff	plusw1,btemp+11
 10044   011604  0E00               	movlw	low _spiReceiveBuffer
 10045   011606  240B               	addwf	(btemp+10)^0,w,c
 10046   011608  6ED9               	movwf	fsr2l,c
 10047   01160A  0E02               	movlw	high _spiReceiveBuffer
 10048   01160C  200C               	addwfc	(btemp+11)^0,w,c
 10049   01160E  6EDA               	movwf	fsr2h,c
 10050                           
 10051                           ;stkvar	_j @ sp[(-13)+6]
 10052   011610  0EF9               	movlw	-7
 10053   011612  CFE3 F00B          	movff	plusw1,btemp+10
 10054   011616  0EFA               	movlw	-6
 10055   011618  CFE3 F00C          	movff	plusw1,btemp+11
 10056                           
 10057                           ;stkvar	_w @ sp[(-13)+0]
 10058   01161C  0EF3               	movlw	243
 10059   01161E  24E1               	addwf	fsr1l,w,c
 10060   011620  6E09               	movwf	(btemp+8)^0,c
 10061   011622  0EFF               	movlw	255
 10062   011624  20E2               	addwfc	fsr1h,w,c
 10063   011626  6E0A               	movwf	(btemp+9)^0,c
 10064   011628  500B               	movf	(btemp+10)^0,w,c
 10065   01162A  2409               	addwf	(btemp+8)^0,w,c
 10066   01162C  6EE9               	movwf	fsr0l,c
 10067   01162E  500C               	movf	(btemp+11)^0,w,c
 10068   011630  200A               	addwfc	(btemp+9)^0,w,c
 10069   011632  6EEA               	movwf	fsr0h,c
 10070   011634  CFDF FFEF          	movff	indf2,indf0
 10071   011638                     
 10072                           ;can/can.c: 433:         }
 10073                           ;stkvar	_j @ sp[(-13)+6]
 10074   011638  0EF9               	movlw	-7
 10075   01163A  50E3               	movf	plusw1,w,c
 10076   01163C  0F01               	addlw	1
 10077   01163E  6E01               	movwf	btemp^0,c
 10078   011640  0EF9               	movlw	-7
 10079   011642  C001  FFE3         	movff	btemp,plusw1
 10080   011646  6A01               	clrf	btemp^0,c
 10081   011648  0EFA               	movlw	-6
 10082   01164A  50E3               	movf	plusw1,w,c
 10083   01164C  2001               	addwfc	btemp^0,w,c
 10084   01164E  6E01               	movwf	btemp^0,c
 10085   011650  0EFA               	movlw	-6
 10086   011652  C001  FFE3         	movff	btemp,plusw1
 10087   011656                     
 10088                           ;stkvar	_n @ sp[(-13)+10]
 10089   011656  0EFD               	movlw	-3
 10090   011658  50E3               	movf	plusw1,w,c
 10091   01165A  0F01               	addlw	1
 10092   01165C  6E01               	movwf	btemp^0,c
 10093   01165E  0EFD               	movlw	-3
 10094   011660  C001  FFE3         	movff	btemp,plusw1
 10095   011664  6A01               	clrf	btemp^0,c
 10096   011666  0EFE               	movlw	-2
 10097   011668  50E3               	movf	plusw1,w,c
 10098   01166A  2001               	addwfc	btemp^0,w,c
 10099   01166C  6E01               	movwf	btemp^0,c
 10100   01166E  0EFE               	movlw	-2
 10101   011670  C001  FFE3         	movff	btemp,plusw1
 10102   011674                     
 10103                           ;stkvar	_j @ sp[(-13)+6]
 10104   011674  0EFA               	movlw	-6
 10105   011676  50E3               	movf	plusw1,w,c
 10106   011678  E10C               	bnz	u1670
 10107   01167A  0EF9               	movlw	-7
 10108   01167C  CFE3 F001          	movff	plusw1,btemp
 10109   011680  0E04               	movlw	4
 10110   011682  5E01               	subwf	btemp^0,f,c
 10111   011684  A0D8               	btfss	status,0,c
 10112   011686  EF47  F08B         	goto	u1671
 10113   01168A  EF49  F08B         	goto	u1670
 10114   01168E                     u1671:
 10115   01168E  EFFC  F08A         	goto	l4070
 10116   011692                     u1670:
 10117   011692                     
 10118                           ;can/can.c: 434:         rxd[i] = w.word;
 10119                           ;stkvar	_w @ sp[(-13)+0]
 10120   011692  50E1               	movf	fsr1l,w,c
 10121   011694  0FF3               	addlw	-13
 10122   011696  6ED9               	movwf	fsr2l,c
 10123   011698  50E2               	movf	fsr1h,w,c
 10124   01169A  6EDA               	movwf	fsr2h,c
 10125   01169C  0EFF               	movlw	255
 10126   01169E  22DA               	addwfc	fsr2h,f,c
 10127                           
 10128                           ;stkvar	_i @ sp[(-13)+4]
 10129   0116A0  0EF7               	movlw	-9
 10130   0116A2  CFE3 F00B          	movff	plusw1,btemp+10
 10131   0116A6  0EF8               	movlw	-8
 10132   0116A8  CFE3 F00C          	movff	plusw1,btemp+11
 10133   0116AC  90D8               	bcf	status,0,c
 10134   0116AE  360B               	rlcf	(btemp+10)^0,f,c
 10135   0116B0  360C               	rlcf	(btemp+11)^0,f,c
 10136   0116B2  90D8               	bcf	status,0,c
 10137   0116B4  360B               	rlcf	(btemp+10)^0,f,c
 10138   0116B6  360C               	rlcf	(btemp+11)^0,f,c
 10139                           
 10140                           ;stkvar	_rxd @ sp[(-13)+-4]
 10141   0116B8  0EEF               	movlw	-17
 10142   0116BA  CFE3 F009          	movff	plusw1,btemp+8
 10143   0116BE  0EF0               	movlw	-16
 10144   0116C0  CFE3 F00A          	movff	plusw1,btemp+9
 10145   0116C4  500B               	movf	(btemp+10)^0,w,c
 10146   0116C6  2409               	addwf	(btemp+8)^0,w,c
 10147   0116C8  6EE9               	movwf	fsr0l,c
 10148   0116CA  500C               	movf	(btemp+11)^0,w,c
 10149   0116CC  200A               	addwfc	(btemp+9)^0,w,c
 10150   0116CE  6EEA               	movwf	fsr0h,c
 10151   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10152   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10153   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10154   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10155   0116E0                     
 10156                           ;can/can.c: 435:     }
 10157                           ;stkvar	_i @ sp[(-13)+4]
 10158   0116E0  0EF7               	movlw	-9
 10159   0116E2  50E3               	movf	plusw1,w,c
 10160   0116E4  0F01               	addlw	1
 10161   0116E6  6E01               	movwf	btemp^0,c
 10162   0116E8  0EF7               	movlw	-9
 10163   0116EA  C001  FFE3         	movff	btemp,plusw1
 10164   0116EE  6A01               	clrf	btemp^0,c
 10165   0116F0  0EF8               	movlw	-8
 10166   0116F2  50E3               	movf	plusw1,w,c
 10167   0116F4  2001               	addwfc	btemp^0,w,c
 10168   0116F6  6E01               	movwf	btemp^0,c
 10169   0116F8  0EF8               	movlw	-8
 10170   0116FA  C001  FFE3         	movff	btemp,plusw1
 10171   0116FE                     l4082:
 10172                           
 10173                           ;stkvar	_nWords @ sp[(-13)+-6]
 10174   0116FE  0EED               	movlw	-19
 10175   011700  CFE3 F00B          	movff	plusw1,btemp+10
 10176   011704  0EEE               	movlw	-18
 10177   011706  CFE3 F00C          	movff	plusw1,btemp+11
 10178                           
 10179                           ;stkvar	_i @ sp[(-13)+4]
 10180   01170A  0EF7               	movlw	-9
 10181   01170C  CFE3 F009          	movff	plusw1,btemp+8
 10182   011710  0EF8               	movlw	-8
 10183   011712  CFE3 F00A          	movff	plusw1,btemp+9
 10184   011716  500B               	movf	(btemp+10)^0,w,c
 10185   011718  5C09               	subwf	(btemp+8)^0,w,c
 10186   01171A  500C               	movf	(btemp+11)^0,w,c
 10187   01171C  580A               	subwfb	(btemp+9)^0,w,c
 10188   01171E  A0D8               	btfss	status,0,c
 10189   011720  EF94  F08B         	goto	u1681
 10190   011724  EF96  F08B         	goto	u1680
 10191   011728                     u1681:
 10192   011728  EFF0  F08A         	goto	l4064
 10193   01172C                     u1680:
 10194   01172C  EFDB  F08A         	goto	l4056
 10195   011730                     l206:
 10196                           
 10197                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10198   011730  0EED               	movlw	237
 10199   011732  26E1               	addwf	fsr1l,f,c
 10200   011734  0EFF               	movlw	255
 10201   011736  22E2               	addwfc	fsr1h,f,c
 10202   011738  0012               	return		;funcret
 10203   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10204                           	callstack 0
 10205                           
 10206 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10207 ;; Defined at:
 10208 ;;		line 3766 in file "can/can.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  dlc             1  [STACK] enum E5461
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  dataBytesInO    4  [STACK] unsigned long 
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  4  [STACK] unsigned long 
 10215 ;; Registers used:
 10216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;Total ram usage:        0 bytes
 10227 ;; Hardware stack levels used: 1
 10228 ;; Hardware stack levels required when called: 7
 10229 ;; This function calls:
 10230 ;;		Nothing
 10231 ;; This function is called by:
 10232 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10233 ;; This function uses a reentrant model
 10234 ;;
 10235                           
 10236                           	psect	text29
 10237   012278                     __ptext29:
 10238                           	callstack 0
 10239   012278                     _DRV_CANFDSPI_DlcToDataBytes:
 10240                           	callstack 0
 10241                           
 10242                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10243   012278  52E6               	movf	postinc1,f,c
 10244   01227A  52E6               	movf	postinc1,f,c
 10245   01227C  52E6               	movf	postinc1,f,c
 10246   01227E  52E6               	movf	postinc1,f,c
 10247   012280                     
 10248                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10249                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10250   012280  0EFC               	movlw	-4
 10251   012282  6AE3               	clrf	plusw1,c
 10252   012284  0EFD               	movlw	-3
 10253   012286  6AE3               	clrf	plusw1,c
 10254   012288  0EFE               	movlw	-2
 10255   01228A  6AE3               	clrf	plusw1,c
 10256   01228C  0EFF               	movlw	-1
 10257   01228E  6AE3               	clrf	plusw1,c
 10258   012290                     
 10259                           ;can/can.c: 3770:     __nop();
 10260   012290  0000               	nop	
 10261   012292                     
 10262                           ;can/can.c: 3771:     __nop();
 10263   012292  0000               	nop	
 10264   012294                     
 10265                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10266                           ;stkvar	_dlc @ sp[(-4)+-1]
 10267   012294  0EFB               	movlw	-5
 10268   012296  CFE3 F001          	movff	plusw1,btemp
 10269   01229A  0E09               	movlw	9
 10270   01229C  6001               	cpfslt	btemp^0,c
 10271   01229E  EF53  F091         	goto	u1691
 10272   0122A2  EF55  F091         	goto	u1690
 10273   0122A6                     u1691:
 10274   0122A6  EFF0  F091         	goto	l4114
 10275   0122AA                     u1690:
 10276   0122AA                     
 10277                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10278                           ;stkvar	_dlc @ sp[(-4)+-1]
 10279   0122AA  0EFB               	movlw	-5
 10280   0122AC  CFE3 F00C          	movff	plusw1,btemp+11
 10281   0122B0  C00C  F005         	movff	btemp+11,btemp+4
 10282   0122B4  6A06               	clrf	(btemp+5)^0,c
 10283   0122B6  6A07               	clrf	(btemp+6)^0,c
 10284   0122B8  6A08               	clrf	(btemp+7)^0,c
 10285                           
 10286                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10287   0122BA  0EFC               	movlw	-4
 10288   0122BC  C005  FFE3         	movff	btemp+4,plusw1
 10289   0122C0  0EFD               	movlw	-3
 10290   0122C2  C006  FFE3         	movff	btemp+5,plusw1
 10291   0122C6  0EFE               	movlw	-2
 10292   0122C8  C007  FFE3         	movff	btemp+6,plusw1
 10293   0122CC  0EFF               	movlw	-1
 10294   0122CE  C008  FFE3         	movff	btemp+7,plusw1
 10295                           
 10296                           ;can/can.c: 3775:     } else {
 10297   0122D2  EF1A  F092         	goto	l4116
 10298   0122D6                     l4098:
 10299                           
 10300                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10301   0122D6  0E0C               	movlw	12
 10302   0122D8  6E09               	movwf	(btemp+8)^0,c
 10303   0122DA  6A0A               	clrf	(btemp+9)^0,c
 10304   0122DC  6A0B               	clrf	(btemp+10)^0,c
 10305   0122DE  6A0C               	clrf	(btemp+11)^0,c
 10306                           
 10307                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10308   0122E0  0EFC               	movlw	-4
 10309   0122E2  C009  FFE3         	movff	btemp+8,plusw1
 10310   0122E6  0EFD               	movlw	-3
 10311   0122E8  C00A  FFE3         	movff	btemp+9,plusw1
 10312   0122EC  0EFE               	movlw	-2
 10313   0122EE  C00B  FFE3         	movff	btemp+10,plusw1
 10314   0122F2  0EFF               	movlw	-1
 10315   0122F4  C00C  FFE3         	movff	btemp+11,plusw1
 10316                           
 10317                           ;can/can.c: 3779:                 break;
 10318   0122F8  EF1A  F092         	goto	l4116
 10319   0122FC                     l4100:
 10320                           
 10321                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10322   0122FC  0E10               	movlw	16
 10323   0122FE  6E09               	movwf	(btemp+8)^0,c
 10324   012300  6A0A               	clrf	(btemp+9)^0,c
 10325   012302  6A0B               	clrf	(btemp+10)^0,c
 10326   012304  6A0C               	clrf	(btemp+11)^0,c
 10327                           
 10328                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10329   012306  0EFC               	movlw	-4
 10330   012308  C009  FFE3         	movff	btemp+8,plusw1
 10331   01230C  0EFD               	movlw	-3
 10332   01230E  C00A  FFE3         	movff	btemp+9,plusw1
 10333   012312  0EFE               	movlw	-2
 10334   012314  C00B  FFE3         	movff	btemp+10,plusw1
 10335   012318  0EFF               	movlw	-1
 10336   01231A  C00C  FFE3         	movff	btemp+11,plusw1
 10337                           
 10338                           ;can/can.c: 3782:                 break;
 10339   01231E  EF1A  F092         	goto	l4116
 10340   012322                     l4102:
 10341                           
 10342                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10343   012322  0E14               	movlw	20
 10344   012324  6E09               	movwf	(btemp+8)^0,c
 10345   012326  6A0A               	clrf	(btemp+9)^0,c
 10346   012328  6A0B               	clrf	(btemp+10)^0,c
 10347   01232A  6A0C               	clrf	(btemp+11)^0,c
 10348                           
 10349                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10350   01232C  0EFC               	movlw	-4
 10351   01232E  C009  FFE3         	movff	btemp+8,plusw1
 10352   012332  0EFD               	movlw	-3
 10353   012334  C00A  FFE3         	movff	btemp+9,plusw1
 10354   012338  0EFE               	movlw	-2
 10355   01233A  C00B  FFE3         	movff	btemp+10,plusw1
 10356   01233E  0EFF               	movlw	-1
 10357   012340  C00C  FFE3         	movff	btemp+11,plusw1
 10358                           
 10359                           ;can/can.c: 3785:                 break;
 10360   012344  EF1A  F092         	goto	l4116
 10361   012348                     l4104:
 10362                           
 10363                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10364   012348  0E18               	movlw	24
 10365   01234A  6E09               	movwf	(btemp+8)^0,c
 10366   01234C  6A0A               	clrf	(btemp+9)^0,c
 10367   01234E  6A0B               	clrf	(btemp+10)^0,c
 10368   012350  6A0C               	clrf	(btemp+11)^0,c
 10369                           
 10370                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10371   012352  0EFC               	movlw	-4
 10372   012354  C009  FFE3         	movff	btemp+8,plusw1
 10373   012358  0EFD               	movlw	-3
 10374   01235A  C00A  FFE3         	movff	btemp+9,plusw1
 10375   01235E  0EFE               	movlw	-2
 10376   012360  C00B  FFE3         	movff	btemp+10,plusw1
 10377   012364  0EFF               	movlw	-1
 10378   012366  C00C  FFE3         	movff	btemp+11,plusw1
 10379                           
 10380                           ;can/can.c: 3788:                 break;
 10381   01236A  EF1A  F092         	goto	l4116
 10382   01236E                     l4106:
 10383                           
 10384                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10385   01236E  0E20               	movlw	32
 10386   012370  6E09               	movwf	(btemp+8)^0,c
 10387   012372  6A0A               	clrf	(btemp+9)^0,c
 10388   012374  6A0B               	clrf	(btemp+10)^0,c
 10389   012376  6A0C               	clrf	(btemp+11)^0,c
 10390                           
 10391                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10392   012378  0EFC               	movlw	-4
 10393   01237A  C009  FFE3         	movff	btemp+8,plusw1
 10394   01237E  0EFD               	movlw	-3
 10395   012380  C00A  FFE3         	movff	btemp+9,plusw1
 10396   012384  0EFE               	movlw	-2
 10397   012386  C00B  FFE3         	movff	btemp+10,plusw1
 10398   01238A  0EFF               	movlw	-1
 10399   01238C  C00C  FFE3         	movff	btemp+11,plusw1
 10400                           
 10401                           ;can/can.c: 3791:                 break;
 10402   012390  EF1A  F092         	goto	l4116
 10403   012394                     l4108:
 10404                           
 10405                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10406   012394  0E30               	movlw	48
 10407   012396  6E09               	movwf	(btemp+8)^0,c
 10408   012398  6A0A               	clrf	(btemp+9)^0,c
 10409   01239A  6A0B               	clrf	(btemp+10)^0,c
 10410   01239C  6A0C               	clrf	(btemp+11)^0,c
 10411                           
 10412                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10413   01239E  0EFC               	movlw	-4
 10414   0123A0  C009  FFE3         	movff	btemp+8,plusw1
 10415   0123A4  0EFD               	movlw	-3
 10416   0123A6  C00A  FFE3         	movff	btemp+9,plusw1
 10417   0123AA  0EFE               	movlw	-2
 10418   0123AC  C00B  FFE3         	movff	btemp+10,plusw1
 10419   0123B0  0EFF               	movlw	-1
 10420   0123B2  C00C  FFE3         	movff	btemp+11,plusw1
 10421                           
 10422                           ;can/can.c: 3794:                 break;
 10423   0123B6  EF1A  F092         	goto	l4116
 10424   0123BA                     l4110:
 10425                           
 10426                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10427   0123BA  0E40               	movlw	64
 10428   0123BC  6E09               	movwf	(btemp+8)^0,c
 10429   0123BE  6A0A               	clrf	(btemp+9)^0,c
 10430   0123C0  6A0B               	clrf	(btemp+10)^0,c
 10431   0123C2  6A0C               	clrf	(btemp+11)^0,c
 10432                           
 10433                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10434   0123C4  0EFC               	movlw	-4
 10435   0123C6  C009  FFE3         	movff	btemp+8,plusw1
 10436   0123CA  0EFD               	movlw	-3
 10437   0123CC  C00A  FFE3         	movff	btemp+9,plusw1
 10438   0123D0  0EFE               	movlw	-2
 10439   0123D2  C00B  FFE3         	movff	btemp+10,plusw1
 10440   0123D6  0EFF               	movlw	-1
 10441   0123D8  C00C  FFE3         	movff	btemp+11,plusw1
 10442                           
 10443                           ;can/can.c: 3797:                 break;
 10444   0123DC  EF1A  F092         	goto	l4116
 10445   0123E0                     l4114:
 10446                           
 10447                           ;stkvar	_dlc @ sp[(-4)+-1]
 10448   0123E0  0EFB               	movlw	-5
 10449   0123E2  50E3               	movf	plusw1,w,c
 10450   0123E4  6E0B               	movwf	(btemp+10)^0,c
 10451   0123E6  6A0C               	clrf	(btemp+11)^0,c
 10452                           
 10453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10454                           ; Switch size 1, requested type "simple"
 10455                           ; Number of cases is 1, Range of values is 0 to 0
 10456                           ; switch strategies available:
 10457                           ; Name         Instructions Cycles
 10458                           ; simple_byte            4     3 (average)
 10459                           ;	Chosen strategy is simple_byte
 10460   0123E8  500C               	movf	(btemp+11)^0,w,c
 10461   0123EA  0A00               	xorlw	0	; case 0
 10462   0123EC  B4D8               	btfsc	status,2,c
 10463   0123EE  EFFB  F091         	goto	l5606
 10464   0123F2  EF1A  F092         	goto	l4116
 10465   0123F6                     l5606:
 10466                           
 10467                           ; Switch size 1, requested type "simple"
 10468                           ; Number of cases is 7, Range of values is 9 to 15
 10469                           ; switch strategies available:
 10470                           ; Name         Instructions Cycles
 10471                           ; simple_byte           22    12 (average)
 10472                           ;	Chosen strategy is simple_byte
 10473   0123F6  500B               	movf	(btemp+10)^0,w,c
 10474   0123F8  0A09               	xorlw	9	; case 9
 10475   0123FA  B4D8               	btfsc	status,2,c
 10476   0123FC  EF6B  F091         	goto	l4098
 10477   012400  0A03               	xorlw	3	; case 10
 10478   012402  B4D8               	btfsc	status,2,c
 10479   012404  EF7E  F091         	goto	l4100
 10480   012408  0A01               	xorlw	1	; case 11
 10481   01240A  B4D8               	btfsc	status,2,c
 10482   01240C  EF91  F091         	goto	l4102
 10483   012410  0A07               	xorlw	7	; case 12
 10484   012412  B4D8               	btfsc	status,2,c
 10485   012414  EFA4  F091         	goto	l4104
 10486   012418  0A01               	xorlw	1	; case 13
 10487   01241A  B4D8               	btfsc	status,2,c
 10488   01241C  EFB7  F091         	goto	l4106
 10489   012420  0A03               	xorlw	3	; case 14
 10490   012422  B4D8               	btfsc	status,2,c
 10491   012424  EFCA  F091         	goto	l4108
 10492   012428  0A01               	xorlw	1	; case 15
 10493   01242A  B4D8               	btfsc	status,2,c
 10494   01242C  EFDD  F091         	goto	l4110
 10495   012430  EF1A  F092         	goto	l4116
 10496   012434                     l4116:
 10497                           
 10498                           ;can/can.c: 3803:     return dataBytesInObject;
 10499                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10500   012434  0EFC               	movlw	-4
 10501   012436  CFE3 F001          	movff	plusw1,btemp
 10502   01243A  0EFD               	movlw	-3
 10503   01243C  CFE3 F002          	movff	plusw1,btemp+1
 10504   012440  0EFE               	movlw	-2
 10505   012442  CFE3 F003          	movff	plusw1,btemp+2
 10506   012446  0EFF               	movlw	-1
 10507   012448  CFE3 F004          	movff	plusw1,btemp+3
 10508   01244C                     
 10509                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10510   01244C  0EFB               	movlw	251
 10511   01244E  26E1               	addwf	fsr1l,f,c
 10512   012450  0EFF               	movlw	255
 10513   012452  22E2               	addwfc	fsr1h,f,c
 10514   012454  0012               	return		;funcret
 10515   012456                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10516                           	callstack 0
 10517                           
 10518 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10519 ;; Defined at:
 10520 ;;		line 1776 in file "can/can.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;  channel         1  [STACK] enum E5287
 10523 ;;  flags           2  [STACK] PTR enum E5580
 10524 ;;		 -> txFlags(1), 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10527 ;;  a               2  [STACK] unsigned short 
 10528 ;;  spiTransferE    1  [STACK] char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  1  [STACK] char 
 10531 ;; Registers used:
 10532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;Total ram usage:        0 bytes
 10543 ;; Hardware stack levels used: 1
 10544 ;; Hardware stack levels required when called: 9
 10545 ;; This function calls:
 10546 ;;		_DRV_CANFDSPI_ReadByte
 10547 ;; This function is called by:
 10548 ;;		_CanSend
 10549 ;; This function uses a reentrant model
 10550 ;;
 10551                           
 10552                           	psect	text30
 10553   01410A                     __ptext30:
 10554                           	callstack 0
 10555   01410A                     _DRV_CANFDSPI_TransmitChannelEventGet:
 10556                           	callstack 0
 10557                           
 10558                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10559   01410A  0E07               	movlw	7
 10560   01410C  26E1               	addwf	fsr1l,f,c
 10561   01410E  0E00               	movlw	0
 10562   014110  22E2               	addwfc	fsr1h,f,c
 10563   014112                     
 10564                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 10565                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10566   014112  0EF9               	movlw	-7
 10567   014114  6AE3               	clrf	plusw1,c
 10568   014116  0EFA               	movlw	-6
 10569   014118  6AE3               	clrf	plusw1,c
 10570   01411A  0EFB               	movlw	-5
 10571   01411C  6AE3               	clrf	plusw1,c
 10572   01411E  0EFC               	movlw	-4
 10573   014120  6AE3               	clrf	plusw1,c
 10574   014122                     
 10575                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 10576                           ;stkvar	_channel @ sp[(-7)+-1]
 10577   014122  0EF8               	movlw	-8
 10578   014124  50E3               	movf	plusw1,w,c
 10579   014126  0D0C               	mullw	12
 10580   014128  0E54               	movlw	84
 10581   01412A  26F3               	addwf	243,f,c
 10582   01412C  0E00               	movlw	0
 10583   01412E  22F4               	addwfc	244,f,c
 10584                           
 10585                           ;stkvar	_a @ sp[(-7)+4]
 10586   014130  0EFD               	movlw	-3
 10587   014132  CFF3 FFE3          	movff	prodl,plusw1
 10588   014136  0EFE               	movlw	-2
 10589   014138  CFF4 FFE3          	movff	prodh,plusw1
 10590   01413C                     
 10591                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 10592                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10593   01413C  0EF9               	movlw	249
 10594   01413E  24E1               	addwf	fsr1l,w,c
 10595   014140  6E01               	movwf	btemp^0,c
 10596   014142  0EFF               	movlw	255
 10597   014144  20E2               	addwfc	fsr1h,w,c
 10598   014146  6E02               	movwf	(btemp+1)^0,c
 10599   014148  C001  FFE6         	movff	btemp,postinc1
 10600   01414C  C002  FFE6         	movff	btemp+1,postinc1
 10601                           
 10602                           ;stkvar	_a @ sp[(-9)+4]
 10603   014150  0EFB               	movlw	-5
 10604   014152  CFE3 FFE6          	movff	plusw1,postinc1
 10605   014156  CFE3 FFE6          	movff	plusw1,postinc1
 10606   01415A  ECC3  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 10607                           
 10608                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10609   01415E  0EFF               	movlw	-1
 10610   014160  C001  FFE3         	movff	btemp,plusw1
 10611   014164                     
 10612                           ;can/can.c: 1788:     if (spiTransferError) {
 10613                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10614   014164  0EFF               	movlw	-1
 10615   014166  50E3               	movf	plusw1,w,c
 10616   014168  B4D8               	btfsc	status,2,c
 10617   01416A  EFB9  F0A0         	goto	u1891
 10618   01416E  EFBB  F0A0         	goto	u1890
 10619   014172                     u1891:
 10620   014172  EFBF  F0A0         	goto	l4258
 10621   014176                     u1890:
 10622   014176                     
 10623                           ;can/can.c: 1789:         return -1;
 10624   014176  0EFF               	movlw	255
 10625   014178  6E01               	movwf	btemp^0,c
 10626   01417A  EFCC  F0A0         	goto	l453
 10627   01417E                     l4258:
 10628                           
 10629                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 10630                           ;stkvar	_flags @ sp[(-7)+-3]
 10631   01417E  0EF6               	movlw	-10
 10632   014180  CFE3 FFD9          	movff	plusw1,fsr2l
 10633   014184  0EF7               	movlw	-9
 10634   014186  CFE3 FFDA          	movff	plusw1,fsr2h
 10635                           
 10636                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10637   01418A  0EF9               	movlw	-7
 10638   01418C  50E3               	movf	plusw1,w,c
 10639   01418E  0B17               	andlw	23
 10640   014190  6EDF               	movwf	indf2,c
 10641   014192                     
 10642                           ;can/can.c: 1795:     return spiTransferError;
 10643                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10644   014192  0EFF               	movlw	-1
 10645   014194  CFE3 F001          	movff	plusw1,btemp
 10646   014198                     l453:
 10647                           
 10648                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 10649   014198  0EF6               	movlw	246
 10650   01419A  26E1               	addwf	fsr1l,f,c
 10651   01419C  0EFF               	movlw	255
 10652   01419E  22E2               	addwfc	fsr1h,f,c
 10653   0141A0  0012               	return		;funcret
 10654   0141A2                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 10655                           	callstack 0
 10656                           
 10657 ;; *************** function _XF_popEvent *****************
 10658 ;; Defined at:
 10659 ;;		line 142 in file "xf/xf.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  inISR           1  [STACK] _Bool 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  ev              6  [STACK] struct Event_
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  6  [STACK] struct Event_
 10666 ;; Registers used:
 10667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used: 1
 10679 ;; Hardware stack levels required when called: 8
 10680 ;; This function calls:
 10681 ;;		_ENTERCRITICAL
 10682 ;;		_LEAVECRITICAL
 10683 ;;		___awmod
 10684 ;; This function is called by:
 10685 ;;		_XF_executeOnce
 10686 ;; This function uses a reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text31
 10690   013930                     __ptext31:
 10691                           	callstack 0
 10692   013930                     _XF_popEvent:
 10693                           	callstack 0
 10694                           
 10695                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 10696   013930  0E0B               	movlw	11
 10697   013932  26E1               	addwf	fsr1l,f,c
 10698   013934  0E00               	movlw	0
 10699   013936  22E2               	addwfc	fsr1h,f,c
 10700   013938                     
 10701                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 10702                           ;stkvar	_ev @ sp[(-6)+0]
 10703   013938  0EFA               	movlw	-6
 10704   01393A  6AE3               	clrf	plusw1,c
 10705   01393C                     
 10706                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 10707                           ;stkvar	_ev @ sp[(-6)+0]
 10708   01393C  0EFB               	movlw	251
 10709   01393E  24E1               	addwf	fsr1l,w,c
 10710   013940  6ED9               	movwf	fsr2l,c
 10711   013942  0EFF               	movlw	255
 10712   013944  20E2               	addwfc	fsr1h,w,c
 10713   013946  6EDA               	movwf	fsr2h,c
 10714   013948  6ADE               	clrf	postinc2,c
 10715   01394A  6ADE               	clrf	postinc2,c
 10716   01394C  6ADD               	clrf	postdec2,c
 10717   01394E                     
 10718                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 10719                           ;stkvar	_inISR @ sp[(-6)+-6]
 10720   01394E  0EF4               	movlw	-12
 10721   013950  50E3               	movf	plusw1,w,c
 10722   013952  6EE6               	movwf	postinc1,c
 10723   013954  ECDD  F0A4         	call	_ENTERCRITICAL	;wreg free
 10724   013958                     
 10725                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 10726   013958  EE23  F0DF         	lfsr	2,_theXF+279
 10727   01395C  50DF               	movf	indf2,w,c
 10728   01395E  A4D8               	btfss	status,2,c
 10729   013960  EFB4  F09C         	goto	u2771
 10730   013964  EFB6  F09C         	goto	u2770
 10731   013968                     u2771:
 10732   013968  EFCB  F09C         	goto	l5060
 10733   01396C                     u2770:
 10734   01396C                     l5054:
 10735                           
 10736                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 10737                           ;stkvar	_inISR @ sp[(-6)+-6]
 10738   01396C  0EF4               	movlw	-12
 10739   01396E  50E3               	movf	plusw1,w,c
 10740   013970  6EE6               	movwf	postinc1,c
 10741   013972  ECD1  F0A4         	call	_LEAVECRITICAL	;wreg free
 10742   013976                     
 10743                           ;xf/xf.c: 152:       return ev;
 10744                           ;stkvar	_ev @ sp[(-6)+0]
 10745   013976  0EFA               	movlw	250
 10746   013978  24E1               	addwf	fsr1l,w,c
 10747   01397A  6ED9               	movwf	fsr2l,c
 10748   01397C  0EFF               	movlw	255
 10749   01397E  20E2               	addwfc	fsr1h,w,c
 10750   013980  6EDA               	movwf	fsr2h,c
 10751                           
 10752                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 10753   013982  0E06               	movlw	6
 10754   013984  6E01               	movwf	btemp^0,c
 10755   013986  0EF4               	movlw	-12
 10756   013988                     us278999:
 10757   013988  CFDE FFE3          	movff	postinc2,plusw1
 10758   01398C  28E8               	incf	wreg,w,c
 10759   01398E  2E01               	decfsz	btemp^0,f,c
 10760   013990  D7FB               	bra	us278999
 10761   013992  EFF9  F09C         	goto	l1227
 10762   013996                     l5060:
 10763                           
 10764                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10765   013996  EE23  F0DD         	lfsr	2,_theXF+277
 10766   01399A  50DF               	movf	indf2,w,c
 10767   01399C  0D06               	mullw	6
 10768   01399E  0E28               	movlw	low (_theXF+96)
 10769   0139A0  24F3               	addwf	243,w,c
 10770   0139A2  6ED9               	movwf	fsr2l,c
 10771   0139A4  0E03               	movlw	high (_theXF+96)
 10772   0139A6  20F4               	addwfc	prodh,w,c
 10773   0139A8  6EDA               	movwf	fsr2h,c
 10774                           
 10775                           ;stkvar	_ev @ sp[(-6)+0]
 10776   0139AA  0E06               	movlw	6
 10777   0139AC  6E01               	movwf	btemp^0,c
 10778   0139AE  0EFA               	movlw	-6
 10779   0139B0                     us279999:
 10780   0139B0  CFDE FFE3          	movff	postinc2,plusw1
 10781   0139B4  28E8               	incf	wreg,w,c
 10782   0139B6  2E01               	decfsz	btemp^0,f,c
 10783   0139B8  D7FB               	bra	us279999
 10784   0139BA                     
 10785                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10786   0139BA  0E1E               	movlw	30
 10787   0139BC  6EE6               	movwf	postinc1,c
 10788   0139BE  0E00               	movlw	0
 10789   0139C0  6EE6               	movwf	postinc1,c
 10790   0139C2  EE23  F0DD         	lfsr	2,_theXF+277
 10791   0139C6  50DF               	movf	indf2,w,c
 10792   0139C8  6E0B               	movwf	(btemp+10)^0,c
 10793   0139CA  6A0C               	clrf	(btemp+11)^0,c
 10794   0139CC  0E01               	movlw	1
 10795   0139CE  260B               	addwf	(btemp+10)^0,f,c
 10796   0139D0  0E00               	movlw	0
 10797   0139D2  220C               	addwfc	(btemp+11)^0,f,c
 10798   0139D4  C00B  FFE6         	movff	btemp+10,postinc1
 10799   0139D8  C00C  FFE6         	movff	btemp+11,postinc1
 10800   0139DC  ECC6  F096         	call	___awmod	;wreg free
 10801   0139E0  C001  F3DD         	movff	btemp,_theXF+277
 10802   0139E4                     
 10803                           ;xf/xf.c: 156:     theXF.countEvt--;
 10804   0139E4  C3DF  FFE8         	movff	_theXF+279,wreg
 10805   0139E8  0FFF               	addlw	-1
 10806   0139EA  CFE8 F3DF          	movff	wreg,_theXF+279
 10807   0139EE  EFB6  F09C         	goto	l5054
 10808   0139F2                     l1227:
 10809                           
 10810                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10811   0139F2  0EFA               	movlw	250
 10812   0139F4  26E1               	addwf	fsr1l,f,c
 10813   0139F6  0EFF               	movlw	255
 10814   0139F8  22E2               	addwfc	fsr1h,f,c
 10815   0139FA  0012               	return		;funcret
 10816   0139FC                     __end_of_XF_popEvent:
 10817                           	callstack 0
 10818                           
 10819 ;; *************** function ___awmod *****************
 10820 ;; Defined at:
 10821 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;  dividend        2  [STACK] int 
 10824 ;;  divisor         2  [STACK] int 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  sign            1  [STACK] unsigned char 
 10827 ;;  counter         1  [STACK] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  2  [STACK] int 
 10830 ;; Registers used:
 10831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10841 ;;Total ram usage:        0 bytes
 10842 ;; Hardware stack levels used: 1
 10843 ;; Hardware stack levels required when called: 7
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_XF_pushEvent
 10848 ;;		_XF_popEvent
 10849 ;; This function uses a reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text32
 10853   012D8C                     __ptext32:
 10854                           	callstack 0
 10855   012D8C                     ___awmod:
 10856                           	callstack 0
 10857                           
 10858                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10859   012D8C  52E6               	movf	postinc1,f,c
 10860   012D8E  52E6               	movf	postinc1,f,c
 10861   012D90                     
 10862                           ;stkvar	_sign @ sp[(-2)+0]
 10863   012D90  0EFE               	movlw	-2
 10864   012D92  6AE3               	clrf	plusw1,c
 10865   012D94                     
 10866                           ;stkvar	_dividend @ sp[(-2)+-2]
 10867   012D94  0EFD               	movlw	-3
 10868   012D96  BEE3               	btfsc	plusw1,7,c
 10869   012D98  EFD2  F096         	goto	u1940
 10870   012D9C  EFD0  F096         	goto	u1941
 10871   012DA0                     u1941:
 10872   012DA0  EFDB  F096         	goto	l4318
 10873   012DA4                     u1940:
 10874   012DA4                     
 10875                           ;stkvar	_dividend @ sp[(-2)+-2]
 10876                           ;stkvar	_dividend @ sp[(-2)+-2]
 10877   012DA4  0EFC               	movlw	-4
 10878   012DA6  6CE3               	negf	plusw1,c
 10879   012DA8  0EFD               	movlw	-3
 10880   012DAA  1EE3               	comf	plusw1,f,c
 10881   012DAC  B0D8               	btfsc	status,0,c
 10882   012DAE  2AE3               	incf	plusw1,f,c
 10883   012DB0                     
 10884                           ;stkvar	_sign @ sp[(-2)+0]
 10885   012DB0  0EFE               	movlw	-2
 10886   012DB2  6AE3               	clrf	plusw1,c
 10887   012DB4  2AE3               	incf	plusw1,f,c
 10888   012DB6                     l4318:
 10889                           
 10890                           ;stkvar	_divisor @ sp[(-2)+-4]
 10891   012DB6  0EFB               	movlw	-5
 10892   012DB8  BEE3               	btfsc	plusw1,7,c
 10893   012DBA  EFE3  F096         	goto	u1950
 10894   012DBE  EFE1  F096         	goto	u1951
 10895   012DC2                     u1951:
 10896   012DC2  EFE9  F096         	goto	l4322
 10897   012DC6                     u1950:
 10898   012DC6                     
 10899                           ;stkvar	_divisor @ sp[(-2)+-4]
 10900                           ;stkvar	_divisor @ sp[(-2)+-4]
 10901   012DC6  0EFA               	movlw	-6
 10902   012DC8  6CE3               	negf	plusw1,c
 10903   012DCA  0EFB               	movlw	-5
 10904   012DCC  1EE3               	comf	plusw1,f,c
 10905   012DCE  B0D8               	btfsc	status,0,c
 10906   012DD0  2AE3               	incf	plusw1,f,c
 10907   012DD2                     l4322:
 10908                           
 10909                           ;stkvar	_divisor @ sp[(-2)+-4]
 10910   012DD2  0EFA               	movlw	-6
 10911   012DD4  CFE3 F001          	movff	plusw1,btemp
 10912   012DD8  0EFB               	movlw	-5
 10913   012DDA  50E3               	movf	plusw1,w,c
 10914   012DDC  1001               	iorwf	btemp^0,w,c
 10915   012DDE  B4D8               	btfsc	status,2,c
 10916   012DE0  EFF4  F096         	goto	u1961
 10917   012DE4  EFF6  F096         	goto	u1960
 10918   012DE8                     u1961:
 10919   012DE8  EF51  F097         	goto	l4340
 10920   012DEC                     u1960:
 10921   012DEC                     
 10922                           ;stkvar	_counter @ sp[(-2)+1]
 10923   012DEC  0EFF               	movlw	-1
 10924   012DEE  6AE3               	clrf	plusw1,c
 10925   012DF0  2AE3               	incf	plusw1,f,c
 10926   012DF2  EF0C  F097         	goto	l4330
 10927   012DF6                     l4326:
 10928                           
 10929                           ;stkvar	_divisor @ sp[(-2)+-4]
 10930   012DF6  0EFA               	movlw	-6
 10931   012DF8  50E3               	movf	plusw1,w,c
 10932   012DFA  90D8               	bcf	status,0,c
 10933   012DFC  34E8               	rlcf	wreg,w,c
 10934   012DFE  6E01               	movwf	btemp^0,c
 10935   012E00  0EFA               	movlw	-6
 10936   012E02  C001  FFE3         	movff	btemp,plusw1
 10937   012E06  0EFB               	movlw	-5
 10938   012E08  50E3               	movf	plusw1,w,c
 10939   012E0A  34E8               	rlcf	wreg,w,c
 10940   012E0C  6E01               	movwf	btemp^0,c
 10941   012E0E  0EFB               	movlw	-5
 10942   012E10  C001  FFE3         	movff	btemp,plusw1
 10943   012E14                     
 10944                           ;stkvar	_counter @ sp[(-2)+1]
 10945   012E14  0EFF               	movlw	-1
 10946   012E16  2AE3               	incf	plusw1,f,c
 10947   012E18                     l4330:
 10948                           
 10949                           ;stkvar	_divisor @ sp[(-2)+-4]
 10950   012E18  0EFB               	movlw	-5
 10951   012E1A  AEE3               	btfss	plusw1,7,c
 10952   012E1C  EF12  F097         	goto	u1971
 10953   012E20  EF14  F097         	goto	u1970
 10954   012E24                     u1971:
 10955   012E24  EFFB  F096         	goto	l4326
 10956   012E28                     u1970:
 10957   012E28                     l4332:
 10958                           
 10959                           ;stkvar	_divisor @ sp[(-2)+-4]
 10960   012E28  0EFA               	movlw	-6
 10961   012E2A  CFE3 F00B          	movff	plusw1,btemp+10
 10962   012E2E  0EFB               	movlw	-5
 10963   012E30  CFE3 F00C          	movff	plusw1,btemp+11
 10964                           
 10965                           ;stkvar	_dividend @ sp[(-2)+-2]
 10966   012E34  0EFC               	movlw	-4
 10967   012E36  CFE3 F009          	movff	plusw1,btemp+8
 10968   012E3A  0EFD               	movlw	-3
 10969   012E3C  CFE3 F00A          	movff	plusw1,btemp+9
 10970   012E40  500B               	movf	(btemp+10)^0,w,c
 10971   012E42  5C09               	subwf	(btemp+8)^0,w,c
 10972   012E44  500C               	movf	(btemp+11)^0,w,c
 10973   012E46  580A               	subwfb	(btemp+9)^0,w,c
 10974   012E48  A0D8               	btfss	status,0,c
 10975   012E4A  EF29  F097         	goto	u1981
 10976   012E4E  EF2B  F097         	goto	u1980
 10977   012E52                     u1981:
 10978   012E52  EF3D  F097         	goto	l4336
 10979   012E56                     u1980:
 10980   012E56                     
 10981                           ;stkvar	_divisor @ sp[(-2)+-4]
 10982                           ;stkvar	_dividend @ sp[(-2)+-2]
 10983   012E56  0EFC               	movlw	-4
 10984   012E58  50E3               	movf	plusw1,w,c
 10985   012E5A  6E01               	movwf	btemp^0,c
 10986   012E5C  0EFA               	movlw	-6
 10987   012E5E  50E3               	movf	plusw1,w,c
 10988   012E60  5E01               	subwf	btemp^0,f,c
 10989   012E62  0EFC               	movlw	-4
 10990   012E64  C001  FFE3         	movff	btemp,plusw1
 10991   012E68  0EFD               	movlw	-3
 10992   012E6A  50E3               	movf	plusw1,w,c
 10993   012E6C  6E01               	movwf	btemp^0,c
 10994   012E6E  0EFB               	movlw	-5
 10995   012E70  50E3               	movf	plusw1,w,c
 10996   012E72  5A01               	subwfb	btemp^0,f,c
 10997   012E74  0EFD               	movlw	-3
 10998   012E76  C001  FFE3         	movff	btemp,plusw1
 10999   012E7A                     l4336:
 11000                           
 11001                           ;stkvar	_divisor @ sp[(-2)+-4]
 11002   012E7A  90D8               	bcf	status,0,c
 11003   012E7C  0EFB               	movlw	-5
 11004   012E7E  32E3               	rrcf	plusw1,f,c
 11005   012E80  0EFA               	movlw	-6
 11006   012E82  32E3               	rrcf	plusw1,f,c
 11007   012E84                     
 11008                           ;stkvar	_counter @ sp[(-2)+1]
 11009   012E84  0EFF               	movlw	-1
 11010   012E86  50E3               	movf	plusw1,w,c
 11011   012E88  6E01               	movwf	btemp^0,c
 11012   012E8A  0E01               	movlw	1
 11013   012E8C  5E01               	subwf	btemp^0,f,c
 11014   012E8E  0EFF               	movlw	-1
 11015   012E90  C001  FFE3         	movff	btemp,plusw1
 11016   012E94  A4D8               	btfss	status,2,c
 11017   012E96  EF4F  F097         	goto	u1991
 11018   012E9A  EF51  F097         	goto	u1990
 11019   012E9E                     u1991:
 11020   012E9E  EF14  F097         	goto	l4332
 11021   012EA2                     u1990:
 11022   012EA2                     l4340:
 11023                           
 11024                           ;stkvar	_sign @ sp[(-2)+0]
 11025   012EA2  0EFE               	movlw	-2
 11026   012EA4  50E3               	movf	plusw1,w,c
 11027   012EA6  B4D8               	btfsc	status,2,c
 11028   012EA8  EF58  F097         	goto	u2001
 11029   012EAC  EF5A  F097         	goto	u2000
 11030   012EB0                     u2001:
 11031   012EB0  EF60  F097         	goto	l4344
 11032   012EB4                     u2000:
 11033   012EB4                     
 11034                           ;stkvar	_dividend @ sp[(-2)+-2]
 11035                           ;stkvar	_dividend @ sp[(-2)+-2]
 11036   012EB4  0EFC               	movlw	-4
 11037   012EB6  6CE3               	negf	plusw1,c
 11038   012EB8  0EFD               	movlw	-3
 11039   012EBA  1EE3               	comf	plusw1,f,c
 11040   012EBC  B0D8               	btfsc	status,0,c
 11041   012EBE  2AE3               	incf	plusw1,f,c
 11042   012EC0                     l4344:
 11043                           
 11044                           ;stkvar	_dividend @ sp[(-2)+-2]
 11045   012EC0  0EFC               	movlw	-4
 11046   012EC2  CFE3 F001          	movff	plusw1,btemp
 11047   012EC6  0EFD               	movlw	-3
 11048   012EC8  CFE3 F002          	movff	plusw1,btemp+1
 11049   012ECC                     
 11050                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 11051   012ECC  0EFA               	movlw	250
 11052   012ECE  26E1               	addwf	fsr1l,f,c
 11053   012ED0  0EFF               	movlw	255
 11054   012ED2  22E2               	addwfc	fsr1h,f,c
 11055   012ED4  0012               	return		;funcret
 11056   012ED6                     __end_of___awmod:
 11057                           	callstack 0
 11058                           
 11059 ;; *************** function _LEAVECRITICAL *****************
 11060 ;; Defined at:
 11061 ;;		line 265 in file "xf/xf.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  inISR           1  [STACK] _Bool 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;		None
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  1  [STACK] void 
 11068 ;; Registers used:
 11069 ;;		wreg, fsr1l, fsr1h, status,2
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;Total ram usage:        0 bytes
 11080 ;; Hardware stack levels used: 1
 11081 ;; Hardware stack levels required when called: 7
 11082 ;; This function calls:
 11083 ;;		Nothing
 11084 ;; This function is called by:
 11085 ;;		_XF_pushEvent
 11086 ;;		_XF_popEvent
 11087 ;;		_XF_scheduleTimer
 11088 ;;		_XF_unscheduleTimer
 11089 ;; This function uses a reentrant model
 11090 ;;
 11091                           
 11092                           	psect	text33
 11093   0149A2                     __ptext33:
 11094                           	callstack 0
 11095   0149A2                     _LEAVECRITICAL:
 11096                           	callstack 10
 11097   0149A2                     
 11098                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11099                           ;stkvar	_inISR @ sp[(0)+-1]
 11100   0149A2  0EFF               	movlw	-1
 11101   0149A4  50E3               	movf	plusw1,w,c
 11102   0149A6  A4D8               	btfss	status,2,c
 11103   0149A8  EFD8  F0A4         	goto	u1711
 11104   0149AC  EFDA  F0A4         	goto	u1710
 11105   0149B0                     u1711:
 11106   0149B0  EFDB  F0A4         	goto	l1254
 11107   0149B4                     u1710:
 11108   0149B4                     
 11109                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11110   0149B4  8EF2               	bsf	242,7,c	;volatile
 11111   0149B6                     l1254:
 11112                           
 11113                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11114   0149B6  52E5               	movf	postdec1,f,c
 11115   0149B8  0012               	return		;funcret
 11116   0149BA                     __end_of_LEAVECRITICAL:
 11117                           	callstack 0
 11118                           
 11119 ;; *************** function _ENTERCRITICAL *****************
 11120 ;; Defined at:
 11121 ;;		line 250 in file "xf/xf.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;  inISR           1  [STACK] _Bool 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1  [STACK] void 
 11128 ;; Registers used:
 11129 ;;		wreg, fsr1l, fsr1h, status,2
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;Total ram usage:        0 bytes
 11140 ;; Hardware stack levels used: 1
 11141 ;; Hardware stack levels required when called: 7
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_XF_pushEvent
 11146 ;;		_XF_popEvent
 11147 ;;		_XF_scheduleTimer
 11148 ;;		_XF_unscheduleTimer
 11149 ;; This function uses a reentrant model
 11150 ;;
 11151                           
 11152                           	psect	text34
 11153   0149BA                     __ptext34:
 11154                           	callstack 0
 11155   0149BA                     _ENTERCRITICAL:
 11156                           	callstack 10
 11157   0149BA                     
 11158                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11159                           ;stkvar	_inISR @ sp[(0)+-1]
 11160   0149BA  0EFF               	movlw	-1
 11161   0149BC  50E3               	movf	plusw1,w,c
 11162   0149BE  A4D8               	btfss	status,2,c
 11163   0149C0  EFE4  F0A4         	goto	u1701
 11164   0149C4  EFE6  F0A4         	goto	u1700
 11165   0149C8                     u1701:
 11166   0149C8  EFE7  F0A4         	goto	l1250
 11167   0149CC                     u1700:
 11168   0149CC                     
 11169                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11170   0149CC  9EF2               	bcf	242,7,c	;volatile
 11171   0149CE                     l1250:
 11172                           
 11173                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11174   0149CE  52E5               	movf	postdec1,f,c
 11175   0149D0  0012               	return		;funcret
 11176   0149D2                     __end_of_ENTERCRITICAL:
 11177                           	callstack 0
 11178                           
 11179 ;; *************** function _SYSTEM_Initialize *****************
 11180 ;; Defined at:
 11181 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;		None
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;		None
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  1  [STACK] void 
 11188 ;; Registers used:
 11189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;Total ram usage:        0 bytes
 11200 ;; Hardware stack levels used: 1
 11201 ;; Hardware stack levels required when called: 9
 11202 ;; This function calls:
 11203 ;;		_INTERRUPT_Initialize
 11204 ;;		_OSCILLATOR_Initialize
 11205 ;;		_PIN_MANAGER_Initialize
 11206 ;;		_SPI2_Initialize
 11207 ;;		_TMR0_Initialize
 11208 ;; This function is called by:
 11209 ;;		_main
 11210 ;; This function uses a reentrant model
 11211 ;;
 11212                           
 11213                           	psect	text35
 11214   0149D2                     __ptext35:
 11215                           	callstack 0
 11216   0149D2                     _SYSTEM_Initialize:
 11217                           	callstack 21
 11218   0149D2                     
 11219                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11220   0149D2  EC06  F0A5         	call	_INTERRUPT_Initialize	;wreg free
 11221   0149D6                     
 11222                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11223   0149D6  ECF4  F0A4         	call	_SPI2_Initialize	;wreg free
 11224                           
 11225                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11226   0149DA  EC51  F0A4         	call	_PIN_MANAGER_Initialize	;wreg free
 11227                           
 11228                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11229   0149DE  ECFC  F0A4         	call	_OSCILLATOR_Initialize	;wreg free
 11230   0149E2                     
 11231                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11232   0149E2  ECE5  F0A3         	call	_TMR0_Initialize	;wreg free
 11233   0149E6                     
 11234                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11235   0149E6  0012               	return		;funcret
 11236   0149E8                     __end_of_SYSTEM_Initialize:
 11237                           	callstack 0
 11238                           
 11239 ;; *************** function _TMR0_Initialize *****************
 11240 ;; Defined at:
 11241 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11242 ;; Parameters:    Size  Location     Type
 11243 ;;		None
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;		None
 11246 ;; Return value:  Size  Location     Type
 11247 ;;                  1  [STACK] void 
 11248 ;; Registers used:
 11249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11259 ;;Total ram usage:        0 bytes
 11260 ;; Hardware stack levels used: 1
 11261 ;; Hardware stack levels required when called: 8
 11262 ;; This function calls:
 11263 ;;		_TMR0_SetInterruptHandler
 11264 ;; This function is called by:
 11265 ;;		_SYSTEM_Initialize
 11266 ;; This function uses a reentrant model
 11267 ;;
 11268                           
 11269                           	psect	text36
 11270   0147CA                     __ptext36:
 11271                           	callstack 0
 11272   0147CA                     _TMR0_Initialize:
 11273                           	callstack 21
 11274   0147CA                     
 11275                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11276   0147CA  9CD5               	bcf	213,6,c	;volatile
 11277   0147CC                     
 11278                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11279   0147CC  0EFD               	movlw	253
 11280   0147CE  6ED7               	movwf	215,c	;volatile
 11281                           
 11282                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11283   0147D0  0E9D               	movlw	157
 11284   0147D2  6ED6               	movwf	214,c	;volatile
 11285   0147D4                     
 11286                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11287   0147D4  50D6               	movf	214,w,c	;volatile
 11288   0147D6  CFD7 F001          	movff	4055,btemp	;volatile
 11289   0147DA  6A02               	clrf	(btemp+1)^0,c
 11290   0147DC  C001  F002         	movff	btemp,btemp+1
 11291   0147E0  6A01               	clrf	btemp^0,c
 11292   0147E2  1001               	iorwf	btemp^0,w,c
 11293   0147E4  6E37               	movwf	_timer0ReloadVal^0,c	;volatile
 11294   0147E6  5002               	movf	(btemp+1)^0,w,c
 11295   0147E8  6E38               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11296   0147EA                     
 11297                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11298   0147EA  94F2               	bcf	242,2,c	;volatile
 11299   0147EC                     
 11300                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11301   0147EC  8AF2               	bsf	242,5,c	;volatile
 11302   0147EE                     
 11303                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11304   0147EE  0E10               	movlw	low _TMR0_DefaultInterruptHandler
 11305   0147F0  6EE6               	movwf	postinc1,c
 11306   0147F2  0E4A               	movlw	high _TMR0_DefaultInterruptHandler
 11307   0147F4  6EE6               	movwf	postinc1,c
 11308   0147F6  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11309   0147F8  6EE6               	movwf	postinc1,c
 11310   0147FA  ECA5  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
 11311   0147FE                     
 11312                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11313   0147FE  0E97               	movlw	151
 11314   014800  6ED5               	movwf	213,c	;volatile
 11315   014802                     
 11316                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11317   014802  0012               	return		;funcret
 11318   014804                     __end_of_TMR0_Initialize:
 11319                           	callstack 0
 11320                           
 11321 ;; *************** function _TMR0_SetInterruptHandler *****************
 11322 ;; Defined at:
 11323 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11324 ;; Parameters:    Size  Location     Type
 11325 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11326 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;		None
 11329 ;; Return value:  Size  Location     Type
 11330 ;;                  1  [STACK] void 
 11331 ;; Registers used:
 11332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11333 ;; Tracked objects:
 11334 ;;		On entry : 0/0
 11335 ;;		On exit  : 0/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;Total ram usage:        0 bytes
 11343 ;; Hardware stack levels used: 1
 11344 ;; Hardware stack levels required when called: 7
 11345 ;; This function calls:
 11346 ;;		Nothing
 11347 ;; This function is called by:
 11348 ;;		_TMR0_Initialize
 11349 ;;		_main
 11350 ;; This function uses a reentrant model
 11351 ;;
 11352                           
 11353                           	psect	text37
 11354   01494A                     __ptext37:
 11355                           	callstack 0
 11356   01494A                     _TMR0_SetInterruptHandler:
 11357                           	callstack 23
 11358   01494A                     
 11359                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11360                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11361   01494A  50E1               	movf	fsr1l,w,c
 11362   01494C  0FFD               	addlw	-3
 11363   01494E  6ED9               	movwf	fsr2l,c
 11364   014950  50E2               	movf	fsr1h,w,c
 11365   014952  6EDA               	movwf	fsr2h,c
 11366   014954  0EFF               	movlw	255
 11367   014956  22DA               	addwfc	fsr2h,f,c
 11368   014958  CFDE F050          	movff	postinc2,_TMR0_InterruptHandler
 11369   01495C  CFDE F051          	movff	postinc2,_TMR0_InterruptHandler+1
 11370   014960  CFDD F052          	movff	postdec2,_TMR0_InterruptHandler+2
 11371   014964                     
 11372                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11373   014964  52E5               	movf	postdec1,f,c
 11374   014966  52E5               	movf	postdec1,f,c
 11375   014968  52E5               	movf	postdec1,f,c
 11376   01496A  0012               	return		;funcret
 11377   01496C                     __end_of_TMR0_SetInterruptHandler:
 11378                           	callstack 0
 11379                           
 11380 ;; *************** function _SPI2_Initialize *****************
 11381 ;; Defined at:
 11382 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;		None
 11385 ;; Auto vars:     Size  Location     Type
 11386 ;;		None
 11387 ;; Return value:  Size  Location     Type
 11388 ;;                  1  [STACK] void 
 11389 ;; Registers used:
 11390 ;;		wreg, status,2
 11391 ;; Tracked objects:
 11392 ;;		On entry : 0/0
 11393 ;;		On exit  : 0/0
 11394 ;;		Unchanged: 0/0
 11395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;Total ram usage:        0 bytes
 11401 ;; Hardware stack levels used: 1
 11402 ;; Hardware stack levels required when called: 7
 11403 ;; This function calls:
 11404 ;;		Nothing
 11405 ;; This function is called by:
 11406 ;;		_SYSTEM_Initialize
 11407 ;; This function uses a reentrant model
 11408 ;;
 11409                           
 11410                           	psect	text38
 11411   0149E8                     __ptext38:
 11412                           	callstack 0
 11413   0149E8                     _SPI2_Initialize:
 11414                           	callstack 22
 11415   0149E8                     
 11416                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11417   0149E8  0E40               	movlw	64
 11418   0149EA  6E64               	movwf	100,c	;volatile
 11419                           
 11420                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11421   0149EC  0E01               	movlw	1
 11422   0149EE  6E63               	movwf	99,c	;volatile
 11423   0149F0                     
 11424                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11425   0149F0  6A65               	clrf	101,c	;volatile
 11426   0149F2                     
 11427                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11428   0149F2  9C95               	bcf	149,6,c	;volatile
 11429   0149F4                     
 11430                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11431   0149F4  9A63               	bcf	99,5,c	;volatile
 11432   0149F6                     
 11433                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11434   0149F6  0012               	return		;funcret
 11435   0149F8                     __end_of_SPI2_Initialize:
 11436                           	callstack 0
 11437                           
 11438 ;; *************** function _PIN_MANAGER_Initialize *****************
 11439 ;; Defined at:
 11440 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11441 ;; Parameters:    Size  Location     Type
 11442 ;;		None
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;		None
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1  [STACK] void 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11458 ;;Total ram usage:        0 bytes
 11459 ;; Hardware stack levels used: 1
 11460 ;; Hardware stack levels required when called: 7
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_SYSTEM_Initialize
 11465 ;; This function uses a reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text39
 11469   0148A2                     __ptext39:
 11470                           	callstack 0
 11471   0148A2                     _PIN_MANAGER_Initialize:
 11472                           	callstack 22
 11473   0148A2                     
 11474                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11475   0148A2  6A8D               	clrf	141,c	;volatile
 11476                           
 11477                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11478   0148A4  6A91               	clrf	145,c	;volatile
 11479                           
 11480                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11481   0148A6  6A8C               	clrf	140,c	;volatile
 11482                           
 11483                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11484   0148A8  6A89               	clrf	137,c	;volatile
 11485                           
 11486                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11487   0148AA  6A8E               	clrf	142,c	;volatile
 11488                           
 11489                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11490   0148AC  6A8A               	clrf	138,c	;volatile
 11491                           
 11492                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11493   0148AE  6A8F               	clrf	143,c	;volatile
 11494                           
 11495                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11496   0148B0  6A8B               	clrf	139,c	;volatile
 11497                           
 11498                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11499   0148B2  6A90               	clrf	144,c	;volatile
 11500                           
 11501                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11502   0148B4  6896               	setf	150,c	;volatile
 11503                           
 11504                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11505   0148B6  6897               	setf	151,c	;volatile
 11506   0148B8                     
 11507                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11508   0148B8  0E3F               	movlw	63
 11509   0148BA  6E92               	movwf	146,c	;volatile
 11510   0148BC                     
 11511                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11512   0148BC  6898               	setf	152,c	;volatile
 11513   0148BE                     
 11514                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11515   0148BE  6893               	setf	147,c	;volatile
 11516   0148C0                     
 11517                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11518   0148C0  6899               	setf	153,c	;volatile
 11519   0148C2                     
 11520                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11521   0148C2  6894               	setf	148,c	;volatile
 11522                           
 11523                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11524   0148C4  0EAF               	movlw	175
 11525   0148C6  6E95               	movwf	149,c	;volatile
 11526   0148C8                     
 11527                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11528   0148C8  689A               	setf	154,c	;volatile
 11529                           
 11530                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11531   0148CA  0EF0               	movlw	-16
 11532   0148CC  16C1               	andwf	193,f,c	;volatile
 11533   0148CE                     
 11534                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11535   0148CE  0012               	return		;funcret
 11536   0148D0                     __end_of_PIN_MANAGER_Initialize:
 11537                           	callstack 0
 11538                           
 11539 ;; *************** function _OSCILLATOR_Initialize *****************
 11540 ;; Defined at:
 11541 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11542 ;; Parameters:    Size  Location     Type
 11543 ;;		None
 11544 ;; Auto vars:     Size  Location     Type
 11545 ;;		None
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  1  [STACK] void 
 11548 ;; Registers used:
 11549 ;;		wreg, status,2
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/0
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;Total ram usage:        0 bytes
 11560 ;; Hardware stack levels used: 1
 11561 ;; Hardware stack levels required when called: 7
 11562 ;; This function calls:
 11563 ;;		Nothing
 11564 ;; This function is called by:
 11565 ;;		_SYSTEM_Initialize
 11566 ;; This function uses a reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text40
 11570   0149F8                     __ptext40:
 11571                           	callstack 0
 11572   0149F8                     _OSCILLATOR_Initialize:
 11573                           	callstack 22
 11574   0149F8                     
 11575                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 11576   0149F8  6AD3               	clrf	211,c	;volatile
 11577   0149FA                     
 11578                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 11579   0149FA  0E50               	movlw	80
 11580   0149FC  6E9B               	movwf	155,c	;volatile
 11581   0149FE                     
 11582                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 11583   0149FE  0012               	return		;funcret
 11584   014A00                     __end_of_OSCILLATOR_Initialize:
 11585                           	callstack 0
 11586                           
 11587 ;; *************** function _INTERRUPT_Initialize *****************
 11588 ;; Defined at:
 11589 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11590 ;; Parameters:    Size  Location     Type
 11591 ;;		None
 11592 ;; Auto vars:     Size  Location     Type
 11593 ;;		None
 11594 ;; Return value:  Size  Location     Type
 11595 ;;                  1  [STACK] void 
 11596 ;; Registers used:
 11597 ;;		None
 11598 ;; Tracked objects:
 11599 ;;		On entry : 0/0
 11600 ;;		On exit  : 0/0
 11601 ;;		Unchanged: 0/0
 11602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;Total ram usage:        0 bytes
 11608 ;; Hardware stack levels used: 1
 11609 ;; Hardware stack levels required when called: 7
 11610 ;; This function calls:
 11611 ;;		Nothing
 11612 ;; This function is called by:
 11613 ;;		_SYSTEM_Initialize
 11614 ;; This function uses a reentrant model
 11615 ;;
 11616                           
 11617                           	psect	text41
 11618   014A0C                     __ptext41:
 11619                           	callstack 0
 11620   014A0C                     _INTERRUPT_Initialize:
 11621                           	callstack 22
 11622   014A0C                     
 11623                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 11624   014A0C  9ED0               	bcf	208,7,c	;volatile
 11625   014A0E                     
 11626                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 11627   014A0E  0012               	return		;funcret
 11628   014A10                     __end_of_INTERRUPT_Initialize:
 11629                           	callstack 0
 11630                           
 11631 ;; *************** function _CanSetFilter *****************
 11632 ;; Defined at:
 11633 ;;		line 231 in file "can/can.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;  filter          1  [STACK] enum E5322
 11636 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 11637 ;;		 -> filterObj(6), 
 11638 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 11639 ;;		 -> maskObj(6), 
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;		None
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  1  [STACK] void 
 11644 ;; Registers used:
 11645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11655 ;;Total ram usage:        0 bytes
 11656 ;; Hardware stack levels used: 1
 11657 ;; Hardware stack levels required when called: 10
 11658 ;; This function calls:
 11659 ;;		_DRV_CANFDSPI_FilterDisable
 11660 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 11661 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 11662 ;;		_DRV_CANFDSPI_FilterToFifoLink
 11663 ;; This function is called by:
 11664 ;;		_main
 11665 ;; This function uses a reentrant model
 11666 ;;
 11667                           
 11668                           	psect	text42
 11669   014454                     __ptext42:
 11670                           	callstack 0
 11671   014454                     _CanSetFilter:
 11672                           	callstack 20
 11673   014454                     
 11674                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 11675                           ;stkvar	_filter @ sp[(0)+-1]
 11676   014454  0EFF               	movlw	-1
 11677   014456  50E3               	movf	plusw1,w,c
 11678   014458  6EE6               	movwf	postinc1,c
 11679   01445A  EC1C  F0A1         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 11680   01445E                     
 11681                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 11682                           ;stkvar	_fObj @ sp[(0)+-3]
 11683   01445E  0EFD               	movlw	-3
 11684   014460  CFE3 FFE6          	movff	plusw1,postinc1
 11685   014464  CFE3 FFE6          	movff	plusw1,postinc1
 11686                           
 11687                           ;stkvar	_filter @ sp[(-2)+-1]
 11688   014468  0EFD               	movlw	-3
 11689   01446A  50E3               	movf	plusw1,w,c
 11690   01446C  6EE6               	movwf	postinc1,c
 11691   01446E  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 11692   014472                     
 11693                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 11694                           ;stkvar	_fObj @ sp[(0)+-3]
 11695   014472  0EFD               	movlw	-3
 11696   014474  CFE3 F00B          	movff	plusw1,btemp+10
 11697   014478  0EFE               	movlw	-2
 11698   01447A  CFE3 F00C          	movff	plusw1,btemp+11
 11699   01447E  0E05               	movlw	5
 11700   014480  240B               	addwf	(btemp+10)^0,w,c
 11701   014482  6ED9               	movwf	fsr2l,c
 11702   014484  0E00               	movlw	0
 11703   014486  200C               	addwfc	(btemp+11)^0,w,c
 11704   014488  6EDA               	movwf	fsr2h,c
 11705   01448A  50DF               	movf	indf2,w,c
 11706   01448C  6EE6               	movwf	postinc1,c
 11707                           
 11708                           ;stkvar	_mObj @ sp[(-1)+-5]
 11709   01448E  0EFA               	movlw	-6
 11710   014490  CFE3 FFE6          	movff	plusw1,postinc1
 11711   014494  CFE3 FFE6          	movff	plusw1,postinc1
 11712                           
 11713                           ;stkvar	_filter @ sp[(-3)+-1]
 11714   014498  0EFC               	movlw	-4
 11715   01449A  50E3               	movf	plusw1,w,c
 11716   01449C  6EE6               	movwf	postinc1,c
 11717   01449E  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 11718   0144A2                     
 11719                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 11720   0144A2  0E01               	movlw	1
 11721   0144A4  6EE6               	movwf	postinc1,c
 11722   0144A6  0E02               	movlw	2
 11723   0144A8  6EE6               	movwf	postinc1,c
 11724                           
 11725                           ;stkvar	_filter @ sp[(-2)+-1]
 11726   0144AA  0EFD               	movlw	-3
 11727   0144AC  50E3               	movf	plusw1,w,c
 11728   0144AE  6EE6               	movwf	postinc1,c
 11729   0144B0  ECD1  F0A0         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 11730   0144B4                     
 11731                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 11732   0144B4  0EFB               	movlw	251
 11733   0144B6  26E1               	addwf	fsr1l,f,c
 11734   0144B8  0EFF               	movlw	255
 11735   0144BA  22E2               	addwfc	fsr1h,f,c
 11736   0144BC  0012               	return		;funcret
 11737   0144BE                     __end_of_CanSetFilter:
 11738                           	callstack 0
 11739                           
 11740 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 11741 ;; Defined at:
 11742 ;;		line 1072 in file "can/can.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  filter          1  [STACK] enum E5322
 11745 ;;  channel         1  [STACK] enum E5287
 11746 ;;  enable          1  [STACK] _Bool 
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;  a               2  [STACK] unsigned short 
 11749 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 11750 ;;  spiTransferE    1    0        char 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  1  [STACK] char 
 11753 ;; Registers used:
 11754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11764 ;;Total ram usage:        0 bytes
 11765 ;; Hardware stack levels used: 1
 11766 ;; Hardware stack levels required when called: 9
 11767 ;; This function calls:
 11768 ;;		_DRV_CANFDSPI_WriteByte
 11769 ;; This function is called by:
 11770 ;;		_CanSetFilter
 11771 ;; This function uses a reentrant model
 11772 ;;
 11773                           
 11774                           	psect	text43
 11775   0141A2                     __ptext43:
 11776                           	callstack 0
 11777   0141A2                     _DRV_CANFDSPI_FilterToFifoLink:
 11778                           	callstack 0
 11779                           
 11780                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11781   0141A2  52E6               	movf	postinc1,f,c
 11782   0141A4  52E6               	movf	postinc1,f,c
 11783   0141A6  52E6               	movf	postinc1,f,c
 11784   0141A8                     
 11785                           ;can/can.c: 1080:     if (enable) {
 11786                           ;stkvar	_enable @ sp[(-3)+-3]
 11787   0141A8  0EFA               	movlw	-6
 11788   0141AA  50E3               	movf	plusw1,w,c
 11789   0141AC  B4D8               	btfsc	status,2,c
 11790   0141AE  EFDB  F0A0         	goto	u2731
 11791   0141B2  EFDD  F0A0         	goto	u2730
 11792   0141B6                     u2731:
 11793   0141B6  EFE7  F0A0         	goto	l5002
 11794   0141BA                     u2730:
 11795   0141BA                     
 11796                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11797                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11798   0141BA  50E1               	movf	fsr1l,w,c
 11799   0141BC  0FFF               	addlw	-1
 11800   0141BE  6ED9               	movwf	fsr2l,c
 11801   0141C0  50E2               	movf	fsr1h,w,c
 11802   0141C2  6EDA               	movwf	fsr2h,c
 11803   0141C4  0EFF               	movlw	255
 11804   0141C6  22DA               	addwfc	fsr2h,f,c
 11805   0141C8  8EDF               	bsf	indf2,7,c
 11806                           
 11807                           ;can/can.c: 1082:     } else {
 11808   0141CA  EFEF  F0A0         	goto	l5004
 11809   0141CE                     l5002:
 11810                           
 11811                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11812                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11813   0141CE  50E1               	movf	fsr1l,w,c
 11814   0141D0  0FFF               	addlw	-1
 11815   0141D2  6ED9               	movwf	fsr2l,c
 11816   0141D4  50E2               	movf	fsr1h,w,c
 11817   0141D6  6EDA               	movwf	fsr2h,c
 11818   0141D8  0EFF               	movlw	255
 11819   0141DA  22DA               	addwfc	fsr2h,f,c
 11820   0141DC  9EDF               	bcf	indf2,7,c
 11821   0141DE                     l5004:
 11822                           
 11823                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11824                           ;stkvar	_channel @ sp[(-3)+-2]
 11825   0141DE  0EFB               	movlw	-5
 11826   0141E0  CFE3 F00C          	movff	plusw1,btemp+11
 11827                           
 11828                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11829   0141E4  50E1               	movf	fsr1l,w,c
 11830   0141E6  0FFF               	addlw	-1
 11831   0141E8  6ED9               	movwf	fsr2l,c
 11832   0141EA  50E2               	movf	fsr1h,w,c
 11833   0141EC  6EDA               	movwf	fsr2h,c
 11834   0141EE  0EFF               	movlw	255
 11835   0141F0  22DA               	addwfc	fsr2h,f,c
 11836   0141F2  50DF               	movf	223,w,c
 11837   0141F4  180C               	xorwf	(btemp+11)^0,w,c
 11838   0141F6  0BE0               	andlw	-32
 11839   0141F8  180C               	xorwf	(btemp+11)^0,w,c
 11840   0141FA  6EDF               	movwf	223,c
 11841   0141FC                     
 11842                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 11843                           ;stkvar	_filter @ sp[(-3)+-1]
 11844   0141FC  0EFC               	movlw	-4
 11845   0141FE  CFE3 F00C          	movff	plusw1,btemp+11
 11846   014202  0ED0               	movlw	208
 11847   014204  240C               	addwf	(btemp+11)^0,w,c
 11848   014206  6E09               	movwf	(btemp+8)^0,c
 11849   014208  6A0A               	clrf	(btemp+9)^0,c
 11850   01420A  0E01               	movlw	1
 11851   01420C  220A               	addwfc	(btemp+9)^0,f,c
 11852                           
 11853                           ;stkvar	_a @ sp[(-3)+0]
 11854   01420E  0EFD               	movlw	-3
 11855   014210  C009  FFE3         	movff	btemp+8,plusw1
 11856   014214  0EFE               	movlw	-2
 11857   014216  C00A  FFE3         	movff	btemp+9,plusw1
 11858   01421A                     
 11859                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11860   01421A  0EFF               	movlw	-1
 11861   01421C  50E3               	movf	plusw1,w,c
 11862   01421E  6EE6               	movwf	postinc1,c
 11863                           
 11864                           ;stkvar	_a @ sp[(-4)+0]
 11865   014220  0EFC               	movlw	-4
 11866   014222  CFE3 FFE6          	movff	plusw1,postinc1
 11867   014226  CFE3 FFE6          	movff	plusw1,postinc1
 11868   01422A  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 11869   01422E                     
 11870                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 11871   01422E  0EFA               	movlw	250
 11872   014230  26E1               	addwf	fsr1l,f,c
 11873   014232  0EFF               	movlw	255
 11874   014234  22E2               	addwfc	fsr1h,f,c
 11875   014236  0012               	return		;funcret
 11876   014238                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 11877                           	callstack 0
 11878                           
 11879 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 11880 ;; Defined at:
 11881 ;;		line 1001 in file "can/can.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  filter          1  [STACK] enum E5322
 11884 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 11885 ;;		 -> filterObj(6), 
 11886 ;; Auto vars:     Size  Location     Type
 11887 ;;  temp32          4  [STACK] unsigned long 
 11888 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 11889 ;;  a               2  [STACK] unsigned short 
 11890 ;;  spiTransferE    1    0        char 
 11891 ;; Return value:  Size  Location     Type
 11892 ;;                  1  [STACK] char 
 11893 ;; Registers used:
 11894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11895 ;; Tracked objects:
 11896 ;;		On entry : 0/0
 11897 ;;		On exit  : 0/0
 11898 ;;		Unchanged: 0/0
 11899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;Total ram usage:        0 bytes
 11905 ;; Hardware stack levels used: 1
 11906 ;; Hardware stack levels required when called: 9
 11907 ;; This function calls:
 11908 ;;		_DRV_CANFDSPI_WriteWord
 11909 ;; This function is called by:
 11910 ;;		_CanSetFilter
 11911 ;; This function uses a reentrant model
 11912 ;;
 11913                           
 11914                           	psect	text44
 11915   010E34                     __ptext44:
 11916                           	callstack 0
 11917   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 11918                           	callstack 0
 11919                           
 11920                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11921   010E34  0E0C               	movlw	12
 11922   010E36  26E1               	addwf	fsr1l,f,c
 11923   010E38  0E00               	movlw	0
 11924   010E3A  22E2               	addwfc	fsr1h,f,c
 11925   010E3C                     
 11926                           ;can/can.c: 1009:     fObj.word = 0;
 11927                           ;stkvar	_fObj @ sp[(-12)+4]
 11928   010E3C  0EF8               	movlw	-8
 11929   010E3E  6AE3               	clrf	plusw1,c
 11930   010E40  0EF9               	movlw	-7
 11931   010E42  6AE3               	clrf	plusw1,c
 11932   010E44  0EFA               	movlw	-6
 11933   010E46  6AE3               	clrf	plusw1,c
 11934   010E48  0EFB               	movlw	-5
 11935   010E4A  6AE3               	clrf	plusw1,c
 11936   010E4C                     
 11937                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 11938                           ;stkvar	_id @ sp[(-12)+-3]
 11939   010E4C  0EF1               	movlw	-15
 11940   010E4E  CFE3 F00B          	movff	plusw1,btemp+10
 11941   010E52  0EF2               	movlw	-14
 11942   010E54  CFE3 F00C          	movff	plusw1,btemp+11
 11943   010E58  0E05               	movlw	5
 11944   010E5A  240B               	addwf	(btemp+10)^0,w,c
 11945   010E5C  6ED9               	movwf	fsr2l,c
 11946   010E5E  0E00               	movlw	0
 11947   010E60  200C               	addwfc	(btemp+11)^0,w,c
 11948   010E62  6EDA               	movwf	fsr2h,c
 11949   010E64  50DF               	movf	indf2,w,c
 11950   010E66  A4D8               	btfss	status,2,c
 11951   010E68  EF38  F087         	goto	u2551
 11952   010E6C  EF3A  F087         	goto	u2550
 11953   010E70                     u2551:
 11954   010E70  EFD2  F087         	goto	l4948
 11955   010E74                     u2550:
 11956   010E74                     
 11957                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 11958                           ;stkvar	_id @ sp[(-12)+-3]
 11959   010E74  0EF1               	movlw	-15
 11960   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 11961   010E7A  0EF2               	movlw	-14
 11962   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 11963   010E80  50DF               	movf	indf2,w,c
 11964   010E82  6E0C               	movwf	(btemp+11)^0,c
 11965                           
 11966                           ;stkvar	_fObj @ sp[(-12)+4]
 11967   010E84  0EF8               	movlw	-8
 11968   010E86  C00C  FFE3         	movff	btemp+11,plusw1
 11969   010E8A                     
 11970                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 11971                           ;stkvar	_fObj @ sp[(-12)+4]
 11972   010E8A  0EF9               	movlw	249
 11973   010E8C  24E1               	addwf	fsr1l,w,c
 11974   010E8E  6ED9               	movwf	fsr2l,c
 11975   010E90  0EFF               	movlw	255
 11976   010E92  20E2               	addwfc	fsr1h,w,c
 11977   010E94  6EDA               	movwf	fsr2h,c
 11978                           
 11979                           ;stkvar	_id @ sp[(-12)+-3]
 11980   010E96  0EF1               	movlw	-15
 11981   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 11982   010E9C  0EF2               	movlw	-14
 11983   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 11984   010EA2  CFEE F009          	movff	postinc0,btemp+8
 11985   010EA6  CFEE F00A          	movff	postinc0,btemp+9
 11986   010EAA  CFEE F00B          	movff	postinc0,btemp+10
 11987   010EAE  CFEE F00C          	movff	postinc0,btemp+11
 11988   010EB2  C00A  F009         	movff	btemp+9,btemp+8
 11989   010EB6  C00B  F00A         	movff	btemp+10,btemp+9
 11990   010EBA  C00C  F00B         	movff	btemp+11,btemp+10
 11991   010EBE  6A0C               	clrf	(btemp+11)^0,c
 11992   010EC0  5009               	movf	(btemp+8)^0,w,c
 11993   010EC2  6EDF               	movwf	indf2,c
 11994   010EC4                     
 11995                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 11996                           ;stkvar	_fObj @ sp[(-12)+4]
 11997   010EC4  0EFA               	movlw	250
 11998   010EC6  24E1               	addwf	fsr1l,w,c
 11999   010EC8  6ED9               	movwf	fsr2l,c
 12000   010ECA  0EFF               	movlw	255
 12001   010ECC  20E2               	addwfc	fsr1h,w,c
 12002   010ECE  6EDA               	movwf	fsr2h,c
 12003                           
 12004                           ;stkvar	_id @ sp[(-12)+-3]
 12005   010ED0  0EF1               	movlw	-15
 12006   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 12007   010ED6  0EF2               	movlw	-14
 12008   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 12009   010EDC  CFEE F009          	movff	postinc0,btemp+8
 12010   010EE0  CFEE F00A          	movff	postinc0,btemp+9
 12011   010EE4  CFEE F00B          	movff	postinc0,btemp+10
 12012   010EE8  CFEE F00C          	movff	postinc0,btemp+11
 12013   010EEC  0E11               	movlw	17
 12014   010EEE  EF7E  F087         	goto	u2560
 12015   010EF2                     u2565:
 12016   010EF2  90D8               	bcf	status,0,c
 12017   010EF4  320C               	rrcf	(btemp+11)^0,f,c
 12018   010EF6  320B               	rrcf	(btemp+10)^0,f,c
 12019   010EF8  320A               	rrcf	(btemp+9)^0,f,c
 12020   010EFA  3209               	rrcf	(btemp+8)^0,f,c
 12021   010EFC                     u2560:
 12022   010EFC  2EE8               	decfsz	wreg,f,c
 12023   010EFE  EF79  F087         	goto	u2565
 12024   010F02  5009               	movf	(btemp+8)^0,w,c
 12025   010F04  6EDF               	movwf	indf2,c
 12026   010F06                     
 12027                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12028                           ;stkvar	_fObj @ sp[(-12)+4]
 12029   010F06  0EFB               	movlw	251
 12030   010F08  24E1               	addwf	fsr1l,w,c
 12031   010F0A  6ED9               	movwf	fsr2l,c
 12032   010F0C  0EFF               	movlw	255
 12033   010F0E  20E2               	addwfc	fsr1h,w,c
 12034   010F10  6EDA               	movwf	fsr2h,c
 12035                           
 12036                           ;stkvar	_id @ sp[(-12)+-3]
 12037   010F12  0EF1               	movlw	-15
 12038   010F14  CFE3 F00B          	movff	plusw1,btemp+10
 12039   010F18  0EF2               	movlw	-14
 12040   010F1A  CFE3 F00C          	movff	plusw1,btemp+11
 12041   010F1E  0E05               	movlw	5
 12042   010F20  240B               	addwf	(btemp+10)^0,w,c
 12043   010F22  6EE9               	movwf	fsr0l,c
 12044   010F24  0E00               	movlw	0
 12045   010F26  200C               	addwfc	(btemp+11)^0,w,c
 12046   010F28  6EEA               	movwf	fsr0h,c
 12047   010F2A  50EF               	movf	indf0,w,c
 12048   010F2C  6E0C               	movwf	(btemp+11)^0,c
 12049   010F2E  0E06               	movlw	6
 12050   010F30  6E01               	movwf	btemp^0,c
 12051   010F32                     u2575:
 12052   010F32  90D8               	bcf	status,0,c
 12053   010F34  360C               	rlcf	(btemp+11)^0,f,c
 12054   010F36  2E01               	decfsz	btemp^0,f,c
 12055   010F38  EF99  F087         	goto	u2575
 12056                           
 12057                           ;stkvar	_id @ sp[(-12)+-3]
 12058   010F3C  0EF1               	movlw	-15
 12059   010F3E  CFE3 F009          	movff	plusw1,btemp+8
 12060   010F42  0EF2               	movlw	-14
 12061   010F44  CFE3 F00A          	movff	plusw1,btemp+9
 12062   010F48  0E04               	movlw	4
 12063   010F4A  2409               	addwf	(btemp+8)^0,w,c
 12064   010F4C  6EE9               	movwf	fsr0l,c
 12065   010F4E  0E00               	movlw	0
 12066   010F50  200A               	addwfc	(btemp+9)^0,w,c
 12067   010F52  6EEA               	movwf	fsr0h,c
 12068   010F54  50EF               	movf	indf0,w,c
 12069   010F56  6E0B               	movwf	(btemp+10)^0,c
 12070   010F58  0E05               	movlw	5
 12071   010F5A  6E01               	movwf	btemp^0,c
 12072   010F5C                     u2585:
 12073   010F5C  90D8               	bcf	status,0,c
 12074   010F5E  360B               	rlcf	(btemp+10)^0,f,c
 12075   010F60  2E01               	decfsz	btemp^0,f,c
 12076   010F62  EFAE  F087         	goto	u2585
 12077                           
 12078                           ;stkvar	_id @ sp[(-12)+-3]
 12079   010F66  0EF1               	movlw	-15
 12080   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 12081   010F6C  0EF2               	movlw	-14
 12082   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 12083   010F72  CFEE F005          	movff	postinc0,btemp+4
 12084   010F76  CFEE F006          	movff	postinc0,btemp+5
 12085   010F7A  CFEE F007          	movff	postinc0,btemp+6
 12086   010F7E  CFEE F008          	movff	postinc0,btemp+7
 12087   010F82  0E19               	movlw	25
 12088   010F84  EFC9  F087         	goto	u2590
 12089   010F88                     u2595:
 12090   010F88  90D8               	bcf	status,0,c
 12091   010F8A  3208               	rrcf	(btemp+7)^0,f,c
 12092   010F8C  3207               	rrcf	(btemp+6)^0,f,c
 12093   010F8E  3206               	rrcf	(btemp+5)^0,f,c
 12094   010F90  3205               	rrcf	(btemp+4)^0,f,c
 12095   010F92                     u2590:
 12096   010F92  2EE8               	decfsz	wreg,f,c
 12097   010F94  EFC4  F087         	goto	u2595
 12098   010F98  5005               	movf	(btemp+4)^0,w,c
 12099   010F9A  100B               	iorwf	(btemp+10)^0,w,c
 12100   010F9C  100C               	iorwf	(btemp+11)^0,w,c
 12101   010F9E  6EDF               	movwf	indf2,c
 12102                           
 12103                           ;can/can.c: 1017:     }
 12104   010FA0  EF97  F088         	goto	l4960
 12105   010FA4                     l4948:
 12106                           
 12107                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12108                           ;stkvar	_id @ sp[(-12)+-3]
 12109   010FA4  0EF1               	movlw	-15
 12110   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12111   010FAA  0EF2               	movlw	-14
 12112   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12113   010FB0  CFDE F009          	movff	postinc2,btemp+8
 12114   010FB4  CFDE F00A          	movff	postinc2,btemp+9
 12115   010FB8  CFDE F00B          	movff	postinc2,btemp+10
 12116   010FBC  CFDE F00C          	movff	postinc2,btemp+11
 12117   010FC0  0E13               	movlw	19
 12118   010FC2  EFE8  F087         	goto	u2600
 12119   010FC6                     u2605:
 12120   010FC6  90D8               	bcf	status,0,c
 12121   010FC8  320C               	rrcf	(btemp+11)^0,f,c
 12122   010FCA  320B               	rrcf	(btemp+10)^0,f,c
 12123   010FCC  320A               	rrcf	(btemp+9)^0,f,c
 12124   010FCE  3209               	rrcf	(btemp+8)^0,f,c
 12125   010FD0                     u2600:
 12126   010FD0  2EE8               	decfsz	wreg,f,c
 12127   010FD2  EFE3  F087         	goto	u2605
 12128   010FD6  0EFF               	movlw	255
 12129   010FD8  1409               	andwf	(btemp+8)^0,w,c
 12130   010FDA  6E05               	movwf	(btemp+4)^0,c
 12131   010FDC  0E07               	movlw	7
 12132   010FDE  140A               	andwf	(btemp+9)^0,w,c
 12133   010FE0  6E06               	movwf	(btemp+5)^0,c
 12134   010FE2  0E00               	movlw	0
 12135   010FE4  140B               	andwf	(btemp+10)^0,w,c
 12136   010FE6  6E07               	movwf	(btemp+6)^0,c
 12137   010FE8  0E00               	movlw	0
 12138   010FEA  140C               	andwf	(btemp+11)^0,w,c
 12139   010FEC  6E08               	movwf	(btemp+7)^0,c
 12140                           
 12141                           ;stkvar	_id @ sp[(-12)+-3]
 12142   010FEE  0EF1               	movlw	-15
 12143   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12144   010FF4  0EF2               	movlw	-14
 12145   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12146   010FFA  0EFF               	movlw	255
 12147   010FFC  14DE               	andwf	postinc2,w,c
 12148   010FFE  6E09               	movwf	(btemp+8)^0,c
 12149   011000  0EFF               	movlw	255
 12150   011002  14DE               	andwf	postinc2,w,c
 12151   011004  6E0A               	movwf	(btemp+9)^0,c
 12152   011006  0E03               	movlw	3
 12153   011008  14DE               	andwf	postinc2,w,c
 12154   01100A  6E0B               	movwf	(btemp+10)^0,c
 12155   01100C  0E00               	movlw	0
 12156   01100E  14DE               	andwf	postinc2,w,c
 12157   011010  6E0C               	movwf	(btemp+11)^0,c
 12158   011012  0E0B               	movlw	11
 12159   011014                     u2615:
 12160   011014  90D8               	bcf	status,0,c
 12161   011016  3609               	rlcf	(btemp+8)^0,f,c
 12162   011018  360A               	rlcf	(btemp+9)^0,f,c
 12163   01101A  360B               	rlcf	(btemp+10)^0,f,c
 12164   01101C  360C               	rlcf	(btemp+11)^0,f,c
 12165   01101E  2EE8               	decfsz	wreg,f,c
 12166   011020  EF0A  F088         	goto	u2615
 12167   011024  5005               	movf	(btemp+4)^0,w,c
 12168   011026  1009               	iorwf	(btemp+8)^0,w,c
 12169   011028  6E01               	movwf	btemp^0,c
 12170   01102A  5006               	movf	(btemp+5)^0,w,c
 12171   01102C  100A               	iorwf	(btemp+9)^0,w,c
 12172   01102E  6E02               	movwf	(btemp+1)^0,c
 12173   011030  5007               	movf	(btemp+6)^0,w,c
 12174   011032  100B               	iorwf	(btemp+10)^0,w,c
 12175   011034  6E03               	movwf	(btemp+2)^0,c
 12176   011036  5008               	movf	(btemp+7)^0,w,c
 12177   011038  100C               	iorwf	(btemp+11)^0,w,c
 12178   01103A  6E04               	movwf	(btemp+3)^0,c
 12179                           
 12180                           ;stkvar	_temp32 @ sp[(-12)+0]
 12181   01103C  0EF4               	movlw	-12
 12182   01103E  C001  FFE3         	movff	btemp,plusw1
 12183   011042  0EF5               	movlw	-11
 12184   011044  C002  FFE3         	movff	btemp+1,plusw1
 12185   011048  0EF6               	movlw	-10
 12186   01104A  C003  FFE3         	movff	btemp+2,plusw1
 12187   01104E  0EF7               	movlw	-9
 12188   011050  C004  FFE3         	movff	btemp+3,plusw1
 12189   011054                     
 12190                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12191                           ;stkvar	_temp32 @ sp[(-12)+0]
 12192   011054  50E1               	movf	fsr1l,w,c
 12193   011056  0FF4               	addlw	-12
 12194   011058  6ED9               	movwf	fsr2l,c
 12195   01105A  50E2               	movf	fsr1h,w,c
 12196   01105C  6EDA               	movwf	fsr2h,c
 12197   01105E  0EFF               	movlw	255
 12198   011060  22DA               	addwfc	fsr2h,f,c
 12199   011062  0EFF               	movlw	255
 12200   011064  16DE               	andwf	postinc2,f,c
 12201   011066  0EFF               	movlw	255
 12202   011068  16DE               	andwf	postinc2,f,c
 12203   01106A  0EFF               	movlw	255
 12204   01106C  16DE               	andwf	postinc2,f,c
 12205   01106E  0E1F               	movlw	31
 12206   011070  16DE               	andwf	postinc2,f,c
 12207   011072                     
 12208                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12209                           ;stkvar	_temp32 @ sp[(-12)+0]
 12210                           ;stkvar	_fObj @ sp[(-12)+4]
 12211   011072  0EF4               	movlw	-12
 12212   011074  CFE3 F001          	movff	plusw1,btemp
 12213   011078  0EF8               	movlw	-8
 12214   01107A  C001  FFE3         	movff	btemp,plusw1
 12215   01107E                     
 12216                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12217                           ;stkvar	_temp32 @ sp[(-12)+0]
 12218   01107E  0EF5               	movlw	245
 12219   011080  24E1               	addwf	fsr1l,w,c
 12220   011082  6ED9               	movwf	fsr2l,c
 12221   011084  0EFF               	movlw	255
 12222   011086  20E2               	addwfc	fsr1h,w,c
 12223   011088  6EDA               	movwf	fsr2h,c
 12224                           
 12225                           ;stkvar	_fObj @ sp[(-12)+4]
 12226   01108A  0EF9               	movlw	249
 12227   01108C  24E1               	addwf	fsr1l,w,c
 12228   01108E  6EE9               	movwf	fsr0l,c
 12229   011090  0EFF               	movlw	255
 12230   011092  20E2               	addwfc	fsr1h,w,c
 12231   011094  6EEA               	movwf	fsr0h,c
 12232   011096  CFDF FFEF          	movff	indf2,indf0
 12233   01109A                     
 12234                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12235                           ;stkvar	_temp32 @ sp[(-12)+0]
 12236   01109A  0EF6               	movlw	246
 12237   01109C  24E1               	addwf	fsr1l,w,c
 12238   01109E  6ED9               	movwf	fsr2l,c
 12239   0110A0  0EFF               	movlw	255
 12240   0110A2  20E2               	addwfc	fsr1h,w,c
 12241   0110A4  6EDA               	movwf	fsr2h,c
 12242                           
 12243                           ;stkvar	_fObj @ sp[(-12)+4]
 12244   0110A6  0EFA               	movlw	250
 12245   0110A8  24E1               	addwf	fsr1l,w,c
 12246   0110AA  6EE9               	movwf	fsr0l,c
 12247   0110AC  0EFF               	movlw	255
 12248   0110AE  20E2               	addwfc	fsr1h,w,c
 12249   0110B0  6EEA               	movwf	fsr0h,c
 12250   0110B2  CFDF FFEF          	movff	indf2,indf0
 12251   0110B6                     
 12252                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12253                           ;stkvar	_fObj @ sp[(-12)+4]
 12254   0110B6  0EFB               	movlw	251
 12255   0110B8  24E1               	addwf	fsr1l,w,c
 12256   0110BA  6ED9               	movwf	fsr2l,c
 12257   0110BC  0EFF               	movlw	255
 12258   0110BE  20E2               	addwfc	fsr1h,w,c
 12259   0110C0  6EDA               	movwf	fsr2h,c
 12260                           
 12261                           ;stkvar	_temp32 @ sp[(-12)+0]
 12262   0110C2  0EF7               	movlw	247
 12263   0110C4  24E1               	addwf	fsr1l,w,c
 12264   0110C6  6EE9               	movwf	fsr0l,c
 12265   0110C8  0EFF               	movlw	255
 12266   0110CA  20E2               	addwfc	fsr1h,w,c
 12267   0110CC  6EEA               	movwf	fsr0h,c
 12268   0110CE  50EF               	movf	indf0,w,c
 12269   0110D0  6E0C               	movwf	(btemp+11)^0,c
 12270                           
 12271                           ;stkvar	_id @ sp[(-12)+-3]
 12272   0110D2  0EF1               	movlw	-15
 12273   0110D4  CFE3 F009          	movff	plusw1,btemp+8
 12274   0110D8  0EF2               	movlw	-14
 12275   0110DA  CFE3 F00A          	movff	plusw1,btemp+9
 12276   0110DE  0E05               	movlw	5
 12277   0110E0  2409               	addwf	(btemp+8)^0,w,c
 12278   0110E2  6EE9               	movwf	fsr0l,c
 12279   0110E4  0E00               	movlw	0
 12280   0110E6  200A               	addwfc	(btemp+9)^0,w,c
 12281   0110E8  6EEA               	movwf	fsr0h,c
 12282   0110EA  50EF               	movf	indf0,w,c
 12283   0110EC  6E0B               	movwf	(btemp+10)^0,c
 12284   0110EE  0E06               	movlw	6
 12285   0110F0  6E01               	movwf	btemp^0,c
 12286   0110F2                     u2625:
 12287   0110F2  90D8               	bcf	status,0,c
 12288   0110F4  360B               	rlcf	(btemp+10)^0,f,c
 12289   0110F6  2E01               	decfsz	btemp^0,f,c
 12290   0110F8  EF79  F088         	goto	u2625
 12291                           
 12292                           ;stkvar	_id @ sp[(-12)+-3]
 12293   0110FC  0EF1               	movlw	-15
 12294   0110FE  CFE3 F009          	movff	plusw1,btemp+8
 12295   011102  0EF2               	movlw	-14
 12296   011104  CFE3 F00A          	movff	plusw1,btemp+9
 12297   011108  0E04               	movlw	4
 12298   01110A  2409               	addwf	(btemp+8)^0,w,c
 12299   01110C  6EE9               	movwf	fsr0l,c
 12300   01110E  0E00               	movlw	0
 12301   011110  200A               	addwfc	(btemp+9)^0,w,c
 12302   011112  6EEA               	movwf	fsr0h,c
 12303   011114  50EF               	movf	indf0,w,c
 12304   011116  6E0A               	movwf	(btemp+9)^0,c
 12305   011118  0E05               	movlw	5
 12306   01111A  6E01               	movwf	btemp^0,c
 12307   01111C                     u2635:
 12308   01111C  90D8               	bcf	status,0,c
 12309   01111E  360A               	rlcf	(btemp+9)^0,f,c
 12310   011120  2E01               	decfsz	btemp^0,f,c
 12311   011122  EF8E  F088         	goto	u2635
 12312   011126  500A               	movf	(btemp+9)^0,w,c
 12313   011128  100B               	iorwf	(btemp+10)^0,w,c
 12314   01112A  100C               	iorwf	(btemp+11)^0,w,c
 12315   01112C  6EDF               	movwf	indf2,c
 12316   01112E                     l4960:
 12317                           
 12318                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12319                           ;stkvar	_filter @ sp[(-12)+-1]
 12320   01112E  0EF3               	movlw	-13
 12321   011130  50E3               	movf	plusw1,w,c
 12322   011132  0D08               	mullw	8
 12323   011134  CFF3 F00B          	movff	prodl,btemp+10
 12324   011138  CFF4 F00C          	movff	prodh,btemp+11
 12325   01113C  0EF0               	movlw	240
 12326   01113E  240B               	addwf	(btemp+10)^0,w,c
 12327   011140  6E09               	movwf	(btemp+8)^0,c
 12328   011142  0E01               	movlw	1
 12329   011144  200C               	addwfc	(btemp+11)^0,w,c
 12330   011146  6E0A               	movwf	(btemp+9)^0,c
 12331                           
 12332                           ;stkvar	_a @ sp[(-12)+10]
 12333   011148  0EFE               	movlw	-2
 12334   01114A  C009  FFE3         	movff	btemp+8,plusw1
 12335   01114E  0EFF               	movlw	-1
 12336   011150  C00A  FFE3         	movff	btemp+9,plusw1
 12337   011154                     
 12338                           ;stkvar	_fObj @ sp[(-12)+4]
 12339   011154  0EF8               	movlw	-8
 12340   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12341   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12342   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12343   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12344                           
 12345                           ;stkvar	_a @ sp[(-16)+10]
 12346   011166  0EFA               	movlw	-6
 12347   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12348   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12349   011170  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12350   011174                     
 12351                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12352   011174  0EF1               	movlw	241
 12353   011176  26E1               	addwf	fsr1l,f,c
 12354   011178  0EFF               	movlw	255
 12355   01117A  22E2               	addwfc	fsr1h,f,c
 12356   01117C  0012               	return		;funcret
 12357   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12358                           	callstack 0
 12359                           
 12360 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12361 ;; Defined at:
 12362 ;;		line 1035 in file "can/can.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;  filter          1  [STACK] enum E5322
 12365 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12366 ;;		 -> maskObj(6), 
 12367 ;;  EXIDE           1  [STACK] unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  temp32          4  [STACK] unsigned long 
 12370 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12371 ;;  a               2  [STACK] unsigned short 
 12372 ;;  spiTransferE    1    0        char 
 12373 ;; Return value:  Size  Location     Type
 12374 ;;                  1  [STACK] char 
 12375 ;; Registers used:
 12376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12377 ;; Tracked objects:
 12378 ;;		On entry : 0/0
 12379 ;;		On exit  : 0/0
 12380 ;;		Unchanged: 0/0
 12381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12386 ;;Total ram usage:        0 bytes
 12387 ;; Hardware stack levels used: 1
 12388 ;; Hardware stack levels required when called: 9
 12389 ;; This function calls:
 12390 ;;		_DRV_CANFDSPI_WriteWord
 12391 ;; This function is called by:
 12392 ;;		_CanSetFilter
 12393 ;; This function uses a reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text45
 12397   01117E                     __ptext45:
 12398                           	callstack 0
 12399   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12400                           	callstack 0
 12401                           
 12402                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12403   01117E  0E0C               	movlw	12
 12404   011180  26E1               	addwf	fsr1l,f,c
 12405   011182  0E00               	movlw	0
 12406   011184  22E2               	addwfc	fsr1h,f,c
 12407   011186                     
 12408                           ;can/can.c: 1043:     mObj.word = 0;
 12409                           ;stkvar	_mObj @ sp[(-12)+4]
 12410   011186  0EF8               	movlw	-8
 12411   011188  6AE3               	clrf	plusw1,c
 12412   01118A  0EF9               	movlw	-7
 12413   01118C  6AE3               	clrf	plusw1,c
 12414   01118E  0EFA               	movlw	-6
 12415   011190  6AE3               	clrf	plusw1,c
 12416   011192  0EFB               	movlw	-5
 12417   011194  6AE3               	clrf	plusw1,c
 12418   011196                     
 12419                           ;can/can.c: 1047:     if(EXIDE == 0)
 12420                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12421   011196  0EF0               	movlw	-16
 12422   011198  50E3               	movf	plusw1,w,c
 12423   01119A  A4D8               	btfss	status,2,c
 12424   01119C  EFD2  F088         	goto	u2641
 12425   0111A0  EFD4  F088         	goto	u2640
 12426   0111A4                     u2641:
 12427   0111A4  EF6C  F089         	goto	l4980
 12428   0111A8                     u2640:
 12429   0111A8                     
 12430                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12431                           ;stkvar	_mask @ sp[(-12)+-3]
 12432   0111A8  0EF1               	movlw	-15
 12433   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12434   0111AE  0EF2               	movlw	-14
 12435   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12436   0111B4  50DF               	movf	indf2,w,c
 12437   0111B6  6E0C               	movwf	(btemp+11)^0,c
 12438                           
 12439                           ;stkvar	_mObj @ sp[(-12)+4]
 12440   0111B8  0EF8               	movlw	-8
 12441   0111BA  C00C  FFE3         	movff	btemp+11,plusw1
 12442   0111BE                     
 12443                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12444                           ;stkvar	_mObj @ sp[(-12)+4]
 12445   0111BE  0EF9               	movlw	249
 12446   0111C0  24E1               	addwf	fsr1l,w,c
 12447   0111C2  6ED9               	movwf	fsr2l,c
 12448   0111C4  0EFF               	movlw	255
 12449   0111C6  20E2               	addwfc	fsr1h,w,c
 12450   0111C8  6EDA               	movwf	fsr2h,c
 12451                           
 12452                           ;stkvar	_mask @ sp[(-12)+-3]
 12453   0111CA  0EF1               	movlw	-15
 12454   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12455   0111D0  0EF2               	movlw	-14
 12456   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12457   0111D6  CFEE F009          	movff	postinc0,btemp+8
 12458   0111DA  CFEE F00A          	movff	postinc0,btemp+9
 12459   0111DE  CFEE F00B          	movff	postinc0,btemp+10
 12460   0111E2  CFEE F00C          	movff	postinc0,btemp+11
 12461   0111E6  C00A  F009         	movff	btemp+9,btemp+8
 12462   0111EA  C00B  F00A         	movff	btemp+10,btemp+9
 12463   0111EE  C00C  F00B         	movff	btemp+11,btemp+10
 12464   0111F2  6A0C               	clrf	(btemp+11)^0,c
 12465   0111F4  5009               	movf	(btemp+8)^0,w,c
 12466   0111F6  6EDF               	movwf	indf2,c
 12467   0111F8                     
 12468                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12469                           ;stkvar	_mObj @ sp[(-12)+4]
 12470   0111F8  0EFA               	movlw	250
 12471   0111FA  24E1               	addwf	fsr1l,w,c
 12472   0111FC  6ED9               	movwf	fsr2l,c
 12473   0111FE  0EFF               	movlw	255
 12474   011200  20E2               	addwfc	fsr1h,w,c
 12475   011202  6EDA               	movwf	fsr2h,c
 12476                           
 12477                           ;stkvar	_mask @ sp[(-12)+-3]
 12478   011204  0EF1               	movlw	-15
 12479   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12480   01120A  0EF2               	movlw	-14
 12481   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12482   011210  CFEE F009          	movff	postinc0,btemp+8
 12483   011214  CFEE F00A          	movff	postinc0,btemp+9
 12484   011218  CFEE F00B          	movff	postinc0,btemp+10
 12485   01121C  CFEE F00C          	movff	postinc0,btemp+11
 12486   011220  0E11               	movlw	17
 12487   011222  EF18  F089         	goto	u2650
 12488   011226                     u2655:
 12489   011226  90D8               	bcf	status,0,c
 12490   011228  320C               	rrcf	(btemp+11)^0,f,c
 12491   01122A  320B               	rrcf	(btemp+10)^0,f,c
 12492   01122C  320A               	rrcf	(btemp+9)^0,f,c
 12493   01122E  3209               	rrcf	(btemp+8)^0,f,c
 12494   011230                     u2650:
 12495   011230  2EE8               	decfsz	wreg,f,c
 12496   011232  EF13  F089         	goto	u2655
 12497   011236  5009               	movf	(btemp+8)^0,w,c
 12498   011238  6EDF               	movwf	indf2,c
 12499   01123A                     
 12500                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12501                           ;stkvar	_mObj @ sp[(-12)+4]
 12502   01123A  0EFB               	movlw	251
 12503   01123C  24E1               	addwf	fsr1l,w,c
 12504   01123E  6ED9               	movwf	fsr2l,c
 12505   011240  0EFF               	movlw	255
 12506   011242  20E2               	addwfc	fsr1h,w,c
 12507   011244  6EDA               	movwf	fsr2h,c
 12508                           
 12509                           ;stkvar	_mask @ sp[(-12)+-3]
 12510   011246  0EF1               	movlw	-15
 12511   011248  CFE3 F00B          	movff	plusw1,btemp+10
 12512   01124C  0EF2               	movlw	-14
 12513   01124E  CFE3 F00C          	movff	plusw1,btemp+11
 12514   011252  0E05               	movlw	5
 12515   011254  240B               	addwf	(btemp+10)^0,w,c
 12516   011256  6EE9               	movwf	fsr0l,c
 12517   011258  0E00               	movlw	0
 12518   01125A  200C               	addwfc	(btemp+11)^0,w,c
 12519   01125C  6EEA               	movwf	fsr0h,c
 12520   01125E  50EF               	movf	indf0,w,c
 12521   011260  6E0C               	movwf	(btemp+11)^0,c
 12522   011262  0E06               	movlw	6
 12523   011264  6E01               	movwf	btemp^0,c
 12524   011266                     u2665:
 12525   011266  90D8               	bcf	status,0,c
 12526   011268  360C               	rlcf	(btemp+11)^0,f,c
 12527   01126A  2E01               	decfsz	btemp^0,f,c
 12528   01126C  EF33  F089         	goto	u2665
 12529                           
 12530                           ;stkvar	_mask @ sp[(-12)+-3]
 12531   011270  0EF1               	movlw	-15
 12532   011272  CFE3 F009          	movff	plusw1,btemp+8
 12533   011276  0EF2               	movlw	-14
 12534   011278  CFE3 F00A          	movff	plusw1,btemp+9
 12535   01127C  0E04               	movlw	4
 12536   01127E  2409               	addwf	(btemp+8)^0,w,c
 12537   011280  6EE9               	movwf	fsr0l,c
 12538   011282  0E00               	movlw	0
 12539   011284  200A               	addwfc	(btemp+9)^0,w,c
 12540   011286  6EEA               	movwf	fsr0h,c
 12541   011288  50EF               	movf	indf0,w,c
 12542   01128A  6E0B               	movwf	(btemp+10)^0,c
 12543   01128C  0E05               	movlw	5
 12544   01128E  6E01               	movwf	btemp^0,c
 12545   011290                     u2675:
 12546   011290  90D8               	bcf	status,0,c
 12547   011292  360B               	rlcf	(btemp+10)^0,f,c
 12548   011294  2E01               	decfsz	btemp^0,f,c
 12549   011296  EF48  F089         	goto	u2675
 12550                           
 12551                           ;stkvar	_mask @ sp[(-12)+-3]
 12552   01129A  0EF1               	movlw	-15
 12553   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 12554   0112A0  0EF2               	movlw	-14
 12555   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 12556   0112A6  CFEE F005          	movff	postinc0,btemp+4
 12557   0112AA  CFEE F006          	movff	postinc0,btemp+5
 12558   0112AE  CFEE F007          	movff	postinc0,btemp+6
 12559   0112B2  CFEE F008          	movff	postinc0,btemp+7
 12560   0112B6  0E19               	movlw	25
 12561   0112B8  EF63  F089         	goto	u2680
 12562   0112BC                     u2685:
 12563   0112BC  90D8               	bcf	status,0,c
 12564   0112BE  3208               	rrcf	(btemp+7)^0,f,c
 12565   0112C0  3207               	rrcf	(btemp+6)^0,f,c
 12566   0112C2  3206               	rrcf	(btemp+5)^0,f,c
 12567   0112C4  3205               	rrcf	(btemp+4)^0,f,c
 12568   0112C6                     u2680:
 12569   0112C6  2EE8               	decfsz	wreg,f,c
 12570   0112C8  EF5E  F089         	goto	u2685
 12571   0112CC  5005               	movf	(btemp+4)^0,w,c
 12572   0112CE  100B               	iorwf	(btemp+10)^0,w,c
 12573   0112D0  100C               	iorwf	(btemp+11)^0,w,c
 12574   0112D2  6EDF               	movwf	indf2,c
 12575                           
 12576                           ;can/can.c: 1053:     }
 12577   0112D4  EF31  F08A         	goto	l4992
 12578   0112D8                     l4980:
 12579                           
 12580                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 12581                           ;stkvar	_mask @ sp[(-12)+-3]
 12582   0112D8  0EF1               	movlw	-15
 12583   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 12584   0112DE  0EF2               	movlw	-14
 12585   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 12586   0112E4  CFDE F009          	movff	postinc2,btemp+8
 12587   0112E8  CFDE F00A          	movff	postinc2,btemp+9
 12588   0112EC  CFDE F00B          	movff	postinc2,btemp+10
 12589   0112F0  CFDE F00C          	movff	postinc2,btemp+11
 12590   0112F4  0E13               	movlw	19
 12591   0112F6  EF82  F089         	goto	u2690
 12592   0112FA                     u2695:
 12593   0112FA  90D8               	bcf	status,0,c
 12594   0112FC  320C               	rrcf	(btemp+11)^0,f,c
 12595   0112FE  320B               	rrcf	(btemp+10)^0,f,c
 12596   011300  320A               	rrcf	(btemp+9)^0,f,c
 12597   011302  3209               	rrcf	(btemp+8)^0,f,c
 12598   011304                     u2690:
 12599   011304  2EE8               	decfsz	wreg,f,c
 12600   011306  EF7D  F089         	goto	u2695
 12601   01130A  0EFF               	movlw	255
 12602   01130C  1409               	andwf	(btemp+8)^0,w,c
 12603   01130E  6E05               	movwf	(btemp+4)^0,c
 12604   011310  0E07               	movlw	7
 12605   011312  140A               	andwf	(btemp+9)^0,w,c
 12606   011314  6E06               	movwf	(btemp+5)^0,c
 12607   011316  0E00               	movlw	0
 12608   011318  140B               	andwf	(btemp+10)^0,w,c
 12609   01131A  6E07               	movwf	(btemp+6)^0,c
 12610   01131C  0E00               	movlw	0
 12611   01131E  140C               	andwf	(btemp+11)^0,w,c
 12612   011320  6E08               	movwf	(btemp+7)^0,c
 12613                           
 12614                           ;stkvar	_mask @ sp[(-12)+-3]
 12615   011322  0EF1               	movlw	-15
 12616   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 12617   011328  0EF2               	movlw	-14
 12618   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 12619   01132E  0EFF               	movlw	255
 12620   011330  14DE               	andwf	postinc2,w,c
 12621   011332  6E09               	movwf	(btemp+8)^0,c
 12622   011334  0EFF               	movlw	255
 12623   011336  14DE               	andwf	postinc2,w,c
 12624   011338  6E0A               	movwf	(btemp+9)^0,c
 12625   01133A  0E03               	movlw	3
 12626   01133C  14DE               	andwf	postinc2,w,c
 12627   01133E  6E0B               	movwf	(btemp+10)^0,c
 12628   011340  0E00               	movlw	0
 12629   011342  14DE               	andwf	postinc2,w,c
 12630   011344  6E0C               	movwf	(btemp+11)^0,c
 12631   011346  0E0B               	movlw	11
 12632   011348                     u2705:
 12633   011348  90D8               	bcf	status,0,c
 12634   01134A  3609               	rlcf	(btemp+8)^0,f,c
 12635   01134C  360A               	rlcf	(btemp+9)^0,f,c
 12636   01134E  360B               	rlcf	(btemp+10)^0,f,c
 12637   011350  360C               	rlcf	(btemp+11)^0,f,c
 12638   011352  2EE8               	decfsz	wreg,f,c
 12639   011354  EFA4  F089         	goto	u2705
 12640   011358  5005               	movf	(btemp+4)^0,w,c
 12641   01135A  1009               	iorwf	(btemp+8)^0,w,c
 12642   01135C  6E01               	movwf	btemp^0,c
 12643   01135E  5006               	movf	(btemp+5)^0,w,c
 12644   011360  100A               	iorwf	(btemp+9)^0,w,c
 12645   011362  6E02               	movwf	(btemp+1)^0,c
 12646   011364  5007               	movf	(btemp+6)^0,w,c
 12647   011366  100B               	iorwf	(btemp+10)^0,w,c
 12648   011368  6E03               	movwf	(btemp+2)^0,c
 12649   01136A  5008               	movf	(btemp+7)^0,w,c
 12650   01136C  100C               	iorwf	(btemp+11)^0,w,c
 12651   01136E  6E04               	movwf	(btemp+3)^0,c
 12652                           
 12653                           ;stkvar	_temp32 @ sp[(-12)+0]
 12654   011370  0EF4               	movlw	-12
 12655   011372  C001  FFE3         	movff	btemp,plusw1
 12656   011376  0EF5               	movlw	-11
 12657   011378  C002  FFE3         	movff	btemp+1,plusw1
 12658   01137C  0EF6               	movlw	-10
 12659   01137E  C003  FFE3         	movff	btemp+2,plusw1
 12660   011382  0EF7               	movlw	-9
 12661   011384  C004  FFE3         	movff	btemp+3,plusw1
 12662   011388                     
 12663                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 12664                           ;stkvar	_temp32 @ sp[(-12)+0]
 12665   011388  50E1               	movf	fsr1l,w,c
 12666   01138A  0FF4               	addlw	-12
 12667   01138C  6ED9               	movwf	fsr2l,c
 12668   01138E  50E2               	movf	fsr1h,w,c
 12669   011390  6EDA               	movwf	fsr2h,c
 12670   011392  0EFF               	movlw	255
 12671   011394  22DA               	addwfc	fsr2h,f,c
 12672   011396  0EFF               	movlw	255
 12673   011398  16DE               	andwf	postinc2,f,c
 12674   01139A  0EFF               	movlw	255
 12675   01139C  16DE               	andwf	postinc2,f,c
 12676   01139E  0EFF               	movlw	255
 12677   0113A0  16DE               	andwf	postinc2,f,c
 12678   0113A2  0E1F               	movlw	31
 12679   0113A4  16DE               	andwf	postinc2,f,c
 12680   0113A6                     
 12681                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 12682                           ;stkvar	_temp32 @ sp[(-12)+0]
 12683                           ;stkvar	_mObj @ sp[(-12)+4]
 12684   0113A6  0EF4               	movlw	-12
 12685   0113A8  CFE3 F001          	movff	plusw1,btemp
 12686   0113AC  0EF8               	movlw	-8
 12687   0113AE  C001  FFE3         	movff	btemp,plusw1
 12688   0113B2                     
 12689                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 12690                           ;stkvar	_temp32 @ sp[(-12)+0]
 12691   0113B2  0EF5               	movlw	245
 12692   0113B4  24E1               	addwf	fsr1l,w,c
 12693   0113B6  6ED9               	movwf	fsr2l,c
 12694   0113B8  0EFF               	movlw	255
 12695   0113BA  20E2               	addwfc	fsr1h,w,c
 12696   0113BC  6EDA               	movwf	fsr2h,c
 12697                           
 12698                           ;stkvar	_mObj @ sp[(-12)+4]
 12699   0113BE  0EF9               	movlw	249
 12700   0113C0  24E1               	addwf	fsr1l,w,c
 12701   0113C2  6EE9               	movwf	fsr0l,c
 12702   0113C4  0EFF               	movlw	255
 12703   0113C6  20E2               	addwfc	fsr1h,w,c
 12704   0113C8  6EEA               	movwf	fsr0h,c
 12705   0113CA  CFDF FFEF          	movff	indf2,indf0
 12706   0113CE                     
 12707                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 12708                           ;stkvar	_temp32 @ sp[(-12)+0]
 12709   0113CE  0EF6               	movlw	246
 12710   0113D0  24E1               	addwf	fsr1l,w,c
 12711   0113D2  6ED9               	movwf	fsr2l,c
 12712   0113D4  0EFF               	movlw	255
 12713   0113D6  20E2               	addwfc	fsr1h,w,c
 12714   0113D8  6EDA               	movwf	fsr2h,c
 12715                           
 12716                           ;stkvar	_mObj @ sp[(-12)+4]
 12717   0113DA  0EFA               	movlw	250
 12718   0113DC  24E1               	addwf	fsr1l,w,c
 12719   0113DE  6EE9               	movwf	fsr0l,c
 12720   0113E0  0EFF               	movlw	255
 12721   0113E2  20E2               	addwfc	fsr1h,w,c
 12722   0113E4  6EEA               	movwf	fsr0h,c
 12723   0113E6  CFDF FFEF          	movff	indf2,indf0
 12724   0113EA                     
 12725                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 12726                           ;stkvar	_mObj @ sp[(-12)+4]
 12727   0113EA  0EFB               	movlw	251
 12728   0113EC  24E1               	addwf	fsr1l,w,c
 12729   0113EE  6ED9               	movwf	fsr2l,c
 12730   0113F0  0EFF               	movlw	255
 12731   0113F2  20E2               	addwfc	fsr1h,w,c
 12732   0113F4  6EDA               	movwf	fsr2h,c
 12733                           
 12734                           ;stkvar	_temp32 @ sp[(-12)+0]
 12735   0113F6  0EF7               	movlw	247
 12736   0113F8  24E1               	addwf	fsr1l,w,c
 12737   0113FA  6EE9               	movwf	fsr0l,c
 12738   0113FC  0EFF               	movlw	255
 12739   0113FE  20E2               	addwfc	fsr1h,w,c
 12740   011400  6EEA               	movwf	fsr0h,c
 12741   011402  50EF               	movf	indf0,w,c
 12742   011404  6E0C               	movwf	(btemp+11)^0,c
 12743                           
 12744                           ;stkvar	_mask @ sp[(-12)+-3]
 12745   011406  0EF1               	movlw	-15
 12746   011408  CFE3 F009          	movff	plusw1,btemp+8
 12747   01140C  0EF2               	movlw	-14
 12748   01140E  CFE3 F00A          	movff	plusw1,btemp+9
 12749   011412  0E05               	movlw	5
 12750   011414  2409               	addwf	(btemp+8)^0,w,c
 12751   011416  6EE9               	movwf	fsr0l,c
 12752   011418  0E00               	movlw	0
 12753   01141A  200A               	addwfc	(btemp+9)^0,w,c
 12754   01141C  6EEA               	movwf	fsr0h,c
 12755   01141E  50EF               	movf	indf0,w,c
 12756   011420  6E0B               	movwf	(btemp+10)^0,c
 12757   011422  0E06               	movlw	6
 12758   011424  6E01               	movwf	btemp^0,c
 12759   011426                     u2715:
 12760   011426  90D8               	bcf	status,0,c
 12761   011428  360B               	rlcf	(btemp+10)^0,f,c
 12762   01142A  2E01               	decfsz	btemp^0,f,c
 12763   01142C  EF13  F08A         	goto	u2715
 12764                           
 12765                           ;stkvar	_mask @ sp[(-12)+-3]
 12766   011430  0EF1               	movlw	-15
 12767   011432  CFE3 F009          	movff	plusw1,btemp+8
 12768   011436  0EF2               	movlw	-14
 12769   011438  CFE3 F00A          	movff	plusw1,btemp+9
 12770   01143C  0E04               	movlw	4
 12771   01143E  2409               	addwf	(btemp+8)^0,w,c
 12772   011440  6EE9               	movwf	fsr0l,c
 12773   011442  0E00               	movlw	0
 12774   011444  200A               	addwfc	(btemp+9)^0,w,c
 12775   011446  6EEA               	movwf	fsr0h,c
 12776   011448  50EF               	movf	indf0,w,c
 12777   01144A  6E0A               	movwf	(btemp+9)^0,c
 12778   01144C  0E05               	movlw	5
 12779   01144E  6E01               	movwf	btemp^0,c
 12780   011450                     u2725:
 12781   011450  90D8               	bcf	status,0,c
 12782   011452  360A               	rlcf	(btemp+9)^0,f,c
 12783   011454  2E01               	decfsz	btemp^0,f,c
 12784   011456  EF28  F08A         	goto	u2725
 12785   01145A  500A               	movf	(btemp+9)^0,w,c
 12786   01145C  100B               	iorwf	(btemp+10)^0,w,c
 12787   01145E  100C               	iorwf	(btemp+11)^0,w,c
 12788   011460  6EDF               	movwf	indf2,c
 12789   011462                     l4992:
 12790                           
 12791                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12792                           ;stkvar	_filter @ sp[(-12)+-1]
 12793   011462  0EF3               	movlw	-13
 12794   011464  50E3               	movf	plusw1,w,c
 12795   011466  0D08               	mullw	8
 12796   011468  CFF3 F00B          	movff	prodl,btemp+10
 12797   01146C  CFF4 F00C          	movff	prodh,btemp+11
 12798   011470  0EF4               	movlw	244
 12799   011472  240B               	addwf	(btemp+10)^0,w,c
 12800   011474  6E09               	movwf	(btemp+8)^0,c
 12801   011476  0E01               	movlw	1
 12802   011478  200C               	addwfc	(btemp+11)^0,w,c
 12803   01147A  6E0A               	movwf	(btemp+9)^0,c
 12804                           
 12805                           ;stkvar	_a @ sp[(-12)+10]
 12806   01147C  0EFE               	movlw	-2
 12807   01147E  C009  FFE3         	movff	btemp+8,plusw1
 12808   011482  0EFF               	movlw	-1
 12809   011484  C00A  FFE3         	movff	btemp+9,plusw1
 12810   011488                     
 12811                           ;stkvar	_mObj @ sp[(-12)+4]
 12812   011488  0EF8               	movlw	-8
 12813   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12814   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12815   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12816   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12817                           
 12818                           ;stkvar	_a @ sp[(-16)+10]
 12819   01149A  0EFA               	movlw	-6
 12820   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12821   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12822   0114A4  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12823   0114A8                     
 12824                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12825   0114A8  0EF0               	movlw	240
 12826   0114AA  26E1               	addwf	fsr1l,f,c
 12827   0114AC  0EFF               	movlw	255
 12828   0114AE  22E2               	addwfc	fsr1h,f,c
 12829   0114B0  0012               	return		;funcret
 12830   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12831                           	callstack 0
 12832                           
 12833 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12834 ;; Defined at:
 12835 ;;		line 1121 in file "can/can.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;  filter          1  [STACK] enum E5322
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  a               2  [STACK] unsigned short 
 12840 ;;  spiTransferE    1  [STACK] char 
 12841 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  1  [STACK] char 
 12844 ;; Registers used:
 12845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12855 ;;Total ram usage:        0 bytes
 12856 ;; Hardware stack levels used: 1
 12857 ;; Hardware stack levels required when called: 9
 12858 ;; This function calls:
 12859 ;;		_DRV_CANFDSPI_ReadByte
 12860 ;;		_DRV_CANFDSPI_WriteByte
 12861 ;; This function is called by:
 12862 ;;		_CanSetFilter
 12863 ;; This function uses a reentrant model
 12864 ;;
 12865                           
 12866                           	psect	text46
 12867   014238                     __ptext46:
 12868                           	callstack 0
 12869   014238                     _DRV_CANFDSPI_FilterDisable:
 12870                           	callstack 0
 12871                           
 12872                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12873   014238  52E6               	movf	postinc1,f,c
 12874   01423A  52E6               	movf	postinc1,f,c
 12875   01423C  52E6               	movf	postinc1,f,c
 12876   01423E  52E6               	movf	postinc1,f,c
 12877   014240                     
 12878                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12879                           ;stkvar	_filter @ sp[(-4)+-1]
 12880   014240  0EFB               	movlw	-5
 12881   014242  CFE3 F00C          	movff	plusw1,btemp+11
 12882   014246  0ED0               	movlw	208
 12883   014248  240C               	addwf	(btemp+11)^0,w,c
 12884   01424A  6E09               	movwf	(btemp+8)^0,c
 12885   01424C  6A0A               	clrf	(btemp+9)^0,c
 12886   01424E  0E01               	movlw	1
 12887   014250  220A               	addwfc	(btemp+9)^0,f,c
 12888                           
 12889                           ;stkvar	_a @ sp[(-4)+0]
 12890   014252  0EFC               	movlw	-4
 12891   014254  C009  FFE3         	movff	btemp+8,plusw1
 12892   014258  0EFD               	movlw	-3
 12893   01425A  C00A  FFE3         	movff	btemp+9,plusw1
 12894   01425E                     
 12895                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 12896                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12897   01425E  0EFF               	movlw	255
 12898   014260  24E1               	addwf	fsr1l,w,c
 12899   014262  6E01               	movwf	btemp^0,c
 12900   014264  0EFF               	movlw	255
 12901   014266  20E2               	addwfc	fsr1h,w,c
 12902   014268  6E02               	movwf	(btemp+1)^0,c
 12903   01426A  C001  FFE6         	movff	btemp,postinc1
 12904   01426E  C002  FFE6         	movff	btemp+1,postinc1
 12905                           
 12906                           ;stkvar	_a @ sp[(-6)+0]
 12907   014272  0EFA               	movlw	-6
 12908   014274  CFE3 FFE6          	movff	plusw1,postinc1
 12909   014278  CFE3 FFE6          	movff	plusw1,postinc1
 12910   01427C  ECC3  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 12911                           
 12912                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12913   014280  0EFE               	movlw	-2
 12914   014282  C001  FFE3         	movff	btemp,plusw1
 12915   014286                     
 12916                           ;can/can.c: 1131:     if (spiTransferError) {
 12917                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12918   014286  0EFE               	movlw	-2
 12919   014288  50E3               	movf	plusw1,w,c
 12920   01428A  B4D8               	btfsc	status,2,c
 12921   01428C  EF4A  F0A1         	goto	u2541
 12922   014290  EF4C  F0A1         	goto	u2540
 12923   014294                     u2541:
 12924   014294  EF4E  F0A1         	goto	l4926
 12925   014298                     u2540:
 12926   014298  EF60  F0A1         	goto	l336
 12927   01429C                     l4926:
 12928                           
 12929                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 12930                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12931   01429C  50E1               	movf	fsr1l,w,c
 12932   01429E  0FFF               	addlw	-1
 12933   0142A0  6ED9               	movwf	fsr2l,c
 12934   0142A2  50E2               	movf	fsr1h,w,c
 12935   0142A4  6EDA               	movwf	fsr2h,c
 12936   0142A6  0EFF               	movlw	255
 12937   0142A8  22DA               	addwfc	fsr2h,f,c
 12938   0142AA  9EDF               	bcf	indf2,7,c
 12939   0142AC                     
 12940                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12941   0142AC  0EFF               	movlw	-1
 12942   0142AE  50E3               	movf	plusw1,w,c
 12943   0142B0  6EE6               	movwf	postinc1,c
 12944                           
 12945                           ;stkvar	_a @ sp[(-5)+0]
 12946   0142B2  0EFB               	movlw	-5
 12947   0142B4  CFE3 FFE6          	movff	plusw1,postinc1
 12948   0142B8  CFE3 FFE6          	movff	plusw1,postinc1
 12949   0142BC  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12950   0142C0                     l336:
 12951                           
 12952                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 12953   0142C0  0EFB               	movlw	251
 12954   0142C2  26E1               	addwf	fsr1l,f,c
 12955   0142C4  0EFF               	movlw	255
 12956   0142C6  22E2               	addwfc	fsr1h,f,c
 12957   0142C8  0012               	return		;funcret
 12958   0142CA                     __end_of_DRV_CANFDSPI_FilterDisable:
 12959                           	callstack 0
 12960                           
 12961 ;; *************** function _CanInit *****************
 12962 ;; Defined at:
 12963 ;;		line 156 in file "can/can.c"
 12964 ;; Parameters:    Size  Location     Type
 12965 ;;  bitTime         1  [STACK] enum E5604
 12966 ;;  withISR         1  [STACK] _Bool 
 12967 ;; Auto vars:     Size  Location     Type
 12968 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 12969 ;;  config          3  [STACK] struct _CAN_CONFIG
 12970 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 12971 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 12972 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1  [STACK] void 
 12975 ;; Registers used:
 12976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;Total ram usage:        0 bytes
 12987 ;; Hardware stack levels used: 1
 12988 ;; Hardware stack levels required when called: 10
 12989 ;; This function calls:
 12990 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 12991 ;;		_DRV_CANFDSPI_Configure
 12992 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 12993 ;;		_DRV_CANFDSPI_ModuleEventEnable
 12994 ;;		_DRV_CANFDSPI_OperationModeSelect
 12995 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 12996 ;;		_DRV_CANFDSPI_Reset
 12997 ;;		_DRV_CANFDSPI_TefConfigure
 12998 ;;		_DRV_CANFDSPI_TimeStampEnable
 12999 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 13000 ;;		_DRV_CANFDSPI_TimeStampSet
 13001 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 13002 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 13003 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 13004 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 13005 ;; This function is called by:
 13006 ;;		_main
 13007 ;; This function uses a reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text47
 13011   011E64                     __ptext47:
 13012                           	callstack 0
 13013   011E64                     _CanInit:
 13014                           	callstack 0
 13015                           
 13016                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 13017   011E64  0E0D               	movlw	13
 13018   011E66  26E1               	addwf	fsr1l,f,c
 13019   011E68  0E00               	movlw	0
 13020   011E6A  22E2               	addwfc	fsr1h,f,c
 13021   011E6C                     
 13022                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 13023   011E6C  9898               	bcf	152,4,c	;volatile
 13024                           
 13025                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 13026   011E6E  888F               	bsf	143,4,c	;volatile
 13027   011E70                     
 13028                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 13029   011E70  EC68  F0A4         	call	_DRV_CANFDSPI_Reset	;wreg free
 13030   011E74                     
 13031                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 13032                           ;stkvar	_bitTime @ sp[(-13)+-1]
 13033   011E74  0EF2               	movlw	-14
 13034   011E76  50E3               	movf	plusw1,w,c
 13035   011E78  6EE6               	movwf	postinc1,c
 13036   011E7A  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 13037   011E7E                     
 13038                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 13039                           ;stkvar	_config @ sp[(-13)+4]
 13040   011E7E  0EF7               	movlw	247
 13041   011E80  24E1               	addwf	fsr1l,w,c
 13042   011E82  6E01               	movwf	btemp^0,c
 13043   011E84  0EFF               	movlw	255
 13044   011E86  20E2               	addwfc	fsr1h,w,c
 13045   011E88  6E02               	movwf	(btemp+1)^0,c
 13046   011E8A  C001  FFE6         	movff	btemp,postinc1
 13047   011E8E  C002  FFE6         	movff	btemp+1,postinc1
 13048   011E92  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 13049   011E96                     
 13050                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 13051                           ;stkvar	_config @ sp[(-13)+4]
 13052   011E96  50E1               	movf	fsr1l,w,c
 13053   011E98  0FF7               	addlw	-9
 13054   011E9A  6ED9               	movwf	fsr2l,c
 13055   011E9C  50E2               	movf	fsr1h,w,c
 13056   011E9E  6EDA               	movwf	fsr2h,c
 13057   011EA0  0EFF               	movlw	255
 13058   011EA2  22DA               	addwfc	fsr2h,f,c
 13059   011EA4  8ADF               	bsf	indf2,5,c
 13060   011EA6                     
 13061                           ;can/can.c: 166:     config.StoreInTEF = 1;
 13062                           ;stkvar	_config @ sp[(-13)+4]
 13063   011EA6  0EF8               	movlw	248
 13064   011EA8  24E1               	addwf	fsr1l,w,c
 13065   011EAA  6ED9               	movwf	fsr2l,c
 13066   011EAC  0EFF               	movlw	255
 13067   011EAE  20E2               	addwfc	fsr1h,w,c
 13068   011EB0  6EDA               	movwf	fsr2h,c
 13069   011EB2  8CDF               	bsf	indf2,6,c
 13070   011EB4                     
 13071                           ;can/can.c: 167:     config.TXQEnable = 1;
 13072                           ;stkvar	_config @ sp[(-13)+4]
 13073   011EB4  0EF8               	movlw	248
 13074   011EB6  24E1               	addwf	fsr1l,w,c
 13075   011EB8  6ED9               	movwf	fsr2l,c
 13076   011EBA  0EFF               	movlw	255
 13077   011EBC  20E2               	addwfc	fsr1h,w,c
 13078   011EBE  6EDA               	movwf	fsr2h,c
 13079   011EC0  8EDF               	bsf	indf2,7,c
 13080   011EC2                     
 13081                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 13082                           ;stkvar	_config @ sp[(-13)+4]
 13083   011EC2  0EF7               	movlw	247
 13084   011EC4  24E1               	addwf	fsr1l,w,c
 13085   011EC6  6E01               	movwf	btemp^0,c
 13086   011EC8  0EFF               	movlw	255
 13087   011ECA  20E2               	addwfc	fsr1h,w,c
 13088   011ECC  6E02               	movwf	(btemp+1)^0,c
 13089   011ECE  C001  FFE6         	movff	btemp,postinc1
 13090   011ED2  C002  FFE6         	movff	btemp+1,postinc1
 13091   011ED6  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 13092   011EDA                     
 13093                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 13094                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13095   011EDA  50E1               	movf	fsr1l,w,c
 13096   011EDC  0FFF               	addlw	-1
 13097   011EDE  6ED9               	movwf	fsr2l,c
 13098   011EE0  50E2               	movf	fsr1h,w,c
 13099   011EE2  6EDA               	movwf	fsr2h,c
 13100   011EE4  0EFF               	movlw	255
 13101   011EE6  22DA               	addwfc	fsr2h,f,c
 13102   011EE8  50DF               	movf	223,w,c
 13103   011EEA  0BC1               	andlw	-63
 13104   011EEC  0916               	iorlw	22
 13105   011EEE  6EDF               	movwf	223,c
 13106   011EF0                     
 13107                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13108                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13109   011EF0  50E1               	movf	fsr1l,w,c
 13110   011EF2  0FFF               	addlw	-1
 13111   011EF4  6ED9               	movwf	fsr2l,c
 13112   011EF6  50E2               	movf	fsr1h,w,c
 13113   011EF8  6EDA               	movwf	fsr2h,c
 13114   011EFA  0EFF               	movlw	255
 13115   011EFC  22DA               	addwfc	fsr2h,f,c
 13116   011EFE  80DF               	bsf	indf2,0,c
 13117   011F00                     
 13118                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13119                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13120   011F00  0EFF               	movlw	255
 13121   011F02  24E1               	addwf	fsr1l,w,c
 13122   011F04  6E01               	movwf	btemp^0,c
 13123   011F06  0EFF               	movlw	255
 13124   011F08  20E2               	addwfc	fsr1h,w,c
 13125   011F0A  6E02               	movwf	(btemp+1)^0,c
 13126   011F0C  C001  FFE6         	movff	btemp,postinc1
 13127   011F10  C002  FFE6         	movff	btemp+1,postinc1
 13128   011F14  ECC5  F09D         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13129   011F18                     
 13130                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13131                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13132   011F18  0EF3               	movlw	243
 13133   011F1A  24E1               	addwf	fsr1l,w,c
 13134   011F1C  6E01               	movwf	btemp^0,c
 13135   011F1E  0EFF               	movlw	255
 13136   011F20  20E2               	addwfc	fsr1h,w,c
 13137   011F22  6E02               	movwf	(btemp+1)^0,c
 13138   011F24  C001  FFE6         	movff	btemp,postinc1
 13139   011F28  C002  FFE6         	movff	btemp+1,postinc1
 13140   011F2C  ECDA  F09A         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13141   011F30                     
 13142                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13143                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13144   011F30  0EF3               	movlw	-13
 13145   011F32  6AE3               	clrf	plusw1,c
 13146   011F34  2AE3               	incf	plusw1,f,c
 13147   011F36                     
 13148                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13149                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13150   011F36  0EF5               	movlw	245
 13151   011F38  24E1               	addwf	fsr1l,w,c
 13152   011F3A  6ED9               	movwf	fsr2l,c
 13153   011F3C  0EFF               	movlw	255
 13154   011F3E  20E2               	addwfc	fsr1h,w,c
 13155   011F40  6EDA               	movwf	fsr2h,c
 13156   011F42  0E07               	movlw	7
 13157   011F44  6EDF               	movwf	indf2,c
 13158   011F46                     
 13159                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13160                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13161   011F46  0EF6               	movlw	246
 13162   011F48  24E1               	addwf	fsr1l,w,c
 13163   011F4A  6ED9               	movwf	fsr2l,c
 13164   011F4C  0EFF               	movlw	255
 13165   011F4E  20E2               	addwfc	fsr1h,w,c
 13166   011F50  6EDA               	movwf	fsr2h,c
 13167   011F52  0E05               	movlw	5
 13168   011F54  6EDF               	movwf	indf2,c
 13169   011F56                     
 13170                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13171                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13172   011F56  0EF3               	movlw	243
 13173   011F58  24E1               	addwf	fsr1l,w,c
 13174   011F5A  6E01               	movwf	btemp^0,c
 13175   011F5C  0EFF               	movlw	255
 13176   011F5E  20E2               	addwfc	fsr1h,w,c
 13177   011F60  6E02               	movwf	(btemp+1)^0,c
 13178   011F62  C001  FFE6         	movff	btemp,postinc1
 13179   011F66  C002  FFE6         	movff	btemp+1,postinc1
 13180   011F6A  EC0C  F098         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13181   011F6E                     
 13182                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13183                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13184   011F6E  0EFD               	movlw	253
 13185   011F70  24E1               	addwf	fsr1l,w,c
 13186   011F72  6E01               	movwf	btemp^0,c
 13187   011F74  0EFF               	movlw	255
 13188   011F76  20E2               	addwfc	fsr1h,w,c
 13189   011F78  6E02               	movwf	(btemp+1)^0,c
 13190   011F7A  C001  FFE6         	movff	btemp,postinc1
 13191   011F7E  C002  FFE6         	movff	btemp+1,postinc1
 13192   011F82  ECAC  F098         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13193   011F86                     
 13194                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13195                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13196   011F86  0EFE               	movlw	254
 13197   011F88  24E1               	addwf	fsr1l,w,c
 13198   011F8A  6ED9               	movwf	fsr2l,c
 13199   011F8C  0EFF               	movlw	255
 13200   011F8E  20E2               	addwfc	fsr1h,w,c
 13201   011F90  6EDA               	movwf	fsr2h,c
 13202   011F92  50DF               	movf	223,w,c
 13203   011F94  0BE0               	andlw	-32
 13204   011F96  0904               	iorlw	4
 13205   011F98  6EDF               	movwf	223,c
 13206   011F9A                     
 13207                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13208                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13209   011F9A  0EFE               	movlw	254
 13210   011F9C  24E1               	addwf	fsr1l,w,c
 13211   011F9E  6ED9               	movwf	fsr2l,c
 13212   011FA0  0EFF               	movlw	255
 13213   011FA2  20E2               	addwfc	fsr1h,w,c
 13214   011FA4  6EDA               	movwf	fsr2h,c
 13215   011FA6  0EE0               	movlw	224
 13216   011FA8  12DF               	iorwf	223,f,c
 13217   011FAA                     
 13218                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13219                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13220   011FAA  50E1               	movf	fsr1l,w,c
 13221   011FAC  0FFD               	addlw	-3
 13222   011FAE  6ED9               	movwf	fsr2l,c
 13223   011FB0  50E2               	movf	fsr1h,w,c
 13224   011FB2  6EDA               	movwf	fsr2h,c
 13225   011FB4  0EFF               	movlw	255
 13226   011FB6  22DA               	addwfc	fsr2h,f,c
 13227   011FB8  0EC1               	movlw	-63
 13228   011FBA  16DF               	andwf	223,f,c
 13229   011FBC                     
 13230                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13231                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13232   011FBC  0EFD               	movlw	253
 13233   011FBE  24E1               	addwf	fsr1l,w,c
 13234   011FC0  6E01               	movwf	btemp^0,c
 13235   011FC2  0EFF               	movlw	255
 13236   011FC4  20E2               	addwfc	fsr1h,w,c
 13237   011FC6  6E02               	movwf	(btemp+1)^0,c
 13238   011FC8  C001  FFE6         	movff	btemp,postinc1
 13239   011FCC  C002  FFE6         	movff	btemp+1,postinc1
 13240   011FD0  0E01               	movlw	1
 13241   011FD2  6EE6               	movwf	postinc1,c
 13242   011FD4  EC9B  F094         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13243   011FD8                     
 13244                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13245                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13246   011FD8  0EFB               	movlw	251
 13247   011FDA  24E1               	addwf	fsr1l,w,c
 13248   011FDC  6ED9               	movwf	fsr2l,c
 13249   011FDE  0EFF               	movlw	255
 13250   011FE0  20E2               	addwfc	fsr1h,w,c
 13251   011FE2  6EDA               	movwf	fsr2h,c
 13252   011FE4  0E0F               	movlw	15
 13253   011FE6  6EDF               	movwf	indf2,c
 13254   011FE8                     
 13255                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13256                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13257   011FE8  0EFC               	movlw	252
 13258   011FEA  24E1               	addwf	fsr1l,w,c
 13259   011FEC  6ED9               	movwf	fsr2l,c
 13260   011FEE  0EFF               	movlw	255
 13261   011FF0  20E2               	addwfc	fsr1h,w,c
 13262   011FF2  6EDA               	movwf	fsr2h,c
 13263   011FF4  0E07               	movlw	7
 13264   011FF6  6EDF               	movwf	indf2,c
 13265   011FF8                     
 13266                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13267                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13268   011FF8  0EFA               	movlw	-6
 13269   011FFA  6AE3               	clrf	plusw1,c
 13270   011FFC  2AE3               	incf	plusw1,f,c
 13271   011FFE                     
 13272                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13273                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13274   011FFE  0EFA               	movlw	250
 13275   012000  24E1               	addwf	fsr1l,w,c
 13276   012002  6E01               	movwf	btemp^0,c
 13277   012004  0EFF               	movlw	255
 13278   012006  20E2               	addwfc	fsr1h,w,c
 13279   012008  6E02               	movwf	(btemp+1)^0,c
 13280   01200A  C001  FFE6         	movff	btemp,postinc1
 13281   01200E  C002  FFE6         	movff	btemp+1,postinc1
 13282   012012  0E02               	movlw	2
 13283   012014  6EE6               	movwf	postinc1,c
 13284   012016  EC6B  F097         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13285   01201A                     
 13286                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13287   01201A  0E27               	movlw	39
 13288   01201C  6EE6               	movwf	postinc1,c
 13289   01201E  0E00               	movlw	0
 13290   012020  6EE6               	movwf	postinc1,c
 13291   012022  ECB6  F0A4         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13292   012026                     
 13293                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13294   012026  0E00               	movlw	0
 13295   012028  6EE6               	movwf	postinc1,c
 13296   01202A  0E00               	movlw	0
 13297   01202C  6EE6               	movwf	postinc1,c
 13298   01202E  0E00               	movlw	0
 13299   012030  6EE6               	movwf	postinc1,c
 13300   012032  0E00               	movlw	0
 13301   012034  6EE6               	movwf	postinc1,c
 13302   012036  EC7E  F0A4         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13303   01203A                     
 13304                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13305   01203A  ECF4  F0A2         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13306   01203E                     
 13307                           ;can/can.c: 209:     if(withISR == 1)
 13308                           ;stkvar	_withISR @ sp[(-13)+-2]
 13309   01203E  0EF1               	movlw	-15
 13310   012040  04E3               	decf	plusw1,w,c
 13311   012042  A4D8               	btfss	status,2,c
 13312   012044  EF26  F090         	goto	u2951
 13313   012048  EF28  F090         	goto	u2950
 13314   01204C                     u2951:
 13315   01204C  EF30  F090         	goto	l5250
 13316   012050                     u2950:
 13317   012050                     
 13318                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13319   012050  0E02               	movlw	2
 13320   012052  6EE6               	movwf	postinc1,c
 13321   012054  0E00               	movlw	0
 13322   012056  6EE6               	movwf	postinc1,c
 13323   012058  0E00               	movlw	0
 13324   01205A  6EE6               	movwf	postinc1,c
 13325   01205C  EC91  F0A2         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13326   012060                     l5250:
 13327                           
 13328                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13329   012060  0E06               	movlw	6
 13330   012062  6EE6               	movwf	postinc1,c
 13331   012064  ECAD  F0A1         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13332   012068                     
 13333                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13334   012068  0EF1               	movlw	241
 13335   01206A  26E1               	addwf	fsr1l,f,c
 13336   01206C  0EFF               	movlw	255
 13337   01206E  22E2               	addwfc	fsr1h,f,c
 13338   012070  0012               	return		;funcret
 13339   012072                     __end_of_CanInit:
 13340                           	callstack 0
 13341                           
 13342 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13343 ;; Defined at:
 13344 ;;		line 693 in file "can/can.c"
 13345 ;; Parameters:    Size  Location     Type
 13346 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13347 ;;		 -> txqConfig(4), 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13350 ;; Return value:  Size  Location     Type
 13351 ;;                  1  [STACK] char 
 13352 ;; Registers used:
 13353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13354 ;; Tracked objects:
 13355 ;;		On entry : 0/0
 13356 ;;		On exit  : 0/0
 13357 ;;		Unchanged: 0/0
 13358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13363 ;;Total ram usage:        0 bytes
 13364 ;; Hardware stack levels used: 1
 13365 ;; Hardware stack levels required when called: 7
 13366 ;; This function calls:
 13367 ;;		Nothing
 13368 ;; This function is called by:
 13369 ;;		_CanInit
 13370 ;; This function uses a reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text48
 13374   0135B4                     __ptext48:
 13375                           	callstack 0
 13376   0135B4                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13377                           	callstack 0
 13378                           
 13379                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13380   0135B4  0E05               	movlw	5
 13381   0135B6  26E1               	addwf	fsr1l,f,c
 13382   0135B8  0E00               	movlw	0
 13383   0135BA  22E2               	addwfc	fsr1h,f,c
 13384   0135BC                     
 13385                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13386   0135BC  0EDD               	movlw	low _canFifoResetValues
 13387   0135BE  6EF6               	movwf	tblptrl,c
 13388   0135C0                     	if	1	;There is more than 1 active tblptr byte
 13389   0135C0  0EFF               	movlw	high _canFifoResetValues
 13390   0135C2  6EF7               	movwf	tblptrh,c
 13391   0135C4                     	endif
 13392   0135C4                     	if	1	;There are 3 active tblptr bytes
 13393   0135C4  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13394   0135C6  6EF8               	movwf	tblptru,c
 13395   0135C8                     	endif
 13396   0135C8  0009               	tblrd		*+
 13397   0135CA  CFF5 F009          	movff	tablat,btemp+8
 13398   0135CE  0009               	tblrd		*+
 13399   0135D0  CFF5 F00A          	movff	tablat,btemp+9
 13400   0135D4  0009               	tblrd		*+
 13401   0135D6  CFF5 F00B          	movff	tablat,btemp+10
 13402   0135DA  0009               	tblrd		*+
 13403   0135DC  CFF5 F00C          	movff	tablat,btemp+11
 13404                           
 13405                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13406   0135E0  0EFB               	movlw	-5
 13407   0135E2  C009  FFE3         	movff	btemp+8,plusw1
 13408   0135E6  0EFC               	movlw	-4
 13409   0135E8  C00A  FFE3         	movff	btemp+9,plusw1
 13410   0135EC  0EFD               	movlw	-3
 13411   0135EE  C00B  FFE3         	movff	btemp+10,plusw1
 13412   0135F2  0EFE               	movlw	-2
 13413   0135F4  C00C  FFE3         	movff	btemp+11,plusw1
 13414   0135F8                     
 13415                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13416                           ;stkvar	_config @ sp[(-5)+-2]
 13417   0135F8  0EF9               	movlw	-7
 13418   0135FA  CFE3 FFD9          	movff	plusw1,fsr2l
 13419   0135FE  0EFA               	movlw	-6
 13420   013600  CFE3 FFDA          	movff	plusw1,fsr2h
 13421                           
 13422                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13423   013604  0EFD               	movlw	253
 13424   013606  24E1               	addwf	fsr1l,w,c
 13425   013608  6EE9               	movwf	fsr0l,c
 13426   01360A  0EFF               	movlw	255
 13427   01360C  20E2               	addwfc	fsr1h,w,c
 13428   01360E  6EEA               	movwf	fsr0h,c
 13429   013610  50EF               	movf	239,w,c
 13430   013612  0B1F               	andlw	31
 13431   013614  6EDF               	movwf	indf2,c
 13432   013616                     
 13433                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13434                           ;stkvar	_config @ sp[(-5)+-2]
 13435   013616  0EF9               	movlw	-7
 13436   013618  CFE3 F00B          	movff	plusw1,btemp+10
 13437   01361C  0EFA               	movlw	-6
 13438   01361E  CFE3 F00C          	movff	plusw1,btemp+11
 13439   013622  0E01               	movlw	1
 13440   013624  240B               	addwf	(btemp+10)^0,w,c
 13441   013626  6ED9               	movwf	fsr2l,c
 13442   013628  0E00               	movlw	0
 13443   01362A  200C               	addwfc	(btemp+11)^0,w,c
 13444   01362C  6EDA               	movwf	fsr2h,c
 13445                           
 13446                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13447   01362E  0EFD               	movlw	253
 13448   013630  24E1               	addwf	fsr1l,w,c
 13449   013632  6EE9               	movwf	fsr0l,c
 13450   013634  0EFF               	movlw	255
 13451   013636  20E2               	addwfc	fsr1h,w,c
 13452   013638  6EEA               	movwf	fsr0h,c
 13453   01363A  38EF               	swapf	239,w,c
 13454   01363C  32E8               	rrcf	wreg,f,c
 13455   01363E  0B03               	andlw	3
 13456   013640  6EDF               	movwf	indf2,c
 13457   013642                     
 13458                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13459                           ;stkvar	_config @ sp[(-5)+-2]
 13460   013642  0EF9               	movlw	-7
 13461   013644  CFE3 F00B          	movff	plusw1,btemp+10
 13462   013648  0EFA               	movlw	-6
 13463   01364A  CFE3 F00C          	movff	plusw1,btemp+11
 13464   01364E  0E02               	movlw	2
 13465   013650  240B               	addwf	(btemp+10)^0,w,c
 13466   013652  6ED9               	movwf	fsr2l,c
 13467   013654  0E00               	movlw	0
 13468   013656  200C               	addwfc	(btemp+11)^0,w,c
 13469   013658  6EDA               	movwf	fsr2h,c
 13470                           
 13471                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13472   01365A  0EFE               	movlw	254
 13473   01365C  24E1               	addwf	fsr1l,w,c
 13474   01365E  6EE9               	movwf	fsr0l,c
 13475   013660  0EFF               	movlw	255
 13476   013662  20E2               	addwfc	fsr1h,w,c
 13477   013664  6EEA               	movwf	fsr0h,c
 13478   013666  50EF               	movf	239,w,c
 13479   013668  0B1F               	andlw	31
 13480   01366A  6EDF               	movwf	indf2,c
 13481   01366C                     
 13482                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13483                           ;stkvar	_config @ sp[(-5)+-2]
 13484   01366C  0EF9               	movlw	-7
 13485   01366E  CFE3 F00B          	movff	plusw1,btemp+10
 13486   013672  0EFA               	movlw	-6
 13487   013674  CFE3 F00C          	movff	plusw1,btemp+11
 13488   013678  0E03               	movlw	3
 13489   01367A  240B               	addwf	(btemp+10)^0,w,c
 13490   01367C  6ED9               	movwf	fsr2l,c
 13491   01367E  0E00               	movlw	0
 13492   013680  200C               	addwfc	(btemp+11)^0,w,c
 13493   013682  6EDA               	movwf	fsr2h,c
 13494                           
 13495                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13496   013684  0EFE               	movlw	254
 13497   013686  24E1               	addwf	fsr1l,w,c
 13498   013688  6EE9               	movwf	fsr0l,c
 13499   01368A  0EFF               	movlw	255
 13500   01368C  20E2               	addwfc	fsr1h,w,c
 13501   01368E  6EEA               	movwf	fsr0h,c
 13502   013690  38EF               	swapf	239,w,c
 13503   013692  32E8               	rrcf	wreg,f,c
 13504   013694  0B07               	andlw	7
 13505   013696  6EDF               	movwf	indf2,c
 13506   013698                     
 13507                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13508   013698  0EF9               	movlw	249
 13509   01369A  26E1               	addwf	fsr1l,f,c
 13510   01369C  0EFF               	movlw	255
 13511   01369E  22E2               	addwfc	fsr1h,f,c
 13512   0136A0  0012               	return		;funcret
 13513   0136A2                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13514                           	callstack 0
 13515                           
 13516 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13517 ;; Defined at:
 13518 ;;		line 671 in file "can/can.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13521 ;;		 -> txqConfig(4), 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13524 ;;  a               2    0        unsigned short 
 13525 ;;  spiTransferE    1    0        char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1  [STACK] char 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;Total ram usage:        0 bytes
 13540 ;; Hardware stack levels used: 1
 13541 ;; Hardware stack levels required when called: 9
 13542 ;; This function calls:
 13543 ;;		_DRV_CANFDSPI_WriteWord
 13544 ;; This function is called by:
 13545 ;;		_CanInit
 13546 ;; This function uses a reentrant model
 13547 ;;
 13548                           
 13549                           	psect	text49
 13550   013018                     __ptext49:
 13551                           	callstack 0
 13552   013018                     _DRV_CANFDSPI_TransmitQueueConfigure:
 13553                           	callstack 0
 13554                           
 13555                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13556   013018  52E6               	movf	postinc1,f,c
 13557   01301A  52E6               	movf	postinc1,f,c
 13558   01301C  52E6               	movf	postinc1,f,c
 13559   01301E  52E6               	movf	postinc1,f,c
 13560   013020                     
 13561                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 13562   013020  0EDD               	movlw	low _canFifoResetValues
 13563   013022  6EF6               	movwf	tblptrl,c
 13564   013024                     	if	1	;There is more than 1 active tblptr byte
 13565   013024  0EFF               	movlw	high _canFifoResetValues
 13566   013026  6EF7               	movwf	tblptrh,c
 13567   013028                     	endif
 13568   013028                     	if	1	;There are 3 active tblptr bytes
 13569   013028  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13570   01302A  6EF8               	movwf	tblptru,c
 13571   01302C                     	endif
 13572   01302C  0009               	tblrd		*+
 13573   01302E  CFF5 F009          	movff	tablat,btemp+8
 13574   013032  0009               	tblrd		*+
 13575   013034  CFF5 F00A          	movff	tablat,btemp+9
 13576   013038  0009               	tblrd		*+
 13577   01303A  CFF5 F00B          	movff	tablat,btemp+10
 13578   01303E  0009               	tblrd		*+
 13579   013040  CFF5 F00C          	movff	tablat,btemp+11
 13580                           
 13581                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13582   013044  0EFC               	movlw	-4
 13583   013046  C009  FFE3         	movff	btemp+8,plusw1
 13584   01304A  0EFD               	movlw	-3
 13585   01304C  C00A  FFE3         	movff	btemp+9,plusw1
 13586   013050  0EFE               	movlw	-2
 13587   013052  C00B  FFE3         	movff	btemp+10,plusw1
 13588   013056  0EFF               	movlw	-1
 13589   013058  C00C  FFE3         	movff	btemp+11,plusw1
 13590   01305C                     
 13591                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 13592                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13593   01305C  50E1               	movf	fsr1l,w,c
 13594   01305E  0FFC               	addlw	-4
 13595   013060  6ED9               	movwf	fsr2l,c
 13596   013062  50E2               	movf	fsr1h,w,c
 13597   013064  6EDA               	movwf	fsr2h,c
 13598   013066  0EFF               	movlw	255
 13599   013068  22DA               	addwfc	fsr2h,f,c
 13600   01306A  8EDF               	bsf	indf2,7,c
 13601   01306C                     
 13602                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13603                           ;stkvar	_config @ sp[(-4)+-2]
 13604   01306C  0EFA               	movlw	-6
 13605   01306E  CFE3 F00B          	movff	plusw1,btemp+10
 13606   013072  0EFB               	movlw	-5
 13607   013074  CFE3 F00C          	movff	plusw1,btemp+11
 13608   013078  0E02               	movlw	2
 13609   01307A  240B               	addwf	(btemp+10)^0,w,c
 13610   01307C  6ED9               	movwf	fsr2l,c
 13611   01307E  0E00               	movlw	0
 13612   013080  200C               	addwfc	(btemp+11)^0,w,c
 13613   013082  6EDA               	movwf	fsr2h,c
 13614   013084  50DF               	movf	indf2,w,c
 13615   013086  6E0C               	movwf	(btemp+11)^0,c
 13616                           
 13617                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13618   013088  0EFF               	movlw	255
 13619   01308A  24E1               	addwf	fsr1l,w,c
 13620   01308C  6ED9               	movwf	fsr2l,c
 13621   01308E  0EFF               	movlw	255
 13622   013090  20E2               	addwfc	fsr1h,w,c
 13623   013092  6EDA               	movwf	fsr2h,c
 13624   013094  50DF               	movf	223,w,c
 13625   013096  180C               	xorwf	(btemp+11)^0,w,c
 13626   013098  0BE0               	andlw	-32
 13627   01309A  180C               	xorwf	(btemp+11)^0,w,c
 13628   01309C  6EDF               	movwf	223,c
 13629   01309E                     
 13630                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13631                           ;stkvar	_config @ sp[(-4)+-2]
 13632   01309E  0EFA               	movlw	-6
 13633   0130A0  CFE3 F00B          	movff	plusw1,btemp+10
 13634   0130A4  0EFB               	movlw	-5
 13635   0130A6  CFE3 F00C          	movff	plusw1,btemp+11
 13636   0130AA  0E03               	movlw	3
 13637   0130AC  240B               	addwf	(btemp+10)^0,w,c
 13638   0130AE  6ED9               	movwf	fsr2l,c
 13639   0130B0  0E00               	movlw	0
 13640   0130B2  200C               	addwfc	(btemp+11)^0,w,c
 13641   0130B4  6EDA               	movwf	fsr2h,c
 13642   0130B6  50DF               	movf	indf2,w,c
 13643   0130B8  6E0C               	movwf	(btemp+11)^0,c
 13644                           
 13645                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13646   0130BA  0EFF               	movlw	255
 13647   0130BC  24E1               	addwf	fsr1l,w,c
 13648   0130BE  6ED9               	movwf	fsr2l,c
 13649   0130C0  0EFF               	movlw	255
 13650   0130C2  20E2               	addwfc	fsr1h,w,c
 13651   0130C4  6EDA               	movwf	fsr2h,c
 13652   0130C6  3A0C               	swapf	(btemp+11)^0,f,c
 13653   0130C8  460C               	rlncf	(btemp+11)^0,f,c
 13654   0130CA  50DF               	movf	223,w,c
 13655   0130CC  180C               	xorwf	(btemp+11)^0,w,c
 13656   0130CE  0B1F               	andlw	-225
 13657   0130D0  180C               	xorwf	(btemp+11)^0,w,c
 13658   0130D2  6EDF               	movwf	223,c
 13659   0130D4                     
 13660                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13661                           ;stkvar	_config @ sp[(-4)+-2]
 13662   0130D4  0EFA               	movlw	-6
 13663   0130D6  CFE3 F00B          	movff	plusw1,btemp+10
 13664   0130DA  0EFB               	movlw	-5
 13665   0130DC  CFE3 F00C          	movff	plusw1,btemp+11
 13666   0130E0  0E01               	movlw	1
 13667   0130E2  240B               	addwf	(btemp+10)^0,w,c
 13668   0130E4  6ED9               	movwf	fsr2l,c
 13669   0130E6  0E00               	movlw	0
 13670   0130E8  200C               	addwfc	(btemp+11)^0,w,c
 13671   0130EA  6EDA               	movwf	fsr2h,c
 13672   0130EC  50DF               	movf	indf2,w,c
 13673   0130EE  6E0C               	movwf	(btemp+11)^0,c
 13674                           
 13675                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13676   0130F0  0EFE               	movlw	254
 13677   0130F2  24E1               	addwf	fsr1l,w,c
 13678   0130F4  6ED9               	movwf	fsr2l,c
 13679   0130F6  0EFF               	movlw	255
 13680   0130F8  20E2               	addwfc	fsr1h,w,c
 13681   0130FA  6EDA               	movwf	fsr2h,c
 13682   0130FC  3A0C               	swapf	(btemp+11)^0,f,c
 13683   0130FE  460C               	rlncf	(btemp+11)^0,f,c
 13684   013100  50DF               	movf	223,w,c
 13685   013102  180C               	xorwf	(btemp+11)^0,w,c
 13686   013104  0B9F               	andlw	-97
 13687   013106  180C               	xorwf	(btemp+11)^0,w,c
 13688   013108  6EDF               	movwf	223,c
 13689   01310A                     
 13690                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13691                           ;stkvar	_config @ sp[(-4)+-2]
 13692   01310A  0EFA               	movlw	-6
 13693   01310C  CFE3 FFD9          	movff	plusw1,fsr2l
 13694   013110  0EFB               	movlw	-5
 13695   013112  CFE3 FFDA          	movff	plusw1,fsr2h
 13696   013116  50DF               	movf	indf2,w,c
 13697   013118  6E0C               	movwf	(btemp+11)^0,c
 13698                           
 13699                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13700   01311A  0EFE               	movlw	254
 13701   01311C  24E1               	addwf	fsr1l,w,c
 13702   01311E  6ED9               	movwf	fsr2l,c
 13703   013120  0EFF               	movlw	255
 13704   013122  20E2               	addwfc	fsr1h,w,c
 13705   013124  6EDA               	movwf	fsr2h,c
 13706   013126  50DF               	movf	223,w,c
 13707   013128  180C               	xorwf	(btemp+11)^0,w,c
 13708   01312A  0BE0               	andlw	-32
 13709   01312C  180C               	xorwf	(btemp+11)^0,w,c
 13710   01312E  6EDF               	movwf	223,c
 13711   013130                     
 13712                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13713   013130  0EFC               	movlw	-4
 13714   013132  CFE3 FFE6          	movff	plusw1,postinc1
 13715   013136  CFE3 FFE6          	movff	plusw1,postinc1
 13716   01313A  CFE3 FFE6          	movff	plusw1,postinc1
 13717   01313E  CFE3 FFE6          	movff	plusw1,postinc1
 13718   013142  0E50               	movlw	80
 13719   013144  6EE6               	movwf	postinc1,c
 13720   013146  0E00               	movlw	0
 13721   013148  6EE6               	movwf	postinc1,c
 13722   01314A  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13723   01314E                     
 13724                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 13725   01314E  0EFA               	movlw	250
 13726   013150  26E1               	addwf	fsr1l,f,c
 13727   013152  0EFF               	movlw	255
 13728   013154  22E2               	addwfc	fsr1h,f,c
 13729   013156  0012               	return		;funcret
 13730   013158                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 13731                           	callstack 0
 13732                           
 13733 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 13734 ;; Defined at:
 13735 ;;		line 657 in file "can/can.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13738 ;;		 -> txfConfig(2), 
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1  [STACK] char 
 13743 ;; Registers used:
 13744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13745 ;; Tracked objects:
 13746 ;;		On entry : 0/0
 13747 ;;		On exit  : 0/0
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13754 ;;Total ram usage:        0 bytes
 13755 ;; Hardware stack levels used: 1
 13756 ;; Hardware stack levels required when called: 7
 13757 ;; This function calls:
 13758 ;;		Nothing
 13759 ;; This function is called by:
 13760 ;;		_CanInit
 13761 ;; This function uses a reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text50
 13765   013158                     __ptext50:
 13766                           	callstack 0
 13767   013158                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13768                           	callstack 0
 13769                           
 13770                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13771   013158  0E05               	movlw	5
 13772   01315A  26E1               	addwf	fsr1l,f,c
 13773   01315C  0E00               	movlw	0
 13774   01315E  22E2               	addwfc	fsr1h,f,c
 13775   013160                     
 13776                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13777   013160  0EDD               	movlw	low _canFifoResetValues
 13778   013162  6EF6               	movwf	tblptrl,c
 13779   013164                     	if	1	;There is more than 1 active tblptr byte
 13780   013164  0EFF               	movlw	high _canFifoResetValues
 13781   013166  6EF7               	movwf	tblptrh,c
 13782   013168                     	endif
 13783   013168                     	if	1	;There are 3 active tblptr bytes
 13784   013168  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13785   01316A  6EF8               	movwf	tblptru,c
 13786   01316C                     	endif
 13787   01316C  0009               	tblrd		*+
 13788   01316E  CFF5 F009          	movff	tablat,btemp+8
 13789   013172  0009               	tblrd		*+
 13790   013174  CFF5 F00A          	movff	tablat,btemp+9
 13791   013178  0009               	tblrd		*+
 13792   01317A  CFF5 F00B          	movff	tablat,btemp+10
 13793   01317E  0009               	tblrd		*+
 13794   013180  CFF5 F00C          	movff	tablat,btemp+11
 13795                           
 13796                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13797   013184  0EFB               	movlw	-5
 13798   013186  C009  FFE3         	movff	btemp+8,plusw1
 13799   01318A  0EFC               	movlw	-4
 13800   01318C  C00A  FFE3         	movff	btemp+9,plusw1
 13801   013190  0EFD               	movlw	-3
 13802   013192  C00B  FFE3         	movff	btemp+10,plusw1
 13803   013196  0EFE               	movlw	-2
 13804   013198  C00C  FFE3         	movff	btemp+11,plusw1
 13805   01319C                     
 13806                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13807                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13808   01319C  50E1               	movf	fsr1l,w,c
 13809   01319E  0FFB               	addlw	-5
 13810   0131A0  6ED9               	movwf	fsr2l,c
 13811   0131A2  50E2               	movf	fsr1h,w,c
 13812   0131A4  6EDA               	movwf	fsr2h,c
 13813   0131A6  0EFF               	movlw	255
 13814   0131A8  22DA               	addwfc	fsr2h,f,c
 13815                           
 13816                           ;stkvar	_config @ sp[(-5)+-2]
 13817   0131AA  0EF9               	movlw	-7
 13818   0131AC  CFE3 FFE9          	movff	plusw1,fsr0l
 13819   0131B0  0EFA               	movlw	-6
 13820   0131B2  CFE3 FFEA          	movff	plusw1,fsr0h
 13821   0131B6  90EF               	bcf	indf0,0,c
 13822   0131B8  ACDF               	btfss	indf2,6,c
 13823   0131BA  EFE0  F098         	goto	u995
 13824   0131BE  80EF               	bsf	indf0,0,c
 13825   0131C0                     u995:
 13826   0131C0                     
 13827                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13828                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13829   0131C0  0EFD               	movlw	253
 13830   0131C2  24E1               	addwf	fsr1l,w,c
 13831   0131C4  6ED9               	movwf	fsr2l,c
 13832   0131C6  0EFF               	movlw	255
 13833   0131C8  20E2               	addwfc	fsr1h,w,c
 13834   0131CA  6EDA               	movwf	fsr2h,c
 13835   0131CC  50DF               	movf	223,w,c
 13836   0131CE  0B1F               	andlw	31
 13837   0131D0  6E0C               	movwf	(btemp+11)^0,c
 13838                           
 13839                           ;stkvar	_config @ sp[(-5)+-2]
 13840   0131D2  0EF9               	movlw	-7
 13841   0131D4  CFE3 FFD9          	movff	plusw1,fsr2l
 13842   0131D8  0EFA               	movlw	-6
 13843   0131DA  CFE3 FFDA          	movff	plusw1,fsr2h
 13844   0131DE  460C               	rlncf	(btemp+11)^0,f,c
 13845   0131E0  50DF               	movf	223,w,c
 13846   0131E2  180C               	xorwf	(btemp+11)^0,w,c
 13847   0131E4  0BC1               	andlw	-63
 13848   0131E6  180C               	xorwf	(btemp+11)^0,w,c
 13849   0131E8  6EDF               	movwf	223,c
 13850   0131EA                     
 13851                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13852                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13853   0131EA  0EFD               	movlw	253
 13854   0131EC  24E1               	addwf	fsr1l,w,c
 13855   0131EE  6ED9               	movwf	fsr2l,c
 13856   0131F0  0EFF               	movlw	255
 13857   0131F2  20E2               	addwfc	fsr1h,w,c
 13858   0131F4  6EDA               	movwf	fsr2h,c
 13859   0131F6  38DF               	swapf	223,w,c
 13860   0131F8  32E8               	rrcf	wreg,f,c
 13861   0131FA  0B03               	andlw	3
 13862   0131FC  6E0C               	movwf	(btemp+11)^0,c
 13863                           
 13864                           ;stkvar	_config @ sp[(-5)+-2]
 13865   0131FE  0EF9               	movlw	-7
 13866   013200  CFE3 FFD9          	movff	plusw1,fsr2l
 13867   013204  0EFA               	movlw	-6
 13868   013206  CFE3 FFDA          	movff	plusw1,fsr2h
 13869   01320A  3A0C               	swapf	(btemp+11)^0,f,c
 13870   01320C  460C               	rlncf	(btemp+11)^0,f,c
 13871   01320E  460C               	rlncf	(btemp+11)^0,f,c
 13872   013210  50DF               	movf	223,w,c
 13873   013212  180C               	xorwf	(btemp+11)^0,w,c
 13874   013214  0B3F               	andlw	-193
 13875   013216  180C               	xorwf	(btemp+11)^0,w,c
 13876   013218  6EDF               	movwf	223,c
 13877   01321A                     
 13878                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13879                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13880   01321A  0EFE               	movlw	254
 13881   01321C  24E1               	addwf	fsr1l,w,c
 13882   01321E  6ED9               	movwf	fsr2l,c
 13883   013220  0EFF               	movlw	255
 13884   013222  20E2               	addwfc	fsr1h,w,c
 13885   013224  6EDA               	movwf	fsr2h,c
 13886   013226  50DF               	movf	223,w,c
 13887   013228  0B1F               	andlw	31
 13888   01322A  6E0C               	movwf	(btemp+11)^0,c
 13889                           
 13890                           ;stkvar	_config @ sp[(-5)+-2]
 13891   01322C  0EF9               	movlw	-7
 13892   01322E  CFE3 F009          	movff	plusw1,btemp+8
 13893   013232  0EFA               	movlw	-6
 13894   013234  CFE3 F00A          	movff	plusw1,btemp+9
 13895   013238  0E01               	movlw	1
 13896   01323A  2409               	addwf	(btemp+8)^0,w,c
 13897   01323C  6ED9               	movwf	fsr2l,c
 13898   01323E  0E00               	movlw	0
 13899   013240  200A               	addwfc	(btemp+9)^0,w,c
 13900   013242  6EDA               	movwf	fsr2h,c
 13901   013244  50DF               	movf	223,w,c
 13902   013246  180C               	xorwf	(btemp+11)^0,w,c
 13903   013248  0BE0               	andlw	-32
 13904   01324A  180C               	xorwf	(btemp+11)^0,w,c
 13905   01324C  6EDF               	movwf	223,c
 13906   01324E                     
 13907                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13908                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13909   01324E  0EFE               	movlw	254
 13910   013250  24E1               	addwf	fsr1l,w,c
 13911   013252  6ED9               	movwf	fsr2l,c
 13912   013254  0EFF               	movlw	255
 13913   013256  20E2               	addwfc	fsr1h,w,c
 13914   013258  6EDA               	movwf	fsr2h,c
 13915   01325A  38DF               	swapf	223,w,c
 13916   01325C  32E8               	rrcf	wreg,f,c
 13917   01325E  0B07               	andlw	7
 13918   013260  6E0C               	movwf	(btemp+11)^0,c
 13919                           
 13920                           ;stkvar	_config @ sp[(-5)+-2]
 13921   013262  0EF9               	movlw	-7
 13922   013264  CFE3 F009          	movff	plusw1,btemp+8
 13923   013268  0EFA               	movlw	-6
 13924   01326A  CFE3 F00A          	movff	plusw1,btemp+9
 13925   01326E  0E01               	movlw	1
 13926   013270  2409               	addwf	(btemp+8)^0,w,c
 13927   013272  6ED9               	movwf	fsr2l,c
 13928   013274  0E00               	movlw	0
 13929   013276  200A               	addwfc	(btemp+9)^0,w,c
 13930   013278  6EDA               	movwf	fsr2h,c
 13931   01327A  3A0C               	swapf	(btemp+11)^0,f,c
 13932   01327C  460C               	rlncf	(btemp+11)^0,f,c
 13933   01327E  50DF               	movf	223,w,c
 13934   013280  180C               	xorwf	(btemp+11)^0,w,c
 13935   013282  0B1F               	andlw	-225
 13936   013284  180C               	xorwf	(btemp+11)^0,w,c
 13937   013286  6EDF               	movwf	223,c
 13938   013288                     
 13939                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13940   013288  0EF9               	movlw	249
 13941   01328A  26E1               	addwf	fsr1l,f,c
 13942   01328C  0EFF               	movlw	255
 13943   01328E  22E2               	addwfc	fsr1h,f,c
 13944   013290  0012               	return		;funcret
 13945   013292                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13946                           	callstack 0
 13947                           
 13948 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 13949 ;; Defined at:
 13950 ;;		line 633 in file "can/can.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;  channel         1  [STACK] enum E5287
 13953 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13954 ;;		 -> txfConfig(2), 
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13957 ;;  a               2  [STACK] unsigned short 
 13958 ;;  spiTransferE    1    0        char 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;                  1  [STACK] char 
 13961 ;; Registers used:
 13962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13972 ;;Total ram usage:        0 bytes
 13973 ;; Hardware stack levels used: 1
 13974 ;; Hardware stack levels required when called: 9
 13975 ;; This function calls:
 13976 ;;		_DRV_CANFDSPI_WriteWord
 13977 ;; This function is called by:
 13978 ;;		_CanInit
 13979 ;; This function uses a reentrant model
 13980 ;;
 13981                           
 13982                           	psect	text51
 13983   012936                     __ptext51:
 13984                           	callstack 0
 13985   012936                     _DRV_CANFDSPI_TransmitChannelConfigure:
 13986                           	callstack 0
 13987                           
 13988                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13989   012936  0E07               	movlw	7
 13990   012938  26E1               	addwf	fsr1l,f,c
 13991   01293A  0E00               	movlw	0
 13992   01293C  22E2               	addwfc	fsr1h,f,c
 13993   01293E                     
 13994                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 13995   01293E  0EDD               	movlw	low _canFifoResetValues
 13996   012940  6EF6               	movwf	tblptrl,c
 13997   012942                     	if	1	;There is more than 1 active tblptr byte
 13998   012942  0EFF               	movlw	high _canFifoResetValues
 13999   012944  6EF7               	movwf	tblptrh,c
 14000   012946                     	endif
 14001   012946                     	if	1	;There are 3 active tblptr bytes
 14002   012946  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14003   012948  6EF8               	movwf	tblptru,c
 14004   01294A                     	endif
 14005   01294A  0009               	tblrd		*+
 14006   01294C  CFF5 F009          	movff	tablat,btemp+8
 14007   012950  0009               	tblrd		*+
 14008   012952  CFF5 F00A          	movff	tablat,btemp+9
 14009   012956  0009               	tblrd		*+
 14010   012958  CFF5 F00B          	movff	tablat,btemp+10
 14011   01295C  0009               	tblrd		*+
 14012   01295E  CFF5 F00C          	movff	tablat,btemp+11
 14013                           
 14014                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14015   012962  0EF9               	movlw	-7
 14016   012964  C009  FFE3         	movff	btemp+8,plusw1
 14017   012968  0EFA               	movlw	-6
 14018   01296A  C00A  FFE3         	movff	btemp+9,plusw1
 14019   01296E  0EFB               	movlw	-5
 14020   012970  C00B  FFE3         	movff	btemp+10,plusw1
 14021   012974  0EFC               	movlw	-4
 14022   012976  C00C  FFE3         	movff	btemp+11,plusw1
 14023   01297A                     
 14024                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 14025                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14026   01297A  50E1               	movf	fsr1l,w,c
 14027   01297C  0FF9               	addlw	-7
 14028   01297E  6ED9               	movwf	fsr2l,c
 14029   012980  50E2               	movf	fsr1h,w,c
 14030   012982  6EDA               	movwf	fsr2h,c
 14031   012984  0EFF               	movlw	255
 14032   012986  22DA               	addwfc	fsr2h,f,c
 14033   012988  8EDF               	bsf	indf2,7,c
 14034   01298A                     
 14035                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 14036                           ;stkvar	_config @ sp[(-7)+-3]
 14037   01298A  0EF6               	movlw	-10
 14038   01298C  CFE3 F00B          	movff	plusw1,btemp+10
 14039   012990  0EF7               	movlw	-9
 14040   012992  CFE3 F00C          	movff	plusw1,btemp+11
 14041   012996  0E01               	movlw	1
 14042   012998  240B               	addwf	(btemp+10)^0,w,c
 14043   01299A  6ED9               	movwf	fsr2l,c
 14044   01299C  0E00               	movlw	0
 14045   01299E  200C               	addwfc	(btemp+11)^0,w,c
 14046   0129A0  6EDA               	movwf	fsr2h,c
 14047   0129A2  50DF               	movf	223,w,c
 14048   0129A4  0B1F               	andlw	31
 14049   0129A6  6E0C               	movwf	(btemp+11)^0,c
 14050                           
 14051                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14052   0129A8  0EFC               	movlw	252
 14053   0129AA  24E1               	addwf	fsr1l,w,c
 14054   0129AC  6ED9               	movwf	fsr2l,c
 14055   0129AE  0EFF               	movlw	255
 14056   0129B0  20E2               	addwfc	fsr1h,w,c
 14057   0129B2  6EDA               	movwf	fsr2h,c
 14058   0129B4  50DF               	movf	223,w,c
 14059   0129B6  180C               	xorwf	(btemp+11)^0,w,c
 14060   0129B8  0BE0               	andlw	-32
 14061   0129BA  180C               	xorwf	(btemp+11)^0,w,c
 14062   0129BC  6EDF               	movwf	223,c
 14063   0129BE                     
 14064                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14065                           ;stkvar	_config @ sp[(-7)+-3]
 14066   0129BE  0EF6               	movlw	-10
 14067   0129C0  CFE3 F00B          	movff	plusw1,btemp+10
 14068   0129C4  0EF7               	movlw	-9
 14069   0129C6  CFE3 F00C          	movff	plusw1,btemp+11
 14070   0129CA  0E01               	movlw	1
 14071   0129CC  240B               	addwf	(btemp+10)^0,w,c
 14072   0129CE  6ED9               	movwf	fsr2l,c
 14073   0129D0  0E00               	movlw	0
 14074   0129D2  200C               	addwfc	(btemp+11)^0,w,c
 14075   0129D4  6EDA               	movwf	fsr2h,c
 14076   0129D6  38DF               	swapf	223,w,c
 14077   0129D8  32E8               	rrcf	wreg,f,c
 14078   0129DA  0B07               	andlw	7
 14079   0129DC  6E0C               	movwf	(btemp+11)^0,c
 14080                           
 14081                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14082   0129DE  0EFC               	movlw	252
 14083   0129E0  24E1               	addwf	fsr1l,w,c
 14084   0129E2  6ED9               	movwf	fsr2l,c
 14085   0129E4  0EFF               	movlw	255
 14086   0129E6  20E2               	addwfc	fsr1h,w,c
 14087   0129E8  6EDA               	movwf	fsr2h,c
 14088   0129EA  3A0C               	swapf	(btemp+11)^0,f,c
 14089   0129EC  460C               	rlncf	(btemp+11)^0,f,c
 14090   0129EE  50DF               	movf	223,w,c
 14091   0129F0  180C               	xorwf	(btemp+11)^0,w,c
 14092   0129F2  0B1F               	andlw	-225
 14093   0129F4  180C               	xorwf	(btemp+11)^0,w,c
 14094   0129F6  6EDF               	movwf	223,c
 14095   0129F8                     
 14096                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14097                           ;stkvar	_config @ sp[(-7)+-3]
 14098   0129F8  0EF6               	movlw	-10
 14099   0129FA  CFE3 FFD9          	movff	plusw1,fsr2l
 14100   0129FE  0EF7               	movlw	-9
 14101   012A00  CFE3 FFDA          	movff	plusw1,fsr2h
 14102   012A04  38DF               	swapf	223,w,c
 14103   012A06  32E8               	rrcf	wreg,f,c
 14104   012A08  32E8               	rrcf	wreg,f,c
 14105   012A0A  0B03               	andlw	3
 14106   012A0C  6E0C               	movwf	(btemp+11)^0,c
 14107                           
 14108                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14109   012A0E  0EFB               	movlw	251
 14110   012A10  24E1               	addwf	fsr1l,w,c
 14111   012A12  6ED9               	movwf	fsr2l,c
 14112   012A14  0EFF               	movlw	255
 14113   012A16  20E2               	addwfc	fsr1h,w,c
 14114   012A18  6EDA               	movwf	fsr2h,c
 14115   012A1A  3A0C               	swapf	(btemp+11)^0,f,c
 14116   012A1C  460C               	rlncf	(btemp+11)^0,f,c
 14117   012A1E  50DF               	movf	223,w,c
 14118   012A20  180C               	xorwf	(btemp+11)^0,w,c
 14119   012A22  0B9F               	andlw	-97
 14120   012A24  180C               	xorwf	(btemp+11)^0,w,c
 14121   012A26  6EDF               	movwf	223,c
 14122   012A28                     
 14123                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14124                           ;stkvar	_config @ sp[(-7)+-3]
 14125   012A28  0EF6               	movlw	-10
 14126   012A2A  CFE3 FFD9          	movff	plusw1,fsr2l
 14127   012A2E  0EF7               	movlw	-9
 14128   012A30  CFE3 FFDA          	movff	plusw1,fsr2h
 14129   012A34  30DF               	rrcf	223,w,c
 14130   012A36  0B1F               	andlw	31
 14131   012A38  6E0C               	movwf	(btemp+11)^0,c
 14132                           
 14133                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14134   012A3A  0EFB               	movlw	251
 14135   012A3C  24E1               	addwf	fsr1l,w,c
 14136   012A3E  6ED9               	movwf	fsr2l,c
 14137   012A40  0EFF               	movlw	255
 14138   012A42  20E2               	addwfc	fsr1h,w,c
 14139   012A44  6EDA               	movwf	fsr2h,c
 14140   012A46  50DF               	movf	223,w,c
 14141   012A48  180C               	xorwf	(btemp+11)^0,w,c
 14142   012A4A  0BE0               	andlw	-32
 14143   012A4C  180C               	xorwf	(btemp+11)^0,w,c
 14144   012A4E  6EDF               	movwf	223,c
 14145   012A50                     
 14146                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14147                           ;stkvar	_config @ sp[(-7)+-3]
 14148   012A50  0EF6               	movlw	-10
 14149   012A52  CFE3 FFD9          	movff	plusw1,fsr2l
 14150   012A56  0EF7               	movlw	-9
 14151   012A58  CFE3 FFDA          	movff	plusw1,fsr2h
 14152                           
 14153                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14154   012A5C  50E1               	movf	fsr1l,w,c
 14155   012A5E  0FF9               	addlw	-7
 14156   012A60  6EE9               	movwf	fsr0l,c
 14157   012A62  50E2               	movf	fsr1h,w,c
 14158   012A64  6EEA               	movwf	fsr0h,c
 14159   012A66  0EFF               	movlw	255
 14160   012A68  22EA               	addwfc	fsr0h,f,c
 14161   012A6A  9CEF               	bcf	indf0,6,c
 14162   012A6C  A0DF               	btfss	indf2,0,c
 14163   012A6E  EF3A  F095         	goto	u2495
 14164   012A72  8CEF               	bsf	indf0,6,c
 14165   012A74                     u2495:
 14166   012A74                     
 14167                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14168                           ;stkvar	_channel @ sp[(-7)+-1]
 14169   012A74  0EF8               	movlw	-8
 14170   012A76  50E3               	movf	plusw1,w,c
 14171   012A78  0D0C               	mullw	12
 14172   012A7A  0E50               	movlw	80
 14173   012A7C  26F3               	addwf	243,f,c
 14174   012A7E  0E00               	movlw	0
 14175   012A80  22F4               	addwfc	244,f,c
 14176                           
 14177                           ;stkvar	_a @ sp[(-7)+5]
 14178   012A82  0EFE               	movlw	-2
 14179   012A84  CFF3 FFE3          	movff	prodl,plusw1
 14180   012A88  0EFF               	movlw	-1
 14181   012A8A  CFF4 FFE3          	movff	prodh,plusw1
 14182   012A8E                     
 14183                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14184   012A8E  0EF9               	movlw	-7
 14185   012A90  CFE3 FFE6          	movff	plusw1,postinc1
 14186   012A94  CFE3 FFE6          	movff	plusw1,postinc1
 14187   012A98  CFE3 FFE6          	movff	plusw1,postinc1
 14188   012A9C  CFE3 FFE6          	movff	plusw1,postinc1
 14189                           
 14190                           ;stkvar	_a @ sp[(-11)+5]
 14191   012AA0  0EFA               	movlw	-6
 14192   012AA2  CFE3 FFE6          	movff	plusw1,postinc1
 14193   012AA6  CFE3 FFE6          	movff	plusw1,postinc1
 14194   012AAA  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14195   012AAE                     
 14196                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14197   012AAE  0EF6               	movlw	246
 14198   012AB0  26E1               	addwf	fsr1l,f,c
 14199   012AB2  0EFF               	movlw	255
 14200   012AB4  22E2               	addwfc	fsr1h,f,c
 14201   012AB6  0012               	return		;funcret
 14202   012AB8                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14203                           	callstack 0
 14204                           
 14205 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14206 ;; Defined at:
 14207 ;;		line 2690 in file "can/can.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;  ts              4  [STACK] unsigned long 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  spiTransferE    1    0        char 
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  1  [STACK] char 
 14214 ;; Registers used:
 14215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14216 ;; Tracked objects:
 14217 ;;		On entry : 0/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;Total ram usage:        0 bytes
 14226 ;; Hardware stack levels used: 1
 14227 ;; Hardware stack levels required when called: 9
 14228 ;; This function calls:
 14229 ;;		_DRV_CANFDSPI_WriteWord
 14230 ;; This function is called by:
 14231 ;;		_CanInit
 14232 ;; This function uses a reentrant model
 14233 ;;
 14234                           
 14235                           	psect	text52
 14236   0148FC                     __ptext52:
 14237                           	callstack 0
 14238   0148FC                     _DRV_CANFDSPI_TimeStampSet:
 14239                           	callstack 20
 14240   0148FC                     
 14241                           ;stkvar	_ts @ sp[(0)+-4]
 14242   0148FC  0EFC               	movlw	-4
 14243   0148FE  CFE3 FFE6          	movff	plusw1,postinc1
 14244   014902  CFE3 FFE6          	movff	plusw1,postinc1
 14245   014906  CFE3 FFE6          	movff	plusw1,postinc1
 14246   01490A  CFE3 FFE6          	movff	plusw1,postinc1
 14247   01490E  0E10               	movlw	16
 14248   014910  6EE6               	movwf	postinc1,c
 14249   014912  0E00               	movlw	0
 14250   014914  6EE6               	movwf	postinc1,c
 14251   014916  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14252   01491A                     
 14253                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14254   01491A  52E5               	movf	postdec1,f,c
 14255   01491C  52E5               	movf	postdec1,f,c
 14256   01491E  52E5               	movf	postdec1,f,c
 14257   014920  52E5               	movf	postdec1,f,c
 14258   014922  0012               	return		;funcret
 14259   014924                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14260                           	callstack 0
 14261                           
 14262 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14263 ;; Defined at:
 14264 ;;		line 2725 in file "can/can.c"
 14265 ;; Parameters:    Size  Location     Type
 14266 ;;  ps              2  [STACK] unsigned short 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  spiTransferE    1    0        char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;                  1  [STACK] char 
 14271 ;; Registers used:
 14272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14282 ;;Total ram usage:        0 bytes
 14283 ;; Hardware stack levels used: 1
 14284 ;; Hardware stack levels required when called: 9
 14285 ;; This function calls:
 14286 ;;		_DRV_CANFDSPI_WriteHalfWord
 14287 ;; This function is called by:
 14288 ;;		_CanInit
 14289 ;; This function uses a reentrant model
 14290 ;;
 14291                           
 14292                           	psect	text53
 14293   01496C                     __ptext53:
 14294                           	callstack 0
 14295   01496C                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14296                           	callstack 20
 14297   01496C                     
 14298                           ;stkvar	_ps @ sp[(0)+-2]
 14299   01496C  0EFE               	movlw	-2
 14300   01496E  CFE3 FFE6          	movff	plusw1,postinc1
 14301   014972  CFE3 FFE6          	movff	plusw1,postinc1
 14302   014976  0E14               	movlw	20
 14303   014978  6EE6               	movwf	postinc1,c
 14304   01497A  0E00               	movlw	0
 14305   01497C  6EE6               	movwf	postinc1,c
 14306   01497E  ECFE  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14307   014982                     
 14308                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14309   014982  52E5               	movf	postdec1,f,c
 14310   014984  52E5               	movf	postdec1,f,c
 14311   014986  0012               	return		;funcret
 14312   014988                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14313                           	callstack 0
 14314                           
 14315 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14316 ;; Defined at:
 14317 ;;		line 2634 in file "can/can.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;		None
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  d               1  [STACK] unsigned char 
 14322 ;;  spiTransferE    1  [STACK] char 
 14323 ;; Return value:  Size  Location     Type
 14324 ;;                  1  [STACK] char 
 14325 ;; Registers used:
 14326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14327 ;; Tracked objects:
 14328 ;;		On entry : 0/0
 14329 ;;		On exit  : 0/0
 14330 ;;		Unchanged: 0/0
 14331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14336 ;;Total ram usage:        0 bytes
 14337 ;; Hardware stack levels used: 1
 14338 ;; Hardware stack levels required when called: 9
 14339 ;; This function calls:
 14340 ;;		_DRV_CANFDSPI_ReadByte
 14341 ;;		_DRV_CANFDSPI_WriteByte
 14342 ;; This function is called by:
 14343 ;;		_CanInit
 14344 ;; This function uses a reentrant model
 14345 ;;
 14346                           
 14347                           	psect	text54
 14348   0145E8                     __ptext54:
 14349                           	callstack 0
 14350   0145E8                     _DRV_CANFDSPI_TimeStampEnable:
 14351                           	callstack 0
 14352                           
 14353                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14354   0145E8  52E6               	movf	postinc1,f,c
 14355   0145EA  52E6               	movf	postinc1,f,c
 14356   0145EC                     
 14357                           ;can/can.c: 2637:     uint8_t d = 0;
 14358                           ;stkvar	_d @ sp[(-2)+0]
 14359   0145EC  0EFE               	movlw	-2
 14360   0145EE  6AE3               	clrf	plusw1,c
 14361   0145F0                     
 14362                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14363                           ;stkvar	_d @ sp[(-2)+0]
 14364   0145F0  0EFE               	movlw	254
 14365   0145F2  24E1               	addwf	fsr1l,w,c
 14366   0145F4  6E01               	movwf	btemp^0,c
 14367   0145F6  0EFF               	movlw	255
 14368   0145F8  20E2               	addwfc	fsr1h,w,c
 14369   0145FA  6E02               	movwf	(btemp+1)^0,c
 14370   0145FC  C001  FFE6         	movff	btemp,postinc1
 14371   014600  C002  FFE6         	movff	btemp+1,postinc1
 14372   014604  0E16               	movlw	22
 14373   014606  6EE6               	movwf	postinc1,c
 14374   014608  0E00               	movlw	0
 14375   01460A  6EE6               	movwf	postinc1,c
 14376   01460C  ECC3  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14377                           
 14378                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14379   014610  0EFF               	movlw	-1
 14380   014612  C001  FFE3         	movff	btemp,plusw1
 14381   014616                     
 14382                           ;can/can.c: 2641:     if (spiTransferError) {
 14383                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14384   014616  0EFF               	movlw	-1
 14385   014618  50E3               	movf	plusw1,w,c
 14386   01461A  B4D8               	btfsc	status,2,c
 14387   01461C  EF12  F0A3         	goto	u2521
 14388   014620  EF14  F0A3         	goto	u2520
 14389   014624                     u2521:
 14390   014624  EF16  F0A3         	goto	l4874
 14391   014628                     u2520:
 14392   014628  EF21  F0A3         	goto	l623
 14393   01462C                     l4874:
 14394                           
 14395                           ;can/can.c: 2646:     d |= 0x01;
 14396                           ;stkvar	_d @ sp[(-2)+0]
 14397   01462C  0EFE               	movlw	-2
 14398   01462E  80E3               	bsf	plusw1,0,c
 14399   014630                     
 14400                           ;stkvar	_d @ sp[(-2)+0]
 14401   014630  0EFE               	movlw	-2
 14402   014632  50E3               	movf	plusw1,w,c
 14403   014634  6EE6               	movwf	postinc1,c
 14404   014636  0E16               	movlw	22
 14405   014638  6EE6               	movwf	postinc1,c
 14406   01463A  0E00               	movlw	0
 14407   01463C  6EE6               	movwf	postinc1,c
 14408   01463E  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14409   014642                     l623:
 14410                           
 14411                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14412   014642  52E5               	movf	postdec1,f,c
 14413   014644  52E5               	movf	postdec1,f,c
 14414   014646  0012               	return		;funcret
 14415   014648                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14416                           	callstack 0
 14417                           
 14418 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14419 ;; Defined at:
 14420 ;;		line 1539 in file "can/can.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14423 ;;		 -> tefConfig(1), 
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14426 ;;  spiTransferE    1    0        char 
 14427 ;; Return value:  Size  Location     Type
 14428 ;;                  1  [STACK] char 
 14429 ;; Registers used:
 14430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14431 ;; Tracked objects:
 14432 ;;		On entry : 0/0
 14433 ;;		On exit  : 0/0
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used: 1
 14442 ;; Hardware stack levels required when called: 9
 14443 ;; This function calls:
 14444 ;;		_DRV_CANFDSPI_WriteWord
 14445 ;; This function is called by:
 14446 ;;		_CanInit
 14447 ;; This function uses a reentrant model
 14448 ;;
 14449                           
 14450                           	psect	text55
 14451   013B8A                     __ptext55:
 14452                           	callstack 0
 14453   013B8A                     _DRV_CANFDSPI_TefConfigure:
 14454                           	callstack 0
 14455                           
 14456                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14457   013B8A  52E6               	movf	postinc1,f,c
 14458   013B8C  52E6               	movf	postinc1,f,c
 14459   013B8E  52E6               	movf	postinc1,f,c
 14460   013B90  52E6               	movf	postinc1,f,c
 14461   013B92                     
 14462                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14463   013B92  0EDD               	movlw	low _canFifoResetValues
 14464   013B94  6EF6               	movwf	tblptrl,c
 14465   013B96                     	if	1	;There is more than 1 active tblptr byte
 14466   013B96  0EFF               	movlw	high _canFifoResetValues
 14467   013B98  6EF7               	movwf	tblptrh,c
 14468   013B9A                     	endif
 14469   013B9A                     	if	1	;There are 3 active tblptr bytes
 14470   013B9A  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14471   013B9C  6EF8               	movwf	tblptru,c
 14472   013B9E                     	endif
 14473   013B9E  0009               	tblrd		*+
 14474   013BA0  CFF5 F009          	movff	tablat,btemp+8
 14475   013BA4  0009               	tblrd		*+
 14476   013BA6  CFF5 F00A          	movff	tablat,btemp+9
 14477   013BAA  0009               	tblrd		*+
 14478   013BAC  CFF5 F00B          	movff	tablat,btemp+10
 14479   013BB0  0009               	tblrd		*+
 14480   013BB2  CFF5 F00C          	movff	tablat,btemp+11
 14481                           
 14482                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14483   013BB6  0EFC               	movlw	-4
 14484   013BB8  C009  FFE3         	movff	btemp+8,plusw1
 14485   013BBC  0EFD               	movlw	-3
 14486   013BBE  C00A  FFE3         	movff	btemp+9,plusw1
 14487   013BC2  0EFE               	movlw	-2
 14488   013BC4  C00B  FFE3         	movff	btemp+10,plusw1
 14489   013BC8  0EFF               	movlw	-1
 14490   013BCA  C00C  FFE3         	movff	btemp+11,plusw1
 14491   013BCE                     
 14492                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14493                           ;stkvar	_config @ sp[(-4)+-2]
 14494   013BCE  0EFA               	movlw	-6
 14495   013BD0  CFE3 FFD9          	movff	plusw1,fsr2l
 14496   013BD4  0EFB               	movlw	-5
 14497   013BD6  CFE3 FFDA          	movff	plusw1,fsr2h
 14498   013BDA  30DF               	rrcf	223,w,c
 14499   013BDC  0B1F               	andlw	31
 14500   013BDE  6E0C               	movwf	(btemp+11)^0,c
 14501                           
 14502                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14503   013BE0  0EFF               	movlw	255
 14504   013BE2  24E1               	addwf	fsr1l,w,c
 14505   013BE4  6ED9               	movwf	fsr2l,c
 14506   013BE6  0EFF               	movlw	255
 14507   013BE8  20E2               	addwfc	fsr1h,w,c
 14508   013BEA  6EDA               	movwf	fsr2h,c
 14509   013BEC  50DF               	movf	223,w,c
 14510   013BEE  180C               	xorwf	(btemp+11)^0,w,c
 14511   013BF0  0BE0               	andlw	-32
 14512   013BF2  180C               	xorwf	(btemp+11)^0,w,c
 14513   013BF4  6EDF               	movwf	223,c
 14514   013BF6                     
 14515                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14516                           ;stkvar	_config @ sp[(-4)+-2]
 14517   013BF6  0EFA               	movlw	-6
 14518   013BF8  CFE3 FFD9          	movff	plusw1,fsr2l
 14519   013BFC  0EFB               	movlw	-5
 14520   013BFE  CFE3 FFDA          	movff	plusw1,fsr2h
 14521                           
 14522                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14523   013C02  50E1               	movf	fsr1l,w,c
 14524   013C04  0FFC               	addlw	-4
 14525   013C06  6EE9               	movwf	fsr0l,c
 14526   013C08  50E2               	movf	fsr1h,w,c
 14527   013C0A  6EEA               	movwf	fsr0h,c
 14528   013C0C  0EFF               	movlw	255
 14529   013C0E  22EA               	addwfc	fsr0h,f,c
 14530   013C10  9AEF               	bcf	indf0,5,c
 14531   013C12  A0DF               	btfss	indf2,0,c
 14532   013C14  EF0D  F09E         	goto	u2485
 14533   013C18  8AEF               	bsf	indf0,5,c
 14534   013C1A                     u2485:
 14535   013C1A                     
 14536                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14537   013C1A  0EFC               	movlw	-4
 14538   013C1C  CFE3 FFE6          	movff	plusw1,postinc1
 14539   013C20  CFE3 FFE6          	movff	plusw1,postinc1
 14540   013C24  CFE3 FFE6          	movff	plusw1,postinc1
 14541   013C28  CFE3 FFE6          	movff	plusw1,postinc1
 14542   013C2C  0E40               	movlw	64
 14543   013C2E  6EE6               	movwf	postinc1,c
 14544   013C30  0E00               	movlw	0
 14545   013C32  6EE6               	movwf	postinc1,c
 14546   013C34  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14547   013C38                     
 14548                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 14549   013C38  0EFA               	movlw	250
 14550   013C3A  26E1               	addwf	fsr1l,f,c
 14551   013C3C  0EFF               	movlw	255
 14552   013C3E  22E2               	addwfc	fsr1h,f,c
 14553   013C40  0012               	return		;funcret
 14554   013C42                     __end_of_DRV_CANFDSPI_TefConfigure:
 14555                           	callstack 0
 14556                           
 14557 ;; *************** function _DRV_CANFDSPI_Reset *****************
 14558 ;; Defined at:
 14559 ;;		line 257 in file "can/can.c"
 14560 ;; Parameters:    Size  Location     Type
 14561 ;;		None
 14562 ;; Auto vars:     Size  Location     Type
 14563 ;;  spiTransferS    2    0        unsigned short 
 14564 ;;  spiTransferE    1    0        char 
 14565 ;; Return value:  Size  Location     Type
 14566 ;;                  1  [STACK] char 
 14567 ;; Registers used:
 14568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 14569 ;; Tracked objects:
 14570 ;;		On entry : 0/0
 14571 ;;		On exit  : 0/0
 14572 ;;		Unchanged: 0/0
 14573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14578 ;;Total ram usage:        0 bytes
 14579 ;; Hardware stack levels used: 1
 14580 ;; Hardware stack levels required when called: 8
 14581 ;; This function calls:
 14582 ;;		_SPI2_Open
 14583 ;;		_SpiTransfer
 14584 ;; This function is called by:
 14585 ;;		_CanInit
 14586 ;; This function uses a reentrant model
 14587 ;;
 14588                           
 14589                           	psect	text56
 14590   0148D0                     __ptext56:
 14591                           	callstack 0
 14592   0148D0                     _DRV_CANFDSPI_Reset:
 14593                           	callstack 21
 14594   0148D0                     
 14595                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 14596   0148D0  0101               	movlb	1	; () banked
 14597   0148D2  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 14598   0148D4                     
 14599                           ; BSR set to: 1
 14600                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 14601   0148D4  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 14602   0148D6                     
 14603                           ; BSR set to: 1
 14604                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 14605   0148D6  0E00               	movlw	0
 14606   0148D8  6EE6               	movwf	postinc1,c
 14607   0148DA  EC21  F09E         	call	_SPI2_Open	;wreg free
 14608   0148DE  0E02               	movlw	2
 14609   0148E0  6EE6               	movwf	postinc1,c
 14610   0148E2  0E00               	movlw	0
 14611   0148E4  6EE6               	movwf	postinc1,c
 14612   0148E6  0E00               	movlw	low _spiReceiveBuffer
 14613   0148E8  6EE6               	movwf	postinc1,c
 14614   0148EA  0E02               	movlw	high _spiReceiveBuffer
 14615   0148EC  6EE6               	movwf	postinc1,c
 14616   0148EE  0E00               	movlw	low _spiTransmitBuffer
 14617   0148F0  6EE6               	movwf	postinc1,c
 14618   0148F2  0E01               	movlw	high _spiTransmitBuffer
 14619   0148F4  6EE6               	movwf	postinc1,c
 14620   0148F6  EC63  F09D         	call	_SpiTransfer	;wreg free
 14621   0148FA                     
 14622                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 14623   0148FA  0012               	return		;funcret
 14624   0148FC                     __end_of_DRV_CANFDSPI_Reset:
 14625                           	callstack 0
 14626                           
 14627 ;; *************** function _SPI2_Open *****************
 14628 ;; Defined at:
 14629 ;;		line 72 in file "mcc_generated_files/spi2.c"
 14630 ;; Parameters:    Size  Location     Type
 14631 ;;  spi2UniqueCo    1  [STACK] enum E358
 14632 ;; Auto vars:     Size  Location     Type
 14633 ;;		None
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1  [STACK] _Bool 
 14636 ;; Registers used:
 14637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 14638 ;; Tracked objects:
 14639 ;;		On entry : 3F/1
 14640 ;;		On exit  : 0/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14647 ;;Total ram usage:        0 bytes
 14648 ;; Hardware stack levels used: 1
 14649 ;; Hardware stack levels required when called: 7
 14650 ;; This function calls:
 14651 ;;		Nothing
 14652 ;; This function is called by:
 14653 ;;		_DRV_CANFDSPI_Reset
 14654 ;; This function uses a reentrant model
 14655 ;;
 14656                           
 14657                           	psect	text57
 14658   013C42                     __ptext57:
 14659                           	callstack 0
 14660   013C42                     _SPI2_Open:
 14661                           	callstack 21
 14662   013C42                     
 14663                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 14664   013C42  BA63               	btfsc	99,5,c	;volatile
 14665   013C44  EF26  F09E         	goto	u2231
 14666   013C48  EF28  F09E         	goto	u2230
 14667   013C4C                     u2231:
 14668   013C4C  EF7A  F09E         	goto	l1120
 14669   013C50                     u2230:
 14670   013C50                     
 14671                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 14672                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14673   013C50  0EFF               	movlw	-1
 14674   013C52  50E3               	movf	plusw1,w,c
 14675   013C54  0D04               	mullw	4
 14676   013C56  0E01               	movlw	1
 14677   013C58  26F3               	addwf	243,f,c
 14678   013C5A  0E00               	movlw	0
 14679   013C5C  22F4               	addwfc	244,f,c
 14680   013C5E  0EE9               	movlw	low _spi2_configuration
 14681   013C60  24F3               	addwf	243,w,c
 14682   013C62  6EF6               	movwf	tblptrl,c
 14683   013C64  0EFF               	movlw	high _spi2_configuration
 14684   013C66  20F4               	addwfc	244,w,c
 14685   013C68  6EF7               	movwf	tblptrh,c
 14686   013C6A                     	if	1	;There are 3 active tblptr bytes
 14687   013C6A  6AF8               	clrf	tblptru,c
 14688   013C6C  0E00               	movlw	low (__mediumconst shr (0+16))
 14689   013C6E  22F8               	addwfc	tblptru,f,c
 14690   013C70                     	endif
 14691   013C70  0008               	tblrd		*
 14692   013C72  CFF5 FF64          	movff	tablat,3940	;volatile
 14693                           
 14694                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 14695                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14696   013C76  0EFF               	movlw	-1
 14697   013C78  50E3               	movf	plusw1,w,c
 14698   013C7A  0D04               	mullw	4
 14699   013C7C  0EE9               	movlw	low _spi2_configuration
 14700   013C7E  24F3               	addwf	243,w,c
 14701   013C80  6EF6               	movwf	tblptrl,c
 14702   013C82  0EFF               	movlw	high _spi2_configuration
 14703   013C84  20F4               	addwfc	244,w,c
 14704   013C86  6EF7               	movwf	tblptrh,c
 14705   013C88                     	if	1	;There are 3 active tblptr bytes
 14706   013C88  6AF8               	clrf	tblptru,c
 14707   013C8A  0E00               	movlw	low (__mediumconst shr (0+16))
 14708   013C8C  22F8               	addwfc	tblptru,f,c
 14709   013C8E                     	endif
 14710   013C8E  0008               	tblrd		*
 14711   013C90  CFF5 FF63          	movff	tablat,3939	;volatile
 14712   013C94                     
 14713                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 14714   013C94  6A62               	clrf	98,c	;volatile
 14715                           
 14716                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 14717                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14718   013C96  0EFF               	movlw	-1
 14719   013C98  50E3               	movf	plusw1,w,c
 14720   013C9A  0D04               	mullw	4
 14721   013C9C  0E02               	movlw	2
 14722   013C9E  26F3               	addwf	243,f,c
 14723   013CA0  0E00               	movlw	0
 14724   013CA2  22F4               	addwfc	244,f,c
 14725   013CA4  0EE9               	movlw	low _spi2_configuration
 14726   013CA6  24F3               	addwf	243,w,c
 14727   013CA8  6EF6               	movwf	tblptrl,c
 14728   013CAA  0EFF               	movlw	high _spi2_configuration
 14729   013CAC  20F4               	addwfc	244,w,c
 14730   013CAE  6EF7               	movwf	tblptrh,c
 14731   013CB0                     	if	1	;There are 3 active tblptr bytes
 14732   013CB0  6AF8               	clrf	tblptru,c
 14733   013CB2  0E00               	movlw	low (__mediumconst shr (0+16))
 14734   013CB4  22F8               	addwfc	tblptru,f,c
 14735   013CB6                     	endif
 14736   013CB6  0008               	tblrd		*
 14737   013CB8  CFF5 FF65          	movff	tablat,3941	;volatile
 14738   013CBC                     
 14739                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 14740                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14741   013CBC  0EFF               	movlw	-1
 14742   013CBE  50E3               	movf	plusw1,w,c
 14743   013CC0  0D04               	mullw	4
 14744   013CC2  0E03               	movlw	3
 14745   013CC4  26F3               	addwf	243,f,c
 14746   013CC6  0E00               	movlw	0
 14747   013CC8  22F4               	addwfc	244,f,c
 14748   013CCA  0EE9               	movlw	low _spi2_configuration
 14749   013CCC  24F3               	addwf	243,w,c
 14750   013CCE  6EF6               	movwf	tblptrl,c
 14751   013CD0  0EFF               	movlw	high _spi2_configuration
 14752   013CD2  20F4               	addwfc	244,w,c
 14753   013CD4  6EF7               	movwf	tblptrh,c
 14754   013CD6                     	if	1	;There are 3 active tblptr bytes
 14755   013CD6  6AF8               	clrf	tblptru,c
 14756   013CD8  0E00               	movlw	low (__mediumconst shr (0+16))
 14757   013CDA  22F8               	addwfc	tblptru,f,c
 14758   013CDC                     	endif
 14759   013CDC  0008               	tblrd		*
 14760   013CDE  CFF5 F00C          	movff	tablat,btemp+11
 14761   013CE2  3A0C               	swapf	(btemp+11)^0,f,c
 14762   013CE4  460C               	rlncf	(btemp+11)^0,f,c
 14763   013CE6  460C               	rlncf	(btemp+11)^0,f,c
 14764   013CE8  5095               	movf	149,w,c	;volatile
 14765   013CEA  180C               	xorwf	(btemp+11)^0,w,c
 14766   013CEC  0BBF               	andlw	-65
 14767   013CEE  180C               	xorwf	(btemp+11)^0,w,c
 14768   013CF0  6E95               	movwf	149,c	;volatile
 14769   013CF2                     
 14770                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14771   013CF2  8A63               	bsf	99,5,c	;volatile
 14772   013CF4                     l1120:
 14773                           
 14774                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14775   013CF4  52E5               	movf	postdec1,f,c
 14776   013CF6  0012               	return		;funcret
 14777   013CF8                     __end_of_SPI2_Open:
 14778                           	callstack 0
 14779                           
 14780 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14781 ;; Defined at:
 14782 ;;		line 1172 in file "can/can.c"
 14783 ;; Parameters:    Size  Location     Type
 14784 ;;  channel         1  [STACK] enum E5287
 14785 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14786 ;;		 -> rxfConfig(3), 
 14787 ;; Auto vars:     Size  Location     Type
 14788 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14789 ;;  a               2  [STACK] unsigned short 
 14790 ;;  spiTransferE    1    0        char 
 14791 ;; Return value:  Size  Location     Type
 14792 ;;                  1  [STACK] char 
 14793 ;; Registers used:
 14794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14795 ;; Tracked objects:
 14796 ;;		On entry : 0/0
 14797 ;;		On exit  : 0/0
 14798 ;;		Unchanged: 0/0
 14799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14804 ;;Total ram usage:        0 bytes
 14805 ;; Hardware stack levels used: 1
 14806 ;; Hardware stack levels required when called: 9
 14807 ;; This function calls:
 14808 ;;		_DRV_CANFDSPI_WriteWord
 14809 ;; This function is called by:
 14810 ;;		_CanInit
 14811 ;; This function uses a reentrant model
 14812 ;;
 14813                           
 14814                           	psect	text58
 14815   012ED6                     __ptext58:
 14816                           	callstack 0
 14817   012ED6                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14818                           	callstack 0
 14819                           
 14820                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14821   012ED6  0E07               	movlw	7
 14822   012ED8  26E1               	addwf	fsr1l,f,c
 14823   012EDA  0E00               	movlw	0
 14824   012EDC  22E2               	addwfc	fsr1h,f,c
 14825   012EDE                     
 14826                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14827                           ;stkvar	_channel @ sp[(-7)+-1]
 14828   012EDE  0EF8               	movlw	-8
 14829   012EE0  50E3               	movf	plusw1,w,c
 14830   012EE2  A4D8               	btfss	status,2,c
 14831   012EE4  EF76  F097         	goto	u2501
 14832   012EE8  EF78  F097         	goto	u2500
 14833   012EEC                     u2501:
 14834   012EEC  EF7A  F097         	goto	l4838
 14835   012EF0                     u2500:
 14836   012EF0  EF07  F098         	goto	l346
 14837   012EF4                     l4838:
 14838                           
 14839                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 14840   012EF4  0EDD               	movlw	low _canFifoResetValues
 14841   012EF6  6EF6               	movwf	tblptrl,c
 14842   012EF8                     	if	1	;There is more than 1 active tblptr byte
 14843   012EF8  0EFF               	movlw	high _canFifoResetValues
 14844   012EFA  6EF7               	movwf	tblptrh,c
 14845   012EFC                     	endif
 14846   012EFC                     	if	1	;There are 3 active tblptr bytes
 14847   012EFC  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14848   012EFE  6EF8               	movwf	tblptru,c
 14849   012F00                     	endif
 14850   012F00  0009               	tblrd		*+
 14851   012F02  CFF5 F009          	movff	tablat,btemp+8
 14852   012F06  0009               	tblrd		*+
 14853   012F08  CFF5 F00A          	movff	tablat,btemp+9
 14854   012F0C  0009               	tblrd		*+
 14855   012F0E  CFF5 F00B          	movff	tablat,btemp+10
 14856   012F12  0009               	tblrd		*+
 14857   012F14  CFF5 F00C          	movff	tablat,btemp+11
 14858                           
 14859                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14860   012F18  0EF9               	movlw	-7
 14861   012F1A  C009  FFE3         	movff	btemp+8,plusw1
 14862   012F1E  0EFA               	movlw	-6
 14863   012F20  C00A  FFE3         	movff	btemp+9,plusw1
 14864   012F24  0EFB               	movlw	-5
 14865   012F26  C00B  FFE3         	movff	btemp+10,plusw1
 14866   012F2A  0EFC               	movlw	-4
 14867   012F2C  C00C  FFE3         	movff	btemp+11,plusw1
 14868   012F30                     
 14869                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 14870                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14871   012F30  50E1               	movf	fsr1l,w,c
 14872   012F32  0FF9               	addlw	-7
 14873   012F34  6ED9               	movwf	fsr2l,c
 14874   012F36  50E2               	movf	fsr1h,w,c
 14875   012F38  6EDA               	movwf	fsr2h,c
 14876   012F3A  0EFF               	movlw	255
 14877   012F3C  22DA               	addwfc	fsr2h,f,c
 14878   012F3E  9EDF               	bcf	indf2,7,c
 14879   012F40                     
 14880                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 14881                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14882   012F40  0EFC               	movlw	252
 14883   012F42  24E1               	addwf	fsr1l,w,c
 14884   012F44  6ED9               	movwf	fsr2l,c
 14885   012F46  0EFF               	movlw	255
 14886   012F48  20E2               	addwfc	fsr1h,w,c
 14887   012F4A  6EDA               	movwf	fsr2h,c
 14888                           
 14889                           ;stkvar	_config @ sp[(-7)+-3]
 14890   012F4C  0EF6               	movlw	-10
 14891   012F4E  CFE3 F00B          	movff	plusw1,btemp+10
 14892   012F52  0EF7               	movlw	-9
 14893   012F54  CFE3 F00C          	movff	plusw1,btemp+11
 14894   012F58  0E01               	movlw	1
 14895   012F5A  240B               	addwf	(btemp+10)^0,w,c
 14896   012F5C  6EE9               	movwf	fsr0l,c
 14897   012F5E  0E00               	movlw	0
 14898   012F60  200C               	addwfc	(btemp+11)^0,w,c
 14899   012F62  6EEA               	movwf	fsr0h,c
 14900   012F64  50EF               	movf	indf0,w,c
 14901   012F66  6E0C               	movwf	(btemp+11)^0,c
 14902                           
 14903                           ;stkvar	_config @ sp[(-7)+-3]
 14904   012F68  0EF6               	movlw	-10
 14905   012F6A  CFE3 F009          	movff	plusw1,btemp+8
 14906   012F6E  0EF7               	movlw	-9
 14907   012F70  CFE3 F00A          	movff	plusw1,btemp+9
 14908   012F74  0E02               	movlw	2
 14909   012F76  2409               	addwf	(btemp+8)^0,w,c
 14910   012F78  6EE9               	movwf	fsr0l,c
 14911   012F7A  0E00               	movlw	0
 14912   012F7C  200A               	addwfc	(btemp+9)^0,w,c
 14913   012F7E  6EEA               	movwf	fsr0h,c
 14914   012F80  50EF               	movf	indf0,w,c
 14915   012F82  6E0B               	movwf	(btemp+10)^0,c
 14916   012F84  0E05               	movlw	5
 14917   012F86  6E01               	movwf	btemp^0,c
 14918   012F88                     u2515:
 14919   012F88  90D8               	bcf	status,0,c
 14920   012F8A  360B               	rlcf	(btemp+10)^0,f,c
 14921   012F8C  2E01               	decfsz	btemp^0,f,c
 14922   012F8E  EFC4  F097         	goto	u2515
 14923   012F92  500B               	movf	(btemp+10)^0,w,c
 14924   012F94  100C               	iorwf	(btemp+11)^0,w,c
 14925   012F96  6EDF               	movwf	indf2,c
 14926   012F98                     
 14927                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 14928                           ;stkvar	_config @ sp[(-7)+-3]
 14929   012F98  0EF6               	movlw	-10
 14930   012F9A  CFE3 FFD9          	movff	plusw1,fsr2l
 14931   012F9E  0EF7               	movlw	-9
 14932   012FA0  CFE3 FFDA          	movff	plusw1,fsr2h
 14933   012FA4  50DF               	movf	indf2,w,c
 14934   012FA6  6E0C               	movwf	(btemp+11)^0,c
 14935                           
 14936                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14937   012FA8  50E1               	movf	fsr1l,w,c
 14938   012FAA  0FF9               	addlw	-7
 14939   012FAC  6ED9               	movwf	fsr2l,c
 14940   012FAE  50E2               	movf	fsr1h,w,c
 14941   012FB0  6EDA               	movwf	fsr2h,c
 14942   012FB2  0EFF               	movlw	255
 14943   012FB4  22DA               	addwfc	fsr2h,f,c
 14944   012FB6  3A0C               	swapf	(btemp+11)^0,f,c
 14945   012FB8  460C               	rlncf	(btemp+11)^0,f,c
 14946   012FBA  50DF               	movf	223,w,c
 14947   012FBC  180C               	xorwf	(btemp+11)^0,w,c
 14948   012FBE  0BDF               	andlw	-33
 14949   012FC0  180C               	xorwf	(btemp+11)^0,w,c
 14950   012FC2  6EDF               	movwf	223,c
 14951   012FC4                     
 14952                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 14953                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14954   012FC4  50E1               	movf	fsr1l,w,c
 14955   012FC6  0FF9               	addlw	-7
 14956   012FC8  6ED9               	movwf	fsr2l,c
 14957   012FCA  50E2               	movf	fsr1h,w,c
 14958   012FCC  6EDA               	movwf	fsr2h,c
 14959   012FCE  0EFF               	movlw	255
 14960   012FD0  22DA               	addwfc	fsr2h,f,c
 14961   012FD2  80DF               	bsf	indf2,0,c
 14962   012FD4                     
 14963                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 14964                           ;stkvar	_channel @ sp[(-7)+-1]
 14965   012FD4  0EF8               	movlw	-8
 14966   012FD6  50E3               	movf	plusw1,w,c
 14967   012FD8  0D0C               	mullw	12
 14968   012FDA  0E50               	movlw	80
 14969   012FDC  26F3               	addwf	243,f,c
 14970   012FDE  0E00               	movlw	0
 14971   012FE0  22F4               	addwfc	244,f,c
 14972                           
 14973                           ;stkvar	_a @ sp[(-7)+5]
 14974   012FE2  0EFE               	movlw	-2
 14975   012FE4  CFF3 FFE3          	movff	prodl,plusw1
 14976   012FE8  0EFF               	movlw	-1
 14977   012FEA  CFF4 FFE3          	movff	prodh,plusw1
 14978   012FEE                     
 14979                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14980   012FEE  0EF9               	movlw	-7
 14981   012FF0  CFE3 FFE6          	movff	plusw1,postinc1
 14982   012FF4  CFE3 FFE6          	movff	plusw1,postinc1
 14983   012FF8  CFE3 FFE6          	movff	plusw1,postinc1
 14984   012FFC  CFE3 FFE6          	movff	plusw1,postinc1
 14985                           
 14986                           ;stkvar	_a @ sp[(-11)+5]
 14987   013000  0EFA               	movlw	-6
 14988   013002  CFE3 FFE6          	movff	plusw1,postinc1
 14989   013006  CFE3 FFE6          	movff	plusw1,postinc1
 14990   01300A  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14991   01300E                     l346:
 14992                           
 14993                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14994   01300E  0EF6               	movlw	246
 14995   013010  26E1               	addwf	fsr1l,f,c
 14996   013012  0EFF               	movlw	255
 14997   013014  22E2               	addwfc	fsr1h,f,c
 14998   013016  0012               	return		;funcret
 14999   013018                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 15000                           	callstack 0
 15001                           
 15002 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 15003 ;; Defined at:
 15004 ;;		line 499 in file "can/can.c"
 15005 ;; Parameters:    Size  Location     Type
 15006 ;;  opMode          1  [STACK] enum E5357
 15007 ;; Auto vars:     Size  Location     Type
 15008 ;;  d               1  [STACK] unsigned char 
 15009 ;;  spiTransferE    1  [STACK] char 
 15010 ;; Return value:  Size  Location     Type
 15011 ;;                  1  [STACK] char 
 15012 ;; Registers used:
 15013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 15014 ;; Tracked objects:
 15015 ;;		On entry : 0/0
 15016 ;;		On exit  : 0/0
 15017 ;;		Unchanged: 0/0
 15018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15023 ;;Total ram usage:        0 bytes
 15024 ;; Hardware stack levels used: 1
 15025 ;; Hardware stack levels required when called: 9
 15026 ;; This function calls:
 15027 ;;		_DRV_CANFDSPI_ReadByte
 15028 ;;		_DRV_CANFDSPI_WriteByte
 15029 ;; This function is called by:
 15030 ;;		_CanInit
 15031 ;; This function uses a reentrant model
 15032 ;;
 15033                           
 15034                           	psect	text59
 15035   01435A                     __ptext59:
 15036                           	callstack 0
 15037   01435A                     _DRV_CANFDSPI_OperationModeSelect:
 15038                           	callstack 0
 15039                           
 15040                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15041   01435A  52E6               	movf	postinc1,f,c
 15042   01435C  52E6               	movf	postinc1,f,c
 15043   01435E                     
 15044                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 15045                           ;stkvar	_d @ sp[(-2)+0]
 15046   01435E  0EFE               	movlw	-2
 15047   014360  6AE3               	clrf	plusw1,c
 15048   014362                     
 15049                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 15050                           ;stkvar	_d @ sp[(-2)+0]
 15051   014362  0EFE               	movlw	254
 15052   014364  24E1               	addwf	fsr1l,w,c
 15053   014366  6E01               	movwf	btemp^0,c
 15054   014368  0EFF               	movlw	255
 15055   01436A  20E2               	addwfc	fsr1h,w,c
 15056   01436C  6E02               	movwf	(btemp+1)^0,c
 15057   01436E  C001  FFE6         	movff	btemp,postinc1
 15058   014372  C002  FFE6         	movff	btemp+1,postinc1
 15059   014376  0E03               	movlw	3
 15060   014378  6EE6               	movwf	postinc1,c
 15061   01437A  0E00               	movlw	0
 15062   01437C  6EE6               	movwf	postinc1,c
 15063   01437E  ECC3  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 15064                           
 15065                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15066   014382  0EFF               	movlw	-1
 15067   014384  C001  FFE3         	movff	btemp,plusw1
 15068   014388                     
 15069                           ;can/can.c: 506:     if (spiTransferError) {
 15070                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15071   014388  0EFF               	movlw	-1
 15072   01438A  50E3               	movf	plusw1,w,c
 15073   01438C  B4D8               	btfsc	status,2,c
 15074   01438E  EFCB  F0A1         	goto	u2531
 15075   014392  EFCD  F0A1         	goto	u2530
 15076   014396                     u2531:
 15077   014396  EFCF  F0A1         	goto	l4906
 15078   01439A                     u2530:
 15079   01439A  EFEC  F0A1         	goto	l222
 15080   01439E                     l4906:
 15081                           
 15082                           ;can/can.c: 511:     d &= ~0x07;
 15083                           ;stkvar	_d @ sp[(-2)+0]
 15084   01439E  0EFE               	movlw	-2
 15085   0143A0  CFE3 F001          	movff	plusw1,btemp
 15086   0143A4  0EF8               	movlw	248
 15087   0143A6  1601               	andwf	btemp^0,f,c
 15088   0143A8  0EFE               	movlw	-2
 15089   0143AA  C001  FFE3         	movff	btemp,plusw1
 15090   0143AE                     
 15091                           ;can/can.c: 512:     d |= opMode;
 15092                           ;stkvar	_opMode @ sp[(-2)+-1]
 15093   0143AE  0EFD               	movlw	-3
 15094   0143B0  CFE3 F00C          	movff	plusw1,btemp+11
 15095                           
 15096                           ;stkvar	_d @ sp[(-2)+0]
 15097   0143B4  50E1               	movf	fsr1l,w,c
 15098   0143B6  0FFE               	addlw	-2
 15099   0143B8  6ED9               	movwf	fsr2l,c
 15100   0143BA  50E2               	movf	fsr1h,w,c
 15101   0143BC  6EDA               	movwf	fsr2h,c
 15102   0143BE  0EFF               	movlw	255
 15103   0143C0  22DA               	addwfc	fsr2h,f,c
 15104   0143C2  500C               	movf	(btemp+11)^0,w,c
 15105   0143C4  12DF               	iorwf	indf2,f,c
 15106   0143C6                     
 15107                           ;stkvar	_d @ sp[(-2)+0]
 15108   0143C6  0EFE               	movlw	-2
 15109   0143C8  50E3               	movf	plusw1,w,c
 15110   0143CA  6EE6               	movwf	postinc1,c
 15111   0143CC  0E03               	movlw	3
 15112   0143CE  6EE6               	movwf	postinc1,c
 15113   0143D0  0E00               	movlw	0
 15114   0143D2  6EE6               	movwf	postinc1,c
 15115   0143D4  EC50  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15116   0143D8                     l222:
 15117                           
 15118                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15119   0143D8  52E5               	movf	postdec1,f,c
 15120   0143DA  52E5               	movf	postdec1,f,c
 15121   0143DC  52E5               	movf	postdec1,f,c
 15122   0143DE  0012               	return		;funcret
 15123   0143E0                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15124                           	callstack 0
 15125                           
 15126 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15127 ;; Defined at:
 15128 ;;		line 294 in file "can/can.c"
 15129 ;; Parameters:    Size  Location     Type
 15130 ;;  address         2  [STACK] unsigned short 
 15131 ;;  txd             1  [STACK] unsigned char 
 15132 ;; Auto vars:     Size  Location     Type
 15133 ;;  spiTransferS    2    0        unsigned short 
 15134 ;;  spiTransferE    1  [STACK] char 
 15135 ;; Return value:  Size  Location     Type
 15136 ;;                  1  [STACK] char 
 15137 ;; Registers used:
 15138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15139 ;; Tracked objects:
 15140 ;;		On entry : 0/0
 15141 ;;		On exit  : 0/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15148 ;;Total ram usage:        0 bytes
 15149 ;; Hardware stack levels used: 1
 15150 ;; Hardware stack levels required when called: 8
 15151 ;; This function calls:
 15152 ;;		_SpiTransfer
 15153 ;; This function is called by:
 15154 ;;		_DRV_CANFDSPI_OperationModeSelect
 15155 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15156 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15157 ;;		_DRV_CANFDSPI_FilterDisable
 15158 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15159 ;;		_DRV_CANFDSPI_TimeStampEnable
 15160 ;; This function uses a reentrant model
 15161 ;;
 15162                           
 15163                           	psect	text60
 15164   0146A0                     __ptext60:
 15165                           	callstack 0
 15166   0146A0                     _DRV_CANFDSPI_WriteByte:
 15167                           	callstack 0
 15168                           
 15169                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15170   0146A0  52E6               	movf	postinc1,f,c
 15171   0146A2                     
 15172                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15173                           ;stkvar	_address @ sp[(-1)+-2]
 15174   0146A2  0EFE               	movlw	254
 15175   0146A4  24E1               	addwf	fsr1l,w,c
 15176   0146A6  6ED9               	movwf	fsr2l,c
 15177   0146A8  0EFF               	movlw	255
 15178   0146AA  20E2               	addwfc	fsr1h,w,c
 15179   0146AC  6EDA               	movwf	fsr2h,c
 15180   0146AE  50DF               	movf	indf2,w,c
 15181   0146B0  0B0F               	andlw	15
 15182   0146B2  0F20               	addlw	32
 15183   0146B4  0101               	movlb	1	; () banked
 15184   0146B6  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15185   0146B8                     
 15186                           ; BSR set to: 1
 15187                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15188                           ;stkvar	_address @ sp[(-1)+-2]
 15189   0146B8  0EFD               	movlw	-3
 15190   0146BA  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15191   0146BE                     
 15192                           ; BSR set to: 1
 15193                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15194                           ;stkvar	_txd @ sp[(-1)+-3]
 15195   0146BE  0EFC               	movlw	-4
 15196   0146C0  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15197   0146C4                     
 15198                           ; BSR set to: 1
 15199                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15200   0146C4  0E03               	movlw	3
 15201   0146C6  6EE6               	movwf	postinc1,c
 15202   0146C8  0E00               	movlw	0
 15203   0146CA  6EE6               	movwf	postinc1,c
 15204   0146CC  0E00               	movlw	low _spiReceiveBuffer
 15205   0146CE  6EE6               	movwf	postinc1,c
 15206   0146D0  0E02               	movlw	high _spiReceiveBuffer
 15207   0146D2  6EE6               	movwf	postinc1,c
 15208   0146D4  0E00               	movlw	low _spiTransmitBuffer
 15209   0146D6  6EE6               	movwf	postinc1,c
 15210   0146D8  0E01               	movlw	high _spiTransmitBuffer
 15211   0146DA  6EE6               	movwf	postinc1,c
 15212   0146DC  EC63  F09D         	call	_SpiTransfer	;wreg free
 15213                           
 15214                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15215   0146E0  0EFF               	movlw	-1
 15216   0146E2  C001  FFE3         	movff	btemp,plusw1
 15217   0146E6                     
 15218                           ;can/can.c: 306:     return spiTransferError;
 15219                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15220   0146E6  0EFF               	movlw	-1
 15221   0146E8  CFE3 F001          	movff	plusw1,btemp
 15222   0146EC                     
 15223                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15224   0146EC  52E5               	movf	postdec1,f,c
 15225   0146EE  52E5               	movf	postdec1,f,c
 15226   0146F0  52E5               	movf	postdec1,f,c
 15227   0146F2  52E5               	movf	postdec1,f,c
 15228   0146F4  0012               	return		;funcret
 15229   0146F6                     __end_of_DRV_CANFDSPI_WriteByte:
 15230                           	callstack 0
 15231                           
 15232 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15233 ;; Defined at:
 15234 ;;		line 276 in file "can/can.c"
 15235 ;; Parameters:    Size  Location     Type
 15236 ;;  address         2  [STACK] unsigned short 
 15237 ;;  rxd             2  [STACK] PTR unsigned char 
 15238 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15239 ;;		 -> d(1), d(1), d(1), crc(1), 
 15240 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15241 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15242 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15243 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15244 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15245 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15246 ;;		 -> d(1), d(1), 
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;  spiTransferS    2    0        unsigned short 
 15249 ;;  spiTransferE    1  [STACK] char 
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1  [STACK] char 
 15252 ;; Registers used:
 15253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;Total ram usage:        0 bytes
 15264 ;; Hardware stack levels used: 1
 15265 ;; Hardware stack levels required when called: 8
 15266 ;; This function calls:
 15267 ;;		_SpiTransfer
 15268 ;; This function is called by:
 15269 ;;		_DRV_CANFDSPI_OperationModeSelect
 15270 ;;		_DRV_CANFDSPI_FilterDisable
 15271 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15272 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15273 ;;		_DRV_CANFDSPI_TimeStampEnable
 15274 ;; This function uses a reentrant model
 15275 ;;
 15276                           
 15277                           	psect	text61
 15278   014586                     __ptext61:
 15279                           	callstack 0
 15280   014586                     _DRV_CANFDSPI_ReadByte:
 15281                           	callstack 0
 15282                           
 15283                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15284   014586  52E6               	movf	postinc1,f,c
 15285   014588                     
 15286                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15287                           ;stkvar	_address @ sp[(-1)+-2]
 15288   014588  0EFE               	movlw	254
 15289   01458A  24E1               	addwf	fsr1l,w,c
 15290   01458C  6ED9               	movwf	fsr2l,c
 15291   01458E  0EFF               	movlw	255
 15292   014590  20E2               	addwfc	fsr1h,w,c
 15293   014592  6EDA               	movwf	fsr2h,c
 15294   014594  50DF               	movf	indf2,w,c
 15295   014596  0B0F               	andlw	15
 15296   014598  0F30               	addlw	48
 15297   01459A  0101               	movlb	1	; () banked
 15298   01459C  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15299   01459E                     
 15300                           ; BSR set to: 1
 15301                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15302                           ;stkvar	_address @ sp[(-1)+-2]
 15303   01459E  0EFD               	movlw	-3
 15304   0145A0  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15305   0145A4                     
 15306                           ; BSR set to: 1
 15307                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15308   0145A4  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15309   0145A6                     
 15310                           ; BSR set to: 1
 15311                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15312   0145A6  0E03               	movlw	3
 15313   0145A8  6EE6               	movwf	postinc1,c
 15314   0145AA  0E00               	movlw	0
 15315   0145AC  6EE6               	movwf	postinc1,c
 15316   0145AE  0E00               	movlw	low _spiReceiveBuffer
 15317   0145B0  6EE6               	movwf	postinc1,c
 15318   0145B2  0E02               	movlw	high _spiReceiveBuffer
 15319   0145B4  6EE6               	movwf	postinc1,c
 15320   0145B6  0E00               	movlw	low _spiTransmitBuffer
 15321   0145B8  6EE6               	movwf	postinc1,c
 15322   0145BA  0E01               	movlw	high _spiTransmitBuffer
 15323   0145BC  6EE6               	movwf	postinc1,c
 15324   0145BE  EC63  F09D         	call	_SpiTransfer	;wreg free
 15325                           
 15326                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15327   0145C2  0EFF               	movlw	-1
 15328   0145C4  C001  FFE3         	movff	btemp,plusw1
 15329   0145C8                     
 15330                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15331                           ;stkvar	_rxd @ sp[(-1)+-4]
 15332   0145C8  0EFB               	movlw	-5
 15333   0145CA  CFE3 FFD9          	movff	plusw1,fsr2l
 15334   0145CE  0EFC               	movlw	-4
 15335   0145D0  CFE3 FFDA          	movff	plusw1,fsr2h
 15336   0145D4  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15337   0145D8                     
 15338                           ;can/can.c: 291:     return spiTransferError;
 15339                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15340   0145D8  0EFF               	movlw	-1
 15341   0145DA  CFE3 F001          	movff	plusw1,btemp
 15342   0145DE                     
 15343                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15344   0145DE  0EFB               	movlw	251
 15345   0145E0  26E1               	addwf	fsr1l,f,c
 15346   0145E2  0EFF               	movlw	255
 15347   0145E4  22E2               	addwfc	fsr1h,f,c
 15348   0145E6  0012               	return		;funcret
 15349   0145E8                     __end_of_DRV_CANFDSPI_ReadByte:
 15350                           	callstack 0
 15351                           
 15352 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15353 ;; Defined at:
 15354 ;;		line 1591 in file "can/can.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;  index           1  [STACK] unsigned char 
 15357 ;;  flags           2  [STACK] enum E5563
 15358 ;; Auto vars:     Size  Location     Type
 15359 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15360 ;;  a               2    0        unsigned short 
 15361 ;;  spiTransferE    1    0        char 
 15362 ;; Return value:  Size  Location     Type
 15363 ;;                  1  [STACK] char 
 15364 ;; Registers used:
 15365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15375 ;;Total ram usage:        0 bytes
 15376 ;; Hardware stack levels used: 1
 15377 ;; Hardware stack levels required when called: 9
 15378 ;; This function calls:
 15379 ;;		_DRV_CANFDSPI_WriteHalfWord
 15380 ;; This function is called by:
 15381 ;;		_CanInit
 15382 ;; This function uses a reentrant model
 15383 ;;
 15384                           
 15385                           	psect	text62
 15386   014522                     __ptext62:
 15387                           	callstack 0
 15388   014522                     _DRV_CANFDSPI_ModuleEventEnable:
 15389                           	callstack 0
 15390                           
 15391                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15392   014522  52E6               	movf	postinc1,f,c
 15393   014524  52E6               	movf	postinc1,f,c
 15394   014526                     
 15395                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15396                           ;stkvar	_intEnables @ sp[(-2)+0]
 15397   014526  0EFE               	movlw	-2
 15398   014528  6AE3               	clrf	plusw1,c
 15399   01452A  0EFF               	movlw	-1
 15400   01452C  6AE3               	clrf	plusw1,c
 15401   01452E                     
 15402                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15403                           ;stkvar	_flags @ sp[(-2)+-3]
 15404   01452E  0EFB               	movlw	-5
 15405   014530  CFE3 F00B          	movff	plusw1,btemp+10
 15406   014534  0EFC               	movlw	-4
 15407   014536  CFE3 F00C          	movff	plusw1,btemp+11
 15408   01453A  0E1F               	movlw	31
 15409   01453C  140B               	andwf	(btemp+10)^0,w,c
 15410   01453E  6E09               	movwf	(btemp+8)^0,c
 15411   014540  0EFF               	movlw	255
 15412   014542  140C               	andwf	(btemp+11)^0,w,c
 15413   014544  6E0A               	movwf	(btemp+9)^0,c
 15414                           
 15415                           ;stkvar	_intEnables @ sp[(-2)+0]
 15416   014546  0EFE               	movlw	-2
 15417   014548  CFE3 F001          	movff	plusw1,btemp
 15418   01454C  5009               	movf	(btemp+8)^0,w,c
 15419   01454E  1201               	iorwf	btemp^0,f,c
 15420   014550  0EFE               	movlw	-2
 15421   014552  C001  FFE3         	movff	btemp,plusw1
 15422   014556  0EFF               	movlw	-1
 15423   014558  CFE3 F001          	movff	plusw1,btemp
 15424   01455C  500A               	movf	(btemp+9)^0,w,c
 15425   01455E  1201               	iorwf	btemp^0,f,c
 15426   014560  0EFF               	movlw	-1
 15427   014562  C001  FFE3         	movff	btemp,plusw1
 15428   014566                     
 15429                           ;stkvar	_intEnables @ sp[(-2)+0]
 15430   014566  0EFE               	movlw	-2
 15431   014568  CFE3 FFE6          	movff	plusw1,postinc1
 15432   01456C  CFE3 FFE6          	movff	plusw1,postinc1
 15433   014570  0E1E               	movlw	30
 15434   014572  6EE6               	movwf	postinc1,c
 15435   014574  0E00               	movlw	0
 15436   014576  6EE6               	movwf	postinc1,c
 15437   014578  ECFE  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15438   01457C                     
 15439                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15440   01457C  0EFB               	movlw	251
 15441   01457E  26E1               	addwf	fsr1l,f,c
 15442   014580  0EFF               	movlw	255
 15443   014582  22E2               	addwfc	fsr1h,f,c
 15444   014584  0012               	return		;funcret
 15445   014586                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15446                           	callstack 0
 15447                           
 15448 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15449 ;; Defined at:
 15450 ;;		line 332 in file "can/can.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;  address         2  [STACK] unsigned short 
 15453 ;;  txd             2  [STACK] unsigned short 
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;  spiTransferS    2  [STACK] unsigned short 
 15456 ;;  i               1  [STACK] unsigned char 
 15457 ;;  spiTransferE    1  [STACK] char 
 15458 ;; Return value:  Size  Location     Type
 15459 ;;                  1  [STACK] char 
 15460 ;; Registers used:
 15461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15462 ;; Tracked objects:
 15463 ;;		On entry : 0/0
 15464 ;;		On exit  : 0/0
 15465 ;;		Unchanged: 0/0
 15466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15471 ;;Total ram usage:        0 bytes
 15472 ;; Hardware stack levels used: 1
 15473 ;; Hardware stack levels required when called: 8
 15474 ;; This function calls:
 15475 ;;		_SpiTransfer
 15476 ;; This function is called by:
 15477 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15478 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15479 ;; This function uses a reentrant model
 15480 ;;
 15481                           
 15482                           	psect	text63
 15483   0139FC                     __ptext63:
 15484                           	callstack 0
 15485   0139FC                     _DRV_CANFDSPI_WriteHalfWord:
 15486                           	callstack 0
 15487                           
 15488                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15489   0139FC  52E6               	movf	postinc1,f,c
 15490   0139FE  52E6               	movf	postinc1,f,c
 15491   013A00  52E6               	movf	postinc1,f,c
 15492   013A02  52E6               	movf	postinc1,f,c
 15493   013A04                     
 15494                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15495   013A04  0E04               	movlw	4
 15496   013A06  6E0B               	movwf	(btemp+10)^0,c
 15497   013A08  0E00               	movlw	0
 15498   013A0A  6E0C               	movwf	(btemp+11)^0,c
 15499                           
 15500                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15501   013A0C  0EFC               	movlw	-4
 15502   013A0E  C00B  FFE3         	movff	btemp+10,plusw1
 15503   013A12  0EFD               	movlw	-3
 15504   013A14  C00C  FFE3         	movff	btemp+11,plusw1
 15505   013A18                     
 15506                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15507                           ;stkvar	_address @ sp[(-4)+-2]
 15508   013A18  0EFB               	movlw	251
 15509   013A1A  24E1               	addwf	fsr1l,w,c
 15510   013A1C  6ED9               	movwf	fsr2l,c
 15511   013A1E  0EFF               	movlw	255
 15512   013A20  20E2               	addwfc	fsr1h,w,c
 15513   013A22  6EDA               	movwf	fsr2h,c
 15514   013A24  50DF               	movf	indf2,w,c
 15515   013A26  0B0F               	andlw	15
 15516   013A28  0F20               	addlw	32
 15517   013A2A  0101               	movlb	1	; () banked
 15518   013A2C  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15519   013A2E                     
 15520                           ; BSR set to: 1
 15521                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15522                           ;stkvar	_address @ sp[(-4)+-2]
 15523   013A2E  0EFA               	movlw	-6
 15524   013A30  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15525   013A34                     
 15526                           ; BSR set to: 1
 15527                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15528                           ;stkvar	_i @ sp[(-4)+2]
 15529   013A34  0EFE               	movlw	-2
 15530   013A36  6AE3               	clrf	plusw1,c
 15531   013A38                     l4610:
 15532                           
 15533                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15534                           ;stkvar	_i @ sp[(-4)+2]
 15535   013A38  0EFE               	movlw	-2
 15536   013A3A  50E3               	movf	plusw1,w,c
 15537   013A3C  6E0B               	movwf	(btemp+10)^0,c
 15538   013A3E  6A0C               	clrf	(btemp+11)^0,c
 15539   013A40  0E02               	movlw	low (_spiTransmitBuffer+2)
 15540   013A42  240B               	addwf	(btemp+10)^0,w,c
 15541   013A44  6ED9               	movwf	fsr2l,c
 15542   013A46  0E01               	movlw	high (_spiTransmitBuffer+2)
 15543   013A48  200C               	addwfc	(btemp+11)^0,w,c
 15544   013A4A  6EDA               	movwf	fsr2h,c
 15545                           
 15546                           ;stkvar	_i @ sp[(-4)+2]
 15547   013A4C  0EFE               	movlw	-2
 15548   013A4E  50E3               	movf	plusw1,w,c
 15549   013A50  0D08               	mullw	8
 15550   013A52  CFF3 F00C          	movff	prodl,btemp+11
 15551                           
 15552                           ;stkvar	_txd @ sp[(-4)+-4]
 15553   013A56  0EF8               	movlw	-8
 15554   013A58  CFE3 F009          	movff	plusw1,btemp+8
 15555   013A5C  0EF9               	movlw	-7
 15556   013A5E  CFE3 F00A          	movff	plusw1,btemp+9
 15557   013A62  2A0C               	incf	(btemp+11)^0,f,c
 15558   013A64  EF37  F09D         	goto	u2264
 15559   013A68                     u2265:
 15560   013A68  90D8               	bcf	status,0,c
 15561   013A6A  320A               	rrcf	(btemp+9)^0,f,c
 15562   013A6C  3209               	rrcf	(btemp+8)^0,f,c
 15563   013A6E                     u2264:
 15564   013A6E  2E0C               	decfsz	(btemp+11)^0,f,c
 15565   013A70  EF34  F09D         	goto	u2265
 15566   013A74  5009               	movf	(btemp+8)^0,w,c
 15567   013A76  6EDF               	movwf	indf2,c
 15568   013A78                     
 15569                           ;can/can.c: 346:     }
 15570                           ;stkvar	_i @ sp[(-4)+2]
 15571   013A78  0EFE               	movlw	-2
 15572   013A7A  2AE3               	incf	plusw1,f,c
 15573   013A7C                     
 15574                           ;stkvar	_i @ sp[(-4)+2]
 15575   013A7C  0EFE               	movlw	-2
 15576   013A7E  CFE3 F001          	movff	plusw1,btemp
 15577   013A82  0E01               	movlw	1
 15578   013A84  6401               	cpfsgt	btemp^0,c
 15579   013A86  EF47  F09D         	goto	u2271
 15580   013A8A  EF49  F09D         	goto	u2270
 15581   013A8E                     u2271:
 15582   013A8E  EF1C  F09D         	goto	l4610
 15583   013A92                     u2270:
 15584   013A92                     
 15585                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 15586                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15587   013A92  0EFC               	movlw	-4
 15588   013A94  CFE3 FFE6          	movff	plusw1,postinc1
 15589   013A98  CFE3 FFE6          	movff	plusw1,postinc1
 15590   013A9C  0E00               	movlw	low _spiReceiveBuffer
 15591   013A9E  6EE6               	movwf	postinc1,c
 15592   013AA0  0E02               	movlw	high _spiReceiveBuffer
 15593   013AA2  6EE6               	movwf	postinc1,c
 15594   013AA4  0E00               	movlw	low _spiTransmitBuffer
 15595   013AA6  6EE6               	movwf	postinc1,c
 15596   013AA8  0E01               	movlw	high _spiTransmitBuffer
 15597   013AAA  6EE6               	movwf	postinc1,c
 15598   013AAC  EC63  F09D         	call	_SpiTransfer	;wreg free
 15599                           
 15600                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15601   013AB0  0EFF               	movlw	-1
 15602   013AB2  C001  FFE3         	movff	btemp,plusw1
 15603   013AB6                     
 15604                           ;can/can.c: 350:     return spiTransferError;
 15605                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15606   013AB6  0EFF               	movlw	-1
 15607   013AB8  CFE3 F001          	movff	plusw1,btemp
 15608   013ABC                     
 15609                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 15610   013ABC  0EF8               	movlw	248
 15611   013ABE  26E1               	addwf	fsr1l,f,c
 15612   013AC0  0EFF               	movlw	255
 15613   013AC2  22E2               	addwfc	fsr1h,f,c
 15614   013AC4  0012               	return		;funcret
 15615   013AC6                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 15616                           	callstack 0
 15617                           
 15618 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 15619 ;; Defined at:
 15620 ;;		line 474 in file "can/can.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15623 ;;		 -> config(3), 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15626 ;; Return value:  Size  Location     Type
 15627 ;;                  1  [STACK] char 
 15628 ;; Registers used:
 15629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15639 ;;Total ram usage:        0 bytes
 15640 ;; Hardware stack levels used: 1
 15641 ;; Hardware stack levels required when called: 7
 15642 ;; This function calls:
 15643 ;;		Nothing
 15644 ;; This function is called by:
 15645 ;;		_CanInit
 15646 ;; This function uses a reentrant model
 15647 ;;
 15648                           
 15649                           	psect	text64
 15650   0119BA                     __ptext64:
 15651                           	callstack 0
 15652   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 15653                           	callstack 0
 15654                           
 15655                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15656   0119BA  52E6               	movf	postinc1,f,c
 15657   0119BC  52E6               	movf	postinc1,f,c
 15658   0119BE  52E6               	movf	postinc1,f,c
 15659   0119C0  52E6               	movf	postinc1,f,c
 15660   0119C2                     
 15661                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 15662   0119C2  0E8D               	movlw	low _canControlResetValues
 15663   0119C4  6EF6               	movwf	tblptrl,c
 15664   0119C6                     	if	1	;There is more than 1 active tblptr byte
 15665   0119C6  0EFF               	movlw	high _canControlResetValues
 15666   0119C8  6EF7               	movwf	tblptrh,c
 15667   0119CA                     	endif
 15668   0119CA                     	if	1	;There are 3 active tblptr bytes
 15669   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15670   0119CC  6EF8               	movwf	tblptru,c
 15671   0119CE                     	endif
 15672   0119CE  0009               	tblrd		*+
 15673   0119D0  CFF5 F009          	movff	tablat,btemp+8
 15674   0119D4  0009               	tblrd		*+
 15675   0119D6  CFF5 F00A          	movff	tablat,btemp+9
 15676   0119DA  0009               	tblrd		*+
 15677   0119DC  CFF5 F00B          	movff	tablat,btemp+10
 15678   0119E0  0009               	tblrd		*+
 15679   0119E2  CFF5 F00C          	movff	tablat,btemp+11
 15680                           
 15681                           ;stkvar	_ciCon @ sp[(-4)+0]
 15682   0119E6  0EFC               	movlw	-4
 15683   0119E8  C009  FFE3         	movff	btemp+8,plusw1
 15684   0119EC  0EFD               	movlw	-3
 15685   0119EE  C00A  FFE3         	movff	btemp+9,plusw1
 15686   0119F2  0EFE               	movlw	-2
 15687   0119F4  C00B  FFE3         	movff	btemp+10,plusw1
 15688   0119F8  0EFF               	movlw	-1
 15689   0119FA  C00C  FFE3         	movff	btemp+11,plusw1
 15690   0119FE                     
 15691                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 15692                           ;stkvar	_ciCon @ sp[(-4)+0]
 15693   0119FE  50E1               	movf	fsr1l,w,c
 15694   011A00  0FFC               	addlw	-4
 15695   011A02  6ED9               	movwf	fsr2l,c
 15696   011A04  50E2               	movf	fsr1h,w,c
 15697   011A06  6EDA               	movwf	fsr2h,c
 15698   011A08  0EFF               	movlw	255
 15699   011A0A  22DA               	addwfc	fsr2h,f,c
 15700   011A0C  50DF               	movf	223,w,c
 15701   011A0E  0B1F               	andlw	31
 15702   011A10  6E0C               	movwf	(btemp+11)^0,c
 15703                           
 15704                           ;stkvar	_config @ sp[(-4)+-2]
 15705   011A12  0EFA               	movlw	-6
 15706   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 15707   011A18  0EFB               	movlw	-5
 15708   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 15709   011A1E  50DF               	movf	223,w,c
 15710   011A20  180C               	xorwf	(btemp+11)^0,w,c
 15711   011A22  0BE0               	andlw	-32
 15712   011A24  180C               	xorwf	(btemp+11)^0,w,c
 15713   011A26  6EDF               	movwf	223,c
 15714   011A28                     
 15715                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 15716                           ;stkvar	_ciCon @ sp[(-4)+0]
 15717   011A28  50E1               	movf	fsr1l,w,c
 15718   011A2A  0FFC               	addlw	-4
 15719   011A2C  6ED9               	movwf	fsr2l,c
 15720   011A2E  50E2               	movf	fsr1h,w,c
 15721   011A30  6EDA               	movwf	fsr2h,c
 15722   011A32  0EFF               	movlw	255
 15723   011A34  22DA               	addwfc	fsr2h,f,c
 15724                           
 15725                           ;stkvar	_config @ sp[(-4)+-2]
 15726   011A36  0EFA               	movlw	-6
 15727   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 15728   011A3C  0EFB               	movlw	-5
 15729   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 15730   011A42  9AEF               	bcf	indf0,5,c
 15731   011A44  AADF               	btfss	indf2,5,c
 15732   011A46  EF26  F08D         	goto	u805
 15733   011A4A  8AEF               	bsf	indf0,5,c
 15734   011A4C                     u805:
 15735   011A4C                     
 15736                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 15737                           ;stkvar	_ciCon @ sp[(-4)+0]
 15738   011A4C  50E1               	movf	fsr1l,w,c
 15739   011A4E  0FFC               	addlw	-4
 15740   011A50  6ED9               	movwf	fsr2l,c
 15741   011A52  50E2               	movf	fsr1h,w,c
 15742   011A54  6EDA               	movwf	fsr2h,c
 15743   011A56  0EFF               	movlw	255
 15744   011A58  22DA               	addwfc	fsr2h,f,c
 15745                           
 15746                           ;stkvar	_config @ sp[(-4)+-2]
 15747   011A5A  0EFA               	movlw	-6
 15748   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 15749   011A60  0EFB               	movlw	-5
 15750   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 15751   011A66  9CEF               	bcf	indf0,6,c
 15752   011A68  ACDF               	btfss	indf2,6,c
 15753   011A6A  EF38  F08D         	goto	u815
 15754   011A6E  8CEF               	bsf	indf0,6,c
 15755   011A70                     u815:
 15756   011A70                     
 15757                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15758                           ;stkvar	_ciCon @ sp[(-4)+0]
 15759   011A70  0EFD               	movlw	253
 15760   011A72  24E1               	addwf	fsr1l,w,c
 15761   011A74  6ED9               	movwf	fsr2l,c
 15762   011A76  0EFF               	movlw	255
 15763   011A78  20E2               	addwfc	fsr1h,w,c
 15764   011A7A  6EDA               	movwf	fsr2h,c
 15765                           
 15766                           ;stkvar	_config @ sp[(-4)+-2]
 15767   011A7C  0EFA               	movlw	-6
 15768   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15769   011A82  0EFB               	movlw	-5
 15770   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15771   011A88  9EEF               	bcf	indf0,7,c
 15772   011A8A  A0DF               	btfss	indf2,0,c
 15773   011A8C  EF49  F08D         	goto	u825
 15774   011A90  8EEF               	bsf	indf0,7,c
 15775   011A92                     u825:
 15776   011A92                     
 15777                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15778                           ;stkvar	_ciCon @ sp[(-4)+0]
 15779   011A92  0EFD               	movlw	253
 15780   011A94  24E1               	addwf	fsr1l,w,c
 15781   011A96  6ED9               	movwf	fsr2l,c
 15782   011A98  0EFF               	movlw	255
 15783   011A9A  20E2               	addwfc	fsr1h,w,c
 15784   011A9C  6EDA               	movwf	fsr2h,c
 15785   011A9E  30DF               	rrcf	223,w,c
 15786   011AA0  0B03               	andlw	3
 15787   011AA2  6E0C               	movwf	(btemp+11)^0,c
 15788                           
 15789                           ;stkvar	_config @ sp[(-4)+-2]
 15790   011AA4  0EFA               	movlw	-6
 15791   011AA6  CFE3 F009          	movff	plusw1,btemp+8
 15792   011AAA  0EFB               	movlw	-5
 15793   011AAC  CFE3 F00A          	movff	plusw1,btemp+9
 15794   011AB0  0E01               	movlw	1
 15795   011AB2  2409               	addwf	(btemp+8)^0,w,c
 15796   011AB4  6ED9               	movwf	fsr2l,c
 15797   011AB6  0E00               	movlw	0
 15798   011AB8  200A               	addwfc	(btemp+9)^0,w,c
 15799   011ABA  6EDA               	movwf	fsr2h,c
 15800   011ABC  50DF               	movf	223,w,c
 15801   011ABE  180C               	xorwf	(btemp+11)^0,w,c
 15802   011AC0  0BFC               	andlw	-4
 15803   011AC2  180C               	xorwf	(btemp+11)^0,w,c
 15804   011AC4  6EDF               	movwf	223,c
 15805   011AC6                     
 15806                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15807                           ;stkvar	_ciCon @ sp[(-4)+0]
 15808   011AC6  0EFD               	movlw	253
 15809   011AC8  24E1               	addwf	fsr1l,w,c
 15810   011ACA  6ED9               	movwf	fsr2l,c
 15811   011ACC  0EFF               	movlw	255
 15812   011ACE  20E2               	addwfc	fsr1h,w,c
 15813   011AD0  6EDA               	movwf	fsr2h,c
 15814                           
 15815                           ;stkvar	_config @ sp[(-4)+-2]
 15816   011AD2  0EFA               	movlw	-6
 15817   011AD4  CFE3 F00B          	movff	plusw1,btemp+10
 15818   011AD8  0EFB               	movlw	-5
 15819   011ADA  CFE3 F00C          	movff	plusw1,btemp+11
 15820   011ADE  0E01               	movlw	1
 15821   011AE0  240B               	addwf	(btemp+10)^0,w,c
 15822   011AE2  6EE9               	movwf	fsr0l,c
 15823   011AE4  0E00               	movlw	0
 15824   011AE6  200C               	addwfc	(btemp+11)^0,w,c
 15825   011AE8  6EEA               	movwf	fsr0h,c
 15826   011AEA  94EF               	bcf	indf0,2,c
 15827   011AEC  A8DF               	btfss	indf2,4,c
 15828   011AEE  EF7A  F08D         	goto	u835
 15829   011AF2  84EF               	bsf	indf0,2,c
 15830   011AF4                     u835:
 15831   011AF4                     
 15832                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15833                           ;stkvar	_ciCon @ sp[(-4)+0]
 15834   011AF4  0EFE               	movlw	254
 15835   011AF6  24E1               	addwf	fsr1l,w,c
 15836   011AF8  6ED9               	movwf	fsr2l,c
 15837   011AFA  0EFF               	movlw	255
 15838   011AFC  20E2               	addwfc	fsr1h,w,c
 15839   011AFE  6EDA               	movwf	fsr2h,c
 15840                           
 15841                           ;stkvar	_config @ sp[(-4)+-2]
 15842   011B00  0EFA               	movlw	-6
 15843   011B02  CFE3 F00B          	movff	plusw1,btemp+10
 15844   011B06  0EFB               	movlw	-5
 15845   011B08  CFE3 F00C          	movff	plusw1,btemp+11
 15846   011B0C  0E01               	movlw	1
 15847   011B0E  240B               	addwf	(btemp+10)^0,w,c
 15848   011B10  6EE9               	movwf	fsr0l,c
 15849   011B12  0E00               	movlw	0
 15850   011B14  200C               	addwfc	(btemp+11)^0,w,c
 15851   011B16  6EEA               	movwf	fsr0h,c
 15852   011B18  96EF               	bcf	indf0,3,c
 15853   011B1A  A0DF               	btfss	indf2,0,c
 15854   011B1C  EF91  F08D         	goto	u845
 15855   011B20  86EF               	bsf	indf0,3,c
 15856   011B22                     u845:
 15857   011B22                     
 15858                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 15859                           ;stkvar	_ciCon @ sp[(-4)+0]
 15860   011B22  0EFE               	movlw	254
 15861   011B24  24E1               	addwf	fsr1l,w,c
 15862   011B26  6ED9               	movwf	fsr2l,c
 15863   011B28  0EFF               	movlw	255
 15864   011B2A  20E2               	addwfc	fsr1h,w,c
 15865   011B2C  6EDA               	movwf	fsr2h,c
 15866                           
 15867                           ;stkvar	_config @ sp[(-4)+-2]
 15868   011B2E  0EFA               	movlw	-6
 15869   011B30  CFE3 F00B          	movff	plusw1,btemp+10
 15870   011B34  0EFB               	movlw	-5
 15871   011B36  CFE3 F00C          	movff	plusw1,btemp+11
 15872   011B3A  0E01               	movlw	1
 15873   011B3C  240B               	addwf	(btemp+10)^0,w,c
 15874   011B3E  6EE9               	movwf	fsr0l,c
 15875   011B40  0E00               	movlw	0
 15876   011B42  200C               	addwfc	(btemp+11)^0,w,c
 15877   011B44  6EEA               	movwf	fsr0h,c
 15878   011B46  98EF               	bcf	indf0,4,c
 15879   011B48  A2DF               	btfss	indf2,1,c
 15880   011B4A  EFA8  F08D         	goto	u855
 15881   011B4E  88EF               	bsf	indf0,4,c
 15882   011B50                     u855:
 15883   011B50                     
 15884                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 15885                           ;stkvar	_ciCon @ sp[(-4)+0]
 15886   011B50  0EFE               	movlw	254
 15887   011B52  24E1               	addwf	fsr1l,w,c
 15888   011B54  6ED9               	movwf	fsr2l,c
 15889   011B56  0EFF               	movlw	255
 15890   011B58  20E2               	addwfc	fsr1h,w,c
 15891   011B5A  6EDA               	movwf	fsr2h,c
 15892                           
 15893                           ;stkvar	_config @ sp[(-4)+-2]
 15894   011B5C  0EFA               	movlw	-6
 15895   011B5E  CFE3 F00B          	movff	plusw1,btemp+10
 15896   011B62  0EFB               	movlw	-5
 15897   011B64  CFE3 F00C          	movff	plusw1,btemp+11
 15898   011B68  0E01               	movlw	1
 15899   011B6A  240B               	addwf	(btemp+10)^0,w,c
 15900   011B6C  6EE9               	movwf	fsr0l,c
 15901   011B6E  0E00               	movlw	0
 15902   011B70  200C               	addwfc	(btemp+11)^0,w,c
 15903   011B72  6EEA               	movwf	fsr0h,c
 15904   011B74  9AEF               	bcf	indf0,5,c
 15905   011B76  A4DF               	btfss	indf2,2,c
 15906   011B78  EFBF  F08D         	goto	u865
 15907   011B7C  8AEF               	bsf	indf0,5,c
 15908   011B7E                     u865:
 15909   011B7E                     
 15910                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 15911                           ;stkvar	_ciCon @ sp[(-4)+0]
 15912   011B7E  0EFE               	movlw	254
 15913   011B80  24E1               	addwf	fsr1l,w,c
 15914   011B82  6ED9               	movwf	fsr2l,c
 15915   011B84  0EFF               	movlw	255
 15916   011B86  20E2               	addwfc	fsr1h,w,c
 15917   011B88  6EDA               	movwf	fsr2h,c
 15918                           
 15919                           ;stkvar	_config @ sp[(-4)+-2]
 15920   011B8A  0EFA               	movlw	-6
 15921   011B8C  CFE3 F00B          	movff	plusw1,btemp+10
 15922   011B90  0EFB               	movlw	-5
 15923   011B92  CFE3 F00C          	movff	plusw1,btemp+11
 15924   011B96  0E01               	movlw	1
 15925   011B98  240B               	addwf	(btemp+10)^0,w,c
 15926   011B9A  6EE9               	movwf	fsr0l,c
 15927   011B9C  0E00               	movlw	0
 15928   011B9E  200C               	addwfc	(btemp+11)^0,w,c
 15929   011BA0  6EEA               	movwf	fsr0h,c
 15930   011BA2  9CEF               	bcf	indf0,6,c
 15931   011BA4  A6DF               	btfss	indf2,3,c
 15932   011BA6  EFD6  F08D         	goto	u875
 15933   011BAA  8CEF               	bsf	indf0,6,c
 15934   011BAC                     u875:
 15935   011BAC                     
 15936                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 15937                           ;stkvar	_ciCon @ sp[(-4)+0]
 15938   011BAC  0EFE               	movlw	254
 15939   011BAE  24E1               	addwf	fsr1l,w,c
 15940   011BB0  6ED9               	movwf	fsr2l,c
 15941   011BB2  0EFF               	movlw	255
 15942   011BB4  20E2               	addwfc	fsr1h,w,c
 15943   011BB6  6EDA               	movwf	fsr2h,c
 15944                           
 15945                           ;stkvar	_config @ sp[(-4)+-2]
 15946   011BB8  0EFA               	movlw	-6
 15947   011BBA  CFE3 F00B          	movff	plusw1,btemp+10
 15948   011BBE  0EFB               	movlw	-5
 15949   011BC0  CFE3 F00C          	movff	plusw1,btemp+11
 15950   011BC4  0E01               	movlw	1
 15951   011BC6  240B               	addwf	(btemp+10)^0,w,c
 15952   011BC8  6EE9               	movwf	fsr0l,c
 15953   011BCA  0E00               	movlw	0
 15954   011BCC  200C               	addwfc	(btemp+11)^0,w,c
 15955   011BCE  6EEA               	movwf	fsr0h,c
 15956   011BD0  9EEF               	bcf	indf0,7,c
 15957   011BD2  A8DF               	btfss	indf2,4,c
 15958   011BD4  EFED  F08D         	goto	u885
 15959   011BD8  8EEF               	bsf	indf0,7,c
 15960   011BDA                     u885:
 15961   011BDA                     
 15962                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 15963                           ;stkvar	_ciCon @ sp[(-4)+0]
 15964   011BDA  0EFF               	movlw	255
 15965   011BDC  24E1               	addwf	fsr1l,w,c
 15966   011BDE  6ED9               	movwf	fsr2l,c
 15967   011BE0  0EFF               	movlw	255
 15968   011BE2  20E2               	addwfc	fsr1h,w,c
 15969   011BE4  6EDA               	movwf	fsr2h,c
 15970   011BE6  38DF               	swapf	223,w,c
 15971   011BE8  0B0F               	andlw	15
 15972   011BEA  6E0C               	movwf	(btemp+11)^0,c
 15973                           
 15974                           ;stkvar	_config @ sp[(-4)+-2]
 15975   011BEC  0EFA               	movlw	-6
 15976   011BEE  CFE3 F009          	movff	plusw1,btemp+8
 15977   011BF2  0EFB               	movlw	-5
 15978   011BF4  CFE3 F00A          	movff	plusw1,btemp+9
 15979   011BF8  0E02               	movlw	2
 15980   011BFA  2409               	addwf	(btemp+8)^0,w,c
 15981   011BFC  6ED9               	movwf	fsr2l,c
 15982   011BFE  0E00               	movlw	0
 15983   011C00  200A               	addwfc	(btemp+9)^0,w,c
 15984   011C02  6EDA               	movwf	fsr2h,c
 15985   011C04  50DF               	movf	223,w,c
 15986   011C06  180C               	xorwf	(btemp+11)^0,w,c
 15987   011C08  0BF0               	andlw	-16
 15988   011C0A  180C               	xorwf	(btemp+11)^0,w,c
 15989   011C0C  6EDF               	movwf	223,c
 15990   011C0E                     
 15991                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 15992   011C0E  0EFA               	movlw	250
 15993   011C10  26E1               	addwf	fsr1l,f,c
 15994   011C12  0EFF               	movlw	255
 15995   011C14  22E2               	addwfc	fsr1h,f,c
 15996   011C16  0012               	return		;funcret
 15997   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 15998                           	callstack 0
 15999                           
 16000 ;; *************** function _DRV_CANFDSPI_Configure *****************
 16001 ;; Defined at:
 16002 ;;		line 446 in file "can/can.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 16005 ;;		 -> config(3), 
 16006 ;; Auto vars:     Size  Location     Type
 16007 ;;  ciCon           4  [STACK] struct _REG_CiCON
 16008 ;;  spiTransferE    1    0        char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;                  1  [STACK] char 
 16011 ;; Registers used:
 16012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 16013 ;; Tracked objects:
 16014 ;;		On entry : 0/0
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16022 ;;Total ram usage:        0 bytes
 16023 ;; Hardware stack levels used: 1
 16024 ;; Hardware stack levels required when called: 9
 16025 ;; This function calls:
 16026 ;;		_DRV_CANFDSPI_WriteWord
 16027 ;; This function is called by:
 16028 ;;		_CanInit
 16029 ;; This function uses a reentrant model
 16030 ;;
 16031                           
 16032                           	psect	text65
 16033   01173A                     __ptext65:
 16034                           	callstack 0
 16035   01173A                     _DRV_CANFDSPI_Configure:
 16036                           	callstack 0
 16037                           
 16038                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16039   01173A  52E6               	movf	postinc1,f,c
 16040   01173C  52E6               	movf	postinc1,f,c
 16041   01173E  52E6               	movf	postinc1,f,c
 16042   011740  52E6               	movf	postinc1,f,c
 16043   011742                     
 16044                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 16045   011742  0E8D               	movlw	low _canControlResetValues
 16046   011744  6EF6               	movwf	tblptrl,c
 16047   011746                     	if	1	;There is more than 1 active tblptr byte
 16048   011746  0EFF               	movlw	high _canControlResetValues
 16049   011748  6EF7               	movwf	tblptrh,c
 16050   01174A                     	endif
 16051   01174A                     	if	1	;There are 3 active tblptr bytes
 16052   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16053   01174C  6EF8               	movwf	tblptru,c
 16054   01174E                     	endif
 16055   01174E  0009               	tblrd		*+
 16056   011750  CFF5 F009          	movff	tablat,btemp+8
 16057   011754  0009               	tblrd		*+
 16058   011756  CFF5 F00A          	movff	tablat,btemp+9
 16059   01175A  0009               	tblrd		*+
 16060   01175C  CFF5 F00B          	movff	tablat,btemp+10
 16061   011760  0009               	tblrd		*+
 16062   011762  CFF5 F00C          	movff	tablat,btemp+11
 16063                           
 16064                           ;stkvar	_ciCon @ sp[(-4)+0]
 16065   011766  0EFC               	movlw	-4
 16066   011768  C009  FFE3         	movff	btemp+8,plusw1
 16067   01176C  0EFD               	movlw	-3
 16068   01176E  C00A  FFE3         	movff	btemp+9,plusw1
 16069   011772  0EFE               	movlw	-2
 16070   011774  C00B  FFE3         	movff	btemp+10,plusw1
 16071   011778  0EFF               	movlw	-1
 16072   01177A  C00C  FFE3         	movff	btemp+11,plusw1
 16073   01177E                     
 16074                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 16075                           ;stkvar	_config @ sp[(-4)+-2]
 16076   01177E  0EFA               	movlw	-6
 16077   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 16078   011784  0EFB               	movlw	-5
 16079   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 16080   01178A  50DF               	movf	223,w,c
 16081   01178C  0B1F               	andlw	31
 16082   01178E  6E0C               	movwf	(btemp+11)^0,c
 16083                           
 16084                           ;stkvar	_ciCon @ sp[(-4)+0]
 16085   011790  50E1               	movf	fsr1l,w,c
 16086   011792  0FFC               	addlw	-4
 16087   011794  6ED9               	movwf	fsr2l,c
 16088   011796  50E2               	movf	fsr1h,w,c
 16089   011798  6EDA               	movwf	fsr2h,c
 16090   01179A  0EFF               	movlw	255
 16091   01179C  22DA               	addwfc	fsr2h,f,c
 16092   01179E  50DF               	movf	223,w,c
 16093   0117A0  180C               	xorwf	(btemp+11)^0,w,c
 16094   0117A2  0BE0               	andlw	-32
 16095   0117A4  180C               	xorwf	(btemp+11)^0,w,c
 16096   0117A6  6EDF               	movwf	223,c
 16097   0117A8                     
 16098                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16099                           ;stkvar	_config @ sp[(-4)+-2]
 16100   0117A8  0EFA               	movlw	-6
 16101   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16102   0117AE  0EFB               	movlw	-5
 16103   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16104                           
 16105                           ;stkvar	_ciCon @ sp[(-4)+0]
 16106   0117B4  50E1               	movf	fsr1l,w,c
 16107   0117B6  0FFC               	addlw	-4
 16108   0117B8  6EE9               	movwf	fsr0l,c
 16109   0117BA  50E2               	movf	fsr1h,w,c
 16110   0117BC  6EEA               	movwf	fsr0h,c
 16111   0117BE  0EFF               	movlw	255
 16112   0117C0  22EA               	addwfc	fsr0h,f,c
 16113   0117C2  9AEF               	bcf	indf0,5,c
 16114   0117C4  AADF               	btfss	indf2,5,c
 16115   0117C6  EFE6  F08B         	goto	u2395
 16116   0117CA  8AEF               	bsf	indf0,5,c
 16117   0117CC                     u2395:
 16118   0117CC                     
 16119                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16120                           ;stkvar	_config @ sp[(-4)+-2]
 16121   0117CC  0EFA               	movlw	-6
 16122   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16123   0117D2  0EFB               	movlw	-5
 16124   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16125                           
 16126                           ;stkvar	_ciCon @ sp[(-4)+0]
 16127   0117D8  50E1               	movf	fsr1l,w,c
 16128   0117DA  0FFC               	addlw	-4
 16129   0117DC  6EE9               	movwf	fsr0l,c
 16130   0117DE  50E2               	movf	fsr1h,w,c
 16131   0117E0  6EEA               	movwf	fsr0h,c
 16132   0117E2  0EFF               	movlw	255
 16133   0117E4  22EA               	addwfc	fsr0h,f,c
 16134   0117E6  9CEF               	bcf	indf0,6,c
 16135   0117E8  ACDF               	btfss	indf2,6,c
 16136   0117EA  EFF8  F08B         	goto	u2405
 16137   0117EE  8CEF               	bsf	indf0,6,c
 16138   0117F0                     u2405:
 16139   0117F0                     
 16140                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16141                           ;stkvar	_config @ sp[(-4)+-2]
 16142   0117F0  0EFA               	movlw	-6
 16143   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16144   0117F6  0EFB               	movlw	-5
 16145   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16146                           
 16147                           ;stkvar	_ciCon @ sp[(-4)+0]
 16148   0117FC  0EFD               	movlw	253
 16149   0117FE  24E1               	addwf	fsr1l,w,c
 16150   011800  6EE9               	movwf	fsr0l,c
 16151   011802  0EFF               	movlw	255
 16152   011804  20E2               	addwfc	fsr1h,w,c
 16153   011806  6EEA               	movwf	fsr0h,c
 16154   011808  90EF               	bcf	indf0,0,c
 16155   01180A  AEDF               	btfss	indf2,7,c
 16156   01180C  EF09  F08C         	goto	u2415
 16157   011810  80EF               	bsf	indf0,0,c
 16158   011812                     u2415:
 16159   011812                     
 16160                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16161                           ;stkvar	_config @ sp[(-4)+-2]
 16162   011812  0EFA               	movlw	-6
 16163   011814  CFE3 F00B          	movff	plusw1,btemp+10
 16164   011818  0EFB               	movlw	-5
 16165   01181A  CFE3 F00C          	movff	plusw1,btemp+11
 16166   01181E  0E01               	movlw	1
 16167   011820  240B               	addwf	(btemp+10)^0,w,c
 16168   011822  6ED9               	movwf	fsr2l,c
 16169   011824  0E00               	movlw	0
 16170   011826  200C               	addwfc	(btemp+11)^0,w,c
 16171   011828  6EDA               	movwf	fsr2h,c
 16172   01182A  50DF               	movf	223,w,c
 16173   01182C  0B03               	andlw	3
 16174   01182E  6E0C               	movwf	(btemp+11)^0,c
 16175                           
 16176                           ;stkvar	_ciCon @ sp[(-4)+0]
 16177   011830  0EFD               	movlw	253
 16178   011832  24E1               	addwf	fsr1l,w,c
 16179   011834  6ED9               	movwf	fsr2l,c
 16180   011836  0EFF               	movlw	255
 16181   011838  20E2               	addwfc	fsr1h,w,c
 16182   01183A  6EDA               	movwf	fsr2h,c
 16183   01183C  460C               	rlncf	(btemp+11)^0,f,c
 16184   01183E  50DF               	movf	223,w,c
 16185   011840  180C               	xorwf	(btemp+11)^0,w,c
 16186   011842  0BF9               	andlw	-7
 16187   011844  180C               	xorwf	(btemp+11)^0,w,c
 16188   011846  6EDF               	movwf	223,c
 16189   011848                     
 16190                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16191                           ;stkvar	_config @ sp[(-4)+-2]
 16192   011848  0EFA               	movlw	-6
 16193   01184A  CFE3 F00B          	movff	plusw1,btemp+10
 16194   01184E  0EFB               	movlw	-5
 16195   011850  CFE3 F00C          	movff	plusw1,btemp+11
 16196   011854  0E01               	movlw	1
 16197   011856  240B               	addwf	(btemp+10)^0,w,c
 16198   011858  6ED9               	movwf	fsr2l,c
 16199   01185A  0E00               	movlw	0
 16200   01185C  200C               	addwfc	(btemp+11)^0,w,c
 16201   01185E  6EDA               	movwf	fsr2h,c
 16202                           
 16203                           ;stkvar	_ciCon @ sp[(-4)+0]
 16204   011860  0EFD               	movlw	253
 16205   011862  24E1               	addwf	fsr1l,w,c
 16206   011864  6EE9               	movwf	fsr0l,c
 16207   011866  0EFF               	movlw	255
 16208   011868  20E2               	addwfc	fsr1h,w,c
 16209   01186A  6EEA               	movwf	fsr0h,c
 16210   01186C  98EF               	bcf	indf0,4,c
 16211   01186E  A4DF               	btfss	indf2,2,c
 16212   011870  EF3B  F08C         	goto	u2425
 16213   011874  88EF               	bsf	indf0,4,c
 16214   011876                     u2425:
 16215   011876                     
 16216                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16217                           ;stkvar	_config @ sp[(-4)+-2]
 16218   011876  0EFA               	movlw	-6
 16219   011878  CFE3 F00B          	movff	plusw1,btemp+10
 16220   01187C  0EFB               	movlw	-5
 16221   01187E  CFE3 F00C          	movff	plusw1,btemp+11
 16222   011882  0E01               	movlw	1
 16223   011884  240B               	addwf	(btemp+10)^0,w,c
 16224   011886  6ED9               	movwf	fsr2l,c
 16225   011888  0E00               	movlw	0
 16226   01188A  200C               	addwfc	(btemp+11)^0,w,c
 16227   01188C  6EDA               	movwf	fsr2h,c
 16228                           
 16229                           ;stkvar	_ciCon @ sp[(-4)+0]
 16230   01188E  0EFE               	movlw	254
 16231   011890  24E1               	addwf	fsr1l,w,c
 16232   011892  6EE9               	movwf	fsr0l,c
 16233   011894  0EFF               	movlw	255
 16234   011896  20E2               	addwfc	fsr1h,w,c
 16235   011898  6EEA               	movwf	fsr0h,c
 16236   01189A  90EF               	bcf	indf0,0,c
 16237   01189C  A6DF               	btfss	indf2,3,c
 16238   01189E  EF52  F08C         	goto	u2435
 16239   0118A2  80EF               	bsf	indf0,0,c
 16240   0118A4                     u2435:
 16241   0118A4                     
 16242                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16243                           ;stkvar	_config @ sp[(-4)+-2]
 16244   0118A4  0EFA               	movlw	-6
 16245   0118A6  CFE3 F00B          	movff	plusw1,btemp+10
 16246   0118AA  0EFB               	movlw	-5
 16247   0118AC  CFE3 F00C          	movff	plusw1,btemp+11
 16248   0118B0  0E01               	movlw	1
 16249   0118B2  240B               	addwf	(btemp+10)^0,w,c
 16250   0118B4  6ED9               	movwf	fsr2l,c
 16251   0118B6  0E00               	movlw	0
 16252   0118B8  200C               	addwfc	(btemp+11)^0,w,c
 16253   0118BA  6EDA               	movwf	fsr2h,c
 16254                           
 16255                           ;stkvar	_ciCon @ sp[(-4)+0]
 16256   0118BC  0EFE               	movlw	254
 16257   0118BE  24E1               	addwf	fsr1l,w,c
 16258   0118C0  6EE9               	movwf	fsr0l,c
 16259   0118C2  0EFF               	movlw	255
 16260   0118C4  20E2               	addwfc	fsr1h,w,c
 16261   0118C6  6EEA               	movwf	fsr0h,c
 16262   0118C8  92EF               	bcf	indf0,1,c
 16263   0118CA  A8DF               	btfss	indf2,4,c
 16264   0118CC  EF69  F08C         	goto	u2445
 16265   0118D0  82EF               	bsf	indf0,1,c
 16266   0118D2                     u2445:
 16267   0118D2                     
 16268                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16269                           ;stkvar	_config @ sp[(-4)+-2]
 16270   0118D2  0EFA               	movlw	-6
 16271   0118D4  CFE3 F00B          	movff	plusw1,btemp+10
 16272   0118D8  0EFB               	movlw	-5
 16273   0118DA  CFE3 F00C          	movff	plusw1,btemp+11
 16274   0118DE  0E01               	movlw	1
 16275   0118E0  240B               	addwf	(btemp+10)^0,w,c
 16276   0118E2  6ED9               	movwf	fsr2l,c
 16277   0118E4  0E00               	movlw	0
 16278   0118E6  200C               	addwfc	(btemp+11)^0,w,c
 16279   0118E8  6EDA               	movwf	fsr2h,c
 16280                           
 16281                           ;stkvar	_ciCon @ sp[(-4)+0]
 16282   0118EA  0EFE               	movlw	254
 16283   0118EC  24E1               	addwf	fsr1l,w,c
 16284   0118EE  6EE9               	movwf	fsr0l,c
 16285   0118F0  0EFF               	movlw	255
 16286   0118F2  20E2               	addwfc	fsr1h,w,c
 16287   0118F4  6EEA               	movwf	fsr0h,c
 16288   0118F6  94EF               	bcf	indf0,2,c
 16289   0118F8  AADF               	btfss	indf2,5,c
 16290   0118FA  EF80  F08C         	goto	u2455
 16291   0118FE  84EF               	bsf	indf0,2,c
 16292   011900                     u2455:
 16293   011900                     
 16294                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16295                           ;stkvar	_config @ sp[(-4)+-2]
 16296   011900  0EFA               	movlw	-6
 16297   011902  CFE3 F00B          	movff	plusw1,btemp+10
 16298   011906  0EFB               	movlw	-5
 16299   011908  CFE3 F00C          	movff	plusw1,btemp+11
 16300   01190C  0E01               	movlw	1
 16301   01190E  240B               	addwf	(btemp+10)^0,w,c
 16302   011910  6ED9               	movwf	fsr2l,c
 16303   011912  0E00               	movlw	0
 16304   011914  200C               	addwfc	(btemp+11)^0,w,c
 16305   011916  6EDA               	movwf	fsr2h,c
 16306                           
 16307                           ;stkvar	_ciCon @ sp[(-4)+0]
 16308   011918  0EFE               	movlw	254
 16309   01191A  24E1               	addwf	fsr1l,w,c
 16310   01191C  6EE9               	movwf	fsr0l,c
 16311   01191E  0EFF               	movlw	255
 16312   011920  20E2               	addwfc	fsr1h,w,c
 16313   011922  6EEA               	movwf	fsr0h,c
 16314   011924  96EF               	bcf	indf0,3,c
 16315   011926  ACDF               	btfss	indf2,6,c
 16316   011928  EF97  F08C         	goto	u2465
 16317   01192C  86EF               	bsf	indf0,3,c
 16318   01192E                     u2465:
 16319   01192E                     
 16320                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16321                           ;stkvar	_config @ sp[(-4)+-2]
 16322   01192E  0EFA               	movlw	-6
 16323   011930  CFE3 F00B          	movff	plusw1,btemp+10
 16324   011934  0EFB               	movlw	-5
 16325   011936  CFE3 F00C          	movff	plusw1,btemp+11
 16326   01193A  0E01               	movlw	1
 16327   01193C  240B               	addwf	(btemp+10)^0,w,c
 16328   01193E  6ED9               	movwf	fsr2l,c
 16329   011940  0E00               	movlw	0
 16330   011942  200C               	addwfc	(btemp+11)^0,w,c
 16331   011944  6EDA               	movwf	fsr2h,c
 16332                           
 16333                           ;stkvar	_ciCon @ sp[(-4)+0]
 16334   011946  0EFE               	movlw	254
 16335   011948  24E1               	addwf	fsr1l,w,c
 16336   01194A  6EE9               	movwf	fsr0l,c
 16337   01194C  0EFF               	movlw	255
 16338   01194E  20E2               	addwfc	fsr1h,w,c
 16339   011950  6EEA               	movwf	fsr0h,c
 16340   011952  98EF               	bcf	indf0,4,c
 16341   011954  AEDF               	btfss	indf2,7,c
 16342   011956  EFAE  F08C         	goto	u2475
 16343   01195A  88EF               	bsf	indf0,4,c
 16344   01195C                     u2475:
 16345   01195C                     
 16346                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16347                           ;stkvar	_config @ sp[(-4)+-2]
 16348   01195C  0EFA               	movlw	-6
 16349   01195E  CFE3 F00B          	movff	plusw1,btemp+10
 16350   011962  0EFB               	movlw	-5
 16351   011964  CFE3 F00C          	movff	plusw1,btemp+11
 16352   011968  0E02               	movlw	2
 16353   01196A  240B               	addwf	(btemp+10)^0,w,c
 16354   01196C  6ED9               	movwf	fsr2l,c
 16355   01196E  0E00               	movlw	0
 16356   011970  200C               	addwfc	(btemp+11)^0,w,c
 16357   011972  6EDA               	movwf	fsr2h,c
 16358   011974  50DF               	movf	223,w,c
 16359   011976  0B0F               	andlw	15
 16360   011978  6E0C               	movwf	(btemp+11)^0,c
 16361                           
 16362                           ;stkvar	_ciCon @ sp[(-4)+0]
 16363   01197A  0EFF               	movlw	255
 16364   01197C  24E1               	addwf	fsr1l,w,c
 16365   01197E  6ED9               	movwf	fsr2l,c
 16366   011980  0EFF               	movlw	255
 16367   011982  20E2               	addwfc	fsr1h,w,c
 16368   011984  6EDA               	movwf	fsr2h,c
 16369   011986  3A0C               	swapf	(btemp+11)^0,f,c
 16370   011988  50DF               	movf	223,w,c
 16371   01198A  180C               	xorwf	(btemp+11)^0,w,c
 16372   01198C  0B0F               	andlw	-241
 16373   01198E  180C               	xorwf	(btemp+11)^0,w,c
 16374   011990  6EDF               	movwf	223,c
 16375   011992                     
 16376                           ;stkvar	_ciCon @ sp[(-4)+0]
 16377   011992  0EFC               	movlw	-4
 16378   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16379   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16380   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16381   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16382   0119A4  0E00               	movlw	0
 16383   0119A6  6EE6               	movwf	postinc1,c
 16384   0119A8  0E00               	movlw	0
 16385   0119AA  6EE6               	movwf	postinc1,c
 16386   0119AC  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16387   0119B0                     
 16388                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16389   0119B0  0EFA               	movlw	250
 16390   0119B2  26E1               	addwf	fsr1l,f,c
 16391   0119B4  0EFF               	movlw	255
 16392   0119B6  22E2               	addwfc	fsr1h,f,c
 16393   0119B8  0012               	return		;funcret
 16394   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16395                           	callstack 0
 16396                           
 16397 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16398 ;; Defined at:
 16399 ;;		line 2825 in file "can/can.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;  bitTime         1  [STACK] enum E5604
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16404 ;;  spiTransferE    1    0        char 
 16405 ;; Return value:  Size  Location     Type
 16406 ;;                  1  [STACK] char 
 16407 ;; Registers used:
 16408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16409 ;; Tracked objects:
 16410 ;;		On entry : 0/0
 16411 ;;		On exit  : 0/0
 16412 ;;		Unchanged: 0/0
 16413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16418 ;;Total ram usage:        0 bytes
 16419 ;; Hardware stack levels used: 1
 16420 ;; Hardware stack levels required when called: 9
 16421 ;; This function calls:
 16422 ;;		_DRV_CANFDSPI_WriteWord
 16423 ;; This function is called by:
 16424 ;;		_CanInit
 16425 ;; This function uses a reentrant model
 16426 ;;
 16427                           
 16428                           	psect	text66
 16429   011C18                     __ptext66:
 16430                           	callstack 0
 16431   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16432                           	callstack 0
 16433                           
 16434                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16435   011C18  52E6               	movf	postinc1,f,c
 16436   011C1A  52E6               	movf	postinc1,f,c
 16437   011C1C  52E6               	movf	postinc1,f,c
 16438   011C1E  52E6               	movf	postinc1,f,c
 16439   011C20                     
 16440                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16441   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16442   011C22  6EF6               	movwf	tblptrl,c
 16443   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16444   011C26  6EF7               	movwf	tblptrh,c
 16445   011C28                     	if	0	;tblptru may be non-zero
 16446   011C28                     	endif
 16447   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16448   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16449   011C2A  6EF8               	movwf	tblptru,c
 16450   011C2C                     	endif
 16451   011C2C  0009               	tblrd		*+
 16452   011C2E  CFF5 F009          	movff	tablat,btemp+8
 16453   011C32  0009               	tblrd		*+
 16454   011C34  CFF5 F00A          	movff	tablat,btemp+9
 16455   011C38  0009               	tblrd		*+
 16456   011C3A  CFF5 F00B          	movff	tablat,btemp+10
 16457   011C3E  0009               	tblrd		*+
 16458   011C40  CFF5 F00C          	movff	tablat,btemp+11
 16459                           
 16460                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16461   011C44  0EFC               	movlw	-4
 16462   011C46  C009  FFE3         	movff	btemp+8,plusw1
 16463   011C4A  0EFD               	movlw	-3
 16464   011C4C  C00A  FFE3         	movff	btemp+9,plusw1
 16465   011C50  0EFE               	movlw	-2
 16466   011C52  C00B  FFE3         	movff	btemp+10,plusw1
 16467   011C56  0EFF               	movlw	-1
 16468   011C58  C00C  FFE3         	movff	btemp+11,plusw1
 16469                           
 16470                           ;can/can.c: 2834:     switch (bitTime) {
 16471   011C5C  EFC8  F08E         	goto	l4728
 16472   011C60                     l665:
 16473   011C60                     l4708:
 16474                           
 16475                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16476                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16477   011C60  0EFF               	movlw	255
 16478   011C62  24E1               	addwf	fsr1l,w,c
 16479   011C64  6ED9               	movwf	fsr2l,c
 16480   011C66  0EFF               	movlw	255
 16481   011C68  20E2               	addwfc	fsr1h,w,c
 16482   011C6A  6EDA               	movwf	fsr2h,c
 16483   011C6C  6ADF               	clrf	indf2,c
 16484                           
 16485                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16486                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16487   011C6E  0EFE               	movlw	254
 16488   011C70  24E1               	addwf	fsr1l,w,c
 16489   011C72  6ED9               	movwf	fsr2l,c
 16490   011C74  0EFF               	movlw	255
 16491   011C76  20E2               	addwfc	fsr1h,w,c
 16492   011C78  6EDA               	movwf	fsr2h,c
 16493   011C7A  0E3E               	movlw	62
 16494   011C7C  6EDF               	movwf	indf2,c
 16495                           
 16496                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16497                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16498   011C7E  0EFD               	movlw	253
 16499   011C80  24E1               	addwf	fsr1l,w,c
 16500   011C82  6ED9               	movwf	fsr2l,c
 16501   011C84  0EFF               	movlw	255
 16502   011C86  20E2               	addwfc	fsr1h,w,c
 16503   011C88  6EDA               	movwf	fsr2h,c
 16504   011C8A  50DF               	movf	223,w,c
 16505   011C8C  0B80               	andlw	-128
 16506   011C8E  090F               	iorlw	15
 16507   011C90  6EDF               	movwf	223,c
 16508   011C92                     
 16509                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16510                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16511   011C92  50E1               	movf	fsr1l,w,c
 16512   011C94  0FFC               	addlw	-4
 16513   011C96  6ED9               	movwf	fsr2l,c
 16514   011C98  50E2               	movf	fsr1h,w,c
 16515   011C9A  6EDA               	movwf	fsr2h,c
 16516   011C9C  0EFF               	movlw	255
 16517   011C9E  22DA               	addwfc	fsr2h,f,c
 16518   011CA0  50DF               	movf	223,w,c
 16519   011CA2  0B80               	andlw	-128
 16520   011CA4  090F               	iorlw	15
 16521   011CA6  6EDF               	movwf	223,c
 16522                           
 16523                           ;can/can.c: 2848:             break;
 16524   011CA8  EF1E  F08F         	goto	l4730
 16525   011CAC                     l674:
 16526   011CAC                     l4712:
 16527                           
 16528                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16529                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16530   011CAC  0EFF               	movlw	255
 16531   011CAE  24E1               	addwf	fsr1l,w,c
 16532   011CB0  6ED9               	movwf	fsr2l,c
 16533   011CB2  0EFF               	movlw	255
 16534   011CB4  20E2               	addwfc	fsr1h,w,c
 16535   011CB6  6EDA               	movwf	fsr2h,c
 16536   011CB8  6ADF               	clrf	indf2,c
 16537                           
 16538                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 16539                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16540   011CBA  0EFE               	movlw	254
 16541   011CBC  24E1               	addwf	fsr1l,w,c
 16542   011CBE  6ED9               	movwf	fsr2l,c
 16543   011CC0  0EFF               	movlw	255
 16544   011CC2  20E2               	addwfc	fsr1h,w,c
 16545   011CC4  6EDA               	movwf	fsr2h,c
 16546   011CC6  0E7E               	movlw	126
 16547   011CC8  6EDF               	movwf	indf2,c
 16548                           
 16549                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 16550                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16551   011CCA  0EFD               	movlw	253
 16552   011CCC  24E1               	addwf	fsr1l,w,c
 16553   011CCE  6ED9               	movwf	fsr2l,c
 16554   011CD0  0EFF               	movlw	255
 16555   011CD2  20E2               	addwfc	fsr1h,w,c
 16556   011CD4  6EDA               	movwf	fsr2h,c
 16557   011CD6  50DF               	movf	223,w,c
 16558   011CD8  0B80               	andlw	-128
 16559   011CDA  091F               	iorlw	31
 16560   011CDC  6EDF               	movwf	223,c
 16561   011CDE                     
 16562                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 16563                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16564   011CDE  50E1               	movf	fsr1l,w,c
 16565   011CE0  0FFC               	addlw	-4
 16566   011CE2  6ED9               	movwf	fsr2l,c
 16567   011CE4  50E2               	movf	fsr1h,w,c
 16568   011CE6  6EDA               	movwf	fsr2h,c
 16569   011CE8  0EFF               	movlw	255
 16570   011CEA  22DA               	addwfc	fsr2h,f,c
 16571   011CEC  50DF               	movf	223,w,c
 16572   011CEE  0B80               	andlw	-128
 16573   011CF0  091F               	iorlw	31
 16574   011CF2  6EDF               	movwf	223,c
 16575                           
 16576                           ;can/can.c: 2862:             break;
 16577   011CF4  EF1E  F08F         	goto	l4730
 16578   011CF8                     l4716:
 16579                           
 16580                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 16581                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16582   011CF8  0EFF               	movlw	255
 16583   011CFA  24E1               	addwf	fsr1l,w,c
 16584   011CFC  6ED9               	movwf	fsr2l,c
 16585   011CFE  0EFF               	movlw	255
 16586   011D00  20E2               	addwfc	fsr1h,w,c
 16587   011D02  6EDA               	movwf	fsr2h,c
 16588   011D04  6ADF               	clrf	indf2,c
 16589                           
 16590                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 16591                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16592   011D06  0EFE               	movlw	254
 16593   011D08  24E1               	addwf	fsr1l,w,c
 16594   011D0A  6ED9               	movwf	fsr2l,c
 16595   011D0C  0EFF               	movlw	255
 16596   011D0E  20E2               	addwfc	fsr1h,w,c
 16597   011D10  6EDA               	movwf	fsr2h,c
 16598   011D12  0E1E               	movlw	30
 16599   011D14  6EDF               	movwf	indf2,c
 16600                           
 16601                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 16602                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16603   011D16  0EFD               	movlw	253
 16604   011D18  24E1               	addwf	fsr1l,w,c
 16605   011D1A  6ED9               	movwf	fsr2l,c
 16606   011D1C  0EFF               	movlw	255
 16607   011D1E  20E2               	addwfc	fsr1h,w,c
 16608   011D20  6EDA               	movwf	fsr2h,c
 16609   011D22  50DF               	movf	223,w,c
 16610   011D24  0B80               	andlw	-128
 16611   011D26  0907               	iorlw	7
 16612   011D28  6EDF               	movwf	223,c
 16613   011D2A                     
 16614                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 16615                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16616   011D2A  50E1               	movf	fsr1l,w,c
 16617   011D2C  0FFC               	addlw	-4
 16618   011D2E  6ED9               	movwf	fsr2l,c
 16619   011D30  50E2               	movf	fsr1h,w,c
 16620   011D32  6EDA               	movwf	fsr2h,c
 16621   011D34  0EFF               	movlw	255
 16622   011D36  22DA               	addwfc	fsr2h,f,c
 16623   011D38  50DF               	movf	223,w,c
 16624   011D3A  0B80               	andlw	-128
 16625   011D3C  0907               	iorlw	7
 16626   011D3E  6EDF               	movwf	223,c
 16627                           
 16628                           ;can/can.c: 2870:             break;
 16629   011D40  EF1E  F08F         	goto	l4730
 16630   011D44                     l4720:
 16631                           
 16632                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 16633                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16634   011D44  0EFF               	movlw	255
 16635   011D46  24E1               	addwf	fsr1l,w,c
 16636   011D48  6ED9               	movwf	fsr2l,c
 16637   011D4A  0EFF               	movlw	255
 16638   011D4C  20E2               	addwfc	fsr1h,w,c
 16639   011D4E  6EDA               	movwf	fsr2h,c
 16640   011D50  6ADF               	clrf	indf2,c
 16641                           
 16642                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 16643                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16644   011D52  0EFE               	movlw	254
 16645   011D54  24E1               	addwf	fsr1l,w,c
 16646   011D56  6ED9               	movwf	fsr2l,c
 16647   011D58  0EFF               	movlw	255
 16648   011D5A  20E2               	addwfc	fsr1h,w,c
 16649   011D5C  6EDA               	movwf	fsr2h,c
 16650   011D5E  0EFE               	movlw	254
 16651   011D60  6EDF               	movwf	indf2,c
 16652                           
 16653                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 16654                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16655   011D62  0EFD               	movlw	253
 16656   011D64  24E1               	addwf	fsr1l,w,c
 16657   011D66  6ED9               	movwf	fsr2l,c
 16658   011D68  0EFF               	movlw	255
 16659   011D6A  20E2               	addwfc	fsr1h,w,c
 16660   011D6C  6EDA               	movwf	fsr2h,c
 16661   011D6E  50DF               	movf	223,w,c
 16662   011D70  0B80               	andlw	-128
 16663   011D72  093F               	iorlw	63
 16664   011D74  6EDF               	movwf	223,c
 16665   011D76                     
 16666                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 16667                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16668   011D76  50E1               	movf	fsr1l,w,c
 16669   011D78  0FFC               	addlw	-4
 16670   011D7A  6ED9               	movwf	fsr2l,c
 16671   011D7C  50E2               	movf	fsr1h,w,c
 16672   011D7E  6EDA               	movwf	fsr2h,c
 16673   011D80  0EFF               	movlw	255
 16674   011D82  22DA               	addwfc	fsr2h,f,c
 16675   011D84  50DF               	movf	223,w,c
 16676   011D86  0B80               	andlw	-128
 16677   011D88  093F               	iorlw	63
 16678   011D8A  6EDF               	movwf	223,c
 16679                           
 16680                           ;can/can.c: 2877:             break;
 16681   011D8C  EF1E  F08F         	goto	l4730
 16682   011D90                     l4728:
 16683                           
 16684                           ;stkvar	_bitTime @ sp[(-4)+-1]
 16685   011D90  0EFB               	movlw	-5
 16686   011D92  50E3               	movf	plusw1,w,c
 16687   011D94  6E0B               	movwf	(btemp+10)^0,c
 16688   011D96  6A0C               	clrf	(btemp+11)^0,c
 16689                           
 16690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16691                           ; Switch size 1, requested type "simple"
 16692                           ; Number of cases is 1, Range of values is 0 to 0
 16693                           ; switch strategies available:
 16694                           ; Name         Instructions Cycles
 16695                           ; simple_byte            4     3 (average)
 16696                           ;	Chosen strategy is simple_byte
 16697   011D98  500C               	movf	(btemp+11)^0,w,c
 16698   011D9A  0A00               	xorlw	0	; case 0
 16699   011D9C  B4D8               	btfsc	status,2,c
 16700   011D9E  EFD3  F08E         	goto	l5608
 16701   011DA2  EF2D  F08F         	goto	l682
 16702   011DA6                     l5608:
 16703                           
 16704                           ; Switch size 1, requested type "simple"
 16705                           ; Number of cases is 18, Range of values is 0 to 17
 16706                           ; switch strategies available:
 16707                           ; Name         Instructions Cycles
 16708                           ; simple_byte           55    28 (average)
 16709                           ;	Chosen strategy is simple_byte
 16710   011DA6  500B               	movf	(btemp+10)^0,w,c
 16711   011DA8  0A00               	xorlw	0	; case 0
 16712   011DAA  B4D8               	btfsc	status,2,c
 16713   011DAC  EF30  F08E         	goto	l665
 16714   011DB0  0A01               	xorlw	1	; case 1
 16715   011DB2  B4D8               	btfsc	status,2,c
 16716   011DB4  EF30  F08E         	goto	l4708
 16717   011DB8  0A03               	xorlw	3	; case 2
 16718   011DBA  B4D8               	btfsc	status,2,c
 16719   011DBC  EF30  F08E         	goto	l4708
 16720   011DC0  0A01               	xorlw	1	; case 3
 16721   011DC2  B4D8               	btfsc	status,2,c
 16722   011DC4  EF30  F08E         	goto	l4708
 16723   011DC8  0A07               	xorlw	7	; case 4
 16724   011DCA  B4D8               	btfsc	status,2,c
 16725   011DCC  EF30  F08E         	goto	l4708
 16726   011DD0  0A01               	xorlw	1	; case 5
 16727   011DD2  B4D8               	btfsc	status,2,c
 16728   011DD4  EF30  F08E         	goto	l4708
 16729   011DD8  0A03               	xorlw	3	; case 6
 16730   011DDA  B4D8               	btfsc	status,2,c
 16731   011DDC  EF30  F08E         	goto	l4708
 16732   011DE0  0A01               	xorlw	1	; case 7
 16733   011DE2  B4D8               	btfsc	status,2,c
 16734   011DE4  EF30  F08E         	goto	l4708
 16735   011DE8  0A0F               	xorlw	15	; case 8
 16736   011DEA  B4D8               	btfsc	status,2,c
 16737   011DEC  EF56  F08E         	goto	l674
 16738   011DF0  0A01               	xorlw	1	; case 9
 16739   011DF2  B4D8               	btfsc	status,2,c
 16740   011DF4  EF56  F08E         	goto	l4712
 16741   011DF8  0A03               	xorlw	3	; case 10
 16742   011DFA  B4D8               	btfsc	status,2,c
 16743   011DFC  EF56  F08E         	goto	l4712
 16744   011E00  0A01               	xorlw	1	; case 11
 16745   011E02  B4D8               	btfsc	status,2,c
 16746   011E04  EF56  F08E         	goto	l4712
 16747   011E08  0A07               	xorlw	7	; case 12
 16748   011E0A  B4D8               	btfsc	status,2,c
 16749   011E0C  EF56  F08E         	goto	l4712
 16750   011E10  0A01               	xorlw	1	; case 13
 16751   011E12  B4D8               	btfsc	status,2,c
 16752   011E14  EF56  F08E         	goto	l4712
 16753   011E18  0A03               	xorlw	3	; case 14
 16754   011E1A  B4D8               	btfsc	status,2,c
 16755   011E1C  EF56  F08E         	goto	l4712
 16756   011E20  0A01               	xorlw	1	; case 15
 16757   011E22  B4D8               	btfsc	status,2,c
 16758   011E24  EF7C  F08E         	goto	l4716
 16759   011E28  0A1F               	xorlw	31	; case 16
 16760   011E2A  B4D8               	btfsc	status,2,c
 16761   011E2C  EF7C  F08E         	goto	l4716
 16762   011E30  0A01               	xorlw	1	; case 17
 16763   011E32  B4D8               	btfsc	status,2,c
 16764   011E34  EFA2  F08E         	goto	l4720
 16765   011E38  EF2D  F08F         	goto	l682
 16766   011E3C                     l4730:
 16767                           
 16768                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16769   011E3C  0EFC               	movlw	-4
 16770   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16771   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16772   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16773   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16774   011E4E  0E04               	movlw	4
 16775   011E50  6EE6               	movwf	postinc1,c
 16776   011E52  0E00               	movlw	0
 16777   011E54  6EE6               	movwf	postinc1,c
 16778   011E56  ECC6  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16779   011E5A                     l682:
 16780                           
 16781                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16782   011E5A  0EFB               	movlw	251
 16783   011E5C  26E1               	addwf	fsr1l,f,c
 16784   011E5E  0EFF               	movlw	255
 16785   011E60  22E2               	addwfc	fsr1h,f,c
 16786   011E62  0012               	return		;funcret
 16787   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16788                           	callstack 0
 16789                           
 16790 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16791 ;; Defined at:
 16792 ;;		line 310 in file "can/can.c"
 16793 ;; Parameters:    Size  Location     Type
 16794 ;;  address         2  [STACK] unsigned short 
 16795 ;;  txd             4  [STACK] unsigned long 
 16796 ;; Auto vars:     Size  Location     Type
 16797 ;;  spiTransferS    2  [STACK] unsigned short 
 16798 ;;  i               1  [STACK] unsigned char 
 16799 ;;  spiTransferE    1  [STACK] char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;                  1  [STACK] char 
 16802 ;; Registers used:
 16803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;Total ram usage:        0 bytes
 16814 ;; Hardware stack levels used: 1
 16815 ;; Hardware stack levels required when called: 8
 16816 ;; This function calls:
 16817 ;;		_SpiTransfer
 16818 ;; This function is called by:
 16819 ;;		_DRV_CANFDSPI_Configure
 16820 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16821 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16822 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16823 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16824 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16825 ;;		_DRV_CANFDSPI_TefConfigure
 16826 ;;		_DRV_CANFDSPI_TimeStampSet
 16827 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16828 ;; This function uses a reentrant model
 16829 ;;
 16830                           
 16831                           	psect	text67
 16832   01378C                     __ptext67:
 16833                           	callstack 0
 16834   01378C                     _DRV_CANFDSPI_WriteWord:
 16835                           	callstack 0
 16836                           
 16837                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16838   01378C  52E6               	movf	postinc1,f,c
 16839   01378E  52E6               	movf	postinc1,f,c
 16840   013790  52E6               	movf	postinc1,f,c
 16841   013792  52E6               	movf	postinc1,f,c
 16842   013794                     
 16843                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 16844   013794  0E06               	movlw	6
 16845   013796  6E0B               	movwf	(btemp+10)^0,c
 16846   013798  0E00               	movlw	0
 16847   01379A  6E0C               	movwf	(btemp+11)^0,c
 16848                           
 16849                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16850   01379C  0EFC               	movlw	-4
 16851   01379E  C00B  FFE3         	movff	btemp+10,plusw1
 16852   0137A2  0EFD               	movlw	-3
 16853   0137A4  C00C  FFE3         	movff	btemp+11,plusw1
 16854   0137A8                     
 16855                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 16856                           ;stkvar	_address @ sp[(-4)+-2]
 16857   0137A8  0EFB               	movlw	251
 16858   0137AA  24E1               	addwf	fsr1l,w,c
 16859   0137AC  6ED9               	movwf	fsr2l,c
 16860   0137AE  0EFF               	movlw	255
 16861   0137B0  20E2               	addwfc	fsr1h,w,c
 16862   0137B2  6EDA               	movwf	fsr2h,c
 16863   0137B4  50DF               	movf	indf2,w,c
 16864   0137B6  0B0F               	andlw	15
 16865   0137B8  0F20               	addlw	32
 16866   0137BA  0101               	movlb	1	; () banked
 16867   0137BC  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 16868   0137BE                     
 16869                           ; BSR set to: 1
 16870                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 16871                           ;stkvar	_address @ sp[(-4)+-2]
 16872   0137BE  0EFA               	movlw	-6
 16873   0137C0  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 16874   0137C4                     
 16875                           ; BSR set to: 1
 16876                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 16877                           ;stkvar	_i @ sp[(-4)+2]
 16878   0137C4  0EFE               	movlw	-2
 16879   0137C6  6AE3               	clrf	plusw1,c
 16880   0137C8                     l4584:
 16881                           
 16882                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 16883                           ;stkvar	_i @ sp[(-4)+2]
 16884   0137C8  0EFE               	movlw	-2
 16885   0137CA  50E3               	movf	plusw1,w,c
 16886   0137CC  6E0B               	movwf	(btemp+10)^0,c
 16887   0137CE  6A0C               	clrf	(btemp+11)^0,c
 16888   0137D0  0E02               	movlw	low (_spiTransmitBuffer+2)
 16889   0137D2  240B               	addwf	(btemp+10)^0,w,c
 16890   0137D4  6ED9               	movwf	fsr2l,c
 16891   0137D6  0E01               	movlw	high (_spiTransmitBuffer+2)
 16892   0137D8  200C               	addwfc	(btemp+11)^0,w,c
 16893   0137DA  6EDA               	movwf	fsr2h,c
 16894                           
 16895                           ;stkvar	_txd @ sp[(-4)+-6]
 16896   0137DC  0EF6               	movlw	-10
 16897   0137DE  CFE3 F009          	movff	plusw1,btemp+8
 16898   0137E2  0EF7               	movlw	-9
 16899   0137E4  CFE3 F00A          	movff	plusw1,btemp+9
 16900   0137E8  0EF8               	movlw	-8
 16901   0137EA  CFE3 F00B          	movff	plusw1,btemp+10
 16902   0137EE  0EF9               	movlw	-7
 16903   0137F0  CFE3 F00C          	movff	plusw1,btemp+11
 16904                           
 16905                           ;stkvar	_i @ sp[(-4)+2]
 16906   0137F4  0EFE               	movlw	-2
 16907   0137F6  50E3               	movf	plusw1,w,c
 16908   0137F8  0D08               	mullw	8
 16909   0137FA  50F3               	movf	243,w,c
 16910   0137FC  2AE8               	incf	wreg,f,c
 16911   0137FE  EF06  F09C         	goto	u2240
 16912   013802                     u2245:
 16913   013802  90D8               	bcf	status,0,c
 16914   013804  320C               	rrcf	(btemp+11)^0,f,c
 16915   013806  320B               	rrcf	(btemp+10)^0,f,c
 16916   013808  320A               	rrcf	(btemp+9)^0,f,c
 16917   01380A  3209               	rrcf	(btemp+8)^0,f,c
 16918   01380C                     u2240:
 16919   01380C  2EE8               	decfsz	wreg,f,c
 16920   01380E  EF01  F09C         	goto	u2245
 16921   013812  5009               	movf	(btemp+8)^0,w,c
 16922   013814  6EDF               	movwf	indf2,c
 16923   013816                     
 16924                           ;can/can.c: 324:     }
 16925                           ;stkvar	_i @ sp[(-4)+2]
 16926   013816  0EFE               	movlw	-2
 16927   013818  2AE3               	incf	plusw1,f,c
 16928   01381A                     
 16929                           ;stkvar	_i @ sp[(-4)+2]
 16930   01381A  0EFE               	movlw	-2
 16931   01381C  CFE3 F001          	movff	plusw1,btemp
 16932   013820  0E03               	movlw	3
 16933   013822  6401               	cpfsgt	btemp^0,c
 16934   013824  EF16  F09C         	goto	u2251
 16935   013828  EF18  F09C         	goto	u2250
 16936   01382C                     u2251:
 16937   01382C  EFE4  F09B         	goto	l4584
 16938   013830                     u2250:
 16939   013830                     
 16940                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16941                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16942   013830  0EFC               	movlw	-4
 16943   013832  CFE3 FFE6          	movff	plusw1,postinc1
 16944   013836  CFE3 FFE6          	movff	plusw1,postinc1
 16945   01383A  0E00               	movlw	low _spiReceiveBuffer
 16946   01383C  6EE6               	movwf	postinc1,c
 16947   01383E  0E02               	movlw	high _spiReceiveBuffer
 16948   013840  6EE6               	movwf	postinc1,c
 16949   013842  0E00               	movlw	low _spiTransmitBuffer
 16950   013844  6EE6               	movwf	postinc1,c
 16951   013846  0E01               	movlw	high _spiTransmitBuffer
 16952   013848  6EE6               	movwf	postinc1,c
 16953   01384A  EC63  F09D         	call	_SpiTransfer	;wreg free
 16954                           
 16955                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16956   01384E  0EFF               	movlw	-1
 16957   013850  C001  FFE3         	movff	btemp,plusw1
 16958   013854                     
 16959                           ;can/can.c: 328:     return spiTransferError;
 16960                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16961   013854  0EFF               	movlw	-1
 16962   013856  CFE3 F001          	movff	plusw1,btemp
 16963   01385A                     
 16964                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 16965   01385A  0EF6               	movlw	246
 16966   01385C  26E1               	addwf	fsr1l,f,c
 16967   01385E  0EFF               	movlw	255
 16968   013860  22E2               	addwfc	fsr1h,f,c
 16969   013862  0012               	return		;funcret
 16970   013864                     __end_of_DRV_CANFDSPI_WriteWord:
 16971                           	callstack 0
 16972                           
 16973 ;; *************** function _SpiTransfer *****************
 16974 ;; Defined at:
 16975 ;;		line 132 in file "can/can.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  txPtr           2  [STACK] PTR unsigned char 
 16978 ;;		 -> spiTransmitBuffer(200), 
 16979 ;;  rxPtr           2  [STACK] PTR unsigned char 
 16980 ;;		 -> spiReceiveBuffer(200), 
 16981 ;;  size            2  [STACK] unsigned short 
 16982 ;; Auto vars:     Size  Location     Type
 16983 ;;  dummy           1  [STACK] volatile unsigned char 
 16984 ;; Return value:  Size  Location     Type
 16985 ;;                  1  [STACK] char 
 16986 ;; Registers used:
 16987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 16988 ;; Tracked objects:
 16989 ;;		On entry : 0/1
 16990 ;;		On exit  : 0/0
 16991 ;;		Unchanged: 0/0
 16992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;Total ram usage:        0 bytes
 16998 ;; Hardware stack levels used: 1
 16999 ;; Hardware stack levels required when called: 7
 17000 ;; This function calls:
 17001 ;;		Nothing
 17002 ;; This function is called by:
 17003 ;;		_DRV_CANFDSPI_Reset
 17004 ;;		_DRV_CANFDSPI_ReadByte
 17005 ;;		_DRV_CANFDSPI_WriteByte
 17006 ;;		_DRV_CANFDSPI_WriteWord
 17007 ;;		_DRV_CANFDSPI_WriteHalfWord
 17008 ;;		_DRV_CANFDSPI_ReadByteArray
 17009 ;;		_DRV_CANFDSPI_WriteByteArray
 17010 ;;		_DRV_CANFDSPI_ReadWordArray
 17011 ;; This function uses a reentrant model
 17012 ;;
 17013                           
 17014                           	psect	text68
 17015   013AC6                     __ptext68:
 17016                           	callstack 0
 17017   013AC6                     _SpiTransfer:
 17018                           	callstack 0
 17019                           
 17020                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17021   013AC6  52E6               	movf	postinc1,f,c
 17022   013AC8                     
 17023                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 17024   013AC8  988F               	bcf	143,4,c	;volatile
 17025                           
 17026                           ;can/can.c: 136:   while(size > 0)
 17027   013ACA  EFB0  F09D         	goto	l3950
 17028   013ACE                     l145:
 17029                           
 17030                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 17031   013ACE  9064               	bcf	100,0,c	;volatile
 17032   013AD0                     
 17033                           ;can/can.c: 139:     dummy = SSP2BUF;
 17034                           ;stkvar	_dummy @ sp[(-1)+0]
 17035   013AD0  0EFF               	movlw	-1
 17036   013AD2  CF66 FFE3          	movff	3942,plusw1	;volatile
 17037   013AD6                     
 17038                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 17039                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17040   013AD6  0EFD               	movlw	-3
 17041   013AD8  CFE3 FFD9          	movff	plusw1,fsr2l
 17042   013ADC  0EFE               	movlw	-2
 17043   013ADE  CFE3 FFDA          	movff	plusw1,fsr2h
 17044   013AE2  50DF               	movf	indf2,w,c
 17045   013AE4  6E66               	movwf	102,c	;volatile
 17046   013AE6                     l146:
 17047   013AE6  A064               	btfss	100,0,c	;volatile
 17048   013AE8  EF78  F09D         	goto	u1601
 17049   013AEC  EF7A  F09D         	goto	u1600
 17050   013AF0                     u1601:
 17051   013AF0  EF73  F09D         	goto	l146
 17052   013AF4                     u1600:
 17053   013AF4                     
 17054                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 17055                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17056   013AF4  0EFB               	movlw	-5
 17057   013AF6  CFE3 FFD9          	movff	plusw1,fsr2l
 17058   013AFA  0EFC               	movlw	-4
 17059   013AFC  CFE3 FFDA          	movff	plusw1,fsr2h
 17060   013B00  CF66 FFDF          	movff	3942,indf2	;volatile
 17061   013B04                     
 17062                           ;can/can.c: 143:     txPtr++;
 17063                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17064   013B04  0EFD               	movlw	-3
 17065   013B06  50E3               	movf	plusw1,w,c
 17066   013B08  0F01               	addlw	1
 17067   013B0A  6E01               	movwf	btemp^0,c
 17068   013B0C  0EFD               	movlw	-3
 17069   013B0E  C001  FFE3         	movff	btemp,plusw1
 17070   013B12  6A01               	clrf	btemp^0,c
 17071   013B14  0EFE               	movlw	-2
 17072   013B16  50E3               	movf	plusw1,w,c
 17073   013B18  2001               	addwfc	btemp^0,w,c
 17074   013B1A  6E01               	movwf	btemp^0,c
 17075   013B1C  0EFE               	movlw	-2
 17076   013B1E  C001  FFE3         	movff	btemp,plusw1
 17077   013B22                     
 17078                           ;can/can.c: 144:     rxPtr++;
 17079                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17080   013B22  0EFB               	movlw	-5
 17081   013B24  50E3               	movf	plusw1,w,c
 17082   013B26  0F01               	addlw	1
 17083   013B28  6E01               	movwf	btemp^0,c
 17084   013B2A  0EFB               	movlw	-5
 17085   013B2C  C001  FFE3         	movff	btemp,plusw1
 17086   013B30  6A01               	clrf	btemp^0,c
 17087   013B32  0EFC               	movlw	-4
 17088   013B34  50E3               	movf	plusw1,w,c
 17089   013B36  2001               	addwfc	btemp^0,w,c
 17090   013B38  6E01               	movwf	btemp^0,c
 17091   013B3A  0EFC               	movlw	-4
 17092   013B3C  C001  FFE3         	movff	btemp,plusw1
 17093   013B40                     
 17094                           ;can/can.c: 145:     size--;
 17095                           ;stkvar	_size @ sp[(-1)+-6]
 17096   013B40  0EF9               	movlw	-7
 17097   013B42  CFE3 F001          	movff	plusw1,btemp
 17098   013B46  0E01               	movlw	1
 17099   013B48  5E01               	subwf	btemp^0,f,c
 17100   013B4A  0EF9               	movlw	-7
 17101   013B4C  C001  FFE3         	movff	btemp,plusw1
 17102   013B50  0EFA               	movlw	-6
 17103   013B52  CFE3 F001          	movff	plusw1,btemp
 17104   013B56  0E00               	movlw	0
 17105   013B58  5A01               	subwfb	btemp^0,f,c
 17106   013B5A  0EFA               	movlw	-6
 17107   013B5C  C001  FFE3         	movff	btemp,plusw1
 17108   013B60                     l3950:
 17109                           
 17110                           ;can/can.c: 136:   while(size > 0)
 17111                           ;stkvar	_size @ sp[(-1)+-6]
 17112   013B60  0EF9               	movlw	-7
 17113   013B62  CFE3 F001          	movff	plusw1,btemp
 17114   013B66  0EFA               	movlw	-6
 17115   013B68  50E3               	movf	plusw1,w,c
 17116   013B6A  1001               	iorwf	btemp^0,w,c
 17117   013B6C  A4D8               	btfss	status,2,c
 17118   013B6E  EFBB  F09D         	goto	u1611
 17119   013B72  EFBD  F09D         	goto	u1610
 17120   013B76                     u1611:
 17121   013B76  EF67  F09D         	goto	l145
 17122   013B7A                     u1610:
 17123   013B7A                     
 17124                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17125   013B7A  888F               	bsf	143,4,c	;volatile
 17126   013B7C                     
 17127                           ;can/can.c: 148:   return 0;
 17128   013B7C  0E00               	movlw	0
 17129   013B7E  6E01               	movwf	btemp^0,c
 17130   013B80                     
 17131                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17132   013B80  0EF9               	movlw	249
 17133   013B82  26E1               	addwf	fsr1l,f,c
 17134   013B84  0EFF               	movlw	255
 17135   013B86  22E2               	addwfc	fsr1h,f,c
 17136   013B88  0012               	return		;funcret
 17137   013B8A                     __end_of_SpiTransfer:
 17138                           	callstack 0
 17139                           
 17140 ;; *************** function _INTERRUPT_InterruptManager *****************
 17141 ;; Defined at:
 17142 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17143 ;; Parameters:    Size  Location     Type
 17144 ;;		None
 17145 ;; Auto vars:     Size  Location     Type
 17146 ;;		None
 17147 ;; Return value:  Size  Location     Type
 17148 ;;                  1    wreg      void 
 17149 ;; Registers used:
 17150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17151 ;; Tracked objects:
 17152 ;;		On entry : 0/0
 17153 ;;		On exit  : 0/0
 17154 ;;		Unchanged: 0/0
 17155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;Total ram usage:       16 bytes
 17161 ;; Hardware stack levels used: 1
 17162 ;; Hardware stack levels required when called: 6
 17163 ;; This function calls:
 17164 ;;		_TMR0_ISR
 17165 ;; This function is called by:
 17166 ;;		Interrupt level 2
 17167 ;; This function uses a non-reentrant model
 17168 ;;
 17169                           
 17170                           	psect	intcode
 17171   000008                     __pintcode:
 17172                           	callstack 0
 17173   000008                     _INTERRUPT_InterruptManager:
 17174                           	callstack 16
 17175                           
 17176                           ;incstack = 0
 17177   000008  CFFA F040          	movff	pclath,??_INTERRUPT_InterruptManager
 17178   00000C  CFFB F041          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17179   000010  CFE9 F042          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17180   000014  CFEA F043          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17181   000018  CFE1 F044          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17182   00001C  CFE2 F045          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17183   000020  CFD9 F046          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17184   000024  CFDA F047          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17185   000028  CFF3 F048          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17186   00002C  CFF4 F049          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17187   000030  C001  F04A         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17188   000034  C002  F04B         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17189   000038  C009  F04C         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17190   00003C  C00A  F04D         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17191   000040  C00B  F04E         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17192   000044  C00C  F04F         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17193   000048  EE19  F031         	lfsr	1,___inthi_sp
 17194   00004C                     
 17195                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17196   00004C  AAF2               	btfss	242,5,c	;volatile
 17197   00004E  EF2B  F000         	goto	i2u307_41
 17198   000052  EF2D  F000         	goto	i2u307_40
 17199   000056                     i2u307_41:
 17200   000056  EF36  F000         	goto	i2l1039
 17201   00005A                     i2u307_40:
 17202   00005A  A4F2               	btfss	242,2,c	;volatile
 17203   00005C  EF32  F000         	goto	i2u308_41
 17204   000060  EF34  F000         	goto	i2u308_40
 17205   000064                     i2u308_41:
 17206   000064  EF36  F000         	goto	i2l1039
 17207   000068                     i2u308_40:
 17208   000068                     
 17209                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17210   000068  EC39  F0A4         	call	_TMR0_ISR	;wreg free
 17211   00006C                     i2l1039:
 17212   00006C  C04F  F00C         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17213   000070  C04E  F00B         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17214   000074  C04D  F00A         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17215   000078  C04C  F009         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17216   00007C  C04B  F002         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17217   000080  C04A  F001         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17218   000084  C049  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17219   000088  C048  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17220   00008C  C047  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17221   000090  C046  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17222   000094  C045  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17223   000098  C044  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17224   00009C  C043  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17225   0000A0  C042  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17226   0000A4  C041  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17227   0000A8  C040  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17228   0000AC  0011               	retfie		f
 17229   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17230                           	callstack 0
 17231                           
 17232 ;; *************** function _TMR0_ISR *****************
 17233 ;; Defined at:
 17234 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17235 ;; Parameters:    Size  Location     Type
 17236 ;;		None
 17237 ;; Auto vars:     Size  Location     Type
 17238 ;;		None
 17239 ;; Return value:  Size  Location     Type
 17240 ;;                  1  [STACK] void 
 17241 ;; Registers used:
 17242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17243 ;; Tracked objects:
 17244 ;;		On entry : 0/0
 17245 ;;		On exit  : 0/0
 17246 ;;		Unchanged: 0/0
 17247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;Total ram usage:        0 bytes
 17253 ;; Hardware stack levels used: 1
 17254 ;; Hardware stack levels required when called: 5
 17255 ;; This function calls:
 17256 ;;		_TMR0_CallBack
 17257 ;; This function is called by:
 17258 ;;		_INTERRUPT_InterruptManager
 17259 ;; This function uses a reentrant model
 17260 ;;
 17261                           
 17262                           	psect	text70
 17263   014872                     __ptext70:
 17264                           	callstack 0
 17265   014872                     _TMR0_ISR:
 17266                           	callstack 16
 17267   014872                     
 17268                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17269   014872  94F2               	bcf	242,2,c	;volatile
 17270                           
 17271                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17272   014874  C038  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17273                           
 17274                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17275   014878  C037  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17276   01487C                     
 17277                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17278   01487C  0E01               	movlw	1
 17279   01487E  0100               	movlb	0	; () banked
 17280   014880  6F76               	movwf	(_carState+22)& (0+255),b
 17281   014882                     
 17282                           ; BSR set to: 0
 17283                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17284   014882  4A35               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17285   014884  2A36               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17286   014886  5035               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17287   014888  1036               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17288   01488A  B4D8               	btfsc	status,2,c
 17289   01488C  EF4A  F0A4         	goto	u296_41
 17290   014890  EF4C  F0A4         	goto	u296_40
 17291   014894                     u296_41:
 17292   014894  EF50  F0A4         	goto	l1085
 17293   014898                     u296_40:
 17294   014898                     
 17295                           ; BSR set to: 0
 17296                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17297   014898  EC1E  F0A4         	call	_TMR0_CallBack	;wreg free
 17298   01489C                     
 17299                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17300   01489C  6A35               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17301   01489E  6A36               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17302   0148A0                     l1085:
 17303                           
 17304                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17305   0148A0  0012               	return		;funcret
 17306   0148A2                     __end_of_TMR0_ISR:
 17307                           	callstack 0
 17308                           
 17309 ;; *************** function _TMR0_CallBack *****************
 17310 ;; Defined at:
 17311 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;		None
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;		None
 17316 ;; Return value:  Size  Location     Type
 17317 ;;                  1  [STACK] void 
 17318 ;; Registers used:
 17319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17320 ;; Tracked objects:
 17321 ;;		On entry : 3F/0
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;Total ram usage:        0 bytes
 17330 ;; Hardware stack levels used: 1
 17331 ;; Hardware stack levels required when called: 4
 17332 ;; This function calls:
 17333 ;;		NULL
 17334 ;;		_TMR0_DefaultInterruptHandler
 17335 ;;		_XF_decrementAndQueueTimers
 17336 ;; This function is called by:
 17337 ;;		_TMR0_ISR
 17338 ;; This function uses a reentrant model
 17339 ;;
 17340                           
 17341                           	psect	text71
 17342   01483C                     __ptext71:
 17343                           	callstack 0
 17344   01483C                     _TMR0_CallBack:
 17345                           	callstack 16
 17346   01483C                     
 17347                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17348   01483C  0E01               	movlw	1
 17349   01483E  0100               	movlb	0	; () banked
 17350   014840  6F75               	movwf	(_carState+21)& (0+255),b
 17351   014842                     
 17352                           ; BSR set to: 0
 17353                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17354   014842  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17355   014844  1051               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17356   014846  1052               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17357   014848  B4D8               	btfsc	status,2,c
 17358   01484A  EF29  F0A4         	goto	u275_41
 17359   01484E  EF2B  F0A4         	goto	u275_40
 17360   014852                     u275_41:
 17361   014852  EF38  F0A4         	goto	l1089
 17362   014856                     u275_40:
 17363   014856                     
 17364                           ; BSR set to: 0
 17365                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17366   014856  D802               	call	u276_48
 17367   014858  EF38  F0A4         	goto	u276_49
 17368   01485C                     u276_48:
 17369   01485C  0005               	push	
 17370   01485E  6EFA               	movwf	pclath,c
 17371   014860  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17372   014862  6EFD               	movwf	tosl,c
 17373   014864  5051               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17374   014866  6EFE               	movwf	tosh,c
 17375   014868  5052               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17376   01486A  6EFF               	movwf	tosu,c
 17377   01486C  50FA               	movf	pclath,w,c
 17378   01486E  0012               	return		;indir
 17379   014870                     u276_49:
 17380   014870                     l1089:
 17381                           
 17382                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17383   014870  0012               	return		;funcret
 17384   014872                     __end_of_TMR0_CallBack:
 17385                           	callstack 0
 17386                           
 17387 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17388 ;; Defined at:
 17389 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17390 ;; Parameters:    Size  Location     Type
 17391 ;;		None
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;		None
 17394 ;; Return value:  Size  Location     Type
 17395 ;;                  1  [STACK] void 
 17396 ;; Registers used:
 17397 ;;		None
 17398 ;; Tracked objects:
 17399 ;;		On entry : 3F/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17407 ;;Total ram usage:        0 bytes
 17408 ;; Hardware stack levels used: 1
 17409 ;; This function calls:
 17410 ;;		Nothing
 17411 ;; This function is called by:
 17412 ;;		_TMR0_Initialize
 17413 ;;		_TMR0_CallBack
 17414 ;; This function uses a reentrant model
 17415 ;;
 17416                           
 17417                           	psect	text72
 17418   014A10                     __ptext72:
 17419                           	callstack 0
 17420   014A10                     _TMR0_DefaultInterruptHandler:
 17421                           	callstack 19
 17422   014A10                     
 17423                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17424   014A10  0012               	return		;funcret
 17425   014A12                     __end_of_TMR0_DefaultInterruptHandler:
 17426                           	callstack 0
 17427                           
 17428 ;; *************** function _XF_decrementAndQueueTimers *****************
 17429 ;; Defined at:
 17430 ;;		line 217 in file "xf/xf.c"
 17431 ;; Parameters:    Size  Location     Type
 17432 ;;		None
 17433 ;; Auto vars:     Size  Location     Type
 17434 ;;  dummy           1  [STACK] unsigned char 
 17435 ;;  i               1  [STACK] unsigned char 
 17436 ;; Return value:  Size  Location     Type
 17437 ;;                  1  [STACK] void 
 17438 ;; Registers used:
 17439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17440 ;; Tracked objects:
 17441 ;;		On entry : 3F/0
 17442 ;;		On exit  : 0/0
 17443 ;;		Unchanged: 0/0
 17444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;Total ram usage:        0 bytes
 17450 ;; Hardware stack levels used: 1
 17451 ;; Hardware stack levels required when called: 3
 17452 ;; This function calls:
 17453 ;;		_XF_pushEvent
 17454 ;;		_XF_unscheduleTimer
 17455 ;; This function is called by:
 17456 ;;		_main
 17457 ;;		_TMR0_CallBack
 17458 ;; This function uses a reentrant model
 17459 ;;
 17460                           
 17461                           	psect	text73
 17462   0134B6                     __ptext73:
 17463                           	callstack 0
 17464   0134B6                     _XF_decrementAndQueueTimers:
 17465                           	callstack 0
 17466                           
 17467                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17468   0134B6  52E6               	movf	postinc1,f,c
 17469   0134B8  52E6               	movf	postinc1,f,c
 17470   0134BA                     
 17471                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17472                           ;stkvar	_i @ sp[(-2)+1]
 17473   0134BA  0EFF               	movlw	-1
 17474   0134BC  6AE3               	clrf	plusw1,c
 17475   0134BE                     l4632:
 17476                           
 17477                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17478                           ;stkvar	_i @ sp[(-2)+1]
 17479   0134BE  0EFF               	movlw	-1
 17480   0134C0  50E3               	movf	plusw1,w,c
 17481   0134C2  0D08               	mullw	8
 17482   0134C4  0ECA               	movlw	low (_theXF+2)
 17483   0134C6  24F3               	addwf	243,w,c
 17484   0134C8  6ED9               	movwf	fsr2l,c
 17485   0134CA  0E02               	movlw	high (_theXF+2)
 17486   0134CC  20F4               	addwfc	prodh,w,c
 17487   0134CE  6EDA               	movwf	fsr2h,c
 17488   0134D0  50DF               	movf	indf2,w,c
 17489   0134D2  B4D8               	btfsc	status,2,c
 17490   0134D4  EF6E  F09A         	goto	u228_41
 17491   0134D8  EF70  F09A         	goto	u228_40
 17492   0134DC                     u228_41:
 17493   0134DC  EFCA  F09A         	goto	l4644
 17494   0134E0                     u228_40:
 17495   0134E0                     
 17496                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17497                           ;stkvar	_i @ sp[(-2)+1]
 17498   0134E0  0EFF               	movlw	-1
 17499   0134E2  50E3               	movf	plusw1,w,c
 17500   0134E4  0D08               	mullw	8
 17501   0134E6  0EC8               	movlw	low _theXF
 17502   0134E8  24F3               	addwf	243,w,c
 17503   0134EA  6ED9               	movwf	fsr2l,c
 17504   0134EC  0E02               	movlw	high _theXF
 17505   0134EE  20F4               	addwfc	prodh,w,c
 17506   0134F0  6EDA               	movwf	fsr2h,c
 17507   0134F2  0E0A               	movlw	10
 17508   0134F4  5EDE               	subwf	postinc2,f,c
 17509   0134F6  0E00               	movlw	0
 17510   0134F8  5ADD               	subwfb	postdec2,f,c
 17511   0134FA                     
 17512                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17513                           ;stkvar	_i @ sp[(-2)+1]
 17514   0134FA  0EFF               	movlw	-1
 17515   0134FC  50E3               	movf	plusw1,w,c
 17516   0134FE  0D08               	mullw	8
 17517   013500  0EC8               	movlw	low _theXF
 17518   013502  24F3               	addwf	243,w,c
 17519   013504  6ED9               	movwf	fsr2l,c
 17520   013506  0E02               	movlw	high _theXF
 17521   013508  20F4               	addwfc	prodh,w,c
 17522   01350A  6EDA               	movwf	fsr2h,c
 17523   01350C  50DE               	movf	postinc2,w,c
 17524   01350E  10DE               	iorwf	postinc2,w,c
 17525   013510  A4D8               	btfss	status,2,c
 17526   013512  EF8D  F09A         	goto	u229_41
 17527   013516  EF8F  F09A         	goto	u229_40
 17528   01351A                     u229_41:
 17529   01351A  EFCA  F09A         	goto	l4644
 17530   01351E                     u229_40:
 17531   01351E                     
 17532                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17533                           ;stkvar	_dummy @ sp[(-2)+0]
 17534   01351E  0EFE               	movlw	254
 17535   013520  24E1               	addwf	fsr1l,w,c
 17536   013522  6E01               	movwf	btemp^0,c
 17537   013524  0EFF               	movlw	255
 17538   013526  20E2               	addwfc	fsr1h,w,c
 17539   013528  6E02               	movwf	(btemp+1)^0,c
 17540   01352A  C001  FFE6         	movff	btemp,postinc1
 17541   01352E  C002  FFE6         	movff	btemp+1,postinc1
 17542   013532  0E01               	movlw	1
 17543   013534  6EE6               	movwf	postinc1,c
 17544                           
 17545                           ;stkvar	_i @ sp[(-5)+1]
 17546   013536  0EFC               	movlw	-4
 17547   013538  50E3               	movf	plusw1,w,c
 17548   01353A  0D08               	mullw	8
 17549   01353C  0ECA               	movlw	low (_theXF+2)
 17550   01353E  24F3               	addwf	243,w,c
 17551   013540  6ED9               	movwf	fsr2l,c
 17552   013542  0E02               	movlw	high (_theXF+2)
 17553   013544  20F4               	addwfc	prodh,w,c
 17554   013546  6EDA               	movwf	fsr2h,c
 17555   013548  0E06               	movlw	6
 17556   01354A                     u230_41:
 17557   01354A  CFDE FFE6          	movff	postinc2,postinc1
 17558   01354E  2CE8               	decfsz	wreg,w,c
 17559   013550  EFA5  F09A         	goto	u230_41
 17560   013554  EC5C  F095         	call	_XF_pushEvent	;wreg free
 17561   013558  0401               	decf	btemp^0,w,c
 17562   01355A  A4D8               	btfss	status,2,c
 17563   01355C  EFB2  F09A         	goto	u231_41
 17564   013560  EFB4  F09A         	goto	u231_40
 17565   013564                     u231_41:
 17566   013564  EFBD  F09A         	goto	l4642
 17567   013568                     u231_40:
 17568   013568                     
 17569                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 17570   013568  0E01               	movlw	1
 17571   01356A  6EE6               	movwf	postinc1,c
 17572                           
 17573                           ;stkvar	_i @ sp[(-3)+1]
 17574   01356C  0EFE               	movlw	-2
 17575   01356E  50E3               	movf	plusw1,w,c
 17576   013570  6EE6               	movwf	postinc1,c
 17577   013572  EC24  F0A3         	call	_XF_unscheduleTimer	;wreg free
 17578                           
 17579                           ;xf/xf.c: 231:                 }
 17580   013576  EFCA  F09A         	goto	l4644
 17581   01357A                     l4642:
 17582                           
 17583                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 17584                           ;stkvar	_i @ sp[(-2)+1]
 17585   01357A  0EFF               	movlw	-1
 17586   01357C  50E3               	movf	plusw1,w,c
 17587   01357E  0D08               	mullw	8
 17588   013580  0EC8               	movlw	low _theXF
 17589   013582  24F3               	addwf	243,w,c
 17590   013584  6ED9               	movwf	fsr2l,c
 17591   013586  0E02               	movlw	high _theXF
 17592   013588  20F4               	addwfc	prodh,w,c
 17593   01358A  6EDA               	movwf	fsr2h,c
 17594   01358C  0E01               	movlw	1
 17595   01358E  6EDE               	movwf	postinc2,c
 17596   013590  0E00               	movlw	0
 17597   013592  6EDD               	movwf	postdec2,c
 17598   013594                     l4644:
 17599                           
 17600                           ;xf/xf.c: 238:     }
 17601                           ;stkvar	_i @ sp[(-2)+1]
 17602   013594  0EFF               	movlw	-1
 17603   013596  2AE3               	incf	plusw1,f,c
 17604   013598                     
 17605                           ;stkvar	_i @ sp[(-2)+1]
 17606   013598  0EFF               	movlw	-1
 17607   01359A  CFE3 F001          	movff	plusw1,btemp
 17608   01359E  0E0B               	movlw	11
 17609   0135A0  6401               	cpfsgt	btemp^0,c
 17610   0135A2  EFD5  F09A         	goto	u232_41
 17611   0135A6  EFD7  F09A         	goto	u232_40
 17612   0135AA                     u232_41:
 17613   0135AA  EF5F  F09A         	goto	l4632
 17614   0135AE                     u232_40:
 17615   0135AE                     
 17616                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 17617   0135AE  52E5               	movf	postdec1,f,c
 17618   0135B0  52E5               	movf	postdec1,f,c
 17619   0135B2  0012               	return		;funcret
 17620   0135B4                     __end_of_XF_decrementAndQueueTimers:
 17621                           	callstack 0
 17622                           
 17623 ;; *************** function _XF_unscheduleTimer *****************
 17624 ;; Defined at:
 17625 ;;		line 202 in file "xf/xf.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;  id              1  [STACK] unsigned char 
 17628 ;;  inISR           1  [STACK] _Bool 
 17629 ;; Auto vars:     Size  Location     Type
 17630 ;;		None
 17631 ;; Return value:  Size  Location     Type
 17632 ;;                  1  [STACK] void 
 17633 ;; Registers used:
 17634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 17635 ;; Tracked objects:
 17636 ;;		On entry : 0/0
 17637 ;;		On exit  : 0/0
 17638 ;;		Unchanged: 0/0
 17639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;Total ram usage:        0 bytes
 17645 ;; Hardware stack levels used: 1
 17646 ;; Hardware stack levels required when called: 1
 17647 ;; This function calls:
 17648 ;;		_ENTERCRITICAL
 17649 ;;		_Event_init
 17650 ;;		_LEAVECRITICAL
 17651 ;; This function is called by:
 17652 ;;		_XF_decrementAndQueueTimers
 17653 ;; This function uses a reentrant model
 17654 ;;
 17655                           
 17656                           	psect	text74
 17657   014648                     __ptext74:
 17658                           	callstack 0
 17659   014648                     _XF_unscheduleTimer:
 17660                           	callstack 17
 17661   014648                     
 17662                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 17663                           ;stkvar	_inISR @ sp[(0)+-2]
 17664   014648  0EFE               	movlw	-2
 17665   01464A  50E3               	movf	plusw1,w,c
 17666   01464C  6EE6               	movwf	postinc1,c
 17667   01464E  ECDD  F0A4         	call	_ENTERCRITICAL	;wreg free
 17668   014652                     
 17669                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 17670                           ;stkvar	_id @ sp[(0)+-1]
 17671   014652  0EFF               	movlw	-1
 17672   014654  50E3               	movf	plusw1,w,c
 17673   014656  0D08               	mullw	8
 17674   014658  0EC8               	movlw	low _theXF
 17675   01465A  24F3               	addwf	243,w,c
 17676   01465C  6ED9               	movwf	fsr2l,c
 17677   01465E  0E02               	movlw	high _theXF
 17678   014660  20F4               	addwfc	prodh,w,c
 17679   014662  6EDA               	movwf	fsr2h,c
 17680   014664  6ADE               	clrf	postinc2,c
 17681   014666  6ADD               	clrf	postdec2,c
 17682   014668                     
 17683                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 17684                           ;stkvar	_id @ sp[(0)+-1]
 17685   014668  0EFF               	movlw	-1
 17686   01466A  50E3               	movf	plusw1,w,c
 17687   01466C  0D08               	mullw	8
 17688   01466E  0ECA               	movlw	low (_theXF+2)
 17689   014670  24F3               	addwf	243,w,c
 17690   014672  6E0B               	movwf	(btemp+10)^0,c
 17691   014674  0E02               	movlw	high (_theXF+2)
 17692   014676  20F4               	addwfc	prodh,w,c
 17693   014678  6E0C               	movwf	(btemp+11)^0,c
 17694   01467A  C00B  FFE6         	movff	btemp+10,postinc1
 17695   01467E  C00C  FFE6         	movff	btemp+11,postinc1
 17696   014682  EC7B  F0A3         	call	_Event_init	;wreg free
 17697   014686                     
 17698                           ;xf/xf.c: 207:     theXF.countTmr--;
 17699   014686  C3E1  FFE8         	movff	_theXF+281,wreg
 17700   01468A  0FFF               	addlw	-1
 17701   01468C  CFE8 F3E1          	movff	wreg,_theXF+281
 17702   014690                     
 17703                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 17704                           ;stkvar	_inISR @ sp[(0)+-2]
 17705   014690  0EFE               	movlw	-2
 17706   014692  50E3               	movf	plusw1,w,c
 17707   014694  6EE6               	movwf	postinc1,c
 17708   014696  ECD1  F0A4         	call	_LEAVECRITICAL	;wreg free
 17709   01469A                     
 17710                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17711   01469A  52E5               	movf	postdec1,f,c
 17712   01469C  52E5               	movf	postdec1,f,c
 17713   01469E  0012               	return		;funcret
 17714   0146A0                     __end_of_XF_unscheduleTimer:
 17715                           	callstack 0
 17716                           
 17717                           	psect	rparam
 17718   000001                     ___rparam_used  equ	1
 17719   000000                     ___param_bank   equ	0
 17720   000000                     __Lparam        equ	__Lrparam
 17721   000000                     __Hparam        equ	__Hrparam
 17722                           
 17723                           	psect	temp
 17724   000001                     btemp:
 17725                           	callstack 0
 17726   000001                     	ds	32
 17727   000001                     wtemp0          set	btemp
 17728   000003                     wtemp1          set	btemp+2
 17729   000005                     wtemp2          set	btemp+4
 17730   000007                     wtemp3          set	btemp+6
 17731   000009                     wtemp4          set	btemp+8
 17732   00000B                     wtemp5          set	btemp+10
 17733   000002                     wtemp8          set	btemp+1
 17734   000001                     ttemp0          set	btemp
 17735   000004                     ttemp1          set	btemp+3
 17736   000007                     ttemp2          set	btemp+6
 17737   00000A                     ttemp3          set	btemp+9
 17738   000002                     ttemp5          set	btemp+1
 17739   000005                     ttemp6          set	btemp+4
 17740   000009                     ttemp7          set	btemp+8
 17741   000001                     ltemp0          set	btemp
 17742   000005                     ltemp1          set	btemp+4
 17743   000009                     ltemp2          set	btemp+8
 17744   000001                     lltemp0         set	btemp
 17745   000009                     lltemp1         set	btemp+8
 17746   000011                     lltemp2         set	btemp+16
 17747   000019                     lltemp3         set	btemp+24
 17748                           
 17749                           	psect	config
 17750                           
 17751                           ;Config register CONFIG1L @ 0x1FFF8
 17752                           ;	Watchdog Timer Enable bit
 17753                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 17754                           ;	Stack Overflow/Underflow Reset Enable bit
 17755                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17756                           ;	Extended Instruction Set Enable bit
 17757                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17758                           ;	Background Debugger Enable bit
 17759                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17760   01FFF8                     	org	131064
 17761   01FFF8  A0                 	db	160
 17762                           
 17763                           ;Config register CONFIG1H @ 0x1FFF9
 17764                           ;	Code Protection bit
 17765                           ;	CP0 = OFF, Program memory is not code-protected
 17766   01FFF9                     	org	131065
 17767   01FFF9  F4                 	db	244
 17768                           
 17769                           ;Config register CONFIG2L @ 0x1FFFA
 17770                           ;	Oscillator Selection bits
 17771                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17772                           ;	Default/Reset System Clock Select bit
 17773                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17774                           ;	Fail-Safe Clock Monitor Enable
 17775                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17776                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17777                           ;	IESO = ON, Two-Speed Start-up enabled
 17778   01FFFA                     	org	131066
 17779   01FFFA  C5                 	db	197
 17780                           
 17781                           ;Config register CONFIG2H @ 0x1FFFB
 17782                           ;	Watchdog Timer Postscaler Select bits
 17783                           ;	WDTPS = 32768, 1:32768
 17784   01FFFB                     	org	131067
 17785   01FFFB  FF                 	db	255
 17786                           
 17787                           ;Config register CONFIG3L @ 0x1FFFC
 17788                           ;	External Address Bus Shift Enable bit
 17789                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17790                           ;	External Memory Bus
 17791                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17792                           ;	Data Bus Width Select bit
 17793                           ;	BW = 16, 16-Bit Data Width mode
 17794                           ;	External Bus Wait Enable bit
 17795                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17796   01FFFC                     	org	131068
 17797   01FFFC  F8                 	db	248
 17798                           
 17799                           ;Config register CONFIG3H @ 0x1FFFD
 17800                           ;	ECCP2 MUX bit
 17801                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17802                           ;	ECCP MUX bit
 17803                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17804                           ;	Ethernet LED Enable bit
 17805                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17806   01FFFD                     	org	131069
 17807   01FFFD  F7                 	db	247
 17808                           tosu	equ	0xFFF
 17809                           tosh	equ	0xFFE
 17810                           tosl	equ	0xFFD
 17811                           stkptr	equ	0xFFC
 17812                           pclatu	equ	0xFFB
 17813                           pclath	equ	0xFFA
 17814                           pcl	equ	0xFF9
 17815                           tblptru	equ	0xFF8
 17816                           tblptrh	equ	0xFF7
 17817                           tblptrl	equ	0xFF6
 17818                           tablat	equ	0xFF5
 17819                           prodh	equ	0xFF4
 17820                           prodl	equ	0xFF3
 17821                           indf0	equ	0xFEF
 17822                           postinc0	equ	0xFEE
 17823                           postdec0	equ	0xFED
 17824                           preinc0	equ	0xFEC
 17825                           plusw0	equ	0xFEB
 17826                           fsr0h	equ	0xFEA
 17827                           fsr0l	equ	0xFE9
 17828                           wreg	equ	0xFE8
 17829                           indf1	equ	0xFE7
 17830                           postinc1	equ	0xFE6
 17831                           postdec1	equ	0xFE5
 17832                           preinc1	equ	0xFE4
 17833                           plusw1	equ	0xFE3
 17834                           fsr1h	equ	0xFE2
 17835                           fsr1l	equ	0xFE1
 17836                           bsr	equ	0xFE0
 17837                           indf2	equ	0xFDF
 17838                           postinc2	equ	0xFDE
 17839                           postdec2	equ	0xFDD
 17840                           preinc2	equ	0xFDC
 17841                           plusw2	equ	0xFDB
 17842                           fsr2h	equ	0xFDA
 17843                           fsr2l	equ	0xFD9
 17844                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        0
    BSS         772
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      50
    BANK0           160      0      59
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5588 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5580 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   33241
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4667
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1395
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     990
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   17531
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 2     0      2   10182
              _lightContol_BackLight
             _lightContol_FrontLight
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        25    24      1    3374
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6808
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1390
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1390
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1390
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1390
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     990
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _lightContol_BackLight
       _lightContol_FrontLight
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      59     36.9%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      50     79.4%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     250      0.0%
DATA                 0      0    1041      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Mar 03 14:29:22 2025

                                  __end_of_updateCarState 2278  
                                              _CanReceive 44BE  
                                         _timer0ReloadVal 0037  
                                                     l150 3B80  
                                                     l222 43D8  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3ACE  
                                                     l401 3C38  
                                                     l161 44B4  
                                                     l146 3AE6  
                                                     l218 1C0E  
                                                     l154 2068  
                                                     l322 14A8  
                                                     l171 45DE  
                                                     l251 2AAE  
                                                     l412 457C  
                                                     l260 3698  
                                                     l149 3B7A  
                                                     l317 1174  
                                                     l165 4518  
                                                     l174 46EC  
                                                     l254 3288  
                                                     l158 405C  
                                                     l327 422E  
                                                     l184 3ABC  
                                                     l168 48FA  
                                                     l336 42C0  
                                                     l264 0742  
                                                     l257 314E  
                                                     l193 292C  
                                                     l346 300E  
                                                     l179 385A  
                                                     l453 4198  
                                                     l293 3FB2  
                                                     l357 0E2A  
                                                     l623 4642  
                                                     l199 33A2  
                                                     l482 4100  
                                                     l643 4982  
                                                     l635 491A  
                                                     l379 444A  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 244C  
                                                     l976 49E6  
                                                     l979 49FE  
                                                     u805 1A4C  
                                                     u815 1A70  
                                                     u825 1A92  
                                                     u835 1AF4  
                                                     u845 1B22  
                                                     u855 1B50  
                                                     u865 1B7E  
                                                     u875 1BAC  
                                                     u885 1BDA  
                                                     u995 31C0  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4586  
                          _DRV_CANFDSPI_ModuleEventEnable 4522  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 41A2  
                    _DRV_CANFDSPI_TransmitChannelEventGet 410A  
                                                    l1020 48CE  
                                                    l1120 3CF4  
                                                    l1032 4A0E  
                                                    l1200 4A06  
                                                    l1201 4A06  
                                                    l1116 49F6  
                                                    l1206 4A00  
                                                    l1215 2D6E  
                                                    l1207 4A00  
                                                    l1231 377A  
                                                    l1223 2C2E  
                                                    l1064 4802  
                                                    l1216 2D86  
                                                    l3010 1A4C  
                                                    l1250 49CE  
                                                    l1162 47C0  
                                                    l1234 3782  
                                                    l1227 39F2  
                                                    l3020 1B22  
                                                    l3012 1A70  
                                                    l3004 19C2  
                                                    l1092 4964  
                                                    l1237 469A  
                                                    l1085 48A0  
                                                    l1261 4350  
                                                    l1246 35AE  
                                                    l3022 1B50  
                                                    l3014 1A92  
                                                    l3006 19FE  
                                                    l1254 49B6  
                                                    l1174 4832  
                                                    l1095 4A10  
                                                    l1159 473E  
                                                    l3024 1B7E  
                                                    l3016 1AC6  
                                                    l3008 1A28  
                                                    l4000 4588  
                                                    l3120 321A  
                                                    l3112 3160  
                                                    l1168 499A  
                                                    l1089 4870  
                                                    l1425 3DA2  
                                                    l1177 4944  
                                                    l1257 3926  
                                                    l3026 1BAC  
                                                    l3018 1AF4  
                                                    l4010 45D8  
                                                    l4002 459E  
                                                    l3122 324E  
                                                    l3114 319C  
                                                    l3028 1BDA  
                                                    l4004 45A4  
                                                    l3116 31C0  
                                                    l4100 22FC  
                                                    l4020 32CE  
                                                    l1509 226E  
                                                    l1517 226E  
                                                    l4006 45A6  
                                                    l3118 31EA  
                                                    l4110 23BA  
                                                    l4102 2322  
                                                    l4030 3378  
                                                    l4022 32D4  
                                                    l4014 329A  
                                                    l1447 2586  
                                                    l4008 45C8  
                                                    l3080 35F8  
                                                    l5000 41BA  
                                                    l4104 2348  
                                                    l4040 14E6  
                                                    l4032 339C  
                                                    l4024 32EC  
                                                    l4016 32B8  
                                                    l4200 05AA  
                                                    l1472 3E56  
                                                    l1464 3F04  
                                                    l1448 25FC  
                                                    l3082 3616  
                                                    l5002 41CE  
                                                    l4130 49B4  
                                                    l4106 236E  
                                                    l4114 23E0  
                                                    l4050 1552  
                                                    l4042 14FC  
                                                    l4026 332C  
                                                    l4018 32B8  
                                                    l4210 0604  
                                                    l4202 05AE  
                                                    l3084 3642  
                                                    l5004 41DE  
                                                    l4124 49BA  
                                                    l4108 2394  
                                                    l4116 2434  
                                                    l4060 15C0  
                                                    l4052 1580  
                                                    l4044 1502  
                                                    l4036 14BA  
                                                    l4028 334A  
                                                    l4220 0680  
                                                    l4212 0634  
                                                    l4204 05E4  
                                                    l4140 006C  
                                                    l4132 0008  
                                                    l5100 24CC  
                                                    l5012 44C0  
                                                    l4300 3760  
                                                    l1493 272E  
                                                    l3086 366C  
                                                    l3078 35BC  
                                                    l5006 41FC  
                                                    l3350 49F0  
                                                    l5030 47D4  
                                                    l4126 49CC  
                                                    l4310 2D90  
                                                    l4070 15F8  
                                                    l4062 15D4  
                                                    l4054 15A4  
                                                    l4046 151A  
                                                    l4038 14E6  
                                                    l4230 070C  
                                                    l4214 0646  
                                                    l4222 06A2  
                                                    l4206 05EC  
                                                    l4134 0008  
                                                    l5110 252E  
                                                    l5102 24EA  
                                                    l1494 27A4  
                                                    l5022 4514  
                                                    l5014 44DC  
                                                    l4302 3764  
                                                    l5040 483C  
                                                    l5200 1EA6  
                                                    l5008 421A  
                                                    l3360 48BC  
                                                    l3352 49F2  
                                                    l5032 47EA  
                                                    l4128 49A2  
                                                    l4320 2DC6  
                                                    l4312 2D94  
                                                    l4080 16E0  
                                                    l4072 1638  
                                                    l4064 15E0  
                                                    l4056 15B6  
                                                    l4048 1534  
                                                    l4232 0722  
                                                    l4224 06F2  
                                                    l4216 064E  
                                                    l4208 05EC  
                                                    l4160 013E  
                                                    l4152 00C8  
                                                    l4144 0074  
                                                    l4136 002A  
                                                    l5120 258E  
                                                    l5104 24EE  
                                                    l4400 4444  
                                                    l5016 44EC  
                                                    l5042 4842  
                                                    l5210 1F00  
                                                    l5202 1EB4  
                                                    l3346 4A0C  
                                                    l3370 49F8  
                                                    l3362 48BE  
                                                    l3354 49F4  
                                                    l5034 47EC  
                                                    l5026 47CA  
                                                    l4330 2E18  
                                                    l4322 2DD2  
                                                    l4314 2DA4  
                                                    l5050 394E  
                                                    l4250 413C  
                                                    l4242 4112  
                                                    l4090 2290  
                                                    l4074 1656  
                                                    l4082 16FE  
                                                    l4234 0734  
                                                    l4226 0704  
                                                    l4218 067C  
                                                    l4170 01FC  
                                                    l4162 0172  
                                                    l4154 0102  
                                                    l4146 00A4  
                                                    l4138 005A  
                                                    l5122 259A  
                                                    l5114 2536  
                                                    l5018 450C  
                                                    l4410 2B1C  
                                                    l5044 4856  
                                                    l5220 1F56  
                                                    l5212 1F18  
                                                    l5204 1EC2  
                                                    l3372 49FA  
                                                    l3364 48C0  
                                                    l3356 48A2  
                                                    l3348 49E8  
                                                    l5036 47EE  
                                                    l5028 47CC  
                                                    l1764 2ECC  
                                                    l4332 2E28  
                                                    l4324 2DEC  
                                                    l4340 2EA2  
                                                    l4316 2DB0  
                                                    l5060 3996  
                                                    l5052 3958  
                                                    l4260 4192  
                                                    l4252 4164  
                                                    l4244 4112  
                                                    l4092 2292  
                                                    l4076 1674  
                                                    l4180 03B8  
                                                    l4172 0236  
                                                    l4164 01A2  
                                                    l4156 0136  
                                                    l4148 00C0  
                                                    l5124 25AE  
                                                    l5108 2510  
                                                    l5116 2570  
                                                    l5140 2606  
                                                    l5300 2D48  
                                                    l4500 08E4  
                                                    l4420 2BA2  
                                                    l4412 2B5C  
                                                    l4404 2ABE  
                                                    l5230 1FBC  
                                                    l5222 1F6E  
                                                    l5214 1F30  
                                                    l5206 1EDA  
                                                    l3366 48C2  
                                                    l3358 48B8  
                                                    l5038 47FE  
                                                    l4342 2EB4  
                                                    l4334 2E56  
                                                    l4326 2DF6  
                                                    l4318 2DB6  
                                                    l5062 39BA  
                                                    l5054 396C  
                                                    l5046 3938  
                                                    l4254 4176  
                                                    l4246 4112  
                                                    l4094 2294  
                                                    l4078 1692  
                                                    l4238 073C  
                                                    l4190 0470  
                                                    l4182 03C4  
                                                    l4174 0278  
                                                    l4166 01C0  
                                                    l4350 3FE6  
                                                    l5142 2624  
                                                    l5302 42D2  
                                                    l4510 094C  
                                                    l4502 08FA  
                                                    l4270 4804  
                                                    l4430 2C20  
                                                    l4422 2BBC  
                                                    l4414 2B66  
                                                    l4406 2AE2  
                                                    l4440 4668  
                                                    l4600 3A18  
                                                    l5240 201A  
                                                    l5232 1FD8  
                                                    l5224 1F86  
                                                    l5216 1F36  
                                                    l5208 1EF0  
                                                    l3368 48C8  
                                                    l4344 2EC0  
                                                    l4336 2E7A  
                                                    l4328 2E14  
                                                    l5064 39E4  
                                                    l5056 3976  
                                                    l5048 393C  
                                                    l4248 4122  
                                                    l4096 22AA  
                                                    l4088 2280  
                                                    l4192 04BC  
                                                    l4184 03E0  
                                                    l4168 01E6  
                                                    l4176 02EA  
                                                    l4352 4002  
                                                    l5128 25BA  
                                                    l5160 26BC  
                                                    l5152 2674  
                                                    l5144 262C  
                                                    l5304 42F6  
                                                    l4264 46F6  
                                                    l4360 27D0  
                                                    l4520 0C1A  
                                                    l4512 0974  
                                                    l4504 0904  
                                                    l4272 4924  
                                                    l4424 2BC0  
                                                    l4416 2B94  
                                                    l4432 2C2A  
                                                    l4408 2AFC  
                                                    l5080 38D0  
                                                    l5072 386C  
                                                    l5320 214A  
                                                    l5312 20BA  
                                                    l4442 4686  
                                                    l4610 3A38  
                                                    l4602 3A2E  
                                                    l5250 2060  
                                                    l5242 2026  
                                                    l5234 1FE8  
                                                    l5226 1F9A  
                                                    l5218 1F46  
                                                    l4338 2E84  
                                                    l4258 417E  
                                                    l4098 22D6  
                                                    l4194 050A  
                                                    l4186 03FC  
                                                    l4178 039A  
                                                    l4354 4012  
                                                    l5090 2478  
                                                    l5154 2692  
                                                    l5146 264A  
                                                    l5138 2602  
                                                    l5306 4316  
                                                    l4266 4704  
                                                    l4450 406E  
                                                    l4370 281E  
                                                    l4362 27D0  
                                                    l4530 0CBA  
                                                    l4522 0C50  
                                                    l4514 099A  
                                                    l4506 0936  
                                                    l4290 3748  
                                                    l4282 36B2  
                                                    l4426 2BEC  
                                                    l4418 2B98  
                                                    l5082 38F2  
                                                    l5074 3874  
                                                    l5330 21BC  
                                                    l5322 2150  
                                                    l5314 20C0  
                                                    l4444 4690  
                                                    l4436 4648  
                                                    l4612 3A78  
                                                    l4604 3A34  
                                                    l4700 48DE  
                                                    l5244 203A  
                                                    l5236 1FF8  
                                                    l5228 1FAA  
                                                    l5252 4454  
                                                    l5260 49D2  
                                                    l4196 0558  
                                                    l4188 0448  
                                                    l4348 3FBE  
                                                    l5092 2480  
                                                    l5172 2736  
                                                    l5180 276A  
                                                    l5156 269A  
                                                    l5148 2652  
                                                    l4268 4720  
                                                    l4460 40D6  
                                                    l4380 28DA  
                                                    l4372 283C  
                                                    l4364 27E6  
                                                    l4540 0D62  
                                                    l4532 0CD6  
                                                    l4524 0C6C  
                                                    l4516 0A70  
                                                    l4292 374C  
                                                    l4284 36D4  
                                                    l4276 36A4  
                                                    l4428 2C16  
                                                    l5076 388C  
                                                    l5332 21D2  
                                                    l5324 2166  
                                                    l5316 20D2  
                                                    l5308 207A  
                                                    l4438 4652  
                                                    l5270 4882  
                                                    l4710 1C92  
                                                    l4614 3A7C  
                                                    l5246 203E  
                                                    l5238 1FFE  
                                                    l5190 1E6C  
                                                    l5254 445E  
                                                    l5262 49D6  
                                                    l4198 0560  
                                                    l5094 249E  
                                                    l5086 2456  
                                                    l5174 274A  
                                                    l5158 26B8  
                                                    l5166 26DE  
                                                    l4454 4084  
                                                    l4446 406E  
                                                    l4382 28F8  
                                                    l4374 286A  
                                                    l4366 27EC  
                                                    l4358 27B2  
                                                    l4390 43E8  
                                                    l4550 0DFE  
                                                    l4534 0D0C  
                                                    l4526 0C82  
                                                    l4542 0D88  
                                                    l4518 0BF0  
                                                    l4470 075C  
                                                    l4622 478E  
                                                    l4294 3756  
                                                    l4286 3724  
                                                    l5078 38B2  
                                                    l5326 2186  
                                                    l5318 210E  
                                                    l4640 3568  
                                                    l4632 34BE  
                                                    l5272 4898  
                                                    l4720 1D44  
                                                    l4712 1CAC  
                                                    l4704 1C20  
                                                    l4616 3A92  
                                                    l4560 3C50  
                                                    l4800 3130  
                                                    l5248 2050  
                                                    l5192 1E70  
                                                    l5256 4472  
                                                    l5264 49E2  
                                                    l5096 24A6  
                                                    l5088 245A  
                                                    l5600 277E  
                                                    l5176 275E  
                                                    l5168 2718  
                                                    l4464 40EC  
                                                    l4456 4094  
                                                    l4448 406E  
                                                    l4384 2926  
                                                    l4376 288E  
                                                    l4368 2804  
                                                    l4392 43E8  
                                                    l4544 0DA8  
                                                    l4552 0E20  
                                                    l4536 0D14  
                                                    l4528 0C9E  
                                                    l4480 07EC  
                                                    l4472 0776  
                                                    l4624 4988  
                                                    l4288 372E  
                                                    l5328 219C  
                                                    l5336 21F2  
                                                    l5360 33B4  
                                                    l4642 357A  
                                                    l4634 34E0  
                                                    l4626 34BA  
                                                    l5274 489C  
                                                    l5266 4872  
                                                    l4570 3794  
                                                    l4722 1D76  
                                                    l4714 1CDE  
                                                    l4730 1E3C  
                                                    l4706 1C20  
                                                    l4618 3AB6  
                                                    l4562 3C94  
                                                    l4810 293E  
                                                    l4802 3130  
                                                    l5194 1E74  
                                                    l5258 44A2  
                                                    l4650 3D14  
                                                    l5602 254A  
                                                    l5098 24C4  
                                                    l5282 2C44  
                                                    l4458 40AE  
                                                    l4378 289A  
                                                    l4394 43F8  
                                                    l4546 0DB0  
                                                    l4538 0D5E  
                                                    l4490 086E  
                                                    l4474 07A6  
                                                    l5370 3432  
                                                    l5362 33D6  
                                                    l4636 34FA  
                                                    l4644 3594  
                                                    l5268 487C  
                                                    l3940 3AD6  
                                                    l4572 37A8  
                                                    l4716 1CF8  
                                                    l4708 1C60  
                                                    l4740 1742  
                                                    l4900 4362  
                                                    l4564 3CBC  
                                                    l4820 2A28  
                                                    l4812 297A  
                                                    l5196 1E7E  
                                                    l4660 3D76  
                                                    l4652 3D28  
                                                    l5604 25CE  
                                                    l5284 2C7A  
                                                    l5276 2C3C  
                                                    l4396 4412  
                                                    l4388 43E8  
                                                    l4548 0DFA  
                                                    l4492 0880  
                                                    l4484 080C  
                                                    l4468 0754  
                                                    l5380 3486  
                                                    l5372 3436  
                                                    l5364 33E4  
                                                    l4646 3598  
                                                    l4638 351E  
                                                    l3942 3AF4  
                                                    l3950 3B60  
                                                    l4590 3830  
                                                    l4574 37A8  
                                                    l4718 1D2A  
                                                    l4750 1812  
                                                    l4742 177E  
                                                    l4910 43C6  
                                                    l4902 4388  
                                                    l4830 2EDE  
                                                    l4566 3CF2  
                                                    l4558 3C42  
                                                    l4822 2A50  
                                                    l4814 298A  
                                                    l4806 293E  
                                                    l5198 1E96  
                                                    l2886 494A  
                                                    l5606 23F6  
                                                    l4670 3EB8  
                                                    l4662 3E68  
                                                    l4654 3D2E  
                                                    l5294 2CC6  
                                                    l5286 2C98  
                                                    l4398 4420  
                                                    l4494 089C  
                                                    l4486 0840  
                                                    l4478 07BC  
                                                    l5382 3488  
                                                    l5374 3442  
                                                    l5366 3414  
                                                    l3952 3B7C  
                                                    l3944 3B04  
                                                    l3936 3AC8  
                                                    l4592 3854  
                                                    l4584 37C8  
                                                    l4576 37BE  
                                                    l5608 1DA6  
                                                    l4728 1D90  
                                                    l4760 1900  
                                                    l4752 1848  
                                                    l4744 17A8  
                                                    l3960 46A2  
                                                    l4840 2F30  
                                                    l4832 2EDE  
                                                    l4824 2A74  
                                                    l4816 29BE  
                                                    l4808 293E  
                                                    l4920 425E  
                                                    l4680 3DDC  
                                                    l4672 3ECC  
                                                    l4664 3E7C  
                                                    l4656 3D56  
                                                    l4648 3D00  
                                                    l5296 2CF4  
                                                    l5288 2CBE  
                                                    l4496 08AC  
                                                    l4488 0858  
                                                    l5384 348A  
                                                    l5376 3472  
                                                    l5368 3424  
                                                    l3946 3B22  
                                                    l3938 3AD0  
                                                    l4586 3816  
                                                    l4578 37C4  
                                                    l4762 192E  
                                                    l4754 1876  
                                                    l4746 17CC  
                                                    l4738 1742  
                                                    l3962 46B8  
                                                    l4906 439E  
                                                    l4850 2FEE  
                                                    l4842 2F40  
                                                    l4834 2EDE  
                                                    l4690 48D0  
                                                    l4826 2A8E  
                                                    l4818 29F8  
                                                    l4922 4286  
                                                    l4682 3DE2  
                                                    l4674 3ED8  
                                                    l4666 3E90  
                                                    l4658 3D6A  
                                                    l5298 2D2A  
                                                    l4498 08C4  
                                                    l5386 34A6  
                                                    l5378 3476  
                                                    l3948 3B40  
                                                    l4588 381A  
                                                    l4764 195C  
                                                    l4756 18A4  
                                                    l4748 17F0  
                                                    l4596 3A04  
                                                    l3964 46BE  
                                                    l3956 46A2  
                                                    l4908 43AE  
                                                    l4844 2F98  
                                                    l4692 48D0  
                                                    l4780 3C1A  
                                                    l4772 3B92  
                                                    l4860 48FC  
                                                    l4916 4240  
                                                    l4940 0E74  
                                                    l3980 3F4E  
                                                    l3972 3F16  
                                                    l4684 3E0A  
                                                    l4676 3DB4  
                                                    l4668 3E96  
                                                    l5388 34AA  
                                                    l4766 1992  
                                                    l4758 18D2  
                                                    l4598 3A18  
                                                    l3966 46C4  
                                                    l3958 46A2  
                                                    l4846 2FC4  
                                                    l4838 2EF4  
                                                    l4694 48D0  
                                                    l4774 3B92  
                                                    l4870 4616  
                                                    l4854 496C  
                                                    l4862 48FC  
                                                    l4790 305C  
                                                    l4926 429C  
                                                    l4918 4240  
                                                    l4950 1054  
                                                    l4942 0E8A  
                                                    l4934 0E3C  
                                                    l3982 3F60  
                                                    l3974 3F16  
                                                    l4686 3E1E  
                                                    l4678 3DC8  
                                                    l5590 2226  
                                                    l3968 46E6  
                                                    l4848 2FD4  
                                                    l4696 48D4  
                                                    l4776 3BCE  
                                                    l4856 496C  
                                                    l4792 306C  
                                                    l4784 3020  
                                                    l4928 42AC  
                                                    l4952 1072  
                                                    l4960 112E  
                                                    l4944 0EC4  
                                                    l4936 0E3C  
                                                    l3992 3FAC  
                                                    l3984 3F6E  
                                                    l3976 3F30  
                                                    l4688 3E2A  
                                                    l5592 2260  
                                                    l4890 452E  
                                                    l4882 4526  
                                                    l4698 48D6  
                                                    l4778 3BF6  
                                                    l4874 462C  
                                                    l4866 45EC  
                                                    l4794 309E  
                                                    l4786 3020  
                                                    l4970 1196  
                                                    l4962 1154  
                                                    l4954 107E  
                                                    l4946 0F06  
                                                    l4938 0E4C  
                                                    l3986 3F92  
                                                    l3978 3F40  
                                                    l5594 223C  
                                                    l4892 4566  
                                                    l4884 4526  
                                                    l3996 4588  
                                                    l4876 4630  
                                                    l4868 45F0  
                                                    l4796 30D4  
                                                    l4788 3020  
                                                    l4972 11A8  
                                                    l4980 12D8  
                                                    l4956 109A  
                                                    l4948 0FA4  
                                                    l3988 3FA4  
                                                    l5596 2252  
                                                    l4886 4526  
                                                    l3998 4588  
                                                    l4798 310A  
                                                    l4990 13EA  
                                                    l4982 1388  
                                                    l4974 11BE  
                                                    l4966 1186  
                                                    l4958 10B6  
                                                    l5598 26F2  
                                                    l4888 4526  
                                                    l4984 13A6  
                                                    l4992 1462  
                                                    l4976 11F8  
                                                    l4968 1186  
                                                    l4898 435E  
                                                    l4994 1488  
                                                    l4986 13B2  
                                                    l4978 123A  
                                                    l4988 13CE  
                                                    l4998 41A8  
                                     __end_of_XF_popEvent 39FC  
                                                    STR_1 FFED  
                                                    u2000 2EB4  
                                                    u2001 2EB0  
                                                    u2010 4012  
                                                    u2011 400E  
                                                    u2100 40E8  
                                                    u2020 286A  
                                                    u2101 40E4  
                                                    u2021 2866  
                                                    u2030 2926  
                                                    u2110 07B8  
                                                    u2031 2922  
                                                    u2111 07B4  
                                                    u3000 4316  
                                                    u2200 0C6C  
                                                    u2120 0808  
                                                    u2040 2AFC  
                                                    u3001 4312  
                                                    u2201 0C68  
                                                    u2121 0804  
                                                    u2041 2AF8  
                                                    u2210 0D84  
                                                    u2130 089C  
                                                    u2211 0D80  
                                                    u2131 0898  
                                                    u2051 2B30  
                                                    u2220 0E20  
                                                    u2140 08C4  
                                                    u2060 2B94  
                                                    u3020 20B6  
                                                    u2221 0E1C  
                                                    u2141 08C0  
                                                    u2061 2B90  
                                                    u3021 20B2  
                                                    _LATA 0F89  
                                                    u2230 3C50  
                                                    u2150 08FA  
                                                    u2070 2BBC  
                                                    u3030 20D2  
                                                    _LATB 0F8A  
                                                    u2231 3C4C  
                                                    u2151 08F6  
                                                    u2071 2BB8  
                                                    u3031 20CE  
                                                    _LATC 0F8B  
                                                    u1600 3AF4  
                                                    u2240 380C  
                                                    u2160 0948  
                                                    u3040 2166  
                                                    _LATD 0F8C  
                                                    u1601 3AF0  
                                                    u2161 0944  
                                                    u2081 2C0E  
                                                    u3041 2162  
                                                    _LATE 0F8D  
                                                    u1610 3B7A  
                                                    u2250 3830  
                                                    u3018 433C  
                                                    u2090 4080  
                                                    u2170 099A  
                                                    u3050 219C  
                                                    _LATF 0F8E  
                                                    u1611 3B76  
                                                    u2251 382C  
                                                    u3019 4350  
                                                    u2091 407C  
                                                    u2171 0996  
                                                    u3051 2198  
                                                    _LATG 0F8F  
                                                    u2500 2EF0  
                                                    u1700 49CC  
                                                    u1620 3F60  
                                                    u2340 3D28  
                                                    u2180 0B66  
                                                    u3060 21D2  
                                                    _LATH 0F90  
                                                    u2245 3802  
                                                    u2405 17F0  
                                                    u2501 2EEC  
                                                    u1701 49C8  
                                                    u1621 3F5C  
                                                    u2341 3D24  
                                                    u3061 21CE  
                                                    u2270 3A92  
                                                    u1710 49B4  
                                                    u1630 3FA4  
                                                    _LATJ 0F91  
                                                    u2415 1812  
                                                    u2271 3A8E  
                                                    u1711 49B0  
                                                    u1631 3FA0  
                                                    u2264 3A6E  
                                                    u2520 4628  
                                                    u2600 0FD0  
                                                    u1640 3378  
                                                    u1720 006C  
                                                    u2360 3E90  
                                                    u2425 1876  
                                                    u2265 3A68  
                                                    u2521 4624  
                                                    u1641 3374  
                                                    u1721 0068  
                                                    u2361 3E8C  
                                                    u2185 0B5C  
                                                    u2530 439A  
                                                    u1650 1580  
                                                    u1730 00C0  
                                                    u2435 18A4  
                                                    u2531 4396  
                                                    u2515 2F88  
                                                    u1651 157C  
                                                    u1731 00BC  
                                                    u2195 0BAC  
                                                    u2540 4298  
                                                    u1660 15B6  
                                                    u1820 0500  
                                                    u1740 0136  
                                                    u2380 3DDC  
                                                    u1900 36D4  
                                                    u2445 18D2  
                                                    u2541 4294  
                                                    u2605 0FC6  
                                                    u1661 15B2  
                                                    u1805 035A  
                                                    u1741 0132  
                                                    u2381 3DD8  
                                                    u1901 36D0  
                                                    u2550 0E74  
                                                    u1670 1692  
                                                    u1830 054E  
                                                    u1750 01E6  
                                                    u2455 1900  
                                                    u2615 1014  
                                                    u2551 0E70  
                                                    u1671 168E  
                                                    u1815 0438  
                                                    u1751 01E2  
                                                    u1911 371C  
                                                    u2640 11A8  
                                                    u2560 0EFC  
                                                    u1680 172C  
                                                    u1840 05E4  
                                                    u1760 026E  
                                                    u1920 3748  
                                                    u2465 192E  
                                                    u2705 1348  
                                                    u2641 11A4  
                                                    u2625 10F2  
                                                    u1681 1728  
                                                    u1841 05E0  
                                                    u1825 04F6  
                                                    u1921 3744  
                                                    u2801 3918  
                                                    u2650 1230  
                                                    u2730 41BA  
                                                    u1690 22AA  
                                                    u1850 0604  
                                                    u2810 2478  
                                                    u1930 377A  
                                                    u2475 195C  
                                                    u2395 17CC  
                                                    u2715 1426  
                                                    u2635 111C  
                                                    u2731 41B6  
                                                    u1691 22A6  
                                                    u1851 0600  
                                                    u1835 0544  
                                                    u2811 2474  
                                                    u1931 3776  
                                                    u1940 2DA4  
                                                    u1860 06A2  
                                                    u1780 02DA  
                                                    u2820 249E  
                                                    u2900 2670  
                                                    u2740 44EC  
                                                    u2485 3C1A  
                                                    u2725 1450  
                                                    u2565 0EF2  
                                                    u1941 2DA0  
                                                    u1861 069E  
                                                    u1765 0264  
                                                    u2821 249A  
                                                    u2901 266C  
                                                    u2741 44E8  
                                                    u2590 0F92  
                                                    u1950 2DC6  
                                                    u1870 0704  
                                                    u1790 0316  
                                                    u2830 24C4  
                                                    u2910 2692  
                                                    u2495 2A74  
                                                    u2655 1226  
                                                    u2575 0F32  
                                                    u1951 2DC2  
                                                    u1871 0700  
                                                    u1775 02A4  
                                                    u2831 24C0  
                                                    u2911 268E  
                                                    u2680 12C6  
                                                    u1960 2DEC  
                                                    u1880 0734  
                                                    u2840 24EA  
                                                    u2920 26B8  
                                                    u2665 1266  
                                                    u2585 0F5C  
                                                    u1961 2DE8  
                                                    u1881 0730  
                                                    u1785 02D0  
                                                    u2841 24E6  
                                                    u2921 26B4  
                                                    u2690 1304  
                                                    u1970 2E28  
                                                    u2770 396C  
                                                    u1890 4176  
                                                    u2850 250C  
                                                    u2930 26DA  
                                                    u2675 1290  
                                                    u2595 0F88  
                                                    u1971 2E24  
                                                    u2771 3968  
                                                    u1891 4172  
                                                    u1795 030C  
                                                    u2851 2508  
                                                    u2931 26D6  
                                                    u1980 2E56  
                                                    u2860 252E  
                                                    u2940 272A  
                                                    u2685 12BC  
                                                    u1981 2E52  
                                                    u2861 252A  
                                                    u2941 2726  
                                                    u2950 2050  
                                                    u1990 2EA2  
                                                    u2870 2582  
                                                    u2951 204C  
                                                    u2695 12FA  
                                                    u1991 2E9E  
                                                    u2871 257E  
                                                    u2880 2624  
                                                    u2881 2620  
                                                    u2890 264A  
                                                    u2970 2CBE  
                                                    u2891 2646  
                                                    u2971 2CBA  
                                                    u2980 2D6E  
                                                    u2981 2D6A  
                       __end_of_DRV_CANFDSPI_TimeStampSet 4924  
                                    _motorControl_Process 2456  
                                                    _main 33AC  
                                        _XF_scheduleTimer 36A2  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 0001  
                                            _CanSetFilter 4454  
                                         __end_of_CanInit 2072  
                                         __end_of_CanSend 4066  
                                   _lightContol_BackLight 3DAC  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2D8C  
                                         __end_of_XF_post 3930  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 3158  
                     _DRV_CANFDSPI_TransmitQueueConfigure 3018  
                                 __end_of_TMR0_Initialize 4804  
                     __end_of_DRV_CANFDSPI_WriteByteArray 33AC  
                             _DRV_CANFDSPI_WriteByteArray 3292  
                           __end_of_OSCILLATOR_Initialize 4A00  
                                         __end_of___awmod 2ED6  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3292  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3158  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 48A2  
                                                   _dummy 0031  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2C38  
                               motorControl_Process@state 003E  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 0001  
                                                   ltemp1 0005  
                                                   ltemp2 0009  
                            lightControl_Process@oldState 0039  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 0001  
                                                   ttemp1 0004  
                                                   ttemp2 0007  
                                                   ttemp3 000A  
                                                   ttemp5 0002  
                                                   ttemp6 0005  
                                                   ttemp7 0009  
                                                   status 0FD8  
                                                   wtemp0 0001  
                                                   wtemp1 0003  
                                                   wtemp2 0005  
                                                   wtemp3 0007  
                                                   wtemp4 0009  
                                                   wtemp5 000B  
                                                   wtemp8 0002  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 4238  
                           _DRV_CANFDSPI_FilterToFifoLink 41A2  
                               _DRV_CANFDSPI_TefConfigure 3B8A  
                                         __initialization 4744  
                                              _Event_init 46F6  
                                            __end_of_main 34B6  
                             ?_INTERRUPT_InterruptManager 0040  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2936  
                              _DRV_CANFDSPI_ReadByteArray 27AA  
                                     __end_of_Event_setPE 47CA  
                                     __end_of_Event_setId 49A2  
                                           __activetblptr 0003  
                                          _Event_getDelay 4924  
                                             _XF_popEvent 3930  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  u230_41 354A  
                                                  u231_40 3568  
                                                  u231_41 3564  
                                                  i2l5354 004C  
                                                  u232_40 35AE  
                                                  i2l5356 005A  
                                                  u232_41 35AA  
                                                  i2l5358 0068  
                                                  u228_40 34E0  
                                                  u228_41 34DC  
                                                  u229_40 351E  
                                                  u229_41 351A  
                                                  u275_40 4856  
                                                  u275_41 4852  
                                                  u276_48 485C  
                                                  u276_49 4870  
                                                  u296_40 4898  
                                                  u296_41 4894  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 4804  
                                          _XF_noMoreEvent 4A06  
                                          _XF_noMoreTimer 4A00  
                          __end_of_DRV_CANFDSPI_WriteByte 46F6  
                          __end_of_DRV_CANFDSPI_WriteWord 3864  
                                       __end_of_SPI2_Open 3CF8  
                                          _XF_executeOnce 42CA  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 474C  
                                                  clear_1 475E  
                                                  clear_2 476A  
                                                  clear_3 4776  
                                                  clear_4 4782  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 494A  
                                                  lltemp0 0001  
                                                  lltemp1 0009  
                                                  lltemp2 0011  
                                                  lltemp3 0019  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3AC6  
                              _DRV_CANFDSPI_WriteHalfWord 39FC  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 4872  
                                  __end_of_Event_setDelay 483C  
                                  __end_of_XF_noMoreEvent 4A0C  
                                  __end_of_XF_noMoreTimer 4A06  
                                       _SYSTEM_Initialize 49D2  
                         lightContol_FrontLight@lastLight 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 4788  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 435A  
                                  _lightContol_FrontLight 3E60  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 0040  
                                              ___inthi_sp 0931  
                                             _Event_setPE 478E  
                                             _Event_setId 4988  
                                __end_of_XF_scheduleTimer 378C  
                                   TMR0_ISR@CountCallBack 0035  
                                     __end_of_SpiTransfer 3B8A  
                                   __end_of_LEAVECRITICAL 49BA  
                               __end_of_SYSTEM_Initialize 49E8  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 0050  
                        __end_of_TMR0_SetInterruptHandler 496C  
                               _DRV_CANFDSPI_TimeStampSet 48FC  
                                            _XF_pushEvent 2AB8  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 49D2  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 1E64  
                                                 _CanSend 3FBC  
                                                 _XF_init 2C38  
                                                 _XF_post 3864  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 2456  
                             _DRV_CANFDSPI_DlcToDataBytes 2278  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 3018  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2ED6  
                                                 ___awmod 2D8C  
                                                 uf299999 42EA  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 410A  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 4066  
                                                 __pcinit 4744  
                                                 __ramtop 1000  
                                                 __ptext0 33AC  
                                                 __ptext1 2072  
                                                 __ptext2 3864  
                                                 __ptext3 2AB8  
                                                 __ptext4 36A2  
                                                 __ptext5 4A00  
                                                 __ptext6 4A06  
                                                 __ptext7 4804  
                                                 __ptext8 4924  
                                                 __ptext9 478E  
                                             _SpiTransfer 3AC6  
                                               _T0CONbits 0FD5  
                                                 us233999 3D0A  
                                                 us235999 3E72  
                                                 us237999 3DBE  
                                   _OSCILLATOR_Initialize 49F8  
                                                 us278999 3988  
                                                 us279999 39B0  
                             lightContol_FrontLight@F6660 008B  
                                    end_of_initialization 4788  
                              __end_of_DRV_CANFDSPI_Reset 48FC  
                                      __end_of_CanReceive 4522  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 36A2  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 35B4  
                                               _SPI2_Open 3C42  
                                _TMR0_SetInterruptHandler 494A  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 4A10  
                            __end_of_lightControl_Process 27AA  
                                         _SPI2_Initialize 49E8  
                                      _spi2_configuration FFE9  
                                     start_initialization 4744  
                           __end_of_DRV_CANFDSPI_ReadByte 45E8  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 4744  
                          __end_of_lightContol_FrontLight 3F0E  
                              __end_of_XF_unscheduleTimer 46A0  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0021  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2AB8  
                   _DRV_CANFDSPI_TransmitChannelConfigure 2936  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 3DAC  
                               lightControl_Process@state 003A  
                                   _TMR0_InterruptHandler 0050  
                                  _PIN_MANAGER_Initialize 48A2  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 49F8  
                            ??_INTERRUPT_InterruptManager 0040  
                                 motorControl@lastPercent 003F  
                                           _TMR0_CallBack 483C  
                                    _INTERRUPT_Initialize 4A0C  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 2602  
                           __end_of_lightContol_BackLight 3E60  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 43E0  
                        _DRV_CANFDSPI_OperationModeSelect 435A  
                                                i2u307_40 005A  
                                                i2u307_41 0056  
                                                i2u308_40 0068  
                                                i2u308_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 48D0  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 4872  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 003B  
                                           _LEAVECRITICAL 49A2  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 4988  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 496C  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6643 0021  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 44BE  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 3FBC  
                      _DRV_CANFDSPI_TransmitChannelUpdate 3F0E  
                            motorControl_Process@oldState 003D  
                                                _carState 0060  
                       __end_of_DRV_CANFDSPI_TefConfigure 3C42  
                                                __ptext10 4988  
                                                __ptext11 44BE  
                                                __ptext20 2456  
                                                __ptext12 074C  
                                                __ptext21 3CF8  
                                                __ptext13 43E0  
                                                __ptext30 410A  
                                                __ptext22 3E60  
                                                __ptext14 27AA  
                                                __ptext31 3930  
                                                __ptext23 3DAC  
                                                __ptext15 4066  
                                                __ptext40 49F8  
                                                __ptext32 2D8C  
                                                __ptext24 3FBC  
                                                __ptext16 2C38  
                                                __ptext41 4A0C  
                                                __ptext33 49A2  
                                                __ptext25 0000  
                                                __ptext17 46F6  
                                                __ptext50 3158  
                                                __ptext42 4454  
                                                __ptext34 49BA  
                                                __ptext26 3292  
                                                __ptext18 42CA  
                                                __ptext51 2936  
                                                __ptext43 41A2  
                                                __ptext35 49D2  
                                                __ptext27 3F0E  
                                                __ptext19 2602  
                                                __ptext60 46A0  
                                                __ptext52 48FC  
                                                __ptext44 0E34  
                                                __ptext36 47CA  
                                                __ptext28 14B2  
                                                __ptext61 4586  
                                                __ptext53 496C  
                                                __ptext45 117E  
                                                __ptext37 494A  
                                                __ptext29 2278  
                                                __ptext70 4872  
                                                __ptext62 4522  
                                                __ptext54 45E8  
                                                __ptext46 4238  
                                                __ptext38 49E8  
                                                __ptext71 483C  
                                                __ptext63 39FC  
                                                __ptext55 3B8A  
                                                __ptext47 1E64  
                                                __ptext39 48A2  
                                                __ptext72 4A10  
                                                __ptext64 19BA  
                                                __ptext56 48D0  
                                                __ptext48 35B4  
                                                __ptext73 34B6  
                                                __ptext65 173A  
                                                __ptext57 3C42  
                                                __ptext49 3018  
                                                __ptext74 4648  
                                                __ptext66 1C18  
                                                __ptext58 2ED6  
                                                __ptext67 378C  
                                                __ptext59 435A  
                                                __ptext68 3AC6  
                                           _ENTERCRITICAL 49BA  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 35B4  
                              _XF_decrementAndQueueTimers 34B6  
                    __end_of_TMR0_DefaultInterruptHandler 4A12  
                            _TMR0_DefaultInterruptHandler 4A10  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 4648  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 46A0  
                            __end_of_motorControl_Process 2602  
                                  _DRV_CANFDSPI_WriteWord 378C  
                                            _motorControl 3CF8  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 42CA  
                              _DRV_CANFDSPI_FilterDisable 4238  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 4586  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 4648  
                            _DRV_CANFDSPI_TimeStampEnable 45E8  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 4454  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 43E0  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 2072  
                                         _TMR0_Initialize 47CA  
                              lightContol_BackLight@F6666 007B  
                          __end_of_PIN_MANAGER_Initialize 48D0  
