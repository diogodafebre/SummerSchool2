

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Feb 27 13:34:43 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 17/08/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F97J60 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000FE0                     bsr             equ	4064
   129   000FE9                     fsr0            equ	4073
   130   000FEA                     fsr0h           equ	4074
   131   000FE9                     fsr0l           equ	4073
   132   000FE1                     fsr1            equ	4065
   133   000FE2                     fsr1h           equ	4066
   134   000FE1                     fsr1l           equ	4065
   135   000FD9                     fsr2            equ	4057
   136   000FDA                     fsr2h           equ	4058
   137   000FD9                     fsr2l           equ	4057
   138   000FEF                     indf0           equ	4079
   139   000FE7                     indf1           equ	4071
   140   000FDF                     indf2           equ	4063
   141   000FF2                     intcon          equ	4082
   142   000000                     nvmcon          equ	0
   143   000FF9                     pcl             equ	4089
   144   000FFA                     pclath          equ	4090
   145   000FFB                     pclatu          equ	4091
   146   000FEB                     plusw0          equ	4075
   147   000FE3                     plusw1          equ	4067
   148   000FDB                     plusw2          equ	4059
   149   000FED                     postdec0        equ	4077
   150   000FE5                     postdec1        equ	4069
   151   000FDD                     postdec2        equ	4061
   152   000FEE                     postinc0        equ	4078
   153   000FE6                     postinc1        equ	4070
   154   000FDE                     postinc2        equ	4062
   155   000FEC                     preinc0         equ	4076
   156   000FE4                     preinc1         equ	4068
   157   000FDC                     preinc2         equ	4060
   158   000FF3                     prod            equ	4083
   159   000FF4                     prodh           equ	4084
   160   000FF3                     prodl           equ	4083
   161   000FD8                     status          equ	4056
   162   000FF5                     tablat          equ	4085
   163   000FF6                     tblptr          equ	4086
   164   000FF7                     tblptrh         equ	4087
   165   000FF6                     tblptrl         equ	4086
   166   000FF8                     tblptru         equ	4088
   167   000FFD                     tosl            equ	4093
   168   000FE8                     wreg            equ	4072
   169   000E80                     MAADR5          equ	3712	;# 
   170   000E81                     MAADR6          equ	3713	;# 
   171   000E82                     MAADR3          equ	3714	;# 
   172   000E83                     MAADR4          equ	3715	;# 
   173   000E84                     MAADR1          equ	3716	;# 
   174   000E85                     MAADR2          equ	3717	;# 
   175   000E8A                     MISTAT          equ	3722	;# 
   176   000E97                     EFLOCON         equ	3735	;# 
   177   000E98                     EPAUS           equ	3736	;# 
   178   000E98                     EPAUSL          equ	3736	;# 
   179   000E99                     EPAUSH          equ	3737	;# 
   180   000EA0                     MACON1          equ	3744	;# 
   181   000EA2                     MACON3          equ	3746	;# 
   182   000EA3                     MACON4          equ	3747	;# 
   183   000EA4                     MABBIPG         equ	3748	;# 
   184   000EA6                     MAIPG           equ	3750	;# 
   185   000EA6                     MAIPGL          equ	3750	;# 
   186   000EA7                     MAIPGH          equ	3751	;# 
   187   000EAA                     MAMXFL          equ	3754	;# 
   188   000EAA                     MAMXFLL         equ	3754	;# 
   189   000EAB                     MAMXFLH         equ	3755	;# 
   190   000EB2                     MICMD           equ	3762	;# 
   191   000EB4                     MIREGADR        equ	3764	;# 
   192   000EB6                     MIWR            equ	3766	;# 
   193   000EB6                     MIWRL           equ	3766	;# 
   194   000EB7                     MIWRH           equ	3767	;# 
   195   000EB8                     MIRD            equ	3768	;# 
   196   000EB8                     MIRDL           equ	3768	;# 
   197   000EB9                     MIRDH           equ	3769	;# 
   198   000EC0                     EHT0            equ	3776	;# 
   199   000EC1                     EHT1            equ	3777	;# 
   200   000EC2                     EHT2            equ	3778	;# 
   201   000EC3                     EHT3            equ	3779	;# 
   202   000EC4                     EHT4            equ	3780	;# 
   203   000EC5                     EHT5            equ	3781	;# 
   204   000EC6                     EHT6            equ	3782	;# 
   205   000EC7                     EHT7            equ	3783	;# 
   206   000EC8                     EPMM0           equ	3784	;# 
   207   000EC9                     EPMM1           equ	3785	;# 
   208   000ECA                     EPMM2           equ	3786	;# 
   209   000ECB                     EPMM3           equ	3787	;# 
   210   000ECC                     EPMM4           equ	3788	;# 
   211   000ECD                     EPMM5           equ	3789	;# 
   212   000ECE                     EPMM6           equ	3790	;# 
   213   000ECF                     EPMM7           equ	3791	;# 
   214   000ED0                     EPMCS           equ	3792	;# 
   215   000ED0                     EPMCSL          equ	3792	;# 
   216   000ED1                     EPMCSH          equ	3793	;# 
   217   000ED4                     EPMO            equ	3796	;# 
   218   000ED4                     EPMOL           equ	3796	;# 
   219   000ED5                     EPMOH           equ	3797	;# 
   220   000ED8                     ERXFCON         equ	3800	;# 
   221   000ED9                     EPKTCNT         equ	3801	;# 
   222   000EE2                     EWRPT           equ	3810	;# 
   223   000EE2                     EWRPTL          equ	3810	;# 
   224   000EE3                     EWRPTH          equ	3811	;# 
   225   000EE4                     ETXST           equ	3812	;# 
   226   000EE4                     ETXSTL          equ	3812	;# 
   227   000EE5                     ETXSTH          equ	3813	;# 
   228   000EE6                     ETXND           equ	3814	;# 
   229   000EE6                     ETXNDL          equ	3814	;# 
   230   000EE7                     ETXNDH          equ	3815	;# 
   231   000EE8                     ERXST           equ	3816	;# 
   232   000EE8                     ERXSTL          equ	3816	;# 
   233   000EE9                     ERXSTH          equ	3817	;# 
   234   000EEA                     ERXND           equ	3818	;# 
   235   000EEA                     ERXNDL          equ	3818	;# 
   236   000EEB                     ERXNDH          equ	3819	;# 
   237   000EEC                     ERXRDPT         equ	3820	;# 
   238   000EEC                     ERXRDPTL        equ	3820	;# 
   239   000EED                     ERXRDPTH        equ	3821	;# 
   240   000EEE                     ERXWRPT         equ	3822	;# 
   241   000EEE                     ERXWRPTL        equ	3822	;# 
   242   000EEF                     ERXWRPTH        equ	3823	;# 
   243   000EF0                     EDMAST          equ	3824	;# 
   244   000EF0                     EDMASTL         equ	3824	;# 
   245   000EF1                     EDMASTH         equ	3825	;# 
   246   000EF2                     EDMAND          equ	3826	;# 
   247   000EF2                     EDMANDL         equ	3826	;# 
   248   000EF3                     EDMANDH         equ	3827	;# 
   249   000EF4                     EDMADST         equ	3828	;# 
   250   000EF4                     EDMADSTL        equ	3828	;# 
   251   000EF5                     EDMADSTH        equ	3829	;# 
   252   000EF6                     EDMACS          equ	3830	;# 
   253   000EF6                     EDMACSL         equ	3830	;# 
   254   000EF7                     EDMACSH         equ	3831	;# 
   255   000EFB                     EIE             equ	3835	;# 
   256   000EFD                     ESTAT           equ	3837	;# 
   257   000EFE                     ECON2           equ	3838	;# 
   258   000F60                     EIR             equ	3936	;# 
   259   000F61                     EDATA           equ	3937	;# 
   260   000F62                     SSP2CON2        equ	3938	;# 
   261   000F63                     SSP2CON1        equ	3939	;# 
   262   000F64                     SSP2STAT        equ	3940	;# 
   263   000F65                     SSP2ADD         equ	3941	;# 
   264   000F66                     SSP2BUF         equ	3942	;# 
   265   000F67                     ECCP2DEL        equ	3943	;# 
   266   000F68                     ECCP2AS         equ	3944	;# 
   267   000F69                     ECCP3DEL        equ	3945	;# 
   268   000F6A                     ECCP3AS         equ	3946	;# 
   269   000F6B                     RCSTA2          equ	3947	;# 
   270   000F6C                     TXSTA2          equ	3948	;# 
   271   000F6D                     TXREG2          equ	3949	;# 
   272   000F6E                     RCREG2          equ	3950	;# 
   273   000F6F                     SPBRG2          equ	3951	;# 
   274   000F70                     CCP5CON         equ	3952	;# 
   275   000F71                     CCPR5           equ	3953	;# 
   276   000F71                     CCPR5L          equ	3953	;# 
   277   000F72                     CCPR5H          equ	3954	;# 
   278   000F73                     CCP4CON         equ	3955	;# 
   279   000F74                     CCPR4           equ	3956	;# 
   280   000F74                     CCPR4L          equ	3956	;# 
   281   000F75                     CCPR4H          equ	3957	;# 
   282   000F76                     T4CON           equ	3958	;# 
   283   000F77                     PR4             equ	3959	;# 
   284   000F78                     TMR4            equ	3960	;# 
   285   000F79                     ECCP1DEL        equ	3961	;# 
   286   000F7A                     ERDPT           equ	3962	;# 
   287   000F7A                     ERDPTL          equ	3962	;# 
   288   000F7B                     ERDPTH          equ	3963	;# 
   289   000F7C                     BAUDCON2        equ	3964	;# 
   290   000F7C                     BAUDCTL2        equ	3964	;# 
   291   000F7D                     SPBRGH2         equ	3965	;# 
   292   000F7E                     BAUDCON1        equ	3966	;# 
   293   000F7E                     BAUDCON         equ	3966	;# 
   294   000F7E                     BAUDCTL         equ	3966	;# 
   295   000F7E                     BAUDCTL1        equ	3966	;# 
   296   000F7F                     SPBRGH1         equ	3967	;# 
   297   000F7F                     SPBRGH          equ	3967	;# 
   298   000F80                     PORTA           equ	3968	;# 
   299   000F81                     PORTB           equ	3969	;# 
   300   000F82                     PORTC           equ	3970	;# 
   301   000F83                     PORTD           equ	3971	;# 
   302   000F84                     PORTE           equ	3972	;# 
   303   000F85                     PORTF           equ	3973	;# 
   304   000F86                     PORTG           equ	3974	;# 
   305   000F87                     PORTH           equ	3975	;# 
   306   000F88                     PORTJ           equ	3976	;# 
   307   000F89                     LATA            equ	3977	;# 
   308   000F8A                     LATB            equ	3978	;# 
   309   000F8B                     LATC            equ	3979	;# 
   310   000F8C                     LATD            equ	3980	;# 
   311   000F8D                     LATE            equ	3981	;# 
   312   000F8E                     LATF            equ	3982	;# 
   313   000F8F                     LATG            equ	3983	;# 
   314   000F90                     LATH            equ	3984	;# 
   315   000F91                     LATJ            equ	3985	;# 
   316   000F92                     TRISA           equ	3986	;# 
   317   000F92                     DDRA            equ	3986	;# 
   318   000F93                     TRISB           equ	3987	;# 
   319   000F93                     DDRB            equ	3987	;# 
   320   000F94                     TRISC           equ	3988	;# 
   321   000F94                     DDRC            equ	3988	;# 
   322   000F95                     TRISD           equ	3989	;# 
   323   000F95                     DDRD            equ	3989	;# 
   324   000F96                     TRISE           equ	3990	;# 
   325   000F96                     DDRE            equ	3990	;# 
   326   000F97                     TRISF           equ	3991	;# 
   327   000F97                     DDRF            equ	3991	;# 
   328   000F98                     TRISG           equ	3992	;# 
   329   000F98                     DDRG            equ	3992	;# 
   330   000F99                     TRISH           equ	3993	;# 
   331   000F99                     DDRH            equ	3993	;# 
   332   000F9A                     TRISJ           equ	3994	;# 
   333   000F9A                     DDRJ            equ	3994	;# 
   334   000F9B                     OSCTUNE         equ	3995	;# 
   335   000F9C                     MEMCON          equ	3996	;# 
   336   000F9D                     PIE1            equ	3997	;# 
   337   000F9E                     PIR1            equ	3998	;# 
   338   000F9F                     IPR1            equ	3999	;# 
   339   000FA0                     PIE2            equ	4000	;# 
   340   000FA1                     PIR2            equ	4001	;# 
   341   000FA2                     IPR2            equ	4002	;# 
   342   000FA3                     PIE3            equ	4003	;# 
   343   000FA4                     PIR3            equ	4004	;# 
   344   000FA5                     IPR3            equ	4005	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FAB                     RCSTA1          equ	4011	;# 
   348   000FAB                     RCSTA           equ	4011	;# 
   349   000FAC                     TXSTA1          equ	4012	;# 
   350   000FAC                     TXSTA           equ	4012	;# 
   351   000FAD                     TXREG1          equ	4013	;# 
   352   000FAD                     TXREG           equ	4013	;# 
   353   000FAE                     RCREG1          equ	4014	;# 
   354   000FAE                     RCREG           equ	4014	;# 
   355   000FAF                     SPBRG1          equ	4015	;# 
   356   000FAF                     SPBRG           equ	4015	;# 
   357   000FB0                     PSPCON          equ	4016	;# 
   358   000FB1                     T3CON           equ	4017	;# 
   359   000FB2                     TMR3            equ	4018	;# 
   360   000FB2                     TMR3L           equ	4018	;# 
   361   000FB3                     TMR3H           equ	4019	;# 
   362   000FB4                     CMCON           equ	4020	;# 
   363   000FB5                     CVRCON          equ	4021	;# 
   364   000FB6                     ECCP1AS         equ	4022	;# 
   365   000FB7                     CCP3CON         equ	4023	;# 
   366   000FB7                     ECCP3CON        equ	4023	;# 
   367   000FB8                     CCPR3           equ	4024	;# 
   368   000FB8                     CCPR3L          equ	4024	;# 
   369   000FB9                     CCPR3H          equ	4025	;# 
   370   000FBA                     CCP2CON         equ	4026	;# 
   371   000FBA                     ECCP2CON        equ	4026	;# 
   372   000FBB                     CCPR2           equ	4027	;# 
   373   000FBB                     CCPR2L          equ	4027	;# 
   374   000FBC                     CCPR2H          equ	4028	;# 
   375   000FBD                     CCP1CON         equ	4029	;# 
   376   000FBD                     ECCP1CON        equ	4029	;# 
   377   000FBE                     CCPR1           equ	4030	;# 
   378   000FBE                     CCPR1L          equ	4030	;# 
   379   000FBF                     CCPR1H          equ	4031	;# 
   380   000FC0                     ADCON2          equ	4032	;# 
   381   000FC1                     ADCON1          equ	4033	;# 
   382   000FC2                     ADCON0          equ	4034	;# 
   383   000FC3                     ADRES           equ	4035	;# 
   384   000FC3                     ADRESL          equ	4035	;# 
   385   000FC4                     ADRESH          equ	4036	;# 
   386   000FC5                     SSP1CON2        equ	4037	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSP1CON1        equ	4038	;# 
   389   000FC6                     SSPCON1         equ	4038	;# 
   390   000FC7                     SSP1STAT        equ	4039	;# 
   391   000FC7                     SSPSTAT         equ	4039	;# 
   392   000FC8                     SSP1ADD         equ	4040	;# 
   393   000FC8                     SSPADD          equ	4040	;# 
   394   000FC9                     SSP1BUF         equ	4041	;# 
   395   000FC9                     SSPBUF          equ	4041	;# 
   396   000FCA                     T2CON           equ	4042	;# 
   397   000FCB                     PR2             equ	4043	;# 
   398   000FCC                     TMR2            equ	4044	;# 
   399   000FCD                     T1CON           equ	4045	;# 
   400   000FCE                     TMR1            equ	4046	;# 
   401   000FCE                     TMR1L           equ	4046	;# 
   402   000FCF                     TMR1H           equ	4047	;# 
   403   000FD0                     RCON            equ	4048	;# 
   404   000FD1                     WDTCON          equ	4049	;# 
   405   000FD2                     ECON1           equ	4050	;# 
   406   000FD3                     OSCCON          equ	4051	;# 
   407   000FD5                     T0CON           equ	4053	;# 
   408   000FD6                     TMR0            equ	4054	;# 
   409   000FD6                     TMR0L           equ	4054	;# 
   410   000FD7                     TMR0H           equ	4055	;# 
   411   000FD8                     STATUS          equ	4056	;# 
   412   000FD9                     FSR2            equ	4057	;# 
   413   000FD9                     FSR2L           equ	4057	;# 
   414   000FDA                     FSR2H           equ	4058	;# 
   415   000FDB                     PLUSW2          equ	4059	;# 
   416   000FDC                     PREINC2         equ	4060	;# 
   417   000FDD                     POSTDEC2        equ	4061	;# 
   418   000FDE                     POSTINC2        equ	4062	;# 
   419   000FDF                     INDF2           equ	4063	;# 
   420   000FE0                     BSR             equ	4064	;# 
   421   000FE1                     FSR1            equ	4065	;# 
   422   000FE1                     FSR1L           equ	4065	;# 
   423   000FE2                     FSR1H           equ	4066	;# 
   424   000FE3                     PLUSW1          equ	4067	;# 
   425   000FE4                     PREINC1         equ	4068	;# 
   426   000FE5                     POSTDEC1        equ	4069	;# 
   427   000FE6                     POSTINC1        equ	4070	;# 
   428   000FE7                     INDF1           equ	4071	;# 
   429   000FE8                     WREG            equ	4072	;# 
   430   000FE9                     FSR0            equ	4073	;# 
   431   000FE9                     FSR0L           equ	4073	;# 
   432   000FEA                     FSR0H           equ	4074	;# 
   433   000FEB                     PLUSW0          equ	4075	;# 
   434   000FEC                     PREINC0         equ	4076	;# 
   435   000FED                     POSTDEC0        equ	4077	;# 
   436   000FEE                     POSTINC0        equ	4078	;# 
   437   000FEF                     INDF0           equ	4079	;# 
   438   000FF0                     INTCON3         equ	4080	;# 
   439   000FF1                     INTCON2         equ	4081	;# 
   440   000FF2                     INTCON          equ	4082	;# 
   441   000FF3                     PROD            equ	4083	;# 
   442   000FF3                     PRODL           equ	4083	;# 
   443   000FF4                     PRODH           equ	4084	;# 
   444   000FF5                     TABLAT          equ	4085	;# 
   445   000FF6                     TBLPTR          equ	4086	;# 
   446   000FF6                     TBLPTRL         equ	4086	;# 
   447   000FF7                     TBLPTRH         equ	4087	;# 
   448   000FF8                     TBLPTRU         equ	4088	;# 
   449   000FF9                     PCLAT           equ	4089	;# 
   450   000FF9                     PC              equ	4089	;# 
   451   000FF9                     PCL             equ	4089	;# 
   452   000FFA                     PCLATH          equ	4090	;# 
   453   000FFB                     PCLATU          equ	4091	;# 
   454   000FFC                     STKPTR          equ	4092	;# 
   455   000FFD                     TOS             equ	4093	;# 
   456   000FFD                     TOSL            equ	4093	;# 
   457   000FFE                     TOSH            equ	4094	;# 
   458   000FFF                     TOSU            equ	4095	;# 
   459   000E80                     MAADR5          equ	3712	;# 
   460   000E81                     MAADR6          equ	3713	;# 
   461   000E82                     MAADR3          equ	3714	;# 
   462   000E83                     MAADR4          equ	3715	;# 
   463   000E84                     MAADR1          equ	3716	;# 
   464   000E85                     MAADR2          equ	3717	;# 
   465   000E8A                     MISTAT          equ	3722	;# 
   466   000E97                     EFLOCON         equ	3735	;# 
   467   000E98                     EPAUS           equ	3736	;# 
   468   000E98                     EPAUSL          equ	3736	;# 
   469   000E99                     EPAUSH          equ	3737	;# 
   470   000EA0                     MACON1          equ	3744	;# 
   471   000EA2                     MACON3          equ	3746	;# 
   472   000EA3                     MACON4          equ	3747	;# 
   473   000EA4                     MABBIPG         equ	3748	;# 
   474   000EA6                     MAIPG           equ	3750	;# 
   475   000EA6                     MAIPGL          equ	3750	;# 
   476   000EA7                     MAIPGH          equ	3751	;# 
   477   000EAA                     MAMXFL          equ	3754	;# 
   478   000EAA                     MAMXFLL         equ	3754	;# 
   479   000EAB                     MAMXFLH         equ	3755	;# 
   480   000EB2                     MICMD           equ	3762	;# 
   481   000EB4                     MIREGADR        equ	3764	;# 
   482   000EB6                     MIWR            equ	3766	;# 
   483   000EB6                     MIWRL           equ	3766	;# 
   484   000EB7                     MIWRH           equ	3767	;# 
   485   000EB8                     MIRD            equ	3768	;# 
   486   000EB8                     MIRDL           equ	3768	;# 
   487   000EB9                     MIRDH           equ	3769	;# 
   488   000EC0                     EHT0            equ	3776	;# 
   489   000EC1                     EHT1            equ	3777	;# 
   490   000EC2                     EHT2            equ	3778	;# 
   491   000EC3                     EHT3            equ	3779	;# 
   492   000EC4                     EHT4            equ	3780	;# 
   493   000EC5                     EHT5            equ	3781	;# 
   494   000EC6                     EHT6            equ	3782	;# 
   495   000EC7                     EHT7            equ	3783	;# 
   496   000EC8                     EPMM0           equ	3784	;# 
   497   000EC9                     EPMM1           equ	3785	;# 
   498   000ECA                     EPMM2           equ	3786	;# 
   499   000ECB                     EPMM3           equ	3787	;# 
   500   000ECC                     EPMM4           equ	3788	;# 
   501   000ECD                     EPMM5           equ	3789	;# 
   502   000ECE                     EPMM6           equ	3790	;# 
   503   000ECF                     EPMM7           equ	3791	;# 
   504   000ED0                     EPMCS           equ	3792	;# 
   505   000ED0                     EPMCSL          equ	3792	;# 
   506   000ED1                     EPMCSH          equ	3793	;# 
   507   000ED4                     EPMO            equ	3796	;# 
   508   000ED4                     EPMOL           equ	3796	;# 
   509   000ED5                     EPMOH           equ	3797	;# 
   510   000ED8                     ERXFCON         equ	3800	;# 
   511   000ED9                     EPKTCNT         equ	3801	;# 
   512   000EE2                     EWRPT           equ	3810	;# 
   513   000EE2                     EWRPTL          equ	3810	;# 
   514   000EE3                     EWRPTH          equ	3811	;# 
   515   000EE4                     ETXST           equ	3812	;# 
   516   000EE4                     ETXSTL          equ	3812	;# 
   517   000EE5                     ETXSTH          equ	3813	;# 
   518   000EE6                     ETXND           equ	3814	;# 
   519   000EE6                     ETXNDL          equ	3814	;# 
   520   000EE7                     ETXNDH          equ	3815	;# 
   521   000EE8                     ERXST           equ	3816	;# 
   522   000EE8                     ERXSTL          equ	3816	;# 
   523   000EE9                     ERXSTH          equ	3817	;# 
   524   000EEA                     ERXND           equ	3818	;# 
   525   000EEA                     ERXNDL          equ	3818	;# 
   526   000EEB                     ERXNDH          equ	3819	;# 
   527   000EEC                     ERXRDPT         equ	3820	;# 
   528   000EEC                     ERXRDPTL        equ	3820	;# 
   529   000EED                     ERXRDPTH        equ	3821	;# 
   530   000EEE                     ERXWRPT         equ	3822	;# 
   531   000EEE                     ERXWRPTL        equ	3822	;# 
   532   000EEF                     ERXWRPTH        equ	3823	;# 
   533   000EF0                     EDMAST          equ	3824	;# 
   534   000EF0                     EDMASTL         equ	3824	;# 
   535   000EF1                     EDMASTH         equ	3825	;# 
   536   000EF2                     EDMAND          equ	3826	;# 
   537   000EF2                     EDMANDL         equ	3826	;# 
   538   000EF3                     EDMANDH         equ	3827	;# 
   539   000EF4                     EDMADST         equ	3828	;# 
   540   000EF4                     EDMADSTL        equ	3828	;# 
   541   000EF5                     EDMADSTH        equ	3829	;# 
   542   000EF6                     EDMACS          equ	3830	;# 
   543   000EF6                     EDMACSL         equ	3830	;# 
   544   000EF7                     EDMACSH         equ	3831	;# 
   545   000EFB                     EIE             equ	3835	;# 
   546   000EFD                     ESTAT           equ	3837	;# 
   547   000EFE                     ECON2           equ	3838	;# 
   548   000F60                     EIR             equ	3936	;# 
   549   000F61                     EDATA           equ	3937	;# 
   550   000F62                     SSP2CON2        equ	3938	;# 
   551   000F63                     SSP2CON1        equ	3939	;# 
   552   000F64                     SSP2STAT        equ	3940	;# 
   553   000F65                     SSP2ADD         equ	3941	;# 
   554   000F66                     SSP2BUF         equ	3942	;# 
   555   000F67                     ECCP2DEL        equ	3943	;# 
   556   000F68                     ECCP2AS         equ	3944	;# 
   557   000F69                     ECCP3DEL        equ	3945	;# 
   558   000F6A                     ECCP3AS         equ	3946	;# 
   559   000F6B                     RCSTA2          equ	3947	;# 
   560   000F6C                     TXSTA2          equ	3948	;# 
   561   000F6D                     TXREG2          equ	3949	;# 
   562   000F6E                     RCREG2          equ	3950	;# 
   563   000F6F                     SPBRG2          equ	3951	;# 
   564   000F70                     CCP5CON         equ	3952	;# 
   565   000F71                     CCPR5           equ	3953	;# 
   566   000F71                     CCPR5L          equ	3953	;# 
   567   000F72                     CCPR5H          equ	3954	;# 
   568   000F73                     CCP4CON         equ	3955	;# 
   569   000F74                     CCPR4           equ	3956	;# 
   570   000F74                     CCPR4L          equ	3956	;# 
   571   000F75                     CCPR4H          equ	3957	;# 
   572   000F76                     T4CON           equ	3958	;# 
   573   000F77                     PR4             equ	3959	;# 
   574   000F78                     TMR4            equ	3960	;# 
   575   000F79                     ECCP1DEL        equ	3961	;# 
   576   000F7A                     ERDPT           equ	3962	;# 
   577   000F7A                     ERDPTL          equ	3962	;# 
   578   000F7B                     ERDPTH          equ	3963	;# 
   579   000F7C                     BAUDCON2        equ	3964	;# 
   580   000F7C                     BAUDCTL2        equ	3964	;# 
   581   000F7D                     SPBRGH2         equ	3965	;# 
   582   000F7E                     BAUDCON1        equ	3966	;# 
   583   000F7E                     BAUDCON         equ	3966	;# 
   584   000F7E                     BAUDCTL         equ	3966	;# 
   585   000F7E                     BAUDCTL1        equ	3966	;# 
   586   000F7F                     SPBRGH1         equ	3967	;# 
   587   000F7F                     SPBRGH          equ	3967	;# 
   588   000F80                     PORTA           equ	3968	;# 
   589   000F81                     PORTB           equ	3969	;# 
   590   000F82                     PORTC           equ	3970	;# 
   591   000F83                     PORTD           equ	3971	;# 
   592   000F84                     PORTE           equ	3972	;# 
   593   000F85                     PORTF           equ	3973	;# 
   594   000F86                     PORTG           equ	3974	;# 
   595   000F87                     PORTH           equ	3975	;# 
   596   000F88                     PORTJ           equ	3976	;# 
   597   000F89                     LATA            equ	3977	;# 
   598   000F8A                     LATB            equ	3978	;# 
   599   000F8B                     LATC            equ	3979	;# 
   600   000F8C                     LATD            equ	3980	;# 
   601   000F8D                     LATE            equ	3981	;# 
   602   000F8E                     LATF            equ	3982	;# 
   603   000F8F                     LATG            equ	3983	;# 
   604   000F90                     LATH            equ	3984	;# 
   605   000F91                     LATJ            equ	3985	;# 
   606   000F92                     TRISA           equ	3986	;# 
   607   000F92                     DDRA            equ	3986	;# 
   608   000F93                     TRISB           equ	3987	;# 
   609   000F93                     DDRB            equ	3987	;# 
   610   000F94                     TRISC           equ	3988	;# 
   611   000F94                     DDRC            equ	3988	;# 
   612   000F95                     TRISD           equ	3989	;# 
   613   000F95                     DDRD            equ	3989	;# 
   614   000F96                     TRISE           equ	3990	;# 
   615   000F96                     DDRE            equ	3990	;# 
   616   000F97                     TRISF           equ	3991	;# 
   617   000F97                     DDRF            equ	3991	;# 
   618   000F98                     TRISG           equ	3992	;# 
   619   000F98                     DDRG            equ	3992	;# 
   620   000F99                     TRISH           equ	3993	;# 
   621   000F99                     DDRH            equ	3993	;# 
   622   000F9A                     TRISJ           equ	3994	;# 
   623   000F9A                     DDRJ            equ	3994	;# 
   624   000F9B                     OSCTUNE         equ	3995	;# 
   625   000F9C                     MEMCON          equ	3996	;# 
   626   000F9D                     PIE1            equ	3997	;# 
   627   000F9E                     PIR1            equ	3998	;# 
   628   000F9F                     IPR1            equ	3999	;# 
   629   000FA0                     PIE2            equ	4000	;# 
   630   000FA1                     PIR2            equ	4001	;# 
   631   000FA2                     IPR2            equ	4002	;# 
   632   000FA3                     PIE3            equ	4003	;# 
   633   000FA4                     PIR3            equ	4004	;# 
   634   000FA5                     IPR3            equ	4005	;# 
   635   000FA6                     EECON1          equ	4006	;# 
   636   000FA7                     EECON2          equ	4007	;# 
   637   000FAB                     RCSTA1          equ	4011	;# 
   638   000FAB                     RCSTA           equ	4011	;# 
   639   000FAC                     TXSTA1          equ	4012	;# 
   640   000FAC                     TXSTA           equ	4012	;# 
   641   000FAD                     TXREG1          equ	4013	;# 
   642   000FAD                     TXREG           equ	4013	;# 
   643   000FAE                     RCREG1          equ	4014	;# 
   644   000FAE                     RCREG           equ	4014	;# 
   645   000FAF                     SPBRG1          equ	4015	;# 
   646   000FAF                     SPBRG           equ	4015	;# 
   647   000FB0                     PSPCON          equ	4016	;# 
   648   000FB1                     T3CON           equ	4017	;# 
   649   000FB2                     TMR3            equ	4018	;# 
   650   000FB2                     TMR3L           equ	4018	;# 
   651   000FB3                     TMR3H           equ	4019	;# 
   652   000FB4                     CMCON           equ	4020	;# 
   653   000FB5                     CVRCON          equ	4021	;# 
   654   000FB6                     ECCP1AS         equ	4022	;# 
   655   000FB7                     CCP3CON         equ	4023	;# 
   656   000FB7                     ECCP3CON        equ	4023	;# 
   657   000FB8                     CCPR3           equ	4024	;# 
   658   000FB8                     CCPR3L          equ	4024	;# 
   659   000FB9                     CCPR3H          equ	4025	;# 
   660   000FBA                     CCP2CON         equ	4026	;# 
   661   000FBA                     ECCP2CON        equ	4026	;# 
   662   000FBB                     CCPR2           equ	4027	;# 
   663   000FBB                     CCPR2L          equ	4027	;# 
   664   000FBC                     CCPR2H          equ	4028	;# 
   665   000FBD                     CCP1CON         equ	4029	;# 
   666   000FBD                     ECCP1CON        equ	4029	;# 
   667   000FBE                     CCPR1           equ	4030	;# 
   668   000FBE                     CCPR1L          equ	4030	;# 
   669   000FBF                     CCPR1H          equ	4031	;# 
   670   000FC0                     ADCON2          equ	4032	;# 
   671   000FC1                     ADCON1          equ	4033	;# 
   672   000FC2                     ADCON0          equ	4034	;# 
   673   000FC3                     ADRES           equ	4035	;# 
   674   000FC3                     ADRESL          equ	4035	;# 
   675   000FC4                     ADRESH          equ	4036	;# 
   676   000FC5                     SSP1CON2        equ	4037	;# 
   677   000FC5                     SSPCON2         equ	4037	;# 
   678   000FC6                     SSP1CON1        equ	4038	;# 
   679   000FC6                     SSPCON1         equ	4038	;# 
   680   000FC7                     SSP1STAT        equ	4039	;# 
   681   000FC7                     SSPSTAT         equ	4039	;# 
   682   000FC8                     SSP1ADD         equ	4040	;# 
   683   000FC8                     SSPADD          equ	4040	;# 
   684   000FC9                     SSP1BUF         equ	4041	;# 
   685   000FC9                     SSPBUF          equ	4041	;# 
   686   000FCA                     T2CON           equ	4042	;# 
   687   000FCB                     PR2             equ	4043	;# 
   688   000FCC                     TMR2            equ	4044	;# 
   689   000FCD                     T1CON           equ	4045	;# 
   690   000FCE                     TMR1            equ	4046	;# 
   691   000FCE                     TMR1L           equ	4046	;# 
   692   000FCF                     TMR1H           equ	4047	;# 
   693   000FD0                     RCON            equ	4048	;# 
   694   000FD1                     WDTCON          equ	4049	;# 
   695   000FD2                     ECON1           equ	4050	;# 
   696   000FD3                     OSCCON          equ	4051	;# 
   697   000FD5                     T0CON           equ	4053	;# 
   698   000FD6                     TMR0            equ	4054	;# 
   699   000FD6                     TMR0L           equ	4054	;# 
   700   000FD7                     TMR0H           equ	4055	;# 
   701   000FD8                     STATUS          equ	4056	;# 
   702   000FD9                     FSR2            equ	4057	;# 
   703   000FD9                     FSR2L           equ	4057	;# 
   704   000FDA                     FSR2H           equ	4058	;# 
   705   000FDB                     PLUSW2          equ	4059	;# 
   706   000FDC                     PREINC2         equ	4060	;# 
   707   000FDD                     POSTDEC2        equ	4061	;# 
   708   000FDE                     POSTINC2        equ	4062	;# 
   709   000FDF                     INDF2           equ	4063	;# 
   710   000FE0                     BSR             equ	4064	;# 
   711   000FE1                     FSR1            equ	4065	;# 
   712   000FE1                     FSR1L           equ	4065	;# 
   713   000FE2                     FSR1H           equ	4066	;# 
   714   000FE3                     PLUSW1          equ	4067	;# 
   715   000FE4                     PREINC1         equ	4068	;# 
   716   000FE5                     POSTDEC1        equ	4069	;# 
   717   000FE6                     POSTINC1        equ	4070	;# 
   718   000FE7                     INDF1           equ	4071	;# 
   719   000FE8                     WREG            equ	4072	;# 
   720   000FE9                     FSR0            equ	4073	;# 
   721   000FE9                     FSR0L           equ	4073	;# 
   722   000FEA                     FSR0H           equ	4074	;# 
   723   000FEB                     PLUSW0          equ	4075	;# 
   724   000FEC                     PREINC0         equ	4076	;# 
   725   000FED                     POSTDEC0        equ	4077	;# 
   726   000FEE                     POSTINC0        equ	4078	;# 
   727   000FEF                     INDF0           equ	4079	;# 
   728   000FF0                     INTCON3         equ	4080	;# 
   729   000FF1                     INTCON2         equ	4081	;# 
   730   000FF2                     INTCON          equ	4082	;# 
   731   000FF3                     PROD            equ	4083	;# 
   732   000FF3                     PRODL           equ	4083	;# 
   733   000FF4                     PRODH           equ	4084	;# 
   734   000FF5                     TABLAT          equ	4085	;# 
   735   000FF6                     TBLPTR          equ	4086	;# 
   736   000FF6                     TBLPTRL         equ	4086	;# 
   737   000FF7                     TBLPTRH         equ	4087	;# 
   738   000FF8                     TBLPTRU         equ	4088	;# 
   739   000FF9                     PCLAT           equ	4089	;# 
   740   000FF9                     PC              equ	4089	;# 
   741   000FF9                     PCL             equ	4089	;# 
   742   000FFA                     PCLATH          equ	4090	;# 
   743   000FFB                     PCLATU          equ	4091	;# 
   744   000FFC                     STKPTR          equ	4092	;# 
   745   000FFD                     TOS             equ	4093	;# 
   746   000FFD                     TOSL            equ	4093	;# 
   747   000FFE                     TOSH            equ	4094	;# 
   748   000FFF                     TOSU            equ	4095	;# 
   749   000E80                     MAADR5          equ	3712	;# 
   750   000E81                     MAADR6          equ	3713	;# 
   751   000E82                     MAADR3          equ	3714	;# 
   752   000E83                     MAADR4          equ	3715	;# 
   753   000E84                     MAADR1          equ	3716	;# 
   754   000E85                     MAADR2          equ	3717	;# 
   755   000E8A                     MISTAT          equ	3722	;# 
   756   000E97                     EFLOCON         equ	3735	;# 
   757   000E98                     EPAUS           equ	3736	;# 
   758   000E98                     EPAUSL          equ	3736	;# 
   759   000E99                     EPAUSH          equ	3737	;# 
   760   000EA0                     MACON1          equ	3744	;# 
   761   000EA2                     MACON3          equ	3746	;# 
   762   000EA3                     MACON4          equ	3747	;# 
   763   000EA4                     MABBIPG         equ	3748	;# 
   764   000EA6                     MAIPG           equ	3750	;# 
   765   000EA6                     MAIPGL          equ	3750	;# 
   766   000EA7                     MAIPGH          equ	3751	;# 
   767   000EAA                     MAMXFL          equ	3754	;# 
   768   000EAA                     MAMXFLL         equ	3754	;# 
   769   000EAB                     MAMXFLH         equ	3755	;# 
   770   000EB2                     MICMD           equ	3762	;# 
   771   000EB4                     MIREGADR        equ	3764	;# 
   772   000EB6                     MIWR            equ	3766	;# 
   773   000EB6                     MIWRL           equ	3766	;# 
   774   000EB7                     MIWRH           equ	3767	;# 
   775   000EB8                     MIRD            equ	3768	;# 
   776   000EB8                     MIRDL           equ	3768	;# 
   777   000EB9                     MIRDH           equ	3769	;# 
   778   000EC0                     EHT0            equ	3776	;# 
   779   000EC1                     EHT1            equ	3777	;# 
   780   000EC2                     EHT2            equ	3778	;# 
   781   000EC3                     EHT3            equ	3779	;# 
   782   000EC4                     EHT4            equ	3780	;# 
   783   000EC5                     EHT5            equ	3781	;# 
   784   000EC6                     EHT6            equ	3782	;# 
   785   000EC7                     EHT7            equ	3783	;# 
   786   000EC8                     EPMM0           equ	3784	;# 
   787   000EC9                     EPMM1           equ	3785	;# 
   788   000ECA                     EPMM2           equ	3786	;# 
   789   000ECB                     EPMM3           equ	3787	;# 
   790   000ECC                     EPMM4           equ	3788	;# 
   791   000ECD                     EPMM5           equ	3789	;# 
   792   000ECE                     EPMM6           equ	3790	;# 
   793   000ECF                     EPMM7           equ	3791	;# 
   794   000ED0                     EPMCS           equ	3792	;# 
   795   000ED0                     EPMCSL          equ	3792	;# 
   796   000ED1                     EPMCSH          equ	3793	;# 
   797   000ED4                     EPMO            equ	3796	;# 
   798   000ED4                     EPMOL           equ	3796	;# 
   799   000ED5                     EPMOH           equ	3797	;# 
   800   000ED8                     ERXFCON         equ	3800	;# 
   801   000ED9                     EPKTCNT         equ	3801	;# 
   802   000EE2                     EWRPT           equ	3810	;# 
   803   000EE2                     EWRPTL          equ	3810	;# 
   804   000EE3                     EWRPTH          equ	3811	;# 
   805   000EE4                     ETXST           equ	3812	;# 
   806   000EE4                     ETXSTL          equ	3812	;# 
   807   000EE5                     ETXSTH          equ	3813	;# 
   808   000EE6                     ETXND           equ	3814	;# 
   809   000EE6                     ETXNDL          equ	3814	;# 
   810   000EE7                     ETXNDH          equ	3815	;# 
   811   000EE8                     ERXST           equ	3816	;# 
   812   000EE8                     ERXSTL          equ	3816	;# 
   813   000EE9                     ERXSTH          equ	3817	;# 
   814   000EEA                     ERXND           equ	3818	;# 
   815   000EEA                     ERXNDL          equ	3818	;# 
   816   000EEB                     ERXNDH          equ	3819	;# 
   817   000EEC                     ERXRDPT         equ	3820	;# 
   818   000EEC                     ERXRDPTL        equ	3820	;# 
   819   000EED                     ERXRDPTH        equ	3821	;# 
   820   000EEE                     ERXWRPT         equ	3822	;# 
   821   000EEE                     ERXWRPTL        equ	3822	;# 
   822   000EEF                     ERXWRPTH        equ	3823	;# 
   823   000EF0                     EDMAST          equ	3824	;# 
   824   000EF0                     EDMASTL         equ	3824	;# 
   825   000EF1                     EDMASTH         equ	3825	;# 
   826   000EF2                     EDMAND          equ	3826	;# 
   827   000EF2                     EDMANDL         equ	3826	;# 
   828   000EF3                     EDMANDH         equ	3827	;# 
   829   000EF4                     EDMADST         equ	3828	;# 
   830   000EF4                     EDMADSTL        equ	3828	;# 
   831   000EF5                     EDMADSTH        equ	3829	;# 
   832   000EF6                     EDMACS          equ	3830	;# 
   833   000EF6                     EDMACSL         equ	3830	;# 
   834   000EF7                     EDMACSH         equ	3831	;# 
   835   000EFB                     EIE             equ	3835	;# 
   836   000EFD                     ESTAT           equ	3837	;# 
   837   000EFE                     ECON2           equ	3838	;# 
   838   000F60                     EIR             equ	3936	;# 
   839   000F61                     EDATA           equ	3937	;# 
   840   000F62                     SSP2CON2        equ	3938	;# 
   841   000F63                     SSP2CON1        equ	3939	;# 
   842   000F64                     SSP2STAT        equ	3940	;# 
   843   000F65                     SSP2ADD         equ	3941	;# 
   844   000F66                     SSP2BUF         equ	3942	;# 
   845   000F67                     ECCP2DEL        equ	3943	;# 
   846   000F68                     ECCP2AS         equ	3944	;# 
   847   000F69                     ECCP3DEL        equ	3945	;# 
   848   000F6A                     ECCP3AS         equ	3946	;# 
   849   000F6B                     RCSTA2          equ	3947	;# 
   850   000F6C                     TXSTA2          equ	3948	;# 
   851   000F6D                     TXREG2          equ	3949	;# 
   852   000F6E                     RCREG2          equ	3950	;# 
   853   000F6F                     SPBRG2          equ	3951	;# 
   854   000F70                     CCP5CON         equ	3952	;# 
   855   000F71                     CCPR5           equ	3953	;# 
   856   000F71                     CCPR5L          equ	3953	;# 
   857   000F72                     CCPR5H          equ	3954	;# 
   858   000F73                     CCP4CON         equ	3955	;# 
   859   000F74                     CCPR4           equ	3956	;# 
   860   000F74                     CCPR4L          equ	3956	;# 
   861   000F75                     CCPR4H          equ	3957	;# 
   862   000F76                     T4CON           equ	3958	;# 
   863   000F77                     PR4             equ	3959	;# 
   864   000F78                     TMR4            equ	3960	;# 
   865   000F79                     ECCP1DEL        equ	3961	;# 
   866   000F7A                     ERDPT           equ	3962	;# 
   867   000F7A                     ERDPTL          equ	3962	;# 
   868   000F7B                     ERDPTH          equ	3963	;# 
   869   000F7C                     BAUDCON2        equ	3964	;# 
   870   000F7C                     BAUDCTL2        equ	3964	;# 
   871   000F7D                     SPBRGH2         equ	3965	;# 
   872   000F7E                     BAUDCON1        equ	3966	;# 
   873   000F7E                     BAUDCON         equ	3966	;# 
   874   000F7E                     BAUDCTL         equ	3966	;# 
   875   000F7E                     BAUDCTL1        equ	3966	;# 
   876   000F7F                     SPBRGH1         equ	3967	;# 
   877   000F7F                     SPBRGH          equ	3967	;# 
   878   000F80                     PORTA           equ	3968	;# 
   879   000F81                     PORTB           equ	3969	;# 
   880   000F82                     PORTC           equ	3970	;# 
   881   000F83                     PORTD           equ	3971	;# 
   882   000F84                     PORTE           equ	3972	;# 
   883   000F85                     PORTF           equ	3973	;# 
   884   000F86                     PORTG           equ	3974	;# 
   885   000F87                     PORTH           equ	3975	;# 
   886   000F88                     PORTJ           equ	3976	;# 
   887   000F89                     LATA            equ	3977	;# 
   888   000F8A                     LATB            equ	3978	;# 
   889   000F8B                     LATC            equ	3979	;# 
   890   000F8C                     LATD            equ	3980	;# 
   891   000F8D                     LATE            equ	3981	;# 
   892   000F8E                     LATF            equ	3982	;# 
   893   000F8F                     LATG            equ	3983	;# 
   894   000F90                     LATH            equ	3984	;# 
   895   000F91                     LATJ            equ	3985	;# 
   896   000F92                     TRISA           equ	3986	;# 
   897   000F92                     DDRA            equ	3986	;# 
   898   000F93                     TRISB           equ	3987	;# 
   899   000F93                     DDRB            equ	3987	;# 
   900   000F94                     TRISC           equ	3988	;# 
   901   000F94                     DDRC            equ	3988	;# 
   902   000F95                     TRISD           equ	3989	;# 
   903   000F95                     DDRD            equ	3989	;# 
   904   000F96                     TRISE           equ	3990	;# 
   905   000F96                     DDRE            equ	3990	;# 
   906   000F97                     TRISF           equ	3991	;# 
   907   000F97                     DDRF            equ	3991	;# 
   908   000F98                     TRISG           equ	3992	;# 
   909   000F98                     DDRG            equ	3992	;# 
   910   000F99                     TRISH           equ	3993	;# 
   911   000F99                     DDRH            equ	3993	;# 
   912   000F9A                     TRISJ           equ	3994	;# 
   913   000F9A                     DDRJ            equ	3994	;# 
   914   000F9B                     OSCTUNE         equ	3995	;# 
   915   000F9C                     MEMCON          equ	3996	;# 
   916   000F9D                     PIE1            equ	3997	;# 
   917   000F9E                     PIR1            equ	3998	;# 
   918   000F9F                     IPR1            equ	3999	;# 
   919   000FA0                     PIE2            equ	4000	;# 
   920   000FA1                     PIR2            equ	4001	;# 
   921   000FA2                     IPR2            equ	4002	;# 
   922   000FA3                     PIE3            equ	4003	;# 
   923   000FA4                     PIR3            equ	4004	;# 
   924   000FA5                     IPR3            equ	4005	;# 
   925   000FA6                     EECON1          equ	4006	;# 
   926   000FA7                     EECON2          equ	4007	;# 
   927   000FAB                     RCSTA1          equ	4011	;# 
   928   000FAB                     RCSTA           equ	4011	;# 
   929   000FAC                     TXSTA1          equ	4012	;# 
   930   000FAC                     TXSTA           equ	4012	;# 
   931   000FAD                     TXREG1          equ	4013	;# 
   932   000FAD                     TXREG           equ	4013	;# 
   933   000FAE                     RCREG1          equ	4014	;# 
   934   000FAE                     RCREG           equ	4014	;# 
   935   000FAF                     SPBRG1          equ	4015	;# 
   936   000FAF                     SPBRG           equ	4015	;# 
   937   000FB0                     PSPCON          equ	4016	;# 
   938   000FB1                     T3CON           equ	4017	;# 
   939   000FB2                     TMR3            equ	4018	;# 
   940   000FB2                     TMR3L           equ	4018	;# 
   941   000FB3                     TMR3H           equ	4019	;# 
   942   000FB4                     CMCON           equ	4020	;# 
   943   000FB5                     CVRCON          equ	4021	;# 
   944   000FB6                     ECCP1AS         equ	4022	;# 
   945   000FB7                     CCP3CON         equ	4023	;# 
   946   000FB7                     ECCP3CON        equ	4023	;# 
   947   000FB8                     CCPR3           equ	4024	;# 
   948   000FB8                     CCPR3L          equ	4024	;# 
   949   000FB9                     CCPR3H          equ	4025	;# 
   950   000FBA                     CCP2CON         equ	4026	;# 
   951   000FBA                     ECCP2CON        equ	4026	;# 
   952   000FBB                     CCPR2           equ	4027	;# 
   953   000FBB                     CCPR2L          equ	4027	;# 
   954   000FBC                     CCPR2H          equ	4028	;# 
   955   000FBD                     CCP1CON         equ	4029	;# 
   956   000FBD                     ECCP1CON        equ	4029	;# 
   957   000FBE                     CCPR1           equ	4030	;# 
   958   000FBE                     CCPR1L          equ	4030	;# 
   959   000FBF                     CCPR1H          equ	4031	;# 
   960   000FC0                     ADCON2          equ	4032	;# 
   961   000FC1                     ADCON1          equ	4033	;# 
   962   000FC2                     ADCON0          equ	4034	;# 
   963   000FC3                     ADRES           equ	4035	;# 
   964   000FC3                     ADRESL          equ	4035	;# 
   965   000FC4                     ADRESH          equ	4036	;# 
   966   000FC5                     SSP1CON2        equ	4037	;# 
   967   000FC5                     SSPCON2         equ	4037	;# 
   968   000FC6                     SSP1CON1        equ	4038	;# 
   969   000FC6                     SSPCON1         equ	4038	;# 
   970   000FC7                     SSP1STAT        equ	4039	;# 
   971   000FC7                     SSPSTAT         equ	4039	;# 
   972   000FC8                     SSP1ADD         equ	4040	;# 
   973   000FC8                     SSPADD          equ	4040	;# 
   974   000FC9                     SSP1BUF         equ	4041	;# 
   975   000FC9                     SSPBUF          equ	4041	;# 
   976   000FCA                     T2CON           equ	4042	;# 
   977   000FCB                     PR2             equ	4043	;# 
   978   000FCC                     TMR2            equ	4044	;# 
   979   000FCD                     T1CON           equ	4045	;# 
   980   000FCE                     TMR1            equ	4046	;# 
   981   000FCE                     TMR1L           equ	4046	;# 
   982   000FCF                     TMR1H           equ	4047	;# 
   983   000FD0                     RCON            equ	4048	;# 
   984   000FD1                     WDTCON          equ	4049	;# 
   985   000FD2                     ECON1           equ	4050	;# 
   986   000FD3                     OSCCON          equ	4051	;# 
   987   000FD5                     T0CON           equ	4053	;# 
   988   000FD6                     TMR0            equ	4054	;# 
   989   000FD6                     TMR0L           equ	4054	;# 
   990   000FD7                     TMR0H           equ	4055	;# 
   991   000FD8                     STATUS          equ	4056	;# 
   992   000FD9                     FSR2            equ	4057	;# 
   993   000FD9                     FSR2L           equ	4057	;# 
   994   000FDA                     FSR2H           equ	4058	;# 
   995   000FDB                     PLUSW2          equ	4059	;# 
   996   000FDC                     PREINC2         equ	4060	;# 
   997   000FDD                     POSTDEC2        equ	4061	;# 
   998   000FDE                     POSTINC2        equ	4062	;# 
   999   000FDF                     INDF2           equ	4063	;# 
  1000   000FE0                     BSR             equ	4064	;# 
  1001   000FE1                     FSR1            equ	4065	;# 
  1002   000FE1                     FSR1L           equ	4065	;# 
  1003   000FE2                     FSR1H           equ	4066	;# 
  1004   000FE3                     PLUSW1          equ	4067	;# 
  1005   000FE4                     PREINC1         equ	4068	;# 
  1006   000FE5                     POSTDEC1        equ	4069	;# 
  1007   000FE6                     POSTINC1        equ	4070	;# 
  1008   000FE7                     INDF1           equ	4071	;# 
  1009   000FE8                     WREG            equ	4072	;# 
  1010   000FE9                     FSR0            equ	4073	;# 
  1011   000FE9                     FSR0L           equ	4073	;# 
  1012   000FEA                     FSR0H           equ	4074	;# 
  1013   000FEB                     PLUSW0          equ	4075	;# 
  1014   000FEC                     PREINC0         equ	4076	;# 
  1015   000FED                     POSTDEC0        equ	4077	;# 
  1016   000FEE                     POSTINC0        equ	4078	;# 
  1017   000FEF                     INDF0           equ	4079	;# 
  1018   000FF0                     INTCON3         equ	4080	;# 
  1019   000FF1                     INTCON2         equ	4081	;# 
  1020   000FF2                     INTCON          equ	4082	;# 
  1021   000FF3                     PROD            equ	4083	;# 
  1022   000FF3                     PRODL           equ	4083	;# 
  1023   000FF4                     PRODH           equ	4084	;# 
  1024   000FF5                     TABLAT          equ	4085	;# 
  1025   000FF6                     TBLPTR          equ	4086	;# 
  1026   000FF6                     TBLPTRL         equ	4086	;# 
  1027   000FF7                     TBLPTRH         equ	4087	;# 
  1028   000FF8                     TBLPTRU         equ	4088	;# 
  1029   000FF9                     PCLAT           equ	4089	;# 
  1030   000FF9                     PC              equ	4089	;# 
  1031   000FF9                     PCL             equ	4089	;# 
  1032   000FFA                     PCLATH          equ	4090	;# 
  1033   000FFB                     PCLATU          equ	4091	;# 
  1034   000FFC                     STKPTR          equ	4092	;# 
  1035   000FFD                     TOS             equ	4093	;# 
  1036   000FFD                     TOSL            equ	4093	;# 
  1037   000FFE                     TOSH            equ	4094	;# 
  1038   000FFF                     TOSU            equ	4095	;# 
  1039   000E80                     MAADR5          equ	3712	;# 
  1040   000E81                     MAADR6          equ	3713	;# 
  1041   000E82                     MAADR3          equ	3714	;# 
  1042   000E83                     MAADR4          equ	3715	;# 
  1043   000E84                     MAADR1          equ	3716	;# 
  1044   000E85                     MAADR2          equ	3717	;# 
  1045   000E8A                     MISTAT          equ	3722	;# 
  1046   000E97                     EFLOCON         equ	3735	;# 
  1047   000E98                     EPAUS           equ	3736	;# 
  1048   000E98                     EPAUSL          equ	3736	;# 
  1049   000E99                     EPAUSH          equ	3737	;# 
  1050   000EA0                     MACON1          equ	3744	;# 
  1051   000EA2                     MACON3          equ	3746	;# 
  1052   000EA3                     MACON4          equ	3747	;# 
  1053   000EA4                     MABBIPG         equ	3748	;# 
  1054   000EA6                     MAIPG           equ	3750	;# 
  1055   000EA6                     MAIPGL          equ	3750	;# 
  1056   000EA7                     MAIPGH          equ	3751	;# 
  1057   000EAA                     MAMXFL          equ	3754	;# 
  1058   000EAA                     MAMXFLL         equ	3754	;# 
  1059   000EAB                     MAMXFLH         equ	3755	;# 
  1060   000EB2                     MICMD           equ	3762	;# 
  1061   000EB4                     MIREGADR        equ	3764	;# 
  1062   000EB6                     MIWR            equ	3766	;# 
  1063   000EB6                     MIWRL           equ	3766	;# 
  1064   000EB7                     MIWRH           equ	3767	;# 
  1065   000EB8                     MIRD            equ	3768	;# 
  1066   000EB8                     MIRDL           equ	3768	;# 
  1067   000EB9                     MIRDH           equ	3769	;# 
  1068   000EC0                     EHT0            equ	3776	;# 
  1069   000EC1                     EHT1            equ	3777	;# 
  1070   000EC2                     EHT2            equ	3778	;# 
  1071   000EC3                     EHT3            equ	3779	;# 
  1072   000EC4                     EHT4            equ	3780	;# 
  1073   000EC5                     EHT5            equ	3781	;# 
  1074   000EC6                     EHT6            equ	3782	;# 
  1075   000EC7                     EHT7            equ	3783	;# 
  1076   000EC8                     EPMM0           equ	3784	;# 
  1077   000EC9                     EPMM1           equ	3785	;# 
  1078   000ECA                     EPMM2           equ	3786	;# 
  1079   000ECB                     EPMM3           equ	3787	;# 
  1080   000ECC                     EPMM4           equ	3788	;# 
  1081   000ECD                     EPMM5           equ	3789	;# 
  1082   000ECE                     EPMM6           equ	3790	;# 
  1083   000ECF                     EPMM7           equ	3791	;# 
  1084   000ED0                     EPMCS           equ	3792	;# 
  1085   000ED0                     EPMCSL          equ	3792	;# 
  1086   000ED1                     EPMCSH          equ	3793	;# 
  1087   000ED4                     EPMO            equ	3796	;# 
  1088   000ED4                     EPMOL           equ	3796	;# 
  1089   000ED5                     EPMOH           equ	3797	;# 
  1090   000ED8                     ERXFCON         equ	3800	;# 
  1091   000ED9                     EPKTCNT         equ	3801	;# 
  1092   000EE2                     EWRPT           equ	3810	;# 
  1093   000EE2                     EWRPTL          equ	3810	;# 
  1094   000EE3                     EWRPTH          equ	3811	;# 
  1095   000EE4                     ETXST           equ	3812	;# 
  1096   000EE4                     ETXSTL          equ	3812	;# 
  1097   000EE5                     ETXSTH          equ	3813	;# 
  1098   000EE6                     ETXND           equ	3814	;# 
  1099   000EE6                     ETXNDL          equ	3814	;# 
  1100   000EE7                     ETXNDH          equ	3815	;# 
  1101   000EE8                     ERXST           equ	3816	;# 
  1102   000EE8                     ERXSTL          equ	3816	;# 
  1103   000EE9                     ERXSTH          equ	3817	;# 
  1104   000EEA                     ERXND           equ	3818	;# 
  1105   000EEA                     ERXNDL          equ	3818	;# 
  1106   000EEB                     ERXNDH          equ	3819	;# 
  1107   000EEC                     ERXRDPT         equ	3820	;# 
  1108   000EEC                     ERXRDPTL        equ	3820	;# 
  1109   000EED                     ERXRDPTH        equ	3821	;# 
  1110   000EEE                     ERXWRPT         equ	3822	;# 
  1111   000EEE                     ERXWRPTL        equ	3822	;# 
  1112   000EEF                     ERXWRPTH        equ	3823	;# 
  1113   000EF0                     EDMAST          equ	3824	;# 
  1114   000EF0                     EDMASTL         equ	3824	;# 
  1115   000EF1                     EDMASTH         equ	3825	;# 
  1116   000EF2                     EDMAND          equ	3826	;# 
  1117   000EF2                     EDMANDL         equ	3826	;# 
  1118   000EF3                     EDMANDH         equ	3827	;# 
  1119   000EF4                     EDMADST         equ	3828	;# 
  1120   000EF4                     EDMADSTL        equ	3828	;# 
  1121   000EF5                     EDMADSTH        equ	3829	;# 
  1122   000EF6                     EDMACS          equ	3830	;# 
  1123   000EF6                     EDMACSL         equ	3830	;# 
  1124   000EF7                     EDMACSH         equ	3831	;# 
  1125   000EFB                     EIE             equ	3835	;# 
  1126   000EFD                     ESTAT           equ	3837	;# 
  1127   000EFE                     ECON2           equ	3838	;# 
  1128   000F60                     EIR             equ	3936	;# 
  1129   000F61                     EDATA           equ	3937	;# 
  1130   000F62                     SSP2CON2        equ	3938	;# 
  1131   000F63                     SSP2CON1        equ	3939	;# 
  1132   000F64                     SSP2STAT        equ	3940	;# 
  1133   000F65                     SSP2ADD         equ	3941	;# 
  1134   000F66                     SSP2BUF         equ	3942	;# 
  1135   000F67                     ECCP2DEL        equ	3943	;# 
  1136   000F68                     ECCP2AS         equ	3944	;# 
  1137   000F69                     ECCP3DEL        equ	3945	;# 
  1138   000F6A                     ECCP3AS         equ	3946	;# 
  1139   000F6B                     RCSTA2          equ	3947	;# 
  1140   000F6C                     TXSTA2          equ	3948	;# 
  1141   000F6D                     TXREG2          equ	3949	;# 
  1142   000F6E                     RCREG2          equ	3950	;# 
  1143   000F6F                     SPBRG2          equ	3951	;# 
  1144   000F70                     CCP5CON         equ	3952	;# 
  1145   000F71                     CCPR5           equ	3953	;# 
  1146   000F71                     CCPR5L          equ	3953	;# 
  1147   000F72                     CCPR5H          equ	3954	;# 
  1148   000F73                     CCP4CON         equ	3955	;# 
  1149   000F74                     CCPR4           equ	3956	;# 
  1150   000F74                     CCPR4L          equ	3956	;# 
  1151   000F75                     CCPR4H          equ	3957	;# 
  1152   000F76                     T4CON           equ	3958	;# 
  1153   000F77                     PR4             equ	3959	;# 
  1154   000F78                     TMR4            equ	3960	;# 
  1155   000F79                     ECCP1DEL        equ	3961	;# 
  1156   000F7A                     ERDPT           equ	3962	;# 
  1157   000F7A                     ERDPTL          equ	3962	;# 
  1158   000F7B                     ERDPTH          equ	3963	;# 
  1159   000F7C                     BAUDCON2        equ	3964	;# 
  1160   000F7C                     BAUDCTL2        equ	3964	;# 
  1161   000F7D                     SPBRGH2         equ	3965	;# 
  1162   000F7E                     BAUDCON1        equ	3966	;# 
  1163   000F7E                     BAUDCON         equ	3966	;# 
  1164   000F7E                     BAUDCTL         equ	3966	;# 
  1165   000F7E                     BAUDCTL1        equ	3966	;# 
  1166   000F7F                     SPBRGH1         equ	3967	;# 
  1167   000F7F                     SPBRGH          equ	3967	;# 
  1168   000F80                     PORTA           equ	3968	;# 
  1169   000F81                     PORTB           equ	3969	;# 
  1170   000F82                     PORTC           equ	3970	;# 
  1171   000F83                     PORTD           equ	3971	;# 
  1172   000F84                     PORTE           equ	3972	;# 
  1173   000F85                     PORTF           equ	3973	;# 
  1174   000F86                     PORTG           equ	3974	;# 
  1175   000F87                     PORTH           equ	3975	;# 
  1176   000F88                     PORTJ           equ	3976	;# 
  1177   000F89                     LATA            equ	3977	;# 
  1178   000F8A                     LATB            equ	3978	;# 
  1179   000F8B                     LATC            equ	3979	;# 
  1180   000F8C                     LATD            equ	3980	;# 
  1181   000F8D                     LATE            equ	3981	;# 
  1182   000F8E                     LATF            equ	3982	;# 
  1183   000F8F                     LATG            equ	3983	;# 
  1184   000F90                     LATH            equ	3984	;# 
  1185   000F91                     LATJ            equ	3985	;# 
  1186   000F92                     TRISA           equ	3986	;# 
  1187   000F92                     DDRA            equ	3986	;# 
  1188   000F93                     TRISB           equ	3987	;# 
  1189   000F93                     DDRB            equ	3987	;# 
  1190   000F94                     TRISC           equ	3988	;# 
  1191   000F94                     DDRC            equ	3988	;# 
  1192   000F95                     TRISD           equ	3989	;# 
  1193   000F95                     DDRD            equ	3989	;# 
  1194   000F96                     TRISE           equ	3990	;# 
  1195   000F96                     DDRE            equ	3990	;# 
  1196   000F97                     TRISF           equ	3991	;# 
  1197   000F97                     DDRF            equ	3991	;# 
  1198   000F98                     TRISG           equ	3992	;# 
  1199   000F98                     DDRG            equ	3992	;# 
  1200   000F99                     TRISH           equ	3993	;# 
  1201   000F99                     DDRH            equ	3993	;# 
  1202   000F9A                     TRISJ           equ	3994	;# 
  1203   000F9A                     DDRJ            equ	3994	;# 
  1204   000F9B                     OSCTUNE         equ	3995	;# 
  1205   000F9C                     MEMCON          equ	3996	;# 
  1206   000F9D                     PIE1            equ	3997	;# 
  1207   000F9E                     PIR1            equ	3998	;# 
  1208   000F9F                     IPR1            equ	3999	;# 
  1209   000FA0                     PIE2            equ	4000	;# 
  1210   000FA1                     PIR2            equ	4001	;# 
  1211   000FA2                     IPR2            equ	4002	;# 
  1212   000FA3                     PIE3            equ	4003	;# 
  1213   000FA4                     PIR3            equ	4004	;# 
  1214   000FA5                     IPR3            equ	4005	;# 
  1215   000FA6                     EECON1          equ	4006	;# 
  1216   000FA7                     EECON2          equ	4007	;# 
  1217   000FAB                     RCSTA1          equ	4011	;# 
  1218   000FAB                     RCSTA           equ	4011	;# 
  1219   000FAC                     TXSTA1          equ	4012	;# 
  1220   000FAC                     TXSTA           equ	4012	;# 
  1221   000FAD                     TXREG1          equ	4013	;# 
  1222   000FAD                     TXREG           equ	4013	;# 
  1223   000FAE                     RCREG1          equ	4014	;# 
  1224   000FAE                     RCREG           equ	4014	;# 
  1225   000FAF                     SPBRG1          equ	4015	;# 
  1226   000FAF                     SPBRG           equ	4015	;# 
  1227   000FB0                     PSPCON          equ	4016	;# 
  1228   000FB1                     T3CON           equ	4017	;# 
  1229   000FB2                     TMR3            equ	4018	;# 
  1230   000FB2                     TMR3L           equ	4018	;# 
  1231   000FB3                     TMR3H           equ	4019	;# 
  1232   000FB4                     CMCON           equ	4020	;# 
  1233   000FB5                     CVRCON          equ	4021	;# 
  1234   000FB6                     ECCP1AS         equ	4022	;# 
  1235   000FB7                     CCP3CON         equ	4023	;# 
  1236   000FB7                     ECCP3CON        equ	4023	;# 
  1237   000FB8                     CCPR3           equ	4024	;# 
  1238   000FB8                     CCPR3L          equ	4024	;# 
  1239   000FB9                     CCPR3H          equ	4025	;# 
  1240   000FBA                     CCP2CON         equ	4026	;# 
  1241   000FBA                     ECCP2CON        equ	4026	;# 
  1242   000FBB                     CCPR2           equ	4027	;# 
  1243   000FBB                     CCPR2L          equ	4027	;# 
  1244   000FBC                     CCPR2H          equ	4028	;# 
  1245   000FBD                     CCP1CON         equ	4029	;# 
  1246   000FBD                     ECCP1CON        equ	4029	;# 
  1247   000FBE                     CCPR1           equ	4030	;# 
  1248   000FBE                     CCPR1L          equ	4030	;# 
  1249   000FBF                     CCPR1H          equ	4031	;# 
  1250   000FC0                     ADCON2          equ	4032	;# 
  1251   000FC1                     ADCON1          equ	4033	;# 
  1252   000FC2                     ADCON0          equ	4034	;# 
  1253   000FC3                     ADRES           equ	4035	;# 
  1254   000FC3                     ADRESL          equ	4035	;# 
  1255   000FC4                     ADRESH          equ	4036	;# 
  1256   000FC5                     SSP1CON2        equ	4037	;# 
  1257   000FC5                     SSPCON2         equ	4037	;# 
  1258   000FC6                     SSP1CON1        equ	4038	;# 
  1259   000FC6                     SSPCON1         equ	4038	;# 
  1260   000FC7                     SSP1STAT        equ	4039	;# 
  1261   000FC7                     SSPSTAT         equ	4039	;# 
  1262   000FC8                     SSP1ADD         equ	4040	;# 
  1263   000FC8                     SSPADD          equ	4040	;# 
  1264   000FC9                     SSP1BUF         equ	4041	;# 
  1265   000FC9                     SSPBUF          equ	4041	;# 
  1266   000FCA                     T2CON           equ	4042	;# 
  1267   000FCB                     PR2             equ	4043	;# 
  1268   000FCC                     TMR2            equ	4044	;# 
  1269   000FCD                     T1CON           equ	4045	;# 
  1270   000FCE                     TMR1            equ	4046	;# 
  1271   000FCE                     TMR1L           equ	4046	;# 
  1272   000FCF                     TMR1H           equ	4047	;# 
  1273   000FD0                     RCON            equ	4048	;# 
  1274   000FD1                     WDTCON          equ	4049	;# 
  1275   000FD2                     ECON1           equ	4050	;# 
  1276   000FD3                     OSCCON          equ	4051	;# 
  1277   000FD5                     T0CON           equ	4053	;# 
  1278   000FD6                     TMR0            equ	4054	;# 
  1279   000FD6                     TMR0L           equ	4054	;# 
  1280   000FD7                     TMR0H           equ	4055	;# 
  1281   000FD8                     STATUS          equ	4056	;# 
  1282   000FD9                     FSR2            equ	4057	;# 
  1283   000FD9                     FSR2L           equ	4057	;# 
  1284   000FDA                     FSR2H           equ	4058	;# 
  1285   000FDB                     PLUSW2          equ	4059	;# 
  1286   000FDC                     PREINC2         equ	4060	;# 
  1287   000FDD                     POSTDEC2        equ	4061	;# 
  1288   000FDE                     POSTINC2        equ	4062	;# 
  1289   000FDF                     INDF2           equ	4063	;# 
  1290   000FE0                     BSR             equ	4064	;# 
  1291   000FE1                     FSR1            equ	4065	;# 
  1292   000FE1                     FSR1L           equ	4065	;# 
  1293   000FE2                     FSR1H           equ	4066	;# 
  1294   000FE3                     PLUSW1          equ	4067	;# 
  1295   000FE4                     PREINC1         equ	4068	;# 
  1296   000FE5                     POSTDEC1        equ	4069	;# 
  1297   000FE6                     POSTINC1        equ	4070	;# 
  1298   000FE7                     INDF1           equ	4071	;# 
  1299   000FE8                     WREG            equ	4072	;# 
  1300   000FE9                     FSR0            equ	4073	;# 
  1301   000FE9                     FSR0L           equ	4073	;# 
  1302   000FEA                     FSR0H           equ	4074	;# 
  1303   000FEB                     PLUSW0          equ	4075	;# 
  1304   000FEC                     PREINC0         equ	4076	;# 
  1305   000FED                     POSTDEC0        equ	4077	;# 
  1306   000FEE                     POSTINC0        equ	4078	;# 
  1307   000FEF                     INDF0           equ	4079	;# 
  1308   000FF0                     INTCON3         equ	4080	;# 
  1309   000FF1                     INTCON2         equ	4081	;# 
  1310   000FF2                     INTCON          equ	4082	;# 
  1311   000FF3                     PROD            equ	4083	;# 
  1312   000FF3                     PRODL           equ	4083	;# 
  1313   000FF4                     PRODH           equ	4084	;# 
  1314   000FF5                     TABLAT          equ	4085	;# 
  1315   000FF6                     TBLPTR          equ	4086	;# 
  1316   000FF6                     TBLPTRL         equ	4086	;# 
  1317   000FF7                     TBLPTRH         equ	4087	;# 
  1318   000FF8                     TBLPTRU         equ	4088	;# 
  1319   000FF9                     PCLAT           equ	4089	;# 
  1320   000FF9                     PC              equ	4089	;# 
  1321   000FF9                     PCL             equ	4089	;# 
  1322   000FFA                     PCLATH          equ	4090	;# 
  1323   000FFB                     PCLATU          equ	4091	;# 
  1324   000FFC                     STKPTR          equ	4092	;# 
  1325   000FFD                     TOS             equ	4093	;# 
  1326   000FFD                     TOSL            equ	4093	;# 
  1327   000FFE                     TOSH            equ	4094	;# 
  1328   000FFF                     TOSU            equ	4095	;# 
  1329   000E80                     MAADR5          equ	3712	;# 
  1330   000E81                     MAADR6          equ	3713	;# 
  1331   000E82                     MAADR3          equ	3714	;# 
  1332   000E83                     MAADR4          equ	3715	;# 
  1333   000E84                     MAADR1          equ	3716	;# 
  1334   000E85                     MAADR2          equ	3717	;# 
  1335   000E8A                     MISTAT          equ	3722	;# 
  1336   000E97                     EFLOCON         equ	3735	;# 
  1337   000E98                     EPAUS           equ	3736	;# 
  1338   000E98                     EPAUSL          equ	3736	;# 
  1339   000E99                     EPAUSH          equ	3737	;# 
  1340   000EA0                     MACON1          equ	3744	;# 
  1341   000EA2                     MACON3          equ	3746	;# 
  1342   000EA3                     MACON4          equ	3747	;# 
  1343   000EA4                     MABBIPG         equ	3748	;# 
  1344   000EA6                     MAIPG           equ	3750	;# 
  1345   000EA6                     MAIPGL          equ	3750	;# 
  1346   000EA7                     MAIPGH          equ	3751	;# 
  1347   000EAA                     MAMXFL          equ	3754	;# 
  1348   000EAA                     MAMXFLL         equ	3754	;# 
  1349   000EAB                     MAMXFLH         equ	3755	;# 
  1350   000EB2                     MICMD           equ	3762	;# 
  1351   000EB4                     MIREGADR        equ	3764	;# 
  1352   000EB6                     MIWR            equ	3766	;# 
  1353   000EB6                     MIWRL           equ	3766	;# 
  1354   000EB7                     MIWRH           equ	3767	;# 
  1355   000EB8                     MIRD            equ	3768	;# 
  1356   000EB8                     MIRDL           equ	3768	;# 
  1357   000EB9                     MIRDH           equ	3769	;# 
  1358   000EC0                     EHT0            equ	3776	;# 
  1359   000EC1                     EHT1            equ	3777	;# 
  1360   000EC2                     EHT2            equ	3778	;# 
  1361   000EC3                     EHT3            equ	3779	;# 
  1362   000EC4                     EHT4            equ	3780	;# 
  1363   000EC5                     EHT5            equ	3781	;# 
  1364   000EC6                     EHT6            equ	3782	;# 
  1365   000EC7                     EHT7            equ	3783	;# 
  1366   000EC8                     EPMM0           equ	3784	;# 
  1367   000EC9                     EPMM1           equ	3785	;# 
  1368   000ECA                     EPMM2           equ	3786	;# 
  1369   000ECB                     EPMM3           equ	3787	;# 
  1370   000ECC                     EPMM4           equ	3788	;# 
  1371   000ECD                     EPMM5           equ	3789	;# 
  1372   000ECE                     EPMM6           equ	3790	;# 
  1373   000ECF                     EPMM7           equ	3791	;# 
  1374   000ED0                     EPMCS           equ	3792	;# 
  1375   000ED0                     EPMCSL          equ	3792	;# 
  1376   000ED1                     EPMCSH          equ	3793	;# 
  1377   000ED4                     EPMO            equ	3796	;# 
  1378   000ED4                     EPMOL           equ	3796	;# 
  1379   000ED5                     EPMOH           equ	3797	;# 
  1380   000ED8                     ERXFCON         equ	3800	;# 
  1381   000ED9                     EPKTCNT         equ	3801	;# 
  1382   000EE2                     EWRPT           equ	3810	;# 
  1383   000EE2                     EWRPTL          equ	3810	;# 
  1384   000EE3                     EWRPTH          equ	3811	;# 
  1385   000EE4                     ETXST           equ	3812	;# 
  1386   000EE4                     ETXSTL          equ	3812	;# 
  1387   000EE5                     ETXSTH          equ	3813	;# 
  1388   000EE6                     ETXND           equ	3814	;# 
  1389   000EE6                     ETXNDL          equ	3814	;# 
  1390   000EE7                     ETXNDH          equ	3815	;# 
  1391   000EE8                     ERXST           equ	3816	;# 
  1392   000EE8                     ERXSTL          equ	3816	;# 
  1393   000EE9                     ERXSTH          equ	3817	;# 
  1394   000EEA                     ERXND           equ	3818	;# 
  1395   000EEA                     ERXNDL          equ	3818	;# 
  1396   000EEB                     ERXNDH          equ	3819	;# 
  1397   000EEC                     ERXRDPT         equ	3820	;# 
  1398   000EEC                     ERXRDPTL        equ	3820	;# 
  1399   000EED                     ERXRDPTH        equ	3821	;# 
  1400   000EEE                     ERXWRPT         equ	3822	;# 
  1401   000EEE                     ERXWRPTL        equ	3822	;# 
  1402   000EEF                     ERXWRPTH        equ	3823	;# 
  1403   000EF0                     EDMAST          equ	3824	;# 
  1404   000EF0                     EDMASTL         equ	3824	;# 
  1405   000EF1                     EDMASTH         equ	3825	;# 
  1406   000EF2                     EDMAND          equ	3826	;# 
  1407   000EF2                     EDMANDL         equ	3826	;# 
  1408   000EF3                     EDMANDH         equ	3827	;# 
  1409   000EF4                     EDMADST         equ	3828	;# 
  1410   000EF4                     EDMADSTL        equ	3828	;# 
  1411   000EF5                     EDMADSTH        equ	3829	;# 
  1412   000EF6                     EDMACS          equ	3830	;# 
  1413   000EF6                     EDMACSL         equ	3830	;# 
  1414   000EF7                     EDMACSH         equ	3831	;# 
  1415   000EFB                     EIE             equ	3835	;# 
  1416   000EFD                     ESTAT           equ	3837	;# 
  1417   000EFE                     ECON2           equ	3838	;# 
  1418   000F60                     EIR             equ	3936	;# 
  1419   000F61                     EDATA           equ	3937	;# 
  1420   000F62                     SSP2CON2        equ	3938	;# 
  1421   000F63                     SSP2CON1        equ	3939	;# 
  1422   000F64                     SSP2STAT        equ	3940	;# 
  1423   000F65                     SSP2ADD         equ	3941	;# 
  1424   000F66                     SSP2BUF         equ	3942	;# 
  1425   000F67                     ECCP2DEL        equ	3943	;# 
  1426   000F68                     ECCP2AS         equ	3944	;# 
  1427   000F69                     ECCP3DEL        equ	3945	;# 
  1428   000F6A                     ECCP3AS         equ	3946	;# 
  1429   000F6B                     RCSTA2          equ	3947	;# 
  1430   000F6C                     TXSTA2          equ	3948	;# 
  1431   000F6D                     TXREG2          equ	3949	;# 
  1432   000F6E                     RCREG2          equ	3950	;# 
  1433   000F6F                     SPBRG2          equ	3951	;# 
  1434   000F70                     CCP5CON         equ	3952	;# 
  1435   000F71                     CCPR5           equ	3953	;# 
  1436   000F71                     CCPR5L          equ	3953	;# 
  1437   000F72                     CCPR5H          equ	3954	;# 
  1438   000F73                     CCP4CON         equ	3955	;# 
  1439   000F74                     CCPR4           equ	3956	;# 
  1440   000F74                     CCPR4L          equ	3956	;# 
  1441   000F75                     CCPR4H          equ	3957	;# 
  1442   000F76                     T4CON           equ	3958	;# 
  1443   000F77                     PR4             equ	3959	;# 
  1444   000F78                     TMR4            equ	3960	;# 
  1445   000F79                     ECCP1DEL        equ	3961	;# 
  1446   000F7A                     ERDPT           equ	3962	;# 
  1447   000F7A                     ERDPTL          equ	3962	;# 
  1448   000F7B                     ERDPTH          equ	3963	;# 
  1449   000F7C                     BAUDCON2        equ	3964	;# 
  1450   000F7C                     BAUDCTL2        equ	3964	;# 
  1451   000F7D                     SPBRGH2         equ	3965	;# 
  1452   000F7E                     BAUDCON1        equ	3966	;# 
  1453   000F7E                     BAUDCON         equ	3966	;# 
  1454   000F7E                     BAUDCTL         equ	3966	;# 
  1455   000F7E                     BAUDCTL1        equ	3966	;# 
  1456   000F7F                     SPBRGH1         equ	3967	;# 
  1457   000F7F                     SPBRGH          equ	3967	;# 
  1458   000F80                     PORTA           equ	3968	;# 
  1459   000F81                     PORTB           equ	3969	;# 
  1460   000F82                     PORTC           equ	3970	;# 
  1461   000F83                     PORTD           equ	3971	;# 
  1462   000F84                     PORTE           equ	3972	;# 
  1463   000F85                     PORTF           equ	3973	;# 
  1464   000F86                     PORTG           equ	3974	;# 
  1465   000F87                     PORTH           equ	3975	;# 
  1466   000F88                     PORTJ           equ	3976	;# 
  1467   000F89                     LATA            equ	3977	;# 
  1468   000F8A                     LATB            equ	3978	;# 
  1469   000F8B                     LATC            equ	3979	;# 
  1470   000F8C                     LATD            equ	3980	;# 
  1471   000F8D                     LATE            equ	3981	;# 
  1472   000F8E                     LATF            equ	3982	;# 
  1473   000F8F                     LATG            equ	3983	;# 
  1474   000F90                     LATH            equ	3984	;# 
  1475   000F91                     LATJ            equ	3985	;# 
  1476   000F92                     TRISA           equ	3986	;# 
  1477   000F92                     DDRA            equ	3986	;# 
  1478   000F93                     TRISB           equ	3987	;# 
  1479   000F93                     DDRB            equ	3987	;# 
  1480   000F94                     TRISC           equ	3988	;# 
  1481   000F94                     DDRC            equ	3988	;# 
  1482   000F95                     TRISD           equ	3989	;# 
  1483   000F95                     DDRD            equ	3989	;# 
  1484   000F96                     TRISE           equ	3990	;# 
  1485   000F96                     DDRE            equ	3990	;# 
  1486   000F97                     TRISF           equ	3991	;# 
  1487   000F97                     DDRF            equ	3991	;# 
  1488   000F98                     TRISG           equ	3992	;# 
  1489   000F98                     DDRG            equ	3992	;# 
  1490   000F99                     TRISH           equ	3993	;# 
  1491   000F99                     DDRH            equ	3993	;# 
  1492   000F9A                     TRISJ           equ	3994	;# 
  1493   000F9A                     DDRJ            equ	3994	;# 
  1494   000F9B                     OSCTUNE         equ	3995	;# 
  1495   000F9C                     MEMCON          equ	3996	;# 
  1496   000F9D                     PIE1            equ	3997	;# 
  1497   000F9E                     PIR1            equ	3998	;# 
  1498   000F9F                     IPR1            equ	3999	;# 
  1499   000FA0                     PIE2            equ	4000	;# 
  1500   000FA1                     PIR2            equ	4001	;# 
  1501   000FA2                     IPR2            equ	4002	;# 
  1502   000FA3                     PIE3            equ	4003	;# 
  1503   000FA4                     PIR3            equ	4004	;# 
  1504   000FA5                     IPR3            equ	4005	;# 
  1505   000FA6                     EECON1          equ	4006	;# 
  1506   000FA7                     EECON2          equ	4007	;# 
  1507   000FAB                     RCSTA1          equ	4011	;# 
  1508   000FAB                     RCSTA           equ	4011	;# 
  1509   000FAC                     TXSTA1          equ	4012	;# 
  1510   000FAC                     TXSTA           equ	4012	;# 
  1511   000FAD                     TXREG1          equ	4013	;# 
  1512   000FAD                     TXREG           equ	4013	;# 
  1513   000FAE                     RCREG1          equ	4014	;# 
  1514   000FAE                     RCREG           equ	4014	;# 
  1515   000FAF                     SPBRG1          equ	4015	;# 
  1516   000FAF                     SPBRG           equ	4015	;# 
  1517   000FB0                     PSPCON          equ	4016	;# 
  1518   000FB1                     T3CON           equ	4017	;# 
  1519   000FB2                     TMR3            equ	4018	;# 
  1520   000FB2                     TMR3L           equ	4018	;# 
  1521   000FB3                     TMR3H           equ	4019	;# 
  1522   000FB4                     CMCON           equ	4020	;# 
  1523   000FB5                     CVRCON          equ	4021	;# 
  1524   000FB6                     ECCP1AS         equ	4022	;# 
  1525   000FB7                     CCP3CON         equ	4023	;# 
  1526   000FB7                     ECCP3CON        equ	4023	;# 
  1527   000FB8                     CCPR3           equ	4024	;# 
  1528   000FB8                     CCPR3L          equ	4024	;# 
  1529   000FB9                     CCPR3H          equ	4025	;# 
  1530   000FBA                     CCP2CON         equ	4026	;# 
  1531   000FBA                     ECCP2CON        equ	4026	;# 
  1532   000FBB                     CCPR2           equ	4027	;# 
  1533   000FBB                     CCPR2L          equ	4027	;# 
  1534   000FBC                     CCPR2H          equ	4028	;# 
  1535   000FBD                     CCP1CON         equ	4029	;# 
  1536   000FBD                     ECCP1CON        equ	4029	;# 
  1537   000FBE                     CCPR1           equ	4030	;# 
  1538   000FBE                     CCPR1L          equ	4030	;# 
  1539   000FBF                     CCPR1H          equ	4031	;# 
  1540   000FC0                     ADCON2          equ	4032	;# 
  1541   000FC1                     ADCON1          equ	4033	;# 
  1542   000FC2                     ADCON0          equ	4034	;# 
  1543   000FC3                     ADRES           equ	4035	;# 
  1544   000FC3                     ADRESL          equ	4035	;# 
  1545   000FC4                     ADRESH          equ	4036	;# 
  1546   000FC5                     SSP1CON2        equ	4037	;# 
  1547   000FC5                     SSPCON2         equ	4037	;# 
  1548   000FC6                     SSP1CON1        equ	4038	;# 
  1549   000FC6                     SSPCON1         equ	4038	;# 
  1550   000FC7                     SSP1STAT        equ	4039	;# 
  1551   000FC7                     SSPSTAT         equ	4039	;# 
  1552   000FC8                     SSP1ADD         equ	4040	;# 
  1553   000FC8                     SSPADD          equ	4040	;# 
  1554   000FC9                     SSP1BUF         equ	4041	;# 
  1555   000FC9                     SSPBUF          equ	4041	;# 
  1556   000FCA                     T2CON           equ	4042	;# 
  1557   000FCB                     PR2             equ	4043	;# 
  1558   000FCC                     TMR2            equ	4044	;# 
  1559   000FCD                     T1CON           equ	4045	;# 
  1560   000FCE                     TMR1            equ	4046	;# 
  1561   000FCE                     TMR1L           equ	4046	;# 
  1562   000FCF                     TMR1H           equ	4047	;# 
  1563   000FD0                     RCON            equ	4048	;# 
  1564   000FD1                     WDTCON          equ	4049	;# 
  1565   000FD2                     ECON1           equ	4050	;# 
  1566   000FD3                     OSCCON          equ	4051	;# 
  1567   000FD5                     T0CON           equ	4053	;# 
  1568   000FD6                     TMR0            equ	4054	;# 
  1569   000FD6                     TMR0L           equ	4054	;# 
  1570   000FD7                     TMR0H           equ	4055	;# 
  1571   000FD8                     STATUS          equ	4056	;# 
  1572   000FD9                     FSR2            equ	4057	;# 
  1573   000FD9                     FSR2L           equ	4057	;# 
  1574   000FDA                     FSR2H           equ	4058	;# 
  1575   000FDB                     PLUSW2          equ	4059	;# 
  1576   000FDC                     PREINC2         equ	4060	;# 
  1577   000FDD                     POSTDEC2        equ	4061	;# 
  1578   000FDE                     POSTINC2        equ	4062	;# 
  1579   000FDF                     INDF2           equ	4063	;# 
  1580   000FE0                     BSR             equ	4064	;# 
  1581   000FE1                     FSR1            equ	4065	;# 
  1582   000FE1                     FSR1L           equ	4065	;# 
  1583   000FE2                     FSR1H           equ	4066	;# 
  1584   000FE3                     PLUSW1          equ	4067	;# 
  1585   000FE4                     PREINC1         equ	4068	;# 
  1586   000FE5                     POSTDEC1        equ	4069	;# 
  1587   000FE6                     POSTINC1        equ	4070	;# 
  1588   000FE7                     INDF1           equ	4071	;# 
  1589   000FE8                     WREG            equ	4072	;# 
  1590   000FE9                     FSR0            equ	4073	;# 
  1591   000FE9                     FSR0L           equ	4073	;# 
  1592   000FEA                     FSR0H           equ	4074	;# 
  1593   000FEB                     PLUSW0          equ	4075	;# 
  1594   000FEC                     PREINC0         equ	4076	;# 
  1595   000FED                     POSTDEC0        equ	4077	;# 
  1596   000FEE                     POSTINC0        equ	4078	;# 
  1597   000FEF                     INDF0           equ	4079	;# 
  1598   000FF0                     INTCON3         equ	4080	;# 
  1599   000FF1                     INTCON2         equ	4081	;# 
  1600   000FF2                     INTCON          equ	4082	;# 
  1601   000FF3                     PROD            equ	4083	;# 
  1602   000FF3                     PRODL           equ	4083	;# 
  1603   000FF4                     PRODH           equ	4084	;# 
  1604   000FF5                     TABLAT          equ	4085	;# 
  1605   000FF6                     TBLPTR          equ	4086	;# 
  1606   000FF6                     TBLPTRL         equ	4086	;# 
  1607   000FF7                     TBLPTRH         equ	4087	;# 
  1608   000FF8                     TBLPTRU         equ	4088	;# 
  1609   000FF9                     PCLAT           equ	4089	;# 
  1610   000FF9                     PC              equ	4089	;# 
  1611   000FF9                     PCL             equ	4089	;# 
  1612   000FFA                     PCLATH          equ	4090	;# 
  1613   000FFB                     PCLATU          equ	4091	;# 
  1614   000FFC                     STKPTR          equ	4092	;# 
  1615   000FFD                     TOS             equ	4093	;# 
  1616   000FFD                     TOSL            equ	4093	;# 
  1617   000FFE                     TOSH            equ	4094	;# 
  1618   000FFF                     TOSU            equ	4095	;# 
  1619   000E80                     MAADR5          equ	3712	;# 
  1620   000E81                     MAADR6          equ	3713	;# 
  1621   000E82                     MAADR3          equ	3714	;# 
  1622   000E83                     MAADR4          equ	3715	;# 
  1623   000E84                     MAADR1          equ	3716	;# 
  1624   000E85                     MAADR2          equ	3717	;# 
  1625   000E8A                     MISTAT          equ	3722	;# 
  1626   000E97                     EFLOCON         equ	3735	;# 
  1627   000E98                     EPAUS           equ	3736	;# 
  1628   000E98                     EPAUSL          equ	3736	;# 
  1629   000E99                     EPAUSH          equ	3737	;# 
  1630   000EA0                     MACON1          equ	3744	;# 
  1631   000EA2                     MACON3          equ	3746	;# 
  1632   000EA3                     MACON4          equ	3747	;# 
  1633   000EA4                     MABBIPG         equ	3748	;# 
  1634   000EA6                     MAIPG           equ	3750	;# 
  1635   000EA6                     MAIPGL          equ	3750	;# 
  1636   000EA7                     MAIPGH          equ	3751	;# 
  1637   000EAA                     MAMXFL          equ	3754	;# 
  1638   000EAA                     MAMXFLL         equ	3754	;# 
  1639   000EAB                     MAMXFLH         equ	3755	;# 
  1640   000EB2                     MICMD           equ	3762	;# 
  1641   000EB4                     MIREGADR        equ	3764	;# 
  1642   000EB6                     MIWR            equ	3766	;# 
  1643   000EB6                     MIWRL           equ	3766	;# 
  1644   000EB7                     MIWRH           equ	3767	;# 
  1645   000EB8                     MIRD            equ	3768	;# 
  1646   000EB8                     MIRDL           equ	3768	;# 
  1647   000EB9                     MIRDH           equ	3769	;# 
  1648   000EC0                     EHT0            equ	3776	;# 
  1649   000EC1                     EHT1            equ	3777	;# 
  1650   000EC2                     EHT2            equ	3778	;# 
  1651   000EC3                     EHT3            equ	3779	;# 
  1652   000EC4                     EHT4            equ	3780	;# 
  1653   000EC5                     EHT5            equ	3781	;# 
  1654   000EC6                     EHT6            equ	3782	;# 
  1655   000EC7                     EHT7            equ	3783	;# 
  1656   000EC8                     EPMM0           equ	3784	;# 
  1657   000EC9                     EPMM1           equ	3785	;# 
  1658   000ECA                     EPMM2           equ	3786	;# 
  1659   000ECB                     EPMM3           equ	3787	;# 
  1660   000ECC                     EPMM4           equ	3788	;# 
  1661   000ECD                     EPMM5           equ	3789	;# 
  1662   000ECE                     EPMM6           equ	3790	;# 
  1663   000ECF                     EPMM7           equ	3791	;# 
  1664   000ED0                     EPMCS           equ	3792	;# 
  1665   000ED0                     EPMCSL          equ	3792	;# 
  1666   000ED1                     EPMCSH          equ	3793	;# 
  1667   000ED4                     EPMO            equ	3796	;# 
  1668   000ED4                     EPMOL           equ	3796	;# 
  1669   000ED5                     EPMOH           equ	3797	;# 
  1670   000ED8                     ERXFCON         equ	3800	;# 
  1671   000ED9                     EPKTCNT         equ	3801	;# 
  1672   000EE2                     EWRPT           equ	3810	;# 
  1673   000EE2                     EWRPTL          equ	3810	;# 
  1674   000EE3                     EWRPTH          equ	3811	;# 
  1675   000EE4                     ETXST           equ	3812	;# 
  1676   000EE4                     ETXSTL          equ	3812	;# 
  1677   000EE5                     ETXSTH          equ	3813	;# 
  1678   000EE6                     ETXND           equ	3814	;# 
  1679   000EE6                     ETXNDL          equ	3814	;# 
  1680   000EE7                     ETXNDH          equ	3815	;# 
  1681   000EE8                     ERXST           equ	3816	;# 
  1682   000EE8                     ERXSTL          equ	3816	;# 
  1683   000EE9                     ERXSTH          equ	3817	;# 
  1684   000EEA                     ERXND           equ	3818	;# 
  1685   000EEA                     ERXNDL          equ	3818	;# 
  1686   000EEB                     ERXNDH          equ	3819	;# 
  1687   000EEC                     ERXRDPT         equ	3820	;# 
  1688   000EEC                     ERXRDPTL        equ	3820	;# 
  1689   000EED                     ERXRDPTH        equ	3821	;# 
  1690   000EEE                     ERXWRPT         equ	3822	;# 
  1691   000EEE                     ERXWRPTL        equ	3822	;# 
  1692   000EEF                     ERXWRPTH        equ	3823	;# 
  1693   000EF0                     EDMAST          equ	3824	;# 
  1694   000EF0                     EDMASTL         equ	3824	;# 
  1695   000EF1                     EDMASTH         equ	3825	;# 
  1696   000EF2                     EDMAND          equ	3826	;# 
  1697   000EF2                     EDMANDL         equ	3826	;# 
  1698   000EF3                     EDMANDH         equ	3827	;# 
  1699   000EF4                     EDMADST         equ	3828	;# 
  1700   000EF4                     EDMADSTL        equ	3828	;# 
  1701   000EF5                     EDMADSTH        equ	3829	;# 
  1702   000EF6                     EDMACS          equ	3830	;# 
  1703   000EF6                     EDMACSL         equ	3830	;# 
  1704   000EF7                     EDMACSH         equ	3831	;# 
  1705   000EFB                     EIE             equ	3835	;# 
  1706   000EFD                     ESTAT           equ	3837	;# 
  1707   000EFE                     ECON2           equ	3838	;# 
  1708   000F60                     EIR             equ	3936	;# 
  1709   000F61                     EDATA           equ	3937	;# 
  1710   000F62                     SSP2CON2        equ	3938	;# 
  1711   000F63                     SSP2CON1        equ	3939	;# 
  1712   000F64                     SSP2STAT        equ	3940	;# 
  1713   000F65                     SSP2ADD         equ	3941	;# 
  1714   000F66                     SSP2BUF         equ	3942	;# 
  1715   000F67                     ECCP2DEL        equ	3943	;# 
  1716   000F68                     ECCP2AS         equ	3944	;# 
  1717   000F69                     ECCP3DEL        equ	3945	;# 
  1718   000F6A                     ECCP3AS         equ	3946	;# 
  1719   000F6B                     RCSTA2          equ	3947	;# 
  1720   000F6C                     TXSTA2          equ	3948	;# 
  1721   000F6D                     TXREG2          equ	3949	;# 
  1722   000F6E                     RCREG2          equ	3950	;# 
  1723   000F6F                     SPBRG2          equ	3951	;# 
  1724   000F70                     CCP5CON         equ	3952	;# 
  1725   000F71                     CCPR5           equ	3953	;# 
  1726   000F71                     CCPR5L          equ	3953	;# 
  1727   000F72                     CCPR5H          equ	3954	;# 
  1728   000F73                     CCP4CON         equ	3955	;# 
  1729   000F74                     CCPR4           equ	3956	;# 
  1730   000F74                     CCPR4L          equ	3956	;# 
  1731   000F75                     CCPR4H          equ	3957	;# 
  1732   000F76                     T4CON           equ	3958	;# 
  1733   000F77                     PR4             equ	3959	;# 
  1734   000F78                     TMR4            equ	3960	;# 
  1735   000F79                     ECCP1DEL        equ	3961	;# 
  1736   000F7A                     ERDPT           equ	3962	;# 
  1737   000F7A                     ERDPTL          equ	3962	;# 
  1738   000F7B                     ERDPTH          equ	3963	;# 
  1739   000F7C                     BAUDCON2        equ	3964	;# 
  1740   000F7C                     BAUDCTL2        equ	3964	;# 
  1741   000F7D                     SPBRGH2         equ	3965	;# 
  1742   000F7E                     BAUDCON1        equ	3966	;# 
  1743   000F7E                     BAUDCON         equ	3966	;# 
  1744   000F7E                     BAUDCTL         equ	3966	;# 
  1745   000F7E                     BAUDCTL1        equ	3966	;# 
  1746   000F7F                     SPBRGH1         equ	3967	;# 
  1747   000F7F                     SPBRGH          equ	3967	;# 
  1748   000F80                     PORTA           equ	3968	;# 
  1749   000F81                     PORTB           equ	3969	;# 
  1750   000F82                     PORTC           equ	3970	;# 
  1751   000F83                     PORTD           equ	3971	;# 
  1752   000F84                     PORTE           equ	3972	;# 
  1753   000F85                     PORTF           equ	3973	;# 
  1754   000F86                     PORTG           equ	3974	;# 
  1755   000F87                     PORTH           equ	3975	;# 
  1756   000F88                     PORTJ           equ	3976	;# 
  1757   000F89                     LATA            equ	3977	;# 
  1758   000F8A                     LATB            equ	3978	;# 
  1759   000F8B                     LATC            equ	3979	;# 
  1760   000F8C                     LATD            equ	3980	;# 
  1761   000F8D                     LATE            equ	3981	;# 
  1762   000F8E                     LATF            equ	3982	;# 
  1763   000F8F                     LATG            equ	3983	;# 
  1764   000F90                     LATH            equ	3984	;# 
  1765   000F91                     LATJ            equ	3985	;# 
  1766   000F92                     TRISA           equ	3986	;# 
  1767   000F92                     DDRA            equ	3986	;# 
  1768   000F93                     TRISB           equ	3987	;# 
  1769   000F93                     DDRB            equ	3987	;# 
  1770   000F94                     TRISC           equ	3988	;# 
  1771   000F94                     DDRC            equ	3988	;# 
  1772   000F95                     TRISD           equ	3989	;# 
  1773   000F95                     DDRD            equ	3989	;# 
  1774   000F96                     TRISE           equ	3990	;# 
  1775   000F96                     DDRE            equ	3990	;# 
  1776   000F97                     TRISF           equ	3991	;# 
  1777   000F97                     DDRF            equ	3991	;# 
  1778   000F98                     TRISG           equ	3992	;# 
  1779   000F98                     DDRG            equ	3992	;# 
  1780   000F99                     TRISH           equ	3993	;# 
  1781   000F99                     DDRH            equ	3993	;# 
  1782   000F9A                     TRISJ           equ	3994	;# 
  1783   000F9A                     DDRJ            equ	3994	;# 
  1784   000F9B                     OSCTUNE         equ	3995	;# 
  1785   000F9C                     MEMCON          equ	3996	;# 
  1786   000F9D                     PIE1            equ	3997	;# 
  1787   000F9E                     PIR1            equ	3998	;# 
  1788   000F9F                     IPR1            equ	3999	;# 
  1789   000FA0                     PIE2            equ	4000	;# 
  1790   000FA1                     PIR2            equ	4001	;# 
  1791   000FA2                     IPR2            equ	4002	;# 
  1792   000FA3                     PIE3            equ	4003	;# 
  1793   000FA4                     PIR3            equ	4004	;# 
  1794   000FA5                     IPR3            equ	4005	;# 
  1795   000FA6                     EECON1          equ	4006	;# 
  1796   000FA7                     EECON2          equ	4007	;# 
  1797   000FAB                     RCSTA1          equ	4011	;# 
  1798   000FAB                     RCSTA           equ	4011	;# 
  1799   000FAC                     TXSTA1          equ	4012	;# 
  1800   000FAC                     TXSTA           equ	4012	;# 
  1801   000FAD                     TXREG1          equ	4013	;# 
  1802   000FAD                     TXREG           equ	4013	;# 
  1803   000FAE                     RCREG1          equ	4014	;# 
  1804   000FAE                     RCREG           equ	4014	;# 
  1805   000FAF                     SPBRG1          equ	4015	;# 
  1806   000FAF                     SPBRG           equ	4015	;# 
  1807   000FB0                     PSPCON          equ	4016	;# 
  1808   000FB1                     T3CON           equ	4017	;# 
  1809   000FB2                     TMR3            equ	4018	;# 
  1810   000FB2                     TMR3L           equ	4018	;# 
  1811   000FB3                     TMR3H           equ	4019	;# 
  1812   000FB4                     CMCON           equ	4020	;# 
  1813   000FB5                     CVRCON          equ	4021	;# 
  1814   000FB6                     ECCP1AS         equ	4022	;# 
  1815   000FB7                     CCP3CON         equ	4023	;# 
  1816   000FB7                     ECCP3CON        equ	4023	;# 
  1817   000FB8                     CCPR3           equ	4024	;# 
  1818   000FB8                     CCPR3L          equ	4024	;# 
  1819   000FB9                     CCPR3H          equ	4025	;# 
  1820   000FBA                     CCP2CON         equ	4026	;# 
  1821   000FBA                     ECCP2CON        equ	4026	;# 
  1822   000FBB                     CCPR2           equ	4027	;# 
  1823   000FBB                     CCPR2L          equ	4027	;# 
  1824   000FBC                     CCPR2H          equ	4028	;# 
  1825   000FBD                     CCP1CON         equ	4029	;# 
  1826   000FBD                     ECCP1CON        equ	4029	;# 
  1827   000FBE                     CCPR1           equ	4030	;# 
  1828   000FBE                     CCPR1L          equ	4030	;# 
  1829   000FBF                     CCPR1H          equ	4031	;# 
  1830   000FC0                     ADCON2          equ	4032	;# 
  1831   000FC1                     ADCON1          equ	4033	;# 
  1832   000FC2                     ADCON0          equ	4034	;# 
  1833   000FC3                     ADRES           equ	4035	;# 
  1834   000FC3                     ADRESL          equ	4035	;# 
  1835   000FC4                     ADRESH          equ	4036	;# 
  1836   000FC5                     SSP1CON2        equ	4037	;# 
  1837   000FC5                     SSPCON2         equ	4037	;# 
  1838   000FC6                     SSP1CON1        equ	4038	;# 
  1839   000FC6                     SSPCON1         equ	4038	;# 
  1840   000FC7                     SSP1STAT        equ	4039	;# 
  1841   000FC7                     SSPSTAT         equ	4039	;# 
  1842   000FC8                     SSP1ADD         equ	4040	;# 
  1843   000FC8                     SSPADD          equ	4040	;# 
  1844   000FC9                     SSP1BUF         equ	4041	;# 
  1845   000FC9                     SSPBUF          equ	4041	;# 
  1846   000FCA                     T2CON           equ	4042	;# 
  1847   000FCB                     PR2             equ	4043	;# 
  1848   000FCC                     TMR2            equ	4044	;# 
  1849   000FCD                     T1CON           equ	4045	;# 
  1850   000FCE                     TMR1            equ	4046	;# 
  1851   000FCE                     TMR1L           equ	4046	;# 
  1852   000FCF                     TMR1H           equ	4047	;# 
  1853   000FD0                     RCON            equ	4048	;# 
  1854   000FD1                     WDTCON          equ	4049	;# 
  1855   000FD2                     ECON1           equ	4050	;# 
  1856   000FD3                     OSCCON          equ	4051	;# 
  1857   000FD5                     T0CON           equ	4053	;# 
  1858   000FD6                     TMR0            equ	4054	;# 
  1859   000FD6                     TMR0L           equ	4054	;# 
  1860   000FD7                     TMR0H           equ	4055	;# 
  1861   000FD8                     STATUS          equ	4056	;# 
  1862   000FD9                     FSR2            equ	4057	;# 
  1863   000FD9                     FSR2L           equ	4057	;# 
  1864   000FDA                     FSR2H           equ	4058	;# 
  1865   000FDB                     PLUSW2          equ	4059	;# 
  1866   000FDC                     PREINC2         equ	4060	;# 
  1867   000FDD                     POSTDEC2        equ	4061	;# 
  1868   000FDE                     POSTINC2        equ	4062	;# 
  1869   000FDF                     INDF2           equ	4063	;# 
  1870   000FE0                     BSR             equ	4064	;# 
  1871   000FE1                     FSR1            equ	4065	;# 
  1872   000FE1                     FSR1L           equ	4065	;# 
  1873   000FE2                     FSR1H           equ	4066	;# 
  1874   000FE3                     PLUSW1          equ	4067	;# 
  1875   000FE4                     PREINC1         equ	4068	;# 
  1876   000FE5                     POSTDEC1        equ	4069	;# 
  1877   000FE6                     POSTINC1        equ	4070	;# 
  1878   000FE7                     INDF1           equ	4071	;# 
  1879   000FE8                     WREG            equ	4072	;# 
  1880   000FE9                     FSR0            equ	4073	;# 
  1881   000FE9                     FSR0L           equ	4073	;# 
  1882   000FEA                     FSR0H           equ	4074	;# 
  1883   000FEB                     PLUSW0          equ	4075	;# 
  1884   000FEC                     PREINC0         equ	4076	;# 
  1885   000FED                     POSTDEC0        equ	4077	;# 
  1886   000FEE                     POSTINC0        equ	4078	;# 
  1887   000FEF                     INDF0           equ	4079	;# 
  1888   000FF0                     INTCON3         equ	4080	;# 
  1889   000FF1                     INTCON2         equ	4081	;# 
  1890   000FF2                     INTCON          equ	4082	;# 
  1891   000FF3                     PROD            equ	4083	;# 
  1892   000FF3                     PRODL           equ	4083	;# 
  1893   000FF4                     PRODH           equ	4084	;# 
  1894   000FF5                     TABLAT          equ	4085	;# 
  1895   000FF6                     TBLPTR          equ	4086	;# 
  1896   000FF6                     TBLPTRL         equ	4086	;# 
  1897   000FF7                     TBLPTRH         equ	4087	;# 
  1898   000FF8                     TBLPTRU         equ	4088	;# 
  1899   000FF9                     PCLAT           equ	4089	;# 
  1900   000FF9                     PC              equ	4089	;# 
  1901   000FF9                     PCL             equ	4089	;# 
  1902   000FFA                     PCLATH          equ	4090	;# 
  1903   000FFB                     PCLATU          equ	4091	;# 
  1904   000FFC                     STKPTR          equ	4092	;# 
  1905   000FFD                     TOS             equ	4093	;# 
  1906   000FFD                     TOSL            equ	4093	;# 
  1907   000FFE                     TOSH            equ	4094	;# 
  1908   000FFF                     TOSU            equ	4095	;# 
  1909   000E80                     MAADR5          equ	3712	;# 
  1910   000E81                     MAADR6          equ	3713	;# 
  1911   000E82                     MAADR3          equ	3714	;# 
  1912   000E83                     MAADR4          equ	3715	;# 
  1913   000E84                     MAADR1          equ	3716	;# 
  1914   000E85                     MAADR2          equ	3717	;# 
  1915   000E8A                     MISTAT          equ	3722	;# 
  1916   000E97                     EFLOCON         equ	3735	;# 
  1917   000E98                     EPAUS           equ	3736	;# 
  1918   000E98                     EPAUSL          equ	3736	;# 
  1919   000E99                     EPAUSH          equ	3737	;# 
  1920   000EA0                     MACON1          equ	3744	;# 
  1921   000EA2                     MACON3          equ	3746	;# 
  1922   000EA3                     MACON4          equ	3747	;# 
  1923   000EA4                     MABBIPG         equ	3748	;# 
  1924   000EA6                     MAIPG           equ	3750	;# 
  1925   000EA6                     MAIPGL          equ	3750	;# 
  1926   000EA7                     MAIPGH          equ	3751	;# 
  1927   000EAA                     MAMXFL          equ	3754	;# 
  1928   000EAA                     MAMXFLL         equ	3754	;# 
  1929   000EAB                     MAMXFLH         equ	3755	;# 
  1930   000EB2                     MICMD           equ	3762	;# 
  1931   000EB4                     MIREGADR        equ	3764	;# 
  1932   000EB6                     MIWR            equ	3766	;# 
  1933   000EB6                     MIWRL           equ	3766	;# 
  1934   000EB7                     MIWRH           equ	3767	;# 
  1935   000EB8                     MIRD            equ	3768	;# 
  1936   000EB8                     MIRDL           equ	3768	;# 
  1937   000EB9                     MIRDH           equ	3769	;# 
  1938   000EC0                     EHT0            equ	3776	;# 
  1939   000EC1                     EHT1            equ	3777	;# 
  1940   000EC2                     EHT2            equ	3778	;# 
  1941   000EC3                     EHT3            equ	3779	;# 
  1942   000EC4                     EHT4            equ	3780	;# 
  1943   000EC5                     EHT5            equ	3781	;# 
  1944   000EC6                     EHT6            equ	3782	;# 
  1945   000EC7                     EHT7            equ	3783	;# 
  1946   000EC8                     EPMM0           equ	3784	;# 
  1947   000EC9                     EPMM1           equ	3785	;# 
  1948   000ECA                     EPMM2           equ	3786	;# 
  1949   000ECB                     EPMM3           equ	3787	;# 
  1950   000ECC                     EPMM4           equ	3788	;# 
  1951   000ECD                     EPMM5           equ	3789	;# 
  1952   000ECE                     EPMM6           equ	3790	;# 
  1953   000ECF                     EPMM7           equ	3791	;# 
  1954   000ED0                     EPMCS           equ	3792	;# 
  1955   000ED0                     EPMCSL          equ	3792	;# 
  1956   000ED1                     EPMCSH          equ	3793	;# 
  1957   000ED4                     EPMO            equ	3796	;# 
  1958   000ED4                     EPMOL           equ	3796	;# 
  1959   000ED5                     EPMOH           equ	3797	;# 
  1960   000ED8                     ERXFCON         equ	3800	;# 
  1961   000ED9                     EPKTCNT         equ	3801	;# 
  1962   000EE2                     EWRPT           equ	3810	;# 
  1963   000EE2                     EWRPTL          equ	3810	;# 
  1964   000EE3                     EWRPTH          equ	3811	;# 
  1965   000EE4                     ETXST           equ	3812	;# 
  1966   000EE4                     ETXSTL          equ	3812	;# 
  1967   000EE5                     ETXSTH          equ	3813	;# 
  1968   000EE6                     ETXND           equ	3814	;# 
  1969   000EE6                     ETXNDL          equ	3814	;# 
  1970   000EE7                     ETXNDH          equ	3815	;# 
  1971   000EE8                     ERXST           equ	3816	;# 
  1972   000EE8                     ERXSTL          equ	3816	;# 
  1973   000EE9                     ERXSTH          equ	3817	;# 
  1974   000EEA                     ERXND           equ	3818	;# 
  1975   000EEA                     ERXNDL          equ	3818	;# 
  1976   000EEB                     ERXNDH          equ	3819	;# 
  1977   000EEC                     ERXRDPT         equ	3820	;# 
  1978   000EEC                     ERXRDPTL        equ	3820	;# 
  1979   000EED                     ERXRDPTH        equ	3821	;# 
  1980   000EEE                     ERXWRPT         equ	3822	;# 
  1981   000EEE                     ERXWRPTL        equ	3822	;# 
  1982   000EEF                     ERXWRPTH        equ	3823	;# 
  1983   000EF0                     EDMAST          equ	3824	;# 
  1984   000EF0                     EDMASTL         equ	3824	;# 
  1985   000EF1                     EDMASTH         equ	3825	;# 
  1986   000EF2                     EDMAND          equ	3826	;# 
  1987   000EF2                     EDMANDL         equ	3826	;# 
  1988   000EF3                     EDMANDH         equ	3827	;# 
  1989   000EF4                     EDMADST         equ	3828	;# 
  1990   000EF4                     EDMADSTL        equ	3828	;# 
  1991   000EF5                     EDMADSTH        equ	3829	;# 
  1992   000EF6                     EDMACS          equ	3830	;# 
  1993   000EF6                     EDMACSL         equ	3830	;# 
  1994   000EF7                     EDMACSH         equ	3831	;# 
  1995   000EFB                     EIE             equ	3835	;# 
  1996   000EFD                     ESTAT           equ	3837	;# 
  1997   000EFE                     ECON2           equ	3838	;# 
  1998   000F60                     EIR             equ	3936	;# 
  1999   000F61                     EDATA           equ	3937	;# 
  2000   000F62                     SSP2CON2        equ	3938	;# 
  2001   000F63                     SSP2CON1        equ	3939	;# 
  2002   000F64                     SSP2STAT        equ	3940	;# 
  2003   000F65                     SSP2ADD         equ	3941	;# 
  2004   000F66                     SSP2BUF         equ	3942	;# 
  2005   000F67                     ECCP2DEL        equ	3943	;# 
  2006   000F68                     ECCP2AS         equ	3944	;# 
  2007   000F69                     ECCP3DEL        equ	3945	;# 
  2008   000F6A                     ECCP3AS         equ	3946	;# 
  2009   000F6B                     RCSTA2          equ	3947	;# 
  2010   000F6C                     TXSTA2          equ	3948	;# 
  2011   000F6D                     TXREG2          equ	3949	;# 
  2012   000F6E                     RCREG2          equ	3950	;# 
  2013   000F6F                     SPBRG2          equ	3951	;# 
  2014   000F70                     CCP5CON         equ	3952	;# 
  2015   000F71                     CCPR5           equ	3953	;# 
  2016   000F71                     CCPR5L          equ	3953	;# 
  2017   000F72                     CCPR5H          equ	3954	;# 
  2018   000F73                     CCP4CON         equ	3955	;# 
  2019   000F74                     CCPR4           equ	3956	;# 
  2020   000F74                     CCPR4L          equ	3956	;# 
  2021   000F75                     CCPR4H          equ	3957	;# 
  2022   000F76                     T4CON           equ	3958	;# 
  2023   000F77                     PR4             equ	3959	;# 
  2024   000F78                     TMR4            equ	3960	;# 
  2025   000F79                     ECCP1DEL        equ	3961	;# 
  2026   000F7A                     ERDPT           equ	3962	;# 
  2027   000F7A                     ERDPTL          equ	3962	;# 
  2028   000F7B                     ERDPTH          equ	3963	;# 
  2029   000F7C                     BAUDCON2        equ	3964	;# 
  2030   000F7C                     BAUDCTL2        equ	3964	;# 
  2031   000F7D                     SPBRGH2         equ	3965	;# 
  2032   000F7E                     BAUDCON1        equ	3966	;# 
  2033   000F7E                     BAUDCON         equ	3966	;# 
  2034   000F7E                     BAUDCTL         equ	3966	;# 
  2035   000F7E                     BAUDCTL1        equ	3966	;# 
  2036   000F7F                     SPBRGH1         equ	3967	;# 
  2037   000F7F                     SPBRGH          equ	3967	;# 
  2038   000F80                     PORTA           equ	3968	;# 
  2039   000F81                     PORTB           equ	3969	;# 
  2040   000F82                     PORTC           equ	3970	;# 
  2041   000F83                     PORTD           equ	3971	;# 
  2042   000F84                     PORTE           equ	3972	;# 
  2043   000F85                     PORTF           equ	3973	;# 
  2044   000F86                     PORTG           equ	3974	;# 
  2045   000F87                     PORTH           equ	3975	;# 
  2046   000F88                     PORTJ           equ	3976	;# 
  2047   000F89                     LATA            equ	3977	;# 
  2048   000F8A                     LATB            equ	3978	;# 
  2049   000F8B                     LATC            equ	3979	;# 
  2050   000F8C                     LATD            equ	3980	;# 
  2051   000F8D                     LATE            equ	3981	;# 
  2052   000F8E                     LATF            equ	3982	;# 
  2053   000F8F                     LATG            equ	3983	;# 
  2054   000F90                     LATH            equ	3984	;# 
  2055   000F91                     LATJ            equ	3985	;# 
  2056   000F92                     TRISA           equ	3986	;# 
  2057   000F92                     DDRA            equ	3986	;# 
  2058   000F93                     TRISB           equ	3987	;# 
  2059   000F93                     DDRB            equ	3987	;# 
  2060   000F94                     TRISC           equ	3988	;# 
  2061   000F94                     DDRC            equ	3988	;# 
  2062   000F95                     TRISD           equ	3989	;# 
  2063   000F95                     DDRD            equ	3989	;# 
  2064   000F96                     TRISE           equ	3990	;# 
  2065   000F96                     DDRE            equ	3990	;# 
  2066   000F97                     TRISF           equ	3991	;# 
  2067   000F97                     DDRF            equ	3991	;# 
  2068   000F98                     TRISG           equ	3992	;# 
  2069   000F98                     DDRG            equ	3992	;# 
  2070   000F99                     TRISH           equ	3993	;# 
  2071   000F99                     DDRH            equ	3993	;# 
  2072   000F9A                     TRISJ           equ	3994	;# 
  2073   000F9A                     DDRJ            equ	3994	;# 
  2074   000F9B                     OSCTUNE         equ	3995	;# 
  2075   000F9C                     MEMCON          equ	3996	;# 
  2076   000F9D                     PIE1            equ	3997	;# 
  2077   000F9E                     PIR1            equ	3998	;# 
  2078   000F9F                     IPR1            equ	3999	;# 
  2079   000FA0                     PIE2            equ	4000	;# 
  2080   000FA1                     PIR2            equ	4001	;# 
  2081   000FA2                     IPR2            equ	4002	;# 
  2082   000FA3                     PIE3            equ	4003	;# 
  2083   000FA4                     PIR3            equ	4004	;# 
  2084   000FA5                     IPR3            equ	4005	;# 
  2085   000FA6                     EECON1          equ	4006	;# 
  2086   000FA7                     EECON2          equ	4007	;# 
  2087   000FAB                     RCSTA1          equ	4011	;# 
  2088   000FAB                     RCSTA           equ	4011	;# 
  2089   000FAC                     TXSTA1          equ	4012	;# 
  2090   000FAC                     TXSTA           equ	4012	;# 
  2091   000FAD                     TXREG1          equ	4013	;# 
  2092   000FAD                     TXREG           equ	4013	;# 
  2093   000FAE                     RCREG1          equ	4014	;# 
  2094   000FAE                     RCREG           equ	4014	;# 
  2095   000FAF                     SPBRG1          equ	4015	;# 
  2096   000FAF                     SPBRG           equ	4015	;# 
  2097   000FB0                     PSPCON          equ	4016	;# 
  2098   000FB1                     T3CON           equ	4017	;# 
  2099   000FB2                     TMR3            equ	4018	;# 
  2100   000FB2                     TMR3L           equ	4018	;# 
  2101   000FB3                     TMR3H           equ	4019	;# 
  2102   000FB4                     CMCON           equ	4020	;# 
  2103   000FB5                     CVRCON          equ	4021	;# 
  2104   000FB6                     ECCP1AS         equ	4022	;# 
  2105   000FB7                     CCP3CON         equ	4023	;# 
  2106   000FB7                     ECCP3CON        equ	4023	;# 
  2107   000FB8                     CCPR3           equ	4024	;# 
  2108   000FB8                     CCPR3L          equ	4024	;# 
  2109   000FB9                     CCPR3H          equ	4025	;# 
  2110   000FBA                     CCP2CON         equ	4026	;# 
  2111   000FBA                     ECCP2CON        equ	4026	;# 
  2112   000FBB                     CCPR2           equ	4027	;# 
  2113   000FBB                     CCPR2L          equ	4027	;# 
  2114   000FBC                     CCPR2H          equ	4028	;# 
  2115   000FBD                     CCP1CON         equ	4029	;# 
  2116   000FBD                     ECCP1CON        equ	4029	;# 
  2117   000FBE                     CCPR1           equ	4030	;# 
  2118   000FBE                     CCPR1L          equ	4030	;# 
  2119   000FBF                     CCPR1H          equ	4031	;# 
  2120   000FC0                     ADCON2          equ	4032	;# 
  2121   000FC1                     ADCON1          equ	4033	;# 
  2122   000FC2                     ADCON0          equ	4034	;# 
  2123   000FC3                     ADRES           equ	4035	;# 
  2124   000FC3                     ADRESL          equ	4035	;# 
  2125   000FC4                     ADRESH          equ	4036	;# 
  2126   000FC5                     SSP1CON2        equ	4037	;# 
  2127   000FC5                     SSPCON2         equ	4037	;# 
  2128   000FC6                     SSP1CON1        equ	4038	;# 
  2129   000FC6                     SSPCON1         equ	4038	;# 
  2130   000FC7                     SSP1STAT        equ	4039	;# 
  2131   000FC7                     SSPSTAT         equ	4039	;# 
  2132   000FC8                     SSP1ADD         equ	4040	;# 
  2133   000FC8                     SSPADD          equ	4040	;# 
  2134   000FC9                     SSP1BUF         equ	4041	;# 
  2135   000FC9                     SSPBUF          equ	4041	;# 
  2136   000FCA                     T2CON           equ	4042	;# 
  2137   000FCB                     PR2             equ	4043	;# 
  2138   000FCC                     TMR2            equ	4044	;# 
  2139   000FCD                     T1CON           equ	4045	;# 
  2140   000FCE                     TMR1            equ	4046	;# 
  2141   000FCE                     TMR1L           equ	4046	;# 
  2142   000FCF                     TMR1H           equ	4047	;# 
  2143   000FD0                     RCON            equ	4048	;# 
  2144   000FD1                     WDTCON          equ	4049	;# 
  2145   000FD2                     ECON1           equ	4050	;# 
  2146   000FD3                     OSCCON          equ	4051	;# 
  2147   000FD5                     T0CON           equ	4053	;# 
  2148   000FD6                     TMR0            equ	4054	;# 
  2149   000FD6                     TMR0L           equ	4054	;# 
  2150   000FD7                     TMR0H           equ	4055	;# 
  2151   000FD8                     STATUS          equ	4056	;# 
  2152   000FD9                     FSR2            equ	4057	;# 
  2153   000FD9                     FSR2L           equ	4057	;# 
  2154   000FDA                     FSR2H           equ	4058	;# 
  2155   000FDB                     PLUSW2          equ	4059	;# 
  2156   000FDC                     PREINC2         equ	4060	;# 
  2157   000FDD                     POSTDEC2        equ	4061	;# 
  2158   000FDE                     POSTINC2        equ	4062	;# 
  2159   000FDF                     INDF2           equ	4063	;# 
  2160   000FE0                     BSR             equ	4064	;# 
  2161   000FE1                     FSR1            equ	4065	;# 
  2162   000FE1                     FSR1L           equ	4065	;# 
  2163   000FE2                     FSR1H           equ	4066	;# 
  2164   000FE3                     PLUSW1          equ	4067	;# 
  2165   000FE4                     PREINC1         equ	4068	;# 
  2166   000FE5                     POSTDEC1        equ	4069	;# 
  2167   000FE6                     POSTINC1        equ	4070	;# 
  2168   000FE7                     INDF1           equ	4071	;# 
  2169   000FE8                     WREG            equ	4072	;# 
  2170   000FE9                     FSR0            equ	4073	;# 
  2171   000FE9                     FSR0L           equ	4073	;# 
  2172   000FEA                     FSR0H           equ	4074	;# 
  2173   000FEB                     PLUSW0          equ	4075	;# 
  2174   000FEC                     PREINC0         equ	4076	;# 
  2175   000FED                     POSTDEC0        equ	4077	;# 
  2176   000FEE                     POSTINC0        equ	4078	;# 
  2177   000FEF                     INDF0           equ	4079	;# 
  2178   000FF0                     INTCON3         equ	4080	;# 
  2179   000FF1                     INTCON2         equ	4081	;# 
  2180   000FF2                     INTCON          equ	4082	;# 
  2181   000FF3                     PROD            equ	4083	;# 
  2182   000FF3                     PRODL           equ	4083	;# 
  2183   000FF4                     PRODH           equ	4084	;# 
  2184   000FF5                     TABLAT          equ	4085	;# 
  2185   000FF6                     TBLPTR          equ	4086	;# 
  2186   000FF6                     TBLPTRL         equ	4086	;# 
  2187   000FF7                     TBLPTRH         equ	4087	;# 
  2188   000FF8                     TBLPTRU         equ	4088	;# 
  2189   000FF9                     PCLAT           equ	4089	;# 
  2190   000FF9                     PC              equ	4089	;# 
  2191   000FF9                     PCL             equ	4089	;# 
  2192   000FFA                     PCLATH          equ	4090	;# 
  2193   000FFB                     PCLATU          equ	4091	;# 
  2194   000FFC                     STKPTR          equ	4092	;# 
  2195   000FFD                     TOS             equ	4093	;# 
  2196   000FFD                     TOSL            equ	4093	;# 
  2197   000FFE                     TOSH            equ	4094	;# 
  2198   000FFF                     TOSU            equ	4095	;# 
  2199   000E80                     MAADR5          equ	3712	;# 
  2200   000E81                     MAADR6          equ	3713	;# 
  2201   000E82                     MAADR3          equ	3714	;# 
  2202   000E83                     MAADR4          equ	3715	;# 
  2203   000E84                     MAADR1          equ	3716	;# 
  2204   000E85                     MAADR2          equ	3717	;# 
  2205   000E8A                     MISTAT          equ	3722	;# 
  2206   000E97                     EFLOCON         equ	3735	;# 
  2207   000E98                     EPAUS           equ	3736	;# 
  2208   000E98                     EPAUSL          equ	3736	;# 
  2209   000E99                     EPAUSH          equ	3737	;# 
  2210   000EA0                     MACON1          equ	3744	;# 
  2211   000EA2                     MACON3          equ	3746	;# 
  2212   000EA3                     MACON4          equ	3747	;# 
  2213   000EA4                     MABBIPG         equ	3748	;# 
  2214   000EA6                     MAIPG           equ	3750	;# 
  2215   000EA6                     MAIPGL          equ	3750	;# 
  2216   000EA7                     MAIPGH          equ	3751	;# 
  2217   000EAA                     MAMXFL          equ	3754	;# 
  2218   000EAA                     MAMXFLL         equ	3754	;# 
  2219   000EAB                     MAMXFLH         equ	3755	;# 
  2220   000EB2                     MICMD           equ	3762	;# 
  2221   000EB4                     MIREGADR        equ	3764	;# 
  2222   000EB6                     MIWR            equ	3766	;# 
  2223   000EB6                     MIWRL           equ	3766	;# 
  2224   000EB7                     MIWRH           equ	3767	;# 
  2225   000EB8                     MIRD            equ	3768	;# 
  2226   000EB8                     MIRDL           equ	3768	;# 
  2227   000EB9                     MIRDH           equ	3769	;# 
  2228   000EC0                     EHT0            equ	3776	;# 
  2229   000EC1                     EHT1            equ	3777	;# 
  2230   000EC2                     EHT2            equ	3778	;# 
  2231   000EC3                     EHT3            equ	3779	;# 
  2232   000EC4                     EHT4            equ	3780	;# 
  2233   000EC5                     EHT5            equ	3781	;# 
  2234   000EC6                     EHT6            equ	3782	;# 
  2235   000EC7                     EHT7            equ	3783	;# 
  2236   000EC8                     EPMM0           equ	3784	;# 
  2237   000EC9                     EPMM1           equ	3785	;# 
  2238   000ECA                     EPMM2           equ	3786	;# 
  2239   000ECB                     EPMM3           equ	3787	;# 
  2240   000ECC                     EPMM4           equ	3788	;# 
  2241   000ECD                     EPMM5           equ	3789	;# 
  2242   000ECE                     EPMM6           equ	3790	;# 
  2243   000ECF                     EPMM7           equ	3791	;# 
  2244   000ED0                     EPMCS           equ	3792	;# 
  2245   000ED0                     EPMCSL          equ	3792	;# 
  2246   000ED1                     EPMCSH          equ	3793	;# 
  2247   000ED4                     EPMO            equ	3796	;# 
  2248   000ED4                     EPMOL           equ	3796	;# 
  2249   000ED5                     EPMOH           equ	3797	;# 
  2250   000ED8                     ERXFCON         equ	3800	;# 
  2251   000ED9                     EPKTCNT         equ	3801	;# 
  2252   000EE2                     EWRPT           equ	3810	;# 
  2253   000EE2                     EWRPTL          equ	3810	;# 
  2254   000EE3                     EWRPTH          equ	3811	;# 
  2255   000EE4                     ETXST           equ	3812	;# 
  2256   000EE4                     ETXSTL          equ	3812	;# 
  2257   000EE5                     ETXSTH          equ	3813	;# 
  2258   000EE6                     ETXND           equ	3814	;# 
  2259   000EE6                     ETXNDL          equ	3814	;# 
  2260   000EE7                     ETXNDH          equ	3815	;# 
  2261   000EE8                     ERXST           equ	3816	;# 
  2262   000EE8                     ERXSTL          equ	3816	;# 
  2263   000EE9                     ERXSTH          equ	3817	;# 
  2264   000EEA                     ERXND           equ	3818	;# 
  2265   000EEA                     ERXNDL          equ	3818	;# 
  2266   000EEB                     ERXNDH          equ	3819	;# 
  2267   000EEC                     ERXRDPT         equ	3820	;# 
  2268   000EEC                     ERXRDPTL        equ	3820	;# 
  2269   000EED                     ERXRDPTH        equ	3821	;# 
  2270   000EEE                     ERXWRPT         equ	3822	;# 
  2271   000EEE                     ERXWRPTL        equ	3822	;# 
  2272   000EEF                     ERXWRPTH        equ	3823	;# 
  2273   000EF0                     EDMAST          equ	3824	;# 
  2274   000EF0                     EDMASTL         equ	3824	;# 
  2275   000EF1                     EDMASTH         equ	3825	;# 
  2276   000EF2                     EDMAND          equ	3826	;# 
  2277   000EF2                     EDMANDL         equ	3826	;# 
  2278   000EF3                     EDMANDH         equ	3827	;# 
  2279   000EF4                     EDMADST         equ	3828	;# 
  2280   000EF4                     EDMADSTL        equ	3828	;# 
  2281   000EF5                     EDMADSTH        equ	3829	;# 
  2282   000EF6                     EDMACS          equ	3830	;# 
  2283   000EF6                     EDMACSL         equ	3830	;# 
  2284   000EF7                     EDMACSH         equ	3831	;# 
  2285   000EFB                     EIE             equ	3835	;# 
  2286   000EFD                     ESTAT           equ	3837	;# 
  2287   000EFE                     ECON2           equ	3838	;# 
  2288   000F60                     EIR             equ	3936	;# 
  2289   000F61                     EDATA           equ	3937	;# 
  2290   000F62                     SSP2CON2        equ	3938	;# 
  2291   000F63                     SSP2CON1        equ	3939	;# 
  2292   000F64                     SSP2STAT        equ	3940	;# 
  2293   000F65                     SSP2ADD         equ	3941	;# 
  2294   000F66                     SSP2BUF         equ	3942	;# 
  2295   000F67                     ECCP2DEL        equ	3943	;# 
  2296   000F68                     ECCP2AS         equ	3944	;# 
  2297   000F69                     ECCP3DEL        equ	3945	;# 
  2298   000F6A                     ECCP3AS         equ	3946	;# 
  2299   000F6B                     RCSTA2          equ	3947	;# 
  2300   000F6C                     TXSTA2          equ	3948	;# 
  2301   000F6D                     TXREG2          equ	3949	;# 
  2302   000F6E                     RCREG2          equ	3950	;# 
  2303   000F6F                     SPBRG2          equ	3951	;# 
  2304   000F70                     CCP5CON         equ	3952	;# 
  2305   000F71                     CCPR5           equ	3953	;# 
  2306   000F71                     CCPR5L          equ	3953	;# 
  2307   000F72                     CCPR5H          equ	3954	;# 
  2308   000F73                     CCP4CON         equ	3955	;# 
  2309   000F74                     CCPR4           equ	3956	;# 
  2310   000F74                     CCPR4L          equ	3956	;# 
  2311   000F75                     CCPR4H          equ	3957	;# 
  2312   000F76                     T4CON           equ	3958	;# 
  2313   000F77                     PR4             equ	3959	;# 
  2314   000F78                     TMR4            equ	3960	;# 
  2315   000F79                     ECCP1DEL        equ	3961	;# 
  2316   000F7A                     ERDPT           equ	3962	;# 
  2317   000F7A                     ERDPTL          equ	3962	;# 
  2318   000F7B                     ERDPTH          equ	3963	;# 
  2319   000F7C                     BAUDCON2        equ	3964	;# 
  2320   000F7C                     BAUDCTL2        equ	3964	;# 
  2321   000F7D                     SPBRGH2         equ	3965	;# 
  2322   000F7E                     BAUDCON1        equ	3966	;# 
  2323   000F7E                     BAUDCON         equ	3966	;# 
  2324   000F7E                     BAUDCTL         equ	3966	;# 
  2325   000F7E                     BAUDCTL1        equ	3966	;# 
  2326   000F7F                     SPBRGH1         equ	3967	;# 
  2327   000F7F                     SPBRGH          equ	3967	;# 
  2328   000F80                     PORTA           equ	3968	;# 
  2329   000F81                     PORTB           equ	3969	;# 
  2330   000F82                     PORTC           equ	3970	;# 
  2331   000F83                     PORTD           equ	3971	;# 
  2332   000F84                     PORTE           equ	3972	;# 
  2333   000F85                     PORTF           equ	3973	;# 
  2334   000F86                     PORTG           equ	3974	;# 
  2335   000F87                     PORTH           equ	3975	;# 
  2336   000F88                     PORTJ           equ	3976	;# 
  2337   000F89                     LATA            equ	3977	;# 
  2338   000F8A                     LATB            equ	3978	;# 
  2339   000F8B                     LATC            equ	3979	;# 
  2340   000F8C                     LATD            equ	3980	;# 
  2341   000F8D                     LATE            equ	3981	;# 
  2342   000F8E                     LATF            equ	3982	;# 
  2343   000F8F                     LATG            equ	3983	;# 
  2344   000F90                     LATH            equ	3984	;# 
  2345   000F91                     LATJ            equ	3985	;# 
  2346   000F92                     TRISA           equ	3986	;# 
  2347   000F92                     DDRA            equ	3986	;# 
  2348   000F93                     TRISB           equ	3987	;# 
  2349   000F93                     DDRB            equ	3987	;# 
  2350   000F94                     TRISC           equ	3988	;# 
  2351   000F94                     DDRC            equ	3988	;# 
  2352   000F95                     TRISD           equ	3989	;# 
  2353   000F95                     DDRD            equ	3989	;# 
  2354   000F96                     TRISE           equ	3990	;# 
  2355   000F96                     DDRE            equ	3990	;# 
  2356   000F97                     TRISF           equ	3991	;# 
  2357   000F97                     DDRF            equ	3991	;# 
  2358   000F98                     TRISG           equ	3992	;# 
  2359   000F98                     DDRG            equ	3992	;# 
  2360   000F99                     TRISH           equ	3993	;# 
  2361   000F99                     DDRH            equ	3993	;# 
  2362   000F9A                     TRISJ           equ	3994	;# 
  2363   000F9A                     DDRJ            equ	3994	;# 
  2364   000F9B                     OSCTUNE         equ	3995	;# 
  2365   000F9C                     MEMCON          equ	3996	;# 
  2366   000F9D                     PIE1            equ	3997	;# 
  2367   000F9E                     PIR1            equ	3998	;# 
  2368   000F9F                     IPR1            equ	3999	;# 
  2369   000FA0                     PIE2            equ	4000	;# 
  2370   000FA1                     PIR2            equ	4001	;# 
  2371   000FA2                     IPR2            equ	4002	;# 
  2372   000FA3                     PIE3            equ	4003	;# 
  2373   000FA4                     PIR3            equ	4004	;# 
  2374   000FA5                     IPR3            equ	4005	;# 
  2375   000FA6                     EECON1          equ	4006	;# 
  2376   000FA7                     EECON2          equ	4007	;# 
  2377   000FAB                     RCSTA1          equ	4011	;# 
  2378   000FAB                     RCSTA           equ	4011	;# 
  2379   000FAC                     TXSTA1          equ	4012	;# 
  2380   000FAC                     TXSTA           equ	4012	;# 
  2381   000FAD                     TXREG1          equ	4013	;# 
  2382   000FAD                     TXREG           equ	4013	;# 
  2383   000FAE                     RCREG1          equ	4014	;# 
  2384   000FAE                     RCREG           equ	4014	;# 
  2385   000FAF                     SPBRG1          equ	4015	;# 
  2386   000FAF                     SPBRG           equ	4015	;# 
  2387   000FB0                     PSPCON          equ	4016	;# 
  2388   000FB1                     T3CON           equ	4017	;# 
  2389   000FB2                     TMR3            equ	4018	;# 
  2390   000FB2                     TMR3L           equ	4018	;# 
  2391   000FB3                     TMR3H           equ	4019	;# 
  2392   000FB4                     CMCON           equ	4020	;# 
  2393   000FB5                     CVRCON          equ	4021	;# 
  2394   000FB6                     ECCP1AS         equ	4022	;# 
  2395   000FB7                     CCP3CON         equ	4023	;# 
  2396   000FB7                     ECCP3CON        equ	4023	;# 
  2397   000FB8                     CCPR3           equ	4024	;# 
  2398   000FB8                     CCPR3L          equ	4024	;# 
  2399   000FB9                     CCPR3H          equ	4025	;# 
  2400   000FBA                     CCP2CON         equ	4026	;# 
  2401   000FBA                     ECCP2CON        equ	4026	;# 
  2402   000FBB                     CCPR2           equ	4027	;# 
  2403   000FBB                     CCPR2L          equ	4027	;# 
  2404   000FBC                     CCPR2H          equ	4028	;# 
  2405   000FBD                     CCP1CON         equ	4029	;# 
  2406   000FBD                     ECCP1CON        equ	4029	;# 
  2407   000FBE                     CCPR1           equ	4030	;# 
  2408   000FBE                     CCPR1L          equ	4030	;# 
  2409   000FBF                     CCPR1H          equ	4031	;# 
  2410   000FC0                     ADCON2          equ	4032	;# 
  2411   000FC1                     ADCON1          equ	4033	;# 
  2412   000FC2                     ADCON0          equ	4034	;# 
  2413   000FC3                     ADRES           equ	4035	;# 
  2414   000FC3                     ADRESL          equ	4035	;# 
  2415   000FC4                     ADRESH          equ	4036	;# 
  2416   000FC5                     SSP1CON2        equ	4037	;# 
  2417   000FC5                     SSPCON2         equ	4037	;# 
  2418   000FC6                     SSP1CON1        equ	4038	;# 
  2419   000FC6                     SSPCON1         equ	4038	;# 
  2420   000FC7                     SSP1STAT        equ	4039	;# 
  2421   000FC7                     SSPSTAT         equ	4039	;# 
  2422   000FC8                     SSP1ADD         equ	4040	;# 
  2423   000FC8                     SSPADD          equ	4040	;# 
  2424   000FC9                     SSP1BUF         equ	4041	;# 
  2425   000FC9                     SSPBUF          equ	4041	;# 
  2426   000FCA                     T2CON           equ	4042	;# 
  2427   000FCB                     PR2             equ	4043	;# 
  2428   000FCC                     TMR2            equ	4044	;# 
  2429   000FCD                     T1CON           equ	4045	;# 
  2430   000FCE                     TMR1            equ	4046	;# 
  2431   000FCE                     TMR1L           equ	4046	;# 
  2432   000FCF                     TMR1H           equ	4047	;# 
  2433   000FD0                     RCON            equ	4048	;# 
  2434   000FD1                     WDTCON          equ	4049	;# 
  2435   000FD2                     ECON1           equ	4050	;# 
  2436   000FD3                     OSCCON          equ	4051	;# 
  2437   000FD5                     T0CON           equ	4053	;# 
  2438   000FD6                     TMR0            equ	4054	;# 
  2439   000FD6                     TMR0L           equ	4054	;# 
  2440   000FD7                     TMR0H           equ	4055	;# 
  2441   000FD8                     STATUS          equ	4056	;# 
  2442   000FD9                     FSR2            equ	4057	;# 
  2443   000FD9                     FSR2L           equ	4057	;# 
  2444   000FDA                     FSR2H           equ	4058	;# 
  2445   000FDB                     PLUSW2          equ	4059	;# 
  2446   000FDC                     PREINC2         equ	4060	;# 
  2447   000FDD                     POSTDEC2        equ	4061	;# 
  2448   000FDE                     POSTINC2        equ	4062	;# 
  2449   000FDF                     INDF2           equ	4063	;# 
  2450   000FE0                     BSR             equ	4064	;# 
  2451   000FE1                     FSR1            equ	4065	;# 
  2452   000FE1                     FSR1L           equ	4065	;# 
  2453   000FE2                     FSR1H           equ	4066	;# 
  2454   000FE3                     PLUSW1          equ	4067	;# 
  2455   000FE4                     PREINC1         equ	4068	;# 
  2456   000FE5                     POSTDEC1        equ	4069	;# 
  2457   000FE6                     POSTINC1        equ	4070	;# 
  2458   000FE7                     INDF1           equ	4071	;# 
  2459   000FE8                     WREG            equ	4072	;# 
  2460   000FE9                     FSR0            equ	4073	;# 
  2461   000FE9                     FSR0L           equ	4073	;# 
  2462   000FEA                     FSR0H           equ	4074	;# 
  2463   000FEB                     PLUSW0          equ	4075	;# 
  2464   000FEC                     PREINC0         equ	4076	;# 
  2465   000FED                     POSTDEC0        equ	4077	;# 
  2466   000FEE                     POSTINC0        equ	4078	;# 
  2467   000FEF                     INDF0           equ	4079	;# 
  2468   000FF0                     INTCON3         equ	4080	;# 
  2469   000FF1                     INTCON2         equ	4081	;# 
  2470   000FF2                     INTCON          equ	4082	;# 
  2471   000FF3                     PROD            equ	4083	;# 
  2472   000FF3                     PRODL           equ	4083	;# 
  2473   000FF4                     PRODH           equ	4084	;# 
  2474   000FF5                     TABLAT          equ	4085	;# 
  2475   000FF6                     TBLPTR          equ	4086	;# 
  2476   000FF6                     TBLPTRL         equ	4086	;# 
  2477   000FF7                     TBLPTRH         equ	4087	;# 
  2478   000FF8                     TBLPTRU         equ	4088	;# 
  2479   000FF9                     PCLAT           equ	4089	;# 
  2480   000FF9                     PC              equ	4089	;# 
  2481   000FF9                     PCL             equ	4089	;# 
  2482   000FFA                     PCLATH          equ	4090	;# 
  2483   000FFB                     PCLATU          equ	4091	;# 
  2484   000FFC                     STKPTR          equ	4092	;# 
  2485   000FFD                     TOS             equ	4093	;# 
  2486   000FFD                     TOSL            equ	4093	;# 
  2487   000FFE                     TOSH            equ	4094	;# 
  2488   000FFF                     TOSU            equ	4095	;# 
  2489   000E80                     MAADR5          equ	3712	;# 
  2490   000E81                     MAADR6          equ	3713	;# 
  2491   000E82                     MAADR3          equ	3714	;# 
  2492   000E83                     MAADR4          equ	3715	;# 
  2493   000E84                     MAADR1          equ	3716	;# 
  2494   000E85                     MAADR2          equ	3717	;# 
  2495   000E8A                     MISTAT          equ	3722	;# 
  2496   000E97                     EFLOCON         equ	3735	;# 
  2497   000E98                     EPAUS           equ	3736	;# 
  2498   000E98                     EPAUSL          equ	3736	;# 
  2499   000E99                     EPAUSH          equ	3737	;# 
  2500   000EA0                     MACON1          equ	3744	;# 
  2501   000EA2                     MACON3          equ	3746	;# 
  2502   000EA3                     MACON4          equ	3747	;# 
  2503   000EA4                     MABBIPG         equ	3748	;# 
  2504   000EA6                     MAIPG           equ	3750	;# 
  2505   000EA6                     MAIPGL          equ	3750	;# 
  2506   000EA7                     MAIPGH          equ	3751	;# 
  2507   000EAA                     MAMXFL          equ	3754	;# 
  2508   000EAA                     MAMXFLL         equ	3754	;# 
  2509   000EAB                     MAMXFLH         equ	3755	;# 
  2510   000EB2                     MICMD           equ	3762	;# 
  2511   000EB4                     MIREGADR        equ	3764	;# 
  2512   000EB6                     MIWR            equ	3766	;# 
  2513   000EB6                     MIWRL           equ	3766	;# 
  2514   000EB7                     MIWRH           equ	3767	;# 
  2515   000EB8                     MIRD            equ	3768	;# 
  2516   000EB8                     MIRDL           equ	3768	;# 
  2517   000EB9                     MIRDH           equ	3769	;# 
  2518   000EC0                     EHT0            equ	3776	;# 
  2519   000EC1                     EHT1            equ	3777	;# 
  2520   000EC2                     EHT2            equ	3778	;# 
  2521   000EC3                     EHT3            equ	3779	;# 
  2522   000EC4                     EHT4            equ	3780	;# 
  2523   000EC5                     EHT5            equ	3781	;# 
  2524   000EC6                     EHT6            equ	3782	;# 
  2525   000EC7                     EHT7            equ	3783	;# 
  2526   000EC8                     EPMM0           equ	3784	;# 
  2527   000EC9                     EPMM1           equ	3785	;# 
  2528   000ECA                     EPMM2           equ	3786	;# 
  2529   000ECB                     EPMM3           equ	3787	;# 
  2530   000ECC                     EPMM4           equ	3788	;# 
  2531   000ECD                     EPMM5           equ	3789	;# 
  2532   000ECE                     EPMM6           equ	3790	;# 
  2533   000ECF                     EPMM7           equ	3791	;# 
  2534   000ED0                     EPMCS           equ	3792	;# 
  2535   000ED0                     EPMCSL          equ	3792	;# 
  2536   000ED1                     EPMCSH          equ	3793	;# 
  2537   000ED4                     EPMO            equ	3796	;# 
  2538   000ED4                     EPMOL           equ	3796	;# 
  2539   000ED5                     EPMOH           equ	3797	;# 
  2540   000ED8                     ERXFCON         equ	3800	;# 
  2541   000ED9                     EPKTCNT         equ	3801	;# 
  2542   000EE2                     EWRPT           equ	3810	;# 
  2543   000EE2                     EWRPTL          equ	3810	;# 
  2544   000EE3                     EWRPTH          equ	3811	;# 
  2545   000EE4                     ETXST           equ	3812	;# 
  2546   000EE4                     ETXSTL          equ	3812	;# 
  2547   000EE5                     ETXSTH          equ	3813	;# 
  2548   000EE6                     ETXND           equ	3814	;# 
  2549   000EE6                     ETXNDL          equ	3814	;# 
  2550   000EE7                     ETXNDH          equ	3815	;# 
  2551   000EE8                     ERXST           equ	3816	;# 
  2552   000EE8                     ERXSTL          equ	3816	;# 
  2553   000EE9                     ERXSTH          equ	3817	;# 
  2554   000EEA                     ERXND           equ	3818	;# 
  2555   000EEA                     ERXNDL          equ	3818	;# 
  2556   000EEB                     ERXNDH          equ	3819	;# 
  2557   000EEC                     ERXRDPT         equ	3820	;# 
  2558   000EEC                     ERXRDPTL        equ	3820	;# 
  2559   000EED                     ERXRDPTH        equ	3821	;# 
  2560   000EEE                     ERXWRPT         equ	3822	;# 
  2561   000EEE                     ERXWRPTL        equ	3822	;# 
  2562   000EEF                     ERXWRPTH        equ	3823	;# 
  2563   000EF0                     EDMAST          equ	3824	;# 
  2564   000EF0                     EDMASTL         equ	3824	;# 
  2565   000EF1                     EDMASTH         equ	3825	;# 
  2566   000EF2                     EDMAND          equ	3826	;# 
  2567   000EF2                     EDMANDL         equ	3826	;# 
  2568   000EF3                     EDMANDH         equ	3827	;# 
  2569   000EF4                     EDMADST         equ	3828	;# 
  2570   000EF4                     EDMADSTL        equ	3828	;# 
  2571   000EF5                     EDMADSTH        equ	3829	;# 
  2572   000EF6                     EDMACS          equ	3830	;# 
  2573   000EF6                     EDMACSL         equ	3830	;# 
  2574   000EF7                     EDMACSH         equ	3831	;# 
  2575   000EFB                     EIE             equ	3835	;# 
  2576   000EFD                     ESTAT           equ	3837	;# 
  2577   000EFE                     ECON2           equ	3838	;# 
  2578   000F60                     EIR             equ	3936	;# 
  2579   000F61                     EDATA           equ	3937	;# 
  2580   000F62                     SSP2CON2        equ	3938	;# 
  2581   000F63                     SSP2CON1        equ	3939	;# 
  2582   000F64                     SSP2STAT        equ	3940	;# 
  2583   000F65                     SSP2ADD         equ	3941	;# 
  2584   000F66                     SSP2BUF         equ	3942	;# 
  2585   000F67                     ECCP2DEL        equ	3943	;# 
  2586   000F68                     ECCP2AS         equ	3944	;# 
  2587   000F69                     ECCP3DEL        equ	3945	;# 
  2588   000F6A                     ECCP3AS         equ	3946	;# 
  2589   000F6B                     RCSTA2          equ	3947	;# 
  2590   000F6C                     TXSTA2          equ	3948	;# 
  2591   000F6D                     TXREG2          equ	3949	;# 
  2592   000F6E                     RCREG2          equ	3950	;# 
  2593   000F6F                     SPBRG2          equ	3951	;# 
  2594   000F70                     CCP5CON         equ	3952	;# 
  2595   000F71                     CCPR5           equ	3953	;# 
  2596   000F71                     CCPR5L          equ	3953	;# 
  2597   000F72                     CCPR5H          equ	3954	;# 
  2598   000F73                     CCP4CON         equ	3955	;# 
  2599   000F74                     CCPR4           equ	3956	;# 
  2600   000F74                     CCPR4L          equ	3956	;# 
  2601   000F75                     CCPR4H          equ	3957	;# 
  2602   000F76                     T4CON           equ	3958	;# 
  2603   000F77                     PR4             equ	3959	;# 
  2604   000F78                     TMR4            equ	3960	;# 
  2605   000F79                     ECCP1DEL        equ	3961	;# 
  2606   000F7A                     ERDPT           equ	3962	;# 
  2607   000F7A                     ERDPTL          equ	3962	;# 
  2608   000F7B                     ERDPTH          equ	3963	;# 
  2609   000F7C                     BAUDCON2        equ	3964	;# 
  2610   000F7C                     BAUDCTL2        equ	3964	;# 
  2611   000F7D                     SPBRGH2         equ	3965	;# 
  2612   000F7E                     BAUDCON1        equ	3966	;# 
  2613   000F7E                     BAUDCON         equ	3966	;# 
  2614   000F7E                     BAUDCTL         equ	3966	;# 
  2615   000F7E                     BAUDCTL1        equ	3966	;# 
  2616   000F7F                     SPBRGH1         equ	3967	;# 
  2617   000F7F                     SPBRGH          equ	3967	;# 
  2618   000F80                     PORTA           equ	3968	;# 
  2619   000F81                     PORTB           equ	3969	;# 
  2620   000F82                     PORTC           equ	3970	;# 
  2621   000F83                     PORTD           equ	3971	;# 
  2622   000F84                     PORTE           equ	3972	;# 
  2623   000F85                     PORTF           equ	3973	;# 
  2624   000F86                     PORTG           equ	3974	;# 
  2625   000F87                     PORTH           equ	3975	;# 
  2626   000F88                     PORTJ           equ	3976	;# 
  2627   000F89                     LATA            equ	3977	;# 
  2628   000F8A                     LATB            equ	3978	;# 
  2629   000F8B                     LATC            equ	3979	;# 
  2630   000F8C                     LATD            equ	3980	;# 
  2631   000F8D                     LATE            equ	3981	;# 
  2632   000F8E                     LATF            equ	3982	;# 
  2633   000F8F                     LATG            equ	3983	;# 
  2634   000F90                     LATH            equ	3984	;# 
  2635   000F91                     LATJ            equ	3985	;# 
  2636   000F92                     TRISA           equ	3986	;# 
  2637   000F92                     DDRA            equ	3986	;# 
  2638   000F93                     TRISB           equ	3987	;# 
  2639   000F93                     DDRB            equ	3987	;# 
  2640   000F94                     TRISC           equ	3988	;# 
  2641   000F94                     DDRC            equ	3988	;# 
  2642   000F95                     TRISD           equ	3989	;# 
  2643   000F95                     DDRD            equ	3989	;# 
  2644   000F96                     TRISE           equ	3990	;# 
  2645   000F96                     DDRE            equ	3990	;# 
  2646   000F97                     TRISF           equ	3991	;# 
  2647   000F97                     DDRF            equ	3991	;# 
  2648   000F98                     TRISG           equ	3992	;# 
  2649   000F98                     DDRG            equ	3992	;# 
  2650   000F99                     TRISH           equ	3993	;# 
  2651   000F99                     DDRH            equ	3993	;# 
  2652   000F9A                     TRISJ           equ	3994	;# 
  2653   000F9A                     DDRJ            equ	3994	;# 
  2654   000F9B                     OSCTUNE         equ	3995	;# 
  2655   000F9C                     MEMCON          equ	3996	;# 
  2656   000F9D                     PIE1            equ	3997	;# 
  2657   000F9E                     PIR1            equ	3998	;# 
  2658   000F9F                     IPR1            equ	3999	;# 
  2659   000FA0                     PIE2            equ	4000	;# 
  2660   000FA1                     PIR2            equ	4001	;# 
  2661   000FA2                     IPR2            equ	4002	;# 
  2662   000FA3                     PIE3            equ	4003	;# 
  2663   000FA4                     PIR3            equ	4004	;# 
  2664   000FA5                     IPR3            equ	4005	;# 
  2665   000FA6                     EECON1          equ	4006	;# 
  2666   000FA7                     EECON2          equ	4007	;# 
  2667   000FAB                     RCSTA1          equ	4011	;# 
  2668   000FAB                     RCSTA           equ	4011	;# 
  2669   000FAC                     TXSTA1          equ	4012	;# 
  2670   000FAC                     TXSTA           equ	4012	;# 
  2671   000FAD                     TXREG1          equ	4013	;# 
  2672   000FAD                     TXREG           equ	4013	;# 
  2673   000FAE                     RCREG1          equ	4014	;# 
  2674   000FAE                     RCREG           equ	4014	;# 
  2675   000FAF                     SPBRG1          equ	4015	;# 
  2676   000FAF                     SPBRG           equ	4015	;# 
  2677   000FB0                     PSPCON          equ	4016	;# 
  2678   000FB1                     T3CON           equ	4017	;# 
  2679   000FB2                     TMR3            equ	4018	;# 
  2680   000FB2                     TMR3L           equ	4018	;# 
  2681   000FB3                     TMR3H           equ	4019	;# 
  2682   000FB4                     CMCON           equ	4020	;# 
  2683   000FB5                     CVRCON          equ	4021	;# 
  2684   000FB6                     ECCP1AS         equ	4022	;# 
  2685   000FB7                     CCP3CON         equ	4023	;# 
  2686   000FB7                     ECCP3CON        equ	4023	;# 
  2687   000FB8                     CCPR3           equ	4024	;# 
  2688   000FB8                     CCPR3L          equ	4024	;# 
  2689   000FB9                     CCPR3H          equ	4025	;# 
  2690   000FBA                     CCP2CON         equ	4026	;# 
  2691   000FBA                     ECCP2CON        equ	4026	;# 
  2692   000FBB                     CCPR2           equ	4027	;# 
  2693   000FBB                     CCPR2L          equ	4027	;# 
  2694   000FBC                     CCPR2H          equ	4028	;# 
  2695   000FBD                     CCP1CON         equ	4029	;# 
  2696   000FBD                     ECCP1CON        equ	4029	;# 
  2697   000FBE                     CCPR1           equ	4030	;# 
  2698   000FBE                     CCPR1L          equ	4030	;# 
  2699   000FBF                     CCPR1H          equ	4031	;# 
  2700   000FC0                     ADCON2          equ	4032	;# 
  2701   000FC1                     ADCON1          equ	4033	;# 
  2702   000FC2                     ADCON0          equ	4034	;# 
  2703   000FC3                     ADRES           equ	4035	;# 
  2704   000FC3                     ADRESL          equ	4035	;# 
  2705   000FC4                     ADRESH          equ	4036	;# 
  2706   000FC5                     SSP1CON2        equ	4037	;# 
  2707   000FC5                     SSPCON2         equ	4037	;# 
  2708   000FC6                     SSP1CON1        equ	4038	;# 
  2709   000FC6                     SSPCON1         equ	4038	;# 
  2710   000FC7                     SSP1STAT        equ	4039	;# 
  2711   000FC7                     SSPSTAT         equ	4039	;# 
  2712   000FC8                     SSP1ADD         equ	4040	;# 
  2713   000FC8                     SSPADD          equ	4040	;# 
  2714   000FC9                     SSP1BUF         equ	4041	;# 
  2715   000FC9                     SSPBUF          equ	4041	;# 
  2716   000FCA                     T2CON           equ	4042	;# 
  2717   000FCB                     PR2             equ	4043	;# 
  2718   000FCC                     TMR2            equ	4044	;# 
  2719   000FCD                     T1CON           equ	4045	;# 
  2720   000FCE                     TMR1            equ	4046	;# 
  2721   000FCE                     TMR1L           equ	4046	;# 
  2722   000FCF                     TMR1H           equ	4047	;# 
  2723   000FD0                     RCON            equ	4048	;# 
  2724   000FD1                     WDTCON          equ	4049	;# 
  2725   000FD2                     ECON1           equ	4050	;# 
  2726   000FD3                     OSCCON          equ	4051	;# 
  2727   000FD5                     T0CON           equ	4053	;# 
  2728   000FD6                     TMR0            equ	4054	;# 
  2729   000FD6                     TMR0L           equ	4054	;# 
  2730   000FD7                     TMR0H           equ	4055	;# 
  2731   000FD8                     STATUS          equ	4056	;# 
  2732   000FD9                     FSR2            equ	4057	;# 
  2733   000FD9                     FSR2L           equ	4057	;# 
  2734   000FDA                     FSR2H           equ	4058	;# 
  2735   000FDB                     PLUSW2          equ	4059	;# 
  2736   000FDC                     PREINC2         equ	4060	;# 
  2737   000FDD                     POSTDEC2        equ	4061	;# 
  2738   000FDE                     POSTINC2        equ	4062	;# 
  2739   000FDF                     INDF2           equ	4063	;# 
  2740   000FE0                     BSR             equ	4064	;# 
  2741   000FE1                     FSR1            equ	4065	;# 
  2742   000FE1                     FSR1L           equ	4065	;# 
  2743   000FE2                     FSR1H           equ	4066	;# 
  2744   000FE3                     PLUSW1          equ	4067	;# 
  2745   000FE4                     PREINC1         equ	4068	;# 
  2746   000FE5                     POSTDEC1        equ	4069	;# 
  2747   000FE6                     POSTINC1        equ	4070	;# 
  2748   000FE7                     INDF1           equ	4071	;# 
  2749   000FE8                     WREG            equ	4072	;# 
  2750   000FE9                     FSR0            equ	4073	;# 
  2751   000FE9                     FSR0L           equ	4073	;# 
  2752   000FEA                     FSR0H           equ	4074	;# 
  2753   000FEB                     PLUSW0          equ	4075	;# 
  2754   000FEC                     PREINC0         equ	4076	;# 
  2755   000FED                     POSTDEC0        equ	4077	;# 
  2756   000FEE                     POSTINC0        equ	4078	;# 
  2757   000FEF                     INDF0           equ	4079	;# 
  2758   000FF0                     INTCON3         equ	4080	;# 
  2759   000FF1                     INTCON2         equ	4081	;# 
  2760   000FF2                     INTCON          equ	4082	;# 
  2761   000FF3                     PROD            equ	4083	;# 
  2762   000FF3                     PRODL           equ	4083	;# 
  2763   000FF4                     PRODH           equ	4084	;# 
  2764   000FF5                     TABLAT          equ	4085	;# 
  2765   000FF6                     TBLPTR          equ	4086	;# 
  2766   000FF6                     TBLPTRL         equ	4086	;# 
  2767   000FF7                     TBLPTRH         equ	4087	;# 
  2768   000FF8                     TBLPTRU         equ	4088	;# 
  2769   000FF9                     PCLAT           equ	4089	;# 
  2770   000FF9                     PC              equ	4089	;# 
  2771   000FF9                     PCL             equ	4089	;# 
  2772   000FFA                     PCLATH          equ	4090	;# 
  2773   000FFB                     PCLATU          equ	4091	;# 
  2774   000FFC                     STKPTR          equ	4092	;# 
  2775   000FFD                     TOS             equ	4093	;# 
  2776   000FFD                     TOSL            equ	4093	;# 
  2777   000FFE                     TOSH            equ	4094	;# 
  2778   000FFF                     TOSU            equ	4095	;# 
  2779   000E80                     MAADR5          equ	3712	;# 
  2780   000E81                     MAADR6          equ	3713	;# 
  2781   000E82                     MAADR3          equ	3714	;# 
  2782   000E83                     MAADR4          equ	3715	;# 
  2783   000E84                     MAADR1          equ	3716	;# 
  2784   000E85                     MAADR2          equ	3717	;# 
  2785   000E8A                     MISTAT          equ	3722	;# 
  2786   000E97                     EFLOCON         equ	3735	;# 
  2787   000E98                     EPAUS           equ	3736	;# 
  2788   000E98                     EPAUSL          equ	3736	;# 
  2789   000E99                     EPAUSH          equ	3737	;# 
  2790   000EA0                     MACON1          equ	3744	;# 
  2791   000EA2                     MACON3          equ	3746	;# 
  2792   000EA3                     MACON4          equ	3747	;# 
  2793   000EA4                     MABBIPG         equ	3748	;# 
  2794   000EA6                     MAIPG           equ	3750	;# 
  2795   000EA6                     MAIPGL          equ	3750	;# 
  2796   000EA7                     MAIPGH          equ	3751	;# 
  2797   000EAA                     MAMXFL          equ	3754	;# 
  2798   000EAA                     MAMXFLL         equ	3754	;# 
  2799   000EAB                     MAMXFLH         equ	3755	;# 
  2800   000EB2                     MICMD           equ	3762	;# 
  2801   000EB4                     MIREGADR        equ	3764	;# 
  2802   000EB6                     MIWR            equ	3766	;# 
  2803   000EB6                     MIWRL           equ	3766	;# 
  2804   000EB7                     MIWRH           equ	3767	;# 
  2805   000EB8                     MIRD            equ	3768	;# 
  2806   000EB8                     MIRDL           equ	3768	;# 
  2807   000EB9                     MIRDH           equ	3769	;# 
  2808   000EC0                     EHT0            equ	3776	;# 
  2809   000EC1                     EHT1            equ	3777	;# 
  2810   000EC2                     EHT2            equ	3778	;# 
  2811   000EC3                     EHT3            equ	3779	;# 
  2812   000EC4                     EHT4            equ	3780	;# 
  2813   000EC5                     EHT5            equ	3781	;# 
  2814   000EC6                     EHT6            equ	3782	;# 
  2815   000EC7                     EHT7            equ	3783	;# 
  2816   000EC8                     EPMM0           equ	3784	;# 
  2817   000EC9                     EPMM1           equ	3785	;# 
  2818   000ECA                     EPMM2           equ	3786	;# 
  2819   000ECB                     EPMM3           equ	3787	;# 
  2820   000ECC                     EPMM4           equ	3788	;# 
  2821   000ECD                     EPMM5           equ	3789	;# 
  2822   000ECE                     EPMM6           equ	3790	;# 
  2823   000ECF                     EPMM7           equ	3791	;# 
  2824   000ED0                     EPMCS           equ	3792	;# 
  2825   000ED0                     EPMCSL          equ	3792	;# 
  2826   000ED1                     EPMCSH          equ	3793	;# 
  2827   000ED4                     EPMO            equ	3796	;# 
  2828   000ED4                     EPMOL           equ	3796	;# 
  2829   000ED5                     EPMOH           equ	3797	;# 
  2830   000ED8                     ERXFCON         equ	3800	;# 
  2831   000ED9                     EPKTCNT         equ	3801	;# 
  2832   000EE2                     EWRPT           equ	3810	;# 
  2833   000EE2                     EWRPTL          equ	3810	;# 
  2834   000EE3                     EWRPTH          equ	3811	;# 
  2835   000EE4                     ETXST           equ	3812	;# 
  2836   000EE4                     ETXSTL          equ	3812	;# 
  2837   000EE5                     ETXSTH          equ	3813	;# 
  2838   000EE6                     ETXND           equ	3814	;# 
  2839   000EE6                     ETXNDL          equ	3814	;# 
  2840   000EE7                     ETXNDH          equ	3815	;# 
  2841   000EE8                     ERXST           equ	3816	;# 
  2842   000EE8                     ERXSTL          equ	3816	;# 
  2843   000EE9                     ERXSTH          equ	3817	;# 
  2844   000EEA                     ERXND           equ	3818	;# 
  2845   000EEA                     ERXNDL          equ	3818	;# 
  2846   000EEB                     ERXNDH          equ	3819	;# 
  2847   000EEC                     ERXRDPT         equ	3820	;# 
  2848   000EEC                     ERXRDPTL        equ	3820	;# 
  2849   000EED                     ERXRDPTH        equ	3821	;# 
  2850   000EEE                     ERXWRPT         equ	3822	;# 
  2851   000EEE                     ERXWRPTL        equ	3822	;# 
  2852   000EEF                     ERXWRPTH        equ	3823	;# 
  2853   000EF0                     EDMAST          equ	3824	;# 
  2854   000EF0                     EDMASTL         equ	3824	;# 
  2855   000EF1                     EDMASTH         equ	3825	;# 
  2856   000EF2                     EDMAND          equ	3826	;# 
  2857   000EF2                     EDMANDL         equ	3826	;# 
  2858   000EF3                     EDMANDH         equ	3827	;# 
  2859   000EF4                     EDMADST         equ	3828	;# 
  2860   000EF4                     EDMADSTL        equ	3828	;# 
  2861   000EF5                     EDMADSTH        equ	3829	;# 
  2862   000EF6                     EDMACS          equ	3830	;# 
  2863   000EF6                     EDMACSL         equ	3830	;# 
  2864   000EF7                     EDMACSH         equ	3831	;# 
  2865   000EFB                     EIE             equ	3835	;# 
  2866   000EFD                     ESTAT           equ	3837	;# 
  2867   000EFE                     ECON2           equ	3838	;# 
  2868   000F60                     EIR             equ	3936	;# 
  2869   000F61                     EDATA           equ	3937	;# 
  2870   000F62                     SSP2CON2        equ	3938	;# 
  2871   000F63                     SSP2CON1        equ	3939	;# 
  2872   000F64                     SSP2STAT        equ	3940	;# 
  2873   000F65                     SSP2ADD         equ	3941	;# 
  2874   000F66                     SSP2BUF         equ	3942	;# 
  2875   000F67                     ECCP2DEL        equ	3943	;# 
  2876   000F68                     ECCP2AS         equ	3944	;# 
  2877   000F69                     ECCP3DEL        equ	3945	;# 
  2878   000F6A                     ECCP3AS         equ	3946	;# 
  2879   000F6B                     RCSTA2          equ	3947	;# 
  2880   000F6C                     TXSTA2          equ	3948	;# 
  2881   000F6D                     TXREG2          equ	3949	;# 
  2882   000F6E                     RCREG2          equ	3950	;# 
  2883   000F6F                     SPBRG2          equ	3951	;# 
  2884   000F70                     CCP5CON         equ	3952	;# 
  2885   000F71                     CCPR5           equ	3953	;# 
  2886   000F71                     CCPR5L          equ	3953	;# 
  2887   000F72                     CCPR5H          equ	3954	;# 
  2888   000F73                     CCP4CON         equ	3955	;# 
  2889   000F74                     CCPR4           equ	3956	;# 
  2890   000F74                     CCPR4L          equ	3956	;# 
  2891   000F75                     CCPR4H          equ	3957	;# 
  2892   000F76                     T4CON           equ	3958	;# 
  2893   000F77                     PR4             equ	3959	;# 
  2894   000F78                     TMR4            equ	3960	;# 
  2895   000F79                     ECCP1DEL        equ	3961	;# 
  2896   000F7A                     ERDPT           equ	3962	;# 
  2897   000F7A                     ERDPTL          equ	3962	;# 
  2898   000F7B                     ERDPTH          equ	3963	;# 
  2899   000F7C                     BAUDCON2        equ	3964	;# 
  2900   000F7C                     BAUDCTL2        equ	3964	;# 
  2901   000F7D                     SPBRGH2         equ	3965	;# 
  2902   000F7E                     BAUDCON1        equ	3966	;# 
  2903   000F7E                     BAUDCON         equ	3966	;# 
  2904   000F7E                     BAUDCTL         equ	3966	;# 
  2905   000F7E                     BAUDCTL1        equ	3966	;# 
  2906   000F7F                     SPBRGH1         equ	3967	;# 
  2907   000F7F                     SPBRGH          equ	3967	;# 
  2908   000F80                     PORTA           equ	3968	;# 
  2909   000F81                     PORTB           equ	3969	;# 
  2910   000F82                     PORTC           equ	3970	;# 
  2911   000F83                     PORTD           equ	3971	;# 
  2912   000F84                     PORTE           equ	3972	;# 
  2913   000F85                     PORTF           equ	3973	;# 
  2914   000F86                     PORTG           equ	3974	;# 
  2915   000F87                     PORTH           equ	3975	;# 
  2916   000F88                     PORTJ           equ	3976	;# 
  2917   000F89                     LATA            equ	3977	;# 
  2918   000F8A                     LATB            equ	3978	;# 
  2919   000F8B                     LATC            equ	3979	;# 
  2920   000F8C                     LATD            equ	3980	;# 
  2921   000F8D                     LATE            equ	3981	;# 
  2922   000F8E                     LATF            equ	3982	;# 
  2923   000F8F                     LATG            equ	3983	;# 
  2924   000F90                     LATH            equ	3984	;# 
  2925   000F91                     LATJ            equ	3985	;# 
  2926   000F92                     TRISA           equ	3986	;# 
  2927   000F92                     DDRA            equ	3986	;# 
  2928   000F93                     TRISB           equ	3987	;# 
  2929   000F93                     DDRB            equ	3987	;# 
  2930   000F94                     TRISC           equ	3988	;# 
  2931   000F94                     DDRC            equ	3988	;# 
  2932   000F95                     TRISD           equ	3989	;# 
  2933   000F95                     DDRD            equ	3989	;# 
  2934   000F96                     TRISE           equ	3990	;# 
  2935   000F96                     DDRE            equ	3990	;# 
  2936   000F97                     TRISF           equ	3991	;# 
  2937   000F97                     DDRF            equ	3991	;# 
  2938   000F98                     TRISG           equ	3992	;# 
  2939   000F98                     DDRG            equ	3992	;# 
  2940   000F99                     TRISH           equ	3993	;# 
  2941   000F99                     DDRH            equ	3993	;# 
  2942   000F9A                     TRISJ           equ	3994	;# 
  2943   000F9A                     DDRJ            equ	3994	;# 
  2944   000F9B                     OSCTUNE         equ	3995	;# 
  2945   000F9C                     MEMCON          equ	3996	;# 
  2946   000F9D                     PIE1            equ	3997	;# 
  2947   000F9E                     PIR1            equ	3998	;# 
  2948   000F9F                     IPR1            equ	3999	;# 
  2949   000FA0                     PIE2            equ	4000	;# 
  2950   000FA1                     PIR2            equ	4001	;# 
  2951   000FA2                     IPR2            equ	4002	;# 
  2952   000FA3                     PIE3            equ	4003	;# 
  2953   000FA4                     PIR3            equ	4004	;# 
  2954   000FA5                     IPR3            equ	4005	;# 
  2955   000FA6                     EECON1          equ	4006	;# 
  2956   000FA7                     EECON2          equ	4007	;# 
  2957   000FAB                     RCSTA1          equ	4011	;# 
  2958   000FAB                     RCSTA           equ	4011	;# 
  2959   000FAC                     TXSTA1          equ	4012	;# 
  2960   000FAC                     TXSTA           equ	4012	;# 
  2961   000FAD                     TXREG1          equ	4013	;# 
  2962   000FAD                     TXREG           equ	4013	;# 
  2963   000FAE                     RCREG1          equ	4014	;# 
  2964   000FAE                     RCREG           equ	4014	;# 
  2965   000FAF                     SPBRG1          equ	4015	;# 
  2966   000FAF                     SPBRG           equ	4015	;# 
  2967   000FB0                     PSPCON          equ	4016	;# 
  2968   000FB1                     T3CON           equ	4017	;# 
  2969   000FB2                     TMR3            equ	4018	;# 
  2970   000FB2                     TMR3L           equ	4018	;# 
  2971   000FB3                     TMR3H           equ	4019	;# 
  2972   000FB4                     CMCON           equ	4020	;# 
  2973   000FB5                     CVRCON          equ	4021	;# 
  2974   000FB6                     ECCP1AS         equ	4022	;# 
  2975   000FB7                     CCP3CON         equ	4023	;# 
  2976   000FB7                     ECCP3CON        equ	4023	;# 
  2977   000FB8                     CCPR3           equ	4024	;# 
  2978   000FB8                     CCPR3L          equ	4024	;# 
  2979   000FB9                     CCPR3H          equ	4025	;# 
  2980   000FBA                     CCP2CON         equ	4026	;# 
  2981   000FBA                     ECCP2CON        equ	4026	;# 
  2982   000FBB                     CCPR2           equ	4027	;# 
  2983   000FBB                     CCPR2L          equ	4027	;# 
  2984   000FBC                     CCPR2H          equ	4028	;# 
  2985   000FBD                     CCP1CON         equ	4029	;# 
  2986   000FBD                     ECCP1CON        equ	4029	;# 
  2987   000FBE                     CCPR1           equ	4030	;# 
  2988   000FBE                     CCPR1L          equ	4030	;# 
  2989   000FBF                     CCPR1H          equ	4031	;# 
  2990   000FC0                     ADCON2          equ	4032	;# 
  2991   000FC1                     ADCON1          equ	4033	;# 
  2992   000FC2                     ADCON0          equ	4034	;# 
  2993   000FC3                     ADRES           equ	4035	;# 
  2994   000FC3                     ADRESL          equ	4035	;# 
  2995   000FC4                     ADRESH          equ	4036	;# 
  2996   000FC5                     SSP1CON2        equ	4037	;# 
  2997   000FC5                     SSPCON2         equ	4037	;# 
  2998   000FC6                     SSP1CON1        equ	4038	;# 
  2999   000FC6                     SSPCON1         equ	4038	;# 
  3000   000FC7                     SSP1STAT        equ	4039	;# 
  3001   000FC7                     SSPSTAT         equ	4039	;# 
  3002   000FC8                     SSP1ADD         equ	4040	;# 
  3003   000FC8                     SSPADD          equ	4040	;# 
  3004   000FC9                     SSP1BUF         equ	4041	;# 
  3005   000FC9                     SSPBUF          equ	4041	;# 
  3006   000FCA                     T2CON           equ	4042	;# 
  3007   000FCB                     PR2             equ	4043	;# 
  3008   000FCC                     TMR2            equ	4044	;# 
  3009   000FCD                     T1CON           equ	4045	;# 
  3010   000FCE                     TMR1            equ	4046	;# 
  3011   000FCE                     TMR1L           equ	4046	;# 
  3012   000FCF                     TMR1H           equ	4047	;# 
  3013   000FD0                     RCON            equ	4048	;# 
  3014   000FD1                     WDTCON          equ	4049	;# 
  3015   000FD2                     ECON1           equ	4050	;# 
  3016   000FD3                     OSCCON          equ	4051	;# 
  3017   000FD5                     T0CON           equ	4053	;# 
  3018   000FD6                     TMR0            equ	4054	;# 
  3019   000FD6                     TMR0L           equ	4054	;# 
  3020   000FD7                     TMR0H           equ	4055	;# 
  3021   000FD8                     STATUS          equ	4056	;# 
  3022   000FD9                     FSR2            equ	4057	;# 
  3023   000FD9                     FSR2L           equ	4057	;# 
  3024   000FDA                     FSR2H           equ	4058	;# 
  3025   000FDB                     PLUSW2          equ	4059	;# 
  3026   000FDC                     PREINC2         equ	4060	;# 
  3027   000FDD                     POSTDEC2        equ	4061	;# 
  3028   000FDE                     POSTINC2        equ	4062	;# 
  3029   000FDF                     INDF2           equ	4063	;# 
  3030   000FE0                     BSR             equ	4064	;# 
  3031   000FE1                     FSR1            equ	4065	;# 
  3032   000FE1                     FSR1L           equ	4065	;# 
  3033   000FE2                     FSR1H           equ	4066	;# 
  3034   000FE3                     PLUSW1          equ	4067	;# 
  3035   000FE4                     PREINC1         equ	4068	;# 
  3036   000FE5                     POSTDEC1        equ	4069	;# 
  3037   000FE6                     POSTINC1        equ	4070	;# 
  3038   000FE7                     INDF1           equ	4071	;# 
  3039   000FE8                     WREG            equ	4072	;# 
  3040   000FE9                     FSR0            equ	4073	;# 
  3041   000FE9                     FSR0L           equ	4073	;# 
  3042   000FEA                     FSR0H           equ	4074	;# 
  3043   000FEB                     PLUSW0          equ	4075	;# 
  3044   000FEC                     PREINC0         equ	4076	;# 
  3045   000FED                     POSTDEC0        equ	4077	;# 
  3046   000FEE                     POSTINC0        equ	4078	;# 
  3047   000FEF                     INDF0           equ	4079	;# 
  3048   000FF0                     INTCON3         equ	4080	;# 
  3049   000FF1                     INTCON2         equ	4081	;# 
  3050   000FF2                     INTCON          equ	4082	;# 
  3051   000FF3                     PROD            equ	4083	;# 
  3052   000FF3                     PRODL           equ	4083	;# 
  3053   000FF4                     PRODH           equ	4084	;# 
  3054   000FF5                     TABLAT          equ	4085	;# 
  3055   000FF6                     TBLPTR          equ	4086	;# 
  3056   000FF6                     TBLPTRL         equ	4086	;# 
  3057   000FF7                     TBLPTRH         equ	4087	;# 
  3058   000FF8                     TBLPTRU         equ	4088	;# 
  3059   000FF9                     PCLAT           equ	4089	;# 
  3060   000FF9                     PC              equ	4089	;# 
  3061   000FF9                     PCL             equ	4089	;# 
  3062   000FFA                     PCLATH          equ	4090	;# 
  3063   000FFB                     PCLATU          equ	4091	;# 
  3064   000FFC                     STKPTR          equ	4092	;# 
  3065   000FFD                     TOS             equ	4093	;# 
  3066   000FFD                     TOSL            equ	4093	;# 
  3067   000FFE                     TOSH            equ	4094	;# 
  3068   000FFF                     TOSU            equ	4095	;# 
  3069                           
  3070 ;;_fObj	offset	0
  3071 ;;_mObj	offset	6
  3072 ;;_rxObj	offset	0
  3073 ;;_rxdata	offset	16
  3074 ;;_ev	offset	0
  3075 ;;_tmid	offset	6
  3076 ;;_processEvent	offset=-3 (param)
  3077 ;;_id	offset=-4 (param)
  3078 ;;_delay	offset=-6 (param)
  3079 ;;_tm	offset	0
  3080 ;;_temp	offset	2
  3081 ;;_ev	offset=-6 (param)
  3082 ;;_inISR	offset=-7 (param)
  3083 ;;_tmid	offset=-9 (param)
  3084 ;;_i	offset	0
  3085 ;;_tm	offset=-2 (param)
  3086 ;;_ev	offset=-8 (param)
  3087 ;;_inISR	offset=-9 (param)
  3088 ;;_me	offset=-2 (param)
  3089 ;;_delay	offset=-4 (param)
  3090 ;;_me	offset=-2 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_processEvent	offset=-5 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_eventID	offset=-3 (param)
  3095 ;;_rxFlags	offset	0
  3096 ;;_rxObj	offset=-2 (param)
  3097 ;;_rxd	offset=-4 (param)
  3098 ;;_temp32	offset	0
  3099 ;;_ba	offset	4
  3100 ;;_fifoReg	offset	80
  3101 ;;_ciFifoCon	offset	92
  3102 ;;_myReg	offset	97
  3103 ;;_ciFifoUa	offset	101
  3104 ;;_a	offset	105
  3105 ;;_i	offset	107
  3106 ;;_n	offset	108
  3107 ;;_spiTransferError	offset	109
  3108 ;;_channel	offset=-1 (param)
  3109 ;;_rxObj	offset=-3 (param)
  3110 ;;_rxd	offset=-5 (param)
  3111 ;;_nBytes	offset=-6 (param)
  3112 ;;_ciFifoCon	offset	0
  3113 ;;_a	offset	5
  3114 ;;_spiTransferError	offset	7
  3115 ;;_channel	offset=-1 (param)
  3116 ;;_i	offset	0
  3117 ;;_spiTransferSize	offset	2
  3118 ;;_spiTransferError	offset	4
  3119 ;;_address	offset=-2 (param)
  3120 ;;_rxd	offset=-4 (param)
  3121 ;;_nBytes	offset=-6 (param)
  3122 ;;_ciFifoSta	offset	0
  3123 ;;_a	offset	4
  3124 ;;_spiTransferError	offset	6
  3125 ;;_channel	offset=-1 (param)
  3126 ;;_flags	offset=-3 (param)
  3127 ;;_i	offset	0
  3128 ;;_me	offset=-2 (param)
  3129 ;;_ev	offset	0
  3130 ;;_ev	offset=-2 (param)
  3131 ;;_txMsg	offset	0
  3132 ;;_txdata	offset	16
  3133 ;;_percent	offset=-1 (param)
  3134 ;;_ev	offset=-2 (param)
  3135 ;;_txMsg	offset	0
  3136 ;;_txdata	offset	16
  3137 ;;_light	offset=-1 (param)
  3138 ;;_txMsg	offset	0
  3139 ;;_txdata	offset	16
  3140 ;;_light	offset=-1 (param)
  3141 ;;_txFlags	offset	0
  3142 ;;_txObj	offset=-2 (param)
  3143 ;;_txd	offset=-4 (param)
  3144 ;;_temp32	offset	0
  3145 ;;_txBuffer	offset	4
  3146 ;;_fifoReg	offset	80
  3147 ;;_ciFifoCon	offset	92
  3148 ;;_a	offset	97
  3149 ;;_ciFifoUa	offset	101
  3150 ;;_dataBytesInObject	offset	105
  3151 ;;_n	offset	109
  3152 ;;_spiTransferError	offset	111
  3153 ;;_i	offset	112
  3154 ;;_j	offset	113
  3155 ;;_channel	offset=-1 (param)
  3156 ;;_txObj	offset=-3 (param)
  3157 ;;_txd	offset=-5 (param)
  3158 ;;_txdNumBytes	offset=-9 (param)
  3159 ;;_flush	offset=-10 (param)
  3160 ;;_i	offset	0
  3161 ;;_spiTransferSize	offset	2
  3162 ;;_spiTransferError	offset	4
  3163 ;;_address	offset=-2 (param)
  3164 ;;_txd	offset=-4 (param)
  3165 ;;_nBytes	offset=-6 (param)
  3166 ;;_ciFifoCon	offset	0
  3167 ;;_a	offset	5
  3168 ;;_spiTransferError	offset	7
  3169 ;;_channel	offset=-1 (param)
  3170 ;;_flush	offset=-2 (param)
  3171 ;;_w	offset	0
  3172 ;;_i	offset	4
  3173 ;;_j	offset	6
  3174 ;;_spiTransferSize	offset	8
  3175 ;;_n	offset	10
  3176 ;;_spiTransferError	offset	12
  3177 ;;_address	offset=-2 (param)
  3178 ;;_rxd	offset=-4 (param)
  3179 ;;_nWords	offset=-6 (param)
  3180 ;;_dataBytesInObject	offset	0
  3181 ;;_dlc	offset=-1 (param)
  3182 ;;_ciFifoSta	offset	0
  3183 ;;_a	offset	4
  3184 ;;_spiTransferError	offset	6
  3185 ;;_channel	offset=-1 (param)
  3186 ;;_flags	offset=-3 (param)
  3187 ;;_ev	offset	0
  3188 ;;_inISR	offset=-6 (param)
  3189 ;;_sign	offset	0
  3190 ;;_counter	offset	1
  3191 ;;_dividend	offset=-2 (param)
  3192 ;;_divisor	offset=-4 (param)
  3193 ;;_inISR	offset=-1 (param)
  3194 ;;_inISR	offset=-1 (param)
  3195 ;;_InterruptHandler	offset=-3 (param)
  3196 ;;_filter	offset=-1 (param)
  3197 ;;_fObj	offset=-3 (param)
  3198 ;;_mObj	offset=-5 (param)
  3199 ;;_a	offset	0
  3200 ;;_fCtrl	offset	2
  3201 ;;_filter	offset=-1 (param)
  3202 ;;_channel	offset=-2 (param)
  3203 ;;_enable	offset=-3 (param)
  3204 ;;_temp32	offset	0
  3205 ;;_fObj	offset	4
  3206 ;;_a	offset	10
  3207 ;;_filter	offset=-1 (param)
  3208 ;;_id	offset=-3 (param)
  3209 ;;_temp32	offset	0
  3210 ;;_mObj	offset	4
  3211 ;;_a	offset	10
  3212 ;;_filter	offset=-1 (param)
  3213 ;;_mask	offset=-3 (param)
  3214 ;;_EXIDE	offset=-4 (param)
  3215 ;;_a	offset	0
  3216 ;;_spiTransferError	offset	2
  3217 ;;_fCtrl	offset	3
  3218 ;;_filter	offset=-1 (param)
  3219 ;;_txqConfig	offset	0
  3220 ;;_config	offset	4
  3221 ;;_rxfConfig	offset	7
  3222 ;;_txfConfig	offset	10
  3223 ;;_tefConfig	offset	12
  3224 ;;_bitTime	offset=-1 (param)
  3225 ;;_withISR	offset=-2 (param)
  3226 ;;_ciFifoCon	offset	0
  3227 ;;_config	offset=-2 (param)
  3228 ;;_ciFifoCon	offset	0
  3229 ;;_config	offset=-2 (param)
  3230 ;;_ciFifoCon	offset	0
  3231 ;;_config	offset=-2 (param)
  3232 ;;_ciFifoCon	offset	0
  3233 ;;_a	offset	5
  3234 ;;_channel	offset=-1 (param)
  3235 ;;_config	offset=-3 (param)
  3236 ;;_ts	offset=-4 (param)
  3237 ;;_ps	offset=-2 (param)
  3238 ;;_d	offset	0
  3239 ;;_spiTransferError	offset	1
  3240 ;;_ciTefCon	offset	0
  3241 ;;_config	offset=-2 (param)
  3242 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3243 ;;_ciFifoCon	offset	0
  3244 ;;_a	offset	5
  3245 ;;_channel	offset=-1 (param)
  3246 ;;_config	offset=-3 (param)
  3247 ;;_d	offset	0
  3248 ;;_spiTransferError	offset	1
  3249 ;;_opMode	offset=-1 (param)
  3250 ;;_spiTransferError	offset	0
  3251 ;;_address	offset=-2 (param)
  3252 ;;_txd	offset=-3 (param)
  3253 ;;_spiTransferError	offset	0
  3254 ;;_address	offset=-2 (param)
  3255 ;;_rxd	offset=-4 (param)
  3256 ;;_intEnables	offset	0
  3257 ;;_index	offset=-1 (param)
  3258 ;;_flags	offset=-3 (param)
  3259 ;;_spiTransferSize	offset	0
  3260 ;;_i	offset	2
  3261 ;;_spiTransferError	offset	3
  3262 ;;_address	offset=-2 (param)
  3263 ;;_txd	offset=-4 (param)
  3264 ;;_ciCon	offset	0
  3265 ;;_config	offset=-2 (param)
  3266 ;;_ciCon	offset	0
  3267 ;;_config	offset=-2 (param)
  3268 ;;_ciNbtcfg	offset	0
  3269 ;;_bitTime	offset=-1 (param)
  3270 ;;_spiTransferSize	offset	0
  3271 ;;_i	offset	2
  3272 ;;_spiTransferError	offset	3
  3273 ;;_address	offset=-2 (param)
  3274 ;;_txd	offset=-6 (param)
  3275 ;;_dummy	offset	0
  3276 ;;_txPtr	offset=-2 (param)
  3277 ;;_rxPtr	offset=-4 (param)
  3278 ;;_size	offset=-6 (param)
  3279 ;;_dummy	offset	0
  3280 ;;_i	offset	1
  3281 ;;_id	offset=-1 (param)
  3282 ;;_inISR	offset=-2 (param)
  3283 ;;_me	offset=-2 (param)
  3284 ;;_tm	offset	0
  3285 ;;_temp	offset	2
  3286 ;;_ev	offset=-6 (param)
  3287 ;;_inISR	offset=-7 (param)
  3288 ;;_tmid	offset=-9 (param)
  3289 ;;_sign	offset	0
  3290 ;;_counter	offset	1
  3291 ;;_dividend	offset=-2 (param)
  3292 ;;_divisor	offset=-4 (param)
  3293 ;;_i	offset	0
  3294 ;;_tm	offset=-2 (param)
  3295 ;;_ev	offset=-8 (param)
  3296 ;;_inISR	offset=-9 (param)
  3297 ;;_inISR	offset=-1 (param)
  3298 ;;_inISR	offset=-1 (param)
  3299 ;;_me	offset=-2 (param)
  3300 ;;_delay	offset=-4 (param)
  3301 ;;_me	offset=-2 (param)
  3302                           
  3303                           	psect	mediumconst
  3304   00FF8C                     __pmediumconst:
  3305                           	callstack 0
  3306   00FF8C  00                 	db	0
  3307   00FF8D                     _canControlResetValues:
  3308                           	callstack 0
  3309   00FF8D  0760               	dw	1888
  3310   00FF8F  0498               	dw	1176
  3311   00FF91  0F0F               	dw	3855
  3312   00FF93  003E               	dw	62
  3313   00FF95  0303               	dw	771
  3314   00FF97  000E               	dw	14
  3315   00FF99  1000               	dw	4096
  3316   00FF9B  0002               	dw	2
  3317   00FF9D  0000               	dw	0
  3318   00FF9F  0000               	dw	0
  3319   00FFA1  0000               	dw	0
  3320   00FFA3  0000               	dw	0
  3321   00FFA5  0040               	dw	64
  3322   00FFA7  4040               	dw	16448
  3323   00FFA9  0000               	dw	0
  3324   00FFAB  0000               	dw	0
  3325   00FFAD  0000               	dw	0
  3326   00FFAF  0000               	dw	0
  3327   00FFB1  0000               	dw	0
  3328   00FFB3  0000               	dw	0
  3329   00FFB5  0000               	dw	0
  3330   00FFB7  0000               	dw	0
  3331   00FFB9  0000               	dw	0
  3332   00FFBB  0000               	dw	0
  3333   00FFBD  0000               	dw	0
  3334   00FFBF  0000               	dw	0
  3335   00FFC1  0000               	dw	0
  3336   00FFC3  0020               	dw	32
  3337   00FFC5  0000               	dw	0
  3338   00FFC7  0000               	dw	0
  3339   00FFC9  0000               	dw	0
  3340   00FFCB  0000               	dw	0
  3341   00FFCD  0400               	dw	1024
  3342   00FFCF  0000               	dw	0
  3343   00FFD1  0000               	dw	0
  3344   00FFD3  0000               	dw	0
  3345   00FFD5  0000               	dw	0
  3346   00FFD7  0000               	dw	0
  3347   00FFD9  0000               	dw	0
  3348   00FFDB  0000               	dw	0
  3349   00FFDD                     __end_of_canControlResetValues:
  3350                           	callstack 0
  3351   00FFDD                     _canFifoResetValues:
  3352                           	callstack 0
  3353   00FFDD  0400               	dw	1024
  3354   00FFDF  0060               	dw	96
  3355   00FFE1  0000               	dw	0
  3356   00FFE3  0000               	dw	0
  3357   00FFE5  0000               	dw	0
  3358   00FFE7  0000               	dw	0
  3359   00FFE9                     __end_of_canFifoResetValues:
  3360                           	callstack 0
  3361   00FFE9                     _spi2_configuration:
  3362                           	callstack 0
  3363   00FFE9  01                 	db	1
  3364   00FFEA  40                 	db	64
  3365   00FFEB  00                 	db	0
  3366   00FFEC  00                 	db	0
  3367   00FFED                     __end_of_spi2_configuration:
  3368                           	callstack 0
  3369   00FFED                     STR_1:
  3370   00FFED  20                 	db	32
  3371   00FFEE  20                 	db	32
  3372   00FFEF  20                 	db	32
  3373   00FFF0  20                 	db	32
  3374   00FFF1  20                 	db	32
  3375   00FFF2  20                 	db	32
  3376   00FFF3  20                 	db	32
  3377   00FFF4  20                 	db	32
  3378   00FFF5  20                 	db	32
  3379   00FFF6  20                 	db	32
  3380   00FFF7  20                 	db	32
  3381   00FFF8  20                 	db	32
  3382   00FFF9  20                 	db	32
  3383   00FFFA  20                 	db	32
  3384   00FFFB  20                 	db	32
  3385   00FFFC  20                 	db	32
  3386   00FFFD  00                 	db	0
  3387   00FFED                     STR_2           equ	STR_1
  3388   00FFFE  00                 	db	0	; dummy byte at the end
  3389   000003                     __activetblptr  equ	3
  3390                           
  3391                           	psect	nvCOMRAM
  3392   000050                     __pnvCOMRAM:
  3393                           	callstack 0
  3394   000050                     _TMR0_InterruptHandler:
  3395                           	callstack 0
  3396   000050                     	ds	3
  3397   000F62                     _SSP2CON2       set	3938
  3398   000F63                     _SSP2CON1bits   set	3939
  3399   000F65                     _SSP2ADD        set	3941
  3400   000F63                     _SSP2CON1       set	3939
  3401   000F64                     _SSP2STAT       set	3940
  3402   000FD5                     _T0CON          set	4053
  3403   000FD6                     _TMR0L          set	4054
  3404   000FD7                     _TMR0H          set	4055
  3405   000FD5                     _T0CONbits      set	4053
  3406   000FF2                     _INTCONbits     set	4082
  3407   000FD0                     _RCONbits       set	4048
  3408   000FC1                     _ADCON1bits     set	4033
  3409   000F95                     _TRISD          set	3989
  3410   000F94                     _TRISC          set	3988
  3411   000F99                     _TRISH          set	3993
  3412   000F93                     _TRISB          set	3987
  3413   000F98                     _TRISG          set	3992
  3414   000F92                     _TRISA          set	3986
  3415   000F97                     _TRISF          set	3991
  3416   000F96                     _TRISE          set	3990
  3417   000F90                     _LATH           set	3984
  3418   000F8B                     _LATC           set	3979
  3419   000F8F                     _LATG           set	3983
  3420   000F8A                     _LATB           set	3978
  3421   000F8E                     _LATF           set	3982
  3422   000F89                     _LATA           set	3977
  3423   000F8C                     _LATD           set	3980
  3424   000F91                     _LATJ           set	3985
  3425   000F8D                     _LATE           set	3981
  3426   000F9B                     _OSCTUNE        set	3995
  3427   000FD3                     _OSCCON         set	4051
  3428   000F9A                     _TRISJ          set	3994
  3429   000F95                     _TRISDbits      set	3989
  3430   000F98                     _TRISGbits      set	3992
  3431   000F66                     _SSP2BUF        set	3942
  3432   000F64                     _SSP2STATbits   set	3940
  3433   000F8F                     _LATGbits       set	3983
  3434                           
  3435                           ; #config settings
  3436                           
  3437                           	psect	cinit
  3438   0146B2                     __pcinit:
  3439                           	callstack 0
  3440   0146B2                     start_initialization:
  3441                           	callstack 0
  3442   0146B2                     __initialization:
  3443                           	callstack 0
  3444                           
  3445                           ; Clear objects allocated to BIGRAM (282 bytes)
  3446   0146B2  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3447   0146B6  EE21 F01A          	lfsr	2,282
  3448   0146BA                     clear_0:
  3449   0146BA  6AEE               	clrf	postinc0,c
  3450   0146BC  50DD               	movf	postdec2,w,c
  3451   0146BE  50D9               	movf	fsr2l,w,c
  3452   0146C0  E1FC               	bnz	clear_0
  3453   0146C2  50DA               	movf	fsr2h,w,c
  3454   0146C4  E1FA               	bnz	clear_0
  3455                           
  3456                           ; Clear objects allocated to BANK2 (200 bytes)
  3457   0146C6  EE02  F000         	lfsr	0,__pbssBANK2
  3458   0146CA  0EC8               	movlw	200
  3459   0146CC                     clear_1:
  3460   0146CC  6AEE               	clrf	postinc0,c
  3461   0146CE  06E8               	decf	wreg,f,c
  3462   0146D0  E1FD               	bnz	clear_1
  3463                           
  3464                           ; Clear objects allocated to BANK1 (200 bytes)
  3465   0146D2  EE01  F000         	lfsr	0,__pbssBANK1
  3466   0146D6  0EC8               	movlw	200
  3467   0146D8                     clear_2:
  3468   0146D8  6AEE               	clrf	postinc0,c
  3469   0146DA  06E8               	decf	wreg,f,c
  3470   0146DC  E1FD               	bnz	clear_2
  3471                           
  3472                           ; Clear objects allocated to BANK0 (59 bytes)
  3473   0146DE  EE00  F060         	lfsr	0,__pbssBANK0
  3474   0146E2  0E3B               	movlw	59
  3475   0146E4                     clear_3:
  3476   0146E4  6AEE               	clrf	postinc0,c
  3477   0146E6  06E8               	decf	wreg,f,c
  3478   0146E8  E1FD               	bnz	clear_3
  3479                           
  3480                           ; Clear objects allocated to COMRAM (31 bytes)
  3481   0146EA  EE00  F021         	lfsr	0,__pbssCOMRAM
  3482   0146EE  0E1F               	movlw	31
  3483   0146F0                     clear_4:
  3484   0146F0  6AEE               	clrf	postinc0,c
  3485   0146F2  06E8               	decf	wreg,f,c
  3486   0146F4  E1FD               	bnz	clear_4
  3487   0146F6                     end_of_initialization:
  3488                           	callstack 0
  3489   0146F6                     __end_of__initialization:
  3490                           	callstack 0
  3491   0146F6  0100               	movlb	0
  3492   0146F8  EF81  F09B         	goto	_main	;jump to C main() function
  3493                           
  3494                           	psect	bssCOMRAM
  3495   000021                     __pbssCOMRAM:
  3496                           	callstack 0
  3497   000021                     motorControl@F6645:
  3498                           	callstack 0
  3499   000021                     	ds	16
  3500   000031                     _dummy:
  3501                           	callstack 0
  3502   000031                     	ds	4
  3503   000035                     TMR0_ISR@CountCallBack:
  3504                           	callstack 0
  3505   000035                     	ds	2
  3506   000037                     _timer0ReloadVal:
  3507                           	callstack 0
  3508   000037                     	ds	2
  3509   000039                     lightControl_Process@oldState:
  3510                           	callstack 0
  3511   000039                     	ds	1
  3512   00003A                     lightControl_Process@state:
  3513                           	callstack 0
  3514   00003A                     	ds	1
  3515   00003B                     lightContol_BackLight@lastLight:
  3516                           	callstack 0
  3517   00003B                     	ds	1
  3518   00003C                     lightContol_FrontLight@lastLight:
  3519                           	callstack 0
  3520   00003C                     	ds	1
  3521   00003D                     motorControl_Process@oldState:
  3522                           	callstack 0
  3523   00003D                     	ds	1
  3524   00003E                     motorControl_Process@state:
  3525                           	callstack 0
  3526   00003E                     	ds	1
  3527   00003F                     motorControl@lastPercent:
  3528                           	callstack 0
  3529   00003F                     	ds	1
  3530                           
  3531                           	psect	bssBANK0
  3532   000060                     __pbssBANK0:
  3533                           	callstack 0
  3534   000060                     _carState:
  3535                           	callstack 0
  3536   000060                     	ds	27
  3537   00007B                     lightContol_BackLight@F6668:
  3538                           	callstack 0
  3539   00007B                     	ds	16
  3540   00008B                     lightContol_FrontLight@F6662:
  3541                           	callstack 0
  3542   00008B                     	ds	16
  3543                           
  3544                           	psect	bssBANK1
  3545   000100                     __pbssBANK1:
  3546                           	callstack 0
  3547   000100                     _spiTransmitBuffer:
  3548                           	callstack 0
  3549   000100                     	ds	200
  3550                           
  3551                           	psect	bssBANK2
  3552   000200                     __pbssBANK2:
  3553                           	callstack 0
  3554   000200                     _spiReceiveBuffer:
  3555                           	callstack 0
  3556   000200                     	ds	200
  3557                           
  3558                           	psect	bssBIGRAM
  3559   0002C8                     __pbssBIGRAM:
  3560                           	callstack 0
  3561   0002C8                     _theXF:
  3562                           	callstack 0
  3563   0002C8                     	ds	282
  3564                           
  3565                           	psect	cstackCOMRAM
  3566   000040                     __pcstackCOMRAM:
  3567                           	callstack 0
  3568   000040                     ??_INTERRUPT_InterruptManager:
  3569                           
  3570                           ; 1 bytes @ 0x0
  3571   000040                     	ds	16
  3572                           
  3573 ;;
  3574 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3575 ;;
  3576 ;; *************** function _main *****************
  3577 ;; Defined at:
  3578 ;;		line 56 in file "main.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  fObj            6  [STACK] struct _CAN_FILTEROBJ_ID
  3583 ;;  mObj            6  [STACK] struct _CAN_MASKOBJ_ID
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1  [STACK] void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels required when called: 15
  3599 ;; This function calls:
  3600 ;;		_CanInit
  3601 ;;		_CanSetFilter
  3602 ;;		_SYSTEM_Initialize
  3603 ;;		_TMR0_SetInterruptHandler
  3604 ;;		_XF_executeOnce
  3605 ;;		_XF_init
  3606 ;;		_XF_post
  3607 ;;		_updateCarState
  3608 ;; This function is called by:
  3609 ;;		Startup code after reset
  3610 ;; This function uses a reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text0
  3614   013702                     __ptext0:
  3615                           	callstack 0
  3616   013702                     _main:
  3617                           	callstack 0
  3618                           
  3619                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3620   013702  0E0C               	movlw	12
  3621   013704  26E1               	addwf	fsr1l,f,c
  3622   013706  0E00               	movlw	0
  3623   013708  22E2               	addwfc	fsr1h,f,c
  3624   01370A                     
  3625                           ;main.c: 60:     SYSTEM_Initialize();
  3626   01370A  ECA0  F0A4         	call	_SYSTEM_Initialize	;wreg free
  3627   01370E                     
  3628                           ;main.c: 61:     XF_init();
  3629   01370E  ECF0  F095         	call	_XF_init	;wreg free
  3630   013712                     
  3631                           ;main.c: 62:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3632   013712  0E54               	movlw	low _XF_decrementAndQueueTimers
  3633   013714  6EE6               	movwf	postinc1,c
  3634   013716  0E33               	movlw	high _XF_decrementAndQueueTimers
  3635   013718  6EE6               	movwf	postinc1,c
  3636   01371A  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3637   01371C  6EE6               	movwf	postinc1,c
  3638   01371E  EC5C  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
  3639   013722                     
  3640                           ;main.c: 64:     CanInit(CAN_250K_500K,0);
  3641   013722  0E00               	movlw	0
  3642   013724  6EE6               	movwf	postinc1,c
  3643   013726  0E08               	movlw	8
  3644   013728  6EE6               	movwf	postinc1,c
  3645   01372A  EC32  F08F         	call	_CanInit	;wreg free
  3646   01372E                     
  3647                           ;main.c: 65:     CAN_FILTEROBJ_ID fObj;;main.c: 66:     fObj.ID = 0x001;
  3648   01372E  0E01               	movlw	1
  3649   013730  6E09               	movwf	(btemp+8)^0,c
  3650   013732  6A0A               	clrf	(btemp+9)^0,c
  3651   013734  6A0B               	clrf	(btemp+10)^0,c
  3652   013736  6A0C               	clrf	(btemp+11)^0,c
  3653                           
  3654                           ;stkvar	_fObj @ sp[(-12)+0]
  3655   013738  0EF4               	movlw	-12
  3656   01373A  C009  FFE3         	movff	btemp+8,plusw1
  3657   01373E  0EF5               	movlw	-11
  3658   013740  C00A  FFE3         	movff	btemp+9,plusw1
  3659   013744  0EF6               	movlw	-10
  3660   013746  C00B  FFE3         	movff	btemp+10,plusw1
  3661   01374A  0EF7               	movlw	-9
  3662   01374C  C00C  FFE3         	movff	btemp+11,plusw1
  3663   013750                     
  3664                           ;main.c: 67:     CAN_MASKOBJ_ID mObj;;main.c: 68:     mObj.MID = 0x00F;
  3665   013750  0E0F               	movlw	15
  3666   013752  6E09               	movwf	(btemp+8)^0,c
  3667   013754  6A0A               	clrf	(btemp+9)^0,c
  3668   013756  6A0B               	clrf	(btemp+10)^0,c
  3669   013758  6A0C               	clrf	(btemp+11)^0,c
  3670                           
  3671                           ;stkvar	_mObj @ sp[(-12)+6]
  3672   01375A  0EFA               	movlw	-6
  3673   01375C  C009  FFE3         	movff	btemp+8,plusw1
  3674   013760  0EFB               	movlw	-5
  3675   013762  C00A  FFE3         	movff	btemp+9,plusw1
  3676   013766  0EFC               	movlw	-4
  3677   013768  C00B  FFE3         	movff	btemp+10,plusw1
  3678   01376C  0EFD               	movlw	-3
  3679   01376E  C00C  FFE3         	movff	btemp+11,plusw1
  3680   013772                     
  3681                           ;main.c: 69:     CanSetFilter(CAN_FILTER0,&fObj,&mObj);
  3682                           ;stkvar	_mObj @ sp[(-12)+6]
  3683   013772  0EFA               	movlw	250
  3684   013774  24E1               	addwf	fsr1l,w,c
  3685   013776  6E01               	movwf	btemp^0,c
  3686   013778  0EFF               	movlw	255
  3687   01377A  20E2               	addwfc	fsr1h,w,c
  3688   01377C  6E02               	movwf	(btemp+1)^0,c
  3689   01377E  C001  FFE6         	movff	btemp,postinc1
  3690   013782  C002  FFE6         	movff	btemp+1,postinc1
  3691                           
  3692                           ;stkvar	_fObj @ sp[(-14)+0]
  3693   013786  0EF2               	movlw	242
  3694   013788  24E1               	addwf	fsr1l,w,c
  3695   01378A  6E01               	movwf	btemp^0,c
  3696   01378C  0EFF               	movlw	255
  3697   01378E  20E2               	addwfc	fsr1h,w,c
  3698   013790  6E02               	movwf	(btemp+1)^0,c
  3699   013792  C001  FFE6         	movff	btemp,postinc1
  3700   013796  C002  FFE6         	movff	btemp+1,postinc1
  3701   01379A  0E00               	movlw	0
  3702   01379C  6EE6               	movwf	postinc1,c
  3703   01379E  ECE1  F0A1         	call	_CanSetFilter	;wreg free
  3704   0137A2                     
  3705                           ;main.c: 75:     (INTCONbits.GIE = 1);
  3706   0137A2  8EF2               	bsf	242,7,c	;volatile
  3707   0137A4                     
  3708                           ;main.c: 81:     (INTCONbits.PEIE = 1);
  3709   0137A4  8CF2               	bsf	242,6,c	;volatile
  3710   0137A6                     
  3711                           ;main.c: 85:     XF_post(lightControl_Process,E_INIT,0);
  3712   0137A6  0E00               	movlw	0
  3713   0137A8  6EE6               	movwf	postinc1,c
  3714   0137AA  0E00               	movlw	0
  3715   0137AC  6EE6               	movwf	postinc1,c
  3716   0137AE  0E01               	movlw	1
  3717   0137B0  6EE6               	movwf	postinc1,c
  3718   0137B2  0E58               	movlw	low _lightControl_Process
  3719   0137B4  6EE6               	movwf	postinc1,c
  3720   0137B6  0E27               	movlw	high _lightControl_Process
  3721   0137B8  6EE6               	movwf	postinc1,c
  3722   0137BA  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3723   0137BC  6EE6               	movwf	postinc1,c
  3724   0137BE  ECE9  F09B         	call	_XF_post	;wreg free
  3725   0137C2                     l5361:
  3726                           
  3727                           ;main.c: 87:     {;main.c: 88:         updateCarState();
  3728   0137C2  EC28  F091         	call	_updateCarState	;wreg free
  3729   0137C6                     
  3730                           ;main.c: 89:         XF_executeOnce();
  3731   0137C6  EC1C  F0A1         	call	_XF_executeOnce	;wreg free
  3732   0137CA  EFE1  F09B         	goto	l5361
  3733   0137CE  EF57  F000         	goto	start
  3734   0137D2                     __end_of_main:
  3735                           	callstack 0
  3736                           
  3737 ;; *************** function _updateCarState *****************
  3738 ;; Defined at:
  3739 ;;		line 223 in file "carFunctions.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3744 ;;  rxdata          8  [STACK] unsigned char [8]
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1  [STACK] void 
  3747 ;; Registers used:
  3748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;Total ram usage:        0 bytes
  3759 ;; Hardware stack levels used: 1
  3760 ;; Hardware stack levels required when called: 12
  3761 ;; This function calls:
  3762 ;;		_CanReceive
  3763 ;;		_XF_post
  3764 ;; This function is called by:
  3765 ;;		_main
  3766 ;; This function uses a reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text1
  3770   012250                     __ptext1:
  3771                           	callstack 0
  3772   012250                     _updateCarState:
  3773                           	callstack 0
  3774                           
  3775                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3776   012250  0E18               	movlw	24
  3777   012252  26E1               	addwf	fsr1l,f,c
  3778   012254  0E00               	movlw	0
  3779   012256  22E2               	addwfc	fsr1h,f,c
  3780   012258                     
  3781                           ;carFunctions.c: 226:     CAN_RX_MSGOBJ rxObj;;carFunctions.c: 227:     uint8_t rxdata[8
      +                          ];;carFunctions.c: 229:     if (CanReceive(&rxObj, rxdata) == 0)
  3782                           ;stkvar	_rxdata @ sp[(-24)+16]
  3783   012258  0EF8               	movlw	248
  3784   01225A  24E1               	addwf	fsr1l,w,c
  3785   01225C  6E01               	movwf	btemp^0,c
  3786   01225E  0EFF               	movlw	255
  3787   012260  20E2               	addwfc	fsr1h,w,c
  3788   012262  6E02               	movwf	(btemp+1)^0,c
  3789   012264  C001  FFE6         	movff	btemp,postinc1
  3790   012268  C002  FFE6         	movff	btemp+1,postinc1
  3791                           
  3792                           ;stkvar	_rxObj @ sp[(-26)+0]
  3793   01226C  0EE6               	movlw	230
  3794   01226E  24E1               	addwf	fsr1l,w,c
  3795   012270  6E01               	movwf	btemp^0,c
  3796   012272  0EFF               	movlw	255
  3797   012274  20E2               	addwfc	fsr1h,w,c
  3798   012276  6E02               	movwf	(btemp+1)^0,c
  3799   012278  C001  FFE6         	movff	btemp,postinc1
  3800   01227C  C002  FFE6         	movff	btemp+1,postinc1
  3801   012280  EC16  F0A2         	call	_CanReceive	;wreg free
  3802   012284  5001               	movf	btemp^0,w,c
  3803   012286  A4D8               	btfss	status,2,c
  3804   012288  EF48  F091         	goto	u2991
  3805   01228C  EF4A  F091         	goto	u2990
  3806   012290                     u2991:
  3807   012290  EF0B  F092         	goto	l1516
  3808   012294                     u2990:
  3809   012294  EFCD  F091         	goto	l5317
  3810   012298                     l5297:
  3811                           
  3812                           ;carFunctions.c: 235:                 carState.contactKey = rxdata[0];
  3813                           ;stkvar	_rxdata @ sp[(-24)+16]
  3814   012298  0EF8               	movlw	-8
  3815   01229A  CFE3 F06E          	movff	plusw1,_carState+14
  3816   01229E                     
  3817                           ;carFunctions.c: 237:                 if (rxdata[0] == 0)
  3818                           ;stkvar	_rxdata @ sp[(-24)+16]
  3819   01229E  0EF8               	movlw	-8
  3820   0122A0  50E3               	movf	plusw1,w,c
  3821   0122A2  A4D8               	btfss	status,2,c
  3822   0122A4  EF56  F091         	goto	u3001
  3823   0122A8  EF58  F091         	goto	u3000
  3824   0122AC                     u3001:
  3825   0122AC  EF76  F091         	goto	l5303
  3826   0122B0                     u3000:
  3827   0122B0                     
  3828                           ;carFunctions.c: 238:                 {;carFunctions.c: 239:                     XF_post
      +                          (lightControl_Process, E_CONTACT_OFF, 0);
  3829   0122B0  0E00               	movlw	0
  3830   0122B2  6EE6               	movwf	postinc1,c
  3831   0122B4  0E00               	movlw	0
  3832   0122B6  6EE6               	movwf	postinc1,c
  3833   0122B8  0E02               	movlw	2
  3834   0122BA  6EE6               	movwf	postinc1,c
  3835   0122BC  0E58               	movlw	low _lightControl_Process
  3836   0122BE  6EE6               	movwf	postinc1,c
  3837   0122C0  0E27               	movlw	high _lightControl_Process
  3838   0122C2  6EE6               	movwf	postinc1,c
  3839   0122C4  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3840   0122C6  6EE6               	movwf	postinc1,c
  3841   0122C8  ECE9  F09B         	call	_XF_post	;wreg free
  3842                           
  3843                           ;carFunctions.c: 240:                     XF_post(motorControl_Process, E_CONTACT_OFF, 0
      +                          );
  3844   0122CC  0E00               	movlw	0
  3845   0122CE  6EE6               	movwf	postinc1,c
  3846   0122D0  0E00               	movlw	0
  3847   0122D2  6EE6               	movwf	postinc1,c
  3848   0122D4  0E02               	movlw	2
  3849   0122D6  6EE6               	movwf	postinc1,c
  3850   0122D8  0E20               	movlw	low _motorControl_Process
  3851   0122DA  6EE6               	movwf	postinc1,c
  3852   0122DC  0E24               	movlw	high _motorControl_Process
  3853   0122DE  6EE6               	movwf	postinc1,c
  3854   0122E0  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3855   0122E2  6EE6               	movwf	postinc1,c
  3856   0122E4  ECE9  F09B         	call	_XF_post	;wreg free
  3857                           
  3858                           ;carFunctions.c: 241:                 }
  3859   0122E8  EF0B  F092         	goto	l1516
  3860   0122EC                     l5303:
  3861                           
  3862                           ;carFunctions.c: 243:                 {;carFunctions.c: 244:                     XF_post
      +                          (lightControl_Process, E_CONTACT_ON, 0);
  3863   0122EC  0E00               	movlw	0
  3864   0122EE  6EE6               	movwf	postinc1,c
  3865   0122F0  0E00               	movlw	0
  3866   0122F2  6EE6               	movwf	postinc1,c
  3867   0122F4  0E03               	movlw	3
  3868   0122F6  6EE6               	movwf	postinc1,c
  3869   0122F8  0E58               	movlw	low _lightControl_Process
  3870   0122FA  6EE6               	movwf	postinc1,c
  3871   0122FC  0E27               	movlw	high _lightControl_Process
  3872   0122FE  6EE6               	movwf	postinc1,c
  3873   012300  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3874   012302  6EE6               	movwf	postinc1,c
  3875   012304  ECE9  F09B         	call	_XF_post	;wreg free
  3876                           
  3877                           ;carFunctions.c: 245:                     XF_post(motorControl_Process, E_CONTACT_ON, 0)
      +                          ;
  3878   012308  0E00               	movlw	0
  3879   01230A  6EE6               	movwf	postinc1,c
  3880   01230C  0E00               	movlw	0
  3881   01230E  6EE6               	movwf	postinc1,c
  3882   012310  0E03               	movlw	3
  3883   012312  6EE6               	movwf	postinc1,c
  3884   012314  0E20               	movlw	low _motorControl_Process
  3885   012316  6EE6               	movwf	postinc1,c
  3886   012318  0E24               	movlw	high _motorControl_Process
  3887   01231A  6EE6               	movwf	postinc1,c
  3888   01231C  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3889   01231E  6EE6               	movwf	postinc1,c
  3890   012320  ECE9  F09B         	call	_XF_post	;wreg free
  3891   012324  EF0B  F092         	goto	l1516
  3892   012328                     l5305:
  3893                           
  3894                           ;carFunctions.c: 251:                 carState.brakePedal = rxdata[0];
  3895                           ;stkvar	_rxdata @ sp[(-24)+16]
  3896   012328  0EF8               	movlw	-8
  3897   01232A  CFE3 F06C          	movff	plusw1,_carState+12
  3898   01232E                     
  3899                           ;carFunctions.c: 253:                 if (rxdata[0] > 6)
  3900                           ;stkvar	_rxdata @ sp[(-24)+16]
  3901   01232E  0EF8               	movlw	-8
  3902   012330  CFE3 F001          	movff	plusw1,btemp
  3903   012334  0E06               	movlw	6
  3904   012336  6401               	cpfsgt	btemp^0,c
  3905   012338  EFA0  F091         	goto	u3011
  3906   01233C  EFA2  F091         	goto	u3010
  3907   012340                     u3011:
  3908   012340  EF0B  F092         	goto	l1516
  3909   012344                     u3010:
  3910   012344                     
  3911                           ;carFunctions.c: 254:                 {;carFunctions.c: 255:                     XF_post
      +                          (lightControl_Process, E_HIGH_BRAKE, 0);
  3912   012344  0E00               	movlw	0
  3913   012346  6EE6               	movwf	postinc1,c
  3914   012348  0E00               	movlw	0
  3915   01234A  6EE6               	movwf	postinc1,c
  3916   01234C  0E04               	movlw	4
  3917   01234E  6EE6               	movwf	postinc1,c
  3918   012350  0E58               	movlw	low _lightControl_Process
  3919   012352  6EE6               	movwf	postinc1,c
  3920   012354  0E27               	movlw	high _lightControl_Process
  3921   012356  6EE6               	movwf	postinc1,c
  3922   012358  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3923   01235A  6EE6               	movwf	postinc1,c
  3924   01235C  ECE9  F09B         	call	_XF_post	;wreg free
  3925   012360  EF0B  F092         	goto	l1516
  3926   012364                     l5311:
  3927                           
  3928                           ;carFunctions.c: 262:                 if (rxdata[0] > 6)
  3929                           ;stkvar	_rxdata @ sp[(-24)+16]
  3930   012364  0EF8               	movlw	-8
  3931   012366  CFE3 F001          	movff	plusw1,btemp
  3932   01236A  0E06               	movlw	6
  3933   01236C  6401               	cpfsgt	btemp^0,c
  3934   01236E  EFBB  F091         	goto	u3021
  3935   012372  EFBD  F091         	goto	u3020
  3936   012376                     u3021:
  3937   012376  EF0B  F092         	goto	l1516
  3938   01237A                     u3020:
  3939   01237A                     
  3940                           ;carFunctions.c: 263:                 {;carFunctions.c: 264:                     XF_post
      +                          (motorControl_Process, E_ACCELERATION_ON, 0);
  3941   01237A  0E00               	movlw	0
  3942   01237C  6EE6               	movwf	postinc1,c
  3943   01237E  0E00               	movlw	0
  3944   012380  6EE6               	movwf	postinc1,c
  3945   012382  0E08               	movlw	8
  3946   012384  6EE6               	movwf	postinc1,c
  3947   012386  0E20               	movlw	low _motorControl_Process
  3948   012388  6EE6               	movwf	postinc1,c
  3949   01238A  0E24               	movlw	high _motorControl_Process
  3950   01238C  6EE6               	movwf	postinc1,c
  3951   01238E  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3952   012390  6EE6               	movwf	postinc1,c
  3953   012392  ECE9  F09B         	call	_XF_post	;wreg free
  3954   012396  EF0B  F092         	goto	l1516
  3955   01239A                     l5317:
  3956                           
  3957                           ;stkvar	_rxObj @ sp[(-24)+0]
  3958   01239A  50E1               	movf	fsr1l,w,c
  3959   01239C  0FE8               	addlw	-24
  3960   01239E  6ED9               	movwf	fsr2l,c
  3961   0123A0  50E2               	movf	fsr1h,w,c
  3962   0123A2  6EDA               	movwf	fsr2h,c
  3963   0123A4  0EFF               	movlw	255
  3964   0123A6  22DA               	addwfc	fsr2h,f,c
  3965   0123A8  0EF0               	movlw	240
  3966   0123AA  14DE               	andwf	postinc2,w,c
  3967   0123AC  6E09               	movwf	(btemp+8)^0,c
  3968   0123AE  0E03               	movlw	3
  3969   0123B0  14DE               	andwf	postinc2,w,c
  3970   0123B2  6E0A               	movwf	(btemp+9)^0,c
  3971   0123B4  0E00               	movlw	0
  3972   0123B6  14DE               	andwf	postinc2,w,c
  3973   0123B8  6E0B               	movwf	(btemp+10)^0,c
  3974   0123BA  0E00               	movlw	0
  3975   0123BC  14DE               	andwf	postinc2,w,c
  3976   0123BE  6E0C               	movwf	(btemp+11)^0,c
  3977                           
  3978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3979                           ; Switch size 1, requested type "simple"
  3980                           ; Number of cases is 1, Range of values is 0 to 0
  3981                           ; switch strategies available:
  3982                           ; Name         Instructions Cycles
  3983                           ; simple_byte            4     3 (average)
  3984                           ;	Chosen strategy is simple_byte
  3985   0123C0  500C               	movf	(btemp+11)^0,w,c
  3986   0123C2  0A00               	xorlw	0	; case 0
  3987   0123C4  B4D8               	btfsc	status,2,c
  3988   0123C6  EF04  F092         	goto	l5567
  3989   0123CA  EF0B  F092         	goto	l1516
  3990   0123CE                     l5565:
  3991                           
  3992                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3993                           ; Switch size 1, requested type "simple"
  3994                           ; Number of cases is 2, Range of values is 0 to 1
  3995                           ; switch strategies available:
  3996                           ; Name         Instructions Cycles
  3997                           ; simple_byte            7     4 (average)
  3998                           ;	Chosen strategy is simple_byte
  3999   0123CE  500A               	movf	(btemp+9)^0,w,c
  4000   0123D0  0A00               	xorlw	0	; case 0
  4001   0123D2  B4D8               	btfsc	status,2,c
  4002   0123D4  EFF2  F091         	goto	l5569
  4003   0123D8  0A01               	xorlw	1	; case 1
  4004   0123DA  B4D8               	btfsc	status,2,c
  4005   0123DC  EFFD  F091         	goto	l5571
  4006   0123E0  EF0B  F092         	goto	l1516
  4007   0123E4                     l5569:
  4008                           
  4009                           ; Switch size 1, requested type "simple"
  4010                           ; Number of cases is 2, Range of values is 64 to 80
  4011                           ; switch strategies available:
  4012                           ; Name         Instructions Cycles
  4013                           ; simple_byte            7     4 (average)
  4014                           ;	Chosen strategy is simple_byte
  4015   0123E4  5009               	movf	(btemp+8)^0,w,c
  4016   0123E6  0A40               	xorlw	64	; case 64
  4017   0123E8  B4D8               	btfsc	status,2,c
  4018   0123EA  EF94  F091         	goto	l5305
  4019   0123EE  0A10               	xorlw	16	; case 80
  4020   0123F0  B4D8               	btfsc	status,2,c
  4021   0123F2  EF4C  F091         	goto	l5297
  4022   0123F6  EF0B  F092         	goto	l1516
  4023   0123FA                     l5571:
  4024                           
  4025                           ; Switch size 1, requested type "simple"
  4026                           ; Number of cases is 1, Range of values is 64 to 64
  4027                           ; switch strategies available:
  4028                           ; Name         Instructions Cycles
  4029                           ; simple_byte            4     3 (average)
  4030                           ;	Chosen strategy is simple_byte
  4031   0123FA  5009               	movf	(btemp+8)^0,w,c
  4032   0123FC  0A40               	xorlw	64	; case 64
  4033   0123FE  B4D8               	btfsc	status,2,c
  4034   012400  EFB2  F091         	goto	l5311
  4035   012404  EF0B  F092         	goto	l1516
  4036   012408                     l5567:
  4037                           
  4038                           ; Switch size 1, requested type "simple"
  4039                           ; Number of cases is 1, Range of values is 0 to 0
  4040                           ; switch strategies available:
  4041                           ; Name         Instructions Cycles
  4042                           ; simple_byte            4     3 (average)
  4043                           ;	Chosen strategy is simple_byte
  4044   012408  500B               	movf	(btemp+10)^0,w,c
  4045   01240A  0A00               	xorlw	0	; case 0
  4046   01240C  B4D8               	btfsc	status,2,c
  4047   01240E  EFE7  F091         	goto	l5565
  4048   012412  EF0B  F092         	goto	l1516
  4049   012416                     l1516:
  4050                           
  4051                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4052   012416  0EE8               	movlw	232
  4053   012418  26E1               	addwf	fsr1l,f,c
  4054   01241A  0EFF               	movlw	255
  4055   01241C  22E2               	addwfc	fsr1h,f,c
  4056   01241E  0012               	return		;funcret
  4057   012420                     __end_of_updateCarState:
  4058                           	callstack 0
  4059                           
  4060 ;; *************** function _XF_post *****************
  4061 ;; Defined at:
  4062 ;;		line 274 in file "xf/xf.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4065 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4066 ;;  id              1  [STACK] unsigned char 
  4067 ;;  delay           2  [STACK] unsigned short 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  ev              6  [STACK] struct Event_
  4070 ;;  tmid            1  [STACK] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  1  [STACK] unsigned char 
  4073 ;; Registers used:
  4074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used: 1
  4086 ;; Hardware stack levels required when called: 10
  4087 ;; This function calls:
  4088 ;;		_Event_init
  4089 ;;		_Event_setDelay
  4090 ;;		_Event_setId
  4091 ;;		_Event_setPE
  4092 ;;		_XF_pushEvent
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;;		_updateCarState
  4096 ;; This function uses a reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text2
  4100   0137D2                     __ptext2:
  4101                           	callstack 0
  4102   0137D2                     _XF_post:
  4103                           	callstack 0
  4104                           
  4105                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4106   0137D2  0E07               	movlw	7
  4107   0137D4  26E1               	addwf	fsr1l,f,c
  4108   0137D6  0E00               	movlw	0
  4109   0137D8  22E2               	addwfc	fsr1h,f,c
  4110   0137DA                     
  4111                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4112                           ;stkvar	_tmid @ sp[(-7)+6]
  4113   0137DA  0EFF               	movlw	-1
  4114   0137DC  6AE3               	clrf	plusw1,c
  4115   0137DE  84E3               	bsf	plusw1,2,c
  4116   0137E0  86E3               	bsf	plusw1,3,c	;indir
  4117   0137E2                     
  4118                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4119                           ;stkvar	_ev @ sp[(-7)+0]
  4120   0137E2  0EF9               	movlw	249
  4121   0137E4  24E1               	addwf	fsr1l,w,c
  4122   0137E6  6E01               	movwf	btemp^0,c
  4123   0137E8  0EFF               	movlw	255
  4124   0137EA  20E2               	addwfc	fsr1h,w,c
  4125   0137EC  6E02               	movwf	(btemp+1)^0,c
  4126   0137EE  C001  FFE6         	movff	btemp,postinc1
  4127   0137F2  C002  FFE6         	movff	btemp+1,postinc1
  4128   0137F6  EC32  F0A3         	call	_Event_init	;wreg free
  4129   0137FA                     
  4130                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4131                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4132   0137FA  0EF6               	movlw	-10
  4133   0137FC  CFE3 FFE6          	movff	plusw1,postinc1
  4134   013800  CFE3 FFE6          	movff	plusw1,postinc1
  4135   013804  CFE3 FFE6          	movff	plusw1,postinc1
  4136                           
  4137                           ;stkvar	_ev @ sp[(-10)+0]
  4138   013808  0EF6               	movlw	246
  4139   01380A  24E1               	addwf	fsr1l,w,c
  4140   01380C  6E01               	movwf	btemp^0,c
  4141   01380E  0EFF               	movlw	255
  4142   013810  20E2               	addwfc	fsr1h,w,c
  4143   013812  6E02               	movwf	(btemp+1)^0,c
  4144   013814  C001  FFE6         	movff	btemp,postinc1
  4145   013818  C002  FFE6         	movff	btemp+1,postinc1
  4146   01381C  EC7E  F0A3         	call	_Event_setPE	;wreg free
  4147   013820                     
  4148                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4149                           ;stkvar	_id @ sp[(-7)+-4]
  4150   013820  0EF5               	movlw	-11
  4151   013822  50E3               	movf	plusw1,w,c
  4152   013824  6EE6               	movwf	postinc1,c
  4153                           
  4154                           ;stkvar	_ev @ sp[(-8)+0]
  4155   013826  0EF8               	movlw	248
  4156   013828  24E1               	addwf	fsr1l,w,c
  4157   01382A  6E01               	movwf	btemp^0,c
  4158   01382C  0EFF               	movlw	255
  4159   01382E  20E2               	addwfc	fsr1h,w,c
  4160   013830  6E02               	movwf	(btemp+1)^0,c
  4161   013832  C001  FFE6         	movff	btemp,postinc1
  4162   013836  C002  FFE6         	movff	btemp+1,postinc1
  4163   01383A  EC7B  F0A4         	call	_Event_setId	;wreg free
  4164   01383E                     
  4165                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4166                           ;stkvar	_delay @ sp[(-7)+-6]
  4167   01383E  0EF3               	movlw	-13
  4168   013840  CFE3 FFE6          	movff	plusw1,postinc1
  4169   013844  CFE3 FFE6          	movff	plusw1,postinc1
  4170                           
  4171                           ;stkvar	_ev @ sp[(-9)+0]
  4172   013848  0EF7               	movlw	247
  4173   01384A  24E1               	addwf	fsr1l,w,c
  4174   01384C  6E01               	movwf	btemp^0,c
  4175   01384E  0EFF               	movlw	255
  4176   013850  20E2               	addwfc	fsr1h,w,c
  4177   013852  6E02               	movwf	(btemp+1)^0,c
  4178   013854  C001  FFE6         	movff	btemp,postinc1
  4179   013858  C002  FFE6         	movff	btemp+1,postinc1
  4180   01385C  ECB9  F0A3         	call	_Event_setDelay	;wreg free
  4181   013860                     
  4182                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4183                           ;stkvar	_tmid @ sp[(-7)+6]
  4184   013860  0EFF               	movlw	255
  4185   013862  24E1               	addwf	fsr1l,w,c
  4186   013864  6E01               	movwf	btemp^0,c
  4187   013866  0EFF               	movlw	255
  4188   013868  20E2               	addwfc	fsr1h,w,c
  4189   01386A  6E02               	movwf	(btemp+1)^0,c
  4190   01386C  C001  FFE6         	movff	btemp,postinc1
  4191   013870  C002  FFE6         	movff	btemp+1,postinc1
  4192   013874  0E00               	movlw	0
  4193   013876  6EE6               	movwf	postinc1,c
  4194                           
  4195                           ;stkvar	_ev @ sp[(-10)+0]
  4196   013878  0EF6               	movlw	246
  4197   01387A  24E1               	addwf	fsr1l,w,c
  4198   01387C  6ED9               	movwf	fsr2l,c
  4199   01387E  0EFF               	movlw	255
  4200   013880  20E2               	addwfc	fsr1h,w,c
  4201   013882  6EDA               	movwf	fsr2h,c
  4202   013884  0E06               	movlw	6
  4203   013886                     u2781:
  4204   013886  CFDE FFE6          	movff	postinc2,postinc1
  4205   01388A  2CE8               	decfsz	wreg,w,c
  4206   01388C  EF43  F09C         	goto	u2781
  4207   013890  EC30  F095         	call	_XF_pushEvent	;wreg free
  4208   013894                     
  4209                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4210   013894  0EF3               	movlw	243
  4211   013896  26E1               	addwf	fsr1l,f,c
  4212   013898  0EFF               	movlw	255
  4213   01389A  22E2               	addwfc	fsr1h,f,c
  4214   01389C  0012               	return		;funcret
  4215   01389E                     __end_of_XF_post:
  4216                           	callstack 0
  4217                           
  4218 ;; *************** function _XF_pushEvent *****************
  4219 ;; Defined at:
  4220 ;;		line 106 in file "xf/xf.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  ev              6  [STACK] struct Event_
  4223 ;;  inISR           1  [STACK] _Bool 
  4224 ;;  tmid            2  [STACK] PTR unsigned char 
  4225 ;;		 -> tmid(1), dummy(1), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  tm              2  [STACK] unsigned short 
  4228 ;;  temp            1  [STACK] unsigned char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1  [STACK] _Bool 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used: 1
  4244 ;; Hardware stack levels required when called: 9
  4245 ;; This function calls:
  4246 ;;		_ENTERCRITICAL
  4247 ;;		_Event_getDelay
  4248 ;;		_Event_setDelay
  4249 ;;		_LEAVECRITICAL
  4250 ;;		_XF_noMoreEvent
  4251 ;;		_XF_scheduleTimer
  4252 ;;		___awmod
  4253 ;; This function is called by:
  4254 ;;		_XF_decrementAndQueueTimers
  4255 ;;		_XF_post
  4256 ;; This function uses a reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text3
  4260   012A60                     __ptext3:
  4261                           	callstack 0
  4262   012A60                     _XF_pushEvent:
  4263                           	callstack 0
  4264                           
  4265                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4266   012A60  52E6               	movf	postinc1,f,c
  4267   012A62  52E6               	movf	postinc1,f,c
  4268   012A64  52E6               	movf	postinc1,f,c
  4269   012A66                     
  4270                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4271                           ;stkvar	_ev @ sp[(-3)+-6]
  4272   012A66  0EF7               	movlw	247
  4273   012A68  24E1               	addwf	fsr1l,w,c
  4274   012A6A  6E01               	movwf	btemp^0,c
  4275   012A6C  0EFF               	movlw	255
  4276   012A6E  20E2               	addwfc	fsr1h,w,c
  4277   012A70  6E02               	movwf	(btemp+1)^0,c
  4278   012A72  C001  FFE6         	movff	btemp,postinc1
  4279   012A76  C002  FFE6         	movff	btemp+1,postinc1
  4280   012A7A  EC49  F0A4         	call	_Event_getDelay	;wreg free
  4281                           
  4282                           ;stkvar	_tm @ sp[(-3)+0]
  4283   012A7E  0EFD               	movlw	-3
  4284   012A80  C001  FFE3         	movff	btemp,plusw1
  4285   012A84  0EFE               	movlw	-2
  4286   012A86  C002  FFE3         	movff	btemp+1,plusw1
  4287   012A8A                     
  4288                           ;xf/xf.c: 111:     if ( tm > 0)
  4289                           ;stkvar	_tm @ sp[(-3)+0]
  4290   012A8A  0EFD               	movlw	-3
  4291   012A8C  CFE3 F001          	movff	plusw1,btemp
  4292   012A90  0EFE               	movlw	-2
  4293   012A92  50E3               	movf	plusw1,w,c
  4294   012A94  1001               	iorwf	btemp^0,w,c
  4295   012A96  B4D8               	btfsc	status,2,c
  4296   012A98  EF50  F095         	goto	u2021
  4297   012A9C  EF52  F095         	goto	u2020
  4298   012AA0                     u2021:
  4299   012AA0  EF82  F095         	goto	l4399
  4300   012AA4                     u2020:
  4301   012AA4                     
  4302                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4303   012AA4  0E00               	movlw	0
  4304   012AA6  6EE6               	movwf	postinc1,c
  4305   012AA8  0E00               	movlw	0
  4306   012AAA  6EE6               	movwf	postinc1,c
  4307                           
  4308                           ;stkvar	_ev @ sp[(-5)+-6]
  4309   012AAC  0EF5               	movlw	245
  4310   012AAE  24E1               	addwf	fsr1l,w,c
  4311   012AB0  6E01               	movwf	btemp^0,c
  4312   012AB2  0EFF               	movlw	255
  4313   012AB4  20E2               	addwfc	fsr1h,w,c
  4314   012AB6  6E02               	movwf	(btemp+1)^0,c
  4315   012AB8  C001  FFE6         	movff	btemp,postinc1
  4316   012ABC  C002  FFE6         	movff	btemp+1,postinc1
  4317   012AC0  ECB9  F0A3         	call	_Event_setDelay	;wreg free
  4318   012AC4                     
  4319                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4320                           ;stkvar	_inISR @ sp[(-3)+-7]
  4321   012AC4  0EF6               	movlw	-10
  4322   012AC6  50E3               	movf	plusw1,w,c
  4323   012AC8  6EE6               	movwf	postinc1,c
  4324                           
  4325                           ;stkvar	_ev @ sp[(-4)+-6]
  4326   012ACA  0EF6               	movlw	246
  4327   012ACC  24E1               	addwf	fsr1l,w,c
  4328   012ACE  6ED9               	movwf	fsr2l,c
  4329   012AD0  0EFF               	movlw	255
  4330   012AD2  20E2               	addwfc	fsr1h,w,c
  4331   012AD4  6EDA               	movwf	fsr2h,c
  4332   012AD6  0E06               	movlw	6
  4333   012AD8                     u2031:
  4334   012AD8  CFDE FFE6          	movff	postinc2,postinc1
  4335   012ADC  2CE8               	decfsz	wreg,w,c
  4336   012ADE  EF6C  F095         	goto	u2031
  4337                           
  4338                           ;stkvar	_tm @ sp[(-10)+0]
  4339   012AE2  0EF6               	movlw	-10
  4340   012AE4  CFE3 FFE6          	movff	plusw1,postinc1
  4341   012AE8  CFE3 FFE6          	movff	plusw1,postinc1
  4342   012AEC  ECA0  F09A         	call	_XF_scheduleTimer	;wreg free
  4343                           
  4344                           ;stkvar	_tmid @ sp[(-3)+-9]
  4345   012AF0  0EF4               	movlw	-12
  4346   012AF2  CFE3 FFD9          	movff	plusw1,fsr2l
  4347   012AF6  0EF5               	movlw	-11
  4348   012AF8  CFE3 FFDA          	movff	plusw1,fsr2h
  4349   012AFC  C001  FFDF         	movff	btemp,indf2
  4350                           
  4351                           ;xf/xf.c: 115:     }
  4352   012B00  EFE9  F095         	goto	l4419
  4353   012B04                     l4399:
  4354                           
  4355                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4356                           ;stkvar	_inISR @ sp[(-3)+-7]
  4357   012B04  0EF6               	movlw	-10
  4358   012B06  50E3               	movf	plusw1,w,c
  4359   012B08  6EE6               	movwf	postinc1,c
  4360   012B0A  EC94  F0A4         	call	_ENTERCRITICAL	;wreg free
  4361   012B0E                     
  4362                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4363   012B0E  EE23  F0DF         	lfsr	2,_theXF+279
  4364   012B12  50DF               	movf	indf2,w,c
  4365   012B14  6E0B               	movwf	(btemp+10)^0,c
  4366   012B16  6A0C               	clrf	(btemp+11)^0,c
  4367   012B18  0E01               	movlw	1
  4368   012B1A  260B               	addwf	(btemp+10)^0,f,c
  4369   012B1C  0E00               	movlw	0
  4370   012B1E  220C               	addwfc	(btemp+11)^0,f,c
  4371   012B20  BE0C               	btfsc	(btemp+11)^0,7,c
  4372   012B22  EF9C  F095         	goto	u2041
  4373   012B26  500C               	movf	(btemp+11)^0,w,c
  4374   012B28  E109               	bnz	u2040
  4375   012B2A  0E1E               	movlw	30
  4376   012B2C  5C0B               	subwf	(btemp+10)^0,w,c
  4377   012B2E  A0D8               	btfss	status,0,c
  4378   012B30  EF9C  F095         	goto	u2041
  4379   012B34  EF9E  F095         	goto	u2040
  4380   012B38                     u2041:
  4381   012B38  EFA0  F095         	goto	l4405
  4382   012B3C                     u2040:
  4383   012B3C                     
  4384                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4385   012B3C  ECBA  F0A4         	call	_XF_noMoreEvent	;wreg free
  4386   012B40                     l4405:
  4387                           
  4388                           ;xf/xf.c: 123:         theXF.countEvt++;
  4389   012B40  C3DF  FFE8         	movff	_theXF+279,wreg
  4390   012B44  0F01               	addlw	1
  4391   012B46  CFE8 F3DF          	movff	wreg,_theXF+279
  4392   012B4A                     
  4393                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4394   012B4A  EE23  F0DF         	lfsr	2,_theXF+279
  4395   012B4E  EE03  F0DE         	lfsr	0,_theXF+278
  4396   012B52  50DE               	movf	postinc2,w,c
  4397   012B54  5CEE               	subwf	postinc0,w,c
  4398   012B56  B0D8               	btfsc	status,0,c
  4399   012B58  EFB0  F095         	goto	u2051
  4400   012B5C  EFB2  F095         	goto	u2050
  4401   012B60                     u2051:
  4402   012B60  EFB4  F095         	goto	l4411
  4403   012B64                     u2050:
  4404   012B64                     
  4405                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4406   012B64  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4407   012B68                     l4411:
  4408                           
  4409                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4410   012B68  0E1E               	movlw	30
  4411   012B6A  6EE6               	movwf	postinc1,c
  4412   012B6C  0E00               	movlw	0
  4413   012B6E  6EE6               	movwf	postinc1,c
  4414   012B70  EE23  F0DC         	lfsr	2,_theXF+276
  4415   012B74  50DF               	movf	indf2,w,c
  4416   012B76  6E0B               	movwf	(btemp+10)^0,c
  4417   012B78  6A0C               	clrf	(btemp+11)^0,c
  4418   012B7A  0E01               	movlw	1
  4419   012B7C  260B               	addwf	(btemp+10)^0,f,c
  4420   012B7E  0E00               	movlw	0
  4421   012B80  220C               	addwfc	(btemp+11)^0,f,c
  4422   012B82  C00B  FFE6         	movff	btemp+10,postinc1
  4423   012B86  C00C  FFE6         	movff	btemp+11,postinc1
  4424   012B8A  EC9A  F096         	call	___awmod	;wreg free
  4425                           
  4426                           ;stkvar	_temp @ sp[(-3)+2]
  4427   012B8E  0EFF               	movlw	-1
  4428   012B90  C001  FFE3         	movff	btemp,plusw1
  4429   012B94                     
  4430                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4431                           ;stkvar	_ev @ sp[(-3)+-6]
  4432   012B94  0EF7               	movlw	247
  4433   012B96  24E1               	addwf	fsr1l,w,c
  4434   012B98  6ED9               	movwf	fsr2l,c
  4435   012B9A  0EFF               	movlw	255
  4436   012B9C  20E2               	addwfc	fsr1h,w,c
  4437   012B9E  6EDA               	movwf	fsr2h,c
  4438   012BA0  EE03  F0DC         	lfsr	0,_theXF+276
  4439   012BA4  50EF               	movf	indf0,w,c
  4440   012BA6  0D06               	mullw	6
  4441   012BA8  0E28               	movlw	low (_theXF+96)
  4442   012BAA  24F3               	addwf	243,w,c
  4443   012BAC  6EE9               	movwf	fsr0l,c
  4444   012BAE  0E03               	movlw	high (_theXF+96)
  4445   012BB0  20F4               	addwfc	prodh,w,c
  4446   012BB2  6EEA               	movwf	fsr0h,c
  4447   012BB4  0E05               	movlw	5
  4448   012BB6                     u2061:
  4449   012BB6  CFDB FFEB          	movff	plusw2,plusw0
  4450   012BBA  06E8               	decf	wreg,f,c
  4451   012BBC  E2FC               	bc	u2061
  4452   012BBE                     
  4453                           ;xf/xf.c: 130:         theXF.in = temp;
  4454                           ;stkvar	_temp @ sp[(-3)+2]
  4455   012BBE  0EFF               	movlw	-1
  4456   012BC0  CFE3 F00C          	movff	plusw1,btemp+11
  4457   012BC4  C00C  F3DC         	movff	btemp+11,_theXF+276
  4458   012BC8                     
  4459                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4460                           ;stkvar	_inISR @ sp[(-3)+-7]
  4461   012BC8  0EF6               	movlw	-10
  4462   012BCA  50E3               	movf	plusw1,w,c
  4463   012BCC  6EE6               	movwf	postinc1,c
  4464   012BCE  EC88  F0A4         	call	_LEAVECRITICAL	;wreg free
  4465   012BD2                     l4419:
  4466                           
  4467                           ;xf/xf.c: 133:     return 1;
  4468   012BD2  0E01               	movlw	1
  4469   012BD4  6E01               	movwf	btemp^0,c
  4470   012BD6                     
  4471                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4472   012BD6  0EF4               	movlw	244
  4473   012BD8  26E1               	addwf	fsr1l,f,c
  4474   012BDA  0EFF               	movlw	255
  4475   012BDC  22E2               	addwfc	fsr1h,f,c
  4476   012BDE  0012               	return		;funcret
  4477   012BE0                     __end_of_XF_pushEvent:
  4478                           	callstack 0
  4479                           
  4480 ;; *************** function _XF_scheduleTimer *****************
  4481 ;; Defined at:
  4482 ;;		line 169 in file "xf/xf.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;  tm              2  [STACK] unsigned short 
  4485 ;;  ev              6  [STACK] struct Event_
  4486 ;;  inISR           1  [STACK] _Bool 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  i               1  [STACK] unsigned char 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1  [STACK] unsigned char 
  4491 ;; Registers used:
  4492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;Total ram usage:        0 bytes
  4503 ;; Hardware stack levels used: 1
  4504 ;; Hardware stack levels required when called: 8
  4505 ;; This function calls:
  4506 ;;		_ENTERCRITICAL
  4507 ;;		_LEAVECRITICAL
  4508 ;;		_XF_noMoreTimer
  4509 ;; This function is called by:
  4510 ;;		_XF_pushEvent
  4511 ;; This function uses a reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text4
  4515   013540                     __ptext4:
  4516                           	callstack 0
  4517   013540                     _XF_scheduleTimer:
  4518                           	callstack 0
  4519                           
  4520                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4521   013540  52E6               	movf	postinc1,f,c
  4522   013542                     
  4523                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4524                           ;stkvar	_inISR @ sp[(-1)+-9]
  4525   013542  0EF6               	movlw	-10
  4526   013544  50E3               	movf	plusw1,w,c
  4527   013546  6EE6               	movwf	postinc1,c
  4528   013548  EC94  F0A4         	call	_ENTERCRITICAL	;wreg free
  4529                           
  4530                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4531                           ;stkvar	_i @ sp[(-1)+0]
  4532   01354C  0EFF               	movlw	-1
  4533   01354E  6AE3               	clrf	plusw1,c
  4534   013550                     l4269:
  4535                           
  4536                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4537                           ;stkvar	_i @ sp[(-1)+0]
  4538   013550  0EFF               	movlw	-1
  4539   013552  50E3               	movf	plusw1,w,c
  4540   013554  0D08               	mullw	8
  4541   013556  0ECA               	movlw	low (_theXF+2)
  4542   013558  24F3               	addwf	243,w,c
  4543   01355A  6ED9               	movwf	fsr2l,c
  4544   01355C  0E02               	movlw	high (_theXF+2)
  4545   01355E  20F4               	addwfc	prodh,w,c
  4546   013560  6EDA               	movwf	fsr2h,c
  4547   013562  50DF               	movf	indf2,w,c
  4548   013564  A4D8               	btfss	status,2,c
  4549   013566  EFB7  F09A         	goto	u1881
  4550   01356A  EFB9  F09A         	goto	u1880
  4551   01356E                     u1881:
  4552   01356E  EFFF  F09A         	goto	l4287
  4553   013572                     u1880:
  4554   013572                     
  4555                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4556                           ;stkvar	_tm @ sp[(-1)+-2]
  4557   013572  50E1               	movf	fsr1l,w,c
  4558   013574  0FFD               	addlw	-3
  4559   013576  6ED9               	movwf	fsr2l,c
  4560   013578  50E2               	movf	fsr1h,w,c
  4561   01357A  6EDA               	movwf	fsr2h,c
  4562   01357C  0EFF               	movlw	255
  4563   01357E  22DA               	addwfc	fsr2h,f,c
  4564                           
  4565                           ;stkvar	_i @ sp[(-1)+0]
  4566   013580  0EFF               	movlw	-1
  4567   013582  50E3               	movf	plusw1,w,c
  4568   013584  0D08               	mullw	8
  4569   013586  0EC8               	movlw	low _theXF
  4570   013588  24F3               	addwf	243,w,c
  4571   01358A  6EE9               	movwf	fsr0l,c
  4572   01358C  0E02               	movlw	high _theXF
  4573   01358E  20F4               	addwfc	prodh,w,c
  4574   013590  6EEA               	movwf	fsr0h,c
  4575   013592  CFDE FFEE          	movff	postinc2,postinc0
  4576   013596  CFDD FFED          	movff	postdec2,postdec0
  4577                           
  4578                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4579                           ;stkvar	_ev @ sp[(-1)+-8]
  4580   01359A  0EF7               	movlw	247
  4581   01359C  24E1               	addwf	fsr1l,w,c
  4582   01359E  6ED9               	movwf	fsr2l,c
  4583   0135A0  0EFF               	movlw	255
  4584   0135A2  20E2               	addwfc	fsr1h,w,c
  4585   0135A4  6EDA               	movwf	fsr2h,c
  4586                           
  4587                           ;stkvar	_i @ sp[(-1)+0]
  4588   0135A6  0EFF               	movlw	-1
  4589   0135A8  50E3               	movf	plusw1,w,c
  4590   0135AA  0D08               	mullw	8
  4591   0135AC  0ECA               	movlw	low (_theXF+2)
  4592   0135AE  24F3               	addwf	243,w,c
  4593   0135B0  6EE9               	movwf	fsr0l,c
  4594   0135B2  0E02               	movlw	high (_theXF+2)
  4595   0135B4  20F4               	addwfc	prodh,w,c
  4596   0135B6  6EEA               	movwf	fsr0h,c
  4597   0135B8  0E05               	movlw	5
  4598   0135BA                     u1891:
  4599   0135BA  CFDB FFEB          	movff	plusw2,plusw0
  4600   0135BE  06E8               	decf	wreg,f,c
  4601   0135C0  E2FC               	bc	u1891
  4602   0135C2                     
  4603                           ;xf/xf.c: 180:             theXF.countTmr++;
  4604   0135C2  C3E1  FFE8         	movff	_theXF+281,wreg
  4605   0135C6  0F01               	addlw	1
  4606   0135C8  CFE8 F3E1          	movff	wreg,_theXF+281
  4607   0135CC                     
  4608                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4609   0135CC  EE23  F0E1         	lfsr	2,_theXF+281
  4610   0135D0  EE03  F0E0         	lfsr	0,_theXF+280
  4611   0135D4  50DE               	movf	postinc2,w,c
  4612   0135D6  5CEE               	subwf	postinc0,w,c
  4613   0135D8  B0D8               	btfsc	status,0,c
  4614   0135DA  EFF1  F09A         	goto	u1901
  4615   0135DE  EFF3  F09A         	goto	u1900
  4616   0135E2                     u1901:
  4617   0135E2  EFF5  F09A         	goto	l4279
  4618   0135E6                     u1900:
  4619   0135E6                     
  4620                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4621   0135E6  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4622   0135EA                     l4279:
  4623                           
  4624                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4625                           ;stkvar	_inISR @ sp[(-1)+-9]
  4626   0135EA  0EF6               	movlw	-10
  4627   0135EC  50E3               	movf	plusw1,w,c
  4628   0135EE  6EE6               	movwf	postinc1,c
  4629   0135F0  EC88  F0A4         	call	_LEAVECRITICAL	;wreg free
  4630   0135F4                     
  4631                           ;xf/xf.c: 186:             return i;
  4632                           ;stkvar	_i @ sp[(-1)+0]
  4633   0135F4  0EFF               	movlw	-1
  4634   0135F6  CFE3 F001          	movff	plusw1,btemp
  4635   0135FA  EF10  F09B         	goto	l1234
  4636   0135FE                     l4287:
  4637                           
  4638                           ;xf/xf.c: 189:     }
  4639                           ;stkvar	_i @ sp[(-1)+0]
  4640   0135FE  0EFF               	movlw	-1
  4641   013600  2AE3               	incf	plusw1,f,c
  4642   013602                     
  4643                           ;stkvar	_i @ sp[(-1)+0]
  4644   013602  0EFF               	movlw	-1
  4645   013604  CFE3 F001          	movff	plusw1,btemp
  4646   013608  0E0B               	movlw	11
  4647   01360A  6401               	cpfsgt	btemp^0,c
  4648   01360C  EF0A  F09B         	goto	u1911
  4649   013610  EF0C  F09B         	goto	u1910
  4650   013614                     u1911:
  4651   013614  EFA8  F09A         	goto	l4269
  4652   013618                     u1910:
  4653   013618                     
  4654                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4655   013618  ECB7  F0A4         	call	_XF_noMoreTimer	;wreg free
  4656   01361C  EFF5  F09A         	goto	l4279
  4657   013620                     l1234:
  4658                           
  4659                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4660   013620  0EF6               	movlw	246
  4661   013622  26E1               	addwf	fsr1l,f,c
  4662   013624  0EFF               	movlw	255
  4663   013626  22E2               	addwfc	fsr1h,f,c
  4664   013628  0012               	return		;funcret
  4665   01362A                     __end_of_XF_scheduleTimer:
  4666                           	callstack 0
  4667                           
  4668 ;; *************** function _XF_noMoreTimer *****************
  4669 ;; Defined at:
  4670 ;;		line 69 in file "xf/xf.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1  [STACK] void 
  4677 ;; Registers used:
  4678 ;;		None
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used: 1
  4690 ;; Hardware stack levels required when called: 7
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_XF_scheduleTimer
  4695 ;; This function uses a reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text5
  4699   01496E                     __ptext5:
  4700                           	callstack 0
  4701   01496E                     _XF_noMoreTimer:
  4702                           	callstack 9
  4703   01496E                     l1206:
  4704   01496E  EFB7  F0A4         	goto	l1206
  4705                           
  4706                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4707   014972  0012               	return		;funcret
  4708   014974                     __end_of_XF_noMoreTimer:
  4709                           	callstack 0
  4710                           
  4711 ;; *************** function _XF_noMoreEvent *****************
  4712 ;; Defined at:
  4713 ;;		line 65 in file "xf/xf.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1  [STACK] void 
  4720 ;; Registers used:
  4721 ;;		None
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used: 1
  4733 ;; Hardware stack levels required when called: 7
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_XF_pushEvent
  4738 ;; This function uses a reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text6
  4742   014974                     __ptext6:
  4743                           	callstack 0
  4744   014974                     _XF_noMoreEvent:
  4745                           	callstack 10
  4746   014974                     l1200:
  4747   014974  EFBA  F0A4         	goto	l1200
  4748                           
  4749                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4750   014978  0012               	return		;funcret
  4751   01497A                     __end_of_XF_noMoreEvent:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _Event_setDelay *****************
  4755 ;; Defined at:
  4756 ;;		line 32 in file "xf/event.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  me              2  [STACK] PTR struct Event_
  4759 ;;		 -> ev(6), 
  4760 ;;  delay           2  [STACK] unsigned short 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1  [STACK] void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;Total ram usage:        0 bytes
  4777 ;; Hardware stack levels used: 1
  4778 ;; Hardware stack levels required when called: 7
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_XF_pushEvent
  4783 ;;		_XF_post
  4784 ;; This function uses a reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text7
  4788   014772                     __ptext7:
  4789                           	callstack 0
  4790   014772                     _Event_setDelay:
  4791                           	callstack 10
  4792   014772                     
  4793                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4794                           ;stkvar	_delay @ sp[(0)+-4]
  4795   014772  50E1               	movf	fsr1l,w,c
  4796   014774  0FFC               	addlw	-4
  4797   014776  6ED9               	movwf	fsr2l,c
  4798   014778  50E2               	movf	fsr1h,w,c
  4799   01477A  6EDA               	movwf	fsr2h,c
  4800   01477C  0EFF               	movlw	255
  4801   01477E  22DA               	addwfc	fsr2h,f,c
  4802                           
  4803                           ;stkvar	_me @ sp[(0)+-2]
  4804   014780  0EFE               	movlw	-2
  4805   014782  CFE3 F00B          	movff	plusw1,btemp+10
  4806   014786  0EFF               	movlw	-1
  4807   014788  CFE3 F00C          	movff	plusw1,btemp+11
  4808   01478C  0E04               	movlw	4
  4809   01478E  240B               	addwf	(btemp+10)^0,w,c
  4810   014790  6EE9               	movwf	fsr0l,c
  4811   014792  0E00               	movlw	0
  4812   014794  200C               	addwfc	(btemp+11)^0,w,c
  4813   014796  6EEA               	movwf	fsr0h,c
  4814   014798  CFDE FFEE          	movff	postinc2,postinc0
  4815   01479C  CFDD FFED          	movff	postdec2,postdec0
  4816   0147A0                     
  4817                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4818   0147A0  52E5               	movf	postdec1,f,c
  4819   0147A2  52E5               	movf	postdec1,f,c
  4820   0147A4  52E5               	movf	postdec1,f,c
  4821   0147A6  52E5               	movf	postdec1,f,c
  4822   0147A8  0012               	return		;funcret
  4823   0147AA                     __end_of_Event_setDelay:
  4824                           	callstack 0
  4825                           
  4826 ;; *************** function _Event_getDelay *****************
  4827 ;; Defined at:
  4828 ;;		line 37 in file "xf/event.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  me              2  [STACK] PTR struct Event_
  4831 ;;		 -> ev(6), 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  2  [STACK] unsigned short 
  4836 ;; Registers used:
  4837 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;Total ram usage:        0 bytes
  4848 ;; Hardware stack levels used: 1
  4849 ;; Hardware stack levels required when called: 7
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_XF_pushEvent
  4854 ;; This function uses a reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text8
  4858   014892                     __ptext8:
  4859                           	callstack 0
  4860   014892                     _Event_getDelay:
  4861                           	callstack 10
  4862   014892                     
  4863                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  4864                           ;stkvar	_me @ sp[(0)+-2]
  4865   014892  0EFE               	movlw	-2
  4866   014894  CFE3 F00B          	movff	plusw1,btemp+10
  4867   014898  0EFF               	movlw	-1
  4868   01489A  CFE3 F00C          	movff	plusw1,btemp+11
  4869   01489E  0E04               	movlw	4
  4870   0148A0  240B               	addwf	(btemp+10)^0,w,c
  4871   0148A2  6ED9               	movwf	fsr2l,c
  4872   0148A4  0E00               	movlw	0
  4873   0148A6  200C               	addwfc	(btemp+11)^0,w,c
  4874   0148A8  6EDA               	movwf	fsr2h,c
  4875   0148AA  CFDE F001          	movff	postinc2,btemp
  4876   0148AE  CFDD F002          	movff	postdec2,btemp+1
  4877   0148B2                     
  4878                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  4879   0148B2  52E5               	movf	postdec1,f,c
  4880   0148B4  52E5               	movf	postdec1,f,c
  4881   0148B6  0012               	return		;funcret
  4882   0148B8                     __end_of_Event_getDelay:
  4883                           	callstack 0
  4884                           
  4885 ;; *************** function _Event_setPE *****************
  4886 ;; Defined at:
  4887 ;;		line 12 in file "xf/event.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  me              2  [STACK] PTR struct Event_
  4890 ;;		 -> ev(6), 
  4891 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4892 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1  [STACK] void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;Total ram usage:        0 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; Hardware stack levels required when called: 7
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_XF_post
  4915 ;; This function uses a reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text9
  4919   0146FC                     __ptext9:
  4920                           	callstack 0
  4921   0146FC                     _Event_setPE:
  4922                           	callstack 21
  4923   0146FC                     
  4924                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  4925                           ;stkvar	_processEvent @ sp[(0)+-5]
  4926   0146FC  50E1               	movf	fsr1l,w,c
  4927   0146FE  0FFB               	addlw	-5
  4928   014700  6ED9               	movwf	fsr2l,c
  4929   014702  50E2               	movf	fsr1h,w,c
  4930   014704  6EDA               	movwf	fsr2h,c
  4931   014706  0EFF               	movlw	255
  4932   014708  22DA               	addwfc	fsr2h,f,c
  4933                           
  4934                           ;stkvar	_me @ sp[(0)+-2]
  4935   01470A  0EFE               	movlw	-2
  4936   01470C  CFE3 F00B          	movff	plusw1,btemp+10
  4937   014710  0EFF               	movlw	-1
  4938   014712  CFE3 F00C          	movff	plusw1,btemp+11
  4939   014716  0E01               	movlw	1
  4940   014718  240B               	addwf	(btemp+10)^0,w,c
  4941   01471A  6EE9               	movwf	fsr0l,c
  4942   01471C  0E00               	movlw	0
  4943   01471E  200C               	addwfc	(btemp+11)^0,w,c
  4944   014720  6EEA               	movwf	fsr0h,c
  4945   014722  CFDE FFEE          	movff	postinc2,postinc0
  4946   014726  CFDE FFEE          	movff	postinc2,postinc0
  4947   01472A  CFDE FFEE          	movff	postinc2,postinc0
  4948   01472E                     
  4949                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  4950   01472E  0EFB               	movlw	251
  4951   014730  26E1               	addwf	fsr1l,f,c
  4952   014732  0EFF               	movlw	255
  4953   014734  22E2               	addwfc	fsr1h,f,c
  4954   014736  0012               	return		;funcret
  4955   014738                     __end_of_Event_setPE:
  4956                           	callstack 0
  4957                           
  4958 ;; *************** function _Event_setId *****************
  4959 ;; Defined at:
  4960 ;;		line 22 in file "xf/event.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  me              2  [STACK] PTR struct Event_
  4963 ;;		 -> ev(6), 
  4964 ;;  eventID         1  [STACK] unsigned char 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  1  [STACK] void 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used: 1
  4982 ;; Hardware stack levels required when called: 7
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_XF_post
  4987 ;; This function uses a reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text10
  4991   0148F6                     __ptext10:
  4992                           	callstack 0
  4993   0148F6                     _Event_setId:
  4994                           	callstack 21
  4995   0148F6                     
  4996                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  4997                           ;stkvar	_eventID @ sp[(0)+-3]
  4998                           ;stkvar	_me @ sp[(0)+-2]
  4999   0148F6  0EFE               	movlw	-2
  5000   0148F8  CFE3 FFD9          	movff	plusw1,fsr2l
  5001   0148FC  0EFF               	movlw	-1
  5002   0148FE  CFE3 FFDA          	movff	plusw1,fsr2h
  5003   014902  0EFD               	movlw	-3
  5004   014904  CFE3 FFDF          	movff	plusw1,indf2
  5005   014908                     
  5006                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5007   014908  52E5               	movf	postdec1,f,c
  5008   01490A  52E5               	movf	postdec1,f,c
  5009   01490C  52E5               	movf	postdec1,f,c
  5010   01490E  0012               	return		;funcret
  5011   014910                     __end_of_Event_setId:
  5012                           	callstack 0
  5013                           
  5014 ;; *************** function _CanReceive *****************
  5015 ;; Defined at:
  5016 ;;		line 242 in file "can/can.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5019 ;;		 -> rxObj(16), 
  5020 ;;  rxd             2  [STACK] PTR unsigned char 
  5021 ;;		 -> rxdata(8), 
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;  rxFlags         1  [STACK] enum E5591
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1  [STACK] char 
  5026 ;; Registers used:
  5027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used: 1
  5039 ;; Hardware stack levels required when called: 11
  5040 ;; This function calls:
  5041 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5042 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5043 ;; This function is called by:
  5044 ;;		_updateCarState
  5045 ;; This function uses a reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text11
  5049   01442C                     __ptext11:
  5050                           	callstack 0
  5051   01442C                     _CanReceive:
  5052                           	callstack 0
  5053                           
  5054                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5055   01442C  52E6               	movf	postinc1,f,c
  5056   01442E                     
  5057                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5058                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5059   01442E  0EFF               	movlw	255
  5060   014430  24E1               	addwf	fsr1l,w,c
  5061   014432  6E01               	movwf	btemp^0,c
  5062   014434  0EFF               	movlw	255
  5063   014436  20E2               	addwfc	fsr1h,w,c
  5064   014438  6E02               	movwf	(btemp+1)^0,c
  5065   01443A  C001  FFE6         	movff	btemp,postinc1
  5066   01443E  C002  FFE6         	movff	btemp+1,postinc1
  5067   014442  0E02               	movlw	2
  5068   014444  6EE6               	movwf	postinc1,c
  5069   014446  ECEA  F09F         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5070   01444A                     
  5071                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5072                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5073   01444A  0EFF               	movlw	-1
  5074   01444C  A0E3               	btfss	plusw1,0,c
  5075   01444E  EF2B  F0A2         	goto	u2721
  5076   014452  EF2D  F0A2         	goto	u2720
  5077   014456                     u2721:
  5078   014456  EF41  F0A2         	goto	l5009
  5079   01445A                     u2720:
  5080   01445A                     
  5081                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5082   01445A  0E08               	movlw	8
  5083   01445C  6EE6               	movwf	postinc1,c
  5084                           
  5085                           ;stkvar	_rxd @ sp[(-2)+-4]
  5086   01445E  0EFA               	movlw	-6
  5087   014460  CFE3 FFE6          	movff	plusw1,postinc1
  5088   014464  CFE3 FFE6          	movff	plusw1,postinc1
  5089                           
  5090                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5091   014468  0EFA               	movlw	-6
  5092   01446A  CFE3 FFE6          	movff	plusw1,postinc1
  5093   01446E  CFE3 FFE6          	movff	plusw1,postinc1
  5094   014472  0E02               	movlw	2
  5095   014474  6EE6               	movwf	postinc1,c
  5096   014476  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5097   01447A                     
  5098                           ;can/can.c: 249:     return 0;
  5099   01447A  0E00               	movlw	0
  5100   01447C  6E01               	movwf	btemp^0,c
  5101   01447E  EF43  F0A2         	goto	l165
  5102   014482                     l5009:
  5103                           
  5104                           ;can/can.c: 251:   return -1;
  5105   014482  0EFF               	movlw	255
  5106   014484  6E01               	movwf	btemp^0,c
  5107   014486                     l165:
  5108                           
  5109                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5110   014486  0EFB               	movlw	251
  5111   014488  26E1               	addwf	fsr1l,f,c
  5112   01448A  0EFF               	movlw	255
  5113   01448C  22E2               	addwfc	fsr1h,f,c
  5114   01448E  0012               	return		;funcret
  5115   014490                     __end_of_CanReceive:
  5116                           	callstack 0
  5117                           
  5118 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5119 ;; Defined at:
  5120 ;;		line 1236 in file "can/can.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  channel         1  [STACK] enum E5290
  5123 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5124 ;;		 -> rxObj(16), txMsg(16), 
  5125 ;;  rxd             2  [STACK] PTR unsigned char 
  5126 ;;		 -> rxdata(8), 
  5127 ;;  nBytes          1  [STACK] unsigned char 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  temp32          4  [STACK] unsigned long 
  5130 ;;  ba             76  [STACK] unsigned char [76]
  5131 ;;  fifoReg        12  [STACK] unsigned long [3]
  5132 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5133 ;;  myReg           4  [STACK] struct _REG_t
  5134 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5135 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5136 ;;  a               2  [STACK] unsigned short 
  5137 ;;  i               1  [STACK] unsigned char 
  5138 ;;  n               1  [STACK] unsigned char 
  5139 ;;  spiTransferE    1  [STACK] char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;                  1  [STACK] char 
  5142 ;; Registers used:
  5143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;Total ram usage:        0 bytes
  5154 ;; Hardware stack levels used: 1
  5155 ;; Hardware stack levels required when called: 10
  5156 ;; This function calls:
  5157 ;;		_DRV_CANFDSPI_ReadByteArray
  5158 ;;		_DRV_CANFDSPI_ReadWordArray
  5159 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5160 ;; This function is called by:
  5161 ;;		_CanReceive
  5162 ;; This function uses a reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text12
  5166   01074C                     __ptext12:
  5167                           	callstack 0
  5168   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5169                           	callstack 0
  5170                           
  5171                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5172   01074C  0E6E               	movlw	110
  5173   01074E  26E1               	addwf	fsr1l,f,c
  5174   010750  0E00               	movlw	0
  5175   010752  22E2               	addwfc	fsr1h,f,c
  5176   010754                     
  5177                           ;can/can.c: 1241:     uint8_t i = 0;
  5178                           ;stkvar	_i @ sp[(-110)+107]
  5179   010754  0EFD               	movlw	-3
  5180   010756  6AE3               	clrf	plusw1,c
  5181                           
  5182                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5183                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5184   010758  0EFF               	movlw	-1
  5185   01075A  6AE3               	clrf	plusw1,c
  5186   01075C                     
  5187                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5188                           ;stkvar	_channel @ sp[(-110)+-1]
  5189   01075C  0E91               	movlw	-111
  5190   01075E  50E3               	movf	plusw1,w,c
  5191   010760  0D0C               	mullw	12
  5192   010762  0E50               	movlw	80
  5193   010764  26F3               	addwf	243,f,c
  5194   010766  0E00               	movlw	0
  5195   010768  22F4               	addwfc	244,f,c
  5196                           
  5197                           ;stkvar	_a @ sp[(-110)+105]
  5198   01076A  0EFB               	movlw	-5
  5199   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5200   010770  0EFC               	movlw	-4
  5201   010772  CFF4 FFE3          	movff	prodh,plusw1
  5202   010776                     
  5203                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5204   010776  0E03               	movlw	3
  5205   010778  6EE6               	movwf	postinc1,c
  5206   01077A  0E00               	movlw	0
  5207   01077C  6EE6               	movwf	postinc1,c
  5208                           
  5209                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5210   01077E  0EE0               	movlw	224
  5211   010780  24E1               	addwf	fsr1l,w,c
  5212   010782  6E01               	movwf	btemp^0,c
  5213   010784  0EFF               	movlw	255
  5214   010786  20E2               	addwfc	fsr1h,w,c
  5215   010788  6E02               	movwf	(btemp+1)^0,c
  5216   01078A  C001  FFE6         	movff	btemp,postinc1
  5217   01078E  C002  FFE6         	movff	btemp+1,postinc1
  5218                           
  5219                           ;stkvar	_a @ sp[(-114)+105]
  5220   010792  0EF7               	movlw	-9
  5221   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5222   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5223   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5224                           
  5225                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5226   0107A0  0EFF               	movlw	-1
  5227   0107A2  C001  FFE3         	movff	btemp,plusw1
  5228   0107A6                     
  5229                           ;can/can.c: 1253:     if (spiTransferError) {
  5230                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5231   0107A6  0EFF               	movlw	-1
  5232   0107A8  50E3               	movf	plusw1,w,c
  5233   0107AA  B4D8               	btfsc	status,2,c
  5234   0107AC  EFDA  F083         	goto	u2091
  5235   0107B0  EFDC  F083         	goto	u2090
  5236   0107B4                     u2091:
  5237   0107B4  EFDE  F083         	goto	l4465
  5238   0107B8                     u2090:
  5239   0107B8  EF15  F087         	goto	l357
  5240   0107BC                     l4465:
  5241                           
  5242                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5243                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5244   0107BC  0EE2               	movlw	-30
  5245   0107BE  CFE3 F009          	movff	plusw1,btemp+8
  5246   0107C2  0EE3               	movlw	-29
  5247   0107C4  CFE3 F00A          	movff	plusw1,btemp+9
  5248   0107C8  0EE4               	movlw	-28
  5249   0107CA  CFE3 F00B          	movff	plusw1,btemp+10
  5250   0107CE  0EE5               	movlw	-27
  5251   0107D0  CFE3 F00C          	movff	plusw1,btemp+11
  5252                           
  5253                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5254   0107D4  0EEE               	movlw	-18
  5255   0107D6  C009  FFE3         	movff	btemp+8,plusw1
  5256   0107DA  0EEF               	movlw	-17
  5257   0107DC  C00A  FFE3         	movff	btemp+9,plusw1
  5258   0107E0  0EF0               	movlw	-16
  5259   0107E2  C00B  FFE3         	movff	btemp+10,plusw1
  5260   0107E6  0EF1               	movlw	-15
  5261   0107E8  C00C  FFE3         	movff	btemp+11,plusw1
  5262   0107EC                     
  5263                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5264                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5265   0107EC  50E1               	movf	fsr1l,w,c
  5266   0107EE  0FEE               	addlw	-18
  5267   0107F0  6ED9               	movwf	fsr2l,c
  5268   0107F2  50E2               	movf	fsr1h,w,c
  5269   0107F4  6EDA               	movwf	fsr2h,c
  5270   0107F6  0EFF               	movlw	255
  5271   0107F8  22DA               	addwfc	fsr2h,f,c
  5272   0107FA  AEDF               	btfss	indf2,7,c
  5273   0107FC  EF02  F084         	goto	u2101
  5274   010800  EF04  F084         	goto	u2100
  5275   010804                     u2101:
  5276   010804  EF06  F084         	goto	l4471
  5277   010808                     u2100:
  5278   010808  EF15  F087         	goto	l357
  5279   01080C                     l4471:
  5280                           
  5281                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5282                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5283   01080C  0EEA               	movlw	234
  5284   01080E  24E1               	addwf	fsr1l,w,c
  5285   010810  6ED9               	movwf	fsr2l,c
  5286   010812  0EFF               	movlw	255
  5287   010814  20E2               	addwfc	fsr1h,w,c
  5288   010816  6EDA               	movwf	fsr2h,c
  5289   010818  CFDE F009          	movff	postinc2,btemp+8
  5290   01081C  CFDE F00A          	movff	postinc2,btemp+9
  5291   010820  CFDE F00B          	movff	postinc2,btemp+10
  5292   010824  CFDE F00C          	movff	postinc2,btemp+11
  5293                           
  5294                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5295   010828  0EF7               	movlw	-9
  5296   01082A  C009  FFE3         	movff	btemp+8,plusw1
  5297   01082E  0EF8               	movlw	-8
  5298   010830  C00A  FFE3         	movff	btemp+9,plusw1
  5299   010834  0EF9               	movlw	-7
  5300   010836  C00B  FFE3         	movff	btemp+10,plusw1
  5301   01083A  0EFA               	movlw	-6
  5302   01083C  C00C  FFE3         	movff	btemp+11,plusw1
  5303   010840                     
  5304                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5305                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5306                           ;stkvar	_a @ sp[(-110)+105]
  5307   010840  0EF7               	movlw	-9
  5308   010842  CFE3 F001          	movff	plusw1,btemp
  5309   010846  0EFB               	movlw	-5
  5310   010848  C001  FFE3         	movff	btemp,plusw1
  5311   01084C  0EF8               	movlw	-8
  5312   01084E  CFE3 F001          	movff	plusw1,btemp
  5313   010852  0EFC               	movlw	-4
  5314   010854  C001  FFE3         	movff	btemp,plusw1
  5315   010858                     
  5316                           ;can/can.c: 1273:     a += 0x400;
  5317                           ;stkvar	_a @ sp[(-110)+105]
  5318   010858  50E1               	movf	fsr1l,w,c
  5319   01085A  0FFB               	addlw	-5
  5320   01085C  6ED9               	movwf	fsr2l,c
  5321   01085E  50E2               	movf	fsr1h,w,c
  5322   010860  6EDA               	movwf	fsr2h,c
  5323   010862  0EFF               	movlw	255
  5324   010864  22DA               	addwfc	fsr2h,f,c
  5325   010866  0E00               	movlw	0
  5326   010868  26DE               	addwf	postinc2,f,c
  5327   01086A  0E04               	movlw	4
  5328   01086C  22DD               	addwfc	postdec2,f,c
  5329   01086E                     
  5330                           ;can/can.c: 1276:     n = nBytes + 8;
  5331   01086E  0E08               	movlw	8
  5332   010870  6E0C               	movwf	(btemp+11)^0,c
  5333                           
  5334                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5335   010872  0E8C               	movlw	-116
  5336   010874  50E3               	movf	plusw1,w,c
  5337   010876  240C               	addwf	(btemp+11)^0,w,c
  5338   010878  6E0B               	movwf	(btemp+10)^0,c
  5339                           
  5340                           ;stkvar	_n @ sp[(-110)+108]
  5341   01087A  0EFE               	movlw	-2
  5342   01087C  C00B  FFE3         	movff	btemp+10,plusw1
  5343   010880                     
  5344                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5345                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5346   010880  50E1               	movf	fsr1l,w,c
  5347   010882  0FEE               	addlw	-18
  5348   010884  6ED9               	movwf	fsr2l,c
  5349   010886  50E2               	movf	fsr1h,w,c
  5350   010888  6EDA               	movwf	fsr2h,c
  5351   01088A  0EFF               	movlw	255
  5352   01088C  22DA               	addwfc	fsr2h,f,c
  5353   01088E  AADF               	btfss	indf2,5,c
  5354   010890  EF4C  F084         	goto	u2111
  5355   010894  EF4E  F084         	goto	u2110
  5356   010898                     u2111:
  5357   010898  EF56  F084         	goto	l4483
  5358   01089C                     u2110:
  5359   01089C                     
  5360                           ;can/can.c: 1279:         n += 4;
  5361                           ;stkvar	_n @ sp[(-110)+108]
  5362   01089C  0EFE               	movlw	-2
  5363   01089E  CFE3 F001          	movff	plusw1,btemp
  5364   0108A2  0E04               	movlw	4
  5365   0108A4  2601               	addwf	btemp^0,f,c
  5366   0108A6  0EFE               	movlw	-2
  5367   0108A8  C001  FFE3         	movff	btemp,plusw1
  5368   0108AC                     l4483:
  5369                           
  5370                           ;can/can.c: 1283:     if (n % 4) {
  5371                           ;stkvar	_n @ sp[(-110)+108]
  5372   0108AC  0EFE               	movlw	-2
  5373   0108AE  CFE3 F00C          	movff	plusw1,btemp+11
  5374   0108B2  0E03               	movlw	3
  5375   0108B4  160C               	andwf	(btemp+11)^0,f,c
  5376   0108B6  B4D8               	btfsc	status,2,c
  5377   0108B8  EF60  F084         	goto	u2121
  5378   0108BC  EF62  F084         	goto	u2120
  5379   0108C0                     u2121:
  5380   0108C0  EF72  F084         	goto	l4487
  5381   0108C4                     u2120:
  5382   0108C4                     
  5383                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5384                           ;stkvar	_n @ sp[(-110)+108]
  5385   0108C4  0EFE               	movlw	-2
  5386   0108C6  CFE3 F00C          	movff	plusw1,btemp+11
  5387   0108CA  0E03               	movlw	3
  5388   0108CC  160C               	andwf	(btemp+11)^0,f,c
  5389                           
  5390                           ;stkvar	_n @ sp[(-110)+108]
  5391   0108CE  0EFE               	movlw	-2
  5392   0108D0  CFE3 F00B          	movff	plusw1,btemp+10
  5393   0108D4  500C               	movf	(btemp+11)^0,w,c
  5394   0108D6  5C0B               	subwf	(btemp+10)^0,w,c
  5395   0108D8  6E0C               	movwf	(btemp+11)^0,c
  5396   0108DA  0E04               	movlw	4
  5397   0108DC  260C               	addwf	(btemp+11)^0,f,c
  5398                           
  5399                           ;stkvar	_n @ sp[(-110)+108]
  5400   0108DE  0EFE               	movlw	-2
  5401   0108E0  C00C  FFE3         	movff	btemp+11,plusw1
  5402   0108E4                     l4487:
  5403                           
  5404                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5405                           ;stkvar	_n @ sp[(-110)+108]
  5406   0108E4  0EFE               	movlw	-2
  5407   0108E6  CFE3 F001          	movff	plusw1,btemp
  5408   0108EA  0E4C               	movlw	76
  5409   0108EC  6401               	cpfsgt	btemp^0,c
  5410   0108EE  EF7B  F084         	goto	u2131
  5411   0108F2  EF7D  F084         	goto	u2130
  5412   0108F6                     u2131:
  5413   0108F6  EF82  F084         	goto	l4491
  5414   0108FA                     u2130:
  5415   0108FA                     
  5416                           ;can/can.c: 1291:         n = 76;
  5417   0108FA  0E4C               	movlw	76
  5418   0108FC  6E0C               	movwf	(btemp+11)^0,c
  5419                           
  5420                           ;stkvar	_n @ sp[(-110)+108]
  5421   0108FE  0EFE               	movlw	-2
  5422   010900  C00C  FFE3         	movff	btemp+11,plusw1
  5423   010904                     l4491:
  5424                           
  5425                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5426                           ;stkvar	_n @ sp[(-110)+108]
  5427   010904  0EFE               	movlw	-2
  5428   010906  50E3               	movf	plusw1,w,c
  5429   010908  6EE6               	movwf	postinc1,c
  5430   01090A  0E00               	movlw	0
  5431   01090C  6EE6               	movwf	postinc1,c
  5432                           
  5433                           ;stkvar	_ba @ sp[(-112)+4]
  5434   01090E  0E94               	movlw	148
  5435   010910  24E1               	addwf	fsr1l,w,c
  5436   010912  6E01               	movwf	btemp^0,c
  5437   010914  0EFF               	movlw	255
  5438   010916  20E2               	addwfc	fsr1h,w,c
  5439   010918  6E02               	movwf	(btemp+1)^0,c
  5440   01091A  C001  FFE6         	movff	btemp,postinc1
  5441   01091E  C002  FFE6         	movff	btemp+1,postinc1
  5442                           
  5443                           ;stkvar	_a @ sp[(-114)+105]
  5444   010922  0EF7               	movlw	-9
  5445   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5446   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5447   01092C  ECE6  F092         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5448                           
  5449                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5450   010930  0EFF               	movlw	-1
  5451   010932  C001  FFE3         	movff	btemp,plusw1
  5452   010936                     
  5453                           ;can/can.c: 1295:     if (spiTransferError) {
  5454                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5455   010936  0EFF               	movlw	-1
  5456   010938  50E3               	movf	plusw1,w,c
  5457   01093A  B4D8               	btfsc	status,2,c
  5458   01093C  EFA2  F084         	goto	u2141
  5459   010940  EFA4  F084         	goto	u2140
  5460   010944                     u2141:
  5461   010944  EFA6  F084         	goto	l4497
  5462   010948                     u2140:
  5463   010948  EF15  F087         	goto	l357
  5464   01094C                     l4497:
  5465                           
  5466                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5467                           ;stkvar	_ba @ sp[(-110)+4]
  5468   01094C  0E9A               	movlw	154
  5469   01094E  24E1               	addwf	fsr1l,w,c
  5470   010950  6ED9               	movwf	fsr2l,c
  5471   010952  0EFF               	movlw	255
  5472   010954  20E2               	addwfc	fsr1h,w,c
  5473   010956  6EDA               	movwf	fsr2h,c
  5474                           
  5475                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5476   010958  0E8F               	movlw	-113
  5477   01095A  CFE3 F00B          	movff	plusw1,btemp+10
  5478   01095E  0E90               	movlw	-112
  5479   010960  CFE3 F00C          	movff	plusw1,btemp+11
  5480   010964  0E06               	movlw	6
  5481   010966  240B               	addwf	(btemp+10)^0,w,c
  5482   010968  6EE9               	movwf	fsr0l,c
  5483   01096A  0E00               	movlw	0
  5484   01096C  200C               	addwfc	(btemp+11)^0,w,c
  5485   01096E  6EEA               	movwf	fsr0h,c
  5486   010970  CFDF FFEF          	movff	indf2,indf0
  5487   010974                     
  5488                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5489                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5490   010974  0E8F               	movlw	-113
  5491   010976  CFE3 F00B          	movff	plusw1,btemp+10
  5492   01097A  0E90               	movlw	-112
  5493   01097C  CFE3 F00C          	movff	plusw1,btemp+11
  5494   010980  0E06               	movlw	6
  5495   010982  240B               	addwf	(btemp+10)^0,w,c
  5496   010984  6ED9               	movwf	fsr2l,c
  5497   010986  0E00               	movlw	0
  5498   010988  200C               	addwfc	(btemp+11)^0,w,c
  5499   01098A  6EDA               	movwf	fsr2h,c
  5500   01098C  B8DF               	btfsc	indf2,4,c
  5501   01098E  EFCB  F084         	goto	u2151
  5502   010992  EFCD  F084         	goto	u2150
  5503   010996                     u2151:
  5504   010996  EF38  F085         	goto	l4503
  5505   01099A                     u2150:
  5506   01099A                     
  5507                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5508                           ;stkvar	_ba @ sp[(-110)+4]
  5509   01099A  0E99               	movlw	153
  5510   01099C  24E1               	addwf	fsr1l,w,c
  5511   01099E  6ED9               	movwf	fsr2l,c
  5512   0109A0  0EFF               	movlw	255
  5513   0109A2  20E2               	addwfc	fsr1h,w,c
  5514   0109A4  6EDA               	movwf	fsr2h,c
  5515   0109A6  50DF               	movf	indf2,w,c
  5516   0109A8  6E0C               	movwf	(btemp+11)^0,c
  5517   0109AA  0E1F               	movlw	31
  5518   0109AC  160C               	andwf	(btemp+11)^0,f,c
  5519   0109AE  C00C  F005         	movff	btemp+11,btemp+4
  5520   0109B2  6A06               	clrf	(btemp+5)^0,c
  5521   0109B4  6A07               	clrf	(btemp+6)^0,c
  5522   0109B6  6A08               	clrf	(btemp+7)^0,c
  5523   0109B8  C005  F008         	movff	btemp+4,btemp+7
  5524   0109BC  6A07               	clrf	(btemp+6)^0,c
  5525   0109BE  6A06               	clrf	(btemp+5)^0,c
  5526   0109C0  6A05               	clrf	(btemp+4)^0,c
  5527                           
  5528                           ;stkvar	_ba @ sp[(-110)+4]
  5529   0109C2  0E97               	movlw	151
  5530   0109C4  24E1               	addwf	fsr1l,w,c
  5531   0109C6  6ED9               	movwf	fsr2l,c
  5532   0109C8  0EFF               	movlw	255
  5533   0109CA  20E2               	addwfc	fsr1h,w,c
  5534   0109CC  6EDA               	movwf	fsr2h,c
  5535   0109CE  50DF               	movf	indf2,w,c
  5536   0109D0  6E0C               	movwf	(btemp+11)^0,c
  5537   0109D2  C00C  F001         	movff	btemp+11,btemp
  5538   0109D6  6A02               	clrf	(btemp+1)^0,c
  5539   0109D8  6A03               	clrf	(btemp+2)^0,c
  5540   0109DA  6A04               	clrf	(btemp+3)^0,c
  5541   0109DC  C003  F004         	movff	btemp+2,btemp+3
  5542   0109E0  C002  F003         	movff	btemp+1,btemp+2
  5543   0109E4  C001  F002         	movff	btemp,btemp+1
  5544   0109E8  6A01               	clrf	btemp^0,c
  5545                           
  5546                           ;stkvar	_ba @ sp[(-110)+4]
  5547   0109EA  0E96               	movlw	-106
  5548   0109EC  50E3               	movf	plusw1,w,c
  5549   0109EE  6E09               	movwf	(btemp+8)^0,c
  5550   0109F0  6A0A               	clrf	(btemp+9)^0,c
  5551   0109F2  6A0B               	clrf	(btemp+10)^0,c
  5552   0109F4  6A0C               	clrf	(btemp+11)^0,c
  5553   0109F6  5001               	movf	btemp^0,w,c
  5554   0109F8  1209               	iorwf	(btemp+8)^0,f,c
  5555   0109FA  5002               	movf	(btemp+1)^0,w,c
  5556   0109FC  120A               	iorwf	(btemp+9)^0,f,c
  5557   0109FE  5003               	movf	(btemp+2)^0,w,c
  5558   010A00  120B               	iorwf	(btemp+10)^0,f,c
  5559   010A02  5004               	movf	(btemp+3)^0,w,c
  5560   010A04  120C               	iorwf	(btemp+11)^0,f,c
  5561                           
  5562                           ;stkvar	_ba @ sp[(-110)+4]
  5563   010A06  0E98               	movlw	152
  5564   010A08  24E1               	addwf	fsr1l,w,c
  5565   010A0A  6ED9               	movwf	fsr2l,c
  5566   010A0C  0EFF               	movlw	255
  5567   010A0E  20E2               	addwfc	fsr1h,w,c
  5568   010A10  6EDA               	movwf	fsr2h,c
  5569   010A12  50DF               	movf	indf2,w,c
  5570   010A14  6E01               	movwf	btemp^0,c
  5571   010A16  6A02               	clrf	(btemp+1)^0,c
  5572   010A18  6A03               	clrf	(btemp+2)^0,c
  5573   010A1A  6A04               	clrf	(btemp+3)^0,c
  5574   010A1C  C002  F004         	movff	btemp+1,btemp+3
  5575   010A20  C001  F003         	movff	btemp,btemp+2
  5576   010A24  6A02               	clrf	(btemp+1)^0,c
  5577   010A26  6A01               	clrf	btemp^0,c
  5578   010A28  5001               	movf	btemp^0,w,c
  5579   010A2A  1209               	iorwf	(btemp+8)^0,f,c
  5580   010A2C  5002               	movf	(btemp+1)^0,w,c
  5581   010A2E  120A               	iorwf	(btemp+9)^0,f,c
  5582   010A30  5003               	movf	(btemp+2)^0,w,c
  5583   010A32  120B               	iorwf	(btemp+10)^0,f,c
  5584   010A34  5004               	movf	(btemp+3)^0,w,c
  5585   010A36  120C               	iorwf	(btemp+11)^0,f,c
  5586   010A38  5005               	movf	(btemp+4)^0,w,c
  5587   010A3A  1009               	iorwf	(btemp+8)^0,w,c
  5588   010A3C  6E01               	movwf	btemp^0,c
  5589   010A3E  5006               	movf	(btemp+5)^0,w,c
  5590   010A40  100A               	iorwf	(btemp+9)^0,w,c
  5591   010A42  6E02               	movwf	(btemp+1)^0,c
  5592   010A44  5007               	movf	(btemp+6)^0,w,c
  5593   010A46  100B               	iorwf	(btemp+10)^0,w,c
  5594   010A48  6E03               	movwf	(btemp+2)^0,c
  5595   010A4A  5008               	movf	(btemp+7)^0,w,c
  5596   010A4C  100C               	iorwf	(btemp+11)^0,w,c
  5597   010A4E  6E04               	movwf	(btemp+3)^0,c
  5598                           
  5599                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5600   010A50  0E8F               	movlw	-113
  5601   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5602   010A56  0E90               	movlw	-112
  5603   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5604   010A5C  C001  FFDE         	movff	btemp,postinc2
  5605   010A60  C002  FFDE         	movff	btemp+1,postinc2
  5606   010A64  C003  FFDE         	movff	btemp+2,postinc2
  5607   010A68  C004  FFDE         	movff	btemp+3,postinc2
  5608                           
  5609                           ;can/can.c: 1320:     }
  5610   010A6C  EFF8  F085         	goto	l4505
  5611   010A70                     l4503:
  5612                           
  5613                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5614                           ;stkvar	_ba @ sp[(-110)+4]
  5615   010A70  0E99               	movlw	153
  5616   010A72  24E1               	addwf	fsr1l,w,c
  5617   010A74  6ED9               	movwf	fsr2l,c
  5618   010A76  0EFF               	movlw	255
  5619   010A78  20E2               	addwfc	fsr1h,w,c
  5620   010A7A  6EDA               	movwf	fsr2h,c
  5621   010A7C  50DF               	movf	indf2,w,c
  5622   010A7E  6E0C               	movwf	(btemp+11)^0,c
  5623   010A80  0E1F               	movlw	31
  5624   010A82  160C               	andwf	(btemp+11)^0,f,c
  5625   010A84  C00C  F005         	movff	btemp+11,btemp+4
  5626   010A88  6A06               	clrf	(btemp+5)^0,c
  5627   010A8A  6A07               	clrf	(btemp+6)^0,c
  5628   010A8C  6A08               	clrf	(btemp+7)^0,c
  5629   010A8E  C005  F008         	movff	btemp+4,btemp+7
  5630   010A92  6A07               	clrf	(btemp+6)^0,c
  5631   010A94  6A06               	clrf	(btemp+5)^0,c
  5632   010A96  6A05               	clrf	(btemp+4)^0,c
  5633                           
  5634                           ;stkvar	_ba @ sp[(-110)+4]
  5635   010A98  0E97               	movlw	151
  5636   010A9A  24E1               	addwf	fsr1l,w,c
  5637   010A9C  6ED9               	movwf	fsr2l,c
  5638   010A9E  0EFF               	movlw	255
  5639   010AA0  20E2               	addwfc	fsr1h,w,c
  5640   010AA2  6EDA               	movwf	fsr2h,c
  5641   010AA4  50DF               	movf	indf2,w,c
  5642   010AA6  6E0C               	movwf	(btemp+11)^0,c
  5643   010AA8  C00C  F001         	movff	btemp+11,btemp
  5644   010AAC  6A02               	clrf	(btemp+1)^0,c
  5645   010AAE  6A03               	clrf	(btemp+2)^0,c
  5646   010AB0  6A04               	clrf	(btemp+3)^0,c
  5647   010AB2  C003  F004         	movff	btemp+2,btemp+3
  5648   010AB6  C002  F003         	movff	btemp+1,btemp+2
  5649   010ABA  C001  F002         	movff	btemp,btemp+1
  5650   010ABE  6A01               	clrf	btemp^0,c
  5651                           
  5652                           ;stkvar	_ba @ sp[(-110)+4]
  5653   010AC0  0E96               	movlw	-106
  5654   010AC2  50E3               	movf	plusw1,w,c
  5655   010AC4  6E09               	movwf	(btemp+8)^0,c
  5656   010AC6  6A0A               	clrf	(btemp+9)^0,c
  5657   010AC8  6A0B               	clrf	(btemp+10)^0,c
  5658   010ACA  6A0C               	clrf	(btemp+11)^0,c
  5659   010ACC  5001               	movf	btemp^0,w,c
  5660   010ACE  1209               	iorwf	(btemp+8)^0,f,c
  5661   010AD0  5002               	movf	(btemp+1)^0,w,c
  5662   010AD2  120A               	iorwf	(btemp+9)^0,f,c
  5663   010AD4  5003               	movf	(btemp+2)^0,w,c
  5664   010AD6  120B               	iorwf	(btemp+10)^0,f,c
  5665   010AD8  5004               	movf	(btemp+3)^0,w,c
  5666   010ADA  120C               	iorwf	(btemp+11)^0,f,c
  5667                           
  5668                           ;stkvar	_ba @ sp[(-110)+4]
  5669   010ADC  0E98               	movlw	152
  5670   010ADE  24E1               	addwf	fsr1l,w,c
  5671   010AE0  6ED9               	movwf	fsr2l,c
  5672   010AE2  0EFF               	movlw	255
  5673   010AE4  20E2               	addwfc	fsr1h,w,c
  5674   010AE6  6EDA               	movwf	fsr2h,c
  5675   010AE8  50DF               	movf	indf2,w,c
  5676   010AEA  6E01               	movwf	btemp^0,c
  5677   010AEC  6A02               	clrf	(btemp+1)^0,c
  5678   010AEE  6A03               	clrf	(btemp+2)^0,c
  5679   010AF0  6A04               	clrf	(btemp+3)^0,c
  5680   010AF2  C002  F004         	movff	btemp+1,btemp+3
  5681   010AF6  C001  F003         	movff	btemp,btemp+2
  5682   010AFA  6A02               	clrf	(btemp+1)^0,c
  5683   010AFC  6A01               	clrf	btemp^0,c
  5684   010AFE  5001               	movf	btemp^0,w,c
  5685   010B00  1209               	iorwf	(btemp+8)^0,f,c
  5686   010B02  5002               	movf	(btemp+1)^0,w,c
  5687   010B04  120A               	iorwf	(btemp+9)^0,f,c
  5688   010B06  5003               	movf	(btemp+2)^0,w,c
  5689   010B08  120B               	iorwf	(btemp+10)^0,f,c
  5690   010B0A  5004               	movf	(btemp+3)^0,w,c
  5691   010B0C  120C               	iorwf	(btemp+11)^0,f,c
  5692   010B0E  5005               	movf	(btemp+4)^0,w,c
  5693   010B10  1009               	iorwf	(btemp+8)^0,w,c
  5694   010B12  6E01               	movwf	btemp^0,c
  5695   010B14  5006               	movf	(btemp+5)^0,w,c
  5696   010B16  100A               	iorwf	(btemp+9)^0,w,c
  5697   010B18  6E02               	movwf	(btemp+1)^0,c
  5698   010B1A  5007               	movf	(btemp+6)^0,w,c
  5699   010B1C  100B               	iorwf	(btemp+10)^0,w,c
  5700   010B1E  6E03               	movwf	(btemp+2)^0,c
  5701   010B20  5008               	movf	(btemp+7)^0,w,c
  5702   010B22  100C               	iorwf	(btemp+11)^0,w,c
  5703   010B24  6E04               	movwf	(btemp+3)^0,c
  5704                           
  5705                           ;stkvar	_temp32 @ sp[(-110)+0]
  5706   010B26  0E92               	movlw	-110
  5707   010B28  C001  FFE3         	movff	btemp,plusw1
  5708   010B2C  0E93               	movlw	-109
  5709   010B2E  C002  FFE3         	movff	btemp+1,plusw1
  5710   010B32  0E94               	movlw	-108
  5711   010B34  C003  FFE3         	movff	btemp+2,plusw1
  5712   010B38  0E95               	movlw	-107
  5713   010B3A  C004  FFE3         	movff	btemp+3,plusw1
  5714                           
  5715                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5716                           ;stkvar	_temp32 @ sp[(-110)+0]
  5717   010B3E  0E92               	movlw	-110
  5718   010B40  CFE3 F009          	movff	plusw1,btemp+8
  5719   010B44  0E93               	movlw	-109
  5720   010B46  CFE3 F00A          	movff	plusw1,btemp+9
  5721   010B4A  0E94               	movlw	-108
  5722   010B4C  CFE3 F00B          	movff	plusw1,btemp+10
  5723   010B50  0E95               	movlw	-107
  5724   010B52  CFE3 F00C          	movff	plusw1,btemp+11
  5725   010B56  0E0C               	movlw	12
  5726   010B58  EFB3  F085         	goto	u2160
  5727   010B5C                     u2165:
  5728   010B5C  90D8               	bcf	status,0,c
  5729   010B5E  320C               	rrcf	(btemp+11)^0,f,c
  5730   010B60  320B               	rrcf	(btemp+10)^0,f,c
  5731   010B62  320A               	rrcf	(btemp+9)^0,f,c
  5732   010B64  3209               	rrcf	(btemp+8)^0,f,c
  5733   010B66                     u2160:
  5734   010B66  2EE8               	decfsz	wreg,f,c
  5735   010B68  EFAE  F085         	goto	u2165
  5736   010B6C  0EFF               	movlw	255
  5737   010B6E  1409               	andwf	(btemp+8)^0,w,c
  5738   010B70  6E05               	movwf	(btemp+4)^0,c
  5739   010B72  0EFF               	movlw	255
  5740   010B74  140A               	andwf	(btemp+9)^0,w,c
  5741   010B76  6E06               	movwf	(btemp+5)^0,c
  5742   010B78  0E03               	movlw	3
  5743   010B7A  140B               	andwf	(btemp+10)^0,w,c
  5744   010B7C  6E07               	movwf	(btemp+6)^0,c
  5745   010B7E  0E00               	movlw	0
  5746   010B80  140C               	andwf	(btemp+11)^0,w,c
  5747   010B82  6E08               	movwf	(btemp+7)^0,c
  5748                           
  5749                           ;stkvar	_temp32 @ sp[(-110)+0]
  5750   010B84  50E1               	movf	fsr1l,w,c
  5751   010B86  0F92               	addlw	-110
  5752   010B88  6ED9               	movwf	fsr2l,c
  5753   010B8A  50E2               	movf	fsr1h,w,c
  5754   010B8C  6EDA               	movwf	fsr2h,c
  5755   010B8E  0EFF               	movlw	255
  5756   010B90  22DA               	addwfc	fsr2h,f,c
  5757   010B92  0EFF               	movlw	255
  5758   010B94  14DE               	andwf	postinc2,w,c
  5759   010B96  6E09               	movwf	(btemp+8)^0,c
  5760   010B98  0E07               	movlw	7
  5761   010B9A  14DE               	andwf	postinc2,w,c
  5762   010B9C  6E0A               	movwf	(btemp+9)^0,c
  5763   010B9E  0E00               	movlw	0
  5764   010BA0  14DE               	andwf	postinc2,w,c
  5765   010BA2  6E0B               	movwf	(btemp+10)^0,c
  5766   010BA4  0E00               	movlw	0
  5767   010BA6  14DE               	andwf	postinc2,w,c
  5768   010BA8  6E0C               	movwf	(btemp+11)^0,c
  5769   010BAA  0E12               	movlw	18
  5770   010BAC                     u2175:
  5771   010BAC  90D8               	bcf	status,0,c
  5772   010BAE  3609               	rlcf	(btemp+8)^0,f,c
  5773   010BB0  360A               	rlcf	(btemp+9)^0,f,c
  5774   010BB2  360B               	rlcf	(btemp+10)^0,f,c
  5775   010BB4  360C               	rlcf	(btemp+11)^0,f,c
  5776   010BB6  2EE8               	decfsz	wreg,f,c
  5777   010BB8  EFD6  F085         	goto	u2175
  5778   010BBC  5005               	movf	(btemp+4)^0,w,c
  5779   010BBE  1009               	iorwf	(btemp+8)^0,w,c
  5780   010BC0  6E01               	movwf	btemp^0,c
  5781   010BC2  5006               	movf	(btemp+5)^0,w,c
  5782   010BC4  100A               	iorwf	(btemp+9)^0,w,c
  5783   010BC6  6E02               	movwf	(btemp+1)^0,c
  5784   010BC8  5007               	movf	(btemp+6)^0,w,c
  5785   010BCA  100B               	iorwf	(btemp+10)^0,w,c
  5786   010BCC  6E03               	movwf	(btemp+2)^0,c
  5787   010BCE  5008               	movf	(btemp+7)^0,w,c
  5788   010BD0  100C               	iorwf	(btemp+11)^0,w,c
  5789   010BD2  6E04               	movwf	(btemp+3)^0,c
  5790                           
  5791                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5792   010BD4  0E8F               	movlw	-113
  5793   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5794   010BDA  0E90               	movlw	-112
  5795   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5796   010BE0  C001  FFDE         	movff	btemp,postinc2
  5797   010BE4  C002  FFDE         	movff	btemp+1,postinc2
  5798   010BE8  C003  FFDE         	movff	btemp+2,postinc2
  5799   010BEC  C004  FFDE         	movff	btemp+3,postinc2
  5800   010BF0                     l4505:
  5801                           
  5802                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5803                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5804   010BF0  0E8F               	movlw	-113
  5805   010BF2  CFE3 F00B          	movff	plusw1,btemp+10
  5806   010BF6  0E90               	movlw	-112
  5807   010BF8  CFE3 F00C          	movff	plusw1,btemp+11
  5808   010BFC  0E07               	movlw	7
  5809   010BFE  240B               	addwf	(btemp+10)^0,w,c
  5810   010C00  6ED9               	movwf	fsr2l,c
  5811   010C02  0E00               	movlw	0
  5812   010C04  200C               	addwfc	(btemp+11)^0,w,c
  5813   010C06  6EDA               	movwf	fsr2h,c
  5814                           
  5815                           ;stkvar	_ba @ sp[(-110)+4]
  5816   010C08  0E9B               	movlw	155
  5817   010C0A  24E1               	addwf	fsr1l,w,c
  5818   010C0C  6EE9               	movwf	fsr0l,c
  5819   010C0E  0EFF               	movlw	255
  5820   010C10  20E2               	addwfc	fsr1h,w,c
  5821   010C12  6EEA               	movwf	fsr0h,c
  5822   010C14  50EF               	movf	indf0,w,c
  5823   010C16  0B01               	andlw	1
  5824   010C18  6EDF               	movwf	indf2,c
  5825   010C1A                     
  5826                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5827                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5828   010C1A  0E8F               	movlw	-113
  5829   010C1C  CFE3 F00B          	movff	plusw1,btemp+10
  5830   010C20  0E90               	movlw	-112
  5831   010C22  CFE3 F00C          	movff	plusw1,btemp+11
  5832   010C26  0E08               	movlw	8
  5833   010C28  240B               	addwf	(btemp+10)^0,w,c
  5834   010C2A  6ED9               	movwf	fsr2l,c
  5835   010C2C  0E00               	movlw	0
  5836   010C2E  200C               	addwfc	(btemp+11)^0,w,c
  5837   010C30  6EDA               	movwf	fsr2h,c
  5838                           
  5839                           ;stkvar	_ba @ sp[(-110)+4]
  5840   010C32  0E9B               	movlw	155
  5841   010C34  24E1               	addwf	fsr1l,w,c
  5842   010C36  6EE9               	movwf	fsr0l,c
  5843   010C38  0EFF               	movlw	255
  5844   010C3A  20E2               	addwfc	fsr1h,w,c
  5845   010C3C  6EEA               	movwf	fsr0h,c
  5846   010C3E  50EF               	movf	indf0,w,c
  5847   010C40  6E0C               	movwf	(btemp+11)^0,c
  5848   010C42  90D8               	bcf	status,0,c
  5849   010C44  320C               	rrcf	(btemp+11)^0,f,c
  5850   010C46  90D8               	bcf	status,0,c
  5851   010C48  320C               	rrcf	(btemp+11)^0,f,c
  5852   010C4A  90D8               	bcf	status,0,c
  5853   010C4C  300C               	rrcf	(btemp+11)^0,w,c
  5854   010C4E  6EDF               	movwf	indf2,c
  5855   010C50                     
  5856                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5857                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5858   010C50  50E1               	movf	fsr1l,w,c
  5859   010C52  0FEE               	addlw	-18
  5860   010C54  6ED9               	movwf	fsr2l,c
  5861   010C56  50E2               	movf	fsr1h,w,c
  5862   010C58  6EDA               	movwf	fsr2h,c
  5863   010C5A  0EFF               	movlw	255
  5864   010C5C  22DA               	addwfc	fsr2h,f,c
  5865   010C5E  AADF               	btfss	indf2,5,c
  5866   010C60  EF34  F086         	goto	u2181
  5867   010C64  EF36  F086         	goto	u2180
  5868   010C68                     u2181:
  5869   010C68  EFC4  F086         	goto	l4529
  5870   010C6C                     u2180:
  5871   010C6C                     
  5872                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  5873                           ;stkvar	_ba @ sp[(-110)+4]
  5874   010C6C  0E9E               	movlw	158
  5875   010C6E  24E1               	addwf	fsr1l,w,c
  5876   010C70  6ED9               	movwf	fsr2l,c
  5877   010C72  0EFF               	movlw	255
  5878   010C74  20E2               	addwfc	fsr1h,w,c
  5879   010C76  6EDA               	movwf	fsr2h,c
  5880   010C78  50DF               	movf	indf2,w,c
  5881   010C7A  6E0C               	movwf	(btemp+11)^0,c
  5882                           
  5883                           ;stkvar	_myReg @ sp[(-110)+97]
  5884   010C7C  0EF3               	movlw	-13
  5885   010C7E  C00C  FFE3         	movff	btemp+11,plusw1
  5886   010C82                     
  5887                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  5888                           ;stkvar	_ba @ sp[(-110)+4]
  5889   010C82  0E9F               	movlw	159
  5890   010C84  24E1               	addwf	fsr1l,w,c
  5891   010C86  6ED9               	movwf	fsr2l,c
  5892   010C88  0EFF               	movlw	255
  5893   010C8A  20E2               	addwfc	fsr1h,w,c
  5894   010C8C  6EDA               	movwf	fsr2h,c
  5895                           
  5896                           ;stkvar	_myReg @ sp[(-110)+97]
  5897   010C8E  0EF4               	movlw	244
  5898   010C90  24E1               	addwf	fsr1l,w,c
  5899   010C92  6EE9               	movwf	fsr0l,c
  5900   010C94  0EFF               	movlw	255
  5901   010C96  20E2               	addwfc	fsr1h,w,c
  5902   010C98  6EEA               	movwf	fsr0h,c
  5903   010C9A  CFDF FFEF          	movff	indf2,indf0
  5904   010C9E                     
  5905                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  5906                           ;stkvar	_ba @ sp[(-110)+4]
  5907   010C9E  0EA0               	movlw	160
  5908   010CA0  24E1               	addwf	fsr1l,w,c
  5909   010CA2  6ED9               	movwf	fsr2l,c
  5910   010CA4  0EFF               	movlw	255
  5911   010CA6  20E2               	addwfc	fsr1h,w,c
  5912   010CA8  6EDA               	movwf	fsr2h,c
  5913                           
  5914                           ;stkvar	_myReg @ sp[(-110)+97]
  5915   010CAA  0EF5               	movlw	245
  5916   010CAC  24E1               	addwf	fsr1l,w,c
  5917   010CAE  6EE9               	movwf	fsr0l,c
  5918   010CB0  0EFF               	movlw	255
  5919   010CB2  20E2               	addwfc	fsr1h,w,c
  5920   010CB4  6EEA               	movwf	fsr0h,c
  5921   010CB6  CFDF FFEF          	movff	indf2,indf0
  5922   010CBA                     
  5923                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  5924                           ;stkvar	_ba @ sp[(-110)+4]
  5925   010CBA  0EA1               	movlw	161
  5926   010CBC  24E1               	addwf	fsr1l,w,c
  5927   010CBE  6ED9               	movwf	fsr2l,c
  5928   010CC0  0EFF               	movlw	255
  5929   010CC2  20E2               	addwfc	fsr1h,w,c
  5930   010CC4  6EDA               	movwf	fsr2h,c
  5931                           
  5932                           ;stkvar	_myReg @ sp[(-110)+97]
  5933   010CC6  0EF6               	movlw	246
  5934   010CC8  24E1               	addwf	fsr1l,w,c
  5935   010CCA  6EE9               	movwf	fsr0l,c
  5936   010CCC  0EFF               	movlw	255
  5937   010CCE  20E2               	addwfc	fsr1h,w,c
  5938   010CD0  6EEA               	movwf	fsr0h,c
  5939   010CD2  CFDF FFEF          	movff	indf2,indf0
  5940   010CD6                     
  5941                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  5942                           ;stkvar	_myReg @ sp[(-110)+97]
  5943   010CD6  50E1               	movf	fsr1l,w,c
  5944   010CD8  0FF3               	addlw	-13
  5945   010CDA  6ED9               	movwf	fsr2l,c
  5946   010CDC  50E2               	movf	fsr1h,w,c
  5947   010CDE  6EDA               	movwf	fsr2h,c
  5948   010CE0  0EFF               	movlw	255
  5949   010CE2  22DA               	addwfc	fsr2h,f,c
  5950                           
  5951                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5952   010CE4  0E8F               	movlw	-113
  5953   010CE6  CFE3 F00B          	movff	plusw1,btemp+10
  5954   010CEA  0E90               	movlw	-112
  5955   010CEC  CFE3 F00C          	movff	plusw1,btemp+11
  5956   010CF0  0E09               	movlw	9
  5957   010CF2  240B               	addwf	(btemp+10)^0,w,c
  5958   010CF4  6EE9               	movwf	fsr0l,c
  5959   010CF6  0E00               	movlw	0
  5960   010CF8  200C               	addwfc	(btemp+11)^0,w,c
  5961   010CFA  6EEA               	movwf	fsr0h,c
  5962   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  5963   010D00  CFDE FFEE          	movff	postinc2,postinc0
  5964   010D04  CFDE FFEE          	movff	postinc2,postinc0
  5965   010D08  CFDE FFEE          	movff	postinc2,postinc0
  5966   010D0C                     
  5967                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  5968                           ;stkvar	_i @ sp[(-110)+107]
  5969   010D0C  0EFD               	movlw	-3
  5970   010D0E  6AE3               	clrf	plusw1,c
  5971   010D10  EFB1  F086         	goto	l4527
  5972   010D14                     l4523:
  5973                           
  5974                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  5975                           ;stkvar	_i @ sp[(-110)+107]
  5976   010D14  0EFD               	movlw	-3
  5977   010D16  50E3               	movf	plusw1,w,c
  5978   010D18  6E0B               	movwf	(btemp+10)^0,c
  5979   010D1A  6A0C               	clrf	(btemp+11)^0,c
  5980   010D1C  0E0C               	movlw	12
  5981   010D1E  260B               	addwf	(btemp+10)^0,f,c
  5982   010D20  0E00               	movlw	0
  5983   010D22  220C               	addwfc	(btemp+11)^0,f,c
  5984                           
  5985                           ;stkvar	_ba @ sp[(-110)+4]
  5986   010D24  0E96               	movlw	150
  5987   010D26  24E1               	addwf	fsr1l,w,c
  5988   010D28  6E09               	movwf	(btemp+8)^0,c
  5989   010D2A  0EFF               	movlw	255
  5990   010D2C  20E2               	addwfc	fsr1h,w,c
  5991   010D2E  6E0A               	movwf	(btemp+9)^0,c
  5992   010D30  500B               	movf	(btemp+10)^0,w,c
  5993   010D32  2409               	addwf	(btemp+8)^0,w,c
  5994   010D34  6ED9               	movwf	fsr2l,c
  5995   010D36  500C               	movf	(btemp+11)^0,w,c
  5996   010D38  200A               	addwfc	(btemp+9)^0,w,c
  5997   010D3A  6EDA               	movwf	fsr2h,c
  5998                           
  5999                           ;stkvar	_i @ sp[(-110)+107]
  6000   010D3C  0EFD               	movlw	-3
  6001   010D3E  CFE3 F00C          	movff	plusw1,btemp+11
  6002                           
  6003                           ;stkvar	_rxd @ sp[(-110)+-5]
  6004   010D42  0E8D               	movlw	-115
  6005   010D44  CFE3 F009          	movff	plusw1,btemp+8
  6006   010D48  0E8E               	movlw	-114
  6007   010D4A  CFE3 F00A          	movff	plusw1,btemp+9
  6008   010D4E  500C               	movf	(btemp+11)^0,w,c
  6009   010D50  2409               	addwf	(btemp+8)^0,w,c
  6010   010D52  6EE9               	movwf	fsr0l,c
  6011   010D54  0E00               	movlw	0
  6012   010D56  200A               	addwfc	(btemp+9)^0,w,c
  6013   010D58  6EEA               	movwf	fsr0h,c
  6014   010D5A  CFDF FFEF          	movff	indf2,indf0
  6015   010D5E                     
  6016                           ;can/can.c: 1342:         }
  6017                           ;stkvar	_i @ sp[(-110)+107]
  6018   010D5E  0EFD               	movlw	-3
  6019   010D60  2AE3               	incf	plusw1,f,c
  6020   010D62                     l4527:
  6021                           
  6022                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6023                           ;stkvar	_i @ sp[(-110)+107]
  6024   010D62  50E1               	movf	fsr1l,w,c
  6025   010D64  0FFD               	addlw	-3
  6026   010D66  6ED9               	movwf	fsr2l,c
  6027   010D68  50E2               	movf	fsr1h,w,c
  6028   010D6A  6EDA               	movwf	fsr2h,c
  6029   010D6C  0EFF               	movlw	255
  6030   010D6E  22DA               	addwfc	fsr2h,f,c
  6031   010D70  0E8C               	movlw	-116
  6032   010D72  50E3               	movf	plusw1,w,c
  6033   010D74  5CDE               	subwf	postinc2,w,c
  6034   010D76  A0D8               	btfss	status,0,c
  6035   010D78  EFC0  F086         	goto	u2191
  6036   010D7C  EFC2  F086         	goto	u2190
  6037   010D80                     u2191:
  6038   010D80  EF8A  F086         	goto	l4523
  6039   010D84                     u2190:
  6040   010D84  EF10  F087         	goto	l4539
  6041   010D88                     l4529:
  6042                           
  6043                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6044                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6045   010D88  0E8F               	movlw	-113
  6046   010D8A  CFE3 F00B          	movff	plusw1,btemp+10
  6047   010D8E  0E90               	movlw	-112
  6048   010D90  CFE3 F00C          	movff	plusw1,btemp+11
  6049   010D94  0E09               	movlw	9
  6050   010D96  240B               	addwf	(btemp+10)^0,w,c
  6051   010D98  6ED9               	movwf	fsr2l,c
  6052   010D9A  0E00               	movlw	0
  6053   010D9C  200C               	addwfc	(btemp+11)^0,w,c
  6054   010D9E  6EDA               	movwf	fsr2h,c
  6055   010DA0  6ADE               	clrf	postinc2,c
  6056   010DA2  6ADE               	clrf	postinc2,c
  6057   010DA4  6ADE               	clrf	postinc2,c
  6058   010DA6  6ADD               	clrf	postdec2,c
  6059   010DA8                     
  6060                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6061                           ;stkvar	_i @ sp[(-110)+107]
  6062   010DA8  0EFD               	movlw	-3
  6063   010DAA  6AE3               	clrf	plusw1,c
  6064   010DAC  EFFF  F086         	goto	l4537
  6065   010DB0                     l4533:
  6066                           
  6067                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6068                           ;stkvar	_i @ sp[(-110)+107]
  6069   010DB0  0EFD               	movlw	-3
  6070   010DB2  50E3               	movf	plusw1,w,c
  6071   010DB4  6E0B               	movwf	(btemp+10)^0,c
  6072   010DB6  6A0C               	clrf	(btemp+11)^0,c
  6073   010DB8  0E08               	movlw	8
  6074   010DBA  260B               	addwf	(btemp+10)^0,f,c
  6075   010DBC  0E00               	movlw	0
  6076   010DBE  220C               	addwfc	(btemp+11)^0,f,c
  6077                           
  6078                           ;stkvar	_ba @ sp[(-110)+4]
  6079   010DC0  0E96               	movlw	150
  6080   010DC2  24E1               	addwf	fsr1l,w,c
  6081   010DC4  6E09               	movwf	(btemp+8)^0,c
  6082   010DC6  0EFF               	movlw	255
  6083   010DC8  20E2               	addwfc	fsr1h,w,c
  6084   010DCA  6E0A               	movwf	(btemp+9)^0,c
  6085   010DCC  500B               	movf	(btemp+10)^0,w,c
  6086   010DCE  2409               	addwf	(btemp+8)^0,w,c
  6087   010DD0  6ED9               	movwf	fsr2l,c
  6088   010DD2  500C               	movf	(btemp+11)^0,w,c
  6089   010DD4  200A               	addwfc	(btemp+9)^0,w,c
  6090   010DD6  6EDA               	movwf	fsr2h,c
  6091                           
  6092                           ;stkvar	_i @ sp[(-110)+107]
  6093   010DD8  0EFD               	movlw	-3
  6094   010DDA  CFE3 F00C          	movff	plusw1,btemp+11
  6095                           
  6096                           ;stkvar	_rxd @ sp[(-110)+-5]
  6097   010DDE  0E8D               	movlw	-115
  6098   010DE0  CFE3 F009          	movff	plusw1,btemp+8
  6099   010DE4  0E8E               	movlw	-114
  6100   010DE6  CFE3 F00A          	movff	plusw1,btemp+9
  6101   010DEA  500C               	movf	(btemp+11)^0,w,c
  6102   010DEC  2409               	addwf	(btemp+8)^0,w,c
  6103   010DEE  6EE9               	movwf	fsr0l,c
  6104   010DF0  0E00               	movlw	0
  6105   010DF2  200A               	addwfc	(btemp+9)^0,w,c
  6106   010DF4  6EEA               	movwf	fsr0h,c
  6107   010DF6  CFDF FFEF          	movff	indf2,indf0
  6108   010DFA                     
  6109                           ;can/can.c: 1349:         }
  6110                           ;stkvar	_i @ sp[(-110)+107]
  6111   010DFA  0EFD               	movlw	-3
  6112   010DFC  2AE3               	incf	plusw1,f,c
  6113   010DFE                     l4537:
  6114                           
  6115                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6116                           ;stkvar	_i @ sp[(-110)+107]
  6117   010DFE  50E1               	movf	fsr1l,w,c
  6118   010E00  0FFD               	addlw	-3
  6119   010E02  6ED9               	movwf	fsr2l,c
  6120   010E04  50E2               	movf	fsr1h,w,c
  6121   010E06  6EDA               	movwf	fsr2h,c
  6122   010E08  0EFF               	movlw	255
  6123   010E0A  22DA               	addwfc	fsr2h,f,c
  6124   010E0C  0E8C               	movlw	-116
  6125   010E0E  50E3               	movf	plusw1,w,c
  6126   010E10  5CDE               	subwf	postinc2,w,c
  6127   010E12  A0D8               	btfss	status,0,c
  6128   010E14  EF0E  F087         	goto	u2201
  6129   010E18  EF10  F087         	goto	u2200
  6130   010E1C                     u2201:
  6131   010E1C  EFD8  F086         	goto	l4533
  6132   010E20                     u2200:
  6133   010E20                     l4539:
  6134                           
  6135                           ;stkvar	_channel @ sp[(-110)+-1]
  6136   010E20  0E91               	movlw	-111
  6137   010E22  50E3               	movf	plusw1,w,c
  6138   010E24  6EE6               	movwf	postinc1,c
  6139   010E26  ECA7  F0A1         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6140   010E2A                     l357:
  6141                           
  6142                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6143   010E2A  0E8C               	movlw	140
  6144   010E2C  26E1               	addwf	fsr1l,f,c
  6145   010E2E  0EFF               	movlw	255
  6146   010E30  22E2               	addwfc	fsr1h,f,c
  6147   010E32  0012               	return		;funcret
  6148   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6149                           	callstack 0
  6150                           
  6151 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6152 ;; Defined at:
  6153 ;;		line 1378 in file "can/can.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;  channel         1  [STACK] enum E5290
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6158 ;;  a               2  [STACK] unsigned short 
  6159 ;;  spiTransferE    1  [STACK] char 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1  [STACK] char 
  6162 ;; Registers used:
  6163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used: 1
  6175 ;; Hardware stack levels required when called: 9
  6176 ;; This function calls:
  6177 ;;		_DRV_CANFDSPI_WriteByte
  6178 ;; This function is called by:
  6179 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6180 ;; This function uses a reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text13
  6184   01434E                     __ptext13:
  6185                           	callstack 0
  6186   01434E                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6187                           	callstack 0
  6188                           
  6189                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6190   01434E  0E08               	movlw	8
  6191   014350  26E1               	addwf	fsr1l,f,c
  6192   014352  0E00               	movlw	0
  6193   014354  22E2               	addwfc	fsr1h,f,c
  6194   014356                     
  6195                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6196                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6197   014356  0EF8               	movlw	-8
  6198   014358  6AE3               	clrf	plusw1,c
  6199   01435A  0EF9               	movlw	-7
  6200   01435C  6AE3               	clrf	plusw1,c
  6201   01435E  0EFA               	movlw	-6
  6202   014360  6AE3               	clrf	plusw1,c
  6203   014362  0EFB               	movlw	-5
  6204   014364  6AE3               	clrf	plusw1,c
  6205   014366                     
  6206                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6207                           ;stkvar	_channel @ sp[(-8)+-1]
  6208   014366  0EF7               	movlw	-9
  6209   014368  50E3               	movf	plusw1,w,c
  6210   01436A  0D0C               	mullw	12
  6211   01436C  0E51               	movlw	81
  6212   01436E  26F3               	addwf	243,f,c
  6213   014370  0E00               	movlw	0
  6214   014372  22F4               	addwfc	244,f,c
  6215                           
  6216                           ;stkvar	_a @ sp[(-8)+5]
  6217   014374  0EFD               	movlw	-3
  6218   014376  CFF3 FFE3          	movff	prodl,plusw1
  6219   01437A  0EFE               	movlw	-2
  6220   01437C  CFF4 FFE3          	movff	prodh,plusw1
  6221   014380                     
  6222                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6223                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6224   014380  0EF9               	movlw	249
  6225   014382  24E1               	addwf	fsr1l,w,c
  6226   014384  6ED9               	movwf	fsr2l,c
  6227   014386  0EFF               	movlw	255
  6228   014388  20E2               	addwfc	fsr1h,w,c
  6229   01438A  6EDA               	movwf	fsr2h,c
  6230   01438C  80DF               	bsf	indf2,0,c
  6231   01438E                     
  6232                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6233                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6234   01438E  0EF9               	movlw	249
  6235   014390  24E1               	addwf	fsr1l,w,c
  6236   014392  6ED9               	movwf	fsr2l,c
  6237   014394  0EFF               	movlw	255
  6238   014396  20E2               	addwfc	fsr1h,w,c
  6239   014398  6EDA               	movwf	fsr2h,c
  6240   01439A  50DF               	movf	indf2,w,c
  6241   01439C  6EE6               	movwf	postinc1,c
  6242                           
  6243                           ;stkvar	_a @ sp[(-9)+5]
  6244   01439E  0EFC               	movlw	-4
  6245   0143A0  CFE3 FFE6          	movff	plusw1,postinc1
  6246   0143A4  CFE3 FFE6          	movff	plusw1,postinc1
  6247   0143A8  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6248                           
  6249                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6250   0143AC  0EFF               	movlw	-1
  6251   0143AE  C001  FFE3         	movff	btemp,plusw1
  6252   0143B2                     
  6253                           ;can/can.c: 1393:     return spiTransferError;
  6254                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6255   0143B2  0EFF               	movlw	-1
  6256   0143B4  CFE3 F001          	movff	plusw1,btemp
  6257   0143B8                     
  6258                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6259   0143B8  0EF7               	movlw	247
  6260   0143BA  26E1               	addwf	fsr1l,f,c
  6261   0143BC  0EFF               	movlw	255
  6262   0143BE  22E2               	addwfc	fsr1h,f,c
  6263   0143C0  0012               	return		;funcret
  6264   0143C2                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6265                           	callstack 0
  6266                           
  6267 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6268 ;; Defined at:
  6269 ;;		line 356 in file "can/can.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  address         2  [STACK] unsigned short 
  6272 ;;  rxd             2  [STACK] PTR unsigned char 
  6273 ;;		 -> ba(12), ba(76), 
  6274 ;;  nBytes          2  [STACK] unsigned short 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  i               2  [STACK] unsigned short 
  6277 ;;  spiTransferS    2  [STACK] unsigned short 
  6278 ;;  spiTransferE    1  [STACK] char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  1  [STACK] char 
  6281 ;; Registers used:
  6282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;Total ram usage:        0 bytes
  6293 ;; Hardware stack levels used: 1
  6294 ;; Hardware stack levels required when called: 8
  6295 ;; This function calls:
  6296 ;;		_SpiTransfer
  6297 ;; This function is called by:
  6298 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6299 ;; This function uses a reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text14
  6303   0125CC                     __ptext14:
  6304                           	callstack 0
  6305   0125CC                     _DRV_CANFDSPI_ReadByteArray:
  6306                           	callstack 0
  6307                           
  6308                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6309   0125CC  0E05               	movlw	5
  6310   0125CE  26E1               	addwf	fsr1l,f,c
  6311   0125D0  0E00               	movlw	0
  6312   0125D2  22E2               	addwfc	fsr1h,f,c
  6313   0125D4                     
  6314                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6315                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6316   0125D4  0EF5               	movlw	-11
  6317   0125D6  50E3               	movf	plusw1,w,c
  6318   0125D8  0F02               	addlw	2
  6319   0125DA  6E0B               	movwf	(btemp+10)^0,c
  6320   0125DC  0EF6               	movlw	-10
  6321   0125DE  CFE3 F00C          	movff	plusw1,btemp+11
  6322   0125E2  0E00               	movlw	0
  6323   0125E4  220C               	addwfc	(btemp+11)^0,f,c
  6324                           
  6325                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6326   0125E6  0EFD               	movlw	-3
  6327   0125E8  C00B  FFE3         	movff	btemp+10,plusw1
  6328   0125EC  0EFE               	movlw	-2
  6329   0125EE  C00C  FFE3         	movff	btemp+11,plusw1
  6330   0125F2                     
  6331                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6332                           ;stkvar	_address @ sp[(-5)+-2]
  6333   0125F2  0EFA               	movlw	250
  6334   0125F4  24E1               	addwf	fsr1l,w,c
  6335   0125F6  6ED9               	movwf	fsr2l,c
  6336   0125F8  0EFF               	movlw	255
  6337   0125FA  20E2               	addwfc	fsr1h,w,c
  6338   0125FC  6EDA               	movwf	fsr2h,c
  6339   0125FE  50DF               	movf	indf2,w,c
  6340   012600  0B0F               	andlw	15
  6341   012602  0F30               	addlw	48
  6342   012604  0101               	movlb	1	; () banked
  6343   012606  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6344   012608                     
  6345                           ; BSR set to: 1
  6346                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6347                           ;stkvar	_address @ sp[(-5)+-2]
  6348   012608  0EF9               	movlw	-7
  6349   01260A  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6350   01260E                     
  6351                           ; BSR set to: 1
  6352                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6353   01260E  0E02               	movlw	2
  6354   012610  6E0B               	movwf	(btemp+10)^0,c
  6355   012612  0E00               	movlw	0
  6356   012614  6E0C               	movwf	(btemp+11)^0,c
  6357                           
  6358                           ;stkvar	_i @ sp[(-5)+0]
  6359   012616  0EFB               	movlw	-5
  6360   012618  C00B  FFE3         	movff	btemp+10,plusw1
  6361   01261C  0EFC               	movlw	-4
  6362   01261E  C00C  FFE3         	movff	btemp+11,plusw1
  6363   012622  EF2F  F093         	goto	l4359
  6364   012626                     l4355:
  6365                           
  6366                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6367                           ;stkvar	_i @ sp[(-5)+0]
  6368   012626  0EFB               	movlw	-5
  6369   012628  CFE3 F00B          	movff	plusw1,btemp+10
  6370   01262C  0EFC               	movlw	-4
  6371   01262E  CFE3 F00C          	movff	plusw1,btemp+11
  6372   012632  0E00               	movlw	low _spiTransmitBuffer
  6373   012634  240B               	addwf	(btemp+10)^0,w,c
  6374   012636  6ED9               	movwf	fsr2l,c
  6375   012638  0E01               	movlw	high _spiTransmitBuffer
  6376   01263A  200C               	addwfc	(btemp+11)^0,w,c
  6377   01263C  6EDA               	movwf	fsr2h,c
  6378   01263E  6ADF               	clrf	indf2,c
  6379   012640                     
  6380                           ;can/can.c: 370:     }
  6381                           ;stkvar	_i @ sp[(-5)+0]
  6382   012640  0EFB               	movlw	-5
  6383   012642  50E3               	movf	plusw1,w,c
  6384   012644  0F01               	addlw	1
  6385   012646  6E01               	movwf	btemp^0,c
  6386   012648  0EFB               	movlw	-5
  6387   01264A  C001  FFE3         	movff	btemp,plusw1
  6388   01264E  6A01               	clrf	btemp^0,c
  6389   012650  0EFC               	movlw	-4
  6390   012652  50E3               	movf	plusw1,w,c
  6391   012654  2001               	addwfc	btemp^0,w,c
  6392   012656  6E01               	movwf	btemp^0,c
  6393   012658  0EFC               	movlw	-4
  6394   01265A  C001  FFE3         	movff	btemp,plusw1
  6395   01265E                     l4359:
  6396                           
  6397                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6398   01265E  0EFD               	movlw	-3
  6399   012660  CFE3 F00B          	movff	plusw1,btemp+10
  6400   012664  0EFE               	movlw	-2
  6401   012666  CFE3 F00C          	movff	plusw1,btemp+11
  6402                           
  6403                           ;stkvar	_i @ sp[(-5)+0]
  6404   01266A  0EFB               	movlw	-5
  6405   01266C  CFE3 F009          	movff	plusw1,btemp+8
  6406   012670  0EFC               	movlw	-4
  6407   012672  CFE3 F00A          	movff	plusw1,btemp+9
  6408   012676  500B               	movf	(btemp+10)^0,w,c
  6409   012678  5C09               	subwf	(btemp+8)^0,w,c
  6410   01267A  500C               	movf	(btemp+11)^0,w,c
  6411   01267C  580A               	subwfb	(btemp+9)^0,w,c
  6412   01267E  A0D8               	btfss	status,0,c
  6413   012680  EF44  F093         	goto	u2001
  6414   012684  EF46  F093         	goto	u2000
  6415   012688                     u2001:
  6416   012688  EF13  F093         	goto	l4355
  6417   01268C                     u2000:
  6418   01268C                     
  6419                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6420                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6421   01268C  0EFD               	movlw	-3
  6422   01268E  CFE3 FFE6          	movff	plusw1,postinc1
  6423   012692  CFE3 FFE6          	movff	plusw1,postinc1
  6424   012696  0E00               	movlw	low _spiReceiveBuffer
  6425   012698  6EE6               	movwf	postinc1,c
  6426   01269A  0E02               	movlw	high _spiReceiveBuffer
  6427   01269C  6EE6               	movwf	postinc1,c
  6428   01269E  0E00               	movlw	low _spiTransmitBuffer
  6429   0126A0  6EE6               	movwf	postinc1,c
  6430   0126A2  0E01               	movlw	high _spiTransmitBuffer
  6431   0126A4  6EE6               	movwf	postinc1,c
  6432   0126A6  EC1A  F09D         	call	_SpiTransfer	;wreg free
  6433                           
  6434                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6435   0126AA  0EFF               	movlw	-1
  6436   0126AC  C001  FFE3         	movff	btemp,plusw1
  6437   0126B0                     
  6438                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6439                           ;stkvar	_i @ sp[(-5)+0]
  6440   0126B0  0EFB               	movlw	-5
  6441   0126B2  6AE3               	clrf	plusw1,c
  6442   0126B4  0EFC               	movlw	-4
  6443   0126B6  6AE3               	clrf	plusw1,c
  6444   0126B8  EF8D  F093         	goto	l4369
  6445   0126BC                     l4365:
  6446                           
  6447                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6448                           ;stkvar	_i @ sp[(-5)+0]
  6449   0126BC  0EFB               	movlw	-5
  6450   0126BE  CFE3 F00B          	movff	plusw1,btemp+10
  6451   0126C2  0EFC               	movlw	-4
  6452   0126C4  CFE3 F00C          	movff	plusw1,btemp+11
  6453   0126C8  0E02               	movlw	low (_spiReceiveBuffer+2)
  6454   0126CA  240B               	addwf	(btemp+10)^0,w,c
  6455   0126CC  6ED9               	movwf	fsr2l,c
  6456   0126CE  0E02               	movlw	high (_spiReceiveBuffer+2)
  6457   0126D0  200C               	addwfc	(btemp+11)^0,w,c
  6458   0126D2  6EDA               	movwf	fsr2h,c
  6459                           
  6460                           ;stkvar	_i @ sp[(-5)+0]
  6461   0126D4  0EFB               	movlw	-5
  6462   0126D6  CFE3 F00B          	movff	plusw1,btemp+10
  6463   0126DA  0EFC               	movlw	-4
  6464   0126DC  CFE3 F00C          	movff	plusw1,btemp+11
  6465                           
  6466                           ;stkvar	_rxd @ sp[(-5)+-4]
  6467   0126E0  0EF7               	movlw	-9
  6468   0126E2  CFE3 F009          	movff	plusw1,btemp+8
  6469   0126E6  0EF8               	movlw	-8
  6470   0126E8  CFE3 F00A          	movff	plusw1,btemp+9
  6471   0126EC  500B               	movf	(btemp+10)^0,w,c
  6472   0126EE  2409               	addwf	(btemp+8)^0,w,c
  6473   0126F0  6EE9               	movwf	fsr0l,c
  6474   0126F2  500C               	movf	(btemp+11)^0,w,c
  6475   0126F4  200A               	addwfc	(btemp+9)^0,w,c
  6476   0126F6  6EEA               	movwf	fsr0h,c
  6477   0126F8  CFDF FFEF          	movff	indf2,indf0
  6478   0126FC                     
  6479                           ;can/can.c: 377:     }
  6480                           ;stkvar	_i @ sp[(-5)+0]
  6481   0126FC  0EFB               	movlw	-5
  6482   0126FE  50E3               	movf	plusw1,w,c
  6483   012700  0F01               	addlw	1
  6484   012702  6E01               	movwf	btemp^0,c
  6485   012704  0EFB               	movlw	-5
  6486   012706  C001  FFE3         	movff	btemp,plusw1
  6487   01270A  6A01               	clrf	btemp^0,c
  6488   01270C  0EFC               	movlw	-4
  6489   01270E  50E3               	movf	plusw1,w,c
  6490   012710  2001               	addwfc	btemp^0,w,c
  6491   012712  6E01               	movwf	btemp^0,c
  6492   012714  0EFC               	movlw	-4
  6493   012716  C001  FFE3         	movff	btemp,plusw1
  6494   01271A                     l4369:
  6495                           
  6496                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6497   01271A  0EF5               	movlw	-11
  6498   01271C  CFE3 F00B          	movff	plusw1,btemp+10
  6499   012720  0EF6               	movlw	-10
  6500   012722  CFE3 F00C          	movff	plusw1,btemp+11
  6501                           
  6502                           ;stkvar	_i @ sp[(-5)+0]
  6503   012726  0EFB               	movlw	-5
  6504   012728  CFE3 F009          	movff	plusw1,btemp+8
  6505   01272C  0EFC               	movlw	-4
  6506   01272E  CFE3 F00A          	movff	plusw1,btemp+9
  6507   012732  500B               	movf	(btemp+10)^0,w,c
  6508   012734  5C09               	subwf	(btemp+8)^0,w,c
  6509   012736  500C               	movf	(btemp+11)^0,w,c
  6510   012738  580A               	subwfb	(btemp+9)^0,w,c
  6511   01273A  A0D8               	btfss	status,0,c
  6512   01273C  EFA2  F093         	goto	u2011
  6513   012740  EFA4  F093         	goto	u2010
  6514   012744                     u2011:
  6515   012744  EF5E  F093         	goto	l4365
  6516   012748                     u2010:
  6517   012748                     
  6518                           ;can/can.c: 379:     return spiTransferError;
  6519                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6520   012748  0EFF               	movlw	-1
  6521   01274A  CFE3 F001          	movff	plusw1,btemp
  6522   01274E                     
  6523                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6524   01274E  0EF5               	movlw	245
  6525   012750  26E1               	addwf	fsr1l,f,c
  6526   012752  0EFF               	movlw	255
  6527   012754  22E2               	addwfc	fsr1h,f,c
  6528   012756  0012               	return		;funcret
  6529   012758                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6530                           	callstack 0
  6531                           
  6532 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6533 ;; Defined at:
  6534 ;;		line 1928 in file "can/can.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  channel         1  [STACK] enum E5290
  6537 ;;  flags           2  [STACK] PTR enum E5591
  6538 ;;		 -> rxFlags(1), 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6541 ;;  a               2  [STACK] unsigned short 
  6542 ;;  spiTransferE    1  [STACK] char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1  [STACK] char 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;Total ram usage:        0 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 9
  6559 ;; This function calls:
  6560 ;;		_DRV_CANFDSPI_ReadByte
  6561 ;; This function is called by:
  6562 ;;		_CanReceive
  6563 ;; This function uses a reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text15
  6567   013FD4                     __ptext15:
  6568                           	callstack 0
  6569   013FD4                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6570                           	callstack 0
  6571                           
  6572                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6573   013FD4  0E07               	movlw	7
  6574   013FD6  26E1               	addwf	fsr1l,f,c
  6575   013FD8  0E00               	movlw	0
  6576   013FDA  22E2               	addwfc	fsr1h,f,c
  6577   013FDC                     
  6578                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6579                           ;stkvar	_channel @ sp[(-7)+-1]
  6580   013FDC  0EF8               	movlw	-8
  6581   013FDE  50E3               	movf	plusw1,w,c
  6582   013FE0  A4D8               	btfss	status,2,c
  6583   013FE2  EFF5  F09F         	goto	u2071
  6584   013FE6  EFF7  F09F         	goto	u2070
  6585   013FEA                     u2071:
  6586   013FEA  EFF9  F09F         	goto	l4441
  6587   013FEE                     u2070:
  6588   013FEE  EF37  F0A0         	goto	l482
  6589   013FF2                     l4441:
  6590                           
  6591                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6592                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6593   013FF2  0EF9               	movlw	-7
  6594   013FF4  6AE3               	clrf	plusw1,c
  6595   013FF6  0EFA               	movlw	-6
  6596   013FF8  6AE3               	clrf	plusw1,c
  6597   013FFA  0EFB               	movlw	-5
  6598   013FFC  6AE3               	clrf	plusw1,c
  6599   013FFE  0EFC               	movlw	-4
  6600   014000  6AE3               	clrf	plusw1,c
  6601   014002                     
  6602                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6603                           ;stkvar	_channel @ sp[(-7)+-1]
  6604   014002  0EF8               	movlw	-8
  6605   014004  50E3               	movf	plusw1,w,c
  6606   014006  0D0C               	mullw	12
  6607   014008  0E54               	movlw	84
  6608   01400A  26F3               	addwf	243,f,c
  6609   01400C  0E00               	movlw	0
  6610   01400E  22F4               	addwfc	244,f,c
  6611                           
  6612                           ;stkvar	_a @ sp[(-7)+4]
  6613   014010  0EFD               	movlw	-3
  6614   014012  CFF3 FFE3          	movff	prodl,plusw1
  6615   014016  0EFE               	movlw	-2
  6616   014018  CFF4 FFE3          	movff	prodh,plusw1
  6617   01401C                     
  6618                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6619                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6620   01401C  0EF9               	movlw	249
  6621   01401E  24E1               	addwf	fsr1l,w,c
  6622   014020  6E01               	movwf	btemp^0,c
  6623   014022  0EFF               	movlw	255
  6624   014024  20E2               	addwfc	fsr1h,w,c
  6625   014026  6E02               	movwf	(btemp+1)^0,c
  6626   014028  C001  FFE6         	movff	btemp,postinc1
  6627   01402C  C002  FFE6         	movff	btemp+1,postinc1
  6628                           
  6629                           ;stkvar	_a @ sp[(-9)+4]
  6630   014030  0EFB               	movlw	-5
  6631   014032  CFE3 FFE6          	movff	plusw1,postinc1
  6632   014036  CFE3 FFE6          	movff	plusw1,postinc1
  6633   01403A  EC7A  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6634                           
  6635                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6636   01403E  0EFF               	movlw	-1
  6637   014040  C001  FFE3         	movff	btemp,plusw1
  6638   014044                     
  6639                           ;can/can.c: 1942:     if (spiTransferError) {
  6640                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6641   014044  0EFF               	movlw	-1
  6642   014046  50E3               	movf	plusw1,w,c
  6643   014048  B4D8               	btfsc	status,2,c
  6644   01404A  EF29  F0A0         	goto	u2081
  6645   01404E  EF2B  F0A0         	goto	u2080
  6646   014052                     u2081:
  6647   014052  EF2D  F0A0         	goto	l4451
  6648   014056                     u2080:
  6649   014056  EF37  F0A0         	goto	l482
  6650   01405A                     l4451:
  6651                           
  6652                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6653                           ;stkvar	_flags @ sp[(-7)+-3]
  6654   01405A  0EF6               	movlw	-10
  6655   01405C  CFE3 FFD9          	movff	plusw1,fsr2l
  6656   014060  0EF7               	movlw	-9
  6657   014062  CFE3 FFDA          	movff	plusw1,fsr2h
  6658                           
  6659                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6660   014066  0EF9               	movlw	-7
  6661   014068  50E3               	movf	plusw1,w,c
  6662   01406A  0B0F               	andlw	15
  6663   01406C  6EDF               	movwf	indf2,c
  6664   01406E                     l482:
  6665                           
  6666                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6667   01406E  0EF6               	movlw	246
  6668   014070  26E1               	addwf	fsr1l,f,c
  6669   014072  0EFF               	movlw	255
  6670   014074  22E2               	addwfc	fsr1h,f,c
  6671   014076  0012               	return		;funcret
  6672   014078                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6673                           	callstack 0
  6674                           
  6675 ;; *************** function _XF_init *****************
  6676 ;; Defined at:
  6677 ;;		line 80 in file "xf/xf.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  i               2  [STACK] int 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1  [STACK] void 
  6684 ;; Registers used:
  6685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:        0 bytes
  6696 ;; Hardware stack levels used: 1
  6697 ;; Hardware stack levels required when called: 8
  6698 ;; This function calls:
  6699 ;;		_Event_init
  6700 ;; This function is called by:
  6701 ;;		_main
  6702 ;; This function uses a reentrant model
  6703 ;;
  6704                           
  6705                           	psect	text16
  6706   012BE0                     __ptext16:
  6707                           	callstack 0
  6708   012BE0                     _XF_init:
  6709                           	callstack 0
  6710                           
  6711                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6712   012BE0  52E6               	movf	postinc1,f,c
  6713   012BE2  52E6               	movf	postinc1,f,c
  6714   012BE4                     
  6715                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6716                           ;stkvar	_i @ sp[(-2)+0]
  6717   012BE4  0EFE               	movlw	-2
  6718   012BE6  6AE3               	clrf	plusw1,c
  6719   012BE8  0EFF               	movlw	-1
  6720   012BEA  6AE3               	clrf	plusw1,c
  6721   012BEC                     l5267:
  6722                           
  6723                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6724                           ;stkvar	_i @ sp[(-2)+0]
  6725   012BEC  0EFE               	movlw	-2
  6726   012BEE  CFE3 F00B          	movff	plusw1,btemp+10
  6727   012BF2  0EFF               	movlw	-1
  6728   012BF4  CFE3 F00C          	movff	plusw1,btemp+11
  6729   012BF8  0E06               	movlw	6
  6730   012BFA  020B               	mulwf	(btemp+10)^0,c
  6731   012BFC  CFF3 F009          	movff	prodl,btemp+8
  6732   012C00  CFF4 F00A          	movff	prodh,btemp+9
  6733   012C04  020C               	mulwf	(btemp+11)^0,c
  6734   012C06  50F3               	movf	prodl,w,c
  6735   012C08  260A               	addwf	(btemp+9)^0,f,c
  6736   012C0A  0E28               	movlw	low (_theXF+96)
  6737   012C0C  2409               	addwf	(btemp+8)^0,w,c
  6738   012C0E  6E0B               	movwf	(btemp+10)^0,c
  6739   012C10  0E03               	movlw	high (_theXF+96)
  6740   012C12  200A               	addwfc	(btemp+9)^0,w,c
  6741   012C14  6E0C               	movwf	(btemp+11)^0,c
  6742   012C16  C00B  FFE6         	movff	btemp+10,postinc1
  6743   012C1A  C00C  FFE6         	movff	btemp+11,postinc1
  6744   012C1E  EC32  F0A3         	call	_Event_init	;wreg free
  6745   012C22                     
  6746                           ;xf/xf.c: 86:     }
  6747                           ;stkvar	_i @ sp[(-2)+0]
  6748   012C22  0EFE               	movlw	-2
  6749   012C24  50E3               	movf	plusw1,w,c
  6750   012C26  0F01               	addlw	1
  6751   012C28  6E01               	movwf	btemp^0,c
  6752   012C2A  0EFE               	movlw	-2
  6753   012C2C  C001  FFE3         	movff	btemp,plusw1
  6754   012C30  6A01               	clrf	btemp^0,c
  6755   012C32  0EFF               	movlw	-1
  6756   012C34  50E3               	movf	plusw1,w,c
  6757   012C36  2001               	addwfc	btemp^0,w,c
  6758   012C38  6E01               	movwf	btemp^0,c
  6759   012C3A  0EFF               	movlw	-1
  6760   012C3C  C001  FFE3         	movff	btemp,plusw1
  6761   012C40                     
  6762                           ;stkvar	_i @ sp[(-2)+0]
  6763   012C40  0EFF               	movlw	-1
  6764   012C42  BEE3               	btfsc	plusw1,7,c
  6765   012C44  EF31  F096         	goto	u2941
  6766   012C48  0EFF               	movlw	-1
  6767   012C4A  50E3               	movf	plusw1,w,c
  6768   012C4C  E10C               	bnz	u2940
  6769   012C4E  0EFE               	movlw	-2
  6770   012C50  CFE3 F001          	movff	plusw1,btemp
  6771   012C54  0E1E               	movlw	30
  6772   012C56  5E01               	subwf	btemp^0,f,c
  6773   012C58  A0D8               	btfss	status,0,c
  6774   012C5A  EF31  F096         	goto	u2941
  6775   012C5E  EF33  F096         	goto	u2940
  6776   012C62                     u2941:
  6777   012C62  EFF6  F095         	goto	l5267
  6778   012C66                     u2940:
  6779   012C66                     
  6780                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6781                           ;stkvar	_i @ sp[(-2)+0]
  6782   012C66  0EFE               	movlw	-2
  6783   012C68  6AE3               	clrf	plusw1,c
  6784   012C6A  0EFF               	movlw	-1
  6785   012C6C  6AE3               	clrf	plusw1,c
  6786   012C6E                     l5279:
  6787                           
  6788                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6789                           ;stkvar	_i @ sp[(-2)+0]
  6790   012C6E  0EFE               	movlw	-2
  6791   012C70  CFE3 F00B          	movff	plusw1,btemp+10
  6792   012C74  0EFF               	movlw	-1
  6793   012C76  CFE3 F00C          	movff	plusw1,btemp+11
  6794   012C7A  90D8               	bcf	status,0,c
  6795   012C7C  360B               	rlcf	(btemp+10)^0,f,c
  6796   012C7E  360C               	rlcf	(btemp+11)^0,f,c
  6797   012C80  90D8               	bcf	status,0,c
  6798   012C82  360B               	rlcf	(btemp+10)^0,f,c
  6799   012C84  360C               	rlcf	(btemp+11)^0,f,c
  6800   012C86  90D8               	bcf	status,0,c
  6801   012C88  360B               	rlcf	(btemp+10)^0,f,c
  6802   012C8A  360C               	rlcf	(btemp+11)^0,f,c
  6803   012C8C  0EC8               	movlw	low _theXF
  6804   012C8E  240B               	addwf	(btemp+10)^0,w,c
  6805   012C90  6ED9               	movwf	fsr2l,c
  6806   012C92  0E02               	movlw	high _theXF
  6807   012C94  200C               	addwfc	(btemp+11)^0,w,c
  6808   012C96  6EDA               	movwf	fsr2h,c
  6809   012C98  6ADE               	clrf	postinc2,c
  6810   012C9A  6ADD               	clrf	postdec2,c
  6811   012C9C                     
  6812                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6813                           ;stkvar	_i @ sp[(-2)+0]
  6814   012C9C  0EFE               	movlw	-2
  6815   012C9E  CFE3 F00B          	movff	plusw1,btemp+10
  6816   012CA2  0EFF               	movlw	-1
  6817   012CA4  CFE3 F00C          	movff	plusw1,btemp+11
  6818   012CA8  90D8               	bcf	status,0,c
  6819   012CAA  360B               	rlcf	(btemp+10)^0,f,c
  6820   012CAC  360C               	rlcf	(btemp+11)^0,f,c
  6821   012CAE  90D8               	bcf	status,0,c
  6822   012CB0  360B               	rlcf	(btemp+10)^0,f,c
  6823   012CB2  360C               	rlcf	(btemp+11)^0,f,c
  6824   012CB4  90D8               	bcf	status,0,c
  6825   012CB6  360B               	rlcf	(btemp+10)^0,f,c
  6826   012CB8  360C               	rlcf	(btemp+11)^0,f,c
  6827   012CBA  0ECA               	movlw	low (_theXF+2)
  6828   012CBC  240B               	addwf	(btemp+10)^0,w,c
  6829   012CBE  6E09               	movwf	(btemp+8)^0,c
  6830   012CC0  0E02               	movlw	high (_theXF+2)
  6831   012CC2  200C               	addwfc	(btemp+11)^0,w,c
  6832   012CC4  6E0A               	movwf	(btemp+9)^0,c
  6833   012CC6  C009  FFE6         	movff	btemp+8,postinc1
  6834   012CCA  C00A  FFE6         	movff	btemp+9,postinc1
  6835   012CCE  EC32  F0A3         	call	_Event_init	;wreg free
  6836   012CD2                     
  6837                           ;xf/xf.c: 92:     }
  6838                           ;stkvar	_i @ sp[(-2)+0]
  6839   012CD2  0EFE               	movlw	-2
  6840   012CD4  50E3               	movf	plusw1,w,c
  6841   012CD6  0F01               	addlw	1
  6842   012CD8  6E01               	movwf	btemp^0,c
  6843   012CDA  0EFE               	movlw	-2
  6844   012CDC  C001  FFE3         	movff	btemp,plusw1
  6845   012CE0  6A01               	clrf	btemp^0,c
  6846   012CE2  0EFF               	movlw	-1
  6847   012CE4  50E3               	movf	plusw1,w,c
  6848   012CE6  2001               	addwfc	btemp^0,w,c
  6849   012CE8  6E01               	movwf	btemp^0,c
  6850   012CEA  0EFF               	movlw	-1
  6851   012CEC  C001  FFE3         	movff	btemp,plusw1
  6852   012CF0                     
  6853                           ;stkvar	_i @ sp[(-2)+0]
  6854   012CF0  0EFF               	movlw	-1
  6855   012CF2  BEE3               	btfsc	plusw1,7,c
  6856   012CF4  EF89  F096         	goto	u2951
  6857   012CF8  0EFF               	movlw	-1
  6858   012CFA  50E3               	movf	plusw1,w,c
  6859   012CFC  E10C               	bnz	u2950
  6860   012CFE  0EFE               	movlw	-2
  6861   012D00  CFE3 F001          	movff	plusw1,btemp
  6862   012D04  0E0C               	movlw	12
  6863   012D06  5E01               	subwf	btemp^0,f,c
  6864   012D08  A0D8               	btfss	status,0,c
  6865   012D0A  EF89  F096         	goto	u2951
  6866   012D0E  EF8B  F096         	goto	u2950
  6867   012D12                     u2951:
  6868   012D12  EF37  F096         	goto	l5279
  6869   012D16                     u2950:
  6870   012D16                     
  6871                           ;xf/xf.c: 93:     theXF.in = 0;
  6872   012D16  0E00               	movlw	0
  6873   012D18  CFE8 F3DC          	movff	wreg,_theXF+276
  6874                           
  6875                           ;xf/xf.c: 94:     theXF.out = 0;
  6876   012D1C  0E00               	movlw	0
  6877   012D1E  CFE8 F3DD          	movff	wreg,_theXF+277
  6878                           
  6879                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  6880   012D22  0E00               	movlw	0
  6881   012D24  CFE8 F3DE          	movff	wreg,_theXF+278
  6882                           
  6883                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  6884   012D28  0E00               	movlw	0
  6885   012D2A  CFE8 F3DF          	movff	wreg,_theXF+279
  6886   012D2E                     
  6887                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  6888   012D2E  52E5               	movf	postdec1,f,c
  6889   012D30  52E5               	movf	postdec1,f,c
  6890   012D32  0012               	return		;funcret
  6891   012D34                     __end_of_XF_init:
  6892                           	callstack 0
  6893                           
  6894 ;; *************** function _Event_init *****************
  6895 ;; Defined at:
  6896 ;;		line 4 in file "xf/event.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  me              2  [STACK] PTR struct Event_
  6899 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;		None
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1  [STACK] void 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;Total ram usage:        0 bytes
  6916 ;; Hardware stack levels used: 1
  6917 ;; Hardware stack levels required when called: 7
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_XF_init
  6922 ;;		_XF_unscheduleTimer
  6923 ;;		_XF_post
  6924 ;; This function uses a reentrant model
  6925 ;;
  6926                           
  6927                           	psect	text17
  6928   014664                     __ptext17:
  6929                           	callstack 0
  6930   014664                     _Event_init:
  6931                           	callstack 10
  6932   014664                     
  6933                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  6934                           ;stkvar	_me @ sp[(0)+-2]
  6935   014664  0EFE               	movlw	-2
  6936   014666  CFE3 FFD9          	movff	plusw1,fsr2l
  6937   01466A  0EFF               	movlw	-1
  6938   01466C  CFE3 FFDA          	movff	plusw1,fsr2h
  6939   014670  6ADF               	clrf	indf2,c
  6940   014672                     
  6941                           ;xf/event.c: 7:     me->delay = 0;
  6942                           ;stkvar	_me @ sp[(0)+-2]
  6943   014672  0EFE               	movlw	-2
  6944   014674  CFE3 F00B          	movff	plusw1,btemp+10
  6945   014678  0EFF               	movlw	-1
  6946   01467A  CFE3 F00C          	movff	plusw1,btemp+11
  6947   01467E  0E04               	movlw	4
  6948   014680  240B               	addwf	(btemp+10)^0,w,c
  6949   014682  6ED9               	movwf	fsr2l,c
  6950   014684  0E00               	movlw	0
  6951   014686  200C               	addwfc	(btemp+11)^0,w,c
  6952   014688  6EDA               	movwf	fsr2h,c
  6953   01468A  6ADE               	clrf	postinc2,c
  6954   01468C  6ADD               	clrf	postdec2,c
  6955   01468E                     
  6956                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  6957                           ;stkvar	_me @ sp[(0)+-2]
  6958   01468E  0EFE               	movlw	-2
  6959   014690  CFE3 F00B          	movff	plusw1,btemp+10
  6960   014694  0EFF               	movlw	-1
  6961   014696  CFE3 F00C          	movff	plusw1,btemp+11
  6962   01469A  0E01               	movlw	1
  6963   01469C  240B               	addwf	(btemp+10)^0,w,c
  6964   01469E  6ED9               	movwf	fsr2l,c
  6965   0146A0  0E00               	movlw	0
  6966   0146A2  200C               	addwfc	(btemp+11)^0,w,c
  6967   0146A4  6EDA               	movwf	fsr2h,c
  6968   0146A6  6ADE               	clrf	postinc2,c
  6969   0146A8  6ADE               	clrf	postinc2,c
  6970   0146AA  6ADD               	clrf	postdec2,c
  6971   0146AC                     
  6972                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  6973   0146AC  52E5               	movf	postdec1,f,c
  6974   0146AE  52E5               	movf	postdec1,f,c
  6975   0146B0  0012               	return		;funcret
  6976   0146B2                     __end_of_Event_init:
  6977                           	callstack 0
  6978                           
  6979 ;; *************** function _XF_executeOnce *****************
  6980 ;; Defined at:
  6981 ;;		line 290 in file "xf/xf.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;		None
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;  ev              6  [STACK] struct Event_
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1  [STACK] void 
  6988 ;; Registers used:
  6989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        0 bytes
  7000 ;; Hardware stack levels used: 1
  7001 ;; Hardware stack levels required when called: 14
  7002 ;; This function calls:
  7003 ;;		_XF_popEvent
  7004 ;;		_lightControl_Process
  7005 ;;		_motorControl_Process
  7006 ;; This function is called by:
  7007 ;;		_main
  7008 ;; This function uses a reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text18
  7012   014238                     __ptext18:
  7013                           	callstack 0
  7014   014238                     _XF_executeOnce:
  7015                           	callstack 0
  7016                           
  7017                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7018   014238  0E06               	movlw	6
  7019   01423A  26E1               	addwf	fsr1l,f,c
  7020   01423C  0E00               	movlw	0
  7021   01423E  22E2               	addwfc	fsr1h,f,c
  7022   014240                     
  7023                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7024   014240  0E00               	movlw	0
  7025   014242  6EE6               	movwf	postinc1,c
  7026   014244  EC4F  F09C         	call	_XF_popEvent	;wreg free
  7027                           
  7028                           ;stkvar	_ev @ sp[(-12)+0]
  7029   014248  0EFA               	movlw	250
  7030   01424A  24E1               	addwf	fsr1l,w,c
  7031   01424C  6ED9               	movwf	fsr2l,c
  7032   01424E  0EFF               	movlw	255
  7033   014250  20E2               	addwfc	fsr1h,w,c
  7034   014252  6EDA               	movwf	fsr2h,c
  7035   014254  0E06               	movlw	6
  7036   014256  6E01               	movwf	btemp^0,c
  7037   014258                     uf296999:
  7038   014258  50DD               	movf	postdec2,w,c
  7039   01425A  52E5               	movf	postdec1,f,c
  7040   01425C  50E7               	movf	indf1,w,c
  7041   01425E  6EDF               	movwf	indf2,c
  7042   014260  2E01               	decfsz	btemp^0,f,c
  7043   014262  D7FA               	bra	uf296999
  7044   014264                     
  7045                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7046                           ;stkvar	_ev @ sp[(-6)+0]
  7047   014264  0EFB               	movlw	251
  7048   014266  24E1               	addwf	fsr1l,w,c
  7049   014268  6ED9               	movwf	fsr2l,c
  7050   01426A  0EFF               	movlw	255
  7051   01426C  20E2               	addwfc	fsr1h,w,c
  7052   01426E  6EDA               	movwf	fsr2h,c
  7053   014270  50DE               	movf	postinc2,w,c
  7054   014272  10DE               	iorwf	postinc2,w,c
  7055   014274  10DE               	iorwf	postinc2,w,c
  7056   014276  B4D8               	btfsc	status,2,c
  7057   014278  EF40  F0A1         	goto	u2971
  7058   01427C  EF42  F0A1         	goto	u2970
  7059   014280                     u2971:
  7060   014280  EF5F  F0A1         	goto	l1261
  7061   014284                     u2970:
  7062   014284                     
  7063                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7064                           ;stkvar	_ev @ sp[(-6)+0]
  7065   014284  0EFA               	movlw	250
  7066   014286  24E1               	addwf	fsr1l,w,c
  7067   014288  6E01               	movwf	btemp^0,c
  7068   01428A  0EFF               	movlw	255
  7069   01428C  20E2               	addwfc	fsr1h,w,c
  7070   01428E  6E02               	movwf	(btemp+1)^0,c
  7071   014290  C001  FFE6         	movff	btemp,postinc1
  7072   014294  C002  FFE6         	movff	btemp+1,postinc1
  7073                           
  7074                           ;stkvar	_ev @ sp[(-8)+0]
  7075   014298  0EF9               	movlw	249
  7076   01429A  24E1               	addwf	fsr1l,w,c
  7077   01429C  6ED9               	movwf	fsr2l,c
  7078   01429E  0EFF               	movlw	255
  7079   0142A0  20E2               	addwfc	fsr1h,w,c
  7080   0142A2  6EDA               	movwf	fsr2h,c
  7081   0142A4  D802               	call	u2988
  7082   0142A6  EF5F  F0A1         	goto	u2989
  7083   0142AA                     u2988:
  7084   0142AA  0005               	push	
  7085   0142AC  6EFA               	movwf	pclath,c
  7086   0142AE  50DE               	movf	postinc2,w,c
  7087   0142B0  6EFD               	movwf	tosl,c
  7088   0142B2  50DE               	movf	postinc2,w,c
  7089   0142B4  6EFE               	movwf	tosh,c
  7090   0142B6  50DE               	movf	postinc2,w,c
  7091   0142B8  6EFF               	movwf	tosu,c
  7092   0142BA  50FA               	movf	pclath,w,c
  7093   0142BC  0012               	return		;indir
  7094   0142BE                     u2989:
  7095   0142BE                     l1261:
  7096                           
  7097                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7098   0142BE  0EFA               	movlw	250
  7099   0142C0  26E1               	addwf	fsr1l,f,c
  7100   0142C2  0EFF               	movlw	255
  7101   0142C4  22E2               	addwfc	fsr1h,f,c
  7102   0142C6  0012               	return		;funcret
  7103   0142C8                     __end_of_XF_executeOnce:
  7104                           	callstack 0
  7105                           
  7106 ;; *************** function _lightControl_Process *****************
  7107 ;; Defined at:
  7108 ;;		line 145 in file "carFunctions.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  ev              2  [STACK] PTR struct Event_
  7111 ;;		 -> ev(6), 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1  [STACK] _Bool 
  7116 ;; Registers used:
  7117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;Total ram usage:        0 bytes
  7128 ;; Hardware stack levels used: 1
  7129 ;; Hardware stack levels required when called: 13
  7130 ;; This function calls:
  7131 ;;		_lightContol_BackLight
  7132 ;;		_lightContol_FrontLight
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;;		_updateCarState
  7136 ;;		_XF_executeOnce
  7137 ;; This function uses a reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text19
  7141   012758                     __ptext19:
  7142                           	callstack 0
  7143   012758                     _lightControl_Process:
  7144                           	callstack 16
  7145   012758                     
  7146                           ;carFunctions.c: 145: _Bool lightControl_Process(Event* ev);carFunctions.c: 146: {;carFu
      +                          nctions.c: 154:     static LightState state = INIT;;carFunctions.c: 155:     static Ligh
      +                          tState oldState = INIT;;carFunctions.c: 156:     switch(state)
  7147   012758  EF09  F094         	goto	l5149
  7148   01275C                     l5127:
  7149                           
  7150                           ;carFunctions.c: 159:             if(ev->id == E_INIT){
  7151                           ;stkvar	_ev @ sp[(0)+-2]
  7152   01275C  0EFE               	movlw	-2
  7153   01275E  CFE3 FFD9          	movff	plusw1,fsr2l
  7154   012762  0EFF               	movlw	-1
  7155   012764  CFE3 FFDA          	movff	plusw1,fsr2h
  7156   012768  50DF               	movf	indf2,w,c
  7157   01276A  06E8               	decf	wreg,f,c
  7158   01276C  A4D8               	btfss	status,2,c
  7159   01276E  EFBB  F093         	goto	u2861
  7160   012772  EFBD  F093         	goto	u2860
  7161   012776                     u2861:
  7162   012776  EF26  F094         	goto	l5151
  7163   01277A                     u2860:
  7164   01277A                     l5129:
  7165                           
  7166                           ;carFunctions.c: 160:                 state = OFF;
  7167   01277A  0E01               	movlw	1
  7168   01277C  6E3A               	movwf	lightControl_Process@state^0,c
  7169   01277E  EF26  F094         	goto	l5151
  7170   012782                     l5131:
  7171                           
  7172                           ;carFunctions.c: 164:             if(ev->id == E_CONTACT_ON)
  7173                           ;stkvar	_ev @ sp[(0)+-2]
  7174   012782  0EFE               	movlw	-2
  7175   012784  CFE3 FFD9          	movff	plusw1,fsr2l
  7176   012788  0EFF               	movlw	-1
  7177   01278A  CFE3 FFDA          	movff	plusw1,fsr2h
  7178   01278E  50DF               	movf	indf2,w,c
  7179   012790  0A03               	xorlw	3
  7180   012792  A4D8               	btfss	status,2,c
  7181   012794  EFCE  F093         	goto	u2871
  7182   012798  EFD0  F093         	goto	u2870
  7183   01279C                     u2871:
  7184   01279C  EF26  F094         	goto	l5151
  7185   0127A0                     u2870:
  7186   0127A0                     
  7187                           ;carFunctions.c: 165:             {;carFunctions.c: 166:                 state = CRUISE;
  7188   0127A0  0E02               	movlw	2
  7189   0127A2  6E3A               	movwf	lightControl_Process@state^0,c
  7190   0127A4  EF26  F094         	goto	l5151
  7191   0127A8                     l5135:
  7192                           
  7193                           ;carFunctions.c: 171:             if(ev->id == E_CONTACT_OFF)
  7194                           ;stkvar	_ev @ sp[(0)+-2]
  7195   0127A8  0EFE               	movlw	-2
  7196   0127AA  CFE3 FFD9          	movff	plusw1,fsr2l
  7197   0127AE  0EFF               	movlw	-1
  7198   0127B0  CFE3 FFDA          	movff	plusw1,fsr2h
  7199   0127B4  50DF               	movf	indf2,w,c
  7200   0127B6  0A02               	xorlw	2
  7201   0127B8  A4D8               	btfss	status,2,c
  7202   0127BA  EFE1  F093         	goto	u2881
  7203   0127BE  EFE3  F093         	goto	u2880
  7204   0127C2                     u2881:
  7205   0127C2  EFE5  F093         	goto	l5139
  7206   0127C6                     u2880:
  7207   0127C6  EFBD  F093         	goto	l5129
  7208   0127CA                     l5139:
  7209                           
  7210                           ;stkvar	_ev @ sp[(0)+-2]
  7211   0127CA  0EFE               	movlw	-2
  7212   0127CC  CFE3 FFD9          	movff	plusw1,fsr2l
  7213   0127D0  0EFF               	movlw	-1
  7214   0127D2  CFE3 FFDA          	movff	plusw1,fsr2h
  7215   0127D6  50DF               	movf	indf2,w,c
  7216   0127D8  0A04               	xorlw	4
  7217   0127DA  A4D8               	btfss	status,2,c
  7218   0127DC  EFF2  F093         	goto	u2891
  7219   0127E0  EFF4  F093         	goto	u2890
  7220   0127E4                     u2891:
  7221   0127E4  EF26  F094         	goto	l5151
  7222   0127E8                     u2890:
  7223   0127E8                     
  7224                           ;carFunctions.c: 177:             {;carFunctions.c: 178:                 state = BRAKE;
  7225   0127E8  0E03               	movlw	3
  7226   0127EA  6E3A               	movwf	lightControl_Process@state^0,c
  7227   0127EC  EF26  F094         	goto	l5151
  7228   0127F0                     l5143:
  7229                           
  7230                           ;carFunctions.c: 182:             if(ev->id == E_CONTACT_OFF)
  7231                           ;stkvar	_ev @ sp[(0)+-2]
  7232   0127F0  0EFE               	movlw	-2
  7233   0127F2  CFE3 FFD9          	movff	plusw1,fsr2l
  7234   0127F6  0EFF               	movlw	-1
  7235   0127F8  CFE3 FFDA          	movff	plusw1,fsr2h
  7236   0127FC  50DF               	movf	indf2,w,c
  7237   0127FE  0A02               	xorlw	2
  7238   012800  A4D8               	btfss	status,2,c
  7239   012802  EF05  F094         	goto	u2901
  7240   012806  EF07  F094         	goto	u2900
  7241   01280A                     u2901:
  7242   01280A  EF26  F094         	goto	l5151
  7243   01280E                     u2900:
  7244   01280E  EFBD  F093         	goto	l5129
  7245   012812                     l5149:
  7246   012812  503A               	movf	lightControl_Process@state^0,w,c
  7247   012814  6E0B               	movwf	(btemp+10)^0,c
  7248   012816  6A0C               	clrf	(btemp+11)^0,c
  7249                           
  7250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7251                           ; Switch size 1, requested type "simple"
  7252                           ; Number of cases is 1, Range of values is 0 to 0
  7253                           ; switch strategies available:
  7254                           ; Name         Instructions Cycles
  7255                           ; simple_byte            4     3 (average)
  7256                           ;	Chosen strategy is simple_byte
  7257   012818  500C               	movf	(btemp+11)^0,w,c
  7258   01281A  0A00               	xorlw	0	; case 0
  7259   01281C  B4D8               	btfsc	status,2,c
  7260   01281E  EF13  F094         	goto	l5573
  7261   012822  EF26  F094         	goto	l5151
  7262   012826                     l5573:
  7263                           
  7264                           ; Switch size 1, requested type "simple"
  7265                           ; Number of cases is 4, Range of values is 0 to 3
  7266                           ; switch strategies available:
  7267                           ; Name         Instructions Cycles
  7268                           ; simple_byte           13     7 (average)
  7269                           ;	Chosen strategy is simple_byte
  7270   012826  500B               	movf	(btemp+10)^0,w,c
  7271   012828  0A00               	xorlw	0	; case 0
  7272   01282A  B4D8               	btfsc	status,2,c
  7273   01282C  EFAE  F093         	goto	l5127
  7274   012830  0A01               	xorlw	1	; case 1
  7275   012832  B4D8               	btfsc	status,2,c
  7276   012834  EFC1  F093         	goto	l5131
  7277   012838  0A03               	xorlw	3	; case 2
  7278   01283A  B4D8               	btfsc	status,2,c
  7279   01283C  EFD4  F093         	goto	l5135
  7280   012840  0A01               	xorlw	1	; case 3
  7281   012842  B4D8               	btfsc	status,2,c
  7282   012844  EFF8  F093         	goto	l5143
  7283   012848  EF26  F094         	goto	l5151
  7284   01284C                     l5151:
  7285                           
  7286                           ;carFunctions.c: 191:    if(oldState == state)
  7287   01284C  503A               	movf	lightControl_Process@state^0,w,c
  7288   01284E  1839               	xorwf	lightControl_Process@oldState^0,w,c
  7289   012850  A4D8               	btfss	status,2,c
  7290   012852  EF2D  F094         	goto	u2911
  7291   012856  EF2F  F094         	goto	u2910
  7292   01285A                     u2911:
  7293   01285A  EF31  F094         	goto	l1492
  7294   01285E                     u2910:
  7295   01285E  EF6C  F094         	goto	l1493
  7296   012862                     l1492:
  7297                           
  7298                           ;carFunctions.c: 195:    oldState = state;
  7299   012862  C03A  F039         	movff	lightControl_Process@state,lightControl_Process@oldState
  7300                           
  7301                           ;carFunctions.c: 196:    switch(state)
  7302   012866  EF4F  F094         	goto	l5165
  7303   01286A                     l5155:
  7304                           
  7305                           ;carFunctions.c: 201:             lightContol_FrontLight(0);
  7306   01286A  0E00               	movlw	0
  7307   01286C  6EE6               	movwf	postinc1,c
  7308   01286E  ECE7  F09E         	call	_lightContol_FrontLight	;wreg free
  7309                           
  7310                           ;carFunctions.c: 202:             lightContol_BackLight(0);
  7311   012872  0E00               	movlw	0
  7312   012874  6EE6               	movwf	postinc1,c
  7313   012876  EC8D  F09E         	call	_lightContol_BackLight	;wreg free
  7314                           
  7315                           ;carFunctions.c: 203:             break;
  7316   01287A  EF6C  F094         	goto	l1493
  7317   01287E                     l5157:
  7318                           
  7319                           ;carFunctions.c: 205:             lightContol_FrontLight(50);
  7320   01287E  0E32               	movlw	50
  7321   012880  6EE6               	movwf	postinc1,c
  7322   012882  ECE7  F09E         	call	_lightContol_FrontLight	;wreg free
  7323                           
  7324                           ;carFunctions.c: 206:             lightContol_BackLight(50);
  7325   012886  0E32               	movlw	50
  7326   012888  6EE6               	movwf	postinc1,c
  7327   01288A  EC8D  F09E         	call	_lightContol_BackLight	;wreg free
  7328                           
  7329                           ;carFunctions.c: 207:             break;
  7330   01288E  EF6C  F094         	goto	l1493
  7331   012892                     l5161:
  7332                           
  7333                           ;carFunctions.c: 212:               lightContol_BackLight(0);
  7334   012892  0E00               	movlw	0
  7335   012894  6EE6               	movwf	postinc1,c
  7336   012896  EC8D  F09E         	call	_lightContol_BackLight	;wreg free
  7337   01289A  EF6C  F094         	goto	l1493
  7338   01289E                     l5165:
  7339   01289E  503A               	movf	lightControl_Process@state^0,w,c
  7340   0128A0  6E0B               	movwf	(btemp+10)^0,c
  7341   0128A2  6A0C               	clrf	(btemp+11)^0,c
  7342                           
  7343                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7344                           ; Switch size 1, requested type "simple"
  7345                           ; Number of cases is 1, Range of values is 0 to 0
  7346                           ; switch strategies available:
  7347                           ; Name         Instructions Cycles
  7348                           ; simple_byte            4     3 (average)
  7349                           ;	Chosen strategy is simple_byte
  7350   0128A4  500C               	movf	(btemp+11)^0,w,c
  7351   0128A6  0A00               	xorlw	0	; case 0
  7352   0128A8  B4D8               	btfsc	status,2,c
  7353   0128AA  EF59  F094         	goto	l5575
  7354   0128AE  EF6C  F094         	goto	l1493
  7355   0128B2                     l5575:
  7356                           
  7357                           ; Switch size 1, requested type "simple"
  7358                           ; Number of cases is 4, Range of values is 0 to 3
  7359                           ; switch strategies available:
  7360                           ; Name         Instructions Cycles
  7361                           ; simple_byte           13     7 (average)
  7362                           ;	Chosen strategy is simple_byte
  7363   0128B2  500B               	movf	(btemp+10)^0,w,c
  7364   0128B4  0A00               	xorlw	0	; case 0
  7365   0128B6  B4D8               	btfsc	status,2,c
  7366   0128B8  EF6C  F094         	goto	l1493
  7367   0128BC  0A01               	xorlw	1	; case 1
  7368   0128BE  B4D8               	btfsc	status,2,c
  7369   0128C0  EF35  F094         	goto	l5155
  7370   0128C4  0A03               	xorlw	3	; case 2
  7371   0128C6  B4D8               	btfsc	status,2,c
  7372   0128C8  EF3F  F094         	goto	l5157
  7373   0128CC  0A01               	xorlw	1	; case 3
  7374   0128CE  B4D8               	btfsc	status,2,c
  7375   0128D0  EF49  F094         	goto	l5161
  7376   0128D4  EF6C  F094         	goto	l1493
  7377   0128D8                     l1493:
  7378                           
  7379                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7380   0128D8  52E5               	movf	postdec1,f,c
  7381   0128DA  52E5               	movf	postdec1,f,c
  7382   0128DC  0012               	return		;funcret
  7383   0128DE                     __end_of_lightControl_Process:
  7384                           	callstack 0
  7385                           
  7386 ;; *************** function _motorControl_Process *****************
  7387 ;; Defined at:
  7388 ;;		line 37 in file "carFunctions.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  ev              2  [STACK] PTR struct Event_
  7391 ;;		 -> ev(6), 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1  [STACK] _Bool 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;Total ram usage:        0 bytes
  7408 ;; Hardware stack levels used: 1
  7409 ;; Hardware stack levels required when called: 13
  7410 ;; This function calls:
  7411 ;;		_lightContol_BackLight
  7412 ;;		_lightContol_FrontLight
  7413 ;;		_motorControl
  7414 ;; This function is called by:
  7415 ;;		_updateCarState
  7416 ;;		_XF_executeOnce
  7417 ;; This function uses a reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text20
  7421   012420                     __ptext20:
  7422                           	callstack 0
  7423   012420                     _motorControl_Process:
  7424                           	callstack 16
  7425   012420                     
  7426                           ;carFunctions.c: 47:     static MotorState state = INIT;;carFunctions.c: 48:     static 
      +                          MotorState oldState = INIT;;carFunctions.c: 51:     switch(state)
  7427   012420  EF80  F092         	goto	l5101
  7428   012424                     l5075:
  7429                           
  7430                           ;carFunctions.c: 54:             if(ev->id == E_INIT){
  7431                           ;stkvar	_ev @ sp[(0)+-2]
  7432   012424  0EFE               	movlw	-2
  7433   012426  CFE3 FFD9          	movff	plusw1,fsr2l
  7434   01242A  0EFF               	movlw	-1
  7435   01242C  CFE3 FFDA          	movff	plusw1,fsr2h
  7436   012430  50DF               	movf	indf2,w,c
  7437   012432  06E8               	decf	wreg,f,c
  7438   012434  A4D8               	btfss	status,2,c
  7439   012436  EF1F  F092         	goto	u2791
  7440   01243A  EF21  F092         	goto	u2790
  7441   01243E                     u2791:
  7442   01243E  EF9D  F092         	goto	l5103
  7443   012442                     u2790:
  7444   012442                     l5077:
  7445                           
  7446                           ;carFunctions.c: 55:                 state = OFF;
  7447   012442  0E01               	movlw	1
  7448   012444  6E3E               	movwf	motorControl_Process@state^0,c
  7449   012446  EF9D  F092         	goto	l5103
  7450   01244A                     l5079:
  7451                           
  7452                           ;carFunctions.c: 59:             if(ev->id == E_CONTACT_ON)
  7453                           ;stkvar	_ev @ sp[(0)+-2]
  7454   01244A  0EFE               	movlw	-2
  7455   01244C  CFE3 FFD9          	movff	plusw1,fsr2l
  7456   012450  0EFF               	movlw	-1
  7457   012452  CFE3 FFDA          	movff	plusw1,fsr2h
  7458   012456  50DF               	movf	indf2,w,c
  7459   012458  0A03               	xorlw	3
  7460   01245A  A4D8               	btfss	status,2,c
  7461   01245C  EF32  F092         	goto	u2801
  7462   012460  EF34  F092         	goto	u2800
  7463   012464                     u2801:
  7464   012464  EF9D  F092         	goto	l5103
  7465   012468                     u2800:
  7466   012468                     
  7467                           ;carFunctions.c: 60:             {;carFunctions.c: 61:                 state = STANDBY;
  7468   012468  0E04               	movlw	4
  7469   01246A  6E3E               	movwf	motorControl_Process@state^0,c
  7470   01246C  EF9D  F092         	goto	l5103
  7471   012470                     l5083:
  7472                           
  7473                           ;carFunctions.c: 66:             if(ev->id == E_CONTACT_OFF)
  7474                           ;stkvar	_ev @ sp[(0)+-2]
  7475   012470  0EFE               	movlw	-2
  7476   012472  CFE3 FFD9          	movff	plusw1,fsr2l
  7477   012476  0EFF               	movlw	-1
  7478   012478  CFE3 FFDA          	movff	plusw1,fsr2h
  7479   01247C  50DF               	movf	indf2,w,c
  7480   01247E  0A02               	xorlw	2
  7481   012480  A4D8               	btfss	status,2,c
  7482   012482  EF45  F092         	goto	u2811
  7483   012486  EF47  F092         	goto	u2810
  7484   01248A                     u2811:
  7485   01248A  EF4B  F092         	goto	l5087
  7486   01248E                     u2810:
  7487   01248E                     
  7488                           ;carFunctions.c: 67:             {;carFunctions.c: 68:                 state = OFF;
  7489   01248E  0E01               	movlw	1
  7490   012490  6E3E               	movwf	motorControl_Process@state^0,c
  7491                           
  7492                           ;carFunctions.c: 69:             }else if(ev->id == E_ACCELERATION_OFF)
  7493   012492  EF5C  F092         	goto	l5091
  7494   012496                     l5087:
  7495                           
  7496                           ;stkvar	_ev @ sp[(0)+-2]
  7497   012496  0EFE               	movlw	-2
  7498   012498  CFE3 FFD9          	movff	plusw1,fsr2l
  7499   01249C  0EFF               	movlw	-1
  7500   01249E  CFE3 FFDA          	movff	plusw1,fsr2h
  7501   0124A2  50DF               	movf	indf2,w,c
  7502   0124A4  0A09               	xorlw	9
  7503   0124A6  A4D8               	btfss	status,2,c
  7504   0124A8  EF58  F092         	goto	u2821
  7505   0124AC  EF5A  F092         	goto	u2820
  7506   0124B0                     u2821:
  7507   0124B0  EF5C  F092         	goto	l5091
  7508   0124B4                     u2820:
  7509   0124B4                     
  7510                           ;carFunctions.c: 70:             {;carFunctions.c: 71:                 state = STANDBY;
  7511   0124B4  0E04               	movlw	4
  7512   0124B6  6E3E               	movwf	motorControl_Process@state^0,c
  7513   0124B8                     l5091:
  7514                           
  7515                           ;carFunctions.c: 74:             if(ev->id == E_CONTACT_OFF)
  7516                           ;stkvar	_ev @ sp[(0)+-2]
  7517   0124B8  0EFE               	movlw	-2
  7518   0124BA  CFE3 FFD9          	movff	plusw1,fsr2l
  7519   0124BE  0EFF               	movlw	-1
  7520   0124C0  CFE3 FFDA          	movff	plusw1,fsr2h
  7521   0124C4  50DF               	movf	indf2,w,c
  7522   0124C6  0A02               	xorlw	2
  7523   0124C8  A4D8               	btfss	status,2,c
  7524   0124CA  EF69  F092         	goto	u2831
  7525   0124CE  EF6B  F092         	goto	u2830
  7526   0124D2                     u2831:
  7527   0124D2  EF6D  F092         	goto	l5095
  7528   0124D6                     u2830:
  7529   0124D6  EF21  F092         	goto	l5077
  7530   0124DA                     l5095:
  7531                           
  7532                           ;stkvar	_ev @ sp[(0)+-2]
  7533   0124DA  0EFE               	movlw	-2
  7534   0124DC  CFE3 FFD9          	movff	plusw1,fsr2l
  7535   0124E0  0EFF               	movlw	-1
  7536   0124E2  CFE3 FFDA          	movff	plusw1,fsr2h
  7537   0124E6  50DF               	movf	indf2,w,c
  7538   0124E8  0A08               	xorlw	8
  7539   0124EA  A4D8               	btfss	status,2,c
  7540   0124EC  EF7A  F092         	goto	u2841
  7541   0124F0  EF7C  F092         	goto	u2840
  7542   0124F4                     u2841:
  7543   0124F4  EF9D  F092         	goto	l5103
  7544   0124F8                     u2840:
  7545   0124F8                     
  7546                           ;carFunctions.c: 78:             {;carFunctions.c: 79:                 state = CRUISE;
  7547   0124F8  0E02               	movlw	2
  7548   0124FA  6E3E               	movwf	motorControl_Process@state^0,c
  7549   0124FC  EF9D  F092         	goto	l5103
  7550   012500                     l5101:
  7551   012500  503E               	movf	motorControl_Process@state^0,w,c
  7552   012502  6E0B               	movwf	(btemp+10)^0,c
  7553   012504  6A0C               	clrf	(btemp+11)^0,c
  7554                           
  7555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7556                           ; Switch size 1, requested type "simple"
  7557                           ; Number of cases is 1, Range of values is 0 to 0
  7558                           ; switch strategies available:
  7559                           ; Name         Instructions Cycles
  7560                           ; simple_byte            4     3 (average)
  7561                           ;	Chosen strategy is simple_byte
  7562   012506  500C               	movf	(btemp+11)^0,w,c
  7563   012508  0A00               	xorlw	0	; case 0
  7564   01250A  B4D8               	btfsc	status,2,c
  7565   01250C  EF8A  F092         	goto	l5577
  7566   012510  EF9D  F092         	goto	l5103
  7567   012514                     l5577:
  7568                           
  7569                           ; Switch size 1, requested type "simple"
  7570                           ; Number of cases is 4, Range of values is 0 to 4
  7571                           ; switch strategies available:
  7572                           ; Name         Instructions Cycles
  7573                           ; simple_byte           13     7 (average)
  7574                           ;	Chosen strategy is simple_byte
  7575   012514  500B               	movf	(btemp+10)^0,w,c
  7576   012516  0A00               	xorlw	0	; case 0
  7577   012518  B4D8               	btfsc	status,2,c
  7578   01251A  EF12  F092         	goto	l5075
  7579   01251E  0A01               	xorlw	1	; case 1
  7580   012520  B4D8               	btfsc	status,2,c
  7581   012522  EF25  F092         	goto	l5079
  7582   012526  0A03               	xorlw	3	; case 2
  7583   012528  B4D8               	btfsc	status,2,c
  7584   01252A  EF38  F092         	goto	l5083
  7585   01252E  0A06               	xorlw	6	; case 4
  7586   012530  B4D8               	btfsc	status,2,c
  7587   012532  EF5C  F092         	goto	l5091
  7588   012536  EF9D  F092         	goto	l5103
  7589   01253A                     l5103:
  7590                           
  7591                           ;carFunctions.c: 85:     if(oldState == state)
  7592   01253A  503E               	movf	motorControl_Process@state^0,w,c
  7593   01253C  183D               	xorwf	motorControl_Process@oldState^0,w,c
  7594   01253E  A4D8               	btfss	status,2,c
  7595   012540  EFA4  F092         	goto	u2851
  7596   012544  EFA6  F092         	goto	u2850
  7597   012548                     u2851:
  7598   012548  EFA8  F092         	goto	l1447
  7599   01254C                     u2850:
  7600   01254C  EFE3  F092         	goto	l1448
  7601   012550                     l1447:
  7602                           
  7603                           ;carFunctions.c: 89:    oldState = state;
  7604   012550  C03E  F03D         	movff	motorControl_Process@state,motorControl_Process@oldState
  7605                           
  7606                           ;carFunctions.c: 90:    switch(state)
  7607   012554  EFC2  F092         	goto	l5115
  7608   012558                     l5107:
  7609                           
  7610                           ;carFunctions.c: 95:             motorControl(0);
  7611   012558  0E00               	movlw	0
  7612   01255A  6EE6               	movwf	postinc1,c
  7613   01255C  EC33  F09E         	call	_motorControl	;wreg free
  7614                           
  7615                           ;carFunctions.c: 96:             break;
  7616   012560  EFE3  F092         	goto	l1448
  7617   012564                     l5109:
  7618                           
  7619                           ;carFunctions.c: 98:             lightContol_FrontLight(50);
  7620   012564  0E32               	movlw	50
  7621   012566  6EE6               	movwf	postinc1,c
  7622   012568  ECE7  F09E         	call	_lightContol_FrontLight	;wreg free
  7623                           
  7624                           ;carFunctions.c: 99:             lightContol_BackLight(50);
  7625   01256C  0E32               	movlw	50
  7626   01256E  6EE6               	movwf	postinc1,c
  7627   012570  EC8D  F09E         	call	_lightContol_BackLight	;wreg free
  7628                           
  7629                           ;carFunctions.c: 100:             break;
  7630   012574  EFE3  F092         	goto	l1448
  7631   012578                     l5111:
  7632                           
  7633                           ;carFunctions.c: 102:            motorControl(10);
  7634   012578  0E0A               	movlw	10
  7635   01257A  6EE6               	movwf	postinc1,c
  7636   01257C  EC33  F09E         	call	_motorControl	;wreg free
  7637                           
  7638                           ;carFunctions.c: 103:            break;
  7639   012580  EFE3  F092         	goto	l1448
  7640   012584                     l5115:
  7641   012584  503E               	movf	motorControl_Process@state^0,w,c
  7642   012586  6E0B               	movwf	(btemp+10)^0,c
  7643   012588  6A0C               	clrf	(btemp+11)^0,c
  7644                           
  7645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7646                           ; Switch size 1, requested type "simple"
  7647                           ; Number of cases is 1, Range of values is 0 to 0
  7648                           ; switch strategies available:
  7649                           ; Name         Instructions Cycles
  7650                           ; simple_byte            4     3 (average)
  7651                           ;	Chosen strategy is simple_byte
  7652   01258A  500C               	movf	(btemp+11)^0,w,c
  7653   01258C  0A00               	xorlw	0	; case 0
  7654   01258E  B4D8               	btfsc	status,2,c
  7655   012590  EFCC  F092         	goto	l5579
  7656   012594  EFE3  F092         	goto	l1448
  7657   012598                     l5579:
  7658                           
  7659                           ; Switch size 1, requested type "simple"
  7660                           ; Number of cases is 5, Range of values is 0 to 4
  7661                           ; switch strategies available:
  7662                           ; Name         Instructions Cycles
  7663                           ; simple_byte           16     9 (average)
  7664                           ;	Chosen strategy is simple_byte
  7665   012598  500B               	movf	(btemp+10)^0,w,c
  7666   01259A  0A00               	xorlw	0	; case 0
  7667   01259C  B4D8               	btfsc	status,2,c
  7668   01259E  EFE3  F092         	goto	l1448
  7669   0125A2  0A01               	xorlw	1	; case 1
  7670   0125A4  B4D8               	btfsc	status,2,c
  7671   0125A6  EFAC  F092         	goto	l5107
  7672   0125AA  0A03               	xorlw	3	; case 2
  7673   0125AC  B4D8               	btfsc	status,2,c
  7674   0125AE  EFB2  F092         	goto	l5109
  7675   0125B2  0A01               	xorlw	1	; case 3
  7676   0125B4  B4D8               	btfsc	status,2,c
  7677   0125B6  EFE3  F092         	goto	l1448
  7678   0125BA  0A07               	xorlw	7	; case 4
  7679   0125BC  B4D8               	btfsc	status,2,c
  7680   0125BE  EFBC  F092         	goto	l5111
  7681   0125C2  EFE3  F092         	goto	l1448
  7682   0125C6                     l1448:
  7683                           
  7684                           ; _motorControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7685   0125C6  52E5               	movf	postdec1,f,c
  7686   0125C8  52E5               	movf	postdec1,f,c
  7687   0125CA  0012               	return		;funcret
  7688   0125CC                     __end_of_motorControl_Process:
  7689                           	callstack 0
  7690                           
  7691 ;; *************** function _motorControl *****************
  7692 ;; Defined at:
  7693 ;;		line 23 in file "carFunctions.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  percent         1  [STACK] unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7698 ;;  txdata          8  [STACK] unsigned char [8]
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1  [STACK] void 
  7701 ;; Registers used:
  7702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;Total ram usage:        0 bytes
  7713 ;; Hardware stack levels used: 1
  7714 ;; Hardware stack levels required when called: 12
  7715 ;; This function calls:
  7716 ;;		_CanSend
  7717 ;; This function is called by:
  7718 ;;		_motorControl_Process
  7719 ;; This function uses a reentrant model
  7720 ;;
  7721                           
  7722                           	psect	text21
  7723   013C66                     __ptext21:
  7724                           	callstack 0
  7725   013C66                     _motorControl:
  7726                           	callstack 0
  7727                           
  7728                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7729   013C66  0E18               	movlw	24
  7730   013C68  26E1               	addwf	fsr1l,f,c
  7731   013C6A  0E00               	movlw	0
  7732   013C6C  22E2               	addwfc	fsr1h,f,c
  7733   013C6E                     
  7734                           ;carFunctions.c: 24:     static uint8_t lastPercent=0;;carFunctions.c: 25:     CAN_TX_MS
      +                          GOBJ txMsg={0};
  7735   013C6E  EE20  F021         	lfsr	2,motorControl@F6645
  7736                           
  7737                           ;stkvar	_txMsg @ sp[(-24)+0]
  7738   013C72  0E10               	movlw	16
  7739   013C74  6E01               	movwf	btemp^0,c
  7740   013C76  0EE8               	movlw	-24
  7741   013C78                     us231999:
  7742   013C78  CFDE FFE3          	movff	postinc2,plusw1
  7743   013C7C  28E8               	incf	wreg,w,c
  7744   013C7E  2E01               	decfsz	btemp^0,f,c
  7745   013C80  D7FB               	bra	us231999
  7746   013C82                     
  7747                           ;carFunctions.c: 26:     uint8_t txdata[8];;carFunctions.c: 27:         if(lastPercent!=
      +                           percent) {
  7748                           ;stkvar	_percent @ sp[(-24)+-1]
  7749   013C82  0EE7               	movlw	-25
  7750   013C84  50E3               	movf	plusw1,w,c
  7751   013C86  183F               	xorwf	motorControl@lastPercent^0,w,c
  7752   013C88  B4D8               	btfsc	status,2,c
  7753   013C8A  EF49  F09E         	goto	u2321
  7754   013C8E  EF4B  F09E         	goto	u2320
  7755   013C92                     u2321:
  7756   013C92  EF88  F09E         	goto	l1425
  7757   013C96                     u2320:
  7758   013C96                     
  7759                           ;carFunctions.c: 28:             lastPercent = percent;
  7760                           ;stkvar	_percent @ sp[(-24)+-1]
  7761   013C96  0EE7               	movlw	-25
  7762   013C98  CFE3 F03F          	movff	plusw1,motorControl@lastPercent
  7763   013C9C                     
  7764                           ;carFunctions.c: 30:             txMsg.bF.id.ID = (0x112);
  7765   013C9C  0E12               	movlw	18
  7766   013C9E  6E09               	movwf	(btemp+8)^0,c
  7767   013CA0  0E01               	movlw	1
  7768   013CA2  6E0A               	movwf	(btemp+9)^0,c
  7769   013CA4  0E00               	movlw	0
  7770   013CA6  6E0B               	movwf	(btemp+10)^0,c
  7771   013CA8  0E00               	movlw	0
  7772   013CAA  6E0C               	movwf	(btemp+11)^0,c
  7773                           
  7774                           ;stkvar	_txMsg @ sp[(-24)+0]
  7775   013CAC  0EE8               	movlw	-24
  7776   013CAE  C009  FFE3         	movff	btemp+8,plusw1
  7777   013CB2  0EE9               	movlw	-23
  7778   013CB4  C00A  FFE3         	movff	btemp+9,plusw1
  7779   013CB8  0EEA               	movlw	-22
  7780   013CBA  C00B  FFE3         	movff	btemp+10,plusw1
  7781   013CBE  0EEB               	movlw	-21
  7782   013CC0  C00C  FFE3         	movff	btemp+11,plusw1
  7783   013CC4                     
  7784                           ;carFunctions.c: 31:             txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7785                           ;stkvar	_txMsg @ sp[(-24)+0]
  7786   013CC4  0EEE               	movlw	238
  7787   013CC6  24E1               	addwf	fsr1l,w,c
  7788   013CC8  6ED9               	movwf	fsr2l,c
  7789   013CCA  0EFF               	movlw	255
  7790   013CCC  20E2               	addwfc	fsr1h,w,c
  7791   013CCE  6EDA               	movwf	fsr2h,c
  7792   013CD0  50DF               	movf	223,w,c
  7793   013CD2  0BF0               	andlw	-16
  7794   013CD4  0901               	iorlw	1
  7795   013CD6  6EDF               	movwf	223,c
  7796   013CD8                     
  7797                           ;carFunctions.c: 32:             txdata[0] = percent;
  7798                           ;stkvar	_percent @ sp[(-24)+-1]
  7799                           ;stkvar	_txdata @ sp[(-24)+16]
  7800   013CD8  0EE7               	movlw	-25
  7801   013CDA  CFE3 F001          	movff	plusw1,btemp
  7802   013CDE  0EF8               	movlw	-8
  7803   013CE0  C001  FFE3         	movff	btemp,plusw1
  7804   013CE4                     
  7805                           ;carFunctions.c: 33:         CanSend(&txMsg,txdata);
  7806                           ;stkvar	_txdata @ sp[(-24)+16]
  7807   013CE4  0EF8               	movlw	248
  7808   013CE6  24E1               	addwf	fsr1l,w,c
  7809   013CE8  6E01               	movwf	btemp^0,c
  7810   013CEA  0EFF               	movlw	255
  7811   013CEC  20E2               	addwfc	fsr1h,w,c
  7812   013CEE  6E02               	movwf	(btemp+1)^0,c
  7813   013CF0  C001  FFE6         	movff	btemp,postinc1
  7814   013CF4  C002  FFE6         	movff	btemp+1,postinc1
  7815                           
  7816                           ;stkvar	_txMsg @ sp[(-26)+0]
  7817   013CF8  0EE6               	movlw	230
  7818   013CFA  24E1               	addwf	fsr1l,w,c
  7819   013CFC  6E01               	movwf	btemp^0,c
  7820   013CFE  0EFF               	movlw	255
  7821   013D00  20E2               	addwfc	fsr1h,w,c
  7822   013D02  6E02               	movwf	(btemp+1)^0,c
  7823   013D04  C001  FFE6         	movff	btemp,postinc1
  7824   013D08  C002  FFE6         	movff	btemp+1,postinc1
  7825   013D0C  EC95  F09F         	call	_CanSend	;wreg free
  7826   013D10                     l1425:
  7827                           
  7828                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
  7829   013D10  0EE7               	movlw	231
  7830   013D12  26E1               	addwf	fsr1l,f,c
  7831   013D14  0EFF               	movlw	255
  7832   013D16  22E2               	addwfc	fsr1h,f,c
  7833   013D18  0012               	return		;funcret
  7834   013D1A                     __end_of_motorControl:
  7835                           	callstack 0
  7836                           
  7837 ;; *************** function _lightContol_FrontLight *****************
  7838 ;; Defined at:
  7839 ;;		line 115 in file "carFunctions.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  light           1  [STACK] unsigned char 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7844 ;;  txdata          8  [STACK] unsigned char [8]
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1  [STACK] void 
  7847 ;; Registers used:
  7848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7858 ;;Total ram usage:        0 bytes
  7859 ;; Hardware stack levels used: 1
  7860 ;; Hardware stack levels required when called: 12
  7861 ;; This function calls:
  7862 ;;		_CanSend
  7863 ;; This function is called by:
  7864 ;;		_motorControl_Process
  7865 ;;		_lightControl_Process
  7866 ;; This function uses a reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text22
  7870   013DCE                     __ptext22:
  7871                           	callstack 0
  7872   013DCE                     _lightContol_FrontLight:
  7873                           	callstack 0
  7874                           
  7875                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7876   013DCE  0E18               	movlw	24
  7877   013DD0  26E1               	addwf	fsr1l,f,c
  7878   013DD2  0E00               	movlw	0
  7879   013DD4  22E2               	addwfc	fsr1h,f,c
  7880   013DD6                     
  7881                           ;carFunctions.c: 115: void lightContol_FrontLight(uint8_t light);carFunctions.c: 116: {;
      +                          carFunctions.c: 118: static uint8_t lastLight=0;;carFunctions.c: 119: CAN_TX_MSGOBJ txMs
      +                          g={0};
  7882   013DD6  EE20  F08B         	lfsr	2,lightContol_FrontLight@F6662
  7883                           
  7884                           ;stkvar	_txMsg @ sp[(-24)+0]
  7885   013DDA  0E10               	movlw	16
  7886   013DDC  6E01               	movwf	btemp^0,c
  7887   013DDE  0EE8               	movlw	-24
  7888   013DE0                     us233999:
  7889   013DE0  CFDE FFE3          	movff	postinc2,plusw1
  7890   013DE4  28E8               	incf	wreg,w,c
  7891   013DE6  2E01               	decfsz	btemp^0,f,c
  7892   013DE8  D7FB               	bra	us233999
  7893   013DEA                     
  7894                           ;carFunctions.c: 120: uint8_t txdata[8];;carFunctions.c: 121:     if(lastLight!= light) 
      +                          {
  7895                           ;stkvar	_light @ sp[(-24)+-1]
  7896   013DEA  0EE7               	movlw	-25
  7897   013DEC  50E3               	movf	plusw1,w,c
  7898   013DEE  183C               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  7899   013DF0  B4D8               	btfsc	status,2,c
  7900   013DF2  EFFD  F09E         	goto	u2341
  7901   013DF6  EFFF  F09E         	goto	u2340
  7902   013DFA                     u2341:
  7903   013DFA  EF39  F09F         	goto	l1464
  7904   013DFE                     u2340:
  7905   013DFE                     
  7906                           ;carFunctions.c: 122:         lastLight = light;
  7907                           ;stkvar	_light @ sp[(-24)+-1]
  7908   013DFE  0EE7               	movlw	-25
  7909   013E00  CFE3 F03C          	movff	plusw1,lightContol_FrontLight@lastLight
  7910   013E04                     
  7911                           ;carFunctions.c: 124:         txMsg.bF.id.ID = (0x19);
  7912   013E04  0E19               	movlw	25
  7913   013E06  6E09               	movwf	(btemp+8)^0,c
  7914   013E08  6A0A               	clrf	(btemp+9)^0,c
  7915   013E0A  6A0B               	clrf	(btemp+10)^0,c
  7916   013E0C  6A0C               	clrf	(btemp+11)^0,c
  7917                           
  7918                           ;stkvar	_txMsg @ sp[(-24)+0]
  7919   013E0E  0EE8               	movlw	-24
  7920   013E10  C009  FFE3         	movff	btemp+8,plusw1
  7921   013E14  0EE9               	movlw	-23
  7922   013E16  C00A  FFE3         	movff	btemp+9,plusw1
  7923   013E1A  0EEA               	movlw	-22
  7924   013E1C  C00B  FFE3         	movff	btemp+10,plusw1
  7925   013E20  0EEB               	movlw	-21
  7926   013E22  C00C  FFE3         	movff	btemp+11,plusw1
  7927   013E26                     
  7928                           ;carFunctions.c: 125:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7929                           ;stkvar	_txMsg @ sp[(-24)+0]
  7930   013E26  0EEE               	movlw	238
  7931   013E28  24E1               	addwf	fsr1l,w,c
  7932   013E2A  6ED9               	movwf	fsr2l,c
  7933   013E2C  0EFF               	movlw	255
  7934   013E2E  20E2               	addwfc	fsr1h,w,c
  7935   013E30  6EDA               	movwf	fsr2h,c
  7936   013E32  50DF               	movf	223,w,c
  7937   013E34  0BF0               	andlw	-16
  7938   013E36  0901               	iorlw	1
  7939   013E38  6EDF               	movwf	223,c
  7940   013E3A                     
  7941                           ;carFunctions.c: 126:         txdata[0] = light;
  7942                           ;stkvar	_light @ sp[(-24)+-1]
  7943                           ;stkvar	_txdata @ sp[(-24)+16]
  7944   013E3A  0EE7               	movlw	-25
  7945   013E3C  CFE3 F001          	movff	plusw1,btemp
  7946   013E40  0EF8               	movlw	-8
  7947   013E42  C001  FFE3         	movff	btemp,plusw1
  7948   013E46                     
  7949                           ;carFunctions.c: 127:         CanSend(&txMsg,txdata);
  7950                           ;stkvar	_txdata @ sp[(-24)+16]
  7951   013E46  0EF8               	movlw	248
  7952   013E48  24E1               	addwf	fsr1l,w,c
  7953   013E4A  6E01               	movwf	btemp^0,c
  7954   013E4C  0EFF               	movlw	255
  7955   013E4E  20E2               	addwfc	fsr1h,w,c
  7956   013E50  6E02               	movwf	(btemp+1)^0,c
  7957   013E52  C001  FFE6         	movff	btemp,postinc1
  7958   013E56  C002  FFE6         	movff	btemp+1,postinc1
  7959                           
  7960                           ;stkvar	_txMsg @ sp[(-26)+0]
  7961   013E5A  0EE6               	movlw	230
  7962   013E5C  24E1               	addwf	fsr1l,w,c
  7963   013E5E  6E01               	movwf	btemp^0,c
  7964   013E60  0EFF               	movlw	255
  7965   013E62  20E2               	addwfc	fsr1h,w,c
  7966   013E64  6E02               	movwf	(btemp+1)^0,c
  7967   013E66  C001  FFE6         	movff	btemp,postinc1
  7968   013E6A  C002  FFE6         	movff	btemp+1,postinc1
  7969   013E6E  EC95  F09F         	call	_CanSend	;wreg free
  7970   013E72                     l1464:
  7971                           
  7972                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  7973   013E72  0EE7               	movlw	231
  7974   013E74  26E1               	addwf	fsr1l,f,c
  7975   013E76  0EFF               	movlw	255
  7976   013E78  22E2               	addwfc	fsr1h,f,c
  7977   013E7A  0012               	return		;funcret
  7978   013E7C                     __end_of_lightContol_FrontLight:
  7979                           	callstack 0
  7980                           
  7981 ;; *************** function _lightContol_BackLight *****************
  7982 ;; Defined at:
  7983 ;;		line 130 in file "carFunctions.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;  light           1  [STACK] unsigned char 
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7988 ;;  txdata          8  [STACK] unsigned char [8]
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1  [STACK] void 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;Total ram usage:        0 bytes
  8003 ;; Hardware stack levels used: 1
  8004 ;; Hardware stack levels required when called: 12
  8005 ;; This function calls:
  8006 ;;		_CanSend
  8007 ;; This function is called by:
  8008 ;;		_motorControl_Process
  8009 ;;		_lightControl_Process
  8010 ;; This function uses a reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text23
  8014   013D1A                     __ptext23:
  8015                           	callstack 0
  8016   013D1A                     _lightContol_BackLight:
  8017                           	callstack 0
  8018                           
  8019                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8020   013D1A  0E18               	movlw	24
  8021   013D1C  26E1               	addwf	fsr1l,f,c
  8022   013D1E  0E00               	movlw	0
  8023   013D20  22E2               	addwfc	fsr1h,f,c
  8024   013D22                     
  8025                           ;carFunctions.c: 130: void lightContol_BackLight(uint8_t light);carFunctions.c: 131: {;c
      +                          arFunctions.c: 132:     static uint8_t lastLight=0;;carFunctions.c: 133:     CAN_TX_MSGO
      +                          BJ txMsg={0};
  8026   013D22  EE20  F07B         	lfsr	2,lightContol_BackLight@F6668
  8027                           
  8028                           ;stkvar	_txMsg @ sp[(-24)+0]
  8029   013D26  0E10               	movlw	16
  8030   013D28  6E01               	movwf	btemp^0,c
  8031   013D2A  0EE8               	movlw	-24
  8032   013D2C                     us235999:
  8033   013D2C  CFDE FFE3          	movff	postinc2,plusw1
  8034   013D30  28E8               	incf	wreg,w,c
  8035   013D32  2E01               	decfsz	btemp^0,f,c
  8036   013D34  D7FB               	bra	us235999
  8037   013D36                     
  8038                           ;carFunctions.c: 134:     uint8_t txdata[8];;carFunctions.c: 135:     if(lastLight!= lig
      +                          ht) {
  8039                           ;stkvar	_light @ sp[(-24)+-1]
  8040   013D36  0EE7               	movlw	-25
  8041   013D38  50E3               	movf	plusw1,w,c
  8042   013D3A  183B               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8043   013D3C  B4D8               	btfsc	status,2,c
  8044   013D3E  EFA3  F09E         	goto	u2361
  8045   013D42  EFA5  F09E         	goto	u2360
  8046   013D46                     u2361:
  8047   013D46  EFE2  F09E         	goto	l1472
  8048   013D4A                     u2360:
  8049   013D4A                     
  8050                           ;carFunctions.c: 136:         lastLight = light;
  8051                           ;stkvar	_light @ sp[(-24)+-1]
  8052   013D4A  0EE7               	movlw	-25
  8053   013D4C  CFE3 F03B          	movff	plusw1,lightContol_BackLight@lastLight
  8054   013D50                     
  8055                           ;carFunctions.c: 138:         txMsg.bF.id.ID = (0x119);
  8056   013D50  0E19               	movlw	25
  8057   013D52  6E09               	movwf	(btemp+8)^0,c
  8058   013D54  0E01               	movlw	1
  8059   013D56  6E0A               	movwf	(btemp+9)^0,c
  8060   013D58  0E00               	movlw	0
  8061   013D5A  6E0B               	movwf	(btemp+10)^0,c
  8062   013D5C  0E00               	movlw	0
  8063   013D5E  6E0C               	movwf	(btemp+11)^0,c
  8064                           
  8065                           ;stkvar	_txMsg @ sp[(-24)+0]
  8066   013D60  0EE8               	movlw	-24
  8067   013D62  C009  FFE3         	movff	btemp+8,plusw1
  8068   013D66  0EE9               	movlw	-23
  8069   013D68  C00A  FFE3         	movff	btemp+9,plusw1
  8070   013D6C  0EEA               	movlw	-22
  8071   013D6E  C00B  FFE3         	movff	btemp+10,plusw1
  8072   013D72  0EEB               	movlw	-21
  8073   013D74  C00C  FFE3         	movff	btemp+11,plusw1
  8074   013D78                     
  8075                           ;carFunctions.c: 139:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8076                           ;stkvar	_txMsg @ sp[(-24)+0]
  8077   013D78  0EEE               	movlw	238
  8078   013D7A  24E1               	addwf	fsr1l,w,c
  8079   013D7C  6ED9               	movwf	fsr2l,c
  8080   013D7E  0EFF               	movlw	255
  8081   013D80  20E2               	addwfc	fsr1h,w,c
  8082   013D82  6EDA               	movwf	fsr2h,c
  8083   013D84  50DF               	movf	223,w,c
  8084   013D86  0BF0               	andlw	-16
  8085   013D88  0901               	iorlw	1
  8086   013D8A  6EDF               	movwf	223,c
  8087   013D8C                     
  8088                           ;carFunctions.c: 140:         txdata[0] = light;
  8089                           ;stkvar	_light @ sp[(-24)+-1]
  8090                           ;stkvar	_txdata @ sp[(-24)+16]
  8091   013D8C  0EE7               	movlw	-25
  8092   013D8E  CFE3 F001          	movff	plusw1,btemp
  8093   013D92  0EF8               	movlw	-8
  8094   013D94  C001  FFE3         	movff	btemp,plusw1
  8095   013D98                     
  8096                           ;carFunctions.c: 141:         CanSend(&txMsg,txdata);
  8097                           ;stkvar	_txdata @ sp[(-24)+16]
  8098   013D98  0EF8               	movlw	248
  8099   013D9A  24E1               	addwf	fsr1l,w,c
  8100   013D9C  6E01               	movwf	btemp^0,c
  8101   013D9E  0EFF               	movlw	255
  8102   013DA0  20E2               	addwfc	fsr1h,w,c
  8103   013DA2  6E02               	movwf	(btemp+1)^0,c
  8104   013DA4  C001  FFE6         	movff	btemp,postinc1
  8105   013DA8  C002  FFE6         	movff	btemp+1,postinc1
  8106                           
  8107                           ;stkvar	_txMsg @ sp[(-26)+0]
  8108   013DAC  0EE6               	movlw	230
  8109   013DAE  24E1               	addwf	fsr1l,w,c
  8110   013DB0  6E01               	movwf	btemp^0,c
  8111   013DB2  0EFF               	movlw	255
  8112   013DB4  20E2               	addwfc	fsr1h,w,c
  8113   013DB6  6E02               	movwf	(btemp+1)^0,c
  8114   013DB8  C001  FFE6         	movff	btemp,postinc1
  8115   013DBC  C002  FFE6         	movff	btemp+1,postinc1
  8116   013DC0  EC95  F09F         	call	_CanSend	;wreg free
  8117   013DC4                     l1472:
  8118                           
  8119                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8120   013DC4  0EE7               	movlw	231
  8121   013DC6  26E1               	addwf	fsr1l,f,c
  8122   013DC8  0EFF               	movlw	255
  8123   013DCA  22E2               	addwfc	fsr1h,f,c
  8124   013DCC  0012               	return		;funcret
  8125   013DCE                     __end_of_lightContol_BackLight:
  8126                           	callstack 0
  8127                           
  8128 ;; *************** function _CanSend *****************
  8129 ;; Defined at:
  8130 ;;		line 217 in file "can/can.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8133 ;;		 -> txMsg(16), 
  8134 ;;  txd             2  [STACK] PTR unsigned char 
  8135 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  txFlags         1  [STACK] enum E5583
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1  [STACK] char 
  8140 ;; Registers used:
  8141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;Total ram usage:        0 bytes
  8152 ;; Hardware stack levels used: 1
  8153 ;; Hardware stack levels required when called: 11
  8154 ;; This function calls:
  8155 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8156 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8157 ;; This function is called by:
  8158 ;;		_motorControl
  8159 ;;		_lightContol_FrontLight
  8160 ;;		_lightContol_BackLight
  8161 ;; This function uses a reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text24
  8165   013F2A                     __ptext24:
  8166                           	callstack 0
  8167   013F2A                     _CanSend:
  8168                           	callstack 0
  8169                           
  8170                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8171   013F2A  52E6               	movf	postinc1,f,c
  8172   013F2C                     
  8173                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8174                           ;stkvar	_txObj @ sp[(-1)+-2]
  8175   013F2C  0EFD               	movlw	-3
  8176   013F2E  CFE3 F00B          	movff	plusw1,btemp+10
  8177   013F32  0EFE               	movlw	-2
  8178   013F34  CFE3 F00C          	movff	plusw1,btemp+11
  8179   013F38  0E08               	movlw	8
  8180   013F3A  240B               	addwf	(btemp+10)^0,w,c
  8181   013F3C  6ED9               	movwf	fsr2l,c
  8182   013F3E  0E00               	movlw	0
  8183   013F40  200C               	addwfc	(btemp+11)^0,w,c
  8184   013F42  6EDA               	movwf	fsr2h,c
  8185   013F44  0E01               	movlw	1
  8186   013F46  6EDE               	movwf	postinc2,c
  8187   013F48  0E00               	movlw	0
  8188   013F4A  6EDE               	movwf	postinc2,c
  8189   013F4C  0E00               	movlw	0
  8190   013F4E  6EDE               	movwf	postinc2,c
  8191   013F50  0E00               	movlw	0
  8192   013F52  6EDD               	movwf	postdec2,c
  8193   013F54                     
  8194                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8195                           ;stkvar	_txFlags @ sp[(-1)+0]
  8196   013F54  0EFF               	movlw	255
  8197   013F56  24E1               	addwf	fsr1l,w,c
  8198   013F58  6E01               	movwf	btemp^0,c
  8199   013F5A  0EFF               	movlw	255
  8200   013F5C  20E2               	addwfc	fsr1h,w,c
  8201   013F5E  6E02               	movwf	(btemp+1)^0,c
  8202   013F60  C001  FFE6         	movff	btemp,postinc1
  8203   013F64  C002  FFE6         	movff	btemp+1,postinc1
  8204   013F68  0E01               	movlw	1
  8205   013F6A  6EE6               	movwf	postinc1,c
  8206   013F6C  EC3C  F0A0         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8207   013F70                     
  8208                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8209                           ;stkvar	_txFlags @ sp[(-1)+0]
  8210   013F70  0EFF               	movlw	-1
  8211   013F72  A0E3               	btfss	plusw1,0,c
  8212   013F74  EFBE  F09F         	goto	u1991
  8213   013F78  EFC0  F09F         	goto	u1990
  8214   013F7C                     u1991:
  8215   013F7C  EFE5  F09F         	goto	l158
  8216   013F80                     u1990:
  8217   013F80                     
  8218                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8219   013F80  0E01               	movlw	1
  8220   013F82  6EE6               	movwf	postinc1,c
  8221                           
  8222                           ;stkvar	_txObj @ sp[(-2)+-2]
  8223   013F84  0EFC               	movlw	-4
  8224   013F86  CFE3 F00B          	movff	plusw1,btemp+10
  8225   013F8A  0EFD               	movlw	-3
  8226   013F8C  CFE3 F00C          	movff	plusw1,btemp+11
  8227   013F90  0E06               	movlw	6
  8228   013F92  240B               	addwf	(btemp+10)^0,w,c
  8229   013F94  6ED9               	movwf	fsr2l,c
  8230   013F96  0E00               	movlw	0
  8231   013F98  200C               	addwfc	(btemp+11)^0,w,c
  8232   013F9A  6EDA               	movwf	fsr2h,c
  8233   013F9C  50DF               	movf	223,w,c
  8234   013F9E  0B0F               	andlw	15
  8235   013FA0  6E0C               	movwf	(btemp+11)^0,c
  8236   013FA2  C00C  FFE6         	movff	btemp+11,postinc1
  8237   013FA6  0E00               	movlw	0
  8238   013FA8  6EE6               	movwf	postinc1,c
  8239   013FAA  6EE6               	movwf	postinc1,c
  8240   013FAC  6EE6               	movwf	postinc1,c
  8241                           
  8242                           ;stkvar	_txd @ sp[(-6)+-4]
  8243   013FAE  0EF6               	movlw	-10
  8244   013FB0  CFE3 FFE6          	movff	plusw1,postinc1
  8245   013FB4  CFE3 FFE6          	movff	plusw1,postinc1
  8246                           
  8247                           ;stkvar	_txObj @ sp[(-8)+-2]
  8248   013FB8  0EF6               	movlw	-10
  8249   013FBA  CFE3 FFE6          	movff	plusw1,postinc1
  8250   013FBE  CFE3 FFE6          	movff	plusw1,postinc1
  8251   013FC2  0E01               	movlw	1
  8252   013FC4  6EE6               	movwf	postinc1,c
  8253   013FC6  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8254   013FCA                     l158:
  8255                           
  8256                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8257   013FCA  0EFB               	movlw	251
  8258   013FCC  26E1               	addwf	fsr1l,f,c
  8259   013FCE  0EFF               	movlw	255
  8260   013FD0  22E2               	addwfc	fsr1h,f,c
  8261   013FD2  0012               	return		;funcret
  8262   013FD4                     __end_of_CanSend:
  8263                           	callstack 0
  8264                           
  8265 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8266 ;; Defined at:
  8267 ;;		line 706 in file "can/can.c"
  8268 ;; Parameters:    Size  Location     Type
  8269 ;;  channel         1  [STACK] enum E5290
  8270 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8271 ;;		 -> txMsg(16), 
  8272 ;;  txd             2  [STACK] PTR unsigned char 
  8273 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8274 ;;  txdNumBytes     4  [STACK] unsigned long 
  8275 ;;  flush           1  [STACK] _Bool 
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;  temp32          4  [STACK] unsigned long 
  8278 ;;  txBuffer       76  [STACK] unsigned char [76]
  8279 ;;  fifoReg        12  [STACK] unsigned long [3]
  8280 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8281 ;;  a               4  [STACK] unsigned long 
  8282 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8283 ;;  dataBytesInO    4  [STACK] unsigned long 
  8284 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8285 ;;  n               2  [STACK] unsigned short 
  8286 ;;  spiTransferE    1  [STACK] char 
  8287 ;;  i               1  [STACK] unsigned char 
  8288 ;;  j               1  [STACK] unsigned char 
  8289 ;; Return value:  Size  Location     Type
  8290 ;;                  1  [STACK] char 
  8291 ;; Registers used:
  8292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;Total ram usage:        0 bytes
  8303 ;; Hardware stack levels used: 1
  8304 ;; Hardware stack levels required when called: 10
  8305 ;; This function calls:
  8306 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8307 ;;		_DRV_CANFDSPI_ReadWordArray
  8308 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8309 ;;		_DRV_CANFDSPI_WriteByteArray
  8310 ;; This function is called by:
  8311 ;;		_CanSend
  8312 ;; This function uses a reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text25
  8316   010000                     __ptext25:
  8317                           	callstack 0
  8318   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8319                           	callstack 0
  8320                           
  8321                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8322   010000  0E72               	movlw	114
  8323   010002  26E1               	addwf	fsr1l,f,c
  8324   010004  0E00               	movlw	0
  8325   010006  22E2               	addwfc	fsr1h,f,c
  8326   010008                     
  8327                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8328                           ;stkvar	_channel @ sp[(-114)+-1]
  8329   010008  0E8D               	movlw	-115
  8330   01000A  50E3               	movf	plusw1,w,c
  8331   01000C  0D0C               	mullw	12
  8332   01000E  0E50               	movlw	80
  8333   010010  26F3               	addwf	243,f,c
  8334   010012  0E00               	movlw	0
  8335   010014  22F4               	addwfc	244,f,c
  8336                           
  8337                           ;stkvar	_a @ sp[(-114)+97]
  8338   010016  0EEF               	movlw	-17
  8339   010018  CFF3 FFE3          	movff	prodl,plusw1
  8340   01001C  0EF0               	movlw	-16
  8341   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8342   010022  0EF1               	movlw	-15
  8343   010024  6AE3               	clrf	plusw1,c
  8344   010026  0EF2               	movlw	-14
  8345   010028  6AE3               	clrf	plusw1,c
  8346   01002A                     
  8347                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8348   01002A  0E03               	movlw	3
  8349   01002C  6EE6               	movwf	postinc1,c
  8350   01002E  0E00               	movlw	0
  8351   010030  6EE6               	movwf	postinc1,c
  8352                           
  8353                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8354   010032  0EDC               	movlw	220
  8355   010034  24E1               	addwf	fsr1l,w,c
  8356   010036  6E01               	movwf	btemp^0,c
  8357   010038  0EFF               	movlw	255
  8358   01003A  20E2               	addwfc	fsr1h,w,c
  8359   01003C  6E02               	movwf	(btemp+1)^0,c
  8360   01003E  C001  FFE6         	movff	btemp,postinc1
  8361   010042  C002  FFE6         	movff	btemp+1,postinc1
  8362                           
  8363                           ;stkvar	_a @ sp[(-118)+97]
  8364   010046  0EEB               	movlw	-21
  8365   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8366   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8367   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8368                           
  8369                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8370   010054  0EFD               	movlw	-3
  8371   010056  C001  FFE3         	movff	btemp,plusw1
  8372   01005A                     
  8373                           ;can/can.c: 722:     if (spiTransferError) {
  8374                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8375   01005A  0EFD               	movlw	-3
  8376   01005C  50E3               	movf	plusw1,w,c
  8377   01005E  B4D8               	btfsc	status,2,c
  8378   010060  EF34  F080         	goto	u1701
  8379   010064  EF36  F080         	goto	u1700
  8380   010068                     u1701:
  8381   010068  EF3A  F080         	goto	l4131
  8382   01006C                     u1700:
  8383   01006C                     
  8384                           ;can/can.c: 723:         return -1;
  8385   01006C  0EFF               	movlw	255
  8386   01006E  6E01               	movwf	btemp^0,c
  8387   010070  EFA1  F083         	goto	l264
  8388   010074                     l4131:
  8389                           
  8390                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8391                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8392   010074  0EDE               	movlw	-34
  8393   010076  CFE3 F009          	movff	plusw1,btemp+8
  8394   01007A  0EDF               	movlw	-33
  8395   01007C  CFE3 F00A          	movff	plusw1,btemp+9
  8396   010080  0EE0               	movlw	-32
  8397   010082  CFE3 F00B          	movff	plusw1,btemp+10
  8398   010086  0EE1               	movlw	-31
  8399   010088  CFE3 F00C          	movff	plusw1,btemp+11
  8400                           
  8401                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8402   01008C  0EEA               	movlw	-22
  8403   01008E  C009  FFE3         	movff	btemp+8,plusw1
  8404   010092  0EEB               	movlw	-21
  8405   010094  C00A  FFE3         	movff	btemp+9,plusw1
  8406   010098  0EEC               	movlw	-20
  8407   01009A  C00B  FFE3         	movff	btemp+10,plusw1
  8408   01009E  0EED               	movlw	-19
  8409   0100A0  C00C  FFE3         	movff	btemp+11,plusw1
  8410   0100A4                     
  8411                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8412                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8413   0100A4  50E1               	movf	fsr1l,w,c
  8414   0100A6  0FEA               	addlw	-22
  8415   0100A8  6ED9               	movwf	fsr2l,c
  8416   0100AA  50E2               	movf	fsr1h,w,c
  8417   0100AC  6EDA               	movwf	fsr2h,c
  8418   0100AE  0EFF               	movlw	255
  8419   0100B0  22DA               	addwfc	fsr2h,f,c
  8420   0100B2  BEDF               	btfsc	indf2,7,c
  8421   0100B4  EF5E  F080         	goto	u1711
  8422   0100B8  EF60  F080         	goto	u1710
  8423   0100BC                     u1711:
  8424   0100BC  EF64  F080         	goto	l4139
  8425   0100C0                     u1710:
  8426   0100C0                     
  8427                           ;can/can.c: 729:         return -2;
  8428   0100C0  0EFE               	movlw	254
  8429   0100C2  6E01               	movwf	btemp^0,c
  8430   0100C4  EFA1  F083         	goto	l264
  8431   0100C8                     l4139:
  8432                           
  8433                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8434                           ;stkvar	_txObj @ sp[(-114)+-3]
  8435   0100C8  0E8B               	movlw	-117
  8436   0100CA  CFE3 F00B          	movff	plusw1,btemp+10
  8437   0100CE  0E8C               	movlw	-116
  8438   0100D0  CFE3 F00C          	movff	plusw1,btemp+11
  8439   0100D4  0E06               	movlw	6
  8440   0100D6  240B               	addwf	(btemp+10)^0,w,c
  8441   0100D8  6ED9               	movwf	fsr2l,c
  8442   0100DA  0E00               	movlw	0
  8443   0100DC  200C               	addwfc	(btemp+11)^0,w,c
  8444   0100DE  6EDA               	movwf	fsr2h,c
  8445   0100E0  50DF               	movf	223,w,c
  8446   0100E2  0B0F               	andlw	15
  8447   0100E4  6EE6               	movwf	postinc1,c
  8448   0100E6  EC39  F090         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  8449                           
  8450                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8451   0100EA  0EF7               	movlw	-9
  8452   0100EC  C001  FFE3         	movff	btemp,plusw1
  8453   0100F0  0EF8               	movlw	-8
  8454   0100F2  C002  FFE3         	movff	btemp+1,plusw1
  8455   0100F6  0EF9               	movlw	-7
  8456   0100F8  C003  FFE3         	movff	btemp+2,plusw1
  8457   0100FC  0EFA               	movlw	-6
  8458   0100FE  C004  FFE3         	movff	btemp+3,plusw1
  8459   010102                     
  8460                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  8461                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8462                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8463   010102  50E1               	movf	fsr1l,w,c
  8464   010104  0FF7               	addlw	-9
  8465   010106  6ED9               	movwf	fsr2l,c
  8466   010108  50E2               	movf	fsr1h,w,c
  8467   01010A  6EDA               	movwf	fsr2h,c
  8468   01010C  0EFF               	movlw	255
  8469   01010E  22DA               	addwfc	fsr2h,f,c
  8470   010110  0E85               	movlw	-123
  8471   010112  50E3               	movf	plusw1,w,c
  8472   010114  5CDE               	subwf	postinc2,w,c
  8473   010116  0E86               	movlw	-122
  8474   010118  50E3               	movf	plusw1,w,c
  8475   01011A  58DE               	subwfb	postinc2,w,c
  8476   01011C  0E87               	movlw	-121
  8477   01011E  50E3               	movf	plusw1,w,c
  8478   010120  58DE               	subwfb	postinc2,w,c
  8479   010122  0E88               	movlw	-120
  8480   010124  50E3               	movf	plusw1,w,c
  8481   010126  58DE               	subwfb	postinc2,w,c
  8482   010128  B0D8               	btfsc	status,0,c
  8483   01012A  EF99  F080         	goto	u1721
  8484   01012E  EF9B  F080         	goto	u1720
  8485   010132                     u1721:
  8486   010132  EF9F  F080         	goto	l4147
  8487   010136                     u1720:
  8488   010136                     
  8489                           ;can/can.c: 735:         return -3;
  8490   010136  0EFD               	movlw	253
  8491   010138  6E01               	movwf	btemp^0,c
  8492   01013A  EFA1  F083         	goto	l264
  8493   01013E                     l4147:
  8494                           
  8495                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  8496                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8497   01013E  0EE6               	movlw	230
  8498   010140  24E1               	addwf	fsr1l,w,c
  8499   010142  6ED9               	movwf	fsr2l,c
  8500   010144  0EFF               	movlw	255
  8501   010146  20E2               	addwfc	fsr1h,w,c
  8502   010148  6EDA               	movwf	fsr2h,c
  8503   01014A  CFDE F009          	movff	postinc2,btemp+8
  8504   01014E  CFDE F00A          	movff	postinc2,btemp+9
  8505   010152  CFDE F00B          	movff	postinc2,btemp+10
  8506   010156  CFDE F00C          	movff	postinc2,btemp+11
  8507                           
  8508                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8509   01015A  0EF3               	movlw	-13
  8510   01015C  C009  FFE3         	movff	btemp+8,plusw1
  8511   010160  0EF4               	movlw	-12
  8512   010162  C00A  FFE3         	movff	btemp+9,plusw1
  8513   010166  0EF5               	movlw	-11
  8514   010168  C00B  FFE3         	movff	btemp+10,plusw1
  8515   01016C  0EF6               	movlw	-10
  8516   01016E  C00C  FFE3         	movff	btemp+11,plusw1
  8517   010172                     
  8518                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  8519                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8520   010172  0EF3               	movlw	-13
  8521   010174  CFE3 F009          	movff	plusw1,btemp+8
  8522   010178  0EF4               	movlw	-12
  8523   01017A  CFE3 F00A          	movff	plusw1,btemp+9
  8524   01017E  0EF5               	movlw	-11
  8525   010180  CFE3 F00B          	movff	plusw1,btemp+10
  8526   010184  0EF6               	movlw	-10
  8527   010186  CFE3 F00C          	movff	plusw1,btemp+11
  8528                           
  8529                           ;stkvar	_a @ sp[(-114)+97]
  8530   01018A  0EEF               	movlw	-17
  8531   01018C  C009  FFE3         	movff	btemp+8,plusw1
  8532   010190  0EF0               	movlw	-16
  8533   010192  C00A  FFE3         	movff	btemp+9,plusw1
  8534   010196  0EF1               	movlw	-15
  8535   010198  C00B  FFE3         	movff	btemp+10,plusw1
  8536   01019C  0EF2               	movlw	-14
  8537   01019E  C00C  FFE3         	movff	btemp+11,plusw1
  8538   0101A2                     
  8539                           ;can/can.c: 748:     a += 0x400;
  8540                           ;stkvar	_a @ sp[(-114)+97]
  8541   0101A2  50E1               	movf	fsr1l,w,c
  8542   0101A4  0FEF               	addlw	-17
  8543   0101A6  6ED9               	movwf	fsr2l,c
  8544   0101A8  50E2               	movf	fsr1h,w,c
  8545   0101AA  6EDA               	movwf	fsr2h,c
  8546   0101AC  0EFF               	movlw	255
  8547   0101AE  22DA               	addwfc	fsr2h,f,c
  8548   0101B0  0E00               	movlw	0
  8549   0101B2  26DE               	addwf	postinc2,f,c
  8550   0101B4  0E04               	movlw	4
  8551   0101B6  22DE               	addwfc	postinc2,f,c
  8552   0101B8  0E00               	movlw	0
  8553   0101BA  22DE               	addwfc	postinc2,f,c
  8554   0101BC  0E00               	movlw	0
  8555   0101BE  22DE               	addwfc	postinc2,f,c
  8556   0101C0                     
  8557                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  8558                           ;stkvar	_txObj @ sp[(-114)+-3]
  8559   0101C0  0E8B               	movlw	-117
  8560   0101C2  CFE3 F00B          	movff	plusw1,btemp+10
  8561   0101C6  0E8C               	movlw	-116
  8562   0101C8  CFE3 F00C          	movff	plusw1,btemp+11
  8563   0101CC  0E06               	movlw	6
  8564   0101CE  240B               	addwf	(btemp+10)^0,w,c
  8565   0101D0  6ED9               	movwf	fsr2l,c
  8566   0101D2  0E00               	movlw	0
  8567   0101D4  200C               	addwfc	(btemp+11)^0,w,c
  8568   0101D6  6EDA               	movwf	fsr2h,c
  8569   0101D8  B8DF               	btfsc	indf2,4,c
  8570   0101DA  EFF1  F080         	goto	u1731
  8571   0101DE  EFF3  F080         	goto	u1730
  8572   0101E2                     u1731:
  8573   0101E2  EF75  F081         	goto	l4163
  8574   0101E6                     u1730:
  8575   0101E6                     
  8576                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  8577                           ;stkvar	_txObj @ sp[(-114)+-3]
  8578   0101E6  0E8B               	movlw	-117
  8579   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8580   0101EC  0E8C               	movlw	-116
  8581   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8582   0101F2  50DF               	movf	indf2,w,c
  8583   0101F4  6E0C               	movwf	(btemp+11)^0,c
  8584                           
  8585                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8586   0101F6  0E92               	movlw	-110
  8587   0101F8  C00C  FFE3         	movff	btemp+11,plusw1
  8588   0101FC                     
  8589                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  8590                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8591   0101FC  0E93               	movlw	147
  8592   0101FE  24E1               	addwf	fsr1l,w,c
  8593   010200  6ED9               	movwf	fsr2l,c
  8594   010202  0EFF               	movlw	255
  8595   010204  20E2               	addwfc	fsr1h,w,c
  8596   010206  6EDA               	movwf	fsr2h,c
  8597                           
  8598                           ;stkvar	_txObj @ sp[(-114)+-3]
  8599   010208  0E8B               	movlw	-117
  8600   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  8601   01020E  0E8C               	movlw	-116
  8602   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  8603   010214  CFEE F009          	movff	postinc0,btemp+8
  8604   010218  CFEE F00A          	movff	postinc0,btemp+9
  8605   01021C  CFEE F00B          	movff	postinc0,btemp+10
  8606   010220  CFEE F00C          	movff	postinc0,btemp+11
  8607   010224  C00A  F009         	movff	btemp+9,btemp+8
  8608   010228  C00B  F00A         	movff	btemp+10,btemp+9
  8609   01022C  C00C  F00B         	movff	btemp+11,btemp+10
  8610   010230  6A0C               	clrf	(btemp+11)^0,c
  8611   010232  5009               	movf	(btemp+8)^0,w,c
  8612   010234  6EDF               	movwf	indf2,c
  8613   010236                     
  8614                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  8615                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8616   010236  0E94               	movlw	148
  8617   010238  24E1               	addwf	fsr1l,w,c
  8618   01023A  6ED9               	movwf	fsr2l,c
  8619   01023C  0EFF               	movlw	255
  8620   01023E  20E2               	addwfc	fsr1h,w,c
  8621   010240  6EDA               	movwf	fsr2h,c
  8622                           
  8623                           ;stkvar	_txObj @ sp[(-114)+-3]
  8624   010242  0E8B               	movlw	-117
  8625   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  8626   010248  0E8C               	movlw	-116
  8627   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  8628   01024E  CFEE F009          	movff	postinc0,btemp+8
  8629   010252  CFEE F00A          	movff	postinc0,btemp+9
  8630   010256  CFEE F00B          	movff	postinc0,btemp+10
  8631   01025A  CFEE F00C          	movff	postinc0,btemp+11
  8632   01025E  0E11               	movlw	17
  8633   010260  EF37  F081         	goto	u1740
  8634   010264                     u1745:
  8635   010264  90D8               	bcf	status,0,c
  8636   010266  320C               	rrcf	(btemp+11)^0,f,c
  8637   010268  320B               	rrcf	(btemp+10)^0,f,c
  8638   01026A  320A               	rrcf	(btemp+9)^0,f,c
  8639   01026C  3209               	rrcf	(btemp+8)^0,f,c
  8640   01026E                     u1740:
  8641   01026E  2EE8               	decfsz	wreg,f,c
  8642   010270  EF32  F081         	goto	u1745
  8643   010274  5009               	movf	(btemp+8)^0,w,c
  8644   010276  6EDF               	movwf	indf2,c
  8645   010278                     
  8646                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  8647                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8648   010278  0E95               	movlw	149
  8649   01027A  24E1               	addwf	fsr1l,w,c
  8650   01027C  6ED9               	movwf	fsr2l,c
  8651   01027E  0EFF               	movlw	255
  8652   010280  20E2               	addwfc	fsr1h,w,c
  8653   010282  6EDA               	movwf	fsr2h,c
  8654                           
  8655                           ;stkvar	_txObj @ sp[(-114)+-3]
  8656   010284  0E8B               	movlw	-117
  8657   010286  CFE3 F00B          	movff	plusw1,btemp+10
  8658   01028A  0E8C               	movlw	-116
  8659   01028C  CFE3 F00C          	movff	plusw1,btemp+11
  8660   010290  0E04               	movlw	4
  8661   010292  240B               	addwf	(btemp+10)^0,w,c
  8662   010294  6EE9               	movwf	fsr0l,c
  8663   010296  0E00               	movlw	0
  8664   010298  200C               	addwfc	(btemp+11)^0,w,c
  8665   01029A  6EEA               	movwf	fsr0h,c
  8666   01029C  50EF               	movf	indf0,w,c
  8667   01029E  6E0C               	movwf	(btemp+11)^0,c
  8668   0102A0  0E05               	movlw	5
  8669   0102A2  6E01               	movwf	btemp^0,c
  8670   0102A4                     u1755:
  8671   0102A4  90D8               	bcf	status,0,c
  8672   0102A6  360C               	rlcf	(btemp+11)^0,f,c
  8673   0102A8  2E01               	decfsz	btemp^0,f,c
  8674   0102AA  EF52  F081         	goto	u1755
  8675                           
  8676                           ;stkvar	_txObj @ sp[(-114)+-3]
  8677   0102AE  0E8B               	movlw	-117
  8678   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8679   0102B4  0E8C               	movlw	-116
  8680   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8681   0102BA  CFEE F005          	movff	postinc0,btemp+4
  8682   0102BE  CFEE F006          	movff	postinc0,btemp+5
  8683   0102C2  CFEE F007          	movff	postinc0,btemp+6
  8684   0102C6  CFEE F008          	movff	postinc0,btemp+7
  8685   0102CA  0E19               	movlw	25
  8686   0102CC  EF6D  F081         	goto	u1760
  8687   0102D0                     u1765:
  8688   0102D0  90D8               	bcf	status,0,c
  8689   0102D2  3208               	rrcf	(btemp+7)^0,f,c
  8690   0102D4  3207               	rrcf	(btemp+6)^0,f,c
  8691   0102D6  3206               	rrcf	(btemp+5)^0,f,c
  8692   0102D8  3205               	rrcf	(btemp+4)^0,f,c
  8693   0102DA                     u1760:
  8694   0102DA  2EE8               	decfsz	wreg,f,c
  8695   0102DC  EF68  F081         	goto	u1765
  8696   0102E0  5005               	movf	(btemp+4)^0,w,c
  8697   0102E2  100C               	iorwf	(btemp+11)^0,w,c
  8698   0102E4  6EDF               	movwf	indf2,c
  8699                           
  8700                           ;can/can.c: 770:     }
  8701   0102E6  EF24  F082         	goto	l4175
  8702   0102EA                     l4163:
  8703                           
  8704                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8705                           ;stkvar	_txObj @ sp[(-114)+-3]
  8706   0102EA  0E8B               	movlw	-117
  8707   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8708   0102F0  0E8C               	movlw	-116
  8709   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8710   0102F6  CFDE F009          	movff	postinc2,btemp+8
  8711   0102FA  CFDE F00A          	movff	postinc2,btemp+9
  8712   0102FE  CFDE F00B          	movff	postinc2,btemp+10
  8713   010302  CFDE F00C          	movff	postinc2,btemp+11
  8714   010306  0E13               	movlw	19
  8715   010308  EF8B  F081         	goto	u1770
  8716   01030C                     u1775:
  8717   01030C  90D8               	bcf	status,0,c
  8718   01030E  320C               	rrcf	(btemp+11)^0,f,c
  8719   010310  320B               	rrcf	(btemp+10)^0,f,c
  8720   010312  320A               	rrcf	(btemp+9)^0,f,c
  8721   010314  3209               	rrcf	(btemp+8)^0,f,c
  8722   010316                     u1770:
  8723   010316  2EE8               	decfsz	wreg,f,c
  8724   010318  EF86  F081         	goto	u1775
  8725   01031C  0EFF               	movlw	255
  8726   01031E  1409               	andwf	(btemp+8)^0,w,c
  8727   010320  6E05               	movwf	(btemp+4)^0,c
  8728   010322  0E07               	movlw	7
  8729   010324  140A               	andwf	(btemp+9)^0,w,c
  8730   010326  6E06               	movwf	(btemp+5)^0,c
  8731   010328  0E00               	movlw	0
  8732   01032A  140B               	andwf	(btemp+10)^0,w,c
  8733   01032C  6E07               	movwf	(btemp+6)^0,c
  8734   01032E  0E00               	movlw	0
  8735   010330  140C               	andwf	(btemp+11)^0,w,c
  8736   010332  6E08               	movwf	(btemp+7)^0,c
  8737                           
  8738                           ;stkvar	_txObj @ sp[(-114)+-3]
  8739   010334  0E8B               	movlw	-117
  8740   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8741   01033A  0E8C               	movlw	-116
  8742   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  8743   010340  0EFF               	movlw	255
  8744   010342  14DE               	andwf	postinc2,w,c
  8745   010344  6E09               	movwf	(btemp+8)^0,c
  8746   010346  0EFF               	movlw	255
  8747   010348  14DE               	andwf	postinc2,w,c
  8748   01034A  6E0A               	movwf	(btemp+9)^0,c
  8749   01034C  0E03               	movlw	3
  8750   01034E  14DE               	andwf	postinc2,w,c
  8751   010350  6E0B               	movwf	(btemp+10)^0,c
  8752   010352  0E00               	movlw	0
  8753   010354  14DE               	andwf	postinc2,w,c
  8754   010356  6E0C               	movwf	(btemp+11)^0,c
  8755   010358  0E0B               	movlw	11
  8756   01035A                     u1785:
  8757   01035A  90D8               	bcf	status,0,c
  8758   01035C  3609               	rlcf	(btemp+8)^0,f,c
  8759   01035E  360A               	rlcf	(btemp+9)^0,f,c
  8760   010360  360B               	rlcf	(btemp+10)^0,f,c
  8761   010362  360C               	rlcf	(btemp+11)^0,f,c
  8762   010364  2EE8               	decfsz	wreg,f,c
  8763   010366  EFAD  F081         	goto	u1785
  8764   01036A  5005               	movf	(btemp+4)^0,w,c
  8765   01036C  1009               	iorwf	(btemp+8)^0,w,c
  8766   01036E  6E01               	movwf	btemp^0,c
  8767   010370  5006               	movf	(btemp+5)^0,w,c
  8768   010372  100A               	iorwf	(btemp+9)^0,w,c
  8769   010374  6E02               	movwf	(btemp+1)^0,c
  8770   010376  5007               	movf	(btemp+6)^0,w,c
  8771   010378  100B               	iorwf	(btemp+10)^0,w,c
  8772   01037A  6E03               	movwf	(btemp+2)^0,c
  8773   01037C  5008               	movf	(btemp+7)^0,w,c
  8774   01037E  100C               	iorwf	(btemp+11)^0,w,c
  8775   010380  6E04               	movwf	(btemp+3)^0,c
  8776                           
  8777                           ;stkvar	_temp32 @ sp[(-114)+0]
  8778   010382  0E8E               	movlw	-114
  8779   010384  C001  FFE3         	movff	btemp,plusw1
  8780   010388  0E8F               	movlw	-113
  8781   01038A  C002  FFE3         	movff	btemp+1,plusw1
  8782   01038E  0E90               	movlw	-112
  8783   010390  C003  FFE3         	movff	btemp+2,plusw1
  8784   010394  0E91               	movlw	-111
  8785   010396  C004  FFE3         	movff	btemp+3,plusw1
  8786   01039A                     
  8787                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  8788                           ;stkvar	_temp32 @ sp[(-114)+0]
  8789   01039A  50E1               	movf	fsr1l,w,c
  8790   01039C  0F8E               	addlw	-114
  8791   01039E  6ED9               	movwf	fsr2l,c
  8792   0103A0  50E2               	movf	fsr1h,w,c
  8793   0103A2  6EDA               	movwf	fsr2h,c
  8794   0103A4  0EFF               	movlw	255
  8795   0103A6  22DA               	addwfc	fsr2h,f,c
  8796   0103A8  0EFF               	movlw	255
  8797   0103AA  16DE               	andwf	postinc2,f,c
  8798   0103AC  0EFF               	movlw	255
  8799   0103AE  16DE               	andwf	postinc2,f,c
  8800   0103B0  0EFF               	movlw	255
  8801   0103B2  16DE               	andwf	postinc2,f,c
  8802   0103B4  0E1F               	movlw	31
  8803   0103B6  16DE               	andwf	postinc2,f,c
  8804   0103B8                     
  8805                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  8806                           ;stkvar	_temp32 @ sp[(-114)+0]
  8807                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8808   0103B8  0E8E               	movlw	-114
  8809   0103BA  CFE3 F001          	movff	plusw1,btemp
  8810   0103BE  0E92               	movlw	-110
  8811   0103C0  C001  FFE3         	movff	btemp,plusw1
  8812   0103C4                     
  8813                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  8814                           ;stkvar	_temp32 @ sp[(-114)+0]
  8815   0103C4  0E8F               	movlw	143
  8816   0103C6  24E1               	addwf	fsr1l,w,c
  8817   0103C8  6ED9               	movwf	fsr2l,c
  8818   0103CA  0EFF               	movlw	255
  8819   0103CC  20E2               	addwfc	fsr1h,w,c
  8820   0103CE  6EDA               	movwf	fsr2h,c
  8821                           
  8822                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8823   0103D0  0E93               	movlw	147
  8824   0103D2  24E1               	addwf	fsr1l,w,c
  8825   0103D4  6EE9               	movwf	fsr0l,c
  8826   0103D6  0EFF               	movlw	255
  8827   0103D8  20E2               	addwfc	fsr1h,w,c
  8828   0103DA  6EEA               	movwf	fsr0h,c
  8829   0103DC  CFDF FFEF          	movff	indf2,indf0
  8830   0103E0                     
  8831                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  8832                           ;stkvar	_temp32 @ sp[(-114)+0]
  8833   0103E0  0E90               	movlw	144
  8834   0103E2  24E1               	addwf	fsr1l,w,c
  8835   0103E4  6ED9               	movwf	fsr2l,c
  8836   0103E6  0EFF               	movlw	255
  8837   0103E8  20E2               	addwfc	fsr1h,w,c
  8838   0103EA  6EDA               	movwf	fsr2h,c
  8839                           
  8840                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8841   0103EC  0E94               	movlw	148
  8842   0103EE  24E1               	addwf	fsr1l,w,c
  8843   0103F0  6EE9               	movwf	fsr0l,c
  8844   0103F2  0EFF               	movlw	255
  8845   0103F4  20E2               	addwfc	fsr1h,w,c
  8846   0103F6  6EEA               	movwf	fsr0h,c
  8847   0103F8  CFDF FFEF          	movff	indf2,indf0
  8848   0103FC                     
  8849                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  8850                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8851   0103FC  0E95               	movlw	149
  8852   0103FE  24E1               	addwf	fsr1l,w,c
  8853   010400  6ED9               	movwf	fsr2l,c
  8854   010402  0EFF               	movlw	255
  8855   010404  20E2               	addwfc	fsr1h,w,c
  8856   010406  6EDA               	movwf	fsr2h,c
  8857                           
  8858                           ;stkvar	_temp32 @ sp[(-114)+0]
  8859   010408  0E91               	movlw	145
  8860   01040A  24E1               	addwf	fsr1l,w,c
  8861   01040C  6EE9               	movwf	fsr0l,c
  8862   01040E  0EFF               	movlw	255
  8863   010410  20E2               	addwfc	fsr1h,w,c
  8864   010412  6EEA               	movwf	fsr0h,c
  8865   010414  50EF               	movf	indf0,w,c
  8866   010416  6E0C               	movwf	(btemp+11)^0,c
  8867                           
  8868                           ;stkvar	_txObj @ sp[(-114)+-3]
  8869   010418  0E8B               	movlw	-117
  8870   01041A  CFE3 F009          	movff	plusw1,btemp+8
  8871   01041E  0E8C               	movlw	-116
  8872   010420  CFE3 F00A          	movff	plusw1,btemp+9
  8873   010424  0E04               	movlw	4
  8874   010426  2409               	addwf	(btemp+8)^0,w,c
  8875   010428  6EE9               	movwf	fsr0l,c
  8876   01042A  0E00               	movlw	0
  8877   01042C  200A               	addwfc	(btemp+9)^0,w,c
  8878   01042E  6EEA               	movwf	fsr0h,c
  8879   010430  50EF               	movf	indf0,w,c
  8880   010432  6E0B               	movwf	(btemp+10)^0,c
  8881   010434  0E05               	movlw	5
  8882   010436  6E01               	movwf	btemp^0,c
  8883   010438                     u1795:
  8884   010438  90D8               	bcf	status,0,c
  8885   01043A  360B               	rlcf	(btemp+10)^0,f,c
  8886   01043C  2E01               	decfsz	btemp^0,f,c
  8887   01043E  EF1C  F082         	goto	u1795
  8888   010442  500B               	movf	(btemp+10)^0,w,c
  8889   010444  100C               	iorwf	(btemp+11)^0,w,c
  8890   010446  6EDF               	movwf	indf2,c
  8891   010448                     l4175:
  8892                           
  8893                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  8894                           ;stkvar	_txObj @ sp[(-114)+-3]
  8895   010448  0E8B               	movlw	-117
  8896   01044A  CFE3 F00B          	movff	plusw1,btemp+10
  8897   01044E  0E8C               	movlw	-116
  8898   010450  CFE3 F00C          	movff	plusw1,btemp+11
  8899   010454  0E06               	movlw	6
  8900   010456  240B               	addwf	(btemp+10)^0,w,c
  8901   010458  6ED9               	movwf	fsr2l,c
  8902   01045A  0E00               	movlw	0
  8903   01045C  200C               	addwfc	(btemp+11)^0,w,c
  8904   01045E  6EDA               	movwf	fsr2h,c
  8905                           
  8906                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8907   010460  0E96               	movlw	150
  8908   010462  24E1               	addwf	fsr1l,w,c
  8909   010464  6EE9               	movwf	fsr0l,c
  8910   010466  0EFF               	movlw	255
  8911   010468  20E2               	addwfc	fsr1h,w,c
  8912   01046A  6EEA               	movwf	fsr0h,c
  8913   01046C  CFDF FFEF          	movff	indf2,indf0
  8914   010470                     
  8915                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  8916                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8917   010470  0E97               	movlw	151
  8918   010472  24E1               	addwf	fsr1l,w,c
  8919   010474  6ED9               	movwf	fsr2l,c
  8920   010476  0EFF               	movlw	255
  8921   010478  20E2               	addwfc	fsr1h,w,c
  8922   01047A  6EDA               	movwf	fsr2h,c
  8923                           
  8924                           ;stkvar	_txObj @ sp[(-114)+-3]
  8925   01047C  0E8B               	movlw	-117
  8926   01047E  CFE3 F00B          	movff	plusw1,btemp+10
  8927   010482  0E8C               	movlw	-116
  8928   010484  CFE3 F00C          	movff	plusw1,btemp+11
  8929   010488  0E07               	movlw	7
  8930   01048A  240B               	addwf	(btemp+10)^0,w,c
  8931   01048C  6EE9               	movwf	fsr0l,c
  8932   01048E  0E00               	movlw	0
  8933   010490  200C               	addwfc	(btemp+11)^0,w,c
  8934   010492  6EEA               	movwf	fsr0h,c
  8935   010494  50EF               	movf	indf0,w,c
  8936   010496  6E0C               	movwf	(btemp+11)^0,c
  8937                           
  8938                           ;stkvar	_txObj @ sp[(-114)+-3]
  8939   010498  0E8B               	movlw	-117
  8940   01049A  CFE3 F009          	movff	plusw1,btemp+8
  8941   01049E  0E8C               	movlw	-116
  8942   0104A0  CFE3 F00A          	movff	plusw1,btemp+9
  8943   0104A4  0E08               	movlw	8
  8944   0104A6  2409               	addwf	(btemp+8)^0,w,c
  8945   0104A8  6EE9               	movwf	fsr0l,c
  8946   0104AA  0E00               	movlw	0
  8947   0104AC  200A               	addwfc	(btemp+9)^0,w,c
  8948   0104AE  6EEA               	movwf	fsr0h,c
  8949   0104B0  50EF               	movf	indf0,w,c
  8950   0104B2  6E0B               	movwf	(btemp+10)^0,c
  8951   0104B4  90D8               	bcf	status,0,c
  8952   0104B6  340B               	rlcf	(btemp+10)^0,w,c
  8953   0104B8  100C               	iorwf	(btemp+11)^0,w,c
  8954   0104BA  6EDF               	movwf	indf2,c
  8955   0104BC                     
  8956                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  8957                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8958   0104BC  0E98               	movlw	152
  8959   0104BE  24E1               	addwf	fsr1l,w,c
  8960   0104C0  6ED9               	movwf	fsr2l,c
  8961   0104C2  0EFF               	movlw	255
  8962   0104C4  20E2               	addwfc	fsr1h,w,c
  8963   0104C6  6EDA               	movwf	fsr2h,c
  8964                           
  8965                           ;stkvar	_txObj @ sp[(-114)+-3]
  8966   0104C8  0E8B               	movlw	-117
  8967   0104CA  CFE3 F00B          	movff	plusw1,btemp+10
  8968   0104CE  0E8C               	movlw	-116
  8969   0104D0  CFE3 F00C          	movff	plusw1,btemp+11
  8970   0104D4  0E08               	movlw	8
  8971   0104D6  240B               	addwf	(btemp+10)^0,w,c
  8972   0104D8  6EE9               	movwf	fsr0l,c
  8973   0104DA  0E00               	movlw	0
  8974   0104DC  200C               	addwfc	(btemp+11)^0,w,c
  8975   0104DE  6EEA               	movwf	fsr0h,c
  8976   0104E0  CFEE F009          	movff	postinc0,btemp+8
  8977   0104E4  CFEE F00A          	movff	postinc0,btemp+9
  8978   0104E8  CFEE F00B          	movff	postinc0,btemp+10
  8979   0104EC  CFEE F00C          	movff	postinc0,btemp+11
  8980   0104F0  0E08               	movlw	8
  8981   0104F2  EF80  F082         	goto	u1800
  8982   0104F6                     u1805:
  8983   0104F6  90D8               	bcf	status,0,c
  8984   0104F8  320C               	rrcf	(btemp+11)^0,f,c
  8985   0104FA  320B               	rrcf	(btemp+10)^0,f,c
  8986   0104FC  320A               	rrcf	(btemp+9)^0,f,c
  8987   0104FE  3209               	rrcf	(btemp+8)^0,f,c
  8988   010500                     u1800:
  8989   010500  2EE8               	decfsz	wreg,f,c
  8990   010502  EF7B  F082         	goto	u1805
  8991   010506  5009               	movf	(btemp+8)^0,w,c
  8992   010508  6EDF               	movwf	indf2,c
  8993   01050A                     
  8994                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  8995                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8996   01050A  0E99               	movlw	153
  8997   01050C  24E1               	addwf	fsr1l,w,c
  8998   01050E  6ED9               	movwf	fsr2l,c
  8999   010510  0EFF               	movlw	255
  9000   010512  20E2               	addwfc	fsr1h,w,c
  9001   010514  6EDA               	movwf	fsr2h,c
  9002                           
  9003                           ;stkvar	_txObj @ sp[(-114)+-3]
  9004   010516  0E8B               	movlw	-117
  9005   010518  CFE3 F00B          	movff	plusw1,btemp+10
  9006   01051C  0E8C               	movlw	-116
  9007   01051E  CFE3 F00C          	movff	plusw1,btemp+11
  9008   010522  0E08               	movlw	8
  9009   010524  240B               	addwf	(btemp+10)^0,w,c
  9010   010526  6EE9               	movwf	fsr0l,c
  9011   010528  0E00               	movlw	0
  9012   01052A  200C               	addwfc	(btemp+11)^0,w,c
  9013   01052C  6EEA               	movwf	fsr0h,c
  9014   01052E  CFEE F009          	movff	postinc0,btemp+8
  9015   010532  CFEE F00A          	movff	postinc0,btemp+9
  9016   010536  CFEE F00B          	movff	postinc0,btemp+10
  9017   01053A  CFEE F00C          	movff	postinc0,btemp+11
  9018   01053E  0E10               	movlw	16
  9019   010540  EFA7  F082         	goto	u1810
  9020   010544                     u1815:
  9021   010544  90D8               	bcf	status,0,c
  9022   010546  320C               	rrcf	(btemp+11)^0,f,c
  9023   010548  320B               	rrcf	(btemp+10)^0,f,c
  9024   01054A  320A               	rrcf	(btemp+9)^0,f,c
  9025   01054C  3209               	rrcf	(btemp+8)^0,f,c
  9026   01054E                     u1810:
  9027   01054E  2EE8               	decfsz	wreg,f,c
  9028   010550  EFA2  F082         	goto	u1815
  9029   010554  5009               	movf	(btemp+8)^0,w,c
  9030   010556  6EDF               	movwf	indf2,c
  9031   010558                     
  9032                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9033                           ;stkvar	_i @ sp[(-114)+112]
  9034   010558  0EFE               	movlw	-2
  9035   01055A  6AE3               	clrf	plusw1,c
  9036   01055C  EFD7  F082         	goto	l4189
  9037   010560                     l4185:
  9038                           
  9039                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9040                           ;stkvar	_i @ sp[(-114)+112]
  9041   010560  0EFE               	movlw	-2
  9042   010562  CFE3 F00C          	movff	plusw1,btemp+11
  9043                           
  9044                           ;stkvar	_txd @ sp[(-114)+-5]
  9045   010566  0E89               	movlw	-119
  9046   010568  CFE3 F009          	movff	plusw1,btemp+8
  9047   01056C  0E8A               	movlw	-118
  9048   01056E  CFE3 F00A          	movff	plusw1,btemp+9
  9049   010572  500C               	movf	(btemp+11)^0,w,c
  9050   010574  2409               	addwf	(btemp+8)^0,w,c
  9051   010576  6ED9               	movwf	fsr2l,c
  9052   010578  0E00               	movlw	0
  9053   01057A  200A               	addwfc	(btemp+9)^0,w,c
  9054   01057C  6EDA               	movwf	fsr2h,c
  9055                           
  9056                           ;stkvar	_i @ sp[(-114)+112]
  9057   01057E  0EFE               	movlw	-2
  9058   010580  50E3               	movf	plusw1,w,c
  9059   010582  6E0B               	movwf	(btemp+10)^0,c
  9060   010584  6A0C               	clrf	(btemp+11)^0,c
  9061   010586  0E08               	movlw	8
  9062   010588  260B               	addwf	(btemp+10)^0,f,c
  9063   01058A  0E00               	movlw	0
  9064   01058C  220C               	addwfc	(btemp+11)^0,f,c
  9065                           
  9066                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9067   01058E  0E92               	movlw	146
  9068   010590  24E1               	addwf	fsr1l,w,c
  9069   010592  6E09               	movwf	(btemp+8)^0,c
  9070   010594  0EFF               	movlw	255
  9071   010596  20E2               	addwfc	fsr1h,w,c
  9072   010598  6E0A               	movwf	(btemp+9)^0,c
  9073   01059A  500B               	movf	(btemp+10)^0,w,c
  9074   01059C  2409               	addwf	(btemp+8)^0,w,c
  9075   01059E  6EE9               	movwf	fsr0l,c
  9076   0105A0  500C               	movf	(btemp+11)^0,w,c
  9077   0105A2  200A               	addwfc	(btemp+9)^0,w,c
  9078   0105A4  6EEA               	movwf	fsr0h,c
  9079   0105A6  CFDF FFEF          	movff	indf2,indf0
  9080   0105AA                     
  9081                           ;can/can.c: 790:     }
  9082                           ;stkvar	_i @ sp[(-114)+112]
  9083   0105AA  0EFE               	movlw	-2
  9084   0105AC  2AE3               	incf	plusw1,f,c
  9085   0105AE                     l4189:
  9086                           
  9087                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9088                           ;stkvar	_i @ sp[(-114)+112]
  9089   0105AE  0EFE               	movlw	-2
  9090   0105B0  CFE3 F00C          	movff	plusw1,btemp+11
  9091   0105B4  C00C  F005         	movff	btemp+11,btemp+4
  9092   0105B8  6A06               	clrf	(btemp+5)^0,c
  9093   0105BA  6A07               	clrf	(btemp+6)^0,c
  9094   0105BC  6A08               	clrf	(btemp+7)^0,c
  9095   0105BE  0E85               	movlw	-123
  9096   0105C0  50E3               	movf	plusw1,w,c
  9097   0105C2  5C05               	subwf	(btemp+4)^0,w,c
  9098   0105C4  0E86               	movlw	-122
  9099   0105C6  50E3               	movf	plusw1,w,c
  9100   0105C8  5806               	subwfb	(btemp+5)^0,w,c
  9101   0105CA  0E87               	movlw	-121
  9102   0105CC  50E3               	movf	plusw1,w,c
  9103   0105CE  5807               	subwfb	(btemp+6)^0,w,c
  9104   0105D0  0E88               	movlw	-120
  9105   0105D2  50E3               	movf	plusw1,w,c
  9106   0105D4  5808               	subwfb	(btemp+7)^0,w,c
  9107   0105D6  A0D8               	btfss	status,0,c
  9108   0105D8  EFF0  F082         	goto	u1821
  9109   0105DC  EFF2  F082         	goto	u1820
  9110   0105E0                     u1821:
  9111   0105E0  EFB0  F082         	goto	l4185
  9112   0105E4                     u1820:
  9113   0105E4                     
  9114                           ;can/can.c: 793:     uint16_t n = 0;
  9115                           ;stkvar	_n @ sp[(-114)+109]
  9116   0105E4  0EFB               	movlw	-5
  9117   0105E6  6AE3               	clrf	plusw1,c
  9118   0105E8  0EFC               	movlw	-4
  9119   0105EA  6AE3               	clrf	plusw1,c
  9120   0105EC                     
  9121                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9122                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9123   0105EC  0E85               	movlw	-123
  9124   0105EE  CFE3 F00C          	movff	plusw1,btemp+11
  9125   0105F2  0E03               	movlw	3
  9126   0105F4  160C               	andwf	(btemp+11)^0,f,c
  9127   0105F6  B4D8               	btfsc	status,2,c
  9128   0105F8  EF00  F083         	goto	u1831
  9129   0105FC  EF02  F083         	goto	u1830
  9130   010600                     u1831:
  9131   010600  EF51  F083         	goto	l4209
  9132   010604                     u1830:
  9133   010604                     
  9134                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9135                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9136   010604  0E85               	movlw	-123
  9137   010606  CFE3 F00B          	movff	plusw1,btemp+10
  9138   01060A  0E86               	movlw	-122
  9139   01060C  CFE3 F00C          	movff	plusw1,btemp+11
  9140   010610  0E03               	movlw	3
  9141   010612  160B               	andwf	(btemp+10)^0,f,c
  9142   010614  0E00               	movlw	0
  9143   010616  160C               	andwf	(btemp+11)^0,f,c
  9144   010618  500B               	movf	(btemp+10)^0,w,c
  9145   01061A  0804               	sublw	4
  9146   01061C  6E09               	movwf	(btemp+8)^0,c
  9147   01061E  500C               	movf	(btemp+11)^0,w,c
  9148   010620  A0D8               	btfss	status,0,c
  9149   010622  2AE8               	incf	wreg,f,c
  9150   010624  0800               	sublw	0
  9151   010626  6E0A               	movwf	(btemp+9)^0,c
  9152                           
  9153                           ;stkvar	_n @ sp[(-114)+109]
  9154   010628  0EFB               	movlw	-5
  9155   01062A  C009  FFE3         	movff	btemp+8,plusw1
  9156   01062E  0EFC               	movlw	-4
  9157   010630  C00A  FFE3         	movff	btemp+9,plusw1
  9158   010634                     
  9159                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9160   010634  0E08               	movlw	8
  9161   010636  6E0C               	movwf	(btemp+11)^0,c
  9162                           
  9163                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9164   010638  0E85               	movlw	-123
  9165   01063A  50E3               	movf	plusw1,w,c
  9166   01063C  240C               	addwf	(btemp+11)^0,w,c
  9167   01063E  6E0B               	movwf	(btemp+10)^0,c
  9168                           
  9169                           ;stkvar	_i @ sp[(-114)+112]
  9170   010640  0EFE               	movlw	-2
  9171   010642  C00B  FFE3         	movff	btemp+10,plusw1
  9172   010646                     
  9173                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9174                           ;stkvar	_j @ sp[(-114)+113]
  9175   010646  0EFF               	movlw	-1
  9176   010648  6AE3               	clrf	plusw1,c
  9177   01064A  EF40  F083         	goto	l4207
  9178   01064E                     l4203:
  9179                           
  9180                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9181                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9182   01064E  0E92               	movlw	146
  9183   010650  24E1               	addwf	fsr1l,w,c
  9184   010652  6E0B               	movwf	(btemp+10)^0,c
  9185   010654  0EFF               	movlw	255
  9186   010656  20E2               	addwfc	fsr1h,w,c
  9187   010658  6E0C               	movwf	(btemp+11)^0,c
  9188                           
  9189                           ;stkvar	_i @ sp[(-114)+112]
  9190   01065A  0EFE               	movlw	-2
  9191   01065C  50E3               	movf	plusw1,w,c
  9192   01065E  260B               	addwf	(btemp+10)^0,f,c
  9193   010660  0E00               	movlw	0
  9194   010662  220C               	addwfc	(btemp+11)^0,f,c
  9195                           
  9196                           ;stkvar	_j @ sp[(-114)+113]
  9197   010664  0EFF               	movlw	-1
  9198   010666  50E3               	movf	plusw1,w,c
  9199   010668  260B               	addwf	(btemp+10)^0,f,c
  9200   01066A  0E00               	movlw	0
  9201   01066C  220C               	addwfc	(btemp+11)^0,f,c
  9202   01066E  0E08               	movlw	8
  9203   010670  240B               	addwf	(btemp+10)^0,w,c
  9204   010672  6ED9               	movwf	fsr2l,c
  9205   010674  0E00               	movlw	0
  9206   010676  200C               	addwfc	(btemp+11)^0,w,c
  9207   010678  6EDA               	movwf	fsr2h,c
  9208   01067A  6ADF               	clrf	indf2,c
  9209   01067C                     
  9210                           ;can/can.c: 803:         }
  9211                           ;stkvar	_j @ sp[(-114)+113]
  9212   01067C  0EFF               	movlw	-1
  9213   01067E  2AE3               	incf	plusw1,f,c
  9214   010680                     l4207:
  9215                           
  9216                           ;stkvar	_n @ sp[(-114)+109]
  9217                           ;stkvar	_j @ sp[(-114)+113]
  9218   010680  0EFF               	movlw	-1
  9219   010682  50E3               	movf	plusw1,w,c
  9220   010684  6E0B               	movwf	(btemp+10)^0,c
  9221   010686  6A0C               	clrf	(btemp+11)^0,c
  9222   010688  0EFB               	movlw	-5
  9223   01068A  50E3               	movf	plusw1,w,c
  9224   01068C  5C0B               	subwf	(btemp+10)^0,w,c
  9225   01068E  0EFC               	movlw	-4
  9226   010690  50E3               	movf	plusw1,w,c
  9227   010692  580C               	subwfb	(btemp+11)^0,w,c
  9228   010694  A0D8               	btfss	status,0,c
  9229   010696  EF4F  F083         	goto	u1841
  9230   01069A  EF51  F083         	goto	u1840
  9231   01069E                     u1841:
  9232   01069E  EF27  F083         	goto	l4203
  9233   0106A2                     u1840:
  9234   0106A2                     l4209:
  9235                           
  9236                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9237                           ;stkvar	_n @ sp[(-114)+109]
  9238                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9239   0106A2  0E85               	movlw	-123
  9240   0106A4  CFE3 F00B          	movff	plusw1,btemp+10
  9241   0106A8  0E86               	movlw	-122
  9242   0106AA  CFE3 F00C          	movff	plusw1,btemp+11
  9243   0106AE  0EFB               	movlw	-5
  9244   0106B0  50E3               	movf	plusw1,w,c
  9245   0106B2  260B               	addwf	(btemp+10)^0,f,c
  9246   0106B4  0EFC               	movlw	-4
  9247   0106B6  50E3               	movf	plusw1,w,c
  9248   0106B8  220C               	addwfc	(btemp+11)^0,f,c
  9249   0106BA  0E08               	movlw	8
  9250   0106BC  260B               	addwf	(btemp+10)^0,f,c
  9251   0106BE  0E00               	movlw	0
  9252   0106C0  220C               	addwfc	(btemp+11)^0,f,c
  9253   0106C2  C00B  FFE6         	movff	btemp+10,postinc1
  9254   0106C6  C00C  FFE6         	movff	btemp+11,postinc1
  9255                           
  9256                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9257   0106CA  0E90               	movlw	144
  9258   0106CC  24E1               	addwf	fsr1l,w,c
  9259   0106CE  6E01               	movwf	btemp^0,c
  9260   0106D0  0EFF               	movlw	255
  9261   0106D2  20E2               	addwfc	fsr1h,w,c
  9262   0106D4  6E02               	movwf	(btemp+1)^0,c
  9263   0106D6  C001  FFE6         	movff	btemp,postinc1
  9264   0106DA  C002  FFE6         	movff	btemp+1,postinc1
  9265                           
  9266                           ;stkvar	_a @ sp[(-118)+97]
  9267   0106DE  0EEB               	movlw	-21
  9268   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9269   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9270   0106E8  EC1D  F099         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9271                           
  9272                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9273   0106EC  0EFD               	movlw	-3
  9274   0106EE  C001  FFE3         	movff	btemp,plusw1
  9275   0106F2                     
  9276                           ;can/can.c: 807:     if (spiTransferError) {
  9277                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9278   0106F2  0EFD               	movlw	-3
  9279   0106F4  50E3               	movf	plusw1,w,c
  9280   0106F6  B4D8               	btfsc	status,2,c
  9281   0106F8  EF80  F083         	goto	u1851
  9282   0106FC  EF82  F083         	goto	u1850
  9283   010700                     u1851:
  9284   010700  EF86  F083         	goto	l4217
  9285   010704                     u1850:
  9286   010704                     
  9287                           ;can/can.c: 808:         return -4;
  9288   010704  0EFC               	movlw	252
  9289   010706  6E01               	movwf	btemp^0,c
  9290   010708  EFA1  F083         	goto	l264
  9291   01070C                     l4217:
  9292                           
  9293                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9294                           ;stkvar	_flush @ sp[(-114)+-10]
  9295   01070C  0E84               	movlw	-124
  9296   01070E  50E3               	movf	plusw1,w,c
  9297   010710  6EE6               	movwf	postinc1,c
  9298                           
  9299                           ;stkvar	_channel @ sp[(-115)+-1]
  9300   010712  0E8C               	movlw	-116
  9301   010714  50E3               	movf	plusw1,w,c
  9302   010716  6EE6               	movwf	postinc1,c
  9303   010718  EC3E  F09F         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9304                           
  9305                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9306   01071C  0EFD               	movlw	-3
  9307   01071E  C001  FFE3         	movff	btemp,plusw1
  9308   010722                     
  9309                           ;can/can.c: 813:     if (spiTransferError) {
  9310                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9311   010722  0EFD               	movlw	-3
  9312   010724  50E3               	movf	plusw1,w,c
  9313   010726  B4D8               	btfsc	status,2,c
  9314   010728  EF98  F083         	goto	u1861
  9315   01072C  EF9A  F083         	goto	u1860
  9316   010730                     u1861:
  9317   010730  EF9E  F083         	goto	l4225
  9318   010734                     u1860:
  9319   010734                     
  9320                           ;can/can.c: 814:         return -5;
  9321   010734  0EFB               	movlw	251
  9322   010736  6E01               	movwf	btemp^0,c
  9323   010738  EFA1  F083         	goto	l264
  9324   01073C                     l4225:
  9325                           
  9326                           ;can/can.c: 817:     return spiTransferError;
  9327                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9328   01073C  0EFD               	movlw	-3
  9329   01073E  CFE3 F001          	movff	plusw1,btemp
  9330   010742                     l264:
  9331                           
  9332                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9333   010742  0E84               	movlw	132
  9334   010744  26E1               	addwf	fsr1l,f,c
  9335   010746  0EFF               	movlw	255
  9336   010748  22E2               	addwfc	fsr1h,f,c
  9337   01074A  0012               	return		;funcret
  9338   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9339                           	callstack 0
  9340                           
  9341 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9342 ;; Defined at:
  9343 ;;		line 383 in file "can/can.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;  address         2  [STACK] unsigned short 
  9346 ;;  txd             2  [STACK] PTR unsigned char 
  9347 ;;		 -> txd(200), txBuffer(76), 
  9348 ;;  nBytes          2  [STACK] unsigned short 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  i               2  [STACK] unsigned short 
  9351 ;;  spiTransferS    2  [STACK] unsigned short 
  9352 ;;  spiTransferE    1  [STACK] char 
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1  [STACK] char 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;Total ram usage:        0 bytes
  9367 ;; Hardware stack levels used: 1
  9368 ;; Hardware stack levels required when called: 8
  9369 ;; This function calls:
  9370 ;;		_SpiTransfer
  9371 ;; This function is called by:
  9372 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9373 ;; This function uses a reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text26
  9377   01323A                     __ptext26:
  9378                           	callstack 0
  9379   01323A                     _DRV_CANFDSPI_WriteByteArray:
  9380                           	callstack 0
  9381                           
  9382                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9383   01323A  0E05               	movlw	5
  9384   01323C  26E1               	addwf	fsr1l,f,c
  9385   01323E  0E00               	movlw	0
  9386   013240  22E2               	addwfc	fsr1h,f,c
  9387   013242                     
  9388                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9389                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9390   013242  0EF5               	movlw	-11
  9391   013244  50E3               	movf	plusw1,w,c
  9392   013246  0F02               	addlw	2
  9393   013248  6E0B               	movwf	(btemp+10)^0,c
  9394   01324A  0EF6               	movlw	-10
  9395   01324C  CFE3 F00C          	movff	plusw1,btemp+11
  9396   013250  0E00               	movlw	0
  9397   013252  220C               	addwfc	(btemp+11)^0,f,c
  9398                           
  9399                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9400   013254  0EFD               	movlw	-3
  9401   013256  C00B  FFE3         	movff	btemp+10,plusw1
  9402   01325A  0EFE               	movlw	-2
  9403   01325C  C00C  FFE3         	movff	btemp+11,plusw1
  9404   013260                     
  9405                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9406                           ;stkvar	_address @ sp[(-5)+-2]
  9407   013260  0EFA               	movlw	250
  9408   013262  24E1               	addwf	fsr1l,w,c
  9409   013264  6ED9               	movwf	fsr2l,c
  9410   013266  0EFF               	movlw	255
  9411   013268  20E2               	addwfc	fsr1h,w,c
  9412   01326A  6EDA               	movwf	fsr2h,c
  9413   01326C  50DF               	movf	indf2,w,c
  9414   01326E  0B0F               	andlw	15
  9415   013270  0F20               	addlw	32
  9416   013272  0101               	movlb	1	; () banked
  9417   013274  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9418   013276                     
  9419                           ; BSR set to: 1
  9420                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9421                           ;stkvar	_address @ sp[(-5)+-2]
  9422   013276  0EF9               	movlw	-7
  9423   013278  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9424   01327C                     
  9425                           ; BSR set to: 1
  9426                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9427   01327C  0E02               	movlw	2
  9428   01327E  6E0B               	movwf	(btemp+10)^0,c
  9429   013280  0E00               	movlw	0
  9430   013282  6E0C               	movwf	(btemp+11)^0,c
  9431                           
  9432                           ;stkvar	_i @ sp[(-5)+0]
  9433   013284  0EFB               	movlw	-5
  9434   013286  C00B  FFE3         	movff	btemp+10,plusw1
  9435   01328A  0EFC               	movlw	-4
  9436   01328C  C00C  FFE3         	movff	btemp+11,plusw1
  9437   013290  EF79  F099         	goto	l4015
  9438   013294                     l4011:
  9439                           
  9440                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9441                           ;stkvar	_i @ sp[(-5)+0]
  9442                           ;stkvar	_txd @ sp[(-5)+-4]
  9443   013294  0EF7               	movlw	-9
  9444   013296  CFE3 F00B          	movff	plusw1,btemp+10
  9445   01329A  0EF8               	movlw	-8
  9446   01329C  CFE3 F00C          	movff	plusw1,btemp+11
  9447   0132A0  0EFB               	movlw	-5
  9448   0132A2  50E3               	movf	plusw1,w,c
  9449   0132A4  260B               	addwf	(btemp+10)^0,f,c
  9450   0132A6  0EFC               	movlw	-4
  9451   0132A8  50E3               	movf	plusw1,w,c
  9452   0132AA  220C               	addwfc	(btemp+11)^0,f,c
  9453   0132AC  0EFE               	movlw	254
  9454   0132AE  240B               	addwf	(btemp+10)^0,w,c
  9455   0132B0  6ED9               	movwf	fsr2l,c
  9456   0132B2  0EFF               	movlw	255
  9457   0132B4  200C               	addwfc	(btemp+11)^0,w,c
  9458   0132B6  6EDA               	movwf	fsr2h,c
  9459                           
  9460                           ;stkvar	_i @ sp[(-5)+0]
  9461   0132B8  0EFB               	movlw	-5
  9462   0132BA  CFE3 F00B          	movff	plusw1,btemp+10
  9463   0132BE  0EFC               	movlw	-4
  9464   0132C0  CFE3 F00C          	movff	plusw1,btemp+11
  9465   0132C4  0E00               	movlw	low _spiTransmitBuffer
  9466   0132C6  240B               	addwf	(btemp+10)^0,w,c
  9467   0132C8  6EE9               	movwf	fsr0l,c
  9468   0132CA  0E01               	movlw	high _spiTransmitBuffer
  9469   0132CC  200C               	addwfc	(btemp+11)^0,w,c
  9470   0132CE  6EEA               	movwf	fsr0h,c
  9471   0132D0  CFDF FFEF          	movff	indf2,indf0
  9472   0132D4                     
  9473                           ;can/can.c: 397:     }
  9474                           ;stkvar	_i @ sp[(-5)+0]
  9475   0132D4  0EFB               	movlw	-5
  9476   0132D6  50E3               	movf	plusw1,w,c
  9477   0132D8  0F01               	addlw	1
  9478   0132DA  6E01               	movwf	btemp^0,c
  9479   0132DC  0EFB               	movlw	-5
  9480   0132DE  C001  FFE3         	movff	btemp,plusw1
  9481   0132E2  6A01               	clrf	btemp^0,c
  9482   0132E4  0EFC               	movlw	-4
  9483   0132E6  50E3               	movf	plusw1,w,c
  9484   0132E8  2001               	addwfc	btemp^0,w,c
  9485   0132EA  6E01               	movwf	btemp^0,c
  9486   0132EC  0EFC               	movlw	-4
  9487   0132EE  C001  FFE3         	movff	btemp,plusw1
  9488   0132F2                     l4015:
  9489                           
  9490                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9491   0132F2  0EFD               	movlw	-3
  9492   0132F4  CFE3 F00B          	movff	plusw1,btemp+10
  9493   0132F8  0EFE               	movlw	-2
  9494   0132FA  CFE3 F00C          	movff	plusw1,btemp+11
  9495                           
  9496                           ;stkvar	_i @ sp[(-5)+0]
  9497   0132FE  0EFB               	movlw	-5
  9498   013300  CFE3 F009          	movff	plusw1,btemp+8
  9499   013304  0EFC               	movlw	-4
  9500   013306  CFE3 F00A          	movff	plusw1,btemp+9
  9501   01330A  500B               	movf	(btemp+10)^0,w,c
  9502   01330C  5C09               	subwf	(btemp+8)^0,w,c
  9503   01330E  500C               	movf	(btemp+11)^0,w,c
  9504   013310  580A               	subwfb	(btemp+9)^0,w,c
  9505   013312  A0D8               	btfss	status,0,c
  9506   013314  EF8E  F099         	goto	u1621
  9507   013318  EF90  F099         	goto	u1620
  9508   01331C                     u1621:
  9509   01331C  EF4A  F099         	goto	l4011
  9510   013320                     u1620:
  9511   013320                     
  9512                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  9513                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9514   013320  0EFD               	movlw	-3
  9515   013322  CFE3 FFE6          	movff	plusw1,postinc1
  9516   013326  CFE3 FFE6          	movff	plusw1,postinc1
  9517   01332A  0E00               	movlw	low _spiReceiveBuffer
  9518   01332C  6EE6               	movwf	postinc1,c
  9519   01332E  0E02               	movlw	high _spiReceiveBuffer
  9520   013330  6EE6               	movwf	postinc1,c
  9521   013332  0E00               	movlw	low _spiTransmitBuffer
  9522   013334  6EE6               	movwf	postinc1,c
  9523   013336  0E01               	movlw	high _spiTransmitBuffer
  9524   013338  6EE6               	movwf	postinc1,c
  9525   01333A  EC1A  F09D         	call	_SpiTransfer	;wreg free
  9526                           
  9527                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9528   01333E  0EFF               	movlw	-1
  9529   013340  C001  FFE3         	movff	btemp,plusw1
  9530   013344                     
  9531                           ;can/can.c: 401:     return spiTransferError;
  9532                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9533   013344  0EFF               	movlw	-1
  9534   013346  CFE3 F001          	movff	plusw1,btemp
  9535   01334A                     
  9536                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9537   01334A  0EF5               	movlw	245
  9538   01334C  26E1               	addwf	fsr1l,f,c
  9539   01334E  0EFF               	movlw	255
  9540   013350  22E2               	addwfc	fsr1h,f,c
  9541   013352  0012               	return		;funcret
  9542   013354                     __end_of_DRV_CANFDSPI_WriteByteArray:
  9543                           	callstack 0
  9544                           
  9545 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  9546 ;; Defined at:
  9547 ;;		line 880 in file "can/can.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  channel         1  [STACK] enum E5290
  9550 ;;  flush           1  [STACK] _Bool 
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  9553 ;;  a               2  [STACK] unsigned short 
  9554 ;;  spiTransferE    1  [STACK] char 
  9555 ;; Return value:  Size  Location     Type
  9556 ;;                  1  [STACK] char 
  9557 ;; Registers used:
  9558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9568 ;;Total ram usage:        0 bytes
  9569 ;; Hardware stack levels used: 1
  9570 ;; Hardware stack levels required when called: 9
  9571 ;; This function calls:
  9572 ;;		_DRV_CANFDSPI_WriteByte
  9573 ;; This function is called by:
  9574 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9575 ;; This function uses a reentrant model
  9576 ;;
  9577                           
  9578                           	psect	text27
  9579   013E7C                     __ptext27:
  9580                           	callstack 0
  9581   013E7C                     _DRV_CANFDSPI_TransmitChannelUpdate:
  9582                           	callstack 0
  9583                           
  9584                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9585   013E7C  0E08               	movlw	8
  9586   013E7E  26E1               	addwf	fsr1l,f,c
  9587   013E80  0E00               	movlw	0
  9588   013E82  22E2               	addwfc	fsr1h,f,c
  9589   013E84                     
  9590                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  9591                           ;stkvar	_channel @ sp[(-8)+-1]
  9592   013E84  0EF7               	movlw	-9
  9593   013E86  50E3               	movf	plusw1,w,c
  9594   013E88  0D0C               	mullw	12
  9595   013E8A  0E51               	movlw	81
  9596   013E8C  26F3               	addwf	243,f,c
  9597   013E8E  0E00               	movlw	0
  9598   013E90  22F4               	addwfc	244,f,c
  9599                           
  9600                           ;stkvar	_a @ sp[(-8)+5]
  9601   013E92  0EFD               	movlw	-3
  9602   013E94  CFF3 FFE3          	movff	prodl,plusw1
  9603   013E98  0EFE               	movlw	-2
  9604   013E9A  CFF4 FFE3          	movff	prodh,plusw1
  9605   013E9E                     
  9606                           ;can/can.c: 889:     ciFifoCon.word = 0;
  9607                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9608   013E9E  0EF8               	movlw	-8
  9609   013EA0  6AE3               	clrf	plusw1,c
  9610   013EA2  0EF9               	movlw	-7
  9611   013EA4  6AE3               	clrf	plusw1,c
  9612   013EA6  0EFA               	movlw	-6
  9613   013EA8  6AE3               	clrf	plusw1,c
  9614   013EAA  0EFB               	movlw	-5
  9615   013EAC  6AE3               	clrf	plusw1,c
  9616   013EAE                     
  9617                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  9618                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9619   013EAE  0EF9               	movlw	249
  9620   013EB0  24E1               	addwf	fsr1l,w,c
  9621   013EB2  6ED9               	movwf	fsr2l,c
  9622   013EB4  0EFF               	movlw	255
  9623   013EB6  20E2               	addwfc	fsr1h,w,c
  9624   013EB8  6EDA               	movwf	fsr2h,c
  9625   013EBA  80DF               	bsf	indf2,0,c
  9626   013EBC                     
  9627                           ;can/can.c: 893:     if (flush) {
  9628                           ;stkvar	_flush @ sp[(-8)+-2]
  9629   013EBC  0EF6               	movlw	-10
  9630   013EBE  50E3               	movf	plusw1,w,c
  9631   013EC0  B4D8               	btfsc	status,2,c
  9632   013EC2  EF65  F09F         	goto	u1601
  9633   013EC6  EF67  F09F         	goto	u1600
  9634   013ECA                     u1601:
  9635   013ECA  EF6E  F09F         	goto	l3971
  9636   013ECE                     u1600:
  9637   013ECE                     
  9638                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  9639                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9640   013ECE  0EF9               	movlw	249
  9641   013ED0  24E1               	addwf	fsr1l,w,c
  9642   013ED2  6ED9               	movwf	fsr2l,c
  9643   013ED4  0EFF               	movlw	255
  9644   013ED6  20E2               	addwfc	fsr1h,w,c
  9645   013ED8  6EDA               	movwf	fsr2h,c
  9646   013EDA  82DF               	bsf	indf2,1,c
  9647   013EDC                     l3971:
  9648                           
  9649                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  9650                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9651   013EDC  0EF9               	movlw	249
  9652   013EDE  24E1               	addwf	fsr1l,w,c
  9653   013EE0  6ED9               	movwf	fsr2l,c
  9654   013EE2  0EFF               	movlw	255
  9655   013EE4  20E2               	addwfc	fsr1h,w,c
  9656   013EE6  6EDA               	movwf	fsr2h,c
  9657   013EE8  50DF               	movf	indf2,w,c
  9658   013EEA  6EE6               	movwf	postinc1,c
  9659                           
  9660                           ;stkvar	_a @ sp[(-9)+5]
  9661   013EEC  0EFC               	movlw	-4
  9662   013EEE  CFE3 FFE6          	movff	plusw1,postinc1
  9663   013EF2  CFE3 FFE6          	movff	plusw1,postinc1
  9664   013EF6  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9665                           
  9666                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9667   013EFA  0EFF               	movlw	-1
  9668   013EFC  C001  FFE3         	movff	btemp,plusw1
  9669   013F00                     
  9670                           ;can/can.c: 898:     if (spiTransferError) {
  9671                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9672   013F00  0EFF               	movlw	-1
  9673   013F02  50E3               	movf	plusw1,w,c
  9674   013F04  B4D8               	btfsc	status,2,c
  9675   013F06  EF87  F09F         	goto	u1611
  9676   013F0A  EF89  F09F         	goto	u1610
  9677   013F0E                     u1611:
  9678   013F0E  EF8D  F09F         	goto	l3979
  9679   013F12                     u1610:
  9680   013F12                     
  9681                           ;can/can.c: 899:         return -1;
  9682   013F12  0EFF               	movlw	255
  9683   013F14  6E01               	movwf	btemp^0,c
  9684   013F16  EF90  F09F         	goto	l293
  9685   013F1A                     l3979:
  9686                           
  9687                           ;can/can.c: 902:     return spiTransferError;
  9688                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9689   013F1A  0EFF               	movlw	-1
  9690   013F1C  CFE3 F001          	movff	plusw1,btemp
  9691   013F20                     l293:
  9692                           
  9693                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9694   013F20  0EF6               	movlw	246
  9695   013F22  26E1               	addwf	fsr1l,f,c
  9696   013F24  0EFF               	movlw	255
  9697   013F26  22E2               	addwfc	fsr1h,f,c
  9698   013F28  0012               	return		;funcret
  9699   013F2A                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9700                           	callstack 0
  9701                           
  9702 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9703 ;; Defined at:
  9704 ;;		line 405 in file "can/can.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  address         2  [STACK] unsigned short 
  9707 ;;  rxd             2  [STACK] PTR unsigned long 
  9708 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9709 ;;		 -> fifoReg(12), 
  9710 ;;  nWords          2  [STACK] unsigned short 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  w               4  [STACK] struct _REG_t
  9713 ;;  i               2  [STACK] unsigned short 
  9714 ;;  j               2  [STACK] unsigned short 
  9715 ;;  spiTransferS    2  [STACK] unsigned short 
  9716 ;;  n               2  [STACK] unsigned short 
  9717 ;;  spiTransferE    1  [STACK] char 
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  1  [STACK] char 
  9720 ;; Registers used:
  9721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;Total ram usage:        0 bytes
  9732 ;; Hardware stack levels used: 1
  9733 ;; Hardware stack levels required when called: 8
  9734 ;; This function calls:
  9735 ;;		_SpiTransfer
  9736 ;; This function is called by:
  9737 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9738 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9739 ;; This function uses a reentrant model
  9740 ;;
  9741                           
  9742                           	psect	text28
  9743   0114B2                     __ptext28:
  9744                           	callstack 0
  9745   0114B2                     _DRV_CANFDSPI_ReadWordArray:
  9746                           	callstack 0
  9747                           
  9748                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  9749   0114B2  0E0D               	movlw	13
  9750   0114B4  26E1               	addwf	fsr1l,f,c
  9751   0114B6  0E00               	movlw	0
  9752   0114B8  22E2               	addwfc	fsr1h,f,c
  9753   0114BA                     
  9754                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
  9755                           ;stkvar	_nWords @ sp[(-13)+-6]
  9756   0114BA  0EED               	movlw	-19
  9757   0114BC  CFE3 F00B          	movff	plusw1,btemp+10
  9758   0114C0  0EEE               	movlw	-18
  9759   0114C2  CFE3 F00C          	movff	plusw1,btemp+11
  9760   0114C6  90D8               	bcf	status,0,c
  9761   0114C8  360B               	rlcf	(btemp+10)^0,f,c
  9762   0114CA  360C               	rlcf	(btemp+11)^0,f,c
  9763   0114CC  90D8               	bcf	status,0,c
  9764   0114CE  360B               	rlcf	(btemp+10)^0,f,c
  9765   0114D0  360C               	rlcf	(btemp+11)^0,f,c
  9766   0114D2  0E02               	movlw	2
  9767   0114D4  260B               	addwf	(btemp+10)^0,f,c
  9768   0114D6  0E00               	movlw	0
  9769   0114D8  220C               	addwfc	(btemp+11)^0,f,c
  9770                           
  9771                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9772   0114DA  0EFB               	movlw	-5
  9773   0114DC  C00B  FFE3         	movff	btemp+10,plusw1
  9774   0114E0  0EFC               	movlw	-4
  9775   0114E2  C00C  FFE3         	movff	btemp+11,plusw1
  9776   0114E6                     
  9777                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
  9778                           ;stkvar	_address @ sp[(-13)+-2]
  9779   0114E6  0EF2               	movlw	242
  9780   0114E8  24E1               	addwf	fsr1l,w,c
  9781   0114EA  6ED9               	movwf	fsr2l,c
  9782   0114EC  0EFF               	movlw	255
  9783   0114EE  20E2               	addwfc	fsr1h,w,c
  9784   0114F0  6EDA               	movwf	fsr2h,c
  9785   0114F2  50DF               	movf	indf2,w,c
  9786   0114F4  0B0F               	andlw	15
  9787   0114F6  0F30               	addlw	48
  9788   0114F8  0101               	movlb	1	; () banked
  9789   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9790   0114FC                     
  9791                           ; BSR set to: 1
  9792                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
  9793                           ;stkvar	_address @ sp[(-13)+-2]
  9794   0114FC  0EF1               	movlw	-15
  9795   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9796   011502                     
  9797                           ; BSR set to: 1
  9798                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
  9799   011502  0E02               	movlw	2
  9800   011504  6E0B               	movwf	(btemp+10)^0,c
  9801   011506  0E00               	movlw	0
  9802   011508  6E0C               	movwf	(btemp+11)^0,c
  9803                           
  9804                           ;stkvar	_i @ sp[(-13)+4]
  9805   01150A  0EF7               	movlw	-9
  9806   01150C  C00B  FFE3         	movff	btemp+10,plusw1
  9807   011510  0EF8               	movlw	-8
  9808   011512  C00C  FFE3         	movff	btemp+11,plusw1
  9809   011516  EFA9  F08A         	goto	l4037
  9810   01151A                     l4033:
  9811                           
  9812                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
  9813                           ;stkvar	_i @ sp[(-13)+4]
  9814   01151A  0EF7               	movlw	-9
  9815   01151C  CFE3 F00B          	movff	plusw1,btemp+10
  9816   011520  0EF8               	movlw	-8
  9817   011522  CFE3 F00C          	movff	plusw1,btemp+11
  9818   011526  0E00               	movlw	low _spiTransmitBuffer
  9819   011528  240B               	addwf	(btemp+10)^0,w,c
  9820   01152A  6ED9               	movwf	fsr2l,c
  9821   01152C  0E01               	movlw	high _spiTransmitBuffer
  9822   01152E  200C               	addwfc	(btemp+11)^0,w,c
  9823   011530  6EDA               	movwf	fsr2h,c
  9824   011532  6ADF               	clrf	indf2,c
  9825   011534                     
  9826                           ;can/can.c: 420:     }
  9827                           ;stkvar	_i @ sp[(-13)+4]
  9828   011534  0EF7               	movlw	-9
  9829   011536  50E3               	movf	plusw1,w,c
  9830   011538  0F01               	addlw	1
  9831   01153A  6E01               	movwf	btemp^0,c
  9832   01153C  0EF7               	movlw	-9
  9833   01153E  C001  FFE3         	movff	btemp,plusw1
  9834   011542  6A01               	clrf	btemp^0,c
  9835   011544  0EF8               	movlw	-8
  9836   011546  50E3               	movf	plusw1,w,c
  9837   011548  2001               	addwfc	btemp^0,w,c
  9838   01154A  6E01               	movwf	btemp^0,c
  9839   01154C  0EF8               	movlw	-8
  9840   01154E  C001  FFE3         	movff	btemp,plusw1
  9841   011552                     l4037:
  9842                           
  9843                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9844   011552  0EFB               	movlw	-5
  9845   011554  CFE3 F00B          	movff	plusw1,btemp+10
  9846   011558  0EFC               	movlw	-4
  9847   01155A  CFE3 F00C          	movff	plusw1,btemp+11
  9848                           
  9849                           ;stkvar	_i @ sp[(-13)+4]
  9850   01155E  0EF7               	movlw	-9
  9851   011560  CFE3 F009          	movff	plusw1,btemp+8
  9852   011564  0EF8               	movlw	-8
  9853   011566  CFE3 F00A          	movff	plusw1,btemp+9
  9854   01156A  500B               	movf	(btemp+10)^0,w,c
  9855   01156C  5C09               	subwf	(btemp+8)^0,w,c
  9856   01156E  500C               	movf	(btemp+11)^0,w,c
  9857   011570  580A               	subwfb	(btemp+9)^0,w,c
  9858   011572  A0D8               	btfss	status,0,c
  9859   011574  EFBE  F08A         	goto	u1631
  9860   011578  EFC0  F08A         	goto	u1630
  9861   01157C                     u1631:
  9862   01157C  EF8D  F08A         	goto	l4033
  9863   011580                     u1630:
  9864   011580                     
  9865                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
  9866                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9867   011580  0EFB               	movlw	-5
  9868   011582  CFE3 FFE6          	movff	plusw1,postinc1
  9869   011586  CFE3 FFE6          	movff	plusw1,postinc1
  9870   01158A  0E00               	movlw	low _spiReceiveBuffer
  9871   01158C  6EE6               	movwf	postinc1,c
  9872   01158E  0E02               	movlw	high _spiReceiveBuffer
  9873   011590  6EE6               	movwf	postinc1,c
  9874   011592  0E00               	movlw	low _spiTransmitBuffer
  9875   011594  6EE6               	movwf	postinc1,c
  9876   011596  0E01               	movlw	high _spiTransmitBuffer
  9877   011598  6EE6               	movwf	postinc1,c
  9878   01159A  EC1A  F09D         	call	_SpiTransfer	;wreg free
  9879                           
  9880                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9881   01159E  0EFF               	movlw	-1
  9882   0115A0  C001  FFE3         	movff	btemp,plusw1
  9883   0115A4                     
  9884                           ;can/can.c: 423:     if (spiTransferError) {
  9885                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9886   0115A4  0EFF               	movlw	-1
  9887   0115A6  50E3               	movf	plusw1,w,c
  9888   0115A8  B4D8               	btfsc	status,2,c
  9889   0115AA  EFD9  F08A         	goto	u1641
  9890   0115AE  EFDB  F08A         	goto	u1640
  9891   0115B2                     u1641:
  9892   0115B2  EFE0  F08A         	goto	l4047
  9893   0115B6                     u1640:
  9894   0115B6                     l4043:
  9895                           
  9896                           ;can/can.c: 424:         return spiTransferError;
  9897                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9898   0115B6  0EFF               	movlw	-1
  9899   0115B8  CFE3 F001          	movff	plusw1,btemp
  9900   0115BC  EF98  F08B         	goto	l206
  9901   0115C0                     l4047:
  9902                           
  9903                           ;can/can.c: 428:     n = 2;
  9904   0115C0  0E02               	movlw	2
  9905   0115C2  6E0B               	movwf	(btemp+10)^0,c
  9906   0115C4  0E00               	movlw	0
  9907   0115C6  6E0C               	movwf	(btemp+11)^0,c
  9908                           
  9909                           ;stkvar	_n @ sp[(-13)+10]
  9910   0115C8  0EFD               	movlw	-3
  9911   0115CA  C00B  FFE3         	movff	btemp+10,plusw1
  9912   0115CE  0EFE               	movlw	-2
  9913   0115D0  C00C  FFE3         	movff	btemp+11,plusw1
  9914   0115D4                     
  9915                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
  9916                           ;stkvar	_i @ sp[(-13)+4]
  9917   0115D4  0EF7               	movlw	-9
  9918   0115D6  6AE3               	clrf	plusw1,c
  9919   0115D8  0EF8               	movlw	-8
  9920   0115DA  6AE3               	clrf	plusw1,c
  9921   0115DC  EF7F  F08B         	goto	l4069
  9922   0115E0                     l4051:
  9923                           
  9924                           ;can/can.c: 430:         w.word = 0;
  9925                           ;stkvar	_w @ sp[(-13)+0]
  9926   0115E0  0EF3               	movlw	-13
  9927   0115E2  6AE3               	clrf	plusw1,c
  9928   0115E4  0EF4               	movlw	-12
  9929   0115E6  6AE3               	clrf	plusw1,c
  9930   0115E8  0EF5               	movlw	-11
  9931   0115EA  6AE3               	clrf	plusw1,c
  9932   0115EC  0EF6               	movlw	-10
  9933   0115EE  6AE3               	clrf	plusw1,c
  9934                           
  9935                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
  9936                           ;stkvar	_j @ sp[(-13)+6]
  9937   0115F0  0EF9               	movlw	-7
  9938   0115F2  6AE3               	clrf	plusw1,c
  9939   0115F4  0EFA               	movlw	-6
  9940   0115F6  6AE3               	clrf	plusw1,c
  9941   0115F8                     l4057:
  9942                           
  9943                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
  9944                           ;stkvar	_n @ sp[(-13)+10]
  9945   0115F8  0EFD               	movlw	-3
  9946   0115FA  CFE3 F00B          	movff	plusw1,btemp+10
  9947   0115FE  0EFE               	movlw	-2
  9948   011600  CFE3 F00C          	movff	plusw1,btemp+11
  9949   011604  0E00               	movlw	low _spiReceiveBuffer
  9950   011606  240B               	addwf	(btemp+10)^0,w,c
  9951   011608  6ED9               	movwf	fsr2l,c
  9952   01160A  0E02               	movlw	high _spiReceiveBuffer
  9953   01160C  200C               	addwfc	(btemp+11)^0,w,c
  9954   01160E  6EDA               	movwf	fsr2h,c
  9955                           
  9956                           ;stkvar	_j @ sp[(-13)+6]
  9957   011610  0EF9               	movlw	-7
  9958   011612  CFE3 F00B          	movff	plusw1,btemp+10
  9959   011616  0EFA               	movlw	-6
  9960   011618  CFE3 F00C          	movff	plusw1,btemp+11
  9961                           
  9962                           ;stkvar	_w @ sp[(-13)+0]
  9963   01161C  0EF3               	movlw	243
  9964   01161E  24E1               	addwf	fsr1l,w,c
  9965   011620  6E09               	movwf	(btemp+8)^0,c
  9966   011622  0EFF               	movlw	255
  9967   011624  20E2               	addwfc	fsr1h,w,c
  9968   011626  6E0A               	movwf	(btemp+9)^0,c
  9969   011628  500B               	movf	(btemp+10)^0,w,c
  9970   01162A  2409               	addwf	(btemp+8)^0,w,c
  9971   01162C  6EE9               	movwf	fsr0l,c
  9972   01162E  500C               	movf	(btemp+11)^0,w,c
  9973   011630  200A               	addwfc	(btemp+9)^0,w,c
  9974   011632  6EEA               	movwf	fsr0h,c
  9975   011634  CFDF FFEF          	movff	indf2,indf0
  9976   011638                     
  9977                           ;can/can.c: 433:         }
  9978                           ;stkvar	_j @ sp[(-13)+6]
  9979   011638  0EF9               	movlw	-7
  9980   01163A  50E3               	movf	plusw1,w,c
  9981   01163C  0F01               	addlw	1
  9982   01163E  6E01               	movwf	btemp^0,c
  9983   011640  0EF9               	movlw	-7
  9984   011642  C001  FFE3         	movff	btemp,plusw1
  9985   011646  6A01               	clrf	btemp^0,c
  9986   011648  0EFA               	movlw	-6
  9987   01164A  50E3               	movf	plusw1,w,c
  9988   01164C  2001               	addwfc	btemp^0,w,c
  9989   01164E  6E01               	movwf	btemp^0,c
  9990   011650  0EFA               	movlw	-6
  9991   011652  C001  FFE3         	movff	btemp,plusw1
  9992   011656                     
  9993                           ;stkvar	_n @ sp[(-13)+10]
  9994   011656  0EFD               	movlw	-3
  9995   011658  50E3               	movf	plusw1,w,c
  9996   01165A  0F01               	addlw	1
  9997   01165C  6E01               	movwf	btemp^0,c
  9998   01165E  0EFD               	movlw	-3
  9999   011660  C001  FFE3         	movff	btemp,plusw1
 10000   011664  6A01               	clrf	btemp^0,c
 10001   011666  0EFE               	movlw	-2
 10002   011668  50E3               	movf	plusw1,w,c
 10003   01166A  2001               	addwfc	btemp^0,w,c
 10004   01166C  6E01               	movwf	btemp^0,c
 10005   01166E  0EFE               	movlw	-2
 10006   011670  C001  FFE3         	movff	btemp,plusw1
 10007   011674                     
 10008                           ;stkvar	_j @ sp[(-13)+6]
 10009   011674  0EFA               	movlw	-6
 10010   011676  50E3               	movf	plusw1,w,c
 10011   011678  E10C               	bnz	u1650
 10012   01167A  0EF9               	movlw	-7
 10013   01167C  CFE3 F001          	movff	plusw1,btemp
 10014   011680  0E04               	movlw	4
 10015   011682  5E01               	subwf	btemp^0,f,c
 10016   011684  A0D8               	btfss	status,0,c
 10017   011686  EF47  F08B         	goto	u1651
 10018   01168A  EF49  F08B         	goto	u1650
 10019   01168E                     u1651:
 10020   01168E  EFFC  F08A         	goto	l4057
 10021   011692                     u1650:
 10022   011692                     
 10023                           ;can/can.c: 434:         rxd[i] = w.word;
 10024                           ;stkvar	_w @ sp[(-13)+0]
 10025   011692  50E1               	movf	fsr1l,w,c
 10026   011694  0FF3               	addlw	-13
 10027   011696  6ED9               	movwf	fsr2l,c
 10028   011698  50E2               	movf	fsr1h,w,c
 10029   01169A  6EDA               	movwf	fsr2h,c
 10030   01169C  0EFF               	movlw	255
 10031   01169E  22DA               	addwfc	fsr2h,f,c
 10032                           
 10033                           ;stkvar	_i @ sp[(-13)+4]
 10034   0116A0  0EF7               	movlw	-9
 10035   0116A2  CFE3 F00B          	movff	plusw1,btemp+10
 10036   0116A6  0EF8               	movlw	-8
 10037   0116A8  CFE3 F00C          	movff	plusw1,btemp+11
 10038   0116AC  90D8               	bcf	status,0,c
 10039   0116AE  360B               	rlcf	(btemp+10)^0,f,c
 10040   0116B0  360C               	rlcf	(btemp+11)^0,f,c
 10041   0116B2  90D8               	bcf	status,0,c
 10042   0116B4  360B               	rlcf	(btemp+10)^0,f,c
 10043   0116B6  360C               	rlcf	(btemp+11)^0,f,c
 10044                           
 10045                           ;stkvar	_rxd @ sp[(-13)+-4]
 10046   0116B8  0EEF               	movlw	-17
 10047   0116BA  CFE3 F009          	movff	plusw1,btemp+8
 10048   0116BE  0EF0               	movlw	-16
 10049   0116C0  CFE3 F00A          	movff	plusw1,btemp+9
 10050   0116C4  500B               	movf	(btemp+10)^0,w,c
 10051   0116C6  2409               	addwf	(btemp+8)^0,w,c
 10052   0116C8  6EE9               	movwf	fsr0l,c
 10053   0116CA  500C               	movf	(btemp+11)^0,w,c
 10054   0116CC  200A               	addwfc	(btemp+9)^0,w,c
 10055   0116CE  6EEA               	movwf	fsr0h,c
 10056   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10057   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10058   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10059   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10060   0116E0                     
 10061                           ;can/can.c: 435:     }
 10062                           ;stkvar	_i @ sp[(-13)+4]
 10063   0116E0  0EF7               	movlw	-9
 10064   0116E2  50E3               	movf	plusw1,w,c
 10065   0116E4  0F01               	addlw	1
 10066   0116E6  6E01               	movwf	btemp^0,c
 10067   0116E8  0EF7               	movlw	-9
 10068   0116EA  C001  FFE3         	movff	btemp,plusw1
 10069   0116EE  6A01               	clrf	btemp^0,c
 10070   0116F0  0EF8               	movlw	-8
 10071   0116F2  50E3               	movf	plusw1,w,c
 10072   0116F4  2001               	addwfc	btemp^0,w,c
 10073   0116F6  6E01               	movwf	btemp^0,c
 10074   0116F8  0EF8               	movlw	-8
 10075   0116FA  C001  FFE3         	movff	btemp,plusw1
 10076   0116FE                     l4069:
 10077                           
 10078                           ;stkvar	_nWords @ sp[(-13)+-6]
 10079   0116FE  0EED               	movlw	-19
 10080   011700  CFE3 F00B          	movff	plusw1,btemp+10
 10081   011704  0EEE               	movlw	-18
 10082   011706  CFE3 F00C          	movff	plusw1,btemp+11
 10083                           
 10084                           ;stkvar	_i @ sp[(-13)+4]
 10085   01170A  0EF7               	movlw	-9
 10086   01170C  CFE3 F009          	movff	plusw1,btemp+8
 10087   011710  0EF8               	movlw	-8
 10088   011712  CFE3 F00A          	movff	plusw1,btemp+9
 10089   011716  500B               	movf	(btemp+10)^0,w,c
 10090   011718  5C09               	subwf	(btemp+8)^0,w,c
 10091   01171A  500C               	movf	(btemp+11)^0,w,c
 10092   01171C  580A               	subwfb	(btemp+9)^0,w,c
 10093   01171E  A0D8               	btfss	status,0,c
 10094   011720  EF94  F08B         	goto	u1661
 10095   011724  EF96  F08B         	goto	u1660
 10096   011728                     u1661:
 10097   011728  EFF0  F08A         	goto	l4051
 10098   01172C                     u1660:
 10099   01172C  EFDB  F08A         	goto	l4043
 10100   011730                     l206:
 10101                           
 10102                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10103   011730  0EED               	movlw	237
 10104   011732  26E1               	addwf	fsr1l,f,c
 10105   011734  0EFF               	movlw	255
 10106   011736  22E2               	addwfc	fsr1h,f,c
 10107   011738  0012               	return		;funcret
 10108   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10109                           	callstack 0
 10110                           
 10111 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10112 ;; Defined at:
 10113 ;;		line 3766 in file "can/can.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;  dlc             1  [STACK] enum E5464
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;  dataBytesInO    4  [STACK] unsigned long 
 10118 ;; Return value:  Size  Location     Type
 10119 ;;                  4  [STACK] unsigned long 
 10120 ;; Registers used:
 10121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;Total ram usage:        0 bytes
 10132 ;; Hardware stack levels used: 1
 10133 ;; Hardware stack levels required when called: 7
 10134 ;; This function calls:
 10135 ;;		Nothing
 10136 ;; This function is called by:
 10137 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10138 ;; This function uses a reentrant model
 10139 ;;
 10140                           
 10141                           	psect	text29
 10142   012072                     __ptext29:
 10143                           	callstack 0
 10144   012072                     _DRV_CANFDSPI_DlcToDataBytes:
 10145                           	callstack 0
 10146                           
 10147                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10148   012072  52E6               	movf	postinc1,f,c
 10149   012074  52E6               	movf	postinc1,f,c
 10150   012076  52E6               	movf	postinc1,f,c
 10151   012078  52E6               	movf	postinc1,f,c
 10152   01207A                     
 10153                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10154                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10155   01207A  0EFC               	movlw	-4
 10156   01207C  6AE3               	clrf	plusw1,c
 10157   01207E  0EFD               	movlw	-3
 10158   012080  6AE3               	clrf	plusw1,c
 10159   012082  0EFE               	movlw	-2
 10160   012084  6AE3               	clrf	plusw1,c
 10161   012086  0EFF               	movlw	-1
 10162   012088  6AE3               	clrf	plusw1,c
 10163   01208A                     
 10164                           ;can/can.c: 3770:     __nop();
 10165   01208A  0000               	nop	
 10166   01208C                     
 10167                           ;can/can.c: 3771:     __nop();
 10168   01208C  0000               	nop	
 10169   01208E                     
 10170                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10171                           ;stkvar	_dlc @ sp[(-4)+-1]
 10172   01208E  0EFB               	movlw	-5
 10173   012090  CFE3 F001          	movff	plusw1,btemp
 10174   012094  0E09               	movlw	9
 10175   012096  6001               	cpfslt	btemp^0,c
 10176   012098  EF50  F090         	goto	u1671
 10177   01209C  EF52  F090         	goto	u1670
 10178   0120A0                     u1671:
 10179   0120A0  EFED  F090         	goto	l4101
 10180   0120A4                     u1670:
 10181   0120A4                     
 10182                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10183                           ;stkvar	_dlc @ sp[(-4)+-1]
 10184   0120A4  0EFB               	movlw	-5
 10185   0120A6  CFE3 F00C          	movff	plusw1,btemp+11
 10186   0120AA  C00C  F005         	movff	btemp+11,btemp+4
 10187   0120AE  6A06               	clrf	(btemp+5)^0,c
 10188   0120B0  6A07               	clrf	(btemp+6)^0,c
 10189   0120B2  6A08               	clrf	(btemp+7)^0,c
 10190                           
 10191                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10192   0120B4  0EFC               	movlw	-4
 10193   0120B6  C005  FFE3         	movff	btemp+4,plusw1
 10194   0120BA  0EFD               	movlw	-3
 10195   0120BC  C006  FFE3         	movff	btemp+5,plusw1
 10196   0120C0  0EFE               	movlw	-2
 10197   0120C2  C007  FFE3         	movff	btemp+6,plusw1
 10198   0120C6  0EFF               	movlw	-1
 10199   0120C8  C008  FFE3         	movff	btemp+7,plusw1
 10200                           
 10201                           ;can/can.c: 3775:     } else {
 10202   0120CC  EF17  F091         	goto	l4103
 10203   0120D0                     l4085:
 10204                           
 10205                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10206   0120D0  0E0C               	movlw	12
 10207   0120D2  6E09               	movwf	(btemp+8)^0,c
 10208   0120D4  6A0A               	clrf	(btemp+9)^0,c
 10209   0120D6  6A0B               	clrf	(btemp+10)^0,c
 10210   0120D8  6A0C               	clrf	(btemp+11)^0,c
 10211                           
 10212                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10213   0120DA  0EFC               	movlw	-4
 10214   0120DC  C009  FFE3         	movff	btemp+8,plusw1
 10215   0120E0  0EFD               	movlw	-3
 10216   0120E2  C00A  FFE3         	movff	btemp+9,plusw1
 10217   0120E6  0EFE               	movlw	-2
 10218   0120E8  C00B  FFE3         	movff	btemp+10,plusw1
 10219   0120EC  0EFF               	movlw	-1
 10220   0120EE  C00C  FFE3         	movff	btemp+11,plusw1
 10221                           
 10222                           ;can/can.c: 3779:                 break;
 10223   0120F2  EF17  F091         	goto	l4103
 10224   0120F6                     l4087:
 10225                           
 10226                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10227   0120F6  0E10               	movlw	16
 10228   0120F8  6E09               	movwf	(btemp+8)^0,c
 10229   0120FA  6A0A               	clrf	(btemp+9)^0,c
 10230   0120FC  6A0B               	clrf	(btemp+10)^0,c
 10231   0120FE  6A0C               	clrf	(btemp+11)^0,c
 10232                           
 10233                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10234   012100  0EFC               	movlw	-4
 10235   012102  C009  FFE3         	movff	btemp+8,plusw1
 10236   012106  0EFD               	movlw	-3
 10237   012108  C00A  FFE3         	movff	btemp+9,plusw1
 10238   01210C  0EFE               	movlw	-2
 10239   01210E  C00B  FFE3         	movff	btemp+10,plusw1
 10240   012112  0EFF               	movlw	-1
 10241   012114  C00C  FFE3         	movff	btemp+11,plusw1
 10242                           
 10243                           ;can/can.c: 3782:                 break;
 10244   012118  EF17  F091         	goto	l4103
 10245   01211C                     l4089:
 10246                           
 10247                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10248   01211C  0E14               	movlw	20
 10249   01211E  6E09               	movwf	(btemp+8)^0,c
 10250   012120  6A0A               	clrf	(btemp+9)^0,c
 10251   012122  6A0B               	clrf	(btemp+10)^0,c
 10252   012124  6A0C               	clrf	(btemp+11)^0,c
 10253                           
 10254                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10255   012126  0EFC               	movlw	-4
 10256   012128  C009  FFE3         	movff	btemp+8,plusw1
 10257   01212C  0EFD               	movlw	-3
 10258   01212E  C00A  FFE3         	movff	btemp+9,plusw1
 10259   012132  0EFE               	movlw	-2
 10260   012134  C00B  FFE3         	movff	btemp+10,plusw1
 10261   012138  0EFF               	movlw	-1
 10262   01213A  C00C  FFE3         	movff	btemp+11,plusw1
 10263                           
 10264                           ;can/can.c: 3785:                 break;
 10265   01213E  EF17  F091         	goto	l4103
 10266   012142                     l4091:
 10267                           
 10268                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10269   012142  0E18               	movlw	24
 10270   012144  6E09               	movwf	(btemp+8)^0,c
 10271   012146  6A0A               	clrf	(btemp+9)^0,c
 10272   012148  6A0B               	clrf	(btemp+10)^0,c
 10273   01214A  6A0C               	clrf	(btemp+11)^0,c
 10274                           
 10275                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10276   01214C  0EFC               	movlw	-4
 10277   01214E  C009  FFE3         	movff	btemp+8,plusw1
 10278   012152  0EFD               	movlw	-3
 10279   012154  C00A  FFE3         	movff	btemp+9,plusw1
 10280   012158  0EFE               	movlw	-2
 10281   01215A  C00B  FFE3         	movff	btemp+10,plusw1
 10282   01215E  0EFF               	movlw	-1
 10283   012160  C00C  FFE3         	movff	btemp+11,plusw1
 10284                           
 10285                           ;can/can.c: 3788:                 break;
 10286   012164  EF17  F091         	goto	l4103
 10287   012168                     l4093:
 10288                           
 10289                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10290   012168  0E20               	movlw	32
 10291   01216A  6E09               	movwf	(btemp+8)^0,c
 10292   01216C  6A0A               	clrf	(btemp+9)^0,c
 10293   01216E  6A0B               	clrf	(btemp+10)^0,c
 10294   012170  6A0C               	clrf	(btemp+11)^0,c
 10295                           
 10296                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10297   012172  0EFC               	movlw	-4
 10298   012174  C009  FFE3         	movff	btemp+8,plusw1
 10299   012178  0EFD               	movlw	-3
 10300   01217A  C00A  FFE3         	movff	btemp+9,plusw1
 10301   01217E  0EFE               	movlw	-2
 10302   012180  C00B  FFE3         	movff	btemp+10,plusw1
 10303   012184  0EFF               	movlw	-1
 10304   012186  C00C  FFE3         	movff	btemp+11,plusw1
 10305                           
 10306                           ;can/can.c: 3791:                 break;
 10307   01218A  EF17  F091         	goto	l4103
 10308   01218E                     l4095:
 10309                           
 10310                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10311   01218E  0E30               	movlw	48
 10312   012190  6E09               	movwf	(btemp+8)^0,c
 10313   012192  6A0A               	clrf	(btemp+9)^0,c
 10314   012194  6A0B               	clrf	(btemp+10)^0,c
 10315   012196  6A0C               	clrf	(btemp+11)^0,c
 10316                           
 10317                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10318   012198  0EFC               	movlw	-4
 10319   01219A  C009  FFE3         	movff	btemp+8,plusw1
 10320   01219E  0EFD               	movlw	-3
 10321   0121A0  C00A  FFE3         	movff	btemp+9,plusw1
 10322   0121A4  0EFE               	movlw	-2
 10323   0121A6  C00B  FFE3         	movff	btemp+10,plusw1
 10324   0121AA  0EFF               	movlw	-1
 10325   0121AC  C00C  FFE3         	movff	btemp+11,plusw1
 10326                           
 10327                           ;can/can.c: 3794:                 break;
 10328   0121B0  EF17  F091         	goto	l4103
 10329   0121B4                     l4097:
 10330                           
 10331                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10332   0121B4  0E40               	movlw	64
 10333   0121B6  6E09               	movwf	(btemp+8)^0,c
 10334   0121B8  6A0A               	clrf	(btemp+9)^0,c
 10335   0121BA  6A0B               	clrf	(btemp+10)^0,c
 10336   0121BC  6A0C               	clrf	(btemp+11)^0,c
 10337                           
 10338                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10339   0121BE  0EFC               	movlw	-4
 10340   0121C0  C009  FFE3         	movff	btemp+8,plusw1
 10341   0121C4  0EFD               	movlw	-3
 10342   0121C6  C00A  FFE3         	movff	btemp+9,plusw1
 10343   0121CA  0EFE               	movlw	-2
 10344   0121CC  C00B  FFE3         	movff	btemp+10,plusw1
 10345   0121D0  0EFF               	movlw	-1
 10346   0121D2  C00C  FFE3         	movff	btemp+11,plusw1
 10347                           
 10348                           ;can/can.c: 3797:                 break;
 10349   0121D6  EF17  F091         	goto	l4103
 10350   0121DA                     l4101:
 10351                           
 10352                           ;stkvar	_dlc @ sp[(-4)+-1]
 10353   0121DA  0EFB               	movlw	-5
 10354   0121DC  50E3               	movf	plusw1,w,c
 10355   0121DE  6E0B               	movwf	(btemp+10)^0,c
 10356   0121E0  6A0C               	clrf	(btemp+11)^0,c
 10357                           
 10358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10359                           ; Switch size 1, requested type "simple"
 10360                           ; Number of cases is 1, Range of values is 0 to 0
 10361                           ; switch strategies available:
 10362                           ; Name         Instructions Cycles
 10363                           ; simple_byte            4     3 (average)
 10364                           ;	Chosen strategy is simple_byte
 10365   0121E2  500C               	movf	(btemp+11)^0,w,c
 10366   0121E4  0A00               	xorlw	0	; case 0
 10367   0121E6  B4D8               	btfsc	status,2,c
 10368   0121E8  EFF8  F090         	goto	l5581
 10369   0121EC  EF17  F091         	goto	l4103
 10370   0121F0                     l5581:
 10371                           
 10372                           ; Switch size 1, requested type "simple"
 10373                           ; Number of cases is 7, Range of values is 9 to 15
 10374                           ; switch strategies available:
 10375                           ; Name         Instructions Cycles
 10376                           ; simple_byte           22    12 (average)
 10377                           ;	Chosen strategy is simple_byte
 10378   0121F0  500B               	movf	(btemp+10)^0,w,c
 10379   0121F2  0A09               	xorlw	9	; case 9
 10380   0121F4  B4D8               	btfsc	status,2,c
 10381   0121F6  EF68  F090         	goto	l4085
 10382   0121FA  0A03               	xorlw	3	; case 10
 10383   0121FC  B4D8               	btfsc	status,2,c
 10384   0121FE  EF7B  F090         	goto	l4087
 10385   012202  0A01               	xorlw	1	; case 11
 10386   012204  B4D8               	btfsc	status,2,c
 10387   012206  EF8E  F090         	goto	l4089
 10388   01220A  0A07               	xorlw	7	; case 12
 10389   01220C  B4D8               	btfsc	status,2,c
 10390   01220E  EFA1  F090         	goto	l4091
 10391   012212  0A01               	xorlw	1	; case 13
 10392   012214  B4D8               	btfsc	status,2,c
 10393   012216  EFB4  F090         	goto	l4093
 10394   01221A  0A03               	xorlw	3	; case 14
 10395   01221C  B4D8               	btfsc	status,2,c
 10396   01221E  EFC7  F090         	goto	l4095
 10397   012222  0A01               	xorlw	1	; case 15
 10398   012224  B4D8               	btfsc	status,2,c
 10399   012226  EFDA  F090         	goto	l4097
 10400   01222A  EF17  F091         	goto	l4103
 10401   01222E                     l4103:
 10402                           
 10403                           ;can/can.c: 3803:     return dataBytesInObject;
 10404                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10405   01222E  0EFC               	movlw	-4
 10406   012230  CFE3 F001          	movff	plusw1,btemp
 10407   012234  0EFD               	movlw	-3
 10408   012236  CFE3 F002          	movff	plusw1,btemp+1
 10409   01223A  0EFE               	movlw	-2
 10410   01223C  CFE3 F003          	movff	plusw1,btemp+2
 10411   012240  0EFF               	movlw	-1
 10412   012242  CFE3 F004          	movff	plusw1,btemp+3
 10413   012246                     
 10414                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10415   012246  0EFB               	movlw	251
 10416   012248  26E1               	addwf	fsr1l,f,c
 10417   01224A  0EFF               	movlw	255
 10418   01224C  22E2               	addwfc	fsr1h,f,c
 10419   01224E  0012               	return		;funcret
 10420   012250                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10421                           	callstack 0
 10422                           
 10423 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10424 ;; Defined at:
 10425 ;;		line 1776 in file "can/can.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  channel         1  [STACK] enum E5290
 10428 ;;  flags           2  [STACK] PTR enum E5583
 10429 ;;		 -> txFlags(1), 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10432 ;;  a               2  [STACK] unsigned short 
 10433 ;;  spiTransferE    1  [STACK] char 
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  1  [STACK] char 
 10436 ;; Registers used:
 10437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;Total ram usage:        0 bytes
 10448 ;; Hardware stack levels used: 1
 10449 ;; Hardware stack levels required when called: 9
 10450 ;; This function calls:
 10451 ;;		_DRV_CANFDSPI_ReadByte
 10452 ;; This function is called by:
 10453 ;;		_CanSend
 10454 ;; This function uses a reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text30
 10458   014078                     __ptext30:
 10459                           	callstack 0
 10460   014078                     _DRV_CANFDSPI_TransmitChannelEventGet:
 10461                           	callstack 0
 10462                           
 10463                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10464   014078  0E07               	movlw	7
 10465   01407A  26E1               	addwf	fsr1l,f,c
 10466   01407C  0E00               	movlw	0
 10467   01407E  22E2               	addwfc	fsr1h,f,c
 10468   014080                     
 10469                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 10470                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10471   014080  0EF9               	movlw	-7
 10472   014082  6AE3               	clrf	plusw1,c
 10473   014084  0EFA               	movlw	-6
 10474   014086  6AE3               	clrf	plusw1,c
 10475   014088  0EFB               	movlw	-5
 10476   01408A  6AE3               	clrf	plusw1,c
 10477   01408C  0EFC               	movlw	-4
 10478   01408E  6AE3               	clrf	plusw1,c
 10479   014090                     
 10480                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 10481                           ;stkvar	_channel @ sp[(-7)+-1]
 10482   014090  0EF8               	movlw	-8
 10483   014092  50E3               	movf	plusw1,w,c
 10484   014094  0D0C               	mullw	12
 10485   014096  0E54               	movlw	84
 10486   014098  26F3               	addwf	243,f,c
 10487   01409A  0E00               	movlw	0
 10488   01409C  22F4               	addwfc	244,f,c
 10489                           
 10490                           ;stkvar	_a @ sp[(-7)+4]
 10491   01409E  0EFD               	movlw	-3
 10492   0140A0  CFF3 FFE3          	movff	prodl,plusw1
 10493   0140A4  0EFE               	movlw	-2
 10494   0140A6  CFF4 FFE3          	movff	prodh,plusw1
 10495   0140AA                     
 10496                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 10497                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10498   0140AA  0EF9               	movlw	249
 10499   0140AC  24E1               	addwf	fsr1l,w,c
 10500   0140AE  6E01               	movwf	btemp^0,c
 10501   0140B0  0EFF               	movlw	255
 10502   0140B2  20E2               	addwfc	fsr1h,w,c
 10503   0140B4  6E02               	movwf	(btemp+1)^0,c
 10504   0140B6  C001  FFE6         	movff	btemp,postinc1
 10505   0140BA  C002  FFE6         	movff	btemp+1,postinc1
 10506                           
 10507                           ;stkvar	_a @ sp[(-9)+4]
 10508   0140BE  0EFB               	movlw	-5
 10509   0140C0  CFE3 FFE6          	movff	plusw1,postinc1
 10510   0140C4  CFE3 FFE6          	movff	plusw1,postinc1
 10511   0140C8  EC7A  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 10512                           
 10513                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10514   0140CC  0EFF               	movlw	-1
 10515   0140CE  C001  FFE3         	movff	btemp,plusw1
 10516   0140D2                     
 10517                           ;can/can.c: 1788:     if (spiTransferError) {
 10518                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10519   0140D2  0EFF               	movlw	-1
 10520   0140D4  50E3               	movf	plusw1,w,c
 10521   0140D6  B4D8               	btfsc	status,2,c
 10522   0140D8  EF70  F0A0         	goto	u1871
 10523   0140DC  EF72  F0A0         	goto	u1870
 10524   0140E0                     u1871:
 10525   0140E0  EF76  F0A0         	goto	l4245
 10526   0140E4                     u1870:
 10527   0140E4                     
 10528                           ;can/can.c: 1789:         return -1;
 10529   0140E4  0EFF               	movlw	255
 10530   0140E6  6E01               	movwf	btemp^0,c
 10531   0140E8  EF83  F0A0         	goto	l453
 10532   0140EC                     l4245:
 10533                           
 10534                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 10535                           ;stkvar	_flags @ sp[(-7)+-3]
 10536   0140EC  0EF6               	movlw	-10
 10537   0140EE  CFE3 FFD9          	movff	plusw1,fsr2l
 10538   0140F2  0EF7               	movlw	-9
 10539   0140F4  CFE3 FFDA          	movff	plusw1,fsr2h
 10540                           
 10541                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10542   0140F8  0EF9               	movlw	-7
 10543   0140FA  50E3               	movf	plusw1,w,c
 10544   0140FC  0B17               	andlw	23
 10545   0140FE  6EDF               	movwf	indf2,c
 10546   014100                     
 10547                           ;can/can.c: 1795:     return spiTransferError;
 10548                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10549   014100  0EFF               	movlw	-1
 10550   014102  CFE3 F001          	movff	plusw1,btemp
 10551   014106                     l453:
 10552                           
 10553                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 10554   014106  0EF6               	movlw	246
 10555   014108  26E1               	addwf	fsr1l,f,c
 10556   01410A  0EFF               	movlw	255
 10557   01410C  22E2               	addwfc	fsr1h,f,c
 10558   01410E  0012               	return		;funcret
 10559   014110                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 10560                           	callstack 0
 10561                           
 10562 ;; *************** function _XF_popEvent *****************
 10563 ;; Defined at:
 10564 ;;		line 142 in file "xf/xf.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  inISR           1  [STACK] _Bool 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;  ev              6  [STACK] struct Event_
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  6  [STACK] struct Event_
 10571 ;; Registers used:
 10572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used: 1
 10584 ;; Hardware stack levels required when called: 8
 10585 ;; This function calls:
 10586 ;;		_ENTERCRITICAL
 10587 ;;		_LEAVECRITICAL
 10588 ;;		___awmod
 10589 ;; This function is called by:
 10590 ;;		_XF_executeOnce
 10591 ;; This function uses a reentrant model
 10592 ;;
 10593                           
 10594                           	psect	text31
 10595   01389E                     __ptext31:
 10596                           	callstack 0
 10597   01389E                     _XF_popEvent:
 10598                           	callstack 0
 10599                           
 10600                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 10601   01389E  0E0B               	movlw	11
 10602   0138A0  26E1               	addwf	fsr1l,f,c
 10603   0138A2  0E00               	movlw	0
 10604   0138A4  22E2               	addwfc	fsr1h,f,c
 10605   0138A6                     
 10606                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 10607                           ;stkvar	_ev @ sp[(-6)+0]
 10608   0138A6  0EFA               	movlw	-6
 10609   0138A8  6AE3               	clrf	plusw1,c
 10610   0138AA                     
 10611                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 10612                           ;stkvar	_ev @ sp[(-6)+0]
 10613   0138AA  0EFB               	movlw	251
 10614   0138AC  24E1               	addwf	fsr1l,w,c
 10615   0138AE  6ED9               	movwf	fsr2l,c
 10616   0138B0  0EFF               	movlw	255
 10617   0138B2  20E2               	addwfc	fsr1h,w,c
 10618   0138B4  6EDA               	movwf	fsr2h,c
 10619   0138B6  6ADE               	clrf	postinc2,c
 10620   0138B8  6ADE               	clrf	postinc2,c
 10621   0138BA  6ADD               	clrf	postdec2,c
 10622   0138BC                     
 10623                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 10624                           ;stkvar	_inISR @ sp[(-6)+-6]
 10625   0138BC  0EF4               	movlw	-12
 10626   0138BE  50E3               	movf	plusw1,w,c
 10627   0138C0  6EE6               	movwf	postinc1,c
 10628   0138C2  EC94  F0A4         	call	_ENTERCRITICAL	;wreg free
 10629   0138C6                     
 10630                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 10631   0138C6  EE23  F0DF         	lfsr	2,_theXF+279
 10632   0138CA  50DF               	movf	indf2,w,c
 10633   0138CC  A4D8               	btfss	status,2,c
 10634   0138CE  EF6B  F09C         	goto	u2751
 10635   0138D2  EF6D  F09C         	goto	u2750
 10636   0138D6                     u2751:
 10637   0138D6  EF82  F09C         	goto	l5047
 10638   0138DA                     u2750:
 10639   0138DA                     l5041:
 10640                           
 10641                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 10642                           ;stkvar	_inISR @ sp[(-6)+-6]
 10643   0138DA  0EF4               	movlw	-12
 10644   0138DC  50E3               	movf	plusw1,w,c
 10645   0138DE  6EE6               	movwf	postinc1,c
 10646   0138E0  EC88  F0A4         	call	_LEAVECRITICAL	;wreg free
 10647   0138E4                     
 10648                           ;xf/xf.c: 152:       return ev;
 10649                           ;stkvar	_ev @ sp[(-6)+0]
 10650   0138E4  0EFA               	movlw	250
 10651   0138E6  24E1               	addwf	fsr1l,w,c
 10652   0138E8  6ED9               	movwf	fsr2l,c
 10653   0138EA  0EFF               	movlw	255
 10654   0138EC  20E2               	addwfc	fsr1h,w,c
 10655   0138EE  6EDA               	movwf	fsr2h,c
 10656                           
 10657                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 10658   0138F0  0E06               	movlw	6
 10659   0138F2  6E01               	movwf	btemp^0,c
 10660   0138F4  0EF4               	movlw	-12
 10661   0138F6                     us276999:
 10662   0138F6  CFDE FFE3          	movff	postinc2,plusw1
 10663   0138FA  28E8               	incf	wreg,w,c
 10664   0138FC  2E01               	decfsz	btemp^0,f,c
 10665   0138FE  D7FB               	bra	us276999
 10666   013900  EFB0  F09C         	goto	l1227
 10667   013904                     l5047:
 10668                           
 10669                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10670   013904  EE23  F0DD         	lfsr	2,_theXF+277
 10671   013908  50DF               	movf	indf2,w,c
 10672   01390A  0D06               	mullw	6
 10673   01390C  0E28               	movlw	low (_theXF+96)
 10674   01390E  24F3               	addwf	243,w,c
 10675   013910  6ED9               	movwf	fsr2l,c
 10676   013912  0E03               	movlw	high (_theXF+96)
 10677   013914  20F4               	addwfc	prodh,w,c
 10678   013916  6EDA               	movwf	fsr2h,c
 10679                           
 10680                           ;stkvar	_ev @ sp[(-6)+0]
 10681   013918  0E06               	movlw	6
 10682   01391A  6E01               	movwf	btemp^0,c
 10683   01391C  0EFA               	movlw	-6
 10684   01391E                     us277999:
 10685   01391E  CFDE FFE3          	movff	postinc2,plusw1
 10686   013922  28E8               	incf	wreg,w,c
 10687   013924  2E01               	decfsz	btemp^0,f,c
 10688   013926  D7FB               	bra	us277999
 10689   013928                     
 10690                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10691   013928  0E1E               	movlw	30
 10692   01392A  6EE6               	movwf	postinc1,c
 10693   01392C  0E00               	movlw	0
 10694   01392E  6EE6               	movwf	postinc1,c
 10695   013930  EE23  F0DD         	lfsr	2,_theXF+277
 10696   013934  50DF               	movf	indf2,w,c
 10697   013936  6E0B               	movwf	(btemp+10)^0,c
 10698   013938  6A0C               	clrf	(btemp+11)^0,c
 10699   01393A  0E01               	movlw	1
 10700   01393C  260B               	addwf	(btemp+10)^0,f,c
 10701   01393E  0E00               	movlw	0
 10702   013940  220C               	addwfc	(btemp+11)^0,f,c
 10703   013942  C00B  FFE6         	movff	btemp+10,postinc1
 10704   013946  C00C  FFE6         	movff	btemp+11,postinc1
 10705   01394A  EC9A  F096         	call	___awmod	;wreg free
 10706   01394E  C001  F3DD         	movff	btemp,_theXF+277
 10707   013952                     
 10708                           ;xf/xf.c: 156:     theXF.countEvt--;
 10709   013952  C3DF  FFE8         	movff	_theXF+279,wreg
 10710   013956  0FFF               	addlw	-1
 10711   013958  CFE8 F3DF          	movff	wreg,_theXF+279
 10712   01395C  EF6D  F09C         	goto	l5041
 10713   013960                     l1227:
 10714                           
 10715                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10716   013960  0EFA               	movlw	250
 10717   013962  26E1               	addwf	fsr1l,f,c
 10718   013964  0EFF               	movlw	255
 10719   013966  22E2               	addwfc	fsr1h,f,c
 10720   013968  0012               	return		;funcret
 10721   01396A                     __end_of_XF_popEvent:
 10722                           	callstack 0
 10723                           
 10724 ;; *************** function ___awmod *****************
 10725 ;; Defined at:
 10726 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  dividend        2  [STACK] int 
 10729 ;;  divisor         2  [STACK] int 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  sign            1  [STACK] unsigned char 
 10732 ;;  counter         1  [STACK] unsigned char 
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  2  [STACK] int 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;Total ram usage:        0 bytes
 10747 ;; Hardware stack levels used: 1
 10748 ;; Hardware stack levels required when called: 7
 10749 ;; This function calls:
 10750 ;;		Nothing
 10751 ;; This function is called by:
 10752 ;;		_XF_pushEvent
 10753 ;;		_XF_popEvent
 10754 ;; This function uses a reentrant model
 10755 ;;
 10756                           
 10757                           	psect	text32
 10758   012D34                     __ptext32:
 10759                           	callstack 0
 10760   012D34                     ___awmod:
 10761                           	callstack 0
 10762                           
 10763                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10764   012D34  52E6               	movf	postinc1,f,c
 10765   012D36  52E6               	movf	postinc1,f,c
 10766   012D38                     
 10767                           ;stkvar	_sign @ sp[(-2)+0]
 10768   012D38  0EFE               	movlw	-2
 10769   012D3A  6AE3               	clrf	plusw1,c
 10770   012D3C                     
 10771                           ;stkvar	_dividend @ sp[(-2)+-2]
 10772   012D3C  0EFD               	movlw	-3
 10773   012D3E  BEE3               	btfsc	plusw1,7,c
 10774   012D40  EFA6  F096         	goto	u1920
 10775   012D44  EFA4  F096         	goto	u1921
 10776   012D48                     u1921:
 10777   012D48  EFAF  F096         	goto	l4305
 10778   012D4C                     u1920:
 10779   012D4C                     
 10780                           ;stkvar	_dividend @ sp[(-2)+-2]
 10781                           ;stkvar	_dividend @ sp[(-2)+-2]
 10782   012D4C  0EFC               	movlw	-4
 10783   012D4E  6CE3               	negf	plusw1,c
 10784   012D50  0EFD               	movlw	-3
 10785   012D52  1EE3               	comf	plusw1,f,c
 10786   012D54  B0D8               	btfsc	status,0,c
 10787   012D56  2AE3               	incf	plusw1,f,c
 10788   012D58                     
 10789                           ;stkvar	_sign @ sp[(-2)+0]
 10790   012D58  0EFE               	movlw	-2
 10791   012D5A  6AE3               	clrf	plusw1,c
 10792   012D5C  2AE3               	incf	plusw1,f,c
 10793   012D5E                     l4305:
 10794                           
 10795                           ;stkvar	_divisor @ sp[(-2)+-4]
 10796   012D5E  0EFB               	movlw	-5
 10797   012D60  BEE3               	btfsc	plusw1,7,c
 10798   012D62  EFB7  F096         	goto	u1930
 10799   012D66  EFB5  F096         	goto	u1931
 10800   012D6A                     u1931:
 10801   012D6A  EFBD  F096         	goto	l4309
 10802   012D6E                     u1930:
 10803   012D6E                     
 10804                           ;stkvar	_divisor @ sp[(-2)+-4]
 10805                           ;stkvar	_divisor @ sp[(-2)+-4]
 10806   012D6E  0EFA               	movlw	-6
 10807   012D70  6CE3               	negf	plusw1,c
 10808   012D72  0EFB               	movlw	-5
 10809   012D74  1EE3               	comf	plusw1,f,c
 10810   012D76  B0D8               	btfsc	status,0,c
 10811   012D78  2AE3               	incf	plusw1,f,c
 10812   012D7A                     l4309:
 10813                           
 10814                           ;stkvar	_divisor @ sp[(-2)+-4]
 10815   012D7A  0EFA               	movlw	-6
 10816   012D7C  CFE3 F001          	movff	plusw1,btemp
 10817   012D80  0EFB               	movlw	-5
 10818   012D82  50E3               	movf	plusw1,w,c
 10819   012D84  1001               	iorwf	btemp^0,w,c
 10820   012D86  B4D8               	btfsc	status,2,c
 10821   012D88  EFC8  F096         	goto	u1941
 10822   012D8C  EFCA  F096         	goto	u1940
 10823   012D90                     u1941:
 10824   012D90  EF25  F097         	goto	l4327
 10825   012D94                     u1940:
 10826   012D94                     
 10827                           ;stkvar	_counter @ sp[(-2)+1]
 10828   012D94  0EFF               	movlw	-1
 10829   012D96  6AE3               	clrf	plusw1,c
 10830   012D98  2AE3               	incf	plusw1,f,c
 10831   012D9A  EFE0  F096         	goto	l4317
 10832   012D9E                     l4313:
 10833                           
 10834                           ;stkvar	_divisor @ sp[(-2)+-4]
 10835   012D9E  0EFA               	movlw	-6
 10836   012DA0  50E3               	movf	plusw1,w,c
 10837   012DA2  90D8               	bcf	status,0,c
 10838   012DA4  34E8               	rlcf	wreg,w,c
 10839   012DA6  6E01               	movwf	btemp^0,c
 10840   012DA8  0EFA               	movlw	-6
 10841   012DAA  C001  FFE3         	movff	btemp,plusw1
 10842   012DAE  0EFB               	movlw	-5
 10843   012DB0  50E3               	movf	plusw1,w,c
 10844   012DB2  34E8               	rlcf	wreg,w,c
 10845   012DB4  6E01               	movwf	btemp^0,c
 10846   012DB6  0EFB               	movlw	-5
 10847   012DB8  C001  FFE3         	movff	btemp,plusw1
 10848   012DBC                     
 10849                           ;stkvar	_counter @ sp[(-2)+1]
 10850   012DBC  0EFF               	movlw	-1
 10851   012DBE  2AE3               	incf	plusw1,f,c
 10852   012DC0                     l4317:
 10853                           
 10854                           ;stkvar	_divisor @ sp[(-2)+-4]
 10855   012DC0  0EFB               	movlw	-5
 10856   012DC2  AEE3               	btfss	plusw1,7,c
 10857   012DC4  EFE6  F096         	goto	u1951
 10858   012DC8  EFE8  F096         	goto	u1950
 10859   012DCC                     u1951:
 10860   012DCC  EFCF  F096         	goto	l4313
 10861   012DD0                     u1950:
 10862   012DD0                     l4319:
 10863                           
 10864                           ;stkvar	_divisor @ sp[(-2)+-4]
 10865   012DD0  0EFA               	movlw	-6
 10866   012DD2  CFE3 F00B          	movff	plusw1,btemp+10
 10867   012DD6  0EFB               	movlw	-5
 10868   012DD8  CFE3 F00C          	movff	plusw1,btemp+11
 10869                           
 10870                           ;stkvar	_dividend @ sp[(-2)+-2]
 10871   012DDC  0EFC               	movlw	-4
 10872   012DDE  CFE3 F009          	movff	plusw1,btemp+8
 10873   012DE2  0EFD               	movlw	-3
 10874   012DE4  CFE3 F00A          	movff	plusw1,btemp+9
 10875   012DE8  500B               	movf	(btemp+10)^0,w,c
 10876   012DEA  5C09               	subwf	(btemp+8)^0,w,c
 10877   012DEC  500C               	movf	(btemp+11)^0,w,c
 10878   012DEE  580A               	subwfb	(btemp+9)^0,w,c
 10879   012DF0  A0D8               	btfss	status,0,c
 10880   012DF2  EFFD  F096         	goto	u1961
 10881   012DF6  EFFF  F096         	goto	u1960
 10882   012DFA                     u1961:
 10883   012DFA  EF11  F097         	goto	l4323
 10884   012DFE                     u1960:
 10885   012DFE                     
 10886                           ;stkvar	_divisor @ sp[(-2)+-4]
 10887                           ;stkvar	_dividend @ sp[(-2)+-2]
 10888   012DFE  0EFC               	movlw	-4
 10889   012E00  50E3               	movf	plusw1,w,c
 10890   012E02  6E01               	movwf	btemp^0,c
 10891   012E04  0EFA               	movlw	-6
 10892   012E06  50E3               	movf	plusw1,w,c
 10893   012E08  5E01               	subwf	btemp^0,f,c
 10894   012E0A  0EFC               	movlw	-4
 10895   012E0C  C001  FFE3         	movff	btemp,plusw1
 10896   012E10  0EFD               	movlw	-3
 10897   012E12  50E3               	movf	plusw1,w,c
 10898   012E14  6E01               	movwf	btemp^0,c
 10899   012E16  0EFB               	movlw	-5
 10900   012E18  50E3               	movf	plusw1,w,c
 10901   012E1A  5A01               	subwfb	btemp^0,f,c
 10902   012E1C  0EFD               	movlw	-3
 10903   012E1E  C001  FFE3         	movff	btemp,plusw1
 10904   012E22                     l4323:
 10905                           
 10906                           ;stkvar	_divisor @ sp[(-2)+-4]
 10907   012E22  90D8               	bcf	status,0,c
 10908   012E24  0EFB               	movlw	-5
 10909   012E26  32E3               	rrcf	plusw1,f,c
 10910   012E28  0EFA               	movlw	-6
 10911   012E2A  32E3               	rrcf	plusw1,f,c
 10912   012E2C                     
 10913                           ;stkvar	_counter @ sp[(-2)+1]
 10914   012E2C  0EFF               	movlw	-1
 10915   012E2E  50E3               	movf	plusw1,w,c
 10916   012E30  6E01               	movwf	btemp^0,c
 10917   012E32  0E01               	movlw	1
 10918   012E34  5E01               	subwf	btemp^0,f,c
 10919   012E36  0EFF               	movlw	-1
 10920   012E38  C001  FFE3         	movff	btemp,plusw1
 10921   012E3C  A4D8               	btfss	status,2,c
 10922   012E3E  EF23  F097         	goto	u1971
 10923   012E42  EF25  F097         	goto	u1970
 10924   012E46                     u1971:
 10925   012E46  EFE8  F096         	goto	l4319
 10926   012E4A                     u1970:
 10927   012E4A                     l4327:
 10928                           
 10929                           ;stkvar	_sign @ sp[(-2)+0]
 10930   012E4A  0EFE               	movlw	-2
 10931   012E4C  50E3               	movf	plusw1,w,c
 10932   012E4E  B4D8               	btfsc	status,2,c
 10933   012E50  EF2C  F097         	goto	u1981
 10934   012E54  EF2E  F097         	goto	u1980
 10935   012E58                     u1981:
 10936   012E58  EF34  F097         	goto	l4331
 10937   012E5C                     u1980:
 10938   012E5C                     
 10939                           ;stkvar	_dividend @ sp[(-2)+-2]
 10940                           ;stkvar	_dividend @ sp[(-2)+-2]
 10941   012E5C  0EFC               	movlw	-4
 10942   012E5E  6CE3               	negf	plusw1,c
 10943   012E60  0EFD               	movlw	-3
 10944   012E62  1EE3               	comf	plusw1,f,c
 10945   012E64  B0D8               	btfsc	status,0,c
 10946   012E66  2AE3               	incf	plusw1,f,c
 10947   012E68                     l4331:
 10948                           
 10949                           ;stkvar	_dividend @ sp[(-2)+-2]
 10950   012E68  0EFC               	movlw	-4
 10951   012E6A  CFE3 F001          	movff	plusw1,btemp
 10952   012E6E  0EFD               	movlw	-3
 10953   012E70  CFE3 F002          	movff	plusw1,btemp+1
 10954   012E74                     
 10955                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 10956   012E74  0EFA               	movlw	250
 10957   012E76  26E1               	addwf	fsr1l,f,c
 10958   012E78  0EFF               	movlw	255
 10959   012E7A  22E2               	addwfc	fsr1h,f,c
 10960   012E7C  0012               	return		;funcret
 10961   012E7E                     __end_of___awmod:
 10962                           	callstack 0
 10963                           
 10964 ;; *************** function _LEAVECRITICAL *****************
 10965 ;; Defined at:
 10966 ;;		line 265 in file "xf/xf.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  inISR           1  [STACK] _Bool 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1  [STACK] void 
 10973 ;; Registers used:
 10974 ;;		wreg, fsr1l, fsr1h, status,2
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;Total ram usage:        0 bytes
 10985 ;; Hardware stack levels used: 1
 10986 ;; Hardware stack levels required when called: 7
 10987 ;; This function calls:
 10988 ;;		Nothing
 10989 ;; This function is called by:
 10990 ;;		_XF_pushEvent
 10991 ;;		_XF_popEvent
 10992 ;;		_XF_scheduleTimer
 10993 ;;		_XF_unscheduleTimer
 10994 ;; This function uses a reentrant model
 10995 ;;
 10996                           
 10997                           	psect	text33
 10998   014910                     __ptext33:
 10999                           	callstack 0
 11000   014910                     _LEAVECRITICAL:
 11001                           	callstack 10
 11002   014910                     
 11003                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11004                           ;stkvar	_inISR @ sp[(0)+-1]
 11005   014910  0EFF               	movlw	-1
 11006   014912  50E3               	movf	plusw1,w,c
 11007   014914  A4D8               	btfss	status,2,c
 11008   014916  EF8F  F0A4         	goto	u1691
 11009   01491A  EF91  F0A4         	goto	u1690
 11010   01491E                     u1691:
 11011   01491E  EF92  F0A4         	goto	l1254
 11012   014922                     u1690:
 11013   014922                     
 11014                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11015   014922  8EF2               	bsf	242,7,c	;volatile
 11016   014924                     l1254:
 11017                           
 11018                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11019   014924  52E5               	movf	postdec1,f,c
 11020   014926  0012               	return		;funcret
 11021   014928                     __end_of_LEAVECRITICAL:
 11022                           	callstack 0
 11023                           
 11024 ;; *************** function _ENTERCRITICAL *****************
 11025 ;; Defined at:
 11026 ;;		line 250 in file "xf/xf.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;  inISR           1  [STACK] _Bool 
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1  [STACK] void 
 11033 ;; Registers used:
 11034 ;;		wreg, fsr1l, fsr1h, status,2
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;Total ram usage:        0 bytes
 11045 ;; Hardware stack levels used: 1
 11046 ;; Hardware stack levels required when called: 7
 11047 ;; This function calls:
 11048 ;;		Nothing
 11049 ;; This function is called by:
 11050 ;;		_XF_pushEvent
 11051 ;;		_XF_popEvent
 11052 ;;		_XF_scheduleTimer
 11053 ;;		_XF_unscheduleTimer
 11054 ;; This function uses a reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text34
 11058   014928                     __ptext34:
 11059                           	callstack 0
 11060   014928                     _ENTERCRITICAL:
 11061                           	callstack 10
 11062   014928                     
 11063                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11064                           ;stkvar	_inISR @ sp[(0)+-1]
 11065   014928  0EFF               	movlw	-1
 11066   01492A  50E3               	movf	plusw1,w,c
 11067   01492C  A4D8               	btfss	status,2,c
 11068   01492E  EF9B  F0A4         	goto	u1681
 11069   014932  EF9D  F0A4         	goto	u1680
 11070   014936                     u1681:
 11071   014936  EF9E  F0A4         	goto	l1250
 11072   01493A                     u1680:
 11073   01493A                     
 11074                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11075   01493A  9EF2               	bcf	242,7,c	;volatile
 11076   01493C                     l1250:
 11077                           
 11078                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11079   01493C  52E5               	movf	postdec1,f,c
 11080   01493E  0012               	return		;funcret
 11081   014940                     __end_of_ENTERCRITICAL:
 11082                           	callstack 0
 11083                           
 11084 ;; *************** function _SYSTEM_Initialize *****************
 11085 ;; Defined at:
 11086 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;		None
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  1  [STACK] void 
 11093 ;; Registers used:
 11094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/0
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;Total ram usage:        0 bytes
 11105 ;; Hardware stack levels used: 1
 11106 ;; Hardware stack levels required when called: 9
 11107 ;; This function calls:
 11108 ;;		_INTERRUPT_Initialize
 11109 ;;		_OSCILLATOR_Initialize
 11110 ;;		_PIN_MANAGER_Initialize
 11111 ;;		_SPI2_Initialize
 11112 ;;		_TMR0_Initialize
 11113 ;; This function is called by:
 11114 ;;		_main
 11115 ;; This function uses a reentrant model
 11116 ;;
 11117                           
 11118                           	psect	text35
 11119   014940                     __ptext35:
 11120                           	callstack 0
 11121   014940                     _SYSTEM_Initialize:
 11122                           	callstack 21
 11123   014940                     
 11124                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11125   014940  ECBD  F0A4         	call	_INTERRUPT_Initialize	;wreg free
 11126   014944                     
 11127                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11128   014944  ECAB  F0A4         	call	_SPI2_Initialize	;wreg free
 11129                           
 11130                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11131   014948  EC08  F0A4         	call	_PIN_MANAGER_Initialize	;wreg free
 11132                           
 11133                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11134   01494C  ECB3  F0A4         	call	_OSCILLATOR_Initialize	;wreg free
 11135   014950                     
 11136                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11137   014950  EC9C  F0A3         	call	_TMR0_Initialize	;wreg free
 11138   014954                     
 11139                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11140   014954  0012               	return		;funcret
 11141   014956                     __end_of_SYSTEM_Initialize:
 11142                           	callstack 0
 11143                           
 11144 ;; *************** function _TMR0_Initialize *****************
 11145 ;; Defined at:
 11146 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;		None
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;		None
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1  [STACK] void 
 11153 ;; Registers used:
 11154 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;Total ram usage:        0 bytes
 11165 ;; Hardware stack levels used: 1
 11166 ;; Hardware stack levels required when called: 8
 11167 ;; This function calls:
 11168 ;;		_TMR0_SetInterruptHandler
 11169 ;; This function is called by:
 11170 ;;		_SYSTEM_Initialize
 11171 ;; This function uses a reentrant model
 11172 ;;
 11173                           
 11174                           	psect	text36
 11175   014738                     __ptext36:
 11176                           	callstack 0
 11177   014738                     _TMR0_Initialize:
 11178                           	callstack 21
 11179   014738                     
 11180                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11181   014738  9CD5               	bcf	213,6,c	;volatile
 11182   01473A                     
 11183                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11184   01473A  0EFD               	movlw	253
 11185   01473C  6ED7               	movwf	215,c	;volatile
 11186                           
 11187                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11188   01473E  0E9D               	movlw	157
 11189   014740  6ED6               	movwf	214,c	;volatile
 11190   014742                     
 11191                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11192   014742  50D6               	movf	214,w,c	;volatile
 11193   014744  CFD7 F001          	movff	4055,btemp	;volatile
 11194   014748  6A02               	clrf	(btemp+1)^0,c
 11195   01474A  C001  F002         	movff	btemp,btemp+1
 11196   01474E  6A01               	clrf	btemp^0,c
 11197   014750  1001               	iorwf	btemp^0,w,c
 11198   014752  6E37               	movwf	_timer0ReloadVal^0,c	;volatile
 11199   014754  5002               	movf	(btemp+1)^0,w,c
 11200   014756  6E38               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11201   014758                     
 11202                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11203   014758  94F2               	bcf	242,2,c	;volatile
 11204   01475A                     
 11205                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11206   01475A  8AF2               	bsf	242,5,c	;volatile
 11207   01475C                     
 11208                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11209   01475C  0E7E               	movlw	low _TMR0_DefaultInterruptHandler
 11210   01475E  6EE6               	movwf	postinc1,c
 11211   014760  0E49               	movlw	high _TMR0_DefaultInterruptHandler
 11212   014762  6EE6               	movwf	postinc1,c
 11213   014764  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11214   014766  6EE6               	movwf	postinc1,c
 11215   014768  EC5C  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
 11216   01476C                     
 11217                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11218   01476C  0E97               	movlw	151
 11219   01476E  6ED5               	movwf	213,c	;volatile
 11220   014770                     
 11221                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11222   014770  0012               	return		;funcret
 11223   014772                     __end_of_TMR0_Initialize:
 11224                           	callstack 0
 11225                           
 11226 ;; *************** function _TMR0_SetInterruptHandler *****************
 11227 ;; Defined at:
 11228 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11231 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  1  [STACK] void 
 11236 ;; Registers used:
 11237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;Total ram usage:        0 bytes
 11248 ;; Hardware stack levels used: 1
 11249 ;; Hardware stack levels required when called: 7
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_TMR0_Initialize
 11254 ;;		_main
 11255 ;; This function uses a reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text37
 11259   0148B8                     __ptext37:
 11260                           	callstack 0
 11261   0148B8                     _TMR0_SetInterruptHandler:
 11262                           	callstack 23
 11263   0148B8                     
 11264                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11265                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11266   0148B8  50E1               	movf	fsr1l,w,c
 11267   0148BA  0FFD               	addlw	-3
 11268   0148BC  6ED9               	movwf	fsr2l,c
 11269   0148BE  50E2               	movf	fsr1h,w,c
 11270   0148C0  6EDA               	movwf	fsr2h,c
 11271   0148C2  0EFF               	movlw	255
 11272   0148C4  22DA               	addwfc	fsr2h,f,c
 11273   0148C6  CFDE F050          	movff	postinc2,_TMR0_InterruptHandler
 11274   0148CA  CFDE F051          	movff	postinc2,_TMR0_InterruptHandler+1
 11275   0148CE  CFDD F052          	movff	postdec2,_TMR0_InterruptHandler+2
 11276   0148D2                     
 11277                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11278   0148D2  52E5               	movf	postdec1,f,c
 11279   0148D4  52E5               	movf	postdec1,f,c
 11280   0148D6  52E5               	movf	postdec1,f,c
 11281   0148D8  0012               	return		;funcret
 11282   0148DA                     __end_of_TMR0_SetInterruptHandler:
 11283                           	callstack 0
 11284                           
 11285 ;; *************** function _SPI2_Initialize *****************
 11286 ;; Defined at:
 11287 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1  [STACK] void 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;Total ram usage:        0 bytes
 11306 ;; Hardware stack levels used: 1
 11307 ;; Hardware stack levels required when called: 7
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_SYSTEM_Initialize
 11312 ;; This function uses a reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text38
 11316   014956                     __ptext38:
 11317                           	callstack 0
 11318   014956                     _SPI2_Initialize:
 11319                           	callstack 22
 11320   014956                     
 11321                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11322   014956  0E40               	movlw	64
 11323   014958  6E64               	movwf	100,c	;volatile
 11324                           
 11325                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11326   01495A  0E01               	movlw	1
 11327   01495C  6E63               	movwf	99,c	;volatile
 11328   01495E                     
 11329                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11330   01495E  6A65               	clrf	101,c	;volatile
 11331   014960                     
 11332                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11333   014960  9C95               	bcf	149,6,c	;volatile
 11334   014962                     
 11335                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11336   014962  9A63               	bcf	99,5,c	;volatile
 11337   014964                     
 11338                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11339   014964  0012               	return		;funcret
 11340   014966                     __end_of_SPI2_Initialize:
 11341                           	callstack 0
 11342                           
 11343 ;; *************** function _PIN_MANAGER_Initialize *****************
 11344 ;; Defined at:
 11345 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;		None
 11350 ;; Return value:  Size  Location     Type
 11351 ;;                  1  [STACK] void 
 11352 ;; Registers used:
 11353 ;;		wreg, status,2
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11363 ;;Total ram usage:        0 bytes
 11364 ;; Hardware stack levels used: 1
 11365 ;; Hardware stack levels required when called: 7
 11366 ;; This function calls:
 11367 ;;		Nothing
 11368 ;; This function is called by:
 11369 ;;		_SYSTEM_Initialize
 11370 ;; This function uses a reentrant model
 11371 ;;
 11372                           
 11373                           	psect	text39
 11374   014810                     __ptext39:
 11375                           	callstack 0
 11376   014810                     _PIN_MANAGER_Initialize:
 11377                           	callstack 22
 11378   014810                     
 11379                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11380   014810  6A8D               	clrf	141,c	;volatile
 11381                           
 11382                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11383   014812  6A91               	clrf	145,c	;volatile
 11384                           
 11385                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11386   014814  6A8C               	clrf	140,c	;volatile
 11387                           
 11388                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11389   014816  6A89               	clrf	137,c	;volatile
 11390                           
 11391                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11392   014818  6A8E               	clrf	142,c	;volatile
 11393                           
 11394                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11395   01481A  6A8A               	clrf	138,c	;volatile
 11396                           
 11397                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11398   01481C  6A8F               	clrf	143,c	;volatile
 11399                           
 11400                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11401   01481E  6A8B               	clrf	139,c	;volatile
 11402                           
 11403                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11404   014820  6A90               	clrf	144,c	;volatile
 11405                           
 11406                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11407   014822  6896               	setf	150,c	;volatile
 11408                           
 11409                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11410   014824  6897               	setf	151,c	;volatile
 11411   014826                     
 11412                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11413   014826  0E3F               	movlw	63
 11414   014828  6E92               	movwf	146,c	;volatile
 11415   01482A                     
 11416                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11417   01482A  6898               	setf	152,c	;volatile
 11418   01482C                     
 11419                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11420   01482C  6893               	setf	147,c	;volatile
 11421   01482E                     
 11422                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11423   01482E  6899               	setf	153,c	;volatile
 11424   014830                     
 11425                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11426   014830  6894               	setf	148,c	;volatile
 11427                           
 11428                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11429   014832  0EAF               	movlw	175
 11430   014834  6E95               	movwf	149,c	;volatile
 11431   014836                     
 11432                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11433   014836  689A               	setf	154,c	;volatile
 11434                           
 11435                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11436   014838  0EF0               	movlw	-16
 11437   01483A  16C1               	andwf	193,f,c	;volatile
 11438   01483C                     
 11439                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11440   01483C  0012               	return		;funcret
 11441   01483E                     __end_of_PIN_MANAGER_Initialize:
 11442                           	callstack 0
 11443                           
 11444 ;; *************** function _OSCILLATOR_Initialize *****************
 11445 ;; Defined at:
 11446 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;		None
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;		None
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  1  [STACK] void 
 11453 ;; Registers used:
 11454 ;;		wreg, status,2
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;Total ram usage:        0 bytes
 11465 ;; Hardware stack levels used: 1
 11466 ;; Hardware stack levels required when called: 7
 11467 ;; This function calls:
 11468 ;;		Nothing
 11469 ;; This function is called by:
 11470 ;;		_SYSTEM_Initialize
 11471 ;; This function uses a reentrant model
 11472 ;;
 11473                           
 11474                           	psect	text40
 11475   014966                     __ptext40:
 11476                           	callstack 0
 11477   014966                     _OSCILLATOR_Initialize:
 11478                           	callstack 22
 11479   014966                     
 11480                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 11481   014966  6AD3               	clrf	211,c	;volatile
 11482   014968                     
 11483                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 11484   014968  0E50               	movlw	80
 11485   01496A  6E9B               	movwf	155,c	;volatile
 11486   01496C                     
 11487                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 11488   01496C  0012               	return		;funcret
 11489   01496E                     __end_of_OSCILLATOR_Initialize:
 11490                           	callstack 0
 11491                           
 11492 ;; *************** function _INTERRUPT_Initialize *****************
 11493 ;; Defined at:
 11494 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1  [STACK] void 
 11501 ;; Registers used:
 11502 ;;		None
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11512 ;;Total ram usage:        0 bytes
 11513 ;; Hardware stack levels used: 1
 11514 ;; Hardware stack levels required when called: 7
 11515 ;; This function calls:
 11516 ;;		Nothing
 11517 ;; This function is called by:
 11518 ;;		_SYSTEM_Initialize
 11519 ;; This function uses a reentrant model
 11520 ;;
 11521                           
 11522                           	psect	text41
 11523   01497A                     __ptext41:
 11524                           	callstack 0
 11525   01497A                     _INTERRUPT_Initialize:
 11526                           	callstack 22
 11527   01497A                     
 11528                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 11529   01497A  9ED0               	bcf	208,7,c	;volatile
 11530   01497C                     
 11531                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 11532   01497C  0012               	return		;funcret
 11533   01497E                     __end_of_INTERRUPT_Initialize:
 11534                           	callstack 0
 11535                           
 11536 ;; *************** function _CanSetFilter *****************
 11537 ;; Defined at:
 11538 ;;		line 231 in file "can/can.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  filter          1  [STACK] enum E5325
 11541 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 11542 ;;		 -> fObj(6), 
 11543 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 11544 ;;		 -> mObj(6), 
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;		None
 11547 ;; Return value:  Size  Location     Type
 11548 ;;                  1  [STACK] void 
 11549 ;; Registers used:
 11550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;Total ram usage:        0 bytes
 11561 ;; Hardware stack levels used: 1
 11562 ;; Hardware stack levels required when called: 10
 11563 ;; This function calls:
 11564 ;;		_DRV_CANFDSPI_FilterDisable
 11565 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 11566 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 11567 ;;		_DRV_CANFDSPI_FilterToFifoLink
 11568 ;; This function is called by:
 11569 ;;		_main
 11570 ;; This function uses a reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text42
 11574   0143C2                     __ptext42:
 11575                           	callstack 0
 11576   0143C2                     _CanSetFilter:
 11577                           	callstack 20
 11578   0143C2                     
 11579                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 11580                           ;stkvar	_filter @ sp[(0)+-1]
 11581   0143C2  0EFF               	movlw	-1
 11582   0143C4  50E3               	movf	plusw1,w,c
 11583   0143C6  6EE6               	movwf	postinc1,c
 11584   0143C8  ECD3  F0A0         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 11585   0143CC                     
 11586                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 11587                           ;stkvar	_fObj @ sp[(0)+-3]
 11588   0143CC  0EFD               	movlw	-3
 11589   0143CE  CFE3 FFE6          	movff	plusw1,postinc1
 11590   0143D2  CFE3 FFE6          	movff	plusw1,postinc1
 11591                           
 11592                           ;stkvar	_filter @ sp[(-2)+-1]
 11593   0143D6  0EFD               	movlw	-3
 11594   0143D8  50E3               	movf	plusw1,w,c
 11595   0143DA  6EE6               	movwf	postinc1,c
 11596   0143DC  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 11597   0143E0                     
 11598                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 11599                           ;stkvar	_fObj @ sp[(0)+-3]
 11600   0143E0  0EFD               	movlw	-3
 11601   0143E2  CFE3 F00B          	movff	plusw1,btemp+10
 11602   0143E6  0EFE               	movlw	-2
 11603   0143E8  CFE3 F00C          	movff	plusw1,btemp+11
 11604   0143EC  0E05               	movlw	5
 11605   0143EE  240B               	addwf	(btemp+10)^0,w,c
 11606   0143F0  6ED9               	movwf	fsr2l,c
 11607   0143F2  0E00               	movlw	0
 11608   0143F4  200C               	addwfc	(btemp+11)^0,w,c
 11609   0143F6  6EDA               	movwf	fsr2h,c
 11610   0143F8  50DF               	movf	indf2,w,c
 11611   0143FA  6EE6               	movwf	postinc1,c
 11612                           
 11613                           ;stkvar	_mObj @ sp[(-1)+-5]
 11614   0143FC  0EFA               	movlw	-6
 11615   0143FE  CFE3 FFE6          	movff	plusw1,postinc1
 11616   014402  CFE3 FFE6          	movff	plusw1,postinc1
 11617                           
 11618                           ;stkvar	_filter @ sp[(-3)+-1]
 11619   014406  0EFC               	movlw	-4
 11620   014408  50E3               	movf	plusw1,w,c
 11621   01440A  6EE6               	movwf	postinc1,c
 11622   01440C  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 11623   014410                     
 11624                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 11625   014410  0E01               	movlw	1
 11626   014412  6EE6               	movwf	postinc1,c
 11627   014414  0E02               	movlw	2
 11628   014416  6EE6               	movwf	postinc1,c
 11629                           
 11630                           ;stkvar	_filter @ sp[(-2)+-1]
 11631   014418  0EFD               	movlw	-3
 11632   01441A  50E3               	movf	plusw1,w,c
 11633   01441C  6EE6               	movwf	postinc1,c
 11634   01441E  EC88  F0A0         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 11635   014422                     
 11636                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 11637   014422  0EFB               	movlw	251
 11638   014424  26E1               	addwf	fsr1l,f,c
 11639   014426  0EFF               	movlw	255
 11640   014428  22E2               	addwfc	fsr1h,f,c
 11641   01442A  0012               	return		;funcret
 11642   01442C                     __end_of_CanSetFilter:
 11643                           	callstack 0
 11644                           
 11645 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 11646 ;; Defined at:
 11647 ;;		line 1072 in file "can/can.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;  filter          1  [STACK] enum E5325
 11650 ;;  channel         1  [STACK] enum E5290
 11651 ;;  enable          1  [STACK] _Bool 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;  a               2  [STACK] unsigned short 
 11654 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 11655 ;;  spiTransferE    1    0        char 
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  1  [STACK] char 
 11658 ;; Registers used:
 11659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;Total ram usage:        0 bytes
 11670 ;; Hardware stack levels used: 1
 11671 ;; Hardware stack levels required when called: 9
 11672 ;; This function calls:
 11673 ;;		_DRV_CANFDSPI_WriteByte
 11674 ;; This function is called by:
 11675 ;;		_CanSetFilter
 11676 ;; This function uses a reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text43
 11680   014110                     __ptext43:
 11681                           	callstack 0
 11682   014110                     _DRV_CANFDSPI_FilterToFifoLink:
 11683                           	callstack 0
 11684                           
 11685                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11686   014110  52E6               	movf	postinc1,f,c
 11687   014112  52E6               	movf	postinc1,f,c
 11688   014114  52E6               	movf	postinc1,f,c
 11689   014116                     
 11690                           ;can/can.c: 1080:     if (enable) {
 11691                           ;stkvar	_enable @ sp[(-3)+-3]
 11692   014116  0EFA               	movlw	-6
 11693   014118  50E3               	movf	plusw1,w,c
 11694   01411A  B4D8               	btfsc	status,2,c
 11695   01411C  EF92  F0A0         	goto	u2711
 11696   014120  EF94  F0A0         	goto	u2710
 11697   014124                     u2711:
 11698   014124  EF9E  F0A0         	goto	l4989
 11699   014128                     u2710:
 11700   014128                     
 11701                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11702                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11703   014128  50E1               	movf	fsr1l,w,c
 11704   01412A  0FFF               	addlw	-1
 11705   01412C  6ED9               	movwf	fsr2l,c
 11706   01412E  50E2               	movf	fsr1h,w,c
 11707   014130  6EDA               	movwf	fsr2h,c
 11708   014132  0EFF               	movlw	255
 11709   014134  22DA               	addwfc	fsr2h,f,c
 11710   014136  8EDF               	bsf	indf2,7,c
 11711                           
 11712                           ;can/can.c: 1082:     } else {
 11713   014138  EFA6  F0A0         	goto	l4991
 11714   01413C                     l4989:
 11715                           
 11716                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11717                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11718   01413C  50E1               	movf	fsr1l,w,c
 11719   01413E  0FFF               	addlw	-1
 11720   014140  6ED9               	movwf	fsr2l,c
 11721   014142  50E2               	movf	fsr1h,w,c
 11722   014144  6EDA               	movwf	fsr2h,c
 11723   014146  0EFF               	movlw	255
 11724   014148  22DA               	addwfc	fsr2h,f,c
 11725   01414A  9EDF               	bcf	indf2,7,c
 11726   01414C                     l4991:
 11727                           
 11728                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11729                           ;stkvar	_channel @ sp[(-3)+-2]
 11730   01414C  0EFB               	movlw	-5
 11731   01414E  CFE3 F00C          	movff	plusw1,btemp+11
 11732                           
 11733                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11734   014152  50E1               	movf	fsr1l,w,c
 11735   014154  0FFF               	addlw	-1
 11736   014156  6ED9               	movwf	fsr2l,c
 11737   014158  50E2               	movf	fsr1h,w,c
 11738   01415A  6EDA               	movwf	fsr2h,c
 11739   01415C  0EFF               	movlw	255
 11740   01415E  22DA               	addwfc	fsr2h,f,c
 11741   014160  50DF               	movf	223,w,c
 11742   014162  180C               	xorwf	(btemp+11)^0,w,c
 11743   014164  0BE0               	andlw	-32
 11744   014166  180C               	xorwf	(btemp+11)^0,w,c
 11745   014168  6EDF               	movwf	223,c
 11746   01416A                     
 11747                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 11748                           ;stkvar	_filter @ sp[(-3)+-1]
 11749   01416A  0EFC               	movlw	-4
 11750   01416C  CFE3 F00C          	movff	plusw1,btemp+11
 11751   014170  0ED0               	movlw	208
 11752   014172  240C               	addwf	(btemp+11)^0,w,c
 11753   014174  6E09               	movwf	(btemp+8)^0,c
 11754   014176  6A0A               	clrf	(btemp+9)^0,c
 11755   014178  0E01               	movlw	1
 11756   01417A  220A               	addwfc	(btemp+9)^0,f,c
 11757                           
 11758                           ;stkvar	_a @ sp[(-3)+0]
 11759   01417C  0EFD               	movlw	-3
 11760   01417E  C009  FFE3         	movff	btemp+8,plusw1
 11761   014182  0EFE               	movlw	-2
 11762   014184  C00A  FFE3         	movff	btemp+9,plusw1
 11763   014188                     
 11764                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11765   014188  0EFF               	movlw	-1
 11766   01418A  50E3               	movf	plusw1,w,c
 11767   01418C  6EE6               	movwf	postinc1,c
 11768                           
 11769                           ;stkvar	_a @ sp[(-4)+0]
 11770   01418E  0EFC               	movlw	-4
 11771   014190  CFE3 FFE6          	movff	plusw1,postinc1
 11772   014194  CFE3 FFE6          	movff	plusw1,postinc1
 11773   014198  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 11774   01419C                     
 11775                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 11776   01419C  0EFA               	movlw	250
 11777   01419E  26E1               	addwf	fsr1l,f,c
 11778   0141A0  0EFF               	movlw	255
 11779   0141A2  22E2               	addwfc	fsr1h,f,c
 11780   0141A4  0012               	return		;funcret
 11781   0141A6                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 11782                           	callstack 0
 11783                           
 11784 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 11785 ;; Defined at:
 11786 ;;		line 1001 in file "can/can.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;  filter          1  [STACK] enum E5325
 11789 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 11790 ;;		 -> fObj(6), 
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;  temp32          4  [STACK] unsigned long 
 11793 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 11794 ;;  a               2  [STACK] unsigned short 
 11795 ;;  spiTransferE    1    0        char 
 11796 ;; Return value:  Size  Location     Type
 11797 ;;                  1  [STACK] char 
 11798 ;; Registers used:
 11799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;Total ram usage:        0 bytes
 11810 ;; Hardware stack levels used: 1
 11811 ;; Hardware stack levels required when called: 9
 11812 ;; This function calls:
 11813 ;;		_DRV_CANFDSPI_WriteWord
 11814 ;; This function is called by:
 11815 ;;		_CanSetFilter
 11816 ;; This function uses a reentrant model
 11817 ;;
 11818                           
 11819                           	psect	text44
 11820   010E34                     __ptext44:
 11821                           	callstack 0
 11822   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 11823                           	callstack 0
 11824                           
 11825                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11826   010E34  0E0C               	movlw	12
 11827   010E36  26E1               	addwf	fsr1l,f,c
 11828   010E38  0E00               	movlw	0
 11829   010E3A  22E2               	addwfc	fsr1h,f,c
 11830   010E3C                     
 11831                           ;can/can.c: 1009:     fObj.word = 0;
 11832                           ;stkvar	_fObj @ sp[(-12)+4]
 11833   010E3C  0EF8               	movlw	-8
 11834   010E3E  6AE3               	clrf	plusw1,c
 11835   010E40  0EF9               	movlw	-7
 11836   010E42  6AE3               	clrf	plusw1,c
 11837   010E44  0EFA               	movlw	-6
 11838   010E46  6AE3               	clrf	plusw1,c
 11839   010E48  0EFB               	movlw	-5
 11840   010E4A  6AE3               	clrf	plusw1,c
 11841   010E4C                     
 11842                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 11843                           ;stkvar	_id @ sp[(-12)+-3]
 11844   010E4C  0EF1               	movlw	-15
 11845   010E4E  CFE3 F00B          	movff	plusw1,btemp+10
 11846   010E52  0EF2               	movlw	-14
 11847   010E54  CFE3 F00C          	movff	plusw1,btemp+11
 11848   010E58  0E05               	movlw	5
 11849   010E5A  240B               	addwf	(btemp+10)^0,w,c
 11850   010E5C  6ED9               	movwf	fsr2l,c
 11851   010E5E  0E00               	movlw	0
 11852   010E60  200C               	addwfc	(btemp+11)^0,w,c
 11853   010E62  6EDA               	movwf	fsr2h,c
 11854   010E64  50DF               	movf	indf2,w,c
 11855   010E66  A4D8               	btfss	status,2,c
 11856   010E68  EF38  F087         	goto	u2531
 11857   010E6C  EF3A  F087         	goto	u2530
 11858   010E70                     u2531:
 11859   010E70  EFD2  F087         	goto	l4935
 11860   010E74                     u2530:
 11861   010E74                     
 11862                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 11863                           ;stkvar	_id @ sp[(-12)+-3]
 11864   010E74  0EF1               	movlw	-15
 11865   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 11866   010E7A  0EF2               	movlw	-14
 11867   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 11868   010E80  50DF               	movf	indf2,w,c
 11869   010E82  6E0C               	movwf	(btemp+11)^0,c
 11870                           
 11871                           ;stkvar	_fObj @ sp[(-12)+4]
 11872   010E84  0EF8               	movlw	-8
 11873   010E86  C00C  FFE3         	movff	btemp+11,plusw1
 11874   010E8A                     
 11875                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 11876                           ;stkvar	_fObj @ sp[(-12)+4]
 11877   010E8A  0EF9               	movlw	249
 11878   010E8C  24E1               	addwf	fsr1l,w,c
 11879   010E8E  6ED9               	movwf	fsr2l,c
 11880   010E90  0EFF               	movlw	255
 11881   010E92  20E2               	addwfc	fsr1h,w,c
 11882   010E94  6EDA               	movwf	fsr2h,c
 11883                           
 11884                           ;stkvar	_id @ sp[(-12)+-3]
 11885   010E96  0EF1               	movlw	-15
 11886   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 11887   010E9C  0EF2               	movlw	-14
 11888   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 11889   010EA2  CFEE F009          	movff	postinc0,btemp+8
 11890   010EA6  CFEE F00A          	movff	postinc0,btemp+9
 11891   010EAA  CFEE F00B          	movff	postinc0,btemp+10
 11892   010EAE  CFEE F00C          	movff	postinc0,btemp+11
 11893   010EB2  C00A  F009         	movff	btemp+9,btemp+8
 11894   010EB6  C00B  F00A         	movff	btemp+10,btemp+9
 11895   010EBA  C00C  F00B         	movff	btemp+11,btemp+10
 11896   010EBE  6A0C               	clrf	(btemp+11)^0,c
 11897   010EC0  5009               	movf	(btemp+8)^0,w,c
 11898   010EC2  6EDF               	movwf	indf2,c
 11899   010EC4                     
 11900                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 11901                           ;stkvar	_fObj @ sp[(-12)+4]
 11902   010EC4  0EFA               	movlw	250
 11903   010EC6  24E1               	addwf	fsr1l,w,c
 11904   010EC8  6ED9               	movwf	fsr2l,c
 11905   010ECA  0EFF               	movlw	255
 11906   010ECC  20E2               	addwfc	fsr1h,w,c
 11907   010ECE  6EDA               	movwf	fsr2h,c
 11908                           
 11909                           ;stkvar	_id @ sp[(-12)+-3]
 11910   010ED0  0EF1               	movlw	-15
 11911   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 11912   010ED6  0EF2               	movlw	-14
 11913   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 11914   010EDC  CFEE F009          	movff	postinc0,btemp+8
 11915   010EE0  CFEE F00A          	movff	postinc0,btemp+9
 11916   010EE4  CFEE F00B          	movff	postinc0,btemp+10
 11917   010EE8  CFEE F00C          	movff	postinc0,btemp+11
 11918   010EEC  0E11               	movlw	17
 11919   010EEE  EF7E  F087         	goto	u2540
 11920   010EF2                     u2545:
 11921   010EF2  90D8               	bcf	status,0,c
 11922   010EF4  320C               	rrcf	(btemp+11)^0,f,c
 11923   010EF6  320B               	rrcf	(btemp+10)^0,f,c
 11924   010EF8  320A               	rrcf	(btemp+9)^0,f,c
 11925   010EFA  3209               	rrcf	(btemp+8)^0,f,c
 11926   010EFC                     u2540:
 11927   010EFC  2EE8               	decfsz	wreg,f,c
 11928   010EFE  EF79  F087         	goto	u2545
 11929   010F02  5009               	movf	(btemp+8)^0,w,c
 11930   010F04  6EDF               	movwf	indf2,c
 11931   010F06                     
 11932                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 11933                           ;stkvar	_fObj @ sp[(-12)+4]
 11934   010F06  0EFB               	movlw	251
 11935   010F08  24E1               	addwf	fsr1l,w,c
 11936   010F0A  6ED9               	movwf	fsr2l,c
 11937   010F0C  0EFF               	movlw	255
 11938   010F0E  20E2               	addwfc	fsr1h,w,c
 11939   010F10  6EDA               	movwf	fsr2h,c
 11940                           
 11941                           ;stkvar	_id @ sp[(-12)+-3]
 11942   010F12  0EF1               	movlw	-15
 11943   010F14  CFE3 F00B          	movff	plusw1,btemp+10
 11944   010F18  0EF2               	movlw	-14
 11945   010F1A  CFE3 F00C          	movff	plusw1,btemp+11
 11946   010F1E  0E05               	movlw	5
 11947   010F20  240B               	addwf	(btemp+10)^0,w,c
 11948   010F22  6EE9               	movwf	fsr0l,c
 11949   010F24  0E00               	movlw	0
 11950   010F26  200C               	addwfc	(btemp+11)^0,w,c
 11951   010F28  6EEA               	movwf	fsr0h,c
 11952   010F2A  50EF               	movf	indf0,w,c
 11953   010F2C  6E0C               	movwf	(btemp+11)^0,c
 11954   010F2E  0E06               	movlw	6
 11955   010F30  6E01               	movwf	btemp^0,c
 11956   010F32                     u2555:
 11957   010F32  90D8               	bcf	status,0,c
 11958   010F34  360C               	rlcf	(btemp+11)^0,f,c
 11959   010F36  2E01               	decfsz	btemp^0,f,c
 11960   010F38  EF99  F087         	goto	u2555
 11961                           
 11962                           ;stkvar	_id @ sp[(-12)+-3]
 11963   010F3C  0EF1               	movlw	-15
 11964   010F3E  CFE3 F009          	movff	plusw1,btemp+8
 11965   010F42  0EF2               	movlw	-14
 11966   010F44  CFE3 F00A          	movff	plusw1,btemp+9
 11967   010F48  0E04               	movlw	4
 11968   010F4A  2409               	addwf	(btemp+8)^0,w,c
 11969   010F4C  6EE9               	movwf	fsr0l,c
 11970   010F4E  0E00               	movlw	0
 11971   010F50  200A               	addwfc	(btemp+9)^0,w,c
 11972   010F52  6EEA               	movwf	fsr0h,c
 11973   010F54  50EF               	movf	indf0,w,c
 11974   010F56  6E0B               	movwf	(btemp+10)^0,c
 11975   010F58  0E05               	movlw	5
 11976   010F5A  6E01               	movwf	btemp^0,c
 11977   010F5C                     u2565:
 11978   010F5C  90D8               	bcf	status,0,c
 11979   010F5E  360B               	rlcf	(btemp+10)^0,f,c
 11980   010F60  2E01               	decfsz	btemp^0,f,c
 11981   010F62  EFAE  F087         	goto	u2565
 11982                           
 11983                           ;stkvar	_id @ sp[(-12)+-3]
 11984   010F66  0EF1               	movlw	-15
 11985   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 11986   010F6C  0EF2               	movlw	-14
 11987   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 11988   010F72  CFEE F005          	movff	postinc0,btemp+4
 11989   010F76  CFEE F006          	movff	postinc0,btemp+5
 11990   010F7A  CFEE F007          	movff	postinc0,btemp+6
 11991   010F7E  CFEE F008          	movff	postinc0,btemp+7
 11992   010F82  0E19               	movlw	25
 11993   010F84  EFC9  F087         	goto	u2570
 11994   010F88                     u2575:
 11995   010F88  90D8               	bcf	status,0,c
 11996   010F8A  3208               	rrcf	(btemp+7)^0,f,c
 11997   010F8C  3207               	rrcf	(btemp+6)^0,f,c
 11998   010F8E  3206               	rrcf	(btemp+5)^0,f,c
 11999   010F90  3205               	rrcf	(btemp+4)^0,f,c
 12000   010F92                     u2570:
 12001   010F92  2EE8               	decfsz	wreg,f,c
 12002   010F94  EFC4  F087         	goto	u2575
 12003   010F98  5005               	movf	(btemp+4)^0,w,c
 12004   010F9A  100B               	iorwf	(btemp+10)^0,w,c
 12005   010F9C  100C               	iorwf	(btemp+11)^0,w,c
 12006   010F9E  6EDF               	movwf	indf2,c
 12007                           
 12008                           ;can/can.c: 1017:     }
 12009   010FA0  EF97  F088         	goto	l4947
 12010   010FA4                     l4935:
 12011                           
 12012                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12013                           ;stkvar	_id @ sp[(-12)+-3]
 12014   010FA4  0EF1               	movlw	-15
 12015   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12016   010FAA  0EF2               	movlw	-14
 12017   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12018   010FB0  CFDE F009          	movff	postinc2,btemp+8
 12019   010FB4  CFDE F00A          	movff	postinc2,btemp+9
 12020   010FB8  CFDE F00B          	movff	postinc2,btemp+10
 12021   010FBC  CFDE F00C          	movff	postinc2,btemp+11
 12022   010FC0  0E13               	movlw	19
 12023   010FC2  EFE8  F087         	goto	u2580
 12024   010FC6                     u2585:
 12025   010FC6  90D8               	bcf	status,0,c
 12026   010FC8  320C               	rrcf	(btemp+11)^0,f,c
 12027   010FCA  320B               	rrcf	(btemp+10)^0,f,c
 12028   010FCC  320A               	rrcf	(btemp+9)^0,f,c
 12029   010FCE  3209               	rrcf	(btemp+8)^0,f,c
 12030   010FD0                     u2580:
 12031   010FD0  2EE8               	decfsz	wreg,f,c
 12032   010FD2  EFE3  F087         	goto	u2585
 12033   010FD6  0EFF               	movlw	255
 12034   010FD8  1409               	andwf	(btemp+8)^0,w,c
 12035   010FDA  6E05               	movwf	(btemp+4)^0,c
 12036   010FDC  0E07               	movlw	7
 12037   010FDE  140A               	andwf	(btemp+9)^0,w,c
 12038   010FE0  6E06               	movwf	(btemp+5)^0,c
 12039   010FE2  0E00               	movlw	0
 12040   010FE4  140B               	andwf	(btemp+10)^0,w,c
 12041   010FE6  6E07               	movwf	(btemp+6)^0,c
 12042   010FE8  0E00               	movlw	0
 12043   010FEA  140C               	andwf	(btemp+11)^0,w,c
 12044   010FEC  6E08               	movwf	(btemp+7)^0,c
 12045                           
 12046                           ;stkvar	_id @ sp[(-12)+-3]
 12047   010FEE  0EF1               	movlw	-15
 12048   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12049   010FF4  0EF2               	movlw	-14
 12050   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12051   010FFA  0EFF               	movlw	255
 12052   010FFC  14DE               	andwf	postinc2,w,c
 12053   010FFE  6E09               	movwf	(btemp+8)^0,c
 12054   011000  0EFF               	movlw	255
 12055   011002  14DE               	andwf	postinc2,w,c
 12056   011004  6E0A               	movwf	(btemp+9)^0,c
 12057   011006  0E03               	movlw	3
 12058   011008  14DE               	andwf	postinc2,w,c
 12059   01100A  6E0B               	movwf	(btemp+10)^0,c
 12060   01100C  0E00               	movlw	0
 12061   01100E  14DE               	andwf	postinc2,w,c
 12062   011010  6E0C               	movwf	(btemp+11)^0,c
 12063   011012  0E0B               	movlw	11
 12064   011014                     u2595:
 12065   011014  90D8               	bcf	status,0,c
 12066   011016  3609               	rlcf	(btemp+8)^0,f,c
 12067   011018  360A               	rlcf	(btemp+9)^0,f,c
 12068   01101A  360B               	rlcf	(btemp+10)^0,f,c
 12069   01101C  360C               	rlcf	(btemp+11)^0,f,c
 12070   01101E  2EE8               	decfsz	wreg,f,c
 12071   011020  EF0A  F088         	goto	u2595
 12072   011024  5005               	movf	(btemp+4)^0,w,c
 12073   011026  1009               	iorwf	(btemp+8)^0,w,c
 12074   011028  6E01               	movwf	btemp^0,c
 12075   01102A  5006               	movf	(btemp+5)^0,w,c
 12076   01102C  100A               	iorwf	(btemp+9)^0,w,c
 12077   01102E  6E02               	movwf	(btemp+1)^0,c
 12078   011030  5007               	movf	(btemp+6)^0,w,c
 12079   011032  100B               	iorwf	(btemp+10)^0,w,c
 12080   011034  6E03               	movwf	(btemp+2)^0,c
 12081   011036  5008               	movf	(btemp+7)^0,w,c
 12082   011038  100C               	iorwf	(btemp+11)^0,w,c
 12083   01103A  6E04               	movwf	(btemp+3)^0,c
 12084                           
 12085                           ;stkvar	_temp32 @ sp[(-12)+0]
 12086   01103C  0EF4               	movlw	-12
 12087   01103E  C001  FFE3         	movff	btemp,plusw1
 12088   011042  0EF5               	movlw	-11
 12089   011044  C002  FFE3         	movff	btemp+1,plusw1
 12090   011048  0EF6               	movlw	-10
 12091   01104A  C003  FFE3         	movff	btemp+2,plusw1
 12092   01104E  0EF7               	movlw	-9
 12093   011050  C004  FFE3         	movff	btemp+3,plusw1
 12094   011054                     
 12095                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12096                           ;stkvar	_temp32 @ sp[(-12)+0]
 12097   011054  50E1               	movf	fsr1l,w,c
 12098   011056  0FF4               	addlw	-12
 12099   011058  6ED9               	movwf	fsr2l,c
 12100   01105A  50E2               	movf	fsr1h,w,c
 12101   01105C  6EDA               	movwf	fsr2h,c
 12102   01105E  0EFF               	movlw	255
 12103   011060  22DA               	addwfc	fsr2h,f,c
 12104   011062  0EFF               	movlw	255
 12105   011064  16DE               	andwf	postinc2,f,c
 12106   011066  0EFF               	movlw	255
 12107   011068  16DE               	andwf	postinc2,f,c
 12108   01106A  0EFF               	movlw	255
 12109   01106C  16DE               	andwf	postinc2,f,c
 12110   01106E  0E1F               	movlw	31
 12111   011070  16DE               	andwf	postinc2,f,c
 12112   011072                     
 12113                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12114                           ;stkvar	_temp32 @ sp[(-12)+0]
 12115                           ;stkvar	_fObj @ sp[(-12)+4]
 12116   011072  0EF4               	movlw	-12
 12117   011074  CFE3 F001          	movff	plusw1,btemp
 12118   011078  0EF8               	movlw	-8
 12119   01107A  C001  FFE3         	movff	btemp,plusw1
 12120   01107E                     
 12121                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12122                           ;stkvar	_temp32 @ sp[(-12)+0]
 12123   01107E  0EF5               	movlw	245
 12124   011080  24E1               	addwf	fsr1l,w,c
 12125   011082  6ED9               	movwf	fsr2l,c
 12126   011084  0EFF               	movlw	255
 12127   011086  20E2               	addwfc	fsr1h,w,c
 12128   011088  6EDA               	movwf	fsr2h,c
 12129                           
 12130                           ;stkvar	_fObj @ sp[(-12)+4]
 12131   01108A  0EF9               	movlw	249
 12132   01108C  24E1               	addwf	fsr1l,w,c
 12133   01108E  6EE9               	movwf	fsr0l,c
 12134   011090  0EFF               	movlw	255
 12135   011092  20E2               	addwfc	fsr1h,w,c
 12136   011094  6EEA               	movwf	fsr0h,c
 12137   011096  CFDF FFEF          	movff	indf2,indf0
 12138   01109A                     
 12139                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12140                           ;stkvar	_temp32 @ sp[(-12)+0]
 12141   01109A  0EF6               	movlw	246
 12142   01109C  24E1               	addwf	fsr1l,w,c
 12143   01109E  6ED9               	movwf	fsr2l,c
 12144   0110A0  0EFF               	movlw	255
 12145   0110A2  20E2               	addwfc	fsr1h,w,c
 12146   0110A4  6EDA               	movwf	fsr2h,c
 12147                           
 12148                           ;stkvar	_fObj @ sp[(-12)+4]
 12149   0110A6  0EFA               	movlw	250
 12150   0110A8  24E1               	addwf	fsr1l,w,c
 12151   0110AA  6EE9               	movwf	fsr0l,c
 12152   0110AC  0EFF               	movlw	255
 12153   0110AE  20E2               	addwfc	fsr1h,w,c
 12154   0110B0  6EEA               	movwf	fsr0h,c
 12155   0110B2  CFDF FFEF          	movff	indf2,indf0
 12156   0110B6                     
 12157                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12158                           ;stkvar	_fObj @ sp[(-12)+4]
 12159   0110B6  0EFB               	movlw	251
 12160   0110B8  24E1               	addwf	fsr1l,w,c
 12161   0110BA  6ED9               	movwf	fsr2l,c
 12162   0110BC  0EFF               	movlw	255
 12163   0110BE  20E2               	addwfc	fsr1h,w,c
 12164   0110C0  6EDA               	movwf	fsr2h,c
 12165                           
 12166                           ;stkvar	_temp32 @ sp[(-12)+0]
 12167   0110C2  0EF7               	movlw	247
 12168   0110C4  24E1               	addwf	fsr1l,w,c
 12169   0110C6  6EE9               	movwf	fsr0l,c
 12170   0110C8  0EFF               	movlw	255
 12171   0110CA  20E2               	addwfc	fsr1h,w,c
 12172   0110CC  6EEA               	movwf	fsr0h,c
 12173   0110CE  50EF               	movf	indf0,w,c
 12174   0110D0  6E0C               	movwf	(btemp+11)^0,c
 12175                           
 12176                           ;stkvar	_id @ sp[(-12)+-3]
 12177   0110D2  0EF1               	movlw	-15
 12178   0110D4  CFE3 F009          	movff	plusw1,btemp+8
 12179   0110D8  0EF2               	movlw	-14
 12180   0110DA  CFE3 F00A          	movff	plusw1,btemp+9
 12181   0110DE  0E05               	movlw	5
 12182   0110E0  2409               	addwf	(btemp+8)^0,w,c
 12183   0110E2  6EE9               	movwf	fsr0l,c
 12184   0110E4  0E00               	movlw	0
 12185   0110E6  200A               	addwfc	(btemp+9)^0,w,c
 12186   0110E8  6EEA               	movwf	fsr0h,c
 12187   0110EA  50EF               	movf	indf0,w,c
 12188   0110EC  6E0B               	movwf	(btemp+10)^0,c
 12189   0110EE  0E06               	movlw	6
 12190   0110F0  6E01               	movwf	btemp^0,c
 12191   0110F2                     u2605:
 12192   0110F2  90D8               	bcf	status,0,c
 12193   0110F4  360B               	rlcf	(btemp+10)^0,f,c
 12194   0110F6  2E01               	decfsz	btemp^0,f,c
 12195   0110F8  EF79  F088         	goto	u2605
 12196                           
 12197                           ;stkvar	_id @ sp[(-12)+-3]
 12198   0110FC  0EF1               	movlw	-15
 12199   0110FE  CFE3 F009          	movff	plusw1,btemp+8
 12200   011102  0EF2               	movlw	-14
 12201   011104  CFE3 F00A          	movff	plusw1,btemp+9
 12202   011108  0E04               	movlw	4
 12203   01110A  2409               	addwf	(btemp+8)^0,w,c
 12204   01110C  6EE9               	movwf	fsr0l,c
 12205   01110E  0E00               	movlw	0
 12206   011110  200A               	addwfc	(btemp+9)^0,w,c
 12207   011112  6EEA               	movwf	fsr0h,c
 12208   011114  50EF               	movf	indf0,w,c
 12209   011116  6E0A               	movwf	(btemp+9)^0,c
 12210   011118  0E05               	movlw	5
 12211   01111A  6E01               	movwf	btemp^0,c
 12212   01111C                     u2615:
 12213   01111C  90D8               	bcf	status,0,c
 12214   01111E  360A               	rlcf	(btemp+9)^0,f,c
 12215   011120  2E01               	decfsz	btemp^0,f,c
 12216   011122  EF8E  F088         	goto	u2615
 12217   011126  500A               	movf	(btemp+9)^0,w,c
 12218   011128  100B               	iorwf	(btemp+10)^0,w,c
 12219   01112A  100C               	iorwf	(btemp+11)^0,w,c
 12220   01112C  6EDF               	movwf	indf2,c
 12221   01112E                     l4947:
 12222                           
 12223                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12224                           ;stkvar	_filter @ sp[(-12)+-1]
 12225   01112E  0EF3               	movlw	-13
 12226   011130  50E3               	movf	plusw1,w,c
 12227   011132  0D08               	mullw	8
 12228   011134  CFF3 F00B          	movff	prodl,btemp+10
 12229   011138  CFF4 F00C          	movff	prodh,btemp+11
 12230   01113C  0EF0               	movlw	240
 12231   01113E  240B               	addwf	(btemp+10)^0,w,c
 12232   011140  6E09               	movwf	(btemp+8)^0,c
 12233   011142  0E01               	movlw	1
 12234   011144  200C               	addwfc	(btemp+11)^0,w,c
 12235   011146  6E0A               	movwf	(btemp+9)^0,c
 12236                           
 12237                           ;stkvar	_a @ sp[(-12)+10]
 12238   011148  0EFE               	movlw	-2
 12239   01114A  C009  FFE3         	movff	btemp+8,plusw1
 12240   01114E  0EFF               	movlw	-1
 12241   011150  C00A  FFE3         	movff	btemp+9,plusw1
 12242   011154                     
 12243                           ;stkvar	_fObj @ sp[(-12)+4]
 12244   011154  0EF8               	movlw	-8
 12245   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12246   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12247   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12248   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12249                           
 12250                           ;stkvar	_a @ sp[(-16)+10]
 12251   011166  0EFA               	movlw	-6
 12252   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12253   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12254   011170  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12255   011174                     
 12256                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12257   011174  0EF1               	movlw	241
 12258   011176  26E1               	addwf	fsr1l,f,c
 12259   011178  0EFF               	movlw	255
 12260   01117A  22E2               	addwfc	fsr1h,f,c
 12261   01117C  0012               	return		;funcret
 12262   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12263                           	callstack 0
 12264                           
 12265 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12266 ;; Defined at:
 12267 ;;		line 1035 in file "can/can.c"
 12268 ;; Parameters:    Size  Location     Type
 12269 ;;  filter          1  [STACK] enum E5325
 12270 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12271 ;;		 -> mObj(6), 
 12272 ;;  EXIDE           1  [STACK] unsigned char 
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;  temp32          4  [STACK] unsigned long 
 12275 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12276 ;;  a               2  [STACK] unsigned short 
 12277 ;;  spiTransferE    1    0        char 
 12278 ;; Return value:  Size  Location     Type
 12279 ;;                  1  [STACK] char 
 12280 ;; Registers used:
 12281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;Total ram usage:        0 bytes
 12292 ;; Hardware stack levels used: 1
 12293 ;; Hardware stack levels required when called: 9
 12294 ;; This function calls:
 12295 ;;		_DRV_CANFDSPI_WriteWord
 12296 ;; This function is called by:
 12297 ;;		_CanSetFilter
 12298 ;; This function uses a reentrant model
 12299 ;;
 12300                           
 12301                           	psect	text45
 12302   01117E                     __ptext45:
 12303                           	callstack 0
 12304   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12305                           	callstack 0
 12306                           
 12307                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12308   01117E  0E0C               	movlw	12
 12309   011180  26E1               	addwf	fsr1l,f,c
 12310   011182  0E00               	movlw	0
 12311   011184  22E2               	addwfc	fsr1h,f,c
 12312   011186                     
 12313                           ;can/can.c: 1043:     mObj.word = 0;
 12314                           ;stkvar	_mObj @ sp[(-12)+4]
 12315   011186  0EF8               	movlw	-8
 12316   011188  6AE3               	clrf	plusw1,c
 12317   01118A  0EF9               	movlw	-7
 12318   01118C  6AE3               	clrf	plusw1,c
 12319   01118E  0EFA               	movlw	-6
 12320   011190  6AE3               	clrf	plusw1,c
 12321   011192  0EFB               	movlw	-5
 12322   011194  6AE3               	clrf	plusw1,c
 12323   011196                     
 12324                           ;can/can.c: 1047:     if(EXIDE == 0)
 12325                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12326   011196  0EF0               	movlw	-16
 12327   011198  50E3               	movf	plusw1,w,c
 12328   01119A  A4D8               	btfss	status,2,c
 12329   01119C  EFD2  F088         	goto	u2621
 12330   0111A0  EFD4  F088         	goto	u2620
 12331   0111A4                     u2621:
 12332   0111A4  EF6C  F089         	goto	l4967
 12333   0111A8                     u2620:
 12334   0111A8                     
 12335                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12336                           ;stkvar	_mask @ sp[(-12)+-3]
 12337   0111A8  0EF1               	movlw	-15
 12338   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12339   0111AE  0EF2               	movlw	-14
 12340   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12341   0111B4  50DF               	movf	indf2,w,c
 12342   0111B6  6E0C               	movwf	(btemp+11)^0,c
 12343                           
 12344                           ;stkvar	_mObj @ sp[(-12)+4]
 12345   0111B8  0EF8               	movlw	-8
 12346   0111BA  C00C  FFE3         	movff	btemp+11,plusw1
 12347   0111BE                     
 12348                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12349                           ;stkvar	_mObj @ sp[(-12)+4]
 12350   0111BE  0EF9               	movlw	249
 12351   0111C0  24E1               	addwf	fsr1l,w,c
 12352   0111C2  6ED9               	movwf	fsr2l,c
 12353   0111C4  0EFF               	movlw	255
 12354   0111C6  20E2               	addwfc	fsr1h,w,c
 12355   0111C8  6EDA               	movwf	fsr2h,c
 12356                           
 12357                           ;stkvar	_mask @ sp[(-12)+-3]
 12358   0111CA  0EF1               	movlw	-15
 12359   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12360   0111D0  0EF2               	movlw	-14
 12361   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12362   0111D6  CFEE F009          	movff	postinc0,btemp+8
 12363   0111DA  CFEE F00A          	movff	postinc0,btemp+9
 12364   0111DE  CFEE F00B          	movff	postinc0,btemp+10
 12365   0111E2  CFEE F00C          	movff	postinc0,btemp+11
 12366   0111E6  C00A  F009         	movff	btemp+9,btemp+8
 12367   0111EA  C00B  F00A         	movff	btemp+10,btemp+9
 12368   0111EE  C00C  F00B         	movff	btemp+11,btemp+10
 12369   0111F2  6A0C               	clrf	(btemp+11)^0,c
 12370   0111F4  5009               	movf	(btemp+8)^0,w,c
 12371   0111F6  6EDF               	movwf	indf2,c
 12372   0111F8                     
 12373                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12374                           ;stkvar	_mObj @ sp[(-12)+4]
 12375   0111F8  0EFA               	movlw	250
 12376   0111FA  24E1               	addwf	fsr1l,w,c
 12377   0111FC  6ED9               	movwf	fsr2l,c
 12378   0111FE  0EFF               	movlw	255
 12379   011200  20E2               	addwfc	fsr1h,w,c
 12380   011202  6EDA               	movwf	fsr2h,c
 12381                           
 12382                           ;stkvar	_mask @ sp[(-12)+-3]
 12383   011204  0EF1               	movlw	-15
 12384   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12385   01120A  0EF2               	movlw	-14
 12386   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12387   011210  CFEE F009          	movff	postinc0,btemp+8
 12388   011214  CFEE F00A          	movff	postinc0,btemp+9
 12389   011218  CFEE F00B          	movff	postinc0,btemp+10
 12390   01121C  CFEE F00C          	movff	postinc0,btemp+11
 12391   011220  0E11               	movlw	17
 12392   011222  EF18  F089         	goto	u2630
 12393   011226                     u2635:
 12394   011226  90D8               	bcf	status,0,c
 12395   011228  320C               	rrcf	(btemp+11)^0,f,c
 12396   01122A  320B               	rrcf	(btemp+10)^0,f,c
 12397   01122C  320A               	rrcf	(btemp+9)^0,f,c
 12398   01122E  3209               	rrcf	(btemp+8)^0,f,c
 12399   011230                     u2630:
 12400   011230  2EE8               	decfsz	wreg,f,c
 12401   011232  EF13  F089         	goto	u2635
 12402   011236  5009               	movf	(btemp+8)^0,w,c
 12403   011238  6EDF               	movwf	indf2,c
 12404   01123A                     
 12405                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12406                           ;stkvar	_mObj @ sp[(-12)+4]
 12407   01123A  0EFB               	movlw	251
 12408   01123C  24E1               	addwf	fsr1l,w,c
 12409   01123E  6ED9               	movwf	fsr2l,c
 12410   011240  0EFF               	movlw	255
 12411   011242  20E2               	addwfc	fsr1h,w,c
 12412   011244  6EDA               	movwf	fsr2h,c
 12413                           
 12414                           ;stkvar	_mask @ sp[(-12)+-3]
 12415   011246  0EF1               	movlw	-15
 12416   011248  CFE3 F00B          	movff	plusw1,btemp+10
 12417   01124C  0EF2               	movlw	-14
 12418   01124E  CFE3 F00C          	movff	plusw1,btemp+11
 12419   011252  0E05               	movlw	5
 12420   011254  240B               	addwf	(btemp+10)^0,w,c
 12421   011256  6EE9               	movwf	fsr0l,c
 12422   011258  0E00               	movlw	0
 12423   01125A  200C               	addwfc	(btemp+11)^0,w,c
 12424   01125C  6EEA               	movwf	fsr0h,c
 12425   01125E  50EF               	movf	indf0,w,c
 12426   011260  6E0C               	movwf	(btemp+11)^0,c
 12427   011262  0E06               	movlw	6
 12428   011264  6E01               	movwf	btemp^0,c
 12429   011266                     u2645:
 12430   011266  90D8               	bcf	status,0,c
 12431   011268  360C               	rlcf	(btemp+11)^0,f,c
 12432   01126A  2E01               	decfsz	btemp^0,f,c
 12433   01126C  EF33  F089         	goto	u2645
 12434                           
 12435                           ;stkvar	_mask @ sp[(-12)+-3]
 12436   011270  0EF1               	movlw	-15
 12437   011272  CFE3 F009          	movff	plusw1,btemp+8
 12438   011276  0EF2               	movlw	-14
 12439   011278  CFE3 F00A          	movff	plusw1,btemp+9
 12440   01127C  0E04               	movlw	4
 12441   01127E  2409               	addwf	(btemp+8)^0,w,c
 12442   011280  6EE9               	movwf	fsr0l,c
 12443   011282  0E00               	movlw	0
 12444   011284  200A               	addwfc	(btemp+9)^0,w,c
 12445   011286  6EEA               	movwf	fsr0h,c
 12446   011288  50EF               	movf	indf0,w,c
 12447   01128A  6E0B               	movwf	(btemp+10)^0,c
 12448   01128C  0E05               	movlw	5
 12449   01128E  6E01               	movwf	btemp^0,c
 12450   011290                     u2655:
 12451   011290  90D8               	bcf	status,0,c
 12452   011292  360B               	rlcf	(btemp+10)^0,f,c
 12453   011294  2E01               	decfsz	btemp^0,f,c
 12454   011296  EF48  F089         	goto	u2655
 12455                           
 12456                           ;stkvar	_mask @ sp[(-12)+-3]
 12457   01129A  0EF1               	movlw	-15
 12458   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 12459   0112A0  0EF2               	movlw	-14
 12460   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 12461   0112A6  CFEE F005          	movff	postinc0,btemp+4
 12462   0112AA  CFEE F006          	movff	postinc0,btemp+5
 12463   0112AE  CFEE F007          	movff	postinc0,btemp+6
 12464   0112B2  CFEE F008          	movff	postinc0,btemp+7
 12465   0112B6  0E19               	movlw	25
 12466   0112B8  EF63  F089         	goto	u2660
 12467   0112BC                     u2665:
 12468   0112BC  90D8               	bcf	status,0,c
 12469   0112BE  3208               	rrcf	(btemp+7)^0,f,c
 12470   0112C0  3207               	rrcf	(btemp+6)^0,f,c
 12471   0112C2  3206               	rrcf	(btemp+5)^0,f,c
 12472   0112C4  3205               	rrcf	(btemp+4)^0,f,c
 12473   0112C6                     u2660:
 12474   0112C6  2EE8               	decfsz	wreg,f,c
 12475   0112C8  EF5E  F089         	goto	u2665
 12476   0112CC  5005               	movf	(btemp+4)^0,w,c
 12477   0112CE  100B               	iorwf	(btemp+10)^0,w,c
 12478   0112D0  100C               	iorwf	(btemp+11)^0,w,c
 12479   0112D2  6EDF               	movwf	indf2,c
 12480                           
 12481                           ;can/can.c: 1053:     }
 12482   0112D4  EF31  F08A         	goto	l4979
 12483   0112D8                     l4967:
 12484                           
 12485                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 12486                           ;stkvar	_mask @ sp[(-12)+-3]
 12487   0112D8  0EF1               	movlw	-15
 12488   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 12489   0112DE  0EF2               	movlw	-14
 12490   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 12491   0112E4  CFDE F009          	movff	postinc2,btemp+8
 12492   0112E8  CFDE F00A          	movff	postinc2,btemp+9
 12493   0112EC  CFDE F00B          	movff	postinc2,btemp+10
 12494   0112F0  CFDE F00C          	movff	postinc2,btemp+11
 12495   0112F4  0E13               	movlw	19
 12496   0112F6  EF82  F089         	goto	u2670
 12497   0112FA                     u2675:
 12498   0112FA  90D8               	bcf	status,0,c
 12499   0112FC  320C               	rrcf	(btemp+11)^0,f,c
 12500   0112FE  320B               	rrcf	(btemp+10)^0,f,c
 12501   011300  320A               	rrcf	(btemp+9)^0,f,c
 12502   011302  3209               	rrcf	(btemp+8)^0,f,c
 12503   011304                     u2670:
 12504   011304  2EE8               	decfsz	wreg,f,c
 12505   011306  EF7D  F089         	goto	u2675
 12506   01130A  0EFF               	movlw	255
 12507   01130C  1409               	andwf	(btemp+8)^0,w,c
 12508   01130E  6E05               	movwf	(btemp+4)^0,c
 12509   011310  0E07               	movlw	7
 12510   011312  140A               	andwf	(btemp+9)^0,w,c
 12511   011314  6E06               	movwf	(btemp+5)^0,c
 12512   011316  0E00               	movlw	0
 12513   011318  140B               	andwf	(btemp+10)^0,w,c
 12514   01131A  6E07               	movwf	(btemp+6)^0,c
 12515   01131C  0E00               	movlw	0
 12516   01131E  140C               	andwf	(btemp+11)^0,w,c
 12517   011320  6E08               	movwf	(btemp+7)^0,c
 12518                           
 12519                           ;stkvar	_mask @ sp[(-12)+-3]
 12520   011322  0EF1               	movlw	-15
 12521   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 12522   011328  0EF2               	movlw	-14
 12523   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 12524   01132E  0EFF               	movlw	255
 12525   011330  14DE               	andwf	postinc2,w,c
 12526   011332  6E09               	movwf	(btemp+8)^0,c
 12527   011334  0EFF               	movlw	255
 12528   011336  14DE               	andwf	postinc2,w,c
 12529   011338  6E0A               	movwf	(btemp+9)^0,c
 12530   01133A  0E03               	movlw	3
 12531   01133C  14DE               	andwf	postinc2,w,c
 12532   01133E  6E0B               	movwf	(btemp+10)^0,c
 12533   011340  0E00               	movlw	0
 12534   011342  14DE               	andwf	postinc2,w,c
 12535   011344  6E0C               	movwf	(btemp+11)^0,c
 12536   011346  0E0B               	movlw	11
 12537   011348                     u2685:
 12538   011348  90D8               	bcf	status,0,c
 12539   01134A  3609               	rlcf	(btemp+8)^0,f,c
 12540   01134C  360A               	rlcf	(btemp+9)^0,f,c
 12541   01134E  360B               	rlcf	(btemp+10)^0,f,c
 12542   011350  360C               	rlcf	(btemp+11)^0,f,c
 12543   011352  2EE8               	decfsz	wreg,f,c
 12544   011354  EFA4  F089         	goto	u2685
 12545   011358  5005               	movf	(btemp+4)^0,w,c
 12546   01135A  1009               	iorwf	(btemp+8)^0,w,c
 12547   01135C  6E01               	movwf	btemp^0,c
 12548   01135E  5006               	movf	(btemp+5)^0,w,c
 12549   011360  100A               	iorwf	(btemp+9)^0,w,c
 12550   011362  6E02               	movwf	(btemp+1)^0,c
 12551   011364  5007               	movf	(btemp+6)^0,w,c
 12552   011366  100B               	iorwf	(btemp+10)^0,w,c
 12553   011368  6E03               	movwf	(btemp+2)^0,c
 12554   01136A  5008               	movf	(btemp+7)^0,w,c
 12555   01136C  100C               	iorwf	(btemp+11)^0,w,c
 12556   01136E  6E04               	movwf	(btemp+3)^0,c
 12557                           
 12558                           ;stkvar	_temp32 @ sp[(-12)+0]
 12559   011370  0EF4               	movlw	-12
 12560   011372  C001  FFE3         	movff	btemp,plusw1
 12561   011376  0EF5               	movlw	-11
 12562   011378  C002  FFE3         	movff	btemp+1,plusw1
 12563   01137C  0EF6               	movlw	-10
 12564   01137E  C003  FFE3         	movff	btemp+2,plusw1
 12565   011382  0EF7               	movlw	-9
 12566   011384  C004  FFE3         	movff	btemp+3,plusw1
 12567   011388                     
 12568                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 12569                           ;stkvar	_temp32 @ sp[(-12)+0]
 12570   011388  50E1               	movf	fsr1l,w,c
 12571   01138A  0FF4               	addlw	-12
 12572   01138C  6ED9               	movwf	fsr2l,c
 12573   01138E  50E2               	movf	fsr1h,w,c
 12574   011390  6EDA               	movwf	fsr2h,c
 12575   011392  0EFF               	movlw	255
 12576   011394  22DA               	addwfc	fsr2h,f,c
 12577   011396  0EFF               	movlw	255
 12578   011398  16DE               	andwf	postinc2,f,c
 12579   01139A  0EFF               	movlw	255
 12580   01139C  16DE               	andwf	postinc2,f,c
 12581   01139E  0EFF               	movlw	255
 12582   0113A0  16DE               	andwf	postinc2,f,c
 12583   0113A2  0E1F               	movlw	31
 12584   0113A4  16DE               	andwf	postinc2,f,c
 12585   0113A6                     
 12586                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 12587                           ;stkvar	_temp32 @ sp[(-12)+0]
 12588                           ;stkvar	_mObj @ sp[(-12)+4]
 12589   0113A6  0EF4               	movlw	-12
 12590   0113A8  CFE3 F001          	movff	plusw1,btemp
 12591   0113AC  0EF8               	movlw	-8
 12592   0113AE  C001  FFE3         	movff	btemp,plusw1
 12593   0113B2                     
 12594                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 12595                           ;stkvar	_temp32 @ sp[(-12)+0]
 12596   0113B2  0EF5               	movlw	245
 12597   0113B4  24E1               	addwf	fsr1l,w,c
 12598   0113B6  6ED9               	movwf	fsr2l,c
 12599   0113B8  0EFF               	movlw	255
 12600   0113BA  20E2               	addwfc	fsr1h,w,c
 12601   0113BC  6EDA               	movwf	fsr2h,c
 12602                           
 12603                           ;stkvar	_mObj @ sp[(-12)+4]
 12604   0113BE  0EF9               	movlw	249
 12605   0113C0  24E1               	addwf	fsr1l,w,c
 12606   0113C2  6EE9               	movwf	fsr0l,c
 12607   0113C4  0EFF               	movlw	255
 12608   0113C6  20E2               	addwfc	fsr1h,w,c
 12609   0113C8  6EEA               	movwf	fsr0h,c
 12610   0113CA  CFDF FFEF          	movff	indf2,indf0
 12611   0113CE                     
 12612                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 12613                           ;stkvar	_temp32 @ sp[(-12)+0]
 12614   0113CE  0EF6               	movlw	246
 12615   0113D0  24E1               	addwf	fsr1l,w,c
 12616   0113D2  6ED9               	movwf	fsr2l,c
 12617   0113D4  0EFF               	movlw	255
 12618   0113D6  20E2               	addwfc	fsr1h,w,c
 12619   0113D8  6EDA               	movwf	fsr2h,c
 12620                           
 12621                           ;stkvar	_mObj @ sp[(-12)+4]
 12622   0113DA  0EFA               	movlw	250
 12623   0113DC  24E1               	addwf	fsr1l,w,c
 12624   0113DE  6EE9               	movwf	fsr0l,c
 12625   0113E0  0EFF               	movlw	255
 12626   0113E2  20E2               	addwfc	fsr1h,w,c
 12627   0113E4  6EEA               	movwf	fsr0h,c
 12628   0113E6  CFDF FFEF          	movff	indf2,indf0
 12629   0113EA                     
 12630                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 12631                           ;stkvar	_mObj @ sp[(-12)+4]
 12632   0113EA  0EFB               	movlw	251
 12633   0113EC  24E1               	addwf	fsr1l,w,c
 12634   0113EE  6ED9               	movwf	fsr2l,c
 12635   0113F0  0EFF               	movlw	255
 12636   0113F2  20E2               	addwfc	fsr1h,w,c
 12637   0113F4  6EDA               	movwf	fsr2h,c
 12638                           
 12639                           ;stkvar	_temp32 @ sp[(-12)+0]
 12640   0113F6  0EF7               	movlw	247
 12641   0113F8  24E1               	addwf	fsr1l,w,c
 12642   0113FA  6EE9               	movwf	fsr0l,c
 12643   0113FC  0EFF               	movlw	255
 12644   0113FE  20E2               	addwfc	fsr1h,w,c
 12645   011400  6EEA               	movwf	fsr0h,c
 12646   011402  50EF               	movf	indf0,w,c
 12647   011404  6E0C               	movwf	(btemp+11)^0,c
 12648                           
 12649                           ;stkvar	_mask @ sp[(-12)+-3]
 12650   011406  0EF1               	movlw	-15
 12651   011408  CFE3 F009          	movff	plusw1,btemp+8
 12652   01140C  0EF2               	movlw	-14
 12653   01140E  CFE3 F00A          	movff	plusw1,btemp+9
 12654   011412  0E05               	movlw	5
 12655   011414  2409               	addwf	(btemp+8)^0,w,c
 12656   011416  6EE9               	movwf	fsr0l,c
 12657   011418  0E00               	movlw	0
 12658   01141A  200A               	addwfc	(btemp+9)^0,w,c
 12659   01141C  6EEA               	movwf	fsr0h,c
 12660   01141E  50EF               	movf	indf0,w,c
 12661   011420  6E0B               	movwf	(btemp+10)^0,c
 12662   011422  0E06               	movlw	6
 12663   011424  6E01               	movwf	btemp^0,c
 12664   011426                     u2695:
 12665   011426  90D8               	bcf	status,0,c
 12666   011428  360B               	rlcf	(btemp+10)^0,f,c
 12667   01142A  2E01               	decfsz	btemp^0,f,c
 12668   01142C  EF13  F08A         	goto	u2695
 12669                           
 12670                           ;stkvar	_mask @ sp[(-12)+-3]
 12671   011430  0EF1               	movlw	-15
 12672   011432  CFE3 F009          	movff	plusw1,btemp+8
 12673   011436  0EF2               	movlw	-14
 12674   011438  CFE3 F00A          	movff	plusw1,btemp+9
 12675   01143C  0E04               	movlw	4
 12676   01143E  2409               	addwf	(btemp+8)^0,w,c
 12677   011440  6EE9               	movwf	fsr0l,c
 12678   011442  0E00               	movlw	0
 12679   011444  200A               	addwfc	(btemp+9)^0,w,c
 12680   011446  6EEA               	movwf	fsr0h,c
 12681   011448  50EF               	movf	indf0,w,c
 12682   01144A  6E0A               	movwf	(btemp+9)^0,c
 12683   01144C  0E05               	movlw	5
 12684   01144E  6E01               	movwf	btemp^0,c
 12685   011450                     u2705:
 12686   011450  90D8               	bcf	status,0,c
 12687   011452  360A               	rlcf	(btemp+9)^0,f,c
 12688   011454  2E01               	decfsz	btemp^0,f,c
 12689   011456  EF28  F08A         	goto	u2705
 12690   01145A  500A               	movf	(btemp+9)^0,w,c
 12691   01145C  100B               	iorwf	(btemp+10)^0,w,c
 12692   01145E  100C               	iorwf	(btemp+11)^0,w,c
 12693   011460  6EDF               	movwf	indf2,c
 12694   011462                     l4979:
 12695                           
 12696                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12697                           ;stkvar	_filter @ sp[(-12)+-1]
 12698   011462  0EF3               	movlw	-13
 12699   011464  50E3               	movf	plusw1,w,c
 12700   011466  0D08               	mullw	8
 12701   011468  CFF3 F00B          	movff	prodl,btemp+10
 12702   01146C  CFF4 F00C          	movff	prodh,btemp+11
 12703   011470  0EF4               	movlw	244
 12704   011472  240B               	addwf	(btemp+10)^0,w,c
 12705   011474  6E09               	movwf	(btemp+8)^0,c
 12706   011476  0E01               	movlw	1
 12707   011478  200C               	addwfc	(btemp+11)^0,w,c
 12708   01147A  6E0A               	movwf	(btemp+9)^0,c
 12709                           
 12710                           ;stkvar	_a @ sp[(-12)+10]
 12711   01147C  0EFE               	movlw	-2
 12712   01147E  C009  FFE3         	movff	btemp+8,plusw1
 12713   011482  0EFF               	movlw	-1
 12714   011484  C00A  FFE3         	movff	btemp+9,plusw1
 12715   011488                     
 12716                           ;stkvar	_mObj @ sp[(-12)+4]
 12717   011488  0EF8               	movlw	-8
 12718   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12719   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12720   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12721   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12722                           
 12723                           ;stkvar	_a @ sp[(-16)+10]
 12724   01149A  0EFA               	movlw	-6
 12725   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12726   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12727   0114A4  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12728   0114A8                     
 12729                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12730   0114A8  0EF0               	movlw	240
 12731   0114AA  26E1               	addwf	fsr1l,f,c
 12732   0114AC  0EFF               	movlw	255
 12733   0114AE  22E2               	addwfc	fsr1h,f,c
 12734   0114B0  0012               	return		;funcret
 12735   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12736                           	callstack 0
 12737                           
 12738 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12739 ;; Defined at:
 12740 ;;		line 1121 in file "can/can.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;  filter          1  [STACK] enum E5325
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;  a               2  [STACK] unsigned short 
 12745 ;;  spiTransferE    1  [STACK] char 
 12746 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1  [STACK] char 
 12749 ;; Registers used:
 12750 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12760 ;;Total ram usage:        0 bytes
 12761 ;; Hardware stack levels used: 1
 12762 ;; Hardware stack levels required when called: 9
 12763 ;; This function calls:
 12764 ;;		_DRV_CANFDSPI_ReadByte
 12765 ;;		_DRV_CANFDSPI_WriteByte
 12766 ;; This function is called by:
 12767 ;;		_CanSetFilter
 12768 ;; This function uses a reentrant model
 12769 ;;
 12770                           
 12771                           	psect	text46
 12772   0141A6                     __ptext46:
 12773                           	callstack 0
 12774   0141A6                     _DRV_CANFDSPI_FilterDisable:
 12775                           	callstack 0
 12776                           
 12777                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12778   0141A6  52E6               	movf	postinc1,f,c
 12779   0141A8  52E6               	movf	postinc1,f,c
 12780   0141AA  52E6               	movf	postinc1,f,c
 12781   0141AC  52E6               	movf	postinc1,f,c
 12782   0141AE                     
 12783                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12784                           ;stkvar	_filter @ sp[(-4)+-1]
 12785   0141AE  0EFB               	movlw	-5
 12786   0141B0  CFE3 F00C          	movff	plusw1,btemp+11
 12787   0141B4  0ED0               	movlw	208
 12788   0141B6  240C               	addwf	(btemp+11)^0,w,c
 12789   0141B8  6E09               	movwf	(btemp+8)^0,c
 12790   0141BA  6A0A               	clrf	(btemp+9)^0,c
 12791   0141BC  0E01               	movlw	1
 12792   0141BE  220A               	addwfc	(btemp+9)^0,f,c
 12793                           
 12794                           ;stkvar	_a @ sp[(-4)+0]
 12795   0141C0  0EFC               	movlw	-4
 12796   0141C2  C009  FFE3         	movff	btemp+8,plusw1
 12797   0141C6  0EFD               	movlw	-3
 12798   0141C8  C00A  FFE3         	movff	btemp+9,plusw1
 12799   0141CC                     
 12800                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 12801                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12802   0141CC  0EFF               	movlw	255
 12803   0141CE  24E1               	addwf	fsr1l,w,c
 12804   0141D0  6E01               	movwf	btemp^0,c
 12805   0141D2  0EFF               	movlw	255
 12806   0141D4  20E2               	addwfc	fsr1h,w,c
 12807   0141D6  6E02               	movwf	(btemp+1)^0,c
 12808   0141D8  C001  FFE6         	movff	btemp,postinc1
 12809   0141DC  C002  FFE6         	movff	btemp+1,postinc1
 12810                           
 12811                           ;stkvar	_a @ sp[(-6)+0]
 12812   0141E0  0EFA               	movlw	-6
 12813   0141E2  CFE3 FFE6          	movff	plusw1,postinc1
 12814   0141E6  CFE3 FFE6          	movff	plusw1,postinc1
 12815   0141EA  EC7A  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 12816                           
 12817                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12818   0141EE  0EFE               	movlw	-2
 12819   0141F0  C001  FFE3         	movff	btemp,plusw1
 12820   0141F4                     
 12821                           ;can/can.c: 1131:     if (spiTransferError) {
 12822                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12823   0141F4  0EFE               	movlw	-2
 12824   0141F6  50E3               	movf	plusw1,w,c
 12825   0141F8  B4D8               	btfsc	status,2,c
 12826   0141FA  EF01  F0A1         	goto	u2521
 12827   0141FE  EF03  F0A1         	goto	u2520
 12828   014202                     u2521:
 12829   014202  EF05  F0A1         	goto	l4913
 12830   014206                     u2520:
 12831   014206  EF17  F0A1         	goto	l336
 12832   01420A                     l4913:
 12833                           
 12834                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 12835                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12836   01420A  50E1               	movf	fsr1l,w,c
 12837   01420C  0FFF               	addlw	-1
 12838   01420E  6ED9               	movwf	fsr2l,c
 12839   014210  50E2               	movf	fsr1h,w,c
 12840   014212  6EDA               	movwf	fsr2h,c
 12841   014214  0EFF               	movlw	255
 12842   014216  22DA               	addwfc	fsr2h,f,c
 12843   014218  9EDF               	bcf	indf2,7,c
 12844   01421A                     
 12845                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12846   01421A  0EFF               	movlw	-1
 12847   01421C  50E3               	movf	plusw1,w,c
 12848   01421E  6EE6               	movwf	postinc1,c
 12849                           
 12850                           ;stkvar	_a @ sp[(-5)+0]
 12851   014220  0EFB               	movlw	-5
 12852   014222  CFE3 FFE6          	movff	plusw1,postinc1
 12853   014226  CFE3 FFE6          	movff	plusw1,postinc1
 12854   01422A  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12855   01422E                     l336:
 12856                           
 12857                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 12858   01422E  0EFB               	movlw	251
 12859   014230  26E1               	addwf	fsr1l,f,c
 12860   014232  0EFF               	movlw	255
 12861   014234  22E2               	addwfc	fsr1h,f,c
 12862   014236  0012               	return		;funcret
 12863   014238                     __end_of_DRV_CANFDSPI_FilterDisable:
 12864                           	callstack 0
 12865                           
 12866 ;; *************** function _CanInit *****************
 12867 ;; Defined at:
 12868 ;;		line 156 in file "can/can.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;  bitTime         1  [STACK] enum E5607
 12871 ;;  withISR         1  [STACK] _Bool 
 12872 ;; Auto vars:     Size  Location     Type
 12873 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 12874 ;;  config          3  [STACK] struct _CAN_CONFIG
 12875 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 12876 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 12877 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  1  [STACK] void 
 12880 ;; Registers used:
 12881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;Total ram usage:        0 bytes
 12892 ;; Hardware stack levels used: 1
 12893 ;; Hardware stack levels required when called: 10
 12894 ;; This function calls:
 12895 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 12896 ;;		_DRV_CANFDSPI_Configure
 12897 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 12898 ;;		_DRV_CANFDSPI_ModuleEventEnable
 12899 ;;		_DRV_CANFDSPI_OperationModeSelect
 12900 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 12901 ;;		_DRV_CANFDSPI_Reset
 12902 ;;		_DRV_CANFDSPI_TefConfigure
 12903 ;;		_DRV_CANFDSPI_TimeStampEnable
 12904 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 12905 ;;		_DRV_CANFDSPI_TimeStampSet
 12906 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 12907 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 12908 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 12909 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 12910 ;; This function is called by:
 12911 ;;		_main
 12912 ;; This function uses a reentrant model
 12913 ;;
 12914                           
 12915                           	psect	text47
 12916   011E64                     __ptext47:
 12917                           	callstack 0
 12918   011E64                     _CanInit:
 12919                           	callstack 0
 12920                           
 12921                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12922   011E64  0E0D               	movlw	13
 12923   011E66  26E1               	addwf	fsr1l,f,c
 12924   011E68  0E00               	movlw	0
 12925   011E6A  22E2               	addwfc	fsr1h,f,c
 12926   011E6C                     
 12927                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 12928   011E6C  9898               	bcf	152,4,c	;volatile
 12929                           
 12930                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 12931   011E6E  888F               	bsf	143,4,c	;volatile
 12932   011E70                     
 12933                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 12934   011E70  EC1F  F0A4         	call	_DRV_CANFDSPI_Reset	;wreg free
 12935   011E74                     
 12936                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 12937                           ;stkvar	_bitTime @ sp[(-13)+-1]
 12938   011E74  0EF2               	movlw	-14
 12939   011E76  50E3               	movf	plusw1,w,c
 12940   011E78  6EE6               	movwf	postinc1,c
 12941   011E7A  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 12942   011E7E                     
 12943                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 12944                           ;stkvar	_config @ sp[(-13)+4]
 12945   011E7E  0EF7               	movlw	247
 12946   011E80  24E1               	addwf	fsr1l,w,c
 12947   011E82  6E01               	movwf	btemp^0,c
 12948   011E84  0EFF               	movlw	255
 12949   011E86  20E2               	addwfc	fsr1h,w,c
 12950   011E88  6E02               	movwf	(btemp+1)^0,c
 12951   011E8A  C001  FFE6         	movff	btemp,postinc1
 12952   011E8E  C002  FFE6         	movff	btemp+1,postinc1
 12953   011E92  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 12954   011E96                     
 12955                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 12956                           ;stkvar	_config @ sp[(-13)+4]
 12957   011E96  50E1               	movf	fsr1l,w,c
 12958   011E98  0FF7               	addlw	-9
 12959   011E9A  6ED9               	movwf	fsr2l,c
 12960   011E9C  50E2               	movf	fsr1h,w,c
 12961   011E9E  6EDA               	movwf	fsr2h,c
 12962   011EA0  0EFF               	movlw	255
 12963   011EA2  22DA               	addwfc	fsr2h,f,c
 12964   011EA4  8ADF               	bsf	indf2,5,c
 12965   011EA6                     
 12966                           ;can/can.c: 166:     config.StoreInTEF = 1;
 12967                           ;stkvar	_config @ sp[(-13)+4]
 12968   011EA6  0EF8               	movlw	248
 12969   011EA8  24E1               	addwf	fsr1l,w,c
 12970   011EAA  6ED9               	movwf	fsr2l,c
 12971   011EAC  0EFF               	movlw	255
 12972   011EAE  20E2               	addwfc	fsr1h,w,c
 12973   011EB0  6EDA               	movwf	fsr2h,c
 12974   011EB2  8CDF               	bsf	indf2,6,c
 12975   011EB4                     
 12976                           ;can/can.c: 167:     config.TXQEnable = 1;
 12977                           ;stkvar	_config @ sp[(-13)+4]
 12978   011EB4  0EF8               	movlw	248
 12979   011EB6  24E1               	addwf	fsr1l,w,c
 12980   011EB8  6ED9               	movwf	fsr2l,c
 12981   011EBA  0EFF               	movlw	255
 12982   011EBC  20E2               	addwfc	fsr1h,w,c
 12983   011EBE  6EDA               	movwf	fsr2h,c
 12984   011EC0  8EDF               	bsf	indf2,7,c
 12985   011EC2                     
 12986                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 12987                           ;stkvar	_config @ sp[(-13)+4]
 12988   011EC2  0EF7               	movlw	247
 12989   011EC4  24E1               	addwf	fsr1l,w,c
 12990   011EC6  6E01               	movwf	btemp^0,c
 12991   011EC8  0EFF               	movlw	255
 12992   011ECA  20E2               	addwfc	fsr1h,w,c
 12993   011ECC  6E02               	movwf	(btemp+1)^0,c
 12994   011ECE  C001  FFE6         	movff	btemp,postinc1
 12995   011ED2  C002  FFE6         	movff	btemp+1,postinc1
 12996   011ED6  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 12997   011EDA                     
 12998                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 12999                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13000   011EDA  50E1               	movf	fsr1l,w,c
 13001   011EDC  0FFF               	addlw	-1
 13002   011EDE  6ED9               	movwf	fsr2l,c
 13003   011EE0  50E2               	movf	fsr1h,w,c
 13004   011EE2  6EDA               	movwf	fsr2h,c
 13005   011EE4  0EFF               	movlw	255
 13006   011EE6  22DA               	addwfc	fsr2h,f,c
 13007   011EE8  50DF               	movf	223,w,c
 13008   011EEA  0BC1               	andlw	-63
 13009   011EEC  0916               	iorlw	22
 13010   011EEE  6EDF               	movwf	223,c
 13011   011EF0                     
 13012                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13013                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13014   011EF0  50E1               	movf	fsr1l,w,c
 13015   011EF2  0FFF               	addlw	-1
 13016   011EF4  6ED9               	movwf	fsr2l,c
 13017   011EF6  50E2               	movf	fsr1h,w,c
 13018   011EF8  6EDA               	movwf	fsr2h,c
 13019   011EFA  0EFF               	movlw	255
 13020   011EFC  22DA               	addwfc	fsr2h,f,c
 13021   011EFE  80DF               	bsf	indf2,0,c
 13022   011F00                     
 13023                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13024                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13025   011F00  0EFF               	movlw	255
 13026   011F02  24E1               	addwf	fsr1l,w,c
 13027   011F04  6E01               	movwf	btemp^0,c
 13028   011F06  0EFF               	movlw	255
 13029   011F08  20E2               	addwfc	fsr1h,w,c
 13030   011F0A  6E02               	movwf	(btemp+1)^0,c
 13031   011F0C  C001  FFE6         	movff	btemp,postinc1
 13032   011F10  C002  FFE6         	movff	btemp+1,postinc1
 13033   011F14  EC7C  F09D         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13034   011F18                     
 13035                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13036                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13037   011F18  0EF3               	movlw	243
 13038   011F1A  24E1               	addwf	fsr1l,w,c
 13039   011F1C  6E01               	movwf	btemp^0,c
 13040   011F1E  0EFF               	movlw	255
 13041   011F20  20E2               	addwfc	fsr1h,w,c
 13042   011F22  6E02               	movwf	(btemp+1)^0,c
 13043   011F24  C001  FFE6         	movff	btemp,postinc1
 13044   011F28  C002  FFE6         	movff	btemp+1,postinc1
 13045   011F2C  EC29  F09A         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13046   011F30                     
 13047                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13048                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13049   011F30  0EF3               	movlw	-13
 13050   011F32  6AE3               	clrf	plusw1,c
 13051   011F34  2AE3               	incf	plusw1,f,c
 13052   011F36                     
 13053                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13054                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13055   011F36  0EF5               	movlw	245
 13056   011F38  24E1               	addwf	fsr1l,w,c
 13057   011F3A  6ED9               	movwf	fsr2l,c
 13058   011F3C  0EFF               	movlw	255
 13059   011F3E  20E2               	addwfc	fsr1h,w,c
 13060   011F40  6EDA               	movwf	fsr2h,c
 13061   011F42  0E07               	movlw	7
 13062   011F44  6EDF               	movwf	indf2,c
 13063   011F46                     
 13064                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13065                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13066   011F46  0EF6               	movlw	246
 13067   011F48  24E1               	addwf	fsr1l,w,c
 13068   011F4A  6ED9               	movwf	fsr2l,c
 13069   011F4C  0EFF               	movlw	255
 13070   011F4E  20E2               	addwfc	fsr1h,w,c
 13071   011F50  6EDA               	movwf	fsr2h,c
 13072   011F52  0E05               	movlw	5
 13073   011F54  6EDF               	movwf	indf2,c
 13074   011F56                     
 13075                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13076                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13077   011F56  0EF3               	movlw	243
 13078   011F58  24E1               	addwf	fsr1l,w,c
 13079   011F5A  6E01               	movwf	btemp^0,c
 13080   011F5C  0EFF               	movlw	255
 13081   011F5E  20E2               	addwfc	fsr1h,w,c
 13082   011F60  6E02               	movwf	(btemp+1)^0,c
 13083   011F62  C001  FFE6         	movff	btemp,postinc1
 13084   011F66  C002  FFE6         	movff	btemp+1,postinc1
 13085   011F6A  ECE0  F097         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13086   011F6E                     
 13087                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13088                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13089   011F6E  0EFD               	movlw	253
 13090   011F70  24E1               	addwf	fsr1l,w,c
 13091   011F72  6E01               	movwf	btemp^0,c
 13092   011F74  0EFF               	movlw	255
 13093   011F76  20E2               	addwfc	fsr1h,w,c
 13094   011F78  6E02               	movwf	(btemp+1)^0,c
 13095   011F7A  C001  FFE6         	movff	btemp,postinc1
 13096   011F7E  C002  FFE6         	movff	btemp+1,postinc1
 13097   011F82  EC80  F098         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13098   011F86                     
 13099                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13100                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13101   011F86  0EFE               	movlw	254
 13102   011F88  24E1               	addwf	fsr1l,w,c
 13103   011F8A  6ED9               	movwf	fsr2l,c
 13104   011F8C  0EFF               	movlw	255
 13105   011F8E  20E2               	addwfc	fsr1h,w,c
 13106   011F90  6EDA               	movwf	fsr2h,c
 13107   011F92  50DF               	movf	223,w,c
 13108   011F94  0BE0               	andlw	-32
 13109   011F96  0904               	iorlw	4
 13110   011F98  6EDF               	movwf	223,c
 13111   011F9A                     
 13112                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13113                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13114   011F9A  0EFE               	movlw	254
 13115   011F9C  24E1               	addwf	fsr1l,w,c
 13116   011F9E  6ED9               	movwf	fsr2l,c
 13117   011FA0  0EFF               	movlw	255
 13118   011FA2  20E2               	addwfc	fsr1h,w,c
 13119   011FA4  6EDA               	movwf	fsr2h,c
 13120   011FA6  0EE0               	movlw	224
 13121   011FA8  12DF               	iorwf	223,f,c
 13122   011FAA                     
 13123                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13124                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13125   011FAA  50E1               	movf	fsr1l,w,c
 13126   011FAC  0FFD               	addlw	-3
 13127   011FAE  6ED9               	movwf	fsr2l,c
 13128   011FB0  50E2               	movf	fsr1h,w,c
 13129   011FB2  6EDA               	movwf	fsr2h,c
 13130   011FB4  0EFF               	movlw	255
 13131   011FB6  22DA               	addwfc	fsr2h,f,c
 13132   011FB8  0EC1               	movlw	-63
 13133   011FBA  16DF               	andwf	223,f,c
 13134   011FBC                     
 13135                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13136                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13137   011FBC  0EFD               	movlw	253
 13138   011FBE  24E1               	addwf	fsr1l,w,c
 13139   011FC0  6E01               	movwf	btemp^0,c
 13140   011FC2  0EFF               	movlw	255
 13141   011FC4  20E2               	addwfc	fsr1h,w,c
 13142   011FC6  6E02               	movwf	(btemp+1)^0,c
 13143   011FC8  C001  FFE6         	movff	btemp,postinc1
 13144   011FCC  C002  FFE6         	movff	btemp+1,postinc1
 13145   011FD0  0E01               	movlw	1
 13146   011FD2  6EE6               	movwf	postinc1,c
 13147   011FD4  EC6F  F094         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13148   011FD8                     
 13149                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13150                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13151   011FD8  0EFB               	movlw	251
 13152   011FDA  24E1               	addwf	fsr1l,w,c
 13153   011FDC  6ED9               	movwf	fsr2l,c
 13154   011FDE  0EFF               	movlw	255
 13155   011FE0  20E2               	addwfc	fsr1h,w,c
 13156   011FE2  6EDA               	movwf	fsr2h,c
 13157   011FE4  0E0F               	movlw	15
 13158   011FE6  6EDF               	movwf	indf2,c
 13159   011FE8                     
 13160                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13161                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13162   011FE8  0EFC               	movlw	252
 13163   011FEA  24E1               	addwf	fsr1l,w,c
 13164   011FEC  6ED9               	movwf	fsr2l,c
 13165   011FEE  0EFF               	movlw	255
 13166   011FF0  20E2               	addwfc	fsr1h,w,c
 13167   011FF2  6EDA               	movwf	fsr2h,c
 13168   011FF4  0E07               	movlw	7
 13169   011FF6  6EDF               	movwf	indf2,c
 13170   011FF8                     
 13171                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13172                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13173   011FF8  0EFA               	movlw	-6
 13174   011FFA  6AE3               	clrf	plusw1,c
 13175   011FFC  2AE3               	incf	plusw1,f,c
 13176   011FFE                     
 13177                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13178                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13179   011FFE  0EFA               	movlw	250
 13180   012000  24E1               	addwf	fsr1l,w,c
 13181   012002  6E01               	movwf	btemp^0,c
 13182   012004  0EFF               	movlw	255
 13183   012006  20E2               	addwfc	fsr1h,w,c
 13184   012008  6E02               	movwf	(btemp+1)^0,c
 13185   01200A  C001  FFE6         	movff	btemp,postinc1
 13186   01200E  C002  FFE6         	movff	btemp+1,postinc1
 13187   012012  0E02               	movlw	2
 13188   012014  6EE6               	movwf	postinc1,c
 13189   012016  EC3F  F097         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13190   01201A                     
 13191                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13192   01201A  0E27               	movlw	39
 13193   01201C  6EE6               	movwf	postinc1,c
 13194   01201E  0E00               	movlw	0
 13195   012020  6EE6               	movwf	postinc1,c
 13196   012022  EC6D  F0A4         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13197   012026                     
 13198                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13199   012026  0E00               	movlw	0
 13200   012028  6EE6               	movwf	postinc1,c
 13201   01202A  0E00               	movlw	0
 13202   01202C  6EE6               	movwf	postinc1,c
 13203   01202E  0E00               	movlw	0
 13204   012030  6EE6               	movwf	postinc1,c
 13205   012032  0E00               	movlw	0
 13206   012034  6EE6               	movwf	postinc1,c
 13207   012036  EC35  F0A4         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13208   01203A                     
 13209                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13210   01203A  ECAB  F0A2         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13211   01203E                     
 13212                           ;can/can.c: 209:     if(withISR == 1)
 13213                           ;stkvar	_withISR @ sp[(-13)+-2]
 13214   01203E  0EF1               	movlw	-15
 13215   012040  04E3               	decf	plusw1,w,c
 13216   012042  A4D8               	btfss	status,2,c
 13217   012044  EF26  F090         	goto	u2921
 13218   012048  EF28  F090         	goto	u2920
 13219   01204C                     u2921:
 13220   01204C  EF30  F090         	goto	l5235
 13221   012050                     u2920:
 13222   012050                     
 13223                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13224   012050  0E02               	movlw	2
 13225   012052  6EE6               	movwf	postinc1,c
 13226   012054  0E00               	movlw	0
 13227   012056  6EE6               	movwf	postinc1,c
 13228   012058  0E00               	movlw	0
 13229   01205A  6EE6               	movwf	postinc1,c
 13230   01205C  EC48  F0A2         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13231   012060                     l5235:
 13232                           
 13233                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13234   012060  0E06               	movlw	6
 13235   012062  6EE6               	movwf	postinc1,c
 13236   012064  EC64  F0A1         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13237   012068                     
 13238                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13239   012068  0EF1               	movlw	241
 13240   01206A  26E1               	addwf	fsr1l,f,c
 13241   01206C  0EFF               	movlw	255
 13242   01206E  22E2               	addwfc	fsr1h,f,c
 13243   012070  0012               	return		;funcret
 13244   012072                     __end_of_CanInit:
 13245                           	callstack 0
 13246                           
 13247 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13248 ;; Defined at:
 13249 ;;		line 693 in file "can/can.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13252 ;;		 -> txqConfig(4), 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13255 ;; Return value:  Size  Location     Type
 13256 ;;                  1  [STACK] char 
 13257 ;; Registers used:
 13258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13259 ;; Tracked objects:
 13260 ;;		On entry : 0/0
 13261 ;;		On exit  : 0/0
 13262 ;;		Unchanged: 0/0
 13263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;Total ram usage:        0 bytes
 13269 ;; Hardware stack levels used: 1
 13270 ;; Hardware stack levels required when called: 7
 13271 ;; This function calls:
 13272 ;;		Nothing
 13273 ;; This function is called by:
 13274 ;;		_CanInit
 13275 ;; This function uses a reentrant model
 13276 ;;
 13277                           
 13278                           	psect	text48
 13279   013452                     __ptext48:
 13280                           	callstack 0
 13281   013452                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13282                           	callstack 0
 13283                           
 13284                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13285   013452  0E05               	movlw	5
 13286   013454  26E1               	addwf	fsr1l,f,c
 13287   013456  0E00               	movlw	0
 13288   013458  22E2               	addwfc	fsr1h,f,c
 13289   01345A                     
 13290                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13291   01345A  0EDD               	movlw	low _canFifoResetValues
 13292   01345C  6EF6               	movwf	tblptrl,c
 13293   01345E                     	if	1	;There is more than 1 active tblptr byte
 13294   01345E  0EFF               	movlw	high _canFifoResetValues
 13295   013460  6EF7               	movwf	tblptrh,c
 13296   013462                     	endif
 13297   013462                     	if	1	;There are 3 active tblptr bytes
 13298   013462  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13299   013464  6EF8               	movwf	tblptru,c
 13300   013466                     	endif
 13301   013466  0009               	tblrd		*+
 13302   013468  CFF5 F009          	movff	tablat,btemp+8
 13303   01346C  0009               	tblrd		*+
 13304   01346E  CFF5 F00A          	movff	tablat,btemp+9
 13305   013472  0009               	tblrd		*+
 13306   013474  CFF5 F00B          	movff	tablat,btemp+10
 13307   013478  0009               	tblrd		*+
 13308   01347A  CFF5 F00C          	movff	tablat,btemp+11
 13309                           
 13310                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13311   01347E  0EFB               	movlw	-5
 13312   013480  C009  FFE3         	movff	btemp+8,plusw1
 13313   013484  0EFC               	movlw	-4
 13314   013486  C00A  FFE3         	movff	btemp+9,plusw1
 13315   01348A  0EFD               	movlw	-3
 13316   01348C  C00B  FFE3         	movff	btemp+10,plusw1
 13317   013490  0EFE               	movlw	-2
 13318   013492  C00C  FFE3         	movff	btemp+11,plusw1
 13319   013496                     
 13320                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13321                           ;stkvar	_config @ sp[(-5)+-2]
 13322   013496  0EF9               	movlw	-7
 13323   013498  CFE3 FFD9          	movff	plusw1,fsr2l
 13324   01349C  0EFA               	movlw	-6
 13325   01349E  CFE3 FFDA          	movff	plusw1,fsr2h
 13326                           
 13327                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13328   0134A2  0EFD               	movlw	253
 13329   0134A4  24E1               	addwf	fsr1l,w,c
 13330   0134A6  6EE9               	movwf	fsr0l,c
 13331   0134A8  0EFF               	movlw	255
 13332   0134AA  20E2               	addwfc	fsr1h,w,c
 13333   0134AC  6EEA               	movwf	fsr0h,c
 13334   0134AE  50EF               	movf	239,w,c
 13335   0134B0  0B1F               	andlw	31
 13336   0134B2  6EDF               	movwf	indf2,c
 13337   0134B4                     
 13338                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13339                           ;stkvar	_config @ sp[(-5)+-2]
 13340   0134B4  0EF9               	movlw	-7
 13341   0134B6  CFE3 F00B          	movff	plusw1,btemp+10
 13342   0134BA  0EFA               	movlw	-6
 13343   0134BC  CFE3 F00C          	movff	plusw1,btemp+11
 13344   0134C0  0E01               	movlw	1
 13345   0134C2  240B               	addwf	(btemp+10)^0,w,c
 13346   0134C4  6ED9               	movwf	fsr2l,c
 13347   0134C6  0E00               	movlw	0
 13348   0134C8  200C               	addwfc	(btemp+11)^0,w,c
 13349   0134CA  6EDA               	movwf	fsr2h,c
 13350                           
 13351                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13352   0134CC  0EFD               	movlw	253
 13353   0134CE  24E1               	addwf	fsr1l,w,c
 13354   0134D0  6EE9               	movwf	fsr0l,c
 13355   0134D2  0EFF               	movlw	255
 13356   0134D4  20E2               	addwfc	fsr1h,w,c
 13357   0134D6  6EEA               	movwf	fsr0h,c
 13358   0134D8  38EF               	swapf	239,w,c
 13359   0134DA  32E8               	rrcf	wreg,f,c
 13360   0134DC  0B03               	andlw	3
 13361   0134DE  6EDF               	movwf	indf2,c
 13362   0134E0                     
 13363                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13364                           ;stkvar	_config @ sp[(-5)+-2]
 13365   0134E0  0EF9               	movlw	-7
 13366   0134E2  CFE3 F00B          	movff	plusw1,btemp+10
 13367   0134E6  0EFA               	movlw	-6
 13368   0134E8  CFE3 F00C          	movff	plusw1,btemp+11
 13369   0134EC  0E02               	movlw	2
 13370   0134EE  240B               	addwf	(btemp+10)^0,w,c
 13371   0134F0  6ED9               	movwf	fsr2l,c
 13372   0134F2  0E00               	movlw	0
 13373   0134F4  200C               	addwfc	(btemp+11)^0,w,c
 13374   0134F6  6EDA               	movwf	fsr2h,c
 13375                           
 13376                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13377   0134F8  0EFE               	movlw	254
 13378   0134FA  24E1               	addwf	fsr1l,w,c
 13379   0134FC  6EE9               	movwf	fsr0l,c
 13380   0134FE  0EFF               	movlw	255
 13381   013500  20E2               	addwfc	fsr1h,w,c
 13382   013502  6EEA               	movwf	fsr0h,c
 13383   013504  50EF               	movf	239,w,c
 13384   013506  0B1F               	andlw	31
 13385   013508  6EDF               	movwf	indf2,c
 13386   01350A                     
 13387                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13388                           ;stkvar	_config @ sp[(-5)+-2]
 13389   01350A  0EF9               	movlw	-7
 13390   01350C  CFE3 F00B          	movff	plusw1,btemp+10
 13391   013510  0EFA               	movlw	-6
 13392   013512  CFE3 F00C          	movff	plusw1,btemp+11
 13393   013516  0E03               	movlw	3
 13394   013518  240B               	addwf	(btemp+10)^0,w,c
 13395   01351A  6ED9               	movwf	fsr2l,c
 13396   01351C  0E00               	movlw	0
 13397   01351E  200C               	addwfc	(btemp+11)^0,w,c
 13398   013520  6EDA               	movwf	fsr2h,c
 13399                           
 13400                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13401   013522  0EFE               	movlw	254
 13402   013524  24E1               	addwf	fsr1l,w,c
 13403   013526  6EE9               	movwf	fsr0l,c
 13404   013528  0EFF               	movlw	255
 13405   01352A  20E2               	addwfc	fsr1h,w,c
 13406   01352C  6EEA               	movwf	fsr0h,c
 13407   01352E  38EF               	swapf	239,w,c
 13408   013530  32E8               	rrcf	wreg,f,c
 13409   013532  0B07               	andlw	7
 13410   013534  6EDF               	movwf	indf2,c
 13411   013536                     
 13412                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13413   013536  0EF9               	movlw	249
 13414   013538  26E1               	addwf	fsr1l,f,c
 13415   01353A  0EFF               	movlw	255
 13416   01353C  22E2               	addwfc	fsr1h,f,c
 13417   01353E  0012               	return		;funcret
 13418   013540                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13419                           	callstack 0
 13420                           
 13421 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13422 ;; Defined at:
 13423 ;;		line 671 in file "can/can.c"
 13424 ;; Parameters:    Size  Location     Type
 13425 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13426 ;;		 -> txqConfig(4), 
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13429 ;;  a               2    0        unsigned short 
 13430 ;;  spiTransferE    1    0        char 
 13431 ;; Return value:  Size  Location     Type
 13432 ;;                  1  [STACK] char 
 13433 ;; Registers used:
 13434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13435 ;; Tracked objects:
 13436 ;;		On entry : 0/0
 13437 ;;		On exit  : 0/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13444 ;;Total ram usage:        0 bytes
 13445 ;; Hardware stack levels used: 1
 13446 ;; Hardware stack levels required when called: 9
 13447 ;; This function calls:
 13448 ;;		_DRV_CANFDSPI_WriteWord
 13449 ;; This function is called by:
 13450 ;;		_CanInit
 13451 ;; This function uses a reentrant model
 13452 ;;
 13453                           
 13454                           	psect	text49
 13455   012FC0                     __ptext49:
 13456                           	callstack 0
 13457   012FC0                     _DRV_CANFDSPI_TransmitQueueConfigure:
 13458                           	callstack 0
 13459                           
 13460                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13461   012FC0  52E6               	movf	postinc1,f,c
 13462   012FC2  52E6               	movf	postinc1,f,c
 13463   012FC4  52E6               	movf	postinc1,f,c
 13464   012FC6  52E6               	movf	postinc1,f,c
 13465   012FC8                     
 13466                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 13467   012FC8  0EDD               	movlw	low _canFifoResetValues
 13468   012FCA  6EF6               	movwf	tblptrl,c
 13469   012FCC                     	if	1	;There is more than 1 active tblptr byte
 13470   012FCC  0EFF               	movlw	high _canFifoResetValues
 13471   012FCE  6EF7               	movwf	tblptrh,c
 13472   012FD0                     	endif
 13473   012FD0                     	if	1	;There are 3 active tblptr bytes
 13474   012FD0  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13475   012FD2  6EF8               	movwf	tblptru,c
 13476   012FD4                     	endif
 13477   012FD4  0009               	tblrd		*+
 13478   012FD6  CFF5 F009          	movff	tablat,btemp+8
 13479   012FDA  0009               	tblrd		*+
 13480   012FDC  CFF5 F00A          	movff	tablat,btemp+9
 13481   012FE0  0009               	tblrd		*+
 13482   012FE2  CFF5 F00B          	movff	tablat,btemp+10
 13483   012FE6  0009               	tblrd		*+
 13484   012FE8  CFF5 F00C          	movff	tablat,btemp+11
 13485                           
 13486                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13487   012FEC  0EFC               	movlw	-4
 13488   012FEE  C009  FFE3         	movff	btemp+8,plusw1
 13489   012FF2  0EFD               	movlw	-3
 13490   012FF4  C00A  FFE3         	movff	btemp+9,plusw1
 13491   012FF8  0EFE               	movlw	-2
 13492   012FFA  C00B  FFE3         	movff	btemp+10,plusw1
 13493   012FFE  0EFF               	movlw	-1
 13494   013000  C00C  FFE3         	movff	btemp+11,plusw1
 13495   013004                     
 13496                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 13497                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13498   013004  50E1               	movf	fsr1l,w,c
 13499   013006  0FFC               	addlw	-4
 13500   013008  6ED9               	movwf	fsr2l,c
 13501   01300A  50E2               	movf	fsr1h,w,c
 13502   01300C  6EDA               	movwf	fsr2h,c
 13503   01300E  0EFF               	movlw	255
 13504   013010  22DA               	addwfc	fsr2h,f,c
 13505   013012  8EDF               	bsf	indf2,7,c
 13506   013014                     
 13507                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13508                           ;stkvar	_config @ sp[(-4)+-2]
 13509   013014  0EFA               	movlw	-6
 13510   013016  CFE3 F00B          	movff	plusw1,btemp+10
 13511   01301A  0EFB               	movlw	-5
 13512   01301C  CFE3 F00C          	movff	plusw1,btemp+11
 13513   013020  0E02               	movlw	2
 13514   013022  240B               	addwf	(btemp+10)^0,w,c
 13515   013024  6ED9               	movwf	fsr2l,c
 13516   013026  0E00               	movlw	0
 13517   013028  200C               	addwfc	(btemp+11)^0,w,c
 13518   01302A  6EDA               	movwf	fsr2h,c
 13519   01302C  50DF               	movf	indf2,w,c
 13520   01302E  6E0C               	movwf	(btemp+11)^0,c
 13521                           
 13522                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13523   013030  0EFF               	movlw	255
 13524   013032  24E1               	addwf	fsr1l,w,c
 13525   013034  6ED9               	movwf	fsr2l,c
 13526   013036  0EFF               	movlw	255
 13527   013038  20E2               	addwfc	fsr1h,w,c
 13528   01303A  6EDA               	movwf	fsr2h,c
 13529   01303C  50DF               	movf	223,w,c
 13530   01303E  180C               	xorwf	(btemp+11)^0,w,c
 13531   013040  0BE0               	andlw	-32
 13532   013042  180C               	xorwf	(btemp+11)^0,w,c
 13533   013044  6EDF               	movwf	223,c
 13534   013046                     
 13535                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13536                           ;stkvar	_config @ sp[(-4)+-2]
 13537   013046  0EFA               	movlw	-6
 13538   013048  CFE3 F00B          	movff	plusw1,btemp+10
 13539   01304C  0EFB               	movlw	-5
 13540   01304E  CFE3 F00C          	movff	plusw1,btemp+11
 13541   013052  0E03               	movlw	3
 13542   013054  240B               	addwf	(btemp+10)^0,w,c
 13543   013056  6ED9               	movwf	fsr2l,c
 13544   013058  0E00               	movlw	0
 13545   01305A  200C               	addwfc	(btemp+11)^0,w,c
 13546   01305C  6EDA               	movwf	fsr2h,c
 13547   01305E  50DF               	movf	indf2,w,c
 13548   013060  6E0C               	movwf	(btemp+11)^0,c
 13549                           
 13550                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13551   013062  0EFF               	movlw	255
 13552   013064  24E1               	addwf	fsr1l,w,c
 13553   013066  6ED9               	movwf	fsr2l,c
 13554   013068  0EFF               	movlw	255
 13555   01306A  20E2               	addwfc	fsr1h,w,c
 13556   01306C  6EDA               	movwf	fsr2h,c
 13557   01306E  3A0C               	swapf	(btemp+11)^0,f,c
 13558   013070  460C               	rlncf	(btemp+11)^0,f,c
 13559   013072  50DF               	movf	223,w,c
 13560   013074  180C               	xorwf	(btemp+11)^0,w,c
 13561   013076  0B1F               	andlw	-225
 13562   013078  180C               	xorwf	(btemp+11)^0,w,c
 13563   01307A  6EDF               	movwf	223,c
 13564   01307C                     
 13565                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13566                           ;stkvar	_config @ sp[(-4)+-2]
 13567   01307C  0EFA               	movlw	-6
 13568   01307E  CFE3 F00B          	movff	plusw1,btemp+10
 13569   013082  0EFB               	movlw	-5
 13570   013084  CFE3 F00C          	movff	plusw1,btemp+11
 13571   013088  0E01               	movlw	1
 13572   01308A  240B               	addwf	(btemp+10)^0,w,c
 13573   01308C  6ED9               	movwf	fsr2l,c
 13574   01308E  0E00               	movlw	0
 13575   013090  200C               	addwfc	(btemp+11)^0,w,c
 13576   013092  6EDA               	movwf	fsr2h,c
 13577   013094  50DF               	movf	indf2,w,c
 13578   013096  6E0C               	movwf	(btemp+11)^0,c
 13579                           
 13580                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13581   013098  0EFE               	movlw	254
 13582   01309A  24E1               	addwf	fsr1l,w,c
 13583   01309C  6ED9               	movwf	fsr2l,c
 13584   01309E  0EFF               	movlw	255
 13585   0130A0  20E2               	addwfc	fsr1h,w,c
 13586   0130A2  6EDA               	movwf	fsr2h,c
 13587   0130A4  3A0C               	swapf	(btemp+11)^0,f,c
 13588   0130A6  460C               	rlncf	(btemp+11)^0,f,c
 13589   0130A8  50DF               	movf	223,w,c
 13590   0130AA  180C               	xorwf	(btemp+11)^0,w,c
 13591   0130AC  0B9F               	andlw	-97
 13592   0130AE  180C               	xorwf	(btemp+11)^0,w,c
 13593   0130B0  6EDF               	movwf	223,c
 13594   0130B2                     
 13595                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13596                           ;stkvar	_config @ sp[(-4)+-2]
 13597   0130B2  0EFA               	movlw	-6
 13598   0130B4  CFE3 FFD9          	movff	plusw1,fsr2l
 13599   0130B8  0EFB               	movlw	-5
 13600   0130BA  CFE3 FFDA          	movff	plusw1,fsr2h
 13601   0130BE  50DF               	movf	indf2,w,c
 13602   0130C0  6E0C               	movwf	(btemp+11)^0,c
 13603                           
 13604                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13605   0130C2  0EFE               	movlw	254
 13606   0130C4  24E1               	addwf	fsr1l,w,c
 13607   0130C6  6ED9               	movwf	fsr2l,c
 13608   0130C8  0EFF               	movlw	255
 13609   0130CA  20E2               	addwfc	fsr1h,w,c
 13610   0130CC  6EDA               	movwf	fsr2h,c
 13611   0130CE  50DF               	movf	223,w,c
 13612   0130D0  180C               	xorwf	(btemp+11)^0,w,c
 13613   0130D2  0BE0               	andlw	-32
 13614   0130D4  180C               	xorwf	(btemp+11)^0,w,c
 13615   0130D6  6EDF               	movwf	223,c
 13616   0130D8                     
 13617                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13618   0130D8  0EFC               	movlw	-4
 13619   0130DA  CFE3 FFE6          	movff	plusw1,postinc1
 13620   0130DE  CFE3 FFE6          	movff	plusw1,postinc1
 13621   0130E2  CFE3 FFE6          	movff	plusw1,postinc1
 13622   0130E6  CFE3 FFE6          	movff	plusw1,postinc1
 13623   0130EA  0E50               	movlw	80
 13624   0130EC  6EE6               	movwf	postinc1,c
 13625   0130EE  0E00               	movlw	0
 13626   0130F0  6EE6               	movwf	postinc1,c
 13627   0130F2  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13628   0130F6                     
 13629                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 13630   0130F6  0EFA               	movlw	250
 13631   0130F8  26E1               	addwf	fsr1l,f,c
 13632   0130FA  0EFF               	movlw	255
 13633   0130FC  22E2               	addwfc	fsr1h,f,c
 13634   0130FE  0012               	return		;funcret
 13635   013100                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 13636                           	callstack 0
 13637                           
 13638 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 13639 ;; Defined at:
 13640 ;;		line 657 in file "can/can.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13643 ;;		 -> txfConfig(2), 
 13644 ;; Auto vars:     Size  Location     Type
 13645 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  1  [STACK] char 
 13648 ;; Registers used:
 13649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13650 ;; Tracked objects:
 13651 ;;		On entry : 0/0
 13652 ;;		On exit  : 0/0
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;Total ram usage:        0 bytes
 13660 ;; Hardware stack levels used: 1
 13661 ;; Hardware stack levels required when called: 7
 13662 ;; This function calls:
 13663 ;;		Nothing
 13664 ;; This function is called by:
 13665 ;;		_CanInit
 13666 ;; This function uses a reentrant model
 13667 ;;
 13668                           
 13669                           	psect	text50
 13670   013100                     __ptext50:
 13671                           	callstack 0
 13672   013100                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13673                           	callstack 0
 13674                           
 13675                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13676   013100  0E05               	movlw	5
 13677   013102  26E1               	addwf	fsr1l,f,c
 13678   013104  0E00               	movlw	0
 13679   013106  22E2               	addwfc	fsr1h,f,c
 13680   013108                     
 13681                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13682   013108  0EDD               	movlw	low _canFifoResetValues
 13683   01310A  6EF6               	movwf	tblptrl,c
 13684   01310C                     	if	1	;There is more than 1 active tblptr byte
 13685   01310C  0EFF               	movlw	high _canFifoResetValues
 13686   01310E  6EF7               	movwf	tblptrh,c
 13687   013110                     	endif
 13688   013110                     	if	1	;There are 3 active tblptr bytes
 13689   013110  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13690   013112  6EF8               	movwf	tblptru,c
 13691   013114                     	endif
 13692   013114  0009               	tblrd		*+
 13693   013116  CFF5 F009          	movff	tablat,btemp+8
 13694   01311A  0009               	tblrd		*+
 13695   01311C  CFF5 F00A          	movff	tablat,btemp+9
 13696   013120  0009               	tblrd		*+
 13697   013122  CFF5 F00B          	movff	tablat,btemp+10
 13698   013126  0009               	tblrd		*+
 13699   013128  CFF5 F00C          	movff	tablat,btemp+11
 13700                           
 13701                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13702   01312C  0EFB               	movlw	-5
 13703   01312E  C009  FFE3         	movff	btemp+8,plusw1
 13704   013132  0EFC               	movlw	-4
 13705   013134  C00A  FFE3         	movff	btemp+9,plusw1
 13706   013138  0EFD               	movlw	-3
 13707   01313A  C00B  FFE3         	movff	btemp+10,plusw1
 13708   01313E  0EFE               	movlw	-2
 13709   013140  C00C  FFE3         	movff	btemp+11,plusw1
 13710   013144                     
 13711                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13712                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13713   013144  50E1               	movf	fsr1l,w,c
 13714   013146  0FFB               	addlw	-5
 13715   013148  6ED9               	movwf	fsr2l,c
 13716   01314A  50E2               	movf	fsr1h,w,c
 13717   01314C  6EDA               	movwf	fsr2h,c
 13718   01314E  0EFF               	movlw	255
 13719   013150  22DA               	addwfc	fsr2h,f,c
 13720                           
 13721                           ;stkvar	_config @ sp[(-5)+-2]
 13722   013152  0EF9               	movlw	-7
 13723   013154  CFE3 FFE9          	movff	plusw1,fsr0l
 13724   013158  0EFA               	movlw	-6
 13725   01315A  CFE3 FFEA          	movff	plusw1,fsr0h
 13726   01315E  90EF               	bcf	indf0,0,c
 13727   013160  ACDF               	btfss	indf2,6,c
 13728   013162  EFB4  F098         	goto	u995
 13729   013166  80EF               	bsf	indf0,0,c
 13730   013168                     u995:
 13731   013168                     
 13732                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13733                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13734   013168  0EFD               	movlw	253
 13735   01316A  24E1               	addwf	fsr1l,w,c
 13736   01316C  6ED9               	movwf	fsr2l,c
 13737   01316E  0EFF               	movlw	255
 13738   013170  20E2               	addwfc	fsr1h,w,c
 13739   013172  6EDA               	movwf	fsr2h,c
 13740   013174  50DF               	movf	223,w,c
 13741   013176  0B1F               	andlw	31
 13742   013178  6E0C               	movwf	(btemp+11)^0,c
 13743                           
 13744                           ;stkvar	_config @ sp[(-5)+-2]
 13745   01317A  0EF9               	movlw	-7
 13746   01317C  CFE3 FFD9          	movff	plusw1,fsr2l
 13747   013180  0EFA               	movlw	-6
 13748   013182  CFE3 FFDA          	movff	plusw1,fsr2h
 13749   013186  460C               	rlncf	(btemp+11)^0,f,c
 13750   013188  50DF               	movf	223,w,c
 13751   01318A  180C               	xorwf	(btemp+11)^0,w,c
 13752   01318C  0BC1               	andlw	-63
 13753   01318E  180C               	xorwf	(btemp+11)^0,w,c
 13754   013190  6EDF               	movwf	223,c
 13755   013192                     
 13756                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13757                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13758   013192  0EFD               	movlw	253
 13759   013194  24E1               	addwf	fsr1l,w,c
 13760   013196  6ED9               	movwf	fsr2l,c
 13761   013198  0EFF               	movlw	255
 13762   01319A  20E2               	addwfc	fsr1h,w,c
 13763   01319C  6EDA               	movwf	fsr2h,c
 13764   01319E  38DF               	swapf	223,w,c
 13765   0131A0  32E8               	rrcf	wreg,f,c
 13766   0131A2  0B03               	andlw	3
 13767   0131A4  6E0C               	movwf	(btemp+11)^0,c
 13768                           
 13769                           ;stkvar	_config @ sp[(-5)+-2]
 13770   0131A6  0EF9               	movlw	-7
 13771   0131A8  CFE3 FFD9          	movff	plusw1,fsr2l
 13772   0131AC  0EFA               	movlw	-6
 13773   0131AE  CFE3 FFDA          	movff	plusw1,fsr2h
 13774   0131B2  3A0C               	swapf	(btemp+11)^0,f,c
 13775   0131B4  460C               	rlncf	(btemp+11)^0,f,c
 13776   0131B6  460C               	rlncf	(btemp+11)^0,f,c
 13777   0131B8  50DF               	movf	223,w,c
 13778   0131BA  180C               	xorwf	(btemp+11)^0,w,c
 13779   0131BC  0B3F               	andlw	-193
 13780   0131BE  180C               	xorwf	(btemp+11)^0,w,c
 13781   0131C0  6EDF               	movwf	223,c
 13782   0131C2                     
 13783                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13784                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13785   0131C2  0EFE               	movlw	254
 13786   0131C4  24E1               	addwf	fsr1l,w,c
 13787   0131C6  6ED9               	movwf	fsr2l,c
 13788   0131C8  0EFF               	movlw	255
 13789   0131CA  20E2               	addwfc	fsr1h,w,c
 13790   0131CC  6EDA               	movwf	fsr2h,c
 13791   0131CE  50DF               	movf	223,w,c
 13792   0131D0  0B1F               	andlw	31
 13793   0131D2  6E0C               	movwf	(btemp+11)^0,c
 13794                           
 13795                           ;stkvar	_config @ sp[(-5)+-2]
 13796   0131D4  0EF9               	movlw	-7
 13797   0131D6  CFE3 F009          	movff	plusw1,btemp+8
 13798   0131DA  0EFA               	movlw	-6
 13799   0131DC  CFE3 F00A          	movff	plusw1,btemp+9
 13800   0131E0  0E01               	movlw	1
 13801   0131E2  2409               	addwf	(btemp+8)^0,w,c
 13802   0131E4  6ED9               	movwf	fsr2l,c
 13803   0131E6  0E00               	movlw	0
 13804   0131E8  200A               	addwfc	(btemp+9)^0,w,c
 13805   0131EA  6EDA               	movwf	fsr2h,c
 13806   0131EC  50DF               	movf	223,w,c
 13807   0131EE  180C               	xorwf	(btemp+11)^0,w,c
 13808   0131F0  0BE0               	andlw	-32
 13809   0131F2  180C               	xorwf	(btemp+11)^0,w,c
 13810   0131F4  6EDF               	movwf	223,c
 13811   0131F6                     
 13812                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13813                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13814   0131F6  0EFE               	movlw	254
 13815   0131F8  24E1               	addwf	fsr1l,w,c
 13816   0131FA  6ED9               	movwf	fsr2l,c
 13817   0131FC  0EFF               	movlw	255
 13818   0131FE  20E2               	addwfc	fsr1h,w,c
 13819   013200  6EDA               	movwf	fsr2h,c
 13820   013202  38DF               	swapf	223,w,c
 13821   013204  32E8               	rrcf	wreg,f,c
 13822   013206  0B07               	andlw	7
 13823   013208  6E0C               	movwf	(btemp+11)^0,c
 13824                           
 13825                           ;stkvar	_config @ sp[(-5)+-2]
 13826   01320A  0EF9               	movlw	-7
 13827   01320C  CFE3 F009          	movff	plusw1,btemp+8
 13828   013210  0EFA               	movlw	-6
 13829   013212  CFE3 F00A          	movff	plusw1,btemp+9
 13830   013216  0E01               	movlw	1
 13831   013218  2409               	addwf	(btemp+8)^0,w,c
 13832   01321A  6ED9               	movwf	fsr2l,c
 13833   01321C  0E00               	movlw	0
 13834   01321E  200A               	addwfc	(btemp+9)^0,w,c
 13835   013220  6EDA               	movwf	fsr2h,c
 13836   013222  3A0C               	swapf	(btemp+11)^0,f,c
 13837   013224  460C               	rlncf	(btemp+11)^0,f,c
 13838   013226  50DF               	movf	223,w,c
 13839   013228  180C               	xorwf	(btemp+11)^0,w,c
 13840   01322A  0B1F               	andlw	-225
 13841   01322C  180C               	xorwf	(btemp+11)^0,w,c
 13842   01322E  6EDF               	movwf	223,c
 13843   013230                     
 13844                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13845   013230  0EF9               	movlw	249
 13846   013232  26E1               	addwf	fsr1l,f,c
 13847   013234  0EFF               	movlw	255
 13848   013236  22E2               	addwfc	fsr1h,f,c
 13849   013238  0012               	return		;funcret
 13850   01323A                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13851                           	callstack 0
 13852                           
 13853 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 13854 ;; Defined at:
 13855 ;;		line 633 in file "can/can.c"
 13856 ;; Parameters:    Size  Location     Type
 13857 ;;  channel         1  [STACK] enum E5290
 13858 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13859 ;;		 -> txfConfig(2), 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13862 ;;  a               2  [STACK] unsigned short 
 13863 ;;  spiTransferE    1    0        char 
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1  [STACK] char 
 13866 ;; Registers used:
 13867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13877 ;;Total ram usage:        0 bytes
 13878 ;; Hardware stack levels used: 1
 13879 ;; Hardware stack levels required when called: 9
 13880 ;; This function calls:
 13881 ;;		_DRV_CANFDSPI_WriteWord
 13882 ;; This function is called by:
 13883 ;;		_CanInit
 13884 ;; This function uses a reentrant model
 13885 ;;
 13886                           
 13887                           	psect	text51
 13888   0128DE                     __ptext51:
 13889                           	callstack 0
 13890   0128DE                     _DRV_CANFDSPI_TransmitChannelConfigure:
 13891                           	callstack 0
 13892                           
 13893                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13894   0128DE  0E07               	movlw	7
 13895   0128E0  26E1               	addwf	fsr1l,f,c
 13896   0128E2  0E00               	movlw	0
 13897   0128E4  22E2               	addwfc	fsr1h,f,c
 13898   0128E6                     
 13899                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 13900   0128E6  0EDD               	movlw	low _canFifoResetValues
 13901   0128E8  6EF6               	movwf	tblptrl,c
 13902   0128EA                     	if	1	;There is more than 1 active tblptr byte
 13903   0128EA  0EFF               	movlw	high _canFifoResetValues
 13904   0128EC  6EF7               	movwf	tblptrh,c
 13905   0128EE                     	endif
 13906   0128EE                     	if	1	;There are 3 active tblptr bytes
 13907   0128EE  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13908   0128F0  6EF8               	movwf	tblptru,c
 13909   0128F2                     	endif
 13910   0128F2  0009               	tblrd		*+
 13911   0128F4  CFF5 F009          	movff	tablat,btemp+8
 13912   0128F8  0009               	tblrd		*+
 13913   0128FA  CFF5 F00A          	movff	tablat,btemp+9
 13914   0128FE  0009               	tblrd		*+
 13915   012900  CFF5 F00B          	movff	tablat,btemp+10
 13916   012904  0009               	tblrd		*+
 13917   012906  CFF5 F00C          	movff	tablat,btemp+11
 13918                           
 13919                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13920   01290A  0EF9               	movlw	-7
 13921   01290C  C009  FFE3         	movff	btemp+8,plusw1
 13922   012910  0EFA               	movlw	-6
 13923   012912  C00A  FFE3         	movff	btemp+9,plusw1
 13924   012916  0EFB               	movlw	-5
 13925   012918  C00B  FFE3         	movff	btemp+10,plusw1
 13926   01291C  0EFC               	movlw	-4
 13927   01291E  C00C  FFE3         	movff	btemp+11,plusw1
 13928   012922                     
 13929                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 13930                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13931   012922  50E1               	movf	fsr1l,w,c
 13932   012924  0FF9               	addlw	-7
 13933   012926  6ED9               	movwf	fsr2l,c
 13934   012928  50E2               	movf	fsr1h,w,c
 13935   01292A  6EDA               	movwf	fsr2h,c
 13936   01292C  0EFF               	movlw	255
 13937   01292E  22DA               	addwfc	fsr2h,f,c
 13938   012930  8EDF               	bsf	indf2,7,c
 13939   012932                     
 13940                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13941                           ;stkvar	_config @ sp[(-7)+-3]
 13942   012932  0EF6               	movlw	-10
 13943   012934  CFE3 F00B          	movff	plusw1,btemp+10
 13944   012938  0EF7               	movlw	-9
 13945   01293A  CFE3 F00C          	movff	plusw1,btemp+11
 13946   01293E  0E01               	movlw	1
 13947   012940  240B               	addwf	(btemp+10)^0,w,c
 13948   012942  6ED9               	movwf	fsr2l,c
 13949   012944  0E00               	movlw	0
 13950   012946  200C               	addwfc	(btemp+11)^0,w,c
 13951   012948  6EDA               	movwf	fsr2h,c
 13952   01294A  50DF               	movf	223,w,c
 13953   01294C  0B1F               	andlw	31
 13954   01294E  6E0C               	movwf	(btemp+11)^0,c
 13955                           
 13956                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13957   012950  0EFC               	movlw	252
 13958   012952  24E1               	addwf	fsr1l,w,c
 13959   012954  6ED9               	movwf	fsr2l,c
 13960   012956  0EFF               	movlw	255
 13961   012958  20E2               	addwfc	fsr1h,w,c
 13962   01295A  6EDA               	movwf	fsr2h,c
 13963   01295C  50DF               	movf	223,w,c
 13964   01295E  180C               	xorwf	(btemp+11)^0,w,c
 13965   012960  0BE0               	andlw	-32
 13966   012962  180C               	xorwf	(btemp+11)^0,w,c
 13967   012964  6EDF               	movwf	223,c
 13968   012966                     
 13969                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13970                           ;stkvar	_config @ sp[(-7)+-3]
 13971   012966  0EF6               	movlw	-10
 13972   012968  CFE3 F00B          	movff	plusw1,btemp+10
 13973   01296C  0EF7               	movlw	-9
 13974   01296E  CFE3 F00C          	movff	plusw1,btemp+11
 13975   012972  0E01               	movlw	1
 13976   012974  240B               	addwf	(btemp+10)^0,w,c
 13977   012976  6ED9               	movwf	fsr2l,c
 13978   012978  0E00               	movlw	0
 13979   01297A  200C               	addwfc	(btemp+11)^0,w,c
 13980   01297C  6EDA               	movwf	fsr2h,c
 13981   01297E  38DF               	swapf	223,w,c
 13982   012980  32E8               	rrcf	wreg,f,c
 13983   012982  0B07               	andlw	7
 13984   012984  6E0C               	movwf	(btemp+11)^0,c
 13985                           
 13986                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13987   012986  0EFC               	movlw	252
 13988   012988  24E1               	addwf	fsr1l,w,c
 13989   01298A  6ED9               	movwf	fsr2l,c
 13990   01298C  0EFF               	movlw	255
 13991   01298E  20E2               	addwfc	fsr1h,w,c
 13992   012990  6EDA               	movwf	fsr2h,c
 13993   012992  3A0C               	swapf	(btemp+11)^0,f,c
 13994   012994  460C               	rlncf	(btemp+11)^0,f,c
 13995   012996  50DF               	movf	223,w,c
 13996   012998  180C               	xorwf	(btemp+11)^0,w,c
 13997   01299A  0B1F               	andlw	-225
 13998   01299C  180C               	xorwf	(btemp+11)^0,w,c
 13999   01299E  6EDF               	movwf	223,c
 14000   0129A0                     
 14001                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14002                           ;stkvar	_config @ sp[(-7)+-3]
 14003   0129A0  0EF6               	movlw	-10
 14004   0129A2  CFE3 FFD9          	movff	plusw1,fsr2l
 14005   0129A6  0EF7               	movlw	-9
 14006   0129A8  CFE3 FFDA          	movff	plusw1,fsr2h
 14007   0129AC  38DF               	swapf	223,w,c
 14008   0129AE  32E8               	rrcf	wreg,f,c
 14009   0129B0  32E8               	rrcf	wreg,f,c
 14010   0129B2  0B03               	andlw	3
 14011   0129B4  6E0C               	movwf	(btemp+11)^0,c
 14012                           
 14013                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14014   0129B6  0EFB               	movlw	251
 14015   0129B8  24E1               	addwf	fsr1l,w,c
 14016   0129BA  6ED9               	movwf	fsr2l,c
 14017   0129BC  0EFF               	movlw	255
 14018   0129BE  20E2               	addwfc	fsr1h,w,c
 14019   0129C0  6EDA               	movwf	fsr2h,c
 14020   0129C2  3A0C               	swapf	(btemp+11)^0,f,c
 14021   0129C4  460C               	rlncf	(btemp+11)^0,f,c
 14022   0129C6  50DF               	movf	223,w,c
 14023   0129C8  180C               	xorwf	(btemp+11)^0,w,c
 14024   0129CA  0B9F               	andlw	-97
 14025   0129CC  180C               	xorwf	(btemp+11)^0,w,c
 14026   0129CE  6EDF               	movwf	223,c
 14027   0129D0                     
 14028                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14029                           ;stkvar	_config @ sp[(-7)+-3]
 14030   0129D0  0EF6               	movlw	-10
 14031   0129D2  CFE3 FFD9          	movff	plusw1,fsr2l
 14032   0129D6  0EF7               	movlw	-9
 14033   0129D8  CFE3 FFDA          	movff	plusw1,fsr2h
 14034   0129DC  30DF               	rrcf	223,w,c
 14035   0129DE  0B1F               	andlw	31
 14036   0129E0  6E0C               	movwf	(btemp+11)^0,c
 14037                           
 14038                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14039   0129E2  0EFB               	movlw	251
 14040   0129E4  24E1               	addwf	fsr1l,w,c
 14041   0129E6  6ED9               	movwf	fsr2l,c
 14042   0129E8  0EFF               	movlw	255
 14043   0129EA  20E2               	addwfc	fsr1h,w,c
 14044   0129EC  6EDA               	movwf	fsr2h,c
 14045   0129EE  50DF               	movf	223,w,c
 14046   0129F0  180C               	xorwf	(btemp+11)^0,w,c
 14047   0129F2  0BE0               	andlw	-32
 14048   0129F4  180C               	xorwf	(btemp+11)^0,w,c
 14049   0129F6  6EDF               	movwf	223,c
 14050   0129F8                     
 14051                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14052                           ;stkvar	_config @ sp[(-7)+-3]
 14053   0129F8  0EF6               	movlw	-10
 14054   0129FA  CFE3 FFD9          	movff	plusw1,fsr2l
 14055   0129FE  0EF7               	movlw	-9
 14056   012A00  CFE3 FFDA          	movff	plusw1,fsr2h
 14057                           
 14058                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14059   012A04  50E1               	movf	fsr1l,w,c
 14060   012A06  0FF9               	addlw	-7
 14061   012A08  6EE9               	movwf	fsr0l,c
 14062   012A0A  50E2               	movf	fsr1h,w,c
 14063   012A0C  6EEA               	movwf	fsr0h,c
 14064   012A0E  0EFF               	movlw	255
 14065   012A10  22EA               	addwfc	fsr0h,f,c
 14066   012A12  9CEF               	bcf	indf0,6,c
 14067   012A14  A0DF               	btfss	indf2,0,c
 14068   012A16  EF0E  F095         	goto	u2475
 14069   012A1A  8CEF               	bsf	indf0,6,c
 14070   012A1C                     u2475:
 14071   012A1C                     
 14072                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14073                           ;stkvar	_channel @ sp[(-7)+-1]
 14074   012A1C  0EF8               	movlw	-8
 14075   012A1E  50E3               	movf	plusw1,w,c
 14076   012A20  0D0C               	mullw	12
 14077   012A22  0E50               	movlw	80
 14078   012A24  26F3               	addwf	243,f,c
 14079   012A26  0E00               	movlw	0
 14080   012A28  22F4               	addwfc	244,f,c
 14081                           
 14082                           ;stkvar	_a @ sp[(-7)+5]
 14083   012A2A  0EFE               	movlw	-2
 14084   012A2C  CFF3 FFE3          	movff	prodl,plusw1
 14085   012A30  0EFF               	movlw	-1
 14086   012A32  CFF4 FFE3          	movff	prodh,plusw1
 14087   012A36                     
 14088                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14089   012A36  0EF9               	movlw	-7
 14090   012A38  CFE3 FFE6          	movff	plusw1,postinc1
 14091   012A3C  CFE3 FFE6          	movff	plusw1,postinc1
 14092   012A40  CFE3 FFE6          	movff	plusw1,postinc1
 14093   012A44  CFE3 FFE6          	movff	plusw1,postinc1
 14094                           
 14095                           ;stkvar	_a @ sp[(-11)+5]
 14096   012A48  0EFA               	movlw	-6
 14097   012A4A  CFE3 FFE6          	movff	plusw1,postinc1
 14098   012A4E  CFE3 FFE6          	movff	plusw1,postinc1
 14099   012A52  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14100   012A56                     
 14101                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14102   012A56  0EF6               	movlw	246
 14103   012A58  26E1               	addwf	fsr1l,f,c
 14104   012A5A  0EFF               	movlw	255
 14105   012A5C  22E2               	addwfc	fsr1h,f,c
 14106   012A5E  0012               	return		;funcret
 14107   012A60                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14108                           	callstack 0
 14109                           
 14110 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14111 ;; Defined at:
 14112 ;;		line 2690 in file "can/can.c"
 14113 ;; Parameters:    Size  Location     Type
 14114 ;;  ts              4  [STACK] unsigned long 
 14115 ;; Auto vars:     Size  Location     Type
 14116 ;;  spiTransferE    1    0        char 
 14117 ;; Return value:  Size  Location     Type
 14118 ;;                  1  [STACK] char 
 14119 ;; Registers used:
 14120 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14121 ;; Tracked objects:
 14122 ;;		On entry : 0/0
 14123 ;;		On exit  : 0/0
 14124 ;;		Unchanged: 0/0
 14125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14130 ;;Total ram usage:        0 bytes
 14131 ;; Hardware stack levels used: 1
 14132 ;; Hardware stack levels required when called: 9
 14133 ;; This function calls:
 14134 ;;		_DRV_CANFDSPI_WriteWord
 14135 ;; This function is called by:
 14136 ;;		_CanInit
 14137 ;; This function uses a reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text52
 14141   01486A                     __ptext52:
 14142                           	callstack 0
 14143   01486A                     _DRV_CANFDSPI_TimeStampSet:
 14144                           	callstack 20
 14145   01486A                     
 14146                           ;stkvar	_ts @ sp[(0)+-4]
 14147   01486A  0EFC               	movlw	-4
 14148   01486C  CFE3 FFE6          	movff	plusw1,postinc1
 14149   014870  CFE3 FFE6          	movff	plusw1,postinc1
 14150   014874  CFE3 FFE6          	movff	plusw1,postinc1
 14151   014878  CFE3 FFE6          	movff	plusw1,postinc1
 14152   01487C  0E10               	movlw	16
 14153   01487E  6EE6               	movwf	postinc1,c
 14154   014880  0E00               	movlw	0
 14155   014882  6EE6               	movwf	postinc1,c
 14156   014884  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14157   014888                     
 14158                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14159   014888  52E5               	movf	postdec1,f,c
 14160   01488A  52E5               	movf	postdec1,f,c
 14161   01488C  52E5               	movf	postdec1,f,c
 14162   01488E  52E5               	movf	postdec1,f,c
 14163   014890  0012               	return		;funcret
 14164   014892                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14165                           	callstack 0
 14166                           
 14167 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14168 ;; Defined at:
 14169 ;;		line 2725 in file "can/can.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  ps              2  [STACK] unsigned short 
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  spiTransferE    1    0        char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;                  1  [STACK] char 
 14176 ;; Registers used:
 14177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;Total ram usage:        0 bytes
 14188 ;; Hardware stack levels used: 1
 14189 ;; Hardware stack levels required when called: 9
 14190 ;; This function calls:
 14191 ;;		_DRV_CANFDSPI_WriteHalfWord
 14192 ;; This function is called by:
 14193 ;;		_CanInit
 14194 ;; This function uses a reentrant model
 14195 ;;
 14196                           
 14197                           	psect	text53
 14198   0148DA                     __ptext53:
 14199                           	callstack 0
 14200   0148DA                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14201                           	callstack 20
 14202   0148DA                     
 14203                           ;stkvar	_ps @ sp[(0)+-2]
 14204   0148DA  0EFE               	movlw	-2
 14205   0148DC  CFE3 FFE6          	movff	plusw1,postinc1
 14206   0148E0  CFE3 FFE6          	movff	plusw1,postinc1
 14207   0148E4  0E14               	movlw	20
 14208   0148E6  6EE6               	movwf	postinc1,c
 14209   0148E8  0E00               	movlw	0
 14210   0148EA  6EE6               	movwf	postinc1,c
 14211   0148EC  ECB5  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14212   0148F0                     
 14213                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14214   0148F0  52E5               	movf	postdec1,f,c
 14215   0148F2  52E5               	movf	postdec1,f,c
 14216   0148F4  0012               	return		;funcret
 14217   0148F6                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14218                           	callstack 0
 14219                           
 14220 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14221 ;; Defined at:
 14222 ;;		line 2634 in file "can/can.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;		None
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;  d               1  [STACK] unsigned char 
 14227 ;;  spiTransferE    1  [STACK] char 
 14228 ;; Return value:  Size  Location     Type
 14229 ;;                  1  [STACK] char 
 14230 ;; Registers used:
 14231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/0
 14234 ;;		On exit  : 0/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14241 ;;Total ram usage:        0 bytes
 14242 ;; Hardware stack levels used: 1
 14243 ;; Hardware stack levels required when called: 9
 14244 ;; This function calls:
 14245 ;;		_DRV_CANFDSPI_ReadByte
 14246 ;;		_DRV_CANFDSPI_WriteByte
 14247 ;; This function is called by:
 14248 ;;		_CanInit
 14249 ;; This function uses a reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text54
 14253   014556                     __ptext54:
 14254                           	callstack 0
 14255   014556                     _DRV_CANFDSPI_TimeStampEnable:
 14256                           	callstack 0
 14257                           
 14258                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14259   014556  52E6               	movf	postinc1,f,c
 14260   014558  52E6               	movf	postinc1,f,c
 14261   01455A                     
 14262                           ;can/can.c: 2637:     uint8_t d = 0;
 14263                           ;stkvar	_d @ sp[(-2)+0]
 14264   01455A  0EFE               	movlw	-2
 14265   01455C  6AE3               	clrf	plusw1,c
 14266   01455E                     
 14267                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14268                           ;stkvar	_d @ sp[(-2)+0]
 14269   01455E  0EFE               	movlw	254
 14270   014560  24E1               	addwf	fsr1l,w,c
 14271   014562  6E01               	movwf	btemp^0,c
 14272   014564  0EFF               	movlw	255
 14273   014566  20E2               	addwfc	fsr1h,w,c
 14274   014568  6E02               	movwf	(btemp+1)^0,c
 14275   01456A  C001  FFE6         	movff	btemp,postinc1
 14276   01456E  C002  FFE6         	movff	btemp+1,postinc1
 14277   014572  0E16               	movlw	22
 14278   014574  6EE6               	movwf	postinc1,c
 14279   014576  0E00               	movlw	0
 14280   014578  6EE6               	movwf	postinc1,c
 14281   01457A  EC7A  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14282                           
 14283                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14284   01457E  0EFF               	movlw	-1
 14285   014580  C001  FFE3         	movff	btemp,plusw1
 14286   014584                     
 14287                           ;can/can.c: 2641:     if (spiTransferError) {
 14288                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14289   014584  0EFF               	movlw	-1
 14290   014586  50E3               	movf	plusw1,w,c
 14291   014588  B4D8               	btfsc	status,2,c
 14292   01458A  EFC9  F0A2         	goto	u2501
 14293   01458E  EFCB  F0A2         	goto	u2500
 14294   014592                     u2501:
 14295   014592  EFCD  F0A2         	goto	l4861
 14296   014596                     u2500:
 14297   014596  EFD8  F0A2         	goto	l623
 14298   01459A                     l4861:
 14299                           
 14300                           ;can/can.c: 2646:     d |= 0x01;
 14301                           ;stkvar	_d @ sp[(-2)+0]
 14302   01459A  0EFE               	movlw	-2
 14303   01459C  80E3               	bsf	plusw1,0,c
 14304   01459E                     
 14305                           ;stkvar	_d @ sp[(-2)+0]
 14306   01459E  0EFE               	movlw	-2
 14307   0145A0  50E3               	movf	plusw1,w,c
 14308   0145A2  6EE6               	movwf	postinc1,c
 14309   0145A4  0E16               	movlw	22
 14310   0145A6  6EE6               	movwf	postinc1,c
 14311   0145A8  0E00               	movlw	0
 14312   0145AA  6EE6               	movwf	postinc1,c
 14313   0145AC  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14314   0145B0                     l623:
 14315                           
 14316                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14317   0145B0  52E5               	movf	postdec1,f,c
 14318   0145B2  52E5               	movf	postdec1,f,c
 14319   0145B4  0012               	return		;funcret
 14320   0145B6                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14321                           	callstack 0
 14322                           
 14323 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14324 ;; Defined at:
 14325 ;;		line 1539 in file "can/can.c"
 14326 ;; Parameters:    Size  Location     Type
 14327 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14328 ;;		 -> tefConfig(1), 
 14329 ;; Auto vars:     Size  Location     Type
 14330 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14331 ;;  spiTransferE    1    0        char 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1  [STACK] char 
 14334 ;; Registers used:
 14335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used: 1
 14347 ;; Hardware stack levels required when called: 9
 14348 ;; This function calls:
 14349 ;;		_DRV_CANFDSPI_WriteWord
 14350 ;; This function is called by:
 14351 ;;		_CanInit
 14352 ;; This function uses a reentrant model
 14353 ;;
 14354                           
 14355                           	psect	text55
 14356   013AF8                     __ptext55:
 14357                           	callstack 0
 14358   013AF8                     _DRV_CANFDSPI_TefConfigure:
 14359                           	callstack 0
 14360                           
 14361                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14362   013AF8  52E6               	movf	postinc1,f,c
 14363   013AFA  52E6               	movf	postinc1,f,c
 14364   013AFC  52E6               	movf	postinc1,f,c
 14365   013AFE  52E6               	movf	postinc1,f,c
 14366   013B00                     
 14367                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14368   013B00  0EDD               	movlw	low _canFifoResetValues
 14369   013B02  6EF6               	movwf	tblptrl,c
 14370   013B04                     	if	1	;There is more than 1 active tblptr byte
 14371   013B04  0EFF               	movlw	high _canFifoResetValues
 14372   013B06  6EF7               	movwf	tblptrh,c
 14373   013B08                     	endif
 14374   013B08                     	if	1	;There are 3 active tblptr bytes
 14375   013B08  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14376   013B0A  6EF8               	movwf	tblptru,c
 14377   013B0C                     	endif
 14378   013B0C  0009               	tblrd		*+
 14379   013B0E  CFF5 F009          	movff	tablat,btemp+8
 14380   013B12  0009               	tblrd		*+
 14381   013B14  CFF5 F00A          	movff	tablat,btemp+9
 14382   013B18  0009               	tblrd		*+
 14383   013B1A  CFF5 F00B          	movff	tablat,btemp+10
 14384   013B1E  0009               	tblrd		*+
 14385   013B20  CFF5 F00C          	movff	tablat,btemp+11
 14386                           
 14387                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14388   013B24  0EFC               	movlw	-4
 14389   013B26  C009  FFE3         	movff	btemp+8,plusw1
 14390   013B2A  0EFD               	movlw	-3
 14391   013B2C  C00A  FFE3         	movff	btemp+9,plusw1
 14392   013B30  0EFE               	movlw	-2
 14393   013B32  C00B  FFE3         	movff	btemp+10,plusw1
 14394   013B36  0EFF               	movlw	-1
 14395   013B38  C00C  FFE3         	movff	btemp+11,plusw1
 14396   013B3C                     
 14397                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14398                           ;stkvar	_config @ sp[(-4)+-2]
 14399   013B3C  0EFA               	movlw	-6
 14400   013B3E  CFE3 FFD9          	movff	plusw1,fsr2l
 14401   013B42  0EFB               	movlw	-5
 14402   013B44  CFE3 FFDA          	movff	plusw1,fsr2h
 14403   013B48  30DF               	rrcf	223,w,c
 14404   013B4A  0B1F               	andlw	31
 14405   013B4C  6E0C               	movwf	(btemp+11)^0,c
 14406                           
 14407                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14408   013B4E  0EFF               	movlw	255
 14409   013B50  24E1               	addwf	fsr1l,w,c
 14410   013B52  6ED9               	movwf	fsr2l,c
 14411   013B54  0EFF               	movlw	255
 14412   013B56  20E2               	addwfc	fsr1h,w,c
 14413   013B58  6EDA               	movwf	fsr2h,c
 14414   013B5A  50DF               	movf	223,w,c
 14415   013B5C  180C               	xorwf	(btemp+11)^0,w,c
 14416   013B5E  0BE0               	andlw	-32
 14417   013B60  180C               	xorwf	(btemp+11)^0,w,c
 14418   013B62  6EDF               	movwf	223,c
 14419   013B64                     
 14420                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14421                           ;stkvar	_config @ sp[(-4)+-2]
 14422   013B64  0EFA               	movlw	-6
 14423   013B66  CFE3 FFD9          	movff	plusw1,fsr2l
 14424   013B6A  0EFB               	movlw	-5
 14425   013B6C  CFE3 FFDA          	movff	plusw1,fsr2h
 14426                           
 14427                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14428   013B70  50E1               	movf	fsr1l,w,c
 14429   013B72  0FFC               	addlw	-4
 14430   013B74  6EE9               	movwf	fsr0l,c
 14431   013B76  50E2               	movf	fsr1h,w,c
 14432   013B78  6EEA               	movwf	fsr0h,c
 14433   013B7A  0EFF               	movlw	255
 14434   013B7C  22EA               	addwfc	fsr0h,f,c
 14435   013B7E  9AEF               	bcf	indf0,5,c
 14436   013B80  A0DF               	btfss	indf2,0,c
 14437   013B82  EFC4  F09D         	goto	u2465
 14438   013B86  8AEF               	bsf	indf0,5,c
 14439   013B88                     u2465:
 14440   013B88                     
 14441                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14442   013B88  0EFC               	movlw	-4
 14443   013B8A  CFE3 FFE6          	movff	plusw1,postinc1
 14444   013B8E  CFE3 FFE6          	movff	plusw1,postinc1
 14445   013B92  CFE3 FFE6          	movff	plusw1,postinc1
 14446   013B96  CFE3 FFE6          	movff	plusw1,postinc1
 14447   013B9A  0E40               	movlw	64
 14448   013B9C  6EE6               	movwf	postinc1,c
 14449   013B9E  0E00               	movlw	0
 14450   013BA0  6EE6               	movwf	postinc1,c
 14451   013BA2  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14452   013BA6                     
 14453                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 14454   013BA6  0EFA               	movlw	250
 14455   013BA8  26E1               	addwf	fsr1l,f,c
 14456   013BAA  0EFF               	movlw	255
 14457   013BAC  22E2               	addwfc	fsr1h,f,c
 14458   013BAE  0012               	return		;funcret
 14459   013BB0                     __end_of_DRV_CANFDSPI_TefConfigure:
 14460                           	callstack 0
 14461                           
 14462 ;; *************** function _DRV_CANFDSPI_Reset *****************
 14463 ;; Defined at:
 14464 ;;		line 257 in file "can/can.c"
 14465 ;; Parameters:    Size  Location     Type
 14466 ;;		None
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;  spiTransferS    2    0        unsigned short 
 14469 ;;  spiTransferE    1    0        char 
 14470 ;; Return value:  Size  Location     Type
 14471 ;;                  1  [STACK] char 
 14472 ;; Registers used:
 14473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 14474 ;; Tracked objects:
 14475 ;;		On entry : 0/0
 14476 ;;		On exit  : 0/0
 14477 ;;		Unchanged: 0/0
 14478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;Total ram usage:        0 bytes
 14484 ;; Hardware stack levels used: 1
 14485 ;; Hardware stack levels required when called: 8
 14486 ;; This function calls:
 14487 ;;		_SPI2_Open
 14488 ;;		_SpiTransfer
 14489 ;; This function is called by:
 14490 ;;		_CanInit
 14491 ;; This function uses a reentrant model
 14492 ;;
 14493                           
 14494                           	psect	text56
 14495   01483E                     __ptext56:
 14496                           	callstack 0
 14497   01483E                     _DRV_CANFDSPI_Reset:
 14498                           	callstack 21
 14499   01483E                     
 14500                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 14501   01483E  0101               	movlb	1	; () banked
 14502   014840  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 14503   014842                     
 14504                           ; BSR set to: 1
 14505                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 14506   014842  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 14507   014844                     
 14508                           ; BSR set to: 1
 14509                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 14510   014844  0E00               	movlw	0
 14511   014846  6EE6               	movwf	postinc1,c
 14512   014848  ECD8  F09D         	call	_SPI2_Open	;wreg free
 14513   01484C  0E02               	movlw	2
 14514   01484E  6EE6               	movwf	postinc1,c
 14515   014850  0E00               	movlw	0
 14516   014852  6EE6               	movwf	postinc1,c
 14517   014854  0E00               	movlw	low _spiReceiveBuffer
 14518   014856  6EE6               	movwf	postinc1,c
 14519   014858  0E02               	movlw	high _spiReceiveBuffer
 14520   01485A  6EE6               	movwf	postinc1,c
 14521   01485C  0E00               	movlw	low _spiTransmitBuffer
 14522   01485E  6EE6               	movwf	postinc1,c
 14523   014860  0E01               	movlw	high _spiTransmitBuffer
 14524   014862  6EE6               	movwf	postinc1,c
 14525   014864  EC1A  F09D         	call	_SpiTransfer	;wreg free
 14526   014868                     
 14527                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 14528   014868  0012               	return		;funcret
 14529   01486A                     __end_of_DRV_CANFDSPI_Reset:
 14530                           	callstack 0
 14531                           
 14532 ;; *************** function _SPI2_Open *****************
 14533 ;; Defined at:
 14534 ;;		line 72 in file "mcc_generated_files/spi2.c"
 14535 ;; Parameters:    Size  Location     Type
 14536 ;;  spi2UniqueCo    1  [STACK] enum E358
 14537 ;; Auto vars:     Size  Location     Type
 14538 ;;		None
 14539 ;; Return value:  Size  Location     Type
 14540 ;;                  1  [STACK] _Bool 
 14541 ;; Registers used:
 14542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 14543 ;; Tracked objects:
 14544 ;;		On entry : 3F/1
 14545 ;;		On exit  : 0/0
 14546 ;;		Unchanged: 0/0
 14547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14552 ;;Total ram usage:        0 bytes
 14553 ;; Hardware stack levels used: 1
 14554 ;; Hardware stack levels required when called: 7
 14555 ;; This function calls:
 14556 ;;		Nothing
 14557 ;; This function is called by:
 14558 ;;		_DRV_CANFDSPI_Reset
 14559 ;; This function uses a reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text57
 14563   013BB0                     __ptext57:
 14564                           	callstack 0
 14565   013BB0                     _SPI2_Open:
 14566                           	callstack 21
 14567   013BB0                     
 14568                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 14569   013BB0  BA63               	btfsc	99,5,c	;volatile
 14570   013BB2  EFDD  F09D         	goto	u2211
 14571   013BB6  EFDF  F09D         	goto	u2210
 14572   013BBA                     u2211:
 14573   013BBA  EF31  F09E         	goto	l1120
 14574   013BBE                     u2210:
 14575   013BBE                     
 14576                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 14577                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14578   013BBE  0EFF               	movlw	-1
 14579   013BC0  50E3               	movf	plusw1,w,c
 14580   013BC2  0D04               	mullw	4
 14581   013BC4  0E01               	movlw	1
 14582   013BC6  26F3               	addwf	243,f,c
 14583   013BC8  0E00               	movlw	0
 14584   013BCA  22F4               	addwfc	244,f,c
 14585   013BCC  0EE9               	movlw	low _spi2_configuration
 14586   013BCE  24F3               	addwf	243,w,c
 14587   013BD0  6EF6               	movwf	tblptrl,c
 14588   013BD2  0EFF               	movlw	high _spi2_configuration
 14589   013BD4  20F4               	addwfc	244,w,c
 14590   013BD6  6EF7               	movwf	tblptrh,c
 14591   013BD8                     	if	1	;There are 3 active tblptr bytes
 14592   013BD8  6AF8               	clrf	tblptru,c
 14593   013BDA  0E00               	movlw	low (__mediumconst shr (0+16))
 14594   013BDC  22F8               	addwfc	tblptru,f,c
 14595   013BDE                     	endif
 14596   013BDE  0008               	tblrd		*
 14597   013BE0  CFF5 FF64          	movff	tablat,3940	;volatile
 14598                           
 14599                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 14600                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14601   013BE4  0EFF               	movlw	-1
 14602   013BE6  50E3               	movf	plusw1,w,c
 14603   013BE8  0D04               	mullw	4
 14604   013BEA  0EE9               	movlw	low _spi2_configuration
 14605   013BEC  24F3               	addwf	243,w,c
 14606   013BEE  6EF6               	movwf	tblptrl,c
 14607   013BF0  0EFF               	movlw	high _spi2_configuration
 14608   013BF2  20F4               	addwfc	244,w,c
 14609   013BF4  6EF7               	movwf	tblptrh,c
 14610   013BF6                     	if	1	;There are 3 active tblptr bytes
 14611   013BF6  6AF8               	clrf	tblptru,c
 14612   013BF8  0E00               	movlw	low (__mediumconst shr (0+16))
 14613   013BFA  22F8               	addwfc	tblptru,f,c
 14614   013BFC                     	endif
 14615   013BFC  0008               	tblrd		*
 14616   013BFE  CFF5 FF63          	movff	tablat,3939	;volatile
 14617   013C02                     
 14618                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 14619   013C02  6A62               	clrf	98,c	;volatile
 14620                           
 14621                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 14622                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14623   013C04  0EFF               	movlw	-1
 14624   013C06  50E3               	movf	plusw1,w,c
 14625   013C08  0D04               	mullw	4
 14626   013C0A  0E02               	movlw	2
 14627   013C0C  26F3               	addwf	243,f,c
 14628   013C0E  0E00               	movlw	0
 14629   013C10  22F4               	addwfc	244,f,c
 14630   013C12  0EE9               	movlw	low _spi2_configuration
 14631   013C14  24F3               	addwf	243,w,c
 14632   013C16  6EF6               	movwf	tblptrl,c
 14633   013C18  0EFF               	movlw	high _spi2_configuration
 14634   013C1A  20F4               	addwfc	244,w,c
 14635   013C1C  6EF7               	movwf	tblptrh,c
 14636   013C1E                     	if	1	;There are 3 active tblptr bytes
 14637   013C1E  6AF8               	clrf	tblptru,c
 14638   013C20  0E00               	movlw	low (__mediumconst shr (0+16))
 14639   013C22  22F8               	addwfc	tblptru,f,c
 14640   013C24                     	endif
 14641   013C24  0008               	tblrd		*
 14642   013C26  CFF5 FF65          	movff	tablat,3941	;volatile
 14643   013C2A                     
 14644                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 14645                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14646   013C2A  0EFF               	movlw	-1
 14647   013C2C  50E3               	movf	plusw1,w,c
 14648   013C2E  0D04               	mullw	4
 14649   013C30  0E03               	movlw	3
 14650   013C32  26F3               	addwf	243,f,c
 14651   013C34  0E00               	movlw	0
 14652   013C36  22F4               	addwfc	244,f,c
 14653   013C38  0EE9               	movlw	low _spi2_configuration
 14654   013C3A  24F3               	addwf	243,w,c
 14655   013C3C  6EF6               	movwf	tblptrl,c
 14656   013C3E  0EFF               	movlw	high _spi2_configuration
 14657   013C40  20F4               	addwfc	244,w,c
 14658   013C42  6EF7               	movwf	tblptrh,c
 14659   013C44                     	if	1	;There are 3 active tblptr bytes
 14660   013C44  6AF8               	clrf	tblptru,c
 14661   013C46  0E00               	movlw	low (__mediumconst shr (0+16))
 14662   013C48  22F8               	addwfc	tblptru,f,c
 14663   013C4A                     	endif
 14664   013C4A  0008               	tblrd		*
 14665   013C4C  CFF5 F00C          	movff	tablat,btemp+11
 14666   013C50  3A0C               	swapf	(btemp+11)^0,f,c
 14667   013C52  460C               	rlncf	(btemp+11)^0,f,c
 14668   013C54  460C               	rlncf	(btemp+11)^0,f,c
 14669   013C56  5095               	movf	149,w,c	;volatile
 14670   013C58  180C               	xorwf	(btemp+11)^0,w,c
 14671   013C5A  0BBF               	andlw	-65
 14672   013C5C  180C               	xorwf	(btemp+11)^0,w,c
 14673   013C5E  6E95               	movwf	149,c	;volatile
 14674   013C60                     
 14675                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14676   013C60  8A63               	bsf	99,5,c	;volatile
 14677   013C62                     l1120:
 14678                           
 14679                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14680   013C62  52E5               	movf	postdec1,f,c
 14681   013C64  0012               	return		;funcret
 14682   013C66                     __end_of_SPI2_Open:
 14683                           	callstack 0
 14684                           
 14685 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14686 ;; Defined at:
 14687 ;;		line 1172 in file "can/can.c"
 14688 ;; Parameters:    Size  Location     Type
 14689 ;;  channel         1  [STACK] enum E5290
 14690 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14691 ;;		 -> rxfConfig(3), 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14694 ;;  a               2  [STACK] unsigned short 
 14695 ;;  spiTransferE    1    0        char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;                  1  [STACK] char 
 14698 ;; Registers used:
 14699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;Total ram usage:        0 bytes
 14710 ;; Hardware stack levels used: 1
 14711 ;; Hardware stack levels required when called: 9
 14712 ;; This function calls:
 14713 ;;		_DRV_CANFDSPI_WriteWord
 14714 ;; This function is called by:
 14715 ;;		_CanInit
 14716 ;; This function uses a reentrant model
 14717 ;;
 14718                           
 14719                           	psect	text58
 14720   012E7E                     __ptext58:
 14721                           	callstack 0
 14722   012E7E                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14723                           	callstack 0
 14724                           
 14725                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14726   012E7E  0E07               	movlw	7
 14727   012E80  26E1               	addwf	fsr1l,f,c
 14728   012E82  0E00               	movlw	0
 14729   012E84  22E2               	addwfc	fsr1h,f,c
 14730   012E86                     
 14731                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14732                           ;stkvar	_channel @ sp[(-7)+-1]
 14733   012E86  0EF8               	movlw	-8
 14734   012E88  50E3               	movf	plusw1,w,c
 14735   012E8A  A4D8               	btfss	status,2,c
 14736   012E8C  EF4A  F097         	goto	u2481
 14737   012E90  EF4C  F097         	goto	u2480
 14738   012E94                     u2481:
 14739   012E94  EF4E  F097         	goto	l4825
 14740   012E98                     u2480:
 14741   012E98  EFDB  F097         	goto	l346
 14742   012E9C                     l4825:
 14743                           
 14744                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 14745   012E9C  0EDD               	movlw	low _canFifoResetValues
 14746   012E9E  6EF6               	movwf	tblptrl,c
 14747   012EA0                     	if	1	;There is more than 1 active tblptr byte
 14748   012EA0  0EFF               	movlw	high _canFifoResetValues
 14749   012EA2  6EF7               	movwf	tblptrh,c
 14750   012EA4                     	endif
 14751   012EA4                     	if	1	;There are 3 active tblptr bytes
 14752   012EA4  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14753   012EA6  6EF8               	movwf	tblptru,c
 14754   012EA8                     	endif
 14755   012EA8  0009               	tblrd		*+
 14756   012EAA  CFF5 F009          	movff	tablat,btemp+8
 14757   012EAE  0009               	tblrd		*+
 14758   012EB0  CFF5 F00A          	movff	tablat,btemp+9
 14759   012EB4  0009               	tblrd		*+
 14760   012EB6  CFF5 F00B          	movff	tablat,btemp+10
 14761   012EBA  0009               	tblrd		*+
 14762   012EBC  CFF5 F00C          	movff	tablat,btemp+11
 14763                           
 14764                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14765   012EC0  0EF9               	movlw	-7
 14766   012EC2  C009  FFE3         	movff	btemp+8,plusw1
 14767   012EC6  0EFA               	movlw	-6
 14768   012EC8  C00A  FFE3         	movff	btemp+9,plusw1
 14769   012ECC  0EFB               	movlw	-5
 14770   012ECE  C00B  FFE3         	movff	btemp+10,plusw1
 14771   012ED2  0EFC               	movlw	-4
 14772   012ED4  C00C  FFE3         	movff	btemp+11,plusw1
 14773   012ED8                     
 14774                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 14775                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14776   012ED8  50E1               	movf	fsr1l,w,c
 14777   012EDA  0FF9               	addlw	-7
 14778   012EDC  6ED9               	movwf	fsr2l,c
 14779   012EDE  50E2               	movf	fsr1h,w,c
 14780   012EE0  6EDA               	movwf	fsr2h,c
 14781   012EE2  0EFF               	movlw	255
 14782   012EE4  22DA               	addwfc	fsr2h,f,c
 14783   012EE6  9EDF               	bcf	indf2,7,c
 14784   012EE8                     
 14785                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 14786                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14787   012EE8  0EFC               	movlw	252
 14788   012EEA  24E1               	addwf	fsr1l,w,c
 14789   012EEC  6ED9               	movwf	fsr2l,c
 14790   012EEE  0EFF               	movlw	255
 14791   012EF0  20E2               	addwfc	fsr1h,w,c
 14792   012EF2  6EDA               	movwf	fsr2h,c
 14793                           
 14794                           ;stkvar	_config @ sp[(-7)+-3]
 14795   012EF4  0EF6               	movlw	-10
 14796   012EF6  CFE3 F00B          	movff	plusw1,btemp+10
 14797   012EFA  0EF7               	movlw	-9
 14798   012EFC  CFE3 F00C          	movff	plusw1,btemp+11
 14799   012F00  0E01               	movlw	1
 14800   012F02  240B               	addwf	(btemp+10)^0,w,c
 14801   012F04  6EE9               	movwf	fsr0l,c
 14802   012F06  0E00               	movlw	0
 14803   012F08  200C               	addwfc	(btemp+11)^0,w,c
 14804   012F0A  6EEA               	movwf	fsr0h,c
 14805   012F0C  50EF               	movf	indf0,w,c
 14806   012F0E  6E0C               	movwf	(btemp+11)^0,c
 14807                           
 14808                           ;stkvar	_config @ sp[(-7)+-3]
 14809   012F10  0EF6               	movlw	-10
 14810   012F12  CFE3 F009          	movff	plusw1,btemp+8
 14811   012F16  0EF7               	movlw	-9
 14812   012F18  CFE3 F00A          	movff	plusw1,btemp+9
 14813   012F1C  0E02               	movlw	2
 14814   012F1E  2409               	addwf	(btemp+8)^0,w,c
 14815   012F20  6EE9               	movwf	fsr0l,c
 14816   012F22  0E00               	movlw	0
 14817   012F24  200A               	addwfc	(btemp+9)^0,w,c
 14818   012F26  6EEA               	movwf	fsr0h,c
 14819   012F28  50EF               	movf	indf0,w,c
 14820   012F2A  6E0B               	movwf	(btemp+10)^0,c
 14821   012F2C  0E05               	movlw	5
 14822   012F2E  6E01               	movwf	btemp^0,c
 14823   012F30                     u2495:
 14824   012F30  90D8               	bcf	status,0,c
 14825   012F32  360B               	rlcf	(btemp+10)^0,f,c
 14826   012F34  2E01               	decfsz	btemp^0,f,c
 14827   012F36  EF98  F097         	goto	u2495
 14828   012F3A  500B               	movf	(btemp+10)^0,w,c
 14829   012F3C  100C               	iorwf	(btemp+11)^0,w,c
 14830   012F3E  6EDF               	movwf	indf2,c
 14831   012F40                     
 14832                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 14833                           ;stkvar	_config @ sp[(-7)+-3]
 14834   012F40  0EF6               	movlw	-10
 14835   012F42  CFE3 FFD9          	movff	plusw1,fsr2l
 14836   012F46  0EF7               	movlw	-9
 14837   012F48  CFE3 FFDA          	movff	plusw1,fsr2h
 14838   012F4C  50DF               	movf	indf2,w,c
 14839   012F4E  6E0C               	movwf	(btemp+11)^0,c
 14840                           
 14841                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14842   012F50  50E1               	movf	fsr1l,w,c
 14843   012F52  0FF9               	addlw	-7
 14844   012F54  6ED9               	movwf	fsr2l,c
 14845   012F56  50E2               	movf	fsr1h,w,c
 14846   012F58  6EDA               	movwf	fsr2h,c
 14847   012F5A  0EFF               	movlw	255
 14848   012F5C  22DA               	addwfc	fsr2h,f,c
 14849   012F5E  3A0C               	swapf	(btemp+11)^0,f,c
 14850   012F60  460C               	rlncf	(btemp+11)^0,f,c
 14851   012F62  50DF               	movf	223,w,c
 14852   012F64  180C               	xorwf	(btemp+11)^0,w,c
 14853   012F66  0BDF               	andlw	-33
 14854   012F68  180C               	xorwf	(btemp+11)^0,w,c
 14855   012F6A  6EDF               	movwf	223,c
 14856   012F6C                     
 14857                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 14858                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14859   012F6C  50E1               	movf	fsr1l,w,c
 14860   012F6E  0FF9               	addlw	-7
 14861   012F70  6ED9               	movwf	fsr2l,c
 14862   012F72  50E2               	movf	fsr1h,w,c
 14863   012F74  6EDA               	movwf	fsr2h,c
 14864   012F76  0EFF               	movlw	255
 14865   012F78  22DA               	addwfc	fsr2h,f,c
 14866   012F7A  80DF               	bsf	indf2,0,c
 14867   012F7C                     
 14868                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 14869                           ;stkvar	_channel @ sp[(-7)+-1]
 14870   012F7C  0EF8               	movlw	-8
 14871   012F7E  50E3               	movf	plusw1,w,c
 14872   012F80  0D0C               	mullw	12
 14873   012F82  0E50               	movlw	80
 14874   012F84  26F3               	addwf	243,f,c
 14875   012F86  0E00               	movlw	0
 14876   012F88  22F4               	addwfc	244,f,c
 14877                           
 14878                           ;stkvar	_a @ sp[(-7)+5]
 14879   012F8A  0EFE               	movlw	-2
 14880   012F8C  CFF3 FFE3          	movff	prodl,plusw1
 14881   012F90  0EFF               	movlw	-1
 14882   012F92  CFF4 FFE3          	movff	prodh,plusw1
 14883   012F96                     
 14884                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14885   012F96  0EF9               	movlw	-7
 14886   012F98  CFE3 FFE6          	movff	plusw1,postinc1
 14887   012F9C  CFE3 FFE6          	movff	plusw1,postinc1
 14888   012FA0  CFE3 FFE6          	movff	plusw1,postinc1
 14889   012FA4  CFE3 FFE6          	movff	plusw1,postinc1
 14890                           
 14891                           ;stkvar	_a @ sp[(-11)+5]
 14892   012FA8  0EFA               	movlw	-6
 14893   012FAA  CFE3 FFE6          	movff	plusw1,postinc1
 14894   012FAE  CFE3 FFE6          	movff	plusw1,postinc1
 14895   012FB2  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14896   012FB6                     l346:
 14897                           
 14898                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14899   012FB6  0EF6               	movlw	246
 14900   012FB8  26E1               	addwf	fsr1l,f,c
 14901   012FBA  0EFF               	movlw	255
 14902   012FBC  22E2               	addwfc	fsr1h,f,c
 14903   012FBE  0012               	return		;funcret
 14904   012FC0                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 14905                           	callstack 0
 14906                           
 14907 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 14908 ;; Defined at:
 14909 ;;		line 499 in file "can/can.c"
 14910 ;; Parameters:    Size  Location     Type
 14911 ;;  opMode          1  [STACK] enum E5360
 14912 ;; Auto vars:     Size  Location     Type
 14913 ;;  d               1  [STACK] unsigned char 
 14914 ;;  spiTransferE    1  [STACK] char 
 14915 ;; Return value:  Size  Location     Type
 14916 ;;                  1  [STACK] char 
 14917 ;; Registers used:
 14918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14919 ;; Tracked objects:
 14920 ;;		On entry : 0/0
 14921 ;;		On exit  : 0/0
 14922 ;;		Unchanged: 0/0
 14923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;Total ram usage:        0 bytes
 14929 ;; Hardware stack levels used: 1
 14930 ;; Hardware stack levels required when called: 9
 14931 ;; This function calls:
 14932 ;;		_DRV_CANFDSPI_ReadByte
 14933 ;;		_DRV_CANFDSPI_WriteByte
 14934 ;; This function is called by:
 14935 ;;		_CanInit
 14936 ;; This function uses a reentrant model
 14937 ;;
 14938                           
 14939                           	psect	text59
 14940   0142C8                     __ptext59:
 14941                           	callstack 0
 14942   0142C8                     _DRV_CANFDSPI_OperationModeSelect:
 14943                           	callstack 0
 14944                           
 14945                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14946   0142C8  52E6               	movf	postinc1,f,c
 14947   0142CA  52E6               	movf	postinc1,f,c
 14948   0142CC                     
 14949                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 14950                           ;stkvar	_d @ sp[(-2)+0]
 14951   0142CC  0EFE               	movlw	-2
 14952   0142CE  6AE3               	clrf	plusw1,c
 14953   0142D0                     
 14954                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 14955                           ;stkvar	_d @ sp[(-2)+0]
 14956   0142D0  0EFE               	movlw	254
 14957   0142D2  24E1               	addwf	fsr1l,w,c
 14958   0142D4  6E01               	movwf	btemp^0,c
 14959   0142D6  0EFF               	movlw	255
 14960   0142D8  20E2               	addwfc	fsr1h,w,c
 14961   0142DA  6E02               	movwf	(btemp+1)^0,c
 14962   0142DC  C001  FFE6         	movff	btemp,postinc1
 14963   0142E0  C002  FFE6         	movff	btemp+1,postinc1
 14964   0142E4  0E03               	movlw	3
 14965   0142E6  6EE6               	movwf	postinc1,c
 14966   0142E8  0E00               	movlw	0
 14967   0142EA  6EE6               	movwf	postinc1,c
 14968   0142EC  EC7A  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14969                           
 14970                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14971   0142F0  0EFF               	movlw	-1
 14972   0142F2  C001  FFE3         	movff	btemp,plusw1
 14973   0142F6                     
 14974                           ;can/can.c: 506:     if (spiTransferError) {
 14975                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14976   0142F6  0EFF               	movlw	-1
 14977   0142F8  50E3               	movf	plusw1,w,c
 14978   0142FA  B4D8               	btfsc	status,2,c
 14979   0142FC  EF82  F0A1         	goto	u2511
 14980   014300  EF84  F0A1         	goto	u2510
 14981   014304                     u2511:
 14982   014304  EF86  F0A1         	goto	l4893
 14983   014308                     u2510:
 14984   014308  EFA3  F0A1         	goto	l222
 14985   01430C                     l4893:
 14986                           
 14987                           ;can/can.c: 511:     d &= ~0x07;
 14988                           ;stkvar	_d @ sp[(-2)+0]
 14989   01430C  0EFE               	movlw	-2
 14990   01430E  CFE3 F001          	movff	plusw1,btemp
 14991   014312  0EF8               	movlw	248
 14992   014314  1601               	andwf	btemp^0,f,c
 14993   014316  0EFE               	movlw	-2
 14994   014318  C001  FFE3         	movff	btemp,plusw1
 14995   01431C                     
 14996                           ;can/can.c: 512:     d |= opMode;
 14997                           ;stkvar	_opMode @ sp[(-2)+-1]
 14998   01431C  0EFD               	movlw	-3
 14999   01431E  CFE3 F00C          	movff	plusw1,btemp+11
 15000                           
 15001                           ;stkvar	_d @ sp[(-2)+0]
 15002   014322  50E1               	movf	fsr1l,w,c
 15003   014324  0FFE               	addlw	-2
 15004   014326  6ED9               	movwf	fsr2l,c
 15005   014328  50E2               	movf	fsr1h,w,c
 15006   01432A  6EDA               	movwf	fsr2h,c
 15007   01432C  0EFF               	movlw	255
 15008   01432E  22DA               	addwfc	fsr2h,f,c
 15009   014330  500C               	movf	(btemp+11)^0,w,c
 15010   014332  12DF               	iorwf	indf2,f,c
 15011   014334                     
 15012                           ;stkvar	_d @ sp[(-2)+0]
 15013   014334  0EFE               	movlw	-2
 15014   014336  50E3               	movf	plusw1,w,c
 15015   014338  6EE6               	movwf	postinc1,c
 15016   01433A  0E03               	movlw	3
 15017   01433C  6EE6               	movwf	postinc1,c
 15018   01433E  0E00               	movlw	0
 15019   014340  6EE6               	movwf	postinc1,c
 15020   014342  EC07  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15021   014346                     l222:
 15022                           
 15023                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15024   014346  52E5               	movf	postdec1,f,c
 15025   014348  52E5               	movf	postdec1,f,c
 15026   01434A  52E5               	movf	postdec1,f,c
 15027   01434C  0012               	return		;funcret
 15028   01434E                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15029                           	callstack 0
 15030                           
 15031 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15032 ;; Defined at:
 15033 ;;		line 294 in file "can/can.c"
 15034 ;; Parameters:    Size  Location     Type
 15035 ;;  address         2  [STACK] unsigned short 
 15036 ;;  txd             1  [STACK] unsigned char 
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;  spiTransferS    2    0        unsigned short 
 15039 ;;  spiTransferE    1  [STACK] char 
 15040 ;; Return value:  Size  Location     Type
 15041 ;;                  1  [STACK] char 
 15042 ;; Registers used:
 15043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15044 ;; Tracked objects:
 15045 ;;		On entry : 0/0
 15046 ;;		On exit  : 0/0
 15047 ;;		Unchanged: 0/0
 15048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15053 ;;Total ram usage:        0 bytes
 15054 ;; Hardware stack levels used: 1
 15055 ;; Hardware stack levels required when called: 8
 15056 ;; This function calls:
 15057 ;;		_SpiTransfer
 15058 ;; This function is called by:
 15059 ;;		_DRV_CANFDSPI_OperationModeSelect
 15060 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15061 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15062 ;;		_DRV_CANFDSPI_FilterDisable
 15063 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15064 ;;		_DRV_CANFDSPI_TimeStampEnable
 15065 ;; This function uses a reentrant model
 15066 ;;
 15067                           
 15068                           	psect	text60
 15069   01460E                     __ptext60:
 15070                           	callstack 0
 15071   01460E                     _DRV_CANFDSPI_WriteByte:
 15072                           	callstack 0
 15073                           
 15074                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15075   01460E  52E6               	movf	postinc1,f,c
 15076   014610                     
 15077                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15078                           ;stkvar	_address @ sp[(-1)+-2]
 15079   014610  0EFE               	movlw	254
 15080   014612  24E1               	addwf	fsr1l,w,c
 15081   014614  6ED9               	movwf	fsr2l,c
 15082   014616  0EFF               	movlw	255
 15083   014618  20E2               	addwfc	fsr1h,w,c
 15084   01461A  6EDA               	movwf	fsr2h,c
 15085   01461C  50DF               	movf	indf2,w,c
 15086   01461E  0B0F               	andlw	15
 15087   014620  0F20               	addlw	32
 15088   014622  0101               	movlb	1	; () banked
 15089   014624  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15090   014626                     
 15091                           ; BSR set to: 1
 15092                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15093                           ;stkvar	_address @ sp[(-1)+-2]
 15094   014626  0EFD               	movlw	-3
 15095   014628  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15096   01462C                     
 15097                           ; BSR set to: 1
 15098                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15099                           ;stkvar	_txd @ sp[(-1)+-3]
 15100   01462C  0EFC               	movlw	-4
 15101   01462E  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15102   014632                     
 15103                           ; BSR set to: 1
 15104                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15105   014632  0E03               	movlw	3
 15106   014634  6EE6               	movwf	postinc1,c
 15107   014636  0E00               	movlw	0
 15108   014638  6EE6               	movwf	postinc1,c
 15109   01463A  0E00               	movlw	low _spiReceiveBuffer
 15110   01463C  6EE6               	movwf	postinc1,c
 15111   01463E  0E02               	movlw	high _spiReceiveBuffer
 15112   014640  6EE6               	movwf	postinc1,c
 15113   014642  0E00               	movlw	low _spiTransmitBuffer
 15114   014644  6EE6               	movwf	postinc1,c
 15115   014646  0E01               	movlw	high _spiTransmitBuffer
 15116   014648  6EE6               	movwf	postinc1,c
 15117   01464A  EC1A  F09D         	call	_SpiTransfer	;wreg free
 15118                           
 15119                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15120   01464E  0EFF               	movlw	-1
 15121   014650  C001  FFE3         	movff	btemp,plusw1
 15122   014654                     
 15123                           ;can/can.c: 306:     return spiTransferError;
 15124                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15125   014654  0EFF               	movlw	-1
 15126   014656  CFE3 F001          	movff	plusw1,btemp
 15127   01465A                     
 15128                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15129   01465A  52E5               	movf	postdec1,f,c
 15130   01465C  52E5               	movf	postdec1,f,c
 15131   01465E  52E5               	movf	postdec1,f,c
 15132   014660  52E5               	movf	postdec1,f,c
 15133   014662  0012               	return		;funcret
 15134   014664                     __end_of_DRV_CANFDSPI_WriteByte:
 15135                           	callstack 0
 15136                           
 15137 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15138 ;; Defined at:
 15139 ;;		line 276 in file "can/can.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;  address         2  [STACK] unsigned short 
 15142 ;;  rxd             2  [STACK] PTR unsigned char 
 15143 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15144 ;;		 -> d(1), d(1), d(1), crc(1), 
 15145 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15146 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15147 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15148 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15149 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15150 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15151 ;;		 -> d(1), d(1), 
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;  spiTransferS    2    0        unsigned short 
 15154 ;;  spiTransferE    1  [STACK] char 
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1  [STACK] char 
 15157 ;; Registers used:
 15158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15168 ;;Total ram usage:        0 bytes
 15169 ;; Hardware stack levels used: 1
 15170 ;; Hardware stack levels required when called: 8
 15171 ;; This function calls:
 15172 ;;		_SpiTransfer
 15173 ;; This function is called by:
 15174 ;;		_DRV_CANFDSPI_OperationModeSelect
 15175 ;;		_DRV_CANFDSPI_FilterDisable
 15176 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15177 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15178 ;;		_DRV_CANFDSPI_TimeStampEnable
 15179 ;; This function uses a reentrant model
 15180 ;;
 15181                           
 15182                           	psect	text61
 15183   0144F4                     __ptext61:
 15184                           	callstack 0
 15185   0144F4                     _DRV_CANFDSPI_ReadByte:
 15186                           	callstack 0
 15187                           
 15188                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15189   0144F4  52E6               	movf	postinc1,f,c
 15190   0144F6                     
 15191                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15192                           ;stkvar	_address @ sp[(-1)+-2]
 15193   0144F6  0EFE               	movlw	254
 15194   0144F8  24E1               	addwf	fsr1l,w,c
 15195   0144FA  6ED9               	movwf	fsr2l,c
 15196   0144FC  0EFF               	movlw	255
 15197   0144FE  20E2               	addwfc	fsr1h,w,c
 15198   014500  6EDA               	movwf	fsr2h,c
 15199   014502  50DF               	movf	indf2,w,c
 15200   014504  0B0F               	andlw	15
 15201   014506  0F30               	addlw	48
 15202   014508  0101               	movlb	1	; () banked
 15203   01450A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15204   01450C                     
 15205                           ; BSR set to: 1
 15206                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15207                           ;stkvar	_address @ sp[(-1)+-2]
 15208   01450C  0EFD               	movlw	-3
 15209   01450E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15210   014512                     
 15211                           ; BSR set to: 1
 15212                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15213   014512  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15214   014514                     
 15215                           ; BSR set to: 1
 15216                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15217   014514  0E03               	movlw	3
 15218   014516  6EE6               	movwf	postinc1,c
 15219   014518  0E00               	movlw	0
 15220   01451A  6EE6               	movwf	postinc1,c
 15221   01451C  0E00               	movlw	low _spiReceiveBuffer
 15222   01451E  6EE6               	movwf	postinc1,c
 15223   014520  0E02               	movlw	high _spiReceiveBuffer
 15224   014522  6EE6               	movwf	postinc1,c
 15225   014524  0E00               	movlw	low _spiTransmitBuffer
 15226   014526  6EE6               	movwf	postinc1,c
 15227   014528  0E01               	movlw	high _spiTransmitBuffer
 15228   01452A  6EE6               	movwf	postinc1,c
 15229   01452C  EC1A  F09D         	call	_SpiTransfer	;wreg free
 15230                           
 15231                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15232   014530  0EFF               	movlw	-1
 15233   014532  C001  FFE3         	movff	btemp,plusw1
 15234   014536                     
 15235                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15236                           ;stkvar	_rxd @ sp[(-1)+-4]
 15237   014536  0EFB               	movlw	-5
 15238   014538  CFE3 FFD9          	movff	plusw1,fsr2l
 15239   01453C  0EFC               	movlw	-4
 15240   01453E  CFE3 FFDA          	movff	plusw1,fsr2h
 15241   014542  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15242   014546                     
 15243                           ;can/can.c: 291:     return spiTransferError;
 15244                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15245   014546  0EFF               	movlw	-1
 15246   014548  CFE3 F001          	movff	plusw1,btemp
 15247   01454C                     
 15248                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15249   01454C  0EFB               	movlw	251
 15250   01454E  26E1               	addwf	fsr1l,f,c
 15251   014550  0EFF               	movlw	255
 15252   014552  22E2               	addwfc	fsr1h,f,c
 15253   014554  0012               	return		;funcret
 15254   014556                     __end_of_DRV_CANFDSPI_ReadByte:
 15255                           	callstack 0
 15256                           
 15257 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15258 ;; Defined at:
 15259 ;;		line 1591 in file "can/can.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  index           1  [STACK] unsigned char 
 15262 ;;  flags           2  [STACK] enum E5566
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15265 ;;  a               2    0        unsigned short 
 15266 ;;  spiTransferE    1    0        char 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;                  1  [STACK] char 
 15269 ;; Registers used:
 15270 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15280 ;;Total ram usage:        0 bytes
 15281 ;; Hardware stack levels used: 1
 15282 ;; Hardware stack levels required when called: 9
 15283 ;; This function calls:
 15284 ;;		_DRV_CANFDSPI_WriteHalfWord
 15285 ;; This function is called by:
 15286 ;;		_CanInit
 15287 ;; This function uses a reentrant model
 15288 ;;
 15289                           
 15290                           	psect	text62
 15291   014490                     __ptext62:
 15292                           	callstack 0
 15293   014490                     _DRV_CANFDSPI_ModuleEventEnable:
 15294                           	callstack 0
 15295                           
 15296                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15297   014490  52E6               	movf	postinc1,f,c
 15298   014492  52E6               	movf	postinc1,f,c
 15299   014494                     
 15300                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15301                           ;stkvar	_intEnables @ sp[(-2)+0]
 15302   014494  0EFE               	movlw	-2
 15303   014496  6AE3               	clrf	plusw1,c
 15304   014498  0EFF               	movlw	-1
 15305   01449A  6AE3               	clrf	plusw1,c
 15306   01449C                     
 15307                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15308                           ;stkvar	_flags @ sp[(-2)+-3]
 15309   01449C  0EFB               	movlw	-5
 15310   01449E  CFE3 F00B          	movff	plusw1,btemp+10
 15311   0144A2  0EFC               	movlw	-4
 15312   0144A4  CFE3 F00C          	movff	plusw1,btemp+11
 15313   0144A8  0E1F               	movlw	31
 15314   0144AA  140B               	andwf	(btemp+10)^0,w,c
 15315   0144AC  6E09               	movwf	(btemp+8)^0,c
 15316   0144AE  0EFF               	movlw	255
 15317   0144B0  140C               	andwf	(btemp+11)^0,w,c
 15318   0144B2  6E0A               	movwf	(btemp+9)^0,c
 15319                           
 15320                           ;stkvar	_intEnables @ sp[(-2)+0]
 15321   0144B4  0EFE               	movlw	-2
 15322   0144B6  CFE3 F001          	movff	plusw1,btemp
 15323   0144BA  5009               	movf	(btemp+8)^0,w,c
 15324   0144BC  1201               	iorwf	btemp^0,f,c
 15325   0144BE  0EFE               	movlw	-2
 15326   0144C0  C001  FFE3         	movff	btemp,plusw1
 15327   0144C4  0EFF               	movlw	-1
 15328   0144C6  CFE3 F001          	movff	plusw1,btemp
 15329   0144CA  500A               	movf	(btemp+9)^0,w,c
 15330   0144CC  1201               	iorwf	btemp^0,f,c
 15331   0144CE  0EFF               	movlw	-1
 15332   0144D0  C001  FFE3         	movff	btemp,plusw1
 15333   0144D4                     
 15334                           ;stkvar	_intEnables @ sp[(-2)+0]
 15335   0144D4  0EFE               	movlw	-2
 15336   0144D6  CFE3 FFE6          	movff	plusw1,postinc1
 15337   0144DA  CFE3 FFE6          	movff	plusw1,postinc1
 15338   0144DE  0E1E               	movlw	30
 15339   0144E0  6EE6               	movwf	postinc1,c
 15340   0144E2  0E00               	movlw	0
 15341   0144E4  6EE6               	movwf	postinc1,c
 15342   0144E6  ECB5  F09C         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15343   0144EA                     
 15344                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15345   0144EA  0EFB               	movlw	251
 15346   0144EC  26E1               	addwf	fsr1l,f,c
 15347   0144EE  0EFF               	movlw	255
 15348   0144F0  22E2               	addwfc	fsr1h,f,c
 15349   0144F2  0012               	return		;funcret
 15350   0144F4                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15351                           	callstack 0
 15352                           
 15353 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15354 ;; Defined at:
 15355 ;;		line 332 in file "can/can.c"
 15356 ;; Parameters:    Size  Location     Type
 15357 ;;  address         2  [STACK] unsigned short 
 15358 ;;  txd             2  [STACK] unsigned short 
 15359 ;; Auto vars:     Size  Location     Type
 15360 ;;  spiTransferS    2  [STACK] unsigned short 
 15361 ;;  i               1  [STACK] unsigned char 
 15362 ;;  spiTransferE    1  [STACK] char 
 15363 ;; Return value:  Size  Location     Type
 15364 ;;                  1  [STACK] char 
 15365 ;; Registers used:
 15366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15376 ;;Total ram usage:        0 bytes
 15377 ;; Hardware stack levels used: 1
 15378 ;; Hardware stack levels required when called: 8
 15379 ;; This function calls:
 15380 ;;		_SpiTransfer
 15381 ;; This function is called by:
 15382 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15383 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15384 ;; This function uses a reentrant model
 15385 ;;
 15386                           
 15387                           	psect	text63
 15388   01396A                     __ptext63:
 15389                           	callstack 0
 15390   01396A                     _DRV_CANFDSPI_WriteHalfWord:
 15391                           	callstack 0
 15392                           
 15393                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15394   01396A  52E6               	movf	postinc1,f,c
 15395   01396C  52E6               	movf	postinc1,f,c
 15396   01396E  52E6               	movf	postinc1,f,c
 15397   013970  52E6               	movf	postinc1,f,c
 15398   013972                     
 15399                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15400   013972  0E04               	movlw	4
 15401   013974  6E0B               	movwf	(btemp+10)^0,c
 15402   013976  0E00               	movlw	0
 15403   013978  6E0C               	movwf	(btemp+11)^0,c
 15404                           
 15405                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15406   01397A  0EFC               	movlw	-4
 15407   01397C  C00B  FFE3         	movff	btemp+10,plusw1
 15408   013980  0EFD               	movlw	-3
 15409   013982  C00C  FFE3         	movff	btemp+11,plusw1
 15410   013986                     
 15411                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15412                           ;stkvar	_address @ sp[(-4)+-2]
 15413   013986  0EFB               	movlw	251
 15414   013988  24E1               	addwf	fsr1l,w,c
 15415   01398A  6ED9               	movwf	fsr2l,c
 15416   01398C  0EFF               	movlw	255
 15417   01398E  20E2               	addwfc	fsr1h,w,c
 15418   013990  6EDA               	movwf	fsr2h,c
 15419   013992  50DF               	movf	indf2,w,c
 15420   013994  0B0F               	andlw	15
 15421   013996  0F20               	addlw	32
 15422   013998  0101               	movlb	1	; () banked
 15423   01399A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15424   01399C                     
 15425                           ; BSR set to: 1
 15426                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15427                           ;stkvar	_address @ sp[(-4)+-2]
 15428   01399C  0EFA               	movlw	-6
 15429   01399E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15430   0139A2                     
 15431                           ; BSR set to: 1
 15432                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15433                           ;stkvar	_i @ sp[(-4)+2]
 15434   0139A2  0EFE               	movlw	-2
 15435   0139A4  6AE3               	clrf	plusw1,c
 15436   0139A6                     l4597:
 15437                           
 15438                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15439                           ;stkvar	_i @ sp[(-4)+2]
 15440   0139A6  0EFE               	movlw	-2
 15441   0139A8  50E3               	movf	plusw1,w,c
 15442   0139AA  6E0B               	movwf	(btemp+10)^0,c
 15443   0139AC  6A0C               	clrf	(btemp+11)^0,c
 15444   0139AE  0E02               	movlw	low (_spiTransmitBuffer+2)
 15445   0139B0  240B               	addwf	(btemp+10)^0,w,c
 15446   0139B2  6ED9               	movwf	fsr2l,c
 15447   0139B4  0E01               	movlw	high (_spiTransmitBuffer+2)
 15448   0139B6  200C               	addwfc	(btemp+11)^0,w,c
 15449   0139B8  6EDA               	movwf	fsr2h,c
 15450                           
 15451                           ;stkvar	_i @ sp[(-4)+2]
 15452   0139BA  0EFE               	movlw	-2
 15453   0139BC  50E3               	movf	plusw1,w,c
 15454   0139BE  0D08               	mullw	8
 15455   0139C0  CFF3 F00C          	movff	prodl,btemp+11
 15456                           
 15457                           ;stkvar	_txd @ sp[(-4)+-4]
 15458   0139C4  0EF8               	movlw	-8
 15459   0139C6  CFE3 F009          	movff	plusw1,btemp+8
 15460   0139CA  0EF9               	movlw	-7
 15461   0139CC  CFE3 F00A          	movff	plusw1,btemp+9
 15462   0139D0  2A0C               	incf	(btemp+11)^0,f,c
 15463   0139D2  EFEE  F09C         	goto	u2244
 15464   0139D6                     u2245:
 15465   0139D6  90D8               	bcf	status,0,c
 15466   0139D8  320A               	rrcf	(btemp+9)^0,f,c
 15467   0139DA  3209               	rrcf	(btemp+8)^0,f,c
 15468   0139DC                     u2244:
 15469   0139DC  2E0C               	decfsz	(btemp+11)^0,f,c
 15470   0139DE  EFEB  F09C         	goto	u2245
 15471   0139E2  5009               	movf	(btemp+8)^0,w,c
 15472   0139E4  6EDF               	movwf	indf2,c
 15473   0139E6                     
 15474                           ;can/can.c: 346:     }
 15475                           ;stkvar	_i @ sp[(-4)+2]
 15476   0139E6  0EFE               	movlw	-2
 15477   0139E8  2AE3               	incf	plusw1,f,c
 15478   0139EA                     
 15479                           ;stkvar	_i @ sp[(-4)+2]
 15480   0139EA  0EFE               	movlw	-2
 15481   0139EC  CFE3 F001          	movff	plusw1,btemp
 15482   0139F0  0E01               	movlw	1
 15483   0139F2  6401               	cpfsgt	btemp^0,c
 15484   0139F4  EFFE  F09C         	goto	u2251
 15485   0139F8  EF00  F09D         	goto	u2250
 15486   0139FC                     u2251:
 15487   0139FC  EFD3  F09C         	goto	l4597
 15488   013A00                     u2250:
 15489   013A00                     
 15490                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 15491                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15492   013A00  0EFC               	movlw	-4
 15493   013A02  CFE3 FFE6          	movff	plusw1,postinc1
 15494   013A06  CFE3 FFE6          	movff	plusw1,postinc1
 15495   013A0A  0E00               	movlw	low _spiReceiveBuffer
 15496   013A0C  6EE6               	movwf	postinc1,c
 15497   013A0E  0E02               	movlw	high _spiReceiveBuffer
 15498   013A10  6EE6               	movwf	postinc1,c
 15499   013A12  0E00               	movlw	low _spiTransmitBuffer
 15500   013A14  6EE6               	movwf	postinc1,c
 15501   013A16  0E01               	movlw	high _spiTransmitBuffer
 15502   013A18  6EE6               	movwf	postinc1,c
 15503   013A1A  EC1A  F09D         	call	_SpiTransfer	;wreg free
 15504                           
 15505                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15506   013A1E  0EFF               	movlw	-1
 15507   013A20  C001  FFE3         	movff	btemp,plusw1
 15508   013A24                     
 15509                           ;can/can.c: 350:     return spiTransferError;
 15510                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15511   013A24  0EFF               	movlw	-1
 15512   013A26  CFE3 F001          	movff	plusw1,btemp
 15513   013A2A                     
 15514                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 15515   013A2A  0EF8               	movlw	248
 15516   013A2C  26E1               	addwf	fsr1l,f,c
 15517   013A2E  0EFF               	movlw	255
 15518   013A30  22E2               	addwfc	fsr1h,f,c
 15519   013A32  0012               	return		;funcret
 15520   013A34                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 15521                           	callstack 0
 15522                           
 15523 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 15524 ;; Defined at:
 15525 ;;		line 474 in file "can/can.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15528 ;;		 -> config(3), 
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15531 ;; Return value:  Size  Location     Type
 15532 ;;                  1  [STACK] char 
 15533 ;; Registers used:
 15534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 15535 ;; Tracked objects:
 15536 ;;		On entry : 0/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15544 ;;Total ram usage:        0 bytes
 15545 ;; Hardware stack levels used: 1
 15546 ;; Hardware stack levels required when called: 7
 15547 ;; This function calls:
 15548 ;;		Nothing
 15549 ;; This function is called by:
 15550 ;;		_CanInit
 15551 ;; This function uses a reentrant model
 15552 ;;
 15553                           
 15554                           	psect	text64
 15555   0119BA                     __ptext64:
 15556                           	callstack 0
 15557   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 15558                           	callstack 0
 15559                           
 15560                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15561   0119BA  52E6               	movf	postinc1,f,c
 15562   0119BC  52E6               	movf	postinc1,f,c
 15563   0119BE  52E6               	movf	postinc1,f,c
 15564   0119C0  52E6               	movf	postinc1,f,c
 15565   0119C2                     
 15566                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 15567   0119C2  0E8D               	movlw	low _canControlResetValues
 15568   0119C4  6EF6               	movwf	tblptrl,c
 15569   0119C6                     	if	1	;There is more than 1 active tblptr byte
 15570   0119C6  0EFF               	movlw	high _canControlResetValues
 15571   0119C8  6EF7               	movwf	tblptrh,c
 15572   0119CA                     	endif
 15573   0119CA                     	if	1	;There are 3 active tblptr bytes
 15574   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15575   0119CC  6EF8               	movwf	tblptru,c
 15576   0119CE                     	endif
 15577   0119CE  0009               	tblrd		*+
 15578   0119D0  CFF5 F009          	movff	tablat,btemp+8
 15579   0119D4  0009               	tblrd		*+
 15580   0119D6  CFF5 F00A          	movff	tablat,btemp+9
 15581   0119DA  0009               	tblrd		*+
 15582   0119DC  CFF5 F00B          	movff	tablat,btemp+10
 15583   0119E0  0009               	tblrd		*+
 15584   0119E2  CFF5 F00C          	movff	tablat,btemp+11
 15585                           
 15586                           ;stkvar	_ciCon @ sp[(-4)+0]
 15587   0119E6  0EFC               	movlw	-4
 15588   0119E8  C009  FFE3         	movff	btemp+8,plusw1
 15589   0119EC  0EFD               	movlw	-3
 15590   0119EE  C00A  FFE3         	movff	btemp+9,plusw1
 15591   0119F2  0EFE               	movlw	-2
 15592   0119F4  C00B  FFE3         	movff	btemp+10,plusw1
 15593   0119F8  0EFF               	movlw	-1
 15594   0119FA  C00C  FFE3         	movff	btemp+11,plusw1
 15595   0119FE                     
 15596                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 15597                           ;stkvar	_ciCon @ sp[(-4)+0]
 15598   0119FE  50E1               	movf	fsr1l,w,c
 15599   011A00  0FFC               	addlw	-4
 15600   011A02  6ED9               	movwf	fsr2l,c
 15601   011A04  50E2               	movf	fsr1h,w,c
 15602   011A06  6EDA               	movwf	fsr2h,c
 15603   011A08  0EFF               	movlw	255
 15604   011A0A  22DA               	addwfc	fsr2h,f,c
 15605   011A0C  50DF               	movf	223,w,c
 15606   011A0E  0B1F               	andlw	31
 15607   011A10  6E0C               	movwf	(btemp+11)^0,c
 15608                           
 15609                           ;stkvar	_config @ sp[(-4)+-2]
 15610   011A12  0EFA               	movlw	-6
 15611   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 15612   011A18  0EFB               	movlw	-5
 15613   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 15614   011A1E  50DF               	movf	223,w,c
 15615   011A20  180C               	xorwf	(btemp+11)^0,w,c
 15616   011A22  0BE0               	andlw	-32
 15617   011A24  180C               	xorwf	(btemp+11)^0,w,c
 15618   011A26  6EDF               	movwf	223,c
 15619   011A28                     
 15620                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 15621                           ;stkvar	_ciCon @ sp[(-4)+0]
 15622   011A28  50E1               	movf	fsr1l,w,c
 15623   011A2A  0FFC               	addlw	-4
 15624   011A2C  6ED9               	movwf	fsr2l,c
 15625   011A2E  50E2               	movf	fsr1h,w,c
 15626   011A30  6EDA               	movwf	fsr2h,c
 15627   011A32  0EFF               	movlw	255
 15628   011A34  22DA               	addwfc	fsr2h,f,c
 15629                           
 15630                           ;stkvar	_config @ sp[(-4)+-2]
 15631   011A36  0EFA               	movlw	-6
 15632   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 15633   011A3C  0EFB               	movlw	-5
 15634   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 15635   011A42  9AEF               	bcf	indf0,5,c
 15636   011A44  AADF               	btfss	indf2,5,c
 15637   011A46  EF26  F08D         	goto	u805
 15638   011A4A  8AEF               	bsf	indf0,5,c
 15639   011A4C                     u805:
 15640   011A4C                     
 15641                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 15642                           ;stkvar	_ciCon @ sp[(-4)+0]
 15643   011A4C  50E1               	movf	fsr1l,w,c
 15644   011A4E  0FFC               	addlw	-4
 15645   011A50  6ED9               	movwf	fsr2l,c
 15646   011A52  50E2               	movf	fsr1h,w,c
 15647   011A54  6EDA               	movwf	fsr2h,c
 15648   011A56  0EFF               	movlw	255
 15649   011A58  22DA               	addwfc	fsr2h,f,c
 15650                           
 15651                           ;stkvar	_config @ sp[(-4)+-2]
 15652   011A5A  0EFA               	movlw	-6
 15653   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 15654   011A60  0EFB               	movlw	-5
 15655   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 15656   011A66  9CEF               	bcf	indf0,6,c
 15657   011A68  ACDF               	btfss	indf2,6,c
 15658   011A6A  EF38  F08D         	goto	u815
 15659   011A6E  8CEF               	bsf	indf0,6,c
 15660   011A70                     u815:
 15661   011A70                     
 15662                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15663                           ;stkvar	_ciCon @ sp[(-4)+0]
 15664   011A70  0EFD               	movlw	253
 15665   011A72  24E1               	addwf	fsr1l,w,c
 15666   011A74  6ED9               	movwf	fsr2l,c
 15667   011A76  0EFF               	movlw	255
 15668   011A78  20E2               	addwfc	fsr1h,w,c
 15669   011A7A  6EDA               	movwf	fsr2h,c
 15670                           
 15671                           ;stkvar	_config @ sp[(-4)+-2]
 15672   011A7C  0EFA               	movlw	-6
 15673   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15674   011A82  0EFB               	movlw	-5
 15675   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15676   011A88  9EEF               	bcf	indf0,7,c
 15677   011A8A  A0DF               	btfss	indf2,0,c
 15678   011A8C  EF49  F08D         	goto	u825
 15679   011A90  8EEF               	bsf	indf0,7,c
 15680   011A92                     u825:
 15681   011A92                     
 15682                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15683                           ;stkvar	_ciCon @ sp[(-4)+0]
 15684   011A92  0EFD               	movlw	253
 15685   011A94  24E1               	addwf	fsr1l,w,c
 15686   011A96  6ED9               	movwf	fsr2l,c
 15687   011A98  0EFF               	movlw	255
 15688   011A9A  20E2               	addwfc	fsr1h,w,c
 15689   011A9C  6EDA               	movwf	fsr2h,c
 15690   011A9E  30DF               	rrcf	223,w,c
 15691   011AA0  0B03               	andlw	3
 15692   011AA2  6E0C               	movwf	(btemp+11)^0,c
 15693                           
 15694                           ;stkvar	_config @ sp[(-4)+-2]
 15695   011AA4  0EFA               	movlw	-6
 15696   011AA6  CFE3 F009          	movff	plusw1,btemp+8
 15697   011AAA  0EFB               	movlw	-5
 15698   011AAC  CFE3 F00A          	movff	plusw1,btemp+9
 15699   011AB0  0E01               	movlw	1
 15700   011AB2  2409               	addwf	(btemp+8)^0,w,c
 15701   011AB4  6ED9               	movwf	fsr2l,c
 15702   011AB6  0E00               	movlw	0
 15703   011AB8  200A               	addwfc	(btemp+9)^0,w,c
 15704   011ABA  6EDA               	movwf	fsr2h,c
 15705   011ABC  50DF               	movf	223,w,c
 15706   011ABE  180C               	xorwf	(btemp+11)^0,w,c
 15707   011AC0  0BFC               	andlw	-4
 15708   011AC2  180C               	xorwf	(btemp+11)^0,w,c
 15709   011AC4  6EDF               	movwf	223,c
 15710   011AC6                     
 15711                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15712                           ;stkvar	_ciCon @ sp[(-4)+0]
 15713   011AC6  0EFD               	movlw	253
 15714   011AC8  24E1               	addwf	fsr1l,w,c
 15715   011ACA  6ED9               	movwf	fsr2l,c
 15716   011ACC  0EFF               	movlw	255
 15717   011ACE  20E2               	addwfc	fsr1h,w,c
 15718   011AD0  6EDA               	movwf	fsr2h,c
 15719                           
 15720                           ;stkvar	_config @ sp[(-4)+-2]
 15721   011AD2  0EFA               	movlw	-6
 15722   011AD4  CFE3 F00B          	movff	plusw1,btemp+10
 15723   011AD8  0EFB               	movlw	-5
 15724   011ADA  CFE3 F00C          	movff	plusw1,btemp+11
 15725   011ADE  0E01               	movlw	1
 15726   011AE0  240B               	addwf	(btemp+10)^0,w,c
 15727   011AE2  6EE9               	movwf	fsr0l,c
 15728   011AE4  0E00               	movlw	0
 15729   011AE6  200C               	addwfc	(btemp+11)^0,w,c
 15730   011AE8  6EEA               	movwf	fsr0h,c
 15731   011AEA  94EF               	bcf	indf0,2,c
 15732   011AEC  A8DF               	btfss	indf2,4,c
 15733   011AEE  EF7A  F08D         	goto	u835
 15734   011AF2  84EF               	bsf	indf0,2,c
 15735   011AF4                     u835:
 15736   011AF4                     
 15737                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15738                           ;stkvar	_ciCon @ sp[(-4)+0]
 15739   011AF4  0EFE               	movlw	254
 15740   011AF6  24E1               	addwf	fsr1l,w,c
 15741   011AF8  6ED9               	movwf	fsr2l,c
 15742   011AFA  0EFF               	movlw	255
 15743   011AFC  20E2               	addwfc	fsr1h,w,c
 15744   011AFE  6EDA               	movwf	fsr2h,c
 15745                           
 15746                           ;stkvar	_config @ sp[(-4)+-2]
 15747   011B00  0EFA               	movlw	-6
 15748   011B02  CFE3 F00B          	movff	plusw1,btemp+10
 15749   011B06  0EFB               	movlw	-5
 15750   011B08  CFE3 F00C          	movff	plusw1,btemp+11
 15751   011B0C  0E01               	movlw	1
 15752   011B0E  240B               	addwf	(btemp+10)^0,w,c
 15753   011B10  6EE9               	movwf	fsr0l,c
 15754   011B12  0E00               	movlw	0
 15755   011B14  200C               	addwfc	(btemp+11)^0,w,c
 15756   011B16  6EEA               	movwf	fsr0h,c
 15757   011B18  96EF               	bcf	indf0,3,c
 15758   011B1A  A0DF               	btfss	indf2,0,c
 15759   011B1C  EF91  F08D         	goto	u845
 15760   011B20  86EF               	bsf	indf0,3,c
 15761   011B22                     u845:
 15762   011B22                     
 15763                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 15764                           ;stkvar	_ciCon @ sp[(-4)+0]
 15765   011B22  0EFE               	movlw	254
 15766   011B24  24E1               	addwf	fsr1l,w,c
 15767   011B26  6ED9               	movwf	fsr2l,c
 15768   011B28  0EFF               	movlw	255
 15769   011B2A  20E2               	addwfc	fsr1h,w,c
 15770   011B2C  6EDA               	movwf	fsr2h,c
 15771                           
 15772                           ;stkvar	_config @ sp[(-4)+-2]
 15773   011B2E  0EFA               	movlw	-6
 15774   011B30  CFE3 F00B          	movff	plusw1,btemp+10
 15775   011B34  0EFB               	movlw	-5
 15776   011B36  CFE3 F00C          	movff	plusw1,btemp+11
 15777   011B3A  0E01               	movlw	1
 15778   011B3C  240B               	addwf	(btemp+10)^0,w,c
 15779   011B3E  6EE9               	movwf	fsr0l,c
 15780   011B40  0E00               	movlw	0
 15781   011B42  200C               	addwfc	(btemp+11)^0,w,c
 15782   011B44  6EEA               	movwf	fsr0h,c
 15783   011B46  98EF               	bcf	indf0,4,c
 15784   011B48  A2DF               	btfss	indf2,1,c
 15785   011B4A  EFA8  F08D         	goto	u855
 15786   011B4E  88EF               	bsf	indf0,4,c
 15787   011B50                     u855:
 15788   011B50                     
 15789                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 15790                           ;stkvar	_ciCon @ sp[(-4)+0]
 15791   011B50  0EFE               	movlw	254
 15792   011B52  24E1               	addwf	fsr1l,w,c
 15793   011B54  6ED9               	movwf	fsr2l,c
 15794   011B56  0EFF               	movlw	255
 15795   011B58  20E2               	addwfc	fsr1h,w,c
 15796   011B5A  6EDA               	movwf	fsr2h,c
 15797                           
 15798                           ;stkvar	_config @ sp[(-4)+-2]
 15799   011B5C  0EFA               	movlw	-6
 15800   011B5E  CFE3 F00B          	movff	plusw1,btemp+10
 15801   011B62  0EFB               	movlw	-5
 15802   011B64  CFE3 F00C          	movff	plusw1,btemp+11
 15803   011B68  0E01               	movlw	1
 15804   011B6A  240B               	addwf	(btemp+10)^0,w,c
 15805   011B6C  6EE9               	movwf	fsr0l,c
 15806   011B6E  0E00               	movlw	0
 15807   011B70  200C               	addwfc	(btemp+11)^0,w,c
 15808   011B72  6EEA               	movwf	fsr0h,c
 15809   011B74  9AEF               	bcf	indf0,5,c
 15810   011B76  A4DF               	btfss	indf2,2,c
 15811   011B78  EFBF  F08D         	goto	u865
 15812   011B7C  8AEF               	bsf	indf0,5,c
 15813   011B7E                     u865:
 15814   011B7E                     
 15815                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 15816                           ;stkvar	_ciCon @ sp[(-4)+0]
 15817   011B7E  0EFE               	movlw	254
 15818   011B80  24E1               	addwf	fsr1l,w,c
 15819   011B82  6ED9               	movwf	fsr2l,c
 15820   011B84  0EFF               	movlw	255
 15821   011B86  20E2               	addwfc	fsr1h,w,c
 15822   011B88  6EDA               	movwf	fsr2h,c
 15823                           
 15824                           ;stkvar	_config @ sp[(-4)+-2]
 15825   011B8A  0EFA               	movlw	-6
 15826   011B8C  CFE3 F00B          	movff	plusw1,btemp+10
 15827   011B90  0EFB               	movlw	-5
 15828   011B92  CFE3 F00C          	movff	plusw1,btemp+11
 15829   011B96  0E01               	movlw	1
 15830   011B98  240B               	addwf	(btemp+10)^0,w,c
 15831   011B9A  6EE9               	movwf	fsr0l,c
 15832   011B9C  0E00               	movlw	0
 15833   011B9E  200C               	addwfc	(btemp+11)^0,w,c
 15834   011BA0  6EEA               	movwf	fsr0h,c
 15835   011BA2  9CEF               	bcf	indf0,6,c
 15836   011BA4  A6DF               	btfss	indf2,3,c
 15837   011BA6  EFD6  F08D         	goto	u875
 15838   011BAA  8CEF               	bsf	indf0,6,c
 15839   011BAC                     u875:
 15840   011BAC                     
 15841                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 15842                           ;stkvar	_ciCon @ sp[(-4)+0]
 15843   011BAC  0EFE               	movlw	254
 15844   011BAE  24E1               	addwf	fsr1l,w,c
 15845   011BB0  6ED9               	movwf	fsr2l,c
 15846   011BB2  0EFF               	movlw	255
 15847   011BB4  20E2               	addwfc	fsr1h,w,c
 15848   011BB6  6EDA               	movwf	fsr2h,c
 15849                           
 15850                           ;stkvar	_config @ sp[(-4)+-2]
 15851   011BB8  0EFA               	movlw	-6
 15852   011BBA  CFE3 F00B          	movff	plusw1,btemp+10
 15853   011BBE  0EFB               	movlw	-5
 15854   011BC0  CFE3 F00C          	movff	plusw1,btemp+11
 15855   011BC4  0E01               	movlw	1
 15856   011BC6  240B               	addwf	(btemp+10)^0,w,c
 15857   011BC8  6EE9               	movwf	fsr0l,c
 15858   011BCA  0E00               	movlw	0
 15859   011BCC  200C               	addwfc	(btemp+11)^0,w,c
 15860   011BCE  6EEA               	movwf	fsr0h,c
 15861   011BD0  9EEF               	bcf	indf0,7,c
 15862   011BD2  A8DF               	btfss	indf2,4,c
 15863   011BD4  EFED  F08D         	goto	u885
 15864   011BD8  8EEF               	bsf	indf0,7,c
 15865   011BDA                     u885:
 15866   011BDA                     
 15867                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 15868                           ;stkvar	_ciCon @ sp[(-4)+0]
 15869   011BDA  0EFF               	movlw	255
 15870   011BDC  24E1               	addwf	fsr1l,w,c
 15871   011BDE  6ED9               	movwf	fsr2l,c
 15872   011BE0  0EFF               	movlw	255
 15873   011BE2  20E2               	addwfc	fsr1h,w,c
 15874   011BE4  6EDA               	movwf	fsr2h,c
 15875   011BE6  38DF               	swapf	223,w,c
 15876   011BE8  0B0F               	andlw	15
 15877   011BEA  6E0C               	movwf	(btemp+11)^0,c
 15878                           
 15879                           ;stkvar	_config @ sp[(-4)+-2]
 15880   011BEC  0EFA               	movlw	-6
 15881   011BEE  CFE3 F009          	movff	plusw1,btemp+8
 15882   011BF2  0EFB               	movlw	-5
 15883   011BF4  CFE3 F00A          	movff	plusw1,btemp+9
 15884   011BF8  0E02               	movlw	2
 15885   011BFA  2409               	addwf	(btemp+8)^0,w,c
 15886   011BFC  6ED9               	movwf	fsr2l,c
 15887   011BFE  0E00               	movlw	0
 15888   011C00  200A               	addwfc	(btemp+9)^0,w,c
 15889   011C02  6EDA               	movwf	fsr2h,c
 15890   011C04  50DF               	movf	223,w,c
 15891   011C06  180C               	xorwf	(btemp+11)^0,w,c
 15892   011C08  0BF0               	andlw	-16
 15893   011C0A  180C               	xorwf	(btemp+11)^0,w,c
 15894   011C0C  6EDF               	movwf	223,c
 15895   011C0E                     
 15896                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 15897   011C0E  0EFA               	movlw	250
 15898   011C10  26E1               	addwf	fsr1l,f,c
 15899   011C12  0EFF               	movlw	255
 15900   011C14  22E2               	addwfc	fsr1h,f,c
 15901   011C16  0012               	return		;funcret
 15902   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 15903                           	callstack 0
 15904                           
 15905 ;; *************** function _DRV_CANFDSPI_Configure *****************
 15906 ;; Defined at:
 15907 ;;		line 446 in file "can/can.c"
 15908 ;; Parameters:    Size  Location     Type
 15909 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15910 ;;		 -> config(3), 
 15911 ;; Auto vars:     Size  Location     Type
 15912 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15913 ;;  spiTransferE    1    0        char 
 15914 ;; Return value:  Size  Location     Type
 15915 ;;                  1  [STACK] char 
 15916 ;; Registers used:
 15917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 15918 ;; Tracked objects:
 15919 ;;		On entry : 0/0
 15920 ;;		On exit  : 0/0
 15921 ;;		Unchanged: 0/0
 15922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15927 ;;Total ram usage:        0 bytes
 15928 ;; Hardware stack levels used: 1
 15929 ;; Hardware stack levels required when called: 9
 15930 ;; This function calls:
 15931 ;;		_DRV_CANFDSPI_WriteWord
 15932 ;; This function is called by:
 15933 ;;		_CanInit
 15934 ;; This function uses a reentrant model
 15935 ;;
 15936                           
 15937                           	psect	text65
 15938   01173A                     __ptext65:
 15939                           	callstack 0
 15940   01173A                     _DRV_CANFDSPI_Configure:
 15941                           	callstack 0
 15942                           
 15943                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15944   01173A  52E6               	movf	postinc1,f,c
 15945   01173C  52E6               	movf	postinc1,f,c
 15946   01173E  52E6               	movf	postinc1,f,c
 15947   011740  52E6               	movf	postinc1,f,c
 15948   011742                     
 15949                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 15950   011742  0E8D               	movlw	low _canControlResetValues
 15951   011744  6EF6               	movwf	tblptrl,c
 15952   011746                     	if	1	;There is more than 1 active tblptr byte
 15953   011746  0EFF               	movlw	high _canControlResetValues
 15954   011748  6EF7               	movwf	tblptrh,c
 15955   01174A                     	endif
 15956   01174A                     	if	1	;There are 3 active tblptr bytes
 15957   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15958   01174C  6EF8               	movwf	tblptru,c
 15959   01174E                     	endif
 15960   01174E  0009               	tblrd		*+
 15961   011750  CFF5 F009          	movff	tablat,btemp+8
 15962   011754  0009               	tblrd		*+
 15963   011756  CFF5 F00A          	movff	tablat,btemp+9
 15964   01175A  0009               	tblrd		*+
 15965   01175C  CFF5 F00B          	movff	tablat,btemp+10
 15966   011760  0009               	tblrd		*+
 15967   011762  CFF5 F00C          	movff	tablat,btemp+11
 15968                           
 15969                           ;stkvar	_ciCon @ sp[(-4)+0]
 15970   011766  0EFC               	movlw	-4
 15971   011768  C009  FFE3         	movff	btemp+8,plusw1
 15972   01176C  0EFD               	movlw	-3
 15973   01176E  C00A  FFE3         	movff	btemp+9,plusw1
 15974   011772  0EFE               	movlw	-2
 15975   011774  C00B  FFE3         	movff	btemp+10,plusw1
 15976   011778  0EFF               	movlw	-1
 15977   01177A  C00C  FFE3         	movff	btemp+11,plusw1
 15978   01177E                     
 15979                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 15980                           ;stkvar	_config @ sp[(-4)+-2]
 15981   01177E  0EFA               	movlw	-6
 15982   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 15983   011784  0EFB               	movlw	-5
 15984   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 15985   01178A  50DF               	movf	223,w,c
 15986   01178C  0B1F               	andlw	31
 15987   01178E  6E0C               	movwf	(btemp+11)^0,c
 15988                           
 15989                           ;stkvar	_ciCon @ sp[(-4)+0]
 15990   011790  50E1               	movf	fsr1l,w,c
 15991   011792  0FFC               	addlw	-4
 15992   011794  6ED9               	movwf	fsr2l,c
 15993   011796  50E2               	movf	fsr1h,w,c
 15994   011798  6EDA               	movwf	fsr2h,c
 15995   01179A  0EFF               	movlw	255
 15996   01179C  22DA               	addwfc	fsr2h,f,c
 15997   01179E  50DF               	movf	223,w,c
 15998   0117A0  180C               	xorwf	(btemp+11)^0,w,c
 15999   0117A2  0BE0               	andlw	-32
 16000   0117A4  180C               	xorwf	(btemp+11)^0,w,c
 16001   0117A6  6EDF               	movwf	223,c
 16002   0117A8                     
 16003                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16004                           ;stkvar	_config @ sp[(-4)+-2]
 16005   0117A8  0EFA               	movlw	-6
 16006   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16007   0117AE  0EFB               	movlw	-5
 16008   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16009                           
 16010                           ;stkvar	_ciCon @ sp[(-4)+0]
 16011   0117B4  50E1               	movf	fsr1l,w,c
 16012   0117B6  0FFC               	addlw	-4
 16013   0117B8  6EE9               	movwf	fsr0l,c
 16014   0117BA  50E2               	movf	fsr1h,w,c
 16015   0117BC  6EEA               	movwf	fsr0h,c
 16016   0117BE  0EFF               	movlw	255
 16017   0117C0  22EA               	addwfc	fsr0h,f,c
 16018   0117C2  9AEF               	bcf	indf0,5,c
 16019   0117C4  AADF               	btfss	indf2,5,c
 16020   0117C6  EFE6  F08B         	goto	u2375
 16021   0117CA  8AEF               	bsf	indf0,5,c
 16022   0117CC                     u2375:
 16023   0117CC                     
 16024                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16025                           ;stkvar	_config @ sp[(-4)+-2]
 16026   0117CC  0EFA               	movlw	-6
 16027   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16028   0117D2  0EFB               	movlw	-5
 16029   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16030                           
 16031                           ;stkvar	_ciCon @ sp[(-4)+0]
 16032   0117D8  50E1               	movf	fsr1l,w,c
 16033   0117DA  0FFC               	addlw	-4
 16034   0117DC  6EE9               	movwf	fsr0l,c
 16035   0117DE  50E2               	movf	fsr1h,w,c
 16036   0117E0  6EEA               	movwf	fsr0h,c
 16037   0117E2  0EFF               	movlw	255
 16038   0117E4  22EA               	addwfc	fsr0h,f,c
 16039   0117E6  9CEF               	bcf	indf0,6,c
 16040   0117E8  ACDF               	btfss	indf2,6,c
 16041   0117EA  EFF8  F08B         	goto	u2385
 16042   0117EE  8CEF               	bsf	indf0,6,c
 16043   0117F0                     u2385:
 16044   0117F0                     
 16045                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16046                           ;stkvar	_config @ sp[(-4)+-2]
 16047   0117F0  0EFA               	movlw	-6
 16048   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16049   0117F6  0EFB               	movlw	-5
 16050   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16051                           
 16052                           ;stkvar	_ciCon @ sp[(-4)+0]
 16053   0117FC  0EFD               	movlw	253
 16054   0117FE  24E1               	addwf	fsr1l,w,c
 16055   011800  6EE9               	movwf	fsr0l,c
 16056   011802  0EFF               	movlw	255
 16057   011804  20E2               	addwfc	fsr1h,w,c
 16058   011806  6EEA               	movwf	fsr0h,c
 16059   011808  90EF               	bcf	indf0,0,c
 16060   01180A  AEDF               	btfss	indf2,7,c
 16061   01180C  EF09  F08C         	goto	u2395
 16062   011810  80EF               	bsf	indf0,0,c
 16063   011812                     u2395:
 16064   011812                     
 16065                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16066                           ;stkvar	_config @ sp[(-4)+-2]
 16067   011812  0EFA               	movlw	-6
 16068   011814  CFE3 F00B          	movff	plusw1,btemp+10
 16069   011818  0EFB               	movlw	-5
 16070   01181A  CFE3 F00C          	movff	plusw1,btemp+11
 16071   01181E  0E01               	movlw	1
 16072   011820  240B               	addwf	(btemp+10)^0,w,c
 16073   011822  6ED9               	movwf	fsr2l,c
 16074   011824  0E00               	movlw	0
 16075   011826  200C               	addwfc	(btemp+11)^0,w,c
 16076   011828  6EDA               	movwf	fsr2h,c
 16077   01182A  50DF               	movf	223,w,c
 16078   01182C  0B03               	andlw	3
 16079   01182E  6E0C               	movwf	(btemp+11)^0,c
 16080                           
 16081                           ;stkvar	_ciCon @ sp[(-4)+0]
 16082   011830  0EFD               	movlw	253
 16083   011832  24E1               	addwf	fsr1l,w,c
 16084   011834  6ED9               	movwf	fsr2l,c
 16085   011836  0EFF               	movlw	255
 16086   011838  20E2               	addwfc	fsr1h,w,c
 16087   01183A  6EDA               	movwf	fsr2h,c
 16088   01183C  460C               	rlncf	(btemp+11)^0,f,c
 16089   01183E  50DF               	movf	223,w,c
 16090   011840  180C               	xorwf	(btemp+11)^0,w,c
 16091   011842  0BF9               	andlw	-7
 16092   011844  180C               	xorwf	(btemp+11)^0,w,c
 16093   011846  6EDF               	movwf	223,c
 16094   011848                     
 16095                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16096                           ;stkvar	_config @ sp[(-4)+-2]
 16097   011848  0EFA               	movlw	-6
 16098   01184A  CFE3 F00B          	movff	plusw1,btemp+10
 16099   01184E  0EFB               	movlw	-5
 16100   011850  CFE3 F00C          	movff	plusw1,btemp+11
 16101   011854  0E01               	movlw	1
 16102   011856  240B               	addwf	(btemp+10)^0,w,c
 16103   011858  6ED9               	movwf	fsr2l,c
 16104   01185A  0E00               	movlw	0
 16105   01185C  200C               	addwfc	(btemp+11)^0,w,c
 16106   01185E  6EDA               	movwf	fsr2h,c
 16107                           
 16108                           ;stkvar	_ciCon @ sp[(-4)+0]
 16109   011860  0EFD               	movlw	253
 16110   011862  24E1               	addwf	fsr1l,w,c
 16111   011864  6EE9               	movwf	fsr0l,c
 16112   011866  0EFF               	movlw	255
 16113   011868  20E2               	addwfc	fsr1h,w,c
 16114   01186A  6EEA               	movwf	fsr0h,c
 16115   01186C  98EF               	bcf	indf0,4,c
 16116   01186E  A4DF               	btfss	indf2,2,c
 16117   011870  EF3B  F08C         	goto	u2405
 16118   011874  88EF               	bsf	indf0,4,c
 16119   011876                     u2405:
 16120   011876                     
 16121                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16122                           ;stkvar	_config @ sp[(-4)+-2]
 16123   011876  0EFA               	movlw	-6
 16124   011878  CFE3 F00B          	movff	plusw1,btemp+10
 16125   01187C  0EFB               	movlw	-5
 16126   01187E  CFE3 F00C          	movff	plusw1,btemp+11
 16127   011882  0E01               	movlw	1
 16128   011884  240B               	addwf	(btemp+10)^0,w,c
 16129   011886  6ED9               	movwf	fsr2l,c
 16130   011888  0E00               	movlw	0
 16131   01188A  200C               	addwfc	(btemp+11)^0,w,c
 16132   01188C  6EDA               	movwf	fsr2h,c
 16133                           
 16134                           ;stkvar	_ciCon @ sp[(-4)+0]
 16135   01188E  0EFE               	movlw	254
 16136   011890  24E1               	addwf	fsr1l,w,c
 16137   011892  6EE9               	movwf	fsr0l,c
 16138   011894  0EFF               	movlw	255
 16139   011896  20E2               	addwfc	fsr1h,w,c
 16140   011898  6EEA               	movwf	fsr0h,c
 16141   01189A  90EF               	bcf	indf0,0,c
 16142   01189C  A6DF               	btfss	indf2,3,c
 16143   01189E  EF52  F08C         	goto	u2415
 16144   0118A2  80EF               	bsf	indf0,0,c
 16145   0118A4                     u2415:
 16146   0118A4                     
 16147                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16148                           ;stkvar	_config @ sp[(-4)+-2]
 16149   0118A4  0EFA               	movlw	-6
 16150   0118A6  CFE3 F00B          	movff	plusw1,btemp+10
 16151   0118AA  0EFB               	movlw	-5
 16152   0118AC  CFE3 F00C          	movff	plusw1,btemp+11
 16153   0118B0  0E01               	movlw	1
 16154   0118B2  240B               	addwf	(btemp+10)^0,w,c
 16155   0118B4  6ED9               	movwf	fsr2l,c
 16156   0118B6  0E00               	movlw	0
 16157   0118B8  200C               	addwfc	(btemp+11)^0,w,c
 16158   0118BA  6EDA               	movwf	fsr2h,c
 16159                           
 16160                           ;stkvar	_ciCon @ sp[(-4)+0]
 16161   0118BC  0EFE               	movlw	254
 16162   0118BE  24E1               	addwf	fsr1l,w,c
 16163   0118C0  6EE9               	movwf	fsr0l,c
 16164   0118C2  0EFF               	movlw	255
 16165   0118C4  20E2               	addwfc	fsr1h,w,c
 16166   0118C6  6EEA               	movwf	fsr0h,c
 16167   0118C8  92EF               	bcf	indf0,1,c
 16168   0118CA  A8DF               	btfss	indf2,4,c
 16169   0118CC  EF69  F08C         	goto	u2425
 16170   0118D0  82EF               	bsf	indf0,1,c
 16171   0118D2                     u2425:
 16172   0118D2                     
 16173                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16174                           ;stkvar	_config @ sp[(-4)+-2]
 16175   0118D2  0EFA               	movlw	-6
 16176   0118D4  CFE3 F00B          	movff	plusw1,btemp+10
 16177   0118D8  0EFB               	movlw	-5
 16178   0118DA  CFE3 F00C          	movff	plusw1,btemp+11
 16179   0118DE  0E01               	movlw	1
 16180   0118E0  240B               	addwf	(btemp+10)^0,w,c
 16181   0118E2  6ED9               	movwf	fsr2l,c
 16182   0118E4  0E00               	movlw	0
 16183   0118E6  200C               	addwfc	(btemp+11)^0,w,c
 16184   0118E8  6EDA               	movwf	fsr2h,c
 16185                           
 16186                           ;stkvar	_ciCon @ sp[(-4)+0]
 16187   0118EA  0EFE               	movlw	254
 16188   0118EC  24E1               	addwf	fsr1l,w,c
 16189   0118EE  6EE9               	movwf	fsr0l,c
 16190   0118F0  0EFF               	movlw	255
 16191   0118F2  20E2               	addwfc	fsr1h,w,c
 16192   0118F4  6EEA               	movwf	fsr0h,c
 16193   0118F6  94EF               	bcf	indf0,2,c
 16194   0118F8  AADF               	btfss	indf2,5,c
 16195   0118FA  EF80  F08C         	goto	u2435
 16196   0118FE  84EF               	bsf	indf0,2,c
 16197   011900                     u2435:
 16198   011900                     
 16199                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16200                           ;stkvar	_config @ sp[(-4)+-2]
 16201   011900  0EFA               	movlw	-6
 16202   011902  CFE3 F00B          	movff	plusw1,btemp+10
 16203   011906  0EFB               	movlw	-5
 16204   011908  CFE3 F00C          	movff	plusw1,btemp+11
 16205   01190C  0E01               	movlw	1
 16206   01190E  240B               	addwf	(btemp+10)^0,w,c
 16207   011910  6ED9               	movwf	fsr2l,c
 16208   011912  0E00               	movlw	0
 16209   011914  200C               	addwfc	(btemp+11)^0,w,c
 16210   011916  6EDA               	movwf	fsr2h,c
 16211                           
 16212                           ;stkvar	_ciCon @ sp[(-4)+0]
 16213   011918  0EFE               	movlw	254
 16214   01191A  24E1               	addwf	fsr1l,w,c
 16215   01191C  6EE9               	movwf	fsr0l,c
 16216   01191E  0EFF               	movlw	255
 16217   011920  20E2               	addwfc	fsr1h,w,c
 16218   011922  6EEA               	movwf	fsr0h,c
 16219   011924  96EF               	bcf	indf0,3,c
 16220   011926  ACDF               	btfss	indf2,6,c
 16221   011928  EF97  F08C         	goto	u2445
 16222   01192C  86EF               	bsf	indf0,3,c
 16223   01192E                     u2445:
 16224   01192E                     
 16225                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16226                           ;stkvar	_config @ sp[(-4)+-2]
 16227   01192E  0EFA               	movlw	-6
 16228   011930  CFE3 F00B          	movff	plusw1,btemp+10
 16229   011934  0EFB               	movlw	-5
 16230   011936  CFE3 F00C          	movff	plusw1,btemp+11
 16231   01193A  0E01               	movlw	1
 16232   01193C  240B               	addwf	(btemp+10)^0,w,c
 16233   01193E  6ED9               	movwf	fsr2l,c
 16234   011940  0E00               	movlw	0
 16235   011942  200C               	addwfc	(btemp+11)^0,w,c
 16236   011944  6EDA               	movwf	fsr2h,c
 16237                           
 16238                           ;stkvar	_ciCon @ sp[(-4)+0]
 16239   011946  0EFE               	movlw	254
 16240   011948  24E1               	addwf	fsr1l,w,c
 16241   01194A  6EE9               	movwf	fsr0l,c
 16242   01194C  0EFF               	movlw	255
 16243   01194E  20E2               	addwfc	fsr1h,w,c
 16244   011950  6EEA               	movwf	fsr0h,c
 16245   011952  98EF               	bcf	indf0,4,c
 16246   011954  AEDF               	btfss	indf2,7,c
 16247   011956  EFAE  F08C         	goto	u2455
 16248   01195A  88EF               	bsf	indf0,4,c
 16249   01195C                     u2455:
 16250   01195C                     
 16251                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16252                           ;stkvar	_config @ sp[(-4)+-2]
 16253   01195C  0EFA               	movlw	-6
 16254   01195E  CFE3 F00B          	movff	plusw1,btemp+10
 16255   011962  0EFB               	movlw	-5
 16256   011964  CFE3 F00C          	movff	plusw1,btemp+11
 16257   011968  0E02               	movlw	2
 16258   01196A  240B               	addwf	(btemp+10)^0,w,c
 16259   01196C  6ED9               	movwf	fsr2l,c
 16260   01196E  0E00               	movlw	0
 16261   011970  200C               	addwfc	(btemp+11)^0,w,c
 16262   011972  6EDA               	movwf	fsr2h,c
 16263   011974  50DF               	movf	223,w,c
 16264   011976  0B0F               	andlw	15
 16265   011978  6E0C               	movwf	(btemp+11)^0,c
 16266                           
 16267                           ;stkvar	_ciCon @ sp[(-4)+0]
 16268   01197A  0EFF               	movlw	255
 16269   01197C  24E1               	addwf	fsr1l,w,c
 16270   01197E  6ED9               	movwf	fsr2l,c
 16271   011980  0EFF               	movlw	255
 16272   011982  20E2               	addwfc	fsr1h,w,c
 16273   011984  6EDA               	movwf	fsr2h,c
 16274   011986  3A0C               	swapf	(btemp+11)^0,f,c
 16275   011988  50DF               	movf	223,w,c
 16276   01198A  180C               	xorwf	(btemp+11)^0,w,c
 16277   01198C  0B0F               	andlw	-241
 16278   01198E  180C               	xorwf	(btemp+11)^0,w,c
 16279   011990  6EDF               	movwf	223,c
 16280   011992                     
 16281                           ;stkvar	_ciCon @ sp[(-4)+0]
 16282   011992  0EFC               	movlw	-4
 16283   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16284   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16285   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16286   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16287   0119A4  0E00               	movlw	0
 16288   0119A6  6EE6               	movwf	postinc1,c
 16289   0119A8  0E00               	movlw	0
 16290   0119AA  6EE6               	movwf	postinc1,c
 16291   0119AC  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16292   0119B0                     
 16293                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16294   0119B0  0EFA               	movlw	250
 16295   0119B2  26E1               	addwf	fsr1l,f,c
 16296   0119B4  0EFF               	movlw	255
 16297   0119B6  22E2               	addwfc	fsr1h,f,c
 16298   0119B8  0012               	return		;funcret
 16299   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16300                           	callstack 0
 16301                           
 16302 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16303 ;; Defined at:
 16304 ;;		line 2825 in file "can/can.c"
 16305 ;; Parameters:    Size  Location     Type
 16306 ;;  bitTime         1  [STACK] enum E5607
 16307 ;; Auto vars:     Size  Location     Type
 16308 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16309 ;;  spiTransferE    1    0        char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1  [STACK] char 
 16312 ;; Registers used:
 16313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16323 ;;Total ram usage:        0 bytes
 16324 ;; Hardware stack levels used: 1
 16325 ;; Hardware stack levels required when called: 9
 16326 ;; This function calls:
 16327 ;;		_DRV_CANFDSPI_WriteWord
 16328 ;; This function is called by:
 16329 ;;		_CanInit
 16330 ;; This function uses a reentrant model
 16331 ;;
 16332                           
 16333                           	psect	text66
 16334   011C18                     __ptext66:
 16335                           	callstack 0
 16336   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16337                           	callstack 0
 16338                           
 16339                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16340   011C18  52E6               	movf	postinc1,f,c
 16341   011C1A  52E6               	movf	postinc1,f,c
 16342   011C1C  52E6               	movf	postinc1,f,c
 16343   011C1E  52E6               	movf	postinc1,f,c
 16344   011C20                     
 16345                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16346   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16347   011C22  6EF6               	movwf	tblptrl,c
 16348   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16349   011C26  6EF7               	movwf	tblptrh,c
 16350   011C28                     	if	0	;tblptru may be non-zero
 16351   011C28                     	endif
 16352   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16353   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16354   011C2A  6EF8               	movwf	tblptru,c
 16355   011C2C                     	endif
 16356   011C2C  0009               	tblrd		*+
 16357   011C2E  CFF5 F009          	movff	tablat,btemp+8
 16358   011C32  0009               	tblrd		*+
 16359   011C34  CFF5 F00A          	movff	tablat,btemp+9
 16360   011C38  0009               	tblrd		*+
 16361   011C3A  CFF5 F00B          	movff	tablat,btemp+10
 16362   011C3E  0009               	tblrd		*+
 16363   011C40  CFF5 F00C          	movff	tablat,btemp+11
 16364                           
 16365                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16366   011C44  0EFC               	movlw	-4
 16367   011C46  C009  FFE3         	movff	btemp+8,plusw1
 16368   011C4A  0EFD               	movlw	-3
 16369   011C4C  C00A  FFE3         	movff	btemp+9,plusw1
 16370   011C50  0EFE               	movlw	-2
 16371   011C52  C00B  FFE3         	movff	btemp+10,plusw1
 16372   011C56  0EFF               	movlw	-1
 16373   011C58  C00C  FFE3         	movff	btemp+11,plusw1
 16374                           
 16375                           ;can/can.c: 2834:     switch (bitTime) {
 16376   011C5C  EFC8  F08E         	goto	l4715
 16377   011C60                     l665:
 16378   011C60                     l4695:
 16379                           
 16380                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16381                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16382   011C60  0EFF               	movlw	255
 16383   011C62  24E1               	addwf	fsr1l,w,c
 16384   011C64  6ED9               	movwf	fsr2l,c
 16385   011C66  0EFF               	movlw	255
 16386   011C68  20E2               	addwfc	fsr1h,w,c
 16387   011C6A  6EDA               	movwf	fsr2h,c
 16388   011C6C  6ADF               	clrf	indf2,c
 16389                           
 16390                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16391                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16392   011C6E  0EFE               	movlw	254
 16393   011C70  24E1               	addwf	fsr1l,w,c
 16394   011C72  6ED9               	movwf	fsr2l,c
 16395   011C74  0EFF               	movlw	255
 16396   011C76  20E2               	addwfc	fsr1h,w,c
 16397   011C78  6EDA               	movwf	fsr2h,c
 16398   011C7A  0E3E               	movlw	62
 16399   011C7C  6EDF               	movwf	indf2,c
 16400                           
 16401                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16402                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16403   011C7E  0EFD               	movlw	253
 16404   011C80  24E1               	addwf	fsr1l,w,c
 16405   011C82  6ED9               	movwf	fsr2l,c
 16406   011C84  0EFF               	movlw	255
 16407   011C86  20E2               	addwfc	fsr1h,w,c
 16408   011C88  6EDA               	movwf	fsr2h,c
 16409   011C8A  50DF               	movf	223,w,c
 16410   011C8C  0B80               	andlw	-128
 16411   011C8E  090F               	iorlw	15
 16412   011C90  6EDF               	movwf	223,c
 16413   011C92                     
 16414                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16415                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16416   011C92  50E1               	movf	fsr1l,w,c
 16417   011C94  0FFC               	addlw	-4
 16418   011C96  6ED9               	movwf	fsr2l,c
 16419   011C98  50E2               	movf	fsr1h,w,c
 16420   011C9A  6EDA               	movwf	fsr2h,c
 16421   011C9C  0EFF               	movlw	255
 16422   011C9E  22DA               	addwfc	fsr2h,f,c
 16423   011CA0  50DF               	movf	223,w,c
 16424   011CA2  0B80               	andlw	-128
 16425   011CA4  090F               	iorlw	15
 16426   011CA6  6EDF               	movwf	223,c
 16427                           
 16428                           ;can/can.c: 2848:             break;
 16429   011CA8  EF1E  F08F         	goto	l4717
 16430   011CAC                     l674:
 16431   011CAC                     l4699:
 16432                           
 16433                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16434                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16435   011CAC  0EFF               	movlw	255
 16436   011CAE  24E1               	addwf	fsr1l,w,c
 16437   011CB0  6ED9               	movwf	fsr2l,c
 16438   011CB2  0EFF               	movlw	255
 16439   011CB4  20E2               	addwfc	fsr1h,w,c
 16440   011CB6  6EDA               	movwf	fsr2h,c
 16441   011CB8  6ADF               	clrf	indf2,c
 16442                           
 16443                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 16444                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16445   011CBA  0EFE               	movlw	254
 16446   011CBC  24E1               	addwf	fsr1l,w,c
 16447   011CBE  6ED9               	movwf	fsr2l,c
 16448   011CC0  0EFF               	movlw	255
 16449   011CC2  20E2               	addwfc	fsr1h,w,c
 16450   011CC4  6EDA               	movwf	fsr2h,c
 16451   011CC6  0E7E               	movlw	126
 16452   011CC8  6EDF               	movwf	indf2,c
 16453                           
 16454                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 16455                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16456   011CCA  0EFD               	movlw	253
 16457   011CCC  24E1               	addwf	fsr1l,w,c
 16458   011CCE  6ED9               	movwf	fsr2l,c
 16459   011CD0  0EFF               	movlw	255
 16460   011CD2  20E2               	addwfc	fsr1h,w,c
 16461   011CD4  6EDA               	movwf	fsr2h,c
 16462   011CD6  50DF               	movf	223,w,c
 16463   011CD8  0B80               	andlw	-128
 16464   011CDA  091F               	iorlw	31
 16465   011CDC  6EDF               	movwf	223,c
 16466   011CDE                     
 16467                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 16468                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16469   011CDE  50E1               	movf	fsr1l,w,c
 16470   011CE0  0FFC               	addlw	-4
 16471   011CE2  6ED9               	movwf	fsr2l,c
 16472   011CE4  50E2               	movf	fsr1h,w,c
 16473   011CE6  6EDA               	movwf	fsr2h,c
 16474   011CE8  0EFF               	movlw	255
 16475   011CEA  22DA               	addwfc	fsr2h,f,c
 16476   011CEC  50DF               	movf	223,w,c
 16477   011CEE  0B80               	andlw	-128
 16478   011CF0  091F               	iorlw	31
 16479   011CF2  6EDF               	movwf	223,c
 16480                           
 16481                           ;can/can.c: 2862:             break;
 16482   011CF4  EF1E  F08F         	goto	l4717
 16483   011CF8                     l4703:
 16484                           
 16485                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 16486                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16487   011CF8  0EFF               	movlw	255
 16488   011CFA  24E1               	addwf	fsr1l,w,c
 16489   011CFC  6ED9               	movwf	fsr2l,c
 16490   011CFE  0EFF               	movlw	255
 16491   011D00  20E2               	addwfc	fsr1h,w,c
 16492   011D02  6EDA               	movwf	fsr2h,c
 16493   011D04  6ADF               	clrf	indf2,c
 16494                           
 16495                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 16496                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16497   011D06  0EFE               	movlw	254
 16498   011D08  24E1               	addwf	fsr1l,w,c
 16499   011D0A  6ED9               	movwf	fsr2l,c
 16500   011D0C  0EFF               	movlw	255
 16501   011D0E  20E2               	addwfc	fsr1h,w,c
 16502   011D10  6EDA               	movwf	fsr2h,c
 16503   011D12  0E1E               	movlw	30
 16504   011D14  6EDF               	movwf	indf2,c
 16505                           
 16506                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 16507                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16508   011D16  0EFD               	movlw	253
 16509   011D18  24E1               	addwf	fsr1l,w,c
 16510   011D1A  6ED9               	movwf	fsr2l,c
 16511   011D1C  0EFF               	movlw	255
 16512   011D1E  20E2               	addwfc	fsr1h,w,c
 16513   011D20  6EDA               	movwf	fsr2h,c
 16514   011D22  50DF               	movf	223,w,c
 16515   011D24  0B80               	andlw	-128
 16516   011D26  0907               	iorlw	7
 16517   011D28  6EDF               	movwf	223,c
 16518   011D2A                     
 16519                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 16520                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16521   011D2A  50E1               	movf	fsr1l,w,c
 16522   011D2C  0FFC               	addlw	-4
 16523   011D2E  6ED9               	movwf	fsr2l,c
 16524   011D30  50E2               	movf	fsr1h,w,c
 16525   011D32  6EDA               	movwf	fsr2h,c
 16526   011D34  0EFF               	movlw	255
 16527   011D36  22DA               	addwfc	fsr2h,f,c
 16528   011D38  50DF               	movf	223,w,c
 16529   011D3A  0B80               	andlw	-128
 16530   011D3C  0907               	iorlw	7
 16531   011D3E  6EDF               	movwf	223,c
 16532                           
 16533                           ;can/can.c: 2870:             break;
 16534   011D40  EF1E  F08F         	goto	l4717
 16535   011D44                     l4707:
 16536                           
 16537                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 16538                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16539   011D44  0EFF               	movlw	255
 16540   011D46  24E1               	addwf	fsr1l,w,c
 16541   011D48  6ED9               	movwf	fsr2l,c
 16542   011D4A  0EFF               	movlw	255
 16543   011D4C  20E2               	addwfc	fsr1h,w,c
 16544   011D4E  6EDA               	movwf	fsr2h,c
 16545   011D50  6ADF               	clrf	indf2,c
 16546                           
 16547                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 16548                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16549   011D52  0EFE               	movlw	254
 16550   011D54  24E1               	addwf	fsr1l,w,c
 16551   011D56  6ED9               	movwf	fsr2l,c
 16552   011D58  0EFF               	movlw	255
 16553   011D5A  20E2               	addwfc	fsr1h,w,c
 16554   011D5C  6EDA               	movwf	fsr2h,c
 16555   011D5E  0EFE               	movlw	254
 16556   011D60  6EDF               	movwf	indf2,c
 16557                           
 16558                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 16559                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16560   011D62  0EFD               	movlw	253
 16561   011D64  24E1               	addwf	fsr1l,w,c
 16562   011D66  6ED9               	movwf	fsr2l,c
 16563   011D68  0EFF               	movlw	255
 16564   011D6A  20E2               	addwfc	fsr1h,w,c
 16565   011D6C  6EDA               	movwf	fsr2h,c
 16566   011D6E  50DF               	movf	223,w,c
 16567   011D70  0B80               	andlw	-128
 16568   011D72  093F               	iorlw	63
 16569   011D74  6EDF               	movwf	223,c
 16570   011D76                     
 16571                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 16572                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16573   011D76  50E1               	movf	fsr1l,w,c
 16574   011D78  0FFC               	addlw	-4
 16575   011D7A  6ED9               	movwf	fsr2l,c
 16576   011D7C  50E2               	movf	fsr1h,w,c
 16577   011D7E  6EDA               	movwf	fsr2h,c
 16578   011D80  0EFF               	movlw	255
 16579   011D82  22DA               	addwfc	fsr2h,f,c
 16580   011D84  50DF               	movf	223,w,c
 16581   011D86  0B80               	andlw	-128
 16582   011D88  093F               	iorlw	63
 16583   011D8A  6EDF               	movwf	223,c
 16584                           
 16585                           ;can/can.c: 2877:             break;
 16586   011D8C  EF1E  F08F         	goto	l4717
 16587   011D90                     l4715:
 16588                           
 16589                           ;stkvar	_bitTime @ sp[(-4)+-1]
 16590   011D90  0EFB               	movlw	-5
 16591   011D92  50E3               	movf	plusw1,w,c
 16592   011D94  6E0B               	movwf	(btemp+10)^0,c
 16593   011D96  6A0C               	clrf	(btemp+11)^0,c
 16594                           
 16595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16596                           ; Switch size 1, requested type "simple"
 16597                           ; Number of cases is 1, Range of values is 0 to 0
 16598                           ; switch strategies available:
 16599                           ; Name         Instructions Cycles
 16600                           ; simple_byte            4     3 (average)
 16601                           ;	Chosen strategy is simple_byte
 16602   011D98  500C               	movf	(btemp+11)^0,w,c
 16603   011D9A  0A00               	xorlw	0	; case 0
 16604   011D9C  B4D8               	btfsc	status,2,c
 16605   011D9E  EFD3  F08E         	goto	l5583
 16606   011DA2  EF2D  F08F         	goto	l682
 16607   011DA6                     l5583:
 16608                           
 16609                           ; Switch size 1, requested type "simple"
 16610                           ; Number of cases is 18, Range of values is 0 to 17
 16611                           ; switch strategies available:
 16612                           ; Name         Instructions Cycles
 16613                           ; simple_byte           55    28 (average)
 16614                           ;	Chosen strategy is simple_byte
 16615   011DA6  500B               	movf	(btemp+10)^0,w,c
 16616   011DA8  0A00               	xorlw	0	; case 0
 16617   011DAA  B4D8               	btfsc	status,2,c
 16618   011DAC  EF30  F08E         	goto	l665
 16619   011DB0  0A01               	xorlw	1	; case 1
 16620   011DB2  B4D8               	btfsc	status,2,c
 16621   011DB4  EF30  F08E         	goto	l4695
 16622   011DB8  0A03               	xorlw	3	; case 2
 16623   011DBA  B4D8               	btfsc	status,2,c
 16624   011DBC  EF30  F08E         	goto	l4695
 16625   011DC0  0A01               	xorlw	1	; case 3
 16626   011DC2  B4D8               	btfsc	status,2,c
 16627   011DC4  EF30  F08E         	goto	l4695
 16628   011DC8  0A07               	xorlw	7	; case 4
 16629   011DCA  B4D8               	btfsc	status,2,c
 16630   011DCC  EF30  F08E         	goto	l4695
 16631   011DD0  0A01               	xorlw	1	; case 5
 16632   011DD2  B4D8               	btfsc	status,2,c
 16633   011DD4  EF30  F08E         	goto	l4695
 16634   011DD8  0A03               	xorlw	3	; case 6
 16635   011DDA  B4D8               	btfsc	status,2,c
 16636   011DDC  EF30  F08E         	goto	l4695
 16637   011DE0  0A01               	xorlw	1	; case 7
 16638   011DE2  B4D8               	btfsc	status,2,c
 16639   011DE4  EF30  F08E         	goto	l4695
 16640   011DE8  0A0F               	xorlw	15	; case 8
 16641   011DEA  B4D8               	btfsc	status,2,c
 16642   011DEC  EF56  F08E         	goto	l674
 16643   011DF0  0A01               	xorlw	1	; case 9
 16644   011DF2  B4D8               	btfsc	status,2,c
 16645   011DF4  EF56  F08E         	goto	l4699
 16646   011DF8  0A03               	xorlw	3	; case 10
 16647   011DFA  B4D8               	btfsc	status,2,c
 16648   011DFC  EF56  F08E         	goto	l4699
 16649   011E00  0A01               	xorlw	1	; case 11
 16650   011E02  B4D8               	btfsc	status,2,c
 16651   011E04  EF56  F08E         	goto	l4699
 16652   011E08  0A07               	xorlw	7	; case 12
 16653   011E0A  B4D8               	btfsc	status,2,c
 16654   011E0C  EF56  F08E         	goto	l4699
 16655   011E10  0A01               	xorlw	1	; case 13
 16656   011E12  B4D8               	btfsc	status,2,c
 16657   011E14  EF56  F08E         	goto	l4699
 16658   011E18  0A03               	xorlw	3	; case 14
 16659   011E1A  B4D8               	btfsc	status,2,c
 16660   011E1C  EF56  F08E         	goto	l4699
 16661   011E20  0A01               	xorlw	1	; case 15
 16662   011E22  B4D8               	btfsc	status,2,c
 16663   011E24  EF7C  F08E         	goto	l4703
 16664   011E28  0A1F               	xorlw	31	; case 16
 16665   011E2A  B4D8               	btfsc	status,2,c
 16666   011E2C  EF7C  F08E         	goto	l4703
 16667   011E30  0A01               	xorlw	1	; case 17
 16668   011E32  B4D8               	btfsc	status,2,c
 16669   011E34  EFA2  F08E         	goto	l4707
 16670   011E38  EF2D  F08F         	goto	l682
 16671   011E3C                     l4717:
 16672                           
 16673                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16674   011E3C  0EFC               	movlw	-4
 16675   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16676   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16677   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16678   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16679   011E4E  0E04               	movlw	4
 16680   011E50  6EE6               	movwf	postinc1,c
 16681   011E52  0E00               	movlw	0
 16682   011E54  6EE6               	movwf	postinc1,c
 16683   011E56  EC15  F09B         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16684   011E5A                     l682:
 16685                           
 16686                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16687   011E5A  0EFB               	movlw	251
 16688   011E5C  26E1               	addwf	fsr1l,f,c
 16689   011E5E  0EFF               	movlw	255
 16690   011E60  22E2               	addwfc	fsr1h,f,c
 16691   011E62  0012               	return		;funcret
 16692   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16693                           	callstack 0
 16694                           
 16695 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16696 ;; Defined at:
 16697 ;;		line 310 in file "can/can.c"
 16698 ;; Parameters:    Size  Location     Type
 16699 ;;  address         2  [STACK] unsigned short 
 16700 ;;  txd             4  [STACK] unsigned long 
 16701 ;; Auto vars:     Size  Location     Type
 16702 ;;  spiTransferS    2  [STACK] unsigned short 
 16703 ;;  i               1  [STACK] unsigned char 
 16704 ;;  spiTransferE    1  [STACK] char 
 16705 ;; Return value:  Size  Location     Type
 16706 ;;                  1  [STACK] char 
 16707 ;; Registers used:
 16708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16709 ;; Tracked objects:
 16710 ;;		On entry : 0/0
 16711 ;;		On exit  : 0/0
 16712 ;;		Unchanged: 0/0
 16713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;Total ram usage:        0 bytes
 16719 ;; Hardware stack levels used: 1
 16720 ;; Hardware stack levels required when called: 8
 16721 ;; This function calls:
 16722 ;;		_SpiTransfer
 16723 ;; This function is called by:
 16724 ;;		_DRV_CANFDSPI_Configure
 16725 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16726 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16727 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16728 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16729 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16730 ;;		_DRV_CANFDSPI_TefConfigure
 16731 ;;		_DRV_CANFDSPI_TimeStampSet
 16732 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16733 ;; This function uses a reentrant model
 16734 ;;
 16735                           
 16736                           	psect	text67
 16737   01362A                     __ptext67:
 16738                           	callstack 0
 16739   01362A                     _DRV_CANFDSPI_WriteWord:
 16740                           	callstack 0
 16741                           
 16742                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16743   01362A  52E6               	movf	postinc1,f,c
 16744   01362C  52E6               	movf	postinc1,f,c
 16745   01362E  52E6               	movf	postinc1,f,c
 16746   013630  52E6               	movf	postinc1,f,c
 16747   013632                     
 16748                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 16749   013632  0E06               	movlw	6
 16750   013634  6E0B               	movwf	(btemp+10)^0,c
 16751   013636  0E00               	movlw	0
 16752   013638  6E0C               	movwf	(btemp+11)^0,c
 16753                           
 16754                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16755   01363A  0EFC               	movlw	-4
 16756   01363C  C00B  FFE3         	movff	btemp+10,plusw1
 16757   013640  0EFD               	movlw	-3
 16758   013642  C00C  FFE3         	movff	btemp+11,plusw1
 16759   013646                     
 16760                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 16761                           ;stkvar	_address @ sp[(-4)+-2]
 16762   013646  0EFB               	movlw	251
 16763   013648  24E1               	addwf	fsr1l,w,c
 16764   01364A  6ED9               	movwf	fsr2l,c
 16765   01364C  0EFF               	movlw	255
 16766   01364E  20E2               	addwfc	fsr1h,w,c
 16767   013650  6EDA               	movwf	fsr2h,c
 16768   013652  50DF               	movf	indf2,w,c
 16769   013654  0B0F               	andlw	15
 16770   013656  0F20               	addlw	32
 16771   013658  0101               	movlb	1	; () banked
 16772   01365A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 16773   01365C                     
 16774                           ; BSR set to: 1
 16775                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 16776                           ;stkvar	_address @ sp[(-4)+-2]
 16777   01365C  0EFA               	movlw	-6
 16778   01365E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 16779   013662                     
 16780                           ; BSR set to: 1
 16781                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 16782                           ;stkvar	_i @ sp[(-4)+2]
 16783   013662  0EFE               	movlw	-2
 16784   013664  6AE3               	clrf	plusw1,c
 16785   013666                     l4571:
 16786                           
 16787                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 16788                           ;stkvar	_i @ sp[(-4)+2]
 16789   013666  0EFE               	movlw	-2
 16790   013668  50E3               	movf	plusw1,w,c
 16791   01366A  6E0B               	movwf	(btemp+10)^0,c
 16792   01366C  6A0C               	clrf	(btemp+11)^0,c
 16793   01366E  0E02               	movlw	low (_spiTransmitBuffer+2)
 16794   013670  240B               	addwf	(btemp+10)^0,w,c
 16795   013672  6ED9               	movwf	fsr2l,c
 16796   013674  0E01               	movlw	high (_spiTransmitBuffer+2)
 16797   013676  200C               	addwfc	(btemp+11)^0,w,c
 16798   013678  6EDA               	movwf	fsr2h,c
 16799                           
 16800                           ;stkvar	_txd @ sp[(-4)+-6]
 16801   01367A  0EF6               	movlw	-10
 16802   01367C  CFE3 F009          	movff	plusw1,btemp+8
 16803   013680  0EF7               	movlw	-9
 16804   013682  CFE3 F00A          	movff	plusw1,btemp+9
 16805   013686  0EF8               	movlw	-8
 16806   013688  CFE3 F00B          	movff	plusw1,btemp+10
 16807   01368C  0EF9               	movlw	-7
 16808   01368E  CFE3 F00C          	movff	plusw1,btemp+11
 16809                           
 16810                           ;stkvar	_i @ sp[(-4)+2]
 16811   013692  0EFE               	movlw	-2
 16812   013694  50E3               	movf	plusw1,w,c
 16813   013696  0D08               	mullw	8
 16814   013698  50F3               	movf	243,w,c
 16815   01369A  2AE8               	incf	wreg,f,c
 16816   01369C  EF55  F09B         	goto	u2220
 16817   0136A0                     u2225:
 16818   0136A0  90D8               	bcf	status,0,c
 16819   0136A2  320C               	rrcf	(btemp+11)^0,f,c
 16820   0136A4  320B               	rrcf	(btemp+10)^0,f,c
 16821   0136A6  320A               	rrcf	(btemp+9)^0,f,c
 16822   0136A8  3209               	rrcf	(btemp+8)^0,f,c
 16823   0136AA                     u2220:
 16824   0136AA  2EE8               	decfsz	wreg,f,c
 16825   0136AC  EF50  F09B         	goto	u2225
 16826   0136B0  5009               	movf	(btemp+8)^0,w,c
 16827   0136B2  6EDF               	movwf	indf2,c
 16828   0136B4                     
 16829                           ;can/can.c: 324:     }
 16830                           ;stkvar	_i @ sp[(-4)+2]
 16831   0136B4  0EFE               	movlw	-2
 16832   0136B6  2AE3               	incf	plusw1,f,c
 16833   0136B8                     
 16834                           ;stkvar	_i @ sp[(-4)+2]
 16835   0136B8  0EFE               	movlw	-2
 16836   0136BA  CFE3 F001          	movff	plusw1,btemp
 16837   0136BE  0E03               	movlw	3
 16838   0136C0  6401               	cpfsgt	btemp^0,c
 16839   0136C2  EF65  F09B         	goto	u2231
 16840   0136C6  EF67  F09B         	goto	u2230
 16841   0136CA                     u2231:
 16842   0136CA  EF33  F09B         	goto	l4571
 16843   0136CE                     u2230:
 16844   0136CE                     
 16845                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16846                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16847   0136CE  0EFC               	movlw	-4
 16848   0136D0  CFE3 FFE6          	movff	plusw1,postinc1
 16849   0136D4  CFE3 FFE6          	movff	plusw1,postinc1
 16850   0136D8  0E00               	movlw	low _spiReceiveBuffer
 16851   0136DA  6EE6               	movwf	postinc1,c
 16852   0136DC  0E02               	movlw	high _spiReceiveBuffer
 16853   0136DE  6EE6               	movwf	postinc1,c
 16854   0136E0  0E00               	movlw	low _spiTransmitBuffer
 16855   0136E2  6EE6               	movwf	postinc1,c
 16856   0136E4  0E01               	movlw	high _spiTransmitBuffer
 16857   0136E6  6EE6               	movwf	postinc1,c
 16858   0136E8  EC1A  F09D         	call	_SpiTransfer	;wreg free
 16859                           
 16860                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16861   0136EC  0EFF               	movlw	-1
 16862   0136EE  C001  FFE3         	movff	btemp,plusw1
 16863   0136F2                     
 16864                           ;can/can.c: 328:     return spiTransferError;
 16865                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16866   0136F2  0EFF               	movlw	-1
 16867   0136F4  CFE3 F001          	movff	plusw1,btemp
 16868   0136F8                     
 16869                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 16870   0136F8  0EF6               	movlw	246
 16871   0136FA  26E1               	addwf	fsr1l,f,c
 16872   0136FC  0EFF               	movlw	255
 16873   0136FE  22E2               	addwfc	fsr1h,f,c
 16874   013700  0012               	return		;funcret
 16875   013702                     __end_of_DRV_CANFDSPI_WriteWord:
 16876                           	callstack 0
 16877                           
 16878 ;; *************** function _SpiTransfer *****************
 16879 ;; Defined at:
 16880 ;;		line 132 in file "can/can.c"
 16881 ;; Parameters:    Size  Location     Type
 16882 ;;  txPtr           2  [STACK] PTR unsigned char 
 16883 ;;		 -> spiTransmitBuffer(200), 
 16884 ;;  rxPtr           2  [STACK] PTR unsigned char 
 16885 ;;		 -> spiReceiveBuffer(200), 
 16886 ;;  size            2  [STACK] unsigned short 
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;  dummy           1  [STACK] volatile unsigned char 
 16889 ;; Return value:  Size  Location     Type
 16890 ;;                  1  [STACK] char 
 16891 ;; Registers used:
 16892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/1
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;Total ram usage:        0 bytes
 16903 ;; Hardware stack levels used: 1
 16904 ;; Hardware stack levels required when called: 7
 16905 ;; This function calls:
 16906 ;;		Nothing
 16907 ;; This function is called by:
 16908 ;;		_DRV_CANFDSPI_Reset
 16909 ;;		_DRV_CANFDSPI_ReadByte
 16910 ;;		_DRV_CANFDSPI_WriteByte
 16911 ;;		_DRV_CANFDSPI_WriteWord
 16912 ;;		_DRV_CANFDSPI_WriteHalfWord
 16913 ;;		_DRV_CANFDSPI_ReadByteArray
 16914 ;;		_DRV_CANFDSPI_WriteByteArray
 16915 ;;		_DRV_CANFDSPI_ReadWordArray
 16916 ;; This function uses a reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text68
 16920   013A34                     __ptext68:
 16921                           	callstack 0
 16922   013A34                     _SpiTransfer:
 16923                           	callstack 0
 16924                           
 16925                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16926   013A34  52E6               	movf	postinc1,f,c
 16927   013A36                     
 16928                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 16929   013A36  988F               	bcf	143,4,c	;volatile
 16930                           
 16931                           ;can/can.c: 136:   while(size > 0)
 16932   013A38  EF67  F09D         	goto	l3937
 16933   013A3C                     l145:
 16934                           
 16935                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 16936   013A3C  9064               	bcf	100,0,c	;volatile
 16937   013A3E                     
 16938                           ;can/can.c: 139:     dummy = SSP2BUF;
 16939                           ;stkvar	_dummy @ sp[(-1)+0]
 16940   013A3E  0EFF               	movlw	-1
 16941   013A40  CF66 FFE3          	movff	3942,plusw1	;volatile
 16942   013A44                     
 16943                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 16944                           ;stkvar	_txPtr @ sp[(-1)+-2]
 16945   013A44  0EFD               	movlw	-3
 16946   013A46  CFE3 FFD9          	movff	plusw1,fsr2l
 16947   013A4A  0EFE               	movlw	-2
 16948   013A4C  CFE3 FFDA          	movff	plusw1,fsr2h
 16949   013A50  50DF               	movf	indf2,w,c
 16950   013A52  6E66               	movwf	102,c	;volatile
 16951   013A54                     l146:
 16952   013A54  A064               	btfss	100,0,c	;volatile
 16953   013A56  EF2F  F09D         	goto	u1581
 16954   013A5A  EF31  F09D         	goto	u1580
 16955   013A5E                     u1581:
 16956   013A5E  EF2A  F09D         	goto	l146
 16957   013A62                     u1580:
 16958   013A62                     
 16959                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 16960                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 16961   013A62  0EFB               	movlw	-5
 16962   013A64  CFE3 FFD9          	movff	plusw1,fsr2l
 16963   013A68  0EFC               	movlw	-4
 16964   013A6A  CFE3 FFDA          	movff	plusw1,fsr2h
 16965   013A6E  CF66 FFDF          	movff	3942,indf2	;volatile
 16966   013A72                     
 16967                           ;can/can.c: 143:     txPtr++;
 16968                           ;stkvar	_txPtr @ sp[(-1)+-2]
 16969   013A72  0EFD               	movlw	-3
 16970   013A74  50E3               	movf	plusw1,w,c
 16971   013A76  0F01               	addlw	1
 16972   013A78  6E01               	movwf	btemp^0,c
 16973   013A7A  0EFD               	movlw	-3
 16974   013A7C  C001  FFE3         	movff	btemp,plusw1
 16975   013A80  6A01               	clrf	btemp^0,c
 16976   013A82  0EFE               	movlw	-2
 16977   013A84  50E3               	movf	plusw1,w,c
 16978   013A86  2001               	addwfc	btemp^0,w,c
 16979   013A88  6E01               	movwf	btemp^0,c
 16980   013A8A  0EFE               	movlw	-2
 16981   013A8C  C001  FFE3         	movff	btemp,plusw1
 16982   013A90                     
 16983                           ;can/can.c: 144:     rxPtr++;
 16984                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 16985   013A90  0EFB               	movlw	-5
 16986   013A92  50E3               	movf	plusw1,w,c
 16987   013A94  0F01               	addlw	1
 16988   013A96  6E01               	movwf	btemp^0,c
 16989   013A98  0EFB               	movlw	-5
 16990   013A9A  C001  FFE3         	movff	btemp,plusw1
 16991   013A9E  6A01               	clrf	btemp^0,c
 16992   013AA0  0EFC               	movlw	-4
 16993   013AA2  50E3               	movf	plusw1,w,c
 16994   013AA4  2001               	addwfc	btemp^0,w,c
 16995   013AA6  6E01               	movwf	btemp^0,c
 16996   013AA8  0EFC               	movlw	-4
 16997   013AAA  C001  FFE3         	movff	btemp,plusw1
 16998   013AAE                     
 16999                           ;can/can.c: 145:     size--;
 17000                           ;stkvar	_size @ sp[(-1)+-6]
 17001   013AAE  0EF9               	movlw	-7
 17002   013AB0  CFE3 F001          	movff	plusw1,btemp
 17003   013AB4  0E01               	movlw	1
 17004   013AB6  5E01               	subwf	btemp^0,f,c
 17005   013AB8  0EF9               	movlw	-7
 17006   013ABA  C001  FFE3         	movff	btemp,plusw1
 17007   013ABE  0EFA               	movlw	-6
 17008   013AC0  CFE3 F001          	movff	plusw1,btemp
 17009   013AC4  0E00               	movlw	0
 17010   013AC6  5A01               	subwfb	btemp^0,f,c
 17011   013AC8  0EFA               	movlw	-6
 17012   013ACA  C001  FFE3         	movff	btemp,plusw1
 17013   013ACE                     l3937:
 17014                           
 17015                           ;can/can.c: 136:   while(size > 0)
 17016                           ;stkvar	_size @ sp[(-1)+-6]
 17017   013ACE  0EF9               	movlw	-7
 17018   013AD0  CFE3 F001          	movff	plusw1,btemp
 17019   013AD4  0EFA               	movlw	-6
 17020   013AD6  50E3               	movf	plusw1,w,c
 17021   013AD8  1001               	iorwf	btemp^0,w,c
 17022   013ADA  A4D8               	btfss	status,2,c
 17023   013ADC  EF72  F09D         	goto	u1591
 17024   013AE0  EF74  F09D         	goto	u1590
 17025   013AE4                     u1591:
 17026   013AE4  EF1E  F09D         	goto	l145
 17027   013AE8                     u1590:
 17028   013AE8                     
 17029                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17030   013AE8  888F               	bsf	143,4,c	;volatile
 17031   013AEA                     
 17032                           ;can/can.c: 148:   return 0;
 17033   013AEA  0E00               	movlw	0
 17034   013AEC  6E01               	movwf	btemp^0,c
 17035   013AEE                     
 17036                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17037   013AEE  0EF9               	movlw	249
 17038   013AF0  26E1               	addwf	fsr1l,f,c
 17039   013AF2  0EFF               	movlw	255
 17040   013AF4  22E2               	addwfc	fsr1h,f,c
 17041   013AF6  0012               	return		;funcret
 17042   013AF8                     __end_of_SpiTransfer:
 17043                           	callstack 0
 17044                           
 17045 ;; *************** function _INTERRUPT_InterruptManager *****************
 17046 ;; Defined at:
 17047 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17048 ;; Parameters:    Size  Location     Type
 17049 ;;		None
 17050 ;; Auto vars:     Size  Location     Type
 17051 ;;		None
 17052 ;; Return value:  Size  Location     Type
 17053 ;;                  1    wreg      void 
 17054 ;; Registers used:
 17055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17056 ;; Tracked objects:
 17057 ;;		On entry : 0/0
 17058 ;;		On exit  : 0/0
 17059 ;;		Unchanged: 0/0
 17060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17063 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17064 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17065 ;;Total ram usage:       16 bytes
 17066 ;; Hardware stack levels used: 1
 17067 ;; Hardware stack levels required when called: 6
 17068 ;; This function calls:
 17069 ;;		_TMR0_ISR
 17070 ;; This function is called by:
 17071 ;;		Interrupt level 2
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           	psect	intcode
 17076   000008                     __pintcode:
 17077                           	callstack 0
 17078   000008                     _INTERRUPT_InterruptManager:
 17079                           	callstack 16
 17080                           
 17081                           ;incstack = 0
 17082   000008  CFFA F040          	movff	pclath,??_INTERRUPT_InterruptManager
 17083   00000C  CFFB F041          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17084   000010  CFE9 F042          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17085   000014  CFEA F043          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17086   000018  CFE1 F044          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17087   00001C  CFE2 F045          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17088   000020  CFD9 F046          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17089   000024  CFDA F047          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17090   000028  CFF3 F048          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17091   00002C  CFF4 F049          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17092   000030  C001  F04A         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17093   000034  C002  F04B         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17094   000038  C009  F04C         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17095   00003C  C00A  F04D         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17096   000040  C00B  F04E         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17097   000044  C00C  F04F         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17098   000048  EE19  F031         	lfsr	1,___inthi_sp
 17099   00004C                     
 17100                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17101   00004C  AAF2               	btfss	242,5,c	;volatile
 17102   00004E  EF2B  F000         	goto	i2u303_41
 17103   000052  EF2D  F000         	goto	i2u303_40
 17104   000056                     i2u303_41:
 17105   000056  EF36  F000         	goto	i2l1039
 17106   00005A                     i2u303_40:
 17107   00005A  A4F2               	btfss	242,2,c	;volatile
 17108   00005C  EF32  F000         	goto	i2u304_41
 17109   000060  EF34  F000         	goto	i2u304_40
 17110   000064                     i2u304_41:
 17111   000064  EF36  F000         	goto	i2l1039
 17112   000068                     i2u304_40:
 17113   000068                     
 17114                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17115   000068  ECF0  F0A3         	call	_TMR0_ISR	;wreg free
 17116   00006C                     i2l1039:
 17117   00006C  C04F  F00C         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17118   000070  C04E  F00B         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17119   000074  C04D  F00A         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17120   000078  C04C  F009         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17121   00007C  C04B  F002         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17122   000080  C04A  F001         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17123   000084  C049  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17124   000088  C048  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17125   00008C  C047  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17126   000090  C046  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17127   000094  C045  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17128   000098  C044  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17129   00009C  C043  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17130   0000A0  C042  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17131   0000A4  C041  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17132   0000A8  C040  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17133   0000AC  0011               	retfie		f
 17134   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17135                           	callstack 0
 17136                           
 17137 ;; *************** function _TMR0_ISR *****************
 17138 ;; Defined at:
 17139 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17140 ;; Parameters:    Size  Location     Type
 17141 ;;		None
 17142 ;; Auto vars:     Size  Location     Type
 17143 ;;		None
 17144 ;; Return value:  Size  Location     Type
 17145 ;;                  1  [STACK] void 
 17146 ;; Registers used:
 17147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17148 ;; Tracked objects:
 17149 ;;		On entry : 0/0
 17150 ;;		On exit  : 0/0
 17151 ;;		Unchanged: 0/0
 17152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;Total ram usage:        0 bytes
 17158 ;; Hardware stack levels used: 1
 17159 ;; Hardware stack levels required when called: 5
 17160 ;; This function calls:
 17161 ;;		_TMR0_CallBack
 17162 ;; This function is called by:
 17163 ;;		_INTERRUPT_InterruptManager
 17164 ;; This function uses a reentrant model
 17165 ;;
 17166                           
 17167                           	psect	text70
 17168   0147E0                     __ptext70:
 17169                           	callstack 0
 17170   0147E0                     _TMR0_ISR:
 17171                           	callstack 16
 17172   0147E0                     
 17173                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17174   0147E0  94F2               	bcf	242,2,c	;volatile
 17175                           
 17176                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17177   0147E2  C038  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17178                           
 17179                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17180   0147E6  C037  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17181   0147EA                     
 17182                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17183   0147EA  0E01               	movlw	1
 17184   0147EC  0100               	movlb	0	; () banked
 17185   0147EE  6F76               	movwf	(_carState+22)& (0+255),b
 17186   0147F0                     
 17187                           ; BSR set to: 0
 17188                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17189   0147F0  4A35               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17190   0147F2  2A36               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17191   0147F4  5035               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17192   0147F6  1036               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17193   0147F8  B4D8               	btfsc	status,2,c
 17194   0147FA  EF01  F0A4         	goto	u293_41
 17195   0147FE  EF03  F0A4         	goto	u293_40
 17196   014802                     u293_41:
 17197   014802  EF07  F0A4         	goto	l1085
 17198   014806                     u293_40:
 17199   014806                     
 17200                           ; BSR set to: 0
 17201                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17202   014806  ECD5  F0A3         	call	_TMR0_CallBack	;wreg free
 17203   01480A                     
 17204                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17205   01480A  6A35               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17206   01480C  6A36               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17207   01480E                     l1085:
 17208                           
 17209                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17210   01480E  0012               	return		;funcret
 17211   014810                     __end_of_TMR0_ISR:
 17212                           	callstack 0
 17213                           
 17214 ;; *************** function _TMR0_CallBack *****************
 17215 ;; Defined at:
 17216 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;		None
 17219 ;; Auto vars:     Size  Location     Type
 17220 ;;		None
 17221 ;; Return value:  Size  Location     Type
 17222 ;;                  1  [STACK] void 
 17223 ;; Registers used:
 17224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17225 ;; Tracked objects:
 17226 ;;		On entry : 3F/0
 17227 ;;		On exit  : 0/0
 17228 ;;		Unchanged: 0/0
 17229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;Total ram usage:        0 bytes
 17235 ;; Hardware stack levels used: 1
 17236 ;; Hardware stack levels required when called: 4
 17237 ;; This function calls:
 17238 ;;		NULL
 17239 ;;		_TMR0_DefaultInterruptHandler
 17240 ;;		_XF_decrementAndQueueTimers
 17241 ;; This function is called by:
 17242 ;;		_TMR0_ISR
 17243 ;; This function uses a reentrant model
 17244 ;;
 17245                           
 17246                           	psect	text71
 17247   0147AA                     __ptext71:
 17248                           	callstack 0
 17249   0147AA                     _TMR0_CallBack:
 17250                           	callstack 16
 17251   0147AA                     
 17252                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17253   0147AA  0E01               	movlw	1
 17254   0147AC  0100               	movlb	0	; () banked
 17255   0147AE  6F75               	movwf	(_carState+21)& (0+255),b
 17256   0147B0                     
 17257                           ; BSR set to: 0
 17258                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17259   0147B0  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17260   0147B2  1051               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17261   0147B4  1052               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17262   0147B6  B4D8               	btfsc	status,2,c
 17263   0147B8  EFE0  F0A3         	goto	u273_41
 17264   0147BC  EFE2  F0A3         	goto	u273_40
 17265   0147C0                     u273_41:
 17266   0147C0  EFEF  F0A3         	goto	l1089
 17267   0147C4                     u273_40:
 17268   0147C4                     
 17269                           ; BSR set to: 0
 17270                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17271   0147C4  D802               	call	u274_48
 17272   0147C6  EFEF  F0A3         	goto	u274_49
 17273   0147CA                     u274_48:
 17274   0147CA  0005               	push	
 17275   0147CC  6EFA               	movwf	pclath,c
 17276   0147CE  5050               	movf	_TMR0_InterruptHandler^0,w,c
 17277   0147D0  6EFD               	movwf	tosl,c
 17278   0147D2  5051               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17279   0147D4  6EFE               	movwf	tosh,c
 17280   0147D6  5052               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17281   0147D8  6EFF               	movwf	tosu,c
 17282   0147DA  50FA               	movf	pclath,w,c
 17283   0147DC  0012               	return		;indir
 17284   0147DE                     u274_49:
 17285   0147DE                     l1089:
 17286                           
 17287                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17288   0147DE  0012               	return		;funcret
 17289   0147E0                     __end_of_TMR0_CallBack:
 17290                           	callstack 0
 17291                           
 17292 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17293 ;; Defined at:
 17294 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;		None
 17297 ;; Auto vars:     Size  Location     Type
 17298 ;;		None
 17299 ;; Return value:  Size  Location     Type
 17300 ;;                  1  [STACK] void 
 17301 ;; Registers used:
 17302 ;;		None
 17303 ;; Tracked objects:
 17304 ;;		On entry : 3F/0
 17305 ;;		On exit  : 0/0
 17306 ;;		Unchanged: 0/0
 17307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17312 ;;Total ram usage:        0 bytes
 17313 ;; Hardware stack levels used: 1
 17314 ;; This function calls:
 17315 ;;		Nothing
 17316 ;; This function is called by:
 17317 ;;		_TMR0_Initialize
 17318 ;;		_TMR0_CallBack
 17319 ;; This function uses a reentrant model
 17320 ;;
 17321                           
 17322                           	psect	text72
 17323   01497E                     __ptext72:
 17324                           	callstack 0
 17325   01497E                     _TMR0_DefaultInterruptHandler:
 17326                           	callstack 19
 17327   01497E                     
 17328                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17329   01497E  0012               	return		;funcret
 17330   014980                     __end_of_TMR0_DefaultInterruptHandler:
 17331                           	callstack 0
 17332                           
 17333 ;; *************** function _XF_decrementAndQueueTimers *****************
 17334 ;; Defined at:
 17335 ;;		line 217 in file "xf/xf.c"
 17336 ;; Parameters:    Size  Location     Type
 17337 ;;		None
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;  dummy           1  [STACK] unsigned char 
 17340 ;;  i               1  [STACK] unsigned char 
 17341 ;; Return value:  Size  Location     Type
 17342 ;;                  1  [STACK] void 
 17343 ;; Registers used:
 17344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17345 ;; Tracked objects:
 17346 ;;		On entry : 3F/0
 17347 ;;		On exit  : 0/0
 17348 ;;		Unchanged: 0/0
 17349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17354 ;;Total ram usage:        0 bytes
 17355 ;; Hardware stack levels used: 1
 17356 ;; Hardware stack levels required when called: 3
 17357 ;; This function calls:
 17358 ;;		_XF_pushEvent
 17359 ;;		_XF_unscheduleTimer
 17360 ;; This function is called by:
 17361 ;;		_main
 17362 ;;		_TMR0_CallBack
 17363 ;; This function uses a reentrant model
 17364 ;;
 17365                           
 17366                           	psect	text73
 17367   013354                     __ptext73:
 17368                           	callstack 0
 17369   013354                     _XF_decrementAndQueueTimers:
 17370                           	callstack 0
 17371                           
 17372                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17373   013354  52E6               	movf	postinc1,f,c
 17374   013356  52E6               	movf	postinc1,f,c
 17375   013358                     
 17376                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17377                           ;stkvar	_i @ sp[(-2)+1]
 17378   013358  0EFF               	movlw	-1
 17379   01335A  6AE3               	clrf	plusw1,c
 17380   01335C                     l4619:
 17381                           
 17382                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17383                           ;stkvar	_i @ sp[(-2)+1]
 17384   01335C  0EFF               	movlw	-1
 17385   01335E  50E3               	movf	plusw1,w,c
 17386   013360  0D08               	mullw	8
 17387   013362  0ECA               	movlw	low (_theXF+2)
 17388   013364  24F3               	addwf	243,w,c
 17389   013366  6ED9               	movwf	fsr2l,c
 17390   013368  0E02               	movlw	high (_theXF+2)
 17391   01336A  20F4               	addwfc	prodh,w,c
 17392   01336C  6EDA               	movwf	fsr2h,c
 17393   01336E  50DF               	movf	indf2,w,c
 17394   013370  B4D8               	btfsc	status,2,c
 17395   013372  EFBD  F099         	goto	u226_41
 17396   013376  EFBF  F099         	goto	u226_40
 17397   01337A                     u226_41:
 17398   01337A  EF19  F09A         	goto	l4631
 17399   01337E                     u226_40:
 17400   01337E                     
 17401                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17402                           ;stkvar	_i @ sp[(-2)+1]
 17403   01337E  0EFF               	movlw	-1
 17404   013380  50E3               	movf	plusw1,w,c
 17405   013382  0D08               	mullw	8
 17406   013384  0EC8               	movlw	low _theXF
 17407   013386  24F3               	addwf	243,w,c
 17408   013388  6ED9               	movwf	fsr2l,c
 17409   01338A  0E02               	movlw	high _theXF
 17410   01338C  20F4               	addwfc	prodh,w,c
 17411   01338E  6EDA               	movwf	fsr2h,c
 17412   013390  0E0A               	movlw	10
 17413   013392  5EDE               	subwf	postinc2,f,c
 17414   013394  0E00               	movlw	0
 17415   013396  5ADD               	subwfb	postdec2,f,c
 17416   013398                     
 17417                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17418                           ;stkvar	_i @ sp[(-2)+1]
 17419   013398  0EFF               	movlw	-1
 17420   01339A  50E3               	movf	plusw1,w,c
 17421   01339C  0D08               	mullw	8
 17422   01339E  0EC8               	movlw	low _theXF
 17423   0133A0  24F3               	addwf	243,w,c
 17424   0133A2  6ED9               	movwf	fsr2l,c
 17425   0133A4  0E02               	movlw	high _theXF
 17426   0133A6  20F4               	addwfc	prodh,w,c
 17427   0133A8  6EDA               	movwf	fsr2h,c
 17428   0133AA  50DE               	movf	postinc2,w,c
 17429   0133AC  10DE               	iorwf	postinc2,w,c
 17430   0133AE  A4D8               	btfss	status,2,c
 17431   0133B0  EFDC  F099         	goto	u227_41
 17432   0133B4  EFDE  F099         	goto	u227_40
 17433   0133B8                     u227_41:
 17434   0133B8  EF19  F09A         	goto	l4631
 17435   0133BC                     u227_40:
 17436   0133BC                     
 17437                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17438                           ;stkvar	_dummy @ sp[(-2)+0]
 17439   0133BC  0EFE               	movlw	254
 17440   0133BE  24E1               	addwf	fsr1l,w,c
 17441   0133C0  6E01               	movwf	btemp^0,c
 17442   0133C2  0EFF               	movlw	255
 17443   0133C4  20E2               	addwfc	fsr1h,w,c
 17444   0133C6  6E02               	movwf	(btemp+1)^0,c
 17445   0133C8  C001  FFE6         	movff	btemp,postinc1
 17446   0133CC  C002  FFE6         	movff	btemp+1,postinc1
 17447   0133D0  0E01               	movlw	1
 17448   0133D2  6EE6               	movwf	postinc1,c
 17449                           
 17450                           ;stkvar	_i @ sp[(-5)+1]
 17451   0133D4  0EFC               	movlw	-4
 17452   0133D6  50E3               	movf	plusw1,w,c
 17453   0133D8  0D08               	mullw	8
 17454   0133DA  0ECA               	movlw	low (_theXF+2)
 17455   0133DC  24F3               	addwf	243,w,c
 17456   0133DE  6ED9               	movwf	fsr2l,c
 17457   0133E0  0E02               	movlw	high (_theXF+2)
 17458   0133E2  20F4               	addwfc	prodh,w,c
 17459   0133E4  6EDA               	movwf	fsr2h,c
 17460   0133E6  0E06               	movlw	6
 17461   0133E8                     u228_41:
 17462   0133E8  CFDE FFE6          	movff	postinc2,postinc1
 17463   0133EC  2CE8               	decfsz	wreg,w,c
 17464   0133EE  EFF4  F099         	goto	u228_41
 17465   0133F2  EC30  F095         	call	_XF_pushEvent	;wreg free
 17466   0133F6  0401               	decf	btemp^0,w,c
 17467   0133F8  A4D8               	btfss	status,2,c
 17468   0133FA  EF01  F09A         	goto	u229_41
 17469   0133FE  EF03  F09A         	goto	u229_40
 17470   013402                     u229_41:
 17471   013402  EF0C  F09A         	goto	l4629
 17472   013406                     u229_40:
 17473   013406                     
 17474                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 17475   013406  0E01               	movlw	1
 17476   013408  6EE6               	movwf	postinc1,c
 17477                           
 17478                           ;stkvar	_i @ sp[(-3)+1]
 17479   01340A  0EFE               	movlw	-2
 17480   01340C  50E3               	movf	plusw1,w,c
 17481   01340E  6EE6               	movwf	postinc1,c
 17482   013410  ECDB  F0A2         	call	_XF_unscheduleTimer	;wreg free
 17483                           
 17484                           ;xf/xf.c: 231:                 }
 17485   013414  EF19  F09A         	goto	l4631
 17486   013418                     l4629:
 17487                           
 17488                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 17489                           ;stkvar	_i @ sp[(-2)+1]
 17490   013418  0EFF               	movlw	-1
 17491   01341A  50E3               	movf	plusw1,w,c
 17492   01341C  0D08               	mullw	8
 17493   01341E  0EC8               	movlw	low _theXF
 17494   013420  24F3               	addwf	243,w,c
 17495   013422  6ED9               	movwf	fsr2l,c
 17496   013424  0E02               	movlw	high _theXF
 17497   013426  20F4               	addwfc	prodh,w,c
 17498   013428  6EDA               	movwf	fsr2h,c
 17499   01342A  0E01               	movlw	1
 17500   01342C  6EDE               	movwf	postinc2,c
 17501   01342E  0E00               	movlw	0
 17502   013430  6EDD               	movwf	postdec2,c
 17503   013432                     l4631:
 17504                           
 17505                           ;xf/xf.c: 238:     }
 17506                           ;stkvar	_i @ sp[(-2)+1]
 17507   013432  0EFF               	movlw	-1
 17508   013434  2AE3               	incf	plusw1,f,c
 17509   013436                     
 17510                           ;stkvar	_i @ sp[(-2)+1]
 17511   013436  0EFF               	movlw	-1
 17512   013438  CFE3 F001          	movff	plusw1,btemp
 17513   01343C  0E0B               	movlw	11
 17514   01343E  6401               	cpfsgt	btemp^0,c
 17515   013440  EF24  F09A         	goto	u230_41
 17516   013444  EF26  F09A         	goto	u230_40
 17517   013448                     u230_41:
 17518   013448  EFAE  F099         	goto	l4619
 17519   01344C                     u230_40:
 17520   01344C                     
 17521                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 17522   01344C  52E5               	movf	postdec1,f,c
 17523   01344E  52E5               	movf	postdec1,f,c
 17524   013450  0012               	return		;funcret
 17525   013452                     __end_of_XF_decrementAndQueueTimers:
 17526                           	callstack 0
 17527                           
 17528 ;; *************** function _XF_unscheduleTimer *****************
 17529 ;; Defined at:
 17530 ;;		line 202 in file "xf/xf.c"
 17531 ;; Parameters:    Size  Location     Type
 17532 ;;  id              1  [STACK] unsigned char 
 17533 ;;  inISR           1  [STACK] _Bool 
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;		None
 17536 ;; Return value:  Size  Location     Type
 17537 ;;                  1  [STACK] void 
 17538 ;; Registers used:
 17539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 17540 ;; Tracked objects:
 17541 ;;		On entry : 0/0
 17542 ;;		On exit  : 0/0
 17543 ;;		Unchanged: 0/0
 17544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17549 ;;Total ram usage:        0 bytes
 17550 ;; Hardware stack levels used: 1
 17551 ;; Hardware stack levels required when called: 1
 17552 ;; This function calls:
 17553 ;;		_ENTERCRITICAL
 17554 ;;		_Event_init
 17555 ;;		_LEAVECRITICAL
 17556 ;; This function is called by:
 17557 ;;		_XF_decrementAndQueueTimers
 17558 ;; This function uses a reentrant model
 17559 ;;
 17560                           
 17561                           	psect	text74
 17562   0145B6                     __ptext74:
 17563                           	callstack 0
 17564   0145B6                     _XF_unscheduleTimer:
 17565                           	callstack 17
 17566   0145B6                     
 17567                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 17568                           ;stkvar	_inISR @ sp[(0)+-2]
 17569   0145B6  0EFE               	movlw	-2
 17570   0145B8  50E3               	movf	plusw1,w,c
 17571   0145BA  6EE6               	movwf	postinc1,c
 17572   0145BC  EC94  F0A4         	call	_ENTERCRITICAL	;wreg free
 17573   0145C0                     
 17574                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 17575                           ;stkvar	_id @ sp[(0)+-1]
 17576   0145C0  0EFF               	movlw	-1
 17577   0145C2  50E3               	movf	plusw1,w,c
 17578   0145C4  0D08               	mullw	8
 17579   0145C6  0EC8               	movlw	low _theXF
 17580   0145C8  24F3               	addwf	243,w,c
 17581   0145CA  6ED9               	movwf	fsr2l,c
 17582   0145CC  0E02               	movlw	high _theXF
 17583   0145CE  20F4               	addwfc	prodh,w,c
 17584   0145D0  6EDA               	movwf	fsr2h,c
 17585   0145D2  6ADE               	clrf	postinc2,c
 17586   0145D4  6ADD               	clrf	postdec2,c
 17587   0145D6                     
 17588                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 17589                           ;stkvar	_id @ sp[(0)+-1]
 17590   0145D6  0EFF               	movlw	-1
 17591   0145D8  50E3               	movf	plusw1,w,c
 17592   0145DA  0D08               	mullw	8
 17593   0145DC  0ECA               	movlw	low (_theXF+2)
 17594   0145DE  24F3               	addwf	243,w,c
 17595   0145E0  6E0B               	movwf	(btemp+10)^0,c
 17596   0145E2  0E02               	movlw	high (_theXF+2)
 17597   0145E4  20F4               	addwfc	prodh,w,c
 17598   0145E6  6E0C               	movwf	(btemp+11)^0,c
 17599   0145E8  C00B  FFE6         	movff	btemp+10,postinc1
 17600   0145EC  C00C  FFE6         	movff	btemp+11,postinc1
 17601   0145F0  EC32  F0A3         	call	_Event_init	;wreg free
 17602   0145F4                     
 17603                           ;xf/xf.c: 207:     theXF.countTmr--;
 17604   0145F4  C3E1  FFE8         	movff	_theXF+281,wreg
 17605   0145F8  0FFF               	addlw	-1
 17606   0145FA  CFE8 F3E1          	movff	wreg,_theXF+281
 17607   0145FE                     
 17608                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 17609                           ;stkvar	_inISR @ sp[(0)+-2]
 17610   0145FE  0EFE               	movlw	-2
 17611   014600  50E3               	movf	plusw1,w,c
 17612   014602  6EE6               	movwf	postinc1,c
 17613   014604  EC88  F0A4         	call	_LEAVECRITICAL	;wreg free
 17614   014608                     
 17615                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17616   014608  52E5               	movf	postdec1,f,c
 17617   01460A  52E5               	movf	postdec1,f,c
 17618   01460C  0012               	return		;funcret
 17619   01460E                     __end_of_XF_unscheduleTimer:
 17620                           	callstack 0
 17621                           
 17622                           	psect	rparam
 17623   000001                     ___rparam_used  equ	1
 17624   000000                     ___param_bank   equ	0
 17625   000000                     __Lparam        equ	__Lrparam
 17626   000000                     __Hparam        equ	__Hrparam
 17627                           
 17628                           	psect	temp
 17629   000001                     btemp:
 17630                           	callstack 0
 17631   000001                     	ds	32
 17632   000001                     wtemp0          set	btemp
 17633   000003                     wtemp1          set	btemp+2
 17634   000005                     wtemp2          set	btemp+4
 17635   000007                     wtemp3          set	btemp+6
 17636   000009                     wtemp4          set	btemp+8
 17637   00000B                     wtemp5          set	btemp+10
 17638   000002                     wtemp8          set	btemp+1
 17639   000001                     ttemp0          set	btemp
 17640   000004                     ttemp1          set	btemp+3
 17641   000007                     ttemp2          set	btemp+6
 17642   00000A                     ttemp3          set	btemp+9
 17643   000002                     ttemp5          set	btemp+1
 17644   000005                     ttemp6          set	btemp+4
 17645   000009                     ttemp7          set	btemp+8
 17646   000001                     ltemp0          set	btemp
 17647   000005                     ltemp1          set	btemp+4
 17648   000009                     ltemp2          set	btemp+8
 17649   000001                     lltemp0         set	btemp
 17650   000009                     lltemp1         set	btemp+8
 17651   000011                     lltemp2         set	btemp+16
 17652   000019                     lltemp3         set	btemp+24
 17653                           
 17654                           	psect	config
 17655                           
 17656                           ;Config register CONFIG1L @ 0x1FFF8
 17657                           ;	Watchdog Timer Enable bit
 17658                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 17659                           ;	Stack Overflow/Underflow Reset Enable bit
 17660                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17661                           ;	Extended Instruction Set Enable bit
 17662                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17663                           ;	Background Debugger Enable bit
 17664                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17665   01FFF8                     	org	131064
 17666   01FFF8  A0                 	db	160
 17667                           
 17668                           ;Config register CONFIG1H @ 0x1FFF9
 17669                           ;	Code Protection bit
 17670                           ;	CP0 = OFF, Program memory is not code-protected
 17671   01FFF9                     	org	131065
 17672   01FFF9  F4                 	db	244
 17673                           
 17674                           ;Config register CONFIG2L @ 0x1FFFA
 17675                           ;	Oscillator Selection bits
 17676                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17677                           ;	Default/Reset System Clock Select bit
 17678                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17679                           ;	Fail-Safe Clock Monitor Enable
 17680                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17681                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17682                           ;	IESO = ON, Two-Speed Start-up enabled
 17683   01FFFA                     	org	131066
 17684   01FFFA  C5                 	db	197
 17685                           
 17686                           ;Config register CONFIG2H @ 0x1FFFB
 17687                           ;	Watchdog Timer Postscaler Select bits
 17688                           ;	WDTPS = 32768, 1:32768
 17689   01FFFB                     	org	131067
 17690   01FFFB  FF                 	db	255
 17691                           
 17692                           ;Config register CONFIG3L @ 0x1FFFC
 17693                           ;	External Address Bus Shift Enable bit
 17694                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17695                           ;	External Memory Bus
 17696                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17697                           ;	Data Bus Width Select bit
 17698                           ;	BW = 16, 16-Bit Data Width mode
 17699                           ;	External Bus Wait Enable bit
 17700                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17701   01FFFC                     	org	131068
 17702   01FFFC  F8                 	db	248
 17703                           
 17704                           ;Config register CONFIG3H @ 0x1FFFD
 17705                           ;	ECCP2 MUX bit
 17706                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17707                           ;	ECCP MUX bit
 17708                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17709                           ;	Ethernet LED Enable bit
 17710                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17711   01FFFD                     	org	131069
 17712   01FFFD  F7                 	db	247
 17713                           tosu	equ	0xFFF
 17714                           tosh	equ	0xFFE
 17715                           tosl	equ	0xFFD
 17716                           stkptr	equ	0xFFC
 17717                           pclatu	equ	0xFFB
 17718                           pclath	equ	0xFFA
 17719                           pcl	equ	0xFF9
 17720                           tblptru	equ	0xFF8
 17721                           tblptrh	equ	0xFF7
 17722                           tblptrl	equ	0xFF6
 17723                           tablat	equ	0xFF5
 17724                           prodh	equ	0xFF4
 17725                           prodl	equ	0xFF3
 17726                           indf0	equ	0xFEF
 17727                           postinc0	equ	0xFEE
 17728                           postdec0	equ	0xFED
 17729                           preinc0	equ	0xFEC
 17730                           plusw0	equ	0xFEB
 17731                           fsr0h	equ	0xFEA
 17732                           fsr0l	equ	0xFE9
 17733                           wreg	equ	0xFE8
 17734                           indf1	equ	0xFE7
 17735                           postinc1	equ	0xFE6
 17736                           postdec1	equ	0xFE5
 17737                           preinc1	equ	0xFE4
 17738                           plusw1	equ	0xFE3
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           bsr	equ	0xFE0
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           postdec2	equ	0xFDD
 17745                           preinc2	equ	0xFDC
 17746                           plusw2	equ	0xFDB
 17747                           fsr2h	equ	0xFDA
 17748                           fsr2l	equ	0xFD9
 17749                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        0
    BSS         772
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      50
    BANK0           160      0      59
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5591 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5583 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> fObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> fObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> mObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> mObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   33099
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4644
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1394
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     989
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   17509
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 2     0      2   10182
              _lightContol_BackLight
             _lightContol_FrontLight
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        25    24      1    3374
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6786
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1389
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1389
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1389
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1389
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     989
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _lightContol_BackLight
       _lightContol_FrontLight
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      59     36.9%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      50     79.4%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     250      0.0%
DATA                 0      0    1041      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Feb 27 13:34:43 2025

                                  __end_of_updateCarState 2420  
                                              _CanReceive 442C  
                                         _timer0ReloadVal 0037  
                                                     l150 3AEE  
                                                     l222 4346  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3A3C  
                                                     l401 3BA6  
                                                     l161 4422  
                                                     l146 3A54  
                                                     l218 1C0E  
                                                     l154 2068  
                                                     l322 14A8  
                                                     l171 454C  
                                                     l251 2A56  
                                                     l412 44EA  
                                                     l260 3536  
                                                     l149 3AE8  
                                                     l317 1174  
                                                     l165 4486  
                                                     l174 465A  
                                                     l254 3230  
                                                     l158 3FCA  
                                                     l327 419C  
                                                     l184 3A2A  
                                                     l168 4868  
                                                     l336 422E  
                                                     l264 0742  
                                                     l257 30F6  
                                                     l193 274E  
                                                     l346 2FB6  
                                                     l179 36F8  
                                                     l453 4106  
                                                     l293 3F20  
                                                     l357 0E2A  
                                                     l623 45B0  
                                                     l199 334A  
                                                     l482 406E  
                                                     l643 48F0  
                                                     l635 4888  
                                                     l379 43B8  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 2246  
                                                     l976 4954  
                                                     l979 496C  
                                                     u805 1A4C  
                                                     u815 1A70  
                                                     u825 1A92  
                                                     u835 1AF4  
                                                     u845 1B22  
                                                     u855 1B50  
                                                     u865 1B7E  
                                                     u875 1BAC  
                                                     u885 1BDA  
                                                     u995 3168  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 44F4  
                          _DRV_CANFDSPI_ModuleEventEnable 4490  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 4110  
                    _DRV_CANFDSPI_TransmitChannelEventGet 4078  
                                                    l1020 483C  
                                                    l1120 3C62  
                                                    l1032 497C  
                                                    l1200 4974  
                                                    l1201 4974  
                                                    l1116 4964  
                                                    l1206 496E  
                                                    l1215 2D16  
                                                    l1207 496E  
                                                    l1231 3618  
                                                    l1223 2BD6  
                                                    l1064 4770  
                                                    l1216 2D2E  
                                                    l1250 493C  
                                                    l1162 472E  
                                                    l1234 3620  
                                                    l3011 1A70  
                                                    l3003 19C2  
                                                    l1227 3960  
                                                    l1092 48D2  
                                                    l1237 4608  
                                                    l1085 480E  
                                                    l3021 1B50  
                                                    l3013 1A92  
                                                    l3005 19FE  
                                                    l1261 42BE  
                                                    l1246 344C  
                                                    l1254 4924  
                                                    l1174 47A0  
                                                    l1095 497E  
                                                    l3023 1B7E  
                                                    l3015 1AC6  
                                                    l3007 1A28  
                                                    l3111 3108  
                                                    l1159 46AC  
                                                    l1168 4908  
                                                    l1089 47DE  
                                                    l3025 1BAC  
                                                    l3017 1AF4  
                                                    l3009 1A4C  
                                                    l3121 31F6  
                                                    l3113 3144  
                                                    l4001 3242  
                                                    l1425 3D10  
                                                    l1177 48B2  
                                                    l1257 3894  
                                                    l3027 1BDA  
                                                    l3019 1B22  
                                                    l3115 3168  
                                                    l4011 3294  
                                                    l4003 3260  
                                                    l1516 2416  
                                                    l3117 3192  
                                                    l4101 21DA  
                                                    l4013 32D4  
                                                    l4005 3260  
                                                    l3119 31C2  
                                                    l4111 4928  
                                                    l4103 222E  
                                                    l4031 1502  
                                                    l4023 14BA  
                                                    l4015 32F2  
                                                    l4007 3276  
                                                    l1447 2550  
                                                    l1472 3DC4  
                                                    l1464 3E72  
                                                    l1448 25C6  
                                                    l3081 34B4  
                                                    l4113 493A  
                                                    l4041 15A4  
                                                    l4033 151A  
                                                    l4025 14E6  
                                                    l4017 3320  
                                                    l4009 327C  
                                                    l4201 0646  
                                                    l4121 0008  
                                                    l5001 444A  
                                                    l3083 34E0  
                                                    l4115 4910  
                                                    l4051 15E0  
                                                    l4043 15B6  
                                                    l4035 1534  
                                                    l4027 14E6  
                                                    l4019 3344  
                                                    l4211 06F2  
                                                    l4203 064E  
                                                    l4131 0074  
                                                    l4123 002A  
                                                    l5003 445A  
                                                    l1492 2862  
                                                    l3085 350A  
                                                    l3077 345A  
                                                    l5021 475A  
                                                    l5013 4738  
                                                    l4117 4922  
                                                    l4301 2D4C  
                                                    l4061 1656  
                                                    l4037 1552  
                                                    l4029 14FC  
                                                    l4221 0734  
                                                    l4213 0704  
                                                    l4205 067C  
                                                    l4141 0102  
                                                    l4133 00A4  
                                                    l4125 005A  
                                                    l5101 2500  
                                                    l1493 28D8  
                                                    l5005 447A  
                                                    l5031 47C4  
                                                    l3079 3496  
                                                    l3351 4960  
                                                    l5023 475C  
                                                    l5015 473A  
                                                    l4311 2D94  
                                                    l4303 2D58  
                                                    l4231 4080  
                                                    l4063 1674  
                                                    l4047 15C0  
                                                    l4039 1580  
                                                    l4207 0680  
                                                    l4151 01A2  
                                                    l4143 0136  
                                                    l4135 00C0  
                                                    l4127 006C  
                                                    l4119 0008  
                                                    l5111 2578  
                                                    l5103 253A  
                                                    l5201 1F36  
                                                    l3345 497A  
                                                    l3361 482C  
                                                    l3353 4962  
                                                    l5025 476C  
                                                    l5017 4742  
                                                    l4321 2DFE  
                                                    l4313 2D9E  
                                                    l4305 2D5E  
                                                    l5041 38DA  
                                                    l5033 38A6  
                                                    l4241 40E4  
                                                    l4233 4080  
                                                    l4081 208E  
                                                    l4065 1692  
                                                    l4057 15F8  
                                                    l4049 15D4  
                                                    l4225 073C  
                                                    l4217 070C  
                                                    l4209 06A2  
                                                    l4161 0278  
                                                    l4153 01C0  
                                                    l5009 4482  
                                                    l4401 2B0E  
                                                    l5027 47AA  
                                                    l5211 1F9A  
                                                    l5203 1F46  
                                                    l3371 4968  
                                                    l3363 482E  
                                                    l3355 4810  
                                                    l3347 4956  
                                                    l5019 4758  
                                                    l1763 2E74  
                                                    l4331 2E68  
                                                    l4323 2E22  
                                                    l4315 2DBC  
                                                    l4307 2D6E  
                                                    l5051 3952  
                                                    l5043 38E4  
                                                    l5035 38AA  
                                                    l4235 4090  
                                                    l4091 2142  
                                                    l4083 20A4  
                                                    l4075 207A  
                                                    l4067 16E0  
                                                    l4059 1638  
                                                    l4219 0722  
                                                    l4171 03E0  
                                                    l4155 01E6  
                                                    l4163 02EA  
                                                    l4147 013E  
                                                    l4139 00C8  
                                                    l5107 2558  
                                                    l5115 2584  
                                                    l5131 2782  
                                                    l4251 4664  
                                                    l4411 2B68  
                                                    l4403 2B3C  
                                                    l5029 47B0  
                                                    l5221 1FF8  
                                                    l5213 1FAA  
                                                    l5205 1F56  
                                                    l3365 4830  
                                                    l3357 4826  
                                                    l3349 495E  
                                                    l4325 2E2C  
                                                    l4317 2DC0  
                                                    l4309 2D7A  
                                                    l5037 38BC  
                                                    l4245 40EC  
                                                    l4237 40AA  
                                                    l4229 4080  
                                                    l4093 2168  
                                                    l4085 20D0  
                                                    l4077 208A  
                                                    l4069 16FE  
                                                    l4181 050A  
                                                    l4173 03FC  
                                                    l4165 039A  
                                                    l4157 01FC  
                                                    l4149 0172  
                                                    l4341 3F80  
                                                    l5109 2564  
                                                    l5141 27E8  
                                                    l5133 27A0  
                                                    l5125 2758  
                                                    l4253 4672  
                                                    l4501 099A  
                                                    l4413 2B94  
                                                    l4405 2B40  
                                                    l5061 37E2  
                                                    l5301 22B0  
                                                    l4431 45FE  
                                                    l4423 45B6  
                                                    l5231 203E  
                                                    l5223 1FFE  
                                                    l5215 1FBC  
                                                    l5207 1F6E  
                                                    l3367 4836  
                                                    l3359 482A  
                                                    l4319 2DD0  
                                                    l4327 2E4A  
                                                    l5047 3904  
                                                    l5039 38C6  
                                                    l4247 4100  
                                                    l4239 40D2  
                                                    l4095 218E  
                                                    l4087 20F6  
                                                    l4079 208C  
                                                    l4191 05E4  
                                                    l4183 0558  
                                                    l4167 03B8  
                                                    l4175 0448  
                                                    l4159 0236  
                                                    l4335 3F2C  
                                                    l5143 27F0  
                                                    l5135 27A8  
                                                    l5151 284C  
                                                    l5127 275C  
                                                    l4255 468E  
                                                    l4351 2608  
                                                    l4511 0C6C  
                                                    l4503 0A70  
                                                    l4271 3572  
                                                    l4263 3542  
                                                    l4415 2BBE  
                                                    l4407 2B4A  
                                                    l5063 37FA  
                                                    l5311 2364  
                                                    l5303 22EC  
                                                    l4425 45C0  
                                                    l4601 39EA  
                                                    l5233 2050  
                                                    l5225 201A  
                                                    l5217 1FD8  
                                                    l5209 1F86  
                                                    l5241 43E0  
                                                    l3369 4966  
                                                    l4329 2E5C  
                                                    l5049 3928  
                                                    l4097 21B4  
                                                    l4089 211C  
                                                    l4193 05EC  
                                                    l4185 0560  
                                                    l4177 0470  
                                                    l4169 03C4  
                                                    l4337 3F54  
                                                    l5081 2468  
                                                    l5073 2420  
                                                    l5161 2892  
                                                    l5129 277A  
                                                    l4441 3FF2  
                                                    l4433 3FDC  
                                                    l4361 268C  
                                                    l4353 260E  
                                                    l4345 25D4  
                                                    l4521 0D0C  
                                                    l4513 0C82  
                                                    l4505 0BF0  
                                                    l4257 4772  
                                                    l4281 35F4  
                                                    l4273 35C2  
                                                    l4417 2BC8  
                                                    l4409 2B64  
                                                    l5065 3820  
                                                    l5313 237A  
                                                    l5305 2328  
                                                    l4427 45D6  
                                                    l5251 47E0  
                                                    l4603 3A00  
                                                    l5235 2060  
                                                    l5227 2026  
                                                    l5219 1FE8  
                                                    l5243 4410  
                                                    l4195 05EC  
                                                    l4187 05AA  
                                                    l4179 04BC  
                                                    l4339 3F70  
                                                    l5091 24B8  
                                                    l5083 2470  
                                                    l5075 2424  
                                                    l5155 286A  
                                                    l5139 27CA  
                                                    l4451 405A  
                                                    l4443 4002  
                                                    l4435 3FDC  
                                                    l4371 2748  
                                                    l4363 26B0  
                                                    l4355 2626  
                                                    l4347 25F2  
                                                    l4531 0DA8  
                                                    l4523 0D14  
                                                    l4515 0C9E  
                                                    l4507 0C1A  
                                                    l4611 48F6  
                                                    l4259 4892  
                                                    l4275 35CC  
                                                    l4419 2BD2  
                                                    l5067 383E  
                                                    l5059 37DA  
                                                    l5307 232E  
                                                    l4429 45F4  
                                                    l4621 337E  
                                                    l4613 3358  
                                                    l5253 47EA  
                                                    l4701 1CDE  
                                                    l4605 3A24  
                                                    l5229 203A  
                                                    l5181 1E7E  
                                                    l5237 43C2  
                                                    l5245 4940  
                                                    l4197 0604  
                                                    l4189 05AE  
                                                    l5085 248E  
                                                    l5077 2442  
                                                    l5157 287E  
                                                    l5165 289E  
                                                    l5149 2812  
                                                    l5261 2BE4  
                                                    l4445 401C  
                                                    l4437 3FDC  
                                                    l4365 26BC  
                                                    l4357 2640  
                                                    l4349 25F2  
                                                    l4381 4366  
                                                    l4533 0DB0  
                                                    l4525 0D5E  
                                                    l4517 0CBA  
                                                    l4509 0C50  
                                                    l4461 07A6  
                                                    l4277 35E6  
                                                    l4269 3550  
                                                    l5069 3860  
                                                    l5309 2344  
                                                    l5317 239A  
                                                    l5341 370A  
                                                    l4623 3398  
                                                    l4631 3432  
                                                    l5255 47F0  
                                                    l4703 1CF8  
                                                    l4551 3C2A  
                                                    l5191 1EDA  
                                                    l5183 1E96  
                                                    l5175 1E6C  
                                                    l5239 43CC  
                                                    l5247 4944  
                                                    l4199 0634  
                                                    l5095 24DA  
                                                    l5087 2496  
                                                    l5079 244A  
                                                    l5271 2C40  
                                                    l4447 4044  
                                                    l4367 26FC  
                                                    l4359 265E  
                                                    l4383 4380  
                                                    l4375 4356  
                                                    l4535 0DFA  
                                                    l4527 0D62  
                                                    l4519 0CD6  
                                                    l4471 080C  
                                                    l4455 0754  
                                                    l4279 35EA  
                                                    l4287 35FE  
                                                    l4391 2A66  
                                                    l5351 3750  
                                                    l5343 370E  
                                                    l4633 3436  
                                                    l4625 33BC  
                                                    l5257 4806  
                                                    l4561 3646  
                                                    l4705 1D2A  
                                                    l4553 3C60  
                                                    l4545 3BB0  
                                                    l4801 2932  
                                                    l5193 1EF0  
                                                    l5185 1EA6  
                                                    l5177 1E70  
                                                    l5249 4950  
                                                    l4297 2D38  
                                                    l4641 3C9C  
                                                    l5097 24F8  
                                                    l5089 24B4  
                                                    l5281 2C9C  
                                                    l5273 2C66  
                                                    l4369 271A  
                                                    l4385 438E  
                                                    l4377 4356  
                                                    l4537 0DFE  
                                                    l4529 0D88  
                                                    l4481 089C  
                                                    l4473 0840  
                                                    l4465 07BC  
                                                    l4457 075C  
                                                    l4609 46FC  
                                                    l4289 3602  
                                                    l4393 2A8A  
                                                    l5361 37C2  
                                                    l5353 3772  
                                                    l5345 3712  
                                                    l4627 3406  
                                                    l4619 335C  
                                                    l5259 480A  
                                                    l3931 3A72  
                                                    l3923 3A36  
                                                    l4571 3666  
                                                    l4563 365C  
                                                    l4707 1D44  
                                                    l4715 1D90  
                                                    l4731 17A8  
                                                    l4547 3BBE  
                                                    l4811 2A1C  
                                                    l4803 2966  
                                                    l5195 1F00  
                                                    l5187 1EB4  
                                                    l5179 1E74  
                                                    l4299 2D3C  
                                                    l4651 3DEA  
                                                    l4643 3CC4  
                                                    l4635 3C6E  
                                                    l5291 4284  
                                                    l5283 2CD2  
                                                    l5267 2BEC  
                                                    l4387 43B2  
                                                    l4379 4356  
                                                    l4539 0E20  
                                                    l4491 0904  
                                                    l4483 08AC  
                                                    l4475 0858  
                                                    l4467 07EC  
                                                    l4459 0776  
                                                    l4395 2AA4  
                                                    l5363 37C6  
                                                    l5355 37A2  
                                                    l5347 3722  
                                                    l4629 3418  
                                                    l3933 3A90  
                                                    l3925 3A3E  
                                                    l4573 36B4  
                                                    l4565 3662  
                                                    l4557 3632  
                                                    l4709 1D76  
                                                    l4717 1E3C  
                                                    l4741 1876  
                                                    l4733 17CC  
                                                    l4725 1742  
                                                    l4821 2E86  
                                                    l4549 3C02  
                                                    l4813 2A36  
                                                    l4805 29A0  
                                                    l5197 1F18  
                                                    l5189 1EC2  
                                                    l2885 48B8  
                                                    l4661 3E46  
                                                    l4653 3DFE  
                                                    l4645 3CD8  
                                                    l4637 3C82  
                                                    l5285 2CF0  
                                                    l5269 2C22  
                                                    l4493 0936  
                                                    l4485 08C4  
                                                    l4477 086E  
                                                    l4397 2AC4  
                                                    l5293 2258  
                                                    l5357 37A4  
                                                    l5349 372E  
                                                    l3935 3AAE  
                                                    l3927 3A44  
                                                    l4575 36B8  
                                                    l4559 3646  
                                                    l4751 195C  
                                                    l4743 18A4  
                                                    l4735 17F0  
                                                    l4727 1742  
                                                    l4591 39A2  
                                                    l4583 3972  
                                                    l3951 462C  
                                                    l3943 4610  
                                                    l4831 2F40  
                                                    l4807 29D0  
                                                    l5199 1F30  
                                                    l4903 41AE  
                                                    l4671 3D78  
                                                    l4663 3D22  
                                                    l4655 3E04  
                                                    l4647 3CE4  
                                                    l4639 3C96  
                                                    l5287 4240  
                                                    l5279 2C6E  
                                                    l4487 08E4  
                                                    l4479 0880  
                                                    l4399 2B04  
                                                    l5359 37A6  
                                                    l3929 3A62  
                                                    l3937 3ACE  
                                                    l4577 36CE  
                                                    l4753 1992  
                                                    l4745 18D2  
                                                    l4737 1812  
                                                    l4729 177E  
                                                    l4585 3986  
                                                    l3953 4632  
                                                    l3945 4610  
                                                    l4833 2F6C  
                                                    l4825 2E9C  
                                                    l4817 2E86  
                                                    l4681 483E  
                                                    l4761 3B00  
                                                    l4841 48DA  
                                                    l4809 29F8  
                                                    l4913 420A  
                                                    l4905 41AE  
                                                    l4921 0E3C  
                                                    l3961 3E84  
                                                    l4673 3D8C  
                                                    l4665 3D36  
                                                    l4657 3E26  
                                                    l4649 3DD6  
                                                    l5289 4264  
                                                    l4497 094C  
                                                    l4489 08FA  
                                                    l5297 2298  
                                                    l3939 3AEA  
                                                    l4579 36F2  
                                                    l4691 1C20  
                                                    l4747 1900  
                                                    l4739 1848  
                                                    l4587 3986  
                                                    l3955 4654  
                                                    l3947 4610  
                                                    l4835 2F7C  
                                                    l4827 2ED8  
                                                    l4819 2E86  
                                                    l4683 4842  
                                                    l4763 3B3C  
                                                    l4843 48DA  
                                                    l4771 2FC8  
                                                    l4915 421A  
                                                    l4907 41CC  
                                                    l4931 0EC4  
                                                    l4923 0E3C  
                                                    l3971 3EDC  
                                                    l3963 3E9E  
                                                    l4675 3D98  
                                                    l4667 3D4A  
                                                    l4659 3E3A  
                                                    l4499 0974  
                                                    l5571 23FA  
                                                    l5299 229E  
                                                    l4693 1C20  
                                                    l4749 192E  
                                                    l4597 39A6  
                                                    l4589 399C  
                                                    l3949 4626  
                                                    l4837 2F96  
                                                    l4829 2EE8  
                                                    l4685 4844  
                                                    l4677 483E  
                                                    l4765 3B64  
                                                    l4861 459A  
                                                    l4853 455A  
                                                    l4781 3046  
                                                    l4773 2FC8  
                                                    l4909 41F4  
                                                    l4941 107E  
                                                    l4933 0F06  
                                                    l4925 0E4C  
                                                    l5581 21F0  
                                                    l3973 3F00  
                                                    l3965 3EAE  
                                                    l4669 3D50  
                                                    l5573 2826  
                                                    l5565 23CE  
                                                    l5583 1DA6  
                                                    l4695 1C60  
                                                    l4599 39E6  
                                                    l4871 4494  
                                                    l3991 4512  
                                                    l3983 44F6  
                                                    l4687 484C  
                                                    l4679 483E  
                                                    l4767 3B88  
                                                    l4759 3B00  
                                                    l4863 459E  
                                                    l4855 455E  
                                                    l4847 486A  
                                                    l4783 307C  
                                                    l4775 2FC8  
                                                    l4943 109A  
                                                    l4927 0E74  
                                                    l4935 0FA4  
                                                    l3975 3F12  
                                                    l3967 3EBC  
                                                    l3959 3E84  
                                                    l5575 28B2  
                                                    l5567 2408  
                                                    l4697 1C92  
                                                    l4873 4494  
                                                    l3993 4514  
                                                    l3985 44F6  
                                                    l4857 4584  
                                                    l4849 486A  
                                                    l4793 28E6  
                                                    l4785 30B2  
                                                    l4777 3004  
                                                    l4961 11BE  
                                                    l4953 1186  
                                                    l4945 10B6  
                                                    l4937 1054  
                                                    l4929 0E8A  
                                                    l3969 3ECE  
                                                    l5577 2514  
                                                    l5569 23E4  
                                                    l4699 1CAC  
                                                    l4875 4494  
                                                    l3995 4536  
                                                    l3987 44F6  
                                                    l4795 28E6  
                                                    l4787 30D8  
                                                    l4779 3014  
                                                    l4971 13A6  
                                                    l4963 11F8  
                                                    l4955 1186  
                                                    l4939 1072  
                                                    l4947 112E  
                                                    l3979 3F1A  
                                                    l5579 2598  
                                                    l4877 449C  
                                                    l4869 4494  
                                                    l3997 4546  
                                                    l3989 450C  
                                                    l4893 430C  
                                                    l4885 42CC  
                                                    l4797 28E6  
                                                    l4789 30D8  
                                                    l4981 1488  
                                                    l4973 13B2  
                                                    l4965 123A  
                                                    l4957 1196  
                                                    l4949 1154  
                                                    l4879 44D4  
                                                    l4895 431C  
                                                    l4887 42D0  
                                                    l4799 2922  
                                                    l4975 13CE  
                                                    l4959 11A8  
                                                    l4967 12D8  
                                                    l4991 414C  
                                                    l4897 4334  
                                                    l4889 42F6  
                                                    l4977 13EA  
                                                    l4969 1388  
                                                    l4993 416A  
                                                    l4985 4116  
                                                    l4979 1462  
                                                    l4995 4188  
                                                    l4987 4128  
                                                    l4989 413C  
                                                    l4999 442E  
                                     __end_of_XF_popEvent 396A  
                                                    STR_1 FFED  
                                                    u2000 268C  
                                                    u2001 2688  
                                                    u2010 2748  
                                                    u2011 2744  
                                                    u2100 0808  
                                                    u2020 2AA4  
                                                    u2101 0804  
                                                    u2021 2AA0  
                                                    u2110 089C  
                                                    u2111 0898  
                                                    u2031 2AD8  
                                                    u2200 0E20  
                                                    u2120 08C4  
                                                    u2040 2B3C  
                                                    u3000 22B0  
                                                    u2201 0E1C  
                                                    u2121 08C0  
                                                    u2041 2B38  
                                                    u3001 22AC  
                                                    u2210 3BBE  
                                                    u2130 08FA  
                                                    u2050 2B64  
                                                    u3010 2344  
                                                    u2211 3BBA  
                                                    u2131 08F6  
                                                    u2051 2B60  
                                                    u3011 2340  
                                                    u2220 36AA  
                                                    u2140 0948  
                                                    u3020 237A  
                                                    u2141 0944  
                                                    u2061 2BB6  
                                                    u3021 2376  
                                                    _LATA 0F89  
                                                    u2230 36CE  
                                                    u2070 3FEE  
                                                    u2150 099A  
                                                    _LATB 0F8A  
                                                    u2231 36CA  
                                                    u2071 3FEA  
                                                    u2151 0996  
                                                    _LATC 0F8B  
                                                    u1600 3ECE  
                                                    u2320 3C96  
                                                    u2080 4056  
                                                    u2160 0B66  
                                                    _LATD 0F8C  
                                                    u2225 36A0  
                                                    u1601 3ECA  
                                                    u2321 3C92  
                                                    u2081 4052  
                                                    _LATE 0F8D  
                                                    u2250 3A00  
                                                    u1610 3F12  
                                                    u2090 07B8  
                                                    _LATF 0F8E  
                                                    u2251 39FC  
                                                    u1611 3F0E  
                                                    u2091 07B4  
                                                    _LATG 0F8F  
                                                    u2244 39DC  
                                                    u2500 4596  
                                                    u1620 3320  
                                                    u1700 006C  
                                                    u2340 3DFE  
                                                    u2180 0C6C  
                                                    _LATH 0F90  
                                                    u2405 1876  
                                                    u2245 39D6  
                                                    u2501 4592  
                                                    u1621 331C  
                                                    u1701 0068  
                                                    u2341 3DFA  
                                                    u2181 0C68  
                                                    u2165 0B5C  
                                                    u2510 4308  
                                                    u1630 1580  
                                                    u1710 00C0  
                                                    u2190 0D84  
                                                    _LATJ 0F91  
                                                    u2415 18A4  
                                                    u2511 4304  
                                                    u1631 157C  
                                                    u1711 00BC  
                                                    u2191 0D80  
                                                    u2175 0BAC  
                                                    u2520 4206  
                                                    u1640 15B6  
                                                    u1800 0500  
                                                    u1720 0136  
                                                    u2360 3D4A  
                                                    u2425 18D2  
                                                    u2521 4202  
                                                    u1641 15B2  
                                                    u1721 0132  
                                                    u2361 3D46  
                                                    u2530 0E74  
                                                    u1650 1692  
                                                    u1810 054E  
                                                    u1730 01E6  
                                                    u2435 1900  
                                                    u2531 0E70  
                                                    u1651 168E  
                                                    u1731 01E2  
                                                    u1580 3A62  
                                                    u2620 11A8  
                                                    u2540 0EFC  
                                                    u1660 172C  
                                                    u1820 05E4  
                                                    u1740 026E  
                                                    u1900 35E6  
                                                    u1581 3A5E  
                                                    u2445 192E  
                                                    u2621 11A4  
                                                    u2605 10F2  
                                                    u1661 1728  
                                                    u1821 05E0  
                                                    u1805 04F6  
                                                    u1901 35E2  
                                                    u1590 3AE8  
                                                    u2630 1230  
                                                    u2710 4128  
                                                    u1670 20A4  
                                                    u1830 0604  
                                                    u1910 3618  
                                                    u1591 3AE4  
                                                    u2455 195C  
                                                    u2375 17CC  
                                                    u2615 111C  
                                                    u2711 4124  
                                                    u1671 20A0  
                                                    u1831 0600  
                                                    u1815 0544  
                                                    u1911 3614  
                                                    u2480 2E98  
                                                    u1680 493A  
                                                    u1920 2D4C  
                                                    u1840 06A2  
                                                    u1760 02DA  
                                                    u2800 2468  
                                                    u2720 445A  
                                                    u2385 17F0  
                                                    u2481 2E94  
                                                    u2465 3B88  
                                                    u2705 1450  
                                                    u2545 0EF2  
                                                    u1681 4936  
                                                    u1921 2D48  
                                                    u1841 069E  
                                                    u1745 0264  
                                                    u2801 2464  
                                                    u2721 4456  
                                                    u2570 0F92  
                                                    u1690 4922  
                                                    u1930 2D6E  
                                                    u1850 0704  
                                                    u1770 0316  
                                                    u2810 248E  
                                                    u2395 1812  
                                                    u2475 2A1C  
                                                    u2635 1226  
                                                    u2555 0F32  
                                                    u1691 491E  
                                                    u1931 2D6A  
                                                    u1851 0700  
                                                    u1755 02A4  
                                                    u2811 248A  
                                                    u2660 12C6  
                                                    u2580 0FD0  
                                                    u1940 2D94  
                                                    u1860 0734  
                                                    u2820 24B4  
                                                    u2900 280E  
                                                    u2645 1266  
                                                    u2565 0F5C  
                                                    u1941 2D90  
                                                    u1861 0730  
                                                    u1765 02D0  
                                                    u2821 24B0  
                                                    u2901 280A  
                                                    u2670 1304  
                                                    u1950 2DD0  
                                                    u2750 38DA  
                                                    u1870 40E4  
                                                    u2830 24D6  
                                                    u2910 285E  
                                                    u2495 2F30  
                                                    u2655 1290  
                                                    u2575 0F88  
                                                    u1951 2DCC  
                                                    u2751 38D6  
                                                    u1871 40E0  
                                                    u1775 030C  
                                                    u2831 24D2  
                                                    u2911 285A  
                                                    u2920 2050  
                                                    u1960 2DFE  
                                                    u2840 24F8  
                                                    u1880 3572  
                                                    u2921 204C  
                                                    u2665 12BC  
                                                    u2585 0FC6  
                                                    u1961 2DFA  
                                                    u1785 035A  
                                                    u2841 24F4  
                                                    u1881 356E  
                                                    u1970 2E4A  
                                                    u2850 254C  
                                                    u2675 12FA  
                                                    u2595 1014  
                                                    u1971 2E46  
                                                    u1795 0438  
                                                    u2851 2548  
                                                    u1891 35BA  
                                                    u1980 2E5C  
                                                    u2860 277A  
                                                    u2940 2C66  
                                                    u2685 1348  
                                                    u1981 2E58  
                                                    u2861 2776  
                                                    u2941 2C62  
                                                    u2781 3886  
                                                    u1990 3F80  
                                                    u2790 2442  
                                                    u2870 27A0  
                                                    u2950 2D16  
                                                    u2695 1426  
                                                    u1991 3F7C  
                                                    u2791 243E  
                                                    u2871 279C  
                                                    u2951 2D12  
                                                    u2880 27C6  
                                                    u2881 27C2  
                                                    u2890 27E8  
                                                    u2970 4284  
                                                    u2891 27E4  
                                                    u2971 4280  
                                                    u2990 2294  
                                                    u2991 2290  
                                                    u2988 42AA  
                                                    u2989 42BE  
                       __end_of_DRV_CANFDSPI_TimeStampSet 4892  
                                    _motorControl_Process 2420  
                                                    _main 3702  
                                        _XF_scheduleTimer 3540  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 0001  
                                            _CanSetFilter 43C2  
                                         __end_of_CanInit 2072  
                                         __end_of_CanSend 3FD4  
                                   _lightContol_BackLight 3D1A  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2D34  
                                         __end_of_XF_post 389E  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 3100  
                     _DRV_CANFDSPI_TransmitQueueConfigure 2FC0  
                                 __end_of_TMR0_Initialize 4772  
                     __end_of_DRV_CANFDSPI_WriteByteArray 3354  
                             _DRV_CANFDSPI_WriteByteArray 323A  
                           __end_of_OSCILLATOR_Initialize 496E  
                                         __end_of___awmod 2E7E  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 323A  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3100  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 4810  
                                                   _dummy 0031  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2BE0  
                               motorControl_Process@state 003E  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 0001  
                                                   ltemp1 0005  
                                                   ltemp2 0009  
                            lightControl_Process@oldState 0039  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 0001  
                                                   ttemp1 0004  
                                                   ttemp2 0007  
                                                   ttemp3 000A  
                                                   ttemp5 0002  
                                                   ttemp6 0005  
                                                   ttemp7 0009  
                                                   status 0FD8  
                                                   wtemp0 0001  
                                                   wtemp1 0003  
                                                   wtemp2 0005  
                                                   wtemp3 0007  
                                                   wtemp4 0009  
                                                   wtemp5 000B  
                                                   wtemp8 0002  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 41A6  
                           _DRV_CANFDSPI_FilterToFifoLink 4110  
                               _DRV_CANFDSPI_TefConfigure 3AF8  
                                         __initialization 46B2  
                                              _Event_init 4664  
                                            __end_of_main 37D2  
                             ?_INTERRUPT_InterruptManager 0040  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2758  
                              _DRV_CANFDSPI_ReadByteArray 25CC  
                                     __end_of_Event_setPE 4738  
                                     __end_of_Event_setId 4910  
                                           __activetblptr 0003  
                                          _Event_getDelay 4892  
                                             _XF_popEvent 389E  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  u230_40 344C  
                                                  u230_41 3448  
                                                  i2l5335 004C  
                                                  i2l5337 005A  
                                                  i2l5339 0068  
                                                  u226_40 337E  
                                                  u226_41 337A  
                                                  u227_40 33BC  
                                                  u227_41 33B8  
                                                  u228_41 33E8  
                                                  u229_40 3406  
                                                  u229_41 3402  
                                                  u273_40 47C4  
                                                  u273_41 47C0  
                                                  u274_48 47CA  
                                                  u274_49 47DE  
                                                  u293_40 4806  
                                                  u293_41 4802  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 4772  
                                          _XF_noMoreEvent 4974  
                                          _XF_noMoreTimer 496E  
                          __end_of_DRV_CANFDSPI_WriteByte 4664  
                          __end_of_DRV_CANFDSPI_WriteWord 3702  
                                       __end_of_SPI2_Open 3C66  
                                          _XF_executeOnce 4238  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 46BA  
                                                  clear_1 46CC  
                                                  clear_2 46D8  
                                                  clear_3 46E4  
                                                  clear_4 46F0  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 48B8  
                                                  lltemp0 0001  
                                                  lltemp1 0009  
                                                  lltemp2 0011  
                                                  lltemp3 0019  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3A34  
                              _DRV_CANFDSPI_WriteHalfWord 396A  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 47E0  
                                  __end_of_Event_setDelay 47AA  
                                  __end_of_XF_noMoreEvent 497A  
                                  __end_of_XF_noMoreTimer 4974  
                                       _SYSTEM_Initialize 4940  
                         lightContol_FrontLight@lastLight 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 46F6  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 42C8  
                                  _lightContol_FrontLight 3DCE  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 0040  
                                              ___inthi_sp 0931  
                                             _Event_setPE 46FC  
                                             _Event_setId 48F6  
                                __end_of_XF_scheduleTimer 362A  
                                   TMR0_ISR@CountCallBack 0035  
                                     __end_of_SpiTransfer 3AF8  
                                   __end_of_LEAVECRITICAL 4928  
                               __end_of_SYSTEM_Initialize 4956  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 0050  
                        __end_of_TMR0_SetInterruptHandler 48DA  
                               _DRV_CANFDSPI_TimeStampSet 486A  
                                            _XF_pushEvent 2A60  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 4940  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 1E64  
                                                 _CanSend 3F2A  
                                                 _XF_init 2BE0  
                                                 _XF_post 37D2  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 2250  
                             _DRV_CANFDSPI_DlcToDataBytes 2072  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 2FC0  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2E7E  
                                                 ___awmod 2D34  
                                                 uf296999 4258  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 4078  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 3FD4  
                                                 __pcinit 46B2  
                                                 __ramtop 1000  
                                                 __ptext0 3702  
                                                 __ptext1 2250  
                                                 __ptext2 37D2  
                                                 __ptext3 2A60  
                                                 __ptext4 3540  
                                                 __ptext5 496E  
                                                 __ptext6 4974  
                                                 __ptext7 4772  
                                                 __ptext8 4892  
                                                 __ptext9 46FC  
                                             _SpiTransfer 3A34  
                                               _T0CONbits 0FD5  
                                                 us231999 3C78  
                                                 us233999 3DE0  
                                                 us235999 3D2C  
                                   _OSCILLATOR_Initialize 4966  
                                                 us276999 38F6  
                                                 us277999 391E  
                             lightContol_FrontLight@F6662 008B  
                                    end_of_initialization 46F6  
                              __end_of_DRV_CANFDSPI_Reset 486A  
                                      __end_of_CanReceive 4490  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3540  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3452  
                                               _SPI2_Open 3BB0  
                                _TMR0_SetInterruptHandler 48B8  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 497E  
                            __end_of_lightControl_Process 28DE  
                                         _SPI2_Initialize 4956  
                                      _spi2_configuration FFE9  
                                     start_initialization 46B2  
                           __end_of_DRV_CANFDSPI_ReadByte 4556  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 46B2  
                          __end_of_lightContol_FrontLight 3E7C  
                              __end_of_XF_unscheduleTimer 460E  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0021  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2A60  
                   _DRV_CANFDSPI_TransmitChannelConfigure 28DE  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 3D1A  
                               lightControl_Process@state 003A  
                                   _TMR0_InterruptHandler 0050  
                                  _PIN_MANAGER_Initialize 4810  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 4966  
                            ??_INTERRUPT_InterruptManager 0040  
                                 motorControl@lastPercent 003F  
                                           _TMR0_CallBack 47AA  
                                    _INTERRUPT_Initialize 497A  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 2758  
                           __end_of_lightContol_BackLight 3DCE  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 434E  
                        _DRV_CANFDSPI_OperationModeSelect 42C8  
                                                i2u303_40 005A  
                                                i2u303_41 0056  
                                                i2u304_40 0068  
                                                i2u304_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 483E  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 47E0  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 003B  
                                           _LEAVECRITICAL 4910  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 48F6  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 48DA  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6645 0021  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 442C  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 3F2A  
                      _DRV_CANFDSPI_TransmitChannelUpdate 3E7C  
                            motorControl_Process@oldState 003D  
                                                _carState 0060  
                       __end_of_DRV_CANFDSPI_TefConfigure 3BB0  
                                                __ptext10 48F6  
                                                __ptext11 442C  
                                                __ptext20 2420  
                                                __ptext12 074C  
                                                __ptext21 3C66  
                                                __ptext13 434E  
                                                __ptext30 4078  
                                                __ptext22 3DCE  
                                                __ptext14 25CC  
                                                __ptext31 389E  
                                                __ptext23 3D1A  
                                                __ptext15 3FD4  
                                                __ptext40 4966  
                                                __ptext32 2D34  
                                                __ptext24 3F2A  
                                                __ptext16 2BE0  
                                                __ptext41 497A  
                                                __ptext33 4910  
                                                __ptext25 0000  
                                                __ptext17 4664  
                                                __ptext50 3100  
                                                __ptext42 43C2  
                                                __ptext34 4928  
                                                __ptext26 323A  
                                                __ptext18 4238  
                                                __ptext51 28DE  
                                                __ptext43 4110  
                                                __ptext35 4940  
                                                __ptext27 3E7C  
                                                __ptext19 2758  
                                                __ptext60 460E  
                                                __ptext52 486A  
                                                __ptext44 0E34  
                                                __ptext36 4738  
                                                __ptext28 14B2  
                                                __ptext61 44F4  
                                                __ptext53 48DA  
                                                __ptext45 117E  
                                                __ptext37 48B8  
                                                __ptext29 2072  
                                                __ptext70 47E0  
                                                __ptext62 4490  
                                                __ptext54 4556  
                                                __ptext46 41A6  
                                                __ptext38 4956  
                                                __ptext71 47AA  
                                                __ptext63 396A  
                                                __ptext55 3AF8  
                                                __ptext47 1E64  
                                                __ptext39 4810  
                                                __ptext72 497E  
                                                __ptext64 19BA  
                                                __ptext56 483E  
                                                __ptext48 3452  
                                                __ptext73 3354  
                                                __ptext65 173A  
                                                __ptext57 3BB0  
                                                __ptext49 2FC0  
                                                __ptext74 45B6  
                                                __ptext66 1C18  
                                                __ptext58 2E7E  
                                                __ptext67 362A  
                                                __ptext59 42C8  
                                                __ptext68 3A34  
                                           _ENTERCRITICAL 4928  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 3452  
                              _XF_decrementAndQueueTimers 3354  
                    __end_of_TMR0_DefaultInterruptHandler 4980  
                            _TMR0_DefaultInterruptHandler 497E  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 45B6  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 460E  
                            __end_of_motorControl_Process 25CC  
                                  _DRV_CANFDSPI_WriteWord 362A  
                                            _motorControl 3C66  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 4238  
                              _DRV_CANFDSPI_FilterDisable 41A6  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 44F4  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 45B6  
                            _DRV_CANFDSPI_TimeStampEnable 4556  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 43C2  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 434E  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 2250  
                                         _TMR0_Initialize 4738  
                              lightContol_BackLight@F6668 007B  
                          __end_of_PIN_MANAGER_Initialize 483E  
