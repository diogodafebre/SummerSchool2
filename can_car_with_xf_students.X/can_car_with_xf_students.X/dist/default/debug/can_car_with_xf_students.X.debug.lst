

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Mar 04 16:40:33 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    92                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    93   000000                     
    94                           ; Generated 23/03/2023 GMT
    95                           ; 
    96                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution. Publication is not required when
   110                           ;        this file is used in an embedded application.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC18F97J60 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128   000FE0                     bsr             equ	4064
   129   000FE9                     fsr0            equ	4073
   130   000FEA                     fsr0h           equ	4074
   131   000FE9                     fsr0l           equ	4073
   132   000FE1                     fsr1            equ	4065
   133   000FE2                     fsr1h           equ	4066
   134   000FE1                     fsr1l           equ	4065
   135   000FD9                     fsr2            equ	4057
   136   000FDA                     fsr2h           equ	4058
   137   000FD9                     fsr2l           equ	4057
   138   000FEF                     indf0           equ	4079
   139   000FE7                     indf1           equ	4071
   140   000FDF                     indf2           equ	4063
   141   000FF2                     intcon          equ	4082
   142   000000                     nvmcon          equ	0
   143   000FF9                     pcl             equ	4089
   144   000FFA                     pclath          equ	4090
   145   000FFB                     pclatu          equ	4091
   146   000FEB                     plusw0          equ	4075
   147   000FE3                     plusw1          equ	4067
   148   000FDB                     plusw2          equ	4059
   149   000FED                     postdec0        equ	4077
   150   000FE5                     postdec1        equ	4069
   151   000FDD                     postdec2        equ	4061
   152   000FEE                     postinc0        equ	4078
   153   000FE6                     postinc1        equ	4070
   154   000FDE                     postinc2        equ	4062
   155   000FEC                     preinc0         equ	4076
   156   000FE4                     preinc1         equ	4068
   157   000FDC                     preinc2         equ	4060
   158   000FF3                     prod            equ	4083
   159   000FF4                     prodh           equ	4084
   160   000FF3                     prodl           equ	4083
   161   000FD8                     status          equ	4056
   162   000FF5                     tablat          equ	4085
   163   000FF6                     tblptr          equ	4086
   164   000FF7                     tblptrh         equ	4087
   165   000FF6                     tblptrl         equ	4086
   166   000FF8                     tblptru         equ	4088
   167   000FFD                     tosl            equ	4093
   168   000FE8                     wreg            equ	4072
   169   000E80                     MAADR5          equ	3712	;# 
   170   000E81                     MAADR6          equ	3713	;# 
   171   000E82                     MAADR3          equ	3714	;# 
   172   000E83                     MAADR4          equ	3715	;# 
   173   000E84                     MAADR1          equ	3716	;# 
   174   000E85                     MAADR2          equ	3717	;# 
   175   000E8A                     MISTAT          equ	3722	;# 
   176   000E97                     EFLOCON         equ	3735	;# 
   177   000E98                     EPAUS           equ	3736	;# 
   178   000E98                     EPAUSL          equ	3736	;# 
   179   000E99                     EPAUSH          equ	3737	;# 
   180   000EA0                     MACON1          equ	3744	;# 
   181   000EA2                     MACON3          equ	3746	;# 
   182   000EA3                     MACON4          equ	3747	;# 
   183   000EA4                     MABBIPG         equ	3748	;# 
   184   000EA6                     MAIPG           equ	3750	;# 
   185   000EA6                     MAIPGL          equ	3750	;# 
   186   000EA7                     MAIPGH          equ	3751	;# 
   187   000EAA                     MAMXFL          equ	3754	;# 
   188   000EAA                     MAMXFLL         equ	3754	;# 
   189   000EAB                     MAMXFLH         equ	3755	;# 
   190   000EB2                     MICMD           equ	3762	;# 
   191   000EB4                     MIREGADR        equ	3764	;# 
   192   000EB6                     MIWR            equ	3766	;# 
   193   000EB6                     MIWRL           equ	3766	;# 
   194   000EB7                     MIWRH           equ	3767	;# 
   195   000EB8                     MIRD            equ	3768	;# 
   196   000EB8                     MIRDL           equ	3768	;# 
   197   000EB9                     MIRDH           equ	3769	;# 
   198   000EC0                     EHT0            equ	3776	;# 
   199   000EC1                     EHT1            equ	3777	;# 
   200   000EC2                     EHT2            equ	3778	;# 
   201   000EC3                     EHT3            equ	3779	;# 
   202   000EC4                     EHT4            equ	3780	;# 
   203   000EC5                     EHT5            equ	3781	;# 
   204   000EC6                     EHT6            equ	3782	;# 
   205   000EC7                     EHT7            equ	3783	;# 
   206   000EC8                     EPMM0           equ	3784	;# 
   207   000EC9                     EPMM1           equ	3785	;# 
   208   000ECA                     EPMM2           equ	3786	;# 
   209   000ECB                     EPMM3           equ	3787	;# 
   210   000ECC                     EPMM4           equ	3788	;# 
   211   000ECD                     EPMM5           equ	3789	;# 
   212   000ECE                     EPMM6           equ	3790	;# 
   213   000ECF                     EPMM7           equ	3791	;# 
   214   000ED0                     EPMCS           equ	3792	;# 
   215   000ED0                     EPMCSL          equ	3792	;# 
   216   000ED1                     EPMCSH          equ	3793	;# 
   217   000ED4                     EPMO            equ	3796	;# 
   218   000ED4                     EPMOL           equ	3796	;# 
   219   000ED5                     EPMOH           equ	3797	;# 
   220   000ED8                     ERXFCON         equ	3800	;# 
   221   000ED9                     EPKTCNT         equ	3801	;# 
   222   000EE2                     EWRPT           equ	3810	;# 
   223   000EE2                     EWRPTL          equ	3810	;# 
   224   000EE3                     EWRPTH          equ	3811	;# 
   225   000EE4                     ETXST           equ	3812	;# 
   226   000EE4                     ETXSTL          equ	3812	;# 
   227   000EE5                     ETXSTH          equ	3813	;# 
   228   000EE6                     ETXND           equ	3814	;# 
   229   000EE6                     ETXNDL          equ	3814	;# 
   230   000EE7                     ETXNDH          equ	3815	;# 
   231   000EE8                     ERXST           equ	3816	;# 
   232   000EE8                     ERXSTL          equ	3816	;# 
   233   000EE9                     ERXSTH          equ	3817	;# 
   234   000EEA                     ERXND           equ	3818	;# 
   235   000EEA                     ERXNDL          equ	3818	;# 
   236   000EEB                     ERXNDH          equ	3819	;# 
   237   000EEC                     ERXRDPT         equ	3820	;# 
   238   000EEC                     ERXRDPTL        equ	3820	;# 
   239   000EED                     ERXRDPTH        equ	3821	;# 
   240   000EEE                     ERXWRPT         equ	3822	;# 
   241   000EEE                     ERXWRPTL        equ	3822	;# 
   242   000EEF                     ERXWRPTH        equ	3823	;# 
   243   000EF0                     EDMAST          equ	3824	;# 
   244   000EF0                     EDMASTL         equ	3824	;# 
   245   000EF1                     EDMASTH         equ	3825	;# 
   246   000EF2                     EDMAND          equ	3826	;# 
   247   000EF2                     EDMANDL         equ	3826	;# 
   248   000EF3                     EDMANDH         equ	3827	;# 
   249   000EF4                     EDMADST         equ	3828	;# 
   250   000EF4                     EDMADSTL        equ	3828	;# 
   251   000EF5                     EDMADSTH        equ	3829	;# 
   252   000EF6                     EDMACS          equ	3830	;# 
   253   000EF6                     EDMACSL         equ	3830	;# 
   254   000EF7                     EDMACSH         equ	3831	;# 
   255   000EFB                     EIE             equ	3835	;# 
   256   000EFD                     ESTAT           equ	3837	;# 
   257   000EFE                     ECON2           equ	3838	;# 
   258   000F60                     EIR             equ	3936	;# 
   259   000F61                     EDATA           equ	3937	;# 
   260   000F62                     SSP2CON2        equ	3938	;# 
   261   000F63                     SSP2CON1        equ	3939	;# 
   262   000F64                     SSP2STAT        equ	3940	;# 
   263   000F65                     SSP2ADD         equ	3941	;# 
   264   000F66                     SSP2BUF         equ	3942	;# 
   265   000F67                     ECCP2DEL        equ	3943	;# 
   266   000F68                     ECCP2AS         equ	3944	;# 
   267   000F69                     ECCP3DEL        equ	3945	;# 
   268   000F6A                     ECCP3AS         equ	3946	;# 
   269   000F6B                     RCSTA2          equ	3947	;# 
   270   000F6C                     TXSTA2          equ	3948	;# 
   271   000F6D                     TXREG2          equ	3949	;# 
   272   000F6E                     RCREG2          equ	3950	;# 
   273   000F6F                     SPBRG2          equ	3951	;# 
   274   000F70                     CCP5CON         equ	3952	;# 
   275   000F71                     CCPR5           equ	3953	;# 
   276   000F71                     CCPR5L          equ	3953	;# 
   277   000F72                     CCPR5H          equ	3954	;# 
   278   000F73                     CCP4CON         equ	3955	;# 
   279   000F74                     CCPR4           equ	3956	;# 
   280   000F74                     CCPR4L          equ	3956	;# 
   281   000F75                     CCPR4H          equ	3957	;# 
   282   000F76                     T4CON           equ	3958	;# 
   283   000F77                     PR4             equ	3959	;# 
   284   000F78                     TMR4            equ	3960	;# 
   285   000F79                     ECCP1DEL        equ	3961	;# 
   286   000F7A                     ERDPT           equ	3962	;# 
   287   000F7A                     ERDPTL          equ	3962	;# 
   288   000F7B                     ERDPTH          equ	3963	;# 
   289   000F7C                     BAUDCON2        equ	3964	;# 
   290   000F7C                     BAUDCTL2        equ	3964	;# 
   291   000F7D                     SPBRGH2         equ	3965	;# 
   292   000F7E                     BAUDCON1        equ	3966	;# 
   293   000F7E                     BAUDCON         equ	3966	;# 
   294   000F7E                     BAUDCTL         equ	3966	;# 
   295   000F7E                     BAUDCTL1        equ	3966	;# 
   296   000F7F                     SPBRGH1         equ	3967	;# 
   297   000F7F                     SPBRGH          equ	3967	;# 
   298   000F80                     PORTA           equ	3968	;# 
   299   000F81                     PORTB           equ	3969	;# 
   300   000F82                     PORTC           equ	3970	;# 
   301   000F83                     PORTD           equ	3971	;# 
   302   000F84                     PORTE           equ	3972	;# 
   303   000F85                     PORTF           equ	3973	;# 
   304   000F86                     PORTG           equ	3974	;# 
   305   000F87                     PORTH           equ	3975	;# 
   306   000F88                     PORTJ           equ	3976	;# 
   307   000F89                     LATA            equ	3977	;# 
   308   000F8A                     LATB            equ	3978	;# 
   309   000F8B                     LATC            equ	3979	;# 
   310   000F8C                     LATD            equ	3980	;# 
   311   000F8D                     LATE            equ	3981	;# 
   312   000F8E                     LATF            equ	3982	;# 
   313   000F8F                     LATG            equ	3983	;# 
   314   000F90                     LATH            equ	3984	;# 
   315   000F91                     LATJ            equ	3985	;# 
   316   000F92                     TRISA           equ	3986	;# 
   317   000F92                     DDRA            equ	3986	;# 
   318   000F93                     TRISB           equ	3987	;# 
   319   000F93                     DDRB            equ	3987	;# 
   320   000F94                     TRISC           equ	3988	;# 
   321   000F94                     DDRC            equ	3988	;# 
   322   000F95                     TRISD           equ	3989	;# 
   323   000F95                     DDRD            equ	3989	;# 
   324   000F96                     TRISE           equ	3990	;# 
   325   000F96                     DDRE            equ	3990	;# 
   326   000F97                     TRISF           equ	3991	;# 
   327   000F97                     DDRF            equ	3991	;# 
   328   000F98                     TRISG           equ	3992	;# 
   329   000F98                     DDRG            equ	3992	;# 
   330   000F99                     TRISH           equ	3993	;# 
   331   000F99                     DDRH            equ	3993	;# 
   332   000F9A                     TRISJ           equ	3994	;# 
   333   000F9A                     DDRJ            equ	3994	;# 
   334   000F9B                     OSCTUNE         equ	3995	;# 
   335   000F9C                     MEMCON          equ	3996	;# 
   336   000F9D                     PIE1            equ	3997	;# 
   337   000F9E                     PIR1            equ	3998	;# 
   338   000F9F                     IPR1            equ	3999	;# 
   339   000FA0                     PIE2            equ	4000	;# 
   340   000FA1                     PIR2            equ	4001	;# 
   341   000FA2                     IPR2            equ	4002	;# 
   342   000FA3                     PIE3            equ	4003	;# 
   343   000FA4                     PIR3            equ	4004	;# 
   344   000FA5                     IPR3            equ	4005	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FAB                     RCSTA1          equ	4011	;# 
   348   000FAB                     RCSTA           equ	4011	;# 
   349   000FAC                     TXSTA1          equ	4012	;# 
   350   000FAC                     TXSTA           equ	4012	;# 
   351   000FAD                     TXREG1          equ	4013	;# 
   352   000FAD                     TXREG           equ	4013	;# 
   353   000FAE                     RCREG1          equ	4014	;# 
   354   000FAE                     RCREG           equ	4014	;# 
   355   000FAF                     SPBRG1          equ	4015	;# 
   356   000FAF                     SPBRG           equ	4015	;# 
   357   000FB0                     PSPCON          equ	4016	;# 
   358   000FB1                     T3CON           equ	4017	;# 
   359   000FB2                     TMR3            equ	4018	;# 
   360   000FB2                     TMR3L           equ	4018	;# 
   361   000FB3                     TMR3H           equ	4019	;# 
   362   000FB4                     CMCON           equ	4020	;# 
   363   000FB5                     CVRCON          equ	4021	;# 
   364   000FB6                     ECCP1AS         equ	4022	;# 
   365   000FB7                     CCP3CON         equ	4023	;# 
   366   000FB7                     ECCP3CON        equ	4023	;# 
   367   000FB8                     CCPR3           equ	4024	;# 
   368   000FB8                     CCPR3L          equ	4024	;# 
   369   000FB9                     CCPR3H          equ	4025	;# 
   370   000FBA                     CCP2CON         equ	4026	;# 
   371   000FBA                     ECCP2CON        equ	4026	;# 
   372   000FBB                     CCPR2           equ	4027	;# 
   373   000FBB                     CCPR2L          equ	4027	;# 
   374   000FBC                     CCPR2H          equ	4028	;# 
   375   000FBD                     CCP1CON         equ	4029	;# 
   376   000FBD                     ECCP1CON        equ	4029	;# 
   377   000FBE                     CCPR1           equ	4030	;# 
   378   000FBE                     CCPR1L          equ	4030	;# 
   379   000FBF                     CCPR1H          equ	4031	;# 
   380   000FC0                     ADCON2          equ	4032	;# 
   381   000FC1                     ADCON1          equ	4033	;# 
   382   000FC2                     ADCON0          equ	4034	;# 
   383   000FC3                     ADRES           equ	4035	;# 
   384   000FC3                     ADRESL          equ	4035	;# 
   385   000FC4                     ADRESH          equ	4036	;# 
   386   000FC5                     SSP1CON2        equ	4037	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSP1CON1        equ	4038	;# 
   389   000FC6                     SSPCON1         equ	4038	;# 
   390   000FC7                     SSP1STAT        equ	4039	;# 
   391   000FC7                     SSPSTAT         equ	4039	;# 
   392   000FC8                     SSP1ADD         equ	4040	;# 
   393   000FC8                     SSPADD          equ	4040	;# 
   394   000FC9                     SSP1BUF         equ	4041	;# 
   395   000FC9                     SSPBUF          equ	4041	;# 
   396   000FCA                     T2CON           equ	4042	;# 
   397   000FCB                     PR2             equ	4043	;# 
   398   000FCC                     TMR2            equ	4044	;# 
   399   000FCD                     T1CON           equ	4045	;# 
   400   000FCE                     TMR1            equ	4046	;# 
   401   000FCE                     TMR1L           equ	4046	;# 
   402   000FCF                     TMR1H           equ	4047	;# 
   403   000FD0                     RCON            equ	4048	;# 
   404   000FD1                     WDTCON          equ	4049	;# 
   405   000FD2                     ECON1           equ	4050	;# 
   406   000FD3                     OSCCON          equ	4051	;# 
   407   000FD5                     T0CON           equ	4053	;# 
   408   000FD6                     TMR0            equ	4054	;# 
   409   000FD6                     TMR0L           equ	4054	;# 
   410   000FD7                     TMR0H           equ	4055	;# 
   411   000FD8                     STATUS          equ	4056	;# 
   412   000FD9                     FSR2            equ	4057	;# 
   413   000FD9                     FSR2L           equ	4057	;# 
   414   000FDA                     FSR2H           equ	4058	;# 
   415   000FDB                     PLUSW2          equ	4059	;# 
   416   000FDC                     PREINC2         equ	4060	;# 
   417   000FDD                     POSTDEC2        equ	4061	;# 
   418   000FDE                     POSTINC2        equ	4062	;# 
   419   000FDF                     INDF2           equ	4063	;# 
   420   000FE0                     BSR             equ	4064	;# 
   421   000FE1                     FSR1            equ	4065	;# 
   422   000FE1                     FSR1L           equ	4065	;# 
   423   000FE2                     FSR1H           equ	4066	;# 
   424   000FE3                     PLUSW1          equ	4067	;# 
   425   000FE4                     PREINC1         equ	4068	;# 
   426   000FE5                     POSTDEC1        equ	4069	;# 
   427   000FE6                     POSTINC1        equ	4070	;# 
   428   000FE7                     INDF1           equ	4071	;# 
   429   000FE8                     WREG            equ	4072	;# 
   430   000FE9                     FSR0            equ	4073	;# 
   431   000FE9                     FSR0L           equ	4073	;# 
   432   000FEA                     FSR0H           equ	4074	;# 
   433   000FEB                     PLUSW0          equ	4075	;# 
   434   000FEC                     PREINC0         equ	4076	;# 
   435   000FED                     POSTDEC0        equ	4077	;# 
   436   000FEE                     POSTINC0        equ	4078	;# 
   437   000FEF                     INDF0           equ	4079	;# 
   438   000FF0                     INTCON3         equ	4080	;# 
   439   000FF1                     INTCON2         equ	4081	;# 
   440   000FF2                     INTCON          equ	4082	;# 
   441   000FF3                     PROD            equ	4083	;# 
   442   000FF3                     PRODL           equ	4083	;# 
   443   000FF4                     PRODH           equ	4084	;# 
   444   000FF5                     TABLAT          equ	4085	;# 
   445   000FF6                     TBLPTR          equ	4086	;# 
   446   000FF6                     TBLPTRL         equ	4086	;# 
   447   000FF7                     TBLPTRH         equ	4087	;# 
   448   000FF8                     TBLPTRU         equ	4088	;# 
   449   000FF9                     PCLAT           equ	4089	;# 
   450   000FF9                     PC              equ	4089	;# 
   451   000FF9                     PCL             equ	4089	;# 
   452   000FFA                     PCLATH          equ	4090	;# 
   453   000FFB                     PCLATU          equ	4091	;# 
   454   000FFC                     STKPTR          equ	4092	;# 
   455   000FFD                     TOS             equ	4093	;# 
   456   000FFD                     TOSL            equ	4093	;# 
   457   000FFE                     TOSH            equ	4094	;# 
   458   000FFF                     TOSU            equ	4095	;# 
   459   000E80                     MAADR5          equ	3712	;# 
   460   000E81                     MAADR6          equ	3713	;# 
   461   000E82                     MAADR3          equ	3714	;# 
   462   000E83                     MAADR4          equ	3715	;# 
   463   000E84                     MAADR1          equ	3716	;# 
   464   000E85                     MAADR2          equ	3717	;# 
   465   000E8A                     MISTAT          equ	3722	;# 
   466   000E97                     EFLOCON         equ	3735	;# 
   467   000E98                     EPAUS           equ	3736	;# 
   468   000E98                     EPAUSL          equ	3736	;# 
   469   000E99                     EPAUSH          equ	3737	;# 
   470   000EA0                     MACON1          equ	3744	;# 
   471   000EA2                     MACON3          equ	3746	;# 
   472   000EA3                     MACON4          equ	3747	;# 
   473   000EA4                     MABBIPG         equ	3748	;# 
   474   000EA6                     MAIPG           equ	3750	;# 
   475   000EA6                     MAIPGL          equ	3750	;# 
   476   000EA7                     MAIPGH          equ	3751	;# 
   477   000EAA                     MAMXFL          equ	3754	;# 
   478   000EAA                     MAMXFLL         equ	3754	;# 
   479   000EAB                     MAMXFLH         equ	3755	;# 
   480   000EB2                     MICMD           equ	3762	;# 
   481   000EB4                     MIREGADR        equ	3764	;# 
   482   000EB6                     MIWR            equ	3766	;# 
   483   000EB6                     MIWRL           equ	3766	;# 
   484   000EB7                     MIWRH           equ	3767	;# 
   485   000EB8                     MIRD            equ	3768	;# 
   486   000EB8                     MIRDL           equ	3768	;# 
   487   000EB9                     MIRDH           equ	3769	;# 
   488   000EC0                     EHT0            equ	3776	;# 
   489   000EC1                     EHT1            equ	3777	;# 
   490   000EC2                     EHT2            equ	3778	;# 
   491   000EC3                     EHT3            equ	3779	;# 
   492   000EC4                     EHT4            equ	3780	;# 
   493   000EC5                     EHT5            equ	3781	;# 
   494   000EC6                     EHT6            equ	3782	;# 
   495   000EC7                     EHT7            equ	3783	;# 
   496   000EC8                     EPMM0           equ	3784	;# 
   497   000EC9                     EPMM1           equ	3785	;# 
   498   000ECA                     EPMM2           equ	3786	;# 
   499   000ECB                     EPMM3           equ	3787	;# 
   500   000ECC                     EPMM4           equ	3788	;# 
   501   000ECD                     EPMM5           equ	3789	;# 
   502   000ECE                     EPMM6           equ	3790	;# 
   503   000ECF                     EPMM7           equ	3791	;# 
   504   000ED0                     EPMCS           equ	3792	;# 
   505   000ED0                     EPMCSL          equ	3792	;# 
   506   000ED1                     EPMCSH          equ	3793	;# 
   507   000ED4                     EPMO            equ	3796	;# 
   508   000ED4                     EPMOL           equ	3796	;# 
   509   000ED5                     EPMOH           equ	3797	;# 
   510   000ED8                     ERXFCON         equ	3800	;# 
   511   000ED9                     EPKTCNT         equ	3801	;# 
   512   000EE2                     EWRPT           equ	3810	;# 
   513   000EE2                     EWRPTL          equ	3810	;# 
   514   000EE3                     EWRPTH          equ	3811	;# 
   515   000EE4                     ETXST           equ	3812	;# 
   516   000EE4                     ETXSTL          equ	3812	;# 
   517   000EE5                     ETXSTH          equ	3813	;# 
   518   000EE6                     ETXND           equ	3814	;# 
   519   000EE6                     ETXNDL          equ	3814	;# 
   520   000EE7                     ETXNDH          equ	3815	;# 
   521   000EE8                     ERXST           equ	3816	;# 
   522   000EE8                     ERXSTL          equ	3816	;# 
   523   000EE9                     ERXSTH          equ	3817	;# 
   524   000EEA                     ERXND           equ	3818	;# 
   525   000EEA                     ERXNDL          equ	3818	;# 
   526   000EEB                     ERXNDH          equ	3819	;# 
   527   000EEC                     ERXRDPT         equ	3820	;# 
   528   000EEC                     ERXRDPTL        equ	3820	;# 
   529   000EED                     ERXRDPTH        equ	3821	;# 
   530   000EEE                     ERXWRPT         equ	3822	;# 
   531   000EEE                     ERXWRPTL        equ	3822	;# 
   532   000EEF                     ERXWRPTH        equ	3823	;# 
   533   000EF0                     EDMAST          equ	3824	;# 
   534   000EF0                     EDMASTL         equ	3824	;# 
   535   000EF1                     EDMASTH         equ	3825	;# 
   536   000EF2                     EDMAND          equ	3826	;# 
   537   000EF2                     EDMANDL         equ	3826	;# 
   538   000EF3                     EDMANDH         equ	3827	;# 
   539   000EF4                     EDMADST         equ	3828	;# 
   540   000EF4                     EDMADSTL        equ	3828	;# 
   541   000EF5                     EDMADSTH        equ	3829	;# 
   542   000EF6                     EDMACS          equ	3830	;# 
   543   000EF6                     EDMACSL         equ	3830	;# 
   544   000EF7                     EDMACSH         equ	3831	;# 
   545   000EFB                     EIE             equ	3835	;# 
   546   000EFD                     ESTAT           equ	3837	;# 
   547   000EFE                     ECON2           equ	3838	;# 
   548   000F60                     EIR             equ	3936	;# 
   549   000F61                     EDATA           equ	3937	;# 
   550   000F62                     SSP2CON2        equ	3938	;# 
   551   000F63                     SSP2CON1        equ	3939	;# 
   552   000F64                     SSP2STAT        equ	3940	;# 
   553   000F65                     SSP2ADD         equ	3941	;# 
   554   000F66                     SSP2BUF         equ	3942	;# 
   555   000F67                     ECCP2DEL        equ	3943	;# 
   556   000F68                     ECCP2AS         equ	3944	;# 
   557   000F69                     ECCP3DEL        equ	3945	;# 
   558   000F6A                     ECCP3AS         equ	3946	;# 
   559   000F6B                     RCSTA2          equ	3947	;# 
   560   000F6C                     TXSTA2          equ	3948	;# 
   561   000F6D                     TXREG2          equ	3949	;# 
   562   000F6E                     RCREG2          equ	3950	;# 
   563   000F6F                     SPBRG2          equ	3951	;# 
   564   000F70                     CCP5CON         equ	3952	;# 
   565   000F71                     CCPR5           equ	3953	;# 
   566   000F71                     CCPR5L          equ	3953	;# 
   567   000F72                     CCPR5H          equ	3954	;# 
   568   000F73                     CCP4CON         equ	3955	;# 
   569   000F74                     CCPR4           equ	3956	;# 
   570   000F74                     CCPR4L          equ	3956	;# 
   571   000F75                     CCPR4H          equ	3957	;# 
   572   000F76                     T4CON           equ	3958	;# 
   573   000F77                     PR4             equ	3959	;# 
   574   000F78                     TMR4            equ	3960	;# 
   575   000F79                     ECCP1DEL        equ	3961	;# 
   576   000F7A                     ERDPT           equ	3962	;# 
   577   000F7A                     ERDPTL          equ	3962	;# 
   578   000F7B                     ERDPTH          equ	3963	;# 
   579   000F7C                     BAUDCON2        equ	3964	;# 
   580   000F7C                     BAUDCTL2        equ	3964	;# 
   581   000F7D                     SPBRGH2         equ	3965	;# 
   582   000F7E                     BAUDCON1        equ	3966	;# 
   583   000F7E                     BAUDCON         equ	3966	;# 
   584   000F7E                     BAUDCTL         equ	3966	;# 
   585   000F7E                     BAUDCTL1        equ	3966	;# 
   586   000F7F                     SPBRGH1         equ	3967	;# 
   587   000F7F                     SPBRGH          equ	3967	;# 
   588   000F80                     PORTA           equ	3968	;# 
   589   000F81                     PORTB           equ	3969	;# 
   590   000F82                     PORTC           equ	3970	;# 
   591   000F83                     PORTD           equ	3971	;# 
   592   000F84                     PORTE           equ	3972	;# 
   593   000F85                     PORTF           equ	3973	;# 
   594   000F86                     PORTG           equ	3974	;# 
   595   000F87                     PORTH           equ	3975	;# 
   596   000F88                     PORTJ           equ	3976	;# 
   597   000F89                     LATA            equ	3977	;# 
   598   000F8A                     LATB            equ	3978	;# 
   599   000F8B                     LATC            equ	3979	;# 
   600   000F8C                     LATD            equ	3980	;# 
   601   000F8D                     LATE            equ	3981	;# 
   602   000F8E                     LATF            equ	3982	;# 
   603   000F8F                     LATG            equ	3983	;# 
   604   000F90                     LATH            equ	3984	;# 
   605   000F91                     LATJ            equ	3985	;# 
   606   000F92                     TRISA           equ	3986	;# 
   607   000F92                     DDRA            equ	3986	;# 
   608   000F93                     TRISB           equ	3987	;# 
   609   000F93                     DDRB            equ	3987	;# 
   610   000F94                     TRISC           equ	3988	;# 
   611   000F94                     DDRC            equ	3988	;# 
   612   000F95                     TRISD           equ	3989	;# 
   613   000F95                     DDRD            equ	3989	;# 
   614   000F96                     TRISE           equ	3990	;# 
   615   000F96                     DDRE            equ	3990	;# 
   616   000F97                     TRISF           equ	3991	;# 
   617   000F97                     DDRF            equ	3991	;# 
   618   000F98                     TRISG           equ	3992	;# 
   619   000F98                     DDRG            equ	3992	;# 
   620   000F99                     TRISH           equ	3993	;# 
   621   000F99                     DDRH            equ	3993	;# 
   622   000F9A                     TRISJ           equ	3994	;# 
   623   000F9A                     DDRJ            equ	3994	;# 
   624   000F9B                     OSCTUNE         equ	3995	;# 
   625   000F9C                     MEMCON          equ	3996	;# 
   626   000F9D                     PIE1            equ	3997	;# 
   627   000F9E                     PIR1            equ	3998	;# 
   628   000F9F                     IPR1            equ	3999	;# 
   629   000FA0                     PIE2            equ	4000	;# 
   630   000FA1                     PIR2            equ	4001	;# 
   631   000FA2                     IPR2            equ	4002	;# 
   632   000FA3                     PIE3            equ	4003	;# 
   633   000FA4                     PIR3            equ	4004	;# 
   634   000FA5                     IPR3            equ	4005	;# 
   635   000FA6                     EECON1          equ	4006	;# 
   636   000FA7                     EECON2          equ	4007	;# 
   637   000FAB                     RCSTA1          equ	4011	;# 
   638   000FAB                     RCSTA           equ	4011	;# 
   639   000FAC                     TXSTA1          equ	4012	;# 
   640   000FAC                     TXSTA           equ	4012	;# 
   641   000FAD                     TXREG1          equ	4013	;# 
   642   000FAD                     TXREG           equ	4013	;# 
   643   000FAE                     RCREG1          equ	4014	;# 
   644   000FAE                     RCREG           equ	4014	;# 
   645   000FAF                     SPBRG1          equ	4015	;# 
   646   000FAF                     SPBRG           equ	4015	;# 
   647   000FB0                     PSPCON          equ	4016	;# 
   648   000FB1                     T3CON           equ	4017	;# 
   649   000FB2                     TMR3            equ	4018	;# 
   650   000FB2                     TMR3L           equ	4018	;# 
   651   000FB3                     TMR3H           equ	4019	;# 
   652   000FB4                     CMCON           equ	4020	;# 
   653   000FB5                     CVRCON          equ	4021	;# 
   654   000FB6                     ECCP1AS         equ	4022	;# 
   655   000FB7                     CCP3CON         equ	4023	;# 
   656   000FB7                     ECCP3CON        equ	4023	;# 
   657   000FB8                     CCPR3           equ	4024	;# 
   658   000FB8                     CCPR3L          equ	4024	;# 
   659   000FB9                     CCPR3H          equ	4025	;# 
   660   000FBA                     CCP2CON         equ	4026	;# 
   661   000FBA                     ECCP2CON        equ	4026	;# 
   662   000FBB                     CCPR2           equ	4027	;# 
   663   000FBB                     CCPR2L          equ	4027	;# 
   664   000FBC                     CCPR2H          equ	4028	;# 
   665   000FBD                     CCP1CON         equ	4029	;# 
   666   000FBD                     ECCP1CON        equ	4029	;# 
   667   000FBE                     CCPR1           equ	4030	;# 
   668   000FBE                     CCPR1L          equ	4030	;# 
   669   000FBF                     CCPR1H          equ	4031	;# 
   670   000FC0                     ADCON2          equ	4032	;# 
   671   000FC1                     ADCON1          equ	4033	;# 
   672   000FC2                     ADCON0          equ	4034	;# 
   673   000FC3                     ADRES           equ	4035	;# 
   674   000FC3                     ADRESL          equ	4035	;# 
   675   000FC4                     ADRESH          equ	4036	;# 
   676   000FC5                     SSP1CON2        equ	4037	;# 
   677   000FC5                     SSPCON2         equ	4037	;# 
   678   000FC6                     SSP1CON1        equ	4038	;# 
   679   000FC6                     SSPCON1         equ	4038	;# 
   680   000FC7                     SSP1STAT        equ	4039	;# 
   681   000FC7                     SSPSTAT         equ	4039	;# 
   682   000FC8                     SSP1ADD         equ	4040	;# 
   683   000FC8                     SSPADD          equ	4040	;# 
   684   000FC9                     SSP1BUF         equ	4041	;# 
   685   000FC9                     SSPBUF          equ	4041	;# 
   686   000FCA                     T2CON           equ	4042	;# 
   687   000FCB                     PR2             equ	4043	;# 
   688   000FCC                     TMR2            equ	4044	;# 
   689   000FCD                     T1CON           equ	4045	;# 
   690   000FCE                     TMR1            equ	4046	;# 
   691   000FCE                     TMR1L           equ	4046	;# 
   692   000FCF                     TMR1H           equ	4047	;# 
   693   000FD0                     RCON            equ	4048	;# 
   694   000FD1                     WDTCON          equ	4049	;# 
   695   000FD2                     ECON1           equ	4050	;# 
   696   000FD3                     OSCCON          equ	4051	;# 
   697   000FD5                     T0CON           equ	4053	;# 
   698   000FD6                     TMR0            equ	4054	;# 
   699   000FD6                     TMR0L           equ	4054	;# 
   700   000FD7                     TMR0H           equ	4055	;# 
   701   000FD8                     STATUS          equ	4056	;# 
   702   000FD9                     FSR2            equ	4057	;# 
   703   000FD9                     FSR2L           equ	4057	;# 
   704   000FDA                     FSR2H           equ	4058	;# 
   705   000FDB                     PLUSW2          equ	4059	;# 
   706   000FDC                     PREINC2         equ	4060	;# 
   707   000FDD                     POSTDEC2        equ	4061	;# 
   708   000FDE                     POSTINC2        equ	4062	;# 
   709   000FDF                     INDF2           equ	4063	;# 
   710   000FE0                     BSR             equ	4064	;# 
   711   000FE1                     FSR1            equ	4065	;# 
   712   000FE1                     FSR1L           equ	4065	;# 
   713   000FE2                     FSR1H           equ	4066	;# 
   714   000FE3                     PLUSW1          equ	4067	;# 
   715   000FE4                     PREINC1         equ	4068	;# 
   716   000FE5                     POSTDEC1        equ	4069	;# 
   717   000FE6                     POSTINC1        equ	4070	;# 
   718   000FE7                     INDF1           equ	4071	;# 
   719   000FE8                     WREG            equ	4072	;# 
   720   000FE9                     FSR0            equ	4073	;# 
   721   000FE9                     FSR0L           equ	4073	;# 
   722   000FEA                     FSR0H           equ	4074	;# 
   723   000FEB                     PLUSW0          equ	4075	;# 
   724   000FEC                     PREINC0         equ	4076	;# 
   725   000FED                     POSTDEC0        equ	4077	;# 
   726   000FEE                     POSTINC0        equ	4078	;# 
   727   000FEF                     INDF0           equ	4079	;# 
   728   000FF0                     INTCON3         equ	4080	;# 
   729   000FF1                     INTCON2         equ	4081	;# 
   730   000FF2                     INTCON          equ	4082	;# 
   731   000FF3                     PROD            equ	4083	;# 
   732   000FF3                     PRODL           equ	4083	;# 
   733   000FF4                     PRODH           equ	4084	;# 
   734   000FF5                     TABLAT          equ	4085	;# 
   735   000FF6                     TBLPTR          equ	4086	;# 
   736   000FF6                     TBLPTRL         equ	4086	;# 
   737   000FF7                     TBLPTRH         equ	4087	;# 
   738   000FF8                     TBLPTRU         equ	4088	;# 
   739   000FF9                     PCLAT           equ	4089	;# 
   740   000FF9                     PC              equ	4089	;# 
   741   000FF9                     PCL             equ	4089	;# 
   742   000FFA                     PCLATH          equ	4090	;# 
   743   000FFB                     PCLATU          equ	4091	;# 
   744   000FFC                     STKPTR          equ	4092	;# 
   745   000FFD                     TOS             equ	4093	;# 
   746   000FFD                     TOSL            equ	4093	;# 
   747   000FFE                     TOSH            equ	4094	;# 
   748   000FFF                     TOSU            equ	4095	;# 
   749   000E80                     MAADR5          equ	3712	;# 
   750   000E81                     MAADR6          equ	3713	;# 
   751   000E82                     MAADR3          equ	3714	;# 
   752   000E83                     MAADR4          equ	3715	;# 
   753   000E84                     MAADR1          equ	3716	;# 
   754   000E85                     MAADR2          equ	3717	;# 
   755   000E8A                     MISTAT          equ	3722	;# 
   756   000E97                     EFLOCON         equ	3735	;# 
   757   000E98                     EPAUS           equ	3736	;# 
   758   000E98                     EPAUSL          equ	3736	;# 
   759   000E99                     EPAUSH          equ	3737	;# 
   760   000EA0                     MACON1          equ	3744	;# 
   761   000EA2                     MACON3          equ	3746	;# 
   762   000EA3                     MACON4          equ	3747	;# 
   763   000EA4                     MABBIPG         equ	3748	;# 
   764   000EA6                     MAIPG           equ	3750	;# 
   765   000EA6                     MAIPGL          equ	3750	;# 
   766   000EA7                     MAIPGH          equ	3751	;# 
   767   000EAA                     MAMXFL          equ	3754	;# 
   768   000EAA                     MAMXFLL         equ	3754	;# 
   769   000EAB                     MAMXFLH         equ	3755	;# 
   770   000EB2                     MICMD           equ	3762	;# 
   771   000EB4                     MIREGADR        equ	3764	;# 
   772   000EB6                     MIWR            equ	3766	;# 
   773   000EB6                     MIWRL           equ	3766	;# 
   774   000EB7                     MIWRH           equ	3767	;# 
   775   000EB8                     MIRD            equ	3768	;# 
   776   000EB8                     MIRDL           equ	3768	;# 
   777   000EB9                     MIRDH           equ	3769	;# 
   778   000EC0                     EHT0            equ	3776	;# 
   779   000EC1                     EHT1            equ	3777	;# 
   780   000EC2                     EHT2            equ	3778	;# 
   781   000EC3                     EHT3            equ	3779	;# 
   782   000EC4                     EHT4            equ	3780	;# 
   783   000EC5                     EHT5            equ	3781	;# 
   784   000EC6                     EHT6            equ	3782	;# 
   785   000EC7                     EHT7            equ	3783	;# 
   786   000EC8                     EPMM0           equ	3784	;# 
   787   000EC9                     EPMM1           equ	3785	;# 
   788   000ECA                     EPMM2           equ	3786	;# 
   789   000ECB                     EPMM3           equ	3787	;# 
   790   000ECC                     EPMM4           equ	3788	;# 
   791   000ECD                     EPMM5           equ	3789	;# 
   792   000ECE                     EPMM6           equ	3790	;# 
   793   000ECF                     EPMM7           equ	3791	;# 
   794   000ED0                     EPMCS           equ	3792	;# 
   795   000ED0                     EPMCSL          equ	3792	;# 
   796   000ED1                     EPMCSH          equ	3793	;# 
   797   000ED4                     EPMO            equ	3796	;# 
   798   000ED4                     EPMOL           equ	3796	;# 
   799   000ED5                     EPMOH           equ	3797	;# 
   800   000ED8                     ERXFCON         equ	3800	;# 
   801   000ED9                     EPKTCNT         equ	3801	;# 
   802   000EE2                     EWRPT           equ	3810	;# 
   803   000EE2                     EWRPTL          equ	3810	;# 
   804   000EE3                     EWRPTH          equ	3811	;# 
   805   000EE4                     ETXST           equ	3812	;# 
   806   000EE4                     ETXSTL          equ	3812	;# 
   807   000EE5                     ETXSTH          equ	3813	;# 
   808   000EE6                     ETXND           equ	3814	;# 
   809   000EE6                     ETXNDL          equ	3814	;# 
   810   000EE7                     ETXNDH          equ	3815	;# 
   811   000EE8                     ERXST           equ	3816	;# 
   812   000EE8                     ERXSTL          equ	3816	;# 
   813   000EE9                     ERXSTH          equ	3817	;# 
   814   000EEA                     ERXND           equ	3818	;# 
   815   000EEA                     ERXNDL          equ	3818	;# 
   816   000EEB                     ERXNDH          equ	3819	;# 
   817   000EEC                     ERXRDPT         equ	3820	;# 
   818   000EEC                     ERXRDPTL        equ	3820	;# 
   819   000EED                     ERXRDPTH        equ	3821	;# 
   820   000EEE                     ERXWRPT         equ	3822	;# 
   821   000EEE                     ERXWRPTL        equ	3822	;# 
   822   000EEF                     ERXWRPTH        equ	3823	;# 
   823   000EF0                     EDMAST          equ	3824	;# 
   824   000EF0                     EDMASTL         equ	3824	;# 
   825   000EF1                     EDMASTH         equ	3825	;# 
   826   000EF2                     EDMAND          equ	3826	;# 
   827   000EF2                     EDMANDL         equ	3826	;# 
   828   000EF3                     EDMANDH         equ	3827	;# 
   829   000EF4                     EDMADST         equ	3828	;# 
   830   000EF4                     EDMADSTL        equ	3828	;# 
   831   000EF5                     EDMADSTH        equ	3829	;# 
   832   000EF6                     EDMACS          equ	3830	;# 
   833   000EF6                     EDMACSL         equ	3830	;# 
   834   000EF7                     EDMACSH         equ	3831	;# 
   835   000EFB                     EIE             equ	3835	;# 
   836   000EFD                     ESTAT           equ	3837	;# 
   837   000EFE                     ECON2           equ	3838	;# 
   838   000F60                     EIR             equ	3936	;# 
   839   000F61                     EDATA           equ	3937	;# 
   840   000F62                     SSP2CON2        equ	3938	;# 
   841   000F63                     SSP2CON1        equ	3939	;# 
   842   000F64                     SSP2STAT        equ	3940	;# 
   843   000F65                     SSP2ADD         equ	3941	;# 
   844   000F66                     SSP2BUF         equ	3942	;# 
   845   000F67                     ECCP2DEL        equ	3943	;# 
   846   000F68                     ECCP2AS         equ	3944	;# 
   847   000F69                     ECCP3DEL        equ	3945	;# 
   848   000F6A                     ECCP3AS         equ	3946	;# 
   849   000F6B                     RCSTA2          equ	3947	;# 
   850   000F6C                     TXSTA2          equ	3948	;# 
   851   000F6D                     TXREG2          equ	3949	;# 
   852   000F6E                     RCREG2          equ	3950	;# 
   853   000F6F                     SPBRG2          equ	3951	;# 
   854   000F70                     CCP5CON         equ	3952	;# 
   855   000F71                     CCPR5           equ	3953	;# 
   856   000F71                     CCPR5L          equ	3953	;# 
   857   000F72                     CCPR5H          equ	3954	;# 
   858   000F73                     CCP4CON         equ	3955	;# 
   859   000F74                     CCPR4           equ	3956	;# 
   860   000F74                     CCPR4L          equ	3956	;# 
   861   000F75                     CCPR4H          equ	3957	;# 
   862   000F76                     T4CON           equ	3958	;# 
   863   000F77                     PR4             equ	3959	;# 
   864   000F78                     TMR4            equ	3960	;# 
   865   000F79                     ECCP1DEL        equ	3961	;# 
   866   000F7A                     ERDPT           equ	3962	;# 
   867   000F7A                     ERDPTL          equ	3962	;# 
   868   000F7B                     ERDPTH          equ	3963	;# 
   869   000F7C                     BAUDCON2        equ	3964	;# 
   870   000F7C                     BAUDCTL2        equ	3964	;# 
   871   000F7D                     SPBRGH2         equ	3965	;# 
   872   000F7E                     BAUDCON1        equ	3966	;# 
   873   000F7E                     BAUDCON         equ	3966	;# 
   874   000F7E                     BAUDCTL         equ	3966	;# 
   875   000F7E                     BAUDCTL1        equ	3966	;# 
   876   000F7F                     SPBRGH1         equ	3967	;# 
   877   000F7F                     SPBRGH          equ	3967	;# 
   878   000F80                     PORTA           equ	3968	;# 
   879   000F81                     PORTB           equ	3969	;# 
   880   000F82                     PORTC           equ	3970	;# 
   881   000F83                     PORTD           equ	3971	;# 
   882   000F84                     PORTE           equ	3972	;# 
   883   000F85                     PORTF           equ	3973	;# 
   884   000F86                     PORTG           equ	3974	;# 
   885   000F87                     PORTH           equ	3975	;# 
   886   000F88                     PORTJ           equ	3976	;# 
   887   000F89                     LATA            equ	3977	;# 
   888   000F8A                     LATB            equ	3978	;# 
   889   000F8B                     LATC            equ	3979	;# 
   890   000F8C                     LATD            equ	3980	;# 
   891   000F8D                     LATE            equ	3981	;# 
   892   000F8E                     LATF            equ	3982	;# 
   893   000F8F                     LATG            equ	3983	;# 
   894   000F90                     LATH            equ	3984	;# 
   895   000F91                     LATJ            equ	3985	;# 
   896   000F92                     TRISA           equ	3986	;# 
   897   000F92                     DDRA            equ	3986	;# 
   898   000F93                     TRISB           equ	3987	;# 
   899   000F93                     DDRB            equ	3987	;# 
   900   000F94                     TRISC           equ	3988	;# 
   901   000F94                     DDRC            equ	3988	;# 
   902   000F95                     TRISD           equ	3989	;# 
   903   000F95                     DDRD            equ	3989	;# 
   904   000F96                     TRISE           equ	3990	;# 
   905   000F96                     DDRE            equ	3990	;# 
   906   000F97                     TRISF           equ	3991	;# 
   907   000F97                     DDRF            equ	3991	;# 
   908   000F98                     TRISG           equ	3992	;# 
   909   000F98                     DDRG            equ	3992	;# 
   910   000F99                     TRISH           equ	3993	;# 
   911   000F99                     DDRH            equ	3993	;# 
   912   000F9A                     TRISJ           equ	3994	;# 
   913   000F9A                     DDRJ            equ	3994	;# 
   914   000F9B                     OSCTUNE         equ	3995	;# 
   915   000F9C                     MEMCON          equ	3996	;# 
   916   000F9D                     PIE1            equ	3997	;# 
   917   000F9E                     PIR1            equ	3998	;# 
   918   000F9F                     IPR1            equ	3999	;# 
   919   000FA0                     PIE2            equ	4000	;# 
   920   000FA1                     PIR2            equ	4001	;# 
   921   000FA2                     IPR2            equ	4002	;# 
   922   000FA3                     PIE3            equ	4003	;# 
   923   000FA4                     PIR3            equ	4004	;# 
   924   000FA5                     IPR3            equ	4005	;# 
   925   000FA6                     EECON1          equ	4006	;# 
   926   000FA7                     EECON2          equ	4007	;# 
   927   000FAB                     RCSTA1          equ	4011	;# 
   928   000FAB                     RCSTA           equ	4011	;# 
   929   000FAC                     TXSTA1          equ	4012	;# 
   930   000FAC                     TXSTA           equ	4012	;# 
   931   000FAD                     TXREG1          equ	4013	;# 
   932   000FAD                     TXREG           equ	4013	;# 
   933   000FAE                     RCREG1          equ	4014	;# 
   934   000FAE                     RCREG           equ	4014	;# 
   935   000FAF                     SPBRG1          equ	4015	;# 
   936   000FAF                     SPBRG           equ	4015	;# 
   937   000FB0                     PSPCON          equ	4016	;# 
   938   000FB1                     T3CON           equ	4017	;# 
   939   000FB2                     TMR3            equ	4018	;# 
   940   000FB2                     TMR3L           equ	4018	;# 
   941   000FB3                     TMR3H           equ	4019	;# 
   942   000FB4                     CMCON           equ	4020	;# 
   943   000FB5                     CVRCON          equ	4021	;# 
   944   000FB6                     ECCP1AS         equ	4022	;# 
   945   000FB7                     CCP3CON         equ	4023	;# 
   946   000FB7                     ECCP3CON        equ	4023	;# 
   947   000FB8                     CCPR3           equ	4024	;# 
   948   000FB8                     CCPR3L          equ	4024	;# 
   949   000FB9                     CCPR3H          equ	4025	;# 
   950   000FBA                     CCP2CON         equ	4026	;# 
   951   000FBA                     ECCP2CON        equ	4026	;# 
   952   000FBB                     CCPR2           equ	4027	;# 
   953   000FBB                     CCPR2L          equ	4027	;# 
   954   000FBC                     CCPR2H          equ	4028	;# 
   955   000FBD                     CCP1CON         equ	4029	;# 
   956   000FBD                     ECCP1CON        equ	4029	;# 
   957   000FBE                     CCPR1           equ	4030	;# 
   958   000FBE                     CCPR1L          equ	4030	;# 
   959   000FBF                     CCPR1H          equ	4031	;# 
   960   000FC0                     ADCON2          equ	4032	;# 
   961   000FC1                     ADCON1          equ	4033	;# 
   962   000FC2                     ADCON0          equ	4034	;# 
   963   000FC3                     ADRES           equ	4035	;# 
   964   000FC3                     ADRESL          equ	4035	;# 
   965   000FC4                     ADRESH          equ	4036	;# 
   966   000FC5                     SSP1CON2        equ	4037	;# 
   967   000FC5                     SSPCON2         equ	4037	;# 
   968   000FC6                     SSP1CON1        equ	4038	;# 
   969   000FC6                     SSPCON1         equ	4038	;# 
   970   000FC7                     SSP1STAT        equ	4039	;# 
   971   000FC7                     SSPSTAT         equ	4039	;# 
   972   000FC8                     SSP1ADD         equ	4040	;# 
   973   000FC8                     SSPADD          equ	4040	;# 
   974   000FC9                     SSP1BUF         equ	4041	;# 
   975   000FC9                     SSPBUF          equ	4041	;# 
   976   000FCA                     T2CON           equ	4042	;# 
   977   000FCB                     PR2             equ	4043	;# 
   978   000FCC                     TMR2            equ	4044	;# 
   979   000FCD                     T1CON           equ	4045	;# 
   980   000FCE                     TMR1            equ	4046	;# 
   981   000FCE                     TMR1L           equ	4046	;# 
   982   000FCF                     TMR1H           equ	4047	;# 
   983   000FD0                     RCON            equ	4048	;# 
   984   000FD1                     WDTCON          equ	4049	;# 
   985   000FD2                     ECON1           equ	4050	;# 
   986   000FD3                     OSCCON          equ	4051	;# 
   987   000FD5                     T0CON           equ	4053	;# 
   988   000FD6                     TMR0            equ	4054	;# 
   989   000FD6                     TMR0L           equ	4054	;# 
   990   000FD7                     TMR0H           equ	4055	;# 
   991   000FD8                     STATUS          equ	4056	;# 
   992   000FD9                     FSR2            equ	4057	;# 
   993   000FD9                     FSR2L           equ	4057	;# 
   994   000FDA                     FSR2H           equ	4058	;# 
   995   000FDB                     PLUSW2          equ	4059	;# 
   996   000FDC                     PREINC2         equ	4060	;# 
   997   000FDD                     POSTDEC2        equ	4061	;# 
   998   000FDE                     POSTINC2        equ	4062	;# 
   999   000FDF                     INDF2           equ	4063	;# 
  1000   000FE0                     BSR             equ	4064	;# 
  1001   000FE1                     FSR1            equ	4065	;# 
  1002   000FE1                     FSR1L           equ	4065	;# 
  1003   000FE2                     FSR1H           equ	4066	;# 
  1004   000FE3                     PLUSW1          equ	4067	;# 
  1005   000FE4                     PREINC1         equ	4068	;# 
  1006   000FE5                     POSTDEC1        equ	4069	;# 
  1007   000FE6                     POSTINC1        equ	4070	;# 
  1008   000FE7                     INDF1           equ	4071	;# 
  1009   000FE8                     WREG            equ	4072	;# 
  1010   000FE9                     FSR0            equ	4073	;# 
  1011   000FE9                     FSR0L           equ	4073	;# 
  1012   000FEA                     FSR0H           equ	4074	;# 
  1013   000FEB                     PLUSW0          equ	4075	;# 
  1014   000FEC                     PREINC0         equ	4076	;# 
  1015   000FED                     POSTDEC0        equ	4077	;# 
  1016   000FEE                     POSTINC0        equ	4078	;# 
  1017   000FEF                     INDF0           equ	4079	;# 
  1018   000FF0                     INTCON3         equ	4080	;# 
  1019   000FF1                     INTCON2         equ	4081	;# 
  1020   000FF2                     INTCON          equ	4082	;# 
  1021   000FF3                     PROD            equ	4083	;# 
  1022   000FF3                     PRODL           equ	4083	;# 
  1023   000FF4                     PRODH           equ	4084	;# 
  1024   000FF5                     TABLAT          equ	4085	;# 
  1025   000FF6                     TBLPTR          equ	4086	;# 
  1026   000FF6                     TBLPTRL         equ	4086	;# 
  1027   000FF7                     TBLPTRH         equ	4087	;# 
  1028   000FF8                     TBLPTRU         equ	4088	;# 
  1029   000FF9                     PCLAT           equ	4089	;# 
  1030   000FF9                     PC              equ	4089	;# 
  1031   000FF9                     PCL             equ	4089	;# 
  1032   000FFA                     PCLATH          equ	4090	;# 
  1033   000FFB                     PCLATU          equ	4091	;# 
  1034   000FFC                     STKPTR          equ	4092	;# 
  1035   000FFD                     TOS             equ	4093	;# 
  1036   000FFD                     TOSL            equ	4093	;# 
  1037   000FFE                     TOSH            equ	4094	;# 
  1038   000FFF                     TOSU            equ	4095	;# 
  1039   000E80                     MAADR5          equ	3712	;# 
  1040   000E81                     MAADR6          equ	3713	;# 
  1041   000E82                     MAADR3          equ	3714	;# 
  1042   000E83                     MAADR4          equ	3715	;# 
  1043   000E84                     MAADR1          equ	3716	;# 
  1044   000E85                     MAADR2          equ	3717	;# 
  1045   000E8A                     MISTAT          equ	3722	;# 
  1046   000E97                     EFLOCON         equ	3735	;# 
  1047   000E98                     EPAUS           equ	3736	;# 
  1048   000E98                     EPAUSL          equ	3736	;# 
  1049   000E99                     EPAUSH          equ	3737	;# 
  1050   000EA0                     MACON1          equ	3744	;# 
  1051   000EA2                     MACON3          equ	3746	;# 
  1052   000EA3                     MACON4          equ	3747	;# 
  1053   000EA4                     MABBIPG         equ	3748	;# 
  1054   000EA6                     MAIPG           equ	3750	;# 
  1055   000EA6                     MAIPGL          equ	3750	;# 
  1056   000EA7                     MAIPGH          equ	3751	;# 
  1057   000EAA                     MAMXFL          equ	3754	;# 
  1058   000EAA                     MAMXFLL         equ	3754	;# 
  1059   000EAB                     MAMXFLH         equ	3755	;# 
  1060   000EB2                     MICMD           equ	3762	;# 
  1061   000EB4                     MIREGADR        equ	3764	;# 
  1062   000EB6                     MIWR            equ	3766	;# 
  1063   000EB6                     MIWRL           equ	3766	;# 
  1064   000EB7                     MIWRH           equ	3767	;# 
  1065   000EB8                     MIRD            equ	3768	;# 
  1066   000EB8                     MIRDL           equ	3768	;# 
  1067   000EB9                     MIRDH           equ	3769	;# 
  1068   000EC0                     EHT0            equ	3776	;# 
  1069   000EC1                     EHT1            equ	3777	;# 
  1070   000EC2                     EHT2            equ	3778	;# 
  1071   000EC3                     EHT3            equ	3779	;# 
  1072   000EC4                     EHT4            equ	3780	;# 
  1073   000EC5                     EHT5            equ	3781	;# 
  1074   000EC6                     EHT6            equ	3782	;# 
  1075   000EC7                     EHT7            equ	3783	;# 
  1076   000EC8                     EPMM0           equ	3784	;# 
  1077   000EC9                     EPMM1           equ	3785	;# 
  1078   000ECA                     EPMM2           equ	3786	;# 
  1079   000ECB                     EPMM3           equ	3787	;# 
  1080   000ECC                     EPMM4           equ	3788	;# 
  1081   000ECD                     EPMM5           equ	3789	;# 
  1082   000ECE                     EPMM6           equ	3790	;# 
  1083   000ECF                     EPMM7           equ	3791	;# 
  1084   000ED0                     EPMCS           equ	3792	;# 
  1085   000ED0                     EPMCSL          equ	3792	;# 
  1086   000ED1                     EPMCSH          equ	3793	;# 
  1087   000ED4                     EPMO            equ	3796	;# 
  1088   000ED4                     EPMOL           equ	3796	;# 
  1089   000ED5                     EPMOH           equ	3797	;# 
  1090   000ED8                     ERXFCON         equ	3800	;# 
  1091   000ED9                     EPKTCNT         equ	3801	;# 
  1092   000EE2                     EWRPT           equ	3810	;# 
  1093   000EE2                     EWRPTL          equ	3810	;# 
  1094   000EE3                     EWRPTH          equ	3811	;# 
  1095   000EE4                     ETXST           equ	3812	;# 
  1096   000EE4                     ETXSTL          equ	3812	;# 
  1097   000EE5                     ETXSTH          equ	3813	;# 
  1098   000EE6                     ETXND           equ	3814	;# 
  1099   000EE6                     ETXNDL          equ	3814	;# 
  1100   000EE7                     ETXNDH          equ	3815	;# 
  1101   000EE8                     ERXST           equ	3816	;# 
  1102   000EE8                     ERXSTL          equ	3816	;# 
  1103   000EE9                     ERXSTH          equ	3817	;# 
  1104   000EEA                     ERXND           equ	3818	;# 
  1105   000EEA                     ERXNDL          equ	3818	;# 
  1106   000EEB                     ERXNDH          equ	3819	;# 
  1107   000EEC                     ERXRDPT         equ	3820	;# 
  1108   000EEC                     ERXRDPTL        equ	3820	;# 
  1109   000EED                     ERXRDPTH        equ	3821	;# 
  1110   000EEE                     ERXWRPT         equ	3822	;# 
  1111   000EEE                     ERXWRPTL        equ	3822	;# 
  1112   000EEF                     ERXWRPTH        equ	3823	;# 
  1113   000EF0                     EDMAST          equ	3824	;# 
  1114   000EF0                     EDMASTL         equ	3824	;# 
  1115   000EF1                     EDMASTH         equ	3825	;# 
  1116   000EF2                     EDMAND          equ	3826	;# 
  1117   000EF2                     EDMANDL         equ	3826	;# 
  1118   000EF3                     EDMANDH         equ	3827	;# 
  1119   000EF4                     EDMADST         equ	3828	;# 
  1120   000EF4                     EDMADSTL        equ	3828	;# 
  1121   000EF5                     EDMADSTH        equ	3829	;# 
  1122   000EF6                     EDMACS          equ	3830	;# 
  1123   000EF6                     EDMACSL         equ	3830	;# 
  1124   000EF7                     EDMACSH         equ	3831	;# 
  1125   000EFB                     EIE             equ	3835	;# 
  1126   000EFD                     ESTAT           equ	3837	;# 
  1127   000EFE                     ECON2           equ	3838	;# 
  1128   000F60                     EIR             equ	3936	;# 
  1129   000F61                     EDATA           equ	3937	;# 
  1130   000F62                     SSP2CON2        equ	3938	;# 
  1131   000F63                     SSP2CON1        equ	3939	;# 
  1132   000F64                     SSP2STAT        equ	3940	;# 
  1133   000F65                     SSP2ADD         equ	3941	;# 
  1134   000F66                     SSP2BUF         equ	3942	;# 
  1135   000F67                     ECCP2DEL        equ	3943	;# 
  1136   000F68                     ECCP2AS         equ	3944	;# 
  1137   000F69                     ECCP3DEL        equ	3945	;# 
  1138   000F6A                     ECCP3AS         equ	3946	;# 
  1139   000F6B                     RCSTA2          equ	3947	;# 
  1140   000F6C                     TXSTA2          equ	3948	;# 
  1141   000F6D                     TXREG2          equ	3949	;# 
  1142   000F6E                     RCREG2          equ	3950	;# 
  1143   000F6F                     SPBRG2          equ	3951	;# 
  1144   000F70                     CCP5CON         equ	3952	;# 
  1145   000F71                     CCPR5           equ	3953	;# 
  1146   000F71                     CCPR5L          equ	3953	;# 
  1147   000F72                     CCPR5H          equ	3954	;# 
  1148   000F73                     CCP4CON         equ	3955	;# 
  1149   000F74                     CCPR4           equ	3956	;# 
  1150   000F74                     CCPR4L          equ	3956	;# 
  1151   000F75                     CCPR4H          equ	3957	;# 
  1152   000F76                     T4CON           equ	3958	;# 
  1153   000F77                     PR4             equ	3959	;# 
  1154   000F78                     TMR4            equ	3960	;# 
  1155   000F79                     ECCP1DEL        equ	3961	;# 
  1156   000F7A                     ERDPT           equ	3962	;# 
  1157   000F7A                     ERDPTL          equ	3962	;# 
  1158   000F7B                     ERDPTH          equ	3963	;# 
  1159   000F7C                     BAUDCON2        equ	3964	;# 
  1160   000F7C                     BAUDCTL2        equ	3964	;# 
  1161   000F7D                     SPBRGH2         equ	3965	;# 
  1162   000F7E                     BAUDCON1        equ	3966	;# 
  1163   000F7E                     BAUDCON         equ	3966	;# 
  1164   000F7E                     BAUDCTL         equ	3966	;# 
  1165   000F7E                     BAUDCTL1        equ	3966	;# 
  1166   000F7F                     SPBRGH1         equ	3967	;# 
  1167   000F7F                     SPBRGH          equ	3967	;# 
  1168   000F80                     PORTA           equ	3968	;# 
  1169   000F81                     PORTB           equ	3969	;# 
  1170   000F82                     PORTC           equ	3970	;# 
  1171   000F83                     PORTD           equ	3971	;# 
  1172   000F84                     PORTE           equ	3972	;# 
  1173   000F85                     PORTF           equ	3973	;# 
  1174   000F86                     PORTG           equ	3974	;# 
  1175   000F87                     PORTH           equ	3975	;# 
  1176   000F88                     PORTJ           equ	3976	;# 
  1177   000F89                     LATA            equ	3977	;# 
  1178   000F8A                     LATB            equ	3978	;# 
  1179   000F8B                     LATC            equ	3979	;# 
  1180   000F8C                     LATD            equ	3980	;# 
  1181   000F8D                     LATE            equ	3981	;# 
  1182   000F8E                     LATF            equ	3982	;# 
  1183   000F8F                     LATG            equ	3983	;# 
  1184   000F90                     LATH            equ	3984	;# 
  1185   000F91                     LATJ            equ	3985	;# 
  1186   000F92                     TRISA           equ	3986	;# 
  1187   000F92                     DDRA            equ	3986	;# 
  1188   000F93                     TRISB           equ	3987	;# 
  1189   000F93                     DDRB            equ	3987	;# 
  1190   000F94                     TRISC           equ	3988	;# 
  1191   000F94                     DDRC            equ	3988	;# 
  1192   000F95                     TRISD           equ	3989	;# 
  1193   000F95                     DDRD            equ	3989	;# 
  1194   000F96                     TRISE           equ	3990	;# 
  1195   000F96                     DDRE            equ	3990	;# 
  1196   000F97                     TRISF           equ	3991	;# 
  1197   000F97                     DDRF            equ	3991	;# 
  1198   000F98                     TRISG           equ	3992	;# 
  1199   000F98                     DDRG            equ	3992	;# 
  1200   000F99                     TRISH           equ	3993	;# 
  1201   000F99                     DDRH            equ	3993	;# 
  1202   000F9A                     TRISJ           equ	3994	;# 
  1203   000F9A                     DDRJ            equ	3994	;# 
  1204   000F9B                     OSCTUNE         equ	3995	;# 
  1205   000F9C                     MEMCON          equ	3996	;# 
  1206   000F9D                     PIE1            equ	3997	;# 
  1207   000F9E                     PIR1            equ	3998	;# 
  1208   000F9F                     IPR1            equ	3999	;# 
  1209   000FA0                     PIE2            equ	4000	;# 
  1210   000FA1                     PIR2            equ	4001	;# 
  1211   000FA2                     IPR2            equ	4002	;# 
  1212   000FA3                     PIE3            equ	4003	;# 
  1213   000FA4                     PIR3            equ	4004	;# 
  1214   000FA5                     IPR3            equ	4005	;# 
  1215   000FA6                     EECON1          equ	4006	;# 
  1216   000FA7                     EECON2          equ	4007	;# 
  1217   000FAB                     RCSTA1          equ	4011	;# 
  1218   000FAB                     RCSTA           equ	4011	;# 
  1219   000FAC                     TXSTA1          equ	4012	;# 
  1220   000FAC                     TXSTA           equ	4012	;# 
  1221   000FAD                     TXREG1          equ	4013	;# 
  1222   000FAD                     TXREG           equ	4013	;# 
  1223   000FAE                     RCREG1          equ	4014	;# 
  1224   000FAE                     RCREG           equ	4014	;# 
  1225   000FAF                     SPBRG1          equ	4015	;# 
  1226   000FAF                     SPBRG           equ	4015	;# 
  1227   000FB0                     PSPCON          equ	4016	;# 
  1228   000FB1                     T3CON           equ	4017	;# 
  1229   000FB2                     TMR3            equ	4018	;# 
  1230   000FB2                     TMR3L           equ	4018	;# 
  1231   000FB3                     TMR3H           equ	4019	;# 
  1232   000FB4                     CMCON           equ	4020	;# 
  1233   000FB5                     CVRCON          equ	4021	;# 
  1234   000FB6                     ECCP1AS         equ	4022	;# 
  1235   000FB7                     CCP3CON         equ	4023	;# 
  1236   000FB7                     ECCP3CON        equ	4023	;# 
  1237   000FB8                     CCPR3           equ	4024	;# 
  1238   000FB8                     CCPR3L          equ	4024	;# 
  1239   000FB9                     CCPR3H          equ	4025	;# 
  1240   000FBA                     CCP2CON         equ	4026	;# 
  1241   000FBA                     ECCP2CON        equ	4026	;# 
  1242   000FBB                     CCPR2           equ	4027	;# 
  1243   000FBB                     CCPR2L          equ	4027	;# 
  1244   000FBC                     CCPR2H          equ	4028	;# 
  1245   000FBD                     CCP1CON         equ	4029	;# 
  1246   000FBD                     ECCP1CON        equ	4029	;# 
  1247   000FBE                     CCPR1           equ	4030	;# 
  1248   000FBE                     CCPR1L          equ	4030	;# 
  1249   000FBF                     CCPR1H          equ	4031	;# 
  1250   000FC0                     ADCON2          equ	4032	;# 
  1251   000FC1                     ADCON1          equ	4033	;# 
  1252   000FC2                     ADCON0          equ	4034	;# 
  1253   000FC3                     ADRES           equ	4035	;# 
  1254   000FC3                     ADRESL          equ	4035	;# 
  1255   000FC4                     ADRESH          equ	4036	;# 
  1256   000FC5                     SSP1CON2        equ	4037	;# 
  1257   000FC5                     SSPCON2         equ	4037	;# 
  1258   000FC6                     SSP1CON1        equ	4038	;# 
  1259   000FC6                     SSPCON1         equ	4038	;# 
  1260   000FC7                     SSP1STAT        equ	4039	;# 
  1261   000FC7                     SSPSTAT         equ	4039	;# 
  1262   000FC8                     SSP1ADD         equ	4040	;# 
  1263   000FC8                     SSPADD          equ	4040	;# 
  1264   000FC9                     SSP1BUF         equ	4041	;# 
  1265   000FC9                     SSPBUF          equ	4041	;# 
  1266   000FCA                     T2CON           equ	4042	;# 
  1267   000FCB                     PR2             equ	4043	;# 
  1268   000FCC                     TMR2            equ	4044	;# 
  1269   000FCD                     T1CON           equ	4045	;# 
  1270   000FCE                     TMR1            equ	4046	;# 
  1271   000FCE                     TMR1L           equ	4046	;# 
  1272   000FCF                     TMR1H           equ	4047	;# 
  1273   000FD0                     RCON            equ	4048	;# 
  1274   000FD1                     WDTCON          equ	4049	;# 
  1275   000FD2                     ECON1           equ	4050	;# 
  1276   000FD3                     OSCCON          equ	4051	;# 
  1277   000FD5                     T0CON           equ	4053	;# 
  1278   000FD6                     TMR0            equ	4054	;# 
  1279   000FD6                     TMR0L           equ	4054	;# 
  1280   000FD7                     TMR0H           equ	4055	;# 
  1281   000FD8                     STATUS          equ	4056	;# 
  1282   000FD9                     FSR2            equ	4057	;# 
  1283   000FD9                     FSR2L           equ	4057	;# 
  1284   000FDA                     FSR2H           equ	4058	;# 
  1285   000FDB                     PLUSW2          equ	4059	;# 
  1286   000FDC                     PREINC2         equ	4060	;# 
  1287   000FDD                     POSTDEC2        equ	4061	;# 
  1288   000FDE                     POSTINC2        equ	4062	;# 
  1289   000FDF                     INDF2           equ	4063	;# 
  1290   000FE0                     BSR             equ	4064	;# 
  1291   000FE1                     FSR1            equ	4065	;# 
  1292   000FE1                     FSR1L           equ	4065	;# 
  1293   000FE2                     FSR1H           equ	4066	;# 
  1294   000FE3                     PLUSW1          equ	4067	;# 
  1295   000FE4                     PREINC1         equ	4068	;# 
  1296   000FE5                     POSTDEC1        equ	4069	;# 
  1297   000FE6                     POSTINC1        equ	4070	;# 
  1298   000FE7                     INDF1           equ	4071	;# 
  1299   000FE8                     WREG            equ	4072	;# 
  1300   000FE9                     FSR0            equ	4073	;# 
  1301   000FE9                     FSR0L           equ	4073	;# 
  1302   000FEA                     FSR0H           equ	4074	;# 
  1303   000FEB                     PLUSW0          equ	4075	;# 
  1304   000FEC                     PREINC0         equ	4076	;# 
  1305   000FED                     POSTDEC0        equ	4077	;# 
  1306   000FEE                     POSTINC0        equ	4078	;# 
  1307   000FEF                     INDF0           equ	4079	;# 
  1308   000FF0                     INTCON3         equ	4080	;# 
  1309   000FF1                     INTCON2         equ	4081	;# 
  1310   000FF2                     INTCON          equ	4082	;# 
  1311   000FF3                     PROD            equ	4083	;# 
  1312   000FF3                     PRODL           equ	4083	;# 
  1313   000FF4                     PRODH           equ	4084	;# 
  1314   000FF5                     TABLAT          equ	4085	;# 
  1315   000FF6                     TBLPTR          equ	4086	;# 
  1316   000FF6                     TBLPTRL         equ	4086	;# 
  1317   000FF7                     TBLPTRH         equ	4087	;# 
  1318   000FF8                     TBLPTRU         equ	4088	;# 
  1319   000FF9                     PCLAT           equ	4089	;# 
  1320   000FF9                     PC              equ	4089	;# 
  1321   000FF9                     PCL             equ	4089	;# 
  1322   000FFA                     PCLATH          equ	4090	;# 
  1323   000FFB                     PCLATU          equ	4091	;# 
  1324   000FFC                     STKPTR          equ	4092	;# 
  1325   000FFD                     TOS             equ	4093	;# 
  1326   000FFD                     TOSL            equ	4093	;# 
  1327   000FFE                     TOSH            equ	4094	;# 
  1328   000FFF                     TOSU            equ	4095	;# 
  1329   000E80                     MAADR5          equ	3712	;# 
  1330   000E81                     MAADR6          equ	3713	;# 
  1331   000E82                     MAADR3          equ	3714	;# 
  1332   000E83                     MAADR4          equ	3715	;# 
  1333   000E84                     MAADR1          equ	3716	;# 
  1334   000E85                     MAADR2          equ	3717	;# 
  1335   000E8A                     MISTAT          equ	3722	;# 
  1336   000E97                     EFLOCON         equ	3735	;# 
  1337   000E98                     EPAUS           equ	3736	;# 
  1338   000E98                     EPAUSL          equ	3736	;# 
  1339   000E99                     EPAUSH          equ	3737	;# 
  1340   000EA0                     MACON1          equ	3744	;# 
  1341   000EA2                     MACON3          equ	3746	;# 
  1342   000EA3                     MACON4          equ	3747	;# 
  1343   000EA4                     MABBIPG         equ	3748	;# 
  1344   000EA6                     MAIPG           equ	3750	;# 
  1345   000EA6                     MAIPGL          equ	3750	;# 
  1346   000EA7                     MAIPGH          equ	3751	;# 
  1347   000EAA                     MAMXFL          equ	3754	;# 
  1348   000EAA                     MAMXFLL         equ	3754	;# 
  1349   000EAB                     MAMXFLH         equ	3755	;# 
  1350   000EB2                     MICMD           equ	3762	;# 
  1351   000EB4                     MIREGADR        equ	3764	;# 
  1352   000EB6                     MIWR            equ	3766	;# 
  1353   000EB6                     MIWRL           equ	3766	;# 
  1354   000EB7                     MIWRH           equ	3767	;# 
  1355   000EB8                     MIRD            equ	3768	;# 
  1356   000EB8                     MIRDL           equ	3768	;# 
  1357   000EB9                     MIRDH           equ	3769	;# 
  1358   000EC0                     EHT0            equ	3776	;# 
  1359   000EC1                     EHT1            equ	3777	;# 
  1360   000EC2                     EHT2            equ	3778	;# 
  1361   000EC3                     EHT3            equ	3779	;# 
  1362   000EC4                     EHT4            equ	3780	;# 
  1363   000EC5                     EHT5            equ	3781	;# 
  1364   000EC6                     EHT6            equ	3782	;# 
  1365   000EC7                     EHT7            equ	3783	;# 
  1366   000EC8                     EPMM0           equ	3784	;# 
  1367   000EC9                     EPMM1           equ	3785	;# 
  1368   000ECA                     EPMM2           equ	3786	;# 
  1369   000ECB                     EPMM3           equ	3787	;# 
  1370   000ECC                     EPMM4           equ	3788	;# 
  1371   000ECD                     EPMM5           equ	3789	;# 
  1372   000ECE                     EPMM6           equ	3790	;# 
  1373   000ECF                     EPMM7           equ	3791	;# 
  1374   000ED0                     EPMCS           equ	3792	;# 
  1375   000ED0                     EPMCSL          equ	3792	;# 
  1376   000ED1                     EPMCSH          equ	3793	;# 
  1377   000ED4                     EPMO            equ	3796	;# 
  1378   000ED4                     EPMOL           equ	3796	;# 
  1379   000ED5                     EPMOH           equ	3797	;# 
  1380   000ED8                     ERXFCON         equ	3800	;# 
  1381   000ED9                     EPKTCNT         equ	3801	;# 
  1382   000EE2                     EWRPT           equ	3810	;# 
  1383   000EE2                     EWRPTL          equ	3810	;# 
  1384   000EE3                     EWRPTH          equ	3811	;# 
  1385   000EE4                     ETXST           equ	3812	;# 
  1386   000EE4                     ETXSTL          equ	3812	;# 
  1387   000EE5                     ETXSTH          equ	3813	;# 
  1388   000EE6                     ETXND           equ	3814	;# 
  1389   000EE6                     ETXNDL          equ	3814	;# 
  1390   000EE7                     ETXNDH          equ	3815	;# 
  1391   000EE8                     ERXST           equ	3816	;# 
  1392   000EE8                     ERXSTL          equ	3816	;# 
  1393   000EE9                     ERXSTH          equ	3817	;# 
  1394   000EEA                     ERXND           equ	3818	;# 
  1395   000EEA                     ERXNDL          equ	3818	;# 
  1396   000EEB                     ERXNDH          equ	3819	;# 
  1397   000EEC                     ERXRDPT         equ	3820	;# 
  1398   000EEC                     ERXRDPTL        equ	3820	;# 
  1399   000EED                     ERXRDPTH        equ	3821	;# 
  1400   000EEE                     ERXWRPT         equ	3822	;# 
  1401   000EEE                     ERXWRPTL        equ	3822	;# 
  1402   000EEF                     ERXWRPTH        equ	3823	;# 
  1403   000EF0                     EDMAST          equ	3824	;# 
  1404   000EF0                     EDMASTL         equ	3824	;# 
  1405   000EF1                     EDMASTH         equ	3825	;# 
  1406   000EF2                     EDMAND          equ	3826	;# 
  1407   000EF2                     EDMANDL         equ	3826	;# 
  1408   000EF3                     EDMANDH         equ	3827	;# 
  1409   000EF4                     EDMADST         equ	3828	;# 
  1410   000EF4                     EDMADSTL        equ	3828	;# 
  1411   000EF5                     EDMADSTH        equ	3829	;# 
  1412   000EF6                     EDMACS          equ	3830	;# 
  1413   000EF6                     EDMACSL         equ	3830	;# 
  1414   000EF7                     EDMACSH         equ	3831	;# 
  1415   000EFB                     EIE             equ	3835	;# 
  1416   000EFD                     ESTAT           equ	3837	;# 
  1417   000EFE                     ECON2           equ	3838	;# 
  1418   000F60                     EIR             equ	3936	;# 
  1419   000F61                     EDATA           equ	3937	;# 
  1420   000F62                     SSP2CON2        equ	3938	;# 
  1421   000F63                     SSP2CON1        equ	3939	;# 
  1422   000F64                     SSP2STAT        equ	3940	;# 
  1423   000F65                     SSP2ADD         equ	3941	;# 
  1424   000F66                     SSP2BUF         equ	3942	;# 
  1425   000F67                     ECCP2DEL        equ	3943	;# 
  1426   000F68                     ECCP2AS         equ	3944	;# 
  1427   000F69                     ECCP3DEL        equ	3945	;# 
  1428   000F6A                     ECCP3AS         equ	3946	;# 
  1429   000F6B                     RCSTA2          equ	3947	;# 
  1430   000F6C                     TXSTA2          equ	3948	;# 
  1431   000F6D                     TXREG2          equ	3949	;# 
  1432   000F6E                     RCREG2          equ	3950	;# 
  1433   000F6F                     SPBRG2          equ	3951	;# 
  1434   000F70                     CCP5CON         equ	3952	;# 
  1435   000F71                     CCPR5           equ	3953	;# 
  1436   000F71                     CCPR5L          equ	3953	;# 
  1437   000F72                     CCPR5H          equ	3954	;# 
  1438   000F73                     CCP4CON         equ	3955	;# 
  1439   000F74                     CCPR4           equ	3956	;# 
  1440   000F74                     CCPR4L          equ	3956	;# 
  1441   000F75                     CCPR4H          equ	3957	;# 
  1442   000F76                     T4CON           equ	3958	;# 
  1443   000F77                     PR4             equ	3959	;# 
  1444   000F78                     TMR4            equ	3960	;# 
  1445   000F79                     ECCP1DEL        equ	3961	;# 
  1446   000F7A                     ERDPT           equ	3962	;# 
  1447   000F7A                     ERDPTL          equ	3962	;# 
  1448   000F7B                     ERDPTH          equ	3963	;# 
  1449   000F7C                     BAUDCON2        equ	3964	;# 
  1450   000F7C                     BAUDCTL2        equ	3964	;# 
  1451   000F7D                     SPBRGH2         equ	3965	;# 
  1452   000F7E                     BAUDCON1        equ	3966	;# 
  1453   000F7E                     BAUDCON         equ	3966	;# 
  1454   000F7E                     BAUDCTL         equ	3966	;# 
  1455   000F7E                     BAUDCTL1        equ	3966	;# 
  1456   000F7F                     SPBRGH1         equ	3967	;# 
  1457   000F7F                     SPBRGH          equ	3967	;# 
  1458   000F80                     PORTA           equ	3968	;# 
  1459   000F81                     PORTB           equ	3969	;# 
  1460   000F82                     PORTC           equ	3970	;# 
  1461   000F83                     PORTD           equ	3971	;# 
  1462   000F84                     PORTE           equ	3972	;# 
  1463   000F85                     PORTF           equ	3973	;# 
  1464   000F86                     PORTG           equ	3974	;# 
  1465   000F87                     PORTH           equ	3975	;# 
  1466   000F88                     PORTJ           equ	3976	;# 
  1467   000F89                     LATA            equ	3977	;# 
  1468   000F8A                     LATB            equ	3978	;# 
  1469   000F8B                     LATC            equ	3979	;# 
  1470   000F8C                     LATD            equ	3980	;# 
  1471   000F8D                     LATE            equ	3981	;# 
  1472   000F8E                     LATF            equ	3982	;# 
  1473   000F8F                     LATG            equ	3983	;# 
  1474   000F90                     LATH            equ	3984	;# 
  1475   000F91                     LATJ            equ	3985	;# 
  1476   000F92                     TRISA           equ	3986	;# 
  1477   000F92                     DDRA            equ	3986	;# 
  1478   000F93                     TRISB           equ	3987	;# 
  1479   000F93                     DDRB            equ	3987	;# 
  1480   000F94                     TRISC           equ	3988	;# 
  1481   000F94                     DDRC            equ	3988	;# 
  1482   000F95                     TRISD           equ	3989	;# 
  1483   000F95                     DDRD            equ	3989	;# 
  1484   000F96                     TRISE           equ	3990	;# 
  1485   000F96                     DDRE            equ	3990	;# 
  1486   000F97                     TRISF           equ	3991	;# 
  1487   000F97                     DDRF            equ	3991	;# 
  1488   000F98                     TRISG           equ	3992	;# 
  1489   000F98                     DDRG            equ	3992	;# 
  1490   000F99                     TRISH           equ	3993	;# 
  1491   000F99                     DDRH            equ	3993	;# 
  1492   000F9A                     TRISJ           equ	3994	;# 
  1493   000F9A                     DDRJ            equ	3994	;# 
  1494   000F9B                     OSCTUNE         equ	3995	;# 
  1495   000F9C                     MEMCON          equ	3996	;# 
  1496   000F9D                     PIE1            equ	3997	;# 
  1497   000F9E                     PIR1            equ	3998	;# 
  1498   000F9F                     IPR1            equ	3999	;# 
  1499   000FA0                     PIE2            equ	4000	;# 
  1500   000FA1                     PIR2            equ	4001	;# 
  1501   000FA2                     IPR2            equ	4002	;# 
  1502   000FA3                     PIE3            equ	4003	;# 
  1503   000FA4                     PIR3            equ	4004	;# 
  1504   000FA5                     IPR3            equ	4005	;# 
  1505   000FA6                     EECON1          equ	4006	;# 
  1506   000FA7                     EECON2          equ	4007	;# 
  1507   000FAB                     RCSTA1          equ	4011	;# 
  1508   000FAB                     RCSTA           equ	4011	;# 
  1509   000FAC                     TXSTA1          equ	4012	;# 
  1510   000FAC                     TXSTA           equ	4012	;# 
  1511   000FAD                     TXREG1          equ	4013	;# 
  1512   000FAD                     TXREG           equ	4013	;# 
  1513   000FAE                     RCREG1          equ	4014	;# 
  1514   000FAE                     RCREG           equ	4014	;# 
  1515   000FAF                     SPBRG1          equ	4015	;# 
  1516   000FAF                     SPBRG           equ	4015	;# 
  1517   000FB0                     PSPCON          equ	4016	;# 
  1518   000FB1                     T3CON           equ	4017	;# 
  1519   000FB2                     TMR3            equ	4018	;# 
  1520   000FB2                     TMR3L           equ	4018	;# 
  1521   000FB3                     TMR3H           equ	4019	;# 
  1522   000FB4                     CMCON           equ	4020	;# 
  1523   000FB5                     CVRCON          equ	4021	;# 
  1524   000FB6                     ECCP1AS         equ	4022	;# 
  1525   000FB7                     CCP3CON         equ	4023	;# 
  1526   000FB7                     ECCP3CON        equ	4023	;# 
  1527   000FB8                     CCPR3           equ	4024	;# 
  1528   000FB8                     CCPR3L          equ	4024	;# 
  1529   000FB9                     CCPR3H          equ	4025	;# 
  1530   000FBA                     CCP2CON         equ	4026	;# 
  1531   000FBA                     ECCP2CON        equ	4026	;# 
  1532   000FBB                     CCPR2           equ	4027	;# 
  1533   000FBB                     CCPR2L          equ	4027	;# 
  1534   000FBC                     CCPR2H          equ	4028	;# 
  1535   000FBD                     CCP1CON         equ	4029	;# 
  1536   000FBD                     ECCP1CON        equ	4029	;# 
  1537   000FBE                     CCPR1           equ	4030	;# 
  1538   000FBE                     CCPR1L          equ	4030	;# 
  1539   000FBF                     CCPR1H          equ	4031	;# 
  1540   000FC0                     ADCON2          equ	4032	;# 
  1541   000FC1                     ADCON1          equ	4033	;# 
  1542   000FC2                     ADCON0          equ	4034	;# 
  1543   000FC3                     ADRES           equ	4035	;# 
  1544   000FC3                     ADRESL          equ	4035	;# 
  1545   000FC4                     ADRESH          equ	4036	;# 
  1546   000FC5                     SSP1CON2        equ	4037	;# 
  1547   000FC5                     SSPCON2         equ	4037	;# 
  1548   000FC6                     SSP1CON1        equ	4038	;# 
  1549   000FC6                     SSPCON1         equ	4038	;# 
  1550   000FC7                     SSP1STAT        equ	4039	;# 
  1551   000FC7                     SSPSTAT         equ	4039	;# 
  1552   000FC8                     SSP1ADD         equ	4040	;# 
  1553   000FC8                     SSPADD          equ	4040	;# 
  1554   000FC9                     SSP1BUF         equ	4041	;# 
  1555   000FC9                     SSPBUF          equ	4041	;# 
  1556   000FCA                     T2CON           equ	4042	;# 
  1557   000FCB                     PR2             equ	4043	;# 
  1558   000FCC                     TMR2            equ	4044	;# 
  1559   000FCD                     T1CON           equ	4045	;# 
  1560   000FCE                     TMR1            equ	4046	;# 
  1561   000FCE                     TMR1L           equ	4046	;# 
  1562   000FCF                     TMR1H           equ	4047	;# 
  1563   000FD0                     RCON            equ	4048	;# 
  1564   000FD1                     WDTCON          equ	4049	;# 
  1565   000FD2                     ECON1           equ	4050	;# 
  1566   000FD3                     OSCCON          equ	4051	;# 
  1567   000FD5                     T0CON           equ	4053	;# 
  1568   000FD6                     TMR0            equ	4054	;# 
  1569   000FD6                     TMR0L           equ	4054	;# 
  1570   000FD7                     TMR0H           equ	4055	;# 
  1571   000FD8                     STATUS          equ	4056	;# 
  1572   000FD9                     FSR2            equ	4057	;# 
  1573   000FD9                     FSR2L           equ	4057	;# 
  1574   000FDA                     FSR2H           equ	4058	;# 
  1575   000FDB                     PLUSW2          equ	4059	;# 
  1576   000FDC                     PREINC2         equ	4060	;# 
  1577   000FDD                     POSTDEC2        equ	4061	;# 
  1578   000FDE                     POSTINC2        equ	4062	;# 
  1579   000FDF                     INDF2           equ	4063	;# 
  1580   000FE0                     BSR             equ	4064	;# 
  1581   000FE1                     FSR1            equ	4065	;# 
  1582   000FE1                     FSR1L           equ	4065	;# 
  1583   000FE2                     FSR1H           equ	4066	;# 
  1584   000FE3                     PLUSW1          equ	4067	;# 
  1585   000FE4                     PREINC1         equ	4068	;# 
  1586   000FE5                     POSTDEC1        equ	4069	;# 
  1587   000FE6                     POSTINC1        equ	4070	;# 
  1588   000FE7                     INDF1           equ	4071	;# 
  1589   000FE8                     WREG            equ	4072	;# 
  1590   000FE9                     FSR0            equ	4073	;# 
  1591   000FE9                     FSR0L           equ	4073	;# 
  1592   000FEA                     FSR0H           equ	4074	;# 
  1593   000FEB                     PLUSW0          equ	4075	;# 
  1594   000FEC                     PREINC0         equ	4076	;# 
  1595   000FED                     POSTDEC0        equ	4077	;# 
  1596   000FEE                     POSTINC0        equ	4078	;# 
  1597   000FEF                     INDF0           equ	4079	;# 
  1598   000FF0                     INTCON3         equ	4080	;# 
  1599   000FF1                     INTCON2         equ	4081	;# 
  1600   000FF2                     INTCON          equ	4082	;# 
  1601   000FF3                     PROD            equ	4083	;# 
  1602   000FF3                     PRODL           equ	4083	;# 
  1603   000FF4                     PRODH           equ	4084	;# 
  1604   000FF5                     TABLAT          equ	4085	;# 
  1605   000FF6                     TBLPTR          equ	4086	;# 
  1606   000FF6                     TBLPTRL         equ	4086	;# 
  1607   000FF7                     TBLPTRH         equ	4087	;# 
  1608   000FF8                     TBLPTRU         equ	4088	;# 
  1609   000FF9                     PCLAT           equ	4089	;# 
  1610   000FF9                     PC              equ	4089	;# 
  1611   000FF9                     PCL             equ	4089	;# 
  1612   000FFA                     PCLATH          equ	4090	;# 
  1613   000FFB                     PCLATU          equ	4091	;# 
  1614   000FFC                     STKPTR          equ	4092	;# 
  1615   000FFD                     TOS             equ	4093	;# 
  1616   000FFD                     TOSL            equ	4093	;# 
  1617   000FFE                     TOSH            equ	4094	;# 
  1618   000FFF                     TOSU            equ	4095	;# 
  1619   000E80                     MAADR5          equ	3712	;# 
  1620   000E81                     MAADR6          equ	3713	;# 
  1621   000E82                     MAADR3          equ	3714	;# 
  1622   000E83                     MAADR4          equ	3715	;# 
  1623   000E84                     MAADR1          equ	3716	;# 
  1624   000E85                     MAADR2          equ	3717	;# 
  1625   000E8A                     MISTAT          equ	3722	;# 
  1626   000E97                     EFLOCON         equ	3735	;# 
  1627   000E98                     EPAUS           equ	3736	;# 
  1628   000E98                     EPAUSL          equ	3736	;# 
  1629   000E99                     EPAUSH          equ	3737	;# 
  1630   000EA0                     MACON1          equ	3744	;# 
  1631   000EA2                     MACON3          equ	3746	;# 
  1632   000EA3                     MACON4          equ	3747	;# 
  1633   000EA4                     MABBIPG         equ	3748	;# 
  1634   000EA6                     MAIPG           equ	3750	;# 
  1635   000EA6                     MAIPGL          equ	3750	;# 
  1636   000EA7                     MAIPGH          equ	3751	;# 
  1637   000EAA                     MAMXFL          equ	3754	;# 
  1638   000EAA                     MAMXFLL         equ	3754	;# 
  1639   000EAB                     MAMXFLH         equ	3755	;# 
  1640   000EB2                     MICMD           equ	3762	;# 
  1641   000EB4                     MIREGADR        equ	3764	;# 
  1642   000EB6                     MIWR            equ	3766	;# 
  1643   000EB6                     MIWRL           equ	3766	;# 
  1644   000EB7                     MIWRH           equ	3767	;# 
  1645   000EB8                     MIRD            equ	3768	;# 
  1646   000EB8                     MIRDL           equ	3768	;# 
  1647   000EB9                     MIRDH           equ	3769	;# 
  1648   000EC0                     EHT0            equ	3776	;# 
  1649   000EC1                     EHT1            equ	3777	;# 
  1650   000EC2                     EHT2            equ	3778	;# 
  1651   000EC3                     EHT3            equ	3779	;# 
  1652   000EC4                     EHT4            equ	3780	;# 
  1653   000EC5                     EHT5            equ	3781	;# 
  1654   000EC6                     EHT6            equ	3782	;# 
  1655   000EC7                     EHT7            equ	3783	;# 
  1656   000EC8                     EPMM0           equ	3784	;# 
  1657   000EC9                     EPMM1           equ	3785	;# 
  1658   000ECA                     EPMM2           equ	3786	;# 
  1659   000ECB                     EPMM3           equ	3787	;# 
  1660   000ECC                     EPMM4           equ	3788	;# 
  1661   000ECD                     EPMM5           equ	3789	;# 
  1662   000ECE                     EPMM6           equ	3790	;# 
  1663   000ECF                     EPMM7           equ	3791	;# 
  1664   000ED0                     EPMCS           equ	3792	;# 
  1665   000ED0                     EPMCSL          equ	3792	;# 
  1666   000ED1                     EPMCSH          equ	3793	;# 
  1667   000ED4                     EPMO            equ	3796	;# 
  1668   000ED4                     EPMOL           equ	3796	;# 
  1669   000ED5                     EPMOH           equ	3797	;# 
  1670   000ED8                     ERXFCON         equ	3800	;# 
  1671   000ED9                     EPKTCNT         equ	3801	;# 
  1672   000EE2                     EWRPT           equ	3810	;# 
  1673   000EE2                     EWRPTL          equ	3810	;# 
  1674   000EE3                     EWRPTH          equ	3811	;# 
  1675   000EE4                     ETXST           equ	3812	;# 
  1676   000EE4                     ETXSTL          equ	3812	;# 
  1677   000EE5                     ETXSTH          equ	3813	;# 
  1678   000EE6                     ETXND           equ	3814	;# 
  1679   000EE6                     ETXNDL          equ	3814	;# 
  1680   000EE7                     ETXNDH          equ	3815	;# 
  1681   000EE8                     ERXST           equ	3816	;# 
  1682   000EE8                     ERXSTL          equ	3816	;# 
  1683   000EE9                     ERXSTH          equ	3817	;# 
  1684   000EEA                     ERXND           equ	3818	;# 
  1685   000EEA                     ERXNDL          equ	3818	;# 
  1686   000EEB                     ERXNDH          equ	3819	;# 
  1687   000EEC                     ERXRDPT         equ	3820	;# 
  1688   000EEC                     ERXRDPTL        equ	3820	;# 
  1689   000EED                     ERXRDPTH        equ	3821	;# 
  1690   000EEE                     ERXWRPT         equ	3822	;# 
  1691   000EEE                     ERXWRPTL        equ	3822	;# 
  1692   000EEF                     ERXWRPTH        equ	3823	;# 
  1693   000EF0                     EDMAST          equ	3824	;# 
  1694   000EF0                     EDMASTL         equ	3824	;# 
  1695   000EF1                     EDMASTH         equ	3825	;# 
  1696   000EF2                     EDMAND          equ	3826	;# 
  1697   000EF2                     EDMANDL         equ	3826	;# 
  1698   000EF3                     EDMANDH         equ	3827	;# 
  1699   000EF4                     EDMADST         equ	3828	;# 
  1700   000EF4                     EDMADSTL        equ	3828	;# 
  1701   000EF5                     EDMADSTH        equ	3829	;# 
  1702   000EF6                     EDMACS          equ	3830	;# 
  1703   000EF6                     EDMACSL         equ	3830	;# 
  1704   000EF7                     EDMACSH         equ	3831	;# 
  1705   000EFB                     EIE             equ	3835	;# 
  1706   000EFD                     ESTAT           equ	3837	;# 
  1707   000EFE                     ECON2           equ	3838	;# 
  1708   000F60                     EIR             equ	3936	;# 
  1709   000F61                     EDATA           equ	3937	;# 
  1710   000F62                     SSP2CON2        equ	3938	;# 
  1711   000F63                     SSP2CON1        equ	3939	;# 
  1712   000F64                     SSP2STAT        equ	3940	;# 
  1713   000F65                     SSP2ADD         equ	3941	;# 
  1714   000F66                     SSP2BUF         equ	3942	;# 
  1715   000F67                     ECCP2DEL        equ	3943	;# 
  1716   000F68                     ECCP2AS         equ	3944	;# 
  1717   000F69                     ECCP3DEL        equ	3945	;# 
  1718   000F6A                     ECCP3AS         equ	3946	;# 
  1719   000F6B                     RCSTA2          equ	3947	;# 
  1720   000F6C                     TXSTA2          equ	3948	;# 
  1721   000F6D                     TXREG2          equ	3949	;# 
  1722   000F6E                     RCREG2          equ	3950	;# 
  1723   000F6F                     SPBRG2          equ	3951	;# 
  1724   000F70                     CCP5CON         equ	3952	;# 
  1725   000F71                     CCPR5           equ	3953	;# 
  1726   000F71                     CCPR5L          equ	3953	;# 
  1727   000F72                     CCPR5H          equ	3954	;# 
  1728   000F73                     CCP4CON         equ	3955	;# 
  1729   000F74                     CCPR4           equ	3956	;# 
  1730   000F74                     CCPR4L          equ	3956	;# 
  1731   000F75                     CCPR4H          equ	3957	;# 
  1732   000F76                     T4CON           equ	3958	;# 
  1733   000F77                     PR4             equ	3959	;# 
  1734   000F78                     TMR4            equ	3960	;# 
  1735   000F79                     ECCP1DEL        equ	3961	;# 
  1736   000F7A                     ERDPT           equ	3962	;# 
  1737   000F7A                     ERDPTL          equ	3962	;# 
  1738   000F7B                     ERDPTH          equ	3963	;# 
  1739   000F7C                     BAUDCON2        equ	3964	;# 
  1740   000F7C                     BAUDCTL2        equ	3964	;# 
  1741   000F7D                     SPBRGH2         equ	3965	;# 
  1742   000F7E                     BAUDCON1        equ	3966	;# 
  1743   000F7E                     BAUDCON         equ	3966	;# 
  1744   000F7E                     BAUDCTL         equ	3966	;# 
  1745   000F7E                     BAUDCTL1        equ	3966	;# 
  1746   000F7F                     SPBRGH1         equ	3967	;# 
  1747   000F7F                     SPBRGH          equ	3967	;# 
  1748   000F80                     PORTA           equ	3968	;# 
  1749   000F81                     PORTB           equ	3969	;# 
  1750   000F82                     PORTC           equ	3970	;# 
  1751   000F83                     PORTD           equ	3971	;# 
  1752   000F84                     PORTE           equ	3972	;# 
  1753   000F85                     PORTF           equ	3973	;# 
  1754   000F86                     PORTG           equ	3974	;# 
  1755   000F87                     PORTH           equ	3975	;# 
  1756   000F88                     PORTJ           equ	3976	;# 
  1757   000F89                     LATA            equ	3977	;# 
  1758   000F8A                     LATB            equ	3978	;# 
  1759   000F8B                     LATC            equ	3979	;# 
  1760   000F8C                     LATD            equ	3980	;# 
  1761   000F8D                     LATE            equ	3981	;# 
  1762   000F8E                     LATF            equ	3982	;# 
  1763   000F8F                     LATG            equ	3983	;# 
  1764   000F90                     LATH            equ	3984	;# 
  1765   000F91                     LATJ            equ	3985	;# 
  1766   000F92                     TRISA           equ	3986	;# 
  1767   000F92                     DDRA            equ	3986	;# 
  1768   000F93                     TRISB           equ	3987	;# 
  1769   000F93                     DDRB            equ	3987	;# 
  1770   000F94                     TRISC           equ	3988	;# 
  1771   000F94                     DDRC            equ	3988	;# 
  1772   000F95                     TRISD           equ	3989	;# 
  1773   000F95                     DDRD            equ	3989	;# 
  1774   000F96                     TRISE           equ	3990	;# 
  1775   000F96                     DDRE            equ	3990	;# 
  1776   000F97                     TRISF           equ	3991	;# 
  1777   000F97                     DDRF            equ	3991	;# 
  1778   000F98                     TRISG           equ	3992	;# 
  1779   000F98                     DDRG            equ	3992	;# 
  1780   000F99                     TRISH           equ	3993	;# 
  1781   000F99                     DDRH            equ	3993	;# 
  1782   000F9A                     TRISJ           equ	3994	;# 
  1783   000F9A                     DDRJ            equ	3994	;# 
  1784   000F9B                     OSCTUNE         equ	3995	;# 
  1785   000F9C                     MEMCON          equ	3996	;# 
  1786   000F9D                     PIE1            equ	3997	;# 
  1787   000F9E                     PIR1            equ	3998	;# 
  1788   000F9F                     IPR1            equ	3999	;# 
  1789   000FA0                     PIE2            equ	4000	;# 
  1790   000FA1                     PIR2            equ	4001	;# 
  1791   000FA2                     IPR2            equ	4002	;# 
  1792   000FA3                     PIE3            equ	4003	;# 
  1793   000FA4                     PIR3            equ	4004	;# 
  1794   000FA5                     IPR3            equ	4005	;# 
  1795   000FA6                     EECON1          equ	4006	;# 
  1796   000FA7                     EECON2          equ	4007	;# 
  1797   000FAB                     RCSTA1          equ	4011	;# 
  1798   000FAB                     RCSTA           equ	4011	;# 
  1799   000FAC                     TXSTA1          equ	4012	;# 
  1800   000FAC                     TXSTA           equ	4012	;# 
  1801   000FAD                     TXREG1          equ	4013	;# 
  1802   000FAD                     TXREG           equ	4013	;# 
  1803   000FAE                     RCREG1          equ	4014	;# 
  1804   000FAE                     RCREG           equ	4014	;# 
  1805   000FAF                     SPBRG1          equ	4015	;# 
  1806   000FAF                     SPBRG           equ	4015	;# 
  1807   000FB0                     PSPCON          equ	4016	;# 
  1808   000FB1                     T3CON           equ	4017	;# 
  1809   000FB2                     TMR3            equ	4018	;# 
  1810   000FB2                     TMR3L           equ	4018	;# 
  1811   000FB3                     TMR3H           equ	4019	;# 
  1812   000FB4                     CMCON           equ	4020	;# 
  1813   000FB5                     CVRCON          equ	4021	;# 
  1814   000FB6                     ECCP1AS         equ	4022	;# 
  1815   000FB7                     CCP3CON         equ	4023	;# 
  1816   000FB7                     ECCP3CON        equ	4023	;# 
  1817   000FB8                     CCPR3           equ	4024	;# 
  1818   000FB8                     CCPR3L          equ	4024	;# 
  1819   000FB9                     CCPR3H          equ	4025	;# 
  1820   000FBA                     CCP2CON         equ	4026	;# 
  1821   000FBA                     ECCP2CON        equ	4026	;# 
  1822   000FBB                     CCPR2           equ	4027	;# 
  1823   000FBB                     CCPR2L          equ	4027	;# 
  1824   000FBC                     CCPR2H          equ	4028	;# 
  1825   000FBD                     CCP1CON         equ	4029	;# 
  1826   000FBD                     ECCP1CON        equ	4029	;# 
  1827   000FBE                     CCPR1           equ	4030	;# 
  1828   000FBE                     CCPR1L          equ	4030	;# 
  1829   000FBF                     CCPR1H          equ	4031	;# 
  1830   000FC0                     ADCON2          equ	4032	;# 
  1831   000FC1                     ADCON1          equ	4033	;# 
  1832   000FC2                     ADCON0          equ	4034	;# 
  1833   000FC3                     ADRES           equ	4035	;# 
  1834   000FC3                     ADRESL          equ	4035	;# 
  1835   000FC4                     ADRESH          equ	4036	;# 
  1836   000FC5                     SSP1CON2        equ	4037	;# 
  1837   000FC5                     SSPCON2         equ	4037	;# 
  1838   000FC6                     SSP1CON1        equ	4038	;# 
  1839   000FC6                     SSPCON1         equ	4038	;# 
  1840   000FC7                     SSP1STAT        equ	4039	;# 
  1841   000FC7                     SSPSTAT         equ	4039	;# 
  1842   000FC8                     SSP1ADD         equ	4040	;# 
  1843   000FC8                     SSPADD          equ	4040	;# 
  1844   000FC9                     SSP1BUF         equ	4041	;# 
  1845   000FC9                     SSPBUF          equ	4041	;# 
  1846   000FCA                     T2CON           equ	4042	;# 
  1847   000FCB                     PR2             equ	4043	;# 
  1848   000FCC                     TMR2            equ	4044	;# 
  1849   000FCD                     T1CON           equ	4045	;# 
  1850   000FCE                     TMR1            equ	4046	;# 
  1851   000FCE                     TMR1L           equ	4046	;# 
  1852   000FCF                     TMR1H           equ	4047	;# 
  1853   000FD0                     RCON            equ	4048	;# 
  1854   000FD1                     WDTCON          equ	4049	;# 
  1855   000FD2                     ECON1           equ	4050	;# 
  1856   000FD3                     OSCCON          equ	4051	;# 
  1857   000FD5                     T0CON           equ	4053	;# 
  1858   000FD6                     TMR0            equ	4054	;# 
  1859   000FD6                     TMR0L           equ	4054	;# 
  1860   000FD7                     TMR0H           equ	4055	;# 
  1861   000FD8                     STATUS          equ	4056	;# 
  1862   000FD9                     FSR2            equ	4057	;# 
  1863   000FD9                     FSR2L           equ	4057	;# 
  1864   000FDA                     FSR2H           equ	4058	;# 
  1865   000FDB                     PLUSW2          equ	4059	;# 
  1866   000FDC                     PREINC2         equ	4060	;# 
  1867   000FDD                     POSTDEC2        equ	4061	;# 
  1868   000FDE                     POSTINC2        equ	4062	;# 
  1869   000FDF                     INDF2           equ	4063	;# 
  1870   000FE0                     BSR             equ	4064	;# 
  1871   000FE1                     FSR1            equ	4065	;# 
  1872   000FE1                     FSR1L           equ	4065	;# 
  1873   000FE2                     FSR1H           equ	4066	;# 
  1874   000FE3                     PLUSW1          equ	4067	;# 
  1875   000FE4                     PREINC1         equ	4068	;# 
  1876   000FE5                     POSTDEC1        equ	4069	;# 
  1877   000FE6                     POSTINC1        equ	4070	;# 
  1878   000FE7                     INDF1           equ	4071	;# 
  1879   000FE8                     WREG            equ	4072	;# 
  1880   000FE9                     FSR0            equ	4073	;# 
  1881   000FE9                     FSR0L           equ	4073	;# 
  1882   000FEA                     FSR0H           equ	4074	;# 
  1883   000FEB                     PLUSW0          equ	4075	;# 
  1884   000FEC                     PREINC0         equ	4076	;# 
  1885   000FED                     POSTDEC0        equ	4077	;# 
  1886   000FEE                     POSTINC0        equ	4078	;# 
  1887   000FEF                     INDF0           equ	4079	;# 
  1888   000FF0                     INTCON3         equ	4080	;# 
  1889   000FF1                     INTCON2         equ	4081	;# 
  1890   000FF2                     INTCON          equ	4082	;# 
  1891   000FF3                     PROD            equ	4083	;# 
  1892   000FF3                     PRODL           equ	4083	;# 
  1893   000FF4                     PRODH           equ	4084	;# 
  1894   000FF5                     TABLAT          equ	4085	;# 
  1895   000FF6                     TBLPTR          equ	4086	;# 
  1896   000FF6                     TBLPTRL         equ	4086	;# 
  1897   000FF7                     TBLPTRH         equ	4087	;# 
  1898   000FF8                     TBLPTRU         equ	4088	;# 
  1899   000FF9                     PCLAT           equ	4089	;# 
  1900   000FF9                     PC              equ	4089	;# 
  1901   000FF9                     PCL             equ	4089	;# 
  1902   000FFA                     PCLATH          equ	4090	;# 
  1903   000FFB                     PCLATU          equ	4091	;# 
  1904   000FFC                     STKPTR          equ	4092	;# 
  1905   000FFD                     TOS             equ	4093	;# 
  1906   000FFD                     TOSL            equ	4093	;# 
  1907   000FFE                     TOSH            equ	4094	;# 
  1908   000FFF                     TOSU            equ	4095	;# 
  1909   000E80                     MAADR5          equ	3712	;# 
  1910   000E81                     MAADR6          equ	3713	;# 
  1911   000E82                     MAADR3          equ	3714	;# 
  1912   000E83                     MAADR4          equ	3715	;# 
  1913   000E84                     MAADR1          equ	3716	;# 
  1914   000E85                     MAADR2          equ	3717	;# 
  1915   000E8A                     MISTAT          equ	3722	;# 
  1916   000E97                     EFLOCON         equ	3735	;# 
  1917   000E98                     EPAUS           equ	3736	;# 
  1918   000E98                     EPAUSL          equ	3736	;# 
  1919   000E99                     EPAUSH          equ	3737	;# 
  1920   000EA0                     MACON1          equ	3744	;# 
  1921   000EA2                     MACON3          equ	3746	;# 
  1922   000EA3                     MACON4          equ	3747	;# 
  1923   000EA4                     MABBIPG         equ	3748	;# 
  1924   000EA6                     MAIPG           equ	3750	;# 
  1925   000EA6                     MAIPGL          equ	3750	;# 
  1926   000EA7                     MAIPGH          equ	3751	;# 
  1927   000EAA                     MAMXFL          equ	3754	;# 
  1928   000EAA                     MAMXFLL         equ	3754	;# 
  1929   000EAB                     MAMXFLH         equ	3755	;# 
  1930   000EB2                     MICMD           equ	3762	;# 
  1931   000EB4                     MIREGADR        equ	3764	;# 
  1932   000EB6                     MIWR            equ	3766	;# 
  1933   000EB6                     MIWRL           equ	3766	;# 
  1934   000EB7                     MIWRH           equ	3767	;# 
  1935   000EB8                     MIRD            equ	3768	;# 
  1936   000EB8                     MIRDL           equ	3768	;# 
  1937   000EB9                     MIRDH           equ	3769	;# 
  1938   000EC0                     EHT0            equ	3776	;# 
  1939   000EC1                     EHT1            equ	3777	;# 
  1940   000EC2                     EHT2            equ	3778	;# 
  1941   000EC3                     EHT3            equ	3779	;# 
  1942   000EC4                     EHT4            equ	3780	;# 
  1943   000EC5                     EHT5            equ	3781	;# 
  1944   000EC6                     EHT6            equ	3782	;# 
  1945   000EC7                     EHT7            equ	3783	;# 
  1946   000EC8                     EPMM0           equ	3784	;# 
  1947   000EC9                     EPMM1           equ	3785	;# 
  1948   000ECA                     EPMM2           equ	3786	;# 
  1949   000ECB                     EPMM3           equ	3787	;# 
  1950   000ECC                     EPMM4           equ	3788	;# 
  1951   000ECD                     EPMM5           equ	3789	;# 
  1952   000ECE                     EPMM6           equ	3790	;# 
  1953   000ECF                     EPMM7           equ	3791	;# 
  1954   000ED0                     EPMCS           equ	3792	;# 
  1955   000ED0                     EPMCSL          equ	3792	;# 
  1956   000ED1                     EPMCSH          equ	3793	;# 
  1957   000ED4                     EPMO            equ	3796	;# 
  1958   000ED4                     EPMOL           equ	3796	;# 
  1959   000ED5                     EPMOH           equ	3797	;# 
  1960   000ED8                     ERXFCON         equ	3800	;# 
  1961   000ED9                     EPKTCNT         equ	3801	;# 
  1962   000EE2                     EWRPT           equ	3810	;# 
  1963   000EE2                     EWRPTL          equ	3810	;# 
  1964   000EE3                     EWRPTH          equ	3811	;# 
  1965   000EE4                     ETXST           equ	3812	;# 
  1966   000EE4                     ETXSTL          equ	3812	;# 
  1967   000EE5                     ETXSTH          equ	3813	;# 
  1968   000EE6                     ETXND           equ	3814	;# 
  1969   000EE6                     ETXNDL          equ	3814	;# 
  1970   000EE7                     ETXNDH          equ	3815	;# 
  1971   000EE8                     ERXST           equ	3816	;# 
  1972   000EE8                     ERXSTL          equ	3816	;# 
  1973   000EE9                     ERXSTH          equ	3817	;# 
  1974   000EEA                     ERXND           equ	3818	;# 
  1975   000EEA                     ERXNDL          equ	3818	;# 
  1976   000EEB                     ERXNDH          equ	3819	;# 
  1977   000EEC                     ERXRDPT         equ	3820	;# 
  1978   000EEC                     ERXRDPTL        equ	3820	;# 
  1979   000EED                     ERXRDPTH        equ	3821	;# 
  1980   000EEE                     ERXWRPT         equ	3822	;# 
  1981   000EEE                     ERXWRPTL        equ	3822	;# 
  1982   000EEF                     ERXWRPTH        equ	3823	;# 
  1983   000EF0                     EDMAST          equ	3824	;# 
  1984   000EF0                     EDMASTL         equ	3824	;# 
  1985   000EF1                     EDMASTH         equ	3825	;# 
  1986   000EF2                     EDMAND          equ	3826	;# 
  1987   000EF2                     EDMANDL         equ	3826	;# 
  1988   000EF3                     EDMANDH         equ	3827	;# 
  1989   000EF4                     EDMADST         equ	3828	;# 
  1990   000EF4                     EDMADSTL        equ	3828	;# 
  1991   000EF5                     EDMADSTH        equ	3829	;# 
  1992   000EF6                     EDMACS          equ	3830	;# 
  1993   000EF6                     EDMACSL         equ	3830	;# 
  1994   000EF7                     EDMACSH         equ	3831	;# 
  1995   000EFB                     EIE             equ	3835	;# 
  1996   000EFD                     ESTAT           equ	3837	;# 
  1997   000EFE                     ECON2           equ	3838	;# 
  1998   000F60                     EIR             equ	3936	;# 
  1999   000F61                     EDATA           equ	3937	;# 
  2000   000F62                     SSP2CON2        equ	3938	;# 
  2001   000F63                     SSP2CON1        equ	3939	;# 
  2002   000F64                     SSP2STAT        equ	3940	;# 
  2003   000F65                     SSP2ADD         equ	3941	;# 
  2004   000F66                     SSP2BUF         equ	3942	;# 
  2005   000F67                     ECCP2DEL        equ	3943	;# 
  2006   000F68                     ECCP2AS         equ	3944	;# 
  2007   000F69                     ECCP3DEL        equ	3945	;# 
  2008   000F6A                     ECCP3AS         equ	3946	;# 
  2009   000F6B                     RCSTA2          equ	3947	;# 
  2010   000F6C                     TXSTA2          equ	3948	;# 
  2011   000F6D                     TXREG2          equ	3949	;# 
  2012   000F6E                     RCREG2          equ	3950	;# 
  2013   000F6F                     SPBRG2          equ	3951	;# 
  2014   000F70                     CCP5CON         equ	3952	;# 
  2015   000F71                     CCPR5           equ	3953	;# 
  2016   000F71                     CCPR5L          equ	3953	;# 
  2017   000F72                     CCPR5H          equ	3954	;# 
  2018   000F73                     CCP4CON         equ	3955	;# 
  2019   000F74                     CCPR4           equ	3956	;# 
  2020   000F74                     CCPR4L          equ	3956	;# 
  2021   000F75                     CCPR4H          equ	3957	;# 
  2022   000F76                     T4CON           equ	3958	;# 
  2023   000F77                     PR4             equ	3959	;# 
  2024   000F78                     TMR4            equ	3960	;# 
  2025   000F79                     ECCP1DEL        equ	3961	;# 
  2026   000F7A                     ERDPT           equ	3962	;# 
  2027   000F7A                     ERDPTL          equ	3962	;# 
  2028   000F7B                     ERDPTH          equ	3963	;# 
  2029   000F7C                     BAUDCON2        equ	3964	;# 
  2030   000F7C                     BAUDCTL2        equ	3964	;# 
  2031   000F7D                     SPBRGH2         equ	3965	;# 
  2032   000F7E                     BAUDCON1        equ	3966	;# 
  2033   000F7E                     BAUDCON         equ	3966	;# 
  2034   000F7E                     BAUDCTL         equ	3966	;# 
  2035   000F7E                     BAUDCTL1        equ	3966	;# 
  2036   000F7F                     SPBRGH1         equ	3967	;# 
  2037   000F7F                     SPBRGH          equ	3967	;# 
  2038   000F80                     PORTA           equ	3968	;# 
  2039   000F81                     PORTB           equ	3969	;# 
  2040   000F82                     PORTC           equ	3970	;# 
  2041   000F83                     PORTD           equ	3971	;# 
  2042   000F84                     PORTE           equ	3972	;# 
  2043   000F85                     PORTF           equ	3973	;# 
  2044   000F86                     PORTG           equ	3974	;# 
  2045   000F87                     PORTH           equ	3975	;# 
  2046   000F88                     PORTJ           equ	3976	;# 
  2047   000F89                     LATA            equ	3977	;# 
  2048   000F8A                     LATB            equ	3978	;# 
  2049   000F8B                     LATC            equ	3979	;# 
  2050   000F8C                     LATD            equ	3980	;# 
  2051   000F8D                     LATE            equ	3981	;# 
  2052   000F8E                     LATF            equ	3982	;# 
  2053   000F8F                     LATG            equ	3983	;# 
  2054   000F90                     LATH            equ	3984	;# 
  2055   000F91                     LATJ            equ	3985	;# 
  2056   000F92                     TRISA           equ	3986	;# 
  2057   000F92                     DDRA            equ	3986	;# 
  2058   000F93                     TRISB           equ	3987	;# 
  2059   000F93                     DDRB            equ	3987	;# 
  2060   000F94                     TRISC           equ	3988	;# 
  2061   000F94                     DDRC            equ	3988	;# 
  2062   000F95                     TRISD           equ	3989	;# 
  2063   000F95                     DDRD            equ	3989	;# 
  2064   000F96                     TRISE           equ	3990	;# 
  2065   000F96                     DDRE            equ	3990	;# 
  2066   000F97                     TRISF           equ	3991	;# 
  2067   000F97                     DDRF            equ	3991	;# 
  2068   000F98                     TRISG           equ	3992	;# 
  2069   000F98                     DDRG            equ	3992	;# 
  2070   000F99                     TRISH           equ	3993	;# 
  2071   000F99                     DDRH            equ	3993	;# 
  2072   000F9A                     TRISJ           equ	3994	;# 
  2073   000F9A                     DDRJ            equ	3994	;# 
  2074   000F9B                     OSCTUNE         equ	3995	;# 
  2075   000F9C                     MEMCON          equ	3996	;# 
  2076   000F9D                     PIE1            equ	3997	;# 
  2077   000F9E                     PIR1            equ	3998	;# 
  2078   000F9F                     IPR1            equ	3999	;# 
  2079   000FA0                     PIE2            equ	4000	;# 
  2080   000FA1                     PIR2            equ	4001	;# 
  2081   000FA2                     IPR2            equ	4002	;# 
  2082   000FA3                     PIE3            equ	4003	;# 
  2083   000FA4                     PIR3            equ	4004	;# 
  2084   000FA5                     IPR3            equ	4005	;# 
  2085   000FA6                     EECON1          equ	4006	;# 
  2086   000FA7                     EECON2          equ	4007	;# 
  2087   000FAB                     RCSTA1          equ	4011	;# 
  2088   000FAB                     RCSTA           equ	4011	;# 
  2089   000FAC                     TXSTA1          equ	4012	;# 
  2090   000FAC                     TXSTA           equ	4012	;# 
  2091   000FAD                     TXREG1          equ	4013	;# 
  2092   000FAD                     TXREG           equ	4013	;# 
  2093   000FAE                     RCREG1          equ	4014	;# 
  2094   000FAE                     RCREG           equ	4014	;# 
  2095   000FAF                     SPBRG1          equ	4015	;# 
  2096   000FAF                     SPBRG           equ	4015	;# 
  2097   000FB0                     PSPCON          equ	4016	;# 
  2098   000FB1                     T3CON           equ	4017	;# 
  2099   000FB2                     TMR3            equ	4018	;# 
  2100   000FB2                     TMR3L           equ	4018	;# 
  2101   000FB3                     TMR3H           equ	4019	;# 
  2102   000FB4                     CMCON           equ	4020	;# 
  2103   000FB5                     CVRCON          equ	4021	;# 
  2104   000FB6                     ECCP1AS         equ	4022	;# 
  2105   000FB7                     CCP3CON         equ	4023	;# 
  2106   000FB7                     ECCP3CON        equ	4023	;# 
  2107   000FB8                     CCPR3           equ	4024	;# 
  2108   000FB8                     CCPR3L          equ	4024	;# 
  2109   000FB9                     CCPR3H          equ	4025	;# 
  2110   000FBA                     CCP2CON         equ	4026	;# 
  2111   000FBA                     ECCP2CON        equ	4026	;# 
  2112   000FBB                     CCPR2           equ	4027	;# 
  2113   000FBB                     CCPR2L          equ	4027	;# 
  2114   000FBC                     CCPR2H          equ	4028	;# 
  2115   000FBD                     CCP1CON         equ	4029	;# 
  2116   000FBD                     ECCP1CON        equ	4029	;# 
  2117   000FBE                     CCPR1           equ	4030	;# 
  2118   000FBE                     CCPR1L          equ	4030	;# 
  2119   000FBF                     CCPR1H          equ	4031	;# 
  2120   000FC0                     ADCON2          equ	4032	;# 
  2121   000FC1                     ADCON1          equ	4033	;# 
  2122   000FC2                     ADCON0          equ	4034	;# 
  2123   000FC3                     ADRES           equ	4035	;# 
  2124   000FC3                     ADRESL          equ	4035	;# 
  2125   000FC4                     ADRESH          equ	4036	;# 
  2126   000FC5                     SSP1CON2        equ	4037	;# 
  2127   000FC5                     SSPCON2         equ	4037	;# 
  2128   000FC6                     SSP1CON1        equ	4038	;# 
  2129   000FC6                     SSPCON1         equ	4038	;# 
  2130   000FC7                     SSP1STAT        equ	4039	;# 
  2131   000FC7                     SSPSTAT         equ	4039	;# 
  2132   000FC8                     SSP1ADD         equ	4040	;# 
  2133   000FC8                     SSPADD          equ	4040	;# 
  2134   000FC9                     SSP1BUF         equ	4041	;# 
  2135   000FC9                     SSPBUF          equ	4041	;# 
  2136   000FCA                     T2CON           equ	4042	;# 
  2137   000FCB                     PR2             equ	4043	;# 
  2138   000FCC                     TMR2            equ	4044	;# 
  2139   000FCD                     T1CON           equ	4045	;# 
  2140   000FCE                     TMR1            equ	4046	;# 
  2141   000FCE                     TMR1L           equ	4046	;# 
  2142   000FCF                     TMR1H           equ	4047	;# 
  2143   000FD0                     RCON            equ	4048	;# 
  2144   000FD1                     WDTCON          equ	4049	;# 
  2145   000FD2                     ECON1           equ	4050	;# 
  2146   000FD3                     OSCCON          equ	4051	;# 
  2147   000FD5                     T0CON           equ	4053	;# 
  2148   000FD6                     TMR0            equ	4054	;# 
  2149   000FD6                     TMR0L           equ	4054	;# 
  2150   000FD7                     TMR0H           equ	4055	;# 
  2151   000FD8                     STATUS          equ	4056	;# 
  2152   000FD9                     FSR2            equ	4057	;# 
  2153   000FD9                     FSR2L           equ	4057	;# 
  2154   000FDA                     FSR2H           equ	4058	;# 
  2155   000FDB                     PLUSW2          equ	4059	;# 
  2156   000FDC                     PREINC2         equ	4060	;# 
  2157   000FDD                     POSTDEC2        equ	4061	;# 
  2158   000FDE                     POSTINC2        equ	4062	;# 
  2159   000FDF                     INDF2           equ	4063	;# 
  2160   000FE0                     BSR             equ	4064	;# 
  2161   000FE1                     FSR1            equ	4065	;# 
  2162   000FE1                     FSR1L           equ	4065	;# 
  2163   000FE2                     FSR1H           equ	4066	;# 
  2164   000FE3                     PLUSW1          equ	4067	;# 
  2165   000FE4                     PREINC1         equ	4068	;# 
  2166   000FE5                     POSTDEC1        equ	4069	;# 
  2167   000FE6                     POSTINC1        equ	4070	;# 
  2168   000FE7                     INDF1           equ	4071	;# 
  2169   000FE8                     WREG            equ	4072	;# 
  2170   000FE9                     FSR0            equ	4073	;# 
  2171   000FE9                     FSR0L           equ	4073	;# 
  2172   000FEA                     FSR0H           equ	4074	;# 
  2173   000FEB                     PLUSW0          equ	4075	;# 
  2174   000FEC                     PREINC0         equ	4076	;# 
  2175   000FED                     POSTDEC0        equ	4077	;# 
  2176   000FEE                     POSTINC0        equ	4078	;# 
  2177   000FEF                     INDF0           equ	4079	;# 
  2178   000FF0                     INTCON3         equ	4080	;# 
  2179   000FF1                     INTCON2         equ	4081	;# 
  2180   000FF2                     INTCON          equ	4082	;# 
  2181   000FF3                     PROD            equ	4083	;# 
  2182   000FF3                     PRODL           equ	4083	;# 
  2183   000FF4                     PRODH           equ	4084	;# 
  2184   000FF5                     TABLAT          equ	4085	;# 
  2185   000FF6                     TBLPTR          equ	4086	;# 
  2186   000FF6                     TBLPTRL         equ	4086	;# 
  2187   000FF7                     TBLPTRH         equ	4087	;# 
  2188   000FF8                     TBLPTRU         equ	4088	;# 
  2189   000FF9                     PCLAT           equ	4089	;# 
  2190   000FF9                     PC              equ	4089	;# 
  2191   000FF9                     PCL             equ	4089	;# 
  2192   000FFA                     PCLATH          equ	4090	;# 
  2193   000FFB                     PCLATU          equ	4091	;# 
  2194   000FFC                     STKPTR          equ	4092	;# 
  2195   000FFD                     TOS             equ	4093	;# 
  2196   000FFD                     TOSL            equ	4093	;# 
  2197   000FFE                     TOSH            equ	4094	;# 
  2198   000FFF                     TOSU            equ	4095	;# 
  2199   000E80                     MAADR5          equ	3712	;# 
  2200   000E81                     MAADR6          equ	3713	;# 
  2201   000E82                     MAADR3          equ	3714	;# 
  2202   000E83                     MAADR4          equ	3715	;# 
  2203   000E84                     MAADR1          equ	3716	;# 
  2204   000E85                     MAADR2          equ	3717	;# 
  2205   000E8A                     MISTAT          equ	3722	;# 
  2206   000E97                     EFLOCON         equ	3735	;# 
  2207   000E98                     EPAUS           equ	3736	;# 
  2208   000E98                     EPAUSL          equ	3736	;# 
  2209   000E99                     EPAUSH          equ	3737	;# 
  2210   000EA0                     MACON1          equ	3744	;# 
  2211   000EA2                     MACON3          equ	3746	;# 
  2212   000EA3                     MACON4          equ	3747	;# 
  2213   000EA4                     MABBIPG         equ	3748	;# 
  2214   000EA6                     MAIPG           equ	3750	;# 
  2215   000EA6                     MAIPGL          equ	3750	;# 
  2216   000EA7                     MAIPGH          equ	3751	;# 
  2217   000EAA                     MAMXFL          equ	3754	;# 
  2218   000EAA                     MAMXFLL         equ	3754	;# 
  2219   000EAB                     MAMXFLH         equ	3755	;# 
  2220   000EB2                     MICMD           equ	3762	;# 
  2221   000EB4                     MIREGADR        equ	3764	;# 
  2222   000EB6                     MIWR            equ	3766	;# 
  2223   000EB6                     MIWRL           equ	3766	;# 
  2224   000EB7                     MIWRH           equ	3767	;# 
  2225   000EB8                     MIRD            equ	3768	;# 
  2226   000EB8                     MIRDL           equ	3768	;# 
  2227   000EB9                     MIRDH           equ	3769	;# 
  2228   000EC0                     EHT0            equ	3776	;# 
  2229   000EC1                     EHT1            equ	3777	;# 
  2230   000EC2                     EHT2            equ	3778	;# 
  2231   000EC3                     EHT3            equ	3779	;# 
  2232   000EC4                     EHT4            equ	3780	;# 
  2233   000EC5                     EHT5            equ	3781	;# 
  2234   000EC6                     EHT6            equ	3782	;# 
  2235   000EC7                     EHT7            equ	3783	;# 
  2236   000EC8                     EPMM0           equ	3784	;# 
  2237   000EC9                     EPMM1           equ	3785	;# 
  2238   000ECA                     EPMM2           equ	3786	;# 
  2239   000ECB                     EPMM3           equ	3787	;# 
  2240   000ECC                     EPMM4           equ	3788	;# 
  2241   000ECD                     EPMM5           equ	3789	;# 
  2242   000ECE                     EPMM6           equ	3790	;# 
  2243   000ECF                     EPMM7           equ	3791	;# 
  2244   000ED0                     EPMCS           equ	3792	;# 
  2245   000ED0                     EPMCSL          equ	3792	;# 
  2246   000ED1                     EPMCSH          equ	3793	;# 
  2247   000ED4                     EPMO            equ	3796	;# 
  2248   000ED4                     EPMOL           equ	3796	;# 
  2249   000ED5                     EPMOH           equ	3797	;# 
  2250   000ED8                     ERXFCON         equ	3800	;# 
  2251   000ED9                     EPKTCNT         equ	3801	;# 
  2252   000EE2                     EWRPT           equ	3810	;# 
  2253   000EE2                     EWRPTL          equ	3810	;# 
  2254   000EE3                     EWRPTH          equ	3811	;# 
  2255   000EE4                     ETXST           equ	3812	;# 
  2256   000EE4                     ETXSTL          equ	3812	;# 
  2257   000EE5                     ETXSTH          equ	3813	;# 
  2258   000EE6                     ETXND           equ	3814	;# 
  2259   000EE6                     ETXNDL          equ	3814	;# 
  2260   000EE7                     ETXNDH          equ	3815	;# 
  2261   000EE8                     ERXST           equ	3816	;# 
  2262   000EE8                     ERXSTL          equ	3816	;# 
  2263   000EE9                     ERXSTH          equ	3817	;# 
  2264   000EEA                     ERXND           equ	3818	;# 
  2265   000EEA                     ERXNDL          equ	3818	;# 
  2266   000EEB                     ERXNDH          equ	3819	;# 
  2267   000EEC                     ERXRDPT         equ	3820	;# 
  2268   000EEC                     ERXRDPTL        equ	3820	;# 
  2269   000EED                     ERXRDPTH        equ	3821	;# 
  2270   000EEE                     ERXWRPT         equ	3822	;# 
  2271   000EEE                     ERXWRPTL        equ	3822	;# 
  2272   000EEF                     ERXWRPTH        equ	3823	;# 
  2273   000EF0                     EDMAST          equ	3824	;# 
  2274   000EF0                     EDMASTL         equ	3824	;# 
  2275   000EF1                     EDMASTH         equ	3825	;# 
  2276   000EF2                     EDMAND          equ	3826	;# 
  2277   000EF2                     EDMANDL         equ	3826	;# 
  2278   000EF3                     EDMANDH         equ	3827	;# 
  2279   000EF4                     EDMADST         equ	3828	;# 
  2280   000EF4                     EDMADSTL        equ	3828	;# 
  2281   000EF5                     EDMADSTH        equ	3829	;# 
  2282   000EF6                     EDMACS          equ	3830	;# 
  2283   000EF6                     EDMACSL         equ	3830	;# 
  2284   000EF7                     EDMACSH         equ	3831	;# 
  2285   000EFB                     EIE             equ	3835	;# 
  2286   000EFD                     ESTAT           equ	3837	;# 
  2287   000EFE                     ECON2           equ	3838	;# 
  2288   000F60                     EIR             equ	3936	;# 
  2289   000F61                     EDATA           equ	3937	;# 
  2290   000F62                     SSP2CON2        equ	3938	;# 
  2291   000F63                     SSP2CON1        equ	3939	;# 
  2292   000F64                     SSP2STAT        equ	3940	;# 
  2293   000F65                     SSP2ADD         equ	3941	;# 
  2294   000F66                     SSP2BUF         equ	3942	;# 
  2295   000F67                     ECCP2DEL        equ	3943	;# 
  2296   000F68                     ECCP2AS         equ	3944	;# 
  2297   000F69                     ECCP3DEL        equ	3945	;# 
  2298   000F6A                     ECCP3AS         equ	3946	;# 
  2299   000F6B                     RCSTA2          equ	3947	;# 
  2300   000F6C                     TXSTA2          equ	3948	;# 
  2301   000F6D                     TXREG2          equ	3949	;# 
  2302   000F6E                     RCREG2          equ	3950	;# 
  2303   000F6F                     SPBRG2          equ	3951	;# 
  2304   000F70                     CCP5CON         equ	3952	;# 
  2305   000F71                     CCPR5           equ	3953	;# 
  2306   000F71                     CCPR5L          equ	3953	;# 
  2307   000F72                     CCPR5H          equ	3954	;# 
  2308   000F73                     CCP4CON         equ	3955	;# 
  2309   000F74                     CCPR4           equ	3956	;# 
  2310   000F74                     CCPR4L          equ	3956	;# 
  2311   000F75                     CCPR4H          equ	3957	;# 
  2312   000F76                     T4CON           equ	3958	;# 
  2313   000F77                     PR4             equ	3959	;# 
  2314   000F78                     TMR4            equ	3960	;# 
  2315   000F79                     ECCP1DEL        equ	3961	;# 
  2316   000F7A                     ERDPT           equ	3962	;# 
  2317   000F7A                     ERDPTL          equ	3962	;# 
  2318   000F7B                     ERDPTH          equ	3963	;# 
  2319   000F7C                     BAUDCON2        equ	3964	;# 
  2320   000F7C                     BAUDCTL2        equ	3964	;# 
  2321   000F7D                     SPBRGH2         equ	3965	;# 
  2322   000F7E                     BAUDCON1        equ	3966	;# 
  2323   000F7E                     BAUDCON         equ	3966	;# 
  2324   000F7E                     BAUDCTL         equ	3966	;# 
  2325   000F7E                     BAUDCTL1        equ	3966	;# 
  2326   000F7F                     SPBRGH1         equ	3967	;# 
  2327   000F7F                     SPBRGH          equ	3967	;# 
  2328   000F80                     PORTA           equ	3968	;# 
  2329   000F81                     PORTB           equ	3969	;# 
  2330   000F82                     PORTC           equ	3970	;# 
  2331   000F83                     PORTD           equ	3971	;# 
  2332   000F84                     PORTE           equ	3972	;# 
  2333   000F85                     PORTF           equ	3973	;# 
  2334   000F86                     PORTG           equ	3974	;# 
  2335   000F87                     PORTH           equ	3975	;# 
  2336   000F88                     PORTJ           equ	3976	;# 
  2337   000F89                     LATA            equ	3977	;# 
  2338   000F8A                     LATB            equ	3978	;# 
  2339   000F8B                     LATC            equ	3979	;# 
  2340   000F8C                     LATD            equ	3980	;# 
  2341   000F8D                     LATE            equ	3981	;# 
  2342   000F8E                     LATF            equ	3982	;# 
  2343   000F8F                     LATG            equ	3983	;# 
  2344   000F90                     LATH            equ	3984	;# 
  2345   000F91                     LATJ            equ	3985	;# 
  2346   000F92                     TRISA           equ	3986	;# 
  2347   000F92                     DDRA            equ	3986	;# 
  2348   000F93                     TRISB           equ	3987	;# 
  2349   000F93                     DDRB            equ	3987	;# 
  2350   000F94                     TRISC           equ	3988	;# 
  2351   000F94                     DDRC            equ	3988	;# 
  2352   000F95                     TRISD           equ	3989	;# 
  2353   000F95                     DDRD            equ	3989	;# 
  2354   000F96                     TRISE           equ	3990	;# 
  2355   000F96                     DDRE            equ	3990	;# 
  2356   000F97                     TRISF           equ	3991	;# 
  2357   000F97                     DDRF            equ	3991	;# 
  2358   000F98                     TRISG           equ	3992	;# 
  2359   000F98                     DDRG            equ	3992	;# 
  2360   000F99                     TRISH           equ	3993	;# 
  2361   000F99                     DDRH            equ	3993	;# 
  2362   000F9A                     TRISJ           equ	3994	;# 
  2363   000F9A                     DDRJ            equ	3994	;# 
  2364   000F9B                     OSCTUNE         equ	3995	;# 
  2365   000F9C                     MEMCON          equ	3996	;# 
  2366   000F9D                     PIE1            equ	3997	;# 
  2367   000F9E                     PIR1            equ	3998	;# 
  2368   000F9F                     IPR1            equ	3999	;# 
  2369   000FA0                     PIE2            equ	4000	;# 
  2370   000FA1                     PIR2            equ	4001	;# 
  2371   000FA2                     IPR2            equ	4002	;# 
  2372   000FA3                     PIE3            equ	4003	;# 
  2373   000FA4                     PIR3            equ	4004	;# 
  2374   000FA5                     IPR3            equ	4005	;# 
  2375   000FA6                     EECON1          equ	4006	;# 
  2376   000FA7                     EECON2          equ	4007	;# 
  2377   000FAB                     RCSTA1          equ	4011	;# 
  2378   000FAB                     RCSTA           equ	4011	;# 
  2379   000FAC                     TXSTA1          equ	4012	;# 
  2380   000FAC                     TXSTA           equ	4012	;# 
  2381   000FAD                     TXREG1          equ	4013	;# 
  2382   000FAD                     TXREG           equ	4013	;# 
  2383   000FAE                     RCREG1          equ	4014	;# 
  2384   000FAE                     RCREG           equ	4014	;# 
  2385   000FAF                     SPBRG1          equ	4015	;# 
  2386   000FAF                     SPBRG           equ	4015	;# 
  2387   000FB0                     PSPCON          equ	4016	;# 
  2388   000FB1                     T3CON           equ	4017	;# 
  2389   000FB2                     TMR3            equ	4018	;# 
  2390   000FB2                     TMR3L           equ	4018	;# 
  2391   000FB3                     TMR3H           equ	4019	;# 
  2392   000FB4                     CMCON           equ	4020	;# 
  2393   000FB5                     CVRCON          equ	4021	;# 
  2394   000FB6                     ECCP1AS         equ	4022	;# 
  2395   000FB7                     CCP3CON         equ	4023	;# 
  2396   000FB7                     ECCP3CON        equ	4023	;# 
  2397   000FB8                     CCPR3           equ	4024	;# 
  2398   000FB8                     CCPR3L          equ	4024	;# 
  2399   000FB9                     CCPR3H          equ	4025	;# 
  2400   000FBA                     CCP2CON         equ	4026	;# 
  2401   000FBA                     ECCP2CON        equ	4026	;# 
  2402   000FBB                     CCPR2           equ	4027	;# 
  2403   000FBB                     CCPR2L          equ	4027	;# 
  2404   000FBC                     CCPR2H          equ	4028	;# 
  2405   000FBD                     CCP1CON         equ	4029	;# 
  2406   000FBD                     ECCP1CON        equ	4029	;# 
  2407   000FBE                     CCPR1           equ	4030	;# 
  2408   000FBE                     CCPR1L          equ	4030	;# 
  2409   000FBF                     CCPR1H          equ	4031	;# 
  2410   000FC0                     ADCON2          equ	4032	;# 
  2411   000FC1                     ADCON1          equ	4033	;# 
  2412   000FC2                     ADCON0          equ	4034	;# 
  2413   000FC3                     ADRES           equ	4035	;# 
  2414   000FC3                     ADRESL          equ	4035	;# 
  2415   000FC4                     ADRESH          equ	4036	;# 
  2416   000FC5                     SSP1CON2        equ	4037	;# 
  2417   000FC5                     SSPCON2         equ	4037	;# 
  2418   000FC6                     SSP1CON1        equ	4038	;# 
  2419   000FC6                     SSPCON1         equ	4038	;# 
  2420   000FC7                     SSP1STAT        equ	4039	;# 
  2421   000FC7                     SSPSTAT         equ	4039	;# 
  2422   000FC8                     SSP1ADD         equ	4040	;# 
  2423   000FC8                     SSPADD          equ	4040	;# 
  2424   000FC9                     SSP1BUF         equ	4041	;# 
  2425   000FC9                     SSPBUF          equ	4041	;# 
  2426   000FCA                     T2CON           equ	4042	;# 
  2427   000FCB                     PR2             equ	4043	;# 
  2428   000FCC                     TMR2            equ	4044	;# 
  2429   000FCD                     T1CON           equ	4045	;# 
  2430   000FCE                     TMR1            equ	4046	;# 
  2431   000FCE                     TMR1L           equ	4046	;# 
  2432   000FCF                     TMR1H           equ	4047	;# 
  2433   000FD0                     RCON            equ	4048	;# 
  2434   000FD1                     WDTCON          equ	4049	;# 
  2435   000FD2                     ECON1           equ	4050	;# 
  2436   000FD3                     OSCCON          equ	4051	;# 
  2437   000FD5                     T0CON           equ	4053	;# 
  2438   000FD6                     TMR0            equ	4054	;# 
  2439   000FD6                     TMR0L           equ	4054	;# 
  2440   000FD7                     TMR0H           equ	4055	;# 
  2441   000FD8                     STATUS          equ	4056	;# 
  2442   000FD9                     FSR2            equ	4057	;# 
  2443   000FD9                     FSR2L           equ	4057	;# 
  2444   000FDA                     FSR2H           equ	4058	;# 
  2445   000FDB                     PLUSW2          equ	4059	;# 
  2446   000FDC                     PREINC2         equ	4060	;# 
  2447   000FDD                     POSTDEC2        equ	4061	;# 
  2448   000FDE                     POSTINC2        equ	4062	;# 
  2449   000FDF                     INDF2           equ	4063	;# 
  2450   000FE0                     BSR             equ	4064	;# 
  2451   000FE1                     FSR1            equ	4065	;# 
  2452   000FE1                     FSR1L           equ	4065	;# 
  2453   000FE2                     FSR1H           equ	4066	;# 
  2454   000FE3                     PLUSW1          equ	4067	;# 
  2455   000FE4                     PREINC1         equ	4068	;# 
  2456   000FE5                     POSTDEC1        equ	4069	;# 
  2457   000FE6                     POSTINC1        equ	4070	;# 
  2458   000FE7                     INDF1           equ	4071	;# 
  2459   000FE8                     WREG            equ	4072	;# 
  2460   000FE9                     FSR0            equ	4073	;# 
  2461   000FE9                     FSR0L           equ	4073	;# 
  2462   000FEA                     FSR0H           equ	4074	;# 
  2463   000FEB                     PLUSW0          equ	4075	;# 
  2464   000FEC                     PREINC0         equ	4076	;# 
  2465   000FED                     POSTDEC0        equ	4077	;# 
  2466   000FEE                     POSTINC0        equ	4078	;# 
  2467   000FEF                     INDF0           equ	4079	;# 
  2468   000FF0                     INTCON3         equ	4080	;# 
  2469   000FF1                     INTCON2         equ	4081	;# 
  2470   000FF2                     INTCON          equ	4082	;# 
  2471   000FF3                     PROD            equ	4083	;# 
  2472   000FF3                     PRODL           equ	4083	;# 
  2473   000FF4                     PRODH           equ	4084	;# 
  2474   000FF5                     TABLAT          equ	4085	;# 
  2475   000FF6                     TBLPTR          equ	4086	;# 
  2476   000FF6                     TBLPTRL         equ	4086	;# 
  2477   000FF7                     TBLPTRH         equ	4087	;# 
  2478   000FF8                     TBLPTRU         equ	4088	;# 
  2479   000FF9                     PCLAT           equ	4089	;# 
  2480   000FF9                     PC              equ	4089	;# 
  2481   000FF9                     PCL             equ	4089	;# 
  2482   000FFA                     PCLATH          equ	4090	;# 
  2483   000FFB                     PCLATU          equ	4091	;# 
  2484   000FFC                     STKPTR          equ	4092	;# 
  2485   000FFD                     TOS             equ	4093	;# 
  2486   000FFD                     TOSL            equ	4093	;# 
  2487   000FFE                     TOSH            equ	4094	;# 
  2488   000FFF                     TOSU            equ	4095	;# 
  2489   000E80                     MAADR5          equ	3712	;# 
  2490   000E81                     MAADR6          equ	3713	;# 
  2491   000E82                     MAADR3          equ	3714	;# 
  2492   000E83                     MAADR4          equ	3715	;# 
  2493   000E84                     MAADR1          equ	3716	;# 
  2494   000E85                     MAADR2          equ	3717	;# 
  2495   000E8A                     MISTAT          equ	3722	;# 
  2496   000E97                     EFLOCON         equ	3735	;# 
  2497   000E98                     EPAUS           equ	3736	;# 
  2498   000E98                     EPAUSL          equ	3736	;# 
  2499   000E99                     EPAUSH          equ	3737	;# 
  2500   000EA0                     MACON1          equ	3744	;# 
  2501   000EA2                     MACON3          equ	3746	;# 
  2502   000EA3                     MACON4          equ	3747	;# 
  2503   000EA4                     MABBIPG         equ	3748	;# 
  2504   000EA6                     MAIPG           equ	3750	;# 
  2505   000EA6                     MAIPGL          equ	3750	;# 
  2506   000EA7                     MAIPGH          equ	3751	;# 
  2507   000EAA                     MAMXFL          equ	3754	;# 
  2508   000EAA                     MAMXFLL         equ	3754	;# 
  2509   000EAB                     MAMXFLH         equ	3755	;# 
  2510   000EB2                     MICMD           equ	3762	;# 
  2511   000EB4                     MIREGADR        equ	3764	;# 
  2512   000EB6                     MIWR            equ	3766	;# 
  2513   000EB6                     MIWRL           equ	3766	;# 
  2514   000EB7                     MIWRH           equ	3767	;# 
  2515   000EB8                     MIRD            equ	3768	;# 
  2516   000EB8                     MIRDL           equ	3768	;# 
  2517   000EB9                     MIRDH           equ	3769	;# 
  2518   000EC0                     EHT0            equ	3776	;# 
  2519   000EC1                     EHT1            equ	3777	;# 
  2520   000EC2                     EHT2            equ	3778	;# 
  2521   000EC3                     EHT3            equ	3779	;# 
  2522   000EC4                     EHT4            equ	3780	;# 
  2523   000EC5                     EHT5            equ	3781	;# 
  2524   000EC6                     EHT6            equ	3782	;# 
  2525   000EC7                     EHT7            equ	3783	;# 
  2526   000EC8                     EPMM0           equ	3784	;# 
  2527   000EC9                     EPMM1           equ	3785	;# 
  2528   000ECA                     EPMM2           equ	3786	;# 
  2529   000ECB                     EPMM3           equ	3787	;# 
  2530   000ECC                     EPMM4           equ	3788	;# 
  2531   000ECD                     EPMM5           equ	3789	;# 
  2532   000ECE                     EPMM6           equ	3790	;# 
  2533   000ECF                     EPMM7           equ	3791	;# 
  2534   000ED0                     EPMCS           equ	3792	;# 
  2535   000ED0                     EPMCSL          equ	3792	;# 
  2536   000ED1                     EPMCSH          equ	3793	;# 
  2537   000ED4                     EPMO            equ	3796	;# 
  2538   000ED4                     EPMOL           equ	3796	;# 
  2539   000ED5                     EPMOH           equ	3797	;# 
  2540   000ED8                     ERXFCON         equ	3800	;# 
  2541   000ED9                     EPKTCNT         equ	3801	;# 
  2542   000EE2                     EWRPT           equ	3810	;# 
  2543   000EE2                     EWRPTL          equ	3810	;# 
  2544   000EE3                     EWRPTH          equ	3811	;# 
  2545   000EE4                     ETXST           equ	3812	;# 
  2546   000EE4                     ETXSTL          equ	3812	;# 
  2547   000EE5                     ETXSTH          equ	3813	;# 
  2548   000EE6                     ETXND           equ	3814	;# 
  2549   000EE6                     ETXNDL          equ	3814	;# 
  2550   000EE7                     ETXNDH          equ	3815	;# 
  2551   000EE8                     ERXST           equ	3816	;# 
  2552   000EE8                     ERXSTL          equ	3816	;# 
  2553   000EE9                     ERXSTH          equ	3817	;# 
  2554   000EEA                     ERXND           equ	3818	;# 
  2555   000EEA                     ERXNDL          equ	3818	;# 
  2556   000EEB                     ERXNDH          equ	3819	;# 
  2557   000EEC                     ERXRDPT         equ	3820	;# 
  2558   000EEC                     ERXRDPTL        equ	3820	;# 
  2559   000EED                     ERXRDPTH        equ	3821	;# 
  2560   000EEE                     ERXWRPT         equ	3822	;# 
  2561   000EEE                     ERXWRPTL        equ	3822	;# 
  2562   000EEF                     ERXWRPTH        equ	3823	;# 
  2563   000EF0                     EDMAST          equ	3824	;# 
  2564   000EF0                     EDMASTL         equ	3824	;# 
  2565   000EF1                     EDMASTH         equ	3825	;# 
  2566   000EF2                     EDMAND          equ	3826	;# 
  2567   000EF2                     EDMANDL         equ	3826	;# 
  2568   000EF3                     EDMANDH         equ	3827	;# 
  2569   000EF4                     EDMADST         equ	3828	;# 
  2570   000EF4                     EDMADSTL        equ	3828	;# 
  2571   000EF5                     EDMADSTH        equ	3829	;# 
  2572   000EF6                     EDMACS          equ	3830	;# 
  2573   000EF6                     EDMACSL         equ	3830	;# 
  2574   000EF7                     EDMACSH         equ	3831	;# 
  2575   000EFB                     EIE             equ	3835	;# 
  2576   000EFD                     ESTAT           equ	3837	;# 
  2577   000EFE                     ECON2           equ	3838	;# 
  2578   000F60                     EIR             equ	3936	;# 
  2579   000F61                     EDATA           equ	3937	;# 
  2580   000F62                     SSP2CON2        equ	3938	;# 
  2581   000F63                     SSP2CON1        equ	3939	;# 
  2582   000F64                     SSP2STAT        equ	3940	;# 
  2583   000F65                     SSP2ADD         equ	3941	;# 
  2584   000F66                     SSP2BUF         equ	3942	;# 
  2585   000F67                     ECCP2DEL        equ	3943	;# 
  2586   000F68                     ECCP2AS         equ	3944	;# 
  2587   000F69                     ECCP3DEL        equ	3945	;# 
  2588   000F6A                     ECCP3AS         equ	3946	;# 
  2589   000F6B                     RCSTA2          equ	3947	;# 
  2590   000F6C                     TXSTA2          equ	3948	;# 
  2591   000F6D                     TXREG2          equ	3949	;# 
  2592   000F6E                     RCREG2          equ	3950	;# 
  2593   000F6F                     SPBRG2          equ	3951	;# 
  2594   000F70                     CCP5CON         equ	3952	;# 
  2595   000F71                     CCPR5           equ	3953	;# 
  2596   000F71                     CCPR5L          equ	3953	;# 
  2597   000F72                     CCPR5H          equ	3954	;# 
  2598   000F73                     CCP4CON         equ	3955	;# 
  2599   000F74                     CCPR4           equ	3956	;# 
  2600   000F74                     CCPR4L          equ	3956	;# 
  2601   000F75                     CCPR4H          equ	3957	;# 
  2602   000F76                     T4CON           equ	3958	;# 
  2603   000F77                     PR4             equ	3959	;# 
  2604   000F78                     TMR4            equ	3960	;# 
  2605   000F79                     ECCP1DEL        equ	3961	;# 
  2606   000F7A                     ERDPT           equ	3962	;# 
  2607   000F7A                     ERDPTL          equ	3962	;# 
  2608   000F7B                     ERDPTH          equ	3963	;# 
  2609   000F7C                     BAUDCON2        equ	3964	;# 
  2610   000F7C                     BAUDCTL2        equ	3964	;# 
  2611   000F7D                     SPBRGH2         equ	3965	;# 
  2612   000F7E                     BAUDCON1        equ	3966	;# 
  2613   000F7E                     BAUDCON         equ	3966	;# 
  2614   000F7E                     BAUDCTL         equ	3966	;# 
  2615   000F7E                     BAUDCTL1        equ	3966	;# 
  2616   000F7F                     SPBRGH1         equ	3967	;# 
  2617   000F7F                     SPBRGH          equ	3967	;# 
  2618   000F80                     PORTA           equ	3968	;# 
  2619   000F81                     PORTB           equ	3969	;# 
  2620   000F82                     PORTC           equ	3970	;# 
  2621   000F83                     PORTD           equ	3971	;# 
  2622   000F84                     PORTE           equ	3972	;# 
  2623   000F85                     PORTF           equ	3973	;# 
  2624   000F86                     PORTG           equ	3974	;# 
  2625   000F87                     PORTH           equ	3975	;# 
  2626   000F88                     PORTJ           equ	3976	;# 
  2627   000F89                     LATA            equ	3977	;# 
  2628   000F8A                     LATB            equ	3978	;# 
  2629   000F8B                     LATC            equ	3979	;# 
  2630   000F8C                     LATD            equ	3980	;# 
  2631   000F8D                     LATE            equ	3981	;# 
  2632   000F8E                     LATF            equ	3982	;# 
  2633   000F8F                     LATG            equ	3983	;# 
  2634   000F90                     LATH            equ	3984	;# 
  2635   000F91                     LATJ            equ	3985	;# 
  2636   000F92                     TRISA           equ	3986	;# 
  2637   000F92                     DDRA            equ	3986	;# 
  2638   000F93                     TRISB           equ	3987	;# 
  2639   000F93                     DDRB            equ	3987	;# 
  2640   000F94                     TRISC           equ	3988	;# 
  2641   000F94                     DDRC            equ	3988	;# 
  2642   000F95                     TRISD           equ	3989	;# 
  2643   000F95                     DDRD            equ	3989	;# 
  2644   000F96                     TRISE           equ	3990	;# 
  2645   000F96                     DDRE            equ	3990	;# 
  2646   000F97                     TRISF           equ	3991	;# 
  2647   000F97                     DDRF            equ	3991	;# 
  2648   000F98                     TRISG           equ	3992	;# 
  2649   000F98                     DDRG            equ	3992	;# 
  2650   000F99                     TRISH           equ	3993	;# 
  2651   000F99                     DDRH            equ	3993	;# 
  2652   000F9A                     TRISJ           equ	3994	;# 
  2653   000F9A                     DDRJ            equ	3994	;# 
  2654   000F9B                     OSCTUNE         equ	3995	;# 
  2655   000F9C                     MEMCON          equ	3996	;# 
  2656   000F9D                     PIE1            equ	3997	;# 
  2657   000F9E                     PIR1            equ	3998	;# 
  2658   000F9F                     IPR1            equ	3999	;# 
  2659   000FA0                     PIE2            equ	4000	;# 
  2660   000FA1                     PIR2            equ	4001	;# 
  2661   000FA2                     IPR2            equ	4002	;# 
  2662   000FA3                     PIE3            equ	4003	;# 
  2663   000FA4                     PIR3            equ	4004	;# 
  2664   000FA5                     IPR3            equ	4005	;# 
  2665   000FA6                     EECON1          equ	4006	;# 
  2666   000FA7                     EECON2          equ	4007	;# 
  2667   000FAB                     RCSTA1          equ	4011	;# 
  2668   000FAB                     RCSTA           equ	4011	;# 
  2669   000FAC                     TXSTA1          equ	4012	;# 
  2670   000FAC                     TXSTA           equ	4012	;# 
  2671   000FAD                     TXREG1          equ	4013	;# 
  2672   000FAD                     TXREG           equ	4013	;# 
  2673   000FAE                     RCREG1          equ	4014	;# 
  2674   000FAE                     RCREG           equ	4014	;# 
  2675   000FAF                     SPBRG1          equ	4015	;# 
  2676   000FAF                     SPBRG           equ	4015	;# 
  2677   000FB0                     PSPCON          equ	4016	;# 
  2678   000FB1                     T3CON           equ	4017	;# 
  2679   000FB2                     TMR3            equ	4018	;# 
  2680   000FB2                     TMR3L           equ	4018	;# 
  2681   000FB3                     TMR3H           equ	4019	;# 
  2682   000FB4                     CMCON           equ	4020	;# 
  2683   000FB5                     CVRCON          equ	4021	;# 
  2684   000FB6                     ECCP1AS         equ	4022	;# 
  2685   000FB7                     CCP3CON         equ	4023	;# 
  2686   000FB7                     ECCP3CON        equ	4023	;# 
  2687   000FB8                     CCPR3           equ	4024	;# 
  2688   000FB8                     CCPR3L          equ	4024	;# 
  2689   000FB9                     CCPR3H          equ	4025	;# 
  2690   000FBA                     CCP2CON         equ	4026	;# 
  2691   000FBA                     ECCP2CON        equ	4026	;# 
  2692   000FBB                     CCPR2           equ	4027	;# 
  2693   000FBB                     CCPR2L          equ	4027	;# 
  2694   000FBC                     CCPR2H          equ	4028	;# 
  2695   000FBD                     CCP1CON         equ	4029	;# 
  2696   000FBD                     ECCP1CON        equ	4029	;# 
  2697   000FBE                     CCPR1           equ	4030	;# 
  2698   000FBE                     CCPR1L          equ	4030	;# 
  2699   000FBF                     CCPR1H          equ	4031	;# 
  2700   000FC0                     ADCON2          equ	4032	;# 
  2701   000FC1                     ADCON1          equ	4033	;# 
  2702   000FC2                     ADCON0          equ	4034	;# 
  2703   000FC3                     ADRES           equ	4035	;# 
  2704   000FC3                     ADRESL          equ	4035	;# 
  2705   000FC4                     ADRESH          equ	4036	;# 
  2706   000FC5                     SSP1CON2        equ	4037	;# 
  2707   000FC5                     SSPCON2         equ	4037	;# 
  2708   000FC6                     SSP1CON1        equ	4038	;# 
  2709   000FC6                     SSPCON1         equ	4038	;# 
  2710   000FC7                     SSP1STAT        equ	4039	;# 
  2711   000FC7                     SSPSTAT         equ	4039	;# 
  2712   000FC8                     SSP1ADD         equ	4040	;# 
  2713   000FC8                     SSPADD          equ	4040	;# 
  2714   000FC9                     SSP1BUF         equ	4041	;# 
  2715   000FC9                     SSPBUF          equ	4041	;# 
  2716   000FCA                     T2CON           equ	4042	;# 
  2717   000FCB                     PR2             equ	4043	;# 
  2718   000FCC                     TMR2            equ	4044	;# 
  2719   000FCD                     T1CON           equ	4045	;# 
  2720   000FCE                     TMR1            equ	4046	;# 
  2721   000FCE                     TMR1L           equ	4046	;# 
  2722   000FCF                     TMR1H           equ	4047	;# 
  2723   000FD0                     RCON            equ	4048	;# 
  2724   000FD1                     WDTCON          equ	4049	;# 
  2725   000FD2                     ECON1           equ	4050	;# 
  2726   000FD3                     OSCCON          equ	4051	;# 
  2727   000FD5                     T0CON           equ	4053	;# 
  2728   000FD6                     TMR0            equ	4054	;# 
  2729   000FD6                     TMR0L           equ	4054	;# 
  2730   000FD7                     TMR0H           equ	4055	;# 
  2731   000FD8                     STATUS          equ	4056	;# 
  2732   000FD9                     FSR2            equ	4057	;# 
  2733   000FD9                     FSR2L           equ	4057	;# 
  2734   000FDA                     FSR2H           equ	4058	;# 
  2735   000FDB                     PLUSW2          equ	4059	;# 
  2736   000FDC                     PREINC2         equ	4060	;# 
  2737   000FDD                     POSTDEC2        equ	4061	;# 
  2738   000FDE                     POSTINC2        equ	4062	;# 
  2739   000FDF                     INDF2           equ	4063	;# 
  2740   000FE0                     BSR             equ	4064	;# 
  2741   000FE1                     FSR1            equ	4065	;# 
  2742   000FE1                     FSR1L           equ	4065	;# 
  2743   000FE2                     FSR1H           equ	4066	;# 
  2744   000FE3                     PLUSW1          equ	4067	;# 
  2745   000FE4                     PREINC1         equ	4068	;# 
  2746   000FE5                     POSTDEC1        equ	4069	;# 
  2747   000FE6                     POSTINC1        equ	4070	;# 
  2748   000FE7                     INDF1           equ	4071	;# 
  2749   000FE8                     WREG            equ	4072	;# 
  2750   000FE9                     FSR0            equ	4073	;# 
  2751   000FE9                     FSR0L           equ	4073	;# 
  2752   000FEA                     FSR0H           equ	4074	;# 
  2753   000FEB                     PLUSW0          equ	4075	;# 
  2754   000FEC                     PREINC0         equ	4076	;# 
  2755   000FED                     POSTDEC0        equ	4077	;# 
  2756   000FEE                     POSTINC0        equ	4078	;# 
  2757   000FEF                     INDF0           equ	4079	;# 
  2758   000FF0                     INTCON3         equ	4080	;# 
  2759   000FF1                     INTCON2         equ	4081	;# 
  2760   000FF2                     INTCON          equ	4082	;# 
  2761   000FF3                     PROD            equ	4083	;# 
  2762   000FF3                     PRODL           equ	4083	;# 
  2763   000FF4                     PRODH           equ	4084	;# 
  2764   000FF5                     TABLAT          equ	4085	;# 
  2765   000FF6                     TBLPTR          equ	4086	;# 
  2766   000FF6                     TBLPTRL         equ	4086	;# 
  2767   000FF7                     TBLPTRH         equ	4087	;# 
  2768   000FF8                     TBLPTRU         equ	4088	;# 
  2769   000FF9                     PCLAT           equ	4089	;# 
  2770   000FF9                     PC              equ	4089	;# 
  2771   000FF9                     PCL             equ	4089	;# 
  2772   000FFA                     PCLATH          equ	4090	;# 
  2773   000FFB                     PCLATU          equ	4091	;# 
  2774   000FFC                     STKPTR          equ	4092	;# 
  2775   000FFD                     TOS             equ	4093	;# 
  2776   000FFD                     TOSL            equ	4093	;# 
  2777   000FFE                     TOSH            equ	4094	;# 
  2778   000FFF                     TOSU            equ	4095	;# 
  2779   000E80                     MAADR5          equ	3712	;# 
  2780   000E81                     MAADR6          equ	3713	;# 
  2781   000E82                     MAADR3          equ	3714	;# 
  2782   000E83                     MAADR4          equ	3715	;# 
  2783   000E84                     MAADR1          equ	3716	;# 
  2784   000E85                     MAADR2          equ	3717	;# 
  2785   000E8A                     MISTAT          equ	3722	;# 
  2786   000E97                     EFLOCON         equ	3735	;# 
  2787   000E98                     EPAUS           equ	3736	;# 
  2788   000E98                     EPAUSL          equ	3736	;# 
  2789   000E99                     EPAUSH          equ	3737	;# 
  2790   000EA0                     MACON1          equ	3744	;# 
  2791   000EA2                     MACON3          equ	3746	;# 
  2792   000EA3                     MACON4          equ	3747	;# 
  2793   000EA4                     MABBIPG         equ	3748	;# 
  2794   000EA6                     MAIPG           equ	3750	;# 
  2795   000EA6                     MAIPGL          equ	3750	;# 
  2796   000EA7                     MAIPGH          equ	3751	;# 
  2797   000EAA                     MAMXFL          equ	3754	;# 
  2798   000EAA                     MAMXFLL         equ	3754	;# 
  2799   000EAB                     MAMXFLH         equ	3755	;# 
  2800   000EB2                     MICMD           equ	3762	;# 
  2801   000EB4                     MIREGADR        equ	3764	;# 
  2802   000EB6                     MIWR            equ	3766	;# 
  2803   000EB6                     MIWRL           equ	3766	;# 
  2804   000EB7                     MIWRH           equ	3767	;# 
  2805   000EB8                     MIRD            equ	3768	;# 
  2806   000EB8                     MIRDL           equ	3768	;# 
  2807   000EB9                     MIRDH           equ	3769	;# 
  2808   000EC0                     EHT0            equ	3776	;# 
  2809   000EC1                     EHT1            equ	3777	;# 
  2810   000EC2                     EHT2            equ	3778	;# 
  2811   000EC3                     EHT3            equ	3779	;# 
  2812   000EC4                     EHT4            equ	3780	;# 
  2813   000EC5                     EHT5            equ	3781	;# 
  2814   000EC6                     EHT6            equ	3782	;# 
  2815   000EC7                     EHT7            equ	3783	;# 
  2816   000EC8                     EPMM0           equ	3784	;# 
  2817   000EC9                     EPMM1           equ	3785	;# 
  2818   000ECA                     EPMM2           equ	3786	;# 
  2819   000ECB                     EPMM3           equ	3787	;# 
  2820   000ECC                     EPMM4           equ	3788	;# 
  2821   000ECD                     EPMM5           equ	3789	;# 
  2822   000ECE                     EPMM6           equ	3790	;# 
  2823   000ECF                     EPMM7           equ	3791	;# 
  2824   000ED0                     EPMCS           equ	3792	;# 
  2825   000ED0                     EPMCSL          equ	3792	;# 
  2826   000ED1                     EPMCSH          equ	3793	;# 
  2827   000ED4                     EPMO            equ	3796	;# 
  2828   000ED4                     EPMOL           equ	3796	;# 
  2829   000ED5                     EPMOH           equ	3797	;# 
  2830   000ED8                     ERXFCON         equ	3800	;# 
  2831   000ED9                     EPKTCNT         equ	3801	;# 
  2832   000EE2                     EWRPT           equ	3810	;# 
  2833   000EE2                     EWRPTL          equ	3810	;# 
  2834   000EE3                     EWRPTH          equ	3811	;# 
  2835   000EE4                     ETXST           equ	3812	;# 
  2836   000EE4                     ETXSTL          equ	3812	;# 
  2837   000EE5                     ETXSTH          equ	3813	;# 
  2838   000EE6                     ETXND           equ	3814	;# 
  2839   000EE6                     ETXNDL          equ	3814	;# 
  2840   000EE7                     ETXNDH          equ	3815	;# 
  2841   000EE8                     ERXST           equ	3816	;# 
  2842   000EE8                     ERXSTL          equ	3816	;# 
  2843   000EE9                     ERXSTH          equ	3817	;# 
  2844   000EEA                     ERXND           equ	3818	;# 
  2845   000EEA                     ERXNDL          equ	3818	;# 
  2846   000EEB                     ERXNDH          equ	3819	;# 
  2847   000EEC                     ERXRDPT         equ	3820	;# 
  2848   000EEC                     ERXRDPTL        equ	3820	;# 
  2849   000EED                     ERXRDPTH        equ	3821	;# 
  2850   000EEE                     ERXWRPT         equ	3822	;# 
  2851   000EEE                     ERXWRPTL        equ	3822	;# 
  2852   000EEF                     ERXWRPTH        equ	3823	;# 
  2853   000EF0                     EDMAST          equ	3824	;# 
  2854   000EF0                     EDMASTL         equ	3824	;# 
  2855   000EF1                     EDMASTH         equ	3825	;# 
  2856   000EF2                     EDMAND          equ	3826	;# 
  2857   000EF2                     EDMANDL         equ	3826	;# 
  2858   000EF3                     EDMANDH         equ	3827	;# 
  2859   000EF4                     EDMADST         equ	3828	;# 
  2860   000EF4                     EDMADSTL        equ	3828	;# 
  2861   000EF5                     EDMADSTH        equ	3829	;# 
  2862   000EF6                     EDMACS          equ	3830	;# 
  2863   000EF6                     EDMACSL         equ	3830	;# 
  2864   000EF7                     EDMACSH         equ	3831	;# 
  2865   000EFB                     EIE             equ	3835	;# 
  2866   000EFD                     ESTAT           equ	3837	;# 
  2867   000EFE                     ECON2           equ	3838	;# 
  2868   000F60                     EIR             equ	3936	;# 
  2869   000F61                     EDATA           equ	3937	;# 
  2870   000F62                     SSP2CON2        equ	3938	;# 
  2871   000F63                     SSP2CON1        equ	3939	;# 
  2872   000F64                     SSP2STAT        equ	3940	;# 
  2873   000F65                     SSP2ADD         equ	3941	;# 
  2874   000F66                     SSP2BUF         equ	3942	;# 
  2875   000F67                     ECCP2DEL        equ	3943	;# 
  2876   000F68                     ECCP2AS         equ	3944	;# 
  2877   000F69                     ECCP3DEL        equ	3945	;# 
  2878   000F6A                     ECCP3AS         equ	3946	;# 
  2879   000F6B                     RCSTA2          equ	3947	;# 
  2880   000F6C                     TXSTA2          equ	3948	;# 
  2881   000F6D                     TXREG2          equ	3949	;# 
  2882   000F6E                     RCREG2          equ	3950	;# 
  2883   000F6F                     SPBRG2          equ	3951	;# 
  2884   000F70                     CCP5CON         equ	3952	;# 
  2885   000F71                     CCPR5           equ	3953	;# 
  2886   000F71                     CCPR5L          equ	3953	;# 
  2887   000F72                     CCPR5H          equ	3954	;# 
  2888   000F73                     CCP4CON         equ	3955	;# 
  2889   000F74                     CCPR4           equ	3956	;# 
  2890   000F74                     CCPR4L          equ	3956	;# 
  2891   000F75                     CCPR4H          equ	3957	;# 
  2892   000F76                     T4CON           equ	3958	;# 
  2893   000F77                     PR4             equ	3959	;# 
  2894   000F78                     TMR4            equ	3960	;# 
  2895   000F79                     ECCP1DEL        equ	3961	;# 
  2896   000F7A                     ERDPT           equ	3962	;# 
  2897   000F7A                     ERDPTL          equ	3962	;# 
  2898   000F7B                     ERDPTH          equ	3963	;# 
  2899   000F7C                     BAUDCON2        equ	3964	;# 
  2900   000F7C                     BAUDCTL2        equ	3964	;# 
  2901   000F7D                     SPBRGH2         equ	3965	;# 
  2902   000F7E                     BAUDCON1        equ	3966	;# 
  2903   000F7E                     BAUDCON         equ	3966	;# 
  2904   000F7E                     BAUDCTL         equ	3966	;# 
  2905   000F7E                     BAUDCTL1        equ	3966	;# 
  2906   000F7F                     SPBRGH1         equ	3967	;# 
  2907   000F7F                     SPBRGH          equ	3967	;# 
  2908   000F80                     PORTA           equ	3968	;# 
  2909   000F81                     PORTB           equ	3969	;# 
  2910   000F82                     PORTC           equ	3970	;# 
  2911   000F83                     PORTD           equ	3971	;# 
  2912   000F84                     PORTE           equ	3972	;# 
  2913   000F85                     PORTF           equ	3973	;# 
  2914   000F86                     PORTG           equ	3974	;# 
  2915   000F87                     PORTH           equ	3975	;# 
  2916   000F88                     PORTJ           equ	3976	;# 
  2917   000F89                     LATA            equ	3977	;# 
  2918   000F8A                     LATB            equ	3978	;# 
  2919   000F8B                     LATC            equ	3979	;# 
  2920   000F8C                     LATD            equ	3980	;# 
  2921   000F8D                     LATE            equ	3981	;# 
  2922   000F8E                     LATF            equ	3982	;# 
  2923   000F8F                     LATG            equ	3983	;# 
  2924   000F90                     LATH            equ	3984	;# 
  2925   000F91                     LATJ            equ	3985	;# 
  2926   000F92                     TRISA           equ	3986	;# 
  2927   000F92                     DDRA            equ	3986	;# 
  2928   000F93                     TRISB           equ	3987	;# 
  2929   000F93                     DDRB            equ	3987	;# 
  2930   000F94                     TRISC           equ	3988	;# 
  2931   000F94                     DDRC            equ	3988	;# 
  2932   000F95                     TRISD           equ	3989	;# 
  2933   000F95                     DDRD            equ	3989	;# 
  2934   000F96                     TRISE           equ	3990	;# 
  2935   000F96                     DDRE            equ	3990	;# 
  2936   000F97                     TRISF           equ	3991	;# 
  2937   000F97                     DDRF            equ	3991	;# 
  2938   000F98                     TRISG           equ	3992	;# 
  2939   000F98                     DDRG            equ	3992	;# 
  2940   000F99                     TRISH           equ	3993	;# 
  2941   000F99                     DDRH            equ	3993	;# 
  2942   000F9A                     TRISJ           equ	3994	;# 
  2943   000F9A                     DDRJ            equ	3994	;# 
  2944   000F9B                     OSCTUNE         equ	3995	;# 
  2945   000F9C                     MEMCON          equ	3996	;# 
  2946   000F9D                     PIE1            equ	3997	;# 
  2947   000F9E                     PIR1            equ	3998	;# 
  2948   000F9F                     IPR1            equ	3999	;# 
  2949   000FA0                     PIE2            equ	4000	;# 
  2950   000FA1                     PIR2            equ	4001	;# 
  2951   000FA2                     IPR2            equ	4002	;# 
  2952   000FA3                     PIE3            equ	4003	;# 
  2953   000FA4                     PIR3            equ	4004	;# 
  2954   000FA5                     IPR3            equ	4005	;# 
  2955   000FA6                     EECON1          equ	4006	;# 
  2956   000FA7                     EECON2          equ	4007	;# 
  2957   000FAB                     RCSTA1          equ	4011	;# 
  2958   000FAB                     RCSTA           equ	4011	;# 
  2959   000FAC                     TXSTA1          equ	4012	;# 
  2960   000FAC                     TXSTA           equ	4012	;# 
  2961   000FAD                     TXREG1          equ	4013	;# 
  2962   000FAD                     TXREG           equ	4013	;# 
  2963   000FAE                     RCREG1          equ	4014	;# 
  2964   000FAE                     RCREG           equ	4014	;# 
  2965   000FAF                     SPBRG1          equ	4015	;# 
  2966   000FAF                     SPBRG           equ	4015	;# 
  2967   000FB0                     PSPCON          equ	4016	;# 
  2968   000FB1                     T3CON           equ	4017	;# 
  2969   000FB2                     TMR3            equ	4018	;# 
  2970   000FB2                     TMR3L           equ	4018	;# 
  2971   000FB3                     TMR3H           equ	4019	;# 
  2972   000FB4                     CMCON           equ	4020	;# 
  2973   000FB5                     CVRCON          equ	4021	;# 
  2974   000FB6                     ECCP1AS         equ	4022	;# 
  2975   000FB7                     CCP3CON         equ	4023	;# 
  2976   000FB7                     ECCP3CON        equ	4023	;# 
  2977   000FB8                     CCPR3           equ	4024	;# 
  2978   000FB8                     CCPR3L          equ	4024	;# 
  2979   000FB9                     CCPR3H          equ	4025	;# 
  2980   000FBA                     CCP2CON         equ	4026	;# 
  2981   000FBA                     ECCP2CON        equ	4026	;# 
  2982   000FBB                     CCPR2           equ	4027	;# 
  2983   000FBB                     CCPR2L          equ	4027	;# 
  2984   000FBC                     CCPR2H          equ	4028	;# 
  2985   000FBD                     CCP1CON         equ	4029	;# 
  2986   000FBD                     ECCP1CON        equ	4029	;# 
  2987   000FBE                     CCPR1           equ	4030	;# 
  2988   000FBE                     CCPR1L          equ	4030	;# 
  2989   000FBF                     CCPR1H          equ	4031	;# 
  2990   000FC0                     ADCON2          equ	4032	;# 
  2991   000FC1                     ADCON1          equ	4033	;# 
  2992   000FC2                     ADCON0          equ	4034	;# 
  2993   000FC3                     ADRES           equ	4035	;# 
  2994   000FC3                     ADRESL          equ	4035	;# 
  2995   000FC4                     ADRESH          equ	4036	;# 
  2996   000FC5                     SSP1CON2        equ	4037	;# 
  2997   000FC5                     SSPCON2         equ	4037	;# 
  2998   000FC6                     SSP1CON1        equ	4038	;# 
  2999   000FC6                     SSPCON1         equ	4038	;# 
  3000   000FC7                     SSP1STAT        equ	4039	;# 
  3001   000FC7                     SSPSTAT         equ	4039	;# 
  3002   000FC8                     SSP1ADD         equ	4040	;# 
  3003   000FC8                     SSPADD          equ	4040	;# 
  3004   000FC9                     SSP1BUF         equ	4041	;# 
  3005   000FC9                     SSPBUF          equ	4041	;# 
  3006   000FCA                     T2CON           equ	4042	;# 
  3007   000FCB                     PR2             equ	4043	;# 
  3008   000FCC                     TMR2            equ	4044	;# 
  3009   000FCD                     T1CON           equ	4045	;# 
  3010   000FCE                     TMR1            equ	4046	;# 
  3011   000FCE                     TMR1L           equ	4046	;# 
  3012   000FCF                     TMR1H           equ	4047	;# 
  3013   000FD0                     RCON            equ	4048	;# 
  3014   000FD1                     WDTCON          equ	4049	;# 
  3015   000FD2                     ECON1           equ	4050	;# 
  3016   000FD3                     OSCCON          equ	4051	;# 
  3017   000FD5                     T0CON           equ	4053	;# 
  3018   000FD6                     TMR0            equ	4054	;# 
  3019   000FD6                     TMR0L           equ	4054	;# 
  3020   000FD7                     TMR0H           equ	4055	;# 
  3021   000FD8                     STATUS          equ	4056	;# 
  3022   000FD9                     FSR2            equ	4057	;# 
  3023   000FD9                     FSR2L           equ	4057	;# 
  3024   000FDA                     FSR2H           equ	4058	;# 
  3025   000FDB                     PLUSW2          equ	4059	;# 
  3026   000FDC                     PREINC2         equ	4060	;# 
  3027   000FDD                     POSTDEC2        equ	4061	;# 
  3028   000FDE                     POSTINC2        equ	4062	;# 
  3029   000FDF                     INDF2           equ	4063	;# 
  3030   000FE0                     BSR             equ	4064	;# 
  3031   000FE1                     FSR1            equ	4065	;# 
  3032   000FE1                     FSR1L           equ	4065	;# 
  3033   000FE2                     FSR1H           equ	4066	;# 
  3034   000FE3                     PLUSW1          equ	4067	;# 
  3035   000FE4                     PREINC1         equ	4068	;# 
  3036   000FE5                     POSTDEC1        equ	4069	;# 
  3037   000FE6                     POSTINC1        equ	4070	;# 
  3038   000FE7                     INDF1           equ	4071	;# 
  3039   000FE8                     WREG            equ	4072	;# 
  3040   000FE9                     FSR0            equ	4073	;# 
  3041   000FE9                     FSR0L           equ	4073	;# 
  3042   000FEA                     FSR0H           equ	4074	;# 
  3043   000FEB                     PLUSW0          equ	4075	;# 
  3044   000FEC                     PREINC0         equ	4076	;# 
  3045   000FED                     POSTDEC0        equ	4077	;# 
  3046   000FEE                     POSTINC0        equ	4078	;# 
  3047   000FEF                     INDF0           equ	4079	;# 
  3048   000FF0                     INTCON3         equ	4080	;# 
  3049   000FF1                     INTCON2         equ	4081	;# 
  3050   000FF2                     INTCON          equ	4082	;# 
  3051   000FF3                     PROD            equ	4083	;# 
  3052   000FF3                     PRODL           equ	4083	;# 
  3053   000FF4                     PRODH           equ	4084	;# 
  3054   000FF5                     TABLAT          equ	4085	;# 
  3055   000FF6                     TBLPTR          equ	4086	;# 
  3056   000FF6                     TBLPTRL         equ	4086	;# 
  3057   000FF7                     TBLPTRH         equ	4087	;# 
  3058   000FF8                     TBLPTRU         equ	4088	;# 
  3059   000FF9                     PCLAT           equ	4089	;# 
  3060   000FF9                     PC              equ	4089	;# 
  3061   000FF9                     PCL             equ	4089	;# 
  3062   000FFA                     PCLATH          equ	4090	;# 
  3063   000FFB                     PCLATU          equ	4091	;# 
  3064   000FFC                     STKPTR          equ	4092	;# 
  3065   000FFD                     TOS             equ	4093	;# 
  3066   000FFD                     TOSL            equ	4093	;# 
  3067   000FFE                     TOSH            equ	4094	;# 
  3068   000FFF                     TOSU            equ	4095	;# 
  3069                           
  3070 ;;_filterObj	offset	0
  3071 ;;_maskObj	offset	6
  3072 ;;_rxObj	offset	0
  3073 ;;_rxdata	offset	16
  3074 ;;_ev	offset	0
  3075 ;;_tmid	offset	6
  3076 ;;_processEvent	offset=-3 (param)
  3077 ;;_id	offset=-4 (param)
  3078 ;;_delay	offset=-6 (param)
  3079 ;;_tm	offset	0
  3080 ;;_temp	offset	2
  3081 ;;_ev	offset=-6 (param)
  3082 ;;_inISR	offset=-7 (param)
  3083 ;;_tmid	offset=-9 (param)
  3084 ;;_i	offset	0
  3085 ;;_tm	offset=-2 (param)
  3086 ;;_ev	offset=-8 (param)
  3087 ;;_inISR	offset=-9 (param)
  3088 ;;_me	offset=-2 (param)
  3089 ;;_delay	offset=-4 (param)
  3090 ;;_me	offset=-2 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_processEvent	offset=-5 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_eventID	offset=-3 (param)
  3095 ;;_rxFlags	offset	0
  3096 ;;_rxObj	offset=-2 (param)
  3097 ;;_rxd	offset=-4 (param)
  3098 ;;_temp32	offset	0
  3099 ;;_ba	offset	4
  3100 ;;_fifoReg	offset	80
  3101 ;;_ciFifoCon	offset	92
  3102 ;;_myReg	offset	97
  3103 ;;_ciFifoUa	offset	101
  3104 ;;_a	offset	105
  3105 ;;_i	offset	107
  3106 ;;_n	offset	108
  3107 ;;_spiTransferError	offset	109
  3108 ;;_channel	offset=-1 (param)
  3109 ;;_rxObj	offset=-3 (param)
  3110 ;;_rxd	offset=-5 (param)
  3111 ;;_nBytes	offset=-6 (param)
  3112 ;;_ciFifoCon	offset	0
  3113 ;;_a	offset	5
  3114 ;;_spiTransferError	offset	7
  3115 ;;_channel	offset=-1 (param)
  3116 ;;_i	offset	0
  3117 ;;_spiTransferSize	offset	2
  3118 ;;_spiTransferError	offset	4
  3119 ;;_address	offset=-2 (param)
  3120 ;;_rxd	offset=-4 (param)
  3121 ;;_nBytes	offset=-6 (param)
  3122 ;;_ciFifoSta	offset	0
  3123 ;;_a	offset	4
  3124 ;;_spiTransferError	offset	6
  3125 ;;_channel	offset=-1 (param)
  3126 ;;_flags	offset=-3 (param)
  3127 ;;_i	offset	0
  3128 ;;_me	offset=-2 (param)
  3129 ;;_ev	offset	0
  3130 ;;_motorControl_Process$5903	offset	0
  3131 ;;_ev	offset=-2 (param)
  3132 ;;_txMsg	offset	0
  3133 ;;_txdata	offset	16
  3134 ;;_percent	offset=-1 (param)
  3135 ;;_starter	offset=-2 (param)
  3136 ;;_ev	offset=-2 (param)
  3137 ;;_txMsg	offset	0
  3138 ;;_txdata	offset	16
  3139 ;;_light	offset=-1 (param)
  3140 ;;_txMsg	offset	0
  3141 ;;_txdata	offset	16
  3142 ;;_light	offset=-1 (param)
  3143 ;;_txFlags	offset	0
  3144 ;;_txObj	offset=-2 (param)
  3145 ;;_txd	offset=-4 (param)
  3146 ;;_temp32	offset	0
  3147 ;;_txBuffer	offset	4
  3148 ;;_fifoReg	offset	80
  3149 ;;_ciFifoCon	offset	92
  3150 ;;_a	offset	97
  3151 ;;_ciFifoUa	offset	101
  3152 ;;_dataBytesInObject	offset	105
  3153 ;;_n	offset	109
  3154 ;;_spiTransferError	offset	111
  3155 ;;_i	offset	112
  3156 ;;_j	offset	113
  3157 ;;_channel	offset=-1 (param)
  3158 ;;_txObj	offset=-3 (param)
  3159 ;;_txd	offset=-5 (param)
  3160 ;;_txdNumBytes	offset=-9 (param)
  3161 ;;_flush	offset=-10 (param)
  3162 ;;_i	offset	0
  3163 ;;_spiTransferSize	offset	2
  3164 ;;_spiTransferError	offset	4
  3165 ;;_address	offset=-2 (param)
  3166 ;;_txd	offset=-4 (param)
  3167 ;;_nBytes	offset=-6 (param)
  3168 ;;_ciFifoCon	offset	0
  3169 ;;_a	offset	5
  3170 ;;_spiTransferError	offset	7
  3171 ;;_channel	offset=-1 (param)
  3172 ;;_flush	offset=-2 (param)
  3173 ;;_w	offset	0
  3174 ;;_i	offset	4
  3175 ;;_j	offset	6
  3176 ;;_spiTransferSize	offset	8
  3177 ;;_n	offset	10
  3178 ;;_spiTransferError	offset	12
  3179 ;;_address	offset=-2 (param)
  3180 ;;_rxd	offset=-4 (param)
  3181 ;;_nWords	offset=-6 (param)
  3182 ;;_dataBytesInObject	offset	0
  3183 ;;_dlc	offset=-1 (param)
  3184 ;;_ciFifoSta	offset	0
  3185 ;;_a	offset	4
  3186 ;;_spiTransferError	offset	6
  3187 ;;_channel	offset=-1 (param)
  3188 ;;_flags	offset=-3 (param)
  3189 ;;_ev	offset	0
  3190 ;;_inISR	offset=-6 (param)
  3191 ;;_sign	offset	0
  3192 ;;_counter	offset	1
  3193 ;;_dividend	offset=-2 (param)
  3194 ;;_divisor	offset=-4 (param)
  3195 ;;_inISR	offset=-1 (param)
  3196 ;;_inISR	offset=-1 (param)
  3197 ;;_InterruptHandler	offset=-3 (param)
  3198 ;;_filter	offset=-1 (param)
  3199 ;;_fObj	offset=-3 (param)
  3200 ;;_mObj	offset=-5 (param)
  3201 ;;_a	offset	0
  3202 ;;_fCtrl	offset	2
  3203 ;;_filter	offset=-1 (param)
  3204 ;;_channel	offset=-2 (param)
  3205 ;;_enable	offset=-3 (param)
  3206 ;;_temp32	offset	0
  3207 ;;_fObj	offset	4
  3208 ;;_a	offset	10
  3209 ;;_filter	offset=-1 (param)
  3210 ;;_id	offset=-3 (param)
  3211 ;;_temp32	offset	0
  3212 ;;_mObj	offset	4
  3213 ;;_a	offset	10
  3214 ;;_filter	offset=-1 (param)
  3215 ;;_mask	offset=-3 (param)
  3216 ;;_EXIDE	offset=-4 (param)
  3217 ;;_a	offset	0
  3218 ;;_spiTransferError	offset	2
  3219 ;;_fCtrl	offset	3
  3220 ;;_filter	offset=-1 (param)
  3221 ;;_txqConfig	offset	0
  3222 ;;_config	offset	4
  3223 ;;_rxfConfig	offset	7
  3224 ;;_txfConfig	offset	10
  3225 ;;_tefConfig	offset	12
  3226 ;;_bitTime	offset=-1 (param)
  3227 ;;_withISR	offset=-2 (param)
  3228 ;;_ciFifoCon	offset	0
  3229 ;;_config	offset=-2 (param)
  3230 ;;_ciFifoCon	offset	0
  3231 ;;_config	offset=-2 (param)
  3232 ;;_ciFifoCon	offset	0
  3233 ;;_config	offset=-2 (param)
  3234 ;;_ciFifoCon	offset	0
  3235 ;;_a	offset	5
  3236 ;;_channel	offset=-1 (param)
  3237 ;;_config	offset=-3 (param)
  3238 ;;_ts	offset=-4 (param)
  3239 ;;_ps	offset=-2 (param)
  3240 ;;_d	offset	0
  3241 ;;_spiTransferError	offset	1
  3242 ;;_ciTefCon	offset	0
  3243 ;;_config	offset=-2 (param)
  3244 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3245 ;;_ciFifoCon	offset	0
  3246 ;;_a	offset	5
  3247 ;;_channel	offset=-1 (param)
  3248 ;;_config	offset=-3 (param)
  3249 ;;_d	offset	0
  3250 ;;_spiTransferError	offset	1
  3251 ;;_opMode	offset=-1 (param)
  3252 ;;_spiTransferError	offset	0
  3253 ;;_address	offset=-2 (param)
  3254 ;;_txd	offset=-3 (param)
  3255 ;;_spiTransferError	offset	0
  3256 ;;_address	offset=-2 (param)
  3257 ;;_rxd	offset=-4 (param)
  3258 ;;_intEnables	offset	0
  3259 ;;_index	offset=-1 (param)
  3260 ;;_flags	offset=-3 (param)
  3261 ;;_spiTransferSize	offset	0
  3262 ;;_i	offset	2
  3263 ;;_spiTransferError	offset	3
  3264 ;;_address	offset=-2 (param)
  3265 ;;_txd	offset=-4 (param)
  3266 ;;_ciCon	offset	0
  3267 ;;_config	offset=-2 (param)
  3268 ;;_ciCon	offset	0
  3269 ;;_config	offset=-2 (param)
  3270 ;;_ciNbtcfg	offset	0
  3271 ;;_bitTime	offset=-1 (param)
  3272 ;;_spiTransferSize	offset	0
  3273 ;;_i	offset	2
  3274 ;;_spiTransferError	offset	3
  3275 ;;_address	offset=-2 (param)
  3276 ;;_txd	offset=-6 (param)
  3277 ;;_dummy	offset	0
  3278 ;;_txPtr	offset=-2 (param)
  3279 ;;_rxPtr	offset=-4 (param)
  3280 ;;_size	offset=-6 (param)
  3281 ;;_dummy	offset	0
  3282 ;;_i	offset	1
  3283 ;;_id	offset=-1 (param)
  3284 ;;_inISR	offset=-2 (param)
  3285 ;;_me	offset=-2 (param)
  3286 ;;_tm	offset	0
  3287 ;;_temp	offset	2
  3288 ;;_ev	offset=-6 (param)
  3289 ;;_inISR	offset=-7 (param)
  3290 ;;_tmid	offset=-9 (param)
  3291 ;;_sign	offset	0
  3292 ;;_counter	offset	1
  3293 ;;_dividend	offset=-2 (param)
  3294 ;;_divisor	offset=-4 (param)
  3295 ;;_i	offset	0
  3296 ;;_tm	offset=-2 (param)
  3297 ;;_ev	offset=-8 (param)
  3298 ;;_inISR	offset=-9 (param)
  3299 ;;_inISR	offset=-1 (param)
  3300 ;;_inISR	offset=-1 (param)
  3301 ;;_me	offset=-2 (param)
  3302 ;;_delay	offset=-4 (param)
  3303 ;;_me	offset=-2 (param)
  3304                           
  3305                           	psect	mediumconst
  3306   00FF8C                     __pmediumconst:
  3307                           	callstack 0
  3308   00FF8C  00                 	db	0
  3309   00FF8D                     _canControlResetValues:
  3310                           	callstack 0
  3311   00FF8D  0760               	dw	1888
  3312   00FF8F  0498               	dw	1176
  3313   00FF91  0F0F               	dw	3855
  3314   00FF93  003E               	dw	62
  3315   00FF95  0303               	dw	771
  3316   00FF97  000E               	dw	14
  3317   00FF99  1000               	dw	4096
  3318   00FF9B  0002               	dw	2
  3319   00FF9D  0000               	dw	0
  3320   00FF9F  0000               	dw	0
  3321   00FFA1  0000               	dw	0
  3322   00FFA3  0000               	dw	0
  3323   00FFA5  0040               	dw	64
  3324   00FFA7  4040               	dw	16448
  3325   00FFA9  0000               	dw	0
  3326   00FFAB  0000               	dw	0
  3327   00FFAD  0000               	dw	0
  3328   00FFAF  0000               	dw	0
  3329   00FFB1  0000               	dw	0
  3330   00FFB3  0000               	dw	0
  3331   00FFB5  0000               	dw	0
  3332   00FFB7  0000               	dw	0
  3333   00FFB9  0000               	dw	0
  3334   00FFBB  0000               	dw	0
  3335   00FFBD  0000               	dw	0
  3336   00FFBF  0000               	dw	0
  3337   00FFC1  0000               	dw	0
  3338   00FFC3  0020               	dw	32
  3339   00FFC5  0000               	dw	0
  3340   00FFC7  0000               	dw	0
  3341   00FFC9  0000               	dw	0
  3342   00FFCB  0000               	dw	0
  3343   00FFCD  0400               	dw	1024
  3344   00FFCF  0000               	dw	0
  3345   00FFD1  0000               	dw	0
  3346   00FFD3  0000               	dw	0
  3347   00FFD5  0000               	dw	0
  3348   00FFD7  0000               	dw	0
  3349   00FFD9  0000               	dw	0
  3350   00FFDB  0000               	dw	0
  3351   00FFDD                     __end_of_canControlResetValues:
  3352                           	callstack 0
  3353   00FFDD                     _canFifoResetValues:
  3354                           	callstack 0
  3355   00FFDD  0400               	dw	1024
  3356   00FFDF  0060               	dw	96
  3357   00FFE1  0000               	dw	0
  3358   00FFE3  0000               	dw	0
  3359   00FFE5  0000               	dw	0
  3360   00FFE7  0000               	dw	0
  3361   00FFE9                     __end_of_canFifoResetValues:
  3362                           	callstack 0
  3363   00FFE9                     _spi2_configuration:
  3364                           	callstack 0
  3365   00FFE9  01                 	db	1
  3366   00FFEA  40                 	db	64
  3367   00FFEB  00                 	db	0
  3368   00FFEC  00                 	db	0
  3369   00FFED                     __end_of_spi2_configuration:
  3370                           	callstack 0
  3371   00FFED                     STR_1:
  3372   00FFED  20                 	db	32
  3373   00FFEE  20                 	db	32
  3374   00FFEF  20                 	db	32
  3375   00FFF0  20                 	db	32
  3376   00FFF1  20                 	db	32
  3377   00FFF2  20                 	db	32
  3378   00FFF3  20                 	db	32
  3379   00FFF4  20                 	db	32
  3380   00FFF5  20                 	db	32
  3381   00FFF6  20                 	db	32
  3382   00FFF7  20                 	db	32
  3383   00FFF8  20                 	db	32
  3384   00FFF9  20                 	db	32
  3385   00FFFA  20                 	db	32
  3386   00FFFB  20                 	db	32
  3387   00FFFC  20                 	db	32
  3388   00FFFD  00                 	db	0
  3389   00FFED                     STR_2           equ	STR_1
  3390   00FFFE  00                 	db	0	; dummy byte at the end
  3391   000003                     __activetblptr  equ	3
  3392                           
  3393                           	psect	nvCOMRAM
  3394   00005C                     __pnvCOMRAM:
  3395                           	callstack 0
  3396   00005C                     _TMR0_InterruptHandler:
  3397                           	callstack 0
  3398   00005C                     	ds	3
  3399   000F62                     _SSP2CON2       set	3938
  3400   000F63                     _SSP2CON1bits   set	3939
  3401   000F65                     _SSP2ADD        set	3941
  3402   000F63                     _SSP2CON1       set	3939
  3403   000F64                     _SSP2STAT       set	3940
  3404   000FD5                     _T0CON          set	4053
  3405   000FD6                     _TMR0L          set	4054
  3406   000FD7                     _TMR0H          set	4055
  3407   000FD5                     _T0CONbits      set	4053
  3408   000FF2                     _INTCONbits     set	4082
  3409   000FD0                     _RCONbits       set	4048
  3410   000FC1                     _ADCON1bits     set	4033
  3411   000F95                     _TRISD          set	3989
  3412   000F94                     _TRISC          set	3988
  3413   000F99                     _TRISH          set	3993
  3414   000F93                     _TRISB          set	3987
  3415   000F98                     _TRISG          set	3992
  3416   000F92                     _TRISA          set	3986
  3417   000F97                     _TRISF          set	3991
  3418   000F96                     _TRISE          set	3990
  3419   000F90                     _LATH           set	3984
  3420   000F8B                     _LATC           set	3979
  3421   000F8F                     _LATG           set	3983
  3422   000F8A                     _LATB           set	3978
  3423   000F8E                     _LATF           set	3982
  3424   000F89                     _LATA           set	3977
  3425   000F8C                     _LATD           set	3980
  3426   000F91                     _LATJ           set	3985
  3427   000F8D                     _LATE           set	3981
  3428   000F9B                     _OSCTUNE        set	3995
  3429   000FD3                     _OSCCON         set	4051
  3430   000F9A                     _TRISJ          set	3994
  3431   000F95                     _TRISDbits      set	3989
  3432   000F98                     _TRISGbits      set	3992
  3433   000F66                     _SSP2BUF        set	3942
  3434   000F64                     _SSP2STATbits   set	3940
  3435   000F8F                     _LATGbits       set	3983
  3436                           
  3437                           ; #config settings
  3438                           
  3439                           	psect	cinit
  3440   01474E                     __pcinit:
  3441                           	callstack 0
  3442   01474E                     start_initialization:
  3443                           	callstack 0
  3444   01474E                     __initialization:
  3445                           	callstack 0
  3446                           
  3447                           ; Clear objects allocated to BIGRAM (282 bytes)
  3448   01474E  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3449   014752  EE21 F01A          	lfsr	2,282
  3450   014756                     clear_0:
  3451   014756  6AEE               	clrf	postinc0,c
  3452   014758  50DD               	movf	postdec2,w,c
  3453   01475A  50D9               	movf	fsr2l,w,c
  3454   01475C  E1FC               	bnz	clear_0
  3455   01475E  50DA               	movf	fsr2h,w,c
  3456   014760  E1FA               	bnz	clear_0
  3457                           
  3458                           ; Clear objects allocated to BANK2 (200 bytes)
  3459   014762  EE02  F000         	lfsr	0,__pbssBANK2
  3460   014766  0EC8               	movlw	200
  3461   014768                     clear_1:
  3462   014768  6AEE               	clrf	postinc0,c
  3463   01476A  06E8               	decf	wreg,f,c
  3464   01476C  E1FD               	bnz	clear_1
  3465                           
  3466                           ; Clear objects allocated to BANK1 (200 bytes)
  3467   01476E  EE01  F000         	lfsr	0,__pbssBANK1
  3468   014772  0EC8               	movlw	200
  3469   014774                     clear_2:
  3470   014774  6AEE               	clrf	postinc0,c
  3471   014776  06E8               	decf	wreg,f,c
  3472   014778  E1FD               	bnz	clear_2
  3473                           
  3474                           ; Clear objects allocated to BANK0 (48 bytes)
  3475   01477A  EE00  F060         	lfsr	0,__pbssBANK0
  3476   01477E  0E30               	movlw	48
  3477   014780                     clear_3:
  3478   014780  6AEE               	clrf	postinc0,c
  3479   014782  06E8               	decf	wreg,f,c
  3480   014784  E1FD               	bnz	clear_3
  3481                           
  3482                           ; Clear objects allocated to COMRAM (43 bytes)
  3483   014786  EE00  F001         	lfsr	0,__pbssCOMRAM
  3484   01478A  0E2B               	movlw	43
  3485   01478C                     clear_4:
  3486   01478C  6AEE               	clrf	postinc0,c
  3487   01478E  06E8               	decf	wreg,f,c
  3488   014790  E1FD               	bnz	clear_4
  3489   014792                     end_of_initialization:
  3490                           	callstack 0
  3491   014792                     __end_of__initialization:
  3492                           	callstack 0
  3493   014792  0100               	movlb	0
  3494   014794  EFC5  F099         	goto	_main	;jump to C main() function
  3495                           
  3496                           	psect	bssCOMRAM
  3497   000001                     __pbssCOMRAM:
  3498                           	callstack 0
  3499   000001                     _carState:
  3500                           	callstack 0
  3501   000001                     	ds	27
  3502   00001C                     _dummy:
  3503                           	callstack 0
  3504   00001C                     	ds	4
  3505   000020                     TMR0_ISR@CountCallBack:
  3506                           	callstack 0
  3507   000020                     	ds	2
  3508   000022                     _timer0ReloadVal:
  3509                           	callstack 0
  3510   000022                     	ds	2
  3511   000024                     lightControl_Process@oldState:
  3512                           	callstack 0
  3513   000024                     	ds	1
  3514   000025                     lightControl_Process@state:
  3515                           	callstack 0
  3516   000025                     	ds	1
  3517   000026                     motorControl_Process@oldState:
  3518                           	callstack 0
  3519   000026                     	ds	1
  3520   000027                     motorControl_Process@state:
  3521                           	callstack 0
  3522   000027                     	ds	1
  3523   000028                     lightContol_BackLight@lastLight:
  3524                           	callstack 0
  3525   000028                     	ds	1
  3526   000029                     lightContol_FrontLight@lastLight:
  3527                           	callstack 0
  3528   000029                     	ds	1
  3529   00002A                     motorControl@lastStarter:
  3530                           	callstack 0
  3531   00002A                     	ds	1
  3532   00002B                     motorControl@lastPercent:
  3533                           	callstack 0
  3534   00002B                     	ds	1
  3535                           
  3536                           	psect	bssBANK0
  3537   000060                     __pbssBANK0:
  3538                           	callstack 0
  3539   000060                     lightContol_BackLight@F6670:
  3540                           	callstack 0
  3541   000060                     	ds	16
  3542   000070                     lightContol_FrontLight@F6664:
  3543                           	callstack 0
  3544   000070                     	ds	16
  3545   000080                     motorControl@F6658:
  3546                           	callstack 0
  3547   000080                     	ds	16
  3548                           
  3549                           	psect	bssBANK1
  3550   000100                     __pbssBANK1:
  3551                           	callstack 0
  3552   000100                     _spiTransmitBuffer:
  3553                           	callstack 0
  3554   000100                     	ds	200
  3555                           
  3556                           	psect	bssBANK2
  3557   000200                     __pbssBANK2:
  3558                           	callstack 0
  3559   000200                     _spiReceiveBuffer:
  3560                           	callstack 0
  3561   000200                     	ds	200
  3562                           
  3563                           	psect	bssBIGRAM
  3564   0002C8                     __pbssBIGRAM:
  3565                           	callstack 0
  3566   0002C8                     _theXF:
  3567                           	callstack 0
  3568   0002C8                     	ds	282
  3569                           
  3570                           	psect	cstackCOMRAM
  3571   00004C                     __pcstackCOMRAM:
  3572                           	callstack 0
  3573   00004C                     ??_INTERRUPT_InterruptManager:
  3574                           
  3575                           ; 1 bytes @ 0x0
  3576   00004C                     	ds	16
  3577                           
  3578 ;;
  3579 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3580 ;;
  3581 ;; *************** function _main *****************
  3582 ;; Defined at:
  3583 ;;		line 56 in file "main.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  filterObj       6  [STACK] struct _CAN_FILTEROBJ_ID
  3588 ;;  maskObj         6  [STACK] struct _CAN_MASKOBJ_ID
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1  [STACK] void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;Total ram usage:        0 bytes
  3603 ;; Hardware stack levels required when called: 15
  3604 ;; This function calls:
  3605 ;;		_CanInit
  3606 ;;		_CanSetFilter
  3607 ;;		_SYSTEM_Initialize
  3608 ;;		_TMR0_SetInterruptHandler
  3609 ;;		_XF_executeOnce
  3610 ;;		_XF_init
  3611 ;;		_XF_post
  3612 ;;		_updateCarState
  3613 ;; This function is called by:
  3614 ;;		Startup code after reset
  3615 ;; This function uses a reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text0
  3619   01338A                     __ptext0:
  3620                           	callstack 0
  3621   01338A                     _main:
  3622                           	callstack 0
  3623                           
  3624                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3625   01338A  0E0C               	movlw	12
  3626   01338C  26E1               	addwf	fsr1l,f,c
  3627   01338E  0E00               	movlw	0
  3628   013390  22E2               	addwfc	fsr1h,f,c
  3629   013392                     
  3630                           ;main.c: 58:     CAN_FILTEROBJ_ID filterObj;;main.c: 59:     CAN_MASKOBJ_ID maskObj;;mai
      +                          n.c: 62:     filterObj.ID = 1;
  3631   013392  0E01               	movlw	1
  3632   013394  6E34               	movwf	(btemp+8)^0,c
  3633   013396  6A35               	clrf	(btemp+9)^0,c
  3634   013398  6A36               	clrf	(btemp+10)^0,c
  3635   01339A  6A37               	clrf	(btemp+11)^0,c
  3636                           
  3637                           ;stkvar	_filterObj @ sp[(-12)+0]
  3638   01339C  0EF4               	movlw	-12
  3639   01339E  C034  FFE3         	movff	btemp+8,plusw1
  3640   0133A2  0EF5               	movlw	-11
  3641   0133A4  C035  FFE3         	movff	btemp+9,plusw1
  3642   0133A8  0EF6               	movlw	-10
  3643   0133AA  C036  FFE3         	movff	btemp+10,plusw1
  3644   0133AE  0EF7               	movlw	-9
  3645   0133B0  C037  FFE3         	movff	btemp+11,plusw1
  3646   0133B4                     
  3647                           ;main.c: 63:     filterObj.SID11 = 0;
  3648                           ;stkvar	_filterObj @ sp[(-12)+0]
  3649   0133B4  0EF8               	movlw	248
  3650   0133B6  24E1               	addwf	fsr1l,w,c
  3651   0133B8  6ED9               	movwf	fsr2l,c
  3652   0133BA  0EFF               	movlw	255
  3653   0133BC  20E2               	addwfc	fsr1h,w,c
  3654   0133BE  6EDA               	movwf	fsr2h,c
  3655   0133C0  6ADF               	clrf	indf2,c
  3656   0133C2                     
  3657                           ;main.c: 64:     filterObj.EXIDE = 0;
  3658                           ;stkvar	_filterObj @ sp[(-12)+0]
  3659   0133C2  0EF9               	movlw	249
  3660   0133C4  24E1               	addwf	fsr1l,w,c
  3661   0133C6  6ED9               	movwf	fsr2l,c
  3662   0133C8  0EFF               	movlw	255
  3663   0133CA  20E2               	addwfc	fsr1h,w,c
  3664   0133CC  6EDA               	movwf	fsr2h,c
  3665   0133CE  6ADF               	clrf	indf2,c
  3666                           
  3667                           ;main.c: 66:     maskObj.MID = 0x00F;
  3668   0133D0  0E0F               	movlw	15
  3669   0133D2  6E34               	movwf	(btemp+8)^0,c
  3670   0133D4  6A35               	clrf	(btemp+9)^0,c
  3671   0133D6  6A36               	clrf	(btemp+10)^0,c
  3672   0133D8  6A37               	clrf	(btemp+11)^0,c
  3673                           
  3674                           ;stkvar	_maskObj @ sp[(-12)+6]
  3675   0133DA  0EFA               	movlw	-6
  3676   0133DC  C034  FFE3         	movff	btemp+8,plusw1
  3677   0133E0  0EFB               	movlw	-5
  3678   0133E2  C035  FFE3         	movff	btemp+9,plusw1
  3679   0133E6  0EFC               	movlw	-4
  3680   0133E8  C036  FFE3         	movff	btemp+10,plusw1
  3681   0133EC  0EFD               	movlw	-3
  3682   0133EE  C037  FFE3         	movff	btemp+11,plusw1
  3683   0133F2                     
  3684                           ;main.c: 67:     maskObj.MIDE = 1;
  3685                           ;stkvar	_maskObj @ sp[(-12)+6]
  3686   0133F2  0EFF               	movlw	255
  3687   0133F4  24E1               	addwf	fsr1l,w,c
  3688   0133F6  6ED9               	movwf	fsr2l,c
  3689   0133F8  0EFF               	movlw	255
  3690   0133FA  20E2               	addwfc	fsr1h,w,c
  3691   0133FC  6EDA               	movwf	fsr2h,c
  3692   0133FE  0E01               	movlw	1
  3693   013400  6EDF               	movwf	indf2,c
  3694   013402                     
  3695                           ;main.c: 68:     maskObj.MSID11 = 0;
  3696                           ;stkvar	_maskObj @ sp[(-12)+6]
  3697   013402  0EFE               	movlw	254
  3698   013404  24E1               	addwf	fsr1l,w,c
  3699   013406  6ED9               	movwf	fsr2l,c
  3700   013408  0EFF               	movlw	255
  3701   01340A  20E2               	addwfc	fsr1h,w,c
  3702   01340C  6EDA               	movwf	fsr2h,c
  3703   01340E  6ADF               	clrf	indf2,c
  3704   013410                     
  3705                           ;main.c: 69:     SYSTEM_Initialize();
  3706   013410  ECEC  F0A4         	call	_SYSTEM_Initialize	;wreg free
  3707   013414                     
  3708                           ;main.c: 72:     CanInit(CAN_250K_500K, 0);
  3709   013414  0E00               	movlw	0
  3710   013416  6EE6               	movwf	postinc1,c
  3711   013418  0E08               	movlw	8
  3712   01341A  6EE6               	movwf	postinc1,c
  3713   01341C  EC32  F08F         	call	_CanInit	;wreg free
  3714   013420                     
  3715                           ;main.c: 73:     CanSetFilter(CAN_FILTER0, &filterObj, &maskObj);
  3716                           ;stkvar	_maskObj @ sp[(-12)+6]
  3717   013420  0EFA               	movlw	250
  3718   013422  24E1               	addwf	fsr1l,w,c
  3719   013424  6E2C               	movwf	btemp^0,c
  3720   013426  0EFF               	movlw	255
  3721   013428  20E2               	addwfc	fsr1h,w,c
  3722   01342A  6E2D               	movwf	(btemp+1)^0,c
  3723   01342C  C02C  FFE6         	movff	btemp,postinc1
  3724   013430  C02D  FFE6         	movff	btemp+1,postinc1
  3725                           
  3726                           ;stkvar	_filterObj @ sp[(-14)+0]
  3727   013434  0EF2               	movlw	242
  3728   013436  24E1               	addwf	fsr1l,w,c
  3729   013438  6E2C               	movwf	btemp^0,c
  3730   01343A  0EFF               	movlw	255
  3731   01343C  20E2               	addwfc	fsr1h,w,c
  3732   01343E  6E2D               	movwf	(btemp+1)^0,c
  3733   013440  C02C  FFE6         	movff	btemp,postinc1
  3734   013444  C02D  FFE6         	movff	btemp+1,postinc1
  3735   013448  0E00               	movlw	0
  3736   01344A  6EE6               	movwf	postinc1,c
  3737   01344C  EC2F  F0A2         	call	_CanSetFilter	;wreg free
  3738   013450                     
  3739                           ;main.c: 75:     XF_init();
  3740   013450  EC0B  F096         	call	_XF_init	;wreg free
  3741   013454                     
  3742                           ;main.c: 77:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3743   013454  0E94               	movlw	low _XF_decrementAndQueueTimers
  3744   013456  6EE6               	movwf	postinc1,c
  3745   013458  0E34               	movlw	high _XF_decrementAndQueueTimers
  3746   01345A  6EE6               	movwf	postinc1,c
  3747   01345C  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3748   01345E  6EE6               	movwf	postinc1,c
  3749   013460  ECA8  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
  3750   013464                     
  3751                           ;main.c: 85:     (INTCONbits.GIE = 1);
  3752   013464  8EF2               	bsf	242,7,c	;volatile
  3753   013466                     
  3754                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  3755   013466  8CF2               	bsf	242,6,c	;volatile
  3756   013468                     
  3757                           ;main.c: 95:     XF_post(lightControl_Process,E_INIT,0);
  3758   013468  0E00               	movlw	0
  3759   01346A  6EE6               	movwf	postinc1,c
  3760   01346C  0E00               	movlw	0
  3761   01346E  6EE6               	movwf	postinc1,c
  3762   013470  0E01               	movlw	1
  3763   013472  6EE6               	movwf	postinc1,c
  3764   013474  0E46               	movlw	low _lightControl_Process
  3765   013476  6EE6               	movwf	postinc1,c
  3766   013478  0E24               	movlw	high _lightControl_Process
  3767   01347A  6EE6               	movwf	postinc1,c
  3768   01347C  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3769   01347E  6EE6               	movwf	postinc1,c
  3770   013480  EC91  F09C         	call	_XF_post	;wreg free
  3771   013484                     l5386:
  3772                           
  3773                           ;main.c: 97:     {;main.c: 98:         updateCarState();
  3774   013484  EC39  F090         	call	_updateCarState	;wreg free
  3775   013488                     
  3776                           ;main.c: 99:         XF_executeOnce();
  3777   013488  EC6A  F0A1         	call	_XF_executeOnce	;wreg free
  3778   01348C  EF42  F09A         	goto	l5386
  3779   013490  EF57  F000         	goto	start
  3780   013494                     __end_of_main:
  3781                           	callstack 0
  3782                           
  3783 ;; *************** function _updateCarState *****************
  3784 ;; Defined at:
  3785 ;;		line 213 in file "carFunctions.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3790 ;;  rxdata          8  [STACK] unsigned char [8]
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1  [STACK] void 
  3793 ;; Registers used:
  3794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;Total ram usage:        0 bytes
  3805 ;; Hardware stack levels used: 1
  3806 ;; Hardware stack levels required when called: 12
  3807 ;; This function calls:
  3808 ;;		_CanReceive
  3809 ;;		_XF_post
  3810 ;; This function is called by:
  3811 ;;		_main
  3812 ;; This function uses a reentrant model
  3813 ;;
  3814                           
  3815                           	psect	text1
  3816   012072                     __ptext1:
  3817                           	callstack 0
  3818   012072                     _updateCarState:
  3819                           	callstack 0
  3820                           
  3821                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3822   012072  0E18               	movlw	24
  3823   012074  26E1               	addwf	fsr1l,f,c
  3824   012076  0E00               	movlw	0
  3825   012078  22E2               	addwfc	fsr1h,f,c
  3826   01207A                     
  3827                           ;carFunctions.c: 216:      CAN_RX_MSGOBJ rxObj;;carFunctions.c: 217:      uint8_t rxdata
      +                          [8];;carFunctions.c: 219:      if (CanReceive(&rxObj, rxdata) == 0)
  3828                           ;stkvar	_rxdata @ sp[(-24)+16]
  3829   01207A  0EF8               	movlw	248
  3830   01207C  24E1               	addwf	fsr1l,w,c
  3831   01207E  6E2C               	movwf	btemp^0,c
  3832   012080  0EFF               	movlw	255
  3833   012082  20E2               	addwfc	fsr1h,w,c
  3834   012084  6E2D               	movwf	(btemp+1)^0,c
  3835   012086  C02C  FFE6         	movff	btemp,postinc1
  3836   01208A  C02D  FFE6         	movff	btemp+1,postinc1
  3837                           
  3838                           ;stkvar	_rxObj @ sp[(-26)+0]
  3839   01208E  0EE6               	movlw	230
  3840   012090  24E1               	addwf	fsr1l,w,c
  3841   012092  6E2C               	movwf	btemp^0,c
  3842   012094  0EFF               	movlw	255
  3843   012096  20E2               	addwfc	fsr1h,w,c
  3844   012098  6E2D               	movwf	(btemp+1)^0,c
  3845   01209A  C02C  FFE6         	movff	btemp,postinc1
  3846   01209E  C02D  FFE6         	movff	btemp+1,postinc1
  3847   0120A2  EC64  F0A2         	call	_CanReceive	;wreg free
  3848   0120A6  502C               	movf	btemp^0,w,c
  3849   0120A8  A4D8               	btfss	status,2,c
  3850   0120AA  EF59  F090         	goto	u3031
  3851   0120AE  EF5B  F090         	goto	u3030
  3852   0120B2                     u3031:
  3853   0120B2  EF2F  F091         	goto	l1513
  3854   0120B6                     u3030:
  3855   0120B6  EFF1  F090         	goto	l5336
  3856   0120BA                     l5312:
  3857                           
  3858                           ;carFunctions.c: 225:                  carState.contactKey = rxdata[0];
  3859                           ;stkvar	_rxdata @ sp[(-24)+16]
  3860   0120BA  0EF8               	movlw	-8
  3861   0120BC  CFE3 F00F          	movff	plusw1,_carState+14
  3862   0120C0                     
  3863                           ;carFunctions.c: 227:                  if (rxdata[0] == 0)
  3864                           ;stkvar	_rxdata @ sp[(-24)+16]
  3865   0120C0  0EF8               	movlw	-8
  3866   0120C2  50E3               	movf	plusw1,w,c
  3867   0120C4  A4D8               	btfss	status,2,c
  3868   0120C6  EF67  F090         	goto	u3041
  3869   0120CA  EF69  F090         	goto	u3040
  3870   0120CE                     u3041:
  3871   0120CE  EF87  F090         	goto	l5318
  3872   0120D2                     u3040:
  3873   0120D2                     
  3874                           ;carFunctions.c: 228:                  {;carFunctions.c: 229:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_OFF, 0);
  3875   0120D2  0E00               	movlw	0
  3876   0120D4  6EE6               	movwf	postinc1,c
  3877   0120D6  0E00               	movlw	0
  3878   0120D8  6EE6               	movwf	postinc1,c
  3879   0120DA  0E02               	movlw	2
  3880   0120DC  6EE6               	movwf	postinc1,c
  3881   0120DE  0E46               	movlw	low _lightControl_Process
  3882   0120E0  6EE6               	movwf	postinc1,c
  3883   0120E2  0E24               	movlw	high _lightControl_Process
  3884   0120E4  6EE6               	movwf	postinc1,c
  3885   0120E6  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3886   0120E8  6EE6               	movwf	postinc1,c
  3887   0120EA  EC91  F09C         	call	_XF_post	;wreg free
  3888                           
  3889                           ;carFunctions.c: 230:                      XF_post(motorControl_Process, E_CONTACT_OFF, 
      +                          0);
  3890   0120EE  0E00               	movlw	0
  3891   0120F0  6EE6               	movwf	postinc1,c
  3892   0120F2  0E00               	movlw	0
  3893   0120F4  6EE6               	movwf	postinc1,c
  3894   0120F6  0E02               	movlw	2
  3895   0120F8  6EE6               	movwf	postinc1,c
  3896   0120FA  0EEE               	movlw	low _motorControl_Process
  3897   0120FC  6EE6               	movwf	postinc1,c
  3898   0120FE  0E25               	movlw	high _motorControl_Process
  3899   012100  6EE6               	movwf	postinc1,c
  3900   012102  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3901   012104  6EE6               	movwf	postinc1,c
  3902   012106  EC91  F09C         	call	_XF_post	;wreg free
  3903                           
  3904                           ;carFunctions.c: 231:                  }
  3905   01210A  EF2F  F091         	goto	l1513
  3906   01210E                     l5318:
  3907                           
  3908                           ;carFunctions.c: 233:                  {;carFunctions.c: 234:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_ON, 0);
  3909   01210E  0E00               	movlw	0
  3910   012110  6EE6               	movwf	postinc1,c
  3911   012112  0E00               	movlw	0
  3912   012114  6EE6               	movwf	postinc1,c
  3913   012116  0E03               	movlw	3
  3914   012118  6EE6               	movwf	postinc1,c
  3915   01211A  0E46               	movlw	low _lightControl_Process
  3916   01211C  6EE6               	movwf	postinc1,c
  3917   01211E  0E24               	movlw	high _lightControl_Process
  3918   012120  6EE6               	movwf	postinc1,c
  3919   012122  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3920   012124  6EE6               	movwf	postinc1,c
  3921   012126  EC91  F09C         	call	_XF_post	;wreg free
  3922                           
  3923                           ;carFunctions.c: 235:                      XF_post(motorControl_Process, E_CONTACT_ON, 0
      +                          );
  3924   01212A  0E00               	movlw	0
  3925   01212C  6EE6               	movwf	postinc1,c
  3926   01212E  0E00               	movlw	0
  3927   012130  6EE6               	movwf	postinc1,c
  3928   012132  0E03               	movlw	3
  3929   012134  6EE6               	movwf	postinc1,c
  3930   012136  0EEE               	movlw	low _motorControl_Process
  3931   012138  6EE6               	movwf	postinc1,c
  3932   01213A  0E25               	movlw	high _motorControl_Process
  3933   01213C  6EE6               	movwf	postinc1,c
  3934   01213E  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3935   012140  6EE6               	movwf	postinc1,c
  3936   012142  EC91  F09C         	call	_XF_post	;wreg free
  3937   012146  EF2F  F091         	goto	l1513
  3938   01214A                     l5320:
  3939                           
  3940                           ;carFunctions.c: 242:                  carState.brakePedal = rxdata[0];
  3941                           ;stkvar	_rxdata @ sp[(-24)+16]
  3942   01214A  0EF8               	movlw	-8
  3943   01214C  CFE3 F00D          	movff	plusw1,_carState+12
  3944   012150                     
  3945                           ;carFunctions.c: 244:                  if (rxdata[0] > 6)
  3946                           ;stkvar	_rxdata @ sp[(-24)+16]
  3947   012150  0EF8               	movlw	-8
  3948   012152  CFE3 F02C          	movff	plusw1,btemp
  3949   012156  0E06               	movlw	6
  3950   012158  642C               	cpfsgt	btemp^0,c
  3951   01215A  EFB1  F090         	goto	u3051
  3952   01215E  EFB3  F090         	goto	u3050
  3953   012162                     u3051:
  3954   012162  EFC3  F090         	goto	l5326
  3955   012166                     u3050:
  3956   012166                     
  3957                           ;carFunctions.c: 245:                  {;carFunctions.c: 246:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE, 0);
  3958   012166  0E00               	movlw	0
  3959   012168  6EE6               	movwf	postinc1,c
  3960   01216A  0E00               	movlw	0
  3961   01216C  6EE6               	movwf	postinc1,c
  3962   01216E  0E04               	movlw	4
  3963   012170  6EE6               	movwf	postinc1,c
  3964   012172  0E46               	movlw	low _lightControl_Process
  3965   012174  6EE6               	movwf	postinc1,c
  3966   012176  0E24               	movlw	high _lightControl_Process
  3967   012178  6EE6               	movwf	postinc1,c
  3968   01217A  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3969   01217C  6EE6               	movwf	postinc1,c
  3970   01217E  EC91  F09C         	call	_XF_post	;wreg free
  3971                           
  3972                           ;carFunctions.c: 247:                  }else if (rxdata[0] < 6)
  3973   012182  EF2F  F091         	goto	l1513
  3974   012186                     l5326:
  3975                           
  3976                           ;stkvar	_rxdata @ sp[(-24)+16]
  3977   012186  0EF8               	movlw	-8
  3978   012188  CFE3 F02C          	movff	plusw1,btemp
  3979   01218C  0E06               	movlw	6
  3980   01218E  602C               	cpfslt	btemp^0,c
  3981   012190  EFCC  F090         	goto	u3061
  3982   012194  EFCE  F090         	goto	u3060
  3983   012198                     u3061:
  3984   012198  EF2F  F091         	goto	l1506
  3985   01219C                     u3060:
  3986   01219C                     
  3987                           ;carFunctions.c: 248:                  {;carFunctions.c: 249:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE_RELASED, 0);
  3988   01219C  0E00               	movlw	0
  3989   01219E  6EE6               	movwf	postinc1,c
  3990   0121A0  0E00               	movlw	0
  3991   0121A2  6EE6               	movwf	postinc1,c
  3992   0121A4  0E0A               	movlw	10
  3993   0121A6  6EE6               	movwf	postinc1,c
  3994   0121A8  0E46               	movlw	low _lightControl_Process
  3995   0121AA  6EE6               	movwf	postinc1,c
  3996   0121AC  0E24               	movlw	high _lightControl_Process
  3997   0121AE  6EE6               	movwf	postinc1,c
  3998   0121B0  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3999   0121B2  6EE6               	movwf	postinc1,c
  4000   0121B4  EC91  F09C         	call	_XF_post	;wreg free
  4001   0121B8  EF2F  F091         	goto	l1513
  4002   0121BC                     l5330:
  4003                           
  4004                           ;carFunctions.c: 256:                  carState.accelPedal = rxdata[0] ;
  4005                           ;stkvar	_rxdata @ sp[(-24)+16]
  4006   0121BC  0EF8               	movlw	-8
  4007   0121BE  CFE3 F00E          	movff	plusw1,_carState+13
  4008   0121C2                     
  4009                           ;carFunctions.c: 257:                  XF_post(motorControl_Process, E_ACCELERATION_ON, 
      +                          0);
  4010   0121C2  0E00               	movlw	0
  4011   0121C4  6EE6               	movwf	postinc1,c
  4012   0121C6  0E00               	movlw	0
  4013   0121C8  6EE6               	movwf	postinc1,c
  4014   0121CA  0E08               	movlw	8
  4015   0121CC  6EE6               	movwf	postinc1,c
  4016   0121CE  0EEE               	movlw	low _motorControl_Process
  4017   0121D0  6EE6               	movwf	postinc1,c
  4018   0121D2  0E25               	movlw	high _motorControl_Process
  4019   0121D4  6EE6               	movwf	postinc1,c
  4020   0121D6  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4021   0121D8  6EE6               	movwf	postinc1,c
  4022   0121DA  EC91  F09C         	call	_XF_post	;wreg free
  4023   0121DE  EF2F  F091         	goto	l1513
  4024   0121E2                     l5336:
  4025                           
  4026                           ;stkvar	_rxObj @ sp[(-24)+0]
  4027   0121E2  50E1               	movf	fsr1l,w,c
  4028   0121E4  0FE8               	addlw	-24
  4029   0121E6  6ED9               	movwf	fsr2l,c
  4030   0121E8  50E2               	movf	fsr1h,w,c
  4031   0121EA  6EDA               	movwf	fsr2h,c
  4032   0121EC  0EFF               	movlw	255
  4033   0121EE  22DA               	addwfc	fsr2h,f,c
  4034   0121F0  0EF0               	movlw	240
  4035   0121F2  14DE               	andwf	postinc2,w,c
  4036   0121F4  6E34               	movwf	(btemp+8)^0,c
  4037   0121F6  0E07               	movlw	7
  4038   0121F8  14DE               	andwf	postinc2,w,c
  4039   0121FA  6E35               	movwf	(btemp+9)^0,c
  4040   0121FC  0E00               	movlw	0
  4041   0121FE  14DE               	andwf	postinc2,w,c
  4042   012200  6E36               	movwf	(btemp+10)^0,c
  4043   012202  0E00               	movlw	0
  4044   012204  14DE               	andwf	postinc2,w,c
  4045   012206  6E37               	movwf	(btemp+11)^0,c
  4046                           
  4047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4048                           ; Switch size 1, requested type "simple"
  4049                           ; Number of cases is 1, Range of values is 0 to 0
  4050                           ; switch strategies available:
  4051                           ; Name         Instructions Cycles
  4052                           ; simple_byte            4     3 (average)
  4053                           ;	Chosen strategy is simple_byte
  4054   012208  5037               	movf	(btemp+11)^0,w,c
  4055   01220A  0A00               	xorlw	0	; case 0
  4056   01220C  B4D8               	btfsc	status,2,c
  4057   01220E  EF28  F091         	goto	l5592
  4058   012212  EF2F  F091         	goto	l1513
  4059   012216                     l5590:
  4060                           
  4061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4062                           ; Switch size 1, requested type "simple"
  4063                           ; Number of cases is 2, Range of values is 0 to 1
  4064                           ; switch strategies available:
  4065                           ; Name         Instructions Cycles
  4066                           ; simple_byte            7     4 (average)
  4067                           ;	Chosen strategy is simple_byte
  4068   012216  5035               	movf	(btemp+9)^0,w,c
  4069   012218  0A00               	xorlw	0	; case 0
  4070   01221A  B4D8               	btfsc	status,2,c
  4071   01221C  EF16  F091         	goto	l5594
  4072   012220  0A01               	xorlw	1	; case 1
  4073   012222  B4D8               	btfsc	status,2,c
  4074   012224  EF21  F091         	goto	l5596
  4075   012228  EF2F  F091         	goto	l1513
  4076   01222C                     l5594:
  4077                           
  4078                           ; Switch size 1, requested type "simple"
  4079                           ; Number of cases is 2, Range of values is 64 to 80
  4080                           ; switch strategies available:
  4081                           ; Name         Instructions Cycles
  4082                           ; simple_byte            7     4 (average)
  4083                           ;	Chosen strategy is simple_byte
  4084   01222C  5034               	movf	(btemp+8)^0,w,c
  4085   01222E  0A40               	xorlw	64	; case 64
  4086   012230  B4D8               	btfsc	status,2,c
  4087   012232  EFA5  F090         	goto	l5320
  4088   012236  0A10               	xorlw	16	; case 80
  4089   012238  B4D8               	btfsc	status,2,c
  4090   01223A  EF5D  F090         	goto	l5312
  4091   01223E  EF2F  F091         	goto	l1513
  4092   012242                     l5596:
  4093                           
  4094                           ; Switch size 1, requested type "simple"
  4095                           ; Number of cases is 1, Range of values is 64 to 64
  4096                           ; switch strategies available:
  4097                           ; Name         Instructions Cycles
  4098                           ; simple_byte            4     3 (average)
  4099                           ;	Chosen strategy is simple_byte
  4100   012242  5034               	movf	(btemp+8)^0,w,c
  4101   012244  0A40               	xorlw	64	; case 64
  4102   012246  B4D8               	btfsc	status,2,c
  4103   012248  EFDE  F090         	goto	l5330
  4104   01224C  EF2F  F091         	goto	l1513
  4105   012250                     l5592:
  4106                           
  4107                           ; Switch size 1, requested type "simple"
  4108                           ; Number of cases is 1, Range of values is 0 to 0
  4109                           ; switch strategies available:
  4110                           ; Name         Instructions Cycles
  4111                           ; simple_byte            4     3 (average)
  4112                           ;	Chosen strategy is simple_byte
  4113   012250  5036               	movf	(btemp+10)^0,w,c
  4114   012252  0A00               	xorlw	0	; case 0
  4115   012254  B4D8               	btfsc	status,2,c
  4116   012256  EF0B  F091         	goto	l5590
  4117   01225A  EF2F  F091         	goto	l1513
  4118   01225E                     l1506:
  4119   01225E                     l1513:
  4120                           
  4121                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4122   01225E  0EE8               	movlw	232
  4123   012260  26E1               	addwf	fsr1l,f,c
  4124   012262  0EFF               	movlw	255
  4125   012264  22E2               	addwfc	fsr1h,f,c
  4126   012266  0012               	return		;funcret
  4127   012268                     __end_of_updateCarState:
  4128                           	callstack 0
  4129                           
  4130 ;; *************** function _XF_post *****************
  4131 ;; Defined at:
  4132 ;;		line 274 in file "xf/xf.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4135 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4136 ;;  id              1  [STACK] unsigned char 
  4137 ;;  delay           2  [STACK] unsigned short 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  ev              6  [STACK] struct Event_
  4140 ;;  tmid            1  [STACK] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1  [STACK] unsigned char 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used: 1
  4156 ;; Hardware stack levels required when called: 10
  4157 ;; This function calls:
  4158 ;;		_Event_init
  4159 ;;		_Event_setDelay
  4160 ;;		_Event_setId
  4161 ;;		_Event_setPE
  4162 ;;		_XF_pushEvent
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;;		_updateCarState
  4166 ;; This function uses a reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text2
  4170   013922                     __ptext2:
  4171                           	callstack 0
  4172   013922                     _XF_post:
  4173                           	callstack 0
  4174                           
  4175                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4176   013922  0E07               	movlw	7
  4177   013924  26E1               	addwf	fsr1l,f,c
  4178   013926  0E00               	movlw	0
  4179   013928  22E2               	addwfc	fsr1h,f,c
  4180   01392A                     
  4181                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4182                           ;stkvar	_tmid @ sp[(-7)+6]
  4183   01392A  0EFF               	movlw	-1
  4184   01392C  6AE3               	clrf	plusw1,c
  4185   01392E  84E3               	bsf	plusw1,2,c
  4186   013930  86E3               	bsf	plusw1,3,c	;indir
  4187   013932                     
  4188                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4189                           ;stkvar	_ev @ sp[(-7)+0]
  4190   013932  0EF9               	movlw	249
  4191   013934  24E1               	addwf	fsr1l,w,c
  4192   013936  6E2C               	movwf	btemp^0,c
  4193   013938  0EFF               	movlw	255
  4194   01393A  20E2               	addwfc	fsr1h,w,c
  4195   01393C  6E2D               	movwf	(btemp+1)^0,c
  4196   01393E  C02C  FFE6         	movff	btemp,postinc1
  4197   013942  C02D  FFE6         	movff	btemp+1,postinc1
  4198   013946  EC80  F0A3         	call	_Event_init	;wreg free
  4199   01394A                     
  4200                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4201                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4202   01394A  0EF6               	movlw	-10
  4203   01394C  CFE3 FFE6          	movff	plusw1,postinc1
  4204   013950  CFE3 FFE6          	movff	plusw1,postinc1
  4205   013954  CFE3 FFE6          	movff	plusw1,postinc1
  4206                           
  4207                           ;stkvar	_ev @ sp[(-10)+0]
  4208   013958  0EF6               	movlw	246
  4209   01395A  24E1               	addwf	fsr1l,w,c
  4210   01395C  6E2C               	movwf	btemp^0,c
  4211   01395E  0EFF               	movlw	255
  4212   013960  20E2               	addwfc	fsr1h,w,c
  4213   013962  6E2D               	movwf	(btemp+1)^0,c
  4214   013964  C02C  FFE6         	movff	btemp,postinc1
  4215   013968  C02D  FFE6         	movff	btemp+1,postinc1
  4216   01396C  ECCC  F0A3         	call	_Event_setPE	;wreg free
  4217   013970                     
  4218                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4219                           ;stkvar	_id @ sp[(-7)+-4]
  4220   013970  0EF5               	movlw	-11
  4221   013972  50E3               	movf	plusw1,w,c
  4222   013974  6EE6               	movwf	postinc1,c
  4223                           
  4224                           ;stkvar	_ev @ sp[(-8)+0]
  4225   013976  0EF8               	movlw	248
  4226   013978  24E1               	addwf	fsr1l,w,c
  4227   01397A  6E2C               	movwf	btemp^0,c
  4228   01397C  0EFF               	movlw	255
  4229   01397E  20E2               	addwfc	fsr1h,w,c
  4230   013980  6E2D               	movwf	(btemp+1)^0,c
  4231   013982  C02C  FFE6         	movff	btemp,postinc1
  4232   013986  C02D  FFE6         	movff	btemp+1,postinc1
  4233   01398A  ECC7  F0A4         	call	_Event_setId	;wreg free
  4234   01398E                     
  4235                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4236                           ;stkvar	_delay @ sp[(-7)+-6]
  4237   01398E  0EF3               	movlw	-13
  4238   013990  CFE3 FFE6          	movff	plusw1,postinc1
  4239   013994  CFE3 FFE6          	movff	plusw1,postinc1
  4240                           
  4241                           ;stkvar	_ev @ sp[(-9)+0]
  4242   013998  0EF7               	movlw	247
  4243   01399A  24E1               	addwf	fsr1l,w,c
  4244   01399C  6E2C               	movwf	btemp^0,c
  4245   01399E  0EFF               	movlw	255
  4246   0139A0  20E2               	addwfc	fsr1h,w,c
  4247   0139A2  6E2D               	movwf	(btemp+1)^0,c
  4248   0139A4  C02C  FFE6         	movff	btemp,postinc1
  4249   0139A8  C02D  FFE6         	movff	btemp+1,postinc1
  4250   0139AC  EC07  F0A4         	call	_Event_setDelay	;wreg free
  4251   0139B0                     
  4252                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4253                           ;stkvar	_tmid @ sp[(-7)+6]
  4254   0139B0  0EFF               	movlw	255
  4255   0139B2  24E1               	addwf	fsr1l,w,c
  4256   0139B4  6E2C               	movwf	btemp^0,c
  4257   0139B6  0EFF               	movlw	255
  4258   0139B8  20E2               	addwfc	fsr1h,w,c
  4259   0139BA  6E2D               	movwf	(btemp+1)^0,c
  4260   0139BC  C02C  FFE6         	movff	btemp,postinc1
  4261   0139C0  C02D  FFE6         	movff	btemp+1,postinc1
  4262   0139C4  0E00               	movlw	0
  4263   0139C6  6EE6               	movwf	postinc1,c
  4264                           
  4265                           ;stkvar	_ev @ sp[(-10)+0]
  4266   0139C8  0EF6               	movlw	246
  4267   0139CA  24E1               	addwf	fsr1l,w,c
  4268   0139CC  6ED9               	movwf	fsr2l,c
  4269   0139CE  0EFF               	movlw	255
  4270   0139D0  20E2               	addwfc	fsr1h,w,c
  4271   0139D2  6EDA               	movwf	fsr2h,c
  4272   0139D4  0E06               	movlw	6
  4273   0139D6                     u2811:
  4274   0139D6  CFDE FFE6          	movff	postinc2,postinc1
  4275   0139DA  2CE8               	decfsz	wreg,w,c
  4276   0139DC  EFEB  F09C         	goto	u2811
  4277   0139E0  EC4B  F095         	call	_XF_pushEvent	;wreg free
  4278   0139E4                     
  4279                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4280   0139E4  0EF3               	movlw	243
  4281   0139E6  26E1               	addwf	fsr1l,f,c
  4282   0139E8  0EFF               	movlw	255
  4283   0139EA  22E2               	addwfc	fsr1h,f,c
  4284   0139EC  0012               	return		;funcret
  4285   0139EE                     __end_of_XF_post:
  4286                           	callstack 0
  4287                           
  4288 ;; *************** function _XF_pushEvent *****************
  4289 ;; Defined at:
  4290 ;;		line 106 in file "xf/xf.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  ev              6  [STACK] struct Event_
  4293 ;;  inISR           1  [STACK] _Bool 
  4294 ;;  tmid            2  [STACK] PTR unsigned char 
  4295 ;;		 -> tmid(1), dummy(1), 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  tm              2  [STACK] unsigned short 
  4298 ;;  temp            1  [STACK] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1  [STACK] _Bool 
  4301 ;; Registers used:
  4302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;Total ram usage:        0 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 9
  4315 ;; This function calls:
  4316 ;;		_ENTERCRITICAL
  4317 ;;		_Event_getDelay
  4318 ;;		_Event_setDelay
  4319 ;;		_LEAVECRITICAL
  4320 ;;		_XF_noMoreEvent
  4321 ;;		_XF_scheduleTimer
  4322 ;;		___awmod
  4323 ;; This function is called by:
  4324 ;;		_XF_decrementAndQueueTimers
  4325 ;;		_XF_post
  4326 ;; This function uses a reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text3
  4330   012A96                     __ptext3:
  4331                           	callstack 0
  4332   012A96                     _XF_pushEvent:
  4333                           	callstack 0
  4334                           
  4335                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4336   012A96  52E6               	movf	postinc1,f,c
  4337   012A98  52E6               	movf	postinc1,f,c
  4338   012A9A  52E6               	movf	postinc1,f,c
  4339   012A9C                     
  4340                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4341                           ;stkvar	_ev @ sp[(-3)+-6]
  4342   012A9C  0EF7               	movlw	247
  4343   012A9E  24E1               	addwf	fsr1l,w,c
  4344   012AA0  6E2C               	movwf	btemp^0,c
  4345   012AA2  0EFF               	movlw	255
  4346   012AA4  20E2               	addwfc	fsr1h,w,c
  4347   012AA6  6E2D               	movwf	(btemp+1)^0,c
  4348   012AA8  C02C  FFE6         	movff	btemp,postinc1
  4349   012AAC  C02D  FFE6         	movff	btemp+1,postinc1
  4350   012AB0  EC95  F0A4         	call	_Event_getDelay	;wreg free
  4351                           
  4352                           ;stkvar	_tm @ sp[(-3)+0]
  4353   012AB4  0EFD               	movlw	-3
  4354   012AB6  C02C  FFE3         	movff	btemp,plusw1
  4355   012ABA  0EFE               	movlw	-2
  4356   012ABC  C02D  FFE3         	movff	btemp+1,plusw1
  4357   012AC0                     
  4358                           ;xf/xf.c: 111:     if ( tm > 0)
  4359                           ;stkvar	_tm @ sp[(-3)+0]
  4360   012AC0  0EFD               	movlw	-3
  4361   012AC2  CFE3 F02C          	movff	plusw1,btemp
  4362   012AC6  0EFE               	movlw	-2
  4363   012AC8  50E3               	movf	plusw1,w,c
  4364   012ACA  102C               	iorwf	btemp^0,w,c
  4365   012ACC  B4D8               	btfsc	status,2,c
  4366   012ACE  EF6B  F095         	goto	u2041
  4367   012AD2  EF6D  F095         	goto	u2040
  4368   012AD6                     u2041:
  4369   012AD6  EF9D  F095         	goto	l4410
  4370   012ADA                     u2040:
  4371   012ADA                     
  4372                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4373   012ADA  0E00               	movlw	0
  4374   012ADC  6EE6               	movwf	postinc1,c
  4375   012ADE  0E00               	movlw	0
  4376   012AE0  6EE6               	movwf	postinc1,c
  4377                           
  4378                           ;stkvar	_ev @ sp[(-5)+-6]
  4379   012AE2  0EF5               	movlw	245
  4380   012AE4  24E1               	addwf	fsr1l,w,c
  4381   012AE6  6E2C               	movwf	btemp^0,c
  4382   012AE8  0EFF               	movlw	255
  4383   012AEA  20E2               	addwfc	fsr1h,w,c
  4384   012AEC  6E2D               	movwf	(btemp+1)^0,c
  4385   012AEE  C02C  FFE6         	movff	btemp,postinc1
  4386   012AF2  C02D  FFE6         	movff	btemp+1,postinc1
  4387   012AF6  EC07  F0A4         	call	_Event_setDelay	;wreg free
  4388   012AFA                     
  4389                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4390                           ;stkvar	_inISR @ sp[(-3)+-7]
  4391   012AFA  0EF6               	movlw	-10
  4392   012AFC  50E3               	movf	plusw1,w,c
  4393   012AFE  6EE6               	movwf	postinc1,c
  4394                           
  4395                           ;stkvar	_ev @ sp[(-4)+-6]
  4396   012B00  0EF6               	movlw	246
  4397   012B02  24E1               	addwf	fsr1l,w,c
  4398   012B04  6ED9               	movwf	fsr2l,c
  4399   012B06  0EFF               	movlw	255
  4400   012B08  20E2               	addwfc	fsr1h,w,c
  4401   012B0A  6EDA               	movwf	fsr2h,c
  4402   012B0C  0E06               	movlw	6
  4403   012B0E                     u2051:
  4404   012B0E  CFDE FFE6          	movff	postinc2,postinc1
  4405   012B12  2CE8               	decfsz	wreg,w,c
  4406   012B14  EF87  F095         	goto	u2051
  4407                           
  4408                           ;stkvar	_tm @ sp[(-10)+0]
  4409   012B18  0EF6               	movlw	-10
  4410   012B1A  CFE3 FFE6          	movff	plusw1,postinc1
  4411   012B1E  CFE3 FFE6          	movff	plusw1,postinc1
  4412   012B22  EC40  F09B         	call	_XF_scheduleTimer	;wreg free
  4413                           
  4414                           ;stkvar	_tmid @ sp[(-3)+-9]
  4415   012B26  0EF4               	movlw	-12
  4416   012B28  CFE3 FFD9          	movff	plusw1,fsr2l
  4417   012B2C  0EF5               	movlw	-11
  4418   012B2E  CFE3 FFDA          	movff	plusw1,fsr2h
  4419   012B32  C02C  FFDF         	movff	btemp,indf2
  4420                           
  4421                           ;xf/xf.c: 115:     }
  4422   012B36  EF04  F096         	goto	l4430
  4423   012B3A                     l4410:
  4424                           
  4425                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4426                           ;stkvar	_inISR @ sp[(-3)+-7]
  4427   012B3A  0EF6               	movlw	-10
  4428   012B3C  50E3               	movf	plusw1,w,c
  4429   012B3E  6EE6               	movwf	postinc1,c
  4430   012B40  ECE0  F0A4         	call	_ENTERCRITICAL	;wreg free
  4431   012B44                     
  4432                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4433   012B44  EE23  F0DF         	lfsr	2,_theXF+279
  4434   012B48  50DF               	movf	indf2,w,c
  4435   012B4A  6E36               	movwf	(btemp+10)^0,c
  4436   012B4C  6A37               	clrf	(btemp+11)^0,c
  4437   012B4E  0E01               	movlw	1
  4438   012B50  2636               	addwf	(btemp+10)^0,f,c
  4439   012B52  0E00               	movlw	0
  4440   012B54  2237               	addwfc	(btemp+11)^0,f,c
  4441   012B56  BE37               	btfsc	(btemp+11)^0,7,c
  4442   012B58  EFB7  F095         	goto	u2061
  4443   012B5C  5037               	movf	(btemp+11)^0,w,c
  4444   012B5E  E109               	bnz	u2060
  4445   012B60  0E1E               	movlw	30
  4446   012B62  5C36               	subwf	(btemp+10)^0,w,c
  4447   012B64  A0D8               	btfss	status,0,c
  4448   012B66  EFB7  F095         	goto	u2061
  4449   012B6A  EFB9  F095         	goto	u2060
  4450   012B6E                     u2061:
  4451   012B6E  EFBB  F095         	goto	l4416
  4452   012B72                     u2060:
  4453   012B72                     
  4454                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4455   012B72  EC06  F0A5         	call	_XF_noMoreEvent	;wreg free
  4456   012B76                     l4416:
  4457                           
  4458                           ;xf/xf.c: 123:         theXF.countEvt++;
  4459   012B76  C3DF  FFE8         	movff	_theXF+279,wreg
  4460   012B7A  0F01               	addlw	1
  4461   012B7C  CFE8 F3DF          	movff	wreg,_theXF+279
  4462   012B80                     
  4463                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4464   012B80  EE23  F0DF         	lfsr	2,_theXF+279
  4465   012B84  EE03  F0DE         	lfsr	0,_theXF+278
  4466   012B88  50DE               	movf	postinc2,w,c
  4467   012B8A  5CEE               	subwf	postinc0,w,c
  4468   012B8C  B0D8               	btfsc	status,0,c
  4469   012B8E  EFCB  F095         	goto	u2071
  4470   012B92  EFCD  F095         	goto	u2070
  4471   012B96                     u2071:
  4472   012B96  EFCF  F095         	goto	l4422
  4473   012B9A                     u2070:
  4474   012B9A                     
  4475                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4476   012B9A  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4477   012B9E                     l4422:
  4478                           
  4479                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4480   012B9E  0E1E               	movlw	30
  4481   012BA0  6EE6               	movwf	postinc1,c
  4482   012BA2  0E00               	movlw	0
  4483   012BA4  6EE6               	movwf	postinc1,c
  4484   012BA6  EE23  F0DC         	lfsr	2,_theXF+276
  4485   012BAA  50DF               	movf	indf2,w,c
  4486   012BAC  6E36               	movwf	(btemp+10)^0,c
  4487   012BAE  6A37               	clrf	(btemp+11)^0,c
  4488   012BB0  0E01               	movlw	1
  4489   012BB2  2636               	addwf	(btemp+10)^0,f,c
  4490   012BB4  0E00               	movlw	0
  4491   012BB6  2237               	addwfc	(btemp+11)^0,f,c
  4492   012BB8  C036  FFE6         	movff	btemp+10,postinc1
  4493   012BBC  C037  FFE6         	movff	btemp+11,postinc1
  4494   012BC0  ECB5  F096         	call	___awmod	;wreg free
  4495                           
  4496                           ;stkvar	_temp @ sp[(-3)+2]
  4497   012BC4  0EFF               	movlw	-1
  4498   012BC6  C02C  FFE3         	movff	btemp,plusw1
  4499   012BCA                     
  4500                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4501                           ;stkvar	_ev @ sp[(-3)+-6]
  4502   012BCA  0EF7               	movlw	247
  4503   012BCC  24E1               	addwf	fsr1l,w,c
  4504   012BCE  6ED9               	movwf	fsr2l,c
  4505   012BD0  0EFF               	movlw	255
  4506   012BD2  20E2               	addwfc	fsr1h,w,c
  4507   012BD4  6EDA               	movwf	fsr2h,c
  4508   012BD6  EE03  F0DC         	lfsr	0,_theXF+276
  4509   012BDA  50EF               	movf	indf0,w,c
  4510   012BDC  0D06               	mullw	6
  4511   012BDE  0E28               	movlw	low (_theXF+96)
  4512   012BE0  24F3               	addwf	243,w,c
  4513   012BE2  6EE9               	movwf	fsr0l,c
  4514   012BE4  0E03               	movlw	high (_theXF+96)
  4515   012BE6  20F4               	addwfc	prodh,w,c
  4516   012BE8  6EEA               	movwf	fsr0h,c
  4517   012BEA  0E05               	movlw	5
  4518   012BEC                     u2081:
  4519   012BEC  CFDB FFEB          	movff	plusw2,plusw0
  4520   012BF0  06E8               	decf	wreg,f,c
  4521   012BF2  E2FC               	bc	u2081
  4522   012BF4                     
  4523                           ;xf/xf.c: 130:         theXF.in = temp;
  4524                           ;stkvar	_temp @ sp[(-3)+2]
  4525   012BF4  0EFF               	movlw	-1
  4526   012BF6  CFE3 F037          	movff	plusw1,btemp+11
  4527   012BFA  C037  F3DC         	movff	btemp+11,_theXF+276
  4528   012BFE                     
  4529                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4530                           ;stkvar	_inISR @ sp[(-3)+-7]
  4531   012BFE  0EF6               	movlw	-10
  4532   012C00  50E3               	movf	plusw1,w,c
  4533   012C02  6EE6               	movwf	postinc1,c
  4534   012C04  ECD4  F0A4         	call	_LEAVECRITICAL	;wreg free
  4535   012C08                     l4430:
  4536                           
  4537                           ;xf/xf.c: 133:     return 1;
  4538   012C08  0E01               	movlw	1
  4539   012C0A  6E2C               	movwf	btemp^0,c
  4540   012C0C                     
  4541                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4542   012C0C  0EF4               	movlw	244
  4543   012C0E  26E1               	addwf	fsr1l,f,c
  4544   012C10  0EFF               	movlw	255
  4545   012C12  22E2               	addwfc	fsr1h,f,c
  4546   012C14  0012               	return		;funcret
  4547   012C16                     __end_of_XF_pushEvent:
  4548                           	callstack 0
  4549                           
  4550 ;; *************** function _XF_scheduleTimer *****************
  4551 ;; Defined at:
  4552 ;;		line 169 in file "xf/xf.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  tm              2  [STACK] unsigned short 
  4555 ;;  ev              6  [STACK] struct Event_
  4556 ;;  inISR           1  [STACK] _Bool 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;  i               1  [STACK] unsigned char 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1  [STACK] unsigned char 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used: 1
  4574 ;; Hardware stack levels required when called: 8
  4575 ;; This function calls:
  4576 ;;		_ENTERCRITICAL
  4577 ;;		_LEAVECRITICAL
  4578 ;;		_XF_noMoreTimer
  4579 ;; This function is called by:
  4580 ;;		_XF_pushEvent
  4581 ;; This function uses a reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text4
  4585   013680                     __ptext4:
  4586                           	callstack 0
  4587   013680                     _XF_scheduleTimer:
  4588                           	callstack 0
  4589                           
  4590                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4591   013680  52E6               	movf	postinc1,f,c
  4592   013682                     
  4593                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4594                           ;stkvar	_inISR @ sp[(-1)+-9]
  4595   013682  0EF6               	movlw	-10
  4596   013684  50E3               	movf	plusw1,w,c
  4597   013686  6EE6               	movwf	postinc1,c
  4598   013688  ECE0  F0A4         	call	_ENTERCRITICAL	;wreg free
  4599                           
  4600                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4601                           ;stkvar	_i @ sp[(-1)+0]
  4602   01368C  0EFF               	movlw	-1
  4603   01368E  6AE3               	clrf	plusw1,c
  4604   013690                     l4280:
  4605                           
  4606                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4607                           ;stkvar	_i @ sp[(-1)+0]
  4608   013690  0EFF               	movlw	-1
  4609   013692  50E3               	movf	plusw1,w,c
  4610   013694  0D08               	mullw	8
  4611   013696  0ECA               	movlw	low (_theXF+2)
  4612   013698  24F3               	addwf	243,w,c
  4613   01369A  6ED9               	movwf	fsr2l,c
  4614   01369C  0E02               	movlw	high (_theXF+2)
  4615   01369E  20F4               	addwfc	prodh,w,c
  4616   0136A0  6EDA               	movwf	fsr2h,c
  4617   0136A2  50DF               	movf	indf2,w,c
  4618   0136A4  A4D8               	btfss	status,2,c
  4619   0136A6  EF57  F09B         	goto	u1901
  4620   0136AA  EF59  F09B         	goto	u1900
  4621   0136AE                     u1901:
  4622   0136AE  EF9F  F09B         	goto	l4298
  4623   0136B2                     u1900:
  4624   0136B2                     
  4625                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4626                           ;stkvar	_tm @ sp[(-1)+-2]
  4627   0136B2  50E1               	movf	fsr1l,w,c
  4628   0136B4  0FFD               	addlw	-3
  4629   0136B6  6ED9               	movwf	fsr2l,c
  4630   0136B8  50E2               	movf	fsr1h,w,c
  4631   0136BA  6EDA               	movwf	fsr2h,c
  4632   0136BC  0EFF               	movlw	255
  4633   0136BE  22DA               	addwfc	fsr2h,f,c
  4634                           
  4635                           ;stkvar	_i @ sp[(-1)+0]
  4636   0136C0  0EFF               	movlw	-1
  4637   0136C2  50E3               	movf	plusw1,w,c
  4638   0136C4  0D08               	mullw	8
  4639   0136C6  0EC8               	movlw	low _theXF
  4640   0136C8  24F3               	addwf	243,w,c
  4641   0136CA  6EE9               	movwf	fsr0l,c
  4642   0136CC  0E02               	movlw	high _theXF
  4643   0136CE  20F4               	addwfc	prodh,w,c
  4644   0136D0  6EEA               	movwf	fsr0h,c
  4645   0136D2  CFDE FFEE          	movff	postinc2,postinc0
  4646   0136D6  CFDD FFED          	movff	postdec2,postdec0
  4647                           
  4648                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4649                           ;stkvar	_ev @ sp[(-1)+-8]
  4650   0136DA  0EF7               	movlw	247
  4651   0136DC  24E1               	addwf	fsr1l,w,c
  4652   0136DE  6ED9               	movwf	fsr2l,c
  4653   0136E0  0EFF               	movlw	255
  4654   0136E2  20E2               	addwfc	fsr1h,w,c
  4655   0136E4  6EDA               	movwf	fsr2h,c
  4656                           
  4657                           ;stkvar	_i @ sp[(-1)+0]
  4658   0136E6  0EFF               	movlw	-1
  4659   0136E8  50E3               	movf	plusw1,w,c
  4660   0136EA  0D08               	mullw	8
  4661   0136EC  0ECA               	movlw	low (_theXF+2)
  4662   0136EE  24F3               	addwf	243,w,c
  4663   0136F0  6EE9               	movwf	fsr0l,c
  4664   0136F2  0E02               	movlw	high (_theXF+2)
  4665   0136F4  20F4               	addwfc	prodh,w,c
  4666   0136F6  6EEA               	movwf	fsr0h,c
  4667   0136F8  0E05               	movlw	5
  4668   0136FA                     u1911:
  4669   0136FA  CFDB FFEB          	movff	plusw2,plusw0
  4670   0136FE  06E8               	decf	wreg,f,c
  4671   013700  E2FC               	bc	u1911
  4672   013702                     
  4673                           ;xf/xf.c: 180:             theXF.countTmr++;
  4674   013702  C3E1  FFE8         	movff	_theXF+281,wreg
  4675   013706  0F01               	addlw	1
  4676   013708  CFE8 F3E1          	movff	wreg,_theXF+281
  4677   01370C                     
  4678                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4679   01370C  EE23  F0E1         	lfsr	2,_theXF+281
  4680   013710  EE03  F0E0         	lfsr	0,_theXF+280
  4681   013714  50DE               	movf	postinc2,w,c
  4682   013716  5CEE               	subwf	postinc0,w,c
  4683   013718  B0D8               	btfsc	status,0,c
  4684   01371A  EF91  F09B         	goto	u1921
  4685   01371E  EF93  F09B         	goto	u1920
  4686   013722                     u1921:
  4687   013722  EF95  F09B         	goto	l4290
  4688   013726                     u1920:
  4689   013726                     
  4690                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4691   013726  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4692   01372A                     l4290:
  4693                           
  4694                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4695                           ;stkvar	_inISR @ sp[(-1)+-9]
  4696   01372A  0EF6               	movlw	-10
  4697   01372C  50E3               	movf	plusw1,w,c
  4698   01372E  6EE6               	movwf	postinc1,c
  4699   013730  ECD4  F0A4         	call	_LEAVECRITICAL	;wreg free
  4700   013734                     
  4701                           ;xf/xf.c: 186:             return i;
  4702                           ;stkvar	_i @ sp[(-1)+0]
  4703   013734  0EFF               	movlw	-1
  4704   013736  CFE3 F02C          	movff	plusw1,btemp
  4705   01373A  EFB0  F09B         	goto	l1234
  4706   01373E                     l4298:
  4707                           
  4708                           ;xf/xf.c: 189:     }
  4709                           ;stkvar	_i @ sp[(-1)+0]
  4710   01373E  0EFF               	movlw	-1
  4711   013740  2AE3               	incf	plusw1,f,c
  4712   013742                     
  4713                           ;stkvar	_i @ sp[(-1)+0]
  4714   013742  0EFF               	movlw	-1
  4715   013744  CFE3 F02C          	movff	plusw1,btemp
  4716   013748  0E0B               	movlw	11
  4717   01374A  642C               	cpfsgt	btemp^0,c
  4718   01374C  EFAA  F09B         	goto	u1931
  4719   013750  EFAC  F09B         	goto	u1930
  4720   013754                     u1931:
  4721   013754  EF48  F09B         	goto	l4280
  4722   013758                     u1930:
  4723   013758                     
  4724                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4725   013758  EC03  F0A5         	call	_XF_noMoreTimer	;wreg free
  4726   01375C  EF95  F09B         	goto	l4290
  4727   013760                     l1234:
  4728                           
  4729                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4730   013760  0EF6               	movlw	246
  4731   013762  26E1               	addwf	fsr1l,f,c
  4732   013764  0EFF               	movlw	255
  4733   013766  22E2               	addwfc	fsr1h,f,c
  4734   013768  0012               	return		;funcret
  4735   01376A                     __end_of_XF_scheduleTimer:
  4736                           	callstack 0
  4737                           
  4738 ;; *************** function _XF_noMoreTimer *****************
  4739 ;; Defined at:
  4740 ;;		line 69 in file "xf/xf.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1  [STACK] void 
  4747 ;; Registers used:
  4748 ;;		None
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used: 1
  4760 ;; Hardware stack levels required when called: 7
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_XF_scheduleTimer
  4765 ;; This function uses a reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text5
  4769   014A06                     __ptext5:
  4770                           	callstack 0
  4771   014A06                     _XF_noMoreTimer:
  4772                           	callstack 9
  4773   014A06                     l1206:
  4774   014A06  EF03  F0A5         	goto	l1206
  4775                           
  4776                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4777   014A0A  0012               	return		;funcret
  4778   014A0C                     __end_of_XF_noMoreTimer:
  4779                           	callstack 0
  4780                           
  4781 ;; *************** function _XF_noMoreEvent *****************
  4782 ;; Defined at:
  4783 ;;		line 65 in file "xf/xf.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;		None
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;		None
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1  [STACK] void 
  4790 ;; Registers used:
  4791 ;;		None
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;Total ram usage:        0 bytes
  4802 ;; Hardware stack levels used: 1
  4803 ;; Hardware stack levels required when called: 7
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_XF_pushEvent
  4808 ;; This function uses a reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text6
  4812   014A0C                     __ptext6:
  4813                           	callstack 0
  4814   014A0C                     _XF_noMoreEvent:
  4815                           	callstack 10
  4816   014A0C                     l1200:
  4817   014A0C  EF06  F0A5         	goto	l1200
  4818                           
  4819                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4820   014A10  0012               	return		;funcret
  4821   014A12                     __end_of_XF_noMoreEvent:
  4822                           	callstack 0
  4823                           
  4824 ;; *************** function _Event_setDelay *****************
  4825 ;; Defined at:
  4826 ;;		line 32 in file "xf/event.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  me              2  [STACK] PTR struct Event_
  4829 ;;		 -> ev(6), 
  4830 ;;  delay           2  [STACK] unsigned short 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1  [STACK] void 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;Total ram usage:        0 bytes
  4847 ;; Hardware stack levels used: 1
  4848 ;; Hardware stack levels required when called: 7
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_XF_pushEvent
  4853 ;;		_XF_post
  4854 ;; This function uses a reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text7
  4858   01480E                     __ptext7:
  4859                           	callstack 0
  4860   01480E                     _Event_setDelay:
  4861                           	callstack 10
  4862   01480E                     
  4863                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4864                           ;stkvar	_delay @ sp[(0)+-4]
  4865   01480E  50E1               	movf	fsr1l,w,c
  4866   014810  0FFC               	addlw	-4
  4867   014812  6ED9               	movwf	fsr2l,c
  4868   014814  50E2               	movf	fsr1h,w,c
  4869   014816  6EDA               	movwf	fsr2h,c
  4870   014818  0EFF               	movlw	255
  4871   01481A  22DA               	addwfc	fsr2h,f,c
  4872                           
  4873                           ;stkvar	_me @ sp[(0)+-2]
  4874   01481C  0EFE               	movlw	-2
  4875   01481E  CFE3 F036          	movff	plusw1,btemp+10
  4876   014822  0EFF               	movlw	-1
  4877   014824  CFE3 F037          	movff	plusw1,btemp+11
  4878   014828  0E04               	movlw	4
  4879   01482A  2436               	addwf	(btemp+10)^0,w,c
  4880   01482C  6EE9               	movwf	fsr0l,c
  4881   01482E  0E00               	movlw	0
  4882   014830  2037               	addwfc	(btemp+11)^0,w,c
  4883   014832  6EEA               	movwf	fsr0h,c
  4884   014834  CFDE FFEE          	movff	postinc2,postinc0
  4885   014838  CFDD FFED          	movff	postdec2,postdec0
  4886   01483C                     
  4887                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4888   01483C  52E5               	movf	postdec1,f,c
  4889   01483E  52E5               	movf	postdec1,f,c
  4890   014840  52E5               	movf	postdec1,f,c
  4891   014842  52E5               	movf	postdec1,f,c
  4892   014844  0012               	return		;funcret
  4893   014846                     __end_of_Event_setDelay:
  4894                           	callstack 0
  4895                           
  4896 ;; *************** function _Event_getDelay *****************
  4897 ;; Defined at:
  4898 ;;		line 37 in file "xf/event.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;  me              2  [STACK] PTR struct Event_
  4901 ;;		 -> ev(6), 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;		None
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  2  [STACK] unsigned short 
  4906 ;; Registers used:
  4907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;Total ram usage:        0 bytes
  4918 ;; Hardware stack levels used: 1
  4919 ;; Hardware stack levels required when called: 7
  4920 ;; This function calls:
  4921 ;;		Nothing
  4922 ;; This function is called by:
  4923 ;;		_XF_pushEvent
  4924 ;; This function uses a reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text8
  4928   01492A                     __ptext8:
  4929                           	callstack 0
  4930   01492A                     _Event_getDelay:
  4931                           	callstack 10
  4932   01492A                     
  4933                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  4934                           ;stkvar	_me @ sp[(0)+-2]
  4935   01492A  0EFE               	movlw	-2
  4936   01492C  CFE3 F036          	movff	plusw1,btemp+10
  4937   014930  0EFF               	movlw	-1
  4938   014932  CFE3 F037          	movff	plusw1,btemp+11
  4939   014936  0E04               	movlw	4
  4940   014938  2436               	addwf	(btemp+10)^0,w,c
  4941   01493A  6ED9               	movwf	fsr2l,c
  4942   01493C  0E00               	movlw	0
  4943   01493E  2037               	addwfc	(btemp+11)^0,w,c
  4944   014940  6EDA               	movwf	fsr2h,c
  4945   014942  CFDE F02C          	movff	postinc2,btemp
  4946   014946  CFDD F02D          	movff	postdec2,btemp+1
  4947   01494A                     
  4948                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  4949   01494A  52E5               	movf	postdec1,f,c
  4950   01494C  52E5               	movf	postdec1,f,c
  4951   01494E  0012               	return		;funcret
  4952   014950                     __end_of_Event_getDelay:
  4953                           	callstack 0
  4954                           
  4955 ;; *************** function _Event_setPE *****************
  4956 ;; Defined at:
  4957 ;;		line 12 in file "xf/event.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  me              2  [STACK] PTR struct Event_
  4960 ;;		 -> ev(6), 
  4961 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4962 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;		None
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1  [STACK] void 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:        0 bytes
  4979 ;; Hardware stack levels used: 1
  4980 ;; Hardware stack levels required when called: 7
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_XF_post
  4985 ;; This function uses a reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text9
  4989   014798                     __ptext9:
  4990                           	callstack 0
  4991   014798                     _Event_setPE:
  4992                           	callstack 21
  4993   014798                     
  4994                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  4995                           ;stkvar	_processEvent @ sp[(0)+-5]
  4996   014798  50E1               	movf	fsr1l,w,c
  4997   01479A  0FFB               	addlw	-5
  4998   01479C  6ED9               	movwf	fsr2l,c
  4999   01479E  50E2               	movf	fsr1h,w,c
  5000   0147A0  6EDA               	movwf	fsr2h,c
  5001   0147A2  0EFF               	movlw	255
  5002   0147A4  22DA               	addwfc	fsr2h,f,c
  5003                           
  5004                           ;stkvar	_me @ sp[(0)+-2]
  5005   0147A6  0EFE               	movlw	-2
  5006   0147A8  CFE3 F036          	movff	plusw1,btemp+10
  5007   0147AC  0EFF               	movlw	-1
  5008   0147AE  CFE3 F037          	movff	plusw1,btemp+11
  5009   0147B2  0E01               	movlw	1
  5010   0147B4  2436               	addwf	(btemp+10)^0,w,c
  5011   0147B6  6EE9               	movwf	fsr0l,c
  5012   0147B8  0E00               	movlw	0
  5013   0147BA  2037               	addwfc	(btemp+11)^0,w,c
  5014   0147BC  6EEA               	movwf	fsr0h,c
  5015   0147BE  CFDE FFEE          	movff	postinc2,postinc0
  5016   0147C2  CFDE FFEE          	movff	postinc2,postinc0
  5017   0147C6  CFDE FFEE          	movff	postinc2,postinc0
  5018   0147CA                     
  5019                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  5020   0147CA  0EFB               	movlw	251
  5021   0147CC  26E1               	addwf	fsr1l,f,c
  5022   0147CE  0EFF               	movlw	255
  5023   0147D0  22E2               	addwfc	fsr1h,f,c
  5024   0147D2  0012               	return		;funcret
  5025   0147D4                     __end_of_Event_setPE:
  5026                           	callstack 0
  5027                           
  5028 ;; *************** function _Event_setId *****************
  5029 ;; Defined at:
  5030 ;;		line 22 in file "xf/event.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  me              2  [STACK] PTR struct Event_
  5033 ;;		 -> ev(6), 
  5034 ;;  eventID         1  [STACK] unsigned char 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;		None
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1  [STACK] void 
  5039 ;; Registers used:
  5040 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;Total ram usage:        0 bytes
  5051 ;; Hardware stack levels used: 1
  5052 ;; Hardware stack levels required when called: 7
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_XF_post
  5057 ;; This function uses a reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text10
  5061   01498E                     __ptext10:
  5062                           	callstack 0
  5063   01498E                     _Event_setId:
  5064                           	callstack 21
  5065   01498E                     
  5066                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  5067                           ;stkvar	_eventID @ sp[(0)+-3]
  5068                           ;stkvar	_me @ sp[(0)+-2]
  5069   01498E  0EFE               	movlw	-2
  5070   014990  CFE3 FFD9          	movff	plusw1,fsr2l
  5071   014994  0EFF               	movlw	-1
  5072   014996  CFE3 FFDA          	movff	plusw1,fsr2h
  5073   01499A  0EFD               	movlw	-3
  5074   01499C  CFE3 FFDF          	movff	plusw1,indf2
  5075   0149A0                     
  5076                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5077   0149A0  52E5               	movf	postdec1,f,c
  5078   0149A2  52E5               	movf	postdec1,f,c
  5079   0149A4  52E5               	movf	postdec1,f,c
  5080   0149A6  0012               	return		;funcret
  5081   0149A8                     __end_of_Event_setId:
  5082                           	callstack 0
  5083                           
  5084 ;; *************** function _CanReceive *****************
  5085 ;; Defined at:
  5086 ;;		line 242 in file "can/can.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5089 ;;		 -> rxObj(16), 
  5090 ;;  rxd             2  [STACK] PTR unsigned char 
  5091 ;;		 -> rxdata(8), 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  rxFlags         1  [STACK] enum E5588
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1  [STACK] char 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;Total ram usage:        0 bytes
  5108 ;; Hardware stack levels used: 1
  5109 ;; Hardware stack levels required when called: 11
  5110 ;; This function calls:
  5111 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5112 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5113 ;; This function is called by:
  5114 ;;		_updateCarState
  5115 ;; This function uses a reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text11
  5119   0144C8                     __ptext11:
  5120                           	callstack 0
  5121   0144C8                     _CanReceive:
  5122                           	callstack 0
  5123                           
  5124                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5125   0144C8  52E6               	movf	postinc1,f,c
  5126   0144CA                     
  5127                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5128                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5129   0144CA  0EFF               	movlw	255
  5130   0144CC  24E1               	addwf	fsr1l,w,c
  5131   0144CE  6E2C               	movwf	btemp^0,c
  5132   0144D0  0EFF               	movlw	255
  5133   0144D2  20E2               	addwfc	fsr1h,w,c
  5134   0144D4  6E2D               	movwf	(btemp+1)^0,c
  5135   0144D6  C02C  FFE6         	movff	btemp,postinc1
  5136   0144DA  C02D  FFE6         	movff	btemp+1,postinc1
  5137   0144DE  0E02               	movlw	2
  5138   0144E0  6EE6               	movwf	postinc1,c
  5139   0144E2  EC38  F0A0         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5140   0144E6                     
  5141                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5142                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5143   0144E6  0EFF               	movlw	-1
  5144   0144E8  A0E3               	btfss	plusw1,0,c
  5145   0144EA  EF79  F0A2         	goto	u2751
  5146   0144EE  EF7B  F0A2         	goto	u2750
  5147   0144F2                     u2751:
  5148   0144F2  EF8F  F0A2         	goto	l5024
  5149   0144F6                     u2750:
  5150   0144F6                     
  5151                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5152   0144F6  0E08               	movlw	8
  5153   0144F8  6EE6               	movwf	postinc1,c
  5154                           
  5155                           ;stkvar	_rxd @ sp[(-2)+-4]
  5156   0144FA  0EFA               	movlw	-6
  5157   0144FC  CFE3 FFE6          	movff	plusw1,postinc1
  5158   014500  CFE3 FFE6          	movff	plusw1,postinc1
  5159                           
  5160                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5161   014504  0EFA               	movlw	-6
  5162   014506  CFE3 FFE6          	movff	plusw1,postinc1
  5163   01450A  CFE3 FFE6          	movff	plusw1,postinc1
  5164   01450E  0E02               	movlw	2
  5165   014510  6EE6               	movwf	postinc1,c
  5166   014512  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5167   014516                     
  5168                           ;can/can.c: 249:     return 0;
  5169   014516  0E00               	movlw	0
  5170   014518  6E2C               	movwf	btemp^0,c
  5171   01451A  EF91  F0A2         	goto	l165
  5172   01451E                     l5024:
  5173                           
  5174                           ;can/can.c: 251:   return -1;
  5175   01451E  0EFF               	movlw	255
  5176   014520  6E2C               	movwf	btemp^0,c
  5177   014522                     l165:
  5178                           
  5179                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5180   014522  0EFB               	movlw	251
  5181   014524  26E1               	addwf	fsr1l,f,c
  5182   014526  0EFF               	movlw	255
  5183   014528  22E2               	addwfc	fsr1h,f,c
  5184   01452A  0012               	return		;funcret
  5185   01452C                     __end_of_CanReceive:
  5186                           	callstack 0
  5187                           
  5188 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5189 ;; Defined at:
  5190 ;;		line 1236 in file "can/can.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  channel         1  [STACK] enum E5287
  5193 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5194 ;;		 -> rxObj(16), txMsg(16), 
  5195 ;;  rxd             2  [STACK] PTR unsigned char 
  5196 ;;		 -> rxdata(8), 
  5197 ;;  nBytes          1  [STACK] unsigned char 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  temp32          4  [STACK] unsigned long 
  5200 ;;  ba             76  [STACK] unsigned char [76]
  5201 ;;  fifoReg        12  [STACK] unsigned long [3]
  5202 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5203 ;;  myReg           4  [STACK] struct _REG_t
  5204 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5205 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5206 ;;  a               2  [STACK] unsigned short 
  5207 ;;  i               1  [STACK] unsigned char 
  5208 ;;  n               1  [STACK] unsigned char 
  5209 ;;  spiTransferE    1  [STACK] char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1  [STACK] char 
  5212 ;; Registers used:
  5213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;Total ram usage:        0 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; Hardware stack levels required when called: 10
  5226 ;; This function calls:
  5227 ;;		_DRV_CANFDSPI_ReadByteArray
  5228 ;;		_DRV_CANFDSPI_ReadWordArray
  5229 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5230 ;; This function is called by:
  5231 ;;		_CanReceive
  5232 ;; This function uses a reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text12
  5236   01074C                     __ptext12:
  5237                           	callstack 0
  5238   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5239                           	callstack 0
  5240                           
  5241                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5242   01074C  0E6E               	movlw	110
  5243   01074E  26E1               	addwf	fsr1l,f,c
  5244   010750  0E00               	movlw	0
  5245   010752  22E2               	addwfc	fsr1h,f,c
  5246   010754                     
  5247                           ;can/can.c: 1241:     uint8_t i = 0;
  5248                           ;stkvar	_i @ sp[(-110)+107]
  5249   010754  0EFD               	movlw	-3
  5250   010756  6AE3               	clrf	plusw1,c
  5251                           
  5252                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5253                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5254   010758  0EFF               	movlw	-1
  5255   01075A  6AE3               	clrf	plusw1,c
  5256   01075C                     
  5257                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5258                           ;stkvar	_channel @ sp[(-110)+-1]
  5259   01075C  0E91               	movlw	-111
  5260   01075E  50E3               	movf	plusw1,w,c
  5261   010760  0D0C               	mullw	12
  5262   010762  0E50               	movlw	80
  5263   010764  26F3               	addwf	243,f,c
  5264   010766  0E00               	movlw	0
  5265   010768  22F4               	addwfc	244,f,c
  5266                           
  5267                           ;stkvar	_a @ sp[(-110)+105]
  5268   01076A  0EFB               	movlw	-5
  5269   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5270   010770  0EFC               	movlw	-4
  5271   010772  CFF4 FFE3          	movff	prodh,plusw1
  5272   010776                     
  5273                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5274   010776  0E03               	movlw	3
  5275   010778  6EE6               	movwf	postinc1,c
  5276   01077A  0E00               	movlw	0
  5277   01077C  6EE6               	movwf	postinc1,c
  5278                           
  5279                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5280   01077E  0EE0               	movlw	224
  5281   010780  24E1               	addwf	fsr1l,w,c
  5282   010782  6E2C               	movwf	btemp^0,c
  5283   010784  0EFF               	movlw	255
  5284   010786  20E2               	addwfc	fsr1h,w,c
  5285   010788  6E2D               	movwf	(btemp+1)^0,c
  5286   01078A  C02C  FFE6         	movff	btemp,postinc1
  5287   01078E  C02D  FFE6         	movff	btemp+1,postinc1
  5288                           
  5289                           ;stkvar	_a @ sp[(-114)+105]
  5290   010792  0EF7               	movlw	-9
  5291   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5292   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5293   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5294                           
  5295                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5296   0107A0  0EFF               	movlw	-1
  5297   0107A2  C02C  FFE3         	movff	btemp,plusw1
  5298   0107A6                     
  5299                           ;can/can.c: 1253:     if (spiTransferError) {
  5300                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5301   0107A6  0EFF               	movlw	-1
  5302   0107A8  50E3               	movf	plusw1,w,c
  5303   0107AA  B4D8               	btfsc	status,2,c
  5304   0107AC  EFDA  F083         	goto	u2111
  5305   0107B0  EFDC  F083         	goto	u2110
  5306   0107B4                     u2111:
  5307   0107B4  EFDE  F083         	goto	l4476
  5308   0107B8                     u2110:
  5309   0107B8  EF15  F087         	goto	l357
  5310   0107BC                     l4476:
  5311                           
  5312                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5313                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5314   0107BC  0EE2               	movlw	-30
  5315   0107BE  CFE3 F034          	movff	plusw1,btemp+8
  5316   0107C2  0EE3               	movlw	-29
  5317   0107C4  CFE3 F035          	movff	plusw1,btemp+9
  5318   0107C8  0EE4               	movlw	-28
  5319   0107CA  CFE3 F036          	movff	plusw1,btemp+10
  5320   0107CE  0EE5               	movlw	-27
  5321   0107D0  CFE3 F037          	movff	plusw1,btemp+11
  5322                           
  5323                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5324   0107D4  0EEE               	movlw	-18
  5325   0107D6  C034  FFE3         	movff	btemp+8,plusw1
  5326   0107DA  0EEF               	movlw	-17
  5327   0107DC  C035  FFE3         	movff	btemp+9,plusw1
  5328   0107E0  0EF0               	movlw	-16
  5329   0107E2  C036  FFE3         	movff	btemp+10,plusw1
  5330   0107E6  0EF1               	movlw	-15
  5331   0107E8  C037  FFE3         	movff	btemp+11,plusw1
  5332   0107EC                     
  5333                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5334                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5335   0107EC  50E1               	movf	fsr1l,w,c
  5336   0107EE  0FEE               	addlw	-18
  5337   0107F0  6ED9               	movwf	fsr2l,c
  5338   0107F2  50E2               	movf	fsr1h,w,c
  5339   0107F4  6EDA               	movwf	fsr2h,c
  5340   0107F6  0EFF               	movlw	255
  5341   0107F8  22DA               	addwfc	fsr2h,f,c
  5342   0107FA  AEDF               	btfss	indf2,7,c
  5343   0107FC  EF02  F084         	goto	u2121
  5344   010800  EF04  F084         	goto	u2120
  5345   010804                     u2121:
  5346   010804  EF06  F084         	goto	l4482
  5347   010808                     u2120:
  5348   010808  EF15  F087         	goto	l357
  5349   01080C                     l4482:
  5350                           
  5351                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5352                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5353   01080C  0EEA               	movlw	234
  5354   01080E  24E1               	addwf	fsr1l,w,c
  5355   010810  6ED9               	movwf	fsr2l,c
  5356   010812  0EFF               	movlw	255
  5357   010814  20E2               	addwfc	fsr1h,w,c
  5358   010816  6EDA               	movwf	fsr2h,c
  5359   010818  CFDE F034          	movff	postinc2,btemp+8
  5360   01081C  CFDE F035          	movff	postinc2,btemp+9
  5361   010820  CFDE F036          	movff	postinc2,btemp+10
  5362   010824  CFDE F037          	movff	postinc2,btemp+11
  5363                           
  5364                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5365   010828  0EF7               	movlw	-9
  5366   01082A  C034  FFE3         	movff	btemp+8,plusw1
  5367   01082E  0EF8               	movlw	-8
  5368   010830  C035  FFE3         	movff	btemp+9,plusw1
  5369   010834  0EF9               	movlw	-7
  5370   010836  C036  FFE3         	movff	btemp+10,plusw1
  5371   01083A  0EFA               	movlw	-6
  5372   01083C  C037  FFE3         	movff	btemp+11,plusw1
  5373   010840                     
  5374                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5375                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5376                           ;stkvar	_a @ sp[(-110)+105]
  5377   010840  0EF7               	movlw	-9
  5378   010842  CFE3 F02C          	movff	plusw1,btemp
  5379   010846  0EFB               	movlw	-5
  5380   010848  C02C  FFE3         	movff	btemp,plusw1
  5381   01084C  0EF8               	movlw	-8
  5382   01084E  CFE3 F02C          	movff	plusw1,btemp
  5383   010852  0EFC               	movlw	-4
  5384   010854  C02C  FFE3         	movff	btemp,plusw1
  5385   010858                     
  5386                           ;can/can.c: 1273:     a += 0x400;
  5387                           ;stkvar	_a @ sp[(-110)+105]
  5388   010858  50E1               	movf	fsr1l,w,c
  5389   01085A  0FFB               	addlw	-5
  5390   01085C  6ED9               	movwf	fsr2l,c
  5391   01085E  50E2               	movf	fsr1h,w,c
  5392   010860  6EDA               	movwf	fsr2h,c
  5393   010862  0EFF               	movlw	255
  5394   010864  22DA               	addwfc	fsr2h,f,c
  5395   010866  0E00               	movlw	0
  5396   010868  26DE               	addwf	postinc2,f,c
  5397   01086A  0E04               	movlw	4
  5398   01086C  22DD               	addwfc	postdec2,f,c
  5399   01086E                     
  5400                           ;can/can.c: 1276:     n = nBytes + 8;
  5401   01086E  0E08               	movlw	8
  5402   010870  6E37               	movwf	(btemp+11)^0,c
  5403                           
  5404                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5405   010872  0E8C               	movlw	-116
  5406   010874  50E3               	movf	plusw1,w,c
  5407   010876  2437               	addwf	(btemp+11)^0,w,c
  5408   010878  6E36               	movwf	(btemp+10)^0,c
  5409                           
  5410                           ;stkvar	_n @ sp[(-110)+108]
  5411   01087A  0EFE               	movlw	-2
  5412   01087C  C036  FFE3         	movff	btemp+10,plusw1
  5413   010880                     
  5414                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5415                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5416   010880  50E1               	movf	fsr1l,w,c
  5417   010882  0FEE               	addlw	-18
  5418   010884  6ED9               	movwf	fsr2l,c
  5419   010886  50E2               	movf	fsr1h,w,c
  5420   010888  6EDA               	movwf	fsr2h,c
  5421   01088A  0EFF               	movlw	255
  5422   01088C  22DA               	addwfc	fsr2h,f,c
  5423   01088E  AADF               	btfss	indf2,5,c
  5424   010890  EF4C  F084         	goto	u2131
  5425   010894  EF4E  F084         	goto	u2130
  5426   010898                     u2131:
  5427   010898  EF56  F084         	goto	l4494
  5428   01089C                     u2130:
  5429   01089C                     
  5430                           ;can/can.c: 1279:         n += 4;
  5431                           ;stkvar	_n @ sp[(-110)+108]
  5432   01089C  0EFE               	movlw	-2
  5433   01089E  CFE3 F02C          	movff	plusw1,btemp
  5434   0108A2  0E04               	movlw	4
  5435   0108A4  262C               	addwf	btemp^0,f,c
  5436   0108A6  0EFE               	movlw	-2
  5437   0108A8  C02C  FFE3         	movff	btemp,plusw1
  5438   0108AC                     l4494:
  5439                           
  5440                           ;can/can.c: 1283:     if (n % 4) {
  5441                           ;stkvar	_n @ sp[(-110)+108]
  5442   0108AC  0EFE               	movlw	-2
  5443   0108AE  CFE3 F037          	movff	plusw1,btemp+11
  5444   0108B2  0E03               	movlw	3
  5445   0108B4  1637               	andwf	(btemp+11)^0,f,c
  5446   0108B6  B4D8               	btfsc	status,2,c
  5447   0108B8  EF60  F084         	goto	u2141
  5448   0108BC  EF62  F084         	goto	u2140
  5449   0108C0                     u2141:
  5450   0108C0  EF72  F084         	goto	l4498
  5451   0108C4                     u2140:
  5452   0108C4                     
  5453                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5454                           ;stkvar	_n @ sp[(-110)+108]
  5455   0108C4  0EFE               	movlw	-2
  5456   0108C6  CFE3 F037          	movff	plusw1,btemp+11
  5457   0108CA  0E03               	movlw	3
  5458   0108CC  1637               	andwf	(btemp+11)^0,f,c
  5459                           
  5460                           ;stkvar	_n @ sp[(-110)+108]
  5461   0108CE  0EFE               	movlw	-2
  5462   0108D0  CFE3 F036          	movff	plusw1,btemp+10
  5463   0108D4  5037               	movf	(btemp+11)^0,w,c
  5464   0108D6  5C36               	subwf	(btemp+10)^0,w,c
  5465   0108D8  6E37               	movwf	(btemp+11)^0,c
  5466   0108DA  0E04               	movlw	4
  5467   0108DC  2637               	addwf	(btemp+11)^0,f,c
  5468                           
  5469                           ;stkvar	_n @ sp[(-110)+108]
  5470   0108DE  0EFE               	movlw	-2
  5471   0108E0  C037  FFE3         	movff	btemp+11,plusw1
  5472   0108E4                     l4498:
  5473                           
  5474                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5475                           ;stkvar	_n @ sp[(-110)+108]
  5476   0108E4  0EFE               	movlw	-2
  5477   0108E6  CFE3 F02C          	movff	plusw1,btemp
  5478   0108EA  0E4C               	movlw	76
  5479   0108EC  642C               	cpfsgt	btemp^0,c
  5480   0108EE  EF7B  F084         	goto	u2151
  5481   0108F2  EF7D  F084         	goto	u2150
  5482   0108F6                     u2151:
  5483   0108F6  EF82  F084         	goto	l4502
  5484   0108FA                     u2150:
  5485   0108FA                     
  5486                           ;can/can.c: 1291:         n = 76;
  5487   0108FA  0E4C               	movlw	76
  5488   0108FC  6E37               	movwf	(btemp+11)^0,c
  5489                           
  5490                           ;stkvar	_n @ sp[(-110)+108]
  5491   0108FE  0EFE               	movlw	-2
  5492   010900  C037  FFE3         	movff	btemp+11,plusw1
  5493   010904                     l4502:
  5494                           
  5495                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5496                           ;stkvar	_n @ sp[(-110)+108]
  5497   010904  0EFE               	movlw	-2
  5498   010906  50E3               	movf	plusw1,w,c
  5499   010908  6EE6               	movwf	postinc1,c
  5500   01090A  0E00               	movlw	0
  5501   01090C  6EE6               	movwf	postinc1,c
  5502                           
  5503                           ;stkvar	_ba @ sp[(-112)+4]
  5504   01090E  0E94               	movlw	148
  5505   010910  24E1               	addwf	fsr1l,w,c
  5506   010912  6E2C               	movwf	btemp^0,c
  5507   010914  0EFF               	movlw	255
  5508   010916  20E2               	addwfc	fsr1h,w,c
  5509   010918  6E2D               	movwf	(btemp+1)^0,c
  5510   01091A  C02C  FFE6         	movff	btemp,postinc1
  5511   01091E  C02D  FFE6         	movff	btemp+1,postinc1
  5512                           
  5513                           ;stkvar	_a @ sp[(-114)+105]
  5514   010922  0EF7               	movlw	-9
  5515   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5516   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5517   01092C  ECC4  F093         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5518                           
  5519                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5520   010930  0EFF               	movlw	-1
  5521   010932  C02C  FFE3         	movff	btemp,plusw1
  5522   010936                     
  5523                           ;can/can.c: 1295:     if (spiTransferError) {
  5524                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5525   010936  0EFF               	movlw	-1
  5526   010938  50E3               	movf	plusw1,w,c
  5527   01093A  B4D8               	btfsc	status,2,c
  5528   01093C  EFA2  F084         	goto	u2161
  5529   010940  EFA4  F084         	goto	u2160
  5530   010944                     u2161:
  5531   010944  EFA6  F084         	goto	l4508
  5532   010948                     u2160:
  5533   010948  EF15  F087         	goto	l357
  5534   01094C                     l4508:
  5535                           
  5536                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5537                           ;stkvar	_ba @ sp[(-110)+4]
  5538   01094C  0E9A               	movlw	154
  5539   01094E  24E1               	addwf	fsr1l,w,c
  5540   010950  6ED9               	movwf	fsr2l,c
  5541   010952  0EFF               	movlw	255
  5542   010954  20E2               	addwfc	fsr1h,w,c
  5543   010956  6EDA               	movwf	fsr2h,c
  5544                           
  5545                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5546   010958  0E8F               	movlw	-113
  5547   01095A  CFE3 F036          	movff	plusw1,btemp+10
  5548   01095E  0E90               	movlw	-112
  5549   010960  CFE3 F037          	movff	plusw1,btemp+11
  5550   010964  0E06               	movlw	6
  5551   010966  2436               	addwf	(btemp+10)^0,w,c
  5552   010968  6EE9               	movwf	fsr0l,c
  5553   01096A  0E00               	movlw	0
  5554   01096C  2037               	addwfc	(btemp+11)^0,w,c
  5555   01096E  6EEA               	movwf	fsr0h,c
  5556   010970  CFDF FFEF          	movff	indf2,indf0
  5557   010974                     
  5558                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5559                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5560   010974  0E8F               	movlw	-113
  5561   010976  CFE3 F036          	movff	plusw1,btemp+10
  5562   01097A  0E90               	movlw	-112
  5563   01097C  CFE3 F037          	movff	plusw1,btemp+11
  5564   010980  0E06               	movlw	6
  5565   010982  2436               	addwf	(btemp+10)^0,w,c
  5566   010984  6ED9               	movwf	fsr2l,c
  5567   010986  0E00               	movlw	0
  5568   010988  2037               	addwfc	(btemp+11)^0,w,c
  5569   01098A  6EDA               	movwf	fsr2h,c
  5570   01098C  B8DF               	btfsc	indf2,4,c
  5571   01098E  EFCB  F084         	goto	u2171
  5572   010992  EFCD  F084         	goto	u2170
  5573   010996                     u2171:
  5574   010996  EF38  F085         	goto	l4514
  5575   01099A                     u2170:
  5576   01099A                     
  5577                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5578                           ;stkvar	_ba @ sp[(-110)+4]
  5579   01099A  0E99               	movlw	153
  5580   01099C  24E1               	addwf	fsr1l,w,c
  5581   01099E  6ED9               	movwf	fsr2l,c
  5582   0109A0  0EFF               	movlw	255
  5583   0109A2  20E2               	addwfc	fsr1h,w,c
  5584   0109A4  6EDA               	movwf	fsr2h,c
  5585   0109A6  50DF               	movf	indf2,w,c
  5586   0109A8  6E37               	movwf	(btemp+11)^0,c
  5587   0109AA  0E1F               	movlw	31
  5588   0109AC  1637               	andwf	(btemp+11)^0,f,c
  5589   0109AE  C037  F030         	movff	btemp+11,btemp+4
  5590   0109B2  6A31               	clrf	(btemp+5)^0,c
  5591   0109B4  6A32               	clrf	(btemp+6)^0,c
  5592   0109B6  6A33               	clrf	(btemp+7)^0,c
  5593   0109B8  C030  F033         	movff	btemp+4,btemp+7
  5594   0109BC  6A32               	clrf	(btemp+6)^0,c
  5595   0109BE  6A31               	clrf	(btemp+5)^0,c
  5596   0109C0  6A30               	clrf	(btemp+4)^0,c
  5597                           
  5598                           ;stkvar	_ba @ sp[(-110)+4]
  5599   0109C2  0E97               	movlw	151
  5600   0109C4  24E1               	addwf	fsr1l,w,c
  5601   0109C6  6ED9               	movwf	fsr2l,c
  5602   0109C8  0EFF               	movlw	255
  5603   0109CA  20E2               	addwfc	fsr1h,w,c
  5604   0109CC  6EDA               	movwf	fsr2h,c
  5605   0109CE  50DF               	movf	indf2,w,c
  5606   0109D0  6E37               	movwf	(btemp+11)^0,c
  5607   0109D2  C037  F02C         	movff	btemp+11,btemp
  5608   0109D6  6A2D               	clrf	(btemp+1)^0,c
  5609   0109D8  6A2E               	clrf	(btemp+2)^0,c
  5610   0109DA  6A2F               	clrf	(btemp+3)^0,c
  5611   0109DC  C02E  F02F         	movff	btemp+2,btemp+3
  5612   0109E0  C02D  F02E         	movff	btemp+1,btemp+2
  5613   0109E4  C02C  F02D         	movff	btemp,btemp+1
  5614   0109E8  6A2C               	clrf	btemp^0,c
  5615                           
  5616                           ;stkvar	_ba @ sp[(-110)+4]
  5617   0109EA  0E96               	movlw	-106
  5618   0109EC  50E3               	movf	plusw1,w,c
  5619   0109EE  6E34               	movwf	(btemp+8)^0,c
  5620   0109F0  6A35               	clrf	(btemp+9)^0,c
  5621   0109F2  6A36               	clrf	(btemp+10)^0,c
  5622   0109F4  6A37               	clrf	(btemp+11)^0,c
  5623   0109F6  502C               	movf	btemp^0,w,c
  5624   0109F8  1234               	iorwf	(btemp+8)^0,f,c
  5625   0109FA  502D               	movf	(btemp+1)^0,w,c
  5626   0109FC  1235               	iorwf	(btemp+9)^0,f,c
  5627   0109FE  502E               	movf	(btemp+2)^0,w,c
  5628   010A00  1236               	iorwf	(btemp+10)^0,f,c
  5629   010A02  502F               	movf	(btemp+3)^0,w,c
  5630   010A04  1237               	iorwf	(btemp+11)^0,f,c
  5631                           
  5632                           ;stkvar	_ba @ sp[(-110)+4]
  5633   010A06  0E98               	movlw	152
  5634   010A08  24E1               	addwf	fsr1l,w,c
  5635   010A0A  6ED9               	movwf	fsr2l,c
  5636   010A0C  0EFF               	movlw	255
  5637   010A0E  20E2               	addwfc	fsr1h,w,c
  5638   010A10  6EDA               	movwf	fsr2h,c
  5639   010A12  50DF               	movf	indf2,w,c
  5640   010A14  6E2C               	movwf	btemp^0,c
  5641   010A16  6A2D               	clrf	(btemp+1)^0,c
  5642   010A18  6A2E               	clrf	(btemp+2)^0,c
  5643   010A1A  6A2F               	clrf	(btemp+3)^0,c
  5644   010A1C  C02D  F02F         	movff	btemp+1,btemp+3
  5645   010A20  C02C  F02E         	movff	btemp,btemp+2
  5646   010A24  6A2D               	clrf	(btemp+1)^0,c
  5647   010A26  6A2C               	clrf	btemp^0,c
  5648   010A28  502C               	movf	btemp^0,w,c
  5649   010A2A  1234               	iorwf	(btemp+8)^0,f,c
  5650   010A2C  502D               	movf	(btemp+1)^0,w,c
  5651   010A2E  1235               	iorwf	(btemp+9)^0,f,c
  5652   010A30  502E               	movf	(btemp+2)^0,w,c
  5653   010A32  1236               	iorwf	(btemp+10)^0,f,c
  5654   010A34  502F               	movf	(btemp+3)^0,w,c
  5655   010A36  1237               	iorwf	(btemp+11)^0,f,c
  5656   010A38  5030               	movf	(btemp+4)^0,w,c
  5657   010A3A  1034               	iorwf	(btemp+8)^0,w,c
  5658   010A3C  6E2C               	movwf	btemp^0,c
  5659   010A3E  5031               	movf	(btemp+5)^0,w,c
  5660   010A40  1035               	iorwf	(btemp+9)^0,w,c
  5661   010A42  6E2D               	movwf	(btemp+1)^0,c
  5662   010A44  5032               	movf	(btemp+6)^0,w,c
  5663   010A46  1036               	iorwf	(btemp+10)^0,w,c
  5664   010A48  6E2E               	movwf	(btemp+2)^0,c
  5665   010A4A  5033               	movf	(btemp+7)^0,w,c
  5666   010A4C  1037               	iorwf	(btemp+11)^0,w,c
  5667   010A4E  6E2F               	movwf	(btemp+3)^0,c
  5668                           
  5669                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5670   010A50  0E8F               	movlw	-113
  5671   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5672   010A56  0E90               	movlw	-112
  5673   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5674   010A5C  C02C  FFDE         	movff	btemp,postinc2
  5675   010A60  C02D  FFDE         	movff	btemp+1,postinc2
  5676   010A64  C02E  FFDE         	movff	btemp+2,postinc2
  5677   010A68  C02F  FFDE         	movff	btemp+3,postinc2
  5678                           
  5679                           ;can/can.c: 1320:     }
  5680   010A6C  EFF8  F085         	goto	l4516
  5681   010A70                     l4514:
  5682                           
  5683                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5684                           ;stkvar	_ba @ sp[(-110)+4]
  5685   010A70  0E99               	movlw	153
  5686   010A72  24E1               	addwf	fsr1l,w,c
  5687   010A74  6ED9               	movwf	fsr2l,c
  5688   010A76  0EFF               	movlw	255
  5689   010A78  20E2               	addwfc	fsr1h,w,c
  5690   010A7A  6EDA               	movwf	fsr2h,c
  5691   010A7C  50DF               	movf	indf2,w,c
  5692   010A7E  6E37               	movwf	(btemp+11)^0,c
  5693   010A80  0E1F               	movlw	31
  5694   010A82  1637               	andwf	(btemp+11)^0,f,c
  5695   010A84  C037  F030         	movff	btemp+11,btemp+4
  5696   010A88  6A31               	clrf	(btemp+5)^0,c
  5697   010A8A  6A32               	clrf	(btemp+6)^0,c
  5698   010A8C  6A33               	clrf	(btemp+7)^0,c
  5699   010A8E  C030  F033         	movff	btemp+4,btemp+7
  5700   010A92  6A32               	clrf	(btemp+6)^0,c
  5701   010A94  6A31               	clrf	(btemp+5)^0,c
  5702   010A96  6A30               	clrf	(btemp+4)^0,c
  5703                           
  5704                           ;stkvar	_ba @ sp[(-110)+4]
  5705   010A98  0E97               	movlw	151
  5706   010A9A  24E1               	addwf	fsr1l,w,c
  5707   010A9C  6ED9               	movwf	fsr2l,c
  5708   010A9E  0EFF               	movlw	255
  5709   010AA0  20E2               	addwfc	fsr1h,w,c
  5710   010AA2  6EDA               	movwf	fsr2h,c
  5711   010AA4  50DF               	movf	indf2,w,c
  5712   010AA6  6E37               	movwf	(btemp+11)^0,c
  5713   010AA8  C037  F02C         	movff	btemp+11,btemp
  5714   010AAC  6A2D               	clrf	(btemp+1)^0,c
  5715   010AAE  6A2E               	clrf	(btemp+2)^0,c
  5716   010AB0  6A2F               	clrf	(btemp+3)^0,c
  5717   010AB2  C02E  F02F         	movff	btemp+2,btemp+3
  5718   010AB6  C02D  F02E         	movff	btemp+1,btemp+2
  5719   010ABA  C02C  F02D         	movff	btemp,btemp+1
  5720   010ABE  6A2C               	clrf	btemp^0,c
  5721                           
  5722                           ;stkvar	_ba @ sp[(-110)+4]
  5723   010AC0  0E96               	movlw	-106
  5724   010AC2  50E3               	movf	plusw1,w,c
  5725   010AC4  6E34               	movwf	(btemp+8)^0,c
  5726   010AC6  6A35               	clrf	(btemp+9)^0,c
  5727   010AC8  6A36               	clrf	(btemp+10)^0,c
  5728   010ACA  6A37               	clrf	(btemp+11)^0,c
  5729   010ACC  502C               	movf	btemp^0,w,c
  5730   010ACE  1234               	iorwf	(btemp+8)^0,f,c
  5731   010AD0  502D               	movf	(btemp+1)^0,w,c
  5732   010AD2  1235               	iorwf	(btemp+9)^0,f,c
  5733   010AD4  502E               	movf	(btemp+2)^0,w,c
  5734   010AD6  1236               	iorwf	(btemp+10)^0,f,c
  5735   010AD8  502F               	movf	(btemp+3)^0,w,c
  5736   010ADA  1237               	iorwf	(btemp+11)^0,f,c
  5737                           
  5738                           ;stkvar	_ba @ sp[(-110)+4]
  5739   010ADC  0E98               	movlw	152
  5740   010ADE  24E1               	addwf	fsr1l,w,c
  5741   010AE0  6ED9               	movwf	fsr2l,c
  5742   010AE2  0EFF               	movlw	255
  5743   010AE4  20E2               	addwfc	fsr1h,w,c
  5744   010AE6  6EDA               	movwf	fsr2h,c
  5745   010AE8  50DF               	movf	indf2,w,c
  5746   010AEA  6E2C               	movwf	btemp^0,c
  5747   010AEC  6A2D               	clrf	(btemp+1)^0,c
  5748   010AEE  6A2E               	clrf	(btemp+2)^0,c
  5749   010AF0  6A2F               	clrf	(btemp+3)^0,c
  5750   010AF2  C02D  F02F         	movff	btemp+1,btemp+3
  5751   010AF6  C02C  F02E         	movff	btemp,btemp+2
  5752   010AFA  6A2D               	clrf	(btemp+1)^0,c
  5753   010AFC  6A2C               	clrf	btemp^0,c
  5754   010AFE  502C               	movf	btemp^0,w,c
  5755   010B00  1234               	iorwf	(btemp+8)^0,f,c
  5756   010B02  502D               	movf	(btemp+1)^0,w,c
  5757   010B04  1235               	iorwf	(btemp+9)^0,f,c
  5758   010B06  502E               	movf	(btemp+2)^0,w,c
  5759   010B08  1236               	iorwf	(btemp+10)^0,f,c
  5760   010B0A  502F               	movf	(btemp+3)^0,w,c
  5761   010B0C  1237               	iorwf	(btemp+11)^0,f,c
  5762   010B0E  5030               	movf	(btemp+4)^0,w,c
  5763   010B10  1034               	iorwf	(btemp+8)^0,w,c
  5764   010B12  6E2C               	movwf	btemp^0,c
  5765   010B14  5031               	movf	(btemp+5)^0,w,c
  5766   010B16  1035               	iorwf	(btemp+9)^0,w,c
  5767   010B18  6E2D               	movwf	(btemp+1)^0,c
  5768   010B1A  5032               	movf	(btemp+6)^0,w,c
  5769   010B1C  1036               	iorwf	(btemp+10)^0,w,c
  5770   010B1E  6E2E               	movwf	(btemp+2)^0,c
  5771   010B20  5033               	movf	(btemp+7)^0,w,c
  5772   010B22  1037               	iorwf	(btemp+11)^0,w,c
  5773   010B24  6E2F               	movwf	(btemp+3)^0,c
  5774                           
  5775                           ;stkvar	_temp32 @ sp[(-110)+0]
  5776   010B26  0E92               	movlw	-110
  5777   010B28  C02C  FFE3         	movff	btemp,plusw1
  5778   010B2C  0E93               	movlw	-109
  5779   010B2E  C02D  FFE3         	movff	btemp+1,plusw1
  5780   010B32  0E94               	movlw	-108
  5781   010B34  C02E  FFE3         	movff	btemp+2,plusw1
  5782   010B38  0E95               	movlw	-107
  5783   010B3A  C02F  FFE3         	movff	btemp+3,plusw1
  5784                           
  5785                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5786                           ;stkvar	_temp32 @ sp[(-110)+0]
  5787   010B3E  0E92               	movlw	-110
  5788   010B40  CFE3 F034          	movff	plusw1,btemp+8
  5789   010B44  0E93               	movlw	-109
  5790   010B46  CFE3 F035          	movff	plusw1,btemp+9
  5791   010B4A  0E94               	movlw	-108
  5792   010B4C  CFE3 F036          	movff	plusw1,btemp+10
  5793   010B50  0E95               	movlw	-107
  5794   010B52  CFE3 F037          	movff	plusw1,btemp+11
  5795   010B56  0E0C               	movlw	12
  5796   010B58  EFB3  F085         	goto	u2180
  5797   010B5C                     u2185:
  5798   010B5C  90D8               	bcf	status,0,c
  5799   010B5E  3237               	rrcf	(btemp+11)^0,f,c
  5800   010B60  3236               	rrcf	(btemp+10)^0,f,c
  5801   010B62  3235               	rrcf	(btemp+9)^0,f,c
  5802   010B64  3234               	rrcf	(btemp+8)^0,f,c
  5803   010B66                     u2180:
  5804   010B66  2EE8               	decfsz	wreg,f,c
  5805   010B68  EFAE  F085         	goto	u2185
  5806   010B6C  0EFF               	movlw	255
  5807   010B6E  1434               	andwf	(btemp+8)^0,w,c
  5808   010B70  6E30               	movwf	(btemp+4)^0,c
  5809   010B72  0EFF               	movlw	255
  5810   010B74  1435               	andwf	(btemp+9)^0,w,c
  5811   010B76  6E31               	movwf	(btemp+5)^0,c
  5812   010B78  0E03               	movlw	3
  5813   010B7A  1436               	andwf	(btemp+10)^0,w,c
  5814   010B7C  6E32               	movwf	(btemp+6)^0,c
  5815   010B7E  0E00               	movlw	0
  5816   010B80  1437               	andwf	(btemp+11)^0,w,c
  5817   010B82  6E33               	movwf	(btemp+7)^0,c
  5818                           
  5819                           ;stkvar	_temp32 @ sp[(-110)+0]
  5820   010B84  50E1               	movf	fsr1l,w,c
  5821   010B86  0F92               	addlw	-110
  5822   010B88  6ED9               	movwf	fsr2l,c
  5823   010B8A  50E2               	movf	fsr1h,w,c
  5824   010B8C  6EDA               	movwf	fsr2h,c
  5825   010B8E  0EFF               	movlw	255
  5826   010B90  22DA               	addwfc	fsr2h,f,c
  5827   010B92  0EFF               	movlw	255
  5828   010B94  14DE               	andwf	postinc2,w,c
  5829   010B96  6E34               	movwf	(btemp+8)^0,c
  5830   010B98  0E07               	movlw	7
  5831   010B9A  14DE               	andwf	postinc2,w,c
  5832   010B9C  6E35               	movwf	(btemp+9)^0,c
  5833   010B9E  0E00               	movlw	0
  5834   010BA0  14DE               	andwf	postinc2,w,c
  5835   010BA2  6E36               	movwf	(btemp+10)^0,c
  5836   010BA4  0E00               	movlw	0
  5837   010BA6  14DE               	andwf	postinc2,w,c
  5838   010BA8  6E37               	movwf	(btemp+11)^0,c
  5839   010BAA  0E12               	movlw	18
  5840   010BAC                     u2195:
  5841   010BAC  90D8               	bcf	status,0,c
  5842   010BAE  3634               	rlcf	(btemp+8)^0,f,c
  5843   010BB0  3635               	rlcf	(btemp+9)^0,f,c
  5844   010BB2  3636               	rlcf	(btemp+10)^0,f,c
  5845   010BB4  3637               	rlcf	(btemp+11)^0,f,c
  5846   010BB6  2EE8               	decfsz	wreg,f,c
  5847   010BB8  EFD6  F085         	goto	u2195
  5848   010BBC  5030               	movf	(btemp+4)^0,w,c
  5849   010BBE  1034               	iorwf	(btemp+8)^0,w,c
  5850   010BC0  6E2C               	movwf	btemp^0,c
  5851   010BC2  5031               	movf	(btemp+5)^0,w,c
  5852   010BC4  1035               	iorwf	(btemp+9)^0,w,c
  5853   010BC6  6E2D               	movwf	(btemp+1)^0,c
  5854   010BC8  5032               	movf	(btemp+6)^0,w,c
  5855   010BCA  1036               	iorwf	(btemp+10)^0,w,c
  5856   010BCC  6E2E               	movwf	(btemp+2)^0,c
  5857   010BCE  5033               	movf	(btemp+7)^0,w,c
  5858   010BD0  1037               	iorwf	(btemp+11)^0,w,c
  5859   010BD2  6E2F               	movwf	(btemp+3)^0,c
  5860                           
  5861                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5862   010BD4  0E8F               	movlw	-113
  5863   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5864   010BDA  0E90               	movlw	-112
  5865   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5866   010BE0  C02C  FFDE         	movff	btemp,postinc2
  5867   010BE4  C02D  FFDE         	movff	btemp+1,postinc2
  5868   010BE8  C02E  FFDE         	movff	btemp+2,postinc2
  5869   010BEC  C02F  FFDE         	movff	btemp+3,postinc2
  5870   010BF0                     l4516:
  5871                           
  5872                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5873                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5874   010BF0  0E8F               	movlw	-113
  5875   010BF2  CFE3 F036          	movff	plusw1,btemp+10
  5876   010BF6  0E90               	movlw	-112
  5877   010BF8  CFE3 F037          	movff	plusw1,btemp+11
  5878   010BFC  0E07               	movlw	7
  5879   010BFE  2436               	addwf	(btemp+10)^0,w,c
  5880   010C00  6ED9               	movwf	fsr2l,c
  5881   010C02  0E00               	movlw	0
  5882   010C04  2037               	addwfc	(btemp+11)^0,w,c
  5883   010C06  6EDA               	movwf	fsr2h,c
  5884                           
  5885                           ;stkvar	_ba @ sp[(-110)+4]
  5886   010C08  0E9B               	movlw	155
  5887   010C0A  24E1               	addwf	fsr1l,w,c
  5888   010C0C  6EE9               	movwf	fsr0l,c
  5889   010C0E  0EFF               	movlw	255
  5890   010C10  20E2               	addwfc	fsr1h,w,c
  5891   010C12  6EEA               	movwf	fsr0h,c
  5892   010C14  50EF               	movf	indf0,w,c
  5893   010C16  0B01               	andlw	1
  5894   010C18  6EDF               	movwf	indf2,c
  5895   010C1A                     
  5896                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5897                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5898   010C1A  0E8F               	movlw	-113
  5899   010C1C  CFE3 F036          	movff	plusw1,btemp+10
  5900   010C20  0E90               	movlw	-112
  5901   010C22  CFE3 F037          	movff	plusw1,btemp+11
  5902   010C26  0E08               	movlw	8
  5903   010C28  2436               	addwf	(btemp+10)^0,w,c
  5904   010C2A  6ED9               	movwf	fsr2l,c
  5905   010C2C  0E00               	movlw	0
  5906   010C2E  2037               	addwfc	(btemp+11)^0,w,c
  5907   010C30  6EDA               	movwf	fsr2h,c
  5908                           
  5909                           ;stkvar	_ba @ sp[(-110)+4]
  5910   010C32  0E9B               	movlw	155
  5911   010C34  24E1               	addwf	fsr1l,w,c
  5912   010C36  6EE9               	movwf	fsr0l,c
  5913   010C38  0EFF               	movlw	255
  5914   010C3A  20E2               	addwfc	fsr1h,w,c
  5915   010C3C  6EEA               	movwf	fsr0h,c
  5916   010C3E  50EF               	movf	indf0,w,c
  5917   010C40  6E37               	movwf	(btemp+11)^0,c
  5918   010C42  90D8               	bcf	status,0,c
  5919   010C44  3237               	rrcf	(btemp+11)^0,f,c
  5920   010C46  90D8               	bcf	status,0,c
  5921   010C48  3237               	rrcf	(btemp+11)^0,f,c
  5922   010C4A  90D8               	bcf	status,0,c
  5923   010C4C  3037               	rrcf	(btemp+11)^0,w,c
  5924   010C4E  6EDF               	movwf	indf2,c
  5925   010C50                     
  5926                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5927                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5928   010C50  50E1               	movf	fsr1l,w,c
  5929   010C52  0FEE               	addlw	-18
  5930   010C54  6ED9               	movwf	fsr2l,c
  5931   010C56  50E2               	movf	fsr1h,w,c
  5932   010C58  6EDA               	movwf	fsr2h,c
  5933   010C5A  0EFF               	movlw	255
  5934   010C5C  22DA               	addwfc	fsr2h,f,c
  5935   010C5E  AADF               	btfss	indf2,5,c
  5936   010C60  EF34  F086         	goto	u2201
  5937   010C64  EF36  F086         	goto	u2200
  5938   010C68                     u2201:
  5939   010C68  EFC4  F086         	goto	l4540
  5940   010C6C                     u2200:
  5941   010C6C                     
  5942                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  5943                           ;stkvar	_ba @ sp[(-110)+4]
  5944   010C6C  0E9E               	movlw	158
  5945   010C6E  24E1               	addwf	fsr1l,w,c
  5946   010C70  6ED9               	movwf	fsr2l,c
  5947   010C72  0EFF               	movlw	255
  5948   010C74  20E2               	addwfc	fsr1h,w,c
  5949   010C76  6EDA               	movwf	fsr2h,c
  5950   010C78  50DF               	movf	indf2,w,c
  5951   010C7A  6E37               	movwf	(btemp+11)^0,c
  5952                           
  5953                           ;stkvar	_myReg @ sp[(-110)+97]
  5954   010C7C  0EF3               	movlw	-13
  5955   010C7E  C037  FFE3         	movff	btemp+11,plusw1
  5956   010C82                     
  5957                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  5958                           ;stkvar	_ba @ sp[(-110)+4]
  5959   010C82  0E9F               	movlw	159
  5960   010C84  24E1               	addwf	fsr1l,w,c
  5961   010C86  6ED9               	movwf	fsr2l,c
  5962   010C88  0EFF               	movlw	255
  5963   010C8A  20E2               	addwfc	fsr1h,w,c
  5964   010C8C  6EDA               	movwf	fsr2h,c
  5965                           
  5966                           ;stkvar	_myReg @ sp[(-110)+97]
  5967   010C8E  0EF4               	movlw	244
  5968   010C90  24E1               	addwf	fsr1l,w,c
  5969   010C92  6EE9               	movwf	fsr0l,c
  5970   010C94  0EFF               	movlw	255
  5971   010C96  20E2               	addwfc	fsr1h,w,c
  5972   010C98  6EEA               	movwf	fsr0h,c
  5973   010C9A  CFDF FFEF          	movff	indf2,indf0
  5974   010C9E                     
  5975                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  5976                           ;stkvar	_ba @ sp[(-110)+4]
  5977   010C9E  0EA0               	movlw	160
  5978   010CA0  24E1               	addwf	fsr1l,w,c
  5979   010CA2  6ED9               	movwf	fsr2l,c
  5980   010CA4  0EFF               	movlw	255
  5981   010CA6  20E2               	addwfc	fsr1h,w,c
  5982   010CA8  6EDA               	movwf	fsr2h,c
  5983                           
  5984                           ;stkvar	_myReg @ sp[(-110)+97]
  5985   010CAA  0EF5               	movlw	245
  5986   010CAC  24E1               	addwf	fsr1l,w,c
  5987   010CAE  6EE9               	movwf	fsr0l,c
  5988   010CB0  0EFF               	movlw	255
  5989   010CB2  20E2               	addwfc	fsr1h,w,c
  5990   010CB4  6EEA               	movwf	fsr0h,c
  5991   010CB6  CFDF FFEF          	movff	indf2,indf0
  5992   010CBA                     
  5993                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  5994                           ;stkvar	_ba @ sp[(-110)+4]
  5995   010CBA  0EA1               	movlw	161
  5996   010CBC  24E1               	addwf	fsr1l,w,c
  5997   010CBE  6ED9               	movwf	fsr2l,c
  5998   010CC0  0EFF               	movlw	255
  5999   010CC2  20E2               	addwfc	fsr1h,w,c
  6000   010CC4  6EDA               	movwf	fsr2h,c
  6001                           
  6002                           ;stkvar	_myReg @ sp[(-110)+97]
  6003   010CC6  0EF6               	movlw	246
  6004   010CC8  24E1               	addwf	fsr1l,w,c
  6005   010CCA  6EE9               	movwf	fsr0l,c
  6006   010CCC  0EFF               	movlw	255
  6007   010CCE  20E2               	addwfc	fsr1h,w,c
  6008   010CD0  6EEA               	movwf	fsr0h,c
  6009   010CD2  CFDF FFEF          	movff	indf2,indf0
  6010   010CD6                     
  6011                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  6012                           ;stkvar	_myReg @ sp[(-110)+97]
  6013   010CD6  50E1               	movf	fsr1l,w,c
  6014   010CD8  0FF3               	addlw	-13
  6015   010CDA  6ED9               	movwf	fsr2l,c
  6016   010CDC  50E2               	movf	fsr1h,w,c
  6017   010CDE  6EDA               	movwf	fsr2h,c
  6018   010CE0  0EFF               	movlw	255
  6019   010CE2  22DA               	addwfc	fsr2h,f,c
  6020                           
  6021                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6022   010CE4  0E8F               	movlw	-113
  6023   010CE6  CFE3 F036          	movff	plusw1,btemp+10
  6024   010CEA  0E90               	movlw	-112
  6025   010CEC  CFE3 F037          	movff	plusw1,btemp+11
  6026   010CF0  0E09               	movlw	9
  6027   010CF2  2436               	addwf	(btemp+10)^0,w,c
  6028   010CF4  6EE9               	movwf	fsr0l,c
  6029   010CF6  0E00               	movlw	0
  6030   010CF8  2037               	addwfc	(btemp+11)^0,w,c
  6031   010CFA  6EEA               	movwf	fsr0h,c
  6032   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  6033   010D00  CFDE FFEE          	movff	postinc2,postinc0
  6034   010D04  CFDE FFEE          	movff	postinc2,postinc0
  6035   010D08  CFDE FFEE          	movff	postinc2,postinc0
  6036   010D0C                     
  6037                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  6038                           ;stkvar	_i @ sp[(-110)+107]
  6039   010D0C  0EFD               	movlw	-3
  6040   010D0E  6AE3               	clrf	plusw1,c
  6041   010D10  EFB1  F086         	goto	l4538
  6042   010D14                     l4534:
  6043                           
  6044                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  6045                           ;stkvar	_i @ sp[(-110)+107]
  6046   010D14  0EFD               	movlw	-3
  6047   010D16  50E3               	movf	plusw1,w,c
  6048   010D18  6E36               	movwf	(btemp+10)^0,c
  6049   010D1A  6A37               	clrf	(btemp+11)^0,c
  6050   010D1C  0E0C               	movlw	12
  6051   010D1E  2636               	addwf	(btemp+10)^0,f,c
  6052   010D20  0E00               	movlw	0
  6053   010D22  2237               	addwfc	(btemp+11)^0,f,c
  6054                           
  6055                           ;stkvar	_ba @ sp[(-110)+4]
  6056   010D24  0E96               	movlw	150
  6057   010D26  24E1               	addwf	fsr1l,w,c
  6058   010D28  6E34               	movwf	(btemp+8)^0,c
  6059   010D2A  0EFF               	movlw	255
  6060   010D2C  20E2               	addwfc	fsr1h,w,c
  6061   010D2E  6E35               	movwf	(btemp+9)^0,c
  6062   010D30  5036               	movf	(btemp+10)^0,w,c
  6063   010D32  2434               	addwf	(btemp+8)^0,w,c
  6064   010D34  6ED9               	movwf	fsr2l,c
  6065   010D36  5037               	movf	(btemp+11)^0,w,c
  6066   010D38  2035               	addwfc	(btemp+9)^0,w,c
  6067   010D3A  6EDA               	movwf	fsr2h,c
  6068                           
  6069                           ;stkvar	_i @ sp[(-110)+107]
  6070   010D3C  0EFD               	movlw	-3
  6071   010D3E  CFE3 F037          	movff	plusw1,btemp+11
  6072                           
  6073                           ;stkvar	_rxd @ sp[(-110)+-5]
  6074   010D42  0E8D               	movlw	-115
  6075   010D44  CFE3 F034          	movff	plusw1,btemp+8
  6076   010D48  0E8E               	movlw	-114
  6077   010D4A  CFE3 F035          	movff	plusw1,btemp+9
  6078   010D4E  5037               	movf	(btemp+11)^0,w,c
  6079   010D50  2434               	addwf	(btemp+8)^0,w,c
  6080   010D52  6EE9               	movwf	fsr0l,c
  6081   010D54  0E00               	movlw	0
  6082   010D56  2035               	addwfc	(btemp+9)^0,w,c
  6083   010D58  6EEA               	movwf	fsr0h,c
  6084   010D5A  CFDF FFEF          	movff	indf2,indf0
  6085   010D5E                     
  6086                           ;can/can.c: 1342:         }
  6087                           ;stkvar	_i @ sp[(-110)+107]
  6088   010D5E  0EFD               	movlw	-3
  6089   010D60  2AE3               	incf	plusw1,f,c
  6090   010D62                     l4538:
  6091                           
  6092                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6093                           ;stkvar	_i @ sp[(-110)+107]
  6094   010D62  50E1               	movf	fsr1l,w,c
  6095   010D64  0FFD               	addlw	-3
  6096   010D66  6ED9               	movwf	fsr2l,c
  6097   010D68  50E2               	movf	fsr1h,w,c
  6098   010D6A  6EDA               	movwf	fsr2h,c
  6099   010D6C  0EFF               	movlw	255
  6100   010D6E  22DA               	addwfc	fsr2h,f,c
  6101   010D70  0E8C               	movlw	-116
  6102   010D72  50E3               	movf	plusw1,w,c
  6103   010D74  5CDE               	subwf	postinc2,w,c
  6104   010D76  A0D8               	btfss	status,0,c
  6105   010D78  EFC0  F086         	goto	u2211
  6106   010D7C  EFC2  F086         	goto	u2210
  6107   010D80                     u2211:
  6108   010D80  EF8A  F086         	goto	l4534
  6109   010D84                     u2210:
  6110   010D84  EF10  F087         	goto	l4550
  6111   010D88                     l4540:
  6112                           
  6113                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6114                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6115   010D88  0E8F               	movlw	-113
  6116   010D8A  CFE3 F036          	movff	plusw1,btemp+10
  6117   010D8E  0E90               	movlw	-112
  6118   010D90  CFE3 F037          	movff	plusw1,btemp+11
  6119   010D94  0E09               	movlw	9
  6120   010D96  2436               	addwf	(btemp+10)^0,w,c
  6121   010D98  6ED9               	movwf	fsr2l,c
  6122   010D9A  0E00               	movlw	0
  6123   010D9C  2037               	addwfc	(btemp+11)^0,w,c
  6124   010D9E  6EDA               	movwf	fsr2h,c
  6125   010DA0  6ADE               	clrf	postinc2,c
  6126   010DA2  6ADE               	clrf	postinc2,c
  6127   010DA4  6ADE               	clrf	postinc2,c
  6128   010DA6  6ADD               	clrf	postdec2,c
  6129   010DA8                     
  6130                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6131                           ;stkvar	_i @ sp[(-110)+107]
  6132   010DA8  0EFD               	movlw	-3
  6133   010DAA  6AE3               	clrf	plusw1,c
  6134   010DAC  EFFF  F086         	goto	l4548
  6135   010DB0                     l4544:
  6136                           
  6137                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6138                           ;stkvar	_i @ sp[(-110)+107]
  6139   010DB0  0EFD               	movlw	-3
  6140   010DB2  50E3               	movf	plusw1,w,c
  6141   010DB4  6E36               	movwf	(btemp+10)^0,c
  6142   010DB6  6A37               	clrf	(btemp+11)^0,c
  6143   010DB8  0E08               	movlw	8
  6144   010DBA  2636               	addwf	(btemp+10)^0,f,c
  6145   010DBC  0E00               	movlw	0
  6146   010DBE  2237               	addwfc	(btemp+11)^0,f,c
  6147                           
  6148                           ;stkvar	_ba @ sp[(-110)+4]
  6149   010DC0  0E96               	movlw	150
  6150   010DC2  24E1               	addwf	fsr1l,w,c
  6151   010DC4  6E34               	movwf	(btemp+8)^0,c
  6152   010DC6  0EFF               	movlw	255
  6153   010DC8  20E2               	addwfc	fsr1h,w,c
  6154   010DCA  6E35               	movwf	(btemp+9)^0,c
  6155   010DCC  5036               	movf	(btemp+10)^0,w,c
  6156   010DCE  2434               	addwf	(btemp+8)^0,w,c
  6157   010DD0  6ED9               	movwf	fsr2l,c
  6158   010DD2  5037               	movf	(btemp+11)^0,w,c
  6159   010DD4  2035               	addwfc	(btemp+9)^0,w,c
  6160   010DD6  6EDA               	movwf	fsr2h,c
  6161                           
  6162                           ;stkvar	_i @ sp[(-110)+107]
  6163   010DD8  0EFD               	movlw	-3
  6164   010DDA  CFE3 F037          	movff	plusw1,btemp+11
  6165                           
  6166                           ;stkvar	_rxd @ sp[(-110)+-5]
  6167   010DDE  0E8D               	movlw	-115
  6168   010DE0  CFE3 F034          	movff	plusw1,btemp+8
  6169   010DE4  0E8E               	movlw	-114
  6170   010DE6  CFE3 F035          	movff	plusw1,btemp+9
  6171   010DEA  5037               	movf	(btemp+11)^0,w,c
  6172   010DEC  2434               	addwf	(btemp+8)^0,w,c
  6173   010DEE  6EE9               	movwf	fsr0l,c
  6174   010DF0  0E00               	movlw	0
  6175   010DF2  2035               	addwfc	(btemp+9)^0,w,c
  6176   010DF4  6EEA               	movwf	fsr0h,c
  6177   010DF6  CFDF FFEF          	movff	indf2,indf0
  6178   010DFA                     
  6179                           ;can/can.c: 1349:         }
  6180                           ;stkvar	_i @ sp[(-110)+107]
  6181   010DFA  0EFD               	movlw	-3
  6182   010DFC  2AE3               	incf	plusw1,f,c
  6183   010DFE                     l4548:
  6184                           
  6185                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6186                           ;stkvar	_i @ sp[(-110)+107]
  6187   010DFE  50E1               	movf	fsr1l,w,c
  6188   010E00  0FFD               	addlw	-3
  6189   010E02  6ED9               	movwf	fsr2l,c
  6190   010E04  50E2               	movf	fsr1h,w,c
  6191   010E06  6EDA               	movwf	fsr2h,c
  6192   010E08  0EFF               	movlw	255
  6193   010E0A  22DA               	addwfc	fsr2h,f,c
  6194   010E0C  0E8C               	movlw	-116
  6195   010E0E  50E3               	movf	plusw1,w,c
  6196   010E10  5CDE               	subwf	postinc2,w,c
  6197   010E12  A0D8               	btfss	status,0,c
  6198   010E14  EF0E  F087         	goto	u2221
  6199   010E18  EF10  F087         	goto	u2220
  6200   010E1C                     u2221:
  6201   010E1C  EFD8  F086         	goto	l4544
  6202   010E20                     u2220:
  6203   010E20                     l4550:
  6204                           
  6205                           ;stkvar	_channel @ sp[(-110)+-1]
  6206   010E20  0E91               	movlw	-111
  6207   010E22  50E3               	movf	plusw1,w,c
  6208   010E24  6EE6               	movwf	postinc1,c
  6209   010E26  ECF5  F0A1         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6210   010E2A                     l357:
  6211                           
  6212                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6213   010E2A  0E8C               	movlw	140
  6214   010E2C  26E1               	addwf	fsr1l,f,c
  6215   010E2E  0EFF               	movlw	255
  6216   010E30  22E2               	addwfc	fsr1h,f,c
  6217   010E32  0012               	return		;funcret
  6218   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6219                           	callstack 0
  6220                           
  6221 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6222 ;; Defined at:
  6223 ;;		line 1378 in file "can/can.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  channel         1  [STACK] enum E5287
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6228 ;;  a               2  [STACK] unsigned short 
  6229 ;;  spiTransferE    1  [STACK] char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1  [STACK] char 
  6232 ;; Registers used:
  6233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;Total ram usage:        0 bytes
  6244 ;; Hardware stack levels used: 1
  6245 ;; Hardware stack levels required when called: 9
  6246 ;; This function calls:
  6247 ;;		_DRV_CANFDSPI_WriteByte
  6248 ;; This function is called by:
  6249 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6250 ;; This function uses a reentrant model
  6251 ;;
  6252                           
  6253                           	psect	text13
  6254   0143EA                     __ptext13:
  6255                           	callstack 0
  6256   0143EA                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6257                           	callstack 0
  6258                           
  6259                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6260   0143EA  0E08               	movlw	8
  6261   0143EC  26E1               	addwf	fsr1l,f,c
  6262   0143EE  0E00               	movlw	0
  6263   0143F0  22E2               	addwfc	fsr1h,f,c
  6264   0143F2                     
  6265                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6266                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6267   0143F2  0EF8               	movlw	-8
  6268   0143F4  6AE3               	clrf	plusw1,c
  6269   0143F6  0EF9               	movlw	-7
  6270   0143F8  6AE3               	clrf	plusw1,c
  6271   0143FA  0EFA               	movlw	-6
  6272   0143FC  6AE3               	clrf	plusw1,c
  6273   0143FE  0EFB               	movlw	-5
  6274   014400  6AE3               	clrf	plusw1,c
  6275   014402                     
  6276                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6277                           ;stkvar	_channel @ sp[(-8)+-1]
  6278   014402  0EF7               	movlw	-9
  6279   014404  50E3               	movf	plusw1,w,c
  6280   014406  0D0C               	mullw	12
  6281   014408  0E51               	movlw	81
  6282   01440A  26F3               	addwf	243,f,c
  6283   01440C  0E00               	movlw	0
  6284   01440E  22F4               	addwfc	244,f,c
  6285                           
  6286                           ;stkvar	_a @ sp[(-8)+5]
  6287   014410  0EFD               	movlw	-3
  6288   014412  CFF3 FFE3          	movff	prodl,plusw1
  6289   014416  0EFE               	movlw	-2
  6290   014418  CFF4 FFE3          	movff	prodh,plusw1
  6291   01441C                     
  6292                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6293                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6294   01441C  0EF9               	movlw	249
  6295   01441E  24E1               	addwf	fsr1l,w,c
  6296   014420  6ED9               	movwf	fsr2l,c
  6297   014422  0EFF               	movlw	255
  6298   014424  20E2               	addwfc	fsr1h,w,c
  6299   014426  6EDA               	movwf	fsr2h,c
  6300   014428  80DF               	bsf	indf2,0,c
  6301   01442A                     
  6302                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6303                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6304   01442A  0EF9               	movlw	249
  6305   01442C  24E1               	addwf	fsr1l,w,c
  6306   01442E  6ED9               	movwf	fsr2l,c
  6307   014430  0EFF               	movlw	255
  6308   014432  20E2               	addwfc	fsr1h,w,c
  6309   014434  6EDA               	movwf	fsr2h,c
  6310   014436  50DF               	movf	indf2,w,c
  6311   014438  6EE6               	movwf	postinc1,c
  6312                           
  6313                           ;stkvar	_a @ sp[(-9)+5]
  6314   01443A  0EFC               	movlw	-4
  6315   01443C  CFE3 FFE6          	movff	plusw1,postinc1
  6316   014440  CFE3 FFE6          	movff	plusw1,postinc1
  6317   014444  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6318                           
  6319                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6320   014448  0EFF               	movlw	-1
  6321   01444A  C02C  FFE3         	movff	btemp,plusw1
  6322   01444E                     
  6323                           ;can/can.c: 1393:     return spiTransferError;
  6324                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6325   01444E  0EFF               	movlw	-1
  6326   014450  CFE3 F02C          	movff	plusw1,btemp
  6327   014454                     
  6328                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6329   014454  0EF7               	movlw	247
  6330   014456  26E1               	addwf	fsr1l,f,c
  6331   014458  0EFF               	movlw	255
  6332   01445A  22E2               	addwfc	fsr1h,f,c
  6333   01445C  0012               	return		;funcret
  6334   01445E                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6335                           	callstack 0
  6336                           
  6337 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6338 ;; Defined at:
  6339 ;;		line 356 in file "can/can.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  address         2  [STACK] unsigned short 
  6342 ;;  rxd             2  [STACK] PTR unsigned char 
  6343 ;;		 -> ba(12), ba(76), 
  6344 ;;  nBytes          2  [STACK] unsigned short 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  i               2  [STACK] unsigned short 
  6347 ;;  spiTransferS    2  [STACK] unsigned short 
  6348 ;;  spiTransferE    1  [STACK] char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1  [STACK] char 
  6351 ;; Registers used:
  6352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;Total ram usage:        0 bytes
  6363 ;; Hardware stack levels used: 1
  6364 ;; Hardware stack levels required when called: 8
  6365 ;; This function calls:
  6366 ;;		_SpiTransfer
  6367 ;; This function is called by:
  6368 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6369 ;; This function uses a reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text14
  6373   012788                     __ptext14:
  6374                           	callstack 0
  6375   012788                     _DRV_CANFDSPI_ReadByteArray:
  6376                           	callstack 0
  6377                           
  6378                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6379   012788  0E05               	movlw	5
  6380   01278A  26E1               	addwf	fsr1l,f,c
  6381   01278C  0E00               	movlw	0
  6382   01278E  22E2               	addwfc	fsr1h,f,c
  6383   012790                     
  6384                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6385                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6386   012790  0EF5               	movlw	-11
  6387   012792  50E3               	movf	plusw1,w,c
  6388   012794  0F02               	addlw	2
  6389   012796  6E36               	movwf	(btemp+10)^0,c
  6390   012798  0EF6               	movlw	-10
  6391   01279A  CFE3 F037          	movff	plusw1,btemp+11
  6392   01279E  0E00               	movlw	0
  6393   0127A0  2237               	addwfc	(btemp+11)^0,f,c
  6394                           
  6395                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6396   0127A2  0EFD               	movlw	-3
  6397   0127A4  C036  FFE3         	movff	btemp+10,plusw1
  6398   0127A8  0EFE               	movlw	-2
  6399   0127AA  C037  FFE3         	movff	btemp+11,plusw1
  6400   0127AE                     
  6401                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6402                           ;stkvar	_address @ sp[(-5)+-2]
  6403   0127AE  0EFA               	movlw	250
  6404   0127B0  24E1               	addwf	fsr1l,w,c
  6405   0127B2  6ED9               	movwf	fsr2l,c
  6406   0127B4  0EFF               	movlw	255
  6407   0127B6  20E2               	addwfc	fsr1h,w,c
  6408   0127B8  6EDA               	movwf	fsr2h,c
  6409   0127BA  50DF               	movf	indf2,w,c
  6410   0127BC  0B0F               	andlw	15
  6411   0127BE  0F30               	addlw	48
  6412   0127C0  0101               	movlb	1	; () banked
  6413   0127C2  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6414   0127C4                     
  6415                           ; BSR set to: 1
  6416                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6417                           ;stkvar	_address @ sp[(-5)+-2]
  6418   0127C4  0EF9               	movlw	-7
  6419   0127C6  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6420   0127CA                     
  6421                           ; BSR set to: 1
  6422                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6423   0127CA  0E02               	movlw	2
  6424   0127CC  6E36               	movwf	(btemp+10)^0,c
  6425   0127CE  0E00               	movlw	0
  6426   0127D0  6E37               	movwf	(btemp+11)^0,c
  6427                           
  6428                           ;stkvar	_i @ sp[(-5)+0]
  6429   0127D2  0EFB               	movlw	-5
  6430   0127D4  C036  FFE3         	movff	btemp+10,plusw1
  6431   0127D8  0EFC               	movlw	-4
  6432   0127DA  C037  FFE3         	movff	btemp+11,plusw1
  6433   0127DE  EF0D  F094         	goto	l4370
  6434   0127E2                     l4366:
  6435                           
  6436                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6437                           ;stkvar	_i @ sp[(-5)+0]
  6438   0127E2  0EFB               	movlw	-5
  6439   0127E4  CFE3 F036          	movff	plusw1,btemp+10
  6440   0127E8  0EFC               	movlw	-4
  6441   0127EA  CFE3 F037          	movff	plusw1,btemp+11
  6442   0127EE  0E00               	movlw	low _spiTransmitBuffer
  6443   0127F0  2436               	addwf	(btemp+10)^0,w,c
  6444   0127F2  6ED9               	movwf	fsr2l,c
  6445   0127F4  0E01               	movlw	high _spiTransmitBuffer
  6446   0127F6  2037               	addwfc	(btemp+11)^0,w,c
  6447   0127F8  6EDA               	movwf	fsr2h,c
  6448   0127FA  6ADF               	clrf	indf2,c
  6449   0127FC                     
  6450                           ;can/can.c: 370:     }
  6451                           ;stkvar	_i @ sp[(-5)+0]
  6452   0127FC  0EFB               	movlw	-5
  6453   0127FE  50E3               	movf	plusw1,w,c
  6454   012800  0F01               	addlw	1
  6455   012802  6E2C               	movwf	btemp^0,c
  6456   012804  0EFB               	movlw	-5
  6457   012806  C02C  FFE3         	movff	btemp,plusw1
  6458   01280A  6A2C               	clrf	btemp^0,c
  6459   01280C  0EFC               	movlw	-4
  6460   01280E  50E3               	movf	plusw1,w,c
  6461   012810  202C               	addwfc	btemp^0,w,c
  6462   012812  6E2C               	movwf	btemp^0,c
  6463   012814  0EFC               	movlw	-4
  6464   012816  C02C  FFE3         	movff	btemp,plusw1
  6465   01281A                     l4370:
  6466                           
  6467                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6468   01281A  0EFD               	movlw	-3
  6469   01281C  CFE3 F036          	movff	plusw1,btemp+10
  6470   012820  0EFE               	movlw	-2
  6471   012822  CFE3 F037          	movff	plusw1,btemp+11
  6472                           
  6473                           ;stkvar	_i @ sp[(-5)+0]
  6474   012826  0EFB               	movlw	-5
  6475   012828  CFE3 F034          	movff	plusw1,btemp+8
  6476   01282C  0EFC               	movlw	-4
  6477   01282E  CFE3 F035          	movff	plusw1,btemp+9
  6478   012832  5036               	movf	(btemp+10)^0,w,c
  6479   012834  5C34               	subwf	(btemp+8)^0,w,c
  6480   012836  5037               	movf	(btemp+11)^0,w,c
  6481   012838  5835               	subwfb	(btemp+9)^0,w,c
  6482   01283A  A0D8               	btfss	status,0,c
  6483   01283C  EF22  F094         	goto	u2021
  6484   012840  EF24  F094         	goto	u2020
  6485   012844                     u2021:
  6486   012844  EFF1  F093         	goto	l4366
  6487   012848                     u2020:
  6488   012848                     
  6489                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6490                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6491   012848  0EFD               	movlw	-3
  6492   01284A  CFE3 FFE6          	movff	plusw1,postinc1
  6493   01284E  CFE3 FFE6          	movff	plusw1,postinc1
  6494   012852  0E00               	movlw	low _spiReceiveBuffer
  6495   012854  6EE6               	movwf	postinc1,c
  6496   012856  0E02               	movlw	high _spiReceiveBuffer
  6497   012858  6EE6               	movwf	postinc1,c
  6498   01285A  0E00               	movlw	low _spiTransmitBuffer
  6499   01285C  6EE6               	movwf	postinc1,c
  6500   01285E  0E01               	movlw	high _spiTransmitBuffer
  6501   012860  6EE6               	movwf	postinc1,c
  6502   012862  ECC2  F09D         	call	_SpiTransfer	;wreg free
  6503                           
  6504                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6505   012866  0EFF               	movlw	-1
  6506   012868  C02C  FFE3         	movff	btemp,plusw1
  6507   01286C                     
  6508                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6509                           ;stkvar	_i @ sp[(-5)+0]
  6510   01286C  0EFB               	movlw	-5
  6511   01286E  6AE3               	clrf	plusw1,c
  6512   012870  0EFC               	movlw	-4
  6513   012872  6AE3               	clrf	plusw1,c
  6514   012874  EF6B  F094         	goto	l4380
  6515   012878                     l4376:
  6516                           
  6517                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6518                           ;stkvar	_i @ sp[(-5)+0]
  6519   012878  0EFB               	movlw	-5
  6520   01287A  CFE3 F036          	movff	plusw1,btemp+10
  6521   01287E  0EFC               	movlw	-4
  6522   012880  CFE3 F037          	movff	plusw1,btemp+11
  6523   012884  0E02               	movlw	low (_spiReceiveBuffer+2)
  6524   012886  2436               	addwf	(btemp+10)^0,w,c
  6525   012888  6ED9               	movwf	fsr2l,c
  6526   01288A  0E02               	movlw	high (_spiReceiveBuffer+2)
  6527   01288C  2037               	addwfc	(btemp+11)^0,w,c
  6528   01288E  6EDA               	movwf	fsr2h,c
  6529                           
  6530                           ;stkvar	_i @ sp[(-5)+0]
  6531   012890  0EFB               	movlw	-5
  6532   012892  CFE3 F036          	movff	plusw1,btemp+10
  6533   012896  0EFC               	movlw	-4
  6534   012898  CFE3 F037          	movff	plusw1,btemp+11
  6535                           
  6536                           ;stkvar	_rxd @ sp[(-5)+-4]
  6537   01289C  0EF7               	movlw	-9
  6538   01289E  CFE3 F034          	movff	plusw1,btemp+8
  6539   0128A2  0EF8               	movlw	-8
  6540   0128A4  CFE3 F035          	movff	plusw1,btemp+9
  6541   0128A8  5036               	movf	(btemp+10)^0,w,c
  6542   0128AA  2434               	addwf	(btemp+8)^0,w,c
  6543   0128AC  6EE9               	movwf	fsr0l,c
  6544   0128AE  5037               	movf	(btemp+11)^0,w,c
  6545   0128B0  2035               	addwfc	(btemp+9)^0,w,c
  6546   0128B2  6EEA               	movwf	fsr0h,c
  6547   0128B4  CFDF FFEF          	movff	indf2,indf0
  6548   0128B8                     
  6549                           ;can/can.c: 377:     }
  6550                           ;stkvar	_i @ sp[(-5)+0]
  6551   0128B8  0EFB               	movlw	-5
  6552   0128BA  50E3               	movf	plusw1,w,c
  6553   0128BC  0F01               	addlw	1
  6554   0128BE  6E2C               	movwf	btemp^0,c
  6555   0128C0  0EFB               	movlw	-5
  6556   0128C2  C02C  FFE3         	movff	btemp,plusw1
  6557   0128C6  6A2C               	clrf	btemp^0,c
  6558   0128C8  0EFC               	movlw	-4
  6559   0128CA  50E3               	movf	plusw1,w,c
  6560   0128CC  202C               	addwfc	btemp^0,w,c
  6561   0128CE  6E2C               	movwf	btemp^0,c
  6562   0128D0  0EFC               	movlw	-4
  6563   0128D2  C02C  FFE3         	movff	btemp,plusw1
  6564   0128D6                     l4380:
  6565                           
  6566                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6567   0128D6  0EF5               	movlw	-11
  6568   0128D8  CFE3 F036          	movff	plusw1,btemp+10
  6569   0128DC  0EF6               	movlw	-10
  6570   0128DE  CFE3 F037          	movff	plusw1,btemp+11
  6571                           
  6572                           ;stkvar	_i @ sp[(-5)+0]
  6573   0128E2  0EFB               	movlw	-5
  6574   0128E4  CFE3 F034          	movff	plusw1,btemp+8
  6575   0128E8  0EFC               	movlw	-4
  6576   0128EA  CFE3 F035          	movff	plusw1,btemp+9
  6577   0128EE  5036               	movf	(btemp+10)^0,w,c
  6578   0128F0  5C34               	subwf	(btemp+8)^0,w,c
  6579   0128F2  5037               	movf	(btemp+11)^0,w,c
  6580   0128F4  5835               	subwfb	(btemp+9)^0,w,c
  6581   0128F6  A0D8               	btfss	status,0,c
  6582   0128F8  EF80  F094         	goto	u2031
  6583   0128FC  EF82  F094         	goto	u2030
  6584   012900                     u2031:
  6585   012900  EF3C  F094         	goto	l4376
  6586   012904                     u2030:
  6587   012904                     
  6588                           ;can/can.c: 379:     return spiTransferError;
  6589                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6590   012904  0EFF               	movlw	-1
  6591   012906  CFE3 F02C          	movff	plusw1,btemp
  6592   01290A                     
  6593                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6594   01290A  0EF5               	movlw	245
  6595   01290C  26E1               	addwf	fsr1l,f,c
  6596   01290E  0EFF               	movlw	255
  6597   012910  22E2               	addwfc	fsr1h,f,c
  6598   012912  0012               	return		;funcret
  6599   012914                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6600                           	callstack 0
  6601                           
  6602 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6603 ;; Defined at:
  6604 ;;		line 1928 in file "can/can.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  channel         1  [STACK] enum E5287
  6607 ;;  flags           2  [STACK] PTR enum E5588
  6608 ;;		 -> rxFlags(1), 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6611 ;;  a               2  [STACK] unsigned short 
  6612 ;;  spiTransferE    1  [STACK] char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1  [STACK] char 
  6615 ;; Registers used:
  6616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:        0 bytes
  6627 ;; Hardware stack levels used: 1
  6628 ;; Hardware stack levels required when called: 9
  6629 ;; This function calls:
  6630 ;;		_DRV_CANFDSPI_ReadByte
  6631 ;; This function is called by:
  6632 ;;		_CanReceive
  6633 ;; This function uses a reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text15
  6637   014070                     __ptext15:
  6638                           	callstack 0
  6639   014070                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6640                           	callstack 0
  6641                           
  6642                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6643   014070  0E07               	movlw	7
  6644   014072  26E1               	addwf	fsr1l,f,c
  6645   014074  0E00               	movlw	0
  6646   014076  22E2               	addwfc	fsr1h,f,c
  6647   014078                     
  6648                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6649                           ;stkvar	_channel @ sp[(-7)+-1]
  6650   014078  0EF8               	movlw	-8
  6651   01407A  50E3               	movf	plusw1,w,c
  6652   01407C  A4D8               	btfss	status,2,c
  6653   01407E  EF43  F0A0         	goto	u2091
  6654   014082  EF45  F0A0         	goto	u2090
  6655   014086                     u2091:
  6656   014086  EF47  F0A0         	goto	l4452
  6657   01408A                     u2090:
  6658   01408A  EF85  F0A0         	goto	l482
  6659   01408E                     l4452:
  6660                           
  6661                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6662                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6663   01408E  0EF9               	movlw	-7
  6664   014090  6AE3               	clrf	plusw1,c
  6665   014092  0EFA               	movlw	-6
  6666   014094  6AE3               	clrf	plusw1,c
  6667   014096  0EFB               	movlw	-5
  6668   014098  6AE3               	clrf	plusw1,c
  6669   01409A  0EFC               	movlw	-4
  6670   01409C  6AE3               	clrf	plusw1,c
  6671   01409E                     
  6672                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6673                           ;stkvar	_channel @ sp[(-7)+-1]
  6674   01409E  0EF8               	movlw	-8
  6675   0140A0  50E3               	movf	plusw1,w,c
  6676   0140A2  0D0C               	mullw	12
  6677   0140A4  0E54               	movlw	84
  6678   0140A6  26F3               	addwf	243,f,c
  6679   0140A8  0E00               	movlw	0
  6680   0140AA  22F4               	addwfc	244,f,c
  6681                           
  6682                           ;stkvar	_a @ sp[(-7)+4]
  6683   0140AC  0EFD               	movlw	-3
  6684   0140AE  CFF3 FFE3          	movff	prodl,plusw1
  6685   0140B2  0EFE               	movlw	-2
  6686   0140B4  CFF4 FFE3          	movff	prodh,plusw1
  6687   0140B8                     
  6688                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6689                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6690   0140B8  0EF9               	movlw	249
  6691   0140BA  24E1               	addwf	fsr1l,w,c
  6692   0140BC  6E2C               	movwf	btemp^0,c
  6693   0140BE  0EFF               	movlw	255
  6694   0140C0  20E2               	addwfc	fsr1h,w,c
  6695   0140C2  6E2D               	movwf	(btemp+1)^0,c
  6696   0140C4  C02C  FFE6         	movff	btemp,postinc1
  6697   0140C8  C02D  FFE6         	movff	btemp+1,postinc1
  6698                           
  6699                           ;stkvar	_a @ sp[(-9)+4]
  6700   0140CC  0EFB               	movlw	-5
  6701   0140CE  CFE3 FFE6          	movff	plusw1,postinc1
  6702   0140D2  CFE3 FFE6          	movff	plusw1,postinc1
  6703   0140D6  ECC8  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6704                           
  6705                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6706   0140DA  0EFF               	movlw	-1
  6707   0140DC  C02C  FFE3         	movff	btemp,plusw1
  6708   0140E0                     
  6709                           ;can/can.c: 1942:     if (spiTransferError) {
  6710                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6711   0140E0  0EFF               	movlw	-1
  6712   0140E2  50E3               	movf	plusw1,w,c
  6713   0140E4  B4D8               	btfsc	status,2,c
  6714   0140E6  EF77  F0A0         	goto	u2101
  6715   0140EA  EF79  F0A0         	goto	u2100
  6716   0140EE                     u2101:
  6717   0140EE  EF7B  F0A0         	goto	l4462
  6718   0140F2                     u2100:
  6719   0140F2  EF85  F0A0         	goto	l482
  6720   0140F6                     l4462:
  6721                           
  6722                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6723                           ;stkvar	_flags @ sp[(-7)+-3]
  6724   0140F6  0EF6               	movlw	-10
  6725   0140F8  CFE3 FFD9          	movff	plusw1,fsr2l
  6726   0140FC  0EF7               	movlw	-9
  6727   0140FE  CFE3 FFDA          	movff	plusw1,fsr2h
  6728                           
  6729                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6730   014102  0EF9               	movlw	-7
  6731   014104  50E3               	movf	plusw1,w,c
  6732   014106  0B0F               	andlw	15
  6733   014108  6EDF               	movwf	indf2,c
  6734   01410A                     l482:
  6735                           
  6736                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6737   01410A  0EF6               	movlw	246
  6738   01410C  26E1               	addwf	fsr1l,f,c
  6739   01410E  0EFF               	movlw	255
  6740   014110  22E2               	addwfc	fsr1h,f,c
  6741   014112  0012               	return		;funcret
  6742   014114                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6743                           	callstack 0
  6744                           
  6745 ;; *************** function _XF_init *****************
  6746 ;; Defined at:
  6747 ;;		line 80 in file "xf/xf.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  i               2  [STACK] int 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1  [STACK] void 
  6754 ;; Registers used:
  6755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;Total ram usage:        0 bytes
  6766 ;; Hardware stack levels used: 1
  6767 ;; Hardware stack levels required when called: 8
  6768 ;; This function calls:
  6769 ;;		_Event_init
  6770 ;; This function is called by:
  6771 ;;		_main
  6772 ;; This function uses a reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text16
  6776   012C16                     __ptext16:
  6777                           	callstack 0
  6778   012C16                     _XF_init:
  6779                           	callstack 0
  6780                           
  6781                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6782   012C16  52E6               	movf	postinc1,f,c
  6783   012C18  52E6               	movf	postinc1,f,c
  6784   012C1A                     
  6785                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6786                           ;stkvar	_i @ sp[(-2)+0]
  6787   012C1A  0EFE               	movlw	-2
  6788   012C1C  6AE3               	clrf	plusw1,c
  6789   012C1E  0EFF               	movlw	-1
  6790   012C20  6AE3               	clrf	plusw1,c
  6791   012C22                     l5282:
  6792                           
  6793                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6794                           ;stkvar	_i @ sp[(-2)+0]
  6795   012C22  0EFE               	movlw	-2
  6796   012C24  CFE3 F036          	movff	plusw1,btemp+10
  6797   012C28  0EFF               	movlw	-1
  6798   012C2A  CFE3 F037          	movff	plusw1,btemp+11
  6799   012C2E  0E06               	movlw	6
  6800   012C30  0236               	mulwf	(btemp+10)^0,c
  6801   012C32  CFF3 F034          	movff	prodl,btemp+8
  6802   012C36  CFF4 F035          	movff	prodh,btemp+9
  6803   012C3A  0237               	mulwf	(btemp+11)^0,c
  6804   012C3C  50F3               	movf	prodl,w,c
  6805   012C3E  2635               	addwf	(btemp+9)^0,f,c
  6806   012C40  0E28               	movlw	low (_theXF+96)
  6807   012C42  2434               	addwf	(btemp+8)^0,w,c
  6808   012C44  6E36               	movwf	(btemp+10)^0,c
  6809   012C46  0E03               	movlw	high (_theXF+96)
  6810   012C48  2035               	addwfc	(btemp+9)^0,w,c
  6811   012C4A  6E37               	movwf	(btemp+11)^0,c
  6812   012C4C  C036  FFE6         	movff	btemp+10,postinc1
  6813   012C50  C037  FFE6         	movff	btemp+11,postinc1
  6814   012C54  EC80  F0A3         	call	_Event_init	;wreg free
  6815   012C58                     
  6816                           ;xf/xf.c: 86:     }
  6817                           ;stkvar	_i @ sp[(-2)+0]
  6818   012C58  0EFE               	movlw	-2
  6819   012C5A  50E3               	movf	plusw1,w,c
  6820   012C5C  0F01               	addlw	1
  6821   012C5E  6E2C               	movwf	btemp^0,c
  6822   012C60  0EFE               	movlw	-2
  6823   012C62  C02C  FFE3         	movff	btemp,plusw1
  6824   012C66  6A2C               	clrf	btemp^0,c
  6825   012C68  0EFF               	movlw	-1
  6826   012C6A  50E3               	movf	plusw1,w,c
  6827   012C6C  202C               	addwfc	btemp^0,w,c
  6828   012C6E  6E2C               	movwf	btemp^0,c
  6829   012C70  0EFF               	movlw	-1
  6830   012C72  C02C  FFE3         	movff	btemp,plusw1
  6831   012C76                     
  6832                           ;stkvar	_i @ sp[(-2)+0]
  6833   012C76  0EFF               	movlw	-1
  6834   012C78  BEE3               	btfsc	plusw1,7,c
  6835   012C7A  EF4C  F096         	goto	u2981
  6836   012C7E  0EFF               	movlw	-1
  6837   012C80  50E3               	movf	plusw1,w,c
  6838   012C82  E10C               	bnz	u2980
  6839   012C84  0EFE               	movlw	-2
  6840   012C86  CFE3 F02C          	movff	plusw1,btemp
  6841   012C8A  0E1E               	movlw	30
  6842   012C8C  5E2C               	subwf	btemp^0,f,c
  6843   012C8E  A0D8               	btfss	status,0,c
  6844   012C90  EF4C  F096         	goto	u2981
  6845   012C94  EF4E  F096         	goto	u2980
  6846   012C98                     u2981:
  6847   012C98  EF11  F096         	goto	l5282
  6848   012C9C                     u2980:
  6849   012C9C                     
  6850                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6851                           ;stkvar	_i @ sp[(-2)+0]
  6852   012C9C  0EFE               	movlw	-2
  6853   012C9E  6AE3               	clrf	plusw1,c
  6854   012CA0  0EFF               	movlw	-1
  6855   012CA2  6AE3               	clrf	plusw1,c
  6856   012CA4                     l5294:
  6857                           
  6858                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6859                           ;stkvar	_i @ sp[(-2)+0]
  6860   012CA4  0EFE               	movlw	-2
  6861   012CA6  CFE3 F036          	movff	plusw1,btemp+10
  6862   012CAA  0EFF               	movlw	-1
  6863   012CAC  CFE3 F037          	movff	plusw1,btemp+11
  6864   012CB0  90D8               	bcf	status,0,c
  6865   012CB2  3636               	rlcf	(btemp+10)^0,f,c
  6866   012CB4  3637               	rlcf	(btemp+11)^0,f,c
  6867   012CB6  90D8               	bcf	status,0,c
  6868   012CB8  3636               	rlcf	(btemp+10)^0,f,c
  6869   012CBA  3637               	rlcf	(btemp+11)^0,f,c
  6870   012CBC  90D8               	bcf	status,0,c
  6871   012CBE  3636               	rlcf	(btemp+10)^0,f,c
  6872   012CC0  3637               	rlcf	(btemp+11)^0,f,c
  6873   012CC2  0EC8               	movlw	low _theXF
  6874   012CC4  2436               	addwf	(btemp+10)^0,w,c
  6875   012CC6  6ED9               	movwf	fsr2l,c
  6876   012CC8  0E02               	movlw	high _theXF
  6877   012CCA  2037               	addwfc	(btemp+11)^0,w,c
  6878   012CCC  6EDA               	movwf	fsr2h,c
  6879   012CCE  6ADE               	clrf	postinc2,c
  6880   012CD0  6ADD               	clrf	postdec2,c
  6881   012CD2                     
  6882                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6883                           ;stkvar	_i @ sp[(-2)+0]
  6884   012CD2  0EFE               	movlw	-2
  6885   012CD4  CFE3 F036          	movff	plusw1,btemp+10
  6886   012CD8  0EFF               	movlw	-1
  6887   012CDA  CFE3 F037          	movff	plusw1,btemp+11
  6888   012CDE  90D8               	bcf	status,0,c
  6889   012CE0  3636               	rlcf	(btemp+10)^0,f,c
  6890   012CE2  3637               	rlcf	(btemp+11)^0,f,c
  6891   012CE4  90D8               	bcf	status,0,c
  6892   012CE6  3636               	rlcf	(btemp+10)^0,f,c
  6893   012CE8  3637               	rlcf	(btemp+11)^0,f,c
  6894   012CEA  90D8               	bcf	status,0,c
  6895   012CEC  3636               	rlcf	(btemp+10)^0,f,c
  6896   012CEE  3637               	rlcf	(btemp+11)^0,f,c
  6897   012CF0  0ECA               	movlw	low (_theXF+2)
  6898   012CF2  2436               	addwf	(btemp+10)^0,w,c
  6899   012CF4  6E34               	movwf	(btemp+8)^0,c
  6900   012CF6  0E02               	movlw	high (_theXF+2)
  6901   012CF8  2037               	addwfc	(btemp+11)^0,w,c
  6902   012CFA  6E35               	movwf	(btemp+9)^0,c
  6903   012CFC  C034  FFE6         	movff	btemp+8,postinc1
  6904   012D00  C035  FFE6         	movff	btemp+9,postinc1
  6905   012D04  EC80  F0A3         	call	_Event_init	;wreg free
  6906   012D08                     
  6907                           ;xf/xf.c: 92:     }
  6908                           ;stkvar	_i @ sp[(-2)+0]
  6909   012D08  0EFE               	movlw	-2
  6910   012D0A  50E3               	movf	plusw1,w,c
  6911   012D0C  0F01               	addlw	1
  6912   012D0E  6E2C               	movwf	btemp^0,c
  6913   012D10  0EFE               	movlw	-2
  6914   012D12  C02C  FFE3         	movff	btemp,plusw1
  6915   012D16  6A2C               	clrf	btemp^0,c
  6916   012D18  0EFF               	movlw	-1
  6917   012D1A  50E3               	movf	plusw1,w,c
  6918   012D1C  202C               	addwfc	btemp^0,w,c
  6919   012D1E  6E2C               	movwf	btemp^0,c
  6920   012D20  0EFF               	movlw	-1
  6921   012D22  C02C  FFE3         	movff	btemp,plusw1
  6922   012D26                     
  6923                           ;stkvar	_i @ sp[(-2)+0]
  6924   012D26  0EFF               	movlw	-1
  6925   012D28  BEE3               	btfsc	plusw1,7,c
  6926   012D2A  EFA4  F096         	goto	u2991
  6927   012D2E  0EFF               	movlw	-1
  6928   012D30  50E3               	movf	plusw1,w,c
  6929   012D32  E10C               	bnz	u2990
  6930   012D34  0EFE               	movlw	-2
  6931   012D36  CFE3 F02C          	movff	plusw1,btemp
  6932   012D3A  0E0C               	movlw	12
  6933   012D3C  5E2C               	subwf	btemp^0,f,c
  6934   012D3E  A0D8               	btfss	status,0,c
  6935   012D40  EFA4  F096         	goto	u2991
  6936   012D44  EFA6  F096         	goto	u2990
  6937   012D48                     u2991:
  6938   012D48  EF52  F096         	goto	l5294
  6939   012D4C                     u2990:
  6940   012D4C                     
  6941                           ;xf/xf.c: 93:     theXF.in = 0;
  6942   012D4C  0E00               	movlw	0
  6943   012D4E  CFE8 F3DC          	movff	wreg,_theXF+276
  6944                           
  6945                           ;xf/xf.c: 94:     theXF.out = 0;
  6946   012D52  0E00               	movlw	0
  6947   012D54  CFE8 F3DD          	movff	wreg,_theXF+277
  6948                           
  6949                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  6950   012D58  0E00               	movlw	0
  6951   012D5A  CFE8 F3DE          	movff	wreg,_theXF+278
  6952                           
  6953                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  6954   012D5E  0E00               	movlw	0
  6955   012D60  CFE8 F3DF          	movff	wreg,_theXF+279
  6956   012D64                     
  6957                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  6958   012D64  52E5               	movf	postdec1,f,c
  6959   012D66  52E5               	movf	postdec1,f,c
  6960   012D68  0012               	return		;funcret
  6961   012D6A                     __end_of_XF_init:
  6962                           	callstack 0
  6963                           
  6964 ;; *************** function _Event_init *****************
  6965 ;; Defined at:
  6966 ;;		line 4 in file "xf/event.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  me              2  [STACK] PTR struct Event_
  6969 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1  [STACK] void 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used: 1
  6987 ;; Hardware stack levels required when called: 7
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_XF_init
  6992 ;;		_XF_unscheduleTimer
  6993 ;;		_XF_post
  6994 ;; This function uses a reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text17
  6998   014700                     __ptext17:
  6999                           	callstack 0
  7000   014700                     _Event_init:
  7001                           	callstack 10
  7002   014700                     
  7003                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  7004                           ;stkvar	_me @ sp[(0)+-2]
  7005   014700  0EFE               	movlw	-2
  7006   014702  CFE3 FFD9          	movff	plusw1,fsr2l
  7007   014706  0EFF               	movlw	-1
  7008   014708  CFE3 FFDA          	movff	plusw1,fsr2h
  7009   01470C  6ADF               	clrf	indf2,c
  7010   01470E                     
  7011                           ;xf/event.c: 7:     me->delay = 0;
  7012                           ;stkvar	_me @ sp[(0)+-2]
  7013   01470E  0EFE               	movlw	-2
  7014   014710  CFE3 F036          	movff	plusw1,btemp+10
  7015   014714  0EFF               	movlw	-1
  7016   014716  CFE3 F037          	movff	plusw1,btemp+11
  7017   01471A  0E04               	movlw	4
  7018   01471C  2436               	addwf	(btemp+10)^0,w,c
  7019   01471E  6ED9               	movwf	fsr2l,c
  7020   014720  0E00               	movlw	0
  7021   014722  2037               	addwfc	(btemp+11)^0,w,c
  7022   014724  6EDA               	movwf	fsr2h,c
  7023   014726  6ADE               	clrf	postinc2,c
  7024   014728  6ADD               	clrf	postdec2,c
  7025   01472A                     
  7026                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  7027                           ;stkvar	_me @ sp[(0)+-2]
  7028   01472A  0EFE               	movlw	-2
  7029   01472C  CFE3 F036          	movff	plusw1,btemp+10
  7030   014730  0EFF               	movlw	-1
  7031   014732  CFE3 F037          	movff	plusw1,btemp+11
  7032   014736  0E01               	movlw	1
  7033   014738  2436               	addwf	(btemp+10)^0,w,c
  7034   01473A  6ED9               	movwf	fsr2l,c
  7035   01473C  0E00               	movlw	0
  7036   01473E  2037               	addwfc	(btemp+11)^0,w,c
  7037   014740  6EDA               	movwf	fsr2h,c
  7038   014742  6ADE               	clrf	postinc2,c
  7039   014744  6ADE               	clrf	postinc2,c
  7040   014746  6ADD               	clrf	postdec2,c
  7041   014748                     
  7042                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  7043   014748  52E5               	movf	postdec1,f,c
  7044   01474A  52E5               	movf	postdec1,f,c
  7045   01474C  0012               	return		;funcret
  7046   01474E                     __end_of_Event_init:
  7047                           	callstack 0
  7048                           
  7049 ;; *************** function _XF_executeOnce *****************
  7050 ;; Defined at:
  7051 ;;		line 290 in file "xf/xf.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  ev              6  [STACK] struct Event_
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1  [STACK] void 
  7058 ;; Registers used:
  7059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;Total ram usage:        0 bytes
  7070 ;; Hardware stack levels used: 1
  7071 ;; Hardware stack levels required when called: 14
  7072 ;; This function calls:
  7073 ;;		_XF_popEvent
  7074 ;;		_lightControl_Process
  7075 ;;		_motorControl_Process
  7076 ;; This function is called by:
  7077 ;;		_main
  7078 ;; This function uses a reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text18
  7082   0142D4                     __ptext18:
  7083                           	callstack 0
  7084   0142D4                     _XF_executeOnce:
  7085                           	callstack 0
  7086                           
  7087                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7088   0142D4  0E06               	movlw	6
  7089   0142D6  26E1               	addwf	fsr1l,f,c
  7090   0142D8  0E00               	movlw	0
  7091   0142DA  22E2               	addwfc	fsr1h,f,c
  7092   0142DC                     
  7093                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7094   0142DC  0E00               	movlw	0
  7095   0142DE  6EE6               	movwf	postinc1,c
  7096   0142E0  ECF7  F09C         	call	_XF_popEvent	;wreg free
  7097                           
  7098                           ;stkvar	_ev @ sp[(-12)+0]
  7099   0142E4  0EFA               	movlw	250
  7100   0142E6  24E1               	addwf	fsr1l,w,c
  7101   0142E8  6ED9               	movwf	fsr2l,c
  7102   0142EA  0EFF               	movlw	255
  7103   0142EC  20E2               	addwfc	fsr1h,w,c
  7104   0142EE  6EDA               	movwf	fsr2h,c
  7105   0142F0  0E06               	movlw	6
  7106   0142F2  6E2C               	movwf	btemp^0,c
  7107   0142F4                     uf300999:
  7108   0142F4  50DD               	movf	postdec2,w,c
  7109   0142F6  52E5               	movf	postdec1,f,c
  7110   0142F8  50E7               	movf	indf1,w,c
  7111   0142FA  6EDF               	movwf	indf2,c
  7112   0142FC  2E2C               	decfsz	btemp^0,f,c
  7113   0142FE  D7FA               	bra	uf300999
  7114   014300                     
  7115                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7116                           ;stkvar	_ev @ sp[(-6)+0]
  7117   014300  0EFB               	movlw	251
  7118   014302  24E1               	addwf	fsr1l,w,c
  7119   014304  6ED9               	movwf	fsr2l,c
  7120   014306  0EFF               	movlw	255
  7121   014308  20E2               	addwfc	fsr1h,w,c
  7122   01430A  6EDA               	movwf	fsr2h,c
  7123   01430C  50DE               	movf	postinc2,w,c
  7124   01430E  10DE               	iorwf	postinc2,w,c
  7125   014310  10DE               	iorwf	postinc2,w,c
  7126   014312  B4D8               	btfsc	status,2,c
  7127   014314  EF8E  F0A1         	goto	u3011
  7128   014318  EF90  F0A1         	goto	u3010
  7129   01431C                     u3011:
  7130   01431C  EFAD  F0A1         	goto	l1261
  7131   014320                     u3010:
  7132   014320                     
  7133                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7134                           ;stkvar	_ev @ sp[(-6)+0]
  7135   014320  0EFA               	movlw	250
  7136   014322  24E1               	addwf	fsr1l,w,c
  7137   014324  6E2C               	movwf	btemp^0,c
  7138   014326  0EFF               	movlw	255
  7139   014328  20E2               	addwfc	fsr1h,w,c
  7140   01432A  6E2D               	movwf	(btemp+1)^0,c
  7141   01432C  C02C  FFE6         	movff	btemp,postinc1
  7142   014330  C02D  FFE6         	movff	btemp+1,postinc1
  7143                           
  7144                           ;stkvar	_ev @ sp[(-8)+0]
  7145   014334  0EF9               	movlw	249
  7146   014336  24E1               	addwf	fsr1l,w,c
  7147   014338  6ED9               	movwf	fsr2l,c
  7148   01433A  0EFF               	movlw	255
  7149   01433C  20E2               	addwfc	fsr1h,w,c
  7150   01433E  6EDA               	movwf	fsr2h,c
  7151   014340  D802               	call	u3028
  7152   014342  EFAD  F0A1         	goto	u3029
  7153   014346                     u3028:
  7154   014346  0005               	push	
  7155   014348  6EFA               	movwf	pclath,c
  7156   01434A  50DE               	movf	postinc2,w,c
  7157   01434C  6EFD               	movwf	tosl,c
  7158   01434E  50DE               	movf	postinc2,w,c
  7159   014350  6EFE               	movwf	tosh,c
  7160   014352  50DE               	movf	postinc2,w,c
  7161   014354  6EFF               	movwf	tosu,c
  7162   014356  50FA               	movf	pclath,w,c
  7163   014358  0012               	return		;indir
  7164   01435A                     u3029:
  7165   01435A                     l1261:
  7166                           
  7167                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7168   01435A  0EFA               	movlw	250
  7169   01435C  26E1               	addwf	fsr1l,f,c
  7170   01435E  0EFF               	movlw	255
  7171   014360  22E2               	addwfc	fsr1h,f,c
  7172   014362  0012               	return		;funcret
  7173   014364                     __end_of_XF_executeOnce:
  7174                           	callstack 0
  7175                           
  7176 ;; *************** function _lightControl_Process *****************
  7177 ;; Defined at:
  7178 ;;		line 137 in file "carFunctions.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  ev              2  [STACK] PTR struct Event_
  7181 ;;		 -> ev(6), 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1  [STACK] _Bool 
  7186 ;; Registers used:
  7187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used: 1
  7199 ;; Hardware stack levels required when called: 13
  7200 ;; This function calls:
  7201 ;;		_lightContol_BackLight
  7202 ;;		_lightContol_FrontLight
  7203 ;; This function is called by:
  7204 ;;		_main
  7205 ;;		_updateCarState
  7206 ;;		_XF_executeOnce
  7207 ;; This function uses a reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text19
  7211   012446                     __ptext19:
  7212                           	callstack 0
  7213   012446                     _lightControl_Process:
  7214                           	callstack 16
  7215   012446                     
  7216                           ;carFunctions.c: 137:  _Bool lightControl_Process(Event* ev);carFunctions.c: 138:  {;car
      +                          Functions.c: 147:      static LightState state = INIT;;carFunctions.c: 148:      static 
      +                          LightState oldState = INIT;;carFunctions.c: 149:      switch(state)
  7217   012446  EF91  F092         	goto	l5166
  7218   01244A                     l5140:
  7219                           
  7220                           ;carFunctions.c: 152:              if(ev->id == E_INIT){
  7221                           ;stkvar	_ev @ sp[(0)+-2]
  7222   01244A  0EFE               	movlw	-2
  7223   01244C  CFE3 FFD9          	movff	plusw1,fsr2l
  7224   012450  0EFF               	movlw	-1
  7225   012452  CFE3 FFDA          	movff	plusw1,fsr2h
  7226   012456  50DF               	movf	indf2,w,c
  7227   012458  06E8               	decf	wreg,f,c
  7228   01245A  A4D8               	btfss	status,2,c
  7229   01245C  EF32  F092         	goto	u2891
  7230   012460  EF34  F092         	goto	u2890
  7231   012464                     u2891:
  7232   012464  EFAE  F092         	goto	l5168
  7233   012468                     u2890:
  7234   012468                     l5142:
  7235                           
  7236                           ;carFunctions.c: 153:                  state = OFF;
  7237   012468  0E01               	movlw	1
  7238   01246A  6E25               	movwf	lightControl_Process@state^0,c
  7239   01246C  EFAE  F092         	goto	l5168
  7240   012470                     l5144:
  7241                           
  7242                           ;carFunctions.c: 157:              if(ev->id == E_CONTACT_ON)
  7243                           ;stkvar	_ev @ sp[(0)+-2]
  7244   012470  0EFE               	movlw	-2
  7245   012472  CFE3 FFD9          	movff	plusw1,fsr2l
  7246   012476  0EFF               	movlw	-1
  7247   012478  CFE3 FFDA          	movff	plusw1,fsr2h
  7248   01247C  50DF               	movf	indf2,w,c
  7249   01247E  0A03               	xorlw	3
  7250   012480  A4D8               	btfss	status,2,c
  7251   012482  EF45  F092         	goto	u2901
  7252   012486  EF47  F092         	goto	u2900
  7253   01248A                     u2901:
  7254   01248A  EFAE  F092         	goto	l5168
  7255   01248E                     u2900:
  7256   01248E                     l5146:
  7257                           
  7258                           ;carFunctions.c: 158:              {;carFunctions.c: 159:                  state = CRUIS
      +                          E;
  7259   01248E  0E02               	movlw	2
  7260   012490  6E25               	movwf	lightControl_Process@state^0,c
  7261   012492  EFAE  F092         	goto	l5168
  7262   012496                     l5148:
  7263                           
  7264                           ;carFunctions.c: 164:              if(ev->id == E_CONTACT_OFF)
  7265                           ;stkvar	_ev @ sp[(0)+-2]
  7266   012496  0EFE               	movlw	-2
  7267   012498  CFE3 FFD9          	movff	plusw1,fsr2l
  7268   01249C  0EFF               	movlw	-1
  7269   01249E  CFE3 FFDA          	movff	plusw1,fsr2h
  7270   0124A2  50DF               	movf	indf2,w,c
  7271   0124A4  0A02               	xorlw	2
  7272   0124A6  A4D8               	btfss	status,2,c
  7273   0124A8  EF58  F092         	goto	u2911
  7274   0124AC  EF5A  F092         	goto	u2910
  7275   0124B0                     u2911:
  7276   0124B0  EF5C  F092         	goto	l5152
  7277   0124B4                     u2910:
  7278   0124B4  EF34  F092         	goto	l5142
  7279   0124B8                     l5152:
  7280                           
  7281                           ;stkvar	_ev @ sp[(0)+-2]
  7282   0124B8  0EFE               	movlw	-2
  7283   0124BA  CFE3 FFD9          	movff	plusw1,fsr2l
  7284   0124BE  0EFF               	movlw	-1
  7285   0124C0  CFE3 FFDA          	movff	plusw1,fsr2h
  7286   0124C4  50DF               	movf	indf2,w,c
  7287   0124C6  0A04               	xorlw	4
  7288   0124C8  A4D8               	btfss	status,2,c
  7289   0124CA  EF69  F092         	goto	u2921
  7290   0124CE  EF6B  F092         	goto	u2920
  7291   0124D2                     u2921:
  7292   0124D2  EFAE  F092         	goto	l5168
  7293   0124D6                     u2920:
  7294   0124D6                     
  7295                           ;carFunctions.c: 170:              {;carFunctions.c: 171:                  state = BRAKE
      +                          ;
  7296   0124D6  0E03               	movlw	3
  7297   0124D8  6E25               	movwf	lightControl_Process@state^0,c
  7298   0124DA  EFAE  F092         	goto	l5168
  7299   0124DE                     l5156:
  7300                           
  7301                           ;carFunctions.c: 175:              if(ev->id == E_CONTACT_OFF)
  7302                           ;stkvar	_ev @ sp[(0)+-2]
  7303   0124DE  0EFE               	movlw	-2
  7304   0124E0  CFE3 FFD9          	movff	plusw1,fsr2l
  7305   0124E4  0EFF               	movlw	-1
  7306   0124E6  CFE3 FFDA          	movff	plusw1,fsr2h
  7307   0124EA  50DF               	movf	indf2,w,c
  7308   0124EC  0A02               	xorlw	2
  7309   0124EE  A4D8               	btfss	status,2,c
  7310   0124F0  EF7C  F092         	goto	u2931
  7311   0124F4  EF7E  F092         	goto	u2930
  7312   0124F8                     u2931:
  7313   0124F8  EF80  F092         	goto	l5160
  7314   0124FC                     u2930:
  7315   0124FC  EF34  F092         	goto	l5142
  7316   012500                     l5160:
  7317                           
  7318                           ;stkvar	_ev @ sp[(0)+-2]
  7319   012500  0EFE               	movlw	-2
  7320   012502  CFE3 FFD9          	movff	plusw1,fsr2l
  7321   012506  0EFF               	movlw	-1
  7322   012508  CFE3 FFDA          	movff	plusw1,fsr2h
  7323   01250C  50DF               	movf	indf2,w,c
  7324   01250E  0A0A               	xorlw	10
  7325   012510  A4D8               	btfss	status,2,c
  7326   012512  EF8D  F092         	goto	u2941
  7327   012516  EF8F  F092         	goto	u2940
  7328   01251A                     u2941:
  7329   01251A  EFAE  F092         	goto	l5168
  7330   01251E                     u2940:
  7331   01251E  EF47  F092         	goto	l5146
  7332   012522                     l5166:
  7333   012522  5025               	movf	lightControl_Process@state^0,w,c
  7334   012524  6E36               	movwf	(btemp+10)^0,c
  7335   012526  6A37               	clrf	(btemp+11)^0,c
  7336                           
  7337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7338                           ; Switch size 1, requested type "simple"
  7339                           ; Number of cases is 1, Range of values is 0 to 0
  7340                           ; switch strategies available:
  7341                           ; Name         Instructions Cycles
  7342                           ; simple_byte            4     3 (average)
  7343                           ;	Chosen strategy is simple_byte
  7344   012528  5037               	movf	(btemp+11)^0,w,c
  7345   01252A  0A00               	xorlw	0	; case 0
  7346   01252C  B4D8               	btfsc	status,2,c
  7347   01252E  EF9B  F092         	goto	l5598
  7348   012532  EFAE  F092         	goto	l5168
  7349   012536                     l5598:
  7350                           
  7351                           ; Switch size 1, requested type "simple"
  7352                           ; Number of cases is 4, Range of values is 0 to 3
  7353                           ; switch strategies available:
  7354                           ; Name         Instructions Cycles
  7355                           ; simple_byte           13     7 (average)
  7356                           ;	Chosen strategy is simple_byte
  7357   012536  5036               	movf	(btemp+10)^0,w,c
  7358   012538  0A00               	xorlw	0	; case 0
  7359   01253A  B4D8               	btfsc	status,2,c
  7360   01253C  EF25  F092         	goto	l5140
  7361   012540  0A01               	xorlw	1	; case 1
  7362   012542  B4D8               	btfsc	status,2,c
  7363   012544  EF38  F092         	goto	l5144
  7364   012548  0A03               	xorlw	3	; case 2
  7365   01254A  B4D8               	btfsc	status,2,c
  7366   01254C  EF4B  F092         	goto	l5148
  7367   012550  0A01               	xorlw	1	; case 3
  7368   012552  B4D8               	btfsc	status,2,c
  7369   012554  EF6F  F092         	goto	l5156
  7370   012558  EFAE  F092         	goto	l5168
  7371   01255C                     l5168:
  7372                           
  7373                           ;carFunctions.c: 187:     if(oldState == state)
  7374   01255C  5025               	movf	lightControl_Process@state^0,w,c
  7375   01255E  1824               	xorwf	lightControl_Process@oldState^0,w,c
  7376   012560  A4D8               	btfss	status,2,c
  7377   012562  EFB5  F092         	goto	u2951
  7378   012566  EFB7  F092         	goto	u2950
  7379   01256A                     u2951:
  7380   01256A  EFB9  F092         	goto	l1490
  7381   01256E                     u2950:
  7382   01256E  EFF4  F092         	goto	l1491
  7383   012572                     l1490:
  7384                           
  7385                           ;carFunctions.c: 191:     oldState = state;
  7386   012572  C025  F024         	movff	lightControl_Process@state,lightControl_Process@oldState
  7387                           
  7388                           ;carFunctions.c: 192:     switch(state)
  7389   012576  EFD7  F092         	goto	l5180
  7390   01257A                     l5172:
  7391                           
  7392                           ;carFunctions.c: 197:              lightContol_FrontLight(0);
  7393   01257A  0E00               	movlw	0
  7394   01257C  6EE6               	movwf	postinc1,c
  7395   01257E  EC35  F09F         	call	_lightContol_FrontLight	;wreg free
  7396                           
  7397                           ;carFunctions.c: 198:              lightContol_BackLight(0);
  7398   012582  0E00               	movlw	0
  7399   012584  6EE6               	movwf	postinc1,c
  7400   012586  ECDB  F09E         	call	_lightContol_BackLight	;wreg free
  7401                           
  7402                           ;carFunctions.c: 199:              break;
  7403   01258A  EFF4  F092         	goto	l1491
  7404   01258E                     l5174:
  7405                           
  7406                           ;carFunctions.c: 201:              lightContol_FrontLight(50);
  7407   01258E  0E32               	movlw	50
  7408   012590  6EE6               	movwf	postinc1,c
  7409   012592  EC35  F09F         	call	_lightContol_FrontLight	;wreg free
  7410                           
  7411                           ;carFunctions.c: 202:              lightContol_BackLight(50);
  7412   012596  0E32               	movlw	50
  7413   012598  6EE6               	movwf	postinc1,c
  7414   01259A  ECDB  F09E         	call	_lightContol_BackLight	;wreg free
  7415                           
  7416                           ;carFunctions.c: 203:              break;
  7417   01259E  EFF4  F092         	goto	l1491
  7418   0125A2                     l5176:
  7419                           
  7420                           ;carFunctions.c: 205:              lightContol_BackLight(100);
  7421   0125A2  0E64               	movlw	100
  7422   0125A4  6EE6               	movwf	postinc1,c
  7423   0125A6  ECDB  F09E         	call	_lightContol_BackLight	;wreg free
  7424                           
  7425                           ;carFunctions.c: 206:              break;
  7426   0125AA  EFF4  F092         	goto	l1491
  7427   0125AE                     l5180:
  7428   0125AE  5025               	movf	lightControl_Process@state^0,w,c
  7429   0125B0  6E36               	movwf	(btemp+10)^0,c
  7430   0125B2  6A37               	clrf	(btemp+11)^0,c
  7431                           
  7432                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7433                           ; Switch size 1, requested type "simple"
  7434                           ; Number of cases is 1, Range of values is 0 to 0
  7435                           ; switch strategies available:
  7436                           ; Name         Instructions Cycles
  7437                           ; simple_byte            4     3 (average)
  7438                           ;	Chosen strategy is simple_byte
  7439   0125B4  5037               	movf	(btemp+11)^0,w,c
  7440   0125B6  0A00               	xorlw	0	; case 0
  7441   0125B8  B4D8               	btfsc	status,2,c
  7442   0125BA  EFE1  F092         	goto	l5600
  7443   0125BE  EFF4  F092         	goto	l1491
  7444   0125C2                     l5600:
  7445                           
  7446                           ; Switch size 1, requested type "simple"
  7447                           ; Number of cases is 4, Range of values is 0 to 3
  7448                           ; switch strategies available:
  7449                           ; Name         Instructions Cycles
  7450                           ; simple_byte           13     7 (average)
  7451                           ;	Chosen strategy is simple_byte
  7452   0125C2  5036               	movf	(btemp+10)^0,w,c
  7453   0125C4  0A00               	xorlw	0	; case 0
  7454   0125C6  B4D8               	btfsc	status,2,c
  7455   0125C8  EFF4  F092         	goto	l1491
  7456   0125CC  0A01               	xorlw	1	; case 1
  7457   0125CE  B4D8               	btfsc	status,2,c
  7458   0125D0  EFBD  F092         	goto	l5172
  7459   0125D4  0A03               	xorlw	3	; case 2
  7460   0125D6  B4D8               	btfsc	status,2,c
  7461   0125D8  EFC7  F092         	goto	l5174
  7462   0125DC  0A01               	xorlw	1	; case 3
  7463   0125DE  B4D8               	btfsc	status,2,c
  7464   0125E0  EFD1  F092         	goto	l5176
  7465   0125E4  EFF4  F092         	goto	l1491
  7466   0125E8                     l1491:
  7467                           
  7468                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7469   0125E8  52E5               	movf	postdec1,f,c
  7470   0125EA  52E5               	movf	postdec1,f,c
  7471   0125EC  0012               	return		;funcret
  7472   0125EE                     __end_of_lightControl_Process:
  7473                           	callstack 0
  7474                           
  7475 ;; *************** function _motorControl_Process *****************
  7476 ;; Defined at:
  7477 ;;		line 68 in file "carFunctions.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;  ev              2  [STACK] PTR struct Event_
  7480 ;;		 -> ev(6), 
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;		None
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  1  [STACK] _Bool 
  7485 ;; Registers used:
  7486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;Total ram usage:        0 bytes
  7497 ;; Hardware stack levels used: 1
  7498 ;; Hardware stack levels required when called: 13
  7499 ;; This function calls:
  7500 ;;		_motorControl
  7501 ;; This function is called by:
  7502 ;;		_updateCarState
  7503 ;;		_XF_executeOnce
  7504 ;; This function uses a reentrant model
  7505 ;;
  7506                           
  7507                           	psect	text20
  7508   0125EE                     __ptext20:
  7509                           	callstack 0
  7510   0125EE                     _motorControl_Process:
  7511                           	callstack 0
  7512                           
  7513                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7514   0125EE  52E6               	movf	postinc1,f,c
  7515   0125F0  52E6               	movf	postinc1,f,c
  7516   0125F2                     
  7517                           ;carFunctions.c: 75:      static MotorState state = OFF;;carFunctions.c: 76:      static
      +                           MotorState oldState = OFF;;carFunctions.c: 80:      switch(state)
  7518   0125F2  EF20  F093         	goto	l5100
  7519   0125F6                     l5090:
  7520                           
  7521                           ;carFunctions.c: 84:              if(ev->id == E_CONTACT_ON)
  7522                           ;stkvar	_ev @ sp[(-2)+-2]
  7523   0125F6  0EFC               	movlw	-4
  7524   0125F8  CFE3 FFD9          	movff	plusw1,fsr2l
  7525   0125FC  0EFD               	movlw	-3
  7526   0125FE  CFE3 FFDA          	movff	plusw1,fsr2h
  7527   012602  50DF               	movf	indf2,w,c
  7528   012604  0A03               	xorlw	3
  7529   012606  A4D8               	btfss	status,2,c
  7530   012608  EF08  F093         	goto	u2821
  7531   01260C  EF0A  F093         	goto	u2820
  7532   012610                     u2821:
  7533   012610  EF35  F093         	goto	l5102
  7534   012614                     u2820:
  7535   012614                     
  7536                           ;carFunctions.c: 85:              {;carFunctions.c: 86:                  state = CRUISE;
  7537   012614  0E01               	movlw	1
  7538   012616  6E27               	movwf	motorControl_Process@state^0,c
  7539   012618  EF35  F093         	goto	l5102
  7540   01261C                     l5094:
  7541                           
  7542                           ;carFunctions.c: 94:              if(ev->id == E_CONTACT_OFF)
  7543                           ;stkvar	_ev @ sp[(-2)+-2]
  7544   01261C  0EFC               	movlw	-4
  7545   01261E  CFE3 FFD9          	movff	plusw1,fsr2l
  7546   012622  0EFD               	movlw	-3
  7547   012624  CFE3 FFDA          	movff	plusw1,fsr2h
  7548   012628  50DF               	movf	indf2,w,c
  7549   01262A  0A02               	xorlw	2
  7550   01262C  A4D8               	btfss	status,2,c
  7551   01262E  EF1B  F093         	goto	u2831
  7552   012632  EF1D  F093         	goto	u2830
  7553   012636                     u2831:
  7554   012636  EF35  F093         	goto	l5102
  7555   01263A                     u2830:
  7556   01263A                     
  7557                           ;carFunctions.c: 95:              {;carFunctions.c: 96:                  state = OFF;
  7558   01263A  6A27               	clrf	motorControl_Process@state^0,c
  7559   01263C  EF35  F093         	goto	l5102
  7560   012640                     l5100:
  7561   012640  5027               	movf	motorControl_Process@state^0,w,c
  7562   012642  6E36               	movwf	(btemp+10)^0,c
  7563   012644  6A37               	clrf	(btemp+11)^0,c
  7564                           
  7565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7566                           ; Switch size 1, requested type "simple"
  7567                           ; Number of cases is 1, Range of values is 0 to 0
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte            4     3 (average)
  7571                           ;	Chosen strategy is simple_byte
  7572   012646  5037               	movf	(btemp+11)^0,w,c
  7573   012648  0A00               	xorlw	0	; case 0
  7574   01264A  B4D8               	btfsc	status,2,c
  7575   01264C  EF2A  F093         	goto	l5602
  7576   012650  EF35  F093         	goto	l5102
  7577   012654                     l5602:
  7578                           
  7579                           ; Switch size 1, requested type "simple"
  7580                           ; Number of cases is 2, Range of values is 0 to 1
  7581                           ; switch strategies available:
  7582                           ; Name         Instructions Cycles
  7583                           ; simple_byte            7     4 (average)
  7584                           ;	Chosen strategy is simple_byte
  7585   012654  5036               	movf	(btemp+10)^0,w,c
  7586   012656  0A00               	xorlw	0	; case 0
  7587   012658  B4D8               	btfsc	status,2,c
  7588   01265A  EFFB  F092         	goto	l5090
  7589   01265E  0A01               	xorlw	1	; case 1
  7590   012660  B4D8               	btfsc	status,2,c
  7591   012662  EF0E  F093         	goto	l5094
  7592   012666  EF35  F093         	goto	l5102
  7593   01266A                     l5102:
  7594                           
  7595                           ;carFunctions.c: 104:      if(oldState == state)
  7596   01266A  5027               	movf	motorControl_Process@state^0,w,c
  7597   01266C  1826               	xorwf	motorControl_Process@oldState^0,w,c
  7598   01266E  A4D8               	btfss	status,2,c
  7599   012670  EF3C  F093         	goto	u2841
  7600   012674  EF3E  F093         	goto	u2840
  7601   012678                     u2841:
  7602   012678  EF8D  F093         	goto	l5118
  7603   01267C                     u2840:
  7604   01267C                     
  7605                           ;carFunctions.c: 105:     {;carFunctions.c: 106:          if (ev->id == E_ACCELERATION_O
      +                          N){
  7606                           ;stkvar	_ev @ sp[(-2)+-2]
  7607   01267C  0EFC               	movlw	-4
  7608   01267E  CFE3 FFD9          	movff	plusw1,fsr2l
  7609   012682  0EFD               	movlw	-3
  7610   012684  CFE3 FFDA          	movff	plusw1,fsr2h
  7611   012688  50DF               	movf	indf2,w,c
  7612   01268A  0A08               	xorlw	8
  7613   01268C  A4D8               	btfss	status,2,c
  7614   01268E  EF4B  F093         	goto	u2851
  7615   012692  EF4D  F093         	goto	u2850
  7616   012696                     u2851:
  7617   012696  EFBF  F093         	goto	l1462
  7618   01269A                     u2850:
  7619   01269A                     
  7620                           ;carFunctions.c: 107:              if(carState.rpm <8000){
  7621   01269A  0E40               	movlw	64
  7622   01269C  5C08               	subwf	(_carState+7)^0,w,c
  7623   01269E  0E1F               	movlw	31
  7624   0126A0  5809               	subwfb	(_carState+8)^0,w,c
  7625   0126A2  B0D8               	btfsc	status,0,c
  7626   0126A4  EF56  F093         	goto	u2861
  7627   0126A8  EF58  F093         	goto	u2860
  7628   0126AC                     u2861:
  7629   0126AC  EFBF  F093         	goto	l1462
  7630   0126B0                     u2860:
  7631   0126B0                     
  7632                           ;carFunctions.c: 108:                 motorControl((((10)>(carState.accelPedal-3))?(10):
      +                          (carState.accelPedal-3)),0);
  7633   0126B0  0EFD               	movlw	253
  7634   0126B2  240E               	addwf	(_carState+13)^0,w,c
  7635   0126B4  6E36               	movwf	(btemp+10)^0,c
  7636   0126B6  6A37               	clrf	(btemp+11)^0,c
  7637   0126B8  0EFF               	movlw	255
  7638   0126BA  2237               	addwfc	(btemp+11)^0,f,c
  7639   0126BC  BE37               	btfsc	(btemp+11)^0,7,c
  7640   0126BE  EF6A  F093         	goto	u2871
  7641   0126C2  5037               	movf	(btemp+11)^0,w,c
  7642   0126C4  E109               	bnz	u2870
  7643   0126C6  0E0A               	movlw	10
  7644   0126C8  5C36               	subwf	(btemp+10)^0,w,c
  7645   0126CA  A0D8               	btfss	status,0,c
  7646   0126CC  EF6A  F093         	goto	u2871
  7647   0126D0  EF6C  F093         	goto	u2870
  7648   0126D4                     u2871:
  7649   0126D4  EF7A  F093         	goto	l5112
  7650   0126D8                     u2870:
  7651   0126D8  0EFD               	movlw	253
  7652   0126DA  240E               	addwf	(_carState+13)^0,w,c
  7653   0126DC  6E36               	movwf	(btemp+10)^0,c
  7654   0126DE  6A37               	clrf	(btemp+11)^0,c
  7655   0126E0  0EFF               	movlw	255
  7656   0126E2  2237               	addwfc	(btemp+11)^0,f,c
  7657                           
  7658                           ;stkvar	_motorControl_Process$5903 @ sp[(-2)+0]
  7659   0126E4  0EFE               	movlw	-2
  7660   0126E6  C036  FFE3         	movff	btemp+10,plusw1
  7661   0126EA  0EFF               	movlw	-1
  7662   0126EC  C037  FFE3         	movff	btemp+11,plusw1
  7663   0126F0  EF84  F093         	goto	l5114
  7664   0126F4                     l5112:
  7665   0126F4  0E0A               	movlw	10
  7666   0126F6  6E36               	movwf	(btemp+10)^0,c
  7667   0126F8  0E00               	movlw	0
  7668   0126FA  6E37               	movwf	(btemp+11)^0,c
  7669                           
  7670                           ;stkvar	_motorControl_Process$5903 @ sp[(-2)+0]
  7671   0126FC  0EFE               	movlw	-2
  7672   0126FE  C036  FFE3         	movff	btemp+10,plusw1
  7673   012702  0EFF               	movlw	-1
  7674   012704  C037  FFE3         	movff	btemp+11,plusw1
  7675   012708                     l5114:
  7676   012708  0E00               	movlw	0
  7677   01270A  6EE6               	movwf	postinc1,c
  7678                           
  7679                           ;stkvar	_motorControl_Process$5903 @ sp[(-3)+0]
  7680   01270C  0EFD               	movlw	-3
  7681   01270E  50E3               	movf	plusw1,w,c
  7682   012710  6EE6               	movwf	postinc1,c
  7683   012712  ECB5  F09B         	call	_motorControl	;wreg free
  7684   012716  EFBF  F093         	goto	l1462
  7685   01271A                     l5118:
  7686                           
  7687                           ;carFunctions.c: 116:     if (oldState!= state){
  7688   01271A  5027               	movf	motorControl_Process@state^0,w,c
  7689   01271C  1826               	xorwf	motorControl_Process@oldState^0,w,c
  7690   01271E  B4D8               	btfsc	status,2,c
  7691   012720  EF94  F093         	goto	u2881
  7692   012724  EF96  F093         	goto	u2880
  7693   012728                     u2881:
  7694   012728  EFBD  F093         	goto	l1463
  7695   01272C                     u2880:
  7696   01272C  EFA8  F093         	goto	l5128
  7697   012730                     l5122:
  7698                           
  7699                           ;carFunctions.c: 122:              motorControl(0,0);
  7700   012730  0E00               	movlw	0
  7701   012732  6EE6               	movwf	postinc1,c
  7702   012734  0E00               	movlw	0
  7703   012736  6EE6               	movwf	postinc1,c
  7704   012738  ECB5  F09B         	call	_motorControl	;wreg free
  7705                           
  7706                           ;carFunctions.c: 123:              break;
  7707   01273C  EFBD  F093         	goto	l1463
  7708   012740                     l5124:
  7709                           
  7710                           ;carFunctions.c: 125:              motorControl(10,1);
  7711   012740  0E01               	movlw	1
  7712   012742  6EE6               	movwf	postinc1,c
  7713   012744  0E0A               	movlw	10
  7714   012746  6EE6               	movwf	postinc1,c
  7715   012748  ECB5  F09B         	call	_motorControl	;wreg free
  7716                           
  7717                           ;carFunctions.c: 126:              break;
  7718   01274C  EFBD  F093         	goto	l1463
  7719   012750                     l5128:
  7720   012750  5027               	movf	motorControl_Process@state^0,w,c
  7721   012752  6E36               	movwf	(btemp+10)^0,c
  7722   012754  6A37               	clrf	(btemp+11)^0,c
  7723                           
  7724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7725                           ; Switch size 1, requested type "simple"
  7726                           ; Number of cases is 1, Range of values is 0 to 0
  7727                           ; switch strategies available:
  7728                           ; Name         Instructions Cycles
  7729                           ; simple_byte            4     3 (average)
  7730                           ;	Chosen strategy is simple_byte
  7731   012756  5037               	movf	(btemp+11)^0,w,c
  7732   012758  0A00               	xorlw	0	; case 0
  7733   01275A  B4D8               	btfsc	status,2,c
  7734   01275C  EFB2  F093         	goto	l5604
  7735   012760  EFBD  F093         	goto	l1463
  7736   012764                     l5604:
  7737                           
  7738                           ; Switch size 1, requested type "simple"
  7739                           ; Number of cases is 2, Range of values is 0 to 1
  7740                           ; switch strategies available:
  7741                           ; Name         Instructions Cycles
  7742                           ; simple_byte            7     4 (average)
  7743                           ;	Chosen strategy is simple_byte
  7744   012764  5036               	movf	(btemp+10)^0,w,c
  7745   012766  0A00               	xorlw	0	; case 0
  7746   012768  B4D8               	btfsc	status,2,c
  7747   01276A  EF98  F093         	goto	l5122
  7748   01276E  0A01               	xorlw	1	; case 1
  7749   012770  B4D8               	btfsc	status,2,c
  7750   012772  EFA0  F093         	goto	l5124
  7751   012776  EFBD  F093         	goto	l1463
  7752   01277A                     l1463:
  7753                           
  7754                           ;carFunctions.c: 133:      oldState = state;
  7755   01277A  C027  F026         	movff	motorControl_Process@state,motorControl_Process@oldState
  7756   01277E                     l1462:
  7757                           
  7758                           ; _motorControl_Process: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7759   01277E  52E5               	movf	postdec1,f,c
  7760   012780  52E5               	movf	postdec1,f,c
  7761   012782  52E5               	movf	postdec1,f,c
  7762   012784  52E5               	movf	postdec1,f,c
  7763   012786  0012               	return		;funcret
  7764   012788                     __end_of_motorControl_Process:
  7765                           	callstack 0
  7766                           
  7767 ;; *************** function _motorControl *****************
  7768 ;; Defined at:
  7769 ;;		line 23 in file "carFunctions.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  percent         1  [STACK] unsigned char 
  7772 ;;  starter         1  [STACK] unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7775 ;;  txdata          8  [STACK] unsigned char [8]
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1  [STACK] void 
  7778 ;; Registers used:
  7779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        0 bytes
  7790 ;; Hardware stack levels used: 1
  7791 ;; Hardware stack levels required when called: 12
  7792 ;; This function calls:
  7793 ;;		_CanSend
  7794 ;; This function is called by:
  7795 ;;		_motorControl_Process
  7796 ;; This function uses a reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text21
  7800   01376A                     __ptext21:
  7801                           	callstack 0
  7802   01376A                     _motorControl:
  7803                           	callstack 0
  7804                           
  7805                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7806   01376A  0E18               	movlw	24
  7807   01376C  26E1               	addwf	fsr1l,f,c
  7808   01376E  0E00               	movlw	0
  7809   013770  22E2               	addwfc	fsr1h,f,c
  7810   013772                     
  7811                           ;carFunctions.c: 24:      static uint8_t lastPercent = 0;;carFunctions.c: 25:      stati
      +                          c uint8_t lastStarter = 0;;carFunctions.c: 26:      CAN_TX_MSGOBJ txMsg={0};
  7812   013772  EE20  F080         	lfsr	2,motorControl@F6658
  7813                           
  7814                           ;stkvar	_txMsg @ sp[(-24)+0]
  7815   013776  0E10               	movlw	16
  7816   013778  6E2C               	movwf	btemp^0,c
  7817   01377A  0EE8               	movlw	-24
  7818   01377C                     us233999:
  7819   01377C  CFDE FFE3          	movff	postinc2,plusw1
  7820   013780  28E8               	incf	wreg,w,c
  7821   013782  2E2C               	decfsz	btemp^0,f,c
  7822   013784  D7FB               	bra	us233999
  7823   013786                     
  7824                           ;carFunctions.c: 27:      uint8_t txdata[8];;carFunctions.c: 28:          if((lastPercen
      +                          t != percent)||(lastStarter != starter)) {
  7825                           ;stkvar	_percent @ sp[(-24)+-1]
  7826   013786  0EE7               	movlw	-25
  7827   013788  50E3               	movf	plusw1,w,c
  7828   01378A  182B               	xorwf	motorControl@lastPercent^0,w,c
  7829   01378C  A4D8               	btfss	status,2,c
  7830   01378E  EFCB  F09B         	goto	u2341
  7831   013792  EFCD  F09B         	goto	u2340
  7832   013796                     u2341:
  7833   013796  EFD7  F09B         	goto	l4652
  7834   01379A                     u2340:
  7835   01379A                     
  7836                           ;stkvar	_starter @ sp[(-24)+-2]
  7837   01379A  0EE6               	movlw	-26
  7838   01379C  50E3               	movf	plusw1,w,c
  7839   01379E  182A               	xorwf	motorControl@lastStarter^0,w,c
  7840   0137A0  B4D8               	btfsc	status,2,c
  7841   0137A2  EFD5  F09B         	goto	u2351
  7842   0137A6  EFD7  F09B         	goto	u2350
  7843   0137AA                     u2351:
  7844   0137AA  EF20  F09C         	goto	l1425
  7845   0137AE                     u2350:
  7846   0137AE                     l4652:
  7847                           
  7848                           ;carFunctions.c: 29:              lastPercent = percent;
  7849                           ;stkvar	_percent @ sp[(-24)+-1]
  7850   0137AE  0EE7               	movlw	-25
  7851   0137B0  CFE3 F02B          	movff	plusw1,motorControl@lastPercent
  7852                           
  7853                           ;carFunctions.c: 30:              lastStarter = starter;
  7854                           ;stkvar	_starter @ sp[(-24)+-2]
  7855   0137B4  0EE6               	movlw	-26
  7856   0137B6  CFE3 F02A          	movff	plusw1,motorControl@lastStarter
  7857   0137BA                     
  7858                           ;carFunctions.c: 32:              txMsg.bF.id.ID = (0x112);
  7859   0137BA  0E12               	movlw	18
  7860   0137BC  6E34               	movwf	(btemp+8)^0,c
  7861   0137BE  0E01               	movlw	1
  7862   0137C0  6E35               	movwf	(btemp+9)^0,c
  7863   0137C2  0E00               	movlw	0
  7864   0137C4  6E36               	movwf	(btemp+10)^0,c
  7865   0137C6  0E00               	movlw	0
  7866   0137C8  6E37               	movwf	(btemp+11)^0,c
  7867                           
  7868                           ;stkvar	_txMsg @ sp[(-24)+0]
  7869   0137CA  0EE8               	movlw	-24
  7870   0137CC  C034  FFE3         	movff	btemp+8,plusw1
  7871   0137D0  0EE9               	movlw	-23
  7872   0137D2  C035  FFE3         	movff	btemp+9,plusw1
  7873   0137D6  0EEA               	movlw	-22
  7874   0137D8  C036  FFE3         	movff	btemp+10,plusw1
  7875   0137DC  0EEB               	movlw	-21
  7876   0137DE  C037  FFE3         	movff	btemp+11,plusw1
  7877   0137E2                     
  7878                           ;carFunctions.c: 33:              txMsg.bF.ctrl.DLC = CAN_DLC_2;
  7879                           ;stkvar	_txMsg @ sp[(-24)+0]
  7880   0137E2  0EEE               	movlw	238
  7881   0137E4  24E1               	addwf	fsr1l,w,c
  7882   0137E6  6ED9               	movwf	fsr2l,c
  7883   0137E8  0EFF               	movlw	255
  7884   0137EA  20E2               	addwfc	fsr1h,w,c
  7885   0137EC  6EDA               	movwf	fsr2h,c
  7886   0137EE  50DF               	movf	223,w,c
  7887   0137F0  0BF0               	andlw	-16
  7888   0137F2  0902               	iorlw	2
  7889   0137F4  6EDF               	movwf	223,c
  7890   0137F6                     
  7891                           ;carFunctions.c: 34:              txdata[0] = percent;
  7892                           ;stkvar	_percent @ sp[(-24)+-1]
  7893                           ;stkvar	_txdata @ sp[(-24)+16]
  7894   0137F6  0EE7               	movlw	-25
  7895   0137F8  CFE3 F02C          	movff	plusw1,btemp
  7896   0137FC  0EF8               	movlw	-8
  7897   0137FE  C02C  FFE3         	movff	btemp,plusw1
  7898   013802                     
  7899                           ;carFunctions.c: 35:              txdata[1] = starter;
  7900                           ;stkvar	_starter @ sp[(-24)+-2]
  7901                           ;stkvar	_txdata @ sp[(-24)+16]
  7902   013802  0EF9               	movlw	249
  7903   013804  24E1               	addwf	fsr1l,w,c
  7904   013806  6ED9               	movwf	fsr2l,c
  7905   013808  0EFF               	movlw	255
  7906   01380A  20E2               	addwfc	fsr1h,w,c
  7907   01380C  6EDA               	movwf	fsr2h,c
  7908   01380E  0EE6               	movlw	-26
  7909   013810  CFE3 FFDF          	movff	plusw1,indf2
  7910   013814                     
  7911                           ;carFunctions.c: 36:          CanSend(&txMsg,txdata);
  7912                           ;stkvar	_txdata @ sp[(-24)+16]
  7913   013814  0EF8               	movlw	248
  7914   013816  24E1               	addwf	fsr1l,w,c
  7915   013818  6E2C               	movwf	btemp^0,c
  7916   01381A  0EFF               	movlw	255
  7917   01381C  20E2               	addwfc	fsr1h,w,c
  7918   01381E  6E2D               	movwf	(btemp+1)^0,c
  7919   013820  C02C  FFE6         	movff	btemp,postinc1
  7920   013824  C02D  FFE6         	movff	btemp+1,postinc1
  7921                           
  7922                           ;stkvar	_txMsg @ sp[(-26)+0]
  7923   013828  0EE6               	movlw	230
  7924   01382A  24E1               	addwf	fsr1l,w,c
  7925   01382C  6E2C               	movwf	btemp^0,c
  7926   01382E  0EFF               	movlw	255
  7927   013830  20E2               	addwfc	fsr1h,w,c
  7928   013832  6E2D               	movwf	(btemp+1)^0,c
  7929   013834  C02C  FFE6         	movff	btemp,postinc1
  7930   013838  C02D  FFE6         	movff	btemp+1,postinc1
  7931   01383C  ECE3  F09F         	call	_CanSend	;wreg free
  7932   013840                     l1425:
  7933                           
  7934                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2,
      +                           argsize = 2, vargsize = 0
  7935   013840  0EE6               	movlw	230
  7936   013842  26E1               	addwf	fsr1l,f,c
  7937   013844  0EFF               	movlw	255
  7938   013846  22E2               	addwfc	fsr1h,f,c
  7939   013848  0012               	return		;funcret
  7940   01384A                     __end_of_motorControl:
  7941                           	callstack 0
  7942                           
  7943 ;; *************** function _lightContol_FrontLight *****************
  7944 ;; Defined at:
  7945 ;;		line 39 in file "carFunctions.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  light           1  [STACK] unsigned char 
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7950 ;;  txdata          8  [STACK] unsigned char [8]
  7951 ;; Return value:  Size  Location     Type
  7952 ;;                  1  [STACK] void 
  7953 ;; Registers used:
  7954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7955 ;; Tracked objects:
  7956 ;;		On entry : 0/0
  7957 ;;		On exit  : 0/0
  7958 ;;		Unchanged: 0/0
  7959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;Total ram usage:        0 bytes
  7965 ;; Hardware stack levels used: 1
  7966 ;; Hardware stack levels required when called: 12
  7967 ;; This function calls:
  7968 ;;		_CanSend
  7969 ;; This function is called by:
  7970 ;;		_lightControl_Process
  7971 ;; This function uses a reentrant model
  7972 ;;
  7973                           
  7974                           	psect	text22
  7975   013E6A                     __ptext22:
  7976                           	callstack 0
  7977   013E6A                     _lightContol_FrontLight:
  7978                           	callstack 0
  7979                           
  7980                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7981   013E6A  0E18               	movlw	24
  7982   013E6C  26E1               	addwf	fsr1l,f,c
  7983   013E6E  0E00               	movlw	0
  7984   013E70  22E2               	addwfc	fsr1h,f,c
  7985   013E72                     
  7986                           ;carFunctions.c: 39:  void lightContol_FrontLight(uint8_t light);carFunctions.c: 40:  {;
      +                          carFunctions.c: 42:     static uint8_t lastLight=0;;carFunctions.c: 43:     CAN_TX_MSGOB
      +                          J txMsg={0};
  7987   013E72  EE20  F070         	lfsr	2,lightContol_FrontLight@F6664
  7988                           
  7989                           ;stkvar	_txMsg @ sp[(-24)+0]
  7990   013E76  0E10               	movlw	16
  7991   013E78  6E2C               	movwf	btemp^0,c
  7992   013E7A  0EE8               	movlw	-24
  7993   013E7C                     us236999:
  7994   013E7C  CFDE FFE3          	movff	postinc2,plusw1
  7995   013E80  28E8               	incf	wreg,w,c
  7996   013E82  2E2C               	decfsz	btemp^0,f,c
  7997   013E84  D7FB               	bra	us236999
  7998   013E86                     
  7999                           ;carFunctions.c: 44:     uint8_t txdata[8];;carFunctions.c: 45:     if(lastLight!= light
      +                          ) {
  8000                           ;stkvar	_light @ sp[(-24)+-1]
  8001   013E86  0EE7               	movlw	-25
  8002   013E88  50E3               	movf	plusw1,w,c
  8003   013E8A  1829               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  8004   013E8C  B4D8               	btfsc	status,2,c
  8005   013E8E  EF4B  F09F         	goto	u2371
  8006   013E92  EF4D  F09F         	goto	u2370
  8007   013E96                     u2371:
  8008   013E96  EF87  F09F         	goto	l1433
  8009   013E9A                     u2370:
  8010   013E9A                     
  8011                           ;carFunctions.c: 46:         lastLight = light;
  8012                           ;stkvar	_light @ sp[(-24)+-1]
  8013   013E9A  0EE7               	movlw	-25
  8014   013E9C  CFE3 F029          	movff	plusw1,lightContol_FrontLight@lastLight
  8015   013EA0                     
  8016                           ;carFunctions.c: 48:         txMsg.bF.id.ID = (0x19);
  8017   013EA0  0E19               	movlw	25
  8018   013EA2  6E34               	movwf	(btemp+8)^0,c
  8019   013EA4  6A35               	clrf	(btemp+9)^0,c
  8020   013EA6  6A36               	clrf	(btemp+10)^0,c
  8021   013EA8  6A37               	clrf	(btemp+11)^0,c
  8022                           
  8023                           ;stkvar	_txMsg @ sp[(-24)+0]
  8024   013EAA  0EE8               	movlw	-24
  8025   013EAC  C034  FFE3         	movff	btemp+8,plusw1
  8026   013EB0  0EE9               	movlw	-23
  8027   013EB2  C035  FFE3         	movff	btemp+9,plusw1
  8028   013EB6  0EEA               	movlw	-22
  8029   013EB8  C036  FFE3         	movff	btemp+10,plusw1
  8030   013EBC  0EEB               	movlw	-21
  8031   013EBE  C037  FFE3         	movff	btemp+11,plusw1
  8032   013EC2                     
  8033                           ;carFunctions.c: 49:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8034                           ;stkvar	_txMsg @ sp[(-24)+0]
  8035   013EC2  0EEE               	movlw	238
  8036   013EC4  24E1               	addwf	fsr1l,w,c
  8037   013EC6  6ED9               	movwf	fsr2l,c
  8038   013EC8  0EFF               	movlw	255
  8039   013ECA  20E2               	addwfc	fsr1h,w,c
  8040   013ECC  6EDA               	movwf	fsr2h,c
  8041   013ECE  50DF               	movf	223,w,c
  8042   013ED0  0BF0               	andlw	-16
  8043   013ED2  0901               	iorlw	1
  8044   013ED4  6EDF               	movwf	223,c
  8045   013ED6                     
  8046                           ;carFunctions.c: 50:         txdata[0] = light;
  8047                           ;stkvar	_light @ sp[(-24)+-1]
  8048                           ;stkvar	_txdata @ sp[(-24)+16]
  8049   013ED6  0EE7               	movlw	-25
  8050   013ED8  CFE3 F02C          	movff	plusw1,btemp
  8051   013EDC  0EF8               	movlw	-8
  8052   013EDE  C02C  FFE3         	movff	btemp,plusw1
  8053   013EE2                     
  8054                           ;carFunctions.c: 51:         CanSend(&txMsg,txdata);
  8055                           ;stkvar	_txdata @ sp[(-24)+16]
  8056   013EE2  0EF8               	movlw	248
  8057   013EE4  24E1               	addwf	fsr1l,w,c
  8058   013EE6  6E2C               	movwf	btemp^0,c
  8059   013EE8  0EFF               	movlw	255
  8060   013EEA  20E2               	addwfc	fsr1h,w,c
  8061   013EEC  6E2D               	movwf	(btemp+1)^0,c
  8062   013EEE  C02C  FFE6         	movff	btemp,postinc1
  8063   013EF2  C02D  FFE6         	movff	btemp+1,postinc1
  8064                           
  8065                           ;stkvar	_txMsg @ sp[(-26)+0]
  8066   013EF6  0EE6               	movlw	230
  8067   013EF8  24E1               	addwf	fsr1l,w,c
  8068   013EFA  6E2C               	movwf	btemp^0,c
  8069   013EFC  0EFF               	movlw	255
  8070   013EFE  20E2               	addwfc	fsr1h,w,c
  8071   013F00  6E2D               	movwf	(btemp+1)^0,c
  8072   013F02  C02C  FFE6         	movff	btemp,postinc1
  8073   013F06  C02D  FFE6         	movff	btemp+1,postinc1
  8074   013F0A  ECE3  F09F         	call	_CanSend	;wreg free
  8075   013F0E                     l1433:
  8076                           
  8077                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  8078   013F0E  0EE7               	movlw	231
  8079   013F10  26E1               	addwf	fsr1l,f,c
  8080   013F12  0EFF               	movlw	255
  8081   013F14  22E2               	addwfc	fsr1h,f,c
  8082   013F16  0012               	return		;funcret
  8083   013F18                     __end_of_lightContol_FrontLight:
  8084                           	callstack 0
  8085                           
  8086 ;; *************** function _lightContol_BackLight *****************
  8087 ;; Defined at:
  8088 ;;		line 54 in file "carFunctions.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  light           1  [STACK] unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8093 ;;  txdata          8  [STACK] unsigned char [8]
  8094 ;; Return value:  Size  Location     Type
  8095 ;;                  1  [STACK] void 
  8096 ;; Registers used:
  8097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;Total ram usage:        0 bytes
  8108 ;; Hardware stack levels used: 1
  8109 ;; Hardware stack levels required when called: 12
  8110 ;; This function calls:
  8111 ;;		_CanSend
  8112 ;; This function is called by:
  8113 ;;		_lightControl_Process
  8114 ;; This function uses a reentrant model
  8115 ;;
  8116                           
  8117                           	psect	text23
  8118   013DB6                     __ptext23:
  8119                           	callstack 0
  8120   013DB6                     _lightContol_BackLight:
  8121                           	callstack 0
  8122                           
  8123                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8124   013DB6  0E18               	movlw	24
  8125   013DB8  26E1               	addwf	fsr1l,f,c
  8126   013DBA  0E00               	movlw	0
  8127   013DBC  22E2               	addwfc	fsr1h,f,c
  8128   013DBE                     
  8129                           ;carFunctions.c: 54:  void lightContol_BackLight(uint8_t light);carFunctions.c: 55:  {;c
      +                          arFunctions.c: 56:      static uint8_t lastLight=0;;carFunctions.c: 57:      CAN_TX_MSGO
      +                          BJ txMsg={0};
  8130   013DBE  EE20  F060         	lfsr	2,lightContol_BackLight@F6670
  8131                           
  8132                           ;stkvar	_txMsg @ sp[(-24)+0]
  8133   013DC2  0E10               	movlw	16
  8134   013DC4  6E2C               	movwf	btemp^0,c
  8135   013DC6  0EE8               	movlw	-24
  8136   013DC8                     us238999:
  8137   013DC8  CFDE FFE3          	movff	postinc2,plusw1
  8138   013DCC  28E8               	incf	wreg,w,c
  8139   013DCE  2E2C               	decfsz	btemp^0,f,c
  8140   013DD0  D7FB               	bra	us238999
  8141   013DD2                     
  8142                           ;carFunctions.c: 58:      uint8_t txdata[8];;carFunctions.c: 59:      if(lastLight!= lig
      +                          ht) {
  8143                           ;stkvar	_light @ sp[(-24)+-1]
  8144   013DD2  0EE7               	movlw	-25
  8145   013DD4  50E3               	movf	plusw1,w,c
  8146   013DD6  1828               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8147   013DD8  B4D8               	btfsc	status,2,c
  8148   013DDA  EFF1  F09E         	goto	u2391
  8149   013DDE  EFF3  F09E         	goto	u2390
  8150   013DE2                     u2391:
  8151   013DE2  EF30  F09F         	goto	l1441
  8152   013DE6                     u2390:
  8153   013DE6                     
  8154                           ;carFunctions.c: 60:          lastLight = light;
  8155                           ;stkvar	_light @ sp[(-24)+-1]
  8156   013DE6  0EE7               	movlw	-25
  8157   013DE8  CFE3 F028          	movff	plusw1,lightContol_BackLight@lastLight
  8158   013DEC                     
  8159                           ;carFunctions.c: 62:          txMsg.bF.id.ID = (0x119);
  8160   013DEC  0E19               	movlw	25
  8161   013DEE  6E34               	movwf	(btemp+8)^0,c
  8162   013DF0  0E01               	movlw	1
  8163   013DF2  6E35               	movwf	(btemp+9)^0,c
  8164   013DF4  0E00               	movlw	0
  8165   013DF6  6E36               	movwf	(btemp+10)^0,c
  8166   013DF8  0E00               	movlw	0
  8167   013DFA  6E37               	movwf	(btemp+11)^0,c
  8168                           
  8169                           ;stkvar	_txMsg @ sp[(-24)+0]
  8170   013DFC  0EE8               	movlw	-24
  8171   013DFE  C034  FFE3         	movff	btemp+8,plusw1
  8172   013E02  0EE9               	movlw	-23
  8173   013E04  C035  FFE3         	movff	btemp+9,plusw1
  8174   013E08  0EEA               	movlw	-22
  8175   013E0A  C036  FFE3         	movff	btemp+10,plusw1
  8176   013E0E  0EEB               	movlw	-21
  8177   013E10  C037  FFE3         	movff	btemp+11,plusw1
  8178   013E14                     
  8179                           ;carFunctions.c: 63:          txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8180                           ;stkvar	_txMsg @ sp[(-24)+0]
  8181   013E14  0EEE               	movlw	238
  8182   013E16  24E1               	addwf	fsr1l,w,c
  8183   013E18  6ED9               	movwf	fsr2l,c
  8184   013E1A  0EFF               	movlw	255
  8185   013E1C  20E2               	addwfc	fsr1h,w,c
  8186   013E1E  6EDA               	movwf	fsr2h,c
  8187   013E20  50DF               	movf	223,w,c
  8188   013E22  0BF0               	andlw	-16
  8189   013E24  0901               	iorlw	1
  8190   013E26  6EDF               	movwf	223,c
  8191   013E28                     
  8192                           ;carFunctions.c: 64:          txdata[0] = light;
  8193                           ;stkvar	_light @ sp[(-24)+-1]
  8194                           ;stkvar	_txdata @ sp[(-24)+16]
  8195   013E28  0EE7               	movlw	-25
  8196   013E2A  CFE3 F02C          	movff	plusw1,btemp
  8197   013E2E  0EF8               	movlw	-8
  8198   013E30  C02C  FFE3         	movff	btemp,plusw1
  8199   013E34                     
  8200                           ;carFunctions.c: 65:          CanSend(&txMsg,txdata);
  8201                           ;stkvar	_txdata @ sp[(-24)+16]
  8202   013E34  0EF8               	movlw	248
  8203   013E36  24E1               	addwf	fsr1l,w,c
  8204   013E38  6E2C               	movwf	btemp^0,c
  8205   013E3A  0EFF               	movlw	255
  8206   013E3C  20E2               	addwfc	fsr1h,w,c
  8207   013E3E  6E2D               	movwf	(btemp+1)^0,c
  8208   013E40  C02C  FFE6         	movff	btemp,postinc1
  8209   013E44  C02D  FFE6         	movff	btemp+1,postinc1
  8210                           
  8211                           ;stkvar	_txMsg @ sp[(-26)+0]
  8212   013E48  0EE6               	movlw	230
  8213   013E4A  24E1               	addwf	fsr1l,w,c
  8214   013E4C  6E2C               	movwf	btemp^0,c
  8215   013E4E  0EFF               	movlw	255
  8216   013E50  20E2               	addwfc	fsr1h,w,c
  8217   013E52  6E2D               	movwf	(btemp+1)^0,c
  8218   013E54  C02C  FFE6         	movff	btemp,postinc1
  8219   013E58  C02D  FFE6         	movff	btemp+1,postinc1
  8220   013E5C  ECE3  F09F         	call	_CanSend	;wreg free
  8221   013E60                     l1441:
  8222                           
  8223                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8224   013E60  0EE7               	movlw	231
  8225   013E62  26E1               	addwf	fsr1l,f,c
  8226   013E64  0EFF               	movlw	255
  8227   013E66  22E2               	addwfc	fsr1h,f,c
  8228   013E68  0012               	return		;funcret
  8229   013E6A                     __end_of_lightContol_BackLight:
  8230                           	callstack 0
  8231                           
  8232 ;; *************** function _CanSend *****************
  8233 ;; Defined at:
  8234 ;;		line 217 in file "can/can.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8237 ;;		 -> txMsg(16), 
  8238 ;;  txd             2  [STACK] PTR unsigned char 
  8239 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  txFlags         1  [STACK] enum E5580
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1  [STACK] char 
  8244 ;; Registers used:
  8245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;Total ram usage:        0 bytes
  8256 ;; Hardware stack levels used: 1
  8257 ;; Hardware stack levels required when called: 11
  8258 ;; This function calls:
  8259 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8260 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8261 ;; This function is called by:
  8262 ;;		_motorControl
  8263 ;;		_lightContol_FrontLight
  8264 ;;		_lightContol_BackLight
  8265 ;; This function uses a reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text24
  8269   013FC6                     __ptext24:
  8270                           	callstack 0
  8271   013FC6                     _CanSend:
  8272                           	callstack 0
  8273                           
  8274                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8275   013FC6  52E6               	movf	postinc1,f,c
  8276   013FC8                     
  8277                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8278                           ;stkvar	_txObj @ sp[(-1)+-2]
  8279   013FC8  0EFD               	movlw	-3
  8280   013FCA  CFE3 F036          	movff	plusw1,btemp+10
  8281   013FCE  0EFE               	movlw	-2
  8282   013FD0  CFE3 F037          	movff	plusw1,btemp+11
  8283   013FD4  0E08               	movlw	8
  8284   013FD6  2436               	addwf	(btemp+10)^0,w,c
  8285   013FD8  6ED9               	movwf	fsr2l,c
  8286   013FDA  0E00               	movlw	0
  8287   013FDC  2037               	addwfc	(btemp+11)^0,w,c
  8288   013FDE  6EDA               	movwf	fsr2h,c
  8289   013FE0  0E01               	movlw	1
  8290   013FE2  6EDE               	movwf	postinc2,c
  8291   013FE4  0E00               	movlw	0
  8292   013FE6  6EDE               	movwf	postinc2,c
  8293   013FE8  0E00               	movlw	0
  8294   013FEA  6EDE               	movwf	postinc2,c
  8295   013FEC  0E00               	movlw	0
  8296   013FEE  6EDD               	movwf	postdec2,c
  8297   013FF0                     
  8298                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8299                           ;stkvar	_txFlags @ sp[(-1)+0]
  8300   013FF0  0EFF               	movlw	255
  8301   013FF2  24E1               	addwf	fsr1l,w,c
  8302   013FF4  6E2C               	movwf	btemp^0,c
  8303   013FF6  0EFF               	movlw	255
  8304   013FF8  20E2               	addwfc	fsr1h,w,c
  8305   013FFA  6E2D               	movwf	(btemp+1)^0,c
  8306   013FFC  C02C  FFE6         	movff	btemp,postinc1
  8307   014000  C02D  FFE6         	movff	btemp+1,postinc1
  8308   014004  0E01               	movlw	1
  8309   014006  6EE6               	movwf	postinc1,c
  8310   014008  EC8A  F0A0         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8311   01400C                     
  8312                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8313                           ;stkvar	_txFlags @ sp[(-1)+0]
  8314   01400C  0EFF               	movlw	-1
  8315   01400E  A0E3               	btfss	plusw1,0,c
  8316   014010  EF0C  F0A0         	goto	u2011
  8317   014014  EF0E  F0A0         	goto	u2010
  8318   014018                     u2011:
  8319   014018  EF33  F0A0         	goto	l158
  8320   01401C                     u2010:
  8321   01401C                     
  8322                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8323   01401C  0E01               	movlw	1
  8324   01401E  6EE6               	movwf	postinc1,c
  8325                           
  8326                           ;stkvar	_txObj @ sp[(-2)+-2]
  8327   014020  0EFC               	movlw	-4
  8328   014022  CFE3 F036          	movff	plusw1,btemp+10
  8329   014026  0EFD               	movlw	-3
  8330   014028  CFE3 F037          	movff	plusw1,btemp+11
  8331   01402C  0E06               	movlw	6
  8332   01402E  2436               	addwf	(btemp+10)^0,w,c
  8333   014030  6ED9               	movwf	fsr2l,c
  8334   014032  0E00               	movlw	0
  8335   014034  2037               	addwfc	(btemp+11)^0,w,c
  8336   014036  6EDA               	movwf	fsr2h,c
  8337   014038  50DF               	movf	223,w,c
  8338   01403A  0B0F               	andlw	15
  8339   01403C  6E37               	movwf	(btemp+11)^0,c
  8340   01403E  C037  FFE6         	movff	btemp+11,postinc1
  8341   014042  0E00               	movlw	0
  8342   014044  6EE6               	movwf	postinc1,c
  8343   014046  6EE6               	movwf	postinc1,c
  8344   014048  6EE6               	movwf	postinc1,c
  8345                           
  8346                           ;stkvar	_txd @ sp[(-6)+-4]
  8347   01404A  0EF6               	movlw	-10
  8348   01404C  CFE3 FFE6          	movff	plusw1,postinc1
  8349   014050  CFE3 FFE6          	movff	plusw1,postinc1
  8350                           
  8351                           ;stkvar	_txObj @ sp[(-8)+-2]
  8352   014054  0EF6               	movlw	-10
  8353   014056  CFE3 FFE6          	movff	plusw1,postinc1
  8354   01405A  CFE3 FFE6          	movff	plusw1,postinc1
  8355   01405E  0E01               	movlw	1
  8356   014060  6EE6               	movwf	postinc1,c
  8357   014062  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8358   014066                     l158:
  8359                           
  8360                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8361   014066  0EFB               	movlw	251
  8362   014068  26E1               	addwf	fsr1l,f,c
  8363   01406A  0EFF               	movlw	255
  8364   01406C  22E2               	addwfc	fsr1h,f,c
  8365   01406E  0012               	return		;funcret
  8366   014070                     __end_of_CanSend:
  8367                           	callstack 0
  8368                           
  8369 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8370 ;; Defined at:
  8371 ;;		line 706 in file "can/can.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;  channel         1  [STACK] enum E5287
  8374 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8375 ;;		 -> txMsg(16), 
  8376 ;;  txd             2  [STACK] PTR unsigned char 
  8377 ;;		 -> txdata(8), txdata(8), txdata(8), 
  8378 ;;  txdNumBytes     4  [STACK] unsigned long 
  8379 ;;  flush           1  [STACK] _Bool 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  temp32          4  [STACK] unsigned long 
  8382 ;;  txBuffer       76  [STACK] unsigned char [76]
  8383 ;;  fifoReg        12  [STACK] unsigned long [3]
  8384 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8385 ;;  a               4  [STACK] unsigned long 
  8386 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8387 ;;  dataBytesInO    4  [STACK] unsigned long 
  8388 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8389 ;;  n               2  [STACK] unsigned short 
  8390 ;;  spiTransferE    1  [STACK] char 
  8391 ;;  i               1  [STACK] unsigned char 
  8392 ;;  j               1  [STACK] unsigned char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1  [STACK] char 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;Total ram usage:        0 bytes
  8407 ;; Hardware stack levels used: 1
  8408 ;; Hardware stack levels required when called: 10
  8409 ;; This function calls:
  8410 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8411 ;;		_DRV_CANFDSPI_ReadWordArray
  8412 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8413 ;;		_DRV_CANFDSPI_WriteByteArray
  8414 ;; This function is called by:
  8415 ;;		_CanSend
  8416 ;; This function uses a reentrant model
  8417 ;;
  8418                           
  8419                           	psect	text25
  8420   010000                     __ptext25:
  8421                           	callstack 0
  8422   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8423                           	callstack 0
  8424                           
  8425                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8426   010000  0E72               	movlw	114
  8427   010002  26E1               	addwf	fsr1l,f,c
  8428   010004  0E00               	movlw	0
  8429   010006  22E2               	addwfc	fsr1h,f,c
  8430   010008                     
  8431                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8432                           ;stkvar	_channel @ sp[(-114)+-1]
  8433   010008  0E8D               	movlw	-115
  8434   01000A  50E3               	movf	plusw1,w,c
  8435   01000C  0D0C               	mullw	12
  8436   01000E  0E50               	movlw	80
  8437   010010  26F3               	addwf	243,f,c
  8438   010012  0E00               	movlw	0
  8439   010014  22F4               	addwfc	244,f,c
  8440                           
  8441                           ;stkvar	_a @ sp[(-114)+97]
  8442   010016  0EEF               	movlw	-17
  8443   010018  CFF3 FFE3          	movff	prodl,plusw1
  8444   01001C  0EF0               	movlw	-16
  8445   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8446   010022  0EF1               	movlw	-15
  8447   010024  6AE3               	clrf	plusw1,c
  8448   010026  0EF2               	movlw	-14
  8449   010028  6AE3               	clrf	plusw1,c
  8450   01002A                     
  8451                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8452   01002A  0E03               	movlw	3
  8453   01002C  6EE6               	movwf	postinc1,c
  8454   01002E  0E00               	movlw	0
  8455   010030  6EE6               	movwf	postinc1,c
  8456                           
  8457                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8458   010032  0EDC               	movlw	220
  8459   010034  24E1               	addwf	fsr1l,w,c
  8460   010036  6E2C               	movwf	btemp^0,c
  8461   010038  0EFF               	movlw	255
  8462   01003A  20E2               	addwfc	fsr1h,w,c
  8463   01003C  6E2D               	movwf	(btemp+1)^0,c
  8464   01003E  C02C  FFE6         	movff	btemp,postinc1
  8465   010042  C02D  FFE6         	movff	btemp+1,postinc1
  8466                           
  8467                           ;stkvar	_a @ sp[(-118)+97]
  8468   010046  0EEB               	movlw	-21
  8469   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8470   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8471   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8472                           
  8473                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8474   010054  0EFD               	movlw	-3
  8475   010056  C02C  FFE3         	movff	btemp,plusw1
  8476   01005A                     
  8477                           ;can/can.c: 722:     if (spiTransferError) {
  8478                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8479   01005A  0EFD               	movlw	-3
  8480   01005C  50E3               	movf	plusw1,w,c
  8481   01005E  B4D8               	btfsc	status,2,c
  8482   010060  EF34  F080         	goto	u1721
  8483   010064  EF36  F080         	goto	u1720
  8484   010068                     u1721:
  8485   010068  EF3A  F080         	goto	l4142
  8486   01006C                     u1720:
  8487   01006C                     
  8488                           ;can/can.c: 723:         return -1;
  8489   01006C  0EFF               	movlw	255
  8490   01006E  6E2C               	movwf	btemp^0,c
  8491   010070  EFA1  F083         	goto	l264
  8492   010074                     l4142:
  8493                           
  8494                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8495                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8496   010074  0EDE               	movlw	-34
  8497   010076  CFE3 F034          	movff	plusw1,btemp+8
  8498   01007A  0EDF               	movlw	-33
  8499   01007C  CFE3 F035          	movff	plusw1,btemp+9
  8500   010080  0EE0               	movlw	-32
  8501   010082  CFE3 F036          	movff	plusw1,btemp+10
  8502   010086  0EE1               	movlw	-31
  8503   010088  CFE3 F037          	movff	plusw1,btemp+11
  8504                           
  8505                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8506   01008C  0EEA               	movlw	-22
  8507   01008E  C034  FFE3         	movff	btemp+8,plusw1
  8508   010092  0EEB               	movlw	-21
  8509   010094  C035  FFE3         	movff	btemp+9,plusw1
  8510   010098  0EEC               	movlw	-20
  8511   01009A  C036  FFE3         	movff	btemp+10,plusw1
  8512   01009E  0EED               	movlw	-19
  8513   0100A0  C037  FFE3         	movff	btemp+11,plusw1
  8514   0100A4                     
  8515                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8516                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8517   0100A4  50E1               	movf	fsr1l,w,c
  8518   0100A6  0FEA               	addlw	-22
  8519   0100A8  6ED9               	movwf	fsr2l,c
  8520   0100AA  50E2               	movf	fsr1h,w,c
  8521   0100AC  6EDA               	movwf	fsr2h,c
  8522   0100AE  0EFF               	movlw	255
  8523   0100B0  22DA               	addwfc	fsr2h,f,c
  8524   0100B2  BEDF               	btfsc	indf2,7,c
  8525   0100B4  EF5E  F080         	goto	u1731
  8526   0100B8  EF60  F080         	goto	u1730
  8527   0100BC                     u1731:
  8528   0100BC  EF64  F080         	goto	l4150
  8529   0100C0                     u1730:
  8530   0100C0                     
  8531                           ;can/can.c: 729:         return -2;
  8532   0100C0  0EFE               	movlw	254
  8533   0100C2  6E2C               	movwf	btemp^0,c
  8534   0100C4  EFA1  F083         	goto	l264
  8535   0100C8                     l4150:
  8536                           
  8537                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8538                           ;stkvar	_txObj @ sp[(-114)+-3]
  8539   0100C8  0E8B               	movlw	-117
  8540   0100CA  CFE3 F036          	movff	plusw1,btemp+10
  8541   0100CE  0E8C               	movlw	-116
  8542   0100D0  CFE3 F037          	movff	plusw1,btemp+11
  8543   0100D4  0E06               	movlw	6
  8544   0100D6  2436               	addwf	(btemp+10)^0,w,c
  8545   0100D8  6ED9               	movwf	fsr2l,c
  8546   0100DA  0E00               	movlw	0
  8547   0100DC  2037               	addwfc	(btemp+11)^0,w,c
  8548   0100DE  6EDA               	movwf	fsr2h,c
  8549   0100E0  50DF               	movf	223,w,c
  8550   0100E2  0B0F               	andlw	15
  8551   0100E4  6EE6               	movwf	postinc1,c
  8552   0100E6  EC34  F091         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  8553                           
  8554                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8555   0100EA  0EF7               	movlw	-9
  8556   0100EC  C02C  FFE3         	movff	btemp,plusw1
  8557   0100F0  0EF8               	movlw	-8
  8558   0100F2  C02D  FFE3         	movff	btemp+1,plusw1
  8559   0100F6  0EF9               	movlw	-7
  8560   0100F8  C02E  FFE3         	movff	btemp+2,plusw1
  8561   0100FC  0EFA               	movlw	-6
  8562   0100FE  C02F  FFE3         	movff	btemp+3,plusw1
  8563   010102                     
  8564                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  8565                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8566                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8567   010102  50E1               	movf	fsr1l,w,c
  8568   010104  0FF7               	addlw	-9
  8569   010106  6ED9               	movwf	fsr2l,c
  8570   010108  50E2               	movf	fsr1h,w,c
  8571   01010A  6EDA               	movwf	fsr2h,c
  8572   01010C  0EFF               	movlw	255
  8573   01010E  22DA               	addwfc	fsr2h,f,c
  8574   010110  0E85               	movlw	-123
  8575   010112  50E3               	movf	plusw1,w,c
  8576   010114  5CDE               	subwf	postinc2,w,c
  8577   010116  0E86               	movlw	-122
  8578   010118  50E3               	movf	plusw1,w,c
  8579   01011A  58DE               	subwfb	postinc2,w,c
  8580   01011C  0E87               	movlw	-121
  8581   01011E  50E3               	movf	plusw1,w,c
  8582   010120  58DE               	subwfb	postinc2,w,c
  8583   010122  0E88               	movlw	-120
  8584   010124  50E3               	movf	plusw1,w,c
  8585   010126  58DE               	subwfb	postinc2,w,c
  8586   010128  B0D8               	btfsc	status,0,c
  8587   01012A  EF99  F080         	goto	u1741
  8588   01012E  EF9B  F080         	goto	u1740
  8589   010132                     u1741:
  8590   010132  EF9F  F080         	goto	l4158
  8591   010136                     u1740:
  8592   010136                     
  8593                           ;can/can.c: 735:         return -3;
  8594   010136  0EFD               	movlw	253
  8595   010138  6E2C               	movwf	btemp^0,c
  8596   01013A  EFA1  F083         	goto	l264
  8597   01013E                     l4158:
  8598                           
  8599                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  8600                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8601   01013E  0EE6               	movlw	230
  8602   010140  24E1               	addwf	fsr1l,w,c
  8603   010142  6ED9               	movwf	fsr2l,c
  8604   010144  0EFF               	movlw	255
  8605   010146  20E2               	addwfc	fsr1h,w,c
  8606   010148  6EDA               	movwf	fsr2h,c
  8607   01014A  CFDE F034          	movff	postinc2,btemp+8
  8608   01014E  CFDE F035          	movff	postinc2,btemp+9
  8609   010152  CFDE F036          	movff	postinc2,btemp+10
  8610   010156  CFDE F037          	movff	postinc2,btemp+11
  8611                           
  8612                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8613   01015A  0EF3               	movlw	-13
  8614   01015C  C034  FFE3         	movff	btemp+8,plusw1
  8615   010160  0EF4               	movlw	-12
  8616   010162  C035  FFE3         	movff	btemp+9,plusw1
  8617   010166  0EF5               	movlw	-11
  8618   010168  C036  FFE3         	movff	btemp+10,plusw1
  8619   01016C  0EF6               	movlw	-10
  8620   01016E  C037  FFE3         	movff	btemp+11,plusw1
  8621   010172                     
  8622                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  8623                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8624   010172  0EF3               	movlw	-13
  8625   010174  CFE3 F034          	movff	plusw1,btemp+8
  8626   010178  0EF4               	movlw	-12
  8627   01017A  CFE3 F035          	movff	plusw1,btemp+9
  8628   01017E  0EF5               	movlw	-11
  8629   010180  CFE3 F036          	movff	plusw1,btemp+10
  8630   010184  0EF6               	movlw	-10
  8631   010186  CFE3 F037          	movff	plusw1,btemp+11
  8632                           
  8633                           ;stkvar	_a @ sp[(-114)+97]
  8634   01018A  0EEF               	movlw	-17
  8635   01018C  C034  FFE3         	movff	btemp+8,plusw1
  8636   010190  0EF0               	movlw	-16
  8637   010192  C035  FFE3         	movff	btemp+9,plusw1
  8638   010196  0EF1               	movlw	-15
  8639   010198  C036  FFE3         	movff	btemp+10,plusw1
  8640   01019C  0EF2               	movlw	-14
  8641   01019E  C037  FFE3         	movff	btemp+11,plusw1
  8642   0101A2                     
  8643                           ;can/can.c: 748:     a += 0x400;
  8644                           ;stkvar	_a @ sp[(-114)+97]
  8645   0101A2  50E1               	movf	fsr1l,w,c
  8646   0101A4  0FEF               	addlw	-17
  8647   0101A6  6ED9               	movwf	fsr2l,c
  8648   0101A8  50E2               	movf	fsr1h,w,c
  8649   0101AA  6EDA               	movwf	fsr2h,c
  8650   0101AC  0EFF               	movlw	255
  8651   0101AE  22DA               	addwfc	fsr2h,f,c
  8652   0101B0  0E00               	movlw	0
  8653   0101B2  26DE               	addwf	postinc2,f,c
  8654   0101B4  0E04               	movlw	4
  8655   0101B6  22DE               	addwfc	postinc2,f,c
  8656   0101B8  0E00               	movlw	0
  8657   0101BA  22DE               	addwfc	postinc2,f,c
  8658   0101BC  0E00               	movlw	0
  8659   0101BE  22DE               	addwfc	postinc2,f,c
  8660   0101C0                     
  8661                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  8662                           ;stkvar	_txObj @ sp[(-114)+-3]
  8663   0101C0  0E8B               	movlw	-117
  8664   0101C2  CFE3 F036          	movff	plusw1,btemp+10
  8665   0101C6  0E8C               	movlw	-116
  8666   0101C8  CFE3 F037          	movff	plusw1,btemp+11
  8667   0101CC  0E06               	movlw	6
  8668   0101CE  2436               	addwf	(btemp+10)^0,w,c
  8669   0101D0  6ED9               	movwf	fsr2l,c
  8670   0101D2  0E00               	movlw	0
  8671   0101D4  2037               	addwfc	(btemp+11)^0,w,c
  8672   0101D6  6EDA               	movwf	fsr2h,c
  8673   0101D8  B8DF               	btfsc	indf2,4,c
  8674   0101DA  EFF1  F080         	goto	u1751
  8675   0101DE  EFF3  F080         	goto	u1750
  8676   0101E2                     u1751:
  8677   0101E2  EF75  F081         	goto	l4174
  8678   0101E6                     u1750:
  8679   0101E6                     
  8680                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  8681                           ;stkvar	_txObj @ sp[(-114)+-3]
  8682   0101E6  0E8B               	movlw	-117
  8683   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8684   0101EC  0E8C               	movlw	-116
  8685   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8686   0101F2  50DF               	movf	indf2,w,c
  8687   0101F4  6E37               	movwf	(btemp+11)^0,c
  8688                           
  8689                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8690   0101F6  0E92               	movlw	-110
  8691   0101F8  C037  FFE3         	movff	btemp+11,plusw1
  8692   0101FC                     
  8693                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  8694                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8695   0101FC  0E93               	movlw	147
  8696   0101FE  24E1               	addwf	fsr1l,w,c
  8697   010200  6ED9               	movwf	fsr2l,c
  8698   010202  0EFF               	movlw	255
  8699   010204  20E2               	addwfc	fsr1h,w,c
  8700   010206  6EDA               	movwf	fsr2h,c
  8701                           
  8702                           ;stkvar	_txObj @ sp[(-114)+-3]
  8703   010208  0E8B               	movlw	-117
  8704   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  8705   01020E  0E8C               	movlw	-116
  8706   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  8707   010214  CFEE F034          	movff	postinc0,btemp+8
  8708   010218  CFEE F035          	movff	postinc0,btemp+9
  8709   01021C  CFEE F036          	movff	postinc0,btemp+10
  8710   010220  CFEE F037          	movff	postinc0,btemp+11
  8711   010224  C035  F034         	movff	btemp+9,btemp+8
  8712   010228  C036  F035         	movff	btemp+10,btemp+9
  8713   01022C  C037  F036         	movff	btemp+11,btemp+10
  8714   010230  6A37               	clrf	(btemp+11)^0,c
  8715   010232  5034               	movf	(btemp+8)^0,w,c
  8716   010234  6EDF               	movwf	indf2,c
  8717   010236                     
  8718                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  8719                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8720   010236  0E94               	movlw	148
  8721   010238  24E1               	addwf	fsr1l,w,c
  8722   01023A  6ED9               	movwf	fsr2l,c
  8723   01023C  0EFF               	movlw	255
  8724   01023E  20E2               	addwfc	fsr1h,w,c
  8725   010240  6EDA               	movwf	fsr2h,c
  8726                           
  8727                           ;stkvar	_txObj @ sp[(-114)+-3]
  8728   010242  0E8B               	movlw	-117
  8729   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  8730   010248  0E8C               	movlw	-116
  8731   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  8732   01024E  CFEE F034          	movff	postinc0,btemp+8
  8733   010252  CFEE F035          	movff	postinc0,btemp+9
  8734   010256  CFEE F036          	movff	postinc0,btemp+10
  8735   01025A  CFEE F037          	movff	postinc0,btemp+11
  8736   01025E  0E11               	movlw	17
  8737   010260  EF37  F081         	goto	u1760
  8738   010264                     u1765:
  8739   010264  90D8               	bcf	status,0,c
  8740   010266  3237               	rrcf	(btemp+11)^0,f,c
  8741   010268  3236               	rrcf	(btemp+10)^0,f,c
  8742   01026A  3235               	rrcf	(btemp+9)^0,f,c
  8743   01026C  3234               	rrcf	(btemp+8)^0,f,c
  8744   01026E                     u1760:
  8745   01026E  2EE8               	decfsz	wreg,f,c
  8746   010270  EF32  F081         	goto	u1765
  8747   010274  5034               	movf	(btemp+8)^0,w,c
  8748   010276  6EDF               	movwf	indf2,c
  8749   010278                     
  8750                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  8751                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8752   010278  0E95               	movlw	149
  8753   01027A  24E1               	addwf	fsr1l,w,c
  8754   01027C  6ED9               	movwf	fsr2l,c
  8755   01027E  0EFF               	movlw	255
  8756   010280  20E2               	addwfc	fsr1h,w,c
  8757   010282  6EDA               	movwf	fsr2h,c
  8758                           
  8759                           ;stkvar	_txObj @ sp[(-114)+-3]
  8760   010284  0E8B               	movlw	-117
  8761   010286  CFE3 F036          	movff	plusw1,btemp+10
  8762   01028A  0E8C               	movlw	-116
  8763   01028C  CFE3 F037          	movff	plusw1,btemp+11
  8764   010290  0E04               	movlw	4
  8765   010292  2436               	addwf	(btemp+10)^0,w,c
  8766   010294  6EE9               	movwf	fsr0l,c
  8767   010296  0E00               	movlw	0
  8768   010298  2037               	addwfc	(btemp+11)^0,w,c
  8769   01029A  6EEA               	movwf	fsr0h,c
  8770   01029C  50EF               	movf	indf0,w,c
  8771   01029E  6E37               	movwf	(btemp+11)^0,c
  8772   0102A0  0E05               	movlw	5
  8773   0102A2  6E2C               	movwf	btemp^0,c
  8774   0102A4                     u1775:
  8775   0102A4  90D8               	bcf	status,0,c
  8776   0102A6  3637               	rlcf	(btemp+11)^0,f,c
  8777   0102A8  2E2C               	decfsz	btemp^0,f,c
  8778   0102AA  EF52  F081         	goto	u1775
  8779                           
  8780                           ;stkvar	_txObj @ sp[(-114)+-3]
  8781   0102AE  0E8B               	movlw	-117
  8782   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8783   0102B4  0E8C               	movlw	-116
  8784   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8785   0102BA  CFEE F030          	movff	postinc0,btemp+4
  8786   0102BE  CFEE F031          	movff	postinc0,btemp+5
  8787   0102C2  CFEE F032          	movff	postinc0,btemp+6
  8788   0102C6  CFEE F033          	movff	postinc0,btemp+7
  8789   0102CA  0E19               	movlw	25
  8790   0102CC  EF6D  F081         	goto	u1780
  8791   0102D0                     u1785:
  8792   0102D0  90D8               	bcf	status,0,c
  8793   0102D2  3233               	rrcf	(btemp+7)^0,f,c
  8794   0102D4  3232               	rrcf	(btemp+6)^0,f,c
  8795   0102D6  3231               	rrcf	(btemp+5)^0,f,c
  8796   0102D8  3230               	rrcf	(btemp+4)^0,f,c
  8797   0102DA                     u1780:
  8798   0102DA  2EE8               	decfsz	wreg,f,c
  8799   0102DC  EF68  F081         	goto	u1785
  8800   0102E0  5030               	movf	(btemp+4)^0,w,c
  8801   0102E2  1037               	iorwf	(btemp+11)^0,w,c
  8802   0102E4  6EDF               	movwf	indf2,c
  8803                           
  8804                           ;can/can.c: 770:     }
  8805   0102E6  EF24  F082         	goto	l4186
  8806   0102EA                     l4174:
  8807                           
  8808                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8809                           ;stkvar	_txObj @ sp[(-114)+-3]
  8810   0102EA  0E8B               	movlw	-117
  8811   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8812   0102F0  0E8C               	movlw	-116
  8813   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8814   0102F6  CFDE F034          	movff	postinc2,btemp+8
  8815   0102FA  CFDE F035          	movff	postinc2,btemp+9
  8816   0102FE  CFDE F036          	movff	postinc2,btemp+10
  8817   010302  CFDE F037          	movff	postinc2,btemp+11
  8818   010306  0E13               	movlw	19
  8819   010308  EF8B  F081         	goto	u1790
  8820   01030C                     u1795:
  8821   01030C  90D8               	bcf	status,0,c
  8822   01030E  3237               	rrcf	(btemp+11)^0,f,c
  8823   010310  3236               	rrcf	(btemp+10)^0,f,c
  8824   010312  3235               	rrcf	(btemp+9)^0,f,c
  8825   010314  3234               	rrcf	(btemp+8)^0,f,c
  8826   010316                     u1790:
  8827   010316  2EE8               	decfsz	wreg,f,c
  8828   010318  EF86  F081         	goto	u1795
  8829   01031C  0EFF               	movlw	255
  8830   01031E  1434               	andwf	(btemp+8)^0,w,c
  8831   010320  6E30               	movwf	(btemp+4)^0,c
  8832   010322  0E07               	movlw	7
  8833   010324  1435               	andwf	(btemp+9)^0,w,c
  8834   010326  6E31               	movwf	(btemp+5)^0,c
  8835   010328  0E00               	movlw	0
  8836   01032A  1436               	andwf	(btemp+10)^0,w,c
  8837   01032C  6E32               	movwf	(btemp+6)^0,c
  8838   01032E  0E00               	movlw	0
  8839   010330  1437               	andwf	(btemp+11)^0,w,c
  8840   010332  6E33               	movwf	(btemp+7)^0,c
  8841                           
  8842                           ;stkvar	_txObj @ sp[(-114)+-3]
  8843   010334  0E8B               	movlw	-117
  8844   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8845   01033A  0E8C               	movlw	-116
  8846   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  8847   010340  0EFF               	movlw	255
  8848   010342  14DE               	andwf	postinc2,w,c
  8849   010344  6E34               	movwf	(btemp+8)^0,c
  8850   010346  0EFF               	movlw	255
  8851   010348  14DE               	andwf	postinc2,w,c
  8852   01034A  6E35               	movwf	(btemp+9)^0,c
  8853   01034C  0E03               	movlw	3
  8854   01034E  14DE               	andwf	postinc2,w,c
  8855   010350  6E36               	movwf	(btemp+10)^0,c
  8856   010352  0E00               	movlw	0
  8857   010354  14DE               	andwf	postinc2,w,c
  8858   010356  6E37               	movwf	(btemp+11)^0,c
  8859   010358  0E0B               	movlw	11
  8860   01035A                     u1805:
  8861   01035A  90D8               	bcf	status,0,c
  8862   01035C  3634               	rlcf	(btemp+8)^0,f,c
  8863   01035E  3635               	rlcf	(btemp+9)^0,f,c
  8864   010360  3636               	rlcf	(btemp+10)^0,f,c
  8865   010362  3637               	rlcf	(btemp+11)^0,f,c
  8866   010364  2EE8               	decfsz	wreg,f,c
  8867   010366  EFAD  F081         	goto	u1805
  8868   01036A  5030               	movf	(btemp+4)^0,w,c
  8869   01036C  1034               	iorwf	(btemp+8)^0,w,c
  8870   01036E  6E2C               	movwf	btemp^0,c
  8871   010370  5031               	movf	(btemp+5)^0,w,c
  8872   010372  1035               	iorwf	(btemp+9)^0,w,c
  8873   010374  6E2D               	movwf	(btemp+1)^0,c
  8874   010376  5032               	movf	(btemp+6)^0,w,c
  8875   010378  1036               	iorwf	(btemp+10)^0,w,c
  8876   01037A  6E2E               	movwf	(btemp+2)^0,c
  8877   01037C  5033               	movf	(btemp+7)^0,w,c
  8878   01037E  1037               	iorwf	(btemp+11)^0,w,c
  8879   010380  6E2F               	movwf	(btemp+3)^0,c
  8880                           
  8881                           ;stkvar	_temp32 @ sp[(-114)+0]
  8882   010382  0E8E               	movlw	-114
  8883   010384  C02C  FFE3         	movff	btemp,plusw1
  8884   010388  0E8F               	movlw	-113
  8885   01038A  C02D  FFE3         	movff	btemp+1,plusw1
  8886   01038E  0E90               	movlw	-112
  8887   010390  C02E  FFE3         	movff	btemp+2,plusw1
  8888   010394  0E91               	movlw	-111
  8889   010396  C02F  FFE3         	movff	btemp+3,plusw1
  8890   01039A                     
  8891                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  8892                           ;stkvar	_temp32 @ sp[(-114)+0]
  8893   01039A  50E1               	movf	fsr1l,w,c
  8894   01039C  0F8E               	addlw	-114
  8895   01039E  6ED9               	movwf	fsr2l,c
  8896   0103A0  50E2               	movf	fsr1h,w,c
  8897   0103A2  6EDA               	movwf	fsr2h,c
  8898   0103A4  0EFF               	movlw	255
  8899   0103A6  22DA               	addwfc	fsr2h,f,c
  8900   0103A8  0EFF               	movlw	255
  8901   0103AA  16DE               	andwf	postinc2,f,c
  8902   0103AC  0EFF               	movlw	255
  8903   0103AE  16DE               	andwf	postinc2,f,c
  8904   0103B0  0EFF               	movlw	255
  8905   0103B2  16DE               	andwf	postinc2,f,c
  8906   0103B4  0E1F               	movlw	31
  8907   0103B6  16DE               	andwf	postinc2,f,c
  8908   0103B8                     
  8909                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  8910                           ;stkvar	_temp32 @ sp[(-114)+0]
  8911                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8912   0103B8  0E8E               	movlw	-114
  8913   0103BA  CFE3 F02C          	movff	plusw1,btemp
  8914   0103BE  0E92               	movlw	-110
  8915   0103C0  C02C  FFE3         	movff	btemp,plusw1
  8916   0103C4                     
  8917                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  8918                           ;stkvar	_temp32 @ sp[(-114)+0]
  8919   0103C4  0E8F               	movlw	143
  8920   0103C6  24E1               	addwf	fsr1l,w,c
  8921   0103C8  6ED9               	movwf	fsr2l,c
  8922   0103CA  0EFF               	movlw	255
  8923   0103CC  20E2               	addwfc	fsr1h,w,c
  8924   0103CE  6EDA               	movwf	fsr2h,c
  8925                           
  8926                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8927   0103D0  0E93               	movlw	147
  8928   0103D2  24E1               	addwf	fsr1l,w,c
  8929   0103D4  6EE9               	movwf	fsr0l,c
  8930   0103D6  0EFF               	movlw	255
  8931   0103D8  20E2               	addwfc	fsr1h,w,c
  8932   0103DA  6EEA               	movwf	fsr0h,c
  8933   0103DC  CFDF FFEF          	movff	indf2,indf0
  8934   0103E0                     
  8935                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  8936                           ;stkvar	_temp32 @ sp[(-114)+0]
  8937   0103E0  0E90               	movlw	144
  8938   0103E2  24E1               	addwf	fsr1l,w,c
  8939   0103E4  6ED9               	movwf	fsr2l,c
  8940   0103E6  0EFF               	movlw	255
  8941   0103E8  20E2               	addwfc	fsr1h,w,c
  8942   0103EA  6EDA               	movwf	fsr2h,c
  8943                           
  8944                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8945   0103EC  0E94               	movlw	148
  8946   0103EE  24E1               	addwf	fsr1l,w,c
  8947   0103F0  6EE9               	movwf	fsr0l,c
  8948   0103F2  0EFF               	movlw	255
  8949   0103F4  20E2               	addwfc	fsr1h,w,c
  8950   0103F6  6EEA               	movwf	fsr0h,c
  8951   0103F8  CFDF FFEF          	movff	indf2,indf0
  8952   0103FC                     
  8953                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  8954                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8955   0103FC  0E95               	movlw	149
  8956   0103FE  24E1               	addwf	fsr1l,w,c
  8957   010400  6ED9               	movwf	fsr2l,c
  8958   010402  0EFF               	movlw	255
  8959   010404  20E2               	addwfc	fsr1h,w,c
  8960   010406  6EDA               	movwf	fsr2h,c
  8961                           
  8962                           ;stkvar	_temp32 @ sp[(-114)+0]
  8963   010408  0E91               	movlw	145
  8964   01040A  24E1               	addwf	fsr1l,w,c
  8965   01040C  6EE9               	movwf	fsr0l,c
  8966   01040E  0EFF               	movlw	255
  8967   010410  20E2               	addwfc	fsr1h,w,c
  8968   010412  6EEA               	movwf	fsr0h,c
  8969   010414  50EF               	movf	indf0,w,c
  8970   010416  6E37               	movwf	(btemp+11)^0,c
  8971                           
  8972                           ;stkvar	_txObj @ sp[(-114)+-3]
  8973   010418  0E8B               	movlw	-117
  8974   01041A  CFE3 F034          	movff	plusw1,btemp+8
  8975   01041E  0E8C               	movlw	-116
  8976   010420  CFE3 F035          	movff	plusw1,btemp+9
  8977   010424  0E04               	movlw	4
  8978   010426  2434               	addwf	(btemp+8)^0,w,c
  8979   010428  6EE9               	movwf	fsr0l,c
  8980   01042A  0E00               	movlw	0
  8981   01042C  2035               	addwfc	(btemp+9)^0,w,c
  8982   01042E  6EEA               	movwf	fsr0h,c
  8983   010430  50EF               	movf	indf0,w,c
  8984   010432  6E36               	movwf	(btemp+10)^0,c
  8985   010434  0E05               	movlw	5
  8986   010436  6E2C               	movwf	btemp^0,c
  8987   010438                     u1815:
  8988   010438  90D8               	bcf	status,0,c
  8989   01043A  3636               	rlcf	(btemp+10)^0,f,c
  8990   01043C  2E2C               	decfsz	btemp^0,f,c
  8991   01043E  EF1C  F082         	goto	u1815
  8992   010442  5036               	movf	(btemp+10)^0,w,c
  8993   010444  1037               	iorwf	(btemp+11)^0,w,c
  8994   010446  6EDF               	movwf	indf2,c
  8995   010448                     l4186:
  8996                           
  8997                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  8998                           ;stkvar	_txObj @ sp[(-114)+-3]
  8999   010448  0E8B               	movlw	-117
  9000   01044A  CFE3 F036          	movff	plusw1,btemp+10
  9001   01044E  0E8C               	movlw	-116
  9002   010450  CFE3 F037          	movff	plusw1,btemp+11
  9003   010454  0E06               	movlw	6
  9004   010456  2436               	addwf	(btemp+10)^0,w,c
  9005   010458  6ED9               	movwf	fsr2l,c
  9006   01045A  0E00               	movlw	0
  9007   01045C  2037               	addwfc	(btemp+11)^0,w,c
  9008   01045E  6EDA               	movwf	fsr2h,c
  9009                           
  9010                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9011   010460  0E96               	movlw	150
  9012   010462  24E1               	addwf	fsr1l,w,c
  9013   010464  6EE9               	movwf	fsr0l,c
  9014   010466  0EFF               	movlw	255
  9015   010468  20E2               	addwfc	fsr1h,w,c
  9016   01046A  6EEA               	movwf	fsr0h,c
  9017   01046C  CFDF FFEF          	movff	indf2,indf0
  9018   010470                     
  9019                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  9020                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9021   010470  0E97               	movlw	151
  9022   010472  24E1               	addwf	fsr1l,w,c
  9023   010474  6ED9               	movwf	fsr2l,c
  9024   010476  0EFF               	movlw	255
  9025   010478  20E2               	addwfc	fsr1h,w,c
  9026   01047A  6EDA               	movwf	fsr2h,c
  9027                           
  9028                           ;stkvar	_txObj @ sp[(-114)+-3]
  9029   01047C  0E8B               	movlw	-117
  9030   01047E  CFE3 F036          	movff	plusw1,btemp+10
  9031   010482  0E8C               	movlw	-116
  9032   010484  CFE3 F037          	movff	plusw1,btemp+11
  9033   010488  0E07               	movlw	7
  9034   01048A  2436               	addwf	(btemp+10)^0,w,c
  9035   01048C  6EE9               	movwf	fsr0l,c
  9036   01048E  0E00               	movlw	0
  9037   010490  2037               	addwfc	(btemp+11)^0,w,c
  9038   010492  6EEA               	movwf	fsr0h,c
  9039   010494  50EF               	movf	indf0,w,c
  9040   010496  6E37               	movwf	(btemp+11)^0,c
  9041                           
  9042                           ;stkvar	_txObj @ sp[(-114)+-3]
  9043   010498  0E8B               	movlw	-117
  9044   01049A  CFE3 F034          	movff	plusw1,btemp+8
  9045   01049E  0E8C               	movlw	-116
  9046   0104A0  CFE3 F035          	movff	plusw1,btemp+9
  9047   0104A4  0E08               	movlw	8
  9048   0104A6  2434               	addwf	(btemp+8)^0,w,c
  9049   0104A8  6EE9               	movwf	fsr0l,c
  9050   0104AA  0E00               	movlw	0
  9051   0104AC  2035               	addwfc	(btemp+9)^0,w,c
  9052   0104AE  6EEA               	movwf	fsr0h,c
  9053   0104B0  50EF               	movf	indf0,w,c
  9054   0104B2  6E36               	movwf	(btemp+10)^0,c
  9055   0104B4  90D8               	bcf	status,0,c
  9056   0104B6  3436               	rlcf	(btemp+10)^0,w,c
  9057   0104B8  1037               	iorwf	(btemp+11)^0,w,c
  9058   0104BA  6EDF               	movwf	indf2,c
  9059   0104BC                     
  9060                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  9061                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9062   0104BC  0E98               	movlw	152
  9063   0104BE  24E1               	addwf	fsr1l,w,c
  9064   0104C0  6ED9               	movwf	fsr2l,c
  9065   0104C2  0EFF               	movlw	255
  9066   0104C4  20E2               	addwfc	fsr1h,w,c
  9067   0104C6  6EDA               	movwf	fsr2h,c
  9068                           
  9069                           ;stkvar	_txObj @ sp[(-114)+-3]
  9070   0104C8  0E8B               	movlw	-117
  9071   0104CA  CFE3 F036          	movff	plusw1,btemp+10
  9072   0104CE  0E8C               	movlw	-116
  9073   0104D0  CFE3 F037          	movff	plusw1,btemp+11
  9074   0104D4  0E08               	movlw	8
  9075   0104D6  2436               	addwf	(btemp+10)^0,w,c
  9076   0104D8  6EE9               	movwf	fsr0l,c
  9077   0104DA  0E00               	movlw	0
  9078   0104DC  2037               	addwfc	(btemp+11)^0,w,c
  9079   0104DE  6EEA               	movwf	fsr0h,c
  9080   0104E0  CFEE F034          	movff	postinc0,btemp+8
  9081   0104E4  CFEE F035          	movff	postinc0,btemp+9
  9082   0104E8  CFEE F036          	movff	postinc0,btemp+10
  9083   0104EC  CFEE F037          	movff	postinc0,btemp+11
  9084   0104F0  0E08               	movlw	8
  9085   0104F2  EF80  F082         	goto	u1820
  9086   0104F6                     u1825:
  9087   0104F6  90D8               	bcf	status,0,c
  9088   0104F8  3237               	rrcf	(btemp+11)^0,f,c
  9089   0104FA  3236               	rrcf	(btemp+10)^0,f,c
  9090   0104FC  3235               	rrcf	(btemp+9)^0,f,c
  9091   0104FE  3234               	rrcf	(btemp+8)^0,f,c
  9092   010500                     u1820:
  9093   010500  2EE8               	decfsz	wreg,f,c
  9094   010502  EF7B  F082         	goto	u1825
  9095   010506  5034               	movf	(btemp+8)^0,w,c
  9096   010508  6EDF               	movwf	indf2,c
  9097   01050A                     
  9098                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  9099                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9100   01050A  0E99               	movlw	153
  9101   01050C  24E1               	addwf	fsr1l,w,c
  9102   01050E  6ED9               	movwf	fsr2l,c
  9103   010510  0EFF               	movlw	255
  9104   010512  20E2               	addwfc	fsr1h,w,c
  9105   010514  6EDA               	movwf	fsr2h,c
  9106                           
  9107                           ;stkvar	_txObj @ sp[(-114)+-3]
  9108   010516  0E8B               	movlw	-117
  9109   010518  CFE3 F036          	movff	plusw1,btemp+10
  9110   01051C  0E8C               	movlw	-116
  9111   01051E  CFE3 F037          	movff	plusw1,btemp+11
  9112   010522  0E08               	movlw	8
  9113   010524  2436               	addwf	(btemp+10)^0,w,c
  9114   010526  6EE9               	movwf	fsr0l,c
  9115   010528  0E00               	movlw	0
  9116   01052A  2037               	addwfc	(btemp+11)^0,w,c
  9117   01052C  6EEA               	movwf	fsr0h,c
  9118   01052E  CFEE F034          	movff	postinc0,btemp+8
  9119   010532  CFEE F035          	movff	postinc0,btemp+9
  9120   010536  CFEE F036          	movff	postinc0,btemp+10
  9121   01053A  CFEE F037          	movff	postinc0,btemp+11
  9122   01053E  0E10               	movlw	16
  9123   010540  EFA7  F082         	goto	u1830
  9124   010544                     u1835:
  9125   010544  90D8               	bcf	status,0,c
  9126   010546  3237               	rrcf	(btemp+11)^0,f,c
  9127   010548  3236               	rrcf	(btemp+10)^0,f,c
  9128   01054A  3235               	rrcf	(btemp+9)^0,f,c
  9129   01054C  3234               	rrcf	(btemp+8)^0,f,c
  9130   01054E                     u1830:
  9131   01054E  2EE8               	decfsz	wreg,f,c
  9132   010550  EFA2  F082         	goto	u1835
  9133   010554  5034               	movf	(btemp+8)^0,w,c
  9134   010556  6EDF               	movwf	indf2,c
  9135   010558                     
  9136                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9137                           ;stkvar	_i @ sp[(-114)+112]
  9138   010558  0EFE               	movlw	-2
  9139   01055A  6AE3               	clrf	plusw1,c
  9140   01055C  EFD7  F082         	goto	l4200
  9141   010560                     l4196:
  9142                           
  9143                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9144                           ;stkvar	_i @ sp[(-114)+112]
  9145   010560  0EFE               	movlw	-2
  9146   010562  CFE3 F037          	movff	plusw1,btemp+11
  9147                           
  9148                           ;stkvar	_txd @ sp[(-114)+-5]
  9149   010566  0E89               	movlw	-119
  9150   010568  CFE3 F034          	movff	plusw1,btemp+8
  9151   01056C  0E8A               	movlw	-118
  9152   01056E  CFE3 F035          	movff	plusw1,btemp+9
  9153   010572  5037               	movf	(btemp+11)^0,w,c
  9154   010574  2434               	addwf	(btemp+8)^0,w,c
  9155   010576  6ED9               	movwf	fsr2l,c
  9156   010578  0E00               	movlw	0
  9157   01057A  2035               	addwfc	(btemp+9)^0,w,c
  9158   01057C  6EDA               	movwf	fsr2h,c
  9159                           
  9160                           ;stkvar	_i @ sp[(-114)+112]
  9161   01057E  0EFE               	movlw	-2
  9162   010580  50E3               	movf	plusw1,w,c
  9163   010582  6E36               	movwf	(btemp+10)^0,c
  9164   010584  6A37               	clrf	(btemp+11)^0,c
  9165   010586  0E08               	movlw	8
  9166   010588  2636               	addwf	(btemp+10)^0,f,c
  9167   01058A  0E00               	movlw	0
  9168   01058C  2237               	addwfc	(btemp+11)^0,f,c
  9169                           
  9170                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9171   01058E  0E92               	movlw	146
  9172   010590  24E1               	addwf	fsr1l,w,c
  9173   010592  6E34               	movwf	(btemp+8)^0,c
  9174   010594  0EFF               	movlw	255
  9175   010596  20E2               	addwfc	fsr1h,w,c
  9176   010598  6E35               	movwf	(btemp+9)^0,c
  9177   01059A  5036               	movf	(btemp+10)^0,w,c
  9178   01059C  2434               	addwf	(btemp+8)^0,w,c
  9179   01059E  6EE9               	movwf	fsr0l,c
  9180   0105A0  5037               	movf	(btemp+11)^0,w,c
  9181   0105A2  2035               	addwfc	(btemp+9)^0,w,c
  9182   0105A4  6EEA               	movwf	fsr0h,c
  9183   0105A6  CFDF FFEF          	movff	indf2,indf0
  9184   0105AA                     
  9185                           ;can/can.c: 790:     }
  9186                           ;stkvar	_i @ sp[(-114)+112]
  9187   0105AA  0EFE               	movlw	-2
  9188   0105AC  2AE3               	incf	plusw1,f,c
  9189   0105AE                     l4200:
  9190                           
  9191                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9192                           ;stkvar	_i @ sp[(-114)+112]
  9193   0105AE  0EFE               	movlw	-2
  9194   0105B0  CFE3 F037          	movff	plusw1,btemp+11
  9195   0105B4  C037  F030         	movff	btemp+11,btemp+4
  9196   0105B8  6A31               	clrf	(btemp+5)^0,c
  9197   0105BA  6A32               	clrf	(btemp+6)^0,c
  9198   0105BC  6A33               	clrf	(btemp+7)^0,c
  9199   0105BE  0E85               	movlw	-123
  9200   0105C0  50E3               	movf	plusw1,w,c
  9201   0105C2  5C30               	subwf	(btemp+4)^0,w,c
  9202   0105C4  0E86               	movlw	-122
  9203   0105C6  50E3               	movf	plusw1,w,c
  9204   0105C8  5831               	subwfb	(btemp+5)^0,w,c
  9205   0105CA  0E87               	movlw	-121
  9206   0105CC  50E3               	movf	plusw1,w,c
  9207   0105CE  5832               	subwfb	(btemp+6)^0,w,c
  9208   0105D0  0E88               	movlw	-120
  9209   0105D2  50E3               	movf	plusw1,w,c
  9210   0105D4  5833               	subwfb	(btemp+7)^0,w,c
  9211   0105D6  A0D8               	btfss	status,0,c
  9212   0105D8  EFF0  F082         	goto	u1841
  9213   0105DC  EFF2  F082         	goto	u1840
  9214   0105E0                     u1841:
  9215   0105E0  EFB0  F082         	goto	l4196
  9216   0105E4                     u1840:
  9217   0105E4                     
  9218                           ;can/can.c: 793:     uint16_t n = 0;
  9219                           ;stkvar	_n @ sp[(-114)+109]
  9220   0105E4  0EFB               	movlw	-5
  9221   0105E6  6AE3               	clrf	plusw1,c
  9222   0105E8  0EFC               	movlw	-4
  9223   0105EA  6AE3               	clrf	plusw1,c
  9224   0105EC                     
  9225                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9226                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9227   0105EC  0E85               	movlw	-123
  9228   0105EE  CFE3 F037          	movff	plusw1,btemp+11
  9229   0105F2  0E03               	movlw	3
  9230   0105F4  1637               	andwf	(btemp+11)^0,f,c
  9231   0105F6  B4D8               	btfsc	status,2,c
  9232   0105F8  EF00  F083         	goto	u1851
  9233   0105FC  EF02  F083         	goto	u1850
  9234   010600                     u1851:
  9235   010600  EF51  F083         	goto	l4220
  9236   010604                     u1850:
  9237   010604                     
  9238                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9239                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9240   010604  0E85               	movlw	-123
  9241   010606  CFE3 F036          	movff	plusw1,btemp+10
  9242   01060A  0E86               	movlw	-122
  9243   01060C  CFE3 F037          	movff	plusw1,btemp+11
  9244   010610  0E03               	movlw	3
  9245   010612  1636               	andwf	(btemp+10)^0,f,c
  9246   010614  0E00               	movlw	0
  9247   010616  1637               	andwf	(btemp+11)^0,f,c
  9248   010618  5036               	movf	(btemp+10)^0,w,c
  9249   01061A  0804               	sublw	4
  9250   01061C  6E34               	movwf	(btemp+8)^0,c
  9251   01061E  5037               	movf	(btemp+11)^0,w,c
  9252   010620  A0D8               	btfss	status,0,c
  9253   010622  2AE8               	incf	wreg,f,c
  9254   010624  0800               	sublw	0
  9255   010626  6E35               	movwf	(btemp+9)^0,c
  9256                           
  9257                           ;stkvar	_n @ sp[(-114)+109]
  9258   010628  0EFB               	movlw	-5
  9259   01062A  C034  FFE3         	movff	btemp+8,plusw1
  9260   01062E  0EFC               	movlw	-4
  9261   010630  C035  FFE3         	movff	btemp+9,plusw1
  9262   010634                     
  9263                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9264   010634  0E08               	movlw	8
  9265   010636  6E37               	movwf	(btemp+11)^0,c
  9266                           
  9267                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9268   010638  0E85               	movlw	-123
  9269   01063A  50E3               	movf	plusw1,w,c
  9270   01063C  2437               	addwf	(btemp+11)^0,w,c
  9271   01063E  6E36               	movwf	(btemp+10)^0,c
  9272                           
  9273                           ;stkvar	_i @ sp[(-114)+112]
  9274   010640  0EFE               	movlw	-2
  9275   010642  C036  FFE3         	movff	btemp+10,plusw1
  9276   010646                     
  9277                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9278                           ;stkvar	_j @ sp[(-114)+113]
  9279   010646  0EFF               	movlw	-1
  9280   010648  6AE3               	clrf	plusw1,c
  9281   01064A  EF40  F083         	goto	l4218
  9282   01064E                     l4214:
  9283                           
  9284                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9285                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9286   01064E  0E92               	movlw	146
  9287   010650  24E1               	addwf	fsr1l,w,c
  9288   010652  6E36               	movwf	(btemp+10)^0,c
  9289   010654  0EFF               	movlw	255
  9290   010656  20E2               	addwfc	fsr1h,w,c
  9291   010658  6E37               	movwf	(btemp+11)^0,c
  9292                           
  9293                           ;stkvar	_i @ sp[(-114)+112]
  9294   01065A  0EFE               	movlw	-2
  9295   01065C  50E3               	movf	plusw1,w,c
  9296   01065E  2636               	addwf	(btemp+10)^0,f,c
  9297   010660  0E00               	movlw	0
  9298   010662  2237               	addwfc	(btemp+11)^0,f,c
  9299                           
  9300                           ;stkvar	_j @ sp[(-114)+113]
  9301   010664  0EFF               	movlw	-1
  9302   010666  50E3               	movf	plusw1,w,c
  9303   010668  2636               	addwf	(btemp+10)^0,f,c
  9304   01066A  0E00               	movlw	0
  9305   01066C  2237               	addwfc	(btemp+11)^0,f,c
  9306   01066E  0E08               	movlw	8
  9307   010670  2436               	addwf	(btemp+10)^0,w,c
  9308   010672  6ED9               	movwf	fsr2l,c
  9309   010674  0E00               	movlw	0
  9310   010676  2037               	addwfc	(btemp+11)^0,w,c
  9311   010678  6EDA               	movwf	fsr2h,c
  9312   01067A  6ADF               	clrf	indf2,c
  9313   01067C                     
  9314                           ;can/can.c: 803:         }
  9315                           ;stkvar	_j @ sp[(-114)+113]
  9316   01067C  0EFF               	movlw	-1
  9317   01067E  2AE3               	incf	plusw1,f,c
  9318   010680                     l4218:
  9319                           
  9320                           ;stkvar	_n @ sp[(-114)+109]
  9321                           ;stkvar	_j @ sp[(-114)+113]
  9322   010680  0EFF               	movlw	-1
  9323   010682  50E3               	movf	plusw1,w,c
  9324   010684  6E36               	movwf	(btemp+10)^0,c
  9325   010686  6A37               	clrf	(btemp+11)^0,c
  9326   010688  0EFB               	movlw	-5
  9327   01068A  50E3               	movf	plusw1,w,c
  9328   01068C  5C36               	subwf	(btemp+10)^0,w,c
  9329   01068E  0EFC               	movlw	-4
  9330   010690  50E3               	movf	plusw1,w,c
  9331   010692  5837               	subwfb	(btemp+11)^0,w,c
  9332   010694  A0D8               	btfss	status,0,c
  9333   010696  EF4F  F083         	goto	u1861
  9334   01069A  EF51  F083         	goto	u1860
  9335   01069E                     u1861:
  9336   01069E  EF27  F083         	goto	l4214
  9337   0106A2                     u1860:
  9338   0106A2                     l4220:
  9339                           
  9340                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9341                           ;stkvar	_n @ sp[(-114)+109]
  9342                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9343   0106A2  0E85               	movlw	-123
  9344   0106A4  CFE3 F036          	movff	plusw1,btemp+10
  9345   0106A8  0E86               	movlw	-122
  9346   0106AA  CFE3 F037          	movff	plusw1,btemp+11
  9347   0106AE  0EFB               	movlw	-5
  9348   0106B0  50E3               	movf	plusw1,w,c
  9349   0106B2  2636               	addwf	(btemp+10)^0,f,c
  9350   0106B4  0EFC               	movlw	-4
  9351   0106B6  50E3               	movf	plusw1,w,c
  9352   0106B8  2237               	addwfc	(btemp+11)^0,f,c
  9353   0106BA  0E08               	movlw	8
  9354   0106BC  2636               	addwf	(btemp+10)^0,f,c
  9355   0106BE  0E00               	movlw	0
  9356   0106C0  2237               	addwfc	(btemp+11)^0,f,c
  9357   0106C2  C036  FFE6         	movff	btemp+10,postinc1
  9358   0106C6  C037  FFE6         	movff	btemp+11,postinc1
  9359                           
  9360                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9361   0106CA  0E90               	movlw	144
  9362   0106CC  24E1               	addwf	fsr1l,w,c
  9363   0106CE  6E2C               	movwf	btemp^0,c
  9364   0106D0  0EFF               	movlw	255
  9365   0106D2  20E2               	addwfc	fsr1h,w,c
  9366   0106D4  6E2D               	movwf	(btemp+1)^0,c
  9367   0106D6  C02C  FFE6         	movff	btemp,postinc1
  9368   0106DA  C02D  FFE6         	movff	btemp+1,postinc1
  9369                           
  9370                           ;stkvar	_a @ sp[(-118)+97]
  9371   0106DE  0EEB               	movlw	-21
  9372   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9373   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9374   0106E8  EC38  F099         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9375                           
  9376                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9377   0106EC  0EFD               	movlw	-3
  9378   0106EE  C02C  FFE3         	movff	btemp,plusw1
  9379   0106F2                     
  9380                           ;can/can.c: 807:     if (spiTransferError) {
  9381                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9382   0106F2  0EFD               	movlw	-3
  9383   0106F4  50E3               	movf	plusw1,w,c
  9384   0106F6  B4D8               	btfsc	status,2,c
  9385   0106F8  EF80  F083         	goto	u1871
  9386   0106FC  EF82  F083         	goto	u1870
  9387   010700                     u1871:
  9388   010700  EF86  F083         	goto	l4228
  9389   010704                     u1870:
  9390   010704                     
  9391                           ;can/can.c: 808:         return -4;
  9392   010704  0EFC               	movlw	252
  9393   010706  6E2C               	movwf	btemp^0,c
  9394   010708  EFA1  F083         	goto	l264
  9395   01070C                     l4228:
  9396                           
  9397                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9398                           ;stkvar	_flush @ sp[(-114)+-10]
  9399   01070C  0E84               	movlw	-124
  9400   01070E  50E3               	movf	plusw1,w,c
  9401   010710  6EE6               	movwf	postinc1,c
  9402                           
  9403                           ;stkvar	_channel @ sp[(-115)+-1]
  9404   010712  0E8C               	movlw	-116
  9405   010714  50E3               	movf	plusw1,w,c
  9406   010716  6EE6               	movwf	postinc1,c
  9407   010718  EC8C  F09F         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9408                           
  9409                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9410   01071C  0EFD               	movlw	-3
  9411   01071E  C02C  FFE3         	movff	btemp,plusw1
  9412   010722                     
  9413                           ;can/can.c: 813:     if (spiTransferError) {
  9414                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9415   010722  0EFD               	movlw	-3
  9416   010724  50E3               	movf	plusw1,w,c
  9417   010726  B4D8               	btfsc	status,2,c
  9418   010728  EF98  F083         	goto	u1881
  9419   01072C  EF9A  F083         	goto	u1880
  9420   010730                     u1881:
  9421   010730  EF9E  F083         	goto	l4236
  9422   010734                     u1880:
  9423   010734                     
  9424                           ;can/can.c: 814:         return -5;
  9425   010734  0EFB               	movlw	251
  9426   010736  6E2C               	movwf	btemp^0,c
  9427   010738  EFA1  F083         	goto	l264
  9428   01073C                     l4236:
  9429                           
  9430                           ;can/can.c: 817:     return spiTransferError;
  9431                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9432   01073C  0EFD               	movlw	-3
  9433   01073E  CFE3 F02C          	movff	plusw1,btemp
  9434   010742                     l264:
  9435                           
  9436                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9437   010742  0E84               	movlw	132
  9438   010744  26E1               	addwf	fsr1l,f,c
  9439   010746  0EFF               	movlw	255
  9440   010748  22E2               	addwfc	fsr1h,f,c
  9441   01074A  0012               	return		;funcret
  9442   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9443                           	callstack 0
  9444                           
  9445 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9446 ;; Defined at:
  9447 ;;		line 383 in file "can/can.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  address         2  [STACK] unsigned short 
  9450 ;;  txd             2  [STACK] PTR unsigned char 
  9451 ;;		 -> txd(200), txBuffer(76), 
  9452 ;;  nBytes          2  [STACK] unsigned short 
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  i               2  [STACK] unsigned short 
  9455 ;;  spiTransferS    2  [STACK] unsigned short 
  9456 ;;  spiTransferE    1  [STACK] char 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1  [STACK] char 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;Total ram usage:        0 bytes
  9471 ;; Hardware stack levels used: 1
  9472 ;; Hardware stack levels required when called: 8
  9473 ;; This function calls:
  9474 ;;		_SpiTransfer
  9475 ;; This function is called by:
  9476 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9477 ;; This function uses a reentrant model
  9478 ;;
  9479                           
  9480                           	psect	text26
  9481   013270                     __ptext26:
  9482                           	callstack 0
  9483   013270                     _DRV_CANFDSPI_WriteByteArray:
  9484                           	callstack 0
  9485                           
  9486                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9487   013270  0E05               	movlw	5
  9488   013272  26E1               	addwf	fsr1l,f,c
  9489   013274  0E00               	movlw	0
  9490   013276  22E2               	addwfc	fsr1h,f,c
  9491   013278                     
  9492                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9493                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9494   013278  0EF5               	movlw	-11
  9495   01327A  50E3               	movf	plusw1,w,c
  9496   01327C  0F02               	addlw	2
  9497   01327E  6E36               	movwf	(btemp+10)^0,c
  9498   013280  0EF6               	movlw	-10
  9499   013282  CFE3 F037          	movff	plusw1,btemp+11
  9500   013286  0E00               	movlw	0
  9501   013288  2237               	addwfc	(btemp+11)^0,f,c
  9502                           
  9503                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9504   01328A  0EFD               	movlw	-3
  9505   01328C  C036  FFE3         	movff	btemp+10,plusw1
  9506   013290  0EFE               	movlw	-2
  9507   013292  C037  FFE3         	movff	btemp+11,plusw1
  9508   013296                     
  9509                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9510                           ;stkvar	_address @ sp[(-5)+-2]
  9511   013296  0EFA               	movlw	250
  9512   013298  24E1               	addwf	fsr1l,w,c
  9513   01329A  6ED9               	movwf	fsr2l,c
  9514   01329C  0EFF               	movlw	255
  9515   01329E  20E2               	addwfc	fsr1h,w,c
  9516   0132A0  6EDA               	movwf	fsr2h,c
  9517   0132A2  50DF               	movf	indf2,w,c
  9518   0132A4  0B0F               	andlw	15
  9519   0132A6  0F20               	addlw	32
  9520   0132A8  0101               	movlb	1	; () banked
  9521   0132AA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9522   0132AC                     
  9523                           ; BSR set to: 1
  9524                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9525                           ;stkvar	_address @ sp[(-5)+-2]
  9526   0132AC  0EF9               	movlw	-7
  9527   0132AE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9528   0132B2                     
  9529                           ; BSR set to: 1
  9530                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9531   0132B2  0E02               	movlw	2
  9532   0132B4  6E36               	movwf	(btemp+10)^0,c
  9533   0132B6  0E00               	movlw	0
  9534   0132B8  6E37               	movwf	(btemp+11)^0,c
  9535                           
  9536                           ;stkvar	_i @ sp[(-5)+0]
  9537   0132BA  0EFB               	movlw	-5
  9538   0132BC  C036  FFE3         	movff	btemp+10,plusw1
  9539   0132C0  0EFC               	movlw	-4
  9540   0132C2  C037  FFE3         	movff	btemp+11,plusw1
  9541   0132C6  EF94  F099         	goto	l4026
  9542   0132CA                     l4022:
  9543                           
  9544                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9545                           ;stkvar	_i @ sp[(-5)+0]
  9546                           ;stkvar	_txd @ sp[(-5)+-4]
  9547   0132CA  0EF7               	movlw	-9
  9548   0132CC  CFE3 F036          	movff	plusw1,btemp+10
  9549   0132D0  0EF8               	movlw	-8
  9550   0132D2  CFE3 F037          	movff	plusw1,btemp+11
  9551   0132D6  0EFB               	movlw	-5
  9552   0132D8  50E3               	movf	plusw1,w,c
  9553   0132DA  2636               	addwf	(btemp+10)^0,f,c
  9554   0132DC  0EFC               	movlw	-4
  9555   0132DE  50E3               	movf	plusw1,w,c
  9556   0132E0  2237               	addwfc	(btemp+11)^0,f,c
  9557   0132E2  0EFE               	movlw	254
  9558   0132E4  2436               	addwf	(btemp+10)^0,w,c
  9559   0132E6  6ED9               	movwf	fsr2l,c
  9560   0132E8  0EFF               	movlw	255
  9561   0132EA  2037               	addwfc	(btemp+11)^0,w,c
  9562   0132EC  6EDA               	movwf	fsr2h,c
  9563                           
  9564                           ;stkvar	_i @ sp[(-5)+0]
  9565   0132EE  0EFB               	movlw	-5
  9566   0132F0  CFE3 F036          	movff	plusw1,btemp+10
  9567   0132F4  0EFC               	movlw	-4
  9568   0132F6  CFE3 F037          	movff	plusw1,btemp+11
  9569   0132FA  0E00               	movlw	low _spiTransmitBuffer
  9570   0132FC  2436               	addwf	(btemp+10)^0,w,c
  9571   0132FE  6EE9               	movwf	fsr0l,c
  9572   013300  0E01               	movlw	high _spiTransmitBuffer
  9573   013302  2037               	addwfc	(btemp+11)^0,w,c
  9574   013304  6EEA               	movwf	fsr0h,c
  9575   013306  CFDF FFEF          	movff	indf2,indf0
  9576   01330A                     
  9577                           ;can/can.c: 397:     }
  9578                           ;stkvar	_i @ sp[(-5)+0]
  9579   01330A  0EFB               	movlw	-5
  9580   01330C  50E3               	movf	plusw1,w,c
  9581   01330E  0F01               	addlw	1
  9582   013310  6E2C               	movwf	btemp^0,c
  9583   013312  0EFB               	movlw	-5
  9584   013314  C02C  FFE3         	movff	btemp,plusw1
  9585   013318  6A2C               	clrf	btemp^0,c
  9586   01331A  0EFC               	movlw	-4
  9587   01331C  50E3               	movf	plusw1,w,c
  9588   01331E  202C               	addwfc	btemp^0,w,c
  9589   013320  6E2C               	movwf	btemp^0,c
  9590   013322  0EFC               	movlw	-4
  9591   013324  C02C  FFE3         	movff	btemp,plusw1
  9592   013328                     l4026:
  9593                           
  9594                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9595   013328  0EFD               	movlw	-3
  9596   01332A  CFE3 F036          	movff	plusw1,btemp+10
  9597   01332E  0EFE               	movlw	-2
  9598   013330  CFE3 F037          	movff	plusw1,btemp+11
  9599                           
  9600                           ;stkvar	_i @ sp[(-5)+0]
  9601   013334  0EFB               	movlw	-5
  9602   013336  CFE3 F034          	movff	plusw1,btemp+8
  9603   01333A  0EFC               	movlw	-4
  9604   01333C  CFE3 F035          	movff	plusw1,btemp+9
  9605   013340  5036               	movf	(btemp+10)^0,w,c
  9606   013342  5C34               	subwf	(btemp+8)^0,w,c
  9607   013344  5037               	movf	(btemp+11)^0,w,c
  9608   013346  5835               	subwfb	(btemp+9)^0,w,c
  9609   013348  A0D8               	btfss	status,0,c
  9610   01334A  EFA9  F099         	goto	u1641
  9611   01334E  EFAB  F099         	goto	u1640
  9612   013352                     u1641:
  9613   013352  EF65  F099         	goto	l4022
  9614   013356                     u1640:
  9615   013356                     
  9616                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  9617                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9618   013356  0EFD               	movlw	-3
  9619   013358  CFE3 FFE6          	movff	plusw1,postinc1
  9620   01335C  CFE3 FFE6          	movff	plusw1,postinc1
  9621   013360  0E00               	movlw	low _spiReceiveBuffer
  9622   013362  6EE6               	movwf	postinc1,c
  9623   013364  0E02               	movlw	high _spiReceiveBuffer
  9624   013366  6EE6               	movwf	postinc1,c
  9625   013368  0E00               	movlw	low _spiTransmitBuffer
  9626   01336A  6EE6               	movwf	postinc1,c
  9627   01336C  0E01               	movlw	high _spiTransmitBuffer
  9628   01336E  6EE6               	movwf	postinc1,c
  9629   013370  ECC2  F09D         	call	_SpiTransfer	;wreg free
  9630                           
  9631                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9632   013374  0EFF               	movlw	-1
  9633   013376  C02C  FFE3         	movff	btemp,plusw1
  9634   01337A                     
  9635                           ;can/can.c: 401:     return spiTransferError;
  9636                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9637   01337A  0EFF               	movlw	-1
  9638   01337C  CFE3 F02C          	movff	plusw1,btemp
  9639   013380                     
  9640                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9641   013380  0EF5               	movlw	245
  9642   013382  26E1               	addwf	fsr1l,f,c
  9643   013384  0EFF               	movlw	255
  9644   013386  22E2               	addwfc	fsr1h,f,c
  9645   013388  0012               	return		;funcret
  9646   01338A                     __end_of_DRV_CANFDSPI_WriteByteArray:
  9647                           	callstack 0
  9648                           
  9649 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  9650 ;; Defined at:
  9651 ;;		line 880 in file "can/can.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  channel         1  [STACK] enum E5287
  9654 ;;  flush           1  [STACK] _Bool 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  9657 ;;  a               2  [STACK] unsigned short 
  9658 ;;  spiTransferE    1  [STACK] char 
  9659 ;; Return value:  Size  Location     Type
  9660 ;;                  1  [STACK] char 
  9661 ;; Registers used:
  9662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  9663 ;; Tracked objects:
  9664 ;;		On entry : 0/0
  9665 ;;		On exit  : 0/0
  9666 ;;		Unchanged: 0/0
  9667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9672 ;;Total ram usage:        0 bytes
  9673 ;; Hardware stack levels used: 1
  9674 ;; Hardware stack levels required when called: 9
  9675 ;; This function calls:
  9676 ;;		_DRV_CANFDSPI_WriteByte
  9677 ;; This function is called by:
  9678 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9679 ;; This function uses a reentrant model
  9680 ;;
  9681                           
  9682                           	psect	text27
  9683   013F18                     __ptext27:
  9684                           	callstack 0
  9685   013F18                     _DRV_CANFDSPI_TransmitChannelUpdate:
  9686                           	callstack 0
  9687                           
  9688                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9689   013F18  0E08               	movlw	8
  9690   013F1A  26E1               	addwf	fsr1l,f,c
  9691   013F1C  0E00               	movlw	0
  9692   013F1E  22E2               	addwfc	fsr1h,f,c
  9693   013F20                     
  9694                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  9695                           ;stkvar	_channel @ sp[(-8)+-1]
  9696   013F20  0EF7               	movlw	-9
  9697   013F22  50E3               	movf	plusw1,w,c
  9698   013F24  0D0C               	mullw	12
  9699   013F26  0E51               	movlw	81
  9700   013F28  26F3               	addwf	243,f,c
  9701   013F2A  0E00               	movlw	0
  9702   013F2C  22F4               	addwfc	244,f,c
  9703                           
  9704                           ;stkvar	_a @ sp[(-8)+5]
  9705   013F2E  0EFD               	movlw	-3
  9706   013F30  CFF3 FFE3          	movff	prodl,plusw1
  9707   013F34  0EFE               	movlw	-2
  9708   013F36  CFF4 FFE3          	movff	prodh,plusw1
  9709   013F3A                     
  9710                           ;can/can.c: 889:     ciFifoCon.word = 0;
  9711                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9712   013F3A  0EF8               	movlw	-8
  9713   013F3C  6AE3               	clrf	plusw1,c
  9714   013F3E  0EF9               	movlw	-7
  9715   013F40  6AE3               	clrf	plusw1,c
  9716   013F42  0EFA               	movlw	-6
  9717   013F44  6AE3               	clrf	plusw1,c
  9718   013F46  0EFB               	movlw	-5
  9719   013F48  6AE3               	clrf	plusw1,c
  9720   013F4A                     
  9721                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  9722                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9723   013F4A  0EF9               	movlw	249
  9724   013F4C  24E1               	addwf	fsr1l,w,c
  9725   013F4E  6ED9               	movwf	fsr2l,c
  9726   013F50  0EFF               	movlw	255
  9727   013F52  20E2               	addwfc	fsr1h,w,c
  9728   013F54  6EDA               	movwf	fsr2h,c
  9729   013F56  80DF               	bsf	indf2,0,c
  9730   013F58                     
  9731                           ;can/can.c: 893:     if (flush) {
  9732                           ;stkvar	_flush @ sp[(-8)+-2]
  9733   013F58  0EF6               	movlw	-10
  9734   013F5A  50E3               	movf	plusw1,w,c
  9735   013F5C  B4D8               	btfsc	status,2,c
  9736   013F5E  EFB3  F09F         	goto	u1621
  9737   013F62  EFB5  F09F         	goto	u1620
  9738   013F66                     u1621:
  9739   013F66  EFBC  F09F         	goto	l3982
  9740   013F6A                     u1620:
  9741   013F6A                     
  9742                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  9743                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9744   013F6A  0EF9               	movlw	249
  9745   013F6C  24E1               	addwf	fsr1l,w,c
  9746   013F6E  6ED9               	movwf	fsr2l,c
  9747   013F70  0EFF               	movlw	255
  9748   013F72  20E2               	addwfc	fsr1h,w,c
  9749   013F74  6EDA               	movwf	fsr2h,c
  9750   013F76  82DF               	bsf	indf2,1,c
  9751   013F78                     l3982:
  9752                           
  9753                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  9754                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9755   013F78  0EF9               	movlw	249
  9756   013F7A  24E1               	addwf	fsr1l,w,c
  9757   013F7C  6ED9               	movwf	fsr2l,c
  9758   013F7E  0EFF               	movlw	255
  9759   013F80  20E2               	addwfc	fsr1h,w,c
  9760   013F82  6EDA               	movwf	fsr2h,c
  9761   013F84  50DF               	movf	indf2,w,c
  9762   013F86  6EE6               	movwf	postinc1,c
  9763                           
  9764                           ;stkvar	_a @ sp[(-9)+5]
  9765   013F88  0EFC               	movlw	-4
  9766   013F8A  CFE3 FFE6          	movff	plusw1,postinc1
  9767   013F8E  CFE3 FFE6          	movff	plusw1,postinc1
  9768   013F92  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9769                           
  9770                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9771   013F96  0EFF               	movlw	-1
  9772   013F98  C02C  FFE3         	movff	btemp,plusw1
  9773   013F9C                     
  9774                           ;can/can.c: 898:     if (spiTransferError) {
  9775                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9776   013F9C  0EFF               	movlw	-1
  9777   013F9E  50E3               	movf	plusw1,w,c
  9778   013FA0  B4D8               	btfsc	status,2,c
  9779   013FA2  EFD5  F09F         	goto	u1631
  9780   013FA6  EFD7  F09F         	goto	u1630
  9781   013FAA                     u1631:
  9782   013FAA  EFDB  F09F         	goto	l3990
  9783   013FAE                     u1630:
  9784   013FAE                     
  9785                           ;can/can.c: 899:         return -1;
  9786   013FAE  0EFF               	movlw	255
  9787   013FB0  6E2C               	movwf	btemp^0,c
  9788   013FB2  EFDE  F09F         	goto	l293
  9789   013FB6                     l3990:
  9790                           
  9791                           ;can/can.c: 902:     return spiTransferError;
  9792                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9793   013FB6  0EFF               	movlw	-1
  9794   013FB8  CFE3 F02C          	movff	plusw1,btemp
  9795   013FBC                     l293:
  9796                           
  9797                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9798   013FBC  0EF6               	movlw	246
  9799   013FBE  26E1               	addwf	fsr1l,f,c
  9800   013FC0  0EFF               	movlw	255
  9801   013FC2  22E2               	addwfc	fsr1h,f,c
  9802   013FC4  0012               	return		;funcret
  9803   013FC6                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9804                           	callstack 0
  9805                           
  9806 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9807 ;; Defined at:
  9808 ;;		line 405 in file "can/can.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;  address         2  [STACK] unsigned short 
  9811 ;;  rxd             2  [STACK] PTR unsigned long 
  9812 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9813 ;;		 -> fifoReg(12), 
  9814 ;;  nWords          2  [STACK] unsigned short 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;  w               4  [STACK] struct _REG_t
  9817 ;;  i               2  [STACK] unsigned short 
  9818 ;;  j               2  [STACK] unsigned short 
  9819 ;;  spiTransferS    2  [STACK] unsigned short 
  9820 ;;  n               2  [STACK] unsigned short 
  9821 ;;  spiTransferE    1  [STACK] char 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1  [STACK] char 
  9824 ;; Registers used:
  9825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;Total ram usage:        0 bytes
  9836 ;; Hardware stack levels used: 1
  9837 ;; Hardware stack levels required when called: 8
  9838 ;; This function calls:
  9839 ;;		_SpiTransfer
  9840 ;; This function is called by:
  9841 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9842 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9843 ;; This function uses a reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text28
  9847   0114B2                     __ptext28:
  9848                           	callstack 0
  9849   0114B2                     _DRV_CANFDSPI_ReadWordArray:
  9850                           	callstack 0
  9851                           
  9852                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  9853   0114B2  0E0D               	movlw	13
  9854   0114B4  26E1               	addwf	fsr1l,f,c
  9855   0114B6  0E00               	movlw	0
  9856   0114B8  22E2               	addwfc	fsr1h,f,c
  9857   0114BA                     
  9858                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
  9859                           ;stkvar	_nWords @ sp[(-13)+-6]
  9860   0114BA  0EED               	movlw	-19
  9861   0114BC  CFE3 F036          	movff	plusw1,btemp+10
  9862   0114C0  0EEE               	movlw	-18
  9863   0114C2  CFE3 F037          	movff	plusw1,btemp+11
  9864   0114C6  90D8               	bcf	status,0,c
  9865   0114C8  3636               	rlcf	(btemp+10)^0,f,c
  9866   0114CA  3637               	rlcf	(btemp+11)^0,f,c
  9867   0114CC  90D8               	bcf	status,0,c
  9868   0114CE  3636               	rlcf	(btemp+10)^0,f,c
  9869   0114D0  3637               	rlcf	(btemp+11)^0,f,c
  9870   0114D2  0E02               	movlw	2
  9871   0114D4  2636               	addwf	(btemp+10)^0,f,c
  9872   0114D6  0E00               	movlw	0
  9873   0114D8  2237               	addwfc	(btemp+11)^0,f,c
  9874                           
  9875                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9876   0114DA  0EFB               	movlw	-5
  9877   0114DC  C036  FFE3         	movff	btemp+10,plusw1
  9878   0114E0  0EFC               	movlw	-4
  9879   0114E2  C037  FFE3         	movff	btemp+11,plusw1
  9880   0114E6                     
  9881                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
  9882                           ;stkvar	_address @ sp[(-13)+-2]
  9883   0114E6  0EF2               	movlw	242
  9884   0114E8  24E1               	addwf	fsr1l,w,c
  9885   0114EA  6ED9               	movwf	fsr2l,c
  9886   0114EC  0EFF               	movlw	255
  9887   0114EE  20E2               	addwfc	fsr1h,w,c
  9888   0114F0  6EDA               	movwf	fsr2h,c
  9889   0114F2  50DF               	movf	indf2,w,c
  9890   0114F4  0B0F               	andlw	15
  9891   0114F6  0F30               	addlw	48
  9892   0114F8  0101               	movlb	1	; () banked
  9893   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9894   0114FC                     
  9895                           ; BSR set to: 1
  9896                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
  9897                           ;stkvar	_address @ sp[(-13)+-2]
  9898   0114FC  0EF1               	movlw	-15
  9899   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9900   011502                     
  9901                           ; BSR set to: 1
  9902                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
  9903   011502  0E02               	movlw	2
  9904   011504  6E36               	movwf	(btemp+10)^0,c
  9905   011506  0E00               	movlw	0
  9906   011508  6E37               	movwf	(btemp+11)^0,c
  9907                           
  9908                           ;stkvar	_i @ sp[(-13)+4]
  9909   01150A  0EF7               	movlw	-9
  9910   01150C  C036  FFE3         	movff	btemp+10,plusw1
  9911   011510  0EF8               	movlw	-8
  9912   011512  C037  FFE3         	movff	btemp+11,plusw1
  9913   011516  EFA9  F08A         	goto	l4048
  9914   01151A                     l4044:
  9915                           
  9916                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
  9917                           ;stkvar	_i @ sp[(-13)+4]
  9918   01151A  0EF7               	movlw	-9
  9919   01151C  CFE3 F036          	movff	plusw1,btemp+10
  9920   011520  0EF8               	movlw	-8
  9921   011522  CFE3 F037          	movff	plusw1,btemp+11
  9922   011526  0E00               	movlw	low _spiTransmitBuffer
  9923   011528  2436               	addwf	(btemp+10)^0,w,c
  9924   01152A  6ED9               	movwf	fsr2l,c
  9925   01152C  0E01               	movlw	high _spiTransmitBuffer
  9926   01152E  2037               	addwfc	(btemp+11)^0,w,c
  9927   011530  6EDA               	movwf	fsr2h,c
  9928   011532  6ADF               	clrf	indf2,c
  9929   011534                     
  9930                           ;can/can.c: 420:     }
  9931                           ;stkvar	_i @ sp[(-13)+4]
  9932   011534  0EF7               	movlw	-9
  9933   011536  50E3               	movf	plusw1,w,c
  9934   011538  0F01               	addlw	1
  9935   01153A  6E2C               	movwf	btemp^0,c
  9936   01153C  0EF7               	movlw	-9
  9937   01153E  C02C  FFE3         	movff	btemp,plusw1
  9938   011542  6A2C               	clrf	btemp^0,c
  9939   011544  0EF8               	movlw	-8
  9940   011546  50E3               	movf	plusw1,w,c
  9941   011548  202C               	addwfc	btemp^0,w,c
  9942   01154A  6E2C               	movwf	btemp^0,c
  9943   01154C  0EF8               	movlw	-8
  9944   01154E  C02C  FFE3         	movff	btemp,plusw1
  9945   011552                     l4048:
  9946                           
  9947                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9948   011552  0EFB               	movlw	-5
  9949   011554  CFE3 F036          	movff	plusw1,btemp+10
  9950   011558  0EFC               	movlw	-4
  9951   01155A  CFE3 F037          	movff	plusw1,btemp+11
  9952                           
  9953                           ;stkvar	_i @ sp[(-13)+4]
  9954   01155E  0EF7               	movlw	-9
  9955   011560  CFE3 F034          	movff	plusw1,btemp+8
  9956   011564  0EF8               	movlw	-8
  9957   011566  CFE3 F035          	movff	plusw1,btemp+9
  9958   01156A  5036               	movf	(btemp+10)^0,w,c
  9959   01156C  5C34               	subwf	(btemp+8)^0,w,c
  9960   01156E  5037               	movf	(btemp+11)^0,w,c
  9961   011570  5835               	subwfb	(btemp+9)^0,w,c
  9962   011572  A0D8               	btfss	status,0,c
  9963   011574  EFBE  F08A         	goto	u1651
  9964   011578  EFC0  F08A         	goto	u1650
  9965   01157C                     u1651:
  9966   01157C  EF8D  F08A         	goto	l4044
  9967   011580                     u1650:
  9968   011580                     
  9969                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
  9970                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9971   011580  0EFB               	movlw	-5
  9972   011582  CFE3 FFE6          	movff	plusw1,postinc1
  9973   011586  CFE3 FFE6          	movff	plusw1,postinc1
  9974   01158A  0E00               	movlw	low _spiReceiveBuffer
  9975   01158C  6EE6               	movwf	postinc1,c
  9976   01158E  0E02               	movlw	high _spiReceiveBuffer
  9977   011590  6EE6               	movwf	postinc1,c
  9978   011592  0E00               	movlw	low _spiTransmitBuffer
  9979   011594  6EE6               	movwf	postinc1,c
  9980   011596  0E01               	movlw	high _spiTransmitBuffer
  9981   011598  6EE6               	movwf	postinc1,c
  9982   01159A  ECC2  F09D         	call	_SpiTransfer	;wreg free
  9983                           
  9984                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9985   01159E  0EFF               	movlw	-1
  9986   0115A0  C02C  FFE3         	movff	btemp,plusw1
  9987   0115A4                     
  9988                           ;can/can.c: 423:     if (spiTransferError) {
  9989                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9990   0115A4  0EFF               	movlw	-1
  9991   0115A6  50E3               	movf	plusw1,w,c
  9992   0115A8  B4D8               	btfsc	status,2,c
  9993   0115AA  EFD9  F08A         	goto	u1661
  9994   0115AE  EFDB  F08A         	goto	u1660
  9995   0115B2                     u1661:
  9996   0115B2  EFE0  F08A         	goto	l4058
  9997   0115B6                     u1660:
  9998   0115B6                     l4054:
  9999                           
 10000                           ;can/can.c: 424:         return spiTransferError;
 10001                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10002   0115B6  0EFF               	movlw	-1
 10003   0115B8  CFE3 F02C          	movff	plusw1,btemp
 10004   0115BC  EF98  F08B         	goto	l206
 10005   0115C0                     l4058:
 10006                           
 10007                           ;can/can.c: 428:     n = 2;
 10008   0115C0  0E02               	movlw	2
 10009   0115C2  6E36               	movwf	(btemp+10)^0,c
 10010   0115C4  0E00               	movlw	0
 10011   0115C6  6E37               	movwf	(btemp+11)^0,c
 10012                           
 10013                           ;stkvar	_n @ sp[(-13)+10]
 10014   0115C8  0EFD               	movlw	-3
 10015   0115CA  C036  FFE3         	movff	btemp+10,plusw1
 10016   0115CE  0EFE               	movlw	-2
 10017   0115D0  C037  FFE3         	movff	btemp+11,plusw1
 10018   0115D4                     
 10019                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
 10020                           ;stkvar	_i @ sp[(-13)+4]
 10021   0115D4  0EF7               	movlw	-9
 10022   0115D6  6AE3               	clrf	plusw1,c
 10023   0115D8  0EF8               	movlw	-8
 10024   0115DA  6AE3               	clrf	plusw1,c
 10025   0115DC  EF7F  F08B         	goto	l4080
 10026   0115E0                     l4062:
 10027                           
 10028                           ;can/can.c: 430:         w.word = 0;
 10029                           ;stkvar	_w @ sp[(-13)+0]
 10030   0115E0  0EF3               	movlw	-13
 10031   0115E2  6AE3               	clrf	plusw1,c
 10032   0115E4  0EF4               	movlw	-12
 10033   0115E6  6AE3               	clrf	plusw1,c
 10034   0115E8  0EF5               	movlw	-11
 10035   0115EA  6AE3               	clrf	plusw1,c
 10036   0115EC  0EF6               	movlw	-10
 10037   0115EE  6AE3               	clrf	plusw1,c
 10038                           
 10039                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
 10040                           ;stkvar	_j @ sp[(-13)+6]
 10041   0115F0  0EF9               	movlw	-7
 10042   0115F2  6AE3               	clrf	plusw1,c
 10043   0115F4  0EFA               	movlw	-6
 10044   0115F6  6AE3               	clrf	plusw1,c
 10045   0115F8                     l4068:
 10046                           
 10047                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
 10048                           ;stkvar	_n @ sp[(-13)+10]
 10049   0115F8  0EFD               	movlw	-3
 10050   0115FA  CFE3 F036          	movff	plusw1,btemp+10
 10051   0115FE  0EFE               	movlw	-2
 10052   011600  CFE3 F037          	movff	plusw1,btemp+11
 10053   011604  0E00               	movlw	low _spiReceiveBuffer
 10054   011606  2436               	addwf	(btemp+10)^0,w,c
 10055   011608  6ED9               	movwf	fsr2l,c
 10056   01160A  0E02               	movlw	high _spiReceiveBuffer
 10057   01160C  2037               	addwfc	(btemp+11)^0,w,c
 10058   01160E  6EDA               	movwf	fsr2h,c
 10059                           
 10060                           ;stkvar	_j @ sp[(-13)+6]
 10061   011610  0EF9               	movlw	-7
 10062   011612  CFE3 F036          	movff	plusw1,btemp+10
 10063   011616  0EFA               	movlw	-6
 10064   011618  CFE3 F037          	movff	plusw1,btemp+11
 10065                           
 10066                           ;stkvar	_w @ sp[(-13)+0]
 10067   01161C  0EF3               	movlw	243
 10068   01161E  24E1               	addwf	fsr1l,w,c
 10069   011620  6E34               	movwf	(btemp+8)^0,c
 10070   011622  0EFF               	movlw	255
 10071   011624  20E2               	addwfc	fsr1h,w,c
 10072   011626  6E35               	movwf	(btemp+9)^0,c
 10073   011628  5036               	movf	(btemp+10)^0,w,c
 10074   01162A  2434               	addwf	(btemp+8)^0,w,c
 10075   01162C  6EE9               	movwf	fsr0l,c
 10076   01162E  5037               	movf	(btemp+11)^0,w,c
 10077   011630  2035               	addwfc	(btemp+9)^0,w,c
 10078   011632  6EEA               	movwf	fsr0h,c
 10079   011634  CFDF FFEF          	movff	indf2,indf0
 10080   011638                     
 10081                           ;can/can.c: 433:         }
 10082                           ;stkvar	_j @ sp[(-13)+6]
 10083   011638  0EF9               	movlw	-7
 10084   01163A  50E3               	movf	plusw1,w,c
 10085   01163C  0F01               	addlw	1
 10086   01163E  6E2C               	movwf	btemp^0,c
 10087   011640  0EF9               	movlw	-7
 10088   011642  C02C  FFE3         	movff	btemp,plusw1
 10089   011646  6A2C               	clrf	btemp^0,c
 10090   011648  0EFA               	movlw	-6
 10091   01164A  50E3               	movf	plusw1,w,c
 10092   01164C  202C               	addwfc	btemp^0,w,c
 10093   01164E  6E2C               	movwf	btemp^0,c
 10094   011650  0EFA               	movlw	-6
 10095   011652  C02C  FFE3         	movff	btemp,plusw1
 10096   011656                     
 10097                           ;stkvar	_n @ sp[(-13)+10]
 10098   011656  0EFD               	movlw	-3
 10099   011658  50E3               	movf	plusw1,w,c
 10100   01165A  0F01               	addlw	1
 10101   01165C  6E2C               	movwf	btemp^0,c
 10102   01165E  0EFD               	movlw	-3
 10103   011660  C02C  FFE3         	movff	btemp,plusw1
 10104   011664  6A2C               	clrf	btemp^0,c
 10105   011666  0EFE               	movlw	-2
 10106   011668  50E3               	movf	plusw1,w,c
 10107   01166A  202C               	addwfc	btemp^0,w,c
 10108   01166C  6E2C               	movwf	btemp^0,c
 10109   01166E  0EFE               	movlw	-2
 10110   011670  C02C  FFE3         	movff	btemp,plusw1
 10111   011674                     
 10112                           ;stkvar	_j @ sp[(-13)+6]
 10113   011674  0EFA               	movlw	-6
 10114   011676  50E3               	movf	plusw1,w,c
 10115   011678  E10C               	bnz	u1670
 10116   01167A  0EF9               	movlw	-7
 10117   01167C  CFE3 F02C          	movff	plusw1,btemp
 10118   011680  0E04               	movlw	4
 10119   011682  5E2C               	subwf	btemp^0,f,c
 10120   011684  A0D8               	btfss	status,0,c
 10121   011686  EF47  F08B         	goto	u1671
 10122   01168A  EF49  F08B         	goto	u1670
 10123   01168E                     u1671:
 10124   01168E  EFFC  F08A         	goto	l4068
 10125   011692                     u1670:
 10126   011692                     
 10127                           ;can/can.c: 434:         rxd[i] = w.word;
 10128                           ;stkvar	_w @ sp[(-13)+0]
 10129   011692  50E1               	movf	fsr1l,w,c
 10130   011694  0FF3               	addlw	-13
 10131   011696  6ED9               	movwf	fsr2l,c
 10132   011698  50E2               	movf	fsr1h,w,c
 10133   01169A  6EDA               	movwf	fsr2h,c
 10134   01169C  0EFF               	movlw	255
 10135   01169E  22DA               	addwfc	fsr2h,f,c
 10136                           
 10137                           ;stkvar	_i @ sp[(-13)+4]
 10138   0116A0  0EF7               	movlw	-9
 10139   0116A2  CFE3 F036          	movff	plusw1,btemp+10
 10140   0116A6  0EF8               	movlw	-8
 10141   0116A8  CFE3 F037          	movff	plusw1,btemp+11
 10142   0116AC  90D8               	bcf	status,0,c
 10143   0116AE  3636               	rlcf	(btemp+10)^0,f,c
 10144   0116B0  3637               	rlcf	(btemp+11)^0,f,c
 10145   0116B2  90D8               	bcf	status,0,c
 10146   0116B4  3636               	rlcf	(btemp+10)^0,f,c
 10147   0116B6  3637               	rlcf	(btemp+11)^0,f,c
 10148                           
 10149                           ;stkvar	_rxd @ sp[(-13)+-4]
 10150   0116B8  0EEF               	movlw	-17
 10151   0116BA  CFE3 F034          	movff	plusw1,btemp+8
 10152   0116BE  0EF0               	movlw	-16
 10153   0116C0  CFE3 F035          	movff	plusw1,btemp+9
 10154   0116C4  5036               	movf	(btemp+10)^0,w,c
 10155   0116C6  2434               	addwf	(btemp+8)^0,w,c
 10156   0116C8  6EE9               	movwf	fsr0l,c
 10157   0116CA  5037               	movf	(btemp+11)^0,w,c
 10158   0116CC  2035               	addwfc	(btemp+9)^0,w,c
 10159   0116CE  6EEA               	movwf	fsr0h,c
 10160   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10161   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10162   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10163   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10164   0116E0                     
 10165                           ;can/can.c: 435:     }
 10166                           ;stkvar	_i @ sp[(-13)+4]
 10167   0116E0  0EF7               	movlw	-9
 10168   0116E2  50E3               	movf	plusw1,w,c
 10169   0116E4  0F01               	addlw	1
 10170   0116E6  6E2C               	movwf	btemp^0,c
 10171   0116E8  0EF7               	movlw	-9
 10172   0116EA  C02C  FFE3         	movff	btemp,plusw1
 10173   0116EE  6A2C               	clrf	btemp^0,c
 10174   0116F0  0EF8               	movlw	-8
 10175   0116F2  50E3               	movf	plusw1,w,c
 10176   0116F4  202C               	addwfc	btemp^0,w,c
 10177   0116F6  6E2C               	movwf	btemp^0,c
 10178   0116F8  0EF8               	movlw	-8
 10179   0116FA  C02C  FFE3         	movff	btemp,plusw1
 10180   0116FE                     l4080:
 10181                           
 10182                           ;stkvar	_nWords @ sp[(-13)+-6]
 10183   0116FE  0EED               	movlw	-19
 10184   011700  CFE3 F036          	movff	plusw1,btemp+10
 10185   011704  0EEE               	movlw	-18
 10186   011706  CFE3 F037          	movff	plusw1,btemp+11
 10187                           
 10188                           ;stkvar	_i @ sp[(-13)+4]
 10189   01170A  0EF7               	movlw	-9
 10190   01170C  CFE3 F034          	movff	plusw1,btemp+8
 10191   011710  0EF8               	movlw	-8
 10192   011712  CFE3 F035          	movff	plusw1,btemp+9
 10193   011716  5036               	movf	(btemp+10)^0,w,c
 10194   011718  5C34               	subwf	(btemp+8)^0,w,c
 10195   01171A  5037               	movf	(btemp+11)^0,w,c
 10196   01171C  5835               	subwfb	(btemp+9)^0,w,c
 10197   01171E  A0D8               	btfss	status,0,c
 10198   011720  EF94  F08B         	goto	u1681
 10199   011724  EF96  F08B         	goto	u1680
 10200   011728                     u1681:
 10201   011728  EFF0  F08A         	goto	l4062
 10202   01172C                     u1680:
 10203   01172C  EFDB  F08A         	goto	l4054
 10204   011730                     l206:
 10205                           
 10206                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10207   011730  0EED               	movlw	237
 10208   011732  26E1               	addwf	fsr1l,f,c
 10209   011734  0EFF               	movlw	255
 10210   011736  22E2               	addwfc	fsr1h,f,c
 10211   011738  0012               	return		;funcret
 10212   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10213                           	callstack 0
 10214                           
 10215 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10216 ;; Defined at:
 10217 ;;		line 3766 in file "can/can.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  dlc             1  [STACK] enum E5461
 10220 ;; Auto vars:     Size  Location     Type
 10221 ;;  dataBytesInO    4  [STACK] unsigned long 
 10222 ;; Return value:  Size  Location     Type
 10223 ;;                  4  [STACK] unsigned long 
 10224 ;; Registers used:
 10225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10235 ;;Total ram usage:        0 bytes
 10236 ;; Hardware stack levels used: 1
 10237 ;; Hardware stack levels required when called: 7
 10238 ;; This function calls:
 10239 ;;		Nothing
 10240 ;; This function is called by:
 10241 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10242 ;; This function uses a reentrant model
 10243 ;;
 10244                           
 10245                           	psect	text29
 10246   012268                     __ptext29:
 10247                           	callstack 0
 10248   012268                     _DRV_CANFDSPI_DlcToDataBytes:
 10249                           	callstack 0
 10250                           
 10251                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10252   012268  52E6               	movf	postinc1,f,c
 10253   01226A  52E6               	movf	postinc1,f,c
 10254   01226C  52E6               	movf	postinc1,f,c
 10255   01226E  52E6               	movf	postinc1,f,c
 10256   012270                     
 10257                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10258                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10259   012270  0EFC               	movlw	-4
 10260   012272  6AE3               	clrf	plusw1,c
 10261   012274  0EFD               	movlw	-3
 10262   012276  6AE3               	clrf	plusw1,c
 10263   012278  0EFE               	movlw	-2
 10264   01227A  6AE3               	clrf	plusw1,c
 10265   01227C  0EFF               	movlw	-1
 10266   01227E  6AE3               	clrf	plusw1,c
 10267   012280                     
 10268                           ;can/can.c: 3770:     __nop();
 10269   012280  0000               	nop	
 10270   012282                     
 10271                           ;can/can.c: 3771:     __nop();
 10272   012282  0000               	nop	
 10273   012284                     
 10274                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10275                           ;stkvar	_dlc @ sp[(-4)+-1]
 10276   012284  0EFB               	movlw	-5
 10277   012286  CFE3 F02C          	movff	plusw1,btemp
 10278   01228A  0E09               	movlw	9
 10279   01228C  602C               	cpfslt	btemp^0,c
 10280   01228E  EF4B  F091         	goto	u1691
 10281   012292  EF4D  F091         	goto	u1690
 10282   012296                     u1691:
 10283   012296  EFE8  F091         	goto	l4112
 10284   01229A                     u1690:
 10285   01229A                     
 10286                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10287                           ;stkvar	_dlc @ sp[(-4)+-1]
 10288   01229A  0EFB               	movlw	-5
 10289   01229C  CFE3 F037          	movff	plusw1,btemp+11
 10290   0122A0  C037  F030         	movff	btemp+11,btemp+4
 10291   0122A4  6A31               	clrf	(btemp+5)^0,c
 10292   0122A6  6A32               	clrf	(btemp+6)^0,c
 10293   0122A8  6A33               	clrf	(btemp+7)^0,c
 10294                           
 10295                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10296   0122AA  0EFC               	movlw	-4
 10297   0122AC  C030  FFE3         	movff	btemp+4,plusw1
 10298   0122B0  0EFD               	movlw	-3
 10299   0122B2  C031  FFE3         	movff	btemp+5,plusw1
 10300   0122B6  0EFE               	movlw	-2
 10301   0122B8  C032  FFE3         	movff	btemp+6,plusw1
 10302   0122BC  0EFF               	movlw	-1
 10303   0122BE  C033  FFE3         	movff	btemp+7,plusw1
 10304                           
 10305                           ;can/can.c: 3775:     } else {
 10306   0122C2  EF12  F092         	goto	l4114
 10307   0122C6                     l4096:
 10308                           
 10309                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10310   0122C6  0E0C               	movlw	12
 10311   0122C8  6E34               	movwf	(btemp+8)^0,c
 10312   0122CA  6A35               	clrf	(btemp+9)^0,c
 10313   0122CC  6A36               	clrf	(btemp+10)^0,c
 10314   0122CE  6A37               	clrf	(btemp+11)^0,c
 10315                           
 10316                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10317   0122D0  0EFC               	movlw	-4
 10318   0122D2  C034  FFE3         	movff	btemp+8,plusw1
 10319   0122D6  0EFD               	movlw	-3
 10320   0122D8  C035  FFE3         	movff	btemp+9,plusw1
 10321   0122DC  0EFE               	movlw	-2
 10322   0122DE  C036  FFE3         	movff	btemp+10,plusw1
 10323   0122E2  0EFF               	movlw	-1
 10324   0122E4  C037  FFE3         	movff	btemp+11,plusw1
 10325                           
 10326                           ;can/can.c: 3779:                 break;
 10327   0122E8  EF12  F092         	goto	l4114
 10328   0122EC                     l4098:
 10329                           
 10330                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10331   0122EC  0E10               	movlw	16
 10332   0122EE  6E34               	movwf	(btemp+8)^0,c
 10333   0122F0  6A35               	clrf	(btemp+9)^0,c
 10334   0122F2  6A36               	clrf	(btemp+10)^0,c
 10335   0122F4  6A37               	clrf	(btemp+11)^0,c
 10336                           
 10337                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10338   0122F6  0EFC               	movlw	-4
 10339   0122F8  C034  FFE3         	movff	btemp+8,plusw1
 10340   0122FC  0EFD               	movlw	-3
 10341   0122FE  C035  FFE3         	movff	btemp+9,plusw1
 10342   012302  0EFE               	movlw	-2
 10343   012304  C036  FFE3         	movff	btemp+10,plusw1
 10344   012308  0EFF               	movlw	-1
 10345   01230A  C037  FFE3         	movff	btemp+11,plusw1
 10346                           
 10347                           ;can/can.c: 3782:                 break;
 10348   01230E  EF12  F092         	goto	l4114
 10349   012312                     l4100:
 10350                           
 10351                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10352   012312  0E14               	movlw	20
 10353   012314  6E34               	movwf	(btemp+8)^0,c
 10354   012316  6A35               	clrf	(btemp+9)^0,c
 10355   012318  6A36               	clrf	(btemp+10)^0,c
 10356   01231A  6A37               	clrf	(btemp+11)^0,c
 10357                           
 10358                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10359   01231C  0EFC               	movlw	-4
 10360   01231E  C034  FFE3         	movff	btemp+8,plusw1
 10361   012322  0EFD               	movlw	-3
 10362   012324  C035  FFE3         	movff	btemp+9,plusw1
 10363   012328  0EFE               	movlw	-2
 10364   01232A  C036  FFE3         	movff	btemp+10,plusw1
 10365   01232E  0EFF               	movlw	-1
 10366   012330  C037  FFE3         	movff	btemp+11,plusw1
 10367                           
 10368                           ;can/can.c: 3785:                 break;
 10369   012334  EF12  F092         	goto	l4114
 10370   012338                     l4102:
 10371                           
 10372                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10373   012338  0E18               	movlw	24
 10374   01233A  6E34               	movwf	(btemp+8)^0,c
 10375   01233C  6A35               	clrf	(btemp+9)^0,c
 10376   01233E  6A36               	clrf	(btemp+10)^0,c
 10377   012340  6A37               	clrf	(btemp+11)^0,c
 10378                           
 10379                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10380   012342  0EFC               	movlw	-4
 10381   012344  C034  FFE3         	movff	btemp+8,plusw1
 10382   012348  0EFD               	movlw	-3
 10383   01234A  C035  FFE3         	movff	btemp+9,plusw1
 10384   01234E  0EFE               	movlw	-2
 10385   012350  C036  FFE3         	movff	btemp+10,plusw1
 10386   012354  0EFF               	movlw	-1
 10387   012356  C037  FFE3         	movff	btemp+11,plusw1
 10388                           
 10389                           ;can/can.c: 3788:                 break;
 10390   01235A  EF12  F092         	goto	l4114
 10391   01235E                     l4104:
 10392                           
 10393                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10394   01235E  0E20               	movlw	32
 10395   012360  6E34               	movwf	(btemp+8)^0,c
 10396   012362  6A35               	clrf	(btemp+9)^0,c
 10397   012364  6A36               	clrf	(btemp+10)^0,c
 10398   012366  6A37               	clrf	(btemp+11)^0,c
 10399                           
 10400                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10401   012368  0EFC               	movlw	-4
 10402   01236A  C034  FFE3         	movff	btemp+8,plusw1
 10403   01236E  0EFD               	movlw	-3
 10404   012370  C035  FFE3         	movff	btemp+9,plusw1
 10405   012374  0EFE               	movlw	-2
 10406   012376  C036  FFE3         	movff	btemp+10,plusw1
 10407   01237A  0EFF               	movlw	-1
 10408   01237C  C037  FFE3         	movff	btemp+11,plusw1
 10409                           
 10410                           ;can/can.c: 3791:                 break;
 10411   012380  EF12  F092         	goto	l4114
 10412   012384                     l4106:
 10413                           
 10414                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10415   012384  0E30               	movlw	48
 10416   012386  6E34               	movwf	(btemp+8)^0,c
 10417   012388  6A35               	clrf	(btemp+9)^0,c
 10418   01238A  6A36               	clrf	(btemp+10)^0,c
 10419   01238C  6A37               	clrf	(btemp+11)^0,c
 10420                           
 10421                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10422   01238E  0EFC               	movlw	-4
 10423   012390  C034  FFE3         	movff	btemp+8,plusw1
 10424   012394  0EFD               	movlw	-3
 10425   012396  C035  FFE3         	movff	btemp+9,plusw1
 10426   01239A  0EFE               	movlw	-2
 10427   01239C  C036  FFE3         	movff	btemp+10,plusw1
 10428   0123A0  0EFF               	movlw	-1
 10429   0123A2  C037  FFE3         	movff	btemp+11,plusw1
 10430                           
 10431                           ;can/can.c: 3794:                 break;
 10432   0123A6  EF12  F092         	goto	l4114
 10433   0123AA                     l4108:
 10434                           
 10435                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10436   0123AA  0E40               	movlw	64
 10437   0123AC  6E34               	movwf	(btemp+8)^0,c
 10438   0123AE  6A35               	clrf	(btemp+9)^0,c
 10439   0123B0  6A36               	clrf	(btemp+10)^0,c
 10440   0123B2  6A37               	clrf	(btemp+11)^0,c
 10441                           
 10442                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10443   0123B4  0EFC               	movlw	-4
 10444   0123B6  C034  FFE3         	movff	btemp+8,plusw1
 10445   0123BA  0EFD               	movlw	-3
 10446   0123BC  C035  FFE3         	movff	btemp+9,plusw1
 10447   0123C0  0EFE               	movlw	-2
 10448   0123C2  C036  FFE3         	movff	btemp+10,plusw1
 10449   0123C6  0EFF               	movlw	-1
 10450   0123C8  C037  FFE3         	movff	btemp+11,plusw1
 10451                           
 10452                           ;can/can.c: 3797:                 break;
 10453   0123CC  EF12  F092         	goto	l4114
 10454   0123D0                     l4112:
 10455                           
 10456                           ;stkvar	_dlc @ sp[(-4)+-1]
 10457   0123D0  0EFB               	movlw	-5
 10458   0123D2  50E3               	movf	plusw1,w,c
 10459   0123D4  6E36               	movwf	(btemp+10)^0,c
 10460   0123D6  6A37               	clrf	(btemp+11)^0,c
 10461                           
 10462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10463                           ; Switch size 1, requested type "simple"
 10464                           ; Number of cases is 1, Range of values is 0 to 0
 10465                           ; switch strategies available:
 10466                           ; Name         Instructions Cycles
 10467                           ; simple_byte            4     3 (average)
 10468                           ;	Chosen strategy is simple_byte
 10469   0123D8  5037               	movf	(btemp+11)^0,w,c
 10470   0123DA  0A00               	xorlw	0	; case 0
 10471   0123DC  B4D8               	btfsc	status,2,c
 10472   0123DE  EFF3  F091         	goto	l5606
 10473   0123E2  EF12  F092         	goto	l4114
 10474   0123E6                     l5606:
 10475                           
 10476                           ; Switch size 1, requested type "simple"
 10477                           ; Number of cases is 7, Range of values is 9 to 15
 10478                           ; switch strategies available:
 10479                           ; Name         Instructions Cycles
 10480                           ; simple_byte           22    12 (average)
 10481                           ;	Chosen strategy is simple_byte
 10482   0123E6  5036               	movf	(btemp+10)^0,w,c
 10483   0123E8  0A09               	xorlw	9	; case 9
 10484   0123EA  B4D8               	btfsc	status,2,c
 10485   0123EC  EF63  F091         	goto	l4096
 10486   0123F0  0A03               	xorlw	3	; case 10
 10487   0123F2  B4D8               	btfsc	status,2,c
 10488   0123F4  EF76  F091         	goto	l4098
 10489   0123F8  0A01               	xorlw	1	; case 11
 10490   0123FA  B4D8               	btfsc	status,2,c
 10491   0123FC  EF89  F091         	goto	l4100
 10492   012400  0A07               	xorlw	7	; case 12
 10493   012402  B4D8               	btfsc	status,2,c
 10494   012404  EF9C  F091         	goto	l4102
 10495   012408  0A01               	xorlw	1	; case 13
 10496   01240A  B4D8               	btfsc	status,2,c
 10497   01240C  EFAF  F091         	goto	l4104
 10498   012410  0A03               	xorlw	3	; case 14
 10499   012412  B4D8               	btfsc	status,2,c
 10500   012414  EFC2  F091         	goto	l4106
 10501   012418  0A01               	xorlw	1	; case 15
 10502   01241A  B4D8               	btfsc	status,2,c
 10503   01241C  EFD5  F091         	goto	l4108
 10504   012420  EF12  F092         	goto	l4114
 10505   012424                     l4114:
 10506                           
 10507                           ;can/can.c: 3803:     return dataBytesInObject;
 10508                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10509   012424  0EFC               	movlw	-4
 10510   012426  CFE3 F02C          	movff	plusw1,btemp
 10511   01242A  0EFD               	movlw	-3
 10512   01242C  CFE3 F02D          	movff	plusw1,btemp+1
 10513   012430  0EFE               	movlw	-2
 10514   012432  CFE3 F02E          	movff	plusw1,btemp+2
 10515   012436  0EFF               	movlw	-1
 10516   012438  CFE3 F02F          	movff	plusw1,btemp+3
 10517   01243C                     
 10518                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10519   01243C  0EFB               	movlw	251
 10520   01243E  26E1               	addwf	fsr1l,f,c
 10521   012440  0EFF               	movlw	255
 10522   012442  22E2               	addwfc	fsr1h,f,c
 10523   012444  0012               	return		;funcret
 10524   012446                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10525                           	callstack 0
 10526                           
 10527 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10528 ;; Defined at:
 10529 ;;		line 1776 in file "can/can.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;  channel         1  [STACK] enum E5287
 10532 ;;  flags           2  [STACK] PTR enum E5580
 10533 ;;		 -> txFlags(1), 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10536 ;;  a               2  [STACK] unsigned short 
 10537 ;;  spiTransferE    1  [STACK] char 
 10538 ;; Return value:  Size  Location     Type
 10539 ;;                  1  [STACK] char 
 10540 ;; Registers used:
 10541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10542 ;; Tracked objects:
 10543 ;;		On entry : 0/0
 10544 ;;		On exit  : 0/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;Total ram usage:        0 bytes
 10552 ;; Hardware stack levels used: 1
 10553 ;; Hardware stack levels required when called: 9
 10554 ;; This function calls:
 10555 ;;		_DRV_CANFDSPI_ReadByte
 10556 ;; This function is called by:
 10557 ;;		_CanSend
 10558 ;; This function uses a reentrant model
 10559 ;;
 10560                           
 10561                           	psect	text30
 10562   014114                     __ptext30:
 10563                           	callstack 0
 10564   014114                     _DRV_CANFDSPI_TransmitChannelEventGet:
 10565                           	callstack 0
 10566                           
 10567                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10568   014114  0E07               	movlw	7
 10569   014116  26E1               	addwf	fsr1l,f,c
 10570   014118  0E00               	movlw	0
 10571   01411A  22E2               	addwfc	fsr1h,f,c
 10572   01411C                     
 10573                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 10574                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10575   01411C  0EF9               	movlw	-7
 10576   01411E  6AE3               	clrf	plusw1,c
 10577   014120  0EFA               	movlw	-6
 10578   014122  6AE3               	clrf	plusw1,c
 10579   014124  0EFB               	movlw	-5
 10580   014126  6AE3               	clrf	plusw1,c
 10581   014128  0EFC               	movlw	-4
 10582   01412A  6AE3               	clrf	plusw1,c
 10583   01412C                     
 10584                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 10585                           ;stkvar	_channel @ sp[(-7)+-1]
 10586   01412C  0EF8               	movlw	-8
 10587   01412E  50E3               	movf	plusw1,w,c
 10588   014130  0D0C               	mullw	12
 10589   014132  0E54               	movlw	84
 10590   014134  26F3               	addwf	243,f,c
 10591   014136  0E00               	movlw	0
 10592   014138  22F4               	addwfc	244,f,c
 10593                           
 10594                           ;stkvar	_a @ sp[(-7)+4]
 10595   01413A  0EFD               	movlw	-3
 10596   01413C  CFF3 FFE3          	movff	prodl,plusw1
 10597   014140  0EFE               	movlw	-2
 10598   014142  CFF4 FFE3          	movff	prodh,plusw1
 10599   014146                     
 10600                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 10601                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10602   014146  0EF9               	movlw	249
 10603   014148  24E1               	addwf	fsr1l,w,c
 10604   01414A  6E2C               	movwf	btemp^0,c
 10605   01414C  0EFF               	movlw	255
 10606   01414E  20E2               	addwfc	fsr1h,w,c
 10607   014150  6E2D               	movwf	(btemp+1)^0,c
 10608   014152  C02C  FFE6         	movff	btemp,postinc1
 10609   014156  C02D  FFE6         	movff	btemp+1,postinc1
 10610                           
 10611                           ;stkvar	_a @ sp[(-9)+4]
 10612   01415A  0EFB               	movlw	-5
 10613   01415C  CFE3 FFE6          	movff	plusw1,postinc1
 10614   014160  CFE3 FFE6          	movff	plusw1,postinc1
 10615   014164  ECC8  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 10616                           
 10617                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10618   014168  0EFF               	movlw	-1
 10619   01416A  C02C  FFE3         	movff	btemp,plusw1
 10620   01416E                     
 10621                           ;can/can.c: 1788:     if (spiTransferError) {
 10622                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10623   01416E  0EFF               	movlw	-1
 10624   014170  50E3               	movf	plusw1,w,c
 10625   014172  B4D8               	btfsc	status,2,c
 10626   014174  EFBE  F0A0         	goto	u1891
 10627   014178  EFC0  F0A0         	goto	u1890
 10628   01417C                     u1891:
 10629   01417C  EFC4  F0A0         	goto	l4256
 10630   014180                     u1890:
 10631   014180                     
 10632                           ;can/can.c: 1789:         return -1;
 10633   014180  0EFF               	movlw	255
 10634   014182  6E2C               	movwf	btemp^0,c
 10635   014184  EFD1  F0A0         	goto	l453
 10636   014188                     l4256:
 10637                           
 10638                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 10639                           ;stkvar	_flags @ sp[(-7)+-3]
 10640   014188  0EF6               	movlw	-10
 10641   01418A  CFE3 FFD9          	movff	plusw1,fsr2l
 10642   01418E  0EF7               	movlw	-9
 10643   014190  CFE3 FFDA          	movff	plusw1,fsr2h
 10644                           
 10645                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10646   014194  0EF9               	movlw	-7
 10647   014196  50E3               	movf	plusw1,w,c
 10648   014198  0B17               	andlw	23
 10649   01419A  6EDF               	movwf	indf2,c
 10650   01419C                     
 10651                           ;can/can.c: 1795:     return spiTransferError;
 10652                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10653   01419C  0EFF               	movlw	-1
 10654   01419E  CFE3 F02C          	movff	plusw1,btemp
 10655   0141A2                     l453:
 10656                           
 10657                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 10658   0141A2  0EF6               	movlw	246
 10659   0141A4  26E1               	addwf	fsr1l,f,c
 10660   0141A6  0EFF               	movlw	255
 10661   0141A8  22E2               	addwfc	fsr1h,f,c
 10662   0141AA  0012               	return		;funcret
 10663   0141AC                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 10664                           	callstack 0
 10665                           
 10666 ;; *************** function _XF_popEvent *****************
 10667 ;; Defined at:
 10668 ;;		line 142 in file "xf/xf.c"
 10669 ;; Parameters:    Size  Location     Type
 10670 ;;  inISR           1  [STACK] _Bool 
 10671 ;; Auto vars:     Size  Location     Type
 10672 ;;  ev              6  [STACK] struct Event_
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  6  [STACK] struct Event_
 10675 ;; Registers used:
 10676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;Total ram usage:        0 bytes
 10687 ;; Hardware stack levels used: 1
 10688 ;; Hardware stack levels required when called: 8
 10689 ;; This function calls:
 10690 ;;		_ENTERCRITICAL
 10691 ;;		_LEAVECRITICAL
 10692 ;;		___awmod
 10693 ;; This function is called by:
 10694 ;;		_XF_executeOnce
 10695 ;; This function uses a reentrant model
 10696 ;;
 10697                           
 10698                           	psect	text31
 10699   0139EE                     __ptext31:
 10700                           	callstack 0
 10701   0139EE                     _XF_popEvent:
 10702                           	callstack 0
 10703                           
 10704                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 10705   0139EE  0E0B               	movlw	11
 10706   0139F0  26E1               	addwf	fsr1l,f,c
 10707   0139F2  0E00               	movlw	0
 10708   0139F4  22E2               	addwfc	fsr1h,f,c
 10709   0139F6                     
 10710                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 10711                           ;stkvar	_ev @ sp[(-6)+0]
 10712   0139F6  0EFA               	movlw	-6
 10713   0139F8  6AE3               	clrf	plusw1,c
 10714   0139FA                     
 10715                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 10716                           ;stkvar	_ev @ sp[(-6)+0]
 10717   0139FA  0EFB               	movlw	251
 10718   0139FC  24E1               	addwf	fsr1l,w,c
 10719   0139FE  6ED9               	movwf	fsr2l,c
 10720   013A00  0EFF               	movlw	255
 10721   013A02  20E2               	addwfc	fsr1h,w,c
 10722   013A04  6EDA               	movwf	fsr2h,c
 10723   013A06  6ADE               	clrf	postinc2,c
 10724   013A08  6ADE               	clrf	postinc2,c
 10725   013A0A  6ADD               	clrf	postdec2,c
 10726   013A0C                     
 10727                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 10728                           ;stkvar	_inISR @ sp[(-6)+-6]
 10729   013A0C  0EF4               	movlw	-12
 10730   013A0E  50E3               	movf	plusw1,w,c
 10731   013A10  6EE6               	movwf	postinc1,c
 10732   013A12  ECE0  F0A4         	call	_ENTERCRITICAL	;wreg free
 10733   013A16                     
 10734                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 10735   013A16  EE23  F0DF         	lfsr	2,_theXF+279
 10736   013A1A  50DF               	movf	indf2,w,c
 10737   013A1C  A4D8               	btfss	status,2,c
 10738   013A1E  EF13  F09D         	goto	u2781
 10739   013A22  EF15  F09D         	goto	u2780
 10740   013A26                     u2781:
 10741   013A26  EF2A  F09D         	goto	l5062
 10742   013A2A                     u2780:
 10743   013A2A                     l5056:
 10744                           
 10745                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 10746                           ;stkvar	_inISR @ sp[(-6)+-6]
 10747   013A2A  0EF4               	movlw	-12
 10748   013A2C  50E3               	movf	plusw1,w,c
 10749   013A2E  6EE6               	movwf	postinc1,c
 10750   013A30  ECD4  F0A4         	call	_LEAVECRITICAL	;wreg free
 10751   013A34                     
 10752                           ;xf/xf.c: 152:       return ev;
 10753                           ;stkvar	_ev @ sp[(-6)+0]
 10754   013A34  0EFA               	movlw	250
 10755   013A36  24E1               	addwf	fsr1l,w,c
 10756   013A38  6ED9               	movwf	fsr2l,c
 10757   013A3A  0EFF               	movlw	255
 10758   013A3C  20E2               	addwfc	fsr1h,w,c
 10759   013A3E  6EDA               	movwf	fsr2h,c
 10760                           
 10761                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 10762   013A40  0E06               	movlw	6
 10763   013A42  6E2C               	movwf	btemp^0,c
 10764   013A44  0EF4               	movlw	-12
 10765   013A46                     us279999:
 10766   013A46  CFDE FFE3          	movff	postinc2,plusw1
 10767   013A4A  28E8               	incf	wreg,w,c
 10768   013A4C  2E2C               	decfsz	btemp^0,f,c
 10769   013A4E  D7FB               	bra	us279999
 10770   013A50  EF58  F09D         	goto	l1227
 10771   013A54                     l5062:
 10772                           
 10773                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10774   013A54  EE23  F0DD         	lfsr	2,_theXF+277
 10775   013A58  50DF               	movf	indf2,w,c
 10776   013A5A  0D06               	mullw	6
 10777   013A5C  0E28               	movlw	low (_theXF+96)
 10778   013A5E  24F3               	addwf	243,w,c
 10779   013A60  6ED9               	movwf	fsr2l,c
 10780   013A62  0E03               	movlw	high (_theXF+96)
 10781   013A64  20F4               	addwfc	prodh,w,c
 10782   013A66  6EDA               	movwf	fsr2h,c
 10783                           
 10784                           ;stkvar	_ev @ sp[(-6)+0]
 10785   013A68  0E06               	movlw	6
 10786   013A6A  6E2C               	movwf	btemp^0,c
 10787   013A6C  0EFA               	movlw	-6
 10788   013A6E                     us280999:
 10789   013A6E  CFDE FFE3          	movff	postinc2,plusw1
 10790   013A72  28E8               	incf	wreg,w,c
 10791   013A74  2E2C               	decfsz	btemp^0,f,c
 10792   013A76  D7FB               	bra	us280999
 10793   013A78                     
 10794                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10795   013A78  0E1E               	movlw	30
 10796   013A7A  6EE6               	movwf	postinc1,c
 10797   013A7C  0E00               	movlw	0
 10798   013A7E  6EE6               	movwf	postinc1,c
 10799   013A80  EE23  F0DD         	lfsr	2,_theXF+277
 10800   013A84  50DF               	movf	indf2,w,c
 10801   013A86  6E36               	movwf	(btemp+10)^0,c
 10802   013A88  6A37               	clrf	(btemp+11)^0,c
 10803   013A8A  0E01               	movlw	1
 10804   013A8C  2636               	addwf	(btemp+10)^0,f,c
 10805   013A8E  0E00               	movlw	0
 10806   013A90  2237               	addwfc	(btemp+11)^0,f,c
 10807   013A92  C036  FFE6         	movff	btemp+10,postinc1
 10808   013A96  C037  FFE6         	movff	btemp+11,postinc1
 10809   013A9A  ECB5  F096         	call	___awmod	;wreg free
 10810   013A9E  C02C  F3DD         	movff	btemp,_theXF+277
 10811   013AA2                     
 10812                           ;xf/xf.c: 156:     theXF.countEvt--;
 10813   013AA2  C3DF  FFE8         	movff	_theXF+279,wreg
 10814   013AA6  0FFF               	addlw	-1
 10815   013AA8  CFE8 F3DF          	movff	wreg,_theXF+279
 10816   013AAC  EF15  F09D         	goto	l5056
 10817   013AB0                     l1227:
 10818                           
 10819                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10820   013AB0  0EFA               	movlw	250
 10821   013AB2  26E1               	addwf	fsr1l,f,c
 10822   013AB4  0EFF               	movlw	255
 10823   013AB6  22E2               	addwfc	fsr1h,f,c
 10824   013AB8  0012               	return		;funcret
 10825   013ABA                     __end_of_XF_popEvent:
 10826                           	callstack 0
 10827                           
 10828 ;; *************** function ___awmod *****************
 10829 ;; Defined at:
 10830 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  dividend        2  [STACK] int 
 10833 ;;  divisor         2  [STACK] int 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  sign            1  [STACK] unsigned char 
 10836 ;;  counter         1  [STACK] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  2  [STACK] int 
 10839 ;; Registers used:
 10840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:        0 bytes
 10851 ;; Hardware stack levels used: 1
 10852 ;; Hardware stack levels required when called: 7
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_XF_pushEvent
 10857 ;;		_XF_popEvent
 10858 ;; This function uses a reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text32
 10862   012D6A                     __ptext32:
 10863                           	callstack 0
 10864   012D6A                     ___awmod:
 10865                           	callstack 0
 10866                           
 10867                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10868   012D6A  52E6               	movf	postinc1,f,c
 10869   012D6C  52E6               	movf	postinc1,f,c
 10870   012D6E                     
 10871                           ;stkvar	_sign @ sp[(-2)+0]
 10872   012D6E  0EFE               	movlw	-2
 10873   012D70  6AE3               	clrf	plusw1,c
 10874   012D72                     
 10875                           ;stkvar	_dividend @ sp[(-2)+-2]
 10876   012D72  0EFD               	movlw	-3
 10877   012D74  BEE3               	btfsc	plusw1,7,c
 10878   012D76  EFC1  F096         	goto	u1940
 10879   012D7A  EFBF  F096         	goto	u1941
 10880   012D7E                     u1941:
 10881   012D7E  EFCA  F096         	goto	l4316
 10882   012D82                     u1940:
 10883   012D82                     
 10884                           ;stkvar	_dividend @ sp[(-2)+-2]
 10885                           ;stkvar	_dividend @ sp[(-2)+-2]
 10886   012D82  0EFC               	movlw	-4
 10887   012D84  6CE3               	negf	plusw1,c
 10888   012D86  0EFD               	movlw	-3
 10889   012D88  1EE3               	comf	plusw1,f,c
 10890   012D8A  B0D8               	btfsc	status,0,c
 10891   012D8C  2AE3               	incf	plusw1,f,c
 10892   012D8E                     
 10893                           ;stkvar	_sign @ sp[(-2)+0]
 10894   012D8E  0EFE               	movlw	-2
 10895   012D90  6AE3               	clrf	plusw1,c
 10896   012D92  2AE3               	incf	plusw1,f,c
 10897   012D94                     l4316:
 10898                           
 10899                           ;stkvar	_divisor @ sp[(-2)+-4]
 10900   012D94  0EFB               	movlw	-5
 10901   012D96  BEE3               	btfsc	plusw1,7,c
 10902   012D98  EFD2  F096         	goto	u1950
 10903   012D9C  EFD0  F096         	goto	u1951
 10904   012DA0                     u1951:
 10905   012DA0  EFD8  F096         	goto	l4320
 10906   012DA4                     u1950:
 10907   012DA4                     
 10908                           ;stkvar	_divisor @ sp[(-2)+-4]
 10909                           ;stkvar	_divisor @ sp[(-2)+-4]
 10910   012DA4  0EFA               	movlw	-6
 10911   012DA6  6CE3               	negf	plusw1,c
 10912   012DA8  0EFB               	movlw	-5
 10913   012DAA  1EE3               	comf	plusw1,f,c
 10914   012DAC  B0D8               	btfsc	status,0,c
 10915   012DAE  2AE3               	incf	plusw1,f,c
 10916   012DB0                     l4320:
 10917                           
 10918                           ;stkvar	_divisor @ sp[(-2)+-4]
 10919   012DB0  0EFA               	movlw	-6
 10920   012DB2  CFE3 F02C          	movff	plusw1,btemp
 10921   012DB6  0EFB               	movlw	-5
 10922   012DB8  50E3               	movf	plusw1,w,c
 10923   012DBA  102C               	iorwf	btemp^0,w,c
 10924   012DBC  B4D8               	btfsc	status,2,c
 10925   012DBE  EFE3  F096         	goto	u1961
 10926   012DC2  EFE5  F096         	goto	u1960
 10927   012DC6                     u1961:
 10928   012DC6  EF40  F097         	goto	l4338
 10929   012DCA                     u1960:
 10930   012DCA                     
 10931                           ;stkvar	_counter @ sp[(-2)+1]
 10932   012DCA  0EFF               	movlw	-1
 10933   012DCC  6AE3               	clrf	plusw1,c
 10934   012DCE  2AE3               	incf	plusw1,f,c
 10935   012DD0  EFFB  F096         	goto	l4328
 10936   012DD4                     l4324:
 10937                           
 10938                           ;stkvar	_divisor @ sp[(-2)+-4]
 10939   012DD4  0EFA               	movlw	-6
 10940   012DD6  50E3               	movf	plusw1,w,c
 10941   012DD8  90D8               	bcf	status,0,c
 10942   012DDA  34E8               	rlcf	wreg,w,c
 10943   012DDC  6E2C               	movwf	btemp^0,c
 10944   012DDE  0EFA               	movlw	-6
 10945   012DE0  C02C  FFE3         	movff	btemp,plusw1
 10946   012DE4  0EFB               	movlw	-5
 10947   012DE6  50E3               	movf	plusw1,w,c
 10948   012DE8  34E8               	rlcf	wreg,w,c
 10949   012DEA  6E2C               	movwf	btemp^0,c
 10950   012DEC  0EFB               	movlw	-5
 10951   012DEE  C02C  FFE3         	movff	btemp,plusw1
 10952   012DF2                     
 10953                           ;stkvar	_counter @ sp[(-2)+1]
 10954   012DF2  0EFF               	movlw	-1
 10955   012DF4  2AE3               	incf	plusw1,f,c
 10956   012DF6                     l4328:
 10957                           
 10958                           ;stkvar	_divisor @ sp[(-2)+-4]
 10959   012DF6  0EFB               	movlw	-5
 10960   012DF8  AEE3               	btfss	plusw1,7,c
 10961   012DFA  EF01  F097         	goto	u1971
 10962   012DFE  EF03  F097         	goto	u1970
 10963   012E02                     u1971:
 10964   012E02  EFEA  F096         	goto	l4324
 10965   012E06                     u1970:
 10966   012E06                     l4330:
 10967                           
 10968                           ;stkvar	_divisor @ sp[(-2)+-4]
 10969   012E06  0EFA               	movlw	-6
 10970   012E08  CFE3 F036          	movff	plusw1,btemp+10
 10971   012E0C  0EFB               	movlw	-5
 10972   012E0E  CFE3 F037          	movff	plusw1,btemp+11
 10973                           
 10974                           ;stkvar	_dividend @ sp[(-2)+-2]
 10975   012E12  0EFC               	movlw	-4
 10976   012E14  CFE3 F034          	movff	plusw1,btemp+8
 10977   012E18  0EFD               	movlw	-3
 10978   012E1A  CFE3 F035          	movff	plusw1,btemp+9
 10979   012E1E  5036               	movf	(btemp+10)^0,w,c
 10980   012E20  5C34               	subwf	(btemp+8)^0,w,c
 10981   012E22  5037               	movf	(btemp+11)^0,w,c
 10982   012E24  5835               	subwfb	(btemp+9)^0,w,c
 10983   012E26  A0D8               	btfss	status,0,c
 10984   012E28  EF18  F097         	goto	u1981
 10985   012E2C  EF1A  F097         	goto	u1980
 10986   012E30                     u1981:
 10987   012E30  EF2C  F097         	goto	l4334
 10988   012E34                     u1980:
 10989   012E34                     
 10990                           ;stkvar	_divisor @ sp[(-2)+-4]
 10991                           ;stkvar	_dividend @ sp[(-2)+-2]
 10992   012E34  0EFC               	movlw	-4
 10993   012E36  50E3               	movf	plusw1,w,c
 10994   012E38  6E2C               	movwf	btemp^0,c
 10995   012E3A  0EFA               	movlw	-6
 10996   012E3C  50E3               	movf	plusw1,w,c
 10997   012E3E  5E2C               	subwf	btemp^0,f,c
 10998   012E40  0EFC               	movlw	-4
 10999   012E42  C02C  FFE3         	movff	btemp,plusw1
 11000   012E46  0EFD               	movlw	-3
 11001   012E48  50E3               	movf	plusw1,w,c
 11002   012E4A  6E2C               	movwf	btemp^0,c
 11003   012E4C  0EFB               	movlw	-5
 11004   012E4E  50E3               	movf	plusw1,w,c
 11005   012E50  5A2C               	subwfb	btemp^0,f,c
 11006   012E52  0EFD               	movlw	-3
 11007   012E54  C02C  FFE3         	movff	btemp,plusw1
 11008   012E58                     l4334:
 11009                           
 11010                           ;stkvar	_divisor @ sp[(-2)+-4]
 11011   012E58  90D8               	bcf	status,0,c
 11012   012E5A  0EFB               	movlw	-5
 11013   012E5C  32E3               	rrcf	plusw1,f,c
 11014   012E5E  0EFA               	movlw	-6
 11015   012E60  32E3               	rrcf	plusw1,f,c
 11016   012E62                     
 11017                           ;stkvar	_counter @ sp[(-2)+1]
 11018   012E62  0EFF               	movlw	-1
 11019   012E64  50E3               	movf	plusw1,w,c
 11020   012E66  6E2C               	movwf	btemp^0,c
 11021   012E68  0E01               	movlw	1
 11022   012E6A  5E2C               	subwf	btemp^0,f,c
 11023   012E6C  0EFF               	movlw	-1
 11024   012E6E  C02C  FFE3         	movff	btemp,plusw1
 11025   012E72  A4D8               	btfss	status,2,c
 11026   012E74  EF3E  F097         	goto	u1991
 11027   012E78  EF40  F097         	goto	u1990
 11028   012E7C                     u1991:
 11029   012E7C  EF03  F097         	goto	l4330
 11030   012E80                     u1990:
 11031   012E80                     l4338:
 11032                           
 11033                           ;stkvar	_sign @ sp[(-2)+0]
 11034   012E80  0EFE               	movlw	-2
 11035   012E82  50E3               	movf	plusw1,w,c
 11036   012E84  B4D8               	btfsc	status,2,c
 11037   012E86  EF47  F097         	goto	u2001
 11038   012E8A  EF49  F097         	goto	u2000
 11039   012E8E                     u2001:
 11040   012E8E  EF4F  F097         	goto	l4342
 11041   012E92                     u2000:
 11042   012E92                     
 11043                           ;stkvar	_dividend @ sp[(-2)+-2]
 11044                           ;stkvar	_dividend @ sp[(-2)+-2]
 11045   012E92  0EFC               	movlw	-4
 11046   012E94  6CE3               	negf	plusw1,c
 11047   012E96  0EFD               	movlw	-3
 11048   012E98  1EE3               	comf	plusw1,f,c
 11049   012E9A  B0D8               	btfsc	status,0,c
 11050   012E9C  2AE3               	incf	plusw1,f,c
 11051   012E9E                     l4342:
 11052                           
 11053                           ;stkvar	_dividend @ sp[(-2)+-2]
 11054   012E9E  0EFC               	movlw	-4
 11055   012EA0  CFE3 F02C          	movff	plusw1,btemp
 11056   012EA4  0EFD               	movlw	-3
 11057   012EA6  CFE3 F02D          	movff	plusw1,btemp+1
 11058   012EAA                     
 11059                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 11060   012EAA  0EFA               	movlw	250
 11061   012EAC  26E1               	addwf	fsr1l,f,c
 11062   012EAE  0EFF               	movlw	255
 11063   012EB0  22E2               	addwfc	fsr1h,f,c
 11064   012EB2  0012               	return		;funcret
 11065   012EB4                     __end_of___awmod:
 11066                           	callstack 0
 11067                           
 11068 ;; *************** function _LEAVECRITICAL *****************
 11069 ;; Defined at:
 11070 ;;		line 265 in file "xf/xf.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;  inISR           1  [STACK] _Bool 
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;		None
 11075 ;; Return value:  Size  Location     Type
 11076 ;;                  1  [STACK] void 
 11077 ;; Registers used:
 11078 ;;		wreg, fsr1l, fsr1h, status,2
 11079 ;; Tracked objects:
 11080 ;;		On entry : 0/0
 11081 ;;		On exit  : 0/0
 11082 ;;		Unchanged: 0/0
 11083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;Total ram usage:        0 bytes
 11089 ;; Hardware stack levels used: 1
 11090 ;; Hardware stack levels required when called: 7
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_XF_pushEvent
 11095 ;;		_XF_popEvent
 11096 ;;		_XF_scheduleTimer
 11097 ;;		_XF_unscheduleTimer
 11098 ;; This function uses a reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text33
 11102   0149A8                     __ptext33:
 11103                           	callstack 0
 11104   0149A8                     _LEAVECRITICAL:
 11105                           	callstack 10
 11106   0149A8                     
 11107                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11108                           ;stkvar	_inISR @ sp[(0)+-1]
 11109   0149A8  0EFF               	movlw	-1
 11110   0149AA  50E3               	movf	plusw1,w,c
 11111   0149AC  A4D8               	btfss	status,2,c
 11112   0149AE  EFDB  F0A4         	goto	u1711
 11113   0149B2  EFDD  F0A4         	goto	u1710
 11114   0149B6                     u1711:
 11115   0149B6  EFDE  F0A4         	goto	l1254
 11116   0149BA                     u1710:
 11117   0149BA                     
 11118                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11119   0149BA  8EF2               	bsf	242,7,c	;volatile
 11120   0149BC                     l1254:
 11121                           
 11122                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11123   0149BC  52E5               	movf	postdec1,f,c
 11124   0149BE  0012               	return		;funcret
 11125   0149C0                     __end_of_LEAVECRITICAL:
 11126                           	callstack 0
 11127                           
 11128 ;; *************** function _ENTERCRITICAL *****************
 11129 ;; Defined at:
 11130 ;;		line 250 in file "xf/xf.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  inISR           1  [STACK] _Bool 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;		None
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  1  [STACK] void 
 11137 ;; Registers used:
 11138 ;;		wreg, fsr1l, fsr1h, status,2
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;Total ram usage:        0 bytes
 11149 ;; Hardware stack levels used: 1
 11150 ;; Hardware stack levels required when called: 7
 11151 ;; This function calls:
 11152 ;;		Nothing
 11153 ;; This function is called by:
 11154 ;;		_XF_pushEvent
 11155 ;;		_XF_popEvent
 11156 ;;		_XF_scheduleTimer
 11157 ;;		_XF_unscheduleTimer
 11158 ;; This function uses a reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text34
 11162   0149C0                     __ptext34:
 11163                           	callstack 0
 11164   0149C0                     _ENTERCRITICAL:
 11165                           	callstack 10
 11166   0149C0                     
 11167                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11168                           ;stkvar	_inISR @ sp[(0)+-1]
 11169   0149C0  0EFF               	movlw	-1
 11170   0149C2  50E3               	movf	plusw1,w,c
 11171   0149C4  A4D8               	btfss	status,2,c
 11172   0149C6  EFE7  F0A4         	goto	u1701
 11173   0149CA  EFE9  F0A4         	goto	u1700
 11174   0149CE                     u1701:
 11175   0149CE  EFEA  F0A4         	goto	l1250
 11176   0149D2                     u1700:
 11177   0149D2                     
 11178                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11179   0149D2  9EF2               	bcf	242,7,c	;volatile
 11180   0149D4                     l1250:
 11181                           
 11182                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11183   0149D4  52E5               	movf	postdec1,f,c
 11184   0149D6  0012               	return		;funcret
 11185   0149D8                     __end_of_ENTERCRITICAL:
 11186                           	callstack 0
 11187                           
 11188 ;; *************** function _SYSTEM_Initialize *****************
 11189 ;; Defined at:
 11190 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11191 ;; Parameters:    Size  Location     Type
 11192 ;;		None
 11193 ;; Auto vars:     Size  Location     Type
 11194 ;;		None
 11195 ;; Return value:  Size  Location     Type
 11196 ;;                  1  [STACK] void 
 11197 ;; Registers used:
 11198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11199 ;; Tracked objects:
 11200 ;;		On entry : 0/0
 11201 ;;		On exit  : 0/0
 11202 ;;		Unchanged: 0/0
 11203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;Total ram usage:        0 bytes
 11209 ;; Hardware stack levels used: 1
 11210 ;; Hardware stack levels required when called: 9
 11211 ;; This function calls:
 11212 ;;		_INTERRUPT_Initialize
 11213 ;;		_OSCILLATOR_Initialize
 11214 ;;		_PIN_MANAGER_Initialize
 11215 ;;		_SPI2_Initialize
 11216 ;;		_TMR0_Initialize
 11217 ;; This function is called by:
 11218 ;;		_main
 11219 ;; This function uses a reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text35
 11223   0149D8                     __ptext35:
 11224                           	callstack 0
 11225   0149D8                     _SYSTEM_Initialize:
 11226                           	callstack 21
 11227   0149D8                     
 11228                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11229   0149D8  EC09  F0A5         	call	_INTERRUPT_Initialize	;wreg free
 11230   0149DC                     
 11231                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11232   0149DC  ECF7  F0A4         	call	_SPI2_Initialize	;wreg free
 11233                           
 11234                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11235   0149E0  EC3D  F0A4         	call	_PIN_MANAGER_Initialize	;wreg free
 11236                           
 11237                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11238   0149E4  ECFF  F0A4         	call	_OSCILLATOR_Initialize	;wreg free
 11239   0149E8                     
 11240                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11241   0149E8  ECEA  F0A3         	call	_TMR0_Initialize	;wreg free
 11242   0149EC                     
 11243                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11244   0149EC  0012               	return		;funcret
 11245   0149EE                     __end_of_SYSTEM_Initialize:
 11246                           	callstack 0
 11247                           
 11248 ;; *************** function _TMR0_Initialize *****************
 11249 ;; Defined at:
 11250 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11251 ;; Parameters:    Size  Location     Type
 11252 ;;		None
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;		None
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  1  [STACK] void 
 11257 ;; Registers used:
 11258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11259 ;; Tracked objects:
 11260 ;;		On entry : 0/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;Total ram usage:        0 bytes
 11269 ;; Hardware stack levels used: 1
 11270 ;; Hardware stack levels required when called: 8
 11271 ;; This function calls:
 11272 ;;		_TMR0_SetInterruptHandler
 11273 ;; This function is called by:
 11274 ;;		_SYSTEM_Initialize
 11275 ;; This function uses a reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text36
 11279   0147D4                     __ptext36:
 11280                           	callstack 0
 11281   0147D4                     _TMR0_Initialize:
 11282                           	callstack 21
 11283   0147D4                     
 11284                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11285   0147D4  9CD5               	bcf	213,6,c	;volatile
 11286   0147D6                     
 11287                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11288   0147D6  0EFD               	movlw	253
 11289   0147D8  6ED7               	movwf	215,c	;volatile
 11290                           
 11291                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11292   0147DA  0E9D               	movlw	157
 11293   0147DC  6ED6               	movwf	214,c	;volatile
 11294   0147DE                     
 11295                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11296   0147DE  50D6               	movf	214,w,c	;volatile
 11297   0147E0  CFD7 F02C          	movff	4055,btemp	;volatile
 11298   0147E4  6A2D               	clrf	(btemp+1)^0,c
 11299   0147E6  C02C  F02D         	movff	btemp,btemp+1
 11300   0147EA  6A2C               	clrf	btemp^0,c
 11301   0147EC  102C               	iorwf	btemp^0,w,c
 11302   0147EE  6E22               	movwf	_timer0ReloadVal^0,c	;volatile
 11303   0147F0  502D               	movf	(btemp+1)^0,w,c
 11304   0147F2  6E23               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11305   0147F4                     
 11306                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11307   0147F4  94F2               	bcf	242,2,c	;volatile
 11308   0147F6                     
 11309                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11310   0147F6  8AF2               	bsf	242,5,c	;volatile
 11311   0147F8                     
 11312                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11313   0147F8  0E16               	movlw	low _TMR0_DefaultInterruptHandler
 11314   0147FA  6EE6               	movwf	postinc1,c
 11315   0147FC  0E4A               	movlw	high _TMR0_DefaultInterruptHandler
 11316   0147FE  6EE6               	movwf	postinc1,c
 11317   014800  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11318   014802  6EE6               	movwf	postinc1,c
 11319   014804  ECA8  F0A4         	call	_TMR0_SetInterruptHandler	;wreg free
 11320   014808                     
 11321                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11322   014808  0E97               	movlw	151
 11323   01480A  6ED5               	movwf	213,c	;volatile
 11324   01480C                     
 11325                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11326   01480C  0012               	return		;funcret
 11327   01480E                     __end_of_TMR0_Initialize:
 11328                           	callstack 0
 11329                           
 11330 ;; *************** function _TMR0_SetInterruptHandler *****************
 11331 ;; Defined at:
 11332 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11335 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;		None
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1  [STACK] void 
 11340 ;; Registers used:
 11341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;Total ram usage:        0 bytes
 11352 ;; Hardware stack levels used: 1
 11353 ;; Hardware stack levels required when called: 7
 11354 ;; This function calls:
 11355 ;;		Nothing
 11356 ;; This function is called by:
 11357 ;;		_TMR0_Initialize
 11358 ;;		_main
 11359 ;; This function uses a reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text37
 11363   014950                     __ptext37:
 11364                           	callstack 0
 11365   014950                     _TMR0_SetInterruptHandler:
 11366                           	callstack 23
 11367   014950                     
 11368                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11369                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11370   014950  50E1               	movf	fsr1l,w,c
 11371   014952  0FFD               	addlw	-3
 11372   014954  6ED9               	movwf	fsr2l,c
 11373   014956  50E2               	movf	fsr1h,w,c
 11374   014958  6EDA               	movwf	fsr2h,c
 11375   01495A  0EFF               	movlw	255
 11376   01495C  22DA               	addwfc	fsr2h,f,c
 11377   01495E  CFDE F05C          	movff	postinc2,_TMR0_InterruptHandler
 11378   014962  CFDE F05D          	movff	postinc2,_TMR0_InterruptHandler+1
 11379   014966  CFDD F05E          	movff	postdec2,_TMR0_InterruptHandler+2
 11380   01496A                     
 11381                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11382   01496A  52E5               	movf	postdec1,f,c
 11383   01496C  52E5               	movf	postdec1,f,c
 11384   01496E  52E5               	movf	postdec1,f,c
 11385   014970  0012               	return		;funcret
 11386   014972                     __end_of_TMR0_SetInterruptHandler:
 11387                           	callstack 0
 11388                           
 11389 ;; *************** function _SPI2_Initialize *****************
 11390 ;; Defined at:
 11391 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1  [STACK] void 
 11398 ;; Registers used:
 11399 ;;		wreg, status,2
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;Total ram usage:        0 bytes
 11410 ;; Hardware stack levels used: 1
 11411 ;; Hardware stack levels required when called: 7
 11412 ;; This function calls:
 11413 ;;		Nothing
 11414 ;; This function is called by:
 11415 ;;		_SYSTEM_Initialize
 11416 ;; This function uses a reentrant model
 11417 ;;
 11418                           
 11419                           	psect	text38
 11420   0149EE                     __ptext38:
 11421                           	callstack 0
 11422   0149EE                     _SPI2_Initialize:
 11423                           	callstack 22
 11424   0149EE                     
 11425                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11426   0149EE  0E40               	movlw	64
 11427   0149F0  6E64               	movwf	100,c	;volatile
 11428                           
 11429                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11430   0149F2  0E01               	movlw	1
 11431   0149F4  6E63               	movwf	99,c	;volatile
 11432   0149F6                     
 11433                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11434   0149F6  6A65               	clrf	101,c	;volatile
 11435   0149F8                     
 11436                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11437   0149F8  9C95               	bcf	149,6,c	;volatile
 11438   0149FA                     
 11439                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11440   0149FA  9A63               	bcf	99,5,c	;volatile
 11441   0149FC                     
 11442                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11443   0149FC  0012               	return		;funcret
 11444   0149FE                     __end_of_SPI2_Initialize:
 11445                           	callstack 0
 11446                           
 11447 ;; *************** function _PIN_MANAGER_Initialize *****************
 11448 ;; Defined at:
 11449 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11450 ;; Parameters:    Size  Location     Type
 11451 ;;		None
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;		None
 11454 ;; Return value:  Size  Location     Type
 11455 ;;                  1  [STACK] void 
 11456 ;; Registers used:
 11457 ;;		wreg, status,2
 11458 ;; Tracked objects:
 11459 ;;		On entry : 0/0
 11460 ;;		On exit  : 0/0
 11461 ;;		Unchanged: 0/0
 11462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;Total ram usage:        0 bytes
 11468 ;; Hardware stack levels used: 1
 11469 ;; Hardware stack levels required when called: 7
 11470 ;; This function calls:
 11471 ;;		Nothing
 11472 ;; This function is called by:
 11473 ;;		_SYSTEM_Initialize
 11474 ;; This function uses a reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text39
 11478   01487A                     __ptext39:
 11479                           	callstack 0
 11480   01487A                     _PIN_MANAGER_Initialize:
 11481                           	callstack 22
 11482   01487A                     
 11483                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11484   01487A  6A8D               	clrf	141,c	;volatile
 11485                           
 11486                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11487   01487C  6A91               	clrf	145,c	;volatile
 11488                           
 11489                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11490   01487E  6A8C               	clrf	140,c	;volatile
 11491                           
 11492                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11493   014880  6A89               	clrf	137,c	;volatile
 11494                           
 11495                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11496   014882  6A8E               	clrf	142,c	;volatile
 11497                           
 11498                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11499   014884  6A8A               	clrf	138,c	;volatile
 11500                           
 11501                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11502   014886  6A8F               	clrf	143,c	;volatile
 11503                           
 11504                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11505   014888  6A8B               	clrf	139,c	;volatile
 11506                           
 11507                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11508   01488A  6A90               	clrf	144,c	;volatile
 11509                           
 11510                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11511   01488C  6896               	setf	150,c	;volatile
 11512                           
 11513                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11514   01488E  6897               	setf	151,c	;volatile
 11515   014890                     
 11516                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11517   014890  0E3F               	movlw	63
 11518   014892  6E92               	movwf	146,c	;volatile
 11519   014894                     
 11520                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11521   014894  6898               	setf	152,c	;volatile
 11522   014896                     
 11523                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11524   014896  6893               	setf	147,c	;volatile
 11525   014898                     
 11526                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11527   014898  6899               	setf	153,c	;volatile
 11528   01489A                     
 11529                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11530   01489A  6894               	setf	148,c	;volatile
 11531                           
 11532                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11533   01489C  0EAF               	movlw	175
 11534   01489E  6E95               	movwf	149,c	;volatile
 11535   0148A0                     
 11536                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11537   0148A0  689A               	setf	154,c	;volatile
 11538                           
 11539                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11540   0148A2  0EF0               	movlw	-16
 11541   0148A4  16C1               	andwf	193,f,c	;volatile
 11542   0148A6                     
 11543                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11544   0148A6  0012               	return		;funcret
 11545   0148A8                     __end_of_PIN_MANAGER_Initialize:
 11546                           	callstack 0
 11547                           
 11548 ;; *************** function _OSCILLATOR_Initialize *****************
 11549 ;; Defined at:
 11550 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  1  [STACK] void 
 11557 ;; Registers used:
 11558 ;;		wreg, status,2
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;Total ram usage:        0 bytes
 11569 ;; Hardware stack levels used: 1
 11570 ;; Hardware stack levels required when called: 7
 11571 ;; This function calls:
 11572 ;;		Nothing
 11573 ;; This function is called by:
 11574 ;;		_SYSTEM_Initialize
 11575 ;; This function uses a reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text40
 11579   0149FE                     __ptext40:
 11580                           	callstack 0
 11581   0149FE                     _OSCILLATOR_Initialize:
 11582                           	callstack 22
 11583   0149FE                     
 11584                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 11585   0149FE  6AD3               	clrf	211,c	;volatile
 11586   014A00                     
 11587                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 11588   014A00  0E50               	movlw	80
 11589   014A02  6E9B               	movwf	155,c	;volatile
 11590   014A04                     
 11591                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 11592   014A04  0012               	return		;funcret
 11593   014A06                     __end_of_OSCILLATOR_Initialize:
 11594                           	callstack 0
 11595                           
 11596 ;; *************** function _INTERRUPT_Initialize *****************
 11597 ;; Defined at:
 11598 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  1  [STACK] void 
 11605 ;; Registers used:
 11606 ;;		None
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11616 ;;Total ram usage:        0 bytes
 11617 ;; Hardware stack levels used: 1
 11618 ;; Hardware stack levels required when called: 7
 11619 ;; This function calls:
 11620 ;;		Nothing
 11621 ;; This function is called by:
 11622 ;;		_SYSTEM_Initialize
 11623 ;; This function uses a reentrant model
 11624 ;;
 11625                           
 11626                           	psect	text41
 11627   014A12                     __ptext41:
 11628                           	callstack 0
 11629   014A12                     _INTERRUPT_Initialize:
 11630                           	callstack 22
 11631   014A12                     
 11632                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 11633   014A12  9ED0               	bcf	208,7,c	;volatile
 11634   014A14                     
 11635                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 11636   014A14  0012               	return		;funcret
 11637   014A16                     __end_of_INTERRUPT_Initialize:
 11638                           	callstack 0
 11639                           
 11640 ;; *************** function _CanSetFilter *****************
 11641 ;; Defined at:
 11642 ;;		line 231 in file "can/can.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;  filter          1  [STACK] enum E5322
 11645 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 11646 ;;		 -> filterObj(6), 
 11647 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 11648 ;;		 -> maskObj(6), 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1  [STACK] void 
 11653 ;; Registers used:
 11654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;Total ram usage:        0 bytes
 11665 ;; Hardware stack levels used: 1
 11666 ;; Hardware stack levels required when called: 10
 11667 ;; This function calls:
 11668 ;;		_DRV_CANFDSPI_FilterDisable
 11669 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 11670 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 11671 ;;		_DRV_CANFDSPI_FilterToFifoLink
 11672 ;; This function is called by:
 11673 ;;		_main
 11674 ;; This function uses a reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text42
 11678   01445E                     __ptext42:
 11679                           	callstack 0
 11680   01445E                     _CanSetFilter:
 11681                           	callstack 20
 11682   01445E                     
 11683                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 11684                           ;stkvar	_filter @ sp[(0)+-1]
 11685   01445E  0EFF               	movlw	-1
 11686   014460  50E3               	movf	plusw1,w,c
 11687   014462  6EE6               	movwf	postinc1,c
 11688   014464  EC21  F0A1         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 11689   014468                     
 11690                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 11691                           ;stkvar	_fObj @ sp[(0)+-3]
 11692   014468  0EFD               	movlw	-3
 11693   01446A  CFE3 FFE6          	movff	plusw1,postinc1
 11694   01446E  CFE3 FFE6          	movff	plusw1,postinc1
 11695                           
 11696                           ;stkvar	_filter @ sp[(-2)+-1]
 11697   014472  0EFD               	movlw	-3
 11698   014474  50E3               	movf	plusw1,w,c
 11699   014476  6EE6               	movwf	postinc1,c
 11700   014478  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 11701   01447C                     
 11702                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 11703                           ;stkvar	_fObj @ sp[(0)+-3]
 11704   01447C  0EFD               	movlw	-3
 11705   01447E  CFE3 F036          	movff	plusw1,btemp+10
 11706   014482  0EFE               	movlw	-2
 11707   014484  CFE3 F037          	movff	plusw1,btemp+11
 11708   014488  0E05               	movlw	5
 11709   01448A  2436               	addwf	(btemp+10)^0,w,c
 11710   01448C  6ED9               	movwf	fsr2l,c
 11711   01448E  0E00               	movlw	0
 11712   014490  2037               	addwfc	(btemp+11)^0,w,c
 11713   014492  6EDA               	movwf	fsr2h,c
 11714   014494  50DF               	movf	indf2,w,c
 11715   014496  6EE6               	movwf	postinc1,c
 11716                           
 11717                           ;stkvar	_mObj @ sp[(-1)+-5]
 11718   014498  0EFA               	movlw	-6
 11719   01449A  CFE3 FFE6          	movff	plusw1,postinc1
 11720   01449E  CFE3 FFE6          	movff	plusw1,postinc1
 11721                           
 11722                           ;stkvar	_filter @ sp[(-3)+-1]
 11723   0144A2  0EFC               	movlw	-4
 11724   0144A4  50E3               	movf	plusw1,w,c
 11725   0144A6  6EE6               	movwf	postinc1,c
 11726   0144A8  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 11727   0144AC                     
 11728                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 11729   0144AC  0E01               	movlw	1
 11730   0144AE  6EE6               	movwf	postinc1,c
 11731   0144B0  0E02               	movlw	2
 11732   0144B2  6EE6               	movwf	postinc1,c
 11733                           
 11734                           ;stkvar	_filter @ sp[(-2)+-1]
 11735   0144B4  0EFD               	movlw	-3
 11736   0144B6  50E3               	movf	plusw1,w,c
 11737   0144B8  6EE6               	movwf	postinc1,c
 11738   0144BA  ECD6  F0A0         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 11739   0144BE                     
 11740                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 11741   0144BE  0EFB               	movlw	251
 11742   0144C0  26E1               	addwf	fsr1l,f,c
 11743   0144C2  0EFF               	movlw	255
 11744   0144C4  22E2               	addwfc	fsr1h,f,c
 11745   0144C6  0012               	return		;funcret
 11746   0144C8                     __end_of_CanSetFilter:
 11747                           	callstack 0
 11748                           
 11749 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 11750 ;; Defined at:
 11751 ;;		line 1072 in file "can/can.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;  filter          1  [STACK] enum E5322
 11754 ;;  channel         1  [STACK] enum E5287
 11755 ;;  enable          1  [STACK] _Bool 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  a               2  [STACK] unsigned short 
 11758 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 11759 ;;  spiTransferE    1    0        char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1  [STACK] char 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;Total ram usage:        0 bytes
 11774 ;; Hardware stack levels used: 1
 11775 ;; Hardware stack levels required when called: 9
 11776 ;; This function calls:
 11777 ;;		_DRV_CANFDSPI_WriteByte
 11778 ;; This function is called by:
 11779 ;;		_CanSetFilter
 11780 ;; This function uses a reentrant model
 11781 ;;
 11782                           
 11783                           	psect	text43
 11784   0141AC                     __ptext43:
 11785                           	callstack 0
 11786   0141AC                     _DRV_CANFDSPI_FilterToFifoLink:
 11787                           	callstack 0
 11788                           
 11789                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11790   0141AC  52E6               	movf	postinc1,f,c
 11791   0141AE  52E6               	movf	postinc1,f,c
 11792   0141B0  52E6               	movf	postinc1,f,c
 11793   0141B2                     
 11794                           ;can/can.c: 1080:     if (enable) {
 11795                           ;stkvar	_enable @ sp[(-3)+-3]
 11796   0141B2  0EFA               	movlw	-6
 11797   0141B4  50E3               	movf	plusw1,w,c
 11798   0141B6  B4D8               	btfsc	status,2,c
 11799   0141B8  EFE0  F0A0         	goto	u2741
 11800   0141BC  EFE2  F0A0         	goto	u2740
 11801   0141C0                     u2741:
 11802   0141C0  EFEC  F0A0         	goto	l5004
 11803   0141C4                     u2740:
 11804   0141C4                     
 11805                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11806                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11807   0141C4  50E1               	movf	fsr1l,w,c
 11808   0141C6  0FFF               	addlw	-1
 11809   0141C8  6ED9               	movwf	fsr2l,c
 11810   0141CA  50E2               	movf	fsr1h,w,c
 11811   0141CC  6EDA               	movwf	fsr2h,c
 11812   0141CE  0EFF               	movlw	255
 11813   0141D0  22DA               	addwfc	fsr2h,f,c
 11814   0141D2  8EDF               	bsf	indf2,7,c
 11815                           
 11816                           ;can/can.c: 1082:     } else {
 11817   0141D4  EFF4  F0A0         	goto	l5006
 11818   0141D8                     l5004:
 11819                           
 11820                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11821                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11822   0141D8  50E1               	movf	fsr1l,w,c
 11823   0141DA  0FFF               	addlw	-1
 11824   0141DC  6ED9               	movwf	fsr2l,c
 11825   0141DE  50E2               	movf	fsr1h,w,c
 11826   0141E0  6EDA               	movwf	fsr2h,c
 11827   0141E2  0EFF               	movlw	255
 11828   0141E4  22DA               	addwfc	fsr2h,f,c
 11829   0141E6  9EDF               	bcf	indf2,7,c
 11830   0141E8                     l5006:
 11831                           
 11832                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11833                           ;stkvar	_channel @ sp[(-3)+-2]
 11834   0141E8  0EFB               	movlw	-5
 11835   0141EA  CFE3 F037          	movff	plusw1,btemp+11
 11836                           
 11837                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11838   0141EE  50E1               	movf	fsr1l,w,c
 11839   0141F0  0FFF               	addlw	-1
 11840   0141F2  6ED9               	movwf	fsr2l,c
 11841   0141F4  50E2               	movf	fsr1h,w,c
 11842   0141F6  6EDA               	movwf	fsr2h,c
 11843   0141F8  0EFF               	movlw	255
 11844   0141FA  22DA               	addwfc	fsr2h,f,c
 11845   0141FC  50DF               	movf	223,w,c
 11846   0141FE  1837               	xorwf	(btemp+11)^0,w,c
 11847   014200  0BE0               	andlw	-32
 11848   014202  1837               	xorwf	(btemp+11)^0,w,c
 11849   014204  6EDF               	movwf	223,c
 11850   014206                     
 11851                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 11852                           ;stkvar	_filter @ sp[(-3)+-1]
 11853   014206  0EFC               	movlw	-4
 11854   014208  CFE3 F037          	movff	plusw1,btemp+11
 11855   01420C  0ED0               	movlw	208
 11856   01420E  2437               	addwf	(btemp+11)^0,w,c
 11857   014210  6E34               	movwf	(btemp+8)^0,c
 11858   014212  6A35               	clrf	(btemp+9)^0,c
 11859   014214  0E01               	movlw	1
 11860   014216  2235               	addwfc	(btemp+9)^0,f,c
 11861                           
 11862                           ;stkvar	_a @ sp[(-3)+0]
 11863   014218  0EFD               	movlw	-3
 11864   01421A  C034  FFE3         	movff	btemp+8,plusw1
 11865   01421E  0EFE               	movlw	-2
 11866   014220  C035  FFE3         	movff	btemp+9,plusw1
 11867   014224                     
 11868                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11869   014224  0EFF               	movlw	-1
 11870   014226  50E3               	movf	plusw1,w,c
 11871   014228  6EE6               	movwf	postinc1,c
 11872                           
 11873                           ;stkvar	_a @ sp[(-4)+0]
 11874   01422A  0EFC               	movlw	-4
 11875   01422C  CFE3 FFE6          	movff	plusw1,postinc1
 11876   014230  CFE3 FFE6          	movff	plusw1,postinc1
 11877   014234  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 11878   014238                     
 11879                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 11880   014238  0EFA               	movlw	250
 11881   01423A  26E1               	addwf	fsr1l,f,c
 11882   01423C  0EFF               	movlw	255
 11883   01423E  22E2               	addwfc	fsr1h,f,c
 11884   014240  0012               	return		;funcret
 11885   014242                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 11886                           	callstack 0
 11887                           
 11888 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 11889 ;; Defined at:
 11890 ;;		line 1001 in file "can/can.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  filter          1  [STACK] enum E5322
 11893 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 11894 ;;		 -> filterObj(6), 
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;  temp32          4  [STACK] unsigned long 
 11897 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 11898 ;;  a               2  [STACK] unsigned short 
 11899 ;;  spiTransferE    1    0        char 
 11900 ;; Return value:  Size  Location     Type
 11901 ;;                  1  [STACK] char 
 11902 ;; Registers used:
 11903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11904 ;; Tracked objects:
 11905 ;;		On entry : 0/0
 11906 ;;		On exit  : 0/0
 11907 ;;		Unchanged: 0/0
 11908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11913 ;;Total ram usage:        0 bytes
 11914 ;; Hardware stack levels used: 1
 11915 ;; Hardware stack levels required when called: 9
 11916 ;; This function calls:
 11917 ;;		_DRV_CANFDSPI_WriteWord
 11918 ;; This function is called by:
 11919 ;;		_CanSetFilter
 11920 ;; This function uses a reentrant model
 11921 ;;
 11922                           
 11923                           	psect	text44
 11924   010E34                     __ptext44:
 11925                           	callstack 0
 11926   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 11927                           	callstack 0
 11928                           
 11929                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11930   010E34  0E0C               	movlw	12
 11931   010E36  26E1               	addwf	fsr1l,f,c
 11932   010E38  0E00               	movlw	0
 11933   010E3A  22E2               	addwfc	fsr1h,f,c
 11934   010E3C                     
 11935                           ;can/can.c: 1009:     fObj.word = 0;
 11936                           ;stkvar	_fObj @ sp[(-12)+4]
 11937   010E3C  0EF8               	movlw	-8
 11938   010E3E  6AE3               	clrf	plusw1,c
 11939   010E40  0EF9               	movlw	-7
 11940   010E42  6AE3               	clrf	plusw1,c
 11941   010E44  0EFA               	movlw	-6
 11942   010E46  6AE3               	clrf	plusw1,c
 11943   010E48  0EFB               	movlw	-5
 11944   010E4A  6AE3               	clrf	plusw1,c
 11945   010E4C                     
 11946                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 11947                           ;stkvar	_id @ sp[(-12)+-3]
 11948   010E4C  0EF1               	movlw	-15
 11949   010E4E  CFE3 F036          	movff	plusw1,btemp+10
 11950   010E52  0EF2               	movlw	-14
 11951   010E54  CFE3 F037          	movff	plusw1,btemp+11
 11952   010E58  0E05               	movlw	5
 11953   010E5A  2436               	addwf	(btemp+10)^0,w,c
 11954   010E5C  6ED9               	movwf	fsr2l,c
 11955   010E5E  0E00               	movlw	0
 11956   010E60  2037               	addwfc	(btemp+11)^0,w,c
 11957   010E62  6EDA               	movwf	fsr2h,c
 11958   010E64  50DF               	movf	indf2,w,c
 11959   010E66  A4D8               	btfss	status,2,c
 11960   010E68  EF38  F087         	goto	u2561
 11961   010E6C  EF3A  F087         	goto	u2560
 11962   010E70                     u2561:
 11963   010E70  EFD2  F087         	goto	l4950
 11964   010E74                     u2560:
 11965   010E74                     
 11966                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 11967                           ;stkvar	_id @ sp[(-12)+-3]
 11968   010E74  0EF1               	movlw	-15
 11969   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 11970   010E7A  0EF2               	movlw	-14
 11971   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 11972   010E80  50DF               	movf	indf2,w,c
 11973   010E82  6E37               	movwf	(btemp+11)^0,c
 11974                           
 11975                           ;stkvar	_fObj @ sp[(-12)+4]
 11976   010E84  0EF8               	movlw	-8
 11977   010E86  C037  FFE3         	movff	btemp+11,plusw1
 11978   010E8A                     
 11979                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 11980                           ;stkvar	_fObj @ sp[(-12)+4]
 11981   010E8A  0EF9               	movlw	249
 11982   010E8C  24E1               	addwf	fsr1l,w,c
 11983   010E8E  6ED9               	movwf	fsr2l,c
 11984   010E90  0EFF               	movlw	255
 11985   010E92  20E2               	addwfc	fsr1h,w,c
 11986   010E94  6EDA               	movwf	fsr2h,c
 11987                           
 11988                           ;stkvar	_id @ sp[(-12)+-3]
 11989   010E96  0EF1               	movlw	-15
 11990   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 11991   010E9C  0EF2               	movlw	-14
 11992   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 11993   010EA2  CFEE F034          	movff	postinc0,btemp+8
 11994   010EA6  CFEE F035          	movff	postinc0,btemp+9
 11995   010EAA  CFEE F036          	movff	postinc0,btemp+10
 11996   010EAE  CFEE F037          	movff	postinc0,btemp+11
 11997   010EB2  C035  F034         	movff	btemp+9,btemp+8
 11998   010EB6  C036  F035         	movff	btemp+10,btemp+9
 11999   010EBA  C037  F036         	movff	btemp+11,btemp+10
 12000   010EBE  6A37               	clrf	(btemp+11)^0,c
 12001   010EC0  5034               	movf	(btemp+8)^0,w,c
 12002   010EC2  6EDF               	movwf	indf2,c
 12003   010EC4                     
 12004                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 12005                           ;stkvar	_fObj @ sp[(-12)+4]
 12006   010EC4  0EFA               	movlw	250
 12007   010EC6  24E1               	addwf	fsr1l,w,c
 12008   010EC8  6ED9               	movwf	fsr2l,c
 12009   010ECA  0EFF               	movlw	255
 12010   010ECC  20E2               	addwfc	fsr1h,w,c
 12011   010ECE  6EDA               	movwf	fsr2h,c
 12012                           
 12013                           ;stkvar	_id @ sp[(-12)+-3]
 12014   010ED0  0EF1               	movlw	-15
 12015   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 12016   010ED6  0EF2               	movlw	-14
 12017   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 12018   010EDC  CFEE F034          	movff	postinc0,btemp+8
 12019   010EE0  CFEE F035          	movff	postinc0,btemp+9
 12020   010EE4  CFEE F036          	movff	postinc0,btemp+10
 12021   010EE8  CFEE F037          	movff	postinc0,btemp+11
 12022   010EEC  0E11               	movlw	17
 12023   010EEE  EF7E  F087         	goto	u2570
 12024   010EF2                     u2575:
 12025   010EF2  90D8               	bcf	status,0,c
 12026   010EF4  3237               	rrcf	(btemp+11)^0,f,c
 12027   010EF6  3236               	rrcf	(btemp+10)^0,f,c
 12028   010EF8  3235               	rrcf	(btemp+9)^0,f,c
 12029   010EFA  3234               	rrcf	(btemp+8)^0,f,c
 12030   010EFC                     u2570:
 12031   010EFC  2EE8               	decfsz	wreg,f,c
 12032   010EFE  EF79  F087         	goto	u2575
 12033   010F02  5034               	movf	(btemp+8)^0,w,c
 12034   010F04  6EDF               	movwf	indf2,c
 12035   010F06                     
 12036                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12037                           ;stkvar	_fObj @ sp[(-12)+4]
 12038   010F06  0EFB               	movlw	251
 12039   010F08  24E1               	addwf	fsr1l,w,c
 12040   010F0A  6ED9               	movwf	fsr2l,c
 12041   010F0C  0EFF               	movlw	255
 12042   010F0E  20E2               	addwfc	fsr1h,w,c
 12043   010F10  6EDA               	movwf	fsr2h,c
 12044                           
 12045                           ;stkvar	_id @ sp[(-12)+-3]
 12046   010F12  0EF1               	movlw	-15
 12047   010F14  CFE3 F036          	movff	plusw1,btemp+10
 12048   010F18  0EF2               	movlw	-14
 12049   010F1A  CFE3 F037          	movff	plusw1,btemp+11
 12050   010F1E  0E05               	movlw	5
 12051   010F20  2436               	addwf	(btemp+10)^0,w,c
 12052   010F22  6EE9               	movwf	fsr0l,c
 12053   010F24  0E00               	movlw	0
 12054   010F26  2037               	addwfc	(btemp+11)^0,w,c
 12055   010F28  6EEA               	movwf	fsr0h,c
 12056   010F2A  50EF               	movf	indf0,w,c
 12057   010F2C  6E37               	movwf	(btemp+11)^0,c
 12058   010F2E  0E06               	movlw	6
 12059   010F30  6E2C               	movwf	btemp^0,c
 12060   010F32                     u2585:
 12061   010F32  90D8               	bcf	status,0,c
 12062   010F34  3637               	rlcf	(btemp+11)^0,f,c
 12063   010F36  2E2C               	decfsz	btemp^0,f,c
 12064   010F38  EF99  F087         	goto	u2585
 12065                           
 12066                           ;stkvar	_id @ sp[(-12)+-3]
 12067   010F3C  0EF1               	movlw	-15
 12068   010F3E  CFE3 F034          	movff	plusw1,btemp+8
 12069   010F42  0EF2               	movlw	-14
 12070   010F44  CFE3 F035          	movff	plusw1,btemp+9
 12071   010F48  0E04               	movlw	4
 12072   010F4A  2434               	addwf	(btemp+8)^0,w,c
 12073   010F4C  6EE9               	movwf	fsr0l,c
 12074   010F4E  0E00               	movlw	0
 12075   010F50  2035               	addwfc	(btemp+9)^0,w,c
 12076   010F52  6EEA               	movwf	fsr0h,c
 12077   010F54  50EF               	movf	indf0,w,c
 12078   010F56  6E36               	movwf	(btemp+10)^0,c
 12079   010F58  0E05               	movlw	5
 12080   010F5A  6E2C               	movwf	btemp^0,c
 12081   010F5C                     u2595:
 12082   010F5C  90D8               	bcf	status,0,c
 12083   010F5E  3636               	rlcf	(btemp+10)^0,f,c
 12084   010F60  2E2C               	decfsz	btemp^0,f,c
 12085   010F62  EFAE  F087         	goto	u2595
 12086                           
 12087                           ;stkvar	_id @ sp[(-12)+-3]
 12088   010F66  0EF1               	movlw	-15
 12089   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 12090   010F6C  0EF2               	movlw	-14
 12091   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 12092   010F72  CFEE F030          	movff	postinc0,btemp+4
 12093   010F76  CFEE F031          	movff	postinc0,btemp+5
 12094   010F7A  CFEE F032          	movff	postinc0,btemp+6
 12095   010F7E  CFEE F033          	movff	postinc0,btemp+7
 12096   010F82  0E19               	movlw	25
 12097   010F84  EFC9  F087         	goto	u2600
 12098   010F88                     u2605:
 12099   010F88  90D8               	bcf	status,0,c
 12100   010F8A  3233               	rrcf	(btemp+7)^0,f,c
 12101   010F8C  3232               	rrcf	(btemp+6)^0,f,c
 12102   010F8E  3231               	rrcf	(btemp+5)^0,f,c
 12103   010F90  3230               	rrcf	(btemp+4)^0,f,c
 12104   010F92                     u2600:
 12105   010F92  2EE8               	decfsz	wreg,f,c
 12106   010F94  EFC4  F087         	goto	u2605
 12107   010F98  5030               	movf	(btemp+4)^0,w,c
 12108   010F9A  1036               	iorwf	(btemp+10)^0,w,c
 12109   010F9C  1037               	iorwf	(btemp+11)^0,w,c
 12110   010F9E  6EDF               	movwf	indf2,c
 12111                           
 12112                           ;can/can.c: 1017:     }
 12113   010FA0  EF97  F088         	goto	l4962
 12114   010FA4                     l4950:
 12115                           
 12116                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12117                           ;stkvar	_id @ sp[(-12)+-3]
 12118   010FA4  0EF1               	movlw	-15
 12119   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12120   010FAA  0EF2               	movlw	-14
 12121   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12122   010FB0  CFDE F034          	movff	postinc2,btemp+8
 12123   010FB4  CFDE F035          	movff	postinc2,btemp+9
 12124   010FB8  CFDE F036          	movff	postinc2,btemp+10
 12125   010FBC  CFDE F037          	movff	postinc2,btemp+11
 12126   010FC0  0E13               	movlw	19
 12127   010FC2  EFE8  F087         	goto	u2610
 12128   010FC6                     u2615:
 12129   010FC6  90D8               	bcf	status,0,c
 12130   010FC8  3237               	rrcf	(btemp+11)^0,f,c
 12131   010FCA  3236               	rrcf	(btemp+10)^0,f,c
 12132   010FCC  3235               	rrcf	(btemp+9)^0,f,c
 12133   010FCE  3234               	rrcf	(btemp+8)^0,f,c
 12134   010FD0                     u2610:
 12135   010FD0  2EE8               	decfsz	wreg,f,c
 12136   010FD2  EFE3  F087         	goto	u2615
 12137   010FD6  0EFF               	movlw	255
 12138   010FD8  1434               	andwf	(btemp+8)^0,w,c
 12139   010FDA  6E30               	movwf	(btemp+4)^0,c
 12140   010FDC  0E07               	movlw	7
 12141   010FDE  1435               	andwf	(btemp+9)^0,w,c
 12142   010FE0  6E31               	movwf	(btemp+5)^0,c
 12143   010FE2  0E00               	movlw	0
 12144   010FE4  1436               	andwf	(btemp+10)^0,w,c
 12145   010FE6  6E32               	movwf	(btemp+6)^0,c
 12146   010FE8  0E00               	movlw	0
 12147   010FEA  1437               	andwf	(btemp+11)^0,w,c
 12148   010FEC  6E33               	movwf	(btemp+7)^0,c
 12149                           
 12150                           ;stkvar	_id @ sp[(-12)+-3]
 12151   010FEE  0EF1               	movlw	-15
 12152   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12153   010FF4  0EF2               	movlw	-14
 12154   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12155   010FFA  0EFF               	movlw	255
 12156   010FFC  14DE               	andwf	postinc2,w,c
 12157   010FFE  6E34               	movwf	(btemp+8)^0,c
 12158   011000  0EFF               	movlw	255
 12159   011002  14DE               	andwf	postinc2,w,c
 12160   011004  6E35               	movwf	(btemp+9)^0,c
 12161   011006  0E03               	movlw	3
 12162   011008  14DE               	andwf	postinc2,w,c
 12163   01100A  6E36               	movwf	(btemp+10)^0,c
 12164   01100C  0E00               	movlw	0
 12165   01100E  14DE               	andwf	postinc2,w,c
 12166   011010  6E37               	movwf	(btemp+11)^0,c
 12167   011012  0E0B               	movlw	11
 12168   011014                     u2625:
 12169   011014  90D8               	bcf	status,0,c
 12170   011016  3634               	rlcf	(btemp+8)^0,f,c
 12171   011018  3635               	rlcf	(btemp+9)^0,f,c
 12172   01101A  3636               	rlcf	(btemp+10)^0,f,c
 12173   01101C  3637               	rlcf	(btemp+11)^0,f,c
 12174   01101E  2EE8               	decfsz	wreg,f,c
 12175   011020  EF0A  F088         	goto	u2625
 12176   011024  5030               	movf	(btemp+4)^0,w,c
 12177   011026  1034               	iorwf	(btemp+8)^0,w,c
 12178   011028  6E2C               	movwf	btemp^0,c
 12179   01102A  5031               	movf	(btemp+5)^0,w,c
 12180   01102C  1035               	iorwf	(btemp+9)^0,w,c
 12181   01102E  6E2D               	movwf	(btemp+1)^0,c
 12182   011030  5032               	movf	(btemp+6)^0,w,c
 12183   011032  1036               	iorwf	(btemp+10)^0,w,c
 12184   011034  6E2E               	movwf	(btemp+2)^0,c
 12185   011036  5033               	movf	(btemp+7)^0,w,c
 12186   011038  1037               	iorwf	(btemp+11)^0,w,c
 12187   01103A  6E2F               	movwf	(btemp+3)^0,c
 12188                           
 12189                           ;stkvar	_temp32 @ sp[(-12)+0]
 12190   01103C  0EF4               	movlw	-12
 12191   01103E  C02C  FFE3         	movff	btemp,plusw1
 12192   011042  0EF5               	movlw	-11
 12193   011044  C02D  FFE3         	movff	btemp+1,plusw1
 12194   011048  0EF6               	movlw	-10
 12195   01104A  C02E  FFE3         	movff	btemp+2,plusw1
 12196   01104E  0EF7               	movlw	-9
 12197   011050  C02F  FFE3         	movff	btemp+3,plusw1
 12198   011054                     
 12199                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12200                           ;stkvar	_temp32 @ sp[(-12)+0]
 12201   011054  50E1               	movf	fsr1l,w,c
 12202   011056  0FF4               	addlw	-12
 12203   011058  6ED9               	movwf	fsr2l,c
 12204   01105A  50E2               	movf	fsr1h,w,c
 12205   01105C  6EDA               	movwf	fsr2h,c
 12206   01105E  0EFF               	movlw	255
 12207   011060  22DA               	addwfc	fsr2h,f,c
 12208   011062  0EFF               	movlw	255
 12209   011064  16DE               	andwf	postinc2,f,c
 12210   011066  0EFF               	movlw	255
 12211   011068  16DE               	andwf	postinc2,f,c
 12212   01106A  0EFF               	movlw	255
 12213   01106C  16DE               	andwf	postinc2,f,c
 12214   01106E  0E1F               	movlw	31
 12215   011070  16DE               	andwf	postinc2,f,c
 12216   011072                     
 12217                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12218                           ;stkvar	_temp32 @ sp[(-12)+0]
 12219                           ;stkvar	_fObj @ sp[(-12)+4]
 12220   011072  0EF4               	movlw	-12
 12221   011074  CFE3 F02C          	movff	plusw1,btemp
 12222   011078  0EF8               	movlw	-8
 12223   01107A  C02C  FFE3         	movff	btemp,plusw1
 12224   01107E                     
 12225                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12226                           ;stkvar	_temp32 @ sp[(-12)+0]
 12227   01107E  0EF5               	movlw	245
 12228   011080  24E1               	addwf	fsr1l,w,c
 12229   011082  6ED9               	movwf	fsr2l,c
 12230   011084  0EFF               	movlw	255
 12231   011086  20E2               	addwfc	fsr1h,w,c
 12232   011088  6EDA               	movwf	fsr2h,c
 12233                           
 12234                           ;stkvar	_fObj @ sp[(-12)+4]
 12235   01108A  0EF9               	movlw	249
 12236   01108C  24E1               	addwf	fsr1l,w,c
 12237   01108E  6EE9               	movwf	fsr0l,c
 12238   011090  0EFF               	movlw	255
 12239   011092  20E2               	addwfc	fsr1h,w,c
 12240   011094  6EEA               	movwf	fsr0h,c
 12241   011096  CFDF FFEF          	movff	indf2,indf0
 12242   01109A                     
 12243                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12244                           ;stkvar	_temp32 @ sp[(-12)+0]
 12245   01109A  0EF6               	movlw	246
 12246   01109C  24E1               	addwf	fsr1l,w,c
 12247   01109E  6ED9               	movwf	fsr2l,c
 12248   0110A0  0EFF               	movlw	255
 12249   0110A2  20E2               	addwfc	fsr1h,w,c
 12250   0110A4  6EDA               	movwf	fsr2h,c
 12251                           
 12252                           ;stkvar	_fObj @ sp[(-12)+4]
 12253   0110A6  0EFA               	movlw	250
 12254   0110A8  24E1               	addwf	fsr1l,w,c
 12255   0110AA  6EE9               	movwf	fsr0l,c
 12256   0110AC  0EFF               	movlw	255
 12257   0110AE  20E2               	addwfc	fsr1h,w,c
 12258   0110B0  6EEA               	movwf	fsr0h,c
 12259   0110B2  CFDF FFEF          	movff	indf2,indf0
 12260   0110B6                     
 12261                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12262                           ;stkvar	_fObj @ sp[(-12)+4]
 12263   0110B6  0EFB               	movlw	251
 12264   0110B8  24E1               	addwf	fsr1l,w,c
 12265   0110BA  6ED9               	movwf	fsr2l,c
 12266   0110BC  0EFF               	movlw	255
 12267   0110BE  20E2               	addwfc	fsr1h,w,c
 12268   0110C0  6EDA               	movwf	fsr2h,c
 12269                           
 12270                           ;stkvar	_temp32 @ sp[(-12)+0]
 12271   0110C2  0EF7               	movlw	247
 12272   0110C4  24E1               	addwf	fsr1l,w,c
 12273   0110C6  6EE9               	movwf	fsr0l,c
 12274   0110C8  0EFF               	movlw	255
 12275   0110CA  20E2               	addwfc	fsr1h,w,c
 12276   0110CC  6EEA               	movwf	fsr0h,c
 12277   0110CE  50EF               	movf	indf0,w,c
 12278   0110D0  6E37               	movwf	(btemp+11)^0,c
 12279                           
 12280                           ;stkvar	_id @ sp[(-12)+-3]
 12281   0110D2  0EF1               	movlw	-15
 12282   0110D4  CFE3 F034          	movff	plusw1,btemp+8
 12283   0110D8  0EF2               	movlw	-14
 12284   0110DA  CFE3 F035          	movff	plusw1,btemp+9
 12285   0110DE  0E05               	movlw	5
 12286   0110E0  2434               	addwf	(btemp+8)^0,w,c
 12287   0110E2  6EE9               	movwf	fsr0l,c
 12288   0110E4  0E00               	movlw	0
 12289   0110E6  2035               	addwfc	(btemp+9)^0,w,c
 12290   0110E8  6EEA               	movwf	fsr0h,c
 12291   0110EA  50EF               	movf	indf0,w,c
 12292   0110EC  6E36               	movwf	(btemp+10)^0,c
 12293   0110EE  0E06               	movlw	6
 12294   0110F0  6E2C               	movwf	btemp^0,c
 12295   0110F2                     u2635:
 12296   0110F2  90D8               	bcf	status,0,c
 12297   0110F4  3636               	rlcf	(btemp+10)^0,f,c
 12298   0110F6  2E2C               	decfsz	btemp^0,f,c
 12299   0110F8  EF79  F088         	goto	u2635
 12300                           
 12301                           ;stkvar	_id @ sp[(-12)+-3]
 12302   0110FC  0EF1               	movlw	-15
 12303   0110FE  CFE3 F034          	movff	plusw1,btemp+8
 12304   011102  0EF2               	movlw	-14
 12305   011104  CFE3 F035          	movff	plusw1,btemp+9
 12306   011108  0E04               	movlw	4
 12307   01110A  2434               	addwf	(btemp+8)^0,w,c
 12308   01110C  6EE9               	movwf	fsr0l,c
 12309   01110E  0E00               	movlw	0
 12310   011110  2035               	addwfc	(btemp+9)^0,w,c
 12311   011112  6EEA               	movwf	fsr0h,c
 12312   011114  50EF               	movf	indf0,w,c
 12313   011116  6E35               	movwf	(btemp+9)^0,c
 12314   011118  0E05               	movlw	5
 12315   01111A  6E2C               	movwf	btemp^0,c
 12316   01111C                     u2645:
 12317   01111C  90D8               	bcf	status,0,c
 12318   01111E  3635               	rlcf	(btemp+9)^0,f,c
 12319   011120  2E2C               	decfsz	btemp^0,f,c
 12320   011122  EF8E  F088         	goto	u2645
 12321   011126  5035               	movf	(btemp+9)^0,w,c
 12322   011128  1036               	iorwf	(btemp+10)^0,w,c
 12323   01112A  1037               	iorwf	(btemp+11)^0,w,c
 12324   01112C  6EDF               	movwf	indf2,c
 12325   01112E                     l4962:
 12326                           
 12327                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12328                           ;stkvar	_filter @ sp[(-12)+-1]
 12329   01112E  0EF3               	movlw	-13
 12330   011130  50E3               	movf	plusw1,w,c
 12331   011132  0D08               	mullw	8
 12332   011134  CFF3 F036          	movff	prodl,btemp+10
 12333   011138  CFF4 F037          	movff	prodh,btemp+11
 12334   01113C  0EF0               	movlw	240
 12335   01113E  2436               	addwf	(btemp+10)^0,w,c
 12336   011140  6E34               	movwf	(btemp+8)^0,c
 12337   011142  0E01               	movlw	1
 12338   011144  2037               	addwfc	(btemp+11)^0,w,c
 12339   011146  6E35               	movwf	(btemp+9)^0,c
 12340                           
 12341                           ;stkvar	_a @ sp[(-12)+10]
 12342   011148  0EFE               	movlw	-2
 12343   01114A  C034  FFE3         	movff	btemp+8,plusw1
 12344   01114E  0EFF               	movlw	-1
 12345   011150  C035  FFE3         	movff	btemp+9,plusw1
 12346   011154                     
 12347                           ;stkvar	_fObj @ sp[(-12)+4]
 12348   011154  0EF8               	movlw	-8
 12349   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12350   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12351   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12352   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12353                           
 12354                           ;stkvar	_a @ sp[(-16)+10]
 12355   011166  0EFA               	movlw	-6
 12356   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12357   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12358   011170  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12359   011174                     
 12360                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12361   011174  0EF1               	movlw	241
 12362   011176  26E1               	addwf	fsr1l,f,c
 12363   011178  0EFF               	movlw	255
 12364   01117A  22E2               	addwfc	fsr1h,f,c
 12365   01117C  0012               	return		;funcret
 12366   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12367                           	callstack 0
 12368                           
 12369 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12370 ;; Defined at:
 12371 ;;		line 1035 in file "can/can.c"
 12372 ;; Parameters:    Size  Location     Type
 12373 ;;  filter          1  [STACK] enum E5322
 12374 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12375 ;;		 -> maskObj(6), 
 12376 ;;  EXIDE           1  [STACK] unsigned char 
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;  temp32          4  [STACK] unsigned long 
 12379 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12380 ;;  a               2  [STACK] unsigned short 
 12381 ;;  spiTransferE    1    0        char 
 12382 ;; Return value:  Size  Location     Type
 12383 ;;                  1  [STACK] char 
 12384 ;; Registers used:
 12385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12386 ;; Tracked objects:
 12387 ;;		On entry : 0/0
 12388 ;;		On exit  : 0/0
 12389 ;;		Unchanged: 0/0
 12390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;Total ram usage:        0 bytes
 12396 ;; Hardware stack levels used: 1
 12397 ;; Hardware stack levels required when called: 9
 12398 ;; This function calls:
 12399 ;;		_DRV_CANFDSPI_WriteWord
 12400 ;; This function is called by:
 12401 ;;		_CanSetFilter
 12402 ;; This function uses a reentrant model
 12403 ;;
 12404                           
 12405                           	psect	text45
 12406   01117E                     __ptext45:
 12407                           	callstack 0
 12408   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12409                           	callstack 0
 12410                           
 12411                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12412   01117E  0E0C               	movlw	12
 12413   011180  26E1               	addwf	fsr1l,f,c
 12414   011182  0E00               	movlw	0
 12415   011184  22E2               	addwfc	fsr1h,f,c
 12416   011186                     
 12417                           ;can/can.c: 1043:     mObj.word = 0;
 12418                           ;stkvar	_mObj @ sp[(-12)+4]
 12419   011186  0EF8               	movlw	-8
 12420   011188  6AE3               	clrf	plusw1,c
 12421   01118A  0EF9               	movlw	-7
 12422   01118C  6AE3               	clrf	plusw1,c
 12423   01118E  0EFA               	movlw	-6
 12424   011190  6AE3               	clrf	plusw1,c
 12425   011192  0EFB               	movlw	-5
 12426   011194  6AE3               	clrf	plusw1,c
 12427   011196                     
 12428                           ;can/can.c: 1047:     if(EXIDE == 0)
 12429                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12430   011196  0EF0               	movlw	-16
 12431   011198  50E3               	movf	plusw1,w,c
 12432   01119A  A4D8               	btfss	status,2,c
 12433   01119C  EFD2  F088         	goto	u2651
 12434   0111A0  EFD4  F088         	goto	u2650
 12435   0111A4                     u2651:
 12436   0111A4  EF6C  F089         	goto	l4982
 12437   0111A8                     u2650:
 12438   0111A8                     
 12439                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12440                           ;stkvar	_mask @ sp[(-12)+-3]
 12441   0111A8  0EF1               	movlw	-15
 12442   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12443   0111AE  0EF2               	movlw	-14
 12444   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12445   0111B4  50DF               	movf	indf2,w,c
 12446   0111B6  6E37               	movwf	(btemp+11)^0,c
 12447                           
 12448                           ;stkvar	_mObj @ sp[(-12)+4]
 12449   0111B8  0EF8               	movlw	-8
 12450   0111BA  C037  FFE3         	movff	btemp+11,plusw1
 12451   0111BE                     
 12452                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12453                           ;stkvar	_mObj @ sp[(-12)+4]
 12454   0111BE  0EF9               	movlw	249
 12455   0111C0  24E1               	addwf	fsr1l,w,c
 12456   0111C2  6ED9               	movwf	fsr2l,c
 12457   0111C4  0EFF               	movlw	255
 12458   0111C6  20E2               	addwfc	fsr1h,w,c
 12459   0111C8  6EDA               	movwf	fsr2h,c
 12460                           
 12461                           ;stkvar	_mask @ sp[(-12)+-3]
 12462   0111CA  0EF1               	movlw	-15
 12463   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12464   0111D0  0EF2               	movlw	-14
 12465   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12466   0111D6  CFEE F034          	movff	postinc0,btemp+8
 12467   0111DA  CFEE F035          	movff	postinc0,btemp+9
 12468   0111DE  CFEE F036          	movff	postinc0,btemp+10
 12469   0111E2  CFEE F037          	movff	postinc0,btemp+11
 12470   0111E6  C035  F034         	movff	btemp+9,btemp+8
 12471   0111EA  C036  F035         	movff	btemp+10,btemp+9
 12472   0111EE  C037  F036         	movff	btemp+11,btemp+10
 12473   0111F2  6A37               	clrf	(btemp+11)^0,c
 12474   0111F4  5034               	movf	(btemp+8)^0,w,c
 12475   0111F6  6EDF               	movwf	indf2,c
 12476   0111F8                     
 12477                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12478                           ;stkvar	_mObj @ sp[(-12)+4]
 12479   0111F8  0EFA               	movlw	250
 12480   0111FA  24E1               	addwf	fsr1l,w,c
 12481   0111FC  6ED9               	movwf	fsr2l,c
 12482   0111FE  0EFF               	movlw	255
 12483   011200  20E2               	addwfc	fsr1h,w,c
 12484   011202  6EDA               	movwf	fsr2h,c
 12485                           
 12486                           ;stkvar	_mask @ sp[(-12)+-3]
 12487   011204  0EF1               	movlw	-15
 12488   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12489   01120A  0EF2               	movlw	-14
 12490   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12491   011210  CFEE F034          	movff	postinc0,btemp+8
 12492   011214  CFEE F035          	movff	postinc0,btemp+9
 12493   011218  CFEE F036          	movff	postinc0,btemp+10
 12494   01121C  CFEE F037          	movff	postinc0,btemp+11
 12495   011220  0E11               	movlw	17
 12496   011222  EF18  F089         	goto	u2660
 12497   011226                     u2665:
 12498   011226  90D8               	bcf	status,0,c
 12499   011228  3237               	rrcf	(btemp+11)^0,f,c
 12500   01122A  3236               	rrcf	(btemp+10)^0,f,c
 12501   01122C  3235               	rrcf	(btemp+9)^0,f,c
 12502   01122E  3234               	rrcf	(btemp+8)^0,f,c
 12503   011230                     u2660:
 12504   011230  2EE8               	decfsz	wreg,f,c
 12505   011232  EF13  F089         	goto	u2665
 12506   011236  5034               	movf	(btemp+8)^0,w,c
 12507   011238  6EDF               	movwf	indf2,c
 12508   01123A                     
 12509                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12510                           ;stkvar	_mObj @ sp[(-12)+4]
 12511   01123A  0EFB               	movlw	251
 12512   01123C  24E1               	addwf	fsr1l,w,c
 12513   01123E  6ED9               	movwf	fsr2l,c
 12514   011240  0EFF               	movlw	255
 12515   011242  20E2               	addwfc	fsr1h,w,c
 12516   011244  6EDA               	movwf	fsr2h,c
 12517                           
 12518                           ;stkvar	_mask @ sp[(-12)+-3]
 12519   011246  0EF1               	movlw	-15
 12520   011248  CFE3 F036          	movff	plusw1,btemp+10
 12521   01124C  0EF2               	movlw	-14
 12522   01124E  CFE3 F037          	movff	plusw1,btemp+11
 12523   011252  0E05               	movlw	5
 12524   011254  2436               	addwf	(btemp+10)^0,w,c
 12525   011256  6EE9               	movwf	fsr0l,c
 12526   011258  0E00               	movlw	0
 12527   01125A  2037               	addwfc	(btemp+11)^0,w,c
 12528   01125C  6EEA               	movwf	fsr0h,c
 12529   01125E  50EF               	movf	indf0,w,c
 12530   011260  6E37               	movwf	(btemp+11)^0,c
 12531   011262  0E06               	movlw	6
 12532   011264  6E2C               	movwf	btemp^0,c
 12533   011266                     u2675:
 12534   011266  90D8               	bcf	status,0,c
 12535   011268  3637               	rlcf	(btemp+11)^0,f,c
 12536   01126A  2E2C               	decfsz	btemp^0,f,c
 12537   01126C  EF33  F089         	goto	u2675
 12538                           
 12539                           ;stkvar	_mask @ sp[(-12)+-3]
 12540   011270  0EF1               	movlw	-15
 12541   011272  CFE3 F034          	movff	plusw1,btemp+8
 12542   011276  0EF2               	movlw	-14
 12543   011278  CFE3 F035          	movff	plusw1,btemp+9
 12544   01127C  0E04               	movlw	4
 12545   01127E  2434               	addwf	(btemp+8)^0,w,c
 12546   011280  6EE9               	movwf	fsr0l,c
 12547   011282  0E00               	movlw	0
 12548   011284  2035               	addwfc	(btemp+9)^0,w,c
 12549   011286  6EEA               	movwf	fsr0h,c
 12550   011288  50EF               	movf	indf0,w,c
 12551   01128A  6E36               	movwf	(btemp+10)^0,c
 12552   01128C  0E05               	movlw	5
 12553   01128E  6E2C               	movwf	btemp^0,c
 12554   011290                     u2685:
 12555   011290  90D8               	bcf	status,0,c
 12556   011292  3636               	rlcf	(btemp+10)^0,f,c
 12557   011294  2E2C               	decfsz	btemp^0,f,c
 12558   011296  EF48  F089         	goto	u2685
 12559                           
 12560                           ;stkvar	_mask @ sp[(-12)+-3]
 12561   01129A  0EF1               	movlw	-15
 12562   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 12563   0112A0  0EF2               	movlw	-14
 12564   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 12565   0112A6  CFEE F030          	movff	postinc0,btemp+4
 12566   0112AA  CFEE F031          	movff	postinc0,btemp+5
 12567   0112AE  CFEE F032          	movff	postinc0,btemp+6
 12568   0112B2  CFEE F033          	movff	postinc0,btemp+7
 12569   0112B6  0E19               	movlw	25
 12570   0112B8  EF63  F089         	goto	u2690
 12571   0112BC                     u2695:
 12572   0112BC  90D8               	bcf	status,0,c
 12573   0112BE  3233               	rrcf	(btemp+7)^0,f,c
 12574   0112C0  3232               	rrcf	(btemp+6)^0,f,c
 12575   0112C2  3231               	rrcf	(btemp+5)^0,f,c
 12576   0112C4  3230               	rrcf	(btemp+4)^0,f,c
 12577   0112C6                     u2690:
 12578   0112C6  2EE8               	decfsz	wreg,f,c
 12579   0112C8  EF5E  F089         	goto	u2695
 12580   0112CC  5030               	movf	(btemp+4)^0,w,c
 12581   0112CE  1036               	iorwf	(btemp+10)^0,w,c
 12582   0112D0  1037               	iorwf	(btemp+11)^0,w,c
 12583   0112D2  6EDF               	movwf	indf2,c
 12584                           
 12585                           ;can/can.c: 1053:     }
 12586   0112D4  EF31  F08A         	goto	l4994
 12587   0112D8                     l4982:
 12588                           
 12589                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 12590                           ;stkvar	_mask @ sp[(-12)+-3]
 12591   0112D8  0EF1               	movlw	-15
 12592   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 12593   0112DE  0EF2               	movlw	-14
 12594   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 12595   0112E4  CFDE F034          	movff	postinc2,btemp+8
 12596   0112E8  CFDE F035          	movff	postinc2,btemp+9
 12597   0112EC  CFDE F036          	movff	postinc2,btemp+10
 12598   0112F0  CFDE F037          	movff	postinc2,btemp+11
 12599   0112F4  0E13               	movlw	19
 12600   0112F6  EF82  F089         	goto	u2700
 12601   0112FA                     u2705:
 12602   0112FA  90D8               	bcf	status,0,c
 12603   0112FC  3237               	rrcf	(btemp+11)^0,f,c
 12604   0112FE  3236               	rrcf	(btemp+10)^0,f,c
 12605   011300  3235               	rrcf	(btemp+9)^0,f,c
 12606   011302  3234               	rrcf	(btemp+8)^0,f,c
 12607   011304                     u2700:
 12608   011304  2EE8               	decfsz	wreg,f,c
 12609   011306  EF7D  F089         	goto	u2705
 12610   01130A  0EFF               	movlw	255
 12611   01130C  1434               	andwf	(btemp+8)^0,w,c
 12612   01130E  6E30               	movwf	(btemp+4)^0,c
 12613   011310  0E07               	movlw	7
 12614   011312  1435               	andwf	(btemp+9)^0,w,c
 12615   011314  6E31               	movwf	(btemp+5)^0,c
 12616   011316  0E00               	movlw	0
 12617   011318  1436               	andwf	(btemp+10)^0,w,c
 12618   01131A  6E32               	movwf	(btemp+6)^0,c
 12619   01131C  0E00               	movlw	0
 12620   01131E  1437               	andwf	(btemp+11)^0,w,c
 12621   011320  6E33               	movwf	(btemp+7)^0,c
 12622                           
 12623                           ;stkvar	_mask @ sp[(-12)+-3]
 12624   011322  0EF1               	movlw	-15
 12625   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 12626   011328  0EF2               	movlw	-14
 12627   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 12628   01132E  0EFF               	movlw	255
 12629   011330  14DE               	andwf	postinc2,w,c
 12630   011332  6E34               	movwf	(btemp+8)^0,c
 12631   011334  0EFF               	movlw	255
 12632   011336  14DE               	andwf	postinc2,w,c
 12633   011338  6E35               	movwf	(btemp+9)^0,c
 12634   01133A  0E03               	movlw	3
 12635   01133C  14DE               	andwf	postinc2,w,c
 12636   01133E  6E36               	movwf	(btemp+10)^0,c
 12637   011340  0E00               	movlw	0
 12638   011342  14DE               	andwf	postinc2,w,c
 12639   011344  6E37               	movwf	(btemp+11)^0,c
 12640   011346  0E0B               	movlw	11
 12641   011348                     u2715:
 12642   011348  90D8               	bcf	status,0,c
 12643   01134A  3634               	rlcf	(btemp+8)^0,f,c
 12644   01134C  3635               	rlcf	(btemp+9)^0,f,c
 12645   01134E  3636               	rlcf	(btemp+10)^0,f,c
 12646   011350  3637               	rlcf	(btemp+11)^0,f,c
 12647   011352  2EE8               	decfsz	wreg,f,c
 12648   011354  EFA4  F089         	goto	u2715
 12649   011358  5030               	movf	(btemp+4)^0,w,c
 12650   01135A  1034               	iorwf	(btemp+8)^0,w,c
 12651   01135C  6E2C               	movwf	btemp^0,c
 12652   01135E  5031               	movf	(btemp+5)^0,w,c
 12653   011360  1035               	iorwf	(btemp+9)^0,w,c
 12654   011362  6E2D               	movwf	(btemp+1)^0,c
 12655   011364  5032               	movf	(btemp+6)^0,w,c
 12656   011366  1036               	iorwf	(btemp+10)^0,w,c
 12657   011368  6E2E               	movwf	(btemp+2)^0,c
 12658   01136A  5033               	movf	(btemp+7)^0,w,c
 12659   01136C  1037               	iorwf	(btemp+11)^0,w,c
 12660   01136E  6E2F               	movwf	(btemp+3)^0,c
 12661                           
 12662                           ;stkvar	_temp32 @ sp[(-12)+0]
 12663   011370  0EF4               	movlw	-12
 12664   011372  C02C  FFE3         	movff	btemp,plusw1
 12665   011376  0EF5               	movlw	-11
 12666   011378  C02D  FFE3         	movff	btemp+1,plusw1
 12667   01137C  0EF6               	movlw	-10
 12668   01137E  C02E  FFE3         	movff	btemp+2,plusw1
 12669   011382  0EF7               	movlw	-9
 12670   011384  C02F  FFE3         	movff	btemp+3,plusw1
 12671   011388                     
 12672                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 12673                           ;stkvar	_temp32 @ sp[(-12)+0]
 12674   011388  50E1               	movf	fsr1l,w,c
 12675   01138A  0FF4               	addlw	-12
 12676   01138C  6ED9               	movwf	fsr2l,c
 12677   01138E  50E2               	movf	fsr1h,w,c
 12678   011390  6EDA               	movwf	fsr2h,c
 12679   011392  0EFF               	movlw	255
 12680   011394  22DA               	addwfc	fsr2h,f,c
 12681   011396  0EFF               	movlw	255
 12682   011398  16DE               	andwf	postinc2,f,c
 12683   01139A  0EFF               	movlw	255
 12684   01139C  16DE               	andwf	postinc2,f,c
 12685   01139E  0EFF               	movlw	255
 12686   0113A0  16DE               	andwf	postinc2,f,c
 12687   0113A2  0E1F               	movlw	31
 12688   0113A4  16DE               	andwf	postinc2,f,c
 12689   0113A6                     
 12690                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 12691                           ;stkvar	_temp32 @ sp[(-12)+0]
 12692                           ;stkvar	_mObj @ sp[(-12)+4]
 12693   0113A6  0EF4               	movlw	-12
 12694   0113A8  CFE3 F02C          	movff	plusw1,btemp
 12695   0113AC  0EF8               	movlw	-8
 12696   0113AE  C02C  FFE3         	movff	btemp,plusw1
 12697   0113B2                     
 12698                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 12699                           ;stkvar	_temp32 @ sp[(-12)+0]
 12700   0113B2  0EF5               	movlw	245
 12701   0113B4  24E1               	addwf	fsr1l,w,c
 12702   0113B6  6ED9               	movwf	fsr2l,c
 12703   0113B8  0EFF               	movlw	255
 12704   0113BA  20E2               	addwfc	fsr1h,w,c
 12705   0113BC  6EDA               	movwf	fsr2h,c
 12706                           
 12707                           ;stkvar	_mObj @ sp[(-12)+4]
 12708   0113BE  0EF9               	movlw	249
 12709   0113C0  24E1               	addwf	fsr1l,w,c
 12710   0113C2  6EE9               	movwf	fsr0l,c
 12711   0113C4  0EFF               	movlw	255
 12712   0113C6  20E2               	addwfc	fsr1h,w,c
 12713   0113C8  6EEA               	movwf	fsr0h,c
 12714   0113CA  CFDF FFEF          	movff	indf2,indf0
 12715   0113CE                     
 12716                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 12717                           ;stkvar	_temp32 @ sp[(-12)+0]
 12718   0113CE  0EF6               	movlw	246
 12719   0113D0  24E1               	addwf	fsr1l,w,c
 12720   0113D2  6ED9               	movwf	fsr2l,c
 12721   0113D4  0EFF               	movlw	255
 12722   0113D6  20E2               	addwfc	fsr1h,w,c
 12723   0113D8  6EDA               	movwf	fsr2h,c
 12724                           
 12725                           ;stkvar	_mObj @ sp[(-12)+4]
 12726   0113DA  0EFA               	movlw	250
 12727   0113DC  24E1               	addwf	fsr1l,w,c
 12728   0113DE  6EE9               	movwf	fsr0l,c
 12729   0113E0  0EFF               	movlw	255
 12730   0113E2  20E2               	addwfc	fsr1h,w,c
 12731   0113E4  6EEA               	movwf	fsr0h,c
 12732   0113E6  CFDF FFEF          	movff	indf2,indf0
 12733   0113EA                     
 12734                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 12735                           ;stkvar	_mObj @ sp[(-12)+4]
 12736   0113EA  0EFB               	movlw	251
 12737   0113EC  24E1               	addwf	fsr1l,w,c
 12738   0113EE  6ED9               	movwf	fsr2l,c
 12739   0113F0  0EFF               	movlw	255
 12740   0113F2  20E2               	addwfc	fsr1h,w,c
 12741   0113F4  6EDA               	movwf	fsr2h,c
 12742                           
 12743                           ;stkvar	_temp32 @ sp[(-12)+0]
 12744   0113F6  0EF7               	movlw	247
 12745   0113F8  24E1               	addwf	fsr1l,w,c
 12746   0113FA  6EE9               	movwf	fsr0l,c
 12747   0113FC  0EFF               	movlw	255
 12748   0113FE  20E2               	addwfc	fsr1h,w,c
 12749   011400  6EEA               	movwf	fsr0h,c
 12750   011402  50EF               	movf	indf0,w,c
 12751   011404  6E37               	movwf	(btemp+11)^0,c
 12752                           
 12753                           ;stkvar	_mask @ sp[(-12)+-3]
 12754   011406  0EF1               	movlw	-15
 12755   011408  CFE3 F034          	movff	plusw1,btemp+8
 12756   01140C  0EF2               	movlw	-14
 12757   01140E  CFE3 F035          	movff	plusw1,btemp+9
 12758   011412  0E05               	movlw	5
 12759   011414  2434               	addwf	(btemp+8)^0,w,c
 12760   011416  6EE9               	movwf	fsr0l,c
 12761   011418  0E00               	movlw	0
 12762   01141A  2035               	addwfc	(btemp+9)^0,w,c
 12763   01141C  6EEA               	movwf	fsr0h,c
 12764   01141E  50EF               	movf	indf0,w,c
 12765   011420  6E36               	movwf	(btemp+10)^0,c
 12766   011422  0E06               	movlw	6
 12767   011424  6E2C               	movwf	btemp^0,c
 12768   011426                     u2725:
 12769   011426  90D8               	bcf	status,0,c
 12770   011428  3636               	rlcf	(btemp+10)^0,f,c
 12771   01142A  2E2C               	decfsz	btemp^0,f,c
 12772   01142C  EF13  F08A         	goto	u2725
 12773                           
 12774                           ;stkvar	_mask @ sp[(-12)+-3]
 12775   011430  0EF1               	movlw	-15
 12776   011432  CFE3 F034          	movff	plusw1,btemp+8
 12777   011436  0EF2               	movlw	-14
 12778   011438  CFE3 F035          	movff	plusw1,btemp+9
 12779   01143C  0E04               	movlw	4
 12780   01143E  2434               	addwf	(btemp+8)^0,w,c
 12781   011440  6EE9               	movwf	fsr0l,c
 12782   011442  0E00               	movlw	0
 12783   011444  2035               	addwfc	(btemp+9)^0,w,c
 12784   011446  6EEA               	movwf	fsr0h,c
 12785   011448  50EF               	movf	indf0,w,c
 12786   01144A  6E35               	movwf	(btemp+9)^0,c
 12787   01144C  0E05               	movlw	5
 12788   01144E  6E2C               	movwf	btemp^0,c
 12789   011450                     u2735:
 12790   011450  90D8               	bcf	status,0,c
 12791   011452  3635               	rlcf	(btemp+9)^0,f,c
 12792   011454  2E2C               	decfsz	btemp^0,f,c
 12793   011456  EF28  F08A         	goto	u2735
 12794   01145A  5035               	movf	(btemp+9)^0,w,c
 12795   01145C  1036               	iorwf	(btemp+10)^0,w,c
 12796   01145E  1037               	iorwf	(btemp+11)^0,w,c
 12797   011460  6EDF               	movwf	indf2,c
 12798   011462                     l4994:
 12799                           
 12800                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12801                           ;stkvar	_filter @ sp[(-12)+-1]
 12802   011462  0EF3               	movlw	-13
 12803   011464  50E3               	movf	plusw1,w,c
 12804   011466  0D08               	mullw	8
 12805   011468  CFF3 F036          	movff	prodl,btemp+10
 12806   01146C  CFF4 F037          	movff	prodh,btemp+11
 12807   011470  0EF4               	movlw	244
 12808   011472  2436               	addwf	(btemp+10)^0,w,c
 12809   011474  6E34               	movwf	(btemp+8)^0,c
 12810   011476  0E01               	movlw	1
 12811   011478  2037               	addwfc	(btemp+11)^0,w,c
 12812   01147A  6E35               	movwf	(btemp+9)^0,c
 12813                           
 12814                           ;stkvar	_a @ sp[(-12)+10]
 12815   01147C  0EFE               	movlw	-2
 12816   01147E  C034  FFE3         	movff	btemp+8,plusw1
 12817   011482  0EFF               	movlw	-1
 12818   011484  C035  FFE3         	movff	btemp+9,plusw1
 12819   011488                     
 12820                           ;stkvar	_mObj @ sp[(-12)+4]
 12821   011488  0EF8               	movlw	-8
 12822   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12823   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12824   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12825   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12826                           
 12827                           ;stkvar	_a @ sp[(-16)+10]
 12828   01149A  0EFA               	movlw	-6
 12829   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12830   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12831   0114A4  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12832   0114A8                     
 12833                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12834   0114A8  0EF0               	movlw	240
 12835   0114AA  26E1               	addwf	fsr1l,f,c
 12836   0114AC  0EFF               	movlw	255
 12837   0114AE  22E2               	addwfc	fsr1h,f,c
 12838   0114B0  0012               	return		;funcret
 12839   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12840                           	callstack 0
 12841                           
 12842 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12843 ;; Defined at:
 12844 ;;		line 1121 in file "can/can.c"
 12845 ;; Parameters:    Size  Location     Type
 12846 ;;  filter          1  [STACK] enum E5322
 12847 ;; Auto vars:     Size  Location     Type
 12848 ;;  a               2  [STACK] unsigned short 
 12849 ;;  spiTransferE    1  [STACK] char 
 12850 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  1  [STACK] char 
 12853 ;; Registers used:
 12854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;Total ram usage:        0 bytes
 12865 ;; Hardware stack levels used: 1
 12866 ;; Hardware stack levels required when called: 9
 12867 ;; This function calls:
 12868 ;;		_DRV_CANFDSPI_ReadByte
 12869 ;;		_DRV_CANFDSPI_WriteByte
 12870 ;; This function is called by:
 12871 ;;		_CanSetFilter
 12872 ;; This function uses a reentrant model
 12873 ;;
 12874                           
 12875                           	psect	text46
 12876   014242                     __ptext46:
 12877                           	callstack 0
 12878   014242                     _DRV_CANFDSPI_FilterDisable:
 12879                           	callstack 0
 12880                           
 12881                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12882   014242  52E6               	movf	postinc1,f,c
 12883   014244  52E6               	movf	postinc1,f,c
 12884   014246  52E6               	movf	postinc1,f,c
 12885   014248  52E6               	movf	postinc1,f,c
 12886   01424A                     
 12887                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12888                           ;stkvar	_filter @ sp[(-4)+-1]
 12889   01424A  0EFB               	movlw	-5
 12890   01424C  CFE3 F037          	movff	plusw1,btemp+11
 12891   014250  0ED0               	movlw	208
 12892   014252  2437               	addwf	(btemp+11)^0,w,c
 12893   014254  6E34               	movwf	(btemp+8)^0,c
 12894   014256  6A35               	clrf	(btemp+9)^0,c
 12895   014258  0E01               	movlw	1
 12896   01425A  2235               	addwfc	(btemp+9)^0,f,c
 12897                           
 12898                           ;stkvar	_a @ sp[(-4)+0]
 12899   01425C  0EFC               	movlw	-4
 12900   01425E  C034  FFE3         	movff	btemp+8,plusw1
 12901   014262  0EFD               	movlw	-3
 12902   014264  C035  FFE3         	movff	btemp+9,plusw1
 12903   014268                     
 12904                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 12905                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12906   014268  0EFF               	movlw	255
 12907   01426A  24E1               	addwf	fsr1l,w,c
 12908   01426C  6E2C               	movwf	btemp^0,c
 12909   01426E  0EFF               	movlw	255
 12910   014270  20E2               	addwfc	fsr1h,w,c
 12911   014272  6E2D               	movwf	(btemp+1)^0,c
 12912   014274  C02C  FFE6         	movff	btemp,postinc1
 12913   014278  C02D  FFE6         	movff	btemp+1,postinc1
 12914                           
 12915                           ;stkvar	_a @ sp[(-6)+0]
 12916   01427C  0EFA               	movlw	-6
 12917   01427E  CFE3 FFE6          	movff	plusw1,postinc1
 12918   014282  CFE3 FFE6          	movff	plusw1,postinc1
 12919   014286  ECC8  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 12920                           
 12921                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12922   01428A  0EFE               	movlw	-2
 12923   01428C  C02C  FFE3         	movff	btemp,plusw1
 12924   014290                     
 12925                           ;can/can.c: 1131:     if (spiTransferError) {
 12926                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12927   014290  0EFE               	movlw	-2
 12928   014292  50E3               	movf	plusw1,w,c
 12929   014294  B4D8               	btfsc	status,2,c
 12930   014296  EF4F  F0A1         	goto	u2551
 12931   01429A  EF51  F0A1         	goto	u2550
 12932   01429E                     u2551:
 12933   01429E  EF53  F0A1         	goto	l4928
 12934   0142A2                     u2550:
 12935   0142A2  EF65  F0A1         	goto	l336
 12936   0142A6                     l4928:
 12937                           
 12938                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 12939                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12940   0142A6  50E1               	movf	fsr1l,w,c
 12941   0142A8  0FFF               	addlw	-1
 12942   0142AA  6ED9               	movwf	fsr2l,c
 12943   0142AC  50E2               	movf	fsr1h,w,c
 12944   0142AE  6EDA               	movwf	fsr2h,c
 12945   0142B0  0EFF               	movlw	255
 12946   0142B2  22DA               	addwfc	fsr2h,f,c
 12947   0142B4  9EDF               	bcf	indf2,7,c
 12948   0142B6                     
 12949                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12950   0142B6  0EFF               	movlw	-1
 12951   0142B8  50E3               	movf	plusw1,w,c
 12952   0142BA  6EE6               	movwf	postinc1,c
 12953                           
 12954                           ;stkvar	_a @ sp[(-5)+0]
 12955   0142BC  0EFB               	movlw	-5
 12956   0142BE  CFE3 FFE6          	movff	plusw1,postinc1
 12957   0142C2  CFE3 FFE6          	movff	plusw1,postinc1
 12958   0142C6  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12959   0142CA                     l336:
 12960                           
 12961                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 12962   0142CA  0EFB               	movlw	251
 12963   0142CC  26E1               	addwf	fsr1l,f,c
 12964   0142CE  0EFF               	movlw	255
 12965   0142D0  22E2               	addwfc	fsr1h,f,c
 12966   0142D2  0012               	return		;funcret
 12967   0142D4                     __end_of_DRV_CANFDSPI_FilterDisable:
 12968                           	callstack 0
 12969                           
 12970 ;; *************** function _CanInit *****************
 12971 ;; Defined at:
 12972 ;;		line 156 in file "can/can.c"
 12973 ;; Parameters:    Size  Location     Type
 12974 ;;  bitTime         1  [STACK] enum E5604
 12975 ;;  withISR         1  [STACK] _Bool 
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 12978 ;;  config          3  [STACK] struct _CAN_CONFIG
 12979 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 12980 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 12981 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1  [STACK] void 
 12984 ;; Registers used:
 12985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;Total ram usage:        0 bytes
 12996 ;; Hardware stack levels used: 1
 12997 ;; Hardware stack levels required when called: 10
 12998 ;; This function calls:
 12999 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 13000 ;;		_DRV_CANFDSPI_Configure
 13001 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 13002 ;;		_DRV_CANFDSPI_ModuleEventEnable
 13003 ;;		_DRV_CANFDSPI_OperationModeSelect
 13004 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 13005 ;;		_DRV_CANFDSPI_Reset
 13006 ;;		_DRV_CANFDSPI_TefConfigure
 13007 ;;		_DRV_CANFDSPI_TimeStampEnable
 13008 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 13009 ;;		_DRV_CANFDSPI_TimeStampSet
 13010 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 13011 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 13012 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 13013 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 13014 ;; This function is called by:
 13015 ;;		_main
 13016 ;; This function uses a reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text47
 13020   011E64                     __ptext47:
 13021                           	callstack 0
 13022   011E64                     _CanInit:
 13023                           	callstack 0
 13024                           
 13025                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 13026   011E64  0E0D               	movlw	13
 13027   011E66  26E1               	addwf	fsr1l,f,c
 13028   011E68  0E00               	movlw	0
 13029   011E6A  22E2               	addwfc	fsr1h,f,c
 13030   011E6C                     
 13031                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 13032   011E6C  9898               	bcf	152,4,c	;volatile
 13033                           
 13034                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 13035   011E6E  888F               	bsf	143,4,c	;volatile
 13036   011E70                     
 13037                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 13038   011E70  EC6B  F0A4         	call	_DRV_CANFDSPI_Reset	;wreg free
 13039   011E74                     
 13040                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 13041                           ;stkvar	_bitTime @ sp[(-13)+-1]
 13042   011E74  0EF2               	movlw	-14
 13043   011E76  50E3               	movf	plusw1,w,c
 13044   011E78  6EE6               	movwf	postinc1,c
 13045   011E7A  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 13046   011E7E                     
 13047                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 13048                           ;stkvar	_config @ sp[(-13)+4]
 13049   011E7E  0EF7               	movlw	247
 13050   011E80  24E1               	addwf	fsr1l,w,c
 13051   011E82  6E2C               	movwf	btemp^0,c
 13052   011E84  0EFF               	movlw	255
 13053   011E86  20E2               	addwfc	fsr1h,w,c
 13054   011E88  6E2D               	movwf	(btemp+1)^0,c
 13055   011E8A  C02C  FFE6         	movff	btemp,postinc1
 13056   011E8E  C02D  FFE6         	movff	btemp+1,postinc1
 13057   011E92  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 13058   011E96                     
 13059                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 13060                           ;stkvar	_config @ sp[(-13)+4]
 13061   011E96  50E1               	movf	fsr1l,w,c
 13062   011E98  0FF7               	addlw	-9
 13063   011E9A  6ED9               	movwf	fsr2l,c
 13064   011E9C  50E2               	movf	fsr1h,w,c
 13065   011E9E  6EDA               	movwf	fsr2h,c
 13066   011EA0  0EFF               	movlw	255
 13067   011EA2  22DA               	addwfc	fsr2h,f,c
 13068   011EA4  8ADF               	bsf	indf2,5,c
 13069   011EA6                     
 13070                           ;can/can.c: 166:     config.StoreInTEF = 1;
 13071                           ;stkvar	_config @ sp[(-13)+4]
 13072   011EA6  0EF8               	movlw	248
 13073   011EA8  24E1               	addwf	fsr1l,w,c
 13074   011EAA  6ED9               	movwf	fsr2l,c
 13075   011EAC  0EFF               	movlw	255
 13076   011EAE  20E2               	addwfc	fsr1h,w,c
 13077   011EB0  6EDA               	movwf	fsr2h,c
 13078   011EB2  8CDF               	bsf	indf2,6,c
 13079   011EB4                     
 13080                           ;can/can.c: 167:     config.TXQEnable = 1;
 13081                           ;stkvar	_config @ sp[(-13)+4]
 13082   011EB4  0EF8               	movlw	248
 13083   011EB6  24E1               	addwf	fsr1l,w,c
 13084   011EB8  6ED9               	movwf	fsr2l,c
 13085   011EBA  0EFF               	movlw	255
 13086   011EBC  20E2               	addwfc	fsr1h,w,c
 13087   011EBE  6EDA               	movwf	fsr2h,c
 13088   011EC0  8EDF               	bsf	indf2,7,c
 13089   011EC2                     
 13090                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 13091                           ;stkvar	_config @ sp[(-13)+4]
 13092   011EC2  0EF7               	movlw	247
 13093   011EC4  24E1               	addwf	fsr1l,w,c
 13094   011EC6  6E2C               	movwf	btemp^0,c
 13095   011EC8  0EFF               	movlw	255
 13096   011ECA  20E2               	addwfc	fsr1h,w,c
 13097   011ECC  6E2D               	movwf	(btemp+1)^0,c
 13098   011ECE  C02C  FFE6         	movff	btemp,postinc1
 13099   011ED2  C02D  FFE6         	movff	btemp+1,postinc1
 13100   011ED6  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 13101   011EDA                     
 13102                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 13103                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13104   011EDA  50E1               	movf	fsr1l,w,c
 13105   011EDC  0FFF               	addlw	-1
 13106   011EDE  6ED9               	movwf	fsr2l,c
 13107   011EE0  50E2               	movf	fsr1h,w,c
 13108   011EE2  6EDA               	movwf	fsr2h,c
 13109   011EE4  0EFF               	movlw	255
 13110   011EE6  22DA               	addwfc	fsr2h,f,c
 13111   011EE8  50DF               	movf	223,w,c
 13112   011EEA  0BC1               	andlw	-63
 13113   011EEC  0916               	iorlw	22
 13114   011EEE  6EDF               	movwf	223,c
 13115   011EF0                     
 13116                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13117                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13118   011EF0  50E1               	movf	fsr1l,w,c
 13119   011EF2  0FFF               	addlw	-1
 13120   011EF4  6ED9               	movwf	fsr2l,c
 13121   011EF6  50E2               	movf	fsr1h,w,c
 13122   011EF8  6EDA               	movwf	fsr2h,c
 13123   011EFA  0EFF               	movlw	255
 13124   011EFC  22DA               	addwfc	fsr2h,f,c
 13125   011EFE  80DF               	bsf	indf2,0,c
 13126   011F00                     
 13127                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13128                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13129   011F00  0EFF               	movlw	255
 13130   011F02  24E1               	addwf	fsr1l,w,c
 13131   011F04  6E2C               	movwf	btemp^0,c
 13132   011F06  0EFF               	movlw	255
 13133   011F08  20E2               	addwfc	fsr1h,w,c
 13134   011F0A  6E2D               	movwf	(btemp+1)^0,c
 13135   011F0C  C02C  FFE6         	movff	btemp,postinc1
 13136   011F10  C02D  FFE6         	movff	btemp+1,postinc1
 13137   011F14  EC24  F09E         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13138   011F18                     
 13139                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13140                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13141   011F18  0EF3               	movlw	243
 13142   011F1A  24E1               	addwf	fsr1l,w,c
 13143   011F1C  6E2C               	movwf	btemp^0,c
 13144   011F1E  0EFF               	movlw	255
 13145   011F20  20E2               	addwfc	fsr1h,w,c
 13146   011F22  6E2D               	movwf	(btemp+1)^0,c
 13147   011F24  C02C  FFE6         	movff	btemp,postinc1
 13148   011F28  C02D  FFE6         	movff	btemp+1,postinc1
 13149   011F2C  ECC9  F09A         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13150   011F30                     
 13151                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13152                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13153   011F30  0EF3               	movlw	-13
 13154   011F32  6AE3               	clrf	plusw1,c
 13155   011F34  2AE3               	incf	plusw1,f,c
 13156   011F36                     
 13157                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13158                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13159   011F36  0EF5               	movlw	245
 13160   011F38  24E1               	addwf	fsr1l,w,c
 13161   011F3A  6ED9               	movwf	fsr2l,c
 13162   011F3C  0EFF               	movlw	255
 13163   011F3E  20E2               	addwfc	fsr1h,w,c
 13164   011F40  6EDA               	movwf	fsr2h,c
 13165   011F42  0E07               	movlw	7
 13166   011F44  6EDF               	movwf	indf2,c
 13167   011F46                     
 13168                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13169                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13170   011F46  0EF6               	movlw	246
 13171   011F48  24E1               	addwf	fsr1l,w,c
 13172   011F4A  6ED9               	movwf	fsr2l,c
 13173   011F4C  0EFF               	movlw	255
 13174   011F4E  20E2               	addwfc	fsr1h,w,c
 13175   011F50  6EDA               	movwf	fsr2h,c
 13176   011F52  0E05               	movlw	5
 13177   011F54  6EDF               	movwf	indf2,c
 13178   011F56                     
 13179                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13180                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13181   011F56  0EF3               	movlw	243
 13182   011F58  24E1               	addwf	fsr1l,w,c
 13183   011F5A  6E2C               	movwf	btemp^0,c
 13184   011F5C  0EFF               	movlw	255
 13185   011F5E  20E2               	addwfc	fsr1h,w,c
 13186   011F60  6E2D               	movwf	(btemp+1)^0,c
 13187   011F62  C02C  FFE6         	movff	btemp,postinc1
 13188   011F66  C02D  FFE6         	movff	btemp+1,postinc1
 13189   011F6A  ECFB  F097         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13190   011F6E                     
 13191                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13192                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13193   011F6E  0EFD               	movlw	253
 13194   011F70  24E1               	addwf	fsr1l,w,c
 13195   011F72  6E2C               	movwf	btemp^0,c
 13196   011F74  0EFF               	movlw	255
 13197   011F76  20E2               	addwfc	fsr1h,w,c
 13198   011F78  6E2D               	movwf	(btemp+1)^0,c
 13199   011F7A  C02C  FFE6         	movff	btemp,postinc1
 13200   011F7E  C02D  FFE6         	movff	btemp+1,postinc1
 13201   011F82  EC9B  F098         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13202   011F86                     
 13203                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13204                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13205   011F86  0EFE               	movlw	254
 13206   011F88  24E1               	addwf	fsr1l,w,c
 13207   011F8A  6ED9               	movwf	fsr2l,c
 13208   011F8C  0EFF               	movlw	255
 13209   011F8E  20E2               	addwfc	fsr1h,w,c
 13210   011F90  6EDA               	movwf	fsr2h,c
 13211   011F92  50DF               	movf	223,w,c
 13212   011F94  0BE0               	andlw	-32
 13213   011F96  0904               	iorlw	4
 13214   011F98  6EDF               	movwf	223,c
 13215   011F9A                     
 13216                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13217                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13218   011F9A  0EFE               	movlw	254
 13219   011F9C  24E1               	addwf	fsr1l,w,c
 13220   011F9E  6ED9               	movwf	fsr2l,c
 13221   011FA0  0EFF               	movlw	255
 13222   011FA2  20E2               	addwfc	fsr1h,w,c
 13223   011FA4  6EDA               	movwf	fsr2h,c
 13224   011FA6  0EE0               	movlw	224
 13225   011FA8  12DF               	iorwf	223,f,c
 13226   011FAA                     
 13227                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13228                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13229   011FAA  50E1               	movf	fsr1l,w,c
 13230   011FAC  0FFD               	addlw	-3
 13231   011FAE  6ED9               	movwf	fsr2l,c
 13232   011FB0  50E2               	movf	fsr1h,w,c
 13233   011FB2  6EDA               	movwf	fsr2h,c
 13234   011FB4  0EFF               	movlw	255
 13235   011FB6  22DA               	addwfc	fsr2h,f,c
 13236   011FB8  0EC1               	movlw	-63
 13237   011FBA  16DF               	andwf	223,f,c
 13238   011FBC                     
 13239                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13240                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13241   011FBC  0EFD               	movlw	253
 13242   011FBE  24E1               	addwf	fsr1l,w,c
 13243   011FC0  6E2C               	movwf	btemp^0,c
 13244   011FC2  0EFF               	movlw	255
 13245   011FC4  20E2               	addwfc	fsr1h,w,c
 13246   011FC6  6E2D               	movwf	(btemp+1)^0,c
 13247   011FC8  C02C  FFE6         	movff	btemp,postinc1
 13248   011FCC  C02D  FFE6         	movff	btemp+1,postinc1
 13249   011FD0  0E01               	movlw	1
 13250   011FD2  6EE6               	movwf	postinc1,c
 13251   011FD4  EC8A  F094         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13252   011FD8                     
 13253                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13254                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13255   011FD8  0EFB               	movlw	251
 13256   011FDA  24E1               	addwf	fsr1l,w,c
 13257   011FDC  6ED9               	movwf	fsr2l,c
 13258   011FDE  0EFF               	movlw	255
 13259   011FE0  20E2               	addwfc	fsr1h,w,c
 13260   011FE2  6EDA               	movwf	fsr2h,c
 13261   011FE4  0E0F               	movlw	15
 13262   011FE6  6EDF               	movwf	indf2,c
 13263   011FE8                     
 13264                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13265                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13266   011FE8  0EFC               	movlw	252
 13267   011FEA  24E1               	addwf	fsr1l,w,c
 13268   011FEC  6ED9               	movwf	fsr2l,c
 13269   011FEE  0EFF               	movlw	255
 13270   011FF0  20E2               	addwfc	fsr1h,w,c
 13271   011FF2  6EDA               	movwf	fsr2h,c
 13272   011FF4  0E07               	movlw	7
 13273   011FF6  6EDF               	movwf	indf2,c
 13274   011FF8                     
 13275                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13276                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13277   011FF8  0EFA               	movlw	-6
 13278   011FFA  6AE3               	clrf	plusw1,c
 13279   011FFC  2AE3               	incf	plusw1,f,c
 13280   011FFE                     
 13281                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13282                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13283   011FFE  0EFA               	movlw	250
 13284   012000  24E1               	addwf	fsr1l,w,c
 13285   012002  6E2C               	movwf	btemp^0,c
 13286   012004  0EFF               	movlw	255
 13287   012006  20E2               	addwfc	fsr1h,w,c
 13288   012008  6E2D               	movwf	(btemp+1)^0,c
 13289   01200A  C02C  FFE6         	movff	btemp,postinc1
 13290   01200E  C02D  FFE6         	movff	btemp+1,postinc1
 13291   012012  0E02               	movlw	2
 13292   012014  6EE6               	movwf	postinc1,c
 13293   012016  EC5A  F097         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13294   01201A                     
 13295                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13296   01201A  0E27               	movlw	39
 13297   01201C  6EE6               	movwf	postinc1,c
 13298   01201E  0E00               	movlw	0
 13299   012020  6EE6               	movwf	postinc1,c
 13300   012022  ECB9  F0A4         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13301   012026                     
 13302                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13303   012026  0E00               	movlw	0
 13304   012028  6EE6               	movwf	postinc1,c
 13305   01202A  0E00               	movlw	0
 13306   01202C  6EE6               	movwf	postinc1,c
 13307   01202E  0E00               	movlw	0
 13308   012030  6EE6               	movwf	postinc1,c
 13309   012032  0E00               	movlw	0
 13310   012034  6EE6               	movwf	postinc1,c
 13311   012036  EC81  F0A4         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13312   01203A                     
 13313                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13314   01203A  ECF9  F0A2         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13315   01203E                     
 13316                           ;can/can.c: 209:     if(withISR == 1)
 13317                           ;stkvar	_withISR @ sp[(-13)+-2]
 13318   01203E  0EF1               	movlw	-15
 13319   012040  04E3               	decf	plusw1,w,c
 13320   012042  A4D8               	btfss	status,2,c
 13321   012044  EF26  F090         	goto	u2961
 13322   012048  EF28  F090         	goto	u2960
 13323   01204C                     u2961:
 13324   01204C  EF30  F090         	goto	l5250
 13325   012050                     u2960:
 13326   012050                     
 13327                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13328   012050  0E02               	movlw	2
 13329   012052  6EE6               	movwf	postinc1,c
 13330   012054  0E00               	movlw	0
 13331   012056  6EE6               	movwf	postinc1,c
 13332   012058  0E00               	movlw	0
 13333   01205A  6EE6               	movwf	postinc1,c
 13334   01205C  EC96  F0A2         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13335   012060                     l5250:
 13336                           
 13337                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13338   012060  0E06               	movlw	6
 13339   012062  6EE6               	movwf	postinc1,c
 13340   012064  ECB2  F0A1         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13341   012068                     
 13342                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13343   012068  0EF1               	movlw	241
 13344   01206A  26E1               	addwf	fsr1l,f,c
 13345   01206C  0EFF               	movlw	255
 13346   01206E  22E2               	addwfc	fsr1h,f,c
 13347   012070  0012               	return		;funcret
 13348   012072                     __end_of_CanInit:
 13349                           	callstack 0
 13350                           
 13351 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13352 ;; Defined at:
 13353 ;;		line 693 in file "can/can.c"
 13354 ;; Parameters:    Size  Location     Type
 13355 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13356 ;;		 -> txqConfig(4), 
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1  [STACK] char 
 13361 ;; Registers used:
 13362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13372 ;;Total ram usage:        0 bytes
 13373 ;; Hardware stack levels used: 1
 13374 ;; Hardware stack levels required when called: 7
 13375 ;; This function calls:
 13376 ;;		Nothing
 13377 ;; This function is called by:
 13378 ;;		_CanInit
 13379 ;; This function uses a reentrant model
 13380 ;;
 13381                           
 13382                           	psect	text48
 13383   013592                     __ptext48:
 13384                           	callstack 0
 13385   013592                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13386                           	callstack 0
 13387                           
 13388                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13389   013592  0E05               	movlw	5
 13390   013594  26E1               	addwf	fsr1l,f,c
 13391   013596  0E00               	movlw	0
 13392   013598  22E2               	addwfc	fsr1h,f,c
 13393   01359A                     
 13394                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13395   01359A  0EDD               	movlw	low _canFifoResetValues
 13396   01359C  6EF6               	movwf	tblptrl,c
 13397   01359E                     	if	1	;There is more than 1 active tblptr byte
 13398   01359E  0EFF               	movlw	high _canFifoResetValues
 13399   0135A0  6EF7               	movwf	tblptrh,c
 13400   0135A2                     	endif
 13401   0135A2                     	if	1	;There are 3 active tblptr bytes
 13402   0135A2  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13403   0135A4  6EF8               	movwf	tblptru,c
 13404   0135A6                     	endif
 13405   0135A6  0009               	tblrd		*+
 13406   0135A8  CFF5 F034          	movff	tablat,btemp+8
 13407   0135AC  0009               	tblrd		*+
 13408   0135AE  CFF5 F035          	movff	tablat,btemp+9
 13409   0135B2  0009               	tblrd		*+
 13410   0135B4  CFF5 F036          	movff	tablat,btemp+10
 13411   0135B8  0009               	tblrd		*+
 13412   0135BA  CFF5 F037          	movff	tablat,btemp+11
 13413                           
 13414                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13415   0135BE  0EFB               	movlw	-5
 13416   0135C0  C034  FFE3         	movff	btemp+8,plusw1
 13417   0135C4  0EFC               	movlw	-4
 13418   0135C6  C035  FFE3         	movff	btemp+9,plusw1
 13419   0135CA  0EFD               	movlw	-3
 13420   0135CC  C036  FFE3         	movff	btemp+10,plusw1
 13421   0135D0  0EFE               	movlw	-2
 13422   0135D2  C037  FFE3         	movff	btemp+11,plusw1
 13423   0135D6                     
 13424                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13425                           ;stkvar	_config @ sp[(-5)+-2]
 13426   0135D6  0EF9               	movlw	-7
 13427   0135D8  CFE3 FFD9          	movff	plusw1,fsr2l
 13428   0135DC  0EFA               	movlw	-6
 13429   0135DE  CFE3 FFDA          	movff	plusw1,fsr2h
 13430                           
 13431                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13432   0135E2  0EFD               	movlw	253
 13433   0135E4  24E1               	addwf	fsr1l,w,c
 13434   0135E6  6EE9               	movwf	fsr0l,c
 13435   0135E8  0EFF               	movlw	255
 13436   0135EA  20E2               	addwfc	fsr1h,w,c
 13437   0135EC  6EEA               	movwf	fsr0h,c
 13438   0135EE  50EF               	movf	239,w,c
 13439   0135F0  0B1F               	andlw	31
 13440   0135F2  6EDF               	movwf	indf2,c
 13441   0135F4                     
 13442                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13443                           ;stkvar	_config @ sp[(-5)+-2]
 13444   0135F4  0EF9               	movlw	-7
 13445   0135F6  CFE3 F036          	movff	plusw1,btemp+10
 13446   0135FA  0EFA               	movlw	-6
 13447   0135FC  CFE3 F037          	movff	plusw1,btemp+11
 13448   013600  0E01               	movlw	1
 13449   013602  2436               	addwf	(btemp+10)^0,w,c
 13450   013604  6ED9               	movwf	fsr2l,c
 13451   013606  0E00               	movlw	0
 13452   013608  2037               	addwfc	(btemp+11)^0,w,c
 13453   01360A  6EDA               	movwf	fsr2h,c
 13454                           
 13455                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13456   01360C  0EFD               	movlw	253
 13457   01360E  24E1               	addwf	fsr1l,w,c
 13458   013610  6EE9               	movwf	fsr0l,c
 13459   013612  0EFF               	movlw	255
 13460   013614  20E2               	addwfc	fsr1h,w,c
 13461   013616  6EEA               	movwf	fsr0h,c
 13462   013618  38EF               	swapf	239,w,c
 13463   01361A  32E8               	rrcf	wreg,f,c
 13464   01361C  0B03               	andlw	3
 13465   01361E  6EDF               	movwf	indf2,c
 13466   013620                     
 13467                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13468                           ;stkvar	_config @ sp[(-5)+-2]
 13469   013620  0EF9               	movlw	-7
 13470   013622  CFE3 F036          	movff	plusw1,btemp+10
 13471   013626  0EFA               	movlw	-6
 13472   013628  CFE3 F037          	movff	plusw1,btemp+11
 13473   01362C  0E02               	movlw	2
 13474   01362E  2436               	addwf	(btemp+10)^0,w,c
 13475   013630  6ED9               	movwf	fsr2l,c
 13476   013632  0E00               	movlw	0
 13477   013634  2037               	addwfc	(btemp+11)^0,w,c
 13478   013636  6EDA               	movwf	fsr2h,c
 13479                           
 13480                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13481   013638  0EFE               	movlw	254
 13482   01363A  24E1               	addwf	fsr1l,w,c
 13483   01363C  6EE9               	movwf	fsr0l,c
 13484   01363E  0EFF               	movlw	255
 13485   013640  20E2               	addwfc	fsr1h,w,c
 13486   013642  6EEA               	movwf	fsr0h,c
 13487   013644  50EF               	movf	239,w,c
 13488   013646  0B1F               	andlw	31
 13489   013648  6EDF               	movwf	indf2,c
 13490   01364A                     
 13491                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13492                           ;stkvar	_config @ sp[(-5)+-2]
 13493   01364A  0EF9               	movlw	-7
 13494   01364C  CFE3 F036          	movff	plusw1,btemp+10
 13495   013650  0EFA               	movlw	-6
 13496   013652  CFE3 F037          	movff	plusw1,btemp+11
 13497   013656  0E03               	movlw	3
 13498   013658  2436               	addwf	(btemp+10)^0,w,c
 13499   01365A  6ED9               	movwf	fsr2l,c
 13500   01365C  0E00               	movlw	0
 13501   01365E  2037               	addwfc	(btemp+11)^0,w,c
 13502   013660  6EDA               	movwf	fsr2h,c
 13503                           
 13504                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13505   013662  0EFE               	movlw	254
 13506   013664  24E1               	addwf	fsr1l,w,c
 13507   013666  6EE9               	movwf	fsr0l,c
 13508   013668  0EFF               	movlw	255
 13509   01366A  20E2               	addwfc	fsr1h,w,c
 13510   01366C  6EEA               	movwf	fsr0h,c
 13511   01366E  38EF               	swapf	239,w,c
 13512   013670  32E8               	rrcf	wreg,f,c
 13513   013672  0B07               	andlw	7
 13514   013674  6EDF               	movwf	indf2,c
 13515   013676                     
 13516                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13517   013676  0EF9               	movlw	249
 13518   013678  26E1               	addwf	fsr1l,f,c
 13519   01367A  0EFF               	movlw	255
 13520   01367C  22E2               	addwfc	fsr1h,f,c
 13521   01367E  0012               	return		;funcret
 13522   013680                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13523                           	callstack 0
 13524                           
 13525 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13526 ;; Defined at:
 13527 ;;		line 671 in file "can/can.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13530 ;;		 -> txqConfig(4), 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13533 ;;  a               2    0        unsigned short 
 13534 ;;  spiTransferE    1    0        char 
 13535 ;; Return value:  Size  Location     Type
 13536 ;;                  1  [STACK] char 
 13537 ;; Registers used:
 13538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13539 ;; Tracked objects:
 13540 ;;		On entry : 0/0
 13541 ;;		On exit  : 0/0
 13542 ;;		Unchanged: 0/0
 13543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13548 ;;Total ram usage:        0 bytes
 13549 ;; Hardware stack levels used: 1
 13550 ;; Hardware stack levels required when called: 9
 13551 ;; This function calls:
 13552 ;;		_DRV_CANFDSPI_WriteWord
 13553 ;; This function is called by:
 13554 ;;		_CanInit
 13555 ;; This function uses a reentrant model
 13556 ;;
 13557                           
 13558                           	psect	text49
 13559   012FF6                     __ptext49:
 13560                           	callstack 0
 13561   012FF6                     _DRV_CANFDSPI_TransmitQueueConfigure:
 13562                           	callstack 0
 13563                           
 13564                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13565   012FF6  52E6               	movf	postinc1,f,c
 13566   012FF8  52E6               	movf	postinc1,f,c
 13567   012FFA  52E6               	movf	postinc1,f,c
 13568   012FFC  52E6               	movf	postinc1,f,c
 13569   012FFE                     
 13570                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 13571   012FFE  0EDD               	movlw	low _canFifoResetValues
 13572   013000  6EF6               	movwf	tblptrl,c
 13573   013002                     	if	1	;There is more than 1 active tblptr byte
 13574   013002  0EFF               	movlw	high _canFifoResetValues
 13575   013004  6EF7               	movwf	tblptrh,c
 13576   013006                     	endif
 13577   013006                     	if	1	;There are 3 active tblptr bytes
 13578   013006  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13579   013008  6EF8               	movwf	tblptru,c
 13580   01300A                     	endif
 13581   01300A  0009               	tblrd		*+
 13582   01300C  CFF5 F034          	movff	tablat,btemp+8
 13583   013010  0009               	tblrd		*+
 13584   013012  CFF5 F035          	movff	tablat,btemp+9
 13585   013016  0009               	tblrd		*+
 13586   013018  CFF5 F036          	movff	tablat,btemp+10
 13587   01301C  0009               	tblrd		*+
 13588   01301E  CFF5 F037          	movff	tablat,btemp+11
 13589                           
 13590                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13591   013022  0EFC               	movlw	-4
 13592   013024  C034  FFE3         	movff	btemp+8,plusw1
 13593   013028  0EFD               	movlw	-3
 13594   01302A  C035  FFE3         	movff	btemp+9,plusw1
 13595   01302E  0EFE               	movlw	-2
 13596   013030  C036  FFE3         	movff	btemp+10,plusw1
 13597   013034  0EFF               	movlw	-1
 13598   013036  C037  FFE3         	movff	btemp+11,plusw1
 13599   01303A                     
 13600                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 13601                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13602   01303A  50E1               	movf	fsr1l,w,c
 13603   01303C  0FFC               	addlw	-4
 13604   01303E  6ED9               	movwf	fsr2l,c
 13605   013040  50E2               	movf	fsr1h,w,c
 13606   013042  6EDA               	movwf	fsr2h,c
 13607   013044  0EFF               	movlw	255
 13608   013046  22DA               	addwfc	fsr2h,f,c
 13609   013048  8EDF               	bsf	indf2,7,c
 13610   01304A                     
 13611                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13612                           ;stkvar	_config @ sp[(-4)+-2]
 13613   01304A  0EFA               	movlw	-6
 13614   01304C  CFE3 F036          	movff	plusw1,btemp+10
 13615   013050  0EFB               	movlw	-5
 13616   013052  CFE3 F037          	movff	plusw1,btemp+11
 13617   013056  0E02               	movlw	2
 13618   013058  2436               	addwf	(btemp+10)^0,w,c
 13619   01305A  6ED9               	movwf	fsr2l,c
 13620   01305C  0E00               	movlw	0
 13621   01305E  2037               	addwfc	(btemp+11)^0,w,c
 13622   013060  6EDA               	movwf	fsr2h,c
 13623   013062  50DF               	movf	indf2,w,c
 13624   013064  6E37               	movwf	(btemp+11)^0,c
 13625                           
 13626                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13627   013066  0EFF               	movlw	255
 13628   013068  24E1               	addwf	fsr1l,w,c
 13629   01306A  6ED9               	movwf	fsr2l,c
 13630   01306C  0EFF               	movlw	255
 13631   01306E  20E2               	addwfc	fsr1h,w,c
 13632   013070  6EDA               	movwf	fsr2h,c
 13633   013072  50DF               	movf	223,w,c
 13634   013074  1837               	xorwf	(btemp+11)^0,w,c
 13635   013076  0BE0               	andlw	-32
 13636   013078  1837               	xorwf	(btemp+11)^0,w,c
 13637   01307A  6EDF               	movwf	223,c
 13638   01307C                     
 13639                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13640                           ;stkvar	_config @ sp[(-4)+-2]
 13641   01307C  0EFA               	movlw	-6
 13642   01307E  CFE3 F036          	movff	plusw1,btemp+10
 13643   013082  0EFB               	movlw	-5
 13644   013084  CFE3 F037          	movff	plusw1,btemp+11
 13645   013088  0E03               	movlw	3
 13646   01308A  2436               	addwf	(btemp+10)^0,w,c
 13647   01308C  6ED9               	movwf	fsr2l,c
 13648   01308E  0E00               	movlw	0
 13649   013090  2037               	addwfc	(btemp+11)^0,w,c
 13650   013092  6EDA               	movwf	fsr2h,c
 13651   013094  50DF               	movf	indf2,w,c
 13652   013096  6E37               	movwf	(btemp+11)^0,c
 13653                           
 13654                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13655   013098  0EFF               	movlw	255
 13656   01309A  24E1               	addwf	fsr1l,w,c
 13657   01309C  6ED9               	movwf	fsr2l,c
 13658   01309E  0EFF               	movlw	255
 13659   0130A0  20E2               	addwfc	fsr1h,w,c
 13660   0130A2  6EDA               	movwf	fsr2h,c
 13661   0130A4  3A37               	swapf	(btemp+11)^0,f,c
 13662   0130A6  4637               	rlncf	(btemp+11)^0,f,c
 13663   0130A8  50DF               	movf	223,w,c
 13664   0130AA  1837               	xorwf	(btemp+11)^0,w,c
 13665   0130AC  0B1F               	andlw	-225
 13666   0130AE  1837               	xorwf	(btemp+11)^0,w,c
 13667   0130B0  6EDF               	movwf	223,c
 13668   0130B2                     
 13669                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13670                           ;stkvar	_config @ sp[(-4)+-2]
 13671   0130B2  0EFA               	movlw	-6
 13672   0130B4  CFE3 F036          	movff	plusw1,btemp+10
 13673   0130B8  0EFB               	movlw	-5
 13674   0130BA  CFE3 F037          	movff	plusw1,btemp+11
 13675   0130BE  0E01               	movlw	1
 13676   0130C0  2436               	addwf	(btemp+10)^0,w,c
 13677   0130C2  6ED9               	movwf	fsr2l,c
 13678   0130C4  0E00               	movlw	0
 13679   0130C6  2037               	addwfc	(btemp+11)^0,w,c
 13680   0130C8  6EDA               	movwf	fsr2h,c
 13681   0130CA  50DF               	movf	indf2,w,c
 13682   0130CC  6E37               	movwf	(btemp+11)^0,c
 13683                           
 13684                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13685   0130CE  0EFE               	movlw	254
 13686   0130D0  24E1               	addwf	fsr1l,w,c
 13687   0130D2  6ED9               	movwf	fsr2l,c
 13688   0130D4  0EFF               	movlw	255
 13689   0130D6  20E2               	addwfc	fsr1h,w,c
 13690   0130D8  6EDA               	movwf	fsr2h,c
 13691   0130DA  3A37               	swapf	(btemp+11)^0,f,c
 13692   0130DC  4637               	rlncf	(btemp+11)^0,f,c
 13693   0130DE  50DF               	movf	223,w,c
 13694   0130E0  1837               	xorwf	(btemp+11)^0,w,c
 13695   0130E2  0B9F               	andlw	-97
 13696   0130E4  1837               	xorwf	(btemp+11)^0,w,c
 13697   0130E6  6EDF               	movwf	223,c
 13698   0130E8                     
 13699                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13700                           ;stkvar	_config @ sp[(-4)+-2]
 13701   0130E8  0EFA               	movlw	-6
 13702   0130EA  CFE3 FFD9          	movff	plusw1,fsr2l
 13703   0130EE  0EFB               	movlw	-5
 13704   0130F0  CFE3 FFDA          	movff	plusw1,fsr2h
 13705   0130F4  50DF               	movf	indf2,w,c
 13706   0130F6  6E37               	movwf	(btemp+11)^0,c
 13707                           
 13708                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13709   0130F8  0EFE               	movlw	254
 13710   0130FA  24E1               	addwf	fsr1l,w,c
 13711   0130FC  6ED9               	movwf	fsr2l,c
 13712   0130FE  0EFF               	movlw	255
 13713   013100  20E2               	addwfc	fsr1h,w,c
 13714   013102  6EDA               	movwf	fsr2h,c
 13715   013104  50DF               	movf	223,w,c
 13716   013106  1837               	xorwf	(btemp+11)^0,w,c
 13717   013108  0BE0               	andlw	-32
 13718   01310A  1837               	xorwf	(btemp+11)^0,w,c
 13719   01310C  6EDF               	movwf	223,c
 13720   01310E                     
 13721                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13722   01310E  0EFC               	movlw	-4
 13723   013110  CFE3 FFE6          	movff	plusw1,postinc1
 13724   013114  CFE3 FFE6          	movff	plusw1,postinc1
 13725   013118  CFE3 FFE6          	movff	plusw1,postinc1
 13726   01311C  CFE3 FFE6          	movff	plusw1,postinc1
 13727   013120  0E50               	movlw	80
 13728   013122  6EE6               	movwf	postinc1,c
 13729   013124  0E00               	movlw	0
 13730   013126  6EE6               	movwf	postinc1,c
 13731   013128  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13732   01312C                     
 13733                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 13734   01312C  0EFA               	movlw	250
 13735   01312E  26E1               	addwf	fsr1l,f,c
 13736   013130  0EFF               	movlw	255
 13737   013132  22E2               	addwfc	fsr1h,f,c
 13738   013134  0012               	return		;funcret
 13739   013136                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 13740                           	callstack 0
 13741                           
 13742 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 13743 ;; Defined at:
 13744 ;;		line 657 in file "can/can.c"
 13745 ;; Parameters:    Size  Location     Type
 13746 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13747 ;;		 -> txfConfig(2), 
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1  [STACK] char 
 13752 ;; Registers used:
 13753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;Total ram usage:        0 bytes
 13764 ;; Hardware stack levels used: 1
 13765 ;; Hardware stack levels required when called: 7
 13766 ;; This function calls:
 13767 ;;		Nothing
 13768 ;; This function is called by:
 13769 ;;		_CanInit
 13770 ;; This function uses a reentrant model
 13771 ;;
 13772                           
 13773                           	psect	text50
 13774   013136                     __ptext50:
 13775                           	callstack 0
 13776   013136                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13777                           	callstack 0
 13778                           
 13779                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13780   013136  0E05               	movlw	5
 13781   013138  26E1               	addwf	fsr1l,f,c
 13782   01313A  0E00               	movlw	0
 13783   01313C  22E2               	addwfc	fsr1h,f,c
 13784   01313E                     
 13785                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13786   01313E  0EDD               	movlw	low _canFifoResetValues
 13787   013140  6EF6               	movwf	tblptrl,c
 13788   013142                     	if	1	;There is more than 1 active tblptr byte
 13789   013142  0EFF               	movlw	high _canFifoResetValues
 13790   013144  6EF7               	movwf	tblptrh,c
 13791   013146                     	endif
 13792   013146                     	if	1	;There are 3 active tblptr bytes
 13793   013146  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13794   013148  6EF8               	movwf	tblptru,c
 13795   01314A                     	endif
 13796   01314A  0009               	tblrd		*+
 13797   01314C  CFF5 F034          	movff	tablat,btemp+8
 13798   013150  0009               	tblrd		*+
 13799   013152  CFF5 F035          	movff	tablat,btemp+9
 13800   013156  0009               	tblrd		*+
 13801   013158  CFF5 F036          	movff	tablat,btemp+10
 13802   01315C  0009               	tblrd		*+
 13803   01315E  CFF5 F037          	movff	tablat,btemp+11
 13804                           
 13805                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13806   013162  0EFB               	movlw	-5
 13807   013164  C034  FFE3         	movff	btemp+8,plusw1
 13808   013168  0EFC               	movlw	-4
 13809   01316A  C035  FFE3         	movff	btemp+9,plusw1
 13810   01316E  0EFD               	movlw	-3
 13811   013170  C036  FFE3         	movff	btemp+10,plusw1
 13812   013174  0EFE               	movlw	-2
 13813   013176  C037  FFE3         	movff	btemp+11,plusw1
 13814   01317A                     
 13815                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13816                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13817   01317A  50E1               	movf	fsr1l,w,c
 13818   01317C  0FFB               	addlw	-5
 13819   01317E  6ED9               	movwf	fsr2l,c
 13820   013180  50E2               	movf	fsr1h,w,c
 13821   013182  6EDA               	movwf	fsr2h,c
 13822   013184  0EFF               	movlw	255
 13823   013186  22DA               	addwfc	fsr2h,f,c
 13824                           
 13825                           ;stkvar	_config @ sp[(-5)+-2]
 13826   013188  0EF9               	movlw	-7
 13827   01318A  CFE3 FFE9          	movff	plusw1,fsr0l
 13828   01318E  0EFA               	movlw	-6
 13829   013190  CFE3 FFEA          	movff	plusw1,fsr0h
 13830   013194  90EF               	bcf	indf0,0,c
 13831   013196  ACDF               	btfss	indf2,6,c
 13832   013198  EFCF  F098         	goto	u1005
 13833   01319C  80EF               	bsf	indf0,0,c
 13834   01319E                     u1005:
 13835   01319E                     
 13836                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13837                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13838   01319E  0EFD               	movlw	253
 13839   0131A0  24E1               	addwf	fsr1l,w,c
 13840   0131A2  6ED9               	movwf	fsr2l,c
 13841   0131A4  0EFF               	movlw	255
 13842   0131A6  20E2               	addwfc	fsr1h,w,c
 13843   0131A8  6EDA               	movwf	fsr2h,c
 13844   0131AA  50DF               	movf	223,w,c
 13845   0131AC  0B1F               	andlw	31
 13846   0131AE  6E37               	movwf	(btemp+11)^0,c
 13847                           
 13848                           ;stkvar	_config @ sp[(-5)+-2]
 13849   0131B0  0EF9               	movlw	-7
 13850   0131B2  CFE3 FFD9          	movff	plusw1,fsr2l
 13851   0131B6  0EFA               	movlw	-6
 13852   0131B8  CFE3 FFDA          	movff	plusw1,fsr2h
 13853   0131BC  4637               	rlncf	(btemp+11)^0,f,c
 13854   0131BE  50DF               	movf	223,w,c
 13855   0131C0  1837               	xorwf	(btemp+11)^0,w,c
 13856   0131C2  0BC1               	andlw	-63
 13857   0131C4  1837               	xorwf	(btemp+11)^0,w,c
 13858   0131C6  6EDF               	movwf	223,c
 13859   0131C8                     
 13860                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13861                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13862   0131C8  0EFD               	movlw	253
 13863   0131CA  24E1               	addwf	fsr1l,w,c
 13864   0131CC  6ED9               	movwf	fsr2l,c
 13865   0131CE  0EFF               	movlw	255
 13866   0131D0  20E2               	addwfc	fsr1h,w,c
 13867   0131D2  6EDA               	movwf	fsr2h,c
 13868   0131D4  38DF               	swapf	223,w,c
 13869   0131D6  32E8               	rrcf	wreg,f,c
 13870   0131D8  0B03               	andlw	3
 13871   0131DA  6E37               	movwf	(btemp+11)^0,c
 13872                           
 13873                           ;stkvar	_config @ sp[(-5)+-2]
 13874   0131DC  0EF9               	movlw	-7
 13875   0131DE  CFE3 FFD9          	movff	plusw1,fsr2l
 13876   0131E2  0EFA               	movlw	-6
 13877   0131E4  CFE3 FFDA          	movff	plusw1,fsr2h
 13878   0131E8  3A37               	swapf	(btemp+11)^0,f,c
 13879   0131EA  4637               	rlncf	(btemp+11)^0,f,c
 13880   0131EC  4637               	rlncf	(btemp+11)^0,f,c
 13881   0131EE  50DF               	movf	223,w,c
 13882   0131F0  1837               	xorwf	(btemp+11)^0,w,c
 13883   0131F2  0B3F               	andlw	-193
 13884   0131F4  1837               	xorwf	(btemp+11)^0,w,c
 13885   0131F6  6EDF               	movwf	223,c
 13886   0131F8                     
 13887                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13888                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13889   0131F8  0EFE               	movlw	254
 13890   0131FA  24E1               	addwf	fsr1l,w,c
 13891   0131FC  6ED9               	movwf	fsr2l,c
 13892   0131FE  0EFF               	movlw	255
 13893   013200  20E2               	addwfc	fsr1h,w,c
 13894   013202  6EDA               	movwf	fsr2h,c
 13895   013204  50DF               	movf	223,w,c
 13896   013206  0B1F               	andlw	31
 13897   013208  6E37               	movwf	(btemp+11)^0,c
 13898                           
 13899                           ;stkvar	_config @ sp[(-5)+-2]
 13900   01320A  0EF9               	movlw	-7
 13901   01320C  CFE3 F034          	movff	plusw1,btemp+8
 13902   013210  0EFA               	movlw	-6
 13903   013212  CFE3 F035          	movff	plusw1,btemp+9
 13904   013216  0E01               	movlw	1
 13905   013218  2434               	addwf	(btemp+8)^0,w,c
 13906   01321A  6ED9               	movwf	fsr2l,c
 13907   01321C  0E00               	movlw	0
 13908   01321E  2035               	addwfc	(btemp+9)^0,w,c
 13909   013220  6EDA               	movwf	fsr2h,c
 13910   013222  50DF               	movf	223,w,c
 13911   013224  1837               	xorwf	(btemp+11)^0,w,c
 13912   013226  0BE0               	andlw	-32
 13913   013228  1837               	xorwf	(btemp+11)^0,w,c
 13914   01322A  6EDF               	movwf	223,c
 13915   01322C                     
 13916                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13917                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13918   01322C  0EFE               	movlw	254
 13919   01322E  24E1               	addwf	fsr1l,w,c
 13920   013230  6ED9               	movwf	fsr2l,c
 13921   013232  0EFF               	movlw	255
 13922   013234  20E2               	addwfc	fsr1h,w,c
 13923   013236  6EDA               	movwf	fsr2h,c
 13924   013238  38DF               	swapf	223,w,c
 13925   01323A  32E8               	rrcf	wreg,f,c
 13926   01323C  0B07               	andlw	7
 13927   01323E  6E37               	movwf	(btemp+11)^0,c
 13928                           
 13929                           ;stkvar	_config @ sp[(-5)+-2]
 13930   013240  0EF9               	movlw	-7
 13931   013242  CFE3 F034          	movff	plusw1,btemp+8
 13932   013246  0EFA               	movlw	-6
 13933   013248  CFE3 F035          	movff	plusw1,btemp+9
 13934   01324C  0E01               	movlw	1
 13935   01324E  2434               	addwf	(btemp+8)^0,w,c
 13936   013250  6ED9               	movwf	fsr2l,c
 13937   013252  0E00               	movlw	0
 13938   013254  2035               	addwfc	(btemp+9)^0,w,c
 13939   013256  6EDA               	movwf	fsr2h,c
 13940   013258  3A37               	swapf	(btemp+11)^0,f,c
 13941   01325A  4637               	rlncf	(btemp+11)^0,f,c
 13942   01325C  50DF               	movf	223,w,c
 13943   01325E  1837               	xorwf	(btemp+11)^0,w,c
 13944   013260  0B1F               	andlw	-225
 13945   013262  1837               	xorwf	(btemp+11)^0,w,c
 13946   013264  6EDF               	movwf	223,c
 13947   013266                     
 13948                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13949   013266  0EF9               	movlw	249
 13950   013268  26E1               	addwf	fsr1l,f,c
 13951   01326A  0EFF               	movlw	255
 13952   01326C  22E2               	addwfc	fsr1h,f,c
 13953   01326E  0012               	return		;funcret
 13954   013270                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13955                           	callstack 0
 13956                           
 13957 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 13958 ;; Defined at:
 13959 ;;		line 633 in file "can/can.c"
 13960 ;; Parameters:    Size  Location     Type
 13961 ;;  channel         1  [STACK] enum E5287
 13962 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13963 ;;		 -> txfConfig(2), 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13966 ;;  a               2  [STACK] unsigned short 
 13967 ;;  spiTransferE    1    0        char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  1  [STACK] char 
 13970 ;; Registers used:
 13971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13972 ;; Tracked objects:
 13973 ;;		On entry : 0/0
 13974 ;;		On exit  : 0/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13981 ;;Total ram usage:        0 bytes
 13982 ;; Hardware stack levels used: 1
 13983 ;; Hardware stack levels required when called: 9
 13984 ;; This function calls:
 13985 ;;		_DRV_CANFDSPI_WriteWord
 13986 ;; This function is called by:
 13987 ;;		_CanInit
 13988 ;; This function uses a reentrant model
 13989 ;;
 13990                           
 13991                           	psect	text51
 13992   012914                     __ptext51:
 13993                           	callstack 0
 13994   012914                     _DRV_CANFDSPI_TransmitChannelConfigure:
 13995                           	callstack 0
 13996                           
 13997                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13998   012914  0E07               	movlw	7
 13999   012916  26E1               	addwf	fsr1l,f,c
 14000   012918  0E00               	movlw	0
 14001   01291A  22E2               	addwfc	fsr1h,f,c
 14002   01291C                     
 14003                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 14004   01291C  0EDD               	movlw	low _canFifoResetValues
 14005   01291E  6EF6               	movwf	tblptrl,c
 14006   012920                     	if	1	;There is more than 1 active tblptr byte
 14007   012920  0EFF               	movlw	high _canFifoResetValues
 14008   012922  6EF7               	movwf	tblptrh,c
 14009   012924                     	endif
 14010   012924                     	if	1	;There are 3 active tblptr bytes
 14011   012924  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14012   012926  6EF8               	movwf	tblptru,c
 14013   012928                     	endif
 14014   012928  0009               	tblrd		*+
 14015   01292A  CFF5 F034          	movff	tablat,btemp+8
 14016   01292E  0009               	tblrd		*+
 14017   012930  CFF5 F035          	movff	tablat,btemp+9
 14018   012934  0009               	tblrd		*+
 14019   012936  CFF5 F036          	movff	tablat,btemp+10
 14020   01293A  0009               	tblrd		*+
 14021   01293C  CFF5 F037          	movff	tablat,btemp+11
 14022                           
 14023                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14024   012940  0EF9               	movlw	-7
 14025   012942  C034  FFE3         	movff	btemp+8,plusw1
 14026   012946  0EFA               	movlw	-6
 14027   012948  C035  FFE3         	movff	btemp+9,plusw1
 14028   01294C  0EFB               	movlw	-5
 14029   01294E  C036  FFE3         	movff	btemp+10,plusw1
 14030   012952  0EFC               	movlw	-4
 14031   012954  C037  FFE3         	movff	btemp+11,plusw1
 14032   012958                     
 14033                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 14034                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14035   012958  50E1               	movf	fsr1l,w,c
 14036   01295A  0FF9               	addlw	-7
 14037   01295C  6ED9               	movwf	fsr2l,c
 14038   01295E  50E2               	movf	fsr1h,w,c
 14039   012960  6EDA               	movwf	fsr2h,c
 14040   012962  0EFF               	movlw	255
 14041   012964  22DA               	addwfc	fsr2h,f,c
 14042   012966  8EDF               	bsf	indf2,7,c
 14043   012968                     
 14044                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 14045                           ;stkvar	_config @ sp[(-7)+-3]
 14046   012968  0EF6               	movlw	-10
 14047   01296A  CFE3 F036          	movff	plusw1,btemp+10
 14048   01296E  0EF7               	movlw	-9
 14049   012970  CFE3 F037          	movff	plusw1,btemp+11
 14050   012974  0E01               	movlw	1
 14051   012976  2436               	addwf	(btemp+10)^0,w,c
 14052   012978  6ED9               	movwf	fsr2l,c
 14053   01297A  0E00               	movlw	0
 14054   01297C  2037               	addwfc	(btemp+11)^0,w,c
 14055   01297E  6EDA               	movwf	fsr2h,c
 14056   012980  50DF               	movf	223,w,c
 14057   012982  0B1F               	andlw	31
 14058   012984  6E37               	movwf	(btemp+11)^0,c
 14059                           
 14060                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14061   012986  0EFC               	movlw	252
 14062   012988  24E1               	addwf	fsr1l,w,c
 14063   01298A  6ED9               	movwf	fsr2l,c
 14064   01298C  0EFF               	movlw	255
 14065   01298E  20E2               	addwfc	fsr1h,w,c
 14066   012990  6EDA               	movwf	fsr2h,c
 14067   012992  50DF               	movf	223,w,c
 14068   012994  1837               	xorwf	(btemp+11)^0,w,c
 14069   012996  0BE0               	andlw	-32
 14070   012998  1837               	xorwf	(btemp+11)^0,w,c
 14071   01299A  6EDF               	movwf	223,c
 14072   01299C                     
 14073                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14074                           ;stkvar	_config @ sp[(-7)+-3]
 14075   01299C  0EF6               	movlw	-10
 14076   01299E  CFE3 F036          	movff	plusw1,btemp+10
 14077   0129A2  0EF7               	movlw	-9
 14078   0129A4  CFE3 F037          	movff	plusw1,btemp+11
 14079   0129A8  0E01               	movlw	1
 14080   0129AA  2436               	addwf	(btemp+10)^0,w,c
 14081   0129AC  6ED9               	movwf	fsr2l,c
 14082   0129AE  0E00               	movlw	0
 14083   0129B0  2037               	addwfc	(btemp+11)^0,w,c
 14084   0129B2  6EDA               	movwf	fsr2h,c
 14085   0129B4  38DF               	swapf	223,w,c
 14086   0129B6  32E8               	rrcf	wreg,f,c
 14087   0129B8  0B07               	andlw	7
 14088   0129BA  6E37               	movwf	(btemp+11)^0,c
 14089                           
 14090                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14091   0129BC  0EFC               	movlw	252
 14092   0129BE  24E1               	addwf	fsr1l,w,c
 14093   0129C0  6ED9               	movwf	fsr2l,c
 14094   0129C2  0EFF               	movlw	255
 14095   0129C4  20E2               	addwfc	fsr1h,w,c
 14096   0129C6  6EDA               	movwf	fsr2h,c
 14097   0129C8  3A37               	swapf	(btemp+11)^0,f,c
 14098   0129CA  4637               	rlncf	(btemp+11)^0,f,c
 14099   0129CC  50DF               	movf	223,w,c
 14100   0129CE  1837               	xorwf	(btemp+11)^0,w,c
 14101   0129D0  0B1F               	andlw	-225
 14102   0129D2  1837               	xorwf	(btemp+11)^0,w,c
 14103   0129D4  6EDF               	movwf	223,c
 14104   0129D6                     
 14105                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14106                           ;stkvar	_config @ sp[(-7)+-3]
 14107   0129D6  0EF6               	movlw	-10
 14108   0129D8  CFE3 FFD9          	movff	plusw1,fsr2l
 14109   0129DC  0EF7               	movlw	-9
 14110   0129DE  CFE3 FFDA          	movff	plusw1,fsr2h
 14111   0129E2  38DF               	swapf	223,w,c
 14112   0129E4  32E8               	rrcf	wreg,f,c
 14113   0129E6  32E8               	rrcf	wreg,f,c
 14114   0129E8  0B03               	andlw	3
 14115   0129EA  6E37               	movwf	(btemp+11)^0,c
 14116                           
 14117                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14118   0129EC  0EFB               	movlw	251
 14119   0129EE  24E1               	addwf	fsr1l,w,c
 14120   0129F0  6ED9               	movwf	fsr2l,c
 14121   0129F2  0EFF               	movlw	255
 14122   0129F4  20E2               	addwfc	fsr1h,w,c
 14123   0129F6  6EDA               	movwf	fsr2h,c
 14124   0129F8  3A37               	swapf	(btemp+11)^0,f,c
 14125   0129FA  4637               	rlncf	(btemp+11)^0,f,c
 14126   0129FC  50DF               	movf	223,w,c
 14127   0129FE  1837               	xorwf	(btemp+11)^0,w,c
 14128   012A00  0B9F               	andlw	-97
 14129   012A02  1837               	xorwf	(btemp+11)^0,w,c
 14130   012A04  6EDF               	movwf	223,c
 14131   012A06                     
 14132                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14133                           ;stkvar	_config @ sp[(-7)+-3]
 14134   012A06  0EF6               	movlw	-10
 14135   012A08  CFE3 FFD9          	movff	plusw1,fsr2l
 14136   012A0C  0EF7               	movlw	-9
 14137   012A0E  CFE3 FFDA          	movff	plusw1,fsr2h
 14138   012A12  30DF               	rrcf	223,w,c
 14139   012A14  0B1F               	andlw	31
 14140   012A16  6E37               	movwf	(btemp+11)^0,c
 14141                           
 14142                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14143   012A18  0EFB               	movlw	251
 14144   012A1A  24E1               	addwf	fsr1l,w,c
 14145   012A1C  6ED9               	movwf	fsr2l,c
 14146   012A1E  0EFF               	movlw	255
 14147   012A20  20E2               	addwfc	fsr1h,w,c
 14148   012A22  6EDA               	movwf	fsr2h,c
 14149   012A24  50DF               	movf	223,w,c
 14150   012A26  1837               	xorwf	(btemp+11)^0,w,c
 14151   012A28  0BE0               	andlw	-32
 14152   012A2A  1837               	xorwf	(btemp+11)^0,w,c
 14153   012A2C  6EDF               	movwf	223,c
 14154   012A2E                     
 14155                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14156                           ;stkvar	_config @ sp[(-7)+-3]
 14157   012A2E  0EF6               	movlw	-10
 14158   012A30  CFE3 FFD9          	movff	plusw1,fsr2l
 14159   012A34  0EF7               	movlw	-9
 14160   012A36  CFE3 FFDA          	movff	plusw1,fsr2h
 14161                           
 14162                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14163   012A3A  50E1               	movf	fsr1l,w,c
 14164   012A3C  0FF9               	addlw	-7
 14165   012A3E  6EE9               	movwf	fsr0l,c
 14166   012A40  50E2               	movf	fsr1h,w,c
 14167   012A42  6EEA               	movwf	fsr0h,c
 14168   012A44  0EFF               	movlw	255
 14169   012A46  22EA               	addwfc	fsr0h,f,c
 14170   012A48  9CEF               	bcf	indf0,6,c
 14171   012A4A  A0DF               	btfss	indf2,0,c
 14172   012A4C  EF29  F095         	goto	u2505
 14173   012A50  8CEF               	bsf	indf0,6,c
 14174   012A52                     u2505:
 14175   012A52                     
 14176                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14177                           ;stkvar	_channel @ sp[(-7)+-1]
 14178   012A52  0EF8               	movlw	-8
 14179   012A54  50E3               	movf	plusw1,w,c
 14180   012A56  0D0C               	mullw	12
 14181   012A58  0E50               	movlw	80
 14182   012A5A  26F3               	addwf	243,f,c
 14183   012A5C  0E00               	movlw	0
 14184   012A5E  22F4               	addwfc	244,f,c
 14185                           
 14186                           ;stkvar	_a @ sp[(-7)+5]
 14187   012A60  0EFE               	movlw	-2
 14188   012A62  CFF3 FFE3          	movff	prodl,plusw1
 14189   012A66  0EFF               	movlw	-1
 14190   012A68  CFF4 FFE3          	movff	prodh,plusw1
 14191   012A6C                     
 14192                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14193   012A6C  0EF9               	movlw	-7
 14194   012A6E  CFE3 FFE6          	movff	plusw1,postinc1
 14195   012A72  CFE3 FFE6          	movff	plusw1,postinc1
 14196   012A76  CFE3 FFE6          	movff	plusw1,postinc1
 14197   012A7A  CFE3 FFE6          	movff	plusw1,postinc1
 14198                           
 14199                           ;stkvar	_a @ sp[(-11)+5]
 14200   012A7E  0EFA               	movlw	-6
 14201   012A80  CFE3 FFE6          	movff	plusw1,postinc1
 14202   012A84  CFE3 FFE6          	movff	plusw1,postinc1
 14203   012A88  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14204   012A8C                     
 14205                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14206   012A8C  0EF6               	movlw	246
 14207   012A8E  26E1               	addwf	fsr1l,f,c
 14208   012A90  0EFF               	movlw	255
 14209   012A92  22E2               	addwfc	fsr1h,f,c
 14210   012A94  0012               	return		;funcret
 14211   012A96                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14212                           	callstack 0
 14213                           
 14214 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14215 ;; Defined at:
 14216 ;;		line 2690 in file "can/can.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;  ts              4  [STACK] unsigned long 
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;  spiTransferE    1    0        char 
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  1  [STACK] char 
 14223 ;; Registers used:
 14224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;Total ram usage:        0 bytes
 14235 ;; Hardware stack levels used: 1
 14236 ;; Hardware stack levels required when called: 9
 14237 ;; This function calls:
 14238 ;;		_DRV_CANFDSPI_WriteWord
 14239 ;; This function is called by:
 14240 ;;		_CanInit
 14241 ;; This function uses a reentrant model
 14242 ;;
 14243                           
 14244                           	psect	text52
 14245   014902                     __ptext52:
 14246                           	callstack 0
 14247   014902                     _DRV_CANFDSPI_TimeStampSet:
 14248                           	callstack 20
 14249   014902                     
 14250                           ;stkvar	_ts @ sp[(0)+-4]
 14251   014902  0EFC               	movlw	-4
 14252   014904  CFE3 FFE6          	movff	plusw1,postinc1
 14253   014908  CFE3 FFE6          	movff	plusw1,postinc1
 14254   01490C  CFE3 FFE6          	movff	plusw1,postinc1
 14255   014910  CFE3 FFE6          	movff	plusw1,postinc1
 14256   014914  0E10               	movlw	16
 14257   014916  6EE6               	movwf	postinc1,c
 14258   014918  0E00               	movlw	0
 14259   01491A  6EE6               	movwf	postinc1,c
 14260   01491C  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14261   014920                     
 14262                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14263   014920  52E5               	movf	postdec1,f,c
 14264   014922  52E5               	movf	postdec1,f,c
 14265   014924  52E5               	movf	postdec1,f,c
 14266   014926  52E5               	movf	postdec1,f,c
 14267   014928  0012               	return		;funcret
 14268   01492A                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14269                           	callstack 0
 14270                           
 14271 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14272 ;; Defined at:
 14273 ;;		line 2725 in file "can/can.c"
 14274 ;; Parameters:    Size  Location     Type
 14275 ;;  ps              2  [STACK] unsigned short 
 14276 ;; Auto vars:     Size  Location     Type
 14277 ;;  spiTransferE    1    0        char 
 14278 ;; Return value:  Size  Location     Type
 14279 ;;                  1  [STACK] char 
 14280 ;; Registers used:
 14281 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14282 ;; Tracked objects:
 14283 ;;		On entry : 0/0
 14284 ;;		On exit  : 0/0
 14285 ;;		Unchanged: 0/0
 14286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14291 ;;Total ram usage:        0 bytes
 14292 ;; Hardware stack levels used: 1
 14293 ;; Hardware stack levels required when called: 9
 14294 ;; This function calls:
 14295 ;;		_DRV_CANFDSPI_WriteHalfWord
 14296 ;; This function is called by:
 14297 ;;		_CanInit
 14298 ;; This function uses a reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text53
 14302   014972                     __ptext53:
 14303                           	callstack 0
 14304   014972                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14305                           	callstack 20
 14306   014972                     
 14307                           ;stkvar	_ps @ sp[(0)+-2]
 14308   014972  0EFE               	movlw	-2
 14309   014974  CFE3 FFE6          	movff	plusw1,postinc1
 14310   014978  CFE3 FFE6          	movff	plusw1,postinc1
 14311   01497C  0E14               	movlw	20
 14312   01497E  6EE6               	movwf	postinc1,c
 14313   014980  0E00               	movlw	0
 14314   014982  6EE6               	movwf	postinc1,c
 14315   014984  EC5D  F09D         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14316   014988                     
 14317                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14318   014988  52E5               	movf	postdec1,f,c
 14319   01498A  52E5               	movf	postdec1,f,c
 14320   01498C  0012               	return		;funcret
 14321   01498E                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14322                           	callstack 0
 14323                           
 14324 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14325 ;; Defined at:
 14326 ;;		line 2634 in file "can/can.c"
 14327 ;; Parameters:    Size  Location     Type
 14328 ;;		None
 14329 ;; Auto vars:     Size  Location     Type
 14330 ;;  d               1  [STACK] unsigned char 
 14331 ;;  spiTransferE    1  [STACK] char 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1  [STACK] char 
 14334 ;; Registers used:
 14335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used: 1
 14347 ;; Hardware stack levels required when called: 9
 14348 ;; This function calls:
 14349 ;;		_DRV_CANFDSPI_ReadByte
 14350 ;;		_DRV_CANFDSPI_WriteByte
 14351 ;; This function is called by:
 14352 ;;		_CanInit
 14353 ;; This function uses a reentrant model
 14354 ;;
 14355                           
 14356                           	psect	text54
 14357   0145F2                     __ptext54:
 14358                           	callstack 0
 14359   0145F2                     _DRV_CANFDSPI_TimeStampEnable:
 14360                           	callstack 0
 14361                           
 14362                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14363   0145F2  52E6               	movf	postinc1,f,c
 14364   0145F4  52E6               	movf	postinc1,f,c
 14365   0145F6                     
 14366                           ;can/can.c: 2637:     uint8_t d = 0;
 14367                           ;stkvar	_d @ sp[(-2)+0]
 14368   0145F6  0EFE               	movlw	-2
 14369   0145F8  6AE3               	clrf	plusw1,c
 14370   0145FA                     
 14371                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14372                           ;stkvar	_d @ sp[(-2)+0]
 14373   0145FA  0EFE               	movlw	254
 14374   0145FC  24E1               	addwf	fsr1l,w,c
 14375   0145FE  6E2C               	movwf	btemp^0,c
 14376   014600  0EFF               	movlw	255
 14377   014602  20E2               	addwfc	fsr1h,w,c
 14378   014604  6E2D               	movwf	(btemp+1)^0,c
 14379   014606  C02C  FFE6         	movff	btemp,postinc1
 14380   01460A  C02D  FFE6         	movff	btemp+1,postinc1
 14381   01460E  0E16               	movlw	22
 14382   014610  6EE6               	movwf	postinc1,c
 14383   014612  0E00               	movlw	0
 14384   014614  6EE6               	movwf	postinc1,c
 14385   014616  ECC8  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14386                           
 14387                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14388   01461A  0EFF               	movlw	-1
 14389   01461C  C02C  FFE3         	movff	btemp,plusw1
 14390   014620                     
 14391                           ;can/can.c: 2641:     if (spiTransferError) {
 14392                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14393   014620  0EFF               	movlw	-1
 14394   014622  50E3               	movf	plusw1,w,c
 14395   014624  B4D8               	btfsc	status,2,c
 14396   014626  EF17  F0A3         	goto	u2531
 14397   01462A  EF19  F0A3         	goto	u2530
 14398   01462E                     u2531:
 14399   01462E  EF1B  F0A3         	goto	l4876
 14400   014632                     u2530:
 14401   014632  EF26  F0A3         	goto	l623
 14402   014636                     l4876:
 14403                           
 14404                           ;can/can.c: 2646:     d |= 0x01;
 14405                           ;stkvar	_d @ sp[(-2)+0]
 14406   014636  0EFE               	movlw	-2
 14407   014638  80E3               	bsf	plusw1,0,c
 14408   01463A                     
 14409                           ;stkvar	_d @ sp[(-2)+0]
 14410   01463A  0EFE               	movlw	-2
 14411   01463C  50E3               	movf	plusw1,w,c
 14412   01463E  6EE6               	movwf	postinc1,c
 14413   014640  0E16               	movlw	22
 14414   014642  6EE6               	movwf	postinc1,c
 14415   014644  0E00               	movlw	0
 14416   014646  6EE6               	movwf	postinc1,c
 14417   014648  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14418   01464C                     l623:
 14419                           
 14420                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14421   01464C  52E5               	movf	postdec1,f,c
 14422   01464E  52E5               	movf	postdec1,f,c
 14423   014650  0012               	return		;funcret
 14424   014652                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14425                           	callstack 0
 14426                           
 14427 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14428 ;; Defined at:
 14429 ;;		line 1539 in file "can/can.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14432 ;;		 -> tefConfig(1), 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14435 ;;  spiTransferE    1    0        char 
 14436 ;; Return value:  Size  Location     Type
 14437 ;;                  1  [STACK] char 
 14438 ;; Registers used:
 14439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14440 ;; Tracked objects:
 14441 ;;		On entry : 0/0
 14442 ;;		On exit  : 0/0
 14443 ;;		Unchanged: 0/0
 14444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14449 ;;Total ram usage:        0 bytes
 14450 ;; Hardware stack levels used: 1
 14451 ;; Hardware stack levels required when called: 9
 14452 ;; This function calls:
 14453 ;;		_DRV_CANFDSPI_WriteWord
 14454 ;; This function is called by:
 14455 ;;		_CanInit
 14456 ;; This function uses a reentrant model
 14457 ;;
 14458                           
 14459                           	psect	text55
 14460   013C48                     __ptext55:
 14461                           	callstack 0
 14462   013C48                     _DRV_CANFDSPI_TefConfigure:
 14463                           	callstack 0
 14464                           
 14465                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14466   013C48  52E6               	movf	postinc1,f,c
 14467   013C4A  52E6               	movf	postinc1,f,c
 14468   013C4C  52E6               	movf	postinc1,f,c
 14469   013C4E  52E6               	movf	postinc1,f,c
 14470   013C50                     
 14471                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14472   013C50  0EDD               	movlw	low _canFifoResetValues
 14473   013C52  6EF6               	movwf	tblptrl,c
 14474   013C54                     	if	1	;There is more than 1 active tblptr byte
 14475   013C54  0EFF               	movlw	high _canFifoResetValues
 14476   013C56  6EF7               	movwf	tblptrh,c
 14477   013C58                     	endif
 14478   013C58                     	if	1	;There are 3 active tblptr bytes
 14479   013C58  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14480   013C5A  6EF8               	movwf	tblptru,c
 14481   013C5C                     	endif
 14482   013C5C  0009               	tblrd		*+
 14483   013C5E  CFF5 F034          	movff	tablat,btemp+8
 14484   013C62  0009               	tblrd		*+
 14485   013C64  CFF5 F035          	movff	tablat,btemp+9
 14486   013C68  0009               	tblrd		*+
 14487   013C6A  CFF5 F036          	movff	tablat,btemp+10
 14488   013C6E  0009               	tblrd		*+
 14489   013C70  CFF5 F037          	movff	tablat,btemp+11
 14490                           
 14491                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14492   013C74  0EFC               	movlw	-4
 14493   013C76  C034  FFE3         	movff	btemp+8,plusw1
 14494   013C7A  0EFD               	movlw	-3
 14495   013C7C  C035  FFE3         	movff	btemp+9,plusw1
 14496   013C80  0EFE               	movlw	-2
 14497   013C82  C036  FFE3         	movff	btemp+10,plusw1
 14498   013C86  0EFF               	movlw	-1
 14499   013C88  C037  FFE3         	movff	btemp+11,plusw1
 14500   013C8C                     
 14501                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14502                           ;stkvar	_config @ sp[(-4)+-2]
 14503   013C8C  0EFA               	movlw	-6
 14504   013C8E  CFE3 FFD9          	movff	plusw1,fsr2l
 14505   013C92  0EFB               	movlw	-5
 14506   013C94  CFE3 FFDA          	movff	plusw1,fsr2h
 14507   013C98  30DF               	rrcf	223,w,c
 14508   013C9A  0B1F               	andlw	31
 14509   013C9C  6E37               	movwf	(btemp+11)^0,c
 14510                           
 14511                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14512   013C9E  0EFF               	movlw	255
 14513   013CA0  24E1               	addwf	fsr1l,w,c
 14514   013CA2  6ED9               	movwf	fsr2l,c
 14515   013CA4  0EFF               	movlw	255
 14516   013CA6  20E2               	addwfc	fsr1h,w,c
 14517   013CA8  6EDA               	movwf	fsr2h,c
 14518   013CAA  50DF               	movf	223,w,c
 14519   013CAC  1837               	xorwf	(btemp+11)^0,w,c
 14520   013CAE  0BE0               	andlw	-32
 14521   013CB0  1837               	xorwf	(btemp+11)^0,w,c
 14522   013CB2  6EDF               	movwf	223,c
 14523   013CB4                     
 14524                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14525                           ;stkvar	_config @ sp[(-4)+-2]
 14526   013CB4  0EFA               	movlw	-6
 14527   013CB6  CFE3 FFD9          	movff	plusw1,fsr2l
 14528   013CBA  0EFB               	movlw	-5
 14529   013CBC  CFE3 FFDA          	movff	plusw1,fsr2h
 14530                           
 14531                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14532   013CC0  50E1               	movf	fsr1l,w,c
 14533   013CC2  0FFC               	addlw	-4
 14534   013CC4  6EE9               	movwf	fsr0l,c
 14535   013CC6  50E2               	movf	fsr1h,w,c
 14536   013CC8  6EEA               	movwf	fsr0h,c
 14537   013CCA  0EFF               	movlw	255
 14538   013CCC  22EA               	addwfc	fsr0h,f,c
 14539   013CCE  9AEF               	bcf	indf0,5,c
 14540   013CD0  A0DF               	btfss	indf2,0,c
 14541   013CD2  EF6C  F09E         	goto	u2495
 14542   013CD6  8AEF               	bsf	indf0,5,c
 14543   013CD8                     u2495:
 14544   013CD8                     
 14545                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14546   013CD8  0EFC               	movlw	-4
 14547   013CDA  CFE3 FFE6          	movff	plusw1,postinc1
 14548   013CDE  CFE3 FFE6          	movff	plusw1,postinc1
 14549   013CE2  CFE3 FFE6          	movff	plusw1,postinc1
 14550   013CE6  CFE3 FFE6          	movff	plusw1,postinc1
 14551   013CEA  0E40               	movlw	64
 14552   013CEC  6EE6               	movwf	postinc1,c
 14553   013CEE  0E00               	movlw	0
 14554   013CF0  6EE6               	movwf	postinc1,c
 14555   013CF2  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14556   013CF6                     
 14557                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 14558   013CF6  0EFA               	movlw	250
 14559   013CF8  26E1               	addwf	fsr1l,f,c
 14560   013CFA  0EFF               	movlw	255
 14561   013CFC  22E2               	addwfc	fsr1h,f,c
 14562   013CFE  0012               	return		;funcret
 14563   013D00                     __end_of_DRV_CANFDSPI_TefConfigure:
 14564                           	callstack 0
 14565                           
 14566 ;; *************** function _DRV_CANFDSPI_Reset *****************
 14567 ;; Defined at:
 14568 ;;		line 257 in file "can/can.c"
 14569 ;; Parameters:    Size  Location     Type
 14570 ;;		None
 14571 ;; Auto vars:     Size  Location     Type
 14572 ;;  spiTransferS    2    0        unsigned short 
 14573 ;;  spiTransferE    1    0        char 
 14574 ;; Return value:  Size  Location     Type
 14575 ;;                  1  [STACK] char 
 14576 ;; Registers used:
 14577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 14578 ;; Tracked objects:
 14579 ;;		On entry : 0/0
 14580 ;;		On exit  : 0/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;Total ram usage:        0 bytes
 14588 ;; Hardware stack levels used: 1
 14589 ;; Hardware stack levels required when called: 8
 14590 ;; This function calls:
 14591 ;;		_SPI2_Open
 14592 ;;		_SpiTransfer
 14593 ;; This function is called by:
 14594 ;;		_CanInit
 14595 ;; This function uses a reentrant model
 14596 ;;
 14597                           
 14598                           	psect	text56
 14599   0148D6                     __ptext56:
 14600                           	callstack 0
 14601   0148D6                     _DRV_CANFDSPI_Reset:
 14602                           	callstack 21
 14603   0148D6                     
 14604                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 14605   0148D6  0101               	movlb	1	; () banked
 14606   0148D8  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 14607   0148DA                     
 14608                           ; BSR set to: 1
 14609                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 14610   0148DA  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 14611   0148DC                     
 14612                           ; BSR set to: 1
 14613                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 14614   0148DC  0E00               	movlw	0
 14615   0148DE  6EE6               	movwf	postinc1,c
 14616   0148E0  EC80  F09E         	call	_SPI2_Open	;wreg free
 14617   0148E4  0E02               	movlw	2
 14618   0148E6  6EE6               	movwf	postinc1,c
 14619   0148E8  0E00               	movlw	0
 14620   0148EA  6EE6               	movwf	postinc1,c
 14621   0148EC  0E00               	movlw	low _spiReceiveBuffer
 14622   0148EE  6EE6               	movwf	postinc1,c
 14623   0148F0  0E02               	movlw	high _spiReceiveBuffer
 14624   0148F2  6EE6               	movwf	postinc1,c
 14625   0148F4  0E00               	movlw	low _spiTransmitBuffer
 14626   0148F6  6EE6               	movwf	postinc1,c
 14627   0148F8  0E01               	movlw	high _spiTransmitBuffer
 14628   0148FA  6EE6               	movwf	postinc1,c
 14629   0148FC  ECC2  F09D         	call	_SpiTransfer	;wreg free
 14630   014900                     
 14631                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 14632   014900  0012               	return		;funcret
 14633   014902                     __end_of_DRV_CANFDSPI_Reset:
 14634                           	callstack 0
 14635                           
 14636 ;; *************** function _SPI2_Open *****************
 14637 ;; Defined at:
 14638 ;;		line 72 in file "mcc_generated_files/spi2.c"
 14639 ;; Parameters:    Size  Location     Type
 14640 ;;  spi2UniqueCo    1  [STACK] enum E358
 14641 ;; Auto vars:     Size  Location     Type
 14642 ;;		None
 14643 ;; Return value:  Size  Location     Type
 14644 ;;                  1  [STACK] _Bool 
 14645 ;; Registers used:
 14646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 14647 ;; Tracked objects:
 14648 ;;		On entry : 3F/1
 14649 ;;		On exit  : 0/0
 14650 ;;		Unchanged: 0/0
 14651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14656 ;;Total ram usage:        0 bytes
 14657 ;; Hardware stack levels used: 1
 14658 ;; Hardware stack levels required when called: 7
 14659 ;; This function calls:
 14660 ;;		Nothing
 14661 ;; This function is called by:
 14662 ;;		_DRV_CANFDSPI_Reset
 14663 ;; This function uses a reentrant model
 14664 ;;
 14665                           
 14666                           	psect	text57
 14667   013D00                     __ptext57:
 14668                           	callstack 0
 14669   013D00                     _SPI2_Open:
 14670                           	callstack 21
 14671   013D00                     
 14672                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 14673   013D00  BA63               	btfsc	99,5,c	;volatile
 14674   013D02  EF85  F09E         	goto	u2231
 14675   013D06  EF87  F09E         	goto	u2230
 14676   013D0A                     u2231:
 14677   013D0A  EFD9  F09E         	goto	l1120
 14678   013D0E                     u2230:
 14679   013D0E                     
 14680                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 14681                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14682   013D0E  0EFF               	movlw	-1
 14683   013D10  50E3               	movf	plusw1,w,c
 14684   013D12  0D04               	mullw	4
 14685   013D14  0E01               	movlw	1
 14686   013D16  26F3               	addwf	243,f,c
 14687   013D18  0E00               	movlw	0
 14688   013D1A  22F4               	addwfc	244,f,c
 14689   013D1C  0EE9               	movlw	low _spi2_configuration
 14690   013D1E  24F3               	addwf	243,w,c
 14691   013D20  6EF6               	movwf	tblptrl,c
 14692   013D22  0EFF               	movlw	high _spi2_configuration
 14693   013D24  20F4               	addwfc	244,w,c
 14694   013D26  6EF7               	movwf	tblptrh,c
 14695   013D28                     	if	1	;There are 3 active tblptr bytes
 14696   013D28  6AF8               	clrf	tblptru,c
 14697   013D2A  0E00               	movlw	low (__mediumconst shr (0+16))
 14698   013D2C  22F8               	addwfc	tblptru,f,c
 14699   013D2E                     	endif
 14700   013D2E  0008               	tblrd		*
 14701   013D30  CFF5 FF64          	movff	tablat,3940	;volatile
 14702                           
 14703                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 14704                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14705   013D34  0EFF               	movlw	-1
 14706   013D36  50E3               	movf	plusw1,w,c
 14707   013D38  0D04               	mullw	4
 14708   013D3A  0EE9               	movlw	low _spi2_configuration
 14709   013D3C  24F3               	addwf	243,w,c
 14710   013D3E  6EF6               	movwf	tblptrl,c
 14711   013D40  0EFF               	movlw	high _spi2_configuration
 14712   013D42  20F4               	addwfc	244,w,c
 14713   013D44  6EF7               	movwf	tblptrh,c
 14714   013D46                     	if	1	;There are 3 active tblptr bytes
 14715   013D46  6AF8               	clrf	tblptru,c
 14716   013D48  0E00               	movlw	low (__mediumconst shr (0+16))
 14717   013D4A  22F8               	addwfc	tblptru,f,c
 14718   013D4C                     	endif
 14719   013D4C  0008               	tblrd		*
 14720   013D4E  CFF5 FF63          	movff	tablat,3939	;volatile
 14721   013D52                     
 14722                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 14723   013D52  6A62               	clrf	98,c	;volatile
 14724                           
 14725                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 14726                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14727   013D54  0EFF               	movlw	-1
 14728   013D56  50E3               	movf	plusw1,w,c
 14729   013D58  0D04               	mullw	4
 14730   013D5A  0E02               	movlw	2
 14731   013D5C  26F3               	addwf	243,f,c
 14732   013D5E  0E00               	movlw	0
 14733   013D60  22F4               	addwfc	244,f,c
 14734   013D62  0EE9               	movlw	low _spi2_configuration
 14735   013D64  24F3               	addwf	243,w,c
 14736   013D66  6EF6               	movwf	tblptrl,c
 14737   013D68  0EFF               	movlw	high _spi2_configuration
 14738   013D6A  20F4               	addwfc	244,w,c
 14739   013D6C  6EF7               	movwf	tblptrh,c
 14740   013D6E                     	if	1	;There are 3 active tblptr bytes
 14741   013D6E  6AF8               	clrf	tblptru,c
 14742   013D70  0E00               	movlw	low (__mediumconst shr (0+16))
 14743   013D72  22F8               	addwfc	tblptru,f,c
 14744   013D74                     	endif
 14745   013D74  0008               	tblrd		*
 14746   013D76  CFF5 FF65          	movff	tablat,3941	;volatile
 14747   013D7A                     
 14748                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 14749                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14750   013D7A  0EFF               	movlw	-1
 14751   013D7C  50E3               	movf	plusw1,w,c
 14752   013D7E  0D04               	mullw	4
 14753   013D80  0E03               	movlw	3
 14754   013D82  26F3               	addwf	243,f,c
 14755   013D84  0E00               	movlw	0
 14756   013D86  22F4               	addwfc	244,f,c
 14757   013D88  0EE9               	movlw	low _spi2_configuration
 14758   013D8A  24F3               	addwf	243,w,c
 14759   013D8C  6EF6               	movwf	tblptrl,c
 14760   013D8E  0EFF               	movlw	high _spi2_configuration
 14761   013D90  20F4               	addwfc	244,w,c
 14762   013D92  6EF7               	movwf	tblptrh,c
 14763   013D94                     	if	1	;There are 3 active tblptr bytes
 14764   013D94  6AF8               	clrf	tblptru,c
 14765   013D96  0E00               	movlw	low (__mediumconst shr (0+16))
 14766   013D98  22F8               	addwfc	tblptru,f,c
 14767   013D9A                     	endif
 14768   013D9A  0008               	tblrd		*
 14769   013D9C  CFF5 F037          	movff	tablat,btemp+11
 14770   013DA0  3A37               	swapf	(btemp+11)^0,f,c
 14771   013DA2  4637               	rlncf	(btemp+11)^0,f,c
 14772   013DA4  4637               	rlncf	(btemp+11)^0,f,c
 14773   013DA6  5095               	movf	149,w,c	;volatile
 14774   013DA8  1837               	xorwf	(btemp+11)^0,w,c
 14775   013DAA  0BBF               	andlw	-65
 14776   013DAC  1837               	xorwf	(btemp+11)^0,w,c
 14777   013DAE  6E95               	movwf	149,c	;volatile
 14778   013DB0                     
 14779                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14780   013DB0  8A63               	bsf	99,5,c	;volatile
 14781   013DB2                     l1120:
 14782                           
 14783                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14784   013DB2  52E5               	movf	postdec1,f,c
 14785   013DB4  0012               	return		;funcret
 14786   013DB6                     __end_of_SPI2_Open:
 14787                           	callstack 0
 14788                           
 14789 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14790 ;; Defined at:
 14791 ;;		line 1172 in file "can/can.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;  channel         1  [STACK] enum E5287
 14794 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14795 ;;		 -> rxfConfig(3), 
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14798 ;;  a               2  [STACK] unsigned short 
 14799 ;;  spiTransferE    1    0        char 
 14800 ;; Return value:  Size  Location     Type
 14801 ;;                  1  [STACK] char 
 14802 ;; Registers used:
 14803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14804 ;; Tracked objects:
 14805 ;;		On entry : 0/0
 14806 ;;		On exit  : 0/0
 14807 ;;		Unchanged: 0/0
 14808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14813 ;;Total ram usage:        0 bytes
 14814 ;; Hardware stack levels used: 1
 14815 ;; Hardware stack levels required when called: 9
 14816 ;; This function calls:
 14817 ;;		_DRV_CANFDSPI_WriteWord
 14818 ;; This function is called by:
 14819 ;;		_CanInit
 14820 ;; This function uses a reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text58
 14824   012EB4                     __ptext58:
 14825                           	callstack 0
 14826   012EB4                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14827                           	callstack 0
 14828                           
 14829                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14830   012EB4  0E07               	movlw	7
 14831   012EB6  26E1               	addwf	fsr1l,f,c
 14832   012EB8  0E00               	movlw	0
 14833   012EBA  22E2               	addwfc	fsr1h,f,c
 14834   012EBC                     
 14835                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14836                           ;stkvar	_channel @ sp[(-7)+-1]
 14837   012EBC  0EF8               	movlw	-8
 14838   012EBE  50E3               	movf	plusw1,w,c
 14839   012EC0  A4D8               	btfss	status,2,c
 14840   012EC2  EF65  F097         	goto	u2511
 14841   012EC6  EF67  F097         	goto	u2510
 14842   012ECA                     u2511:
 14843   012ECA  EF69  F097         	goto	l4840
 14844   012ECE                     u2510:
 14845   012ECE  EFF6  F097         	goto	l346
 14846   012ED2                     l4840:
 14847                           
 14848                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 14849   012ED2  0EDD               	movlw	low _canFifoResetValues
 14850   012ED4  6EF6               	movwf	tblptrl,c
 14851   012ED6                     	if	1	;There is more than 1 active tblptr byte
 14852   012ED6  0EFF               	movlw	high _canFifoResetValues
 14853   012ED8  6EF7               	movwf	tblptrh,c
 14854   012EDA                     	endif
 14855   012EDA                     	if	1	;There are 3 active tblptr bytes
 14856   012EDA  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14857   012EDC  6EF8               	movwf	tblptru,c
 14858   012EDE                     	endif
 14859   012EDE  0009               	tblrd		*+
 14860   012EE0  CFF5 F034          	movff	tablat,btemp+8
 14861   012EE4  0009               	tblrd		*+
 14862   012EE6  CFF5 F035          	movff	tablat,btemp+9
 14863   012EEA  0009               	tblrd		*+
 14864   012EEC  CFF5 F036          	movff	tablat,btemp+10
 14865   012EF0  0009               	tblrd		*+
 14866   012EF2  CFF5 F037          	movff	tablat,btemp+11
 14867                           
 14868                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14869   012EF6  0EF9               	movlw	-7
 14870   012EF8  C034  FFE3         	movff	btemp+8,plusw1
 14871   012EFC  0EFA               	movlw	-6
 14872   012EFE  C035  FFE3         	movff	btemp+9,plusw1
 14873   012F02  0EFB               	movlw	-5
 14874   012F04  C036  FFE3         	movff	btemp+10,plusw1
 14875   012F08  0EFC               	movlw	-4
 14876   012F0A  C037  FFE3         	movff	btemp+11,plusw1
 14877   012F0E                     
 14878                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 14879                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14880   012F0E  50E1               	movf	fsr1l,w,c
 14881   012F10  0FF9               	addlw	-7
 14882   012F12  6ED9               	movwf	fsr2l,c
 14883   012F14  50E2               	movf	fsr1h,w,c
 14884   012F16  6EDA               	movwf	fsr2h,c
 14885   012F18  0EFF               	movlw	255
 14886   012F1A  22DA               	addwfc	fsr2h,f,c
 14887   012F1C  9EDF               	bcf	indf2,7,c
 14888   012F1E                     
 14889                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 14890                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14891   012F1E  0EFC               	movlw	252
 14892   012F20  24E1               	addwf	fsr1l,w,c
 14893   012F22  6ED9               	movwf	fsr2l,c
 14894   012F24  0EFF               	movlw	255
 14895   012F26  20E2               	addwfc	fsr1h,w,c
 14896   012F28  6EDA               	movwf	fsr2h,c
 14897                           
 14898                           ;stkvar	_config @ sp[(-7)+-3]
 14899   012F2A  0EF6               	movlw	-10
 14900   012F2C  CFE3 F036          	movff	plusw1,btemp+10
 14901   012F30  0EF7               	movlw	-9
 14902   012F32  CFE3 F037          	movff	plusw1,btemp+11
 14903   012F36  0E01               	movlw	1
 14904   012F38  2436               	addwf	(btemp+10)^0,w,c
 14905   012F3A  6EE9               	movwf	fsr0l,c
 14906   012F3C  0E00               	movlw	0
 14907   012F3E  2037               	addwfc	(btemp+11)^0,w,c
 14908   012F40  6EEA               	movwf	fsr0h,c
 14909   012F42  50EF               	movf	indf0,w,c
 14910   012F44  6E37               	movwf	(btemp+11)^0,c
 14911                           
 14912                           ;stkvar	_config @ sp[(-7)+-3]
 14913   012F46  0EF6               	movlw	-10
 14914   012F48  CFE3 F034          	movff	plusw1,btemp+8
 14915   012F4C  0EF7               	movlw	-9
 14916   012F4E  CFE3 F035          	movff	plusw1,btemp+9
 14917   012F52  0E02               	movlw	2
 14918   012F54  2434               	addwf	(btemp+8)^0,w,c
 14919   012F56  6EE9               	movwf	fsr0l,c
 14920   012F58  0E00               	movlw	0
 14921   012F5A  2035               	addwfc	(btemp+9)^0,w,c
 14922   012F5C  6EEA               	movwf	fsr0h,c
 14923   012F5E  50EF               	movf	indf0,w,c
 14924   012F60  6E36               	movwf	(btemp+10)^0,c
 14925   012F62  0E05               	movlw	5
 14926   012F64  6E2C               	movwf	btemp^0,c
 14927   012F66                     u2525:
 14928   012F66  90D8               	bcf	status,0,c
 14929   012F68  3636               	rlcf	(btemp+10)^0,f,c
 14930   012F6A  2E2C               	decfsz	btemp^0,f,c
 14931   012F6C  EFB3  F097         	goto	u2525
 14932   012F70  5036               	movf	(btemp+10)^0,w,c
 14933   012F72  1037               	iorwf	(btemp+11)^0,w,c
 14934   012F74  6EDF               	movwf	indf2,c
 14935   012F76                     
 14936                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 14937                           ;stkvar	_config @ sp[(-7)+-3]
 14938   012F76  0EF6               	movlw	-10
 14939   012F78  CFE3 FFD9          	movff	plusw1,fsr2l
 14940   012F7C  0EF7               	movlw	-9
 14941   012F7E  CFE3 FFDA          	movff	plusw1,fsr2h
 14942   012F82  50DF               	movf	indf2,w,c
 14943   012F84  6E37               	movwf	(btemp+11)^0,c
 14944                           
 14945                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14946   012F86  50E1               	movf	fsr1l,w,c
 14947   012F88  0FF9               	addlw	-7
 14948   012F8A  6ED9               	movwf	fsr2l,c
 14949   012F8C  50E2               	movf	fsr1h,w,c
 14950   012F8E  6EDA               	movwf	fsr2h,c
 14951   012F90  0EFF               	movlw	255
 14952   012F92  22DA               	addwfc	fsr2h,f,c
 14953   012F94  3A37               	swapf	(btemp+11)^0,f,c
 14954   012F96  4637               	rlncf	(btemp+11)^0,f,c
 14955   012F98  50DF               	movf	223,w,c
 14956   012F9A  1837               	xorwf	(btemp+11)^0,w,c
 14957   012F9C  0BDF               	andlw	-33
 14958   012F9E  1837               	xorwf	(btemp+11)^0,w,c
 14959   012FA0  6EDF               	movwf	223,c
 14960   012FA2                     
 14961                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 14962                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14963   012FA2  50E1               	movf	fsr1l,w,c
 14964   012FA4  0FF9               	addlw	-7
 14965   012FA6  6ED9               	movwf	fsr2l,c
 14966   012FA8  50E2               	movf	fsr1h,w,c
 14967   012FAA  6EDA               	movwf	fsr2h,c
 14968   012FAC  0EFF               	movlw	255
 14969   012FAE  22DA               	addwfc	fsr2h,f,c
 14970   012FB0  80DF               	bsf	indf2,0,c
 14971   012FB2                     
 14972                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 14973                           ;stkvar	_channel @ sp[(-7)+-1]
 14974   012FB2  0EF8               	movlw	-8
 14975   012FB4  50E3               	movf	plusw1,w,c
 14976   012FB6  0D0C               	mullw	12
 14977   012FB8  0E50               	movlw	80
 14978   012FBA  26F3               	addwf	243,f,c
 14979   012FBC  0E00               	movlw	0
 14980   012FBE  22F4               	addwfc	244,f,c
 14981                           
 14982                           ;stkvar	_a @ sp[(-7)+5]
 14983   012FC0  0EFE               	movlw	-2
 14984   012FC2  CFF3 FFE3          	movff	prodl,plusw1
 14985   012FC6  0EFF               	movlw	-1
 14986   012FC8  CFF4 FFE3          	movff	prodh,plusw1
 14987   012FCC                     
 14988                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14989   012FCC  0EF9               	movlw	-7
 14990   012FCE  CFE3 FFE6          	movff	plusw1,postinc1
 14991   012FD2  CFE3 FFE6          	movff	plusw1,postinc1
 14992   012FD6  CFE3 FFE6          	movff	plusw1,postinc1
 14993   012FDA  CFE3 FFE6          	movff	plusw1,postinc1
 14994                           
 14995                           ;stkvar	_a @ sp[(-11)+5]
 14996   012FDE  0EFA               	movlw	-6
 14997   012FE0  CFE3 FFE6          	movff	plusw1,postinc1
 14998   012FE4  CFE3 FFE6          	movff	plusw1,postinc1
 14999   012FE8  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 15000   012FEC                     l346:
 15001                           
 15002                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 15003   012FEC  0EF6               	movlw	246
 15004   012FEE  26E1               	addwf	fsr1l,f,c
 15005   012FF0  0EFF               	movlw	255
 15006   012FF2  22E2               	addwfc	fsr1h,f,c
 15007   012FF4  0012               	return		;funcret
 15008   012FF6                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 15009                           	callstack 0
 15010                           
 15011 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 15012 ;; Defined at:
 15013 ;;		line 499 in file "can/can.c"
 15014 ;; Parameters:    Size  Location     Type
 15015 ;;  opMode          1  [STACK] enum E5357
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;  d               1  [STACK] unsigned char 
 15018 ;;  spiTransferE    1  [STACK] char 
 15019 ;; Return value:  Size  Location     Type
 15020 ;;                  1  [STACK] char 
 15021 ;; Registers used:
 15022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 15023 ;; Tracked objects:
 15024 ;;		On entry : 0/0
 15025 ;;		On exit  : 0/0
 15026 ;;		Unchanged: 0/0
 15027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;Total ram usage:        0 bytes
 15033 ;; Hardware stack levels used: 1
 15034 ;; Hardware stack levels required when called: 9
 15035 ;; This function calls:
 15036 ;;		_DRV_CANFDSPI_ReadByte
 15037 ;;		_DRV_CANFDSPI_WriteByte
 15038 ;; This function is called by:
 15039 ;;		_CanInit
 15040 ;; This function uses a reentrant model
 15041 ;;
 15042                           
 15043                           	psect	text59
 15044   014364                     __ptext59:
 15045                           	callstack 0
 15046   014364                     _DRV_CANFDSPI_OperationModeSelect:
 15047                           	callstack 0
 15048                           
 15049                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15050   014364  52E6               	movf	postinc1,f,c
 15051   014366  52E6               	movf	postinc1,f,c
 15052   014368                     
 15053                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 15054                           ;stkvar	_d @ sp[(-2)+0]
 15055   014368  0EFE               	movlw	-2
 15056   01436A  6AE3               	clrf	plusw1,c
 15057   01436C                     
 15058                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 15059                           ;stkvar	_d @ sp[(-2)+0]
 15060   01436C  0EFE               	movlw	254
 15061   01436E  24E1               	addwf	fsr1l,w,c
 15062   014370  6E2C               	movwf	btemp^0,c
 15063   014372  0EFF               	movlw	255
 15064   014374  20E2               	addwfc	fsr1h,w,c
 15065   014376  6E2D               	movwf	(btemp+1)^0,c
 15066   014378  C02C  FFE6         	movff	btemp,postinc1
 15067   01437C  C02D  FFE6         	movff	btemp+1,postinc1
 15068   014380  0E03               	movlw	3
 15069   014382  6EE6               	movwf	postinc1,c
 15070   014384  0E00               	movlw	0
 15071   014386  6EE6               	movwf	postinc1,c
 15072   014388  ECC8  F0A2         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 15073                           
 15074                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15075   01438C  0EFF               	movlw	-1
 15076   01438E  C02C  FFE3         	movff	btemp,plusw1
 15077   014392                     
 15078                           ;can/can.c: 506:     if (spiTransferError) {
 15079                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15080   014392  0EFF               	movlw	-1
 15081   014394  50E3               	movf	plusw1,w,c
 15082   014396  B4D8               	btfsc	status,2,c
 15083   014398  EFD0  F0A1         	goto	u2541
 15084   01439C  EFD2  F0A1         	goto	u2540
 15085   0143A0                     u2541:
 15086   0143A0  EFD4  F0A1         	goto	l4908
 15087   0143A4                     u2540:
 15088   0143A4  EFF1  F0A1         	goto	l222
 15089   0143A8                     l4908:
 15090                           
 15091                           ;can/can.c: 511:     d &= ~0x07;
 15092                           ;stkvar	_d @ sp[(-2)+0]
 15093   0143A8  0EFE               	movlw	-2
 15094   0143AA  CFE3 F02C          	movff	plusw1,btemp
 15095   0143AE  0EF8               	movlw	248
 15096   0143B0  162C               	andwf	btemp^0,f,c
 15097   0143B2  0EFE               	movlw	-2
 15098   0143B4  C02C  FFE3         	movff	btemp,plusw1
 15099   0143B8                     
 15100                           ;can/can.c: 512:     d |= opMode;
 15101                           ;stkvar	_opMode @ sp[(-2)+-1]
 15102   0143B8  0EFD               	movlw	-3
 15103   0143BA  CFE3 F037          	movff	plusw1,btemp+11
 15104                           
 15105                           ;stkvar	_d @ sp[(-2)+0]
 15106   0143BE  50E1               	movf	fsr1l,w,c
 15107   0143C0  0FFE               	addlw	-2
 15108   0143C2  6ED9               	movwf	fsr2l,c
 15109   0143C4  50E2               	movf	fsr1h,w,c
 15110   0143C6  6EDA               	movwf	fsr2h,c
 15111   0143C8  0EFF               	movlw	255
 15112   0143CA  22DA               	addwfc	fsr2h,f,c
 15113   0143CC  5037               	movf	(btemp+11)^0,w,c
 15114   0143CE  12DF               	iorwf	indf2,f,c
 15115   0143D0                     
 15116                           ;stkvar	_d @ sp[(-2)+0]
 15117   0143D0  0EFE               	movlw	-2
 15118   0143D2  50E3               	movf	plusw1,w,c
 15119   0143D4  6EE6               	movwf	postinc1,c
 15120   0143D6  0E03               	movlw	3
 15121   0143D8  6EE6               	movwf	postinc1,c
 15122   0143DA  0E00               	movlw	0
 15123   0143DC  6EE6               	movwf	postinc1,c
 15124   0143DE  EC55  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15125   0143E2                     l222:
 15126                           
 15127                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15128   0143E2  52E5               	movf	postdec1,f,c
 15129   0143E4  52E5               	movf	postdec1,f,c
 15130   0143E6  52E5               	movf	postdec1,f,c
 15131   0143E8  0012               	return		;funcret
 15132   0143EA                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15133                           	callstack 0
 15134                           
 15135 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15136 ;; Defined at:
 15137 ;;		line 294 in file "can/can.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  address         2  [STACK] unsigned short 
 15140 ;;  txd             1  [STACK] unsigned char 
 15141 ;; Auto vars:     Size  Location     Type
 15142 ;;  spiTransferS    2    0        unsigned short 
 15143 ;;  spiTransferE    1  [STACK] char 
 15144 ;; Return value:  Size  Location     Type
 15145 ;;                  1  [STACK] char 
 15146 ;; Registers used:
 15147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15148 ;; Tracked objects:
 15149 ;;		On entry : 0/0
 15150 ;;		On exit  : 0/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;Total ram usage:        0 bytes
 15158 ;; Hardware stack levels used: 1
 15159 ;; Hardware stack levels required when called: 8
 15160 ;; This function calls:
 15161 ;;		_SpiTransfer
 15162 ;; This function is called by:
 15163 ;;		_DRV_CANFDSPI_OperationModeSelect
 15164 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15165 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15166 ;;		_DRV_CANFDSPI_FilterDisable
 15167 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15168 ;;		_DRV_CANFDSPI_TimeStampEnable
 15169 ;; This function uses a reentrant model
 15170 ;;
 15171                           
 15172                           	psect	text60
 15173   0146AA                     __ptext60:
 15174                           	callstack 0
 15175   0146AA                     _DRV_CANFDSPI_WriteByte:
 15176                           	callstack 0
 15177                           
 15178                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15179   0146AA  52E6               	movf	postinc1,f,c
 15180   0146AC                     
 15181                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15182                           ;stkvar	_address @ sp[(-1)+-2]
 15183   0146AC  0EFE               	movlw	254
 15184   0146AE  24E1               	addwf	fsr1l,w,c
 15185   0146B0  6ED9               	movwf	fsr2l,c
 15186   0146B2  0EFF               	movlw	255
 15187   0146B4  20E2               	addwfc	fsr1h,w,c
 15188   0146B6  6EDA               	movwf	fsr2h,c
 15189   0146B8  50DF               	movf	indf2,w,c
 15190   0146BA  0B0F               	andlw	15
 15191   0146BC  0F20               	addlw	32
 15192   0146BE  0101               	movlb	1	; () banked
 15193   0146C0  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15194   0146C2                     
 15195                           ; BSR set to: 1
 15196                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15197                           ;stkvar	_address @ sp[(-1)+-2]
 15198   0146C2  0EFD               	movlw	-3
 15199   0146C4  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15200   0146C8                     
 15201                           ; BSR set to: 1
 15202                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15203                           ;stkvar	_txd @ sp[(-1)+-3]
 15204   0146C8  0EFC               	movlw	-4
 15205   0146CA  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15206   0146CE                     
 15207                           ; BSR set to: 1
 15208                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15209   0146CE  0E03               	movlw	3
 15210   0146D0  6EE6               	movwf	postinc1,c
 15211   0146D2  0E00               	movlw	0
 15212   0146D4  6EE6               	movwf	postinc1,c
 15213   0146D6  0E00               	movlw	low _spiReceiveBuffer
 15214   0146D8  6EE6               	movwf	postinc1,c
 15215   0146DA  0E02               	movlw	high _spiReceiveBuffer
 15216   0146DC  6EE6               	movwf	postinc1,c
 15217   0146DE  0E00               	movlw	low _spiTransmitBuffer
 15218   0146E0  6EE6               	movwf	postinc1,c
 15219   0146E2  0E01               	movlw	high _spiTransmitBuffer
 15220   0146E4  6EE6               	movwf	postinc1,c
 15221   0146E6  ECC2  F09D         	call	_SpiTransfer	;wreg free
 15222                           
 15223                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15224   0146EA  0EFF               	movlw	-1
 15225   0146EC  C02C  FFE3         	movff	btemp,plusw1
 15226   0146F0                     
 15227                           ;can/can.c: 306:     return spiTransferError;
 15228                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15229   0146F0  0EFF               	movlw	-1
 15230   0146F2  CFE3 F02C          	movff	plusw1,btemp
 15231   0146F6                     
 15232                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15233   0146F6  52E5               	movf	postdec1,f,c
 15234   0146F8  52E5               	movf	postdec1,f,c
 15235   0146FA  52E5               	movf	postdec1,f,c
 15236   0146FC  52E5               	movf	postdec1,f,c
 15237   0146FE  0012               	return		;funcret
 15238   014700                     __end_of_DRV_CANFDSPI_WriteByte:
 15239                           	callstack 0
 15240                           
 15241 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15242 ;; Defined at:
 15243 ;;		line 276 in file "can/can.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;  address         2  [STACK] unsigned short 
 15246 ;;  rxd             2  [STACK] PTR unsigned char 
 15247 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15248 ;;		 -> d(1), d(1), d(1), crc(1), 
 15249 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15250 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15251 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15252 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15253 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15254 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15255 ;;		 -> d(1), d(1), 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  spiTransferS    2    0        unsigned short 
 15258 ;;  spiTransferE    1  [STACK] char 
 15259 ;; Return value:  Size  Location     Type
 15260 ;;                  1  [STACK] char 
 15261 ;; Registers used:
 15262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15263 ;; Tracked objects:
 15264 ;;		On entry : 0/0
 15265 ;;		On exit  : 0/0
 15266 ;;		Unchanged: 0/0
 15267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;Total ram usage:        0 bytes
 15273 ;; Hardware stack levels used: 1
 15274 ;; Hardware stack levels required when called: 8
 15275 ;; This function calls:
 15276 ;;		_SpiTransfer
 15277 ;; This function is called by:
 15278 ;;		_DRV_CANFDSPI_OperationModeSelect
 15279 ;;		_DRV_CANFDSPI_FilterDisable
 15280 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15281 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15282 ;;		_DRV_CANFDSPI_TimeStampEnable
 15283 ;; This function uses a reentrant model
 15284 ;;
 15285                           
 15286                           	psect	text61
 15287   014590                     __ptext61:
 15288                           	callstack 0
 15289   014590                     _DRV_CANFDSPI_ReadByte:
 15290                           	callstack 0
 15291                           
 15292                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15293   014590  52E6               	movf	postinc1,f,c
 15294   014592                     
 15295                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15296                           ;stkvar	_address @ sp[(-1)+-2]
 15297   014592  0EFE               	movlw	254
 15298   014594  24E1               	addwf	fsr1l,w,c
 15299   014596  6ED9               	movwf	fsr2l,c
 15300   014598  0EFF               	movlw	255
 15301   01459A  20E2               	addwfc	fsr1h,w,c
 15302   01459C  6EDA               	movwf	fsr2h,c
 15303   01459E  50DF               	movf	indf2,w,c
 15304   0145A0  0B0F               	andlw	15
 15305   0145A2  0F30               	addlw	48
 15306   0145A4  0101               	movlb	1	; () banked
 15307   0145A6  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15308   0145A8                     
 15309                           ; BSR set to: 1
 15310                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15311                           ;stkvar	_address @ sp[(-1)+-2]
 15312   0145A8  0EFD               	movlw	-3
 15313   0145AA  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15314   0145AE                     
 15315                           ; BSR set to: 1
 15316                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15317   0145AE  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15318   0145B0                     
 15319                           ; BSR set to: 1
 15320                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15321   0145B0  0E03               	movlw	3
 15322   0145B2  6EE6               	movwf	postinc1,c
 15323   0145B4  0E00               	movlw	0
 15324   0145B6  6EE6               	movwf	postinc1,c
 15325   0145B8  0E00               	movlw	low _spiReceiveBuffer
 15326   0145BA  6EE6               	movwf	postinc1,c
 15327   0145BC  0E02               	movlw	high _spiReceiveBuffer
 15328   0145BE  6EE6               	movwf	postinc1,c
 15329   0145C0  0E00               	movlw	low _spiTransmitBuffer
 15330   0145C2  6EE6               	movwf	postinc1,c
 15331   0145C4  0E01               	movlw	high _spiTransmitBuffer
 15332   0145C6  6EE6               	movwf	postinc1,c
 15333   0145C8  ECC2  F09D         	call	_SpiTransfer	;wreg free
 15334                           
 15335                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15336   0145CC  0EFF               	movlw	-1
 15337   0145CE  C02C  FFE3         	movff	btemp,plusw1
 15338   0145D2                     
 15339                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15340                           ;stkvar	_rxd @ sp[(-1)+-4]
 15341   0145D2  0EFB               	movlw	-5
 15342   0145D4  CFE3 FFD9          	movff	plusw1,fsr2l
 15343   0145D8  0EFC               	movlw	-4
 15344   0145DA  CFE3 FFDA          	movff	plusw1,fsr2h
 15345   0145DE  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15346   0145E2                     
 15347                           ;can/can.c: 291:     return spiTransferError;
 15348                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15349   0145E2  0EFF               	movlw	-1
 15350   0145E4  CFE3 F02C          	movff	plusw1,btemp
 15351   0145E8                     
 15352                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15353   0145E8  0EFB               	movlw	251
 15354   0145EA  26E1               	addwf	fsr1l,f,c
 15355   0145EC  0EFF               	movlw	255
 15356   0145EE  22E2               	addwfc	fsr1h,f,c
 15357   0145F0  0012               	return		;funcret
 15358   0145F2                     __end_of_DRV_CANFDSPI_ReadByte:
 15359                           	callstack 0
 15360                           
 15361 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15362 ;; Defined at:
 15363 ;;		line 1591 in file "can/can.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;  index           1  [STACK] unsigned char 
 15366 ;;  flags           2  [STACK] enum E5563
 15367 ;; Auto vars:     Size  Location     Type
 15368 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15369 ;;  a               2    0        unsigned short 
 15370 ;;  spiTransferE    1    0        char 
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1  [STACK] char 
 15373 ;; Registers used:
 15374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;Total ram usage:        0 bytes
 15385 ;; Hardware stack levels used: 1
 15386 ;; Hardware stack levels required when called: 9
 15387 ;; This function calls:
 15388 ;;		_DRV_CANFDSPI_WriteHalfWord
 15389 ;; This function is called by:
 15390 ;;		_CanInit
 15391 ;; This function uses a reentrant model
 15392 ;;
 15393                           
 15394                           	psect	text62
 15395   01452C                     __ptext62:
 15396                           	callstack 0
 15397   01452C                     _DRV_CANFDSPI_ModuleEventEnable:
 15398                           	callstack 0
 15399                           
 15400                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15401   01452C  52E6               	movf	postinc1,f,c
 15402   01452E  52E6               	movf	postinc1,f,c
 15403   014530                     
 15404                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15405                           ;stkvar	_intEnables @ sp[(-2)+0]
 15406   014530  0EFE               	movlw	-2
 15407   014532  6AE3               	clrf	plusw1,c
 15408   014534  0EFF               	movlw	-1
 15409   014536  6AE3               	clrf	plusw1,c
 15410   014538                     
 15411                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15412                           ;stkvar	_flags @ sp[(-2)+-3]
 15413   014538  0EFB               	movlw	-5
 15414   01453A  CFE3 F036          	movff	plusw1,btemp+10
 15415   01453E  0EFC               	movlw	-4
 15416   014540  CFE3 F037          	movff	plusw1,btemp+11
 15417   014544  0E1F               	movlw	31
 15418   014546  1436               	andwf	(btemp+10)^0,w,c
 15419   014548  6E34               	movwf	(btemp+8)^0,c
 15420   01454A  0EFF               	movlw	255
 15421   01454C  1437               	andwf	(btemp+11)^0,w,c
 15422   01454E  6E35               	movwf	(btemp+9)^0,c
 15423                           
 15424                           ;stkvar	_intEnables @ sp[(-2)+0]
 15425   014550  0EFE               	movlw	-2
 15426   014552  CFE3 F02C          	movff	plusw1,btemp
 15427   014556  5034               	movf	(btemp+8)^0,w,c
 15428   014558  122C               	iorwf	btemp^0,f,c
 15429   01455A  0EFE               	movlw	-2
 15430   01455C  C02C  FFE3         	movff	btemp,plusw1
 15431   014560  0EFF               	movlw	-1
 15432   014562  CFE3 F02C          	movff	plusw1,btemp
 15433   014566  5035               	movf	(btemp+9)^0,w,c
 15434   014568  122C               	iorwf	btemp^0,f,c
 15435   01456A  0EFF               	movlw	-1
 15436   01456C  C02C  FFE3         	movff	btemp,plusw1
 15437   014570                     
 15438                           ;stkvar	_intEnables @ sp[(-2)+0]
 15439   014570  0EFE               	movlw	-2
 15440   014572  CFE3 FFE6          	movff	plusw1,postinc1
 15441   014576  CFE3 FFE6          	movff	plusw1,postinc1
 15442   01457A  0E1E               	movlw	30
 15443   01457C  6EE6               	movwf	postinc1,c
 15444   01457E  0E00               	movlw	0
 15445   014580  6EE6               	movwf	postinc1,c
 15446   014582  EC5D  F09D         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15447   014586                     
 15448                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15449   014586  0EFB               	movlw	251
 15450   014588  26E1               	addwf	fsr1l,f,c
 15451   01458A  0EFF               	movlw	255
 15452   01458C  22E2               	addwfc	fsr1h,f,c
 15453   01458E  0012               	return		;funcret
 15454   014590                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15455                           	callstack 0
 15456                           
 15457 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15458 ;; Defined at:
 15459 ;;		line 332 in file "can/can.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;  address         2  [STACK] unsigned short 
 15462 ;;  txd             2  [STACK] unsigned short 
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;  spiTransferS    2  [STACK] unsigned short 
 15465 ;;  i               1  [STACK] unsigned char 
 15466 ;;  spiTransferE    1  [STACK] char 
 15467 ;; Return value:  Size  Location     Type
 15468 ;;                  1  [STACK] char 
 15469 ;; Registers used:
 15470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15471 ;; Tracked objects:
 15472 ;;		On entry : 0/0
 15473 ;;		On exit  : 0/0
 15474 ;;		Unchanged: 0/0
 15475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15480 ;;Total ram usage:        0 bytes
 15481 ;; Hardware stack levels used: 1
 15482 ;; Hardware stack levels required when called: 8
 15483 ;; This function calls:
 15484 ;;		_SpiTransfer
 15485 ;; This function is called by:
 15486 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15487 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15488 ;; This function uses a reentrant model
 15489 ;;
 15490                           
 15491                           	psect	text63
 15492   013ABA                     __ptext63:
 15493                           	callstack 0
 15494   013ABA                     _DRV_CANFDSPI_WriteHalfWord:
 15495                           	callstack 0
 15496                           
 15497                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15498   013ABA  52E6               	movf	postinc1,f,c
 15499   013ABC  52E6               	movf	postinc1,f,c
 15500   013ABE  52E6               	movf	postinc1,f,c
 15501   013AC0  52E6               	movf	postinc1,f,c
 15502   013AC2                     
 15503                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15504   013AC2  0E04               	movlw	4
 15505   013AC4  6E36               	movwf	(btemp+10)^0,c
 15506   013AC6  0E00               	movlw	0
 15507   013AC8  6E37               	movwf	(btemp+11)^0,c
 15508                           
 15509                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15510   013ACA  0EFC               	movlw	-4
 15511   013ACC  C036  FFE3         	movff	btemp+10,plusw1
 15512   013AD0  0EFD               	movlw	-3
 15513   013AD2  C037  FFE3         	movff	btemp+11,plusw1
 15514   013AD6                     
 15515                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15516                           ;stkvar	_address @ sp[(-4)+-2]
 15517   013AD6  0EFB               	movlw	251
 15518   013AD8  24E1               	addwf	fsr1l,w,c
 15519   013ADA  6ED9               	movwf	fsr2l,c
 15520   013ADC  0EFF               	movlw	255
 15521   013ADE  20E2               	addwfc	fsr1h,w,c
 15522   013AE0  6EDA               	movwf	fsr2h,c
 15523   013AE2  50DF               	movf	indf2,w,c
 15524   013AE4  0B0F               	andlw	15
 15525   013AE6  0F20               	addlw	32
 15526   013AE8  0101               	movlb	1	; () banked
 15527   013AEA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15528   013AEC                     
 15529                           ; BSR set to: 1
 15530                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15531                           ;stkvar	_address @ sp[(-4)+-2]
 15532   013AEC  0EFA               	movlw	-6
 15533   013AEE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15534   013AF2                     
 15535                           ; BSR set to: 1
 15536                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15537                           ;stkvar	_i @ sp[(-4)+2]
 15538   013AF2  0EFE               	movlw	-2
 15539   013AF4  6AE3               	clrf	plusw1,c
 15540   013AF6                     l4608:
 15541                           
 15542                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15543                           ;stkvar	_i @ sp[(-4)+2]
 15544   013AF6  0EFE               	movlw	-2
 15545   013AF8  50E3               	movf	plusw1,w,c
 15546   013AFA  6E36               	movwf	(btemp+10)^0,c
 15547   013AFC  6A37               	clrf	(btemp+11)^0,c
 15548   013AFE  0E02               	movlw	low (_spiTransmitBuffer+2)
 15549   013B00  2436               	addwf	(btemp+10)^0,w,c
 15550   013B02  6ED9               	movwf	fsr2l,c
 15551   013B04  0E01               	movlw	high (_spiTransmitBuffer+2)
 15552   013B06  2037               	addwfc	(btemp+11)^0,w,c
 15553   013B08  6EDA               	movwf	fsr2h,c
 15554                           
 15555                           ;stkvar	_i @ sp[(-4)+2]
 15556   013B0A  0EFE               	movlw	-2
 15557   013B0C  50E3               	movf	plusw1,w,c
 15558   013B0E  0D08               	mullw	8
 15559   013B10  CFF3 F037          	movff	prodl,btemp+11
 15560                           
 15561                           ;stkvar	_txd @ sp[(-4)+-4]
 15562   013B14  0EF8               	movlw	-8
 15563   013B16  CFE3 F034          	movff	plusw1,btemp+8
 15564   013B1A  0EF9               	movlw	-7
 15565   013B1C  CFE3 F035          	movff	plusw1,btemp+9
 15566   013B20  2A37               	incf	(btemp+11)^0,f,c
 15567   013B22  EF96  F09D         	goto	u2264
 15568   013B26                     u2265:
 15569   013B26  90D8               	bcf	status,0,c
 15570   013B28  3235               	rrcf	(btemp+9)^0,f,c
 15571   013B2A  3234               	rrcf	(btemp+8)^0,f,c
 15572   013B2C                     u2264:
 15573   013B2C  2E37               	decfsz	(btemp+11)^0,f,c
 15574   013B2E  EF93  F09D         	goto	u2265
 15575   013B32  5034               	movf	(btemp+8)^0,w,c
 15576   013B34  6EDF               	movwf	indf2,c
 15577   013B36                     
 15578                           ;can/can.c: 346:     }
 15579                           ;stkvar	_i @ sp[(-4)+2]
 15580   013B36  0EFE               	movlw	-2
 15581   013B38  2AE3               	incf	plusw1,f,c
 15582   013B3A                     
 15583                           ;stkvar	_i @ sp[(-4)+2]
 15584   013B3A  0EFE               	movlw	-2
 15585   013B3C  CFE3 F02C          	movff	plusw1,btemp
 15586   013B40  0E01               	movlw	1
 15587   013B42  642C               	cpfsgt	btemp^0,c
 15588   013B44  EFA6  F09D         	goto	u2271
 15589   013B48  EFA8  F09D         	goto	u2270
 15590   013B4C                     u2271:
 15591   013B4C  EF7B  F09D         	goto	l4608
 15592   013B50                     u2270:
 15593   013B50                     
 15594                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 15595                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15596   013B50  0EFC               	movlw	-4
 15597   013B52  CFE3 FFE6          	movff	plusw1,postinc1
 15598   013B56  CFE3 FFE6          	movff	plusw1,postinc1
 15599   013B5A  0E00               	movlw	low _spiReceiveBuffer
 15600   013B5C  6EE6               	movwf	postinc1,c
 15601   013B5E  0E02               	movlw	high _spiReceiveBuffer
 15602   013B60  6EE6               	movwf	postinc1,c
 15603   013B62  0E00               	movlw	low _spiTransmitBuffer
 15604   013B64  6EE6               	movwf	postinc1,c
 15605   013B66  0E01               	movlw	high _spiTransmitBuffer
 15606   013B68  6EE6               	movwf	postinc1,c
 15607   013B6A  ECC2  F09D         	call	_SpiTransfer	;wreg free
 15608                           
 15609                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15610   013B6E  0EFF               	movlw	-1
 15611   013B70  C02C  FFE3         	movff	btemp,plusw1
 15612   013B74                     
 15613                           ;can/can.c: 350:     return spiTransferError;
 15614                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15615   013B74  0EFF               	movlw	-1
 15616   013B76  CFE3 F02C          	movff	plusw1,btemp
 15617   013B7A                     
 15618                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 15619   013B7A  0EF8               	movlw	248
 15620   013B7C  26E1               	addwf	fsr1l,f,c
 15621   013B7E  0EFF               	movlw	255
 15622   013B80  22E2               	addwfc	fsr1h,f,c
 15623   013B82  0012               	return		;funcret
 15624   013B84                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 15625                           	callstack 0
 15626                           
 15627 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 15628 ;; Defined at:
 15629 ;;		line 474 in file "can/can.c"
 15630 ;; Parameters:    Size  Location     Type
 15631 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15632 ;;		 -> config(3), 
 15633 ;; Auto vars:     Size  Location     Type
 15634 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15635 ;; Return value:  Size  Location     Type
 15636 ;;                  1  [STACK] char 
 15637 ;; Registers used:
 15638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 15639 ;; Tracked objects:
 15640 ;;		On entry : 0/0
 15641 ;;		On exit  : 0/0
 15642 ;;		Unchanged: 0/0
 15643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15648 ;;Total ram usage:        0 bytes
 15649 ;; Hardware stack levels used: 1
 15650 ;; Hardware stack levels required when called: 7
 15651 ;; This function calls:
 15652 ;;		Nothing
 15653 ;; This function is called by:
 15654 ;;		_CanInit
 15655 ;; This function uses a reentrant model
 15656 ;;
 15657                           
 15658                           	psect	text64
 15659   0119BA                     __ptext64:
 15660                           	callstack 0
 15661   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 15662                           	callstack 0
 15663                           
 15664                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15665   0119BA  52E6               	movf	postinc1,f,c
 15666   0119BC  52E6               	movf	postinc1,f,c
 15667   0119BE  52E6               	movf	postinc1,f,c
 15668   0119C0  52E6               	movf	postinc1,f,c
 15669   0119C2                     
 15670                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 15671   0119C2  0E8D               	movlw	low _canControlResetValues
 15672   0119C4  6EF6               	movwf	tblptrl,c
 15673   0119C6                     	if	1	;There is more than 1 active tblptr byte
 15674   0119C6  0EFF               	movlw	high _canControlResetValues
 15675   0119C8  6EF7               	movwf	tblptrh,c
 15676   0119CA                     	endif
 15677   0119CA                     	if	1	;There are 3 active tblptr bytes
 15678   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15679   0119CC  6EF8               	movwf	tblptru,c
 15680   0119CE                     	endif
 15681   0119CE  0009               	tblrd		*+
 15682   0119D0  CFF5 F034          	movff	tablat,btemp+8
 15683   0119D4  0009               	tblrd		*+
 15684   0119D6  CFF5 F035          	movff	tablat,btemp+9
 15685   0119DA  0009               	tblrd		*+
 15686   0119DC  CFF5 F036          	movff	tablat,btemp+10
 15687   0119E0  0009               	tblrd		*+
 15688   0119E2  CFF5 F037          	movff	tablat,btemp+11
 15689                           
 15690                           ;stkvar	_ciCon @ sp[(-4)+0]
 15691   0119E6  0EFC               	movlw	-4
 15692   0119E8  C034  FFE3         	movff	btemp+8,plusw1
 15693   0119EC  0EFD               	movlw	-3
 15694   0119EE  C035  FFE3         	movff	btemp+9,plusw1
 15695   0119F2  0EFE               	movlw	-2
 15696   0119F4  C036  FFE3         	movff	btemp+10,plusw1
 15697   0119F8  0EFF               	movlw	-1
 15698   0119FA  C037  FFE3         	movff	btemp+11,plusw1
 15699   0119FE                     
 15700                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 15701                           ;stkvar	_ciCon @ sp[(-4)+0]
 15702   0119FE  50E1               	movf	fsr1l,w,c
 15703   011A00  0FFC               	addlw	-4
 15704   011A02  6ED9               	movwf	fsr2l,c
 15705   011A04  50E2               	movf	fsr1h,w,c
 15706   011A06  6EDA               	movwf	fsr2h,c
 15707   011A08  0EFF               	movlw	255
 15708   011A0A  22DA               	addwfc	fsr2h,f,c
 15709   011A0C  50DF               	movf	223,w,c
 15710   011A0E  0B1F               	andlw	31
 15711   011A10  6E37               	movwf	(btemp+11)^0,c
 15712                           
 15713                           ;stkvar	_config @ sp[(-4)+-2]
 15714   011A12  0EFA               	movlw	-6
 15715   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 15716   011A18  0EFB               	movlw	-5
 15717   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 15718   011A1E  50DF               	movf	223,w,c
 15719   011A20  1837               	xorwf	(btemp+11)^0,w,c
 15720   011A22  0BE0               	andlw	-32
 15721   011A24  1837               	xorwf	(btemp+11)^0,w,c
 15722   011A26  6EDF               	movwf	223,c
 15723   011A28                     
 15724                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 15725                           ;stkvar	_ciCon @ sp[(-4)+0]
 15726   011A28  50E1               	movf	fsr1l,w,c
 15727   011A2A  0FFC               	addlw	-4
 15728   011A2C  6ED9               	movwf	fsr2l,c
 15729   011A2E  50E2               	movf	fsr1h,w,c
 15730   011A30  6EDA               	movwf	fsr2h,c
 15731   011A32  0EFF               	movlw	255
 15732   011A34  22DA               	addwfc	fsr2h,f,c
 15733                           
 15734                           ;stkvar	_config @ sp[(-4)+-2]
 15735   011A36  0EFA               	movlw	-6
 15736   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 15737   011A3C  0EFB               	movlw	-5
 15738   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 15739   011A42  9AEF               	bcf	indf0,5,c
 15740   011A44  AADF               	btfss	indf2,5,c
 15741   011A46  EF26  F08D         	goto	u815
 15742   011A4A  8AEF               	bsf	indf0,5,c
 15743   011A4C                     u815:
 15744   011A4C                     
 15745                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 15746                           ;stkvar	_ciCon @ sp[(-4)+0]
 15747   011A4C  50E1               	movf	fsr1l,w,c
 15748   011A4E  0FFC               	addlw	-4
 15749   011A50  6ED9               	movwf	fsr2l,c
 15750   011A52  50E2               	movf	fsr1h,w,c
 15751   011A54  6EDA               	movwf	fsr2h,c
 15752   011A56  0EFF               	movlw	255
 15753   011A58  22DA               	addwfc	fsr2h,f,c
 15754                           
 15755                           ;stkvar	_config @ sp[(-4)+-2]
 15756   011A5A  0EFA               	movlw	-6
 15757   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 15758   011A60  0EFB               	movlw	-5
 15759   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 15760   011A66  9CEF               	bcf	indf0,6,c
 15761   011A68  ACDF               	btfss	indf2,6,c
 15762   011A6A  EF38  F08D         	goto	u825
 15763   011A6E  8CEF               	bsf	indf0,6,c
 15764   011A70                     u825:
 15765   011A70                     
 15766                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15767                           ;stkvar	_ciCon @ sp[(-4)+0]
 15768   011A70  0EFD               	movlw	253
 15769   011A72  24E1               	addwf	fsr1l,w,c
 15770   011A74  6ED9               	movwf	fsr2l,c
 15771   011A76  0EFF               	movlw	255
 15772   011A78  20E2               	addwfc	fsr1h,w,c
 15773   011A7A  6EDA               	movwf	fsr2h,c
 15774                           
 15775                           ;stkvar	_config @ sp[(-4)+-2]
 15776   011A7C  0EFA               	movlw	-6
 15777   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15778   011A82  0EFB               	movlw	-5
 15779   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15780   011A88  9EEF               	bcf	indf0,7,c
 15781   011A8A  A0DF               	btfss	indf2,0,c
 15782   011A8C  EF49  F08D         	goto	u835
 15783   011A90  8EEF               	bsf	indf0,7,c
 15784   011A92                     u835:
 15785   011A92                     
 15786                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15787                           ;stkvar	_ciCon @ sp[(-4)+0]
 15788   011A92  0EFD               	movlw	253
 15789   011A94  24E1               	addwf	fsr1l,w,c
 15790   011A96  6ED9               	movwf	fsr2l,c
 15791   011A98  0EFF               	movlw	255
 15792   011A9A  20E2               	addwfc	fsr1h,w,c
 15793   011A9C  6EDA               	movwf	fsr2h,c
 15794   011A9E  30DF               	rrcf	223,w,c
 15795   011AA0  0B03               	andlw	3
 15796   011AA2  6E37               	movwf	(btemp+11)^0,c
 15797                           
 15798                           ;stkvar	_config @ sp[(-4)+-2]
 15799   011AA4  0EFA               	movlw	-6
 15800   011AA6  CFE3 F034          	movff	plusw1,btemp+8
 15801   011AAA  0EFB               	movlw	-5
 15802   011AAC  CFE3 F035          	movff	plusw1,btemp+9
 15803   011AB0  0E01               	movlw	1
 15804   011AB2  2434               	addwf	(btemp+8)^0,w,c
 15805   011AB4  6ED9               	movwf	fsr2l,c
 15806   011AB6  0E00               	movlw	0
 15807   011AB8  2035               	addwfc	(btemp+9)^0,w,c
 15808   011ABA  6EDA               	movwf	fsr2h,c
 15809   011ABC  50DF               	movf	223,w,c
 15810   011ABE  1837               	xorwf	(btemp+11)^0,w,c
 15811   011AC0  0BFC               	andlw	-4
 15812   011AC2  1837               	xorwf	(btemp+11)^0,w,c
 15813   011AC4  6EDF               	movwf	223,c
 15814   011AC6                     
 15815                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15816                           ;stkvar	_ciCon @ sp[(-4)+0]
 15817   011AC6  0EFD               	movlw	253
 15818   011AC8  24E1               	addwf	fsr1l,w,c
 15819   011ACA  6ED9               	movwf	fsr2l,c
 15820   011ACC  0EFF               	movlw	255
 15821   011ACE  20E2               	addwfc	fsr1h,w,c
 15822   011AD0  6EDA               	movwf	fsr2h,c
 15823                           
 15824                           ;stkvar	_config @ sp[(-4)+-2]
 15825   011AD2  0EFA               	movlw	-6
 15826   011AD4  CFE3 F036          	movff	plusw1,btemp+10
 15827   011AD8  0EFB               	movlw	-5
 15828   011ADA  CFE3 F037          	movff	plusw1,btemp+11
 15829   011ADE  0E01               	movlw	1
 15830   011AE0  2436               	addwf	(btemp+10)^0,w,c
 15831   011AE2  6EE9               	movwf	fsr0l,c
 15832   011AE4  0E00               	movlw	0
 15833   011AE6  2037               	addwfc	(btemp+11)^0,w,c
 15834   011AE8  6EEA               	movwf	fsr0h,c
 15835   011AEA  94EF               	bcf	indf0,2,c
 15836   011AEC  A8DF               	btfss	indf2,4,c
 15837   011AEE  EF7A  F08D         	goto	u845
 15838   011AF2  84EF               	bsf	indf0,2,c
 15839   011AF4                     u845:
 15840   011AF4                     
 15841                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15842                           ;stkvar	_ciCon @ sp[(-4)+0]
 15843   011AF4  0EFE               	movlw	254
 15844   011AF6  24E1               	addwf	fsr1l,w,c
 15845   011AF8  6ED9               	movwf	fsr2l,c
 15846   011AFA  0EFF               	movlw	255
 15847   011AFC  20E2               	addwfc	fsr1h,w,c
 15848   011AFE  6EDA               	movwf	fsr2h,c
 15849                           
 15850                           ;stkvar	_config @ sp[(-4)+-2]
 15851   011B00  0EFA               	movlw	-6
 15852   011B02  CFE3 F036          	movff	plusw1,btemp+10
 15853   011B06  0EFB               	movlw	-5
 15854   011B08  CFE3 F037          	movff	plusw1,btemp+11
 15855   011B0C  0E01               	movlw	1
 15856   011B0E  2436               	addwf	(btemp+10)^0,w,c
 15857   011B10  6EE9               	movwf	fsr0l,c
 15858   011B12  0E00               	movlw	0
 15859   011B14  2037               	addwfc	(btemp+11)^0,w,c
 15860   011B16  6EEA               	movwf	fsr0h,c
 15861   011B18  96EF               	bcf	indf0,3,c
 15862   011B1A  A0DF               	btfss	indf2,0,c
 15863   011B1C  EF91  F08D         	goto	u855
 15864   011B20  86EF               	bsf	indf0,3,c
 15865   011B22                     u855:
 15866   011B22                     
 15867                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 15868                           ;stkvar	_ciCon @ sp[(-4)+0]
 15869   011B22  0EFE               	movlw	254
 15870   011B24  24E1               	addwf	fsr1l,w,c
 15871   011B26  6ED9               	movwf	fsr2l,c
 15872   011B28  0EFF               	movlw	255
 15873   011B2A  20E2               	addwfc	fsr1h,w,c
 15874   011B2C  6EDA               	movwf	fsr2h,c
 15875                           
 15876                           ;stkvar	_config @ sp[(-4)+-2]
 15877   011B2E  0EFA               	movlw	-6
 15878   011B30  CFE3 F036          	movff	plusw1,btemp+10
 15879   011B34  0EFB               	movlw	-5
 15880   011B36  CFE3 F037          	movff	plusw1,btemp+11
 15881   011B3A  0E01               	movlw	1
 15882   011B3C  2436               	addwf	(btemp+10)^0,w,c
 15883   011B3E  6EE9               	movwf	fsr0l,c
 15884   011B40  0E00               	movlw	0
 15885   011B42  2037               	addwfc	(btemp+11)^0,w,c
 15886   011B44  6EEA               	movwf	fsr0h,c
 15887   011B46  98EF               	bcf	indf0,4,c
 15888   011B48  A2DF               	btfss	indf2,1,c
 15889   011B4A  EFA8  F08D         	goto	u865
 15890   011B4E  88EF               	bsf	indf0,4,c
 15891   011B50                     u865:
 15892   011B50                     
 15893                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 15894                           ;stkvar	_ciCon @ sp[(-4)+0]
 15895   011B50  0EFE               	movlw	254
 15896   011B52  24E1               	addwf	fsr1l,w,c
 15897   011B54  6ED9               	movwf	fsr2l,c
 15898   011B56  0EFF               	movlw	255
 15899   011B58  20E2               	addwfc	fsr1h,w,c
 15900   011B5A  6EDA               	movwf	fsr2h,c
 15901                           
 15902                           ;stkvar	_config @ sp[(-4)+-2]
 15903   011B5C  0EFA               	movlw	-6
 15904   011B5E  CFE3 F036          	movff	plusw1,btemp+10
 15905   011B62  0EFB               	movlw	-5
 15906   011B64  CFE3 F037          	movff	plusw1,btemp+11
 15907   011B68  0E01               	movlw	1
 15908   011B6A  2436               	addwf	(btemp+10)^0,w,c
 15909   011B6C  6EE9               	movwf	fsr0l,c
 15910   011B6E  0E00               	movlw	0
 15911   011B70  2037               	addwfc	(btemp+11)^0,w,c
 15912   011B72  6EEA               	movwf	fsr0h,c
 15913   011B74  9AEF               	bcf	indf0,5,c
 15914   011B76  A4DF               	btfss	indf2,2,c
 15915   011B78  EFBF  F08D         	goto	u875
 15916   011B7C  8AEF               	bsf	indf0,5,c
 15917   011B7E                     u875:
 15918   011B7E                     
 15919                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 15920                           ;stkvar	_ciCon @ sp[(-4)+0]
 15921   011B7E  0EFE               	movlw	254
 15922   011B80  24E1               	addwf	fsr1l,w,c
 15923   011B82  6ED9               	movwf	fsr2l,c
 15924   011B84  0EFF               	movlw	255
 15925   011B86  20E2               	addwfc	fsr1h,w,c
 15926   011B88  6EDA               	movwf	fsr2h,c
 15927                           
 15928                           ;stkvar	_config @ sp[(-4)+-2]
 15929   011B8A  0EFA               	movlw	-6
 15930   011B8C  CFE3 F036          	movff	plusw1,btemp+10
 15931   011B90  0EFB               	movlw	-5
 15932   011B92  CFE3 F037          	movff	plusw1,btemp+11
 15933   011B96  0E01               	movlw	1
 15934   011B98  2436               	addwf	(btemp+10)^0,w,c
 15935   011B9A  6EE9               	movwf	fsr0l,c
 15936   011B9C  0E00               	movlw	0
 15937   011B9E  2037               	addwfc	(btemp+11)^0,w,c
 15938   011BA0  6EEA               	movwf	fsr0h,c
 15939   011BA2  9CEF               	bcf	indf0,6,c
 15940   011BA4  A6DF               	btfss	indf2,3,c
 15941   011BA6  EFD6  F08D         	goto	u885
 15942   011BAA  8CEF               	bsf	indf0,6,c
 15943   011BAC                     u885:
 15944   011BAC                     
 15945                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 15946                           ;stkvar	_ciCon @ sp[(-4)+0]
 15947   011BAC  0EFE               	movlw	254
 15948   011BAE  24E1               	addwf	fsr1l,w,c
 15949   011BB0  6ED9               	movwf	fsr2l,c
 15950   011BB2  0EFF               	movlw	255
 15951   011BB4  20E2               	addwfc	fsr1h,w,c
 15952   011BB6  6EDA               	movwf	fsr2h,c
 15953                           
 15954                           ;stkvar	_config @ sp[(-4)+-2]
 15955   011BB8  0EFA               	movlw	-6
 15956   011BBA  CFE3 F036          	movff	plusw1,btemp+10
 15957   011BBE  0EFB               	movlw	-5
 15958   011BC0  CFE3 F037          	movff	plusw1,btemp+11
 15959   011BC4  0E01               	movlw	1
 15960   011BC6  2436               	addwf	(btemp+10)^0,w,c
 15961   011BC8  6EE9               	movwf	fsr0l,c
 15962   011BCA  0E00               	movlw	0
 15963   011BCC  2037               	addwfc	(btemp+11)^0,w,c
 15964   011BCE  6EEA               	movwf	fsr0h,c
 15965   011BD0  9EEF               	bcf	indf0,7,c
 15966   011BD2  A8DF               	btfss	indf2,4,c
 15967   011BD4  EFED  F08D         	goto	u895
 15968   011BD8  8EEF               	bsf	indf0,7,c
 15969   011BDA                     u895:
 15970   011BDA                     
 15971                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 15972                           ;stkvar	_ciCon @ sp[(-4)+0]
 15973   011BDA  0EFF               	movlw	255
 15974   011BDC  24E1               	addwf	fsr1l,w,c
 15975   011BDE  6ED9               	movwf	fsr2l,c
 15976   011BE0  0EFF               	movlw	255
 15977   011BE2  20E2               	addwfc	fsr1h,w,c
 15978   011BE4  6EDA               	movwf	fsr2h,c
 15979   011BE6  38DF               	swapf	223,w,c
 15980   011BE8  0B0F               	andlw	15
 15981   011BEA  6E37               	movwf	(btemp+11)^0,c
 15982                           
 15983                           ;stkvar	_config @ sp[(-4)+-2]
 15984   011BEC  0EFA               	movlw	-6
 15985   011BEE  CFE3 F034          	movff	plusw1,btemp+8
 15986   011BF2  0EFB               	movlw	-5
 15987   011BF4  CFE3 F035          	movff	plusw1,btemp+9
 15988   011BF8  0E02               	movlw	2
 15989   011BFA  2434               	addwf	(btemp+8)^0,w,c
 15990   011BFC  6ED9               	movwf	fsr2l,c
 15991   011BFE  0E00               	movlw	0
 15992   011C00  2035               	addwfc	(btemp+9)^0,w,c
 15993   011C02  6EDA               	movwf	fsr2h,c
 15994   011C04  50DF               	movf	223,w,c
 15995   011C06  1837               	xorwf	(btemp+11)^0,w,c
 15996   011C08  0BF0               	andlw	-16
 15997   011C0A  1837               	xorwf	(btemp+11)^0,w,c
 15998   011C0C  6EDF               	movwf	223,c
 15999   011C0E                     
 16000                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 16001   011C0E  0EFA               	movlw	250
 16002   011C10  26E1               	addwf	fsr1l,f,c
 16003   011C12  0EFF               	movlw	255
 16004   011C14  22E2               	addwfc	fsr1h,f,c
 16005   011C16  0012               	return		;funcret
 16006   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 16007                           	callstack 0
 16008                           
 16009 ;; *************** function _DRV_CANFDSPI_Configure *****************
 16010 ;; Defined at:
 16011 ;;		line 446 in file "can/can.c"
 16012 ;; Parameters:    Size  Location     Type
 16013 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 16014 ;;		 -> config(3), 
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;  ciCon           4  [STACK] struct _REG_CiCON
 16017 ;;  spiTransferE    1    0        char 
 16018 ;; Return value:  Size  Location     Type
 16019 ;;                  1  [STACK] char 
 16020 ;; Registers used:
 16021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 16022 ;; Tracked objects:
 16023 ;;		On entry : 0/0
 16024 ;;		On exit  : 0/0
 16025 ;;		Unchanged: 0/0
 16026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16031 ;;Total ram usage:        0 bytes
 16032 ;; Hardware stack levels used: 1
 16033 ;; Hardware stack levels required when called: 9
 16034 ;; This function calls:
 16035 ;;		_DRV_CANFDSPI_WriteWord
 16036 ;; This function is called by:
 16037 ;;		_CanInit
 16038 ;; This function uses a reentrant model
 16039 ;;
 16040                           
 16041                           	psect	text65
 16042   01173A                     __ptext65:
 16043                           	callstack 0
 16044   01173A                     _DRV_CANFDSPI_Configure:
 16045                           	callstack 0
 16046                           
 16047                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16048   01173A  52E6               	movf	postinc1,f,c
 16049   01173C  52E6               	movf	postinc1,f,c
 16050   01173E  52E6               	movf	postinc1,f,c
 16051   011740  52E6               	movf	postinc1,f,c
 16052   011742                     
 16053                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 16054   011742  0E8D               	movlw	low _canControlResetValues
 16055   011744  6EF6               	movwf	tblptrl,c
 16056   011746                     	if	1	;There is more than 1 active tblptr byte
 16057   011746  0EFF               	movlw	high _canControlResetValues
 16058   011748  6EF7               	movwf	tblptrh,c
 16059   01174A                     	endif
 16060   01174A                     	if	1	;There are 3 active tblptr bytes
 16061   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16062   01174C  6EF8               	movwf	tblptru,c
 16063   01174E                     	endif
 16064   01174E  0009               	tblrd		*+
 16065   011750  CFF5 F034          	movff	tablat,btemp+8
 16066   011754  0009               	tblrd		*+
 16067   011756  CFF5 F035          	movff	tablat,btemp+9
 16068   01175A  0009               	tblrd		*+
 16069   01175C  CFF5 F036          	movff	tablat,btemp+10
 16070   011760  0009               	tblrd		*+
 16071   011762  CFF5 F037          	movff	tablat,btemp+11
 16072                           
 16073                           ;stkvar	_ciCon @ sp[(-4)+0]
 16074   011766  0EFC               	movlw	-4
 16075   011768  C034  FFE3         	movff	btemp+8,plusw1
 16076   01176C  0EFD               	movlw	-3
 16077   01176E  C035  FFE3         	movff	btemp+9,plusw1
 16078   011772  0EFE               	movlw	-2
 16079   011774  C036  FFE3         	movff	btemp+10,plusw1
 16080   011778  0EFF               	movlw	-1
 16081   01177A  C037  FFE3         	movff	btemp+11,plusw1
 16082   01177E                     
 16083                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 16084                           ;stkvar	_config @ sp[(-4)+-2]
 16085   01177E  0EFA               	movlw	-6
 16086   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 16087   011784  0EFB               	movlw	-5
 16088   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 16089   01178A  50DF               	movf	223,w,c
 16090   01178C  0B1F               	andlw	31
 16091   01178E  6E37               	movwf	(btemp+11)^0,c
 16092                           
 16093                           ;stkvar	_ciCon @ sp[(-4)+0]
 16094   011790  50E1               	movf	fsr1l,w,c
 16095   011792  0FFC               	addlw	-4
 16096   011794  6ED9               	movwf	fsr2l,c
 16097   011796  50E2               	movf	fsr1h,w,c
 16098   011798  6EDA               	movwf	fsr2h,c
 16099   01179A  0EFF               	movlw	255
 16100   01179C  22DA               	addwfc	fsr2h,f,c
 16101   01179E  50DF               	movf	223,w,c
 16102   0117A0  1837               	xorwf	(btemp+11)^0,w,c
 16103   0117A2  0BE0               	andlw	-32
 16104   0117A4  1837               	xorwf	(btemp+11)^0,w,c
 16105   0117A6  6EDF               	movwf	223,c
 16106   0117A8                     
 16107                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16108                           ;stkvar	_config @ sp[(-4)+-2]
 16109   0117A8  0EFA               	movlw	-6
 16110   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16111   0117AE  0EFB               	movlw	-5
 16112   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16113                           
 16114                           ;stkvar	_ciCon @ sp[(-4)+0]
 16115   0117B4  50E1               	movf	fsr1l,w,c
 16116   0117B6  0FFC               	addlw	-4
 16117   0117B8  6EE9               	movwf	fsr0l,c
 16118   0117BA  50E2               	movf	fsr1h,w,c
 16119   0117BC  6EEA               	movwf	fsr0h,c
 16120   0117BE  0EFF               	movlw	255
 16121   0117C0  22EA               	addwfc	fsr0h,f,c
 16122   0117C2  9AEF               	bcf	indf0,5,c
 16123   0117C4  AADF               	btfss	indf2,5,c
 16124   0117C6  EFE6  F08B         	goto	u2405
 16125   0117CA  8AEF               	bsf	indf0,5,c
 16126   0117CC                     u2405:
 16127   0117CC                     
 16128                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16129                           ;stkvar	_config @ sp[(-4)+-2]
 16130   0117CC  0EFA               	movlw	-6
 16131   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16132   0117D2  0EFB               	movlw	-5
 16133   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16134                           
 16135                           ;stkvar	_ciCon @ sp[(-4)+0]
 16136   0117D8  50E1               	movf	fsr1l,w,c
 16137   0117DA  0FFC               	addlw	-4
 16138   0117DC  6EE9               	movwf	fsr0l,c
 16139   0117DE  50E2               	movf	fsr1h,w,c
 16140   0117E0  6EEA               	movwf	fsr0h,c
 16141   0117E2  0EFF               	movlw	255
 16142   0117E4  22EA               	addwfc	fsr0h,f,c
 16143   0117E6  9CEF               	bcf	indf0,6,c
 16144   0117E8  ACDF               	btfss	indf2,6,c
 16145   0117EA  EFF8  F08B         	goto	u2415
 16146   0117EE  8CEF               	bsf	indf0,6,c
 16147   0117F0                     u2415:
 16148   0117F0                     
 16149                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16150                           ;stkvar	_config @ sp[(-4)+-2]
 16151   0117F0  0EFA               	movlw	-6
 16152   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16153   0117F6  0EFB               	movlw	-5
 16154   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16155                           
 16156                           ;stkvar	_ciCon @ sp[(-4)+0]
 16157   0117FC  0EFD               	movlw	253
 16158   0117FE  24E1               	addwf	fsr1l,w,c
 16159   011800  6EE9               	movwf	fsr0l,c
 16160   011802  0EFF               	movlw	255
 16161   011804  20E2               	addwfc	fsr1h,w,c
 16162   011806  6EEA               	movwf	fsr0h,c
 16163   011808  90EF               	bcf	indf0,0,c
 16164   01180A  AEDF               	btfss	indf2,7,c
 16165   01180C  EF09  F08C         	goto	u2425
 16166   011810  80EF               	bsf	indf0,0,c
 16167   011812                     u2425:
 16168   011812                     
 16169                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16170                           ;stkvar	_config @ sp[(-4)+-2]
 16171   011812  0EFA               	movlw	-6
 16172   011814  CFE3 F036          	movff	plusw1,btemp+10
 16173   011818  0EFB               	movlw	-5
 16174   01181A  CFE3 F037          	movff	plusw1,btemp+11
 16175   01181E  0E01               	movlw	1
 16176   011820  2436               	addwf	(btemp+10)^0,w,c
 16177   011822  6ED9               	movwf	fsr2l,c
 16178   011824  0E00               	movlw	0
 16179   011826  2037               	addwfc	(btemp+11)^0,w,c
 16180   011828  6EDA               	movwf	fsr2h,c
 16181   01182A  50DF               	movf	223,w,c
 16182   01182C  0B03               	andlw	3
 16183   01182E  6E37               	movwf	(btemp+11)^0,c
 16184                           
 16185                           ;stkvar	_ciCon @ sp[(-4)+0]
 16186   011830  0EFD               	movlw	253
 16187   011832  24E1               	addwf	fsr1l,w,c
 16188   011834  6ED9               	movwf	fsr2l,c
 16189   011836  0EFF               	movlw	255
 16190   011838  20E2               	addwfc	fsr1h,w,c
 16191   01183A  6EDA               	movwf	fsr2h,c
 16192   01183C  4637               	rlncf	(btemp+11)^0,f,c
 16193   01183E  50DF               	movf	223,w,c
 16194   011840  1837               	xorwf	(btemp+11)^0,w,c
 16195   011842  0BF9               	andlw	-7
 16196   011844  1837               	xorwf	(btemp+11)^0,w,c
 16197   011846  6EDF               	movwf	223,c
 16198   011848                     
 16199                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16200                           ;stkvar	_config @ sp[(-4)+-2]
 16201   011848  0EFA               	movlw	-6
 16202   01184A  CFE3 F036          	movff	plusw1,btemp+10
 16203   01184E  0EFB               	movlw	-5
 16204   011850  CFE3 F037          	movff	plusw1,btemp+11
 16205   011854  0E01               	movlw	1
 16206   011856  2436               	addwf	(btemp+10)^0,w,c
 16207   011858  6ED9               	movwf	fsr2l,c
 16208   01185A  0E00               	movlw	0
 16209   01185C  2037               	addwfc	(btemp+11)^0,w,c
 16210   01185E  6EDA               	movwf	fsr2h,c
 16211                           
 16212                           ;stkvar	_ciCon @ sp[(-4)+0]
 16213   011860  0EFD               	movlw	253
 16214   011862  24E1               	addwf	fsr1l,w,c
 16215   011864  6EE9               	movwf	fsr0l,c
 16216   011866  0EFF               	movlw	255
 16217   011868  20E2               	addwfc	fsr1h,w,c
 16218   01186A  6EEA               	movwf	fsr0h,c
 16219   01186C  98EF               	bcf	indf0,4,c
 16220   01186E  A4DF               	btfss	indf2,2,c
 16221   011870  EF3B  F08C         	goto	u2435
 16222   011874  88EF               	bsf	indf0,4,c
 16223   011876                     u2435:
 16224   011876                     
 16225                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16226                           ;stkvar	_config @ sp[(-4)+-2]
 16227   011876  0EFA               	movlw	-6
 16228   011878  CFE3 F036          	movff	plusw1,btemp+10
 16229   01187C  0EFB               	movlw	-5
 16230   01187E  CFE3 F037          	movff	plusw1,btemp+11
 16231   011882  0E01               	movlw	1
 16232   011884  2436               	addwf	(btemp+10)^0,w,c
 16233   011886  6ED9               	movwf	fsr2l,c
 16234   011888  0E00               	movlw	0
 16235   01188A  2037               	addwfc	(btemp+11)^0,w,c
 16236   01188C  6EDA               	movwf	fsr2h,c
 16237                           
 16238                           ;stkvar	_ciCon @ sp[(-4)+0]
 16239   01188E  0EFE               	movlw	254
 16240   011890  24E1               	addwf	fsr1l,w,c
 16241   011892  6EE9               	movwf	fsr0l,c
 16242   011894  0EFF               	movlw	255
 16243   011896  20E2               	addwfc	fsr1h,w,c
 16244   011898  6EEA               	movwf	fsr0h,c
 16245   01189A  90EF               	bcf	indf0,0,c
 16246   01189C  A6DF               	btfss	indf2,3,c
 16247   01189E  EF52  F08C         	goto	u2445
 16248   0118A2  80EF               	bsf	indf0,0,c
 16249   0118A4                     u2445:
 16250   0118A4                     
 16251                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16252                           ;stkvar	_config @ sp[(-4)+-2]
 16253   0118A4  0EFA               	movlw	-6
 16254   0118A6  CFE3 F036          	movff	plusw1,btemp+10
 16255   0118AA  0EFB               	movlw	-5
 16256   0118AC  CFE3 F037          	movff	plusw1,btemp+11
 16257   0118B0  0E01               	movlw	1
 16258   0118B2  2436               	addwf	(btemp+10)^0,w,c
 16259   0118B4  6ED9               	movwf	fsr2l,c
 16260   0118B6  0E00               	movlw	0
 16261   0118B8  2037               	addwfc	(btemp+11)^0,w,c
 16262   0118BA  6EDA               	movwf	fsr2h,c
 16263                           
 16264                           ;stkvar	_ciCon @ sp[(-4)+0]
 16265   0118BC  0EFE               	movlw	254
 16266   0118BE  24E1               	addwf	fsr1l,w,c
 16267   0118C0  6EE9               	movwf	fsr0l,c
 16268   0118C2  0EFF               	movlw	255
 16269   0118C4  20E2               	addwfc	fsr1h,w,c
 16270   0118C6  6EEA               	movwf	fsr0h,c
 16271   0118C8  92EF               	bcf	indf0,1,c
 16272   0118CA  A8DF               	btfss	indf2,4,c
 16273   0118CC  EF69  F08C         	goto	u2455
 16274   0118D0  82EF               	bsf	indf0,1,c
 16275   0118D2                     u2455:
 16276   0118D2                     
 16277                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16278                           ;stkvar	_config @ sp[(-4)+-2]
 16279   0118D2  0EFA               	movlw	-6
 16280   0118D4  CFE3 F036          	movff	plusw1,btemp+10
 16281   0118D8  0EFB               	movlw	-5
 16282   0118DA  CFE3 F037          	movff	plusw1,btemp+11
 16283   0118DE  0E01               	movlw	1
 16284   0118E0  2436               	addwf	(btemp+10)^0,w,c
 16285   0118E2  6ED9               	movwf	fsr2l,c
 16286   0118E4  0E00               	movlw	0
 16287   0118E6  2037               	addwfc	(btemp+11)^0,w,c
 16288   0118E8  6EDA               	movwf	fsr2h,c
 16289                           
 16290                           ;stkvar	_ciCon @ sp[(-4)+0]
 16291   0118EA  0EFE               	movlw	254
 16292   0118EC  24E1               	addwf	fsr1l,w,c
 16293   0118EE  6EE9               	movwf	fsr0l,c
 16294   0118F0  0EFF               	movlw	255
 16295   0118F2  20E2               	addwfc	fsr1h,w,c
 16296   0118F4  6EEA               	movwf	fsr0h,c
 16297   0118F6  94EF               	bcf	indf0,2,c
 16298   0118F8  AADF               	btfss	indf2,5,c
 16299   0118FA  EF80  F08C         	goto	u2465
 16300   0118FE  84EF               	bsf	indf0,2,c
 16301   011900                     u2465:
 16302   011900                     
 16303                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16304                           ;stkvar	_config @ sp[(-4)+-2]
 16305   011900  0EFA               	movlw	-6
 16306   011902  CFE3 F036          	movff	plusw1,btemp+10
 16307   011906  0EFB               	movlw	-5
 16308   011908  CFE3 F037          	movff	plusw1,btemp+11
 16309   01190C  0E01               	movlw	1
 16310   01190E  2436               	addwf	(btemp+10)^0,w,c
 16311   011910  6ED9               	movwf	fsr2l,c
 16312   011912  0E00               	movlw	0
 16313   011914  2037               	addwfc	(btemp+11)^0,w,c
 16314   011916  6EDA               	movwf	fsr2h,c
 16315                           
 16316                           ;stkvar	_ciCon @ sp[(-4)+0]
 16317   011918  0EFE               	movlw	254
 16318   01191A  24E1               	addwf	fsr1l,w,c
 16319   01191C  6EE9               	movwf	fsr0l,c
 16320   01191E  0EFF               	movlw	255
 16321   011920  20E2               	addwfc	fsr1h,w,c
 16322   011922  6EEA               	movwf	fsr0h,c
 16323   011924  96EF               	bcf	indf0,3,c
 16324   011926  ACDF               	btfss	indf2,6,c
 16325   011928  EF97  F08C         	goto	u2475
 16326   01192C  86EF               	bsf	indf0,3,c
 16327   01192E                     u2475:
 16328   01192E                     
 16329                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16330                           ;stkvar	_config @ sp[(-4)+-2]
 16331   01192E  0EFA               	movlw	-6
 16332   011930  CFE3 F036          	movff	plusw1,btemp+10
 16333   011934  0EFB               	movlw	-5
 16334   011936  CFE3 F037          	movff	plusw1,btemp+11
 16335   01193A  0E01               	movlw	1
 16336   01193C  2436               	addwf	(btemp+10)^0,w,c
 16337   01193E  6ED9               	movwf	fsr2l,c
 16338   011940  0E00               	movlw	0
 16339   011942  2037               	addwfc	(btemp+11)^0,w,c
 16340   011944  6EDA               	movwf	fsr2h,c
 16341                           
 16342                           ;stkvar	_ciCon @ sp[(-4)+0]
 16343   011946  0EFE               	movlw	254
 16344   011948  24E1               	addwf	fsr1l,w,c
 16345   01194A  6EE9               	movwf	fsr0l,c
 16346   01194C  0EFF               	movlw	255
 16347   01194E  20E2               	addwfc	fsr1h,w,c
 16348   011950  6EEA               	movwf	fsr0h,c
 16349   011952  98EF               	bcf	indf0,4,c
 16350   011954  AEDF               	btfss	indf2,7,c
 16351   011956  EFAE  F08C         	goto	u2485
 16352   01195A  88EF               	bsf	indf0,4,c
 16353   01195C                     u2485:
 16354   01195C                     
 16355                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16356                           ;stkvar	_config @ sp[(-4)+-2]
 16357   01195C  0EFA               	movlw	-6
 16358   01195E  CFE3 F036          	movff	plusw1,btemp+10
 16359   011962  0EFB               	movlw	-5
 16360   011964  CFE3 F037          	movff	plusw1,btemp+11
 16361   011968  0E02               	movlw	2
 16362   01196A  2436               	addwf	(btemp+10)^0,w,c
 16363   01196C  6ED9               	movwf	fsr2l,c
 16364   01196E  0E00               	movlw	0
 16365   011970  2037               	addwfc	(btemp+11)^0,w,c
 16366   011972  6EDA               	movwf	fsr2h,c
 16367   011974  50DF               	movf	223,w,c
 16368   011976  0B0F               	andlw	15
 16369   011978  6E37               	movwf	(btemp+11)^0,c
 16370                           
 16371                           ;stkvar	_ciCon @ sp[(-4)+0]
 16372   01197A  0EFF               	movlw	255
 16373   01197C  24E1               	addwf	fsr1l,w,c
 16374   01197E  6ED9               	movwf	fsr2l,c
 16375   011980  0EFF               	movlw	255
 16376   011982  20E2               	addwfc	fsr1h,w,c
 16377   011984  6EDA               	movwf	fsr2h,c
 16378   011986  3A37               	swapf	(btemp+11)^0,f,c
 16379   011988  50DF               	movf	223,w,c
 16380   01198A  1837               	xorwf	(btemp+11)^0,w,c
 16381   01198C  0B0F               	andlw	-241
 16382   01198E  1837               	xorwf	(btemp+11)^0,w,c
 16383   011990  6EDF               	movwf	223,c
 16384   011992                     
 16385                           ;stkvar	_ciCon @ sp[(-4)+0]
 16386   011992  0EFC               	movlw	-4
 16387   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16388   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16389   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16390   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16391   0119A4  0E00               	movlw	0
 16392   0119A6  6EE6               	movwf	postinc1,c
 16393   0119A8  0E00               	movlw	0
 16394   0119AA  6EE6               	movwf	postinc1,c
 16395   0119AC  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16396   0119B0                     
 16397                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16398   0119B0  0EFA               	movlw	250
 16399   0119B2  26E1               	addwf	fsr1l,f,c
 16400   0119B4  0EFF               	movlw	255
 16401   0119B6  22E2               	addwfc	fsr1h,f,c
 16402   0119B8  0012               	return		;funcret
 16403   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16404                           	callstack 0
 16405                           
 16406 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16407 ;; Defined at:
 16408 ;;		line 2825 in file "can/can.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  bitTime         1  [STACK] enum E5604
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16413 ;;  spiTransferE    1    0        char 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;                  1  [STACK] char 
 16416 ;; Registers used:
 16417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;Total ram usage:        0 bytes
 16428 ;; Hardware stack levels used: 1
 16429 ;; Hardware stack levels required when called: 9
 16430 ;; This function calls:
 16431 ;;		_DRV_CANFDSPI_WriteWord
 16432 ;; This function is called by:
 16433 ;;		_CanInit
 16434 ;; This function uses a reentrant model
 16435 ;;
 16436                           
 16437                           	psect	text66
 16438   011C18                     __ptext66:
 16439                           	callstack 0
 16440   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16441                           	callstack 0
 16442                           
 16443                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16444   011C18  52E6               	movf	postinc1,f,c
 16445   011C1A  52E6               	movf	postinc1,f,c
 16446   011C1C  52E6               	movf	postinc1,f,c
 16447   011C1E  52E6               	movf	postinc1,f,c
 16448   011C20                     
 16449                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16450   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16451   011C22  6EF6               	movwf	tblptrl,c
 16452   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16453   011C26  6EF7               	movwf	tblptrh,c
 16454   011C28                     	if	0	;tblptru may be non-zero
 16455   011C28                     	endif
 16456   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16457   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16458   011C2A  6EF8               	movwf	tblptru,c
 16459   011C2C                     	endif
 16460   011C2C  0009               	tblrd		*+
 16461   011C2E  CFF5 F034          	movff	tablat,btemp+8
 16462   011C32  0009               	tblrd		*+
 16463   011C34  CFF5 F035          	movff	tablat,btemp+9
 16464   011C38  0009               	tblrd		*+
 16465   011C3A  CFF5 F036          	movff	tablat,btemp+10
 16466   011C3E  0009               	tblrd		*+
 16467   011C40  CFF5 F037          	movff	tablat,btemp+11
 16468                           
 16469                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16470   011C44  0EFC               	movlw	-4
 16471   011C46  C034  FFE3         	movff	btemp+8,plusw1
 16472   011C4A  0EFD               	movlw	-3
 16473   011C4C  C035  FFE3         	movff	btemp+9,plusw1
 16474   011C50  0EFE               	movlw	-2
 16475   011C52  C036  FFE3         	movff	btemp+10,plusw1
 16476   011C56  0EFF               	movlw	-1
 16477   011C58  C037  FFE3         	movff	btemp+11,plusw1
 16478                           
 16479                           ;can/can.c: 2834:     switch (bitTime) {
 16480   011C5C  EFC8  F08E         	goto	l4730
 16481   011C60                     l665:
 16482   011C60                     l4710:
 16483                           
 16484                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16485                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16486   011C60  0EFF               	movlw	255
 16487   011C62  24E1               	addwf	fsr1l,w,c
 16488   011C64  6ED9               	movwf	fsr2l,c
 16489   011C66  0EFF               	movlw	255
 16490   011C68  20E2               	addwfc	fsr1h,w,c
 16491   011C6A  6EDA               	movwf	fsr2h,c
 16492   011C6C  6ADF               	clrf	indf2,c
 16493                           
 16494                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16495                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16496   011C6E  0EFE               	movlw	254
 16497   011C70  24E1               	addwf	fsr1l,w,c
 16498   011C72  6ED9               	movwf	fsr2l,c
 16499   011C74  0EFF               	movlw	255
 16500   011C76  20E2               	addwfc	fsr1h,w,c
 16501   011C78  6EDA               	movwf	fsr2h,c
 16502   011C7A  0E3E               	movlw	62
 16503   011C7C  6EDF               	movwf	indf2,c
 16504                           
 16505                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16506                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16507   011C7E  0EFD               	movlw	253
 16508   011C80  24E1               	addwf	fsr1l,w,c
 16509   011C82  6ED9               	movwf	fsr2l,c
 16510   011C84  0EFF               	movlw	255
 16511   011C86  20E2               	addwfc	fsr1h,w,c
 16512   011C88  6EDA               	movwf	fsr2h,c
 16513   011C8A  50DF               	movf	223,w,c
 16514   011C8C  0B80               	andlw	-128
 16515   011C8E  090F               	iorlw	15
 16516   011C90  6EDF               	movwf	223,c
 16517   011C92                     
 16518                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16519                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16520   011C92  50E1               	movf	fsr1l,w,c
 16521   011C94  0FFC               	addlw	-4
 16522   011C96  6ED9               	movwf	fsr2l,c
 16523   011C98  50E2               	movf	fsr1h,w,c
 16524   011C9A  6EDA               	movwf	fsr2h,c
 16525   011C9C  0EFF               	movlw	255
 16526   011C9E  22DA               	addwfc	fsr2h,f,c
 16527   011CA0  50DF               	movf	223,w,c
 16528   011CA2  0B80               	andlw	-128
 16529   011CA4  090F               	iorlw	15
 16530   011CA6  6EDF               	movwf	223,c
 16531                           
 16532                           ;can/can.c: 2848:             break;
 16533   011CA8  EF1E  F08F         	goto	l4732
 16534   011CAC                     l674:
 16535   011CAC                     l4714:
 16536                           
 16537                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16538                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16539   011CAC  0EFF               	movlw	255
 16540   011CAE  24E1               	addwf	fsr1l,w,c
 16541   011CB0  6ED9               	movwf	fsr2l,c
 16542   011CB2  0EFF               	movlw	255
 16543   011CB4  20E2               	addwfc	fsr1h,w,c
 16544   011CB6  6EDA               	movwf	fsr2h,c
 16545   011CB8  6ADF               	clrf	indf2,c
 16546                           
 16547                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 16548                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16549   011CBA  0EFE               	movlw	254
 16550   011CBC  24E1               	addwf	fsr1l,w,c
 16551   011CBE  6ED9               	movwf	fsr2l,c
 16552   011CC0  0EFF               	movlw	255
 16553   011CC2  20E2               	addwfc	fsr1h,w,c
 16554   011CC4  6EDA               	movwf	fsr2h,c
 16555   011CC6  0E7E               	movlw	126
 16556   011CC8  6EDF               	movwf	indf2,c
 16557                           
 16558                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 16559                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16560   011CCA  0EFD               	movlw	253
 16561   011CCC  24E1               	addwf	fsr1l,w,c
 16562   011CCE  6ED9               	movwf	fsr2l,c
 16563   011CD0  0EFF               	movlw	255
 16564   011CD2  20E2               	addwfc	fsr1h,w,c
 16565   011CD4  6EDA               	movwf	fsr2h,c
 16566   011CD6  50DF               	movf	223,w,c
 16567   011CD8  0B80               	andlw	-128
 16568   011CDA  091F               	iorlw	31
 16569   011CDC  6EDF               	movwf	223,c
 16570   011CDE                     
 16571                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 16572                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16573   011CDE  50E1               	movf	fsr1l,w,c
 16574   011CE0  0FFC               	addlw	-4
 16575   011CE2  6ED9               	movwf	fsr2l,c
 16576   011CE4  50E2               	movf	fsr1h,w,c
 16577   011CE6  6EDA               	movwf	fsr2h,c
 16578   011CE8  0EFF               	movlw	255
 16579   011CEA  22DA               	addwfc	fsr2h,f,c
 16580   011CEC  50DF               	movf	223,w,c
 16581   011CEE  0B80               	andlw	-128
 16582   011CF0  091F               	iorlw	31
 16583   011CF2  6EDF               	movwf	223,c
 16584                           
 16585                           ;can/can.c: 2862:             break;
 16586   011CF4  EF1E  F08F         	goto	l4732
 16587   011CF8                     l4718:
 16588                           
 16589                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 16590                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16591   011CF8  0EFF               	movlw	255
 16592   011CFA  24E1               	addwf	fsr1l,w,c
 16593   011CFC  6ED9               	movwf	fsr2l,c
 16594   011CFE  0EFF               	movlw	255
 16595   011D00  20E2               	addwfc	fsr1h,w,c
 16596   011D02  6EDA               	movwf	fsr2h,c
 16597   011D04  6ADF               	clrf	indf2,c
 16598                           
 16599                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 16600                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16601   011D06  0EFE               	movlw	254
 16602   011D08  24E1               	addwf	fsr1l,w,c
 16603   011D0A  6ED9               	movwf	fsr2l,c
 16604   011D0C  0EFF               	movlw	255
 16605   011D0E  20E2               	addwfc	fsr1h,w,c
 16606   011D10  6EDA               	movwf	fsr2h,c
 16607   011D12  0E1E               	movlw	30
 16608   011D14  6EDF               	movwf	indf2,c
 16609                           
 16610                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 16611                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16612   011D16  0EFD               	movlw	253
 16613   011D18  24E1               	addwf	fsr1l,w,c
 16614   011D1A  6ED9               	movwf	fsr2l,c
 16615   011D1C  0EFF               	movlw	255
 16616   011D1E  20E2               	addwfc	fsr1h,w,c
 16617   011D20  6EDA               	movwf	fsr2h,c
 16618   011D22  50DF               	movf	223,w,c
 16619   011D24  0B80               	andlw	-128
 16620   011D26  0907               	iorlw	7
 16621   011D28  6EDF               	movwf	223,c
 16622   011D2A                     
 16623                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 16624                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16625   011D2A  50E1               	movf	fsr1l,w,c
 16626   011D2C  0FFC               	addlw	-4
 16627   011D2E  6ED9               	movwf	fsr2l,c
 16628   011D30  50E2               	movf	fsr1h,w,c
 16629   011D32  6EDA               	movwf	fsr2h,c
 16630   011D34  0EFF               	movlw	255
 16631   011D36  22DA               	addwfc	fsr2h,f,c
 16632   011D38  50DF               	movf	223,w,c
 16633   011D3A  0B80               	andlw	-128
 16634   011D3C  0907               	iorlw	7
 16635   011D3E  6EDF               	movwf	223,c
 16636                           
 16637                           ;can/can.c: 2870:             break;
 16638   011D40  EF1E  F08F         	goto	l4732
 16639   011D44                     l4722:
 16640                           
 16641                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 16642                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16643   011D44  0EFF               	movlw	255
 16644   011D46  24E1               	addwf	fsr1l,w,c
 16645   011D48  6ED9               	movwf	fsr2l,c
 16646   011D4A  0EFF               	movlw	255
 16647   011D4C  20E2               	addwfc	fsr1h,w,c
 16648   011D4E  6EDA               	movwf	fsr2h,c
 16649   011D50  6ADF               	clrf	indf2,c
 16650                           
 16651                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 16652                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16653   011D52  0EFE               	movlw	254
 16654   011D54  24E1               	addwf	fsr1l,w,c
 16655   011D56  6ED9               	movwf	fsr2l,c
 16656   011D58  0EFF               	movlw	255
 16657   011D5A  20E2               	addwfc	fsr1h,w,c
 16658   011D5C  6EDA               	movwf	fsr2h,c
 16659   011D5E  0EFE               	movlw	254
 16660   011D60  6EDF               	movwf	indf2,c
 16661                           
 16662                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 16663                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16664   011D62  0EFD               	movlw	253
 16665   011D64  24E1               	addwf	fsr1l,w,c
 16666   011D66  6ED9               	movwf	fsr2l,c
 16667   011D68  0EFF               	movlw	255
 16668   011D6A  20E2               	addwfc	fsr1h,w,c
 16669   011D6C  6EDA               	movwf	fsr2h,c
 16670   011D6E  50DF               	movf	223,w,c
 16671   011D70  0B80               	andlw	-128
 16672   011D72  093F               	iorlw	63
 16673   011D74  6EDF               	movwf	223,c
 16674   011D76                     
 16675                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 16676                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16677   011D76  50E1               	movf	fsr1l,w,c
 16678   011D78  0FFC               	addlw	-4
 16679   011D7A  6ED9               	movwf	fsr2l,c
 16680   011D7C  50E2               	movf	fsr1h,w,c
 16681   011D7E  6EDA               	movwf	fsr2h,c
 16682   011D80  0EFF               	movlw	255
 16683   011D82  22DA               	addwfc	fsr2h,f,c
 16684   011D84  50DF               	movf	223,w,c
 16685   011D86  0B80               	andlw	-128
 16686   011D88  093F               	iorlw	63
 16687   011D8A  6EDF               	movwf	223,c
 16688                           
 16689                           ;can/can.c: 2877:             break;
 16690   011D8C  EF1E  F08F         	goto	l4732
 16691   011D90                     l4730:
 16692                           
 16693                           ;stkvar	_bitTime @ sp[(-4)+-1]
 16694   011D90  0EFB               	movlw	-5
 16695   011D92  50E3               	movf	plusw1,w,c
 16696   011D94  6E36               	movwf	(btemp+10)^0,c
 16697   011D96  6A37               	clrf	(btemp+11)^0,c
 16698                           
 16699                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16700                           ; Switch size 1, requested type "simple"
 16701                           ; Number of cases is 1, Range of values is 0 to 0
 16702                           ; switch strategies available:
 16703                           ; Name         Instructions Cycles
 16704                           ; simple_byte            4     3 (average)
 16705                           ;	Chosen strategy is simple_byte
 16706   011D98  5037               	movf	(btemp+11)^0,w,c
 16707   011D9A  0A00               	xorlw	0	; case 0
 16708   011D9C  B4D8               	btfsc	status,2,c
 16709   011D9E  EFD3  F08E         	goto	l5608
 16710   011DA2  EF2D  F08F         	goto	l682
 16711   011DA6                     l5608:
 16712                           
 16713                           ; Switch size 1, requested type "simple"
 16714                           ; Number of cases is 18, Range of values is 0 to 17
 16715                           ; switch strategies available:
 16716                           ; Name         Instructions Cycles
 16717                           ; simple_byte           55    28 (average)
 16718                           ;	Chosen strategy is simple_byte
 16719   011DA6  5036               	movf	(btemp+10)^0,w,c
 16720   011DA8  0A00               	xorlw	0	; case 0
 16721   011DAA  B4D8               	btfsc	status,2,c
 16722   011DAC  EF30  F08E         	goto	l665
 16723   011DB0  0A01               	xorlw	1	; case 1
 16724   011DB2  B4D8               	btfsc	status,2,c
 16725   011DB4  EF30  F08E         	goto	l4710
 16726   011DB8  0A03               	xorlw	3	; case 2
 16727   011DBA  B4D8               	btfsc	status,2,c
 16728   011DBC  EF30  F08E         	goto	l4710
 16729   011DC0  0A01               	xorlw	1	; case 3
 16730   011DC2  B4D8               	btfsc	status,2,c
 16731   011DC4  EF30  F08E         	goto	l4710
 16732   011DC8  0A07               	xorlw	7	; case 4
 16733   011DCA  B4D8               	btfsc	status,2,c
 16734   011DCC  EF30  F08E         	goto	l4710
 16735   011DD0  0A01               	xorlw	1	; case 5
 16736   011DD2  B4D8               	btfsc	status,2,c
 16737   011DD4  EF30  F08E         	goto	l4710
 16738   011DD8  0A03               	xorlw	3	; case 6
 16739   011DDA  B4D8               	btfsc	status,2,c
 16740   011DDC  EF30  F08E         	goto	l4710
 16741   011DE0  0A01               	xorlw	1	; case 7
 16742   011DE2  B4D8               	btfsc	status,2,c
 16743   011DE4  EF30  F08E         	goto	l4710
 16744   011DE8  0A0F               	xorlw	15	; case 8
 16745   011DEA  B4D8               	btfsc	status,2,c
 16746   011DEC  EF56  F08E         	goto	l674
 16747   011DF0  0A01               	xorlw	1	; case 9
 16748   011DF2  B4D8               	btfsc	status,2,c
 16749   011DF4  EF56  F08E         	goto	l4714
 16750   011DF8  0A03               	xorlw	3	; case 10
 16751   011DFA  B4D8               	btfsc	status,2,c
 16752   011DFC  EF56  F08E         	goto	l4714
 16753   011E00  0A01               	xorlw	1	; case 11
 16754   011E02  B4D8               	btfsc	status,2,c
 16755   011E04  EF56  F08E         	goto	l4714
 16756   011E08  0A07               	xorlw	7	; case 12
 16757   011E0A  B4D8               	btfsc	status,2,c
 16758   011E0C  EF56  F08E         	goto	l4714
 16759   011E10  0A01               	xorlw	1	; case 13
 16760   011E12  B4D8               	btfsc	status,2,c
 16761   011E14  EF56  F08E         	goto	l4714
 16762   011E18  0A03               	xorlw	3	; case 14
 16763   011E1A  B4D8               	btfsc	status,2,c
 16764   011E1C  EF56  F08E         	goto	l4714
 16765   011E20  0A01               	xorlw	1	; case 15
 16766   011E22  B4D8               	btfsc	status,2,c
 16767   011E24  EF7C  F08E         	goto	l4718
 16768   011E28  0A1F               	xorlw	31	; case 16
 16769   011E2A  B4D8               	btfsc	status,2,c
 16770   011E2C  EF7C  F08E         	goto	l4718
 16771   011E30  0A01               	xorlw	1	; case 17
 16772   011E32  B4D8               	btfsc	status,2,c
 16773   011E34  EFA2  F08E         	goto	l4722
 16774   011E38  EF2D  F08F         	goto	l682
 16775   011E3C                     l4732:
 16776                           
 16777                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16778   011E3C  0EFC               	movlw	-4
 16779   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16780   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16781   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16782   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16783   011E4E  0E04               	movlw	4
 16784   011E50  6EE6               	movwf	postinc1,c
 16785   011E52  0E00               	movlw	0
 16786   011E54  6EE6               	movwf	postinc1,c
 16787   011E56  EC25  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16788   011E5A                     l682:
 16789                           
 16790                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16791   011E5A  0EFB               	movlw	251
 16792   011E5C  26E1               	addwf	fsr1l,f,c
 16793   011E5E  0EFF               	movlw	255
 16794   011E60  22E2               	addwfc	fsr1h,f,c
 16795   011E62  0012               	return		;funcret
 16796   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16797                           	callstack 0
 16798                           
 16799 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16800 ;; Defined at:
 16801 ;;		line 310 in file "can/can.c"
 16802 ;; Parameters:    Size  Location     Type
 16803 ;;  address         2  [STACK] unsigned short 
 16804 ;;  txd             4  [STACK] unsigned long 
 16805 ;; Auto vars:     Size  Location     Type
 16806 ;;  spiTransferS    2  [STACK] unsigned short 
 16807 ;;  i               1  [STACK] unsigned char 
 16808 ;;  spiTransferE    1  [STACK] char 
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  1  [STACK] char 
 16811 ;; Registers used:
 16812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16813 ;; Tracked objects:
 16814 ;;		On entry : 0/0
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;Total ram usage:        0 bytes
 16823 ;; Hardware stack levels used: 1
 16824 ;; Hardware stack levels required when called: 8
 16825 ;; This function calls:
 16826 ;;		_SpiTransfer
 16827 ;; This function is called by:
 16828 ;;		_DRV_CANFDSPI_Configure
 16829 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16830 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16831 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16832 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16833 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16834 ;;		_DRV_CANFDSPI_TefConfigure
 16835 ;;		_DRV_CANFDSPI_TimeStampSet
 16836 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16837 ;; This function uses a reentrant model
 16838 ;;
 16839                           
 16840                           	psect	text67
 16841   01384A                     __ptext67:
 16842                           	callstack 0
 16843   01384A                     _DRV_CANFDSPI_WriteWord:
 16844                           	callstack 0
 16845                           
 16846                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16847   01384A  52E6               	movf	postinc1,f,c
 16848   01384C  52E6               	movf	postinc1,f,c
 16849   01384E  52E6               	movf	postinc1,f,c
 16850   013850  52E6               	movf	postinc1,f,c
 16851   013852                     
 16852                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 16853   013852  0E06               	movlw	6
 16854   013854  6E36               	movwf	(btemp+10)^0,c
 16855   013856  0E00               	movlw	0
 16856   013858  6E37               	movwf	(btemp+11)^0,c
 16857                           
 16858                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16859   01385A  0EFC               	movlw	-4
 16860   01385C  C036  FFE3         	movff	btemp+10,plusw1
 16861   013860  0EFD               	movlw	-3
 16862   013862  C037  FFE3         	movff	btemp+11,plusw1
 16863   013866                     
 16864                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 16865                           ;stkvar	_address @ sp[(-4)+-2]
 16866   013866  0EFB               	movlw	251
 16867   013868  24E1               	addwf	fsr1l,w,c
 16868   01386A  6ED9               	movwf	fsr2l,c
 16869   01386C  0EFF               	movlw	255
 16870   01386E  20E2               	addwfc	fsr1h,w,c
 16871   013870  6EDA               	movwf	fsr2h,c
 16872   013872  50DF               	movf	indf2,w,c
 16873   013874  0B0F               	andlw	15
 16874   013876  0F20               	addlw	32
 16875   013878  0101               	movlb	1	; () banked
 16876   01387A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 16877   01387C                     
 16878                           ; BSR set to: 1
 16879                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 16880                           ;stkvar	_address @ sp[(-4)+-2]
 16881   01387C  0EFA               	movlw	-6
 16882   01387E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 16883   013882                     
 16884                           ; BSR set to: 1
 16885                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 16886                           ;stkvar	_i @ sp[(-4)+2]
 16887   013882  0EFE               	movlw	-2
 16888   013884  6AE3               	clrf	plusw1,c
 16889   013886                     l4582:
 16890                           
 16891                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 16892                           ;stkvar	_i @ sp[(-4)+2]
 16893   013886  0EFE               	movlw	-2
 16894   013888  50E3               	movf	plusw1,w,c
 16895   01388A  6E36               	movwf	(btemp+10)^0,c
 16896   01388C  6A37               	clrf	(btemp+11)^0,c
 16897   01388E  0E02               	movlw	low (_spiTransmitBuffer+2)
 16898   013890  2436               	addwf	(btemp+10)^0,w,c
 16899   013892  6ED9               	movwf	fsr2l,c
 16900   013894  0E01               	movlw	high (_spiTransmitBuffer+2)
 16901   013896  2037               	addwfc	(btemp+11)^0,w,c
 16902   013898  6EDA               	movwf	fsr2h,c
 16903                           
 16904                           ;stkvar	_txd @ sp[(-4)+-6]
 16905   01389A  0EF6               	movlw	-10
 16906   01389C  CFE3 F034          	movff	plusw1,btemp+8
 16907   0138A0  0EF7               	movlw	-9
 16908   0138A2  CFE3 F035          	movff	plusw1,btemp+9
 16909   0138A6  0EF8               	movlw	-8
 16910   0138A8  CFE3 F036          	movff	plusw1,btemp+10
 16911   0138AC  0EF9               	movlw	-7
 16912   0138AE  CFE3 F037          	movff	plusw1,btemp+11
 16913                           
 16914                           ;stkvar	_i @ sp[(-4)+2]
 16915   0138B2  0EFE               	movlw	-2
 16916   0138B4  50E3               	movf	plusw1,w,c
 16917   0138B6  0D08               	mullw	8
 16918   0138B8  50F3               	movf	243,w,c
 16919   0138BA  2AE8               	incf	wreg,f,c
 16920   0138BC  EF65  F09C         	goto	u2240
 16921   0138C0                     u2245:
 16922   0138C0  90D8               	bcf	status,0,c
 16923   0138C2  3237               	rrcf	(btemp+11)^0,f,c
 16924   0138C4  3236               	rrcf	(btemp+10)^0,f,c
 16925   0138C6  3235               	rrcf	(btemp+9)^0,f,c
 16926   0138C8  3234               	rrcf	(btemp+8)^0,f,c
 16927   0138CA                     u2240:
 16928   0138CA  2EE8               	decfsz	wreg,f,c
 16929   0138CC  EF60  F09C         	goto	u2245
 16930   0138D0  5034               	movf	(btemp+8)^0,w,c
 16931   0138D2  6EDF               	movwf	indf2,c
 16932   0138D4                     
 16933                           ;can/can.c: 324:     }
 16934                           ;stkvar	_i @ sp[(-4)+2]
 16935   0138D4  0EFE               	movlw	-2
 16936   0138D6  2AE3               	incf	plusw1,f,c
 16937   0138D8                     
 16938                           ;stkvar	_i @ sp[(-4)+2]
 16939   0138D8  0EFE               	movlw	-2
 16940   0138DA  CFE3 F02C          	movff	plusw1,btemp
 16941   0138DE  0E03               	movlw	3
 16942   0138E0  642C               	cpfsgt	btemp^0,c
 16943   0138E2  EF75  F09C         	goto	u2251
 16944   0138E6  EF77  F09C         	goto	u2250
 16945   0138EA                     u2251:
 16946   0138EA  EF43  F09C         	goto	l4582
 16947   0138EE                     u2250:
 16948   0138EE                     
 16949                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16950                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16951   0138EE  0EFC               	movlw	-4
 16952   0138F0  CFE3 FFE6          	movff	plusw1,postinc1
 16953   0138F4  CFE3 FFE6          	movff	plusw1,postinc1
 16954   0138F8  0E00               	movlw	low _spiReceiveBuffer
 16955   0138FA  6EE6               	movwf	postinc1,c
 16956   0138FC  0E02               	movlw	high _spiReceiveBuffer
 16957   0138FE  6EE6               	movwf	postinc1,c
 16958   013900  0E00               	movlw	low _spiTransmitBuffer
 16959   013902  6EE6               	movwf	postinc1,c
 16960   013904  0E01               	movlw	high _spiTransmitBuffer
 16961   013906  6EE6               	movwf	postinc1,c
 16962   013908  ECC2  F09D         	call	_SpiTransfer	;wreg free
 16963                           
 16964                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16965   01390C  0EFF               	movlw	-1
 16966   01390E  C02C  FFE3         	movff	btemp,plusw1
 16967   013912                     
 16968                           ;can/can.c: 328:     return spiTransferError;
 16969                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16970   013912  0EFF               	movlw	-1
 16971   013914  CFE3 F02C          	movff	plusw1,btemp
 16972   013918                     
 16973                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 16974   013918  0EF6               	movlw	246
 16975   01391A  26E1               	addwf	fsr1l,f,c
 16976   01391C  0EFF               	movlw	255
 16977   01391E  22E2               	addwfc	fsr1h,f,c
 16978   013920  0012               	return		;funcret
 16979   013922                     __end_of_DRV_CANFDSPI_WriteWord:
 16980                           	callstack 0
 16981                           
 16982 ;; *************** function _SpiTransfer *****************
 16983 ;; Defined at:
 16984 ;;		line 132 in file "can/can.c"
 16985 ;; Parameters:    Size  Location     Type
 16986 ;;  txPtr           2  [STACK] PTR unsigned char 
 16987 ;;		 -> spiTransmitBuffer(200), 
 16988 ;;  rxPtr           2  [STACK] PTR unsigned char 
 16989 ;;		 -> spiReceiveBuffer(200), 
 16990 ;;  size            2  [STACK] unsigned short 
 16991 ;; Auto vars:     Size  Location     Type
 16992 ;;  dummy           1  [STACK] volatile unsigned char 
 16993 ;; Return value:  Size  Location     Type
 16994 ;;                  1  [STACK] char 
 16995 ;; Registers used:
 16996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 16997 ;; Tracked objects:
 16998 ;;		On entry : 0/1
 16999 ;;		On exit  : 0/0
 17000 ;;		Unchanged: 0/0
 17001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;Total ram usage:        0 bytes
 17007 ;; Hardware stack levels used: 1
 17008 ;; Hardware stack levels required when called: 7
 17009 ;; This function calls:
 17010 ;;		Nothing
 17011 ;; This function is called by:
 17012 ;;		_DRV_CANFDSPI_Reset
 17013 ;;		_DRV_CANFDSPI_ReadByte
 17014 ;;		_DRV_CANFDSPI_WriteByte
 17015 ;;		_DRV_CANFDSPI_WriteWord
 17016 ;;		_DRV_CANFDSPI_WriteHalfWord
 17017 ;;		_DRV_CANFDSPI_ReadByteArray
 17018 ;;		_DRV_CANFDSPI_WriteByteArray
 17019 ;;		_DRV_CANFDSPI_ReadWordArray
 17020 ;; This function uses a reentrant model
 17021 ;;
 17022                           
 17023                           	psect	text68
 17024   013B84                     __ptext68:
 17025                           	callstack 0
 17026   013B84                     _SpiTransfer:
 17027                           	callstack 0
 17028                           
 17029                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17030   013B84  52E6               	movf	postinc1,f,c
 17031   013B86                     
 17032                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 17033   013B86  988F               	bcf	143,4,c	;volatile
 17034                           
 17035                           ;can/can.c: 136:   while(size > 0)
 17036   013B88  EF0F  F09E         	goto	l3948
 17037   013B8C                     l145:
 17038                           
 17039                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 17040   013B8C  9064               	bcf	100,0,c	;volatile
 17041   013B8E                     
 17042                           ;can/can.c: 139:     dummy = SSP2BUF;
 17043                           ;stkvar	_dummy @ sp[(-1)+0]
 17044   013B8E  0EFF               	movlw	-1
 17045   013B90  CF66 FFE3          	movff	3942,plusw1	;volatile
 17046   013B94                     
 17047                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 17048                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17049   013B94  0EFD               	movlw	-3
 17050   013B96  CFE3 FFD9          	movff	plusw1,fsr2l
 17051   013B9A  0EFE               	movlw	-2
 17052   013B9C  CFE3 FFDA          	movff	plusw1,fsr2h
 17053   013BA0  50DF               	movf	indf2,w,c
 17054   013BA2  6E66               	movwf	102,c	;volatile
 17055   013BA4                     l146:
 17056   013BA4  A064               	btfss	100,0,c	;volatile
 17057   013BA6  EFD7  F09D         	goto	u1601
 17058   013BAA  EFD9  F09D         	goto	u1600
 17059   013BAE                     u1601:
 17060   013BAE  EFD2  F09D         	goto	l146
 17061   013BB2                     u1600:
 17062   013BB2                     
 17063                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 17064                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17065   013BB2  0EFB               	movlw	-5
 17066   013BB4  CFE3 FFD9          	movff	plusw1,fsr2l
 17067   013BB8  0EFC               	movlw	-4
 17068   013BBA  CFE3 FFDA          	movff	plusw1,fsr2h
 17069   013BBE  CF66 FFDF          	movff	3942,indf2	;volatile
 17070   013BC2                     
 17071                           ;can/can.c: 143:     txPtr++;
 17072                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17073   013BC2  0EFD               	movlw	-3
 17074   013BC4  50E3               	movf	plusw1,w,c
 17075   013BC6  0F01               	addlw	1
 17076   013BC8  6E2C               	movwf	btemp^0,c
 17077   013BCA  0EFD               	movlw	-3
 17078   013BCC  C02C  FFE3         	movff	btemp,plusw1
 17079   013BD0  6A2C               	clrf	btemp^0,c
 17080   013BD2  0EFE               	movlw	-2
 17081   013BD4  50E3               	movf	plusw1,w,c
 17082   013BD6  202C               	addwfc	btemp^0,w,c
 17083   013BD8  6E2C               	movwf	btemp^0,c
 17084   013BDA  0EFE               	movlw	-2
 17085   013BDC  C02C  FFE3         	movff	btemp,plusw1
 17086   013BE0                     
 17087                           ;can/can.c: 144:     rxPtr++;
 17088                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17089   013BE0  0EFB               	movlw	-5
 17090   013BE2  50E3               	movf	plusw1,w,c
 17091   013BE4  0F01               	addlw	1
 17092   013BE6  6E2C               	movwf	btemp^0,c
 17093   013BE8  0EFB               	movlw	-5
 17094   013BEA  C02C  FFE3         	movff	btemp,plusw1
 17095   013BEE  6A2C               	clrf	btemp^0,c
 17096   013BF0  0EFC               	movlw	-4
 17097   013BF2  50E3               	movf	plusw1,w,c
 17098   013BF4  202C               	addwfc	btemp^0,w,c
 17099   013BF6  6E2C               	movwf	btemp^0,c
 17100   013BF8  0EFC               	movlw	-4
 17101   013BFA  C02C  FFE3         	movff	btemp,plusw1
 17102   013BFE                     
 17103                           ;can/can.c: 145:     size--;
 17104                           ;stkvar	_size @ sp[(-1)+-6]
 17105   013BFE  0EF9               	movlw	-7
 17106   013C00  CFE3 F02C          	movff	plusw1,btemp
 17107   013C04  0E01               	movlw	1
 17108   013C06  5E2C               	subwf	btemp^0,f,c
 17109   013C08  0EF9               	movlw	-7
 17110   013C0A  C02C  FFE3         	movff	btemp,plusw1
 17111   013C0E  0EFA               	movlw	-6
 17112   013C10  CFE3 F02C          	movff	plusw1,btemp
 17113   013C14  0E00               	movlw	0
 17114   013C16  5A2C               	subwfb	btemp^0,f,c
 17115   013C18  0EFA               	movlw	-6
 17116   013C1A  C02C  FFE3         	movff	btemp,plusw1
 17117   013C1E                     l3948:
 17118                           
 17119                           ;can/can.c: 136:   while(size > 0)
 17120                           ;stkvar	_size @ sp[(-1)+-6]
 17121   013C1E  0EF9               	movlw	-7
 17122   013C20  CFE3 F02C          	movff	plusw1,btemp
 17123   013C24  0EFA               	movlw	-6
 17124   013C26  50E3               	movf	plusw1,w,c
 17125   013C28  102C               	iorwf	btemp^0,w,c
 17126   013C2A  A4D8               	btfss	status,2,c
 17127   013C2C  EF1A  F09E         	goto	u1611
 17128   013C30  EF1C  F09E         	goto	u1610
 17129   013C34                     u1611:
 17130   013C34  EFC6  F09D         	goto	l145
 17131   013C38                     u1610:
 17132   013C38                     
 17133                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17134   013C38  888F               	bsf	143,4,c	;volatile
 17135   013C3A                     
 17136                           ;can/can.c: 148:   return 0;
 17137   013C3A  0E00               	movlw	0
 17138   013C3C  6E2C               	movwf	btemp^0,c
 17139   013C3E                     
 17140                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17141   013C3E  0EF9               	movlw	249
 17142   013C40  26E1               	addwf	fsr1l,f,c
 17143   013C42  0EFF               	movlw	255
 17144   013C44  22E2               	addwfc	fsr1h,f,c
 17145   013C46  0012               	return		;funcret
 17146   013C48                     __end_of_SpiTransfer:
 17147                           	callstack 0
 17148                           
 17149 ;; *************** function _INTERRUPT_InterruptManager *****************
 17150 ;; Defined at:
 17151 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;		None
 17154 ;; Auto vars:     Size  Location     Type
 17155 ;;		None
 17156 ;; Return value:  Size  Location     Type
 17157 ;;                  1    wreg      void 
 17158 ;; Registers used:
 17159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17160 ;; Tracked objects:
 17161 ;;		On entry : 0/0
 17162 ;;		On exit  : 0/0
 17163 ;;		Unchanged: 0/0
 17164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17167 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17168 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17169 ;;Total ram usage:       16 bytes
 17170 ;; Hardware stack levels used: 1
 17171 ;; Hardware stack levels required when called: 6
 17172 ;; This function calls:
 17173 ;;		_TMR0_ISR
 17174 ;; This function is called by:
 17175 ;;		Interrupt level 2
 17176 ;; This function uses a non-reentrant model
 17177 ;;
 17178                           
 17179                           	psect	intcode
 17180   000008                     __pintcode:
 17181                           	callstack 0
 17182   000008                     _INTERRUPT_InterruptManager:
 17183                           	callstack 16
 17184                           
 17185                           ;incstack = 0
 17186   000008  CFFA F04C          	movff	pclath,??_INTERRUPT_InterruptManager
 17187   00000C  CFFB F04D          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17188   000010  CFE9 F04E          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17189   000014  CFEA F04F          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17190   000018  CFE1 F050          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17191   00001C  CFE2 F051          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17192   000020  CFD9 F052          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17193   000024  CFDA F053          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17194   000028  CFF3 F054          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17195   00002C  CFF4 F055          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17196   000030  C02C  F056         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17197   000034  C02D  F057         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17198   000038  C034  F058         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17199   00003C  C035  F059         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17200   000040  C036  F05A         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17201   000044  C037  F05B         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17202   000048  EE19  F031         	lfsr	1,___inthi_sp
 17203   00004C                     
 17204                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17205   00004C  AAF2               	btfss	242,5,c	;volatile
 17206   00004E  EF2B  F000         	goto	i2u307_41
 17207   000052  EF2D  F000         	goto	i2u307_40
 17208   000056                     i2u307_41:
 17209   000056  EF36  F000         	goto	i2l1039
 17210   00005A                     i2u307_40:
 17211   00005A  A4F2               	btfss	242,2,c	;volatile
 17212   00005C  EF32  F000         	goto	i2u308_41
 17213   000060  EF34  F000         	goto	i2u308_40
 17214   000064                     i2u308_41:
 17215   000064  EF36  F000         	goto	i2l1039
 17216   000068                     i2u308_40:
 17217   000068                     
 17218                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17219   000068  EC54  F0A4         	call	_TMR0_ISR	;wreg free
 17220   00006C                     i2l1039:
 17221   00006C  C05B  F037         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17222   000070  C05A  F036         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17223   000074  C059  F035         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17224   000078  C058  F034         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17225   00007C  C057  F02D         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17226   000080  C056  F02C         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17227   000084  C055  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17228   000088  C054  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17229   00008C  C053  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17230   000090  C052  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17231   000094  C051  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17232   000098  C050  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17233   00009C  C04F  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17234   0000A0  C04E  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17235   0000A4  C04D  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17236   0000A8  C04C  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17237   0000AC  0011               	retfie		f
 17238   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17239                           	callstack 0
 17240                           
 17241 ;; *************** function _TMR0_ISR *****************
 17242 ;; Defined at:
 17243 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17244 ;; Parameters:    Size  Location     Type
 17245 ;;		None
 17246 ;; Auto vars:     Size  Location     Type
 17247 ;;		None
 17248 ;; Return value:  Size  Location     Type
 17249 ;;                  1  [STACK] void 
 17250 ;; Registers used:
 17251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17252 ;; Tracked objects:
 17253 ;;		On entry : 0/0
 17254 ;;		On exit  : 0/0
 17255 ;;		Unchanged: 0/0
 17256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17261 ;;Total ram usage:        0 bytes
 17262 ;; Hardware stack levels used: 1
 17263 ;; Hardware stack levels required when called: 5
 17264 ;; This function calls:
 17265 ;;		_TMR0_CallBack
 17266 ;; This function is called by:
 17267 ;;		_INTERRUPT_InterruptManager
 17268 ;; This function uses a reentrant model
 17269 ;;
 17270                           
 17271                           	psect	text70
 17272   0148A8                     __ptext70:
 17273                           	callstack 0
 17274   0148A8                     _TMR0_ISR:
 17275                           	callstack 16
 17276   0148A8                     
 17277                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17278   0148A8  94F2               	bcf	242,2,c	;volatile
 17279                           
 17280                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17281   0148AA  C023  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17282                           
 17283                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17284   0148AE  C022  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17285   0148B2                     
 17286                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17287   0148B2  0E01               	movlw	1
 17288   0148B4  6E17               	movwf	(_carState+22)^0,c
 17289   0148B6                     
 17290                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17291   0148B6  4A20               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17292   0148B8  2A21               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17293   0148BA  5020               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17294   0148BC  1021               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17295   0148BE  B4D8               	btfsc	status,2,c
 17296   0148C0  EF64  F0A4         	goto	u297_41
 17297   0148C4  EF66  F0A4         	goto	u297_40
 17298   0148C8                     u297_41:
 17299   0148C8  EF6A  F0A4         	goto	l1085
 17300   0148CC                     u297_40:
 17301   0148CC                     
 17302                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17303   0148CC  EC23  F0A4         	call	_TMR0_CallBack	;wreg free
 17304   0148D0                     
 17305                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17306   0148D0  6A20               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17307   0148D2  6A21               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17308   0148D4                     l1085:
 17309                           
 17310                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17311   0148D4  0012               	return		;funcret
 17312   0148D6                     __end_of_TMR0_ISR:
 17313                           	callstack 0
 17314                           
 17315 ;; *************** function _TMR0_CallBack *****************
 17316 ;; Defined at:
 17317 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17318 ;; Parameters:    Size  Location     Type
 17319 ;;		None
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;		None
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1  [STACK] void 
 17324 ;; Registers used:
 17325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17326 ;; Tracked objects:
 17327 ;;		On entry : 0/0
 17328 ;;		On exit  : 0/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;Total ram usage:        0 bytes
 17336 ;; Hardware stack levels used: 1
 17337 ;; Hardware stack levels required when called: 4
 17338 ;; This function calls:
 17339 ;;		NULL
 17340 ;;		_TMR0_DefaultInterruptHandler
 17341 ;;		_XF_decrementAndQueueTimers
 17342 ;; This function is called by:
 17343 ;;		_TMR0_ISR
 17344 ;; This function uses a reentrant model
 17345 ;;
 17346                           
 17347                           	psect	text71
 17348   014846                     __ptext71:
 17349                           	callstack 0
 17350   014846                     _TMR0_CallBack:
 17351                           	callstack 16
 17352   014846                     
 17353                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17354   014846  0E01               	movlw	1
 17355   014848  6E16               	movwf	(_carState+21)^0,c
 17356   01484A                     
 17357                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17358   01484A  505C               	movf	_TMR0_InterruptHandler^0,w,c
 17359   01484C  105D               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17360   01484E  105E               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17361   014850  B4D8               	btfsc	status,2,c
 17362   014852  EF2D  F0A4         	goto	u276_41
 17363   014856  EF2F  F0A4         	goto	u276_40
 17364   01485A                     u276_41:
 17365   01485A  EF3C  F0A4         	goto	l1089
 17366   01485E                     u276_40:
 17367   01485E                     
 17368                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17369   01485E  D802               	call	u277_48
 17370   014860  EF3C  F0A4         	goto	u277_49
 17371   014864                     u277_48:
 17372   014864  0005               	push	
 17373   014866  6EFA               	movwf	pclath,c
 17374   014868  505C               	movf	_TMR0_InterruptHandler^0,w,c
 17375   01486A  6EFD               	movwf	tosl,c
 17376   01486C  505D               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17377   01486E  6EFE               	movwf	tosh,c
 17378   014870  505E               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17379   014872  6EFF               	movwf	tosu,c
 17380   014874  50FA               	movf	pclath,w,c
 17381   014876  0012               	return		;indir
 17382   014878                     u277_49:
 17383   014878                     l1089:
 17384                           
 17385                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17386   014878  0012               	return		;funcret
 17387   01487A                     __end_of_TMR0_CallBack:
 17388                           	callstack 0
 17389                           
 17390 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17391 ;; Defined at:
 17392 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17393 ;; Parameters:    Size  Location     Type
 17394 ;;		None
 17395 ;; Auto vars:     Size  Location     Type
 17396 ;;		None
 17397 ;; Return value:  Size  Location     Type
 17398 ;;                  1  [STACK] void 
 17399 ;; Registers used:
 17400 ;;		None
 17401 ;; Tracked objects:
 17402 ;;		On entry : 0/0
 17403 ;;		On exit  : 0/0
 17404 ;;		Unchanged: 0/0
 17405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17410 ;;Total ram usage:        0 bytes
 17411 ;; Hardware stack levels used: 1
 17412 ;; This function calls:
 17413 ;;		Nothing
 17414 ;; This function is called by:
 17415 ;;		_TMR0_Initialize
 17416 ;;		_TMR0_CallBack
 17417 ;; This function uses a reentrant model
 17418 ;;
 17419                           
 17420                           	psect	text72
 17421   014A16                     __ptext72:
 17422                           	callstack 0
 17423   014A16                     _TMR0_DefaultInterruptHandler:
 17424                           	callstack 19
 17425   014A16                     
 17426                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17427   014A16  0012               	return		;funcret
 17428   014A18                     __end_of_TMR0_DefaultInterruptHandler:
 17429                           	callstack 0
 17430                           
 17431 ;; *************** function _XF_decrementAndQueueTimers *****************
 17432 ;; Defined at:
 17433 ;;		line 217 in file "xf/xf.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;		None
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  dummy           1  [STACK] unsigned char 
 17438 ;;  i               1  [STACK] unsigned char 
 17439 ;; Return value:  Size  Location     Type
 17440 ;;                  1  [STACK] void 
 17441 ;; Registers used:
 17442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17443 ;; Tracked objects:
 17444 ;;		On entry : 0/0
 17445 ;;		On exit  : 0/0
 17446 ;;		Unchanged: 0/0
 17447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17452 ;;Total ram usage:        0 bytes
 17453 ;; Hardware stack levels used: 1
 17454 ;; Hardware stack levels required when called: 3
 17455 ;; This function calls:
 17456 ;;		_XF_pushEvent
 17457 ;;		_XF_unscheduleTimer
 17458 ;; This function is called by:
 17459 ;;		_main
 17460 ;;		_TMR0_CallBack
 17461 ;; This function uses a reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text73
 17465   013494                     __ptext73:
 17466                           	callstack 0
 17467   013494                     _XF_decrementAndQueueTimers:
 17468                           	callstack 0
 17469                           
 17470                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17471   013494  52E6               	movf	postinc1,f,c
 17472   013496  52E6               	movf	postinc1,f,c
 17473   013498                     
 17474                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17475                           ;stkvar	_i @ sp[(-2)+1]
 17476   013498  0EFF               	movlw	-1
 17477   01349A  6AE3               	clrf	plusw1,c
 17478   01349C                     l4630:
 17479                           
 17480                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17481                           ;stkvar	_i @ sp[(-2)+1]
 17482   01349C  0EFF               	movlw	-1
 17483   01349E  50E3               	movf	plusw1,w,c
 17484   0134A0  0D08               	mullw	8
 17485   0134A2  0ECA               	movlw	low (_theXF+2)
 17486   0134A4  24F3               	addwf	243,w,c
 17487   0134A6  6ED9               	movwf	fsr2l,c
 17488   0134A8  0E02               	movlw	high (_theXF+2)
 17489   0134AA  20F4               	addwfc	prodh,w,c
 17490   0134AC  6EDA               	movwf	fsr2h,c
 17491   0134AE  50DF               	movf	indf2,w,c
 17492   0134B0  B4D8               	btfsc	status,2,c
 17493   0134B2  EF5D  F09A         	goto	u228_41
 17494   0134B6  EF5F  F09A         	goto	u228_40
 17495   0134BA                     u228_41:
 17496   0134BA  EFB9  F09A         	goto	l4642
 17497   0134BE                     u228_40:
 17498   0134BE                     
 17499                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17500                           ;stkvar	_i @ sp[(-2)+1]
 17501   0134BE  0EFF               	movlw	-1
 17502   0134C0  50E3               	movf	plusw1,w,c
 17503   0134C2  0D08               	mullw	8
 17504   0134C4  0EC8               	movlw	low _theXF
 17505   0134C6  24F3               	addwf	243,w,c
 17506   0134C8  6ED9               	movwf	fsr2l,c
 17507   0134CA  0E02               	movlw	high _theXF
 17508   0134CC  20F4               	addwfc	prodh,w,c
 17509   0134CE  6EDA               	movwf	fsr2h,c
 17510   0134D0  0E0A               	movlw	10
 17511   0134D2  5EDE               	subwf	postinc2,f,c
 17512   0134D4  0E00               	movlw	0
 17513   0134D6  5ADD               	subwfb	postdec2,f,c
 17514   0134D8                     
 17515                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17516                           ;stkvar	_i @ sp[(-2)+1]
 17517   0134D8  0EFF               	movlw	-1
 17518   0134DA  50E3               	movf	plusw1,w,c
 17519   0134DC  0D08               	mullw	8
 17520   0134DE  0EC8               	movlw	low _theXF
 17521   0134E0  24F3               	addwf	243,w,c
 17522   0134E2  6ED9               	movwf	fsr2l,c
 17523   0134E4  0E02               	movlw	high _theXF
 17524   0134E6  20F4               	addwfc	prodh,w,c
 17525   0134E8  6EDA               	movwf	fsr2h,c
 17526   0134EA  50DE               	movf	postinc2,w,c
 17527   0134EC  10DE               	iorwf	postinc2,w,c
 17528   0134EE  A4D8               	btfss	status,2,c
 17529   0134F0  EF7C  F09A         	goto	u229_41
 17530   0134F4  EF7E  F09A         	goto	u229_40
 17531   0134F8                     u229_41:
 17532   0134F8  EFB9  F09A         	goto	l4642
 17533   0134FC                     u229_40:
 17534   0134FC                     
 17535                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17536                           ;stkvar	_dummy @ sp[(-2)+0]
 17537   0134FC  0EFE               	movlw	254
 17538   0134FE  24E1               	addwf	fsr1l,w,c
 17539   013500  6E2C               	movwf	btemp^0,c
 17540   013502  0EFF               	movlw	255
 17541   013504  20E2               	addwfc	fsr1h,w,c
 17542   013506  6E2D               	movwf	(btemp+1)^0,c
 17543   013508  C02C  FFE6         	movff	btemp,postinc1
 17544   01350C  C02D  FFE6         	movff	btemp+1,postinc1
 17545   013510  0E01               	movlw	1
 17546   013512  6EE6               	movwf	postinc1,c
 17547                           
 17548                           ;stkvar	_i @ sp[(-5)+1]
 17549   013514  0EFC               	movlw	-4
 17550   013516  50E3               	movf	plusw1,w,c
 17551   013518  0D08               	mullw	8
 17552   01351A  0ECA               	movlw	low (_theXF+2)
 17553   01351C  24F3               	addwf	243,w,c
 17554   01351E  6ED9               	movwf	fsr2l,c
 17555   013520  0E02               	movlw	high (_theXF+2)
 17556   013522  20F4               	addwfc	prodh,w,c
 17557   013524  6EDA               	movwf	fsr2h,c
 17558   013526  0E06               	movlw	6
 17559   013528                     u230_41:
 17560   013528  CFDE FFE6          	movff	postinc2,postinc1
 17561   01352C  2CE8               	decfsz	wreg,w,c
 17562   01352E  EF94  F09A         	goto	u230_41
 17563   013532  EC4B  F095         	call	_XF_pushEvent	;wreg free
 17564   013536  042C               	decf	btemp^0,w,c
 17565   013538  A4D8               	btfss	status,2,c
 17566   01353A  EFA1  F09A         	goto	u231_41
 17567   01353E  EFA3  F09A         	goto	u231_40
 17568   013542                     u231_41:
 17569   013542  EFAC  F09A         	goto	l4640
 17570   013546                     u231_40:
 17571   013546                     
 17572                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 17573   013546  0E01               	movlw	1
 17574   013548  6EE6               	movwf	postinc1,c
 17575                           
 17576                           ;stkvar	_i @ sp[(-3)+1]
 17577   01354A  0EFE               	movlw	-2
 17578   01354C  50E3               	movf	plusw1,w,c
 17579   01354E  6EE6               	movwf	postinc1,c
 17580   013550  EC29  F0A3         	call	_XF_unscheduleTimer	;wreg free
 17581                           
 17582                           ;xf/xf.c: 231:                 }
 17583   013554  EFB9  F09A         	goto	l4642
 17584   013558                     l4640:
 17585                           
 17586                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 17587                           ;stkvar	_i @ sp[(-2)+1]
 17588   013558  0EFF               	movlw	-1
 17589   01355A  50E3               	movf	plusw1,w,c
 17590   01355C  0D08               	mullw	8
 17591   01355E  0EC8               	movlw	low _theXF
 17592   013560  24F3               	addwf	243,w,c
 17593   013562  6ED9               	movwf	fsr2l,c
 17594   013564  0E02               	movlw	high _theXF
 17595   013566  20F4               	addwfc	prodh,w,c
 17596   013568  6EDA               	movwf	fsr2h,c
 17597   01356A  0E01               	movlw	1
 17598   01356C  6EDE               	movwf	postinc2,c
 17599   01356E  0E00               	movlw	0
 17600   013570  6EDD               	movwf	postdec2,c
 17601   013572                     l4642:
 17602                           
 17603                           ;xf/xf.c: 238:     }
 17604                           ;stkvar	_i @ sp[(-2)+1]
 17605   013572  0EFF               	movlw	-1
 17606   013574  2AE3               	incf	plusw1,f,c
 17607   013576                     
 17608                           ;stkvar	_i @ sp[(-2)+1]
 17609   013576  0EFF               	movlw	-1
 17610   013578  CFE3 F02C          	movff	plusw1,btemp
 17611   01357C  0E0B               	movlw	11
 17612   01357E  642C               	cpfsgt	btemp^0,c
 17613   013580  EFC4  F09A         	goto	u232_41
 17614   013584  EFC6  F09A         	goto	u232_40
 17615   013588                     u232_41:
 17616   013588  EF4E  F09A         	goto	l4630
 17617   01358C                     u232_40:
 17618   01358C                     
 17619                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 17620   01358C  52E5               	movf	postdec1,f,c
 17621   01358E  52E5               	movf	postdec1,f,c
 17622   013590  0012               	return		;funcret
 17623   013592                     __end_of_XF_decrementAndQueueTimers:
 17624                           	callstack 0
 17625                           
 17626 ;; *************** function _XF_unscheduleTimer *****************
 17627 ;; Defined at:
 17628 ;;		line 202 in file "xf/xf.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;  id              1  [STACK] unsigned char 
 17631 ;;  inISR           1  [STACK] _Bool 
 17632 ;; Auto vars:     Size  Location     Type
 17633 ;;		None
 17634 ;; Return value:  Size  Location     Type
 17635 ;;                  1  [STACK] void 
 17636 ;; Registers used:
 17637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 17638 ;; Tracked objects:
 17639 ;;		On entry : 0/0
 17640 ;;		On exit  : 0/0
 17641 ;;		Unchanged: 0/0
 17642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17647 ;;Total ram usage:        0 bytes
 17648 ;; Hardware stack levels used: 1
 17649 ;; Hardware stack levels required when called: 1
 17650 ;; This function calls:
 17651 ;;		_ENTERCRITICAL
 17652 ;;		_Event_init
 17653 ;;		_LEAVECRITICAL
 17654 ;; This function is called by:
 17655 ;;		_XF_decrementAndQueueTimers
 17656 ;; This function uses a reentrant model
 17657 ;;
 17658                           
 17659                           	psect	text74
 17660   014652                     __ptext74:
 17661                           	callstack 0
 17662   014652                     _XF_unscheduleTimer:
 17663                           	callstack 17
 17664   014652                     
 17665                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 17666                           ;stkvar	_inISR @ sp[(0)+-2]
 17667   014652  0EFE               	movlw	-2
 17668   014654  50E3               	movf	plusw1,w,c
 17669   014656  6EE6               	movwf	postinc1,c
 17670   014658  ECE0  F0A4         	call	_ENTERCRITICAL	;wreg free
 17671   01465C                     
 17672                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 17673                           ;stkvar	_id @ sp[(0)+-1]
 17674   01465C  0EFF               	movlw	-1
 17675   01465E  50E3               	movf	plusw1,w,c
 17676   014660  0D08               	mullw	8
 17677   014662  0EC8               	movlw	low _theXF
 17678   014664  24F3               	addwf	243,w,c
 17679   014666  6ED9               	movwf	fsr2l,c
 17680   014668  0E02               	movlw	high _theXF
 17681   01466A  20F4               	addwfc	prodh,w,c
 17682   01466C  6EDA               	movwf	fsr2h,c
 17683   01466E  6ADE               	clrf	postinc2,c
 17684   014670  6ADD               	clrf	postdec2,c
 17685   014672                     
 17686                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 17687                           ;stkvar	_id @ sp[(0)+-1]
 17688   014672  0EFF               	movlw	-1
 17689   014674  50E3               	movf	plusw1,w,c
 17690   014676  0D08               	mullw	8
 17691   014678  0ECA               	movlw	low (_theXF+2)
 17692   01467A  24F3               	addwf	243,w,c
 17693   01467C  6E36               	movwf	(btemp+10)^0,c
 17694   01467E  0E02               	movlw	high (_theXF+2)
 17695   014680  20F4               	addwfc	prodh,w,c
 17696   014682  6E37               	movwf	(btemp+11)^0,c
 17697   014684  C036  FFE6         	movff	btemp+10,postinc1
 17698   014688  C037  FFE6         	movff	btemp+11,postinc1
 17699   01468C  EC80  F0A3         	call	_Event_init	;wreg free
 17700   014690                     
 17701                           ;xf/xf.c: 207:     theXF.countTmr--;
 17702   014690  C3E1  FFE8         	movff	_theXF+281,wreg
 17703   014694  0FFF               	addlw	-1
 17704   014696  CFE8 F3E1          	movff	wreg,_theXF+281
 17705   01469A                     
 17706                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 17707                           ;stkvar	_inISR @ sp[(0)+-2]
 17708   01469A  0EFE               	movlw	-2
 17709   01469C  50E3               	movf	plusw1,w,c
 17710   01469E  6EE6               	movwf	postinc1,c
 17711   0146A0  ECD4  F0A4         	call	_LEAVECRITICAL	;wreg free
 17712   0146A4                     
 17713                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17714   0146A4  52E5               	movf	postdec1,f,c
 17715   0146A6  52E5               	movf	postdec1,f,c
 17716   0146A8  0012               	return		;funcret
 17717   0146AA                     __end_of_XF_unscheduleTimer:
 17718                           	callstack 0
 17719                           
 17720                           	psect	rparam
 17721   000001                     ___rparam_used  equ	1
 17722   000000                     ___param_bank   equ	0
 17723   000000                     __Lparam        equ	__Lrparam
 17724   000000                     __Hparam        equ	__Hrparam
 17725                           
 17726                           	psect	temp
 17727   00002C                     btemp:
 17728                           	callstack 0
 17729   00002C                     	ds	32
 17730   00002C                     wtemp0          set	btemp
 17731   00002E                     wtemp1          set	btemp+2
 17732   000030                     wtemp2          set	btemp+4
 17733   000032                     wtemp3          set	btemp+6
 17734   000034                     wtemp4          set	btemp+8
 17735   000036                     wtemp5          set	btemp+10
 17736   00002D                     wtemp8          set	btemp+1
 17737   00002C                     ttemp0          set	btemp
 17738   00002F                     ttemp1          set	btemp+3
 17739   000032                     ttemp2          set	btemp+6
 17740   000035                     ttemp3          set	btemp+9
 17741   00002D                     ttemp5          set	btemp+1
 17742   000030                     ttemp6          set	btemp+4
 17743   000034                     ttemp7          set	btemp+8
 17744   00002C                     ltemp0          set	btemp
 17745   000030                     ltemp1          set	btemp+4
 17746   000034                     ltemp2          set	btemp+8
 17747   00002C                     lltemp0         set	btemp
 17748   000034                     lltemp1         set	btemp+8
 17749   00003C                     lltemp2         set	btemp+16
 17750   000044                     lltemp3         set	btemp+24
 17751                           
 17752                           	psect	config
 17753                           
 17754                           ;Config register CONFIG1L @ 0x1FFF8
 17755                           ;	Watchdog Timer Enable bit
 17756                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 17757                           ;	Stack Overflow/Underflow Reset Enable bit
 17758                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17759                           ;	Extended Instruction Set Enable bit
 17760                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17761                           ;	Background Debugger Enable bit
 17762                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17763   01FFF8                     	org	131064
 17764   01FFF8  A0                 	db	160
 17765                           
 17766                           ;Config register CONFIG1H @ 0x1FFF9
 17767                           ;	Code Protection bit
 17768                           ;	CP0 = OFF, Program memory is not code-protected
 17769   01FFF9                     	org	131065
 17770   01FFF9  F4                 	db	244
 17771                           
 17772                           ;Config register CONFIG2L @ 0x1FFFA
 17773                           ;	Oscillator Selection bits
 17774                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17775                           ;	Default/Reset System Clock Select bit
 17776                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17777                           ;	Fail-Safe Clock Monitor Enable
 17778                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17779                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17780                           ;	IESO = ON, Two-Speed Start-up enabled
 17781   01FFFA                     	org	131066
 17782   01FFFA  C5                 	db	197
 17783                           
 17784                           ;Config register CONFIG2H @ 0x1FFFB
 17785                           ;	Watchdog Timer Postscaler Select bits
 17786                           ;	WDTPS = 32768, 1:32768
 17787   01FFFB                     	org	131067
 17788   01FFFB  FF                 	db	255
 17789                           
 17790                           ;Config register CONFIG3L @ 0x1FFFC
 17791                           ;	External Address Bus Shift Enable bit
 17792                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17793                           ;	External Memory Bus
 17794                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17795                           ;	Data Bus Width Select bit
 17796                           ;	BW = 16, 16-Bit Data Width mode
 17797                           ;	External Bus Wait Enable bit
 17798                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17799   01FFFC                     	org	131068
 17800   01FFFC  F8                 	db	248
 17801                           
 17802                           ;Config register CONFIG3H @ 0x1FFFD
 17803                           ;	ECCP2 MUX bit
 17804                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17805                           ;	ECCP MUX bit
 17806                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17807                           ;	Ethernet LED Enable bit
 17808                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17809   01FFFD                     	org	131069
 17810   01FFFD  F7                 	db	247
 17811                           tosu	equ	0xFFF
 17812                           tosh	equ	0xFFE
 17813                           tosl	equ	0xFFD
 17814                           stkptr	equ	0xFFC
 17815                           pclatu	equ	0xFFB
 17816                           pclath	equ	0xFFA
 17817                           pcl	equ	0xFF9
 17818                           tblptru	equ	0xFF8
 17819                           tblptrh	equ	0xFF7
 17820                           tblptrl	equ	0xFF6
 17821                           tablat	equ	0xFF5
 17822                           prodh	equ	0xFF4
 17823                           prodl	equ	0xFF3
 17824                           indf0	equ	0xFEF
 17825                           postinc0	equ	0xFEE
 17826                           postdec0	equ	0xFED
 17827                           preinc0	equ	0xFEC
 17828                           plusw0	equ	0xFEB
 17829                           fsr0h	equ	0xFEA
 17830                           fsr0l	equ	0xFE9
 17831                           wreg	equ	0xFE8
 17832                           indf1	equ	0xFE7
 17833                           postinc1	equ	0xFE6
 17834                           postdec1	equ	0xFE5
 17835                           preinc1	equ	0xFE4
 17836                           plusw1	equ	0xFE3
 17837                           fsr1h	equ	0xFE2
 17838                           fsr1l	equ	0xFE1
 17839                           bsr	equ	0xFE0
 17840                           indf2	equ	0xFDF
 17841                           postinc2	equ	0xFDE
 17842                           postdec2	equ	0xFDD
 17843                           preinc2	equ	0xFDC
 17844                           plusw2	equ	0xFDB
 17845                           fsr2h	equ	0xFDA
 17846                           fsr2l	equ	0xFD9
 17847                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        0
    BSS         773
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      62
    BANK0           160      0      48
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5588 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5580 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   26607
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4664
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1392
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     987
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   10903
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 4     2      2    3554
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        26    24      2    3464
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6808
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1387
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1387
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1387
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1387
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     987
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      48     30.0%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      62     98.4%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     253      0.0%
DATA                 0      0    1045      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Mar 04 16:40:33 2025

                                  __end_of_updateCarState 2268  
                                              _CanReceive 44C8  
                                         _timer0ReloadVal 0022  
                                                     l150 3C3E  
                                                     l222 43E2  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3B8C  
                                                     l401 3CF6  
                                                     l161 44BE  
                                                     l146 3BA4  
                                                     l218 1C0E  
                                                     l154 2068  
                                                     l322 14A8  
                                                     l171 45E8  
                                                     l251 2A8C  
                                                     l412 4586  
                                                     l260 3676  
                                                     l149 3C38  
                                                     l317 1174  
                                                     l165 4522  
                                                     l174 46F6  
                                                     l254 3266  
                                                     l158 4066  
                                                     l327 4238  
                                                     l184 3B7A  
                                                     l168 4900  
                                                     l336 42CA  
                                                     l264 0742  
                                                     l257 312C  
                                                     l193 290A  
                                                     l346 2FEC  
                                                     l179 3918  
                                                     l453 41A2  
                                                     l293 3FBC  
                                                     l357 0E2A  
                                                     l623 464C  
                                                     l199 3380  
                                                     l482 410A  
                                                     l643 4988  
                                                     l635 4920  
                                                     l379 4454  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 243C  
                                                     l976 49EC  
                                                     l979 4A04  
                                                     u815 1A4C  
                                                     u825 1A70  
                                                     u835 1A92  
                                                     u845 1AF4  
                                                     u855 1B22  
                                                     u865 1B50  
                                                     u875 1B7E  
                                                     u885 1BAC  
                                                     u895 1BDA  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4590  
                          _DRV_CANFDSPI_ModuleEventEnable 452C  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 41AC  
                    _DRV_CANFDSPI_TransmitChannelEventGet 4114  
                                                    l1020 48A6  
                                                    l1120 3DB2  
                                                    l1032 4A14  
                                                    l1200 4A0C  
                                                    l1201 4A0C  
                                                    l1116 49FC  
                                                    l1206 4A06  
                                                    l1215 2D4C  
                                                    l1207 4A06  
                                                    l1231 3758  
                                                    l1223 2C0C  
                                                    l1064 480C  
                                                    l1216 2D64  
                                                    l3010 1A4C  
                                                    l1250 49D4  
                                                    l1162 47CA  
                                                    l1234 3760  
                                                    l1227 3AB0  
                                                    l3020 1B22  
                                                    l3012 1A70  
                                                    l3004 19C2  
                                                    l1092 496A  
                                                    l1237 46A4  
                                                    l1085 48D4  
                                                    l1261 435A  
                                                    l1246 358C  
                                                    l3022 1B50  
                                                    l3014 1A92  
                                                    l3006 19FE  
                                                    l1254 49BC  
                                                    l1174 483C  
                                                    l1095 4A16  
                                                    l1159 4748  
                                                    l3024 1B7E  
                                                    l3016 1AC6  
                                                    l3008 1A28  
                                                    l4000 45A8  
                                                    l3120 31F8  
                                                    l3112 313E  
                                                    l1168 49A0  
                                                    l1089 4878  
                                                    l1441 3E60  
                                                    l1433 3F0E  
                                                    l1425 3840  
                                                    l1177 494A  
                                                    l1257 39E4  
                                                    l1513 225E  
                                                    l3026 1BAC  
                                                    l3018 1AF4  
                                                    l4002 45AE  
                                                    l3122 322C  
                                                    l3114 317A  
                                                    l1506 225E  
                                                    l3028 1BDA  
                                                    l4004 45B0  
                                                    l3116 319E  
                                                    l4100 2312  
                                                    l4020 32B2  
                                                    l4012 3278  
                                                    l4006 45D2  
                                                    l3118 31C8  
                                                    l4102 2338  
                                                    l4030 337A  
                                                    l4022 32CA  
                                                    l4014 3296  
                                                    l1462 277E  
                                                    l1463 277A  
                                                    l4008 45E2  
                                                    l3080 35D6  
                                                    l5000 41B2  
                                                    l4104 235E  
                                                    l4112 23D0  
                                                    l4040 14FC  
                                                    l4024 330A  
                                                    l4016 3296  
                                                    l4200 05AE  
                                                    l3082 35F4  
                                                    l5010 4224  
                                                    l5002 41C4  
                                                    l4122 49C0  
                                                    l4106 2384  
                                                    l4114 2424  
                                                    l4050 1580  
                                                    l4042 1502  
                                                    l4034 14BA  
                                                    l4026 3328  
                                                    l4018 32AC  
                                                    l4210 0634  
                                                    l4202 05E4  
                                                    l4130 0008  
                                                    l1490 2572  
                                                    l1491 25E8  
                                                    l3084 3620  
                                                    l5004 41D8  
                                                    l4124 49D2  
                                                    l4108 23AA  
                                                    l4060 15D4  
                                                    l4052 15A4  
                                                    l4044 151A  
                                                    l4036 14E6  
                                                    l4028 3356  
                                                    l4212 0646  
                                                    l4220 06A2  
                                                    l4204 05EC  
                                                    l4132 0008  
                                                    l5100 2640  
                                                    l5020 4516  
                                                    l4300 3742  
                                                    l3086 364A  
                                                    l3078 359A  
                                                    l5006 41E8  
                                                    l3350 49F6  
                                                    l5030 47D6  
                                                    l4126 49A8  
                                                    l4310 2D72  
                                                    l4070 1638  
                                                    l4062 15E0  
                                                    l4054 15B6  
                                                    l4046 1534  
                                                    l4038 14E6  
                                                    l4230 0722  
                                                    l4222 06F2  
                                                    l4214 064E  
                                                    l4206 05EC  
                                                    l4150 00C8  
                                                    l4142 0074  
                                                    l4134 002A  
                                                    l5110 26D8  
                                                    l5102 266A  
                                                    l5014 44CA  
                                                    l5200 1EA6  
                                                    l5008 4206  
                                                    l3360 4894  
                                                    l3352 49F8  
                                                    l5040 4808  
                                                    l5032 47DE  
                                                    l4128 49BA  
                                                    l1760 2EAA  
                                                    l4320 2DB0  
                                                    l4312 2D82  
                                                    l4240 411C  
                                                    l4072 1656  
                                                    l4080 16FE  
                                                    l4048 1552  
                                                    l4232 0734  
                                                    l4224 0704  
                                                    l4216 067C  
                                                    l4208 0604  
                                                    l4160 0172  
                                                    l4152 0102  
                                                    l4144 00A4  
                                                    l4136 005A  
                                                    l5112 26F4  
                                                    l5104 267C  
                                                    l5024 451E  
                                                    l5016 44E6  
                                                    l5042 4846  
                                                    l5210 1F00  
                                                    l5202 1EB4  
                                                    l3346 4A12  
                                                    l3370 49FE  
                                                    l3362 4896  
                                                    l3354 49FA  
                                                    l5034 47F4  
                                                    l4330 2E06  
                                                    l4322 2DCA  
                                                    l4314 2D8E  
                                                    l5050 39FA  
                                                    l4250 416E  
                                                    l4242 411C  
                                                    l4090 2282  
                                                    l4074 1674  
                                                    l4058 15C0  
                                                    l4218 0680  
                                                    l4170 0236  
                                                    l4162 01A2  
                                                    l4154 0136  
                                                    l4146 00C0  
                                                    l4138 006C  
                                                    l5122 2730  
                                                    l5114 2708  
                                                    l5106 269A  
                                                    l5018 44F6  
                                                    l4410 2B3A  
                                                    l4402 2A9C  
                                                    l5044 484A  
                                                    l5220 1F56  
                                                    l5212 1F18  
                                                    l5204 1EC2  
                                                    l3372 4A00  
                                                    l3364 4898  
                                                    l3356 487A  
                                                    l3348 49EE  
                                                    l5036 47F6  
                                                    l5028 47D4  
                                                    l4340 2E92  
                                                    l4332 2E34  
                                                    l4324 2DD4  
                                                    l4316 2D94  
                                                    l4308 2D6E  
                                                    l5052 3A0C  
                                                    l4252 4180  
                                                    l4244 411C  
                                                    l4092 2284  
                                                    l4076 1692  
                                                    l4068 15F8  
                                                    l4236 073C  
                                                    l4228 070C  
                                                    l4180 03C4  
                                                    l4172 0278  
                                                    l4164 01C0  
                                                    l5124 2740  
                                                    l5108 26B0  
                                                    l5140 244A  
                                                    l5300 2D26  
                                                    l4500 08FA  
                                                    l4420 2B9A  
                                                    l4412 2B44  
                                                    l4404 2AC0  
                                                    l5046 485E  
                                                    l5230 1FBC  
                                                    l5222 1F6E  
                                                    l5214 1F30  
                                                    l5206 1EDA  
                                                    l3366 489A  
                                                    l3358 4890  
                                                    l5038 47F8  
                                                    l4342 2E9E  
                                                    l4334 2E58  
                                                    l4326 2DF2  
                                                    l4318 2DA4  
                                                    l5062 3A54  
                                                    l5054 3A16  
                                                    l4246 412C  
                                                    l4094 229A  
                                                    l4086 2270  
                                                    l4078 16E0  
                                                    l4190 04BC  
                                                    l4182 03E0  
                                                    l4166 01E6  
                                                    l4174 02EA  
                                                    l4158 013E  
                                                    l4350 400C  
                                                    l5118 271A  
                                                    l5142 2468  
                                                    l5302 42DC  
                                                    l4262 4700  
                                                    l4510 0974  
                                                    l4502 0904  
                                                    l4270 492A  
                                                    l4422 2B9E  
                                                    l4414 2B72  
                                                    l4430 2C08  
                                                    l4406 2ADA  
                                                    l4440 4690  
                                                    l4600 3AEC  
                                                    l5240 201A  
                                                    l5232 1FD8  
                                                    l5224 1F86  
                                                    l5216 1F36  
                                                    l5208 1EF0  
                                                    l3368 48A0  
                                                    l4336 2E62  
                                                    l4328 2DF6  
                                                    l5064 3A78  
                                                    l5056 3A2A  
                                                    l5048 39F6  
                                                    l4256 4188  
                                                    l4248 4146  
                                                    l4096 22C6  
                                                    l4088 2280  
                                                    l4192 050A  
                                                    l4184 03FC  
                                                    l4176 039A  
                                                    l4168 01FC  
                                                    l4352 401C  
                                                    l5128 2750  
                                                    l5160 2500  
                                                    l5152 24B8  
                                                    l5144 2470  
                                                    l5304 4300  
                                                    l4264 470E  
                                                    l4360 27AE  
                                                    l4520 0C50  
                                                    l4512 099A  
                                                    l4504 0936  
                                                    l4280 3690  
                                                    l4424 2BCA  
                                                    l4416 2B76  
                                                    l4408 2AFA  
                                                    l5080 3970  
                                                    l5320 214A  
                                                    l5312 20BA  
                                                    l4442 469A  
                                                    l4434 4652  
                                                    l4610 3B36  
                                                    l4602 3AF2  
                                                    l5250 2060  
                                                    l5242 2026  
                                                    l5234 1FE8  
                                                    l5226 1F9A  
                                                    l5218 1F46  
                                                    l4338 2E80  
                                                    l5066 3AA2  
                                                    l5058 3A34  
                                                    l4258 419C  
                                                    l4098 22EC  
                                                    l4194 0558  
                                                    l4178 03B8  
                                                    l4186 0448  
                                                    l4346 3FC8  
                                                    l5090 25F6  
                                                    l5154 24D6  
                                                    l5146 248E  
                                                    l5138 2446  
                                                    l5306 4320  
                                                    l4266 472A  
                                                    l4370 281A  
                                                    l4362 27C4  
                                                    l4530 0CD6  
                                                    l4522 0C6C  
                                                    l4514 0A70  
                                                    l4290 372A  
                                                    l4282 36B2  
                                                    l4274 3682  
                                                    l4426 2BF4  
                                                    l4418 2B80  
                                                    l5082 398E  
                                                    l5074 392A  
                                                    l5330 21BC  
                                                    l5322 2150  
                                                    l5314 20C0  
                                                    l4436 465C  
                                                    l4612 3B3A  
                                                    l4700 48DC  
                                                    l5244 203A  
                                                    l5236 1FF8  
                                                    l5228 1FAA  
                                                    l5252 445E  
                                                    l5260 49D8  
                                                    l4196 0560  
                                                    l4188 0470  
                                                    l4348 3FF0  
                                                    l5092 2614  
                                                    l5172 257A  
                                                    l5180 25AE  
                                                    l5156 24DE  
                                                    l5148 2496  
                                                    l4452 408E  
                                                    l4444 4078  
                                                    l4380 28D6  
                                                    l4372 2848  
                                                    l4364 27CA  
                                                    l4356 2790  
                                                    l4532 0D0C  
                                                    l4524 0C82  
                                                    l4540 0D88  
                                                    l4516 0BF0  
                                                    l4508 094C  
                                                    l4620 4798  
                                                    l4268 480E  
                                                    l4292 3734  
                                                    l4284 3702  
                                                    l4428 2BFE  
                                                    l5084 39B0  
                                                    l5076 3932  
                                                    l5332 21C2  
                                                    l5324 2166  
                                                    l5316 20D2  
                                                    l5308 207A  
                                                    l4438 4672  
                                                    l4630 349C  
                                                    l5270 48B6  
                                                    l4710 1C60  
                                                    l4614 3B50  
                                                    l4702 48E4  
                                                    l5246 203E  
                                                    l5238 1FFE  
                                                    l5190 1E6C  
                                                    l5254 4468  
                                                    l5262 49DC  
                                                    l4198 05AA  
                                                    l5094 261C  
                                                    l5174 258E  
                                                    l5166 2522  
                                                    l4462 40F6  
                                                    l4454 409E  
                                                    l4446 4078  
                                                    l4382 2904  
                                                    l4374 286C  
                                                    l4366 27E2  
                                                    l4358 27AE  
                                                    l4390 43F2  
                                                    l4542 0DA8  
                                                    l4550 0E20  
                                                    l4534 0D14  
                                                    l4526 0C9E  
                                                    l4518 0C1A  
                                                    l4470 0776  
                                                    l4622 498E  
                                                    l4286 370C  
                                                    l5078 394A  
                                                    l5326 2186  
                                                    l5318 210E  
                                                    l4640 3558  
                                                    l4632 34BE  
                                                    l4624 3498  
                                                    l5272 48CC  
                                                    l4720 1D2A  
                                                    l4712 1C92  
                                                    l4616 3B74  
                                                    l4608 3AF6  
                                                    l4560 3D52  
                                                    l4800 30E8  
                                                    l5248 2050  
                                                    l5192 1E70  
                                                    l5256 447C  
                                                    l5264 49E8  
                                                    l5096 263A  
                                                    l5088 25F2  
                                                    l5600 25C2  
                                                    l5176 25A2  
                                                    l5168 255C  
                                                    l4456 40B8  
                                                    l4448 4078  
                                                    l4376 2878  
                                                    l4368 27FC  
                                                    l4392 4402  
                                                    l4544 0DB0  
                                                    l4536 0D5E  
                                                    l4528 0CBA  
                                                    l4472 07A6  
                                                    l4288 3726  
                                                    l5328 219C  
                                                    l5336 21E2  
                                                    l5360 3392  
                                                    l4634 34D8  
                                                    l4642 3572  
                                                    l5274 48D0  
                                                    l5266 48A8  
                                                    l4570 3866  
                                                    l4722 1D44  
                                                    l4714 1CAC  
                                                    l4730 1D90  
                                                    l4706 1C20  
                                                    l4562 3D7A  
                                                    l4810 291C  
                                                    l4802 310E  
                                                    l5194 1E74  
                                                    l5258 44AC  
                                                    l2882 4950  
                                                    l4650 379A  
                                                    l5602 2654  
                                                    l5282 2C22  
                                                    l4458 40E0  
                                                    l4378 28B8  
                                                    l4394 441C  
                                                    l4386 43F2  
                                                    l4546 0DFA  
                                                    l4538 0D62  
                                                    l4490 0880  
                                                    l4482 080C  
                                                    l4466 0754  
                                                    l4298 373E  
                                                    l5370 3410  
                                                    l5362 33B4  
                                                    l4644 3576  
                                                    l4636 34FC  
                                                    l5268 48B2  
                                                    l3940 3BB2  
                                                    l4572 3866  
                                                    l4724 1D76  
                                                    l4716 1CDE  
                                                    l4732 1E3C  
                                                    l4708 1C20  
                                                    l4740 1742  
                                                    l4900 4368  
                                                    l4564 3DB0  
                                                    l4556 3D00  
                                                    l4820 29D6  
                                                    l4812 291C  
                                                    l4804 310E  
                                                    l5196 1E7E  
                                                    l4660 3802  
                                                    l4652 37AE  
                                                    l5604 2764  
                                                    l5284 2C58  
                                                    l5276 2C1A  
                                                    l4396 442A  
                                                    l4388 43F2  
                                                    l4548 0DFE  
                                                    l4492 089C  
                                                    l4484 0840  
                                                    l4476 07BC  
                                                    l4468 075C  
                                                    l5380 3464  
                                                    l5372 3414  
                                                    l5364 33C2  
                                                    l4638 3546  
                                                    l3950 3C3A  
                                                    l3942 3BC2  
                                                    l3934 3B86  
                                                    l4590 3912  
                                                    l4582 3886  
                                                    l4574 387C  
                                                    l4718 1CF8  
                                                    l4750 17F0  
                                                    l4742 1742  
                                                    l4910 43B8  
                                                    l4902 436C  
                                                    l4558 3D0E  
                                                    l4822 2A06  
                                                    l4814 2958  
                                                    l5198 1E96  
                                                    l5606 23E6  
                                                    l4670 3EA0  
                                                    l4662 3814  
                                                    l4654 37BA  
                                                    l4646 3772  
                                                    l5294 2CA4  
                                                    l5286 2C76  
                                                    l4398 444E  
                                                    l4494 08AC  
                                                    l4486 0858  
                                                    l4478 07EC  
                                                    l5382 3466  
                                                    l5374 3420  
                                                    l5366 33F2  
                                                    l3944 3BE0  
                                                    l3936 3B8E  
                                                    l4584 38D4  
                                                    l4576 3882  
                                                    l4568 3852  
                                                    l5608 1DA6  
                                                    l4760 18D2  
                                                    l4752 1812  
                                                    l4744 177E  
                                                    l3960 46C2  
                                                    l4912 43D0  
                                                    l4904 4392  
                                                    l4840 2ED2  
                                                    l4832 2EBC  
                                                    l4824 2A2E  
                                                    l4816 2968  
                                                    l4808 291C  
                                                    l4920 424A  
                                                    l4680 3DD2  
                                                    l4672 3EC2  
                                                    l4664 3E72  
                                                    l4656 37E2  
                                                    l4648 3786  
                                                    l5296 2CD2  
                                                    l5288 2C9C  
                                                    l4496 08C4  
                                                    l4488 086E  
                                                    l5384 3468  
                                                    l5376 3450  
                                                    l5368 3402  
                                                    l3946 3BFE  
                                                    l3938 3B94  
                                                    l4586 38D8  
                                                    l4762 1900  
                                                    l4754 1848  
                                                    l4746 17A8  
                                                    l4594 3AC2  
                                                    l3962 46C8  
                                                    l3954 46AC  
                                                    l4850 2FB2  
                                                    l4842 2F0E  
                                                    l4834 2EBC  
                                                    l4826 2A52  
                                                    l4818 299C  
                                                    l4930 42B6  
                                                    l4922 4268  
                                                    l3970 3F20  
                                                    l4690 3E34  
                                                    l4682 3DE6  
                                                    l4674 3ED6  
                                                    l4666 3E86  
                                                    l4658 37F6  
                                                    l5298 2D08  
                                                    l4498 08E4  
                                                    l5386 3484  
                                                    l5378 3454  
                                                    l3948 3C1E  
                                                    l4588 38EE  
                                                    l4764 192E  
                                                    l4756 1876  
                                                    l4748 17CC  
                                                    l4596 3AD6  
                                                    l3964 46CE  
                                                    l3956 46AC  
                                                    l4908 43A8  
                                                    l4852 2FCC  
                                                    l4844 2F1E  
                                                    l4836 2EBC  
                                                    l4692 48D6  
                                                    l4780 3CB4  
                                                    l4828 2A6C  
                                                    l4924 4290  
                                                    l4940 0E4C  
                                                    l3980 3F6A  
                                                    l3972 3F20  
                                                    l4684 3DEC  
                                                    l4676 3EE2  
                                                    l4668 3E9A  
                                                    l5388 3488  
                                                    l4766 195C  
                                                    l4758 18A4  
                                                    l4598 3AD6  
                                                    l3966 46F0  
                                                    l3958 46AC  
                                                    l4846 2F76  
                                                    l4694 48D6  
                                                    l4782 3CD8  
                                                    l4774 3C50  
                                                    l4870 45FA  
                                                    l4862 4902  
                                                    l4790 2FFE  
                                                    l4918 424A  
                                                    l4942 0E74  
                                                    l4950 0FA4  
                                                    l3990 3FB6  
                                                    l3982 3F78  
                                                    l3974 3F3A  
                                                    l4686 3E14  
                                                    l4678 3DBE  
                                                    l5590 2216  
                                                    l4768 1992  
                                                    l4848 2FA2  
                                                    l4696 48D6  
                                                    l4776 3C50  
                                                    l4872 4620  
                                                    l4856 4972  
                                                    l4864 4902  
                                                    l4792 303A  
                                                    l4928 42A6  
                                                    l4960 10B6  
                                                    l4952 1054  
                                                    l4944 0E8A  
                                                    l4936 0E3C  
                                                    l3984 3F9C  
                                                    l3976 3F4A  
                                                    l4688 3E28  
                                                    l5592 2250  
                                                    l4890 4530  
                                                    l3994 4592  
                                                    l4698 48DA  
                                                    l4778 3C8C  
                                                    l4858 4972  
                                                    l4794 304A  
                                                    l4786 2FFE  
                                                    l4970 1186  
                                                    l4954 1072  
                                                    l4962 112E  
                                                    l4946 0EC4  
                                                    l4938 0E3C  
                                                    l3986 3FAE  
                                                    l3978 3F58  
                                                    l5594 222C  
                                                    l4892 4538  
                                                    l4884 4530  
                                                    l3996 4592  
                                                    l4876 4636  
                                                    l4868 45F6  
                                                    l4796 307C  
                                                    l4788 2FFE  
                                                    l4980 123A  
                                                    l4972 1196  
                                                    l4964 1154  
                                                    l4956 107E  
                                                    l4948 0F06  
                                                    l5596 2242  
                                                    l4894 4570  
                                                    l4886 4530  
                                                    l3998 4592  
                                                    l4878 463A  
                                                    l4798 30B2  
                                                    l4990 13CE  
                                                    l4974 11A8  
                                                    l4982 12D8  
                                                    l4958 109A  
                                                    l5598 2536  
                                                    l4888 4530  
                                                    l4992 13EA  
                                                    l4984 1388  
                                                    l4976 11BE  
                                                    l4968 1186  
                                                    l4986 13A6  
                                                    l4994 1462  
                                                    l4978 11F8  
                                                    l4996 1488  
                                                    l4988 13B2  
                                     __end_of_XF_popEvent 3ABA  
                                                    STR_1 FFED  
                                                    u1005 319E  
                                                    u2000 2E92  
                                                    u2001 2E8E  
                                                    u2010 401C  
                                                    u2011 4018  
                                                    u2100 40F2  
                                                    u2020 2848  
                                                    u2101 40EE  
                                                    u2021 2844  
                                                    u2030 2904  
                                                    u2110 07B8  
                                                    u2031 2900  
                                                    u2111 07B4  
                                                    u2200 0C6C  
                                                    u2120 0808  
                                                    u2040 2ADA  
                                                    u2201 0C68  
                                                    u2121 0804  
                                                    u2041 2AD6  
                                                    u3010 4320  
                                                    u2210 0D84  
                                                    u2130 089C  
                                                    u3011 431C  
                                                    u2211 0D80  
                                                    u2131 0898  
                                                    u2051 2B0E  
                                                    u2220 0E20  
                                                    u2140 08C4  
                                                    u2060 2B72  
                                                    u2221 0E1C  
                                                    u2141 08C0  
                                                    u2061 2B6E  
                                                    _LATA 0F89  
                                                    u2230 3D0E  
                                                    u2150 08FA  
                                                    u2070 2B9A  
                                                    u3030 20B6  
                                                    _LATB 0F8A  
                                                    u2231 3D0A  
                                                    u2151 08F6  
                                                    u2071 2B96  
                                                    u3031 20B2  
                                                    _LATC 0F8B  
                                                    u1600 3BB2  
                                                    u2240 38CA  
                                                    u2160 0948  
                                                    u3040 20D2  
                                                    _LATD 0F8C  
                                                    u1601 3BAE  
                                                    u2161 0944  
                                                    u2081 2BEC  
                                                    u3041 20CE  
                                                    _LATE 0F8D  
                                                    u1610 3C38  
                                                    u2250 38EE  
                                                    u2090 408A  
                                                    u2170 099A  
                                                    u3050 2166  
                                                    _LATF 0F8E  
                                                    u1611 3C34  
                                                    u2251 38EA  
                                                    u2091 4086  
                                                    u2171 0996  
                                                    u3051 2162  
                                                    _LATG 0F8F  
                                                    u1700 49D2  
                                                    u1620 3F6A  
                                                    u2340 379A  
                                                    u3028 4346  
                                                    u2180 0B66  
                                                    u3060 219C  
                                                    _LATH 0F90  
                                                    u2245 38C0  
                                                    u2405 17CC  
                                                    u1701 49CE  
                                                    u1621 3F66  
                                                    u2341 3796  
                                                    u3029 435A  
                                                    u3061 2198  
                                                    u2270 3B50  
                                                    u2510 2ECE  
                                                    u1710 49BA  
                                                    u1630 3FAE  
                                                    u2350 37AE  
                                                    _LATJ 0F91  
                                                    u2415 17F0  
                                                    u2271 3B4C  
                                                    u2511 2ECA  
                                                    u1711 49B6  
                                                    u1631 3FAA  
                                                    u2351 37AA  
                                                    u2264 3B2C  
                                                    u2600 0F92  
                                                    u1640 3356  
                                                    u1720 006C  
                                                    u2425 1812  
                                                    u2265 3B26  
                                                    u2505 2A52  
                                                    u1641 3352  
                                                    u1721 0068  
                                                    u2185 0B5C  
                                                    u2530 4632  
                                                    u2610 0FD0  
                                                    u1650 1580  
                                                    u1730 00C0  
                                                    u2370 3E9A  
                                                    u2435 1876  
                                                    u2531 462E  
                                                    u1651 157C  
                                                    u1731 00BC  
                                                    u2371 3E96  
                                                    u2195 0BAC  
                                                    u2540 43A4  
                                                    u2700 1304  
                                                    u1660 15B6  
                                                    u1820 0500  
                                                    u1740 0136  
                                                    u1900 36B2  
                                                    u2445 18A4  
                                                    u2541 43A0  
                                                    u2525 2F66  
                                                    u2605 0F88  
                                                    u1661 15B2  
                                                    u1805 035A  
                                                    u1741 0132  
                                                    u1901 36AE  
                                                    u2550 42A2  
                                                    u1670 1692  
                                                    u1830 054E  
                                                    u1750 01E6  
                                                    u2390 3DE6  
                                                    u2455 18D2  
                                                    u2551 429E  
                                                    u2615 0FC6  
                                                    u1671 168E  
                                                    u1815 0438  
                                                    u1751 01E2  
                                                    u2391 3DE2  
                                                    u1911 36FA  
                                                    u2560 0E74  
                                                    u1680 172C  
                                                    u1840 05E4  
                                                    u1760 026E  
                                                    u1920 3726  
                                                    u2465 1900  
                                                    u2705 12FA  
                                                    u2625 1014  
                                                    u2561 0E70  
                                                    u1681 1728  
                                                    u1841 05E0  
                                                    u1825 04F6  
                                                    u1921 3722  
                                                    u2650 11A8  
                                                    u2570 0EFC  
                                                    u1690 229A  
                                                    u1850 0604  
                                                    u1930 3758  
                                                    u2475 192E  
                                                    u2715 1348  
                                                    u2651 11A4  
                                                    u2635 10F2  
                                                    u1691 2296  
                                                    u1851 0600  
                                                    u1835 0544  
                                                    u1931 3754  
                                                    u2811 39D6  
                                                    u2660 1230  
                                                    u2740 41C4  
                                                    u1940 2D82  
                                                    u1860 06A2  
                                                    u1780 02DA  
                                                    u2820 2614  
                                                    u2900 248E  
                                                    u2485 195C  
                                                    u2725 1426  
                                                    u2645 111C  
                                                    u2741 41C0  
                                                    u1941 2D7E  
                                                    u1861 069E  
                                                    u1765 0264  
                                                    u2821 2610  
                                                    u2901 248A  
                                                    u1950 2DA4  
                                                    u1870 0704  
                                                    u1790 0316  
                                                    u2830 263A  
                                                    u2910 24B4  
                                                    u2750 44F6  
                                                    u2495 3CD8  
                                                    u2735 1450  
                                                    u2575 0EF2  
                                                    u1951 2DA0  
                                                    u1871 0700  
                                                    u1775 02A4  
                                                    u2831 2636  
                                                    u2911 24B0  
                                                    u2751 44F2  
                                                    u1960 2DCA  
                                                    u1880 0734  
                                                    u2840 267C  
                                                    u2920 24D6  
                                                    u2665 1226  
                                                    u2585 0F32  
                                                    u1961 2DC6  
                                                    u1881 0730  
                                                    u1785 02D0  
                                                    u2841 2678  
                                                    u2921 24D2  
                                                    u2690 12C6  
                                                    u1970 2E06  
                                                    u1890 4180  
                                                    u2850 269A  
                                                    u2930 24FC  
                                                    u2675 1266  
                                                    u2595 0F5C  
                                                    u1971 2E02  
                                                    u1891 417C  
                                                    u1795 030C  
                                                    u2851 2696  
                                                    u2931 24F8  
                                                    u1980 2E34  
                                                    u2780 3A2A  
                                                    u2860 26B0  
                                                    u2940 251E  
                                                    u2685 1290  
                                                    u1981 2E30  
                                                    u2781 3A26  
                                                    u2861 26AC  
                                                    u2941 251A  
                                                    u1990 2E80  
                                                    u2870 26D8  
                                                    u2950 256E  
                                                    u2695 12BC  
                                                    u1991 2E7C  
                                                    u2871 26D4  
                                                    u2951 256A  
                                                    u2960 2050  
                                                    u2880 272C  
                                                    u2961 204C  
                                                    u2881 2728  
                                                    u2890 2468  
                                                    u2891 2464  
                                                    u2980 2C9C  
                                                    u2981 2C98  
                                                    u2990 2D4C  
                                                    u2991 2D48  
                       __end_of_DRV_CANFDSPI_TimeStampSet 492A  
                                    _motorControl_Process 25EE  
                                                    _main 338A  
                                        _XF_scheduleTimer 3680  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 002C  
                                            _CanSetFilter 445E  
                                         __end_of_CanInit 2072  
                                         __end_of_CanSend 4070  
                                   _lightContol_BackLight 3DB6  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2D6A  
                                         __end_of_XF_post 39EE  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 3136  
                     _DRV_CANFDSPI_TransmitQueueConfigure 2FF6  
                                 __end_of_TMR0_Initialize 480E  
                     __end_of_DRV_CANFDSPI_WriteByteArray 338A  
                             _DRV_CANFDSPI_WriteByteArray 3270  
                           __end_of_OSCILLATOR_Initialize 4A06  
                                         __end_of___awmod 2EB4  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3270  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3136  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 48D6  
                                                   _dummy 001C  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2C16  
                               motorControl_Process@state 0027  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 002C  
                                                   ltemp1 0030  
                                                   ltemp2 0034  
                            lightControl_Process@oldState 0024  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 002C  
                                                   ttemp1 002F  
                                                   ttemp2 0032  
                                                   ttemp3 0035  
                                                   ttemp5 002D  
                                                   ttemp6 0030  
                                                   ttemp7 0034  
                                                   status 0FD8  
                                                   wtemp0 002C  
                                                   wtemp1 002E  
                                                   wtemp2 0030  
                                                   wtemp3 0032  
                                                   wtemp4 0034  
                                                   wtemp5 0036  
                                                   wtemp8 002D  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 4242  
                           _DRV_CANFDSPI_FilterToFifoLink 41AC  
                               _DRV_CANFDSPI_TefConfigure 3C48  
                                         __initialization 474E  
                                              _Event_init 4700  
                                            __end_of_main 3494  
                             ?_INTERRUPT_InterruptManager 004C  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2914  
                              _DRV_CANFDSPI_ReadByteArray 2788  
                                     __end_of_Event_setPE 47D4  
                                     __end_of_Event_setId 49A8  
                                           __activetblptr 0003  
                                          _Event_getDelay 492A  
                                             _XF_popEvent 39EE  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  u230_41 3528  
                                                  u231_40 3546  
                                                  u231_41 3542  
                                                  i2l5354 004C  
                                                  u232_40 358C  
                                                  i2l5356 005A  
                                                  u232_41 3588  
                                                  i2l5358 0068  
                                                  u228_40 34BE  
                                                  u228_41 34BA  
                                                  u229_40 34FC  
                                                  u229_41 34F8  
                                                  u276_40 485E  
                                                  u276_41 485A  
                                                  u277_48 4864  
                                                  u277_49 4878  
                                                  u297_40 48CC  
                                                  u297_41 48C8  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 480E  
                                          _XF_noMoreEvent 4A0C  
                                          _XF_noMoreTimer 4A06  
                          __end_of_DRV_CANFDSPI_WriteByte 4700  
                          __end_of_DRV_CANFDSPI_WriteWord 3922  
                                       __end_of_SPI2_Open 3DB6  
                                          _XF_executeOnce 42D4  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 4756  
                                                  clear_1 4768  
                                                  clear_2 4774  
                                                  clear_3 4780  
                                                  clear_4 478C  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 4950  
                                                  lltemp0 002C  
                                                  lltemp1 0034  
                                                  lltemp2 003C  
                                                  lltemp3 0044  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3B84  
                              _DRV_CANFDSPI_WriteHalfWord 3ABA  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 487A  
                                  __end_of_Event_setDelay 4846  
                                  __end_of_XF_noMoreEvent 4A12  
                                  __end_of_XF_noMoreTimer 4A0C  
                                       _SYSTEM_Initialize 49D8  
                         lightContol_FrontLight@lastLight 0029  
                                              __accesstop 0060  
                                 __end_of__initialization 4792  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 4364  
                                  _lightContol_FrontLight 3E6A  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 004C  
                                              ___inthi_sp 0931  
                                             _Event_setPE 4798  
                                             _Event_setId 498E  
                                __end_of_XF_scheduleTimer 376A  
                                   TMR0_ISR@CountCallBack 0020  
                                     __end_of_SpiTransfer 3C48  
                                   __end_of_LEAVECRITICAL 49C0  
                               __end_of_SYSTEM_Initialize 49EE  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 005C  
                        __end_of_TMR0_SetInterruptHandler 4972  
                               _DRV_CANFDSPI_TimeStampSet 4902  
                                            _XF_pushEvent 2A96  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 49D8  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 1E64  
                                                 _CanSend 3FC6  
                                                 _XF_init 2C16  
                                                 _XF_post 3922  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 2446  
                             _DRV_CANFDSPI_DlcToDataBytes 2268  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 2FF6  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2EB4  
                                                 ___awmod 2D6A  
                                                 uf300999 42F4  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 4114  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 4070  
                                                 __pcinit 474E  
                                                 __ramtop 1000  
                                                 __ptext0 338A  
                                                 __ptext1 2072  
                                                 __ptext2 3922  
                                                 __ptext3 2A96  
                                                 __ptext4 3680  
                                                 __ptext5 4A06  
                                                 __ptext6 4A0C  
                                                 __ptext7 480E  
                                                 __ptext8 492A  
                                                 __ptext9 4798  
                                             _SpiTransfer 3B84  
                                               _T0CONbits 0FD5  
                                                 us233999 377C  
                                                 us236999 3E7C  
                                                 us238999 3DC8  
                                                 us280999 3A6E  
                                   _OSCILLATOR_Initialize 49FE  
                                                 us279999 3A46  
                             lightContol_FrontLight@F6664 0070  
                                    end_of_initialization 4792  
                              __end_of_DRV_CANFDSPI_Reset 4902  
                                      __end_of_CanReceive 452C  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3680  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3592  
                                               _SPI2_Open 3D00  
                                _TMR0_SetInterruptHandler 4950  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 4A16  
                            __end_of_lightControl_Process 25EE  
                                         _SPI2_Initialize 49EE  
                                      _spi2_configuration FFE9  
                                     start_initialization 474E  
                           __end_of_DRV_CANFDSPI_ReadByte 45F2  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 474E  
                          __end_of_lightContol_FrontLight 3F18  
                              __end_of_XF_unscheduleTimer 46AA  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0001  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2A96  
                   _DRV_CANFDSPI_TransmitChannelConfigure 2914  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 384A  
                               lightControl_Process@state 0025  
                                   _TMR0_InterruptHandler 005C  
                                  _PIN_MANAGER_Initialize 487A  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 49FE  
                            ??_INTERRUPT_InterruptManager 004C  
                                 motorControl@lastPercent 002B  
                                 motorControl@lastStarter 002A  
                                           _TMR0_CallBack 4846  
                                    _INTERRUPT_Initialize 4A12  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 2446  
                           __end_of_lightContol_BackLight 3E6A  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 43EA  
                        _DRV_CANFDSPI_OperationModeSelect 4364  
                                                i2u307_40 005A  
                                                i2u307_41 0056  
                                                i2u308_40 0068  
                                                i2u308_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 48D6  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 48A8  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 0028  
                                           _LEAVECRITICAL 49A8  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 498E  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 4972  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6658 0080  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 44C8  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 3FC6  
                      _DRV_CANFDSPI_TransmitChannelUpdate 3F18  
                            motorControl_Process@oldState 0026  
                                                _carState 0001  
                       __end_of_DRV_CANFDSPI_TefConfigure 3D00  
                                                __ptext10 498E  
                                                __ptext11 44C8  
                                                __ptext20 25EE  
                                                __ptext12 074C  
                                                __ptext21 376A  
                                                __ptext13 43EA  
                                                __ptext30 4114  
                                                __ptext22 3E6A  
                                                __ptext14 2788  
                                                __ptext31 39EE  
                                                __ptext23 3DB6  
                                                __ptext15 4070  
                                                __ptext40 49FE  
                                                __ptext32 2D6A  
                                                __ptext24 3FC6  
                                                __ptext16 2C16  
                                                __ptext41 4A12  
                                                __ptext33 49A8  
                                                __ptext25 0000  
                                                __ptext17 4700  
                                                __ptext50 3136  
                                                __ptext42 445E  
                                                __ptext34 49C0  
                                                __ptext26 3270  
                                                __ptext18 42D4  
                                                __ptext51 2914  
                                                __ptext43 41AC  
                                                __ptext35 49D8  
                                                __ptext27 3F18  
                                                __ptext19 2446  
                                                __ptext60 46AA  
                                                __ptext52 4902  
                                                __ptext44 0E34  
                                                __ptext36 47D4  
                                                __ptext28 14B2  
                                                __ptext61 4590  
                                                __ptext53 4972  
                                                __ptext45 117E  
                                                __ptext37 4950  
                                                __ptext29 2268  
                                                __ptext70 48A8  
                                                __ptext62 452C  
                                                __ptext54 45F2  
                                                __ptext46 4242  
                                                __ptext38 49EE  
                                                __ptext71 4846  
                                                __ptext63 3ABA  
                                                __ptext55 3C48  
                                                __ptext47 1E64  
                                                __ptext39 487A  
                                                __ptext72 4A16  
                                                __ptext64 19BA  
                                                __ptext56 48D6  
                                                __ptext48 3592  
                                                __ptext73 3494  
                                                __ptext65 173A  
                                                __ptext57 3D00  
                                                __ptext49 2FF6  
                                                __ptext74 4652  
                                                __ptext66 1C18  
                                                __ptext58 2EB4  
                                                __ptext67 384A  
                                                __ptext59 4364  
                                                __ptext68 3B84  
                                           _ENTERCRITICAL 49C0  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 3592  
                              _XF_decrementAndQueueTimers 3494  
                    __end_of_TMR0_DefaultInterruptHandler 4A18  
                            _TMR0_DefaultInterruptHandler 4A16  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 4652  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 46AA  
                            __end_of_motorControl_Process 2788  
                                  _DRV_CANFDSPI_WriteWord 384A  
                                            _motorControl 376A  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 42D4  
                              _DRV_CANFDSPI_FilterDisable 4242  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 4590  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 4652  
                            _DRV_CANFDSPI_TimeStampEnable 45F2  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 445E  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 43EA  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 2072  
                                         _TMR0_Initialize 47D4  
                              lightContol_BackLight@F6670 0060  
                          __end_of_PIN_MANAGER_Initialize 48A8  
