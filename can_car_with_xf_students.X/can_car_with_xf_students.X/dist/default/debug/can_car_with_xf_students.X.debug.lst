

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Mar 04 14:39:13 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1,group=1
    49                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,space=0,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,space=0,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    94                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    95   000000                     
    96                           ; Generated 23/03/2023 GMT
    97                           ; 
    98                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    99                           ; All rights reserved.
   100                           ; 
   101                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   102                           ; 
   103                           ; Redistribution and use in source and binary forms, with or without modification, are
   104                           ; permitted provided that the following conditions are met:
   105                           ; 
   106                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   107                           ;        conditions and the following disclaimer.
   108                           ; 
   109                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   110                           ;        of conditions and the following disclaimer in the documentation and/or other
   111                           ;        materials provided with the distribution. Publication is not required when
   112                           ;        this file is used in an embedded application.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F97J60 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130   000FE0                     bsr             equ	4064
   131   000FE9                     fsr0            equ	4073
   132   000FEA                     fsr0h           equ	4074
   133   000FE9                     fsr0l           equ	4073
   134   000FE1                     fsr1            equ	4065
   135   000FE2                     fsr1h           equ	4066
   136   000FE1                     fsr1l           equ	4065
   137   000FD9                     fsr2            equ	4057
   138   000FDA                     fsr2h           equ	4058
   139   000FD9                     fsr2l           equ	4057
   140   000FEF                     indf0           equ	4079
   141   000FE7                     indf1           equ	4071
   142   000FDF                     indf2           equ	4063
   143   000FF2                     intcon          equ	4082
   144   000000                     nvmcon          equ	0
   145   000FF9                     pcl             equ	4089
   146   000FFA                     pclath          equ	4090
   147   000FFB                     pclatu          equ	4091
   148   000FEB                     plusw0          equ	4075
   149   000FE3                     plusw1          equ	4067
   150   000FDB                     plusw2          equ	4059
   151   000FED                     postdec0        equ	4077
   152   000FE5                     postdec1        equ	4069
   153   000FDD                     postdec2        equ	4061
   154   000FEE                     postinc0        equ	4078
   155   000FE6                     postinc1        equ	4070
   156   000FDE                     postinc2        equ	4062
   157   000FEC                     preinc0         equ	4076
   158   000FE4                     preinc1         equ	4068
   159   000FDC                     preinc2         equ	4060
   160   000FF3                     prod            equ	4083
   161   000FF4                     prodh           equ	4084
   162   000FF3                     prodl           equ	4083
   163   000FD8                     status          equ	4056
   164   000FF5                     tablat          equ	4085
   165   000FF6                     tblptr          equ	4086
   166   000FF7                     tblptrh         equ	4087
   167   000FF6                     tblptrl         equ	4086
   168   000FF8                     tblptru         equ	4088
   169   000FFD                     tosl            equ	4093
   170   000FE8                     wreg            equ	4072
   171   000E80                     MAADR5          equ	3712	;# 
   172   000E81                     MAADR6          equ	3713	;# 
   173   000E82                     MAADR3          equ	3714	;# 
   174   000E83                     MAADR4          equ	3715	;# 
   175   000E84                     MAADR1          equ	3716	;# 
   176   000E85                     MAADR2          equ	3717	;# 
   177   000E8A                     MISTAT          equ	3722	;# 
   178   000E97                     EFLOCON         equ	3735	;# 
   179   000E98                     EPAUS           equ	3736	;# 
   180   000E98                     EPAUSL          equ	3736	;# 
   181   000E99                     EPAUSH          equ	3737	;# 
   182   000EA0                     MACON1          equ	3744	;# 
   183   000EA2                     MACON3          equ	3746	;# 
   184   000EA3                     MACON4          equ	3747	;# 
   185   000EA4                     MABBIPG         equ	3748	;# 
   186   000EA6                     MAIPG           equ	3750	;# 
   187   000EA6                     MAIPGL          equ	3750	;# 
   188   000EA7                     MAIPGH          equ	3751	;# 
   189   000EAA                     MAMXFL          equ	3754	;# 
   190   000EAA                     MAMXFLL         equ	3754	;# 
   191   000EAB                     MAMXFLH         equ	3755	;# 
   192   000EB2                     MICMD           equ	3762	;# 
   193   000EB4                     MIREGADR        equ	3764	;# 
   194   000EB6                     MIWR            equ	3766	;# 
   195   000EB6                     MIWRL           equ	3766	;# 
   196   000EB7                     MIWRH           equ	3767	;# 
   197   000EB8                     MIRD            equ	3768	;# 
   198   000EB8                     MIRDL           equ	3768	;# 
   199   000EB9                     MIRDH           equ	3769	;# 
   200   000EC0                     EHT0            equ	3776	;# 
   201   000EC1                     EHT1            equ	3777	;# 
   202   000EC2                     EHT2            equ	3778	;# 
   203   000EC3                     EHT3            equ	3779	;# 
   204   000EC4                     EHT4            equ	3780	;# 
   205   000EC5                     EHT5            equ	3781	;# 
   206   000EC6                     EHT6            equ	3782	;# 
   207   000EC7                     EHT7            equ	3783	;# 
   208   000EC8                     EPMM0           equ	3784	;# 
   209   000EC9                     EPMM1           equ	3785	;# 
   210   000ECA                     EPMM2           equ	3786	;# 
   211   000ECB                     EPMM3           equ	3787	;# 
   212   000ECC                     EPMM4           equ	3788	;# 
   213   000ECD                     EPMM5           equ	3789	;# 
   214   000ECE                     EPMM6           equ	3790	;# 
   215   000ECF                     EPMM7           equ	3791	;# 
   216   000ED0                     EPMCS           equ	3792	;# 
   217   000ED0                     EPMCSL          equ	3792	;# 
   218   000ED1                     EPMCSH          equ	3793	;# 
   219   000ED4                     EPMO            equ	3796	;# 
   220   000ED4                     EPMOL           equ	3796	;# 
   221   000ED5                     EPMOH           equ	3797	;# 
   222   000ED8                     ERXFCON         equ	3800	;# 
   223   000ED9                     EPKTCNT         equ	3801	;# 
   224   000EE2                     EWRPT           equ	3810	;# 
   225   000EE2                     EWRPTL          equ	3810	;# 
   226   000EE3                     EWRPTH          equ	3811	;# 
   227   000EE4                     ETXST           equ	3812	;# 
   228   000EE4                     ETXSTL          equ	3812	;# 
   229   000EE5                     ETXSTH          equ	3813	;# 
   230   000EE6                     ETXND           equ	3814	;# 
   231   000EE6                     ETXNDL          equ	3814	;# 
   232   000EE7                     ETXNDH          equ	3815	;# 
   233   000EE8                     ERXST           equ	3816	;# 
   234   000EE8                     ERXSTL          equ	3816	;# 
   235   000EE9                     ERXSTH          equ	3817	;# 
   236   000EEA                     ERXND           equ	3818	;# 
   237   000EEA                     ERXNDL          equ	3818	;# 
   238   000EEB                     ERXNDH          equ	3819	;# 
   239   000EEC                     ERXRDPT         equ	3820	;# 
   240   000EEC                     ERXRDPTL        equ	3820	;# 
   241   000EED                     ERXRDPTH        equ	3821	;# 
   242   000EEE                     ERXWRPT         equ	3822	;# 
   243   000EEE                     ERXWRPTL        equ	3822	;# 
   244   000EEF                     ERXWRPTH        equ	3823	;# 
   245   000EF0                     EDMAST          equ	3824	;# 
   246   000EF0                     EDMASTL         equ	3824	;# 
   247   000EF1                     EDMASTH         equ	3825	;# 
   248   000EF2                     EDMAND          equ	3826	;# 
   249   000EF2                     EDMANDL         equ	3826	;# 
   250   000EF3                     EDMANDH         equ	3827	;# 
   251   000EF4                     EDMADST         equ	3828	;# 
   252   000EF4                     EDMADSTL        equ	3828	;# 
   253   000EF5                     EDMADSTH        equ	3829	;# 
   254   000EF6                     EDMACS          equ	3830	;# 
   255   000EF6                     EDMACSL         equ	3830	;# 
   256   000EF7                     EDMACSH         equ	3831	;# 
   257   000EFB                     EIE             equ	3835	;# 
   258   000EFD                     ESTAT           equ	3837	;# 
   259   000EFE                     ECON2           equ	3838	;# 
   260   000F60                     EIR             equ	3936	;# 
   261   000F61                     EDATA           equ	3937	;# 
   262   000F62                     SSP2CON2        equ	3938	;# 
   263   000F63                     SSP2CON1        equ	3939	;# 
   264   000F64                     SSP2STAT        equ	3940	;# 
   265   000F65                     SSP2ADD         equ	3941	;# 
   266   000F66                     SSP2BUF         equ	3942	;# 
   267   000F67                     ECCP2DEL        equ	3943	;# 
   268   000F68                     ECCP2AS         equ	3944	;# 
   269   000F69                     ECCP3DEL        equ	3945	;# 
   270   000F6A                     ECCP3AS         equ	3946	;# 
   271   000F6B                     RCSTA2          equ	3947	;# 
   272   000F6C                     TXSTA2          equ	3948	;# 
   273   000F6D                     TXREG2          equ	3949	;# 
   274   000F6E                     RCREG2          equ	3950	;# 
   275   000F6F                     SPBRG2          equ	3951	;# 
   276   000F70                     CCP5CON         equ	3952	;# 
   277   000F71                     CCPR5           equ	3953	;# 
   278   000F71                     CCPR5L          equ	3953	;# 
   279   000F72                     CCPR5H          equ	3954	;# 
   280   000F73                     CCP4CON         equ	3955	;# 
   281   000F74                     CCPR4           equ	3956	;# 
   282   000F74                     CCPR4L          equ	3956	;# 
   283   000F75                     CCPR4H          equ	3957	;# 
   284   000F76                     T4CON           equ	3958	;# 
   285   000F77                     PR4             equ	3959	;# 
   286   000F78                     TMR4            equ	3960	;# 
   287   000F79                     ECCP1DEL        equ	3961	;# 
   288   000F7A                     ERDPT           equ	3962	;# 
   289   000F7A                     ERDPTL          equ	3962	;# 
   290   000F7B                     ERDPTH          equ	3963	;# 
   291   000F7C                     BAUDCON2        equ	3964	;# 
   292   000F7C                     BAUDCTL2        equ	3964	;# 
   293   000F7D                     SPBRGH2         equ	3965	;# 
   294   000F7E                     BAUDCON1        equ	3966	;# 
   295   000F7E                     BAUDCON         equ	3966	;# 
   296   000F7E                     BAUDCTL         equ	3966	;# 
   297   000F7E                     BAUDCTL1        equ	3966	;# 
   298   000F7F                     SPBRGH1         equ	3967	;# 
   299   000F7F                     SPBRGH          equ	3967	;# 
   300   000F80                     PORTA           equ	3968	;# 
   301   000F81                     PORTB           equ	3969	;# 
   302   000F82                     PORTC           equ	3970	;# 
   303   000F83                     PORTD           equ	3971	;# 
   304   000F84                     PORTE           equ	3972	;# 
   305   000F85                     PORTF           equ	3973	;# 
   306   000F86                     PORTG           equ	3974	;# 
   307   000F87                     PORTH           equ	3975	;# 
   308   000F88                     PORTJ           equ	3976	;# 
   309   000F89                     LATA            equ	3977	;# 
   310   000F8A                     LATB            equ	3978	;# 
   311   000F8B                     LATC            equ	3979	;# 
   312   000F8C                     LATD            equ	3980	;# 
   313   000F8D                     LATE            equ	3981	;# 
   314   000F8E                     LATF            equ	3982	;# 
   315   000F8F                     LATG            equ	3983	;# 
   316   000F90                     LATH            equ	3984	;# 
   317   000F91                     LATJ            equ	3985	;# 
   318   000F92                     TRISA           equ	3986	;# 
   319   000F92                     DDRA            equ	3986	;# 
   320   000F93                     TRISB           equ	3987	;# 
   321   000F93                     DDRB            equ	3987	;# 
   322   000F94                     TRISC           equ	3988	;# 
   323   000F94                     DDRC            equ	3988	;# 
   324   000F95                     TRISD           equ	3989	;# 
   325   000F95                     DDRD            equ	3989	;# 
   326   000F96                     TRISE           equ	3990	;# 
   327   000F96                     DDRE            equ	3990	;# 
   328   000F97                     TRISF           equ	3991	;# 
   329   000F97                     DDRF            equ	3991	;# 
   330   000F98                     TRISG           equ	3992	;# 
   331   000F98                     DDRG            equ	3992	;# 
   332   000F99                     TRISH           equ	3993	;# 
   333   000F99                     DDRH            equ	3993	;# 
   334   000F9A                     TRISJ           equ	3994	;# 
   335   000F9A                     DDRJ            equ	3994	;# 
   336   000F9B                     OSCTUNE         equ	3995	;# 
   337   000F9C                     MEMCON          equ	3996	;# 
   338   000F9D                     PIE1            equ	3997	;# 
   339   000F9E                     PIR1            equ	3998	;# 
   340   000F9F                     IPR1            equ	3999	;# 
   341   000FA0                     PIE2            equ	4000	;# 
   342   000FA1                     PIR2            equ	4001	;# 
   343   000FA2                     IPR2            equ	4002	;# 
   344   000FA3                     PIE3            equ	4003	;# 
   345   000FA4                     PIR3            equ	4004	;# 
   346   000FA5                     IPR3            equ	4005	;# 
   347   000FA6                     EECON1          equ	4006	;# 
   348   000FA7                     EECON2          equ	4007	;# 
   349   000FAB                     RCSTA1          equ	4011	;# 
   350   000FAB                     RCSTA           equ	4011	;# 
   351   000FAC                     TXSTA1          equ	4012	;# 
   352   000FAC                     TXSTA           equ	4012	;# 
   353   000FAD                     TXREG1          equ	4013	;# 
   354   000FAD                     TXREG           equ	4013	;# 
   355   000FAE                     RCREG1          equ	4014	;# 
   356   000FAE                     RCREG           equ	4014	;# 
   357   000FAF                     SPBRG1          equ	4015	;# 
   358   000FAF                     SPBRG           equ	4015	;# 
   359   000FB0                     PSPCON          equ	4016	;# 
   360   000FB1                     T3CON           equ	4017	;# 
   361   000FB2                     TMR3            equ	4018	;# 
   362   000FB2                     TMR3L           equ	4018	;# 
   363   000FB3                     TMR3H           equ	4019	;# 
   364   000FB4                     CMCON           equ	4020	;# 
   365   000FB5                     CVRCON          equ	4021	;# 
   366   000FB6                     ECCP1AS         equ	4022	;# 
   367   000FB7                     CCP3CON         equ	4023	;# 
   368   000FB7                     ECCP3CON        equ	4023	;# 
   369   000FB8                     CCPR3           equ	4024	;# 
   370   000FB8                     CCPR3L          equ	4024	;# 
   371   000FB9                     CCPR3H          equ	4025	;# 
   372   000FBA                     CCP2CON         equ	4026	;# 
   373   000FBA                     ECCP2CON        equ	4026	;# 
   374   000FBB                     CCPR2           equ	4027	;# 
   375   000FBB                     CCPR2L          equ	4027	;# 
   376   000FBC                     CCPR2H          equ	4028	;# 
   377   000FBD                     CCP1CON         equ	4029	;# 
   378   000FBD                     ECCP1CON        equ	4029	;# 
   379   000FBE                     CCPR1           equ	4030	;# 
   380   000FBE                     CCPR1L          equ	4030	;# 
   381   000FBF                     CCPR1H          equ	4031	;# 
   382   000FC0                     ADCON2          equ	4032	;# 
   383   000FC1                     ADCON1          equ	4033	;# 
   384   000FC2                     ADCON0          equ	4034	;# 
   385   000FC3                     ADRES           equ	4035	;# 
   386   000FC3                     ADRESL          equ	4035	;# 
   387   000FC4                     ADRESH          equ	4036	;# 
   388   000FC5                     SSP1CON2        equ	4037	;# 
   389   000FC5                     SSPCON2         equ	4037	;# 
   390   000FC6                     SSP1CON1        equ	4038	;# 
   391   000FC6                     SSPCON1         equ	4038	;# 
   392   000FC7                     SSP1STAT        equ	4039	;# 
   393   000FC7                     SSPSTAT         equ	4039	;# 
   394   000FC8                     SSP1ADD         equ	4040	;# 
   395   000FC8                     SSPADD          equ	4040	;# 
   396   000FC9                     SSP1BUF         equ	4041	;# 
   397   000FC9                     SSPBUF          equ	4041	;# 
   398   000FCA                     T2CON           equ	4042	;# 
   399   000FCB                     PR2             equ	4043	;# 
   400   000FCC                     TMR2            equ	4044	;# 
   401   000FCD                     T1CON           equ	4045	;# 
   402   000FCE                     TMR1            equ	4046	;# 
   403   000FCE                     TMR1L           equ	4046	;# 
   404   000FCF                     TMR1H           equ	4047	;# 
   405   000FD0                     RCON            equ	4048	;# 
   406   000FD1                     WDTCON          equ	4049	;# 
   407   000FD2                     ECON1           equ	4050	;# 
   408   000FD3                     OSCCON          equ	4051	;# 
   409   000FD5                     T0CON           equ	4053	;# 
   410   000FD6                     TMR0            equ	4054	;# 
   411   000FD6                     TMR0L           equ	4054	;# 
   412   000FD7                     TMR0H           equ	4055	;# 
   413   000FD8                     STATUS          equ	4056	;# 
   414   000FD9                     FSR2            equ	4057	;# 
   415   000FD9                     FSR2L           equ	4057	;# 
   416   000FDA                     FSR2H           equ	4058	;# 
   417   000FDB                     PLUSW2          equ	4059	;# 
   418   000FDC                     PREINC2         equ	4060	;# 
   419   000FDD                     POSTDEC2        equ	4061	;# 
   420   000FDE                     POSTINC2        equ	4062	;# 
   421   000FDF                     INDF2           equ	4063	;# 
   422   000FE0                     BSR             equ	4064	;# 
   423   000FE1                     FSR1            equ	4065	;# 
   424   000FE1                     FSR1L           equ	4065	;# 
   425   000FE2                     FSR1H           equ	4066	;# 
   426   000FE3                     PLUSW1          equ	4067	;# 
   427   000FE4                     PREINC1         equ	4068	;# 
   428   000FE5                     POSTDEC1        equ	4069	;# 
   429   000FE6                     POSTINC1        equ	4070	;# 
   430   000FE7                     INDF1           equ	4071	;# 
   431   000FE8                     WREG            equ	4072	;# 
   432   000FE9                     FSR0            equ	4073	;# 
   433   000FE9                     FSR0L           equ	4073	;# 
   434   000FEA                     FSR0H           equ	4074	;# 
   435   000FEB                     PLUSW0          equ	4075	;# 
   436   000FEC                     PREINC0         equ	4076	;# 
   437   000FED                     POSTDEC0        equ	4077	;# 
   438   000FEE                     POSTINC0        equ	4078	;# 
   439   000FEF                     INDF0           equ	4079	;# 
   440   000FF0                     INTCON3         equ	4080	;# 
   441   000FF1                     INTCON2         equ	4081	;# 
   442   000FF2                     INTCON          equ	4082	;# 
   443   000FF3                     PROD            equ	4083	;# 
   444   000FF3                     PRODL           equ	4083	;# 
   445   000FF4                     PRODH           equ	4084	;# 
   446   000FF5                     TABLAT          equ	4085	;# 
   447   000FF6                     TBLPTR          equ	4086	;# 
   448   000FF6                     TBLPTRL         equ	4086	;# 
   449   000FF7                     TBLPTRH         equ	4087	;# 
   450   000FF8                     TBLPTRU         equ	4088	;# 
   451   000FF9                     PCLAT           equ	4089	;# 
   452   000FF9                     PC              equ	4089	;# 
   453   000FF9                     PCL             equ	4089	;# 
   454   000FFA                     PCLATH          equ	4090	;# 
   455   000FFB                     PCLATU          equ	4091	;# 
   456   000FFC                     STKPTR          equ	4092	;# 
   457   000FFD                     TOS             equ	4093	;# 
   458   000FFD                     TOSL            equ	4093	;# 
   459   000FFE                     TOSH            equ	4094	;# 
   460   000FFF                     TOSU            equ	4095	;# 
   461   000E80                     MAADR5          equ	3712	;# 
   462   000E81                     MAADR6          equ	3713	;# 
   463   000E82                     MAADR3          equ	3714	;# 
   464   000E83                     MAADR4          equ	3715	;# 
   465   000E84                     MAADR1          equ	3716	;# 
   466   000E85                     MAADR2          equ	3717	;# 
   467   000E8A                     MISTAT          equ	3722	;# 
   468   000E97                     EFLOCON         equ	3735	;# 
   469   000E98                     EPAUS           equ	3736	;# 
   470   000E98                     EPAUSL          equ	3736	;# 
   471   000E99                     EPAUSH          equ	3737	;# 
   472   000EA0                     MACON1          equ	3744	;# 
   473   000EA2                     MACON3          equ	3746	;# 
   474   000EA3                     MACON4          equ	3747	;# 
   475   000EA4                     MABBIPG         equ	3748	;# 
   476   000EA6                     MAIPG           equ	3750	;# 
   477   000EA6                     MAIPGL          equ	3750	;# 
   478   000EA7                     MAIPGH          equ	3751	;# 
   479   000EAA                     MAMXFL          equ	3754	;# 
   480   000EAA                     MAMXFLL         equ	3754	;# 
   481   000EAB                     MAMXFLH         equ	3755	;# 
   482   000EB2                     MICMD           equ	3762	;# 
   483   000EB4                     MIREGADR        equ	3764	;# 
   484   000EB6                     MIWR            equ	3766	;# 
   485   000EB6                     MIWRL           equ	3766	;# 
   486   000EB7                     MIWRH           equ	3767	;# 
   487   000EB8                     MIRD            equ	3768	;# 
   488   000EB8                     MIRDL           equ	3768	;# 
   489   000EB9                     MIRDH           equ	3769	;# 
   490   000EC0                     EHT0            equ	3776	;# 
   491   000EC1                     EHT1            equ	3777	;# 
   492   000EC2                     EHT2            equ	3778	;# 
   493   000EC3                     EHT3            equ	3779	;# 
   494   000EC4                     EHT4            equ	3780	;# 
   495   000EC5                     EHT5            equ	3781	;# 
   496   000EC6                     EHT6            equ	3782	;# 
   497   000EC7                     EHT7            equ	3783	;# 
   498   000EC8                     EPMM0           equ	3784	;# 
   499   000EC9                     EPMM1           equ	3785	;# 
   500   000ECA                     EPMM2           equ	3786	;# 
   501   000ECB                     EPMM3           equ	3787	;# 
   502   000ECC                     EPMM4           equ	3788	;# 
   503   000ECD                     EPMM5           equ	3789	;# 
   504   000ECE                     EPMM6           equ	3790	;# 
   505   000ECF                     EPMM7           equ	3791	;# 
   506   000ED0                     EPMCS           equ	3792	;# 
   507   000ED0                     EPMCSL          equ	3792	;# 
   508   000ED1                     EPMCSH          equ	3793	;# 
   509   000ED4                     EPMO            equ	3796	;# 
   510   000ED4                     EPMOL           equ	3796	;# 
   511   000ED5                     EPMOH           equ	3797	;# 
   512   000ED8                     ERXFCON         equ	3800	;# 
   513   000ED9                     EPKTCNT         equ	3801	;# 
   514   000EE2                     EWRPT           equ	3810	;# 
   515   000EE2                     EWRPTL          equ	3810	;# 
   516   000EE3                     EWRPTH          equ	3811	;# 
   517   000EE4                     ETXST           equ	3812	;# 
   518   000EE4                     ETXSTL          equ	3812	;# 
   519   000EE5                     ETXSTH          equ	3813	;# 
   520   000EE6                     ETXND           equ	3814	;# 
   521   000EE6                     ETXNDL          equ	3814	;# 
   522   000EE7                     ETXNDH          equ	3815	;# 
   523   000EE8                     ERXST           equ	3816	;# 
   524   000EE8                     ERXSTL          equ	3816	;# 
   525   000EE9                     ERXSTH          equ	3817	;# 
   526   000EEA                     ERXND           equ	3818	;# 
   527   000EEA                     ERXNDL          equ	3818	;# 
   528   000EEB                     ERXNDH          equ	3819	;# 
   529   000EEC                     ERXRDPT         equ	3820	;# 
   530   000EEC                     ERXRDPTL        equ	3820	;# 
   531   000EED                     ERXRDPTH        equ	3821	;# 
   532   000EEE                     ERXWRPT         equ	3822	;# 
   533   000EEE                     ERXWRPTL        equ	3822	;# 
   534   000EEF                     ERXWRPTH        equ	3823	;# 
   535   000EF0                     EDMAST          equ	3824	;# 
   536   000EF0                     EDMASTL         equ	3824	;# 
   537   000EF1                     EDMASTH         equ	3825	;# 
   538   000EF2                     EDMAND          equ	3826	;# 
   539   000EF2                     EDMANDL         equ	3826	;# 
   540   000EF3                     EDMANDH         equ	3827	;# 
   541   000EF4                     EDMADST         equ	3828	;# 
   542   000EF4                     EDMADSTL        equ	3828	;# 
   543   000EF5                     EDMADSTH        equ	3829	;# 
   544   000EF6                     EDMACS          equ	3830	;# 
   545   000EF6                     EDMACSL         equ	3830	;# 
   546   000EF7                     EDMACSH         equ	3831	;# 
   547   000EFB                     EIE             equ	3835	;# 
   548   000EFD                     ESTAT           equ	3837	;# 
   549   000EFE                     ECON2           equ	3838	;# 
   550   000F60                     EIR             equ	3936	;# 
   551   000F61                     EDATA           equ	3937	;# 
   552   000F62                     SSP2CON2        equ	3938	;# 
   553   000F63                     SSP2CON1        equ	3939	;# 
   554   000F64                     SSP2STAT        equ	3940	;# 
   555   000F65                     SSP2ADD         equ	3941	;# 
   556   000F66                     SSP2BUF         equ	3942	;# 
   557   000F67                     ECCP2DEL        equ	3943	;# 
   558   000F68                     ECCP2AS         equ	3944	;# 
   559   000F69                     ECCP3DEL        equ	3945	;# 
   560   000F6A                     ECCP3AS         equ	3946	;# 
   561   000F6B                     RCSTA2          equ	3947	;# 
   562   000F6C                     TXSTA2          equ	3948	;# 
   563   000F6D                     TXREG2          equ	3949	;# 
   564   000F6E                     RCREG2          equ	3950	;# 
   565   000F6F                     SPBRG2          equ	3951	;# 
   566   000F70                     CCP5CON         equ	3952	;# 
   567   000F71                     CCPR5           equ	3953	;# 
   568   000F71                     CCPR5L          equ	3953	;# 
   569   000F72                     CCPR5H          equ	3954	;# 
   570   000F73                     CCP4CON         equ	3955	;# 
   571   000F74                     CCPR4           equ	3956	;# 
   572   000F74                     CCPR4L          equ	3956	;# 
   573   000F75                     CCPR4H          equ	3957	;# 
   574   000F76                     T4CON           equ	3958	;# 
   575   000F77                     PR4             equ	3959	;# 
   576   000F78                     TMR4            equ	3960	;# 
   577   000F79                     ECCP1DEL        equ	3961	;# 
   578   000F7A                     ERDPT           equ	3962	;# 
   579   000F7A                     ERDPTL          equ	3962	;# 
   580   000F7B                     ERDPTH          equ	3963	;# 
   581   000F7C                     BAUDCON2        equ	3964	;# 
   582   000F7C                     BAUDCTL2        equ	3964	;# 
   583   000F7D                     SPBRGH2         equ	3965	;# 
   584   000F7E                     BAUDCON1        equ	3966	;# 
   585   000F7E                     BAUDCON         equ	3966	;# 
   586   000F7E                     BAUDCTL         equ	3966	;# 
   587   000F7E                     BAUDCTL1        equ	3966	;# 
   588   000F7F                     SPBRGH1         equ	3967	;# 
   589   000F7F                     SPBRGH          equ	3967	;# 
   590   000F80                     PORTA           equ	3968	;# 
   591   000F81                     PORTB           equ	3969	;# 
   592   000F82                     PORTC           equ	3970	;# 
   593   000F83                     PORTD           equ	3971	;# 
   594   000F84                     PORTE           equ	3972	;# 
   595   000F85                     PORTF           equ	3973	;# 
   596   000F86                     PORTG           equ	3974	;# 
   597   000F87                     PORTH           equ	3975	;# 
   598   000F88                     PORTJ           equ	3976	;# 
   599   000F89                     LATA            equ	3977	;# 
   600   000F8A                     LATB            equ	3978	;# 
   601   000F8B                     LATC            equ	3979	;# 
   602   000F8C                     LATD            equ	3980	;# 
   603   000F8D                     LATE            equ	3981	;# 
   604   000F8E                     LATF            equ	3982	;# 
   605   000F8F                     LATG            equ	3983	;# 
   606   000F90                     LATH            equ	3984	;# 
   607   000F91                     LATJ            equ	3985	;# 
   608   000F92                     TRISA           equ	3986	;# 
   609   000F92                     DDRA            equ	3986	;# 
   610   000F93                     TRISB           equ	3987	;# 
   611   000F93                     DDRB            equ	3987	;# 
   612   000F94                     TRISC           equ	3988	;# 
   613   000F94                     DDRC            equ	3988	;# 
   614   000F95                     TRISD           equ	3989	;# 
   615   000F95                     DDRD            equ	3989	;# 
   616   000F96                     TRISE           equ	3990	;# 
   617   000F96                     DDRE            equ	3990	;# 
   618   000F97                     TRISF           equ	3991	;# 
   619   000F97                     DDRF            equ	3991	;# 
   620   000F98                     TRISG           equ	3992	;# 
   621   000F98                     DDRG            equ	3992	;# 
   622   000F99                     TRISH           equ	3993	;# 
   623   000F99                     DDRH            equ	3993	;# 
   624   000F9A                     TRISJ           equ	3994	;# 
   625   000F9A                     DDRJ            equ	3994	;# 
   626   000F9B                     OSCTUNE         equ	3995	;# 
   627   000F9C                     MEMCON          equ	3996	;# 
   628   000F9D                     PIE1            equ	3997	;# 
   629   000F9E                     PIR1            equ	3998	;# 
   630   000F9F                     IPR1            equ	3999	;# 
   631   000FA0                     PIE2            equ	4000	;# 
   632   000FA1                     PIR2            equ	4001	;# 
   633   000FA2                     IPR2            equ	4002	;# 
   634   000FA3                     PIE3            equ	4003	;# 
   635   000FA4                     PIR3            equ	4004	;# 
   636   000FA5                     IPR3            equ	4005	;# 
   637   000FA6                     EECON1          equ	4006	;# 
   638   000FA7                     EECON2          equ	4007	;# 
   639   000FAB                     RCSTA1          equ	4011	;# 
   640   000FAB                     RCSTA           equ	4011	;# 
   641   000FAC                     TXSTA1          equ	4012	;# 
   642   000FAC                     TXSTA           equ	4012	;# 
   643   000FAD                     TXREG1          equ	4013	;# 
   644   000FAD                     TXREG           equ	4013	;# 
   645   000FAE                     RCREG1          equ	4014	;# 
   646   000FAE                     RCREG           equ	4014	;# 
   647   000FAF                     SPBRG1          equ	4015	;# 
   648   000FAF                     SPBRG           equ	4015	;# 
   649   000FB0                     PSPCON          equ	4016	;# 
   650   000FB1                     T3CON           equ	4017	;# 
   651   000FB2                     TMR3            equ	4018	;# 
   652   000FB2                     TMR3L           equ	4018	;# 
   653   000FB3                     TMR3H           equ	4019	;# 
   654   000FB4                     CMCON           equ	4020	;# 
   655   000FB5                     CVRCON          equ	4021	;# 
   656   000FB6                     ECCP1AS         equ	4022	;# 
   657   000FB7                     CCP3CON         equ	4023	;# 
   658   000FB7                     ECCP3CON        equ	4023	;# 
   659   000FB8                     CCPR3           equ	4024	;# 
   660   000FB8                     CCPR3L          equ	4024	;# 
   661   000FB9                     CCPR3H          equ	4025	;# 
   662   000FBA                     CCP2CON         equ	4026	;# 
   663   000FBA                     ECCP2CON        equ	4026	;# 
   664   000FBB                     CCPR2           equ	4027	;# 
   665   000FBB                     CCPR2L          equ	4027	;# 
   666   000FBC                     CCPR2H          equ	4028	;# 
   667   000FBD                     CCP1CON         equ	4029	;# 
   668   000FBD                     ECCP1CON        equ	4029	;# 
   669   000FBE                     CCPR1           equ	4030	;# 
   670   000FBE                     CCPR1L          equ	4030	;# 
   671   000FBF                     CCPR1H          equ	4031	;# 
   672   000FC0                     ADCON2          equ	4032	;# 
   673   000FC1                     ADCON1          equ	4033	;# 
   674   000FC2                     ADCON0          equ	4034	;# 
   675   000FC3                     ADRES           equ	4035	;# 
   676   000FC3                     ADRESL          equ	4035	;# 
   677   000FC4                     ADRESH          equ	4036	;# 
   678   000FC5                     SSP1CON2        equ	4037	;# 
   679   000FC5                     SSPCON2         equ	4037	;# 
   680   000FC6                     SSP1CON1        equ	4038	;# 
   681   000FC6                     SSPCON1         equ	4038	;# 
   682   000FC7                     SSP1STAT        equ	4039	;# 
   683   000FC7                     SSPSTAT         equ	4039	;# 
   684   000FC8                     SSP1ADD         equ	4040	;# 
   685   000FC8                     SSPADD          equ	4040	;# 
   686   000FC9                     SSP1BUF         equ	4041	;# 
   687   000FC9                     SSPBUF          equ	4041	;# 
   688   000FCA                     T2CON           equ	4042	;# 
   689   000FCB                     PR2             equ	4043	;# 
   690   000FCC                     TMR2            equ	4044	;# 
   691   000FCD                     T1CON           equ	4045	;# 
   692   000FCE                     TMR1            equ	4046	;# 
   693   000FCE                     TMR1L           equ	4046	;# 
   694   000FCF                     TMR1H           equ	4047	;# 
   695   000FD0                     RCON            equ	4048	;# 
   696   000FD1                     WDTCON          equ	4049	;# 
   697   000FD2                     ECON1           equ	4050	;# 
   698   000FD3                     OSCCON          equ	4051	;# 
   699   000FD5                     T0CON           equ	4053	;# 
   700   000FD6                     TMR0            equ	4054	;# 
   701   000FD6                     TMR0L           equ	4054	;# 
   702   000FD7                     TMR0H           equ	4055	;# 
   703   000FD8                     STATUS          equ	4056	;# 
   704   000FD9                     FSR2            equ	4057	;# 
   705   000FD9                     FSR2L           equ	4057	;# 
   706   000FDA                     FSR2H           equ	4058	;# 
   707   000FDB                     PLUSW2          equ	4059	;# 
   708   000FDC                     PREINC2         equ	4060	;# 
   709   000FDD                     POSTDEC2        equ	4061	;# 
   710   000FDE                     POSTINC2        equ	4062	;# 
   711   000FDF                     INDF2           equ	4063	;# 
   712   000FE0                     BSR             equ	4064	;# 
   713   000FE1                     FSR1            equ	4065	;# 
   714   000FE1                     FSR1L           equ	4065	;# 
   715   000FE2                     FSR1H           equ	4066	;# 
   716   000FE3                     PLUSW1          equ	4067	;# 
   717   000FE4                     PREINC1         equ	4068	;# 
   718   000FE5                     POSTDEC1        equ	4069	;# 
   719   000FE6                     POSTINC1        equ	4070	;# 
   720   000FE7                     INDF1           equ	4071	;# 
   721   000FE8                     WREG            equ	4072	;# 
   722   000FE9                     FSR0            equ	4073	;# 
   723   000FE9                     FSR0L           equ	4073	;# 
   724   000FEA                     FSR0H           equ	4074	;# 
   725   000FEB                     PLUSW0          equ	4075	;# 
   726   000FEC                     PREINC0         equ	4076	;# 
   727   000FED                     POSTDEC0        equ	4077	;# 
   728   000FEE                     POSTINC0        equ	4078	;# 
   729   000FEF                     INDF0           equ	4079	;# 
   730   000FF0                     INTCON3         equ	4080	;# 
   731   000FF1                     INTCON2         equ	4081	;# 
   732   000FF2                     INTCON          equ	4082	;# 
   733   000FF3                     PROD            equ	4083	;# 
   734   000FF3                     PRODL           equ	4083	;# 
   735   000FF4                     PRODH           equ	4084	;# 
   736   000FF5                     TABLAT          equ	4085	;# 
   737   000FF6                     TBLPTR          equ	4086	;# 
   738   000FF6                     TBLPTRL         equ	4086	;# 
   739   000FF7                     TBLPTRH         equ	4087	;# 
   740   000FF8                     TBLPTRU         equ	4088	;# 
   741   000FF9                     PCLAT           equ	4089	;# 
   742   000FF9                     PC              equ	4089	;# 
   743   000FF9                     PCL             equ	4089	;# 
   744   000FFA                     PCLATH          equ	4090	;# 
   745   000FFB                     PCLATU          equ	4091	;# 
   746   000FFC                     STKPTR          equ	4092	;# 
   747   000FFD                     TOS             equ	4093	;# 
   748   000FFD                     TOSL            equ	4093	;# 
   749   000FFE                     TOSH            equ	4094	;# 
   750   000FFF                     TOSU            equ	4095	;# 
   751   000E80                     MAADR5          equ	3712	;# 
   752   000E81                     MAADR6          equ	3713	;# 
   753   000E82                     MAADR3          equ	3714	;# 
   754   000E83                     MAADR4          equ	3715	;# 
   755   000E84                     MAADR1          equ	3716	;# 
   756   000E85                     MAADR2          equ	3717	;# 
   757   000E8A                     MISTAT          equ	3722	;# 
   758   000E97                     EFLOCON         equ	3735	;# 
   759   000E98                     EPAUS           equ	3736	;# 
   760   000E98                     EPAUSL          equ	3736	;# 
   761   000E99                     EPAUSH          equ	3737	;# 
   762   000EA0                     MACON1          equ	3744	;# 
   763   000EA2                     MACON3          equ	3746	;# 
   764   000EA3                     MACON4          equ	3747	;# 
   765   000EA4                     MABBIPG         equ	3748	;# 
   766   000EA6                     MAIPG           equ	3750	;# 
   767   000EA6                     MAIPGL          equ	3750	;# 
   768   000EA7                     MAIPGH          equ	3751	;# 
   769   000EAA                     MAMXFL          equ	3754	;# 
   770   000EAA                     MAMXFLL         equ	3754	;# 
   771   000EAB                     MAMXFLH         equ	3755	;# 
   772   000EB2                     MICMD           equ	3762	;# 
   773   000EB4                     MIREGADR        equ	3764	;# 
   774   000EB6                     MIWR            equ	3766	;# 
   775   000EB6                     MIWRL           equ	3766	;# 
   776   000EB7                     MIWRH           equ	3767	;# 
   777   000EB8                     MIRD            equ	3768	;# 
   778   000EB8                     MIRDL           equ	3768	;# 
   779   000EB9                     MIRDH           equ	3769	;# 
   780   000EC0                     EHT0            equ	3776	;# 
   781   000EC1                     EHT1            equ	3777	;# 
   782   000EC2                     EHT2            equ	3778	;# 
   783   000EC3                     EHT3            equ	3779	;# 
   784   000EC4                     EHT4            equ	3780	;# 
   785   000EC5                     EHT5            equ	3781	;# 
   786   000EC6                     EHT6            equ	3782	;# 
   787   000EC7                     EHT7            equ	3783	;# 
   788   000EC8                     EPMM0           equ	3784	;# 
   789   000EC9                     EPMM1           equ	3785	;# 
   790   000ECA                     EPMM2           equ	3786	;# 
   791   000ECB                     EPMM3           equ	3787	;# 
   792   000ECC                     EPMM4           equ	3788	;# 
   793   000ECD                     EPMM5           equ	3789	;# 
   794   000ECE                     EPMM6           equ	3790	;# 
   795   000ECF                     EPMM7           equ	3791	;# 
   796   000ED0                     EPMCS           equ	3792	;# 
   797   000ED0                     EPMCSL          equ	3792	;# 
   798   000ED1                     EPMCSH          equ	3793	;# 
   799   000ED4                     EPMO            equ	3796	;# 
   800   000ED4                     EPMOL           equ	3796	;# 
   801   000ED5                     EPMOH           equ	3797	;# 
   802   000ED8                     ERXFCON         equ	3800	;# 
   803   000ED9                     EPKTCNT         equ	3801	;# 
   804   000EE2                     EWRPT           equ	3810	;# 
   805   000EE2                     EWRPTL          equ	3810	;# 
   806   000EE3                     EWRPTH          equ	3811	;# 
   807   000EE4                     ETXST           equ	3812	;# 
   808   000EE4                     ETXSTL          equ	3812	;# 
   809   000EE5                     ETXSTH          equ	3813	;# 
   810   000EE6                     ETXND           equ	3814	;# 
   811   000EE6                     ETXNDL          equ	3814	;# 
   812   000EE7                     ETXNDH          equ	3815	;# 
   813   000EE8                     ERXST           equ	3816	;# 
   814   000EE8                     ERXSTL          equ	3816	;# 
   815   000EE9                     ERXSTH          equ	3817	;# 
   816   000EEA                     ERXND           equ	3818	;# 
   817   000EEA                     ERXNDL          equ	3818	;# 
   818   000EEB                     ERXNDH          equ	3819	;# 
   819   000EEC                     ERXRDPT         equ	3820	;# 
   820   000EEC                     ERXRDPTL        equ	3820	;# 
   821   000EED                     ERXRDPTH        equ	3821	;# 
   822   000EEE                     ERXWRPT         equ	3822	;# 
   823   000EEE                     ERXWRPTL        equ	3822	;# 
   824   000EEF                     ERXWRPTH        equ	3823	;# 
   825   000EF0                     EDMAST          equ	3824	;# 
   826   000EF0                     EDMASTL         equ	3824	;# 
   827   000EF1                     EDMASTH         equ	3825	;# 
   828   000EF2                     EDMAND          equ	3826	;# 
   829   000EF2                     EDMANDL         equ	3826	;# 
   830   000EF3                     EDMANDH         equ	3827	;# 
   831   000EF4                     EDMADST         equ	3828	;# 
   832   000EF4                     EDMADSTL        equ	3828	;# 
   833   000EF5                     EDMADSTH        equ	3829	;# 
   834   000EF6                     EDMACS          equ	3830	;# 
   835   000EF6                     EDMACSL         equ	3830	;# 
   836   000EF7                     EDMACSH         equ	3831	;# 
   837   000EFB                     EIE             equ	3835	;# 
   838   000EFD                     ESTAT           equ	3837	;# 
   839   000EFE                     ECON2           equ	3838	;# 
   840   000F60                     EIR             equ	3936	;# 
   841   000F61                     EDATA           equ	3937	;# 
   842   000F62                     SSP2CON2        equ	3938	;# 
   843   000F63                     SSP2CON1        equ	3939	;# 
   844   000F64                     SSP2STAT        equ	3940	;# 
   845   000F65                     SSP2ADD         equ	3941	;# 
   846   000F66                     SSP2BUF         equ	3942	;# 
   847   000F67                     ECCP2DEL        equ	3943	;# 
   848   000F68                     ECCP2AS         equ	3944	;# 
   849   000F69                     ECCP3DEL        equ	3945	;# 
   850   000F6A                     ECCP3AS         equ	3946	;# 
   851   000F6B                     RCSTA2          equ	3947	;# 
   852   000F6C                     TXSTA2          equ	3948	;# 
   853   000F6D                     TXREG2          equ	3949	;# 
   854   000F6E                     RCREG2          equ	3950	;# 
   855   000F6F                     SPBRG2          equ	3951	;# 
   856   000F70                     CCP5CON         equ	3952	;# 
   857   000F71                     CCPR5           equ	3953	;# 
   858   000F71                     CCPR5L          equ	3953	;# 
   859   000F72                     CCPR5H          equ	3954	;# 
   860   000F73                     CCP4CON         equ	3955	;# 
   861   000F74                     CCPR4           equ	3956	;# 
   862   000F74                     CCPR4L          equ	3956	;# 
   863   000F75                     CCPR4H          equ	3957	;# 
   864   000F76                     T4CON           equ	3958	;# 
   865   000F77                     PR4             equ	3959	;# 
   866   000F78                     TMR4            equ	3960	;# 
   867   000F79                     ECCP1DEL        equ	3961	;# 
   868   000F7A                     ERDPT           equ	3962	;# 
   869   000F7A                     ERDPTL          equ	3962	;# 
   870   000F7B                     ERDPTH          equ	3963	;# 
   871   000F7C                     BAUDCON2        equ	3964	;# 
   872   000F7C                     BAUDCTL2        equ	3964	;# 
   873   000F7D                     SPBRGH2         equ	3965	;# 
   874   000F7E                     BAUDCON1        equ	3966	;# 
   875   000F7E                     BAUDCON         equ	3966	;# 
   876   000F7E                     BAUDCTL         equ	3966	;# 
   877   000F7E                     BAUDCTL1        equ	3966	;# 
   878   000F7F                     SPBRGH1         equ	3967	;# 
   879   000F7F                     SPBRGH          equ	3967	;# 
   880   000F80                     PORTA           equ	3968	;# 
   881   000F81                     PORTB           equ	3969	;# 
   882   000F82                     PORTC           equ	3970	;# 
   883   000F83                     PORTD           equ	3971	;# 
   884   000F84                     PORTE           equ	3972	;# 
   885   000F85                     PORTF           equ	3973	;# 
   886   000F86                     PORTG           equ	3974	;# 
   887   000F87                     PORTH           equ	3975	;# 
   888   000F88                     PORTJ           equ	3976	;# 
   889   000F89                     LATA            equ	3977	;# 
   890   000F8A                     LATB            equ	3978	;# 
   891   000F8B                     LATC            equ	3979	;# 
   892   000F8C                     LATD            equ	3980	;# 
   893   000F8D                     LATE            equ	3981	;# 
   894   000F8E                     LATF            equ	3982	;# 
   895   000F8F                     LATG            equ	3983	;# 
   896   000F90                     LATH            equ	3984	;# 
   897   000F91                     LATJ            equ	3985	;# 
   898   000F92                     TRISA           equ	3986	;# 
   899   000F92                     DDRA            equ	3986	;# 
   900   000F93                     TRISB           equ	3987	;# 
   901   000F93                     DDRB            equ	3987	;# 
   902   000F94                     TRISC           equ	3988	;# 
   903   000F94                     DDRC            equ	3988	;# 
   904   000F95                     TRISD           equ	3989	;# 
   905   000F95                     DDRD            equ	3989	;# 
   906   000F96                     TRISE           equ	3990	;# 
   907   000F96                     DDRE            equ	3990	;# 
   908   000F97                     TRISF           equ	3991	;# 
   909   000F97                     DDRF            equ	3991	;# 
   910   000F98                     TRISG           equ	3992	;# 
   911   000F98                     DDRG            equ	3992	;# 
   912   000F99                     TRISH           equ	3993	;# 
   913   000F99                     DDRH            equ	3993	;# 
   914   000F9A                     TRISJ           equ	3994	;# 
   915   000F9A                     DDRJ            equ	3994	;# 
   916   000F9B                     OSCTUNE         equ	3995	;# 
   917   000F9C                     MEMCON          equ	3996	;# 
   918   000F9D                     PIE1            equ	3997	;# 
   919   000F9E                     PIR1            equ	3998	;# 
   920   000F9F                     IPR1            equ	3999	;# 
   921   000FA0                     PIE2            equ	4000	;# 
   922   000FA1                     PIR2            equ	4001	;# 
   923   000FA2                     IPR2            equ	4002	;# 
   924   000FA3                     PIE3            equ	4003	;# 
   925   000FA4                     PIR3            equ	4004	;# 
   926   000FA5                     IPR3            equ	4005	;# 
   927   000FA6                     EECON1          equ	4006	;# 
   928   000FA7                     EECON2          equ	4007	;# 
   929   000FAB                     RCSTA1          equ	4011	;# 
   930   000FAB                     RCSTA           equ	4011	;# 
   931   000FAC                     TXSTA1          equ	4012	;# 
   932   000FAC                     TXSTA           equ	4012	;# 
   933   000FAD                     TXREG1          equ	4013	;# 
   934   000FAD                     TXREG           equ	4013	;# 
   935   000FAE                     RCREG1          equ	4014	;# 
   936   000FAE                     RCREG           equ	4014	;# 
   937   000FAF                     SPBRG1          equ	4015	;# 
   938   000FAF                     SPBRG           equ	4015	;# 
   939   000FB0                     PSPCON          equ	4016	;# 
   940   000FB1                     T3CON           equ	4017	;# 
   941   000FB2                     TMR3            equ	4018	;# 
   942   000FB2                     TMR3L           equ	4018	;# 
   943   000FB3                     TMR3H           equ	4019	;# 
   944   000FB4                     CMCON           equ	4020	;# 
   945   000FB5                     CVRCON          equ	4021	;# 
   946   000FB6                     ECCP1AS         equ	4022	;# 
   947   000FB7                     CCP3CON         equ	4023	;# 
   948   000FB7                     ECCP3CON        equ	4023	;# 
   949   000FB8                     CCPR3           equ	4024	;# 
   950   000FB8                     CCPR3L          equ	4024	;# 
   951   000FB9                     CCPR3H          equ	4025	;# 
   952   000FBA                     CCP2CON         equ	4026	;# 
   953   000FBA                     ECCP2CON        equ	4026	;# 
   954   000FBB                     CCPR2           equ	4027	;# 
   955   000FBB                     CCPR2L          equ	4027	;# 
   956   000FBC                     CCPR2H          equ	4028	;# 
   957   000FBD                     CCP1CON         equ	4029	;# 
   958   000FBD                     ECCP1CON        equ	4029	;# 
   959   000FBE                     CCPR1           equ	4030	;# 
   960   000FBE                     CCPR1L          equ	4030	;# 
   961   000FBF                     CCPR1H          equ	4031	;# 
   962   000FC0                     ADCON2          equ	4032	;# 
   963   000FC1                     ADCON1          equ	4033	;# 
   964   000FC2                     ADCON0          equ	4034	;# 
   965   000FC3                     ADRES           equ	4035	;# 
   966   000FC3                     ADRESL          equ	4035	;# 
   967   000FC4                     ADRESH          equ	4036	;# 
   968   000FC5                     SSP1CON2        equ	4037	;# 
   969   000FC5                     SSPCON2         equ	4037	;# 
   970   000FC6                     SSP1CON1        equ	4038	;# 
   971   000FC6                     SSPCON1         equ	4038	;# 
   972   000FC7                     SSP1STAT        equ	4039	;# 
   973   000FC7                     SSPSTAT         equ	4039	;# 
   974   000FC8                     SSP1ADD         equ	4040	;# 
   975   000FC8                     SSPADD          equ	4040	;# 
   976   000FC9                     SSP1BUF         equ	4041	;# 
   977   000FC9                     SSPBUF          equ	4041	;# 
   978   000FCA                     T2CON           equ	4042	;# 
   979   000FCB                     PR2             equ	4043	;# 
   980   000FCC                     TMR2            equ	4044	;# 
   981   000FCD                     T1CON           equ	4045	;# 
   982   000FCE                     TMR1            equ	4046	;# 
   983   000FCE                     TMR1L           equ	4046	;# 
   984   000FCF                     TMR1H           equ	4047	;# 
   985   000FD0                     RCON            equ	4048	;# 
   986   000FD1                     WDTCON          equ	4049	;# 
   987   000FD2                     ECON1           equ	4050	;# 
   988   000FD3                     OSCCON          equ	4051	;# 
   989   000FD5                     T0CON           equ	4053	;# 
   990   000FD6                     TMR0            equ	4054	;# 
   991   000FD6                     TMR0L           equ	4054	;# 
   992   000FD7                     TMR0H           equ	4055	;# 
   993   000FD8                     STATUS          equ	4056	;# 
   994   000FD9                     FSR2            equ	4057	;# 
   995   000FD9                     FSR2L           equ	4057	;# 
   996   000FDA                     FSR2H           equ	4058	;# 
   997   000FDB                     PLUSW2          equ	4059	;# 
   998   000FDC                     PREINC2         equ	4060	;# 
   999   000FDD                     POSTDEC2        equ	4061	;# 
  1000   000FDE                     POSTINC2        equ	4062	;# 
  1001   000FDF                     INDF2           equ	4063	;# 
  1002   000FE0                     BSR             equ	4064	;# 
  1003   000FE1                     FSR1            equ	4065	;# 
  1004   000FE1                     FSR1L           equ	4065	;# 
  1005   000FE2                     FSR1H           equ	4066	;# 
  1006   000FE3                     PLUSW1          equ	4067	;# 
  1007   000FE4                     PREINC1         equ	4068	;# 
  1008   000FE5                     POSTDEC1        equ	4069	;# 
  1009   000FE6                     POSTINC1        equ	4070	;# 
  1010   000FE7                     INDF1           equ	4071	;# 
  1011   000FE8                     WREG            equ	4072	;# 
  1012   000FE9                     FSR0            equ	4073	;# 
  1013   000FE9                     FSR0L           equ	4073	;# 
  1014   000FEA                     FSR0H           equ	4074	;# 
  1015   000FEB                     PLUSW0          equ	4075	;# 
  1016   000FEC                     PREINC0         equ	4076	;# 
  1017   000FED                     POSTDEC0        equ	4077	;# 
  1018   000FEE                     POSTINC0        equ	4078	;# 
  1019   000FEF                     INDF0           equ	4079	;# 
  1020   000FF0                     INTCON3         equ	4080	;# 
  1021   000FF1                     INTCON2         equ	4081	;# 
  1022   000FF2                     INTCON          equ	4082	;# 
  1023   000FF3                     PROD            equ	4083	;# 
  1024   000FF3                     PRODL           equ	4083	;# 
  1025   000FF4                     PRODH           equ	4084	;# 
  1026   000FF5                     TABLAT          equ	4085	;# 
  1027   000FF6                     TBLPTR          equ	4086	;# 
  1028   000FF6                     TBLPTRL         equ	4086	;# 
  1029   000FF7                     TBLPTRH         equ	4087	;# 
  1030   000FF8                     TBLPTRU         equ	4088	;# 
  1031   000FF9                     PCLAT           equ	4089	;# 
  1032   000FF9                     PC              equ	4089	;# 
  1033   000FF9                     PCL             equ	4089	;# 
  1034   000FFA                     PCLATH          equ	4090	;# 
  1035   000FFB                     PCLATU          equ	4091	;# 
  1036   000FFC                     STKPTR          equ	4092	;# 
  1037   000FFD                     TOS             equ	4093	;# 
  1038   000FFD                     TOSL            equ	4093	;# 
  1039   000FFE                     TOSH            equ	4094	;# 
  1040   000FFF                     TOSU            equ	4095	;# 
  1041   000E80                     MAADR5          equ	3712	;# 
  1042   000E81                     MAADR6          equ	3713	;# 
  1043   000E82                     MAADR3          equ	3714	;# 
  1044   000E83                     MAADR4          equ	3715	;# 
  1045   000E84                     MAADR1          equ	3716	;# 
  1046   000E85                     MAADR2          equ	3717	;# 
  1047   000E8A                     MISTAT          equ	3722	;# 
  1048   000E97                     EFLOCON         equ	3735	;# 
  1049   000E98                     EPAUS           equ	3736	;# 
  1050   000E98                     EPAUSL          equ	3736	;# 
  1051   000E99                     EPAUSH          equ	3737	;# 
  1052   000EA0                     MACON1          equ	3744	;# 
  1053   000EA2                     MACON3          equ	3746	;# 
  1054   000EA3                     MACON4          equ	3747	;# 
  1055   000EA4                     MABBIPG         equ	3748	;# 
  1056   000EA6                     MAIPG           equ	3750	;# 
  1057   000EA6                     MAIPGL          equ	3750	;# 
  1058   000EA7                     MAIPGH          equ	3751	;# 
  1059   000EAA                     MAMXFL          equ	3754	;# 
  1060   000EAA                     MAMXFLL         equ	3754	;# 
  1061   000EAB                     MAMXFLH         equ	3755	;# 
  1062   000EB2                     MICMD           equ	3762	;# 
  1063   000EB4                     MIREGADR        equ	3764	;# 
  1064   000EB6                     MIWR            equ	3766	;# 
  1065   000EB6                     MIWRL           equ	3766	;# 
  1066   000EB7                     MIWRH           equ	3767	;# 
  1067   000EB8                     MIRD            equ	3768	;# 
  1068   000EB8                     MIRDL           equ	3768	;# 
  1069   000EB9                     MIRDH           equ	3769	;# 
  1070   000EC0                     EHT0            equ	3776	;# 
  1071   000EC1                     EHT1            equ	3777	;# 
  1072   000EC2                     EHT2            equ	3778	;# 
  1073   000EC3                     EHT3            equ	3779	;# 
  1074   000EC4                     EHT4            equ	3780	;# 
  1075   000EC5                     EHT5            equ	3781	;# 
  1076   000EC6                     EHT6            equ	3782	;# 
  1077   000EC7                     EHT7            equ	3783	;# 
  1078   000EC8                     EPMM0           equ	3784	;# 
  1079   000EC9                     EPMM1           equ	3785	;# 
  1080   000ECA                     EPMM2           equ	3786	;# 
  1081   000ECB                     EPMM3           equ	3787	;# 
  1082   000ECC                     EPMM4           equ	3788	;# 
  1083   000ECD                     EPMM5           equ	3789	;# 
  1084   000ECE                     EPMM6           equ	3790	;# 
  1085   000ECF                     EPMM7           equ	3791	;# 
  1086   000ED0                     EPMCS           equ	3792	;# 
  1087   000ED0                     EPMCSL          equ	3792	;# 
  1088   000ED1                     EPMCSH          equ	3793	;# 
  1089   000ED4                     EPMO            equ	3796	;# 
  1090   000ED4                     EPMOL           equ	3796	;# 
  1091   000ED5                     EPMOH           equ	3797	;# 
  1092   000ED8                     ERXFCON         equ	3800	;# 
  1093   000ED9                     EPKTCNT         equ	3801	;# 
  1094   000EE2                     EWRPT           equ	3810	;# 
  1095   000EE2                     EWRPTL          equ	3810	;# 
  1096   000EE3                     EWRPTH          equ	3811	;# 
  1097   000EE4                     ETXST           equ	3812	;# 
  1098   000EE4                     ETXSTL          equ	3812	;# 
  1099   000EE5                     ETXSTH          equ	3813	;# 
  1100   000EE6                     ETXND           equ	3814	;# 
  1101   000EE6                     ETXNDL          equ	3814	;# 
  1102   000EE7                     ETXNDH          equ	3815	;# 
  1103   000EE8                     ERXST           equ	3816	;# 
  1104   000EE8                     ERXSTL          equ	3816	;# 
  1105   000EE9                     ERXSTH          equ	3817	;# 
  1106   000EEA                     ERXND           equ	3818	;# 
  1107   000EEA                     ERXNDL          equ	3818	;# 
  1108   000EEB                     ERXNDH          equ	3819	;# 
  1109   000EEC                     ERXRDPT         equ	3820	;# 
  1110   000EEC                     ERXRDPTL        equ	3820	;# 
  1111   000EED                     ERXRDPTH        equ	3821	;# 
  1112   000EEE                     ERXWRPT         equ	3822	;# 
  1113   000EEE                     ERXWRPTL        equ	3822	;# 
  1114   000EEF                     ERXWRPTH        equ	3823	;# 
  1115   000EF0                     EDMAST          equ	3824	;# 
  1116   000EF0                     EDMASTL         equ	3824	;# 
  1117   000EF1                     EDMASTH         equ	3825	;# 
  1118   000EF2                     EDMAND          equ	3826	;# 
  1119   000EF2                     EDMANDL         equ	3826	;# 
  1120   000EF3                     EDMANDH         equ	3827	;# 
  1121   000EF4                     EDMADST         equ	3828	;# 
  1122   000EF4                     EDMADSTL        equ	3828	;# 
  1123   000EF5                     EDMADSTH        equ	3829	;# 
  1124   000EF6                     EDMACS          equ	3830	;# 
  1125   000EF6                     EDMACSL         equ	3830	;# 
  1126   000EF7                     EDMACSH         equ	3831	;# 
  1127   000EFB                     EIE             equ	3835	;# 
  1128   000EFD                     ESTAT           equ	3837	;# 
  1129   000EFE                     ECON2           equ	3838	;# 
  1130   000F60                     EIR             equ	3936	;# 
  1131   000F61                     EDATA           equ	3937	;# 
  1132   000F62                     SSP2CON2        equ	3938	;# 
  1133   000F63                     SSP2CON1        equ	3939	;# 
  1134   000F64                     SSP2STAT        equ	3940	;# 
  1135   000F65                     SSP2ADD         equ	3941	;# 
  1136   000F66                     SSP2BUF         equ	3942	;# 
  1137   000F67                     ECCP2DEL        equ	3943	;# 
  1138   000F68                     ECCP2AS         equ	3944	;# 
  1139   000F69                     ECCP3DEL        equ	3945	;# 
  1140   000F6A                     ECCP3AS         equ	3946	;# 
  1141   000F6B                     RCSTA2          equ	3947	;# 
  1142   000F6C                     TXSTA2          equ	3948	;# 
  1143   000F6D                     TXREG2          equ	3949	;# 
  1144   000F6E                     RCREG2          equ	3950	;# 
  1145   000F6F                     SPBRG2          equ	3951	;# 
  1146   000F70                     CCP5CON         equ	3952	;# 
  1147   000F71                     CCPR5           equ	3953	;# 
  1148   000F71                     CCPR5L          equ	3953	;# 
  1149   000F72                     CCPR5H          equ	3954	;# 
  1150   000F73                     CCP4CON         equ	3955	;# 
  1151   000F74                     CCPR4           equ	3956	;# 
  1152   000F74                     CCPR4L          equ	3956	;# 
  1153   000F75                     CCPR4H          equ	3957	;# 
  1154   000F76                     T4CON           equ	3958	;# 
  1155   000F77                     PR4             equ	3959	;# 
  1156   000F78                     TMR4            equ	3960	;# 
  1157   000F79                     ECCP1DEL        equ	3961	;# 
  1158   000F7A                     ERDPT           equ	3962	;# 
  1159   000F7A                     ERDPTL          equ	3962	;# 
  1160   000F7B                     ERDPTH          equ	3963	;# 
  1161   000F7C                     BAUDCON2        equ	3964	;# 
  1162   000F7C                     BAUDCTL2        equ	3964	;# 
  1163   000F7D                     SPBRGH2         equ	3965	;# 
  1164   000F7E                     BAUDCON1        equ	3966	;# 
  1165   000F7E                     BAUDCON         equ	3966	;# 
  1166   000F7E                     BAUDCTL         equ	3966	;# 
  1167   000F7E                     BAUDCTL1        equ	3966	;# 
  1168   000F7F                     SPBRGH1         equ	3967	;# 
  1169   000F7F                     SPBRGH          equ	3967	;# 
  1170   000F80                     PORTA           equ	3968	;# 
  1171   000F81                     PORTB           equ	3969	;# 
  1172   000F82                     PORTC           equ	3970	;# 
  1173   000F83                     PORTD           equ	3971	;# 
  1174   000F84                     PORTE           equ	3972	;# 
  1175   000F85                     PORTF           equ	3973	;# 
  1176   000F86                     PORTG           equ	3974	;# 
  1177   000F87                     PORTH           equ	3975	;# 
  1178   000F88                     PORTJ           equ	3976	;# 
  1179   000F89                     LATA            equ	3977	;# 
  1180   000F8A                     LATB            equ	3978	;# 
  1181   000F8B                     LATC            equ	3979	;# 
  1182   000F8C                     LATD            equ	3980	;# 
  1183   000F8D                     LATE            equ	3981	;# 
  1184   000F8E                     LATF            equ	3982	;# 
  1185   000F8F                     LATG            equ	3983	;# 
  1186   000F90                     LATH            equ	3984	;# 
  1187   000F91                     LATJ            equ	3985	;# 
  1188   000F92                     TRISA           equ	3986	;# 
  1189   000F92                     DDRA            equ	3986	;# 
  1190   000F93                     TRISB           equ	3987	;# 
  1191   000F93                     DDRB            equ	3987	;# 
  1192   000F94                     TRISC           equ	3988	;# 
  1193   000F94                     DDRC            equ	3988	;# 
  1194   000F95                     TRISD           equ	3989	;# 
  1195   000F95                     DDRD            equ	3989	;# 
  1196   000F96                     TRISE           equ	3990	;# 
  1197   000F96                     DDRE            equ	3990	;# 
  1198   000F97                     TRISF           equ	3991	;# 
  1199   000F97                     DDRF            equ	3991	;# 
  1200   000F98                     TRISG           equ	3992	;# 
  1201   000F98                     DDRG            equ	3992	;# 
  1202   000F99                     TRISH           equ	3993	;# 
  1203   000F99                     DDRH            equ	3993	;# 
  1204   000F9A                     TRISJ           equ	3994	;# 
  1205   000F9A                     DDRJ            equ	3994	;# 
  1206   000F9B                     OSCTUNE         equ	3995	;# 
  1207   000F9C                     MEMCON          equ	3996	;# 
  1208   000F9D                     PIE1            equ	3997	;# 
  1209   000F9E                     PIR1            equ	3998	;# 
  1210   000F9F                     IPR1            equ	3999	;# 
  1211   000FA0                     PIE2            equ	4000	;# 
  1212   000FA1                     PIR2            equ	4001	;# 
  1213   000FA2                     IPR2            equ	4002	;# 
  1214   000FA3                     PIE3            equ	4003	;# 
  1215   000FA4                     PIR3            equ	4004	;# 
  1216   000FA5                     IPR3            equ	4005	;# 
  1217   000FA6                     EECON1          equ	4006	;# 
  1218   000FA7                     EECON2          equ	4007	;# 
  1219   000FAB                     RCSTA1          equ	4011	;# 
  1220   000FAB                     RCSTA           equ	4011	;# 
  1221   000FAC                     TXSTA1          equ	4012	;# 
  1222   000FAC                     TXSTA           equ	4012	;# 
  1223   000FAD                     TXREG1          equ	4013	;# 
  1224   000FAD                     TXREG           equ	4013	;# 
  1225   000FAE                     RCREG1          equ	4014	;# 
  1226   000FAE                     RCREG           equ	4014	;# 
  1227   000FAF                     SPBRG1          equ	4015	;# 
  1228   000FAF                     SPBRG           equ	4015	;# 
  1229   000FB0                     PSPCON          equ	4016	;# 
  1230   000FB1                     T3CON           equ	4017	;# 
  1231   000FB2                     TMR3            equ	4018	;# 
  1232   000FB2                     TMR3L           equ	4018	;# 
  1233   000FB3                     TMR3H           equ	4019	;# 
  1234   000FB4                     CMCON           equ	4020	;# 
  1235   000FB5                     CVRCON          equ	4021	;# 
  1236   000FB6                     ECCP1AS         equ	4022	;# 
  1237   000FB7                     CCP3CON         equ	4023	;# 
  1238   000FB7                     ECCP3CON        equ	4023	;# 
  1239   000FB8                     CCPR3           equ	4024	;# 
  1240   000FB8                     CCPR3L          equ	4024	;# 
  1241   000FB9                     CCPR3H          equ	4025	;# 
  1242   000FBA                     CCP2CON         equ	4026	;# 
  1243   000FBA                     ECCP2CON        equ	4026	;# 
  1244   000FBB                     CCPR2           equ	4027	;# 
  1245   000FBB                     CCPR2L          equ	4027	;# 
  1246   000FBC                     CCPR2H          equ	4028	;# 
  1247   000FBD                     CCP1CON         equ	4029	;# 
  1248   000FBD                     ECCP1CON        equ	4029	;# 
  1249   000FBE                     CCPR1           equ	4030	;# 
  1250   000FBE                     CCPR1L          equ	4030	;# 
  1251   000FBF                     CCPR1H          equ	4031	;# 
  1252   000FC0                     ADCON2          equ	4032	;# 
  1253   000FC1                     ADCON1          equ	4033	;# 
  1254   000FC2                     ADCON0          equ	4034	;# 
  1255   000FC3                     ADRES           equ	4035	;# 
  1256   000FC3                     ADRESL          equ	4035	;# 
  1257   000FC4                     ADRESH          equ	4036	;# 
  1258   000FC5                     SSP1CON2        equ	4037	;# 
  1259   000FC5                     SSPCON2         equ	4037	;# 
  1260   000FC6                     SSP1CON1        equ	4038	;# 
  1261   000FC6                     SSPCON1         equ	4038	;# 
  1262   000FC7                     SSP1STAT        equ	4039	;# 
  1263   000FC7                     SSPSTAT         equ	4039	;# 
  1264   000FC8                     SSP1ADD         equ	4040	;# 
  1265   000FC8                     SSPADD          equ	4040	;# 
  1266   000FC9                     SSP1BUF         equ	4041	;# 
  1267   000FC9                     SSPBUF          equ	4041	;# 
  1268   000FCA                     T2CON           equ	4042	;# 
  1269   000FCB                     PR2             equ	4043	;# 
  1270   000FCC                     TMR2            equ	4044	;# 
  1271   000FCD                     T1CON           equ	4045	;# 
  1272   000FCE                     TMR1            equ	4046	;# 
  1273   000FCE                     TMR1L           equ	4046	;# 
  1274   000FCF                     TMR1H           equ	4047	;# 
  1275   000FD0                     RCON            equ	4048	;# 
  1276   000FD1                     WDTCON          equ	4049	;# 
  1277   000FD2                     ECON1           equ	4050	;# 
  1278   000FD3                     OSCCON          equ	4051	;# 
  1279   000FD5                     T0CON           equ	4053	;# 
  1280   000FD6                     TMR0            equ	4054	;# 
  1281   000FD6                     TMR0L           equ	4054	;# 
  1282   000FD7                     TMR0H           equ	4055	;# 
  1283   000FD8                     STATUS          equ	4056	;# 
  1284   000FD9                     FSR2            equ	4057	;# 
  1285   000FD9                     FSR2L           equ	4057	;# 
  1286   000FDA                     FSR2H           equ	4058	;# 
  1287   000FDB                     PLUSW2          equ	4059	;# 
  1288   000FDC                     PREINC2         equ	4060	;# 
  1289   000FDD                     POSTDEC2        equ	4061	;# 
  1290   000FDE                     POSTINC2        equ	4062	;# 
  1291   000FDF                     INDF2           equ	4063	;# 
  1292   000FE0                     BSR             equ	4064	;# 
  1293   000FE1                     FSR1            equ	4065	;# 
  1294   000FE1                     FSR1L           equ	4065	;# 
  1295   000FE2                     FSR1H           equ	4066	;# 
  1296   000FE3                     PLUSW1          equ	4067	;# 
  1297   000FE4                     PREINC1         equ	4068	;# 
  1298   000FE5                     POSTDEC1        equ	4069	;# 
  1299   000FE6                     POSTINC1        equ	4070	;# 
  1300   000FE7                     INDF1           equ	4071	;# 
  1301   000FE8                     WREG            equ	4072	;# 
  1302   000FE9                     FSR0            equ	4073	;# 
  1303   000FE9                     FSR0L           equ	4073	;# 
  1304   000FEA                     FSR0H           equ	4074	;# 
  1305   000FEB                     PLUSW0          equ	4075	;# 
  1306   000FEC                     PREINC0         equ	4076	;# 
  1307   000FED                     POSTDEC0        equ	4077	;# 
  1308   000FEE                     POSTINC0        equ	4078	;# 
  1309   000FEF                     INDF0           equ	4079	;# 
  1310   000FF0                     INTCON3         equ	4080	;# 
  1311   000FF1                     INTCON2         equ	4081	;# 
  1312   000FF2                     INTCON          equ	4082	;# 
  1313   000FF3                     PROD            equ	4083	;# 
  1314   000FF3                     PRODL           equ	4083	;# 
  1315   000FF4                     PRODH           equ	4084	;# 
  1316   000FF5                     TABLAT          equ	4085	;# 
  1317   000FF6                     TBLPTR          equ	4086	;# 
  1318   000FF6                     TBLPTRL         equ	4086	;# 
  1319   000FF7                     TBLPTRH         equ	4087	;# 
  1320   000FF8                     TBLPTRU         equ	4088	;# 
  1321   000FF9                     PCLAT           equ	4089	;# 
  1322   000FF9                     PC              equ	4089	;# 
  1323   000FF9                     PCL             equ	4089	;# 
  1324   000FFA                     PCLATH          equ	4090	;# 
  1325   000FFB                     PCLATU          equ	4091	;# 
  1326   000FFC                     STKPTR          equ	4092	;# 
  1327   000FFD                     TOS             equ	4093	;# 
  1328   000FFD                     TOSL            equ	4093	;# 
  1329   000FFE                     TOSH            equ	4094	;# 
  1330   000FFF                     TOSU            equ	4095	;# 
  1331   000E80                     MAADR5          equ	3712	;# 
  1332   000E81                     MAADR6          equ	3713	;# 
  1333   000E82                     MAADR3          equ	3714	;# 
  1334   000E83                     MAADR4          equ	3715	;# 
  1335   000E84                     MAADR1          equ	3716	;# 
  1336   000E85                     MAADR2          equ	3717	;# 
  1337   000E8A                     MISTAT          equ	3722	;# 
  1338   000E97                     EFLOCON         equ	3735	;# 
  1339   000E98                     EPAUS           equ	3736	;# 
  1340   000E98                     EPAUSL          equ	3736	;# 
  1341   000E99                     EPAUSH          equ	3737	;# 
  1342   000EA0                     MACON1          equ	3744	;# 
  1343   000EA2                     MACON3          equ	3746	;# 
  1344   000EA3                     MACON4          equ	3747	;# 
  1345   000EA4                     MABBIPG         equ	3748	;# 
  1346   000EA6                     MAIPG           equ	3750	;# 
  1347   000EA6                     MAIPGL          equ	3750	;# 
  1348   000EA7                     MAIPGH          equ	3751	;# 
  1349   000EAA                     MAMXFL          equ	3754	;# 
  1350   000EAA                     MAMXFLL         equ	3754	;# 
  1351   000EAB                     MAMXFLH         equ	3755	;# 
  1352   000EB2                     MICMD           equ	3762	;# 
  1353   000EB4                     MIREGADR        equ	3764	;# 
  1354   000EB6                     MIWR            equ	3766	;# 
  1355   000EB6                     MIWRL           equ	3766	;# 
  1356   000EB7                     MIWRH           equ	3767	;# 
  1357   000EB8                     MIRD            equ	3768	;# 
  1358   000EB8                     MIRDL           equ	3768	;# 
  1359   000EB9                     MIRDH           equ	3769	;# 
  1360   000EC0                     EHT0            equ	3776	;# 
  1361   000EC1                     EHT1            equ	3777	;# 
  1362   000EC2                     EHT2            equ	3778	;# 
  1363   000EC3                     EHT3            equ	3779	;# 
  1364   000EC4                     EHT4            equ	3780	;# 
  1365   000EC5                     EHT5            equ	3781	;# 
  1366   000EC6                     EHT6            equ	3782	;# 
  1367   000EC7                     EHT7            equ	3783	;# 
  1368   000EC8                     EPMM0           equ	3784	;# 
  1369   000EC9                     EPMM1           equ	3785	;# 
  1370   000ECA                     EPMM2           equ	3786	;# 
  1371   000ECB                     EPMM3           equ	3787	;# 
  1372   000ECC                     EPMM4           equ	3788	;# 
  1373   000ECD                     EPMM5           equ	3789	;# 
  1374   000ECE                     EPMM6           equ	3790	;# 
  1375   000ECF                     EPMM7           equ	3791	;# 
  1376   000ED0                     EPMCS           equ	3792	;# 
  1377   000ED0                     EPMCSL          equ	3792	;# 
  1378   000ED1                     EPMCSH          equ	3793	;# 
  1379   000ED4                     EPMO            equ	3796	;# 
  1380   000ED4                     EPMOL           equ	3796	;# 
  1381   000ED5                     EPMOH           equ	3797	;# 
  1382   000ED8                     ERXFCON         equ	3800	;# 
  1383   000ED9                     EPKTCNT         equ	3801	;# 
  1384   000EE2                     EWRPT           equ	3810	;# 
  1385   000EE2                     EWRPTL          equ	3810	;# 
  1386   000EE3                     EWRPTH          equ	3811	;# 
  1387   000EE4                     ETXST           equ	3812	;# 
  1388   000EE4                     ETXSTL          equ	3812	;# 
  1389   000EE5                     ETXSTH          equ	3813	;# 
  1390   000EE6                     ETXND           equ	3814	;# 
  1391   000EE6                     ETXNDL          equ	3814	;# 
  1392   000EE7                     ETXNDH          equ	3815	;# 
  1393   000EE8                     ERXST           equ	3816	;# 
  1394   000EE8                     ERXSTL          equ	3816	;# 
  1395   000EE9                     ERXSTH          equ	3817	;# 
  1396   000EEA                     ERXND           equ	3818	;# 
  1397   000EEA                     ERXNDL          equ	3818	;# 
  1398   000EEB                     ERXNDH          equ	3819	;# 
  1399   000EEC                     ERXRDPT         equ	3820	;# 
  1400   000EEC                     ERXRDPTL        equ	3820	;# 
  1401   000EED                     ERXRDPTH        equ	3821	;# 
  1402   000EEE                     ERXWRPT         equ	3822	;# 
  1403   000EEE                     ERXWRPTL        equ	3822	;# 
  1404   000EEF                     ERXWRPTH        equ	3823	;# 
  1405   000EF0                     EDMAST          equ	3824	;# 
  1406   000EF0                     EDMASTL         equ	3824	;# 
  1407   000EF1                     EDMASTH         equ	3825	;# 
  1408   000EF2                     EDMAND          equ	3826	;# 
  1409   000EF2                     EDMANDL         equ	3826	;# 
  1410   000EF3                     EDMANDH         equ	3827	;# 
  1411   000EF4                     EDMADST         equ	3828	;# 
  1412   000EF4                     EDMADSTL        equ	3828	;# 
  1413   000EF5                     EDMADSTH        equ	3829	;# 
  1414   000EF6                     EDMACS          equ	3830	;# 
  1415   000EF6                     EDMACSL         equ	3830	;# 
  1416   000EF7                     EDMACSH         equ	3831	;# 
  1417   000EFB                     EIE             equ	3835	;# 
  1418   000EFD                     ESTAT           equ	3837	;# 
  1419   000EFE                     ECON2           equ	3838	;# 
  1420   000F60                     EIR             equ	3936	;# 
  1421   000F61                     EDATA           equ	3937	;# 
  1422   000F62                     SSP2CON2        equ	3938	;# 
  1423   000F63                     SSP2CON1        equ	3939	;# 
  1424   000F64                     SSP2STAT        equ	3940	;# 
  1425   000F65                     SSP2ADD         equ	3941	;# 
  1426   000F66                     SSP2BUF         equ	3942	;# 
  1427   000F67                     ECCP2DEL        equ	3943	;# 
  1428   000F68                     ECCP2AS         equ	3944	;# 
  1429   000F69                     ECCP3DEL        equ	3945	;# 
  1430   000F6A                     ECCP3AS         equ	3946	;# 
  1431   000F6B                     RCSTA2          equ	3947	;# 
  1432   000F6C                     TXSTA2          equ	3948	;# 
  1433   000F6D                     TXREG2          equ	3949	;# 
  1434   000F6E                     RCREG2          equ	3950	;# 
  1435   000F6F                     SPBRG2          equ	3951	;# 
  1436   000F70                     CCP5CON         equ	3952	;# 
  1437   000F71                     CCPR5           equ	3953	;# 
  1438   000F71                     CCPR5L          equ	3953	;# 
  1439   000F72                     CCPR5H          equ	3954	;# 
  1440   000F73                     CCP4CON         equ	3955	;# 
  1441   000F74                     CCPR4           equ	3956	;# 
  1442   000F74                     CCPR4L          equ	3956	;# 
  1443   000F75                     CCPR4H          equ	3957	;# 
  1444   000F76                     T4CON           equ	3958	;# 
  1445   000F77                     PR4             equ	3959	;# 
  1446   000F78                     TMR4            equ	3960	;# 
  1447   000F79                     ECCP1DEL        equ	3961	;# 
  1448   000F7A                     ERDPT           equ	3962	;# 
  1449   000F7A                     ERDPTL          equ	3962	;# 
  1450   000F7B                     ERDPTH          equ	3963	;# 
  1451   000F7C                     BAUDCON2        equ	3964	;# 
  1452   000F7C                     BAUDCTL2        equ	3964	;# 
  1453   000F7D                     SPBRGH2         equ	3965	;# 
  1454   000F7E                     BAUDCON1        equ	3966	;# 
  1455   000F7E                     BAUDCON         equ	3966	;# 
  1456   000F7E                     BAUDCTL         equ	3966	;# 
  1457   000F7E                     BAUDCTL1        equ	3966	;# 
  1458   000F7F                     SPBRGH1         equ	3967	;# 
  1459   000F7F                     SPBRGH          equ	3967	;# 
  1460   000F80                     PORTA           equ	3968	;# 
  1461   000F81                     PORTB           equ	3969	;# 
  1462   000F82                     PORTC           equ	3970	;# 
  1463   000F83                     PORTD           equ	3971	;# 
  1464   000F84                     PORTE           equ	3972	;# 
  1465   000F85                     PORTF           equ	3973	;# 
  1466   000F86                     PORTG           equ	3974	;# 
  1467   000F87                     PORTH           equ	3975	;# 
  1468   000F88                     PORTJ           equ	3976	;# 
  1469   000F89                     LATA            equ	3977	;# 
  1470   000F8A                     LATB            equ	3978	;# 
  1471   000F8B                     LATC            equ	3979	;# 
  1472   000F8C                     LATD            equ	3980	;# 
  1473   000F8D                     LATE            equ	3981	;# 
  1474   000F8E                     LATF            equ	3982	;# 
  1475   000F8F                     LATG            equ	3983	;# 
  1476   000F90                     LATH            equ	3984	;# 
  1477   000F91                     LATJ            equ	3985	;# 
  1478   000F92                     TRISA           equ	3986	;# 
  1479   000F92                     DDRA            equ	3986	;# 
  1480   000F93                     TRISB           equ	3987	;# 
  1481   000F93                     DDRB            equ	3987	;# 
  1482   000F94                     TRISC           equ	3988	;# 
  1483   000F94                     DDRC            equ	3988	;# 
  1484   000F95                     TRISD           equ	3989	;# 
  1485   000F95                     DDRD            equ	3989	;# 
  1486   000F96                     TRISE           equ	3990	;# 
  1487   000F96                     DDRE            equ	3990	;# 
  1488   000F97                     TRISF           equ	3991	;# 
  1489   000F97                     DDRF            equ	3991	;# 
  1490   000F98                     TRISG           equ	3992	;# 
  1491   000F98                     DDRG            equ	3992	;# 
  1492   000F99                     TRISH           equ	3993	;# 
  1493   000F99                     DDRH            equ	3993	;# 
  1494   000F9A                     TRISJ           equ	3994	;# 
  1495   000F9A                     DDRJ            equ	3994	;# 
  1496   000F9B                     OSCTUNE         equ	3995	;# 
  1497   000F9C                     MEMCON          equ	3996	;# 
  1498   000F9D                     PIE1            equ	3997	;# 
  1499   000F9E                     PIR1            equ	3998	;# 
  1500   000F9F                     IPR1            equ	3999	;# 
  1501   000FA0                     PIE2            equ	4000	;# 
  1502   000FA1                     PIR2            equ	4001	;# 
  1503   000FA2                     IPR2            equ	4002	;# 
  1504   000FA3                     PIE3            equ	4003	;# 
  1505   000FA4                     PIR3            equ	4004	;# 
  1506   000FA5                     IPR3            equ	4005	;# 
  1507   000FA6                     EECON1          equ	4006	;# 
  1508   000FA7                     EECON2          equ	4007	;# 
  1509   000FAB                     RCSTA1          equ	4011	;# 
  1510   000FAB                     RCSTA           equ	4011	;# 
  1511   000FAC                     TXSTA1          equ	4012	;# 
  1512   000FAC                     TXSTA           equ	4012	;# 
  1513   000FAD                     TXREG1          equ	4013	;# 
  1514   000FAD                     TXREG           equ	4013	;# 
  1515   000FAE                     RCREG1          equ	4014	;# 
  1516   000FAE                     RCREG           equ	4014	;# 
  1517   000FAF                     SPBRG1          equ	4015	;# 
  1518   000FAF                     SPBRG           equ	4015	;# 
  1519   000FB0                     PSPCON          equ	4016	;# 
  1520   000FB1                     T3CON           equ	4017	;# 
  1521   000FB2                     TMR3            equ	4018	;# 
  1522   000FB2                     TMR3L           equ	4018	;# 
  1523   000FB3                     TMR3H           equ	4019	;# 
  1524   000FB4                     CMCON           equ	4020	;# 
  1525   000FB5                     CVRCON          equ	4021	;# 
  1526   000FB6                     ECCP1AS         equ	4022	;# 
  1527   000FB7                     CCP3CON         equ	4023	;# 
  1528   000FB7                     ECCP3CON        equ	4023	;# 
  1529   000FB8                     CCPR3           equ	4024	;# 
  1530   000FB8                     CCPR3L          equ	4024	;# 
  1531   000FB9                     CCPR3H          equ	4025	;# 
  1532   000FBA                     CCP2CON         equ	4026	;# 
  1533   000FBA                     ECCP2CON        equ	4026	;# 
  1534   000FBB                     CCPR2           equ	4027	;# 
  1535   000FBB                     CCPR2L          equ	4027	;# 
  1536   000FBC                     CCPR2H          equ	4028	;# 
  1537   000FBD                     CCP1CON         equ	4029	;# 
  1538   000FBD                     ECCP1CON        equ	4029	;# 
  1539   000FBE                     CCPR1           equ	4030	;# 
  1540   000FBE                     CCPR1L          equ	4030	;# 
  1541   000FBF                     CCPR1H          equ	4031	;# 
  1542   000FC0                     ADCON2          equ	4032	;# 
  1543   000FC1                     ADCON1          equ	4033	;# 
  1544   000FC2                     ADCON0          equ	4034	;# 
  1545   000FC3                     ADRES           equ	4035	;# 
  1546   000FC3                     ADRESL          equ	4035	;# 
  1547   000FC4                     ADRESH          equ	4036	;# 
  1548   000FC5                     SSP1CON2        equ	4037	;# 
  1549   000FC5                     SSPCON2         equ	4037	;# 
  1550   000FC6                     SSP1CON1        equ	4038	;# 
  1551   000FC6                     SSPCON1         equ	4038	;# 
  1552   000FC7                     SSP1STAT        equ	4039	;# 
  1553   000FC7                     SSPSTAT         equ	4039	;# 
  1554   000FC8                     SSP1ADD         equ	4040	;# 
  1555   000FC8                     SSPADD          equ	4040	;# 
  1556   000FC9                     SSP1BUF         equ	4041	;# 
  1557   000FC9                     SSPBUF          equ	4041	;# 
  1558   000FCA                     T2CON           equ	4042	;# 
  1559   000FCB                     PR2             equ	4043	;# 
  1560   000FCC                     TMR2            equ	4044	;# 
  1561   000FCD                     T1CON           equ	4045	;# 
  1562   000FCE                     TMR1            equ	4046	;# 
  1563   000FCE                     TMR1L           equ	4046	;# 
  1564   000FCF                     TMR1H           equ	4047	;# 
  1565   000FD0                     RCON            equ	4048	;# 
  1566   000FD1                     WDTCON          equ	4049	;# 
  1567   000FD2                     ECON1           equ	4050	;# 
  1568   000FD3                     OSCCON          equ	4051	;# 
  1569   000FD5                     T0CON           equ	4053	;# 
  1570   000FD6                     TMR0            equ	4054	;# 
  1571   000FD6                     TMR0L           equ	4054	;# 
  1572   000FD7                     TMR0H           equ	4055	;# 
  1573   000FD8                     STATUS          equ	4056	;# 
  1574   000FD9                     FSR2            equ	4057	;# 
  1575   000FD9                     FSR2L           equ	4057	;# 
  1576   000FDA                     FSR2H           equ	4058	;# 
  1577   000FDB                     PLUSW2          equ	4059	;# 
  1578   000FDC                     PREINC2         equ	4060	;# 
  1579   000FDD                     POSTDEC2        equ	4061	;# 
  1580   000FDE                     POSTINC2        equ	4062	;# 
  1581   000FDF                     INDF2           equ	4063	;# 
  1582   000FE0                     BSR             equ	4064	;# 
  1583   000FE1                     FSR1            equ	4065	;# 
  1584   000FE1                     FSR1L           equ	4065	;# 
  1585   000FE2                     FSR1H           equ	4066	;# 
  1586   000FE3                     PLUSW1          equ	4067	;# 
  1587   000FE4                     PREINC1         equ	4068	;# 
  1588   000FE5                     POSTDEC1        equ	4069	;# 
  1589   000FE6                     POSTINC1        equ	4070	;# 
  1590   000FE7                     INDF1           equ	4071	;# 
  1591   000FE8                     WREG            equ	4072	;# 
  1592   000FE9                     FSR0            equ	4073	;# 
  1593   000FE9                     FSR0L           equ	4073	;# 
  1594   000FEA                     FSR0H           equ	4074	;# 
  1595   000FEB                     PLUSW0          equ	4075	;# 
  1596   000FEC                     PREINC0         equ	4076	;# 
  1597   000FED                     POSTDEC0        equ	4077	;# 
  1598   000FEE                     POSTINC0        equ	4078	;# 
  1599   000FEF                     INDF0           equ	4079	;# 
  1600   000FF0                     INTCON3         equ	4080	;# 
  1601   000FF1                     INTCON2         equ	4081	;# 
  1602   000FF2                     INTCON          equ	4082	;# 
  1603   000FF3                     PROD            equ	4083	;# 
  1604   000FF3                     PRODL           equ	4083	;# 
  1605   000FF4                     PRODH           equ	4084	;# 
  1606   000FF5                     TABLAT          equ	4085	;# 
  1607   000FF6                     TBLPTR          equ	4086	;# 
  1608   000FF6                     TBLPTRL         equ	4086	;# 
  1609   000FF7                     TBLPTRH         equ	4087	;# 
  1610   000FF8                     TBLPTRU         equ	4088	;# 
  1611   000FF9                     PCLAT           equ	4089	;# 
  1612   000FF9                     PC              equ	4089	;# 
  1613   000FF9                     PCL             equ	4089	;# 
  1614   000FFA                     PCLATH          equ	4090	;# 
  1615   000FFB                     PCLATU          equ	4091	;# 
  1616   000FFC                     STKPTR          equ	4092	;# 
  1617   000FFD                     TOS             equ	4093	;# 
  1618   000FFD                     TOSL            equ	4093	;# 
  1619   000FFE                     TOSH            equ	4094	;# 
  1620   000FFF                     TOSU            equ	4095	;# 
  1621   000E80                     MAADR5          equ	3712	;# 
  1622   000E81                     MAADR6          equ	3713	;# 
  1623   000E82                     MAADR3          equ	3714	;# 
  1624   000E83                     MAADR4          equ	3715	;# 
  1625   000E84                     MAADR1          equ	3716	;# 
  1626   000E85                     MAADR2          equ	3717	;# 
  1627   000E8A                     MISTAT          equ	3722	;# 
  1628   000E97                     EFLOCON         equ	3735	;# 
  1629   000E98                     EPAUS           equ	3736	;# 
  1630   000E98                     EPAUSL          equ	3736	;# 
  1631   000E99                     EPAUSH          equ	3737	;# 
  1632   000EA0                     MACON1          equ	3744	;# 
  1633   000EA2                     MACON3          equ	3746	;# 
  1634   000EA3                     MACON4          equ	3747	;# 
  1635   000EA4                     MABBIPG         equ	3748	;# 
  1636   000EA6                     MAIPG           equ	3750	;# 
  1637   000EA6                     MAIPGL          equ	3750	;# 
  1638   000EA7                     MAIPGH          equ	3751	;# 
  1639   000EAA                     MAMXFL          equ	3754	;# 
  1640   000EAA                     MAMXFLL         equ	3754	;# 
  1641   000EAB                     MAMXFLH         equ	3755	;# 
  1642   000EB2                     MICMD           equ	3762	;# 
  1643   000EB4                     MIREGADR        equ	3764	;# 
  1644   000EB6                     MIWR            equ	3766	;# 
  1645   000EB6                     MIWRL           equ	3766	;# 
  1646   000EB7                     MIWRH           equ	3767	;# 
  1647   000EB8                     MIRD            equ	3768	;# 
  1648   000EB8                     MIRDL           equ	3768	;# 
  1649   000EB9                     MIRDH           equ	3769	;# 
  1650   000EC0                     EHT0            equ	3776	;# 
  1651   000EC1                     EHT1            equ	3777	;# 
  1652   000EC2                     EHT2            equ	3778	;# 
  1653   000EC3                     EHT3            equ	3779	;# 
  1654   000EC4                     EHT4            equ	3780	;# 
  1655   000EC5                     EHT5            equ	3781	;# 
  1656   000EC6                     EHT6            equ	3782	;# 
  1657   000EC7                     EHT7            equ	3783	;# 
  1658   000EC8                     EPMM0           equ	3784	;# 
  1659   000EC9                     EPMM1           equ	3785	;# 
  1660   000ECA                     EPMM2           equ	3786	;# 
  1661   000ECB                     EPMM3           equ	3787	;# 
  1662   000ECC                     EPMM4           equ	3788	;# 
  1663   000ECD                     EPMM5           equ	3789	;# 
  1664   000ECE                     EPMM6           equ	3790	;# 
  1665   000ECF                     EPMM7           equ	3791	;# 
  1666   000ED0                     EPMCS           equ	3792	;# 
  1667   000ED0                     EPMCSL          equ	3792	;# 
  1668   000ED1                     EPMCSH          equ	3793	;# 
  1669   000ED4                     EPMO            equ	3796	;# 
  1670   000ED4                     EPMOL           equ	3796	;# 
  1671   000ED5                     EPMOH           equ	3797	;# 
  1672   000ED8                     ERXFCON         equ	3800	;# 
  1673   000ED9                     EPKTCNT         equ	3801	;# 
  1674   000EE2                     EWRPT           equ	3810	;# 
  1675   000EE2                     EWRPTL          equ	3810	;# 
  1676   000EE3                     EWRPTH          equ	3811	;# 
  1677   000EE4                     ETXST           equ	3812	;# 
  1678   000EE4                     ETXSTL          equ	3812	;# 
  1679   000EE5                     ETXSTH          equ	3813	;# 
  1680   000EE6                     ETXND           equ	3814	;# 
  1681   000EE6                     ETXNDL          equ	3814	;# 
  1682   000EE7                     ETXNDH          equ	3815	;# 
  1683   000EE8                     ERXST           equ	3816	;# 
  1684   000EE8                     ERXSTL          equ	3816	;# 
  1685   000EE9                     ERXSTH          equ	3817	;# 
  1686   000EEA                     ERXND           equ	3818	;# 
  1687   000EEA                     ERXNDL          equ	3818	;# 
  1688   000EEB                     ERXNDH          equ	3819	;# 
  1689   000EEC                     ERXRDPT         equ	3820	;# 
  1690   000EEC                     ERXRDPTL        equ	3820	;# 
  1691   000EED                     ERXRDPTH        equ	3821	;# 
  1692   000EEE                     ERXWRPT         equ	3822	;# 
  1693   000EEE                     ERXWRPTL        equ	3822	;# 
  1694   000EEF                     ERXWRPTH        equ	3823	;# 
  1695   000EF0                     EDMAST          equ	3824	;# 
  1696   000EF0                     EDMASTL         equ	3824	;# 
  1697   000EF1                     EDMASTH         equ	3825	;# 
  1698   000EF2                     EDMAND          equ	3826	;# 
  1699   000EF2                     EDMANDL         equ	3826	;# 
  1700   000EF3                     EDMANDH         equ	3827	;# 
  1701   000EF4                     EDMADST         equ	3828	;# 
  1702   000EF4                     EDMADSTL        equ	3828	;# 
  1703   000EF5                     EDMADSTH        equ	3829	;# 
  1704   000EF6                     EDMACS          equ	3830	;# 
  1705   000EF6                     EDMACSL         equ	3830	;# 
  1706   000EF7                     EDMACSH         equ	3831	;# 
  1707   000EFB                     EIE             equ	3835	;# 
  1708   000EFD                     ESTAT           equ	3837	;# 
  1709   000EFE                     ECON2           equ	3838	;# 
  1710   000F60                     EIR             equ	3936	;# 
  1711   000F61                     EDATA           equ	3937	;# 
  1712   000F62                     SSP2CON2        equ	3938	;# 
  1713   000F63                     SSP2CON1        equ	3939	;# 
  1714   000F64                     SSP2STAT        equ	3940	;# 
  1715   000F65                     SSP2ADD         equ	3941	;# 
  1716   000F66                     SSP2BUF         equ	3942	;# 
  1717   000F67                     ECCP2DEL        equ	3943	;# 
  1718   000F68                     ECCP2AS         equ	3944	;# 
  1719   000F69                     ECCP3DEL        equ	3945	;# 
  1720   000F6A                     ECCP3AS         equ	3946	;# 
  1721   000F6B                     RCSTA2          equ	3947	;# 
  1722   000F6C                     TXSTA2          equ	3948	;# 
  1723   000F6D                     TXREG2          equ	3949	;# 
  1724   000F6E                     RCREG2          equ	3950	;# 
  1725   000F6F                     SPBRG2          equ	3951	;# 
  1726   000F70                     CCP5CON         equ	3952	;# 
  1727   000F71                     CCPR5           equ	3953	;# 
  1728   000F71                     CCPR5L          equ	3953	;# 
  1729   000F72                     CCPR5H          equ	3954	;# 
  1730   000F73                     CCP4CON         equ	3955	;# 
  1731   000F74                     CCPR4           equ	3956	;# 
  1732   000F74                     CCPR4L          equ	3956	;# 
  1733   000F75                     CCPR4H          equ	3957	;# 
  1734   000F76                     T4CON           equ	3958	;# 
  1735   000F77                     PR4             equ	3959	;# 
  1736   000F78                     TMR4            equ	3960	;# 
  1737   000F79                     ECCP1DEL        equ	3961	;# 
  1738   000F7A                     ERDPT           equ	3962	;# 
  1739   000F7A                     ERDPTL          equ	3962	;# 
  1740   000F7B                     ERDPTH          equ	3963	;# 
  1741   000F7C                     BAUDCON2        equ	3964	;# 
  1742   000F7C                     BAUDCTL2        equ	3964	;# 
  1743   000F7D                     SPBRGH2         equ	3965	;# 
  1744   000F7E                     BAUDCON1        equ	3966	;# 
  1745   000F7E                     BAUDCON         equ	3966	;# 
  1746   000F7E                     BAUDCTL         equ	3966	;# 
  1747   000F7E                     BAUDCTL1        equ	3966	;# 
  1748   000F7F                     SPBRGH1         equ	3967	;# 
  1749   000F7F                     SPBRGH          equ	3967	;# 
  1750   000F80                     PORTA           equ	3968	;# 
  1751   000F81                     PORTB           equ	3969	;# 
  1752   000F82                     PORTC           equ	3970	;# 
  1753   000F83                     PORTD           equ	3971	;# 
  1754   000F84                     PORTE           equ	3972	;# 
  1755   000F85                     PORTF           equ	3973	;# 
  1756   000F86                     PORTG           equ	3974	;# 
  1757   000F87                     PORTH           equ	3975	;# 
  1758   000F88                     PORTJ           equ	3976	;# 
  1759   000F89                     LATA            equ	3977	;# 
  1760   000F8A                     LATB            equ	3978	;# 
  1761   000F8B                     LATC            equ	3979	;# 
  1762   000F8C                     LATD            equ	3980	;# 
  1763   000F8D                     LATE            equ	3981	;# 
  1764   000F8E                     LATF            equ	3982	;# 
  1765   000F8F                     LATG            equ	3983	;# 
  1766   000F90                     LATH            equ	3984	;# 
  1767   000F91                     LATJ            equ	3985	;# 
  1768   000F92                     TRISA           equ	3986	;# 
  1769   000F92                     DDRA            equ	3986	;# 
  1770   000F93                     TRISB           equ	3987	;# 
  1771   000F93                     DDRB            equ	3987	;# 
  1772   000F94                     TRISC           equ	3988	;# 
  1773   000F94                     DDRC            equ	3988	;# 
  1774   000F95                     TRISD           equ	3989	;# 
  1775   000F95                     DDRD            equ	3989	;# 
  1776   000F96                     TRISE           equ	3990	;# 
  1777   000F96                     DDRE            equ	3990	;# 
  1778   000F97                     TRISF           equ	3991	;# 
  1779   000F97                     DDRF            equ	3991	;# 
  1780   000F98                     TRISG           equ	3992	;# 
  1781   000F98                     DDRG            equ	3992	;# 
  1782   000F99                     TRISH           equ	3993	;# 
  1783   000F99                     DDRH            equ	3993	;# 
  1784   000F9A                     TRISJ           equ	3994	;# 
  1785   000F9A                     DDRJ            equ	3994	;# 
  1786   000F9B                     OSCTUNE         equ	3995	;# 
  1787   000F9C                     MEMCON          equ	3996	;# 
  1788   000F9D                     PIE1            equ	3997	;# 
  1789   000F9E                     PIR1            equ	3998	;# 
  1790   000F9F                     IPR1            equ	3999	;# 
  1791   000FA0                     PIE2            equ	4000	;# 
  1792   000FA1                     PIR2            equ	4001	;# 
  1793   000FA2                     IPR2            equ	4002	;# 
  1794   000FA3                     PIE3            equ	4003	;# 
  1795   000FA4                     PIR3            equ	4004	;# 
  1796   000FA5                     IPR3            equ	4005	;# 
  1797   000FA6                     EECON1          equ	4006	;# 
  1798   000FA7                     EECON2          equ	4007	;# 
  1799   000FAB                     RCSTA1          equ	4011	;# 
  1800   000FAB                     RCSTA           equ	4011	;# 
  1801   000FAC                     TXSTA1          equ	4012	;# 
  1802   000FAC                     TXSTA           equ	4012	;# 
  1803   000FAD                     TXREG1          equ	4013	;# 
  1804   000FAD                     TXREG           equ	4013	;# 
  1805   000FAE                     RCREG1          equ	4014	;# 
  1806   000FAE                     RCREG           equ	4014	;# 
  1807   000FAF                     SPBRG1          equ	4015	;# 
  1808   000FAF                     SPBRG           equ	4015	;# 
  1809   000FB0                     PSPCON          equ	4016	;# 
  1810   000FB1                     T3CON           equ	4017	;# 
  1811   000FB2                     TMR3            equ	4018	;# 
  1812   000FB2                     TMR3L           equ	4018	;# 
  1813   000FB3                     TMR3H           equ	4019	;# 
  1814   000FB4                     CMCON           equ	4020	;# 
  1815   000FB5                     CVRCON          equ	4021	;# 
  1816   000FB6                     ECCP1AS         equ	4022	;# 
  1817   000FB7                     CCP3CON         equ	4023	;# 
  1818   000FB7                     ECCP3CON        equ	4023	;# 
  1819   000FB8                     CCPR3           equ	4024	;# 
  1820   000FB8                     CCPR3L          equ	4024	;# 
  1821   000FB9                     CCPR3H          equ	4025	;# 
  1822   000FBA                     CCP2CON         equ	4026	;# 
  1823   000FBA                     ECCP2CON        equ	4026	;# 
  1824   000FBB                     CCPR2           equ	4027	;# 
  1825   000FBB                     CCPR2L          equ	4027	;# 
  1826   000FBC                     CCPR2H          equ	4028	;# 
  1827   000FBD                     CCP1CON         equ	4029	;# 
  1828   000FBD                     ECCP1CON        equ	4029	;# 
  1829   000FBE                     CCPR1           equ	4030	;# 
  1830   000FBE                     CCPR1L          equ	4030	;# 
  1831   000FBF                     CCPR1H          equ	4031	;# 
  1832   000FC0                     ADCON2          equ	4032	;# 
  1833   000FC1                     ADCON1          equ	4033	;# 
  1834   000FC2                     ADCON0          equ	4034	;# 
  1835   000FC3                     ADRES           equ	4035	;# 
  1836   000FC3                     ADRESL          equ	4035	;# 
  1837   000FC4                     ADRESH          equ	4036	;# 
  1838   000FC5                     SSP1CON2        equ	4037	;# 
  1839   000FC5                     SSPCON2         equ	4037	;# 
  1840   000FC6                     SSP1CON1        equ	4038	;# 
  1841   000FC6                     SSPCON1         equ	4038	;# 
  1842   000FC7                     SSP1STAT        equ	4039	;# 
  1843   000FC7                     SSPSTAT         equ	4039	;# 
  1844   000FC8                     SSP1ADD         equ	4040	;# 
  1845   000FC8                     SSPADD          equ	4040	;# 
  1846   000FC9                     SSP1BUF         equ	4041	;# 
  1847   000FC9                     SSPBUF          equ	4041	;# 
  1848   000FCA                     T2CON           equ	4042	;# 
  1849   000FCB                     PR2             equ	4043	;# 
  1850   000FCC                     TMR2            equ	4044	;# 
  1851   000FCD                     T1CON           equ	4045	;# 
  1852   000FCE                     TMR1            equ	4046	;# 
  1853   000FCE                     TMR1L           equ	4046	;# 
  1854   000FCF                     TMR1H           equ	4047	;# 
  1855   000FD0                     RCON            equ	4048	;# 
  1856   000FD1                     WDTCON          equ	4049	;# 
  1857   000FD2                     ECON1           equ	4050	;# 
  1858   000FD3                     OSCCON          equ	4051	;# 
  1859   000FD5                     T0CON           equ	4053	;# 
  1860   000FD6                     TMR0            equ	4054	;# 
  1861   000FD6                     TMR0L           equ	4054	;# 
  1862   000FD7                     TMR0H           equ	4055	;# 
  1863   000FD8                     STATUS          equ	4056	;# 
  1864   000FD9                     FSR2            equ	4057	;# 
  1865   000FD9                     FSR2L           equ	4057	;# 
  1866   000FDA                     FSR2H           equ	4058	;# 
  1867   000FDB                     PLUSW2          equ	4059	;# 
  1868   000FDC                     PREINC2         equ	4060	;# 
  1869   000FDD                     POSTDEC2        equ	4061	;# 
  1870   000FDE                     POSTINC2        equ	4062	;# 
  1871   000FDF                     INDF2           equ	4063	;# 
  1872   000FE0                     BSR             equ	4064	;# 
  1873   000FE1                     FSR1            equ	4065	;# 
  1874   000FE1                     FSR1L           equ	4065	;# 
  1875   000FE2                     FSR1H           equ	4066	;# 
  1876   000FE3                     PLUSW1          equ	4067	;# 
  1877   000FE4                     PREINC1         equ	4068	;# 
  1878   000FE5                     POSTDEC1        equ	4069	;# 
  1879   000FE6                     POSTINC1        equ	4070	;# 
  1880   000FE7                     INDF1           equ	4071	;# 
  1881   000FE8                     WREG            equ	4072	;# 
  1882   000FE9                     FSR0            equ	4073	;# 
  1883   000FE9                     FSR0L           equ	4073	;# 
  1884   000FEA                     FSR0H           equ	4074	;# 
  1885   000FEB                     PLUSW0          equ	4075	;# 
  1886   000FEC                     PREINC0         equ	4076	;# 
  1887   000FED                     POSTDEC0        equ	4077	;# 
  1888   000FEE                     POSTINC0        equ	4078	;# 
  1889   000FEF                     INDF0           equ	4079	;# 
  1890   000FF0                     INTCON3         equ	4080	;# 
  1891   000FF1                     INTCON2         equ	4081	;# 
  1892   000FF2                     INTCON          equ	4082	;# 
  1893   000FF3                     PROD            equ	4083	;# 
  1894   000FF3                     PRODL           equ	4083	;# 
  1895   000FF4                     PRODH           equ	4084	;# 
  1896   000FF5                     TABLAT          equ	4085	;# 
  1897   000FF6                     TBLPTR          equ	4086	;# 
  1898   000FF6                     TBLPTRL         equ	4086	;# 
  1899   000FF7                     TBLPTRH         equ	4087	;# 
  1900   000FF8                     TBLPTRU         equ	4088	;# 
  1901   000FF9                     PCLAT           equ	4089	;# 
  1902   000FF9                     PC              equ	4089	;# 
  1903   000FF9                     PCL             equ	4089	;# 
  1904   000FFA                     PCLATH          equ	4090	;# 
  1905   000FFB                     PCLATU          equ	4091	;# 
  1906   000FFC                     STKPTR          equ	4092	;# 
  1907   000FFD                     TOS             equ	4093	;# 
  1908   000FFD                     TOSL            equ	4093	;# 
  1909   000FFE                     TOSH            equ	4094	;# 
  1910   000FFF                     TOSU            equ	4095	;# 
  1911   000E80                     MAADR5          equ	3712	;# 
  1912   000E81                     MAADR6          equ	3713	;# 
  1913   000E82                     MAADR3          equ	3714	;# 
  1914   000E83                     MAADR4          equ	3715	;# 
  1915   000E84                     MAADR1          equ	3716	;# 
  1916   000E85                     MAADR2          equ	3717	;# 
  1917   000E8A                     MISTAT          equ	3722	;# 
  1918   000E97                     EFLOCON         equ	3735	;# 
  1919   000E98                     EPAUS           equ	3736	;# 
  1920   000E98                     EPAUSL          equ	3736	;# 
  1921   000E99                     EPAUSH          equ	3737	;# 
  1922   000EA0                     MACON1          equ	3744	;# 
  1923   000EA2                     MACON3          equ	3746	;# 
  1924   000EA3                     MACON4          equ	3747	;# 
  1925   000EA4                     MABBIPG         equ	3748	;# 
  1926   000EA6                     MAIPG           equ	3750	;# 
  1927   000EA6                     MAIPGL          equ	3750	;# 
  1928   000EA7                     MAIPGH          equ	3751	;# 
  1929   000EAA                     MAMXFL          equ	3754	;# 
  1930   000EAA                     MAMXFLL         equ	3754	;# 
  1931   000EAB                     MAMXFLH         equ	3755	;# 
  1932   000EB2                     MICMD           equ	3762	;# 
  1933   000EB4                     MIREGADR        equ	3764	;# 
  1934   000EB6                     MIWR            equ	3766	;# 
  1935   000EB6                     MIWRL           equ	3766	;# 
  1936   000EB7                     MIWRH           equ	3767	;# 
  1937   000EB8                     MIRD            equ	3768	;# 
  1938   000EB8                     MIRDL           equ	3768	;# 
  1939   000EB9                     MIRDH           equ	3769	;# 
  1940   000EC0                     EHT0            equ	3776	;# 
  1941   000EC1                     EHT1            equ	3777	;# 
  1942   000EC2                     EHT2            equ	3778	;# 
  1943   000EC3                     EHT3            equ	3779	;# 
  1944   000EC4                     EHT4            equ	3780	;# 
  1945   000EC5                     EHT5            equ	3781	;# 
  1946   000EC6                     EHT6            equ	3782	;# 
  1947   000EC7                     EHT7            equ	3783	;# 
  1948   000EC8                     EPMM0           equ	3784	;# 
  1949   000EC9                     EPMM1           equ	3785	;# 
  1950   000ECA                     EPMM2           equ	3786	;# 
  1951   000ECB                     EPMM3           equ	3787	;# 
  1952   000ECC                     EPMM4           equ	3788	;# 
  1953   000ECD                     EPMM5           equ	3789	;# 
  1954   000ECE                     EPMM6           equ	3790	;# 
  1955   000ECF                     EPMM7           equ	3791	;# 
  1956   000ED0                     EPMCS           equ	3792	;# 
  1957   000ED0                     EPMCSL          equ	3792	;# 
  1958   000ED1                     EPMCSH          equ	3793	;# 
  1959   000ED4                     EPMO            equ	3796	;# 
  1960   000ED4                     EPMOL           equ	3796	;# 
  1961   000ED5                     EPMOH           equ	3797	;# 
  1962   000ED8                     ERXFCON         equ	3800	;# 
  1963   000ED9                     EPKTCNT         equ	3801	;# 
  1964   000EE2                     EWRPT           equ	3810	;# 
  1965   000EE2                     EWRPTL          equ	3810	;# 
  1966   000EE3                     EWRPTH          equ	3811	;# 
  1967   000EE4                     ETXST           equ	3812	;# 
  1968   000EE4                     ETXSTL          equ	3812	;# 
  1969   000EE5                     ETXSTH          equ	3813	;# 
  1970   000EE6                     ETXND           equ	3814	;# 
  1971   000EE6                     ETXNDL          equ	3814	;# 
  1972   000EE7                     ETXNDH          equ	3815	;# 
  1973   000EE8                     ERXST           equ	3816	;# 
  1974   000EE8                     ERXSTL          equ	3816	;# 
  1975   000EE9                     ERXSTH          equ	3817	;# 
  1976   000EEA                     ERXND           equ	3818	;# 
  1977   000EEA                     ERXNDL          equ	3818	;# 
  1978   000EEB                     ERXNDH          equ	3819	;# 
  1979   000EEC                     ERXRDPT         equ	3820	;# 
  1980   000EEC                     ERXRDPTL        equ	3820	;# 
  1981   000EED                     ERXRDPTH        equ	3821	;# 
  1982   000EEE                     ERXWRPT         equ	3822	;# 
  1983   000EEE                     ERXWRPTL        equ	3822	;# 
  1984   000EEF                     ERXWRPTH        equ	3823	;# 
  1985   000EF0                     EDMAST          equ	3824	;# 
  1986   000EF0                     EDMASTL         equ	3824	;# 
  1987   000EF1                     EDMASTH         equ	3825	;# 
  1988   000EF2                     EDMAND          equ	3826	;# 
  1989   000EF2                     EDMANDL         equ	3826	;# 
  1990   000EF3                     EDMANDH         equ	3827	;# 
  1991   000EF4                     EDMADST         equ	3828	;# 
  1992   000EF4                     EDMADSTL        equ	3828	;# 
  1993   000EF5                     EDMADSTH        equ	3829	;# 
  1994   000EF6                     EDMACS          equ	3830	;# 
  1995   000EF6                     EDMACSL         equ	3830	;# 
  1996   000EF7                     EDMACSH         equ	3831	;# 
  1997   000EFB                     EIE             equ	3835	;# 
  1998   000EFD                     ESTAT           equ	3837	;# 
  1999   000EFE                     ECON2           equ	3838	;# 
  2000   000F60                     EIR             equ	3936	;# 
  2001   000F61                     EDATA           equ	3937	;# 
  2002   000F62                     SSP2CON2        equ	3938	;# 
  2003   000F63                     SSP2CON1        equ	3939	;# 
  2004   000F64                     SSP2STAT        equ	3940	;# 
  2005   000F65                     SSP2ADD         equ	3941	;# 
  2006   000F66                     SSP2BUF         equ	3942	;# 
  2007   000F67                     ECCP2DEL        equ	3943	;# 
  2008   000F68                     ECCP2AS         equ	3944	;# 
  2009   000F69                     ECCP3DEL        equ	3945	;# 
  2010   000F6A                     ECCP3AS         equ	3946	;# 
  2011   000F6B                     RCSTA2          equ	3947	;# 
  2012   000F6C                     TXSTA2          equ	3948	;# 
  2013   000F6D                     TXREG2          equ	3949	;# 
  2014   000F6E                     RCREG2          equ	3950	;# 
  2015   000F6F                     SPBRG2          equ	3951	;# 
  2016   000F70                     CCP5CON         equ	3952	;# 
  2017   000F71                     CCPR5           equ	3953	;# 
  2018   000F71                     CCPR5L          equ	3953	;# 
  2019   000F72                     CCPR5H          equ	3954	;# 
  2020   000F73                     CCP4CON         equ	3955	;# 
  2021   000F74                     CCPR4           equ	3956	;# 
  2022   000F74                     CCPR4L          equ	3956	;# 
  2023   000F75                     CCPR4H          equ	3957	;# 
  2024   000F76                     T4CON           equ	3958	;# 
  2025   000F77                     PR4             equ	3959	;# 
  2026   000F78                     TMR4            equ	3960	;# 
  2027   000F79                     ECCP1DEL        equ	3961	;# 
  2028   000F7A                     ERDPT           equ	3962	;# 
  2029   000F7A                     ERDPTL          equ	3962	;# 
  2030   000F7B                     ERDPTH          equ	3963	;# 
  2031   000F7C                     BAUDCON2        equ	3964	;# 
  2032   000F7C                     BAUDCTL2        equ	3964	;# 
  2033   000F7D                     SPBRGH2         equ	3965	;# 
  2034   000F7E                     BAUDCON1        equ	3966	;# 
  2035   000F7E                     BAUDCON         equ	3966	;# 
  2036   000F7E                     BAUDCTL         equ	3966	;# 
  2037   000F7E                     BAUDCTL1        equ	3966	;# 
  2038   000F7F                     SPBRGH1         equ	3967	;# 
  2039   000F7F                     SPBRGH          equ	3967	;# 
  2040   000F80                     PORTA           equ	3968	;# 
  2041   000F81                     PORTB           equ	3969	;# 
  2042   000F82                     PORTC           equ	3970	;# 
  2043   000F83                     PORTD           equ	3971	;# 
  2044   000F84                     PORTE           equ	3972	;# 
  2045   000F85                     PORTF           equ	3973	;# 
  2046   000F86                     PORTG           equ	3974	;# 
  2047   000F87                     PORTH           equ	3975	;# 
  2048   000F88                     PORTJ           equ	3976	;# 
  2049   000F89                     LATA            equ	3977	;# 
  2050   000F8A                     LATB            equ	3978	;# 
  2051   000F8B                     LATC            equ	3979	;# 
  2052   000F8C                     LATD            equ	3980	;# 
  2053   000F8D                     LATE            equ	3981	;# 
  2054   000F8E                     LATF            equ	3982	;# 
  2055   000F8F                     LATG            equ	3983	;# 
  2056   000F90                     LATH            equ	3984	;# 
  2057   000F91                     LATJ            equ	3985	;# 
  2058   000F92                     TRISA           equ	3986	;# 
  2059   000F92                     DDRA            equ	3986	;# 
  2060   000F93                     TRISB           equ	3987	;# 
  2061   000F93                     DDRB            equ	3987	;# 
  2062   000F94                     TRISC           equ	3988	;# 
  2063   000F94                     DDRC            equ	3988	;# 
  2064   000F95                     TRISD           equ	3989	;# 
  2065   000F95                     DDRD            equ	3989	;# 
  2066   000F96                     TRISE           equ	3990	;# 
  2067   000F96                     DDRE            equ	3990	;# 
  2068   000F97                     TRISF           equ	3991	;# 
  2069   000F97                     DDRF            equ	3991	;# 
  2070   000F98                     TRISG           equ	3992	;# 
  2071   000F98                     DDRG            equ	3992	;# 
  2072   000F99                     TRISH           equ	3993	;# 
  2073   000F99                     DDRH            equ	3993	;# 
  2074   000F9A                     TRISJ           equ	3994	;# 
  2075   000F9A                     DDRJ            equ	3994	;# 
  2076   000F9B                     OSCTUNE         equ	3995	;# 
  2077   000F9C                     MEMCON          equ	3996	;# 
  2078   000F9D                     PIE1            equ	3997	;# 
  2079   000F9E                     PIR1            equ	3998	;# 
  2080   000F9F                     IPR1            equ	3999	;# 
  2081   000FA0                     PIE2            equ	4000	;# 
  2082   000FA1                     PIR2            equ	4001	;# 
  2083   000FA2                     IPR2            equ	4002	;# 
  2084   000FA3                     PIE3            equ	4003	;# 
  2085   000FA4                     PIR3            equ	4004	;# 
  2086   000FA5                     IPR3            equ	4005	;# 
  2087   000FA6                     EECON1          equ	4006	;# 
  2088   000FA7                     EECON2          equ	4007	;# 
  2089   000FAB                     RCSTA1          equ	4011	;# 
  2090   000FAB                     RCSTA           equ	4011	;# 
  2091   000FAC                     TXSTA1          equ	4012	;# 
  2092   000FAC                     TXSTA           equ	4012	;# 
  2093   000FAD                     TXREG1          equ	4013	;# 
  2094   000FAD                     TXREG           equ	4013	;# 
  2095   000FAE                     RCREG1          equ	4014	;# 
  2096   000FAE                     RCREG           equ	4014	;# 
  2097   000FAF                     SPBRG1          equ	4015	;# 
  2098   000FAF                     SPBRG           equ	4015	;# 
  2099   000FB0                     PSPCON          equ	4016	;# 
  2100   000FB1                     T3CON           equ	4017	;# 
  2101   000FB2                     TMR3            equ	4018	;# 
  2102   000FB2                     TMR3L           equ	4018	;# 
  2103   000FB3                     TMR3H           equ	4019	;# 
  2104   000FB4                     CMCON           equ	4020	;# 
  2105   000FB5                     CVRCON          equ	4021	;# 
  2106   000FB6                     ECCP1AS         equ	4022	;# 
  2107   000FB7                     CCP3CON         equ	4023	;# 
  2108   000FB7                     ECCP3CON        equ	4023	;# 
  2109   000FB8                     CCPR3           equ	4024	;# 
  2110   000FB8                     CCPR3L          equ	4024	;# 
  2111   000FB9                     CCPR3H          equ	4025	;# 
  2112   000FBA                     CCP2CON         equ	4026	;# 
  2113   000FBA                     ECCP2CON        equ	4026	;# 
  2114   000FBB                     CCPR2           equ	4027	;# 
  2115   000FBB                     CCPR2L          equ	4027	;# 
  2116   000FBC                     CCPR2H          equ	4028	;# 
  2117   000FBD                     CCP1CON         equ	4029	;# 
  2118   000FBD                     ECCP1CON        equ	4029	;# 
  2119   000FBE                     CCPR1           equ	4030	;# 
  2120   000FBE                     CCPR1L          equ	4030	;# 
  2121   000FBF                     CCPR1H          equ	4031	;# 
  2122   000FC0                     ADCON2          equ	4032	;# 
  2123   000FC1                     ADCON1          equ	4033	;# 
  2124   000FC2                     ADCON0          equ	4034	;# 
  2125   000FC3                     ADRES           equ	4035	;# 
  2126   000FC3                     ADRESL          equ	4035	;# 
  2127   000FC4                     ADRESH          equ	4036	;# 
  2128   000FC5                     SSP1CON2        equ	4037	;# 
  2129   000FC5                     SSPCON2         equ	4037	;# 
  2130   000FC6                     SSP1CON1        equ	4038	;# 
  2131   000FC6                     SSPCON1         equ	4038	;# 
  2132   000FC7                     SSP1STAT        equ	4039	;# 
  2133   000FC7                     SSPSTAT         equ	4039	;# 
  2134   000FC8                     SSP1ADD         equ	4040	;# 
  2135   000FC8                     SSPADD          equ	4040	;# 
  2136   000FC9                     SSP1BUF         equ	4041	;# 
  2137   000FC9                     SSPBUF          equ	4041	;# 
  2138   000FCA                     T2CON           equ	4042	;# 
  2139   000FCB                     PR2             equ	4043	;# 
  2140   000FCC                     TMR2            equ	4044	;# 
  2141   000FCD                     T1CON           equ	4045	;# 
  2142   000FCE                     TMR1            equ	4046	;# 
  2143   000FCE                     TMR1L           equ	4046	;# 
  2144   000FCF                     TMR1H           equ	4047	;# 
  2145   000FD0                     RCON            equ	4048	;# 
  2146   000FD1                     WDTCON          equ	4049	;# 
  2147   000FD2                     ECON1           equ	4050	;# 
  2148   000FD3                     OSCCON          equ	4051	;# 
  2149   000FD5                     T0CON           equ	4053	;# 
  2150   000FD6                     TMR0            equ	4054	;# 
  2151   000FD6                     TMR0L           equ	4054	;# 
  2152   000FD7                     TMR0H           equ	4055	;# 
  2153   000FD8                     STATUS          equ	4056	;# 
  2154   000FD9                     FSR2            equ	4057	;# 
  2155   000FD9                     FSR2L           equ	4057	;# 
  2156   000FDA                     FSR2H           equ	4058	;# 
  2157   000FDB                     PLUSW2          equ	4059	;# 
  2158   000FDC                     PREINC2         equ	4060	;# 
  2159   000FDD                     POSTDEC2        equ	4061	;# 
  2160   000FDE                     POSTINC2        equ	4062	;# 
  2161   000FDF                     INDF2           equ	4063	;# 
  2162   000FE0                     BSR             equ	4064	;# 
  2163   000FE1                     FSR1            equ	4065	;# 
  2164   000FE1                     FSR1L           equ	4065	;# 
  2165   000FE2                     FSR1H           equ	4066	;# 
  2166   000FE3                     PLUSW1          equ	4067	;# 
  2167   000FE4                     PREINC1         equ	4068	;# 
  2168   000FE5                     POSTDEC1        equ	4069	;# 
  2169   000FE6                     POSTINC1        equ	4070	;# 
  2170   000FE7                     INDF1           equ	4071	;# 
  2171   000FE8                     WREG            equ	4072	;# 
  2172   000FE9                     FSR0            equ	4073	;# 
  2173   000FE9                     FSR0L           equ	4073	;# 
  2174   000FEA                     FSR0H           equ	4074	;# 
  2175   000FEB                     PLUSW0          equ	4075	;# 
  2176   000FEC                     PREINC0         equ	4076	;# 
  2177   000FED                     POSTDEC0        equ	4077	;# 
  2178   000FEE                     POSTINC0        equ	4078	;# 
  2179   000FEF                     INDF0           equ	4079	;# 
  2180   000FF0                     INTCON3         equ	4080	;# 
  2181   000FF1                     INTCON2         equ	4081	;# 
  2182   000FF2                     INTCON          equ	4082	;# 
  2183   000FF3                     PROD            equ	4083	;# 
  2184   000FF3                     PRODL           equ	4083	;# 
  2185   000FF4                     PRODH           equ	4084	;# 
  2186   000FF5                     TABLAT          equ	4085	;# 
  2187   000FF6                     TBLPTR          equ	4086	;# 
  2188   000FF6                     TBLPTRL         equ	4086	;# 
  2189   000FF7                     TBLPTRH         equ	4087	;# 
  2190   000FF8                     TBLPTRU         equ	4088	;# 
  2191   000FF9                     PCLAT           equ	4089	;# 
  2192   000FF9                     PC              equ	4089	;# 
  2193   000FF9                     PCL             equ	4089	;# 
  2194   000FFA                     PCLATH          equ	4090	;# 
  2195   000FFB                     PCLATU          equ	4091	;# 
  2196   000FFC                     STKPTR          equ	4092	;# 
  2197   000FFD                     TOS             equ	4093	;# 
  2198   000FFD                     TOSL            equ	4093	;# 
  2199   000FFE                     TOSH            equ	4094	;# 
  2200   000FFF                     TOSU            equ	4095	;# 
  2201   000E80                     MAADR5          equ	3712	;# 
  2202   000E81                     MAADR6          equ	3713	;# 
  2203   000E82                     MAADR3          equ	3714	;# 
  2204   000E83                     MAADR4          equ	3715	;# 
  2205   000E84                     MAADR1          equ	3716	;# 
  2206   000E85                     MAADR2          equ	3717	;# 
  2207   000E8A                     MISTAT          equ	3722	;# 
  2208   000E97                     EFLOCON         equ	3735	;# 
  2209   000E98                     EPAUS           equ	3736	;# 
  2210   000E98                     EPAUSL          equ	3736	;# 
  2211   000E99                     EPAUSH          equ	3737	;# 
  2212   000EA0                     MACON1          equ	3744	;# 
  2213   000EA2                     MACON3          equ	3746	;# 
  2214   000EA3                     MACON4          equ	3747	;# 
  2215   000EA4                     MABBIPG         equ	3748	;# 
  2216   000EA6                     MAIPG           equ	3750	;# 
  2217   000EA6                     MAIPGL          equ	3750	;# 
  2218   000EA7                     MAIPGH          equ	3751	;# 
  2219   000EAA                     MAMXFL          equ	3754	;# 
  2220   000EAA                     MAMXFLL         equ	3754	;# 
  2221   000EAB                     MAMXFLH         equ	3755	;# 
  2222   000EB2                     MICMD           equ	3762	;# 
  2223   000EB4                     MIREGADR        equ	3764	;# 
  2224   000EB6                     MIWR            equ	3766	;# 
  2225   000EB6                     MIWRL           equ	3766	;# 
  2226   000EB7                     MIWRH           equ	3767	;# 
  2227   000EB8                     MIRD            equ	3768	;# 
  2228   000EB8                     MIRDL           equ	3768	;# 
  2229   000EB9                     MIRDH           equ	3769	;# 
  2230   000EC0                     EHT0            equ	3776	;# 
  2231   000EC1                     EHT1            equ	3777	;# 
  2232   000EC2                     EHT2            equ	3778	;# 
  2233   000EC3                     EHT3            equ	3779	;# 
  2234   000EC4                     EHT4            equ	3780	;# 
  2235   000EC5                     EHT5            equ	3781	;# 
  2236   000EC6                     EHT6            equ	3782	;# 
  2237   000EC7                     EHT7            equ	3783	;# 
  2238   000EC8                     EPMM0           equ	3784	;# 
  2239   000EC9                     EPMM1           equ	3785	;# 
  2240   000ECA                     EPMM2           equ	3786	;# 
  2241   000ECB                     EPMM3           equ	3787	;# 
  2242   000ECC                     EPMM4           equ	3788	;# 
  2243   000ECD                     EPMM5           equ	3789	;# 
  2244   000ECE                     EPMM6           equ	3790	;# 
  2245   000ECF                     EPMM7           equ	3791	;# 
  2246   000ED0                     EPMCS           equ	3792	;# 
  2247   000ED0                     EPMCSL          equ	3792	;# 
  2248   000ED1                     EPMCSH          equ	3793	;# 
  2249   000ED4                     EPMO            equ	3796	;# 
  2250   000ED4                     EPMOL           equ	3796	;# 
  2251   000ED5                     EPMOH           equ	3797	;# 
  2252   000ED8                     ERXFCON         equ	3800	;# 
  2253   000ED9                     EPKTCNT         equ	3801	;# 
  2254   000EE2                     EWRPT           equ	3810	;# 
  2255   000EE2                     EWRPTL          equ	3810	;# 
  2256   000EE3                     EWRPTH          equ	3811	;# 
  2257   000EE4                     ETXST           equ	3812	;# 
  2258   000EE4                     ETXSTL          equ	3812	;# 
  2259   000EE5                     ETXSTH          equ	3813	;# 
  2260   000EE6                     ETXND           equ	3814	;# 
  2261   000EE6                     ETXNDL          equ	3814	;# 
  2262   000EE7                     ETXNDH          equ	3815	;# 
  2263   000EE8                     ERXST           equ	3816	;# 
  2264   000EE8                     ERXSTL          equ	3816	;# 
  2265   000EE9                     ERXSTH          equ	3817	;# 
  2266   000EEA                     ERXND           equ	3818	;# 
  2267   000EEA                     ERXNDL          equ	3818	;# 
  2268   000EEB                     ERXNDH          equ	3819	;# 
  2269   000EEC                     ERXRDPT         equ	3820	;# 
  2270   000EEC                     ERXRDPTL        equ	3820	;# 
  2271   000EED                     ERXRDPTH        equ	3821	;# 
  2272   000EEE                     ERXWRPT         equ	3822	;# 
  2273   000EEE                     ERXWRPTL        equ	3822	;# 
  2274   000EEF                     ERXWRPTH        equ	3823	;# 
  2275   000EF0                     EDMAST          equ	3824	;# 
  2276   000EF0                     EDMASTL         equ	3824	;# 
  2277   000EF1                     EDMASTH         equ	3825	;# 
  2278   000EF2                     EDMAND          equ	3826	;# 
  2279   000EF2                     EDMANDL         equ	3826	;# 
  2280   000EF3                     EDMANDH         equ	3827	;# 
  2281   000EF4                     EDMADST         equ	3828	;# 
  2282   000EF4                     EDMADSTL        equ	3828	;# 
  2283   000EF5                     EDMADSTH        equ	3829	;# 
  2284   000EF6                     EDMACS          equ	3830	;# 
  2285   000EF6                     EDMACSL         equ	3830	;# 
  2286   000EF7                     EDMACSH         equ	3831	;# 
  2287   000EFB                     EIE             equ	3835	;# 
  2288   000EFD                     ESTAT           equ	3837	;# 
  2289   000EFE                     ECON2           equ	3838	;# 
  2290   000F60                     EIR             equ	3936	;# 
  2291   000F61                     EDATA           equ	3937	;# 
  2292   000F62                     SSP2CON2        equ	3938	;# 
  2293   000F63                     SSP2CON1        equ	3939	;# 
  2294   000F64                     SSP2STAT        equ	3940	;# 
  2295   000F65                     SSP2ADD         equ	3941	;# 
  2296   000F66                     SSP2BUF         equ	3942	;# 
  2297   000F67                     ECCP2DEL        equ	3943	;# 
  2298   000F68                     ECCP2AS         equ	3944	;# 
  2299   000F69                     ECCP3DEL        equ	3945	;# 
  2300   000F6A                     ECCP3AS         equ	3946	;# 
  2301   000F6B                     RCSTA2          equ	3947	;# 
  2302   000F6C                     TXSTA2          equ	3948	;# 
  2303   000F6D                     TXREG2          equ	3949	;# 
  2304   000F6E                     RCREG2          equ	3950	;# 
  2305   000F6F                     SPBRG2          equ	3951	;# 
  2306   000F70                     CCP5CON         equ	3952	;# 
  2307   000F71                     CCPR5           equ	3953	;# 
  2308   000F71                     CCPR5L          equ	3953	;# 
  2309   000F72                     CCPR5H          equ	3954	;# 
  2310   000F73                     CCP4CON         equ	3955	;# 
  2311   000F74                     CCPR4           equ	3956	;# 
  2312   000F74                     CCPR4L          equ	3956	;# 
  2313   000F75                     CCPR4H          equ	3957	;# 
  2314   000F76                     T4CON           equ	3958	;# 
  2315   000F77                     PR4             equ	3959	;# 
  2316   000F78                     TMR4            equ	3960	;# 
  2317   000F79                     ECCP1DEL        equ	3961	;# 
  2318   000F7A                     ERDPT           equ	3962	;# 
  2319   000F7A                     ERDPTL          equ	3962	;# 
  2320   000F7B                     ERDPTH          equ	3963	;# 
  2321   000F7C                     BAUDCON2        equ	3964	;# 
  2322   000F7C                     BAUDCTL2        equ	3964	;# 
  2323   000F7D                     SPBRGH2         equ	3965	;# 
  2324   000F7E                     BAUDCON1        equ	3966	;# 
  2325   000F7E                     BAUDCON         equ	3966	;# 
  2326   000F7E                     BAUDCTL         equ	3966	;# 
  2327   000F7E                     BAUDCTL1        equ	3966	;# 
  2328   000F7F                     SPBRGH1         equ	3967	;# 
  2329   000F7F                     SPBRGH          equ	3967	;# 
  2330   000F80                     PORTA           equ	3968	;# 
  2331   000F81                     PORTB           equ	3969	;# 
  2332   000F82                     PORTC           equ	3970	;# 
  2333   000F83                     PORTD           equ	3971	;# 
  2334   000F84                     PORTE           equ	3972	;# 
  2335   000F85                     PORTF           equ	3973	;# 
  2336   000F86                     PORTG           equ	3974	;# 
  2337   000F87                     PORTH           equ	3975	;# 
  2338   000F88                     PORTJ           equ	3976	;# 
  2339   000F89                     LATA            equ	3977	;# 
  2340   000F8A                     LATB            equ	3978	;# 
  2341   000F8B                     LATC            equ	3979	;# 
  2342   000F8C                     LATD            equ	3980	;# 
  2343   000F8D                     LATE            equ	3981	;# 
  2344   000F8E                     LATF            equ	3982	;# 
  2345   000F8F                     LATG            equ	3983	;# 
  2346   000F90                     LATH            equ	3984	;# 
  2347   000F91                     LATJ            equ	3985	;# 
  2348   000F92                     TRISA           equ	3986	;# 
  2349   000F92                     DDRA            equ	3986	;# 
  2350   000F93                     TRISB           equ	3987	;# 
  2351   000F93                     DDRB            equ	3987	;# 
  2352   000F94                     TRISC           equ	3988	;# 
  2353   000F94                     DDRC            equ	3988	;# 
  2354   000F95                     TRISD           equ	3989	;# 
  2355   000F95                     DDRD            equ	3989	;# 
  2356   000F96                     TRISE           equ	3990	;# 
  2357   000F96                     DDRE            equ	3990	;# 
  2358   000F97                     TRISF           equ	3991	;# 
  2359   000F97                     DDRF            equ	3991	;# 
  2360   000F98                     TRISG           equ	3992	;# 
  2361   000F98                     DDRG            equ	3992	;# 
  2362   000F99                     TRISH           equ	3993	;# 
  2363   000F99                     DDRH            equ	3993	;# 
  2364   000F9A                     TRISJ           equ	3994	;# 
  2365   000F9A                     DDRJ            equ	3994	;# 
  2366   000F9B                     OSCTUNE         equ	3995	;# 
  2367   000F9C                     MEMCON          equ	3996	;# 
  2368   000F9D                     PIE1            equ	3997	;# 
  2369   000F9E                     PIR1            equ	3998	;# 
  2370   000F9F                     IPR1            equ	3999	;# 
  2371   000FA0                     PIE2            equ	4000	;# 
  2372   000FA1                     PIR2            equ	4001	;# 
  2373   000FA2                     IPR2            equ	4002	;# 
  2374   000FA3                     PIE3            equ	4003	;# 
  2375   000FA4                     PIR3            equ	4004	;# 
  2376   000FA5                     IPR3            equ	4005	;# 
  2377   000FA6                     EECON1          equ	4006	;# 
  2378   000FA7                     EECON2          equ	4007	;# 
  2379   000FAB                     RCSTA1          equ	4011	;# 
  2380   000FAB                     RCSTA           equ	4011	;# 
  2381   000FAC                     TXSTA1          equ	4012	;# 
  2382   000FAC                     TXSTA           equ	4012	;# 
  2383   000FAD                     TXREG1          equ	4013	;# 
  2384   000FAD                     TXREG           equ	4013	;# 
  2385   000FAE                     RCREG1          equ	4014	;# 
  2386   000FAE                     RCREG           equ	4014	;# 
  2387   000FAF                     SPBRG1          equ	4015	;# 
  2388   000FAF                     SPBRG           equ	4015	;# 
  2389   000FB0                     PSPCON          equ	4016	;# 
  2390   000FB1                     T3CON           equ	4017	;# 
  2391   000FB2                     TMR3            equ	4018	;# 
  2392   000FB2                     TMR3L           equ	4018	;# 
  2393   000FB3                     TMR3H           equ	4019	;# 
  2394   000FB4                     CMCON           equ	4020	;# 
  2395   000FB5                     CVRCON          equ	4021	;# 
  2396   000FB6                     ECCP1AS         equ	4022	;# 
  2397   000FB7                     CCP3CON         equ	4023	;# 
  2398   000FB7                     ECCP3CON        equ	4023	;# 
  2399   000FB8                     CCPR3           equ	4024	;# 
  2400   000FB8                     CCPR3L          equ	4024	;# 
  2401   000FB9                     CCPR3H          equ	4025	;# 
  2402   000FBA                     CCP2CON         equ	4026	;# 
  2403   000FBA                     ECCP2CON        equ	4026	;# 
  2404   000FBB                     CCPR2           equ	4027	;# 
  2405   000FBB                     CCPR2L          equ	4027	;# 
  2406   000FBC                     CCPR2H          equ	4028	;# 
  2407   000FBD                     CCP1CON         equ	4029	;# 
  2408   000FBD                     ECCP1CON        equ	4029	;# 
  2409   000FBE                     CCPR1           equ	4030	;# 
  2410   000FBE                     CCPR1L          equ	4030	;# 
  2411   000FBF                     CCPR1H          equ	4031	;# 
  2412   000FC0                     ADCON2          equ	4032	;# 
  2413   000FC1                     ADCON1          equ	4033	;# 
  2414   000FC2                     ADCON0          equ	4034	;# 
  2415   000FC3                     ADRES           equ	4035	;# 
  2416   000FC3                     ADRESL          equ	4035	;# 
  2417   000FC4                     ADRESH          equ	4036	;# 
  2418   000FC5                     SSP1CON2        equ	4037	;# 
  2419   000FC5                     SSPCON2         equ	4037	;# 
  2420   000FC6                     SSP1CON1        equ	4038	;# 
  2421   000FC6                     SSPCON1         equ	4038	;# 
  2422   000FC7                     SSP1STAT        equ	4039	;# 
  2423   000FC7                     SSPSTAT         equ	4039	;# 
  2424   000FC8                     SSP1ADD         equ	4040	;# 
  2425   000FC8                     SSPADD          equ	4040	;# 
  2426   000FC9                     SSP1BUF         equ	4041	;# 
  2427   000FC9                     SSPBUF          equ	4041	;# 
  2428   000FCA                     T2CON           equ	4042	;# 
  2429   000FCB                     PR2             equ	4043	;# 
  2430   000FCC                     TMR2            equ	4044	;# 
  2431   000FCD                     T1CON           equ	4045	;# 
  2432   000FCE                     TMR1            equ	4046	;# 
  2433   000FCE                     TMR1L           equ	4046	;# 
  2434   000FCF                     TMR1H           equ	4047	;# 
  2435   000FD0                     RCON            equ	4048	;# 
  2436   000FD1                     WDTCON          equ	4049	;# 
  2437   000FD2                     ECON1           equ	4050	;# 
  2438   000FD3                     OSCCON          equ	4051	;# 
  2439   000FD5                     T0CON           equ	4053	;# 
  2440   000FD6                     TMR0            equ	4054	;# 
  2441   000FD6                     TMR0L           equ	4054	;# 
  2442   000FD7                     TMR0H           equ	4055	;# 
  2443   000FD8                     STATUS          equ	4056	;# 
  2444   000FD9                     FSR2            equ	4057	;# 
  2445   000FD9                     FSR2L           equ	4057	;# 
  2446   000FDA                     FSR2H           equ	4058	;# 
  2447   000FDB                     PLUSW2          equ	4059	;# 
  2448   000FDC                     PREINC2         equ	4060	;# 
  2449   000FDD                     POSTDEC2        equ	4061	;# 
  2450   000FDE                     POSTINC2        equ	4062	;# 
  2451   000FDF                     INDF2           equ	4063	;# 
  2452   000FE0                     BSR             equ	4064	;# 
  2453   000FE1                     FSR1            equ	4065	;# 
  2454   000FE1                     FSR1L           equ	4065	;# 
  2455   000FE2                     FSR1H           equ	4066	;# 
  2456   000FE3                     PLUSW1          equ	4067	;# 
  2457   000FE4                     PREINC1         equ	4068	;# 
  2458   000FE5                     POSTDEC1        equ	4069	;# 
  2459   000FE6                     POSTINC1        equ	4070	;# 
  2460   000FE7                     INDF1           equ	4071	;# 
  2461   000FE8                     WREG            equ	4072	;# 
  2462   000FE9                     FSR0            equ	4073	;# 
  2463   000FE9                     FSR0L           equ	4073	;# 
  2464   000FEA                     FSR0H           equ	4074	;# 
  2465   000FEB                     PLUSW0          equ	4075	;# 
  2466   000FEC                     PREINC0         equ	4076	;# 
  2467   000FED                     POSTDEC0        equ	4077	;# 
  2468   000FEE                     POSTINC0        equ	4078	;# 
  2469   000FEF                     INDF0           equ	4079	;# 
  2470   000FF0                     INTCON3         equ	4080	;# 
  2471   000FF1                     INTCON2         equ	4081	;# 
  2472   000FF2                     INTCON          equ	4082	;# 
  2473   000FF3                     PROD            equ	4083	;# 
  2474   000FF3                     PRODL           equ	4083	;# 
  2475   000FF4                     PRODH           equ	4084	;# 
  2476   000FF5                     TABLAT          equ	4085	;# 
  2477   000FF6                     TBLPTR          equ	4086	;# 
  2478   000FF6                     TBLPTRL         equ	4086	;# 
  2479   000FF7                     TBLPTRH         equ	4087	;# 
  2480   000FF8                     TBLPTRU         equ	4088	;# 
  2481   000FF9                     PCLAT           equ	4089	;# 
  2482   000FF9                     PC              equ	4089	;# 
  2483   000FF9                     PCL             equ	4089	;# 
  2484   000FFA                     PCLATH          equ	4090	;# 
  2485   000FFB                     PCLATU          equ	4091	;# 
  2486   000FFC                     STKPTR          equ	4092	;# 
  2487   000FFD                     TOS             equ	4093	;# 
  2488   000FFD                     TOSL            equ	4093	;# 
  2489   000FFE                     TOSH            equ	4094	;# 
  2490   000FFF                     TOSU            equ	4095	;# 
  2491   000E80                     MAADR5          equ	3712	;# 
  2492   000E81                     MAADR6          equ	3713	;# 
  2493   000E82                     MAADR3          equ	3714	;# 
  2494   000E83                     MAADR4          equ	3715	;# 
  2495   000E84                     MAADR1          equ	3716	;# 
  2496   000E85                     MAADR2          equ	3717	;# 
  2497   000E8A                     MISTAT          equ	3722	;# 
  2498   000E97                     EFLOCON         equ	3735	;# 
  2499   000E98                     EPAUS           equ	3736	;# 
  2500   000E98                     EPAUSL          equ	3736	;# 
  2501   000E99                     EPAUSH          equ	3737	;# 
  2502   000EA0                     MACON1          equ	3744	;# 
  2503   000EA2                     MACON3          equ	3746	;# 
  2504   000EA3                     MACON4          equ	3747	;# 
  2505   000EA4                     MABBIPG         equ	3748	;# 
  2506   000EA6                     MAIPG           equ	3750	;# 
  2507   000EA6                     MAIPGL          equ	3750	;# 
  2508   000EA7                     MAIPGH          equ	3751	;# 
  2509   000EAA                     MAMXFL          equ	3754	;# 
  2510   000EAA                     MAMXFLL         equ	3754	;# 
  2511   000EAB                     MAMXFLH         equ	3755	;# 
  2512   000EB2                     MICMD           equ	3762	;# 
  2513   000EB4                     MIREGADR        equ	3764	;# 
  2514   000EB6                     MIWR            equ	3766	;# 
  2515   000EB6                     MIWRL           equ	3766	;# 
  2516   000EB7                     MIWRH           equ	3767	;# 
  2517   000EB8                     MIRD            equ	3768	;# 
  2518   000EB8                     MIRDL           equ	3768	;# 
  2519   000EB9                     MIRDH           equ	3769	;# 
  2520   000EC0                     EHT0            equ	3776	;# 
  2521   000EC1                     EHT1            equ	3777	;# 
  2522   000EC2                     EHT2            equ	3778	;# 
  2523   000EC3                     EHT3            equ	3779	;# 
  2524   000EC4                     EHT4            equ	3780	;# 
  2525   000EC5                     EHT5            equ	3781	;# 
  2526   000EC6                     EHT6            equ	3782	;# 
  2527   000EC7                     EHT7            equ	3783	;# 
  2528   000EC8                     EPMM0           equ	3784	;# 
  2529   000EC9                     EPMM1           equ	3785	;# 
  2530   000ECA                     EPMM2           equ	3786	;# 
  2531   000ECB                     EPMM3           equ	3787	;# 
  2532   000ECC                     EPMM4           equ	3788	;# 
  2533   000ECD                     EPMM5           equ	3789	;# 
  2534   000ECE                     EPMM6           equ	3790	;# 
  2535   000ECF                     EPMM7           equ	3791	;# 
  2536   000ED0                     EPMCS           equ	3792	;# 
  2537   000ED0                     EPMCSL          equ	3792	;# 
  2538   000ED1                     EPMCSH          equ	3793	;# 
  2539   000ED4                     EPMO            equ	3796	;# 
  2540   000ED4                     EPMOL           equ	3796	;# 
  2541   000ED5                     EPMOH           equ	3797	;# 
  2542   000ED8                     ERXFCON         equ	3800	;# 
  2543   000ED9                     EPKTCNT         equ	3801	;# 
  2544   000EE2                     EWRPT           equ	3810	;# 
  2545   000EE2                     EWRPTL          equ	3810	;# 
  2546   000EE3                     EWRPTH          equ	3811	;# 
  2547   000EE4                     ETXST           equ	3812	;# 
  2548   000EE4                     ETXSTL          equ	3812	;# 
  2549   000EE5                     ETXSTH          equ	3813	;# 
  2550   000EE6                     ETXND           equ	3814	;# 
  2551   000EE6                     ETXNDL          equ	3814	;# 
  2552   000EE7                     ETXNDH          equ	3815	;# 
  2553   000EE8                     ERXST           equ	3816	;# 
  2554   000EE8                     ERXSTL          equ	3816	;# 
  2555   000EE9                     ERXSTH          equ	3817	;# 
  2556   000EEA                     ERXND           equ	3818	;# 
  2557   000EEA                     ERXNDL          equ	3818	;# 
  2558   000EEB                     ERXNDH          equ	3819	;# 
  2559   000EEC                     ERXRDPT         equ	3820	;# 
  2560   000EEC                     ERXRDPTL        equ	3820	;# 
  2561   000EED                     ERXRDPTH        equ	3821	;# 
  2562   000EEE                     ERXWRPT         equ	3822	;# 
  2563   000EEE                     ERXWRPTL        equ	3822	;# 
  2564   000EEF                     ERXWRPTH        equ	3823	;# 
  2565   000EF0                     EDMAST          equ	3824	;# 
  2566   000EF0                     EDMASTL         equ	3824	;# 
  2567   000EF1                     EDMASTH         equ	3825	;# 
  2568   000EF2                     EDMAND          equ	3826	;# 
  2569   000EF2                     EDMANDL         equ	3826	;# 
  2570   000EF3                     EDMANDH         equ	3827	;# 
  2571   000EF4                     EDMADST         equ	3828	;# 
  2572   000EF4                     EDMADSTL        equ	3828	;# 
  2573   000EF5                     EDMADSTH        equ	3829	;# 
  2574   000EF6                     EDMACS          equ	3830	;# 
  2575   000EF6                     EDMACSL         equ	3830	;# 
  2576   000EF7                     EDMACSH         equ	3831	;# 
  2577   000EFB                     EIE             equ	3835	;# 
  2578   000EFD                     ESTAT           equ	3837	;# 
  2579   000EFE                     ECON2           equ	3838	;# 
  2580   000F60                     EIR             equ	3936	;# 
  2581   000F61                     EDATA           equ	3937	;# 
  2582   000F62                     SSP2CON2        equ	3938	;# 
  2583   000F63                     SSP2CON1        equ	3939	;# 
  2584   000F64                     SSP2STAT        equ	3940	;# 
  2585   000F65                     SSP2ADD         equ	3941	;# 
  2586   000F66                     SSP2BUF         equ	3942	;# 
  2587   000F67                     ECCP2DEL        equ	3943	;# 
  2588   000F68                     ECCP2AS         equ	3944	;# 
  2589   000F69                     ECCP3DEL        equ	3945	;# 
  2590   000F6A                     ECCP3AS         equ	3946	;# 
  2591   000F6B                     RCSTA2          equ	3947	;# 
  2592   000F6C                     TXSTA2          equ	3948	;# 
  2593   000F6D                     TXREG2          equ	3949	;# 
  2594   000F6E                     RCREG2          equ	3950	;# 
  2595   000F6F                     SPBRG2          equ	3951	;# 
  2596   000F70                     CCP5CON         equ	3952	;# 
  2597   000F71                     CCPR5           equ	3953	;# 
  2598   000F71                     CCPR5L          equ	3953	;# 
  2599   000F72                     CCPR5H          equ	3954	;# 
  2600   000F73                     CCP4CON         equ	3955	;# 
  2601   000F74                     CCPR4           equ	3956	;# 
  2602   000F74                     CCPR4L          equ	3956	;# 
  2603   000F75                     CCPR4H          equ	3957	;# 
  2604   000F76                     T4CON           equ	3958	;# 
  2605   000F77                     PR4             equ	3959	;# 
  2606   000F78                     TMR4            equ	3960	;# 
  2607   000F79                     ECCP1DEL        equ	3961	;# 
  2608   000F7A                     ERDPT           equ	3962	;# 
  2609   000F7A                     ERDPTL          equ	3962	;# 
  2610   000F7B                     ERDPTH          equ	3963	;# 
  2611   000F7C                     BAUDCON2        equ	3964	;# 
  2612   000F7C                     BAUDCTL2        equ	3964	;# 
  2613   000F7D                     SPBRGH2         equ	3965	;# 
  2614   000F7E                     BAUDCON1        equ	3966	;# 
  2615   000F7E                     BAUDCON         equ	3966	;# 
  2616   000F7E                     BAUDCTL         equ	3966	;# 
  2617   000F7E                     BAUDCTL1        equ	3966	;# 
  2618   000F7F                     SPBRGH1         equ	3967	;# 
  2619   000F7F                     SPBRGH          equ	3967	;# 
  2620   000F80                     PORTA           equ	3968	;# 
  2621   000F81                     PORTB           equ	3969	;# 
  2622   000F82                     PORTC           equ	3970	;# 
  2623   000F83                     PORTD           equ	3971	;# 
  2624   000F84                     PORTE           equ	3972	;# 
  2625   000F85                     PORTF           equ	3973	;# 
  2626   000F86                     PORTG           equ	3974	;# 
  2627   000F87                     PORTH           equ	3975	;# 
  2628   000F88                     PORTJ           equ	3976	;# 
  2629   000F89                     LATA            equ	3977	;# 
  2630   000F8A                     LATB            equ	3978	;# 
  2631   000F8B                     LATC            equ	3979	;# 
  2632   000F8C                     LATD            equ	3980	;# 
  2633   000F8D                     LATE            equ	3981	;# 
  2634   000F8E                     LATF            equ	3982	;# 
  2635   000F8F                     LATG            equ	3983	;# 
  2636   000F90                     LATH            equ	3984	;# 
  2637   000F91                     LATJ            equ	3985	;# 
  2638   000F92                     TRISA           equ	3986	;# 
  2639   000F92                     DDRA            equ	3986	;# 
  2640   000F93                     TRISB           equ	3987	;# 
  2641   000F93                     DDRB            equ	3987	;# 
  2642   000F94                     TRISC           equ	3988	;# 
  2643   000F94                     DDRC            equ	3988	;# 
  2644   000F95                     TRISD           equ	3989	;# 
  2645   000F95                     DDRD            equ	3989	;# 
  2646   000F96                     TRISE           equ	3990	;# 
  2647   000F96                     DDRE            equ	3990	;# 
  2648   000F97                     TRISF           equ	3991	;# 
  2649   000F97                     DDRF            equ	3991	;# 
  2650   000F98                     TRISG           equ	3992	;# 
  2651   000F98                     DDRG            equ	3992	;# 
  2652   000F99                     TRISH           equ	3993	;# 
  2653   000F99                     DDRH            equ	3993	;# 
  2654   000F9A                     TRISJ           equ	3994	;# 
  2655   000F9A                     DDRJ            equ	3994	;# 
  2656   000F9B                     OSCTUNE         equ	3995	;# 
  2657   000F9C                     MEMCON          equ	3996	;# 
  2658   000F9D                     PIE1            equ	3997	;# 
  2659   000F9E                     PIR1            equ	3998	;# 
  2660   000F9F                     IPR1            equ	3999	;# 
  2661   000FA0                     PIE2            equ	4000	;# 
  2662   000FA1                     PIR2            equ	4001	;# 
  2663   000FA2                     IPR2            equ	4002	;# 
  2664   000FA3                     PIE3            equ	4003	;# 
  2665   000FA4                     PIR3            equ	4004	;# 
  2666   000FA5                     IPR3            equ	4005	;# 
  2667   000FA6                     EECON1          equ	4006	;# 
  2668   000FA7                     EECON2          equ	4007	;# 
  2669   000FAB                     RCSTA1          equ	4011	;# 
  2670   000FAB                     RCSTA           equ	4011	;# 
  2671   000FAC                     TXSTA1          equ	4012	;# 
  2672   000FAC                     TXSTA           equ	4012	;# 
  2673   000FAD                     TXREG1          equ	4013	;# 
  2674   000FAD                     TXREG           equ	4013	;# 
  2675   000FAE                     RCREG1          equ	4014	;# 
  2676   000FAE                     RCREG           equ	4014	;# 
  2677   000FAF                     SPBRG1          equ	4015	;# 
  2678   000FAF                     SPBRG           equ	4015	;# 
  2679   000FB0                     PSPCON          equ	4016	;# 
  2680   000FB1                     T3CON           equ	4017	;# 
  2681   000FB2                     TMR3            equ	4018	;# 
  2682   000FB2                     TMR3L           equ	4018	;# 
  2683   000FB3                     TMR3H           equ	4019	;# 
  2684   000FB4                     CMCON           equ	4020	;# 
  2685   000FB5                     CVRCON          equ	4021	;# 
  2686   000FB6                     ECCP1AS         equ	4022	;# 
  2687   000FB7                     CCP3CON         equ	4023	;# 
  2688   000FB7                     ECCP3CON        equ	4023	;# 
  2689   000FB8                     CCPR3           equ	4024	;# 
  2690   000FB8                     CCPR3L          equ	4024	;# 
  2691   000FB9                     CCPR3H          equ	4025	;# 
  2692   000FBA                     CCP2CON         equ	4026	;# 
  2693   000FBA                     ECCP2CON        equ	4026	;# 
  2694   000FBB                     CCPR2           equ	4027	;# 
  2695   000FBB                     CCPR2L          equ	4027	;# 
  2696   000FBC                     CCPR2H          equ	4028	;# 
  2697   000FBD                     CCP1CON         equ	4029	;# 
  2698   000FBD                     ECCP1CON        equ	4029	;# 
  2699   000FBE                     CCPR1           equ	4030	;# 
  2700   000FBE                     CCPR1L          equ	4030	;# 
  2701   000FBF                     CCPR1H          equ	4031	;# 
  2702   000FC0                     ADCON2          equ	4032	;# 
  2703   000FC1                     ADCON1          equ	4033	;# 
  2704   000FC2                     ADCON0          equ	4034	;# 
  2705   000FC3                     ADRES           equ	4035	;# 
  2706   000FC3                     ADRESL          equ	4035	;# 
  2707   000FC4                     ADRESH          equ	4036	;# 
  2708   000FC5                     SSP1CON2        equ	4037	;# 
  2709   000FC5                     SSPCON2         equ	4037	;# 
  2710   000FC6                     SSP1CON1        equ	4038	;# 
  2711   000FC6                     SSPCON1         equ	4038	;# 
  2712   000FC7                     SSP1STAT        equ	4039	;# 
  2713   000FC7                     SSPSTAT         equ	4039	;# 
  2714   000FC8                     SSP1ADD         equ	4040	;# 
  2715   000FC8                     SSPADD          equ	4040	;# 
  2716   000FC9                     SSP1BUF         equ	4041	;# 
  2717   000FC9                     SSPBUF          equ	4041	;# 
  2718   000FCA                     T2CON           equ	4042	;# 
  2719   000FCB                     PR2             equ	4043	;# 
  2720   000FCC                     TMR2            equ	4044	;# 
  2721   000FCD                     T1CON           equ	4045	;# 
  2722   000FCE                     TMR1            equ	4046	;# 
  2723   000FCE                     TMR1L           equ	4046	;# 
  2724   000FCF                     TMR1H           equ	4047	;# 
  2725   000FD0                     RCON            equ	4048	;# 
  2726   000FD1                     WDTCON          equ	4049	;# 
  2727   000FD2                     ECON1           equ	4050	;# 
  2728   000FD3                     OSCCON          equ	4051	;# 
  2729   000FD5                     T0CON           equ	4053	;# 
  2730   000FD6                     TMR0            equ	4054	;# 
  2731   000FD6                     TMR0L           equ	4054	;# 
  2732   000FD7                     TMR0H           equ	4055	;# 
  2733   000FD8                     STATUS          equ	4056	;# 
  2734   000FD9                     FSR2            equ	4057	;# 
  2735   000FD9                     FSR2L           equ	4057	;# 
  2736   000FDA                     FSR2H           equ	4058	;# 
  2737   000FDB                     PLUSW2          equ	4059	;# 
  2738   000FDC                     PREINC2         equ	4060	;# 
  2739   000FDD                     POSTDEC2        equ	4061	;# 
  2740   000FDE                     POSTINC2        equ	4062	;# 
  2741   000FDF                     INDF2           equ	4063	;# 
  2742   000FE0                     BSR             equ	4064	;# 
  2743   000FE1                     FSR1            equ	4065	;# 
  2744   000FE1                     FSR1L           equ	4065	;# 
  2745   000FE2                     FSR1H           equ	4066	;# 
  2746   000FE3                     PLUSW1          equ	4067	;# 
  2747   000FE4                     PREINC1         equ	4068	;# 
  2748   000FE5                     POSTDEC1        equ	4069	;# 
  2749   000FE6                     POSTINC1        equ	4070	;# 
  2750   000FE7                     INDF1           equ	4071	;# 
  2751   000FE8                     WREG            equ	4072	;# 
  2752   000FE9                     FSR0            equ	4073	;# 
  2753   000FE9                     FSR0L           equ	4073	;# 
  2754   000FEA                     FSR0H           equ	4074	;# 
  2755   000FEB                     PLUSW0          equ	4075	;# 
  2756   000FEC                     PREINC0         equ	4076	;# 
  2757   000FED                     POSTDEC0        equ	4077	;# 
  2758   000FEE                     POSTINC0        equ	4078	;# 
  2759   000FEF                     INDF0           equ	4079	;# 
  2760   000FF0                     INTCON3         equ	4080	;# 
  2761   000FF1                     INTCON2         equ	4081	;# 
  2762   000FF2                     INTCON          equ	4082	;# 
  2763   000FF3                     PROD            equ	4083	;# 
  2764   000FF3                     PRODL           equ	4083	;# 
  2765   000FF4                     PRODH           equ	4084	;# 
  2766   000FF5                     TABLAT          equ	4085	;# 
  2767   000FF6                     TBLPTR          equ	4086	;# 
  2768   000FF6                     TBLPTRL         equ	4086	;# 
  2769   000FF7                     TBLPTRH         equ	4087	;# 
  2770   000FF8                     TBLPTRU         equ	4088	;# 
  2771   000FF9                     PCLAT           equ	4089	;# 
  2772   000FF9                     PC              equ	4089	;# 
  2773   000FF9                     PCL             equ	4089	;# 
  2774   000FFA                     PCLATH          equ	4090	;# 
  2775   000FFB                     PCLATU          equ	4091	;# 
  2776   000FFC                     STKPTR          equ	4092	;# 
  2777   000FFD                     TOS             equ	4093	;# 
  2778   000FFD                     TOSL            equ	4093	;# 
  2779   000FFE                     TOSH            equ	4094	;# 
  2780   000FFF                     TOSU            equ	4095	;# 
  2781   000E80                     MAADR5          equ	3712	;# 
  2782   000E81                     MAADR6          equ	3713	;# 
  2783   000E82                     MAADR3          equ	3714	;# 
  2784   000E83                     MAADR4          equ	3715	;# 
  2785   000E84                     MAADR1          equ	3716	;# 
  2786   000E85                     MAADR2          equ	3717	;# 
  2787   000E8A                     MISTAT          equ	3722	;# 
  2788   000E97                     EFLOCON         equ	3735	;# 
  2789   000E98                     EPAUS           equ	3736	;# 
  2790   000E98                     EPAUSL          equ	3736	;# 
  2791   000E99                     EPAUSH          equ	3737	;# 
  2792   000EA0                     MACON1          equ	3744	;# 
  2793   000EA2                     MACON3          equ	3746	;# 
  2794   000EA3                     MACON4          equ	3747	;# 
  2795   000EA4                     MABBIPG         equ	3748	;# 
  2796   000EA6                     MAIPG           equ	3750	;# 
  2797   000EA6                     MAIPGL          equ	3750	;# 
  2798   000EA7                     MAIPGH          equ	3751	;# 
  2799   000EAA                     MAMXFL          equ	3754	;# 
  2800   000EAA                     MAMXFLL         equ	3754	;# 
  2801   000EAB                     MAMXFLH         equ	3755	;# 
  2802   000EB2                     MICMD           equ	3762	;# 
  2803   000EB4                     MIREGADR        equ	3764	;# 
  2804   000EB6                     MIWR            equ	3766	;# 
  2805   000EB6                     MIWRL           equ	3766	;# 
  2806   000EB7                     MIWRH           equ	3767	;# 
  2807   000EB8                     MIRD            equ	3768	;# 
  2808   000EB8                     MIRDL           equ	3768	;# 
  2809   000EB9                     MIRDH           equ	3769	;# 
  2810   000EC0                     EHT0            equ	3776	;# 
  2811   000EC1                     EHT1            equ	3777	;# 
  2812   000EC2                     EHT2            equ	3778	;# 
  2813   000EC3                     EHT3            equ	3779	;# 
  2814   000EC4                     EHT4            equ	3780	;# 
  2815   000EC5                     EHT5            equ	3781	;# 
  2816   000EC6                     EHT6            equ	3782	;# 
  2817   000EC7                     EHT7            equ	3783	;# 
  2818   000EC8                     EPMM0           equ	3784	;# 
  2819   000EC9                     EPMM1           equ	3785	;# 
  2820   000ECA                     EPMM2           equ	3786	;# 
  2821   000ECB                     EPMM3           equ	3787	;# 
  2822   000ECC                     EPMM4           equ	3788	;# 
  2823   000ECD                     EPMM5           equ	3789	;# 
  2824   000ECE                     EPMM6           equ	3790	;# 
  2825   000ECF                     EPMM7           equ	3791	;# 
  2826   000ED0                     EPMCS           equ	3792	;# 
  2827   000ED0                     EPMCSL          equ	3792	;# 
  2828   000ED1                     EPMCSH          equ	3793	;# 
  2829   000ED4                     EPMO            equ	3796	;# 
  2830   000ED4                     EPMOL           equ	3796	;# 
  2831   000ED5                     EPMOH           equ	3797	;# 
  2832   000ED8                     ERXFCON         equ	3800	;# 
  2833   000ED9                     EPKTCNT         equ	3801	;# 
  2834   000EE2                     EWRPT           equ	3810	;# 
  2835   000EE2                     EWRPTL          equ	3810	;# 
  2836   000EE3                     EWRPTH          equ	3811	;# 
  2837   000EE4                     ETXST           equ	3812	;# 
  2838   000EE4                     ETXSTL          equ	3812	;# 
  2839   000EE5                     ETXSTH          equ	3813	;# 
  2840   000EE6                     ETXND           equ	3814	;# 
  2841   000EE6                     ETXNDL          equ	3814	;# 
  2842   000EE7                     ETXNDH          equ	3815	;# 
  2843   000EE8                     ERXST           equ	3816	;# 
  2844   000EE8                     ERXSTL          equ	3816	;# 
  2845   000EE9                     ERXSTH          equ	3817	;# 
  2846   000EEA                     ERXND           equ	3818	;# 
  2847   000EEA                     ERXNDL          equ	3818	;# 
  2848   000EEB                     ERXNDH          equ	3819	;# 
  2849   000EEC                     ERXRDPT         equ	3820	;# 
  2850   000EEC                     ERXRDPTL        equ	3820	;# 
  2851   000EED                     ERXRDPTH        equ	3821	;# 
  2852   000EEE                     ERXWRPT         equ	3822	;# 
  2853   000EEE                     ERXWRPTL        equ	3822	;# 
  2854   000EEF                     ERXWRPTH        equ	3823	;# 
  2855   000EF0                     EDMAST          equ	3824	;# 
  2856   000EF0                     EDMASTL         equ	3824	;# 
  2857   000EF1                     EDMASTH         equ	3825	;# 
  2858   000EF2                     EDMAND          equ	3826	;# 
  2859   000EF2                     EDMANDL         equ	3826	;# 
  2860   000EF3                     EDMANDH         equ	3827	;# 
  2861   000EF4                     EDMADST         equ	3828	;# 
  2862   000EF4                     EDMADSTL        equ	3828	;# 
  2863   000EF5                     EDMADSTH        equ	3829	;# 
  2864   000EF6                     EDMACS          equ	3830	;# 
  2865   000EF6                     EDMACSL         equ	3830	;# 
  2866   000EF7                     EDMACSH         equ	3831	;# 
  2867   000EFB                     EIE             equ	3835	;# 
  2868   000EFD                     ESTAT           equ	3837	;# 
  2869   000EFE                     ECON2           equ	3838	;# 
  2870   000F60                     EIR             equ	3936	;# 
  2871   000F61                     EDATA           equ	3937	;# 
  2872   000F62                     SSP2CON2        equ	3938	;# 
  2873   000F63                     SSP2CON1        equ	3939	;# 
  2874   000F64                     SSP2STAT        equ	3940	;# 
  2875   000F65                     SSP2ADD         equ	3941	;# 
  2876   000F66                     SSP2BUF         equ	3942	;# 
  2877   000F67                     ECCP2DEL        equ	3943	;# 
  2878   000F68                     ECCP2AS         equ	3944	;# 
  2879   000F69                     ECCP3DEL        equ	3945	;# 
  2880   000F6A                     ECCP3AS         equ	3946	;# 
  2881   000F6B                     RCSTA2          equ	3947	;# 
  2882   000F6C                     TXSTA2          equ	3948	;# 
  2883   000F6D                     TXREG2          equ	3949	;# 
  2884   000F6E                     RCREG2          equ	3950	;# 
  2885   000F6F                     SPBRG2          equ	3951	;# 
  2886   000F70                     CCP5CON         equ	3952	;# 
  2887   000F71                     CCPR5           equ	3953	;# 
  2888   000F71                     CCPR5L          equ	3953	;# 
  2889   000F72                     CCPR5H          equ	3954	;# 
  2890   000F73                     CCP4CON         equ	3955	;# 
  2891   000F74                     CCPR4           equ	3956	;# 
  2892   000F74                     CCPR4L          equ	3956	;# 
  2893   000F75                     CCPR4H          equ	3957	;# 
  2894   000F76                     T4CON           equ	3958	;# 
  2895   000F77                     PR4             equ	3959	;# 
  2896   000F78                     TMR4            equ	3960	;# 
  2897   000F79                     ECCP1DEL        equ	3961	;# 
  2898   000F7A                     ERDPT           equ	3962	;# 
  2899   000F7A                     ERDPTL          equ	3962	;# 
  2900   000F7B                     ERDPTH          equ	3963	;# 
  2901   000F7C                     BAUDCON2        equ	3964	;# 
  2902   000F7C                     BAUDCTL2        equ	3964	;# 
  2903   000F7D                     SPBRGH2         equ	3965	;# 
  2904   000F7E                     BAUDCON1        equ	3966	;# 
  2905   000F7E                     BAUDCON         equ	3966	;# 
  2906   000F7E                     BAUDCTL         equ	3966	;# 
  2907   000F7E                     BAUDCTL1        equ	3966	;# 
  2908   000F7F                     SPBRGH1         equ	3967	;# 
  2909   000F7F                     SPBRGH          equ	3967	;# 
  2910   000F80                     PORTA           equ	3968	;# 
  2911   000F81                     PORTB           equ	3969	;# 
  2912   000F82                     PORTC           equ	3970	;# 
  2913   000F83                     PORTD           equ	3971	;# 
  2914   000F84                     PORTE           equ	3972	;# 
  2915   000F85                     PORTF           equ	3973	;# 
  2916   000F86                     PORTG           equ	3974	;# 
  2917   000F87                     PORTH           equ	3975	;# 
  2918   000F88                     PORTJ           equ	3976	;# 
  2919   000F89                     LATA            equ	3977	;# 
  2920   000F8A                     LATB            equ	3978	;# 
  2921   000F8B                     LATC            equ	3979	;# 
  2922   000F8C                     LATD            equ	3980	;# 
  2923   000F8D                     LATE            equ	3981	;# 
  2924   000F8E                     LATF            equ	3982	;# 
  2925   000F8F                     LATG            equ	3983	;# 
  2926   000F90                     LATH            equ	3984	;# 
  2927   000F91                     LATJ            equ	3985	;# 
  2928   000F92                     TRISA           equ	3986	;# 
  2929   000F92                     DDRA            equ	3986	;# 
  2930   000F93                     TRISB           equ	3987	;# 
  2931   000F93                     DDRB            equ	3987	;# 
  2932   000F94                     TRISC           equ	3988	;# 
  2933   000F94                     DDRC            equ	3988	;# 
  2934   000F95                     TRISD           equ	3989	;# 
  2935   000F95                     DDRD            equ	3989	;# 
  2936   000F96                     TRISE           equ	3990	;# 
  2937   000F96                     DDRE            equ	3990	;# 
  2938   000F97                     TRISF           equ	3991	;# 
  2939   000F97                     DDRF            equ	3991	;# 
  2940   000F98                     TRISG           equ	3992	;# 
  2941   000F98                     DDRG            equ	3992	;# 
  2942   000F99                     TRISH           equ	3993	;# 
  2943   000F99                     DDRH            equ	3993	;# 
  2944   000F9A                     TRISJ           equ	3994	;# 
  2945   000F9A                     DDRJ            equ	3994	;# 
  2946   000F9B                     OSCTUNE         equ	3995	;# 
  2947   000F9C                     MEMCON          equ	3996	;# 
  2948   000F9D                     PIE1            equ	3997	;# 
  2949   000F9E                     PIR1            equ	3998	;# 
  2950   000F9F                     IPR1            equ	3999	;# 
  2951   000FA0                     PIE2            equ	4000	;# 
  2952   000FA1                     PIR2            equ	4001	;# 
  2953   000FA2                     IPR2            equ	4002	;# 
  2954   000FA3                     PIE3            equ	4003	;# 
  2955   000FA4                     PIR3            equ	4004	;# 
  2956   000FA5                     IPR3            equ	4005	;# 
  2957   000FA6                     EECON1          equ	4006	;# 
  2958   000FA7                     EECON2          equ	4007	;# 
  2959   000FAB                     RCSTA1          equ	4011	;# 
  2960   000FAB                     RCSTA           equ	4011	;# 
  2961   000FAC                     TXSTA1          equ	4012	;# 
  2962   000FAC                     TXSTA           equ	4012	;# 
  2963   000FAD                     TXREG1          equ	4013	;# 
  2964   000FAD                     TXREG           equ	4013	;# 
  2965   000FAE                     RCREG1          equ	4014	;# 
  2966   000FAE                     RCREG           equ	4014	;# 
  2967   000FAF                     SPBRG1          equ	4015	;# 
  2968   000FAF                     SPBRG           equ	4015	;# 
  2969   000FB0                     PSPCON          equ	4016	;# 
  2970   000FB1                     T3CON           equ	4017	;# 
  2971   000FB2                     TMR3            equ	4018	;# 
  2972   000FB2                     TMR3L           equ	4018	;# 
  2973   000FB3                     TMR3H           equ	4019	;# 
  2974   000FB4                     CMCON           equ	4020	;# 
  2975   000FB5                     CVRCON          equ	4021	;# 
  2976   000FB6                     ECCP1AS         equ	4022	;# 
  2977   000FB7                     CCP3CON         equ	4023	;# 
  2978   000FB7                     ECCP3CON        equ	4023	;# 
  2979   000FB8                     CCPR3           equ	4024	;# 
  2980   000FB8                     CCPR3L          equ	4024	;# 
  2981   000FB9                     CCPR3H          equ	4025	;# 
  2982   000FBA                     CCP2CON         equ	4026	;# 
  2983   000FBA                     ECCP2CON        equ	4026	;# 
  2984   000FBB                     CCPR2           equ	4027	;# 
  2985   000FBB                     CCPR2L          equ	4027	;# 
  2986   000FBC                     CCPR2H          equ	4028	;# 
  2987   000FBD                     CCP1CON         equ	4029	;# 
  2988   000FBD                     ECCP1CON        equ	4029	;# 
  2989   000FBE                     CCPR1           equ	4030	;# 
  2990   000FBE                     CCPR1L          equ	4030	;# 
  2991   000FBF                     CCPR1H          equ	4031	;# 
  2992   000FC0                     ADCON2          equ	4032	;# 
  2993   000FC1                     ADCON1          equ	4033	;# 
  2994   000FC2                     ADCON0          equ	4034	;# 
  2995   000FC3                     ADRES           equ	4035	;# 
  2996   000FC3                     ADRESL          equ	4035	;# 
  2997   000FC4                     ADRESH          equ	4036	;# 
  2998   000FC5                     SSP1CON2        equ	4037	;# 
  2999   000FC5                     SSPCON2         equ	4037	;# 
  3000   000FC6                     SSP1CON1        equ	4038	;# 
  3001   000FC6                     SSPCON1         equ	4038	;# 
  3002   000FC7                     SSP1STAT        equ	4039	;# 
  3003   000FC7                     SSPSTAT         equ	4039	;# 
  3004   000FC8                     SSP1ADD         equ	4040	;# 
  3005   000FC8                     SSPADD          equ	4040	;# 
  3006   000FC9                     SSP1BUF         equ	4041	;# 
  3007   000FC9                     SSPBUF          equ	4041	;# 
  3008   000FCA                     T2CON           equ	4042	;# 
  3009   000FCB                     PR2             equ	4043	;# 
  3010   000FCC                     TMR2            equ	4044	;# 
  3011   000FCD                     T1CON           equ	4045	;# 
  3012   000FCE                     TMR1            equ	4046	;# 
  3013   000FCE                     TMR1L           equ	4046	;# 
  3014   000FCF                     TMR1H           equ	4047	;# 
  3015   000FD0                     RCON            equ	4048	;# 
  3016   000FD1                     WDTCON          equ	4049	;# 
  3017   000FD2                     ECON1           equ	4050	;# 
  3018   000FD3                     OSCCON          equ	4051	;# 
  3019   000FD5                     T0CON           equ	4053	;# 
  3020   000FD6                     TMR0            equ	4054	;# 
  3021   000FD6                     TMR0L           equ	4054	;# 
  3022   000FD7                     TMR0H           equ	4055	;# 
  3023   000FD8                     STATUS          equ	4056	;# 
  3024   000FD9                     FSR2            equ	4057	;# 
  3025   000FD9                     FSR2L           equ	4057	;# 
  3026   000FDA                     FSR2H           equ	4058	;# 
  3027   000FDB                     PLUSW2          equ	4059	;# 
  3028   000FDC                     PREINC2         equ	4060	;# 
  3029   000FDD                     POSTDEC2        equ	4061	;# 
  3030   000FDE                     POSTINC2        equ	4062	;# 
  3031   000FDF                     INDF2           equ	4063	;# 
  3032   000FE0                     BSR             equ	4064	;# 
  3033   000FE1                     FSR1            equ	4065	;# 
  3034   000FE1                     FSR1L           equ	4065	;# 
  3035   000FE2                     FSR1H           equ	4066	;# 
  3036   000FE3                     PLUSW1          equ	4067	;# 
  3037   000FE4                     PREINC1         equ	4068	;# 
  3038   000FE5                     POSTDEC1        equ	4069	;# 
  3039   000FE6                     POSTINC1        equ	4070	;# 
  3040   000FE7                     INDF1           equ	4071	;# 
  3041   000FE8                     WREG            equ	4072	;# 
  3042   000FE9                     FSR0            equ	4073	;# 
  3043   000FE9                     FSR0L           equ	4073	;# 
  3044   000FEA                     FSR0H           equ	4074	;# 
  3045   000FEB                     PLUSW0          equ	4075	;# 
  3046   000FEC                     PREINC0         equ	4076	;# 
  3047   000FED                     POSTDEC0        equ	4077	;# 
  3048   000FEE                     POSTINC0        equ	4078	;# 
  3049   000FEF                     INDF0           equ	4079	;# 
  3050   000FF0                     INTCON3         equ	4080	;# 
  3051   000FF1                     INTCON2         equ	4081	;# 
  3052   000FF2                     INTCON          equ	4082	;# 
  3053   000FF3                     PROD            equ	4083	;# 
  3054   000FF3                     PRODL           equ	4083	;# 
  3055   000FF4                     PRODH           equ	4084	;# 
  3056   000FF5                     TABLAT          equ	4085	;# 
  3057   000FF6                     TBLPTR          equ	4086	;# 
  3058   000FF6                     TBLPTRL         equ	4086	;# 
  3059   000FF7                     TBLPTRH         equ	4087	;# 
  3060   000FF8                     TBLPTRU         equ	4088	;# 
  3061   000FF9                     PCLAT           equ	4089	;# 
  3062   000FF9                     PC              equ	4089	;# 
  3063   000FF9                     PCL             equ	4089	;# 
  3064   000FFA                     PCLATH          equ	4090	;# 
  3065   000FFB                     PCLATU          equ	4091	;# 
  3066   000FFC                     STKPTR          equ	4092	;# 
  3067   000FFD                     TOS             equ	4093	;# 
  3068   000FFD                     TOSL            equ	4093	;# 
  3069   000FFE                     TOSH            equ	4094	;# 
  3070   000FFF                     TOSU            equ	4095	;# 
  3071                           
  3072 ;;_filterObj	offset	0
  3073 ;;_maskObj	offset	6
  3074 ;;_rxObj	offset	0
  3075 ;;_rxdata	offset	16
  3076 ;;_ev	offset	0
  3077 ;;_tmid	offset	6
  3078 ;;_processEvent	offset=-3 (param)
  3079 ;;_id	offset=-4 (param)
  3080 ;;_delay	offset=-6 (param)
  3081 ;;_tm	offset	0
  3082 ;;_temp	offset	2
  3083 ;;_ev	offset=-6 (param)
  3084 ;;_inISR	offset=-7 (param)
  3085 ;;_tmid	offset=-9 (param)
  3086 ;;_i	offset	0
  3087 ;;_tm	offset=-2 (param)
  3088 ;;_ev	offset=-8 (param)
  3089 ;;_inISR	offset=-9 (param)
  3090 ;;_me	offset=-2 (param)
  3091 ;;_delay	offset=-4 (param)
  3092 ;;_me	offset=-2 (param)
  3093 ;;_me	offset=-2 (param)
  3094 ;;_processEvent	offset=-5 (param)
  3095 ;;_me	offset=-2 (param)
  3096 ;;_eventID	offset=-3 (param)
  3097 ;;_rxFlags	offset	0
  3098 ;;_rxObj	offset=-2 (param)
  3099 ;;_rxd	offset=-4 (param)
  3100 ;;_temp32	offset	0
  3101 ;;_ba	offset	4
  3102 ;;_fifoReg	offset	80
  3103 ;;_ciFifoCon	offset	92
  3104 ;;_myReg	offset	97
  3105 ;;_ciFifoUa	offset	101
  3106 ;;_a	offset	105
  3107 ;;_i	offset	107
  3108 ;;_n	offset	108
  3109 ;;_spiTransferError	offset	109
  3110 ;;_channel	offset=-1 (param)
  3111 ;;_rxObj	offset=-3 (param)
  3112 ;;_rxd	offset=-5 (param)
  3113 ;;_nBytes	offset=-6 (param)
  3114 ;;_ciFifoCon	offset	0
  3115 ;;_a	offset	5
  3116 ;;_spiTransferError	offset	7
  3117 ;;_channel	offset=-1 (param)
  3118 ;;_i	offset	0
  3119 ;;_spiTransferSize	offset	2
  3120 ;;_spiTransferError	offset	4
  3121 ;;_address	offset=-2 (param)
  3122 ;;_rxd	offset=-4 (param)
  3123 ;;_nBytes	offset=-6 (param)
  3124 ;;_ciFifoSta	offset	0
  3125 ;;_a	offset	4
  3126 ;;_spiTransferError	offset	6
  3127 ;;_channel	offset=-1 (param)
  3128 ;;_flags	offset=-3 (param)
  3129 ;;_i	offset	0
  3130 ;;_me	offset=-2 (param)
  3131 ;;_ev	offset	0
  3132 ;;_ev	offset=-2 (param)
  3133 ;;_txMsg	offset	0
  3134 ;;_txdata	offset	16
  3135 ;;_percent	offset=-1 (param)
  3136 ;;_starter	offset=-2 (param)
  3137 ;;_ev	offset=-2 (param)
  3138 ;;_txMsg	offset	0
  3139 ;;_txdata	offset	16
  3140 ;;_light	offset=-1 (param)
  3141 ;;_txMsg	offset	0
  3142 ;;_txdata	offset	16
  3143 ;;_light	offset=-1 (param)
  3144 ;;_txFlags	offset	0
  3145 ;;_txObj	offset=-2 (param)
  3146 ;;_txd	offset=-4 (param)
  3147 ;;_temp32	offset	0
  3148 ;;_txBuffer	offset	4
  3149 ;;_fifoReg	offset	80
  3150 ;;_ciFifoCon	offset	92
  3151 ;;_a	offset	97
  3152 ;;_ciFifoUa	offset	101
  3153 ;;_dataBytesInObject	offset	105
  3154 ;;_n	offset	109
  3155 ;;_spiTransferError	offset	111
  3156 ;;_i	offset	112
  3157 ;;_j	offset	113
  3158 ;;_channel	offset=-1 (param)
  3159 ;;_txObj	offset=-3 (param)
  3160 ;;_txd	offset=-5 (param)
  3161 ;;_txdNumBytes	offset=-9 (param)
  3162 ;;_flush	offset=-10 (param)
  3163 ;;_i	offset	0
  3164 ;;_spiTransferSize	offset	2
  3165 ;;_spiTransferError	offset	4
  3166 ;;_address	offset=-2 (param)
  3167 ;;_txd	offset=-4 (param)
  3168 ;;_nBytes	offset=-6 (param)
  3169 ;;_ciFifoCon	offset	0
  3170 ;;_a	offset	5
  3171 ;;_spiTransferError	offset	7
  3172 ;;_channel	offset=-1 (param)
  3173 ;;_flush	offset=-2 (param)
  3174 ;;_w	offset	0
  3175 ;;_i	offset	4
  3176 ;;_j	offset	6
  3177 ;;_spiTransferSize	offset	8
  3178 ;;_n	offset	10
  3179 ;;_spiTransferError	offset	12
  3180 ;;_address	offset=-2 (param)
  3181 ;;_rxd	offset=-4 (param)
  3182 ;;_nWords	offset=-6 (param)
  3183 ;;_dataBytesInObject	offset	0
  3184 ;;_dlc	offset=-1 (param)
  3185 ;;_ciFifoSta	offset	0
  3186 ;;_a	offset	4
  3187 ;;_spiTransferError	offset	6
  3188 ;;_channel	offset=-1 (param)
  3189 ;;_flags	offset=-3 (param)
  3190 ;;_ev	offset	0
  3191 ;;_inISR	offset=-6 (param)
  3192 ;;_sign	offset	0
  3193 ;;_counter	offset	1
  3194 ;;_dividend	offset=-2 (param)
  3195 ;;_divisor	offset=-4 (param)
  3196 ;;_inISR	offset=-1 (param)
  3197 ;;_inISR	offset=-1 (param)
  3198 ;;_InterruptHandler	offset=-3 (param)
  3199 ;;_filter	offset=-1 (param)
  3200 ;;_fObj	offset=-3 (param)
  3201 ;;_mObj	offset=-5 (param)
  3202 ;;_a	offset	0
  3203 ;;_fCtrl	offset	2
  3204 ;;_filter	offset=-1 (param)
  3205 ;;_channel	offset=-2 (param)
  3206 ;;_enable	offset=-3 (param)
  3207 ;;_temp32	offset	0
  3208 ;;_fObj	offset	4
  3209 ;;_a	offset	10
  3210 ;;_filter	offset=-1 (param)
  3211 ;;_id	offset=-3 (param)
  3212 ;;_temp32	offset	0
  3213 ;;_mObj	offset	4
  3214 ;;_a	offset	10
  3215 ;;_filter	offset=-1 (param)
  3216 ;;_mask	offset=-3 (param)
  3217 ;;_EXIDE	offset=-4 (param)
  3218 ;;_a	offset	0
  3219 ;;_spiTransferError	offset	2
  3220 ;;_fCtrl	offset	3
  3221 ;;_filter	offset=-1 (param)
  3222 ;;_txqConfig	offset	0
  3223 ;;_config	offset	4
  3224 ;;_rxfConfig	offset	7
  3225 ;;_txfConfig	offset	10
  3226 ;;_tefConfig	offset	12
  3227 ;;_bitTime	offset=-1 (param)
  3228 ;;_withISR	offset=-2 (param)
  3229 ;;_ciFifoCon	offset	0
  3230 ;;_config	offset=-2 (param)
  3231 ;;_ciFifoCon	offset	0
  3232 ;;_config	offset=-2 (param)
  3233 ;;_ciFifoCon	offset	0
  3234 ;;_config	offset=-2 (param)
  3235 ;;_ciFifoCon	offset	0
  3236 ;;_a	offset	5
  3237 ;;_channel	offset=-1 (param)
  3238 ;;_config	offset=-3 (param)
  3239 ;;_ts	offset=-4 (param)
  3240 ;;_ps	offset=-2 (param)
  3241 ;;_d	offset	0
  3242 ;;_spiTransferError	offset	1
  3243 ;;_ciTefCon	offset	0
  3244 ;;_config	offset=-2 (param)
  3245 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3246 ;;_ciFifoCon	offset	0
  3247 ;;_a	offset	5
  3248 ;;_channel	offset=-1 (param)
  3249 ;;_config	offset=-3 (param)
  3250 ;;_d	offset	0
  3251 ;;_spiTransferError	offset	1
  3252 ;;_opMode	offset=-1 (param)
  3253 ;;_spiTransferError	offset	0
  3254 ;;_address	offset=-2 (param)
  3255 ;;_txd	offset=-3 (param)
  3256 ;;_spiTransferError	offset	0
  3257 ;;_address	offset=-2 (param)
  3258 ;;_rxd	offset=-4 (param)
  3259 ;;_intEnables	offset	0
  3260 ;;_index	offset=-1 (param)
  3261 ;;_flags	offset=-3 (param)
  3262 ;;_spiTransferSize	offset	0
  3263 ;;_i	offset	2
  3264 ;;_spiTransferError	offset	3
  3265 ;;_address	offset=-2 (param)
  3266 ;;_txd	offset=-4 (param)
  3267 ;;_ciCon	offset	0
  3268 ;;_config	offset=-2 (param)
  3269 ;;_ciCon	offset	0
  3270 ;;_config	offset=-2 (param)
  3271 ;;_ciNbtcfg	offset	0
  3272 ;;_bitTime	offset=-1 (param)
  3273 ;;_spiTransferSize	offset	0
  3274 ;;_i	offset	2
  3275 ;;_spiTransferError	offset	3
  3276 ;;_address	offset=-2 (param)
  3277 ;;_txd	offset=-6 (param)
  3278 ;;_dummy	offset	0
  3279 ;;_txPtr	offset=-2 (param)
  3280 ;;_rxPtr	offset=-4 (param)
  3281 ;;_size	offset=-6 (param)
  3282 ;;_dummy	offset	0
  3283 ;;_i	offset	1
  3284 ;;_id	offset=-1 (param)
  3285 ;;_inISR	offset=-2 (param)
  3286 ;;_me	offset=-2 (param)
  3287 ;;_tm	offset	0
  3288 ;;_temp	offset	2
  3289 ;;_ev	offset=-6 (param)
  3290 ;;_inISR	offset=-7 (param)
  3291 ;;_tmid	offset=-9 (param)
  3292 ;;_sign	offset	0
  3293 ;;_counter	offset	1
  3294 ;;_dividend	offset=-2 (param)
  3295 ;;_divisor	offset=-4 (param)
  3296 ;;_i	offset	0
  3297 ;;_tm	offset=-2 (param)
  3298 ;;_ev	offset=-8 (param)
  3299 ;;_inISR	offset=-9 (param)
  3300 ;;_inISR	offset=-1 (param)
  3301 ;;_inISR	offset=-1 (param)
  3302 ;;_me	offset=-2 (param)
  3303 ;;_delay	offset=-4 (param)
  3304 ;;_me	offset=-2 (param)
  3305                           
  3306                           	psect	idataCOMRAM
  3307   014B20                     __pidataCOMRAM:
  3308                           	callstack 0
  3309                           
  3310                           ;initializer for motorControl_Process@oldState
  3311   014B20  01                 	db	1
  3312                           
  3313                           ;initializer for motorControl_Process@state
  3314   014B21  01                 	db	1
  3315                           
  3316                           	psect	mediumconst
  3317   00FF8C                     __pmediumconst:
  3318                           	callstack 0
  3319   00FF8C  00                 	db	0
  3320   00FF8D                     _canControlResetValues:
  3321                           	callstack 0
  3322   00FF8D  0760               	dw	1888
  3323   00FF8F  0498               	dw	1176
  3324   00FF91  0F0F               	dw	3855
  3325   00FF93  003E               	dw	62
  3326   00FF95  0303               	dw	771
  3327   00FF97  000E               	dw	14
  3328   00FF99  1000               	dw	4096
  3329   00FF9B  0002               	dw	2
  3330   00FF9D  0000               	dw	0
  3331   00FF9F  0000               	dw	0
  3332   00FFA1  0000               	dw	0
  3333   00FFA3  0000               	dw	0
  3334   00FFA5  0040               	dw	64
  3335   00FFA7  4040               	dw	16448
  3336   00FFA9  0000               	dw	0
  3337   00FFAB  0000               	dw	0
  3338   00FFAD  0000               	dw	0
  3339   00FFAF  0000               	dw	0
  3340   00FFB1  0000               	dw	0
  3341   00FFB3  0000               	dw	0
  3342   00FFB5  0000               	dw	0
  3343   00FFB7  0000               	dw	0
  3344   00FFB9  0000               	dw	0
  3345   00FFBB  0000               	dw	0
  3346   00FFBD  0000               	dw	0
  3347   00FFBF  0000               	dw	0
  3348   00FFC1  0000               	dw	0
  3349   00FFC3  0020               	dw	32
  3350   00FFC5  0000               	dw	0
  3351   00FFC7  0000               	dw	0
  3352   00FFC9  0000               	dw	0
  3353   00FFCB  0000               	dw	0
  3354   00FFCD  0400               	dw	1024
  3355   00FFCF  0000               	dw	0
  3356   00FFD1  0000               	dw	0
  3357   00FFD3  0000               	dw	0
  3358   00FFD5  0000               	dw	0
  3359   00FFD7  0000               	dw	0
  3360   00FFD9  0000               	dw	0
  3361   00FFDB  0000               	dw	0
  3362   00FFDD                     __end_of_canControlResetValues:
  3363                           	callstack 0
  3364   00FFDD                     _canFifoResetValues:
  3365                           	callstack 0
  3366   00FFDD  0400               	dw	1024
  3367   00FFDF  0060               	dw	96
  3368   00FFE1  0000               	dw	0
  3369   00FFE3  0000               	dw	0
  3370   00FFE5  0000               	dw	0
  3371   00FFE7  0000               	dw	0
  3372   00FFE9                     __end_of_canFifoResetValues:
  3373                           	callstack 0
  3374   00FFE9                     _spi2_configuration:
  3375                           	callstack 0
  3376   00FFE9  01                 	db	1
  3377   00FFEA  40                 	db	64
  3378   00FFEB  00                 	db	0
  3379   00FFEC  00                 	db	0
  3380   00FFED                     __end_of_spi2_configuration:
  3381                           	callstack 0
  3382   00FFED                     STR_1:
  3383   00FFED  20                 	db	32
  3384   00FFEE  20                 	db	32
  3385   00FFEF  20                 	db	32
  3386   00FFF0  20                 	db	32
  3387   00FFF1  20                 	db	32
  3388   00FFF2  20                 	db	32
  3389   00FFF3  20                 	db	32
  3390   00FFF4  20                 	db	32
  3391   00FFF5  20                 	db	32
  3392   00FFF6  20                 	db	32
  3393   00FFF7  20                 	db	32
  3394   00FFF8  20                 	db	32
  3395   00FFF9  20                 	db	32
  3396   00FFFA  20                 	db	32
  3397   00FFFB  20                 	db	32
  3398   00FFFC  20                 	db	32
  3399   00FFFD  00                 	db	0
  3400   00FFED                     STR_2           equ	STR_1
  3401   00FFFE  00                 	db	0	; dummy byte at the end
  3402   000003                     __activetblptr  equ	3
  3403                           
  3404                           	psect	nvCOMRAM
  3405   00005A                     __pnvCOMRAM:
  3406                           	callstack 0
  3407   00005A                     _TMR0_InterruptHandler:
  3408                           	callstack 0
  3409   00005A                     	ds	3
  3410   000F62                     _SSP2CON2       set	3938
  3411   000F63                     _SSP2CON1bits   set	3939
  3412   000F65                     _SSP2ADD        set	3941
  3413   000F63                     _SSP2CON1       set	3939
  3414   000F64                     _SSP2STAT       set	3940
  3415   000FD5                     _T0CON          set	4053
  3416   000FD6                     _TMR0L          set	4054
  3417   000FD7                     _TMR0H          set	4055
  3418   000FD5                     _T0CONbits      set	4053
  3419   000FF2                     _INTCONbits     set	4082
  3420   000FD0                     _RCONbits       set	4048
  3421   000FC1                     _ADCON1bits     set	4033
  3422   000F95                     _TRISD          set	3989
  3423   000F94                     _TRISC          set	3988
  3424   000F99                     _TRISH          set	3993
  3425   000F93                     _TRISB          set	3987
  3426   000F98                     _TRISG          set	3992
  3427   000F92                     _TRISA          set	3986
  3428   000F97                     _TRISF          set	3991
  3429   000F96                     _TRISE          set	3990
  3430   000F90                     _LATH           set	3984
  3431   000F8B                     _LATC           set	3979
  3432   000F8F                     _LATG           set	3983
  3433   000F8A                     _LATB           set	3978
  3434   000F8E                     _LATF           set	3982
  3435   000F89                     _LATA           set	3977
  3436   000F8C                     _LATD           set	3980
  3437   000F91                     _LATJ           set	3985
  3438   000F8D                     _LATE           set	3981
  3439   000F9B                     _OSCTUNE        set	3995
  3440   000FD3                     _OSCCON         set	4051
  3441   000F9A                     _TRISJ          set	3994
  3442   000F95                     _TRISDbits      set	3989
  3443   000F98                     _TRISGbits      set	3992
  3444   000F66                     _SSP2BUF        set	3942
  3445   000F64                     _SSP2STATbits   set	3940
  3446   000F8F                     _LATGbits       set	3983
  3447                           
  3448                           ; #config settings
  3449                           
  3450                           	psect	cinit
  3451   014682                     __pcinit:
  3452                           	callstack 0
  3453   014682                     start_initialization:
  3454                           	callstack 0
  3455   014682                     __initialization:
  3456                           	callstack 0
  3457                           
  3458                           ; Initialize objects allocated to COMRAM (2 bytes)
  3459                           ; load TBLPTR registers with __pidataCOMRAM
  3460   014682  0E20               	movlw	low __pidataCOMRAM
  3461   014684  6EF6               	movwf	tblptrl,c
  3462   014686  0E4B               	movlw	high __pidataCOMRAM
  3463   014688  6EF7               	movwf	tblptrh,c
  3464   01468A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  3465   01468C  6EF8               	movwf	tblptru,c
  3466   01468E  0009               	tblrd		*+	;fetch initializer
  3467   014690  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  3468   014694  0009               	tblrd		*+	;fetch initializer
  3469   014696  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  3470                           
  3471                           ; Clear objects allocated to BIGRAM (282 bytes)
  3472   01469A  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3473   01469E  EE21 F01A          	lfsr	2,282
  3474   0146A2                     clear_0:
  3475   0146A2  6AEE               	clrf	postinc0,c
  3476   0146A4  50DD               	movf	postdec2,w,c
  3477   0146A6  50D9               	movf	fsr2l,w,c
  3478   0146A8  E1FC               	bnz	clear_0
  3479   0146AA  50DA               	movf	fsr2h,w,c
  3480   0146AC  E1FA               	bnz	clear_0
  3481                           
  3482                           ; Clear objects allocated to BANK2 (200 bytes)
  3483   0146AE  EE02  F000         	lfsr	0,__pbssBANK2
  3484   0146B2  0EC8               	movlw	200
  3485   0146B4                     clear_1:
  3486   0146B4  6AEE               	clrf	postinc0,c
  3487   0146B6  06E8               	decf	wreg,f,c
  3488   0146B8  E1FD               	bnz	clear_1
  3489                           
  3490                           ; Clear objects allocated to BANK1 (200 bytes)
  3491   0146BA  EE01  F000         	lfsr	0,__pbssBANK1
  3492   0146BE  0EC8               	movlw	200
  3493   0146C0                     clear_2:
  3494   0146C0  6AEE               	clrf	postinc0,c
  3495   0146C2  06E8               	decf	wreg,f,c
  3496   0146C4  E1FD               	bnz	clear_2
  3497                           
  3498                           ; Clear objects allocated to BANK0 (48 bytes)
  3499   0146C6  EE00  F060         	lfsr	0,__pbssBANK0
  3500   0146CA  0E30               	movlw	48
  3501   0146CC                     clear_3:
  3502   0146CC  6AEE               	clrf	postinc0,c
  3503   0146CE  06E8               	decf	wreg,f,c
  3504   0146D0  E1FD               	bnz	clear_3
  3505                           
  3506                           ; Clear objects allocated to COMRAM (41 bytes)
  3507   0146D2  EE00  F001         	lfsr	0,__pbssCOMRAM
  3508   0146D6  0E29               	movlw	41
  3509   0146D8                     clear_4:
  3510   0146D8  6AEE               	clrf	postinc0,c
  3511   0146DA  06E8               	decf	wreg,f,c
  3512   0146DC  E1FD               	bnz	clear_4
  3513   0146DE                     end_of_initialization:
  3514                           	callstack 0
  3515   0146DE                     __end_of__initialization:
  3516                           	callstack 0
  3517   0146DE  0100               	movlb	0
  3518   0146E0  EF3E  F09A         	goto	_main	;jump to C main() function
  3519                           
  3520                           	psect	bssCOMRAM
  3521   000001                     __pbssCOMRAM:
  3522                           	callstack 0
  3523   000001                     _carState:
  3524                           	callstack 0
  3525   000001                     	ds	27
  3526   00001C                     _dummy:
  3527                           	callstack 0
  3528   00001C                     	ds	4
  3529   000020                     TMR0_ISR@CountCallBack:
  3530                           	callstack 0
  3531   000020                     	ds	2
  3532   000022                     _timer0ReloadVal:
  3533                           	callstack 0
  3534   000022                     	ds	2
  3535   000024                     lightControl_Process@oldState:
  3536                           	callstack 0
  3537   000024                     	ds	1
  3538   000025                     lightControl_Process@state:
  3539                           	callstack 0
  3540   000025                     	ds	1
  3541   000026                     lightContol_BackLight@lastLight:
  3542                           	callstack 0
  3543   000026                     	ds	1
  3544   000027                     lightContol_FrontLight@lastLight:
  3545                           	callstack 0
  3546   000027                     	ds	1
  3547   000028                     motorControl@lastStarter:
  3548                           	callstack 0
  3549   000028                     	ds	1
  3550   000029                     motorControl@lastPercent:
  3551                           	callstack 0
  3552   000029                     	ds	1
  3553                           
  3554                           	psect	dataCOMRAM
  3555   00005D                     __pdataCOMRAM:
  3556                           	callstack 0
  3557   00005D                     motorControl_Process@oldState:
  3558                           	callstack 0
  3559   00005D                     	ds	1
  3560   00005E                     motorControl_Process@state:
  3561                           	callstack 0
  3562   00005E                     	ds	1
  3563                           
  3564                           	psect	bssBANK0
  3565   000060                     __pbssBANK0:
  3566                           	callstack 0
  3567   000060                     lightContol_BackLight@F6681:
  3568                           	callstack 0
  3569   000060                     	ds	16
  3570   000070                     lightContol_FrontLight@F6675:
  3571                           	callstack 0
  3572   000070                     	ds	16
  3573   000080                     motorControl@F6669:
  3574                           	callstack 0
  3575   000080                     	ds	16
  3576                           
  3577                           	psect	bssBANK1
  3578   000100                     __pbssBANK1:
  3579                           	callstack 0
  3580   000100                     _spiTransmitBuffer:
  3581                           	callstack 0
  3582   000100                     	ds	200
  3583                           
  3584                           	psect	bssBANK2
  3585   000200                     __pbssBANK2:
  3586                           	callstack 0
  3587   000200                     _spiReceiveBuffer:
  3588                           	callstack 0
  3589   000200                     	ds	200
  3590                           
  3591                           	psect	bssBIGRAM
  3592   0002C8                     __pbssBIGRAM:
  3593                           	callstack 0
  3594   0002C8                     _theXF:
  3595                           	callstack 0
  3596   0002C8                     	ds	282
  3597                           
  3598                           	psect	cstackCOMRAM
  3599   00004A                     __pcstackCOMRAM:
  3600                           	callstack 0
  3601   00004A                     ??_INTERRUPT_InterruptManager:
  3602                           
  3603                           ; 1 bytes @ 0x0
  3604   00004A                     	ds	16
  3605                           
  3606 ;;
  3607 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3608 ;;
  3609 ;; *************** function _main *****************
  3610 ;; Defined at:
  3611 ;;		line 56 in file "main.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;		None
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  filterObj       6  [STACK] struct _CAN_FILTEROBJ_ID
  3616 ;;  maskObj         6  [STACK] struct _CAN_MASKOBJ_ID
  3617 ;; Return value:  Size  Location     Type
  3618 ;;                  1  [STACK] void 
  3619 ;; Registers used:
  3620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;Total ram usage:        0 bytes
  3631 ;; Hardware stack levels required when called: 15
  3632 ;; This function calls:
  3633 ;;		_CanInit
  3634 ;;		_CanSetFilter
  3635 ;;		_SYSTEM_Initialize
  3636 ;;		_TMR0_SetInterruptHandler
  3637 ;;		_XF_executeOnce
  3638 ;;		_XF_init
  3639 ;;		_XF_post
  3640 ;;		_updateCarState
  3641 ;; This function is called by:
  3642 ;;		Startup code after reset
  3643 ;; This function uses a reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text0
  3647   01347C                     __ptext0:
  3648                           	callstack 0
  3649   01347C                     _main:
  3650                           	callstack 0
  3651                           
  3652                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3653   01347C  0E0C               	movlw	12
  3654   01347E  26E1               	addwf	fsr1l,f,c
  3655   013480  0E00               	movlw	0
  3656   013482  22E2               	addwfc	fsr1h,f,c
  3657   013484                     
  3658                           ;main.c: 58:     CAN_FILTEROBJ_ID filterObj;;main.c: 59:     CAN_MASKOBJ_ID maskObj;;mai
      +                          n.c: 62:     filterObj.ID = 1;
  3659   013484  0E01               	movlw	1
  3660   013486  6E32               	movwf	(btemp+8)^0,c
  3661   013488  6A33               	clrf	(btemp+9)^0,c
  3662   01348A  6A34               	clrf	(btemp+10)^0,c
  3663   01348C  6A35               	clrf	(btemp+11)^0,c
  3664                           
  3665                           ;stkvar	_filterObj @ sp[(-12)+0]
  3666   01348E  0EF4               	movlw	-12
  3667   013490  C032  FFE3         	movff	btemp+8,plusw1
  3668   013494  0EF5               	movlw	-11
  3669   013496  C033  FFE3         	movff	btemp+9,plusw1
  3670   01349A  0EF6               	movlw	-10
  3671   01349C  C034  FFE3         	movff	btemp+10,plusw1
  3672   0134A0  0EF7               	movlw	-9
  3673   0134A2  C035  FFE3         	movff	btemp+11,plusw1
  3674   0134A6                     
  3675                           ;main.c: 63:     filterObj.SID11 = 0;
  3676                           ;stkvar	_filterObj @ sp[(-12)+0]
  3677   0134A6  0EF8               	movlw	248
  3678   0134A8  24E1               	addwf	fsr1l,w,c
  3679   0134AA  6ED9               	movwf	fsr2l,c
  3680   0134AC  0EFF               	movlw	255
  3681   0134AE  20E2               	addwfc	fsr1h,w,c
  3682   0134B0  6EDA               	movwf	fsr2h,c
  3683   0134B2  6ADF               	clrf	indf2,c
  3684   0134B4                     
  3685                           ;main.c: 64:     filterObj.EXIDE = 0;
  3686                           ;stkvar	_filterObj @ sp[(-12)+0]
  3687   0134B4  0EF9               	movlw	249
  3688   0134B6  24E1               	addwf	fsr1l,w,c
  3689   0134B8  6ED9               	movwf	fsr2l,c
  3690   0134BA  0EFF               	movlw	255
  3691   0134BC  20E2               	addwfc	fsr1h,w,c
  3692   0134BE  6EDA               	movwf	fsr2h,c
  3693   0134C0  6ADF               	clrf	indf2,c
  3694                           
  3695                           ;main.c: 66:     maskObj.MID = 0x00F;
  3696   0134C2  0E0F               	movlw	15
  3697   0134C4  6E32               	movwf	(btemp+8)^0,c
  3698   0134C6  6A33               	clrf	(btemp+9)^0,c
  3699   0134C8  6A34               	clrf	(btemp+10)^0,c
  3700   0134CA  6A35               	clrf	(btemp+11)^0,c
  3701                           
  3702                           ;stkvar	_maskObj @ sp[(-12)+6]
  3703   0134CC  0EFA               	movlw	-6
  3704   0134CE  C032  FFE3         	movff	btemp+8,plusw1
  3705   0134D2  0EFB               	movlw	-5
  3706   0134D4  C033  FFE3         	movff	btemp+9,plusw1
  3707   0134D8  0EFC               	movlw	-4
  3708   0134DA  C034  FFE3         	movff	btemp+10,plusw1
  3709   0134DE  0EFD               	movlw	-3
  3710   0134E0  C035  FFE3         	movff	btemp+11,plusw1
  3711   0134E4                     
  3712                           ;main.c: 67:     maskObj.MIDE = 1;
  3713                           ;stkvar	_maskObj @ sp[(-12)+6]
  3714   0134E4  0EFF               	movlw	255
  3715   0134E6  24E1               	addwf	fsr1l,w,c
  3716   0134E8  6ED9               	movwf	fsr2l,c
  3717   0134EA  0EFF               	movlw	255
  3718   0134EC  20E2               	addwfc	fsr1h,w,c
  3719   0134EE  6EDA               	movwf	fsr2h,c
  3720   0134F0  0E01               	movlw	1
  3721   0134F2  6EDF               	movwf	indf2,c
  3722   0134F4                     
  3723                           ;main.c: 68:     maskObj.MSID11 = 0;
  3724                           ;stkvar	_maskObj @ sp[(-12)+6]
  3725   0134F4  0EFE               	movlw	254
  3726   0134F6  24E1               	addwf	fsr1l,w,c
  3727   0134F8  6ED9               	movwf	fsr2l,c
  3728   0134FA  0EFF               	movlw	255
  3729   0134FC  20E2               	addwfc	fsr1h,w,c
  3730   0134FE  6EDA               	movwf	fsr2h,c
  3731   013500  6ADF               	clrf	indf2,c
  3732   013502                     
  3733                           ;main.c: 69:     SYSTEM_Initialize();
  3734   013502  EC71  F0A5         	call	_SYSTEM_Initialize	;wreg free
  3735   013506                     
  3736                           ;main.c: 72:     CanInit(CAN_250K_500K, 0);
  3737   013506  0E00               	movlw	0
  3738   013508  6EE6               	movwf	postinc1,c
  3739   01350A  0E08               	movlw	8
  3740   01350C  6EE6               	movwf	postinc1,c
  3741   01350E  EC73  F091         	call	_CanInit	;wreg free
  3742   013512                     
  3743                           ;main.c: 73:     CanSetFilter(CAN_FILTER0, &filterObj, &maskObj);
  3744                           ;stkvar	_maskObj @ sp[(-12)+6]
  3745   013512  0EFA               	movlw	250
  3746   013514  24E1               	addwf	fsr1l,w,c
  3747   013516  6E2A               	movwf	btemp^0,c
  3748   013518  0EFF               	movlw	255
  3749   01351A  20E2               	addwfc	fsr1h,w,c
  3750   01351C  6E2B               	movwf	(btemp+1)^0,c
  3751   01351E  C02A  FFE6         	movff	btemp,postinc1
  3752   013522  C02B  FFE6         	movff	btemp+1,postinc1
  3753                           
  3754                           ;stkvar	_filterObj @ sp[(-14)+0]
  3755   013526  0EF2               	movlw	242
  3756   013528  24E1               	addwf	fsr1l,w,c
  3757   01352A  6E2A               	movwf	btemp^0,c
  3758   01352C  0EFF               	movlw	255
  3759   01352E  20E2               	addwfc	fsr1h,w,c
  3760   013530  6E2B               	movwf	(btemp+1)^0,c
  3761   013532  C02A  FFE6         	movff	btemp,postinc1
  3762   013536  C02B  FFE6         	movff	btemp+1,postinc1
  3763   01353A  0E00               	movlw	0
  3764   01353C  6EE6               	movwf	postinc1,c
  3765   01353E  ECA8  F0A2         	call	_CanSetFilter	;wreg free
  3766   013542                     
  3767                           ;main.c: 75:     XF_init();
  3768   013542  EC84  F096         	call	_XF_init	;wreg free
  3769   013546                     
  3770                           ;main.c: 77:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3771   013546  0E86               	movlw	low _XF_decrementAndQueueTimers
  3772   013548  6EE6               	movwf	postinc1,c
  3773   01354A  0E35               	movlw	high _XF_decrementAndQueueTimers
  3774   01354C  6EE6               	movwf	postinc1,c
  3775   01354E  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3776   013550  6EE6               	movwf	postinc1,c
  3777   013552  EC2D  F0A5         	call	_TMR0_SetInterruptHandler	;wreg free
  3778   013556                     
  3779                           ;main.c: 85:     (INTCONbits.GIE = 1);
  3780   013556  8EF2               	bsf	242,7,c	;volatile
  3781   013558                     
  3782                           ;main.c: 91:     (INTCONbits.PEIE = 1);
  3783   013558  8CF2               	bsf	242,6,c	;volatile
  3784   01355A                     
  3785                           ;main.c: 95:     XF_post(lightControl_Process,E_INIT,0);
  3786   01355A  0E00               	movlw	0
  3787   01355C  6EE6               	movwf	postinc1,c
  3788   01355E  0E00               	movlw	0
  3789   013560  6EE6               	movwf	postinc1,c
  3790   013562  0E01               	movlw	1
  3791   013564  6EE6               	movwf	postinc1,c
  3792   013566  0ED2               	movlw	low _lightControl_Process
  3793   013568  6EE6               	movwf	postinc1,c
  3794   01356A  0E26               	movlw	high _lightControl_Process
  3795   01356C  6EE6               	movwf	postinc1,c
  3796   01356E  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3797   013570  6EE6               	movwf	postinc1,c
  3798   013572  EC0A  F09D         	call	_XF_post	;wreg free
  3799   013576                     l5454:
  3800                           
  3801                           ;main.c: 97:     {;main.c: 98:         updateCarState();
  3802   013576  EC32  F08F         	call	_updateCarState	;wreg free
  3803   01357A                     
  3804                           ;main.c: 99:         XF_executeOnce();
  3805   01357A  ECE3  F0A1         	call	_XF_executeOnce	;wreg free
  3806   01357E  EFBB  F09A         	goto	l5454
  3807   013582  EF57  F000         	goto	start
  3808   013586                     __end_of_main:
  3809                           	callstack 0
  3810                           
  3811 ;; *************** function _updateCarState *****************
  3812 ;; Defined at:
  3813 ;;		line 286 in file "carFunctions.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3818 ;;  rxdata          8  [STACK] unsigned char [8]
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1  [STACK] void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3832 ;;Total ram usage:        0 bytes
  3833 ;; Hardware stack levels used: 1
  3834 ;; Hardware stack levels required when called: 12
  3835 ;; This function calls:
  3836 ;;		_CanReceive
  3837 ;;		_XF_post
  3838 ;; This function is called by:
  3839 ;;		_main
  3840 ;; This function uses a reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text1
  3844   011E64                     __ptext1:
  3845                           	callstack 0
  3846   011E64                     _updateCarState:
  3847                           	callstack 0
  3848                           
  3849                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3850   011E64  0E18               	movlw	24
  3851   011E66  26E1               	addwf	fsr1l,f,c
  3852   011E68  0E00               	movlw	0
  3853   011E6A  22E2               	addwfc	fsr1h,f,c
  3854   011E6C                     
  3855                           ;carFunctions.c: 289:      CAN_RX_MSGOBJ rxObj;;carFunctions.c: 290:      uint8_t rxdata
      +                          [8];;carFunctions.c: 292:      if (CanReceive(&rxObj, rxdata) == 0)
  3856                           ;stkvar	_rxdata @ sp[(-24)+16]
  3857   011E6C  0EF8               	movlw	248
  3858   011E6E  24E1               	addwf	fsr1l,w,c
  3859   011E70  6E2A               	movwf	btemp^0,c
  3860   011E72  0EFF               	movlw	255
  3861   011E74  20E2               	addwfc	fsr1h,w,c
  3862   011E76  6E2B               	movwf	(btemp+1)^0,c
  3863   011E78  C02A  FFE6         	movff	btemp,postinc1
  3864   011E7C  C02B  FFE6         	movff	btemp+1,postinc1
  3865                           
  3866                           ;stkvar	_rxObj @ sp[(-26)+0]
  3867   011E80  0EE6               	movlw	230
  3868   011E82  24E1               	addwf	fsr1l,w,c
  3869   011E84  6E2A               	movwf	btemp^0,c
  3870   011E86  0EFF               	movlw	255
  3871   011E88  20E2               	addwfc	fsr1h,w,c
  3872   011E8A  6E2B               	movwf	(btemp+1)^0,c
  3873   011E8C  C02A  FFE6         	movff	btemp,postinc1
  3874   011E90  C02B  FFE6         	movff	btemp+1,postinc1
  3875   011E94  ECDD  F0A2         	call	_CanReceive	;wreg free
  3876   011E98  502A               	movf	btemp^0,w,c
  3877   011E9A  A4D8               	btfss	status,2,c
  3878   011E9C  EF52  F08F         	goto	u3131
  3879   011EA0  EF54  F08F         	goto	u3130
  3880   011EA4                     u3131:
  3881   011EA4  EF4E  F090         	goto	l1537
  3882   011EA8                     u3130:
  3883   011EA8  EF10  F090         	goto	l5404
  3884   011EAC                     l5374:
  3885                           
  3886                           ;carFunctions.c: 298:                  carState.contactKey = rxdata[0];
  3887                           ;stkvar	_rxdata @ sp[(-24)+16]
  3888   011EAC  0EF8               	movlw	-8
  3889   011EAE  CFE3 F00F          	movff	plusw1,_carState+14
  3890   011EB2                     
  3891                           ;carFunctions.c: 300:                  if (rxdata[0] == 0)
  3892                           ;stkvar	_rxdata @ sp[(-24)+16]
  3893   011EB2  0EF8               	movlw	-8
  3894   011EB4  50E3               	movf	plusw1,w,c
  3895   011EB6  A4D8               	btfss	status,2,c
  3896   011EB8  EF60  F08F         	goto	u3141
  3897   011EBC  EF62  F08F         	goto	u3140
  3898   011EC0                     u3141:
  3899   011EC0  EF80  F08F         	goto	l5380
  3900   011EC4                     u3140:
  3901   011EC4                     
  3902                           ;carFunctions.c: 301:                  {;carFunctions.c: 302:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_OFF, 0);
  3903   011EC4  0E00               	movlw	0
  3904   011EC6  6EE6               	movwf	postinc1,c
  3905   011EC8  0E00               	movlw	0
  3906   011ECA  6EE6               	movwf	postinc1,c
  3907   011ECC  0E02               	movlw	2
  3908   011ECE  6EE6               	movwf	postinc1,c
  3909   011ED0  0ED2               	movlw	low _lightControl_Process
  3910   011ED2  6EE6               	movwf	postinc1,c
  3911   011ED4  0E26               	movlw	high _lightControl_Process
  3912   011ED6  6EE6               	movwf	postinc1,c
  3913   011ED8  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3914   011EDA  6EE6               	movwf	postinc1,c
  3915   011EDC  EC0A  F09D         	call	_XF_post	;wreg free
  3916                           
  3917                           ;carFunctions.c: 303:                      XF_post(motorControl_Process, E_CONTACT_OFF, 
      +                          0);
  3918   011EE0  0E00               	movlw	0
  3919   011EE2  6EE6               	movwf	postinc1,c
  3920   011EE4  0E00               	movlw	0
  3921   011EE6  6EE6               	movwf	postinc1,c
  3922   011EE8  0E02               	movlw	2
  3923   011EEA  6EE6               	movwf	postinc1,c
  3924   011EEC  0EA6               	movlw	low _motorControl_Process
  3925   011EEE  6EE6               	movwf	postinc1,c
  3926   011EF0  0E20               	movlw	high _motorControl_Process
  3927   011EF2  6EE6               	movwf	postinc1,c
  3928   011EF4  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3929   011EF6  6EE6               	movwf	postinc1,c
  3930   011EF8  EC0A  F09D         	call	_XF_post	;wreg free
  3931                           
  3932                           ;carFunctions.c: 304:                  }
  3933   011EFC  EF4E  F090         	goto	l1537
  3934   011F00                     l5380:
  3935                           
  3936                           ;carFunctions.c: 306:                  {;carFunctions.c: 307:                      XF_po
      +                          st(lightControl_Process, E_CONTACT_ON, 0);
  3937   011F00  0E00               	movlw	0
  3938   011F02  6EE6               	movwf	postinc1,c
  3939   011F04  0E00               	movlw	0
  3940   011F06  6EE6               	movwf	postinc1,c
  3941   011F08  0E03               	movlw	3
  3942   011F0A  6EE6               	movwf	postinc1,c
  3943   011F0C  0ED2               	movlw	low _lightControl_Process
  3944   011F0E  6EE6               	movwf	postinc1,c
  3945   011F10  0E26               	movlw	high _lightControl_Process
  3946   011F12  6EE6               	movwf	postinc1,c
  3947   011F14  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3948   011F16  6EE6               	movwf	postinc1,c
  3949   011F18  EC0A  F09D         	call	_XF_post	;wreg free
  3950                           
  3951                           ;carFunctions.c: 308:                      XF_post(motorControl_Process, E_CONTACT_ON, 0
      +                          );
  3952   011F1C  0E00               	movlw	0
  3953   011F1E  6EE6               	movwf	postinc1,c
  3954   011F20  0E00               	movlw	0
  3955   011F22  6EE6               	movwf	postinc1,c
  3956   011F24  0E03               	movlw	3
  3957   011F26  6EE6               	movwf	postinc1,c
  3958   011F28  0EA6               	movlw	low _motorControl_Process
  3959   011F2A  6EE6               	movwf	postinc1,c
  3960   011F2C  0E20               	movlw	high _motorControl_Process
  3961   011F2E  6EE6               	movwf	postinc1,c
  3962   011F30  0E01               	movlw	low (_motorControl_Process shr (0+16))
  3963   011F32  6EE6               	movwf	postinc1,c
  3964   011F34  EC0A  F09D         	call	_XF_post	;wreg free
  3965   011F38  EF4E  F090         	goto	l1537
  3966   011F3C                     l5382:
  3967                           
  3968                           ;carFunctions.c: 315:                  carState.brakePedal = rxdata[0];
  3969                           ;stkvar	_rxdata @ sp[(-24)+16]
  3970   011F3C  0EF8               	movlw	-8
  3971   011F3E  CFE3 F00D          	movff	plusw1,_carState+12
  3972   011F42                     
  3973                           ;carFunctions.c: 317:                  if (rxdata[0] > 6)
  3974                           ;stkvar	_rxdata @ sp[(-24)+16]
  3975   011F42  0EF8               	movlw	-8
  3976   011F44  CFE3 F02A          	movff	plusw1,btemp
  3977   011F48  0E06               	movlw	6
  3978   011F4A  642A               	cpfsgt	btemp^0,c
  3979   011F4C  EFAA  F08F         	goto	u3151
  3980   011F50  EFAC  F08F         	goto	u3150
  3981   011F54                     u3151:
  3982   011F54  EFBC  F08F         	goto	l5388
  3983   011F58                     u3150:
  3984   011F58                     
  3985                           ;carFunctions.c: 318:                  {;carFunctions.c: 319:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE, 0);
  3986   011F58  0E00               	movlw	0
  3987   011F5A  6EE6               	movwf	postinc1,c
  3988   011F5C  0E00               	movlw	0
  3989   011F5E  6EE6               	movwf	postinc1,c
  3990   011F60  0E04               	movlw	4
  3991   011F62  6EE6               	movwf	postinc1,c
  3992   011F64  0ED2               	movlw	low _lightControl_Process
  3993   011F66  6EE6               	movwf	postinc1,c
  3994   011F68  0E26               	movlw	high _lightControl_Process
  3995   011F6A  6EE6               	movwf	postinc1,c
  3996   011F6C  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3997   011F6E  6EE6               	movwf	postinc1,c
  3998   011F70  EC0A  F09D         	call	_XF_post	;wreg free
  3999                           
  4000                           ;carFunctions.c: 320:                  }else if (rxdata[0] < 6)
  4001   011F74  EF4E  F090         	goto	l1537
  4002   011F78                     l5388:
  4003                           
  4004                           ;stkvar	_rxdata @ sp[(-24)+16]
  4005   011F78  0EF8               	movlw	-8
  4006   011F7A  CFE3 F02A          	movff	plusw1,btemp
  4007   011F7E  0E06               	movlw	6
  4008   011F80  602A               	cpfslt	btemp^0,c
  4009   011F82  EFC5  F08F         	goto	u3161
  4010   011F86  EFC7  F08F         	goto	u3160
  4011   011F8A                     u3161:
  4012   011F8A  EF4E  F090         	goto	l1527
  4013   011F8E                     u3160:
  4014   011F8E                     
  4015                           ;carFunctions.c: 321:                  {;carFunctions.c: 322:                      XF_po
      +                          st(lightControl_Process, E_HIGH_BRAKE_RELASED, 0);
  4016   011F8E  0E00               	movlw	0
  4017   011F90  6EE6               	movwf	postinc1,c
  4018   011F92  0E00               	movlw	0
  4019   011F94  6EE6               	movwf	postinc1,c
  4020   011F96  0E0A               	movlw	10
  4021   011F98  6EE6               	movwf	postinc1,c
  4022   011F9A  0ED2               	movlw	low _lightControl_Process
  4023   011F9C  6EE6               	movwf	postinc1,c
  4024   011F9E  0E26               	movlw	high _lightControl_Process
  4025   011FA0  6EE6               	movwf	postinc1,c
  4026   011FA2  0E01               	movlw	low (_lightControl_Process shr (0+16))
  4027   011FA4  6EE6               	movwf	postinc1,c
  4028   011FA6  EC0A  F09D         	call	_XF_post	;wreg free
  4029   011FAA  EF4E  F090         	goto	l1537
  4030   011FAE                     l5392:
  4031                           
  4032                           ;carFunctions.c: 329:                  carState.accelPedal = rxdata[0];
  4033                           ;stkvar	_rxdata @ sp[(-24)+16]
  4034   011FAE  0EF8               	movlw	-8
  4035   011FB0  CFE3 F00E          	movff	plusw1,_carState+13
  4036   011FB4                     
  4037                           ;carFunctions.c: 330:                  if (rxdata[0] > 6)
  4038                           ;stkvar	_rxdata @ sp[(-24)+16]
  4039   011FB4  0EF8               	movlw	-8
  4040   011FB6  CFE3 F02A          	movff	plusw1,btemp
  4041   011FBA  0E06               	movlw	6
  4042   011FBC  642A               	cpfsgt	btemp^0,c
  4043   011FBE  EFE3  F08F         	goto	u3171
  4044   011FC2  EFE5  F08F         	goto	u3170
  4045   011FC6                     u3171:
  4046   011FC6  EFF5  F08F         	goto	l5398
  4047   011FCA                     u3170:
  4048   011FCA                     
  4049                           ;carFunctions.c: 331:                  {;carFunctions.c: 332:                      XF_po
      +                          st(motorControl_Process, E_ACCELERATION_ON, 0);
  4050   011FCA  0E00               	movlw	0
  4051   011FCC  6EE6               	movwf	postinc1,c
  4052   011FCE  0E00               	movlw	0
  4053   011FD0  6EE6               	movwf	postinc1,c
  4054   011FD2  0E08               	movlw	8
  4055   011FD4  6EE6               	movwf	postinc1,c
  4056   011FD6  0EA6               	movlw	low _motorControl_Process
  4057   011FD8  6EE6               	movwf	postinc1,c
  4058   011FDA  0E20               	movlw	high _motorControl_Process
  4059   011FDC  6EE6               	movwf	postinc1,c
  4060   011FDE  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4061   011FE0  6EE6               	movwf	postinc1,c
  4062   011FE2  EC0A  F09D         	call	_XF_post	;wreg free
  4063                           
  4064                           ;carFunctions.c: 333:                  }else if (rxdata[0] < 6)
  4065   011FE6  EF4E  F090         	goto	l1537
  4066   011FEA                     l5398:
  4067                           
  4068                           ;stkvar	_rxdata @ sp[(-24)+16]
  4069   011FEA  0EF8               	movlw	-8
  4070   011FEC  CFE3 F02A          	movff	plusw1,btemp
  4071   011FF0  0E06               	movlw	6
  4072   011FF2  602A               	cpfslt	btemp^0,c
  4073   011FF4  EFFE  F08F         	goto	u3181
  4074   011FF8  EF00  F090         	goto	u3180
  4075   011FFC                     u3181:
  4076   011FFC  EF4E  F090         	goto	l1527
  4077   012000                     u3180:
  4078   012000                     
  4079                           ;carFunctions.c: 334:                  {;carFunctions.c: 335:                      XF_po
      +                          st(motorControl_Process, E_ACCELERATION_OFF, 0);
  4080   012000  0E00               	movlw	0
  4081   012002  6EE6               	movwf	postinc1,c
  4082   012004  0E00               	movlw	0
  4083   012006  6EE6               	movwf	postinc1,c
  4084   012008  0E09               	movlw	9
  4085   01200A  6EE6               	movwf	postinc1,c
  4086   01200C  0EA6               	movlw	low _motorControl_Process
  4087   01200E  6EE6               	movwf	postinc1,c
  4088   012010  0E20               	movlw	high _motorControl_Process
  4089   012012  6EE6               	movwf	postinc1,c
  4090   012014  0E01               	movlw	low (_motorControl_Process shr (0+16))
  4091   012016  6EE6               	movwf	postinc1,c
  4092   012018  EC0A  F09D         	call	_XF_post	;wreg free
  4093   01201C  EF4E  F090         	goto	l1537
  4094   012020                     l5404:
  4095                           
  4096                           ;stkvar	_rxObj @ sp[(-24)+0]
  4097   012020  50E1               	movf	fsr1l,w,c
  4098   012022  0FE8               	addlw	-24
  4099   012024  6ED9               	movwf	fsr2l,c
  4100   012026  50E2               	movf	fsr1h,w,c
  4101   012028  6EDA               	movwf	fsr2h,c
  4102   01202A  0EFF               	movlw	255
  4103   01202C  22DA               	addwfc	fsr2h,f,c
  4104   01202E  0EF0               	movlw	240
  4105   012030  14DE               	andwf	postinc2,w,c
  4106   012032  6E32               	movwf	(btemp+8)^0,c
  4107   012034  0E07               	movlw	7
  4108   012036  14DE               	andwf	postinc2,w,c
  4109   012038  6E33               	movwf	(btemp+9)^0,c
  4110   01203A  0E00               	movlw	0
  4111   01203C  14DE               	andwf	postinc2,w,c
  4112   01203E  6E34               	movwf	(btemp+10)^0,c
  4113   012040  0E00               	movlw	0
  4114   012042  14DE               	andwf	postinc2,w,c
  4115   012044  6E35               	movwf	(btemp+11)^0,c
  4116                           
  4117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4118                           ; Switch size 1, requested type "simple"
  4119                           ; Number of cases is 1, Range of values is 0 to 0
  4120                           ; switch strategies available:
  4121                           ; Name         Instructions Cycles
  4122                           ; simple_byte            4     3 (average)
  4123                           ;	Chosen strategy is simple_byte
  4124   012046  5035               	movf	(btemp+11)^0,w,c
  4125   012048  0A00               	xorlw	0	; case 0
  4126   01204A  B4D8               	btfsc	status,2,c
  4127   01204C  EF47  F090         	goto	l5660
  4128   012050  EF4E  F090         	goto	l1537
  4129   012054                     l5658:
  4130                           
  4131                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4132                           ; Switch size 1, requested type "simple"
  4133                           ; Number of cases is 2, Range of values is 0 to 1
  4134                           ; switch strategies available:
  4135                           ; Name         Instructions Cycles
  4136                           ; simple_byte            7     4 (average)
  4137                           ;	Chosen strategy is simple_byte
  4138   012054  5033               	movf	(btemp+9)^0,w,c
  4139   012056  0A00               	xorlw	0	; case 0
  4140   012058  B4D8               	btfsc	status,2,c
  4141   01205A  EF35  F090         	goto	l5662
  4142   01205E  0A01               	xorlw	1	; case 1
  4143   012060  B4D8               	btfsc	status,2,c
  4144   012062  EF40  F090         	goto	l5664
  4145   012066  EF4E  F090         	goto	l1537
  4146   01206A                     l5662:
  4147                           
  4148                           ; Switch size 1, requested type "simple"
  4149                           ; Number of cases is 2, Range of values is 64 to 80
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte            7     4 (average)
  4153                           ;	Chosen strategy is simple_byte
  4154   01206A  5032               	movf	(btemp+8)^0,w,c
  4155   01206C  0A40               	xorlw	64	; case 64
  4156   01206E  B4D8               	btfsc	status,2,c
  4157   012070  EF9E  F08F         	goto	l5382
  4158   012074  0A10               	xorlw	16	; case 80
  4159   012076  B4D8               	btfsc	status,2,c
  4160   012078  EF56  F08F         	goto	l5374
  4161   01207C  EF4E  F090         	goto	l1537
  4162   012080                     l5664:
  4163                           
  4164                           ; Switch size 1, requested type "simple"
  4165                           ; Number of cases is 1, Range of values is 64 to 64
  4166                           ; switch strategies available:
  4167                           ; Name         Instructions Cycles
  4168                           ; simple_byte            4     3 (average)
  4169                           ;	Chosen strategy is simple_byte
  4170   012080  5032               	movf	(btemp+8)^0,w,c
  4171   012082  0A40               	xorlw	64	; case 64
  4172   012084  B4D8               	btfsc	status,2,c
  4173   012086  EFD7  F08F         	goto	l5392
  4174   01208A  EF4E  F090         	goto	l1537
  4175   01208E                     l5660:
  4176                           
  4177                           ; Switch size 1, requested type "simple"
  4178                           ; Number of cases is 1, Range of values is 0 to 0
  4179                           ; switch strategies available:
  4180                           ; Name         Instructions Cycles
  4181                           ; simple_byte            4     3 (average)
  4182                           ;	Chosen strategy is simple_byte
  4183   01208E  5034               	movf	(btemp+10)^0,w,c
  4184   012090  0A00               	xorlw	0	; case 0
  4185   012092  B4D8               	btfsc	status,2,c
  4186   012094  EF2A  F090         	goto	l5658
  4187   012098  EF4E  F090         	goto	l1537
  4188   01209C                     l1527:
  4189   01209C                     l1537:
  4190                           
  4191                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  4192   01209C  0EE8               	movlw	232
  4193   01209E  26E1               	addwf	fsr1l,f,c
  4194   0120A0  0EFF               	movlw	255
  4195   0120A2  22E2               	addwfc	fsr1h,f,c
  4196   0120A4  0012               	return		;funcret
  4197   0120A6                     __end_of_updateCarState:
  4198                           	callstack 0
  4199                           
  4200 ;; *************** function _XF_post *****************
  4201 ;; Defined at:
  4202 ;;		line 274 in file "xf/xf.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4205 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  4206 ;;  id              1  [STACK] unsigned char 
  4207 ;;  delay           2  [STACK] unsigned short 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  ev              6  [STACK] struct Event_
  4210 ;;  tmid            1  [STACK] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1  [STACK] unsigned char 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used: 1
  4226 ;; Hardware stack levels required when called: 10
  4227 ;; This function calls:
  4228 ;;		_Event_init
  4229 ;;		_Event_setDelay
  4230 ;;		_Event_setId
  4231 ;;		_Event_setPE
  4232 ;;		_XF_pushEvent
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;;		_updateCarState
  4236 ;; This function uses a reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text2
  4240   013A14                     __ptext2:
  4241                           	callstack 0
  4242   013A14                     _XF_post:
  4243                           	callstack 0
  4244                           
  4245                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4246   013A14  0E07               	movlw	7
  4247   013A16  26E1               	addwf	fsr1l,f,c
  4248   013A18  0E00               	movlw	0
  4249   013A1A  22E2               	addwfc	fsr1h,f,c
  4250   013A1C                     
  4251                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  4252                           ;stkvar	_tmid @ sp[(-7)+6]
  4253   013A1C  0EFF               	movlw	-1
  4254   013A1E  6AE3               	clrf	plusw1,c
  4255   013A20  84E3               	bsf	plusw1,2,c
  4256   013A22  86E3               	bsf	plusw1,3,c	;indir
  4257   013A24                     
  4258                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  4259                           ;stkvar	_ev @ sp[(-7)+0]
  4260   013A24  0EF9               	movlw	249
  4261   013A26  24E1               	addwf	fsr1l,w,c
  4262   013A28  6E2A               	movwf	btemp^0,c
  4263   013A2A  0EFF               	movlw	255
  4264   013A2C  20E2               	addwfc	fsr1h,w,c
  4265   013A2E  6E2B               	movwf	(btemp+1)^0,c
  4266   013A30  C02A  FFE6         	movff	btemp,postinc1
  4267   013A34  C02B  FFE6         	movff	btemp+1,postinc1
  4268   013A38  EC2A  F0A4         	call	_Event_init	;wreg free
  4269   013A3C                     
  4270                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  4271                           ;stkvar	_processEvent @ sp[(-7)+-3]
  4272   013A3C  0EF6               	movlw	-10
  4273   013A3E  CFE3 FFE6          	movff	plusw1,postinc1
  4274   013A42  CFE3 FFE6          	movff	plusw1,postinc1
  4275   013A46  CFE3 FFE6          	movff	plusw1,postinc1
  4276                           
  4277                           ;stkvar	_ev @ sp[(-10)+0]
  4278   013A4A  0EF6               	movlw	246
  4279   013A4C  24E1               	addwf	fsr1l,w,c
  4280   013A4E  6E2A               	movwf	btemp^0,c
  4281   013A50  0EFF               	movlw	255
  4282   013A52  20E2               	addwfc	fsr1h,w,c
  4283   013A54  6E2B               	movwf	(btemp+1)^0,c
  4284   013A56  C02A  FFE6         	movff	btemp,postinc1
  4285   013A5A  C02B  FFE6         	movff	btemp+1,postinc1
  4286   013A5E  EC51  F0A4         	call	_Event_setPE	;wreg free
  4287   013A62                     
  4288                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  4289                           ;stkvar	_id @ sp[(-7)+-4]
  4290   013A62  0EF5               	movlw	-11
  4291   013A64  50E3               	movf	plusw1,w,c
  4292   013A66  6EE6               	movwf	postinc1,c
  4293                           
  4294                           ;stkvar	_ev @ sp[(-8)+0]
  4295   013A68  0EF8               	movlw	248
  4296   013A6A  24E1               	addwf	fsr1l,w,c
  4297   013A6C  6E2A               	movwf	btemp^0,c
  4298   013A6E  0EFF               	movlw	255
  4299   013A70  20E2               	addwfc	fsr1h,w,c
  4300   013A72  6E2B               	movwf	(btemp+1)^0,c
  4301   013A74  C02A  FFE6         	movff	btemp,postinc1
  4302   013A78  C02B  FFE6         	movff	btemp+1,postinc1
  4303   013A7C  EC4C  F0A5         	call	_Event_setId	;wreg free
  4304   013A80                     
  4305                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  4306                           ;stkvar	_delay @ sp[(-7)+-6]
  4307   013A80  0EF3               	movlw	-13
  4308   013A82  CFE3 FFE6          	movff	plusw1,postinc1
  4309   013A86  CFE3 FFE6          	movff	plusw1,postinc1
  4310                           
  4311                           ;stkvar	_ev @ sp[(-9)+0]
  4312   013A8A  0EF7               	movlw	247
  4313   013A8C  24E1               	addwf	fsr1l,w,c
  4314   013A8E  6E2A               	movwf	btemp^0,c
  4315   013A90  0EFF               	movlw	255
  4316   013A92  20E2               	addwfc	fsr1h,w,c
  4317   013A94  6E2B               	movwf	(btemp+1)^0,c
  4318   013A96  C02A  FFE6         	movff	btemp,postinc1
  4319   013A9A  C02B  FFE6         	movff	btemp+1,postinc1
  4320   013A9E  EC8C  F0A4         	call	_Event_setDelay	;wreg free
  4321   013AA2                     
  4322                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4323                           ;stkvar	_tmid @ sp[(-7)+6]
  4324   013AA2  0EFF               	movlw	255
  4325   013AA4  24E1               	addwf	fsr1l,w,c
  4326   013AA6  6E2A               	movwf	btemp^0,c
  4327   013AA8  0EFF               	movlw	255
  4328   013AAA  20E2               	addwfc	fsr1h,w,c
  4329   013AAC  6E2B               	movwf	(btemp+1)^0,c
  4330   013AAE  C02A  FFE6         	movff	btemp,postinc1
  4331   013AB2  C02B  FFE6         	movff	btemp+1,postinc1
  4332   013AB6  0E00               	movlw	0
  4333   013AB8  6EE6               	movwf	postinc1,c
  4334                           
  4335                           ;stkvar	_ev @ sp[(-10)+0]
  4336   013ABA  0EF6               	movlw	246
  4337   013ABC  24E1               	addwf	fsr1l,w,c
  4338   013ABE  6ED9               	movwf	fsr2l,c
  4339   013AC0  0EFF               	movlw	255
  4340   013AC2  20E2               	addwfc	fsr1h,w,c
  4341   013AC4  6EDA               	movwf	fsr2h,c
  4342   013AC6  0E06               	movlw	6
  4343   013AC8                     u2871:
  4344   013AC8  CFDE FFE6          	movff	postinc2,postinc1
  4345   013ACC  2CE8               	decfsz	wreg,w,c
  4346   013ACE  EF64  F09D         	goto	u2871
  4347   013AD2  ECC4  F095         	call	_XF_pushEvent	;wreg free
  4348   013AD6                     
  4349                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4350   013AD6  0EF3               	movlw	243
  4351   013AD8  26E1               	addwf	fsr1l,f,c
  4352   013ADA  0EFF               	movlw	255
  4353   013ADC  22E2               	addwfc	fsr1h,f,c
  4354   013ADE  0012               	return		;funcret
  4355   013AE0                     __end_of_XF_post:
  4356                           	callstack 0
  4357                           
  4358 ;; *************** function _XF_pushEvent *****************
  4359 ;; Defined at:
  4360 ;;		line 106 in file "xf/xf.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;  ev              6  [STACK] struct Event_
  4363 ;;  inISR           1  [STACK] _Bool 
  4364 ;;  tmid            2  [STACK] PTR unsigned char 
  4365 ;;		 -> tmid(1), dummy(1), 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  tm              2  [STACK] unsigned short 
  4368 ;;  temp            1  [STACK] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1  [STACK] _Bool 
  4371 ;; Registers used:
  4372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4382 ;;Total ram usage:        0 bytes
  4383 ;; Hardware stack levels used: 1
  4384 ;; Hardware stack levels required when called: 9
  4385 ;; This function calls:
  4386 ;;		_ENTERCRITICAL
  4387 ;;		_Event_getDelay
  4388 ;;		_Event_setDelay
  4389 ;;		_LEAVECRITICAL
  4390 ;;		_XF_noMoreEvent
  4391 ;;		_XF_scheduleTimer
  4392 ;;		___awmod
  4393 ;; This function is called by:
  4394 ;;		_XF_decrementAndQueueTimers
  4395 ;;		_XF_post
  4396 ;; This function uses a reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text3
  4400   012B88                     __ptext3:
  4401                           	callstack 0
  4402   012B88                     _XF_pushEvent:
  4403                           	callstack 0
  4404                           
  4405                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4406   012B88  52E6               	movf	postinc1,f,c
  4407   012B8A  52E6               	movf	postinc1,f,c
  4408   012B8C  52E6               	movf	postinc1,f,c
  4409   012B8E                     
  4410                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4411                           ;stkvar	_ev @ sp[(-3)+-6]
  4412   012B8E  0EF7               	movlw	247
  4413   012B90  24E1               	addwf	fsr1l,w,c
  4414   012B92  6E2A               	movwf	btemp^0,c
  4415   012B94  0EFF               	movlw	255
  4416   012B96  20E2               	addwfc	fsr1h,w,c
  4417   012B98  6E2B               	movwf	(btemp+1)^0,c
  4418   012B9A  C02A  FFE6         	movff	btemp,postinc1
  4419   012B9E  C02B  FFE6         	movff	btemp+1,postinc1
  4420   012BA2  EC1A  F0A5         	call	_Event_getDelay	;wreg free
  4421                           
  4422                           ;stkvar	_tm @ sp[(-3)+0]
  4423   012BA6  0EFD               	movlw	-3
  4424   012BA8  C02A  FFE3         	movff	btemp,plusw1
  4425   012BAC  0EFE               	movlw	-2
  4426   012BAE  C02B  FFE3         	movff	btemp+1,plusw1
  4427   012BB2                     
  4428                           ;xf/xf.c: 111:     if ( tm > 0)
  4429                           ;stkvar	_tm @ sp[(-3)+0]
  4430   012BB2  0EFD               	movlw	-3
  4431   012BB4  CFE3 F02A          	movff	plusw1,btemp
  4432   012BB8  0EFE               	movlw	-2
  4433   012BBA  50E3               	movf	plusw1,w,c
  4434   012BBC  102A               	iorwf	btemp^0,w,c
  4435   012BBE  B4D8               	btfsc	status,2,c
  4436   012BC0  EFE4  F095         	goto	u2101
  4437   012BC4  EFE6  F095         	goto	u2100
  4438   012BC8                     u2101:
  4439   012BC8  EF16  F096         	goto	l4456
  4440   012BCC                     u2100:
  4441   012BCC                     
  4442                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4443   012BCC  0E00               	movlw	0
  4444   012BCE  6EE6               	movwf	postinc1,c
  4445   012BD0  0E00               	movlw	0
  4446   012BD2  6EE6               	movwf	postinc1,c
  4447                           
  4448                           ;stkvar	_ev @ sp[(-5)+-6]
  4449   012BD4  0EF5               	movlw	245
  4450   012BD6  24E1               	addwf	fsr1l,w,c
  4451   012BD8  6E2A               	movwf	btemp^0,c
  4452   012BDA  0EFF               	movlw	255
  4453   012BDC  20E2               	addwfc	fsr1h,w,c
  4454   012BDE  6E2B               	movwf	(btemp+1)^0,c
  4455   012BE0  C02A  FFE6         	movff	btemp,postinc1
  4456   012BE4  C02B  FFE6         	movff	btemp+1,postinc1
  4457   012BE8  EC8C  F0A4         	call	_Event_setDelay	;wreg free
  4458   012BEC                     
  4459                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4460                           ;stkvar	_inISR @ sp[(-3)+-7]
  4461   012BEC  0EF6               	movlw	-10
  4462   012BEE  50E3               	movf	plusw1,w,c
  4463   012BF0  6EE6               	movwf	postinc1,c
  4464                           
  4465                           ;stkvar	_ev @ sp[(-4)+-6]
  4466   012BF2  0EF6               	movlw	246
  4467   012BF4  24E1               	addwf	fsr1l,w,c
  4468   012BF6  6ED9               	movwf	fsr2l,c
  4469   012BF8  0EFF               	movlw	255
  4470   012BFA  20E2               	addwfc	fsr1h,w,c
  4471   012BFC  6EDA               	movwf	fsr2h,c
  4472   012BFE  0E06               	movlw	6
  4473   012C00                     u2111:
  4474   012C00  CFDE FFE6          	movff	postinc2,postinc1
  4475   012C04  2CE8               	decfsz	wreg,w,c
  4476   012C06  EF00  F096         	goto	u2111
  4477                           
  4478                           ;stkvar	_tm @ sp[(-10)+0]
  4479   012C0A  0EF6               	movlw	-10
  4480   012C0C  CFE3 FFE6          	movff	plusw1,postinc1
  4481   012C10  CFE3 FFE6          	movff	plusw1,postinc1
  4482   012C14  ECB9  F09B         	call	_XF_scheduleTimer	;wreg free
  4483                           
  4484                           ;stkvar	_tmid @ sp[(-3)+-9]
  4485   012C18  0EF4               	movlw	-12
  4486   012C1A  CFE3 FFD9          	movff	plusw1,fsr2l
  4487   012C1E  0EF5               	movlw	-11
  4488   012C20  CFE3 FFDA          	movff	plusw1,fsr2h
  4489   012C24  C02A  FFDF         	movff	btemp,indf2
  4490                           
  4491                           ;xf/xf.c: 115:     }
  4492   012C28  EF7D  F096         	goto	l4476
  4493   012C2C                     l4456:
  4494                           
  4495                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4496                           ;stkvar	_inISR @ sp[(-3)+-7]
  4497   012C2C  0EF6               	movlw	-10
  4498   012C2E  50E3               	movf	plusw1,w,c
  4499   012C30  6EE6               	movwf	postinc1,c
  4500   012C32  EC65  F0A5         	call	_ENTERCRITICAL	;wreg free
  4501   012C36                     
  4502                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4503   012C36  EE23  F0DF         	lfsr	2,_theXF+279
  4504   012C3A  50DF               	movf	indf2,w,c
  4505   012C3C  6E34               	movwf	(btemp+10)^0,c
  4506   012C3E  6A35               	clrf	(btemp+11)^0,c
  4507   012C40  0E01               	movlw	1
  4508   012C42  2634               	addwf	(btemp+10)^0,f,c
  4509   012C44  0E00               	movlw	0
  4510   012C46  2235               	addwfc	(btemp+11)^0,f,c
  4511   012C48  BE35               	btfsc	(btemp+11)^0,7,c
  4512   012C4A  EF30  F096         	goto	u2121
  4513   012C4E  5035               	movf	(btemp+11)^0,w,c
  4514   012C50  E109               	bnz	u2120
  4515   012C52  0E1E               	movlw	30
  4516   012C54  5C34               	subwf	(btemp+10)^0,w,c
  4517   012C56  A0D8               	btfss	status,0,c
  4518   012C58  EF30  F096         	goto	u2121
  4519   012C5C  EF32  F096         	goto	u2120
  4520   012C60                     u2121:
  4521   012C60  EF34  F096         	goto	l4462
  4522   012C64                     u2120:
  4523   012C64                     
  4524                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4525   012C64  EC8B  F0A5         	call	_XF_noMoreEvent	;wreg free
  4526   012C68                     l4462:
  4527                           
  4528                           ;xf/xf.c: 123:         theXF.countEvt++;
  4529   012C68  C3DF  FFE8         	movff	_theXF+279,wreg
  4530   012C6C  0F01               	addlw	1
  4531   012C6E  CFE8 F3DF          	movff	wreg,_theXF+279
  4532   012C72                     
  4533                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4534   012C72  EE23  F0DF         	lfsr	2,_theXF+279
  4535   012C76  EE03  F0DE         	lfsr	0,_theXF+278
  4536   012C7A  50DE               	movf	postinc2,w,c
  4537   012C7C  5CEE               	subwf	postinc0,w,c
  4538   012C7E  B0D8               	btfsc	status,0,c
  4539   012C80  EF44  F096         	goto	u2131
  4540   012C84  EF46  F096         	goto	u2130
  4541   012C88                     u2131:
  4542   012C88  EF48  F096         	goto	l4468
  4543   012C8C                     u2130:
  4544   012C8C                     
  4545                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4546   012C8C  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4547   012C90                     l4468:
  4548                           
  4549                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4550   012C90  0E1E               	movlw	30
  4551   012C92  6EE6               	movwf	postinc1,c
  4552   012C94  0E00               	movlw	0
  4553   012C96  6EE6               	movwf	postinc1,c
  4554   012C98  EE23  F0DC         	lfsr	2,_theXF+276
  4555   012C9C  50DF               	movf	indf2,w,c
  4556   012C9E  6E34               	movwf	(btemp+10)^0,c
  4557   012CA0  6A35               	clrf	(btemp+11)^0,c
  4558   012CA2  0E01               	movlw	1
  4559   012CA4  2634               	addwf	(btemp+10)^0,f,c
  4560   012CA6  0E00               	movlw	0
  4561   012CA8  2235               	addwfc	(btemp+11)^0,f,c
  4562   012CAA  C034  FFE6         	movff	btemp+10,postinc1
  4563   012CAE  C035  FFE6         	movff	btemp+11,postinc1
  4564   012CB2  EC2E  F097         	call	___awmod	;wreg free
  4565                           
  4566                           ;stkvar	_temp @ sp[(-3)+2]
  4567   012CB6  0EFF               	movlw	-1
  4568   012CB8  C02A  FFE3         	movff	btemp,plusw1
  4569   012CBC                     
  4570                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4571                           ;stkvar	_ev @ sp[(-3)+-6]
  4572   012CBC  0EF7               	movlw	247
  4573   012CBE  24E1               	addwf	fsr1l,w,c
  4574   012CC0  6ED9               	movwf	fsr2l,c
  4575   012CC2  0EFF               	movlw	255
  4576   012CC4  20E2               	addwfc	fsr1h,w,c
  4577   012CC6  6EDA               	movwf	fsr2h,c
  4578   012CC8  EE03  F0DC         	lfsr	0,_theXF+276
  4579   012CCC  50EF               	movf	indf0,w,c
  4580   012CCE  0D06               	mullw	6
  4581   012CD0  0E28               	movlw	low (_theXF+96)
  4582   012CD2  24F3               	addwf	243,w,c
  4583   012CD4  6EE9               	movwf	fsr0l,c
  4584   012CD6  0E03               	movlw	high (_theXF+96)
  4585   012CD8  20F4               	addwfc	prodh,w,c
  4586   012CDA  6EEA               	movwf	fsr0h,c
  4587   012CDC  0E05               	movlw	5
  4588   012CDE                     u2141:
  4589   012CDE  CFDB FFEB          	movff	plusw2,plusw0
  4590   012CE2  06E8               	decf	wreg,f,c
  4591   012CE4  E2FC               	bc	u2141
  4592   012CE6                     
  4593                           ;xf/xf.c: 130:         theXF.in = temp;
  4594                           ;stkvar	_temp @ sp[(-3)+2]
  4595   012CE6  0EFF               	movlw	-1
  4596   012CE8  CFE3 F035          	movff	plusw1,btemp+11
  4597   012CEC  C035  F3DC         	movff	btemp+11,_theXF+276
  4598   012CF0                     
  4599                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4600                           ;stkvar	_inISR @ sp[(-3)+-7]
  4601   012CF0  0EF6               	movlw	-10
  4602   012CF2  50E3               	movf	plusw1,w,c
  4603   012CF4  6EE6               	movwf	postinc1,c
  4604   012CF6  EC59  F0A5         	call	_LEAVECRITICAL	;wreg free
  4605   012CFA                     l4476:
  4606                           
  4607                           ;xf/xf.c: 133:     return 1;
  4608   012CFA  0E01               	movlw	1
  4609   012CFC  6E2A               	movwf	btemp^0,c
  4610   012CFE                     
  4611                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4612   012CFE  0EF4               	movlw	244
  4613   012D00  26E1               	addwf	fsr1l,f,c
  4614   012D02  0EFF               	movlw	255
  4615   012D04  22E2               	addwfc	fsr1h,f,c
  4616   012D06  0012               	return		;funcret
  4617   012D08                     __end_of_XF_pushEvent:
  4618                           	callstack 0
  4619                           
  4620 ;; *************** function _XF_scheduleTimer *****************
  4621 ;; Defined at:
  4622 ;;		line 169 in file "xf/xf.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;  tm              2  [STACK] unsigned short 
  4625 ;;  ev              6  [STACK] struct Event_
  4626 ;;  inISR           1  [STACK] _Bool 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  i               1  [STACK] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1  [STACK] unsigned char 
  4631 ;; Registers used:
  4632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;Total ram usage:        0 bytes
  4643 ;; Hardware stack levels used: 1
  4644 ;; Hardware stack levels required when called: 8
  4645 ;; This function calls:
  4646 ;;		_ENTERCRITICAL
  4647 ;;		_LEAVECRITICAL
  4648 ;;		_XF_noMoreTimer
  4649 ;; This function is called by:
  4650 ;;		_XF_pushEvent
  4651 ;; This function uses a reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text4
  4655   013772                     __ptext4:
  4656                           	callstack 0
  4657   013772                     _XF_scheduleTimer:
  4658                           	callstack 0
  4659                           
  4660                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4661   013772  52E6               	movf	postinc1,f,c
  4662   013774                     
  4663                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4664                           ;stkvar	_inISR @ sp[(-1)+-9]
  4665   013774  0EF6               	movlw	-10
  4666   013776  50E3               	movf	plusw1,w,c
  4667   013778  6EE6               	movwf	postinc1,c
  4668   01377A  EC65  F0A5         	call	_ENTERCRITICAL	;wreg free
  4669                           
  4670                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4671                           ;stkvar	_i @ sp[(-1)+0]
  4672   01377E  0EFF               	movlw	-1
  4673   013780  6AE3               	clrf	plusw1,c
  4674   013782                     l4326:
  4675                           
  4676                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4677                           ;stkvar	_i @ sp[(-1)+0]
  4678   013782  0EFF               	movlw	-1
  4679   013784  50E3               	movf	plusw1,w,c
  4680   013786  0D08               	mullw	8
  4681   013788  0ECA               	movlw	low (_theXF+2)
  4682   01378A  24F3               	addwf	243,w,c
  4683   01378C  6ED9               	movwf	fsr2l,c
  4684   01378E  0E02               	movlw	high (_theXF+2)
  4685   013790  20F4               	addwfc	prodh,w,c
  4686   013792  6EDA               	movwf	fsr2h,c
  4687   013794  50DF               	movf	indf2,w,c
  4688   013796  A4D8               	btfss	status,2,c
  4689   013798  EFD0  F09B         	goto	u1961
  4690   01379C  EFD2  F09B         	goto	u1960
  4691   0137A0                     u1961:
  4692   0137A0  EF18  F09C         	goto	l4344
  4693   0137A4                     u1960:
  4694   0137A4                     
  4695                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4696                           ;stkvar	_tm @ sp[(-1)+-2]
  4697   0137A4  50E1               	movf	fsr1l,w,c
  4698   0137A6  0FFD               	addlw	-3
  4699   0137A8  6ED9               	movwf	fsr2l,c
  4700   0137AA  50E2               	movf	fsr1h,w,c
  4701   0137AC  6EDA               	movwf	fsr2h,c
  4702   0137AE  0EFF               	movlw	255
  4703   0137B0  22DA               	addwfc	fsr2h,f,c
  4704                           
  4705                           ;stkvar	_i @ sp[(-1)+0]
  4706   0137B2  0EFF               	movlw	-1
  4707   0137B4  50E3               	movf	plusw1,w,c
  4708   0137B6  0D08               	mullw	8
  4709   0137B8  0EC8               	movlw	low _theXF
  4710   0137BA  24F3               	addwf	243,w,c
  4711   0137BC  6EE9               	movwf	fsr0l,c
  4712   0137BE  0E02               	movlw	high _theXF
  4713   0137C0  20F4               	addwfc	prodh,w,c
  4714   0137C2  6EEA               	movwf	fsr0h,c
  4715   0137C4  CFDE FFEE          	movff	postinc2,postinc0
  4716   0137C8  CFDD FFED          	movff	postdec2,postdec0
  4717                           
  4718                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4719                           ;stkvar	_ev @ sp[(-1)+-8]
  4720   0137CC  0EF7               	movlw	247
  4721   0137CE  24E1               	addwf	fsr1l,w,c
  4722   0137D0  6ED9               	movwf	fsr2l,c
  4723   0137D2  0EFF               	movlw	255
  4724   0137D4  20E2               	addwfc	fsr1h,w,c
  4725   0137D6  6EDA               	movwf	fsr2h,c
  4726                           
  4727                           ;stkvar	_i @ sp[(-1)+0]
  4728   0137D8  0EFF               	movlw	-1
  4729   0137DA  50E3               	movf	plusw1,w,c
  4730   0137DC  0D08               	mullw	8
  4731   0137DE  0ECA               	movlw	low (_theXF+2)
  4732   0137E0  24F3               	addwf	243,w,c
  4733   0137E2  6EE9               	movwf	fsr0l,c
  4734   0137E4  0E02               	movlw	high (_theXF+2)
  4735   0137E6  20F4               	addwfc	prodh,w,c
  4736   0137E8  6EEA               	movwf	fsr0h,c
  4737   0137EA  0E05               	movlw	5
  4738   0137EC                     u1971:
  4739   0137EC  CFDB FFEB          	movff	plusw2,plusw0
  4740   0137F0  06E8               	decf	wreg,f,c
  4741   0137F2  E2FC               	bc	u1971
  4742   0137F4                     
  4743                           ;xf/xf.c: 180:             theXF.countTmr++;
  4744   0137F4  C3E1  FFE8         	movff	_theXF+281,wreg
  4745   0137F8  0F01               	addlw	1
  4746   0137FA  CFE8 F3E1          	movff	wreg,_theXF+281
  4747   0137FE                     
  4748                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4749   0137FE  EE23  F0E1         	lfsr	2,_theXF+281
  4750   013802  EE03  F0E0         	lfsr	0,_theXF+280
  4751   013806  50DE               	movf	postinc2,w,c
  4752   013808  5CEE               	subwf	postinc0,w,c
  4753   01380A  B0D8               	btfsc	status,0,c
  4754   01380C  EF0A  F09C         	goto	u1981
  4755   013810  EF0C  F09C         	goto	u1980
  4756   013814                     u1981:
  4757   013814  EF0E  F09C         	goto	l4336
  4758   013818                     u1980:
  4759   013818                     
  4760                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4761   013818  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4762   01381C                     l4336:
  4763                           
  4764                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4765                           ;stkvar	_inISR @ sp[(-1)+-9]
  4766   01381C  0EF6               	movlw	-10
  4767   01381E  50E3               	movf	plusw1,w,c
  4768   013820  6EE6               	movwf	postinc1,c
  4769   013822  EC59  F0A5         	call	_LEAVECRITICAL	;wreg free
  4770   013826                     
  4771                           ;xf/xf.c: 186:             return i;
  4772                           ;stkvar	_i @ sp[(-1)+0]
  4773   013826  0EFF               	movlw	-1
  4774   013828  CFE3 F02A          	movff	plusw1,btemp
  4775   01382C  EF29  F09C         	goto	l1234
  4776   013830                     l4344:
  4777                           
  4778                           ;xf/xf.c: 189:     }
  4779                           ;stkvar	_i @ sp[(-1)+0]
  4780   013830  0EFF               	movlw	-1
  4781   013832  2AE3               	incf	plusw1,f,c
  4782   013834                     
  4783                           ;stkvar	_i @ sp[(-1)+0]
  4784   013834  0EFF               	movlw	-1
  4785   013836  CFE3 F02A          	movff	plusw1,btemp
  4786   01383A  0E0B               	movlw	11
  4787   01383C  642A               	cpfsgt	btemp^0,c
  4788   01383E  EF23  F09C         	goto	u1991
  4789   013842  EF25  F09C         	goto	u1990
  4790   013846                     u1991:
  4791   013846  EFC1  F09B         	goto	l4326
  4792   01384A                     u1990:
  4793   01384A                     
  4794                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4795   01384A  EC88  F0A5         	call	_XF_noMoreTimer	;wreg free
  4796   01384E  EF0E  F09C         	goto	l4336
  4797   013852                     l1234:
  4798                           
  4799                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4800   013852  0EF6               	movlw	246
  4801   013854  26E1               	addwf	fsr1l,f,c
  4802   013856  0EFF               	movlw	255
  4803   013858  22E2               	addwfc	fsr1h,f,c
  4804   01385A  0012               	return		;funcret
  4805   01385C                     __end_of_XF_scheduleTimer:
  4806                           	callstack 0
  4807                           
  4808 ;; *************** function _XF_noMoreTimer *****************
  4809 ;; Defined at:
  4810 ;;		line 69 in file "xf/xf.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1  [STACK] void 
  4817 ;; Registers used:
  4818 ;;		None
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;Total ram usage:        0 bytes
  4829 ;; Hardware stack levels used: 1
  4830 ;; Hardware stack levels required when called: 7
  4831 ;; This function calls:
  4832 ;;		Nothing
  4833 ;; This function is called by:
  4834 ;;		_XF_scheduleTimer
  4835 ;; This function uses a reentrant model
  4836 ;;
  4837                           
  4838                           	psect	text5
  4839   014B10                     __ptext5:
  4840                           	callstack 0
  4841   014B10                     _XF_noMoreTimer:
  4842                           	callstack 9
  4843   014B10                     l1206:
  4844   014B10  EF88  F0A5         	goto	l1206
  4845                           
  4846                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4847   014B14  0012               	return		;funcret
  4848   014B16                     __end_of_XF_noMoreTimer:
  4849                           	callstack 0
  4850                           
  4851 ;; *************** function _XF_noMoreEvent *****************
  4852 ;; Defined at:
  4853 ;;		line 65 in file "xf/xf.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;		None
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;		None
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  1  [STACK] void 
  4860 ;; Registers used:
  4861 ;;		None
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;Total ram usage:        0 bytes
  4872 ;; Hardware stack levels used: 1
  4873 ;; Hardware stack levels required when called: 7
  4874 ;; This function calls:
  4875 ;;		Nothing
  4876 ;; This function is called by:
  4877 ;;		_XF_pushEvent
  4878 ;; This function uses a reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text6
  4882   014B16                     __ptext6:
  4883                           	callstack 0
  4884   014B16                     _XF_noMoreEvent:
  4885                           	callstack 10
  4886   014B16                     l1200:
  4887   014B16  EF8B  F0A5         	goto	l1200
  4888                           
  4889                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4890   014B1A  0012               	return		;funcret
  4891   014B1C                     __end_of_XF_noMoreEvent:
  4892                           	callstack 0
  4893                           
  4894 ;; *************** function _Event_setDelay *****************
  4895 ;; Defined at:
  4896 ;;		line 32 in file "xf/event.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;  me              2  [STACK] PTR struct Event_
  4899 ;;		 -> ev(6), 
  4900 ;;  delay           2  [STACK] unsigned short 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1  [STACK] void 
  4905 ;; Registers used:
  4906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:        0 bytes
  4917 ;; Hardware stack levels used: 1
  4918 ;; Hardware stack levels required when called: 7
  4919 ;; This function calls:
  4920 ;;		Nothing
  4921 ;; This function is called by:
  4922 ;;		_XF_pushEvent
  4923 ;;		_XF_post
  4924 ;; This function uses a reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text7
  4928   014918                     __ptext7:
  4929                           	callstack 0
  4930   014918                     _Event_setDelay:
  4931                           	callstack 10
  4932   014918                     
  4933                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4934                           ;stkvar	_delay @ sp[(0)+-4]
  4935   014918  50E1               	movf	fsr1l,w,c
  4936   01491A  0FFC               	addlw	-4
  4937   01491C  6ED9               	movwf	fsr2l,c
  4938   01491E  50E2               	movf	fsr1h,w,c
  4939   014920  6EDA               	movwf	fsr2h,c
  4940   014922  0EFF               	movlw	255
  4941   014924  22DA               	addwfc	fsr2h,f,c
  4942                           
  4943                           ;stkvar	_me @ sp[(0)+-2]
  4944   014926  0EFE               	movlw	-2
  4945   014928  CFE3 F034          	movff	plusw1,btemp+10
  4946   01492C  0EFF               	movlw	-1
  4947   01492E  CFE3 F035          	movff	plusw1,btemp+11
  4948   014932  0E04               	movlw	4
  4949   014934  2434               	addwf	(btemp+10)^0,w,c
  4950   014936  6EE9               	movwf	fsr0l,c
  4951   014938  0E00               	movlw	0
  4952   01493A  2035               	addwfc	(btemp+11)^0,w,c
  4953   01493C  6EEA               	movwf	fsr0h,c
  4954   01493E  CFDE FFEE          	movff	postinc2,postinc0
  4955   014942  CFDD FFED          	movff	postdec2,postdec0
  4956   014946                     
  4957                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4958   014946  52E5               	movf	postdec1,f,c
  4959   014948  52E5               	movf	postdec1,f,c
  4960   01494A  52E5               	movf	postdec1,f,c
  4961   01494C  52E5               	movf	postdec1,f,c
  4962   01494E  0012               	return		;funcret
  4963   014950                     __end_of_Event_setDelay:
  4964                           	callstack 0
  4965                           
  4966 ;; *************** function _Event_getDelay *****************
  4967 ;; Defined at:
  4968 ;;		line 37 in file "xf/event.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  me              2  [STACK] PTR struct Event_
  4971 ;;		 -> ev(6), 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  2  [STACK] unsigned short 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 7
  4990 ;; This function calls:
  4991 ;;		Nothing
  4992 ;; This function is called by:
  4993 ;;		_XF_pushEvent
  4994 ;; This function uses a reentrant model
  4995 ;;
  4996                           
  4997                           	psect	text8
  4998   014A34                     __ptext8:
  4999                           	callstack 0
  5000   014A34                     _Event_getDelay:
  5001                           	callstack 10
  5002   014A34                     
  5003                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  5004                           ;stkvar	_me @ sp[(0)+-2]
  5005   014A34  0EFE               	movlw	-2
  5006   014A36  CFE3 F034          	movff	plusw1,btemp+10
  5007   014A3A  0EFF               	movlw	-1
  5008   014A3C  CFE3 F035          	movff	plusw1,btemp+11
  5009   014A40  0E04               	movlw	4
  5010   014A42  2434               	addwf	(btemp+10)^0,w,c
  5011   014A44  6ED9               	movwf	fsr2l,c
  5012   014A46  0E00               	movlw	0
  5013   014A48  2035               	addwfc	(btemp+11)^0,w,c
  5014   014A4A  6EDA               	movwf	fsr2h,c
  5015   014A4C  CFDE F02A          	movff	postinc2,btemp
  5016   014A50  CFDD F02B          	movff	postdec2,btemp+1
  5017   014A54                     
  5018                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  5019   014A54  52E5               	movf	postdec1,f,c
  5020   014A56  52E5               	movf	postdec1,f,c
  5021   014A58  0012               	return		;funcret
  5022   014A5A                     __end_of_Event_getDelay:
  5023                           	callstack 0
  5024                           
  5025 ;; *************** function _Event_setPE *****************
  5026 ;; Defined at:
  5027 ;;		line 12 in file "xf/event.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  me              2  [STACK] PTR struct Event_
  5030 ;;		 -> ev(6), 
  5031 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  5032 ;;		 -> motorControl_Process(1), lightControl_Process(1), 
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1  [STACK] void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels used: 1
  5050 ;; Hardware stack levels required when called: 7
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_XF_post
  5055 ;; This function uses a reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text9
  5059   0148A2                     __ptext9:
  5060                           	callstack 0
  5061   0148A2                     _Event_setPE:
  5062                           	callstack 21
  5063   0148A2                     
  5064                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  5065                           ;stkvar	_processEvent @ sp[(0)+-5]
  5066   0148A2  50E1               	movf	fsr1l,w,c
  5067   0148A4  0FFB               	addlw	-5
  5068   0148A6  6ED9               	movwf	fsr2l,c
  5069   0148A8  50E2               	movf	fsr1h,w,c
  5070   0148AA  6EDA               	movwf	fsr2h,c
  5071   0148AC  0EFF               	movlw	255
  5072   0148AE  22DA               	addwfc	fsr2h,f,c
  5073                           
  5074                           ;stkvar	_me @ sp[(0)+-2]
  5075   0148B0  0EFE               	movlw	-2
  5076   0148B2  CFE3 F034          	movff	plusw1,btemp+10
  5077   0148B6  0EFF               	movlw	-1
  5078   0148B8  CFE3 F035          	movff	plusw1,btemp+11
  5079   0148BC  0E01               	movlw	1
  5080   0148BE  2434               	addwf	(btemp+10)^0,w,c
  5081   0148C0  6EE9               	movwf	fsr0l,c
  5082   0148C2  0E00               	movlw	0
  5083   0148C4  2035               	addwfc	(btemp+11)^0,w,c
  5084   0148C6  6EEA               	movwf	fsr0h,c
  5085   0148C8  CFDE FFEE          	movff	postinc2,postinc0
  5086   0148CC  CFDE FFEE          	movff	postinc2,postinc0
  5087   0148D0  CFDE FFEE          	movff	postinc2,postinc0
  5088   0148D4                     
  5089                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  5090   0148D4  0EFB               	movlw	251
  5091   0148D6  26E1               	addwf	fsr1l,f,c
  5092   0148D8  0EFF               	movlw	255
  5093   0148DA  22E2               	addwfc	fsr1h,f,c
  5094   0148DC  0012               	return		;funcret
  5095   0148DE                     __end_of_Event_setPE:
  5096                           	callstack 0
  5097                           
  5098 ;; *************** function _Event_setId *****************
  5099 ;; Defined at:
  5100 ;;		line 22 in file "xf/event.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  me              2  [STACK] PTR struct Event_
  5103 ;;		 -> ev(6), 
  5104 ;;  eventID         1  [STACK] unsigned char 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1  [STACK] void 
  5109 ;; Registers used:
  5110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used: 1
  5122 ;; Hardware stack levels required when called: 7
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_XF_post
  5127 ;; This function uses a reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text10
  5131   014A98                     __ptext10:
  5132                           	callstack 0
  5133   014A98                     _Event_setId:
  5134                           	callstack 21
  5135   014A98                     
  5136                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  5137                           ;stkvar	_eventID @ sp[(0)+-3]
  5138                           ;stkvar	_me @ sp[(0)+-2]
  5139   014A98  0EFE               	movlw	-2
  5140   014A9A  CFE3 FFD9          	movff	plusw1,fsr2l
  5141   014A9E  0EFF               	movlw	-1
  5142   014AA0  CFE3 FFDA          	movff	plusw1,fsr2h
  5143   014AA4  0EFD               	movlw	-3
  5144   014AA6  CFE3 FFDF          	movff	plusw1,indf2
  5145   014AAA                     
  5146                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  5147   014AAA  52E5               	movf	postdec1,f,c
  5148   014AAC  52E5               	movf	postdec1,f,c
  5149   014AAE  52E5               	movf	postdec1,f,c
  5150   014AB0  0012               	return		;funcret
  5151   014AB2                     __end_of_Event_setId:
  5152                           	callstack 0
  5153                           
  5154 ;; *************** function _CanReceive *****************
  5155 ;; Defined at:
  5156 ;;		line 242 in file "can/can.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5159 ;;		 -> rxObj(16), 
  5160 ;;  rxd             2  [STACK] PTR unsigned char 
  5161 ;;		 -> rxdata(8), 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  rxFlags         1  [STACK] enum E5588
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1  [STACK] char 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;Total ram usage:        0 bytes
  5178 ;; Hardware stack levels used: 1
  5179 ;; Hardware stack levels required when called: 11
  5180 ;; This function calls:
  5181 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  5182 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  5183 ;; This function is called by:
  5184 ;;		_updateCarState
  5185 ;; This function uses a reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text11
  5189   0145BA                     __ptext11:
  5190                           	callstack 0
  5191   0145BA                     _CanReceive:
  5192                           	callstack 0
  5193                           
  5194                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  5195   0145BA  52E6               	movf	postinc1,f,c
  5196   0145BC                     
  5197                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  5198                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5199   0145BC  0EFF               	movlw	255
  5200   0145BE  24E1               	addwf	fsr1l,w,c
  5201   0145C0  6E2A               	movwf	btemp^0,c
  5202   0145C2  0EFF               	movlw	255
  5203   0145C4  20E2               	addwfc	fsr1h,w,c
  5204   0145C6  6E2B               	movwf	(btemp+1)^0,c
  5205   0145C8  C02A  FFE6         	movff	btemp,postinc1
  5206   0145CC  C02B  FFE6         	movff	btemp+1,postinc1
  5207   0145D0  0E02               	movlw	2
  5208   0145D2  6EE6               	movwf	postinc1,c
  5209   0145D4  ECB1  F0A0         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  5210   0145D8                     
  5211                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  5212                           ;stkvar	_rxFlags @ sp[(-1)+0]
  5213   0145D8  0EFF               	movlw	-1
  5214   0145DA  A0E3               	btfss	plusw1,0,c
  5215   0145DC  EFF2  F0A2         	goto	u2811
  5216   0145E0  EFF4  F0A2         	goto	u2810
  5217   0145E4                     u2811:
  5218   0145E4  EF08  F0A3         	goto	l5070
  5219   0145E8                     u2810:
  5220   0145E8                     
  5221                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  5222   0145E8  0E08               	movlw	8
  5223   0145EA  6EE6               	movwf	postinc1,c
  5224                           
  5225                           ;stkvar	_rxd @ sp[(-2)+-4]
  5226   0145EC  0EFA               	movlw	-6
  5227   0145EE  CFE3 FFE6          	movff	plusw1,postinc1
  5228   0145F2  CFE3 FFE6          	movff	plusw1,postinc1
  5229                           
  5230                           ;stkvar	_rxObj @ sp[(-4)+-2]
  5231   0145F6  0EFA               	movlw	-6
  5232   0145F8  CFE3 FFE6          	movff	plusw1,postinc1
  5233   0145FC  CFE3 FFE6          	movff	plusw1,postinc1
  5234   014600  0E02               	movlw	2
  5235   014602  6EE6               	movwf	postinc1,c
  5236   014604  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  5237   014608                     
  5238                           ;can/can.c: 249:     return 0;
  5239   014608  0E00               	movlw	0
  5240   01460A  6E2A               	movwf	btemp^0,c
  5241   01460C  EF0A  F0A3         	goto	l165
  5242   014610                     l5070:
  5243                           
  5244                           ;can/can.c: 251:   return -1;
  5245   014610  0EFF               	movlw	255
  5246   014612  6E2A               	movwf	btemp^0,c
  5247   014614                     l165:
  5248                           
  5249                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  5250   014614  0EFB               	movlw	251
  5251   014616  26E1               	addwf	fsr1l,f,c
  5252   014618  0EFF               	movlw	255
  5253   01461A  22E2               	addwfc	fsr1h,f,c
  5254   01461C  0012               	return		;funcret
  5255   01461E                     __end_of_CanReceive:
  5256                           	callstack 0
  5257                           
  5258 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  5259 ;; Defined at:
  5260 ;;		line 1236 in file "can/can.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  channel         1  [STACK] enum E5287
  5263 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  5264 ;;		 -> rxObj(16), txMsg(16), 
  5265 ;;  rxd             2  [STACK] PTR unsigned char 
  5266 ;;		 -> rxdata(8), 
  5267 ;;  nBytes          1  [STACK] unsigned char 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  temp32          4  [STACK] unsigned long 
  5270 ;;  ba             76  [STACK] unsigned char [76]
  5271 ;;  fifoReg        12  [STACK] unsigned long [3]
  5272 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5273 ;;  myReg           4  [STACK] struct _REG_t
  5274 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  5275 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  5276 ;;  a               2  [STACK] unsigned short 
  5277 ;;  i               1  [STACK] unsigned char 
  5278 ;;  n               1  [STACK] unsigned char 
  5279 ;;  spiTransferE    1  [STACK] char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1  [STACK] char 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:        0 bytes
  5294 ;; Hardware stack levels used: 1
  5295 ;; Hardware stack levels required when called: 10
  5296 ;; This function calls:
  5297 ;;		_DRV_CANFDSPI_ReadByteArray
  5298 ;;		_DRV_CANFDSPI_ReadWordArray
  5299 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  5300 ;; This function is called by:
  5301 ;;		_CanReceive
  5302 ;; This function uses a reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text12
  5306   01074C                     __ptext12:
  5307                           	callstack 0
  5308   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  5309                           	callstack 0
  5310                           
  5311                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  5312   01074C  0E6E               	movlw	110
  5313   01074E  26E1               	addwf	fsr1l,f,c
  5314   010750  0E00               	movlw	0
  5315   010752  22E2               	addwfc	fsr1h,f,c
  5316   010754                     
  5317                           ;can/can.c: 1241:     uint8_t i = 0;
  5318                           ;stkvar	_i @ sp[(-110)+107]
  5319   010754  0EFD               	movlw	-3
  5320   010756  6AE3               	clrf	plusw1,c
  5321                           
  5322                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5323                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5324   010758  0EFF               	movlw	-1
  5325   01075A  6AE3               	clrf	plusw1,c
  5326   01075C                     
  5327                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5328                           ;stkvar	_channel @ sp[(-110)+-1]
  5329   01075C  0E91               	movlw	-111
  5330   01075E  50E3               	movf	plusw1,w,c
  5331   010760  0D0C               	mullw	12
  5332   010762  0E50               	movlw	80
  5333   010764  26F3               	addwf	243,f,c
  5334   010766  0E00               	movlw	0
  5335   010768  22F4               	addwfc	244,f,c
  5336                           
  5337                           ;stkvar	_a @ sp[(-110)+105]
  5338   01076A  0EFB               	movlw	-5
  5339   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5340   010770  0EFC               	movlw	-4
  5341   010772  CFF4 FFE3          	movff	prodh,plusw1
  5342   010776                     
  5343                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5344   010776  0E03               	movlw	3
  5345   010778  6EE6               	movwf	postinc1,c
  5346   01077A  0E00               	movlw	0
  5347   01077C  6EE6               	movwf	postinc1,c
  5348                           
  5349                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5350   01077E  0EE0               	movlw	224
  5351   010780  24E1               	addwf	fsr1l,w,c
  5352   010782  6E2A               	movwf	btemp^0,c
  5353   010784  0EFF               	movlw	255
  5354   010786  20E2               	addwfc	fsr1h,w,c
  5355   010788  6E2B               	movwf	(btemp+1)^0,c
  5356   01078A  C02A  FFE6         	movff	btemp,postinc1
  5357   01078E  C02B  FFE6         	movff	btemp+1,postinc1
  5358                           
  5359                           ;stkvar	_a @ sp[(-114)+105]
  5360   010792  0EF7               	movlw	-9
  5361   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5362   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5363   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5364                           
  5365                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5366   0107A0  0EFF               	movlw	-1
  5367   0107A2  C02A  FFE3         	movff	btemp,plusw1
  5368   0107A6                     
  5369                           ;can/can.c: 1253:     if (spiTransferError) {
  5370                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5371   0107A6  0EFF               	movlw	-1
  5372   0107A8  50E3               	movf	plusw1,w,c
  5373   0107AA  B4D8               	btfsc	status,2,c
  5374   0107AC  EFDA  F083         	goto	u2171
  5375   0107B0  EFDC  F083         	goto	u2170
  5376   0107B4                     u2171:
  5377   0107B4  EFDE  F083         	goto	l4522
  5378   0107B8                     u2170:
  5379   0107B8  EF15  F087         	goto	l357
  5380   0107BC                     l4522:
  5381                           
  5382                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5383                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5384   0107BC  0EE2               	movlw	-30
  5385   0107BE  CFE3 F032          	movff	plusw1,btemp+8
  5386   0107C2  0EE3               	movlw	-29
  5387   0107C4  CFE3 F033          	movff	plusw1,btemp+9
  5388   0107C8  0EE4               	movlw	-28
  5389   0107CA  CFE3 F034          	movff	plusw1,btemp+10
  5390   0107CE  0EE5               	movlw	-27
  5391   0107D0  CFE3 F035          	movff	plusw1,btemp+11
  5392                           
  5393                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5394   0107D4  0EEE               	movlw	-18
  5395   0107D6  C032  FFE3         	movff	btemp+8,plusw1
  5396   0107DA  0EEF               	movlw	-17
  5397   0107DC  C033  FFE3         	movff	btemp+9,plusw1
  5398   0107E0  0EF0               	movlw	-16
  5399   0107E2  C034  FFE3         	movff	btemp+10,plusw1
  5400   0107E6  0EF1               	movlw	-15
  5401   0107E8  C035  FFE3         	movff	btemp+11,plusw1
  5402   0107EC                     
  5403                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5404                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5405   0107EC  50E1               	movf	fsr1l,w,c
  5406   0107EE  0FEE               	addlw	-18
  5407   0107F0  6ED9               	movwf	fsr2l,c
  5408   0107F2  50E2               	movf	fsr1h,w,c
  5409   0107F4  6EDA               	movwf	fsr2h,c
  5410   0107F6  0EFF               	movlw	255
  5411   0107F8  22DA               	addwfc	fsr2h,f,c
  5412   0107FA  AEDF               	btfss	indf2,7,c
  5413   0107FC  EF02  F084         	goto	u2181
  5414   010800  EF04  F084         	goto	u2180
  5415   010804                     u2181:
  5416   010804  EF06  F084         	goto	l4528
  5417   010808                     u2180:
  5418   010808  EF15  F087         	goto	l357
  5419   01080C                     l4528:
  5420                           
  5421                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5422                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5423   01080C  0EEA               	movlw	234
  5424   01080E  24E1               	addwf	fsr1l,w,c
  5425   010810  6ED9               	movwf	fsr2l,c
  5426   010812  0EFF               	movlw	255
  5427   010814  20E2               	addwfc	fsr1h,w,c
  5428   010816  6EDA               	movwf	fsr2h,c
  5429   010818  CFDE F032          	movff	postinc2,btemp+8
  5430   01081C  CFDE F033          	movff	postinc2,btemp+9
  5431   010820  CFDE F034          	movff	postinc2,btemp+10
  5432   010824  CFDE F035          	movff	postinc2,btemp+11
  5433                           
  5434                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5435   010828  0EF7               	movlw	-9
  5436   01082A  C032  FFE3         	movff	btemp+8,plusw1
  5437   01082E  0EF8               	movlw	-8
  5438   010830  C033  FFE3         	movff	btemp+9,plusw1
  5439   010834  0EF9               	movlw	-7
  5440   010836  C034  FFE3         	movff	btemp+10,plusw1
  5441   01083A  0EFA               	movlw	-6
  5442   01083C  C035  FFE3         	movff	btemp+11,plusw1
  5443   010840                     
  5444                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5445                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5446                           ;stkvar	_a @ sp[(-110)+105]
  5447   010840  0EF7               	movlw	-9
  5448   010842  CFE3 F02A          	movff	plusw1,btemp
  5449   010846  0EFB               	movlw	-5
  5450   010848  C02A  FFE3         	movff	btemp,plusw1
  5451   01084C  0EF8               	movlw	-8
  5452   01084E  CFE3 F02A          	movff	plusw1,btemp
  5453   010852  0EFC               	movlw	-4
  5454   010854  C02A  FFE3         	movff	btemp,plusw1
  5455   010858                     
  5456                           ;can/can.c: 1273:     a += 0x400;
  5457                           ;stkvar	_a @ sp[(-110)+105]
  5458   010858  50E1               	movf	fsr1l,w,c
  5459   01085A  0FFB               	addlw	-5
  5460   01085C  6ED9               	movwf	fsr2l,c
  5461   01085E  50E2               	movf	fsr1h,w,c
  5462   010860  6EDA               	movwf	fsr2h,c
  5463   010862  0EFF               	movlw	255
  5464   010864  22DA               	addwfc	fsr2h,f,c
  5465   010866  0E00               	movlw	0
  5466   010868  26DE               	addwf	postinc2,f,c
  5467   01086A  0E04               	movlw	4
  5468   01086C  22DD               	addwfc	postdec2,f,c
  5469   01086E                     
  5470                           ;can/can.c: 1276:     n = nBytes + 8;
  5471   01086E  0E08               	movlw	8
  5472   010870  6E35               	movwf	(btemp+11)^0,c
  5473                           
  5474                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5475   010872  0E8C               	movlw	-116
  5476   010874  50E3               	movf	plusw1,w,c
  5477   010876  2435               	addwf	(btemp+11)^0,w,c
  5478   010878  6E34               	movwf	(btemp+10)^0,c
  5479                           
  5480                           ;stkvar	_n @ sp[(-110)+108]
  5481   01087A  0EFE               	movlw	-2
  5482   01087C  C034  FFE3         	movff	btemp+10,plusw1
  5483   010880                     
  5484                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5485                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5486   010880  50E1               	movf	fsr1l,w,c
  5487   010882  0FEE               	addlw	-18
  5488   010884  6ED9               	movwf	fsr2l,c
  5489   010886  50E2               	movf	fsr1h,w,c
  5490   010888  6EDA               	movwf	fsr2h,c
  5491   01088A  0EFF               	movlw	255
  5492   01088C  22DA               	addwfc	fsr2h,f,c
  5493   01088E  AADF               	btfss	indf2,5,c
  5494   010890  EF4C  F084         	goto	u2191
  5495   010894  EF4E  F084         	goto	u2190
  5496   010898                     u2191:
  5497   010898  EF56  F084         	goto	l4540
  5498   01089C                     u2190:
  5499   01089C                     
  5500                           ;can/can.c: 1279:         n += 4;
  5501                           ;stkvar	_n @ sp[(-110)+108]
  5502   01089C  0EFE               	movlw	-2
  5503   01089E  CFE3 F02A          	movff	plusw1,btemp
  5504   0108A2  0E04               	movlw	4
  5505   0108A4  262A               	addwf	btemp^0,f,c
  5506   0108A6  0EFE               	movlw	-2
  5507   0108A8  C02A  FFE3         	movff	btemp,plusw1
  5508   0108AC                     l4540:
  5509                           
  5510                           ;can/can.c: 1283:     if (n % 4) {
  5511                           ;stkvar	_n @ sp[(-110)+108]
  5512   0108AC  0EFE               	movlw	-2
  5513   0108AE  CFE3 F035          	movff	plusw1,btemp+11
  5514   0108B2  0E03               	movlw	3
  5515   0108B4  1635               	andwf	(btemp+11)^0,f,c
  5516   0108B6  B4D8               	btfsc	status,2,c
  5517   0108B8  EF60  F084         	goto	u2201
  5518   0108BC  EF62  F084         	goto	u2200
  5519   0108C0                     u2201:
  5520   0108C0  EF72  F084         	goto	l4544
  5521   0108C4                     u2200:
  5522   0108C4                     
  5523                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5524                           ;stkvar	_n @ sp[(-110)+108]
  5525   0108C4  0EFE               	movlw	-2
  5526   0108C6  CFE3 F035          	movff	plusw1,btemp+11
  5527   0108CA  0E03               	movlw	3
  5528   0108CC  1635               	andwf	(btemp+11)^0,f,c
  5529                           
  5530                           ;stkvar	_n @ sp[(-110)+108]
  5531   0108CE  0EFE               	movlw	-2
  5532   0108D0  CFE3 F034          	movff	plusw1,btemp+10
  5533   0108D4  5035               	movf	(btemp+11)^0,w,c
  5534   0108D6  5C34               	subwf	(btemp+10)^0,w,c
  5535   0108D8  6E35               	movwf	(btemp+11)^0,c
  5536   0108DA  0E04               	movlw	4
  5537   0108DC  2635               	addwf	(btemp+11)^0,f,c
  5538                           
  5539                           ;stkvar	_n @ sp[(-110)+108]
  5540   0108DE  0EFE               	movlw	-2
  5541   0108E0  C035  FFE3         	movff	btemp+11,plusw1
  5542   0108E4                     l4544:
  5543                           
  5544                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5545                           ;stkvar	_n @ sp[(-110)+108]
  5546   0108E4  0EFE               	movlw	-2
  5547   0108E6  CFE3 F02A          	movff	plusw1,btemp
  5548   0108EA  0E4C               	movlw	76
  5549   0108EC  642A               	cpfsgt	btemp^0,c
  5550   0108EE  EF7B  F084         	goto	u2211
  5551   0108F2  EF7D  F084         	goto	u2210
  5552   0108F6                     u2211:
  5553   0108F6  EF82  F084         	goto	l4548
  5554   0108FA                     u2210:
  5555   0108FA                     
  5556                           ;can/can.c: 1291:         n = 76;
  5557   0108FA  0E4C               	movlw	76
  5558   0108FC  6E35               	movwf	(btemp+11)^0,c
  5559                           
  5560                           ;stkvar	_n @ sp[(-110)+108]
  5561   0108FE  0EFE               	movlw	-2
  5562   010900  C035  FFE3         	movff	btemp+11,plusw1
  5563   010904                     l4548:
  5564                           
  5565                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5566                           ;stkvar	_n @ sp[(-110)+108]
  5567   010904  0EFE               	movlw	-2
  5568   010906  50E3               	movf	plusw1,w,c
  5569   010908  6EE6               	movwf	postinc1,c
  5570   01090A  0E00               	movlw	0
  5571   01090C  6EE6               	movwf	postinc1,c
  5572                           
  5573                           ;stkvar	_ba @ sp[(-112)+4]
  5574   01090E  0E94               	movlw	148
  5575   010910  24E1               	addwf	fsr1l,w,c
  5576   010912  6E2A               	movwf	btemp^0,c
  5577   010914  0EFF               	movlw	255
  5578   010916  20E2               	addwfc	fsr1h,w,c
  5579   010918  6E2B               	movwf	(btemp+1)^0,c
  5580   01091A  C02A  FFE6         	movff	btemp,postinc1
  5581   01091E  C02B  FFE6         	movff	btemp+1,postinc1
  5582                           
  5583                           ;stkvar	_a @ sp[(-114)+105]
  5584   010922  0EF7               	movlw	-9
  5585   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5586   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5587   01092C  EC3D  F094         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5588                           
  5589                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5590   010930  0EFF               	movlw	-1
  5591   010932  C02A  FFE3         	movff	btemp,plusw1
  5592   010936                     
  5593                           ;can/can.c: 1295:     if (spiTransferError) {
  5594                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5595   010936  0EFF               	movlw	-1
  5596   010938  50E3               	movf	plusw1,w,c
  5597   01093A  B4D8               	btfsc	status,2,c
  5598   01093C  EFA2  F084         	goto	u2221
  5599   010940  EFA4  F084         	goto	u2220
  5600   010944                     u2221:
  5601   010944  EFA6  F084         	goto	l4554
  5602   010948                     u2220:
  5603   010948  EF15  F087         	goto	l357
  5604   01094C                     l4554:
  5605                           
  5606                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5607                           ;stkvar	_ba @ sp[(-110)+4]
  5608   01094C  0E9A               	movlw	154
  5609   01094E  24E1               	addwf	fsr1l,w,c
  5610   010950  6ED9               	movwf	fsr2l,c
  5611   010952  0EFF               	movlw	255
  5612   010954  20E2               	addwfc	fsr1h,w,c
  5613   010956  6EDA               	movwf	fsr2h,c
  5614                           
  5615                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5616   010958  0E8F               	movlw	-113
  5617   01095A  CFE3 F034          	movff	plusw1,btemp+10
  5618   01095E  0E90               	movlw	-112
  5619   010960  CFE3 F035          	movff	plusw1,btemp+11
  5620   010964  0E06               	movlw	6
  5621   010966  2434               	addwf	(btemp+10)^0,w,c
  5622   010968  6EE9               	movwf	fsr0l,c
  5623   01096A  0E00               	movlw	0
  5624   01096C  2035               	addwfc	(btemp+11)^0,w,c
  5625   01096E  6EEA               	movwf	fsr0h,c
  5626   010970  CFDF FFEF          	movff	indf2,indf0
  5627   010974                     
  5628                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5629                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5630   010974  0E8F               	movlw	-113
  5631   010976  CFE3 F034          	movff	plusw1,btemp+10
  5632   01097A  0E90               	movlw	-112
  5633   01097C  CFE3 F035          	movff	plusw1,btemp+11
  5634   010980  0E06               	movlw	6
  5635   010982  2434               	addwf	(btemp+10)^0,w,c
  5636   010984  6ED9               	movwf	fsr2l,c
  5637   010986  0E00               	movlw	0
  5638   010988  2035               	addwfc	(btemp+11)^0,w,c
  5639   01098A  6EDA               	movwf	fsr2h,c
  5640   01098C  B8DF               	btfsc	indf2,4,c
  5641   01098E  EFCB  F084         	goto	u2231
  5642   010992  EFCD  F084         	goto	u2230
  5643   010996                     u2231:
  5644   010996  EF38  F085         	goto	l4560
  5645   01099A                     u2230:
  5646   01099A                     
  5647                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5648                           ;stkvar	_ba @ sp[(-110)+4]
  5649   01099A  0E99               	movlw	153
  5650   01099C  24E1               	addwf	fsr1l,w,c
  5651   01099E  6ED9               	movwf	fsr2l,c
  5652   0109A0  0EFF               	movlw	255
  5653   0109A2  20E2               	addwfc	fsr1h,w,c
  5654   0109A4  6EDA               	movwf	fsr2h,c
  5655   0109A6  50DF               	movf	indf2,w,c
  5656   0109A8  6E35               	movwf	(btemp+11)^0,c
  5657   0109AA  0E1F               	movlw	31
  5658   0109AC  1635               	andwf	(btemp+11)^0,f,c
  5659   0109AE  C035  F02E         	movff	btemp+11,btemp+4
  5660   0109B2  6A2F               	clrf	(btemp+5)^0,c
  5661   0109B4  6A30               	clrf	(btemp+6)^0,c
  5662   0109B6  6A31               	clrf	(btemp+7)^0,c
  5663   0109B8  C02E  F031         	movff	btemp+4,btemp+7
  5664   0109BC  6A30               	clrf	(btemp+6)^0,c
  5665   0109BE  6A2F               	clrf	(btemp+5)^0,c
  5666   0109C0  6A2E               	clrf	(btemp+4)^0,c
  5667                           
  5668                           ;stkvar	_ba @ sp[(-110)+4]
  5669   0109C2  0E97               	movlw	151
  5670   0109C4  24E1               	addwf	fsr1l,w,c
  5671   0109C6  6ED9               	movwf	fsr2l,c
  5672   0109C8  0EFF               	movlw	255
  5673   0109CA  20E2               	addwfc	fsr1h,w,c
  5674   0109CC  6EDA               	movwf	fsr2h,c
  5675   0109CE  50DF               	movf	indf2,w,c
  5676   0109D0  6E35               	movwf	(btemp+11)^0,c
  5677   0109D2  C035  F02A         	movff	btemp+11,btemp
  5678   0109D6  6A2B               	clrf	(btemp+1)^0,c
  5679   0109D8  6A2C               	clrf	(btemp+2)^0,c
  5680   0109DA  6A2D               	clrf	(btemp+3)^0,c
  5681   0109DC  C02C  F02D         	movff	btemp+2,btemp+3
  5682   0109E0  C02B  F02C         	movff	btemp+1,btemp+2
  5683   0109E4  C02A  F02B         	movff	btemp,btemp+1
  5684   0109E8  6A2A               	clrf	btemp^0,c
  5685                           
  5686                           ;stkvar	_ba @ sp[(-110)+4]
  5687   0109EA  0E96               	movlw	-106
  5688   0109EC  50E3               	movf	plusw1,w,c
  5689   0109EE  6E32               	movwf	(btemp+8)^0,c
  5690   0109F0  6A33               	clrf	(btemp+9)^0,c
  5691   0109F2  6A34               	clrf	(btemp+10)^0,c
  5692   0109F4  6A35               	clrf	(btemp+11)^0,c
  5693   0109F6  502A               	movf	btemp^0,w,c
  5694   0109F8  1232               	iorwf	(btemp+8)^0,f,c
  5695   0109FA  502B               	movf	(btemp+1)^0,w,c
  5696   0109FC  1233               	iorwf	(btemp+9)^0,f,c
  5697   0109FE  502C               	movf	(btemp+2)^0,w,c
  5698   010A00  1234               	iorwf	(btemp+10)^0,f,c
  5699   010A02  502D               	movf	(btemp+3)^0,w,c
  5700   010A04  1235               	iorwf	(btemp+11)^0,f,c
  5701                           
  5702                           ;stkvar	_ba @ sp[(-110)+4]
  5703   010A06  0E98               	movlw	152
  5704   010A08  24E1               	addwf	fsr1l,w,c
  5705   010A0A  6ED9               	movwf	fsr2l,c
  5706   010A0C  0EFF               	movlw	255
  5707   010A0E  20E2               	addwfc	fsr1h,w,c
  5708   010A10  6EDA               	movwf	fsr2h,c
  5709   010A12  50DF               	movf	indf2,w,c
  5710   010A14  6E2A               	movwf	btemp^0,c
  5711   010A16  6A2B               	clrf	(btemp+1)^0,c
  5712   010A18  6A2C               	clrf	(btemp+2)^0,c
  5713   010A1A  6A2D               	clrf	(btemp+3)^0,c
  5714   010A1C  C02B  F02D         	movff	btemp+1,btemp+3
  5715   010A20  C02A  F02C         	movff	btemp,btemp+2
  5716   010A24  6A2B               	clrf	(btemp+1)^0,c
  5717   010A26  6A2A               	clrf	btemp^0,c
  5718   010A28  502A               	movf	btemp^0,w,c
  5719   010A2A  1232               	iorwf	(btemp+8)^0,f,c
  5720   010A2C  502B               	movf	(btemp+1)^0,w,c
  5721   010A2E  1233               	iorwf	(btemp+9)^0,f,c
  5722   010A30  502C               	movf	(btemp+2)^0,w,c
  5723   010A32  1234               	iorwf	(btemp+10)^0,f,c
  5724   010A34  502D               	movf	(btemp+3)^0,w,c
  5725   010A36  1235               	iorwf	(btemp+11)^0,f,c
  5726   010A38  502E               	movf	(btemp+4)^0,w,c
  5727   010A3A  1032               	iorwf	(btemp+8)^0,w,c
  5728   010A3C  6E2A               	movwf	btemp^0,c
  5729   010A3E  502F               	movf	(btemp+5)^0,w,c
  5730   010A40  1033               	iorwf	(btemp+9)^0,w,c
  5731   010A42  6E2B               	movwf	(btemp+1)^0,c
  5732   010A44  5030               	movf	(btemp+6)^0,w,c
  5733   010A46  1034               	iorwf	(btemp+10)^0,w,c
  5734   010A48  6E2C               	movwf	(btemp+2)^0,c
  5735   010A4A  5031               	movf	(btemp+7)^0,w,c
  5736   010A4C  1035               	iorwf	(btemp+11)^0,w,c
  5737   010A4E  6E2D               	movwf	(btemp+3)^0,c
  5738                           
  5739                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5740   010A50  0E8F               	movlw	-113
  5741   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5742   010A56  0E90               	movlw	-112
  5743   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5744   010A5C  C02A  FFDE         	movff	btemp,postinc2
  5745   010A60  C02B  FFDE         	movff	btemp+1,postinc2
  5746   010A64  C02C  FFDE         	movff	btemp+2,postinc2
  5747   010A68  C02D  FFDE         	movff	btemp+3,postinc2
  5748                           
  5749                           ;can/can.c: 1320:     }
  5750   010A6C  EFF8  F085         	goto	l4562
  5751   010A70                     l4560:
  5752                           
  5753                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5754                           ;stkvar	_ba @ sp[(-110)+4]
  5755   010A70  0E99               	movlw	153
  5756   010A72  24E1               	addwf	fsr1l,w,c
  5757   010A74  6ED9               	movwf	fsr2l,c
  5758   010A76  0EFF               	movlw	255
  5759   010A78  20E2               	addwfc	fsr1h,w,c
  5760   010A7A  6EDA               	movwf	fsr2h,c
  5761   010A7C  50DF               	movf	indf2,w,c
  5762   010A7E  6E35               	movwf	(btemp+11)^0,c
  5763   010A80  0E1F               	movlw	31
  5764   010A82  1635               	andwf	(btemp+11)^0,f,c
  5765   010A84  C035  F02E         	movff	btemp+11,btemp+4
  5766   010A88  6A2F               	clrf	(btemp+5)^0,c
  5767   010A8A  6A30               	clrf	(btemp+6)^0,c
  5768   010A8C  6A31               	clrf	(btemp+7)^0,c
  5769   010A8E  C02E  F031         	movff	btemp+4,btemp+7
  5770   010A92  6A30               	clrf	(btemp+6)^0,c
  5771   010A94  6A2F               	clrf	(btemp+5)^0,c
  5772   010A96  6A2E               	clrf	(btemp+4)^0,c
  5773                           
  5774                           ;stkvar	_ba @ sp[(-110)+4]
  5775   010A98  0E97               	movlw	151
  5776   010A9A  24E1               	addwf	fsr1l,w,c
  5777   010A9C  6ED9               	movwf	fsr2l,c
  5778   010A9E  0EFF               	movlw	255
  5779   010AA0  20E2               	addwfc	fsr1h,w,c
  5780   010AA2  6EDA               	movwf	fsr2h,c
  5781   010AA4  50DF               	movf	indf2,w,c
  5782   010AA6  6E35               	movwf	(btemp+11)^0,c
  5783   010AA8  C035  F02A         	movff	btemp+11,btemp
  5784   010AAC  6A2B               	clrf	(btemp+1)^0,c
  5785   010AAE  6A2C               	clrf	(btemp+2)^0,c
  5786   010AB0  6A2D               	clrf	(btemp+3)^0,c
  5787   010AB2  C02C  F02D         	movff	btemp+2,btemp+3
  5788   010AB6  C02B  F02C         	movff	btemp+1,btemp+2
  5789   010ABA  C02A  F02B         	movff	btemp,btemp+1
  5790   010ABE  6A2A               	clrf	btemp^0,c
  5791                           
  5792                           ;stkvar	_ba @ sp[(-110)+4]
  5793   010AC0  0E96               	movlw	-106
  5794   010AC2  50E3               	movf	plusw1,w,c
  5795   010AC4  6E32               	movwf	(btemp+8)^0,c
  5796   010AC6  6A33               	clrf	(btemp+9)^0,c
  5797   010AC8  6A34               	clrf	(btemp+10)^0,c
  5798   010ACA  6A35               	clrf	(btemp+11)^0,c
  5799   010ACC  502A               	movf	btemp^0,w,c
  5800   010ACE  1232               	iorwf	(btemp+8)^0,f,c
  5801   010AD0  502B               	movf	(btemp+1)^0,w,c
  5802   010AD2  1233               	iorwf	(btemp+9)^0,f,c
  5803   010AD4  502C               	movf	(btemp+2)^0,w,c
  5804   010AD6  1234               	iorwf	(btemp+10)^0,f,c
  5805   010AD8  502D               	movf	(btemp+3)^0,w,c
  5806   010ADA  1235               	iorwf	(btemp+11)^0,f,c
  5807                           
  5808                           ;stkvar	_ba @ sp[(-110)+4]
  5809   010ADC  0E98               	movlw	152
  5810   010ADE  24E1               	addwf	fsr1l,w,c
  5811   010AE0  6ED9               	movwf	fsr2l,c
  5812   010AE2  0EFF               	movlw	255
  5813   010AE4  20E2               	addwfc	fsr1h,w,c
  5814   010AE6  6EDA               	movwf	fsr2h,c
  5815   010AE8  50DF               	movf	indf2,w,c
  5816   010AEA  6E2A               	movwf	btemp^0,c
  5817   010AEC  6A2B               	clrf	(btemp+1)^0,c
  5818   010AEE  6A2C               	clrf	(btemp+2)^0,c
  5819   010AF0  6A2D               	clrf	(btemp+3)^0,c
  5820   010AF2  C02B  F02D         	movff	btemp+1,btemp+3
  5821   010AF6  C02A  F02C         	movff	btemp,btemp+2
  5822   010AFA  6A2B               	clrf	(btemp+1)^0,c
  5823   010AFC  6A2A               	clrf	btemp^0,c
  5824   010AFE  502A               	movf	btemp^0,w,c
  5825   010B00  1232               	iorwf	(btemp+8)^0,f,c
  5826   010B02  502B               	movf	(btemp+1)^0,w,c
  5827   010B04  1233               	iorwf	(btemp+9)^0,f,c
  5828   010B06  502C               	movf	(btemp+2)^0,w,c
  5829   010B08  1234               	iorwf	(btemp+10)^0,f,c
  5830   010B0A  502D               	movf	(btemp+3)^0,w,c
  5831   010B0C  1235               	iorwf	(btemp+11)^0,f,c
  5832   010B0E  502E               	movf	(btemp+4)^0,w,c
  5833   010B10  1032               	iorwf	(btemp+8)^0,w,c
  5834   010B12  6E2A               	movwf	btemp^0,c
  5835   010B14  502F               	movf	(btemp+5)^0,w,c
  5836   010B16  1033               	iorwf	(btemp+9)^0,w,c
  5837   010B18  6E2B               	movwf	(btemp+1)^0,c
  5838   010B1A  5030               	movf	(btemp+6)^0,w,c
  5839   010B1C  1034               	iorwf	(btemp+10)^0,w,c
  5840   010B1E  6E2C               	movwf	(btemp+2)^0,c
  5841   010B20  5031               	movf	(btemp+7)^0,w,c
  5842   010B22  1035               	iorwf	(btemp+11)^0,w,c
  5843   010B24  6E2D               	movwf	(btemp+3)^0,c
  5844                           
  5845                           ;stkvar	_temp32 @ sp[(-110)+0]
  5846   010B26  0E92               	movlw	-110
  5847   010B28  C02A  FFE3         	movff	btemp,plusw1
  5848   010B2C  0E93               	movlw	-109
  5849   010B2E  C02B  FFE3         	movff	btemp+1,plusw1
  5850   010B32  0E94               	movlw	-108
  5851   010B34  C02C  FFE3         	movff	btemp+2,plusw1
  5852   010B38  0E95               	movlw	-107
  5853   010B3A  C02D  FFE3         	movff	btemp+3,plusw1
  5854                           
  5855                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5856                           ;stkvar	_temp32 @ sp[(-110)+0]
  5857   010B3E  0E92               	movlw	-110
  5858   010B40  CFE3 F032          	movff	plusw1,btemp+8
  5859   010B44  0E93               	movlw	-109
  5860   010B46  CFE3 F033          	movff	plusw1,btemp+9
  5861   010B4A  0E94               	movlw	-108
  5862   010B4C  CFE3 F034          	movff	plusw1,btemp+10
  5863   010B50  0E95               	movlw	-107
  5864   010B52  CFE3 F035          	movff	plusw1,btemp+11
  5865   010B56  0E0C               	movlw	12
  5866   010B58  EFB3  F085         	goto	u2240
  5867   010B5C                     u2245:
  5868   010B5C  90D8               	bcf	status,0,c
  5869   010B5E  3235               	rrcf	(btemp+11)^0,f,c
  5870   010B60  3234               	rrcf	(btemp+10)^0,f,c
  5871   010B62  3233               	rrcf	(btemp+9)^0,f,c
  5872   010B64  3232               	rrcf	(btemp+8)^0,f,c
  5873   010B66                     u2240:
  5874   010B66  2EE8               	decfsz	wreg,f,c
  5875   010B68  EFAE  F085         	goto	u2245
  5876   010B6C  0EFF               	movlw	255
  5877   010B6E  1432               	andwf	(btemp+8)^0,w,c
  5878   010B70  6E2E               	movwf	(btemp+4)^0,c
  5879   010B72  0EFF               	movlw	255
  5880   010B74  1433               	andwf	(btemp+9)^0,w,c
  5881   010B76  6E2F               	movwf	(btemp+5)^0,c
  5882   010B78  0E03               	movlw	3
  5883   010B7A  1434               	andwf	(btemp+10)^0,w,c
  5884   010B7C  6E30               	movwf	(btemp+6)^0,c
  5885   010B7E  0E00               	movlw	0
  5886   010B80  1435               	andwf	(btemp+11)^0,w,c
  5887   010B82  6E31               	movwf	(btemp+7)^0,c
  5888                           
  5889                           ;stkvar	_temp32 @ sp[(-110)+0]
  5890   010B84  50E1               	movf	fsr1l,w,c
  5891   010B86  0F92               	addlw	-110
  5892   010B88  6ED9               	movwf	fsr2l,c
  5893   010B8A  50E2               	movf	fsr1h,w,c
  5894   010B8C  6EDA               	movwf	fsr2h,c
  5895   010B8E  0EFF               	movlw	255
  5896   010B90  22DA               	addwfc	fsr2h,f,c
  5897   010B92  0EFF               	movlw	255
  5898   010B94  14DE               	andwf	postinc2,w,c
  5899   010B96  6E32               	movwf	(btemp+8)^0,c
  5900   010B98  0E07               	movlw	7
  5901   010B9A  14DE               	andwf	postinc2,w,c
  5902   010B9C  6E33               	movwf	(btemp+9)^0,c
  5903   010B9E  0E00               	movlw	0
  5904   010BA0  14DE               	andwf	postinc2,w,c
  5905   010BA2  6E34               	movwf	(btemp+10)^0,c
  5906   010BA4  0E00               	movlw	0
  5907   010BA6  14DE               	andwf	postinc2,w,c
  5908   010BA8  6E35               	movwf	(btemp+11)^0,c
  5909   010BAA  0E12               	movlw	18
  5910   010BAC                     u2255:
  5911   010BAC  90D8               	bcf	status,0,c
  5912   010BAE  3632               	rlcf	(btemp+8)^0,f,c
  5913   010BB0  3633               	rlcf	(btemp+9)^0,f,c
  5914   010BB2  3634               	rlcf	(btemp+10)^0,f,c
  5915   010BB4  3635               	rlcf	(btemp+11)^0,f,c
  5916   010BB6  2EE8               	decfsz	wreg,f,c
  5917   010BB8  EFD6  F085         	goto	u2255
  5918   010BBC  502E               	movf	(btemp+4)^0,w,c
  5919   010BBE  1032               	iorwf	(btemp+8)^0,w,c
  5920   010BC0  6E2A               	movwf	btemp^0,c
  5921   010BC2  502F               	movf	(btemp+5)^0,w,c
  5922   010BC4  1033               	iorwf	(btemp+9)^0,w,c
  5923   010BC6  6E2B               	movwf	(btemp+1)^0,c
  5924   010BC8  5030               	movf	(btemp+6)^0,w,c
  5925   010BCA  1034               	iorwf	(btemp+10)^0,w,c
  5926   010BCC  6E2C               	movwf	(btemp+2)^0,c
  5927   010BCE  5031               	movf	(btemp+7)^0,w,c
  5928   010BD0  1035               	iorwf	(btemp+11)^0,w,c
  5929   010BD2  6E2D               	movwf	(btemp+3)^0,c
  5930                           
  5931                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5932   010BD4  0E8F               	movlw	-113
  5933   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5934   010BDA  0E90               	movlw	-112
  5935   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5936   010BE0  C02A  FFDE         	movff	btemp,postinc2
  5937   010BE4  C02B  FFDE         	movff	btemp+1,postinc2
  5938   010BE8  C02C  FFDE         	movff	btemp+2,postinc2
  5939   010BEC  C02D  FFDE         	movff	btemp+3,postinc2
  5940   010BF0                     l4562:
  5941                           
  5942                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5943                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5944   010BF0  0E8F               	movlw	-113
  5945   010BF2  CFE3 F034          	movff	plusw1,btemp+10
  5946   010BF6  0E90               	movlw	-112
  5947   010BF8  CFE3 F035          	movff	plusw1,btemp+11
  5948   010BFC  0E07               	movlw	7
  5949   010BFE  2434               	addwf	(btemp+10)^0,w,c
  5950   010C00  6ED9               	movwf	fsr2l,c
  5951   010C02  0E00               	movlw	0
  5952   010C04  2035               	addwfc	(btemp+11)^0,w,c
  5953   010C06  6EDA               	movwf	fsr2h,c
  5954                           
  5955                           ;stkvar	_ba @ sp[(-110)+4]
  5956   010C08  0E9B               	movlw	155
  5957   010C0A  24E1               	addwf	fsr1l,w,c
  5958   010C0C  6EE9               	movwf	fsr0l,c
  5959   010C0E  0EFF               	movlw	255
  5960   010C10  20E2               	addwfc	fsr1h,w,c
  5961   010C12  6EEA               	movwf	fsr0h,c
  5962   010C14  50EF               	movf	indf0,w,c
  5963   010C16  0B01               	andlw	1
  5964   010C18  6EDF               	movwf	indf2,c
  5965   010C1A                     
  5966                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5967                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5968   010C1A  0E8F               	movlw	-113
  5969   010C1C  CFE3 F034          	movff	plusw1,btemp+10
  5970   010C20  0E90               	movlw	-112
  5971   010C22  CFE3 F035          	movff	plusw1,btemp+11
  5972   010C26  0E08               	movlw	8
  5973   010C28  2434               	addwf	(btemp+10)^0,w,c
  5974   010C2A  6ED9               	movwf	fsr2l,c
  5975   010C2C  0E00               	movlw	0
  5976   010C2E  2035               	addwfc	(btemp+11)^0,w,c
  5977   010C30  6EDA               	movwf	fsr2h,c
  5978                           
  5979                           ;stkvar	_ba @ sp[(-110)+4]
  5980   010C32  0E9B               	movlw	155
  5981   010C34  24E1               	addwf	fsr1l,w,c
  5982   010C36  6EE9               	movwf	fsr0l,c
  5983   010C38  0EFF               	movlw	255
  5984   010C3A  20E2               	addwfc	fsr1h,w,c
  5985   010C3C  6EEA               	movwf	fsr0h,c
  5986   010C3E  50EF               	movf	indf0,w,c
  5987   010C40  6E35               	movwf	(btemp+11)^0,c
  5988   010C42  90D8               	bcf	status,0,c
  5989   010C44  3235               	rrcf	(btemp+11)^0,f,c
  5990   010C46  90D8               	bcf	status,0,c
  5991   010C48  3235               	rrcf	(btemp+11)^0,f,c
  5992   010C4A  90D8               	bcf	status,0,c
  5993   010C4C  3035               	rrcf	(btemp+11)^0,w,c
  5994   010C4E  6EDF               	movwf	indf2,c
  5995   010C50                     
  5996                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5997                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5998   010C50  50E1               	movf	fsr1l,w,c
  5999   010C52  0FEE               	addlw	-18
  6000   010C54  6ED9               	movwf	fsr2l,c
  6001   010C56  50E2               	movf	fsr1h,w,c
  6002   010C58  6EDA               	movwf	fsr2h,c
  6003   010C5A  0EFF               	movlw	255
  6004   010C5C  22DA               	addwfc	fsr2h,f,c
  6005   010C5E  AADF               	btfss	indf2,5,c
  6006   010C60  EF34  F086         	goto	u2261
  6007   010C64  EF36  F086         	goto	u2260
  6008   010C68                     u2261:
  6009   010C68  EFC4  F086         	goto	l4586
  6010   010C6C                     u2260:
  6011   010C6C                     
  6012                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  6013                           ;stkvar	_ba @ sp[(-110)+4]
  6014   010C6C  0E9E               	movlw	158
  6015   010C6E  24E1               	addwf	fsr1l,w,c
  6016   010C70  6ED9               	movwf	fsr2l,c
  6017   010C72  0EFF               	movlw	255
  6018   010C74  20E2               	addwfc	fsr1h,w,c
  6019   010C76  6EDA               	movwf	fsr2h,c
  6020   010C78  50DF               	movf	indf2,w,c
  6021   010C7A  6E35               	movwf	(btemp+11)^0,c
  6022                           
  6023                           ;stkvar	_myReg @ sp[(-110)+97]
  6024   010C7C  0EF3               	movlw	-13
  6025   010C7E  C035  FFE3         	movff	btemp+11,plusw1
  6026   010C82                     
  6027                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  6028                           ;stkvar	_ba @ sp[(-110)+4]
  6029   010C82  0E9F               	movlw	159
  6030   010C84  24E1               	addwf	fsr1l,w,c
  6031   010C86  6ED9               	movwf	fsr2l,c
  6032   010C88  0EFF               	movlw	255
  6033   010C8A  20E2               	addwfc	fsr1h,w,c
  6034   010C8C  6EDA               	movwf	fsr2h,c
  6035                           
  6036                           ;stkvar	_myReg @ sp[(-110)+97]
  6037   010C8E  0EF4               	movlw	244
  6038   010C90  24E1               	addwf	fsr1l,w,c
  6039   010C92  6EE9               	movwf	fsr0l,c
  6040   010C94  0EFF               	movlw	255
  6041   010C96  20E2               	addwfc	fsr1h,w,c
  6042   010C98  6EEA               	movwf	fsr0h,c
  6043   010C9A  CFDF FFEF          	movff	indf2,indf0
  6044   010C9E                     
  6045                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  6046                           ;stkvar	_ba @ sp[(-110)+4]
  6047   010C9E  0EA0               	movlw	160
  6048   010CA0  24E1               	addwf	fsr1l,w,c
  6049   010CA2  6ED9               	movwf	fsr2l,c
  6050   010CA4  0EFF               	movlw	255
  6051   010CA6  20E2               	addwfc	fsr1h,w,c
  6052   010CA8  6EDA               	movwf	fsr2h,c
  6053                           
  6054                           ;stkvar	_myReg @ sp[(-110)+97]
  6055   010CAA  0EF5               	movlw	245
  6056   010CAC  24E1               	addwf	fsr1l,w,c
  6057   010CAE  6EE9               	movwf	fsr0l,c
  6058   010CB0  0EFF               	movlw	255
  6059   010CB2  20E2               	addwfc	fsr1h,w,c
  6060   010CB4  6EEA               	movwf	fsr0h,c
  6061   010CB6  CFDF FFEF          	movff	indf2,indf0
  6062   010CBA                     
  6063                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  6064                           ;stkvar	_ba @ sp[(-110)+4]
  6065   010CBA  0EA1               	movlw	161
  6066   010CBC  24E1               	addwf	fsr1l,w,c
  6067   010CBE  6ED9               	movwf	fsr2l,c
  6068   010CC0  0EFF               	movlw	255
  6069   010CC2  20E2               	addwfc	fsr1h,w,c
  6070   010CC4  6EDA               	movwf	fsr2h,c
  6071                           
  6072                           ;stkvar	_myReg @ sp[(-110)+97]
  6073   010CC6  0EF6               	movlw	246
  6074   010CC8  24E1               	addwf	fsr1l,w,c
  6075   010CCA  6EE9               	movwf	fsr0l,c
  6076   010CCC  0EFF               	movlw	255
  6077   010CCE  20E2               	addwfc	fsr1h,w,c
  6078   010CD0  6EEA               	movwf	fsr0h,c
  6079   010CD2  CFDF FFEF          	movff	indf2,indf0
  6080   010CD6                     
  6081                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  6082                           ;stkvar	_myReg @ sp[(-110)+97]
  6083   010CD6  50E1               	movf	fsr1l,w,c
  6084   010CD8  0FF3               	addlw	-13
  6085   010CDA  6ED9               	movwf	fsr2l,c
  6086   010CDC  50E2               	movf	fsr1h,w,c
  6087   010CDE  6EDA               	movwf	fsr2h,c
  6088   010CE0  0EFF               	movlw	255
  6089   010CE2  22DA               	addwfc	fsr2h,f,c
  6090                           
  6091                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6092   010CE4  0E8F               	movlw	-113
  6093   010CE6  CFE3 F034          	movff	plusw1,btemp+10
  6094   010CEA  0E90               	movlw	-112
  6095   010CEC  CFE3 F035          	movff	plusw1,btemp+11
  6096   010CF0  0E09               	movlw	9
  6097   010CF2  2434               	addwf	(btemp+10)^0,w,c
  6098   010CF4  6EE9               	movwf	fsr0l,c
  6099   010CF6  0E00               	movlw	0
  6100   010CF8  2035               	addwfc	(btemp+11)^0,w,c
  6101   010CFA  6EEA               	movwf	fsr0h,c
  6102   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  6103   010D00  CFDE FFEE          	movff	postinc2,postinc0
  6104   010D04  CFDE FFEE          	movff	postinc2,postinc0
  6105   010D08  CFDE FFEE          	movff	postinc2,postinc0
  6106   010D0C                     
  6107                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  6108                           ;stkvar	_i @ sp[(-110)+107]
  6109   010D0C  0EFD               	movlw	-3
  6110   010D0E  6AE3               	clrf	plusw1,c
  6111   010D10  EFB1  F086         	goto	l4584
  6112   010D14                     l4580:
  6113                           
  6114                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  6115                           ;stkvar	_i @ sp[(-110)+107]
  6116   010D14  0EFD               	movlw	-3
  6117   010D16  50E3               	movf	plusw1,w,c
  6118   010D18  6E34               	movwf	(btemp+10)^0,c
  6119   010D1A  6A35               	clrf	(btemp+11)^0,c
  6120   010D1C  0E0C               	movlw	12
  6121   010D1E  2634               	addwf	(btemp+10)^0,f,c
  6122   010D20  0E00               	movlw	0
  6123   010D22  2235               	addwfc	(btemp+11)^0,f,c
  6124                           
  6125                           ;stkvar	_ba @ sp[(-110)+4]
  6126   010D24  0E96               	movlw	150
  6127   010D26  24E1               	addwf	fsr1l,w,c
  6128   010D28  6E32               	movwf	(btemp+8)^0,c
  6129   010D2A  0EFF               	movlw	255
  6130   010D2C  20E2               	addwfc	fsr1h,w,c
  6131   010D2E  6E33               	movwf	(btemp+9)^0,c
  6132   010D30  5034               	movf	(btemp+10)^0,w,c
  6133   010D32  2432               	addwf	(btemp+8)^0,w,c
  6134   010D34  6ED9               	movwf	fsr2l,c
  6135   010D36  5035               	movf	(btemp+11)^0,w,c
  6136   010D38  2033               	addwfc	(btemp+9)^0,w,c
  6137   010D3A  6EDA               	movwf	fsr2h,c
  6138                           
  6139                           ;stkvar	_i @ sp[(-110)+107]
  6140   010D3C  0EFD               	movlw	-3
  6141   010D3E  CFE3 F035          	movff	plusw1,btemp+11
  6142                           
  6143                           ;stkvar	_rxd @ sp[(-110)+-5]
  6144   010D42  0E8D               	movlw	-115
  6145   010D44  CFE3 F032          	movff	plusw1,btemp+8
  6146   010D48  0E8E               	movlw	-114
  6147   010D4A  CFE3 F033          	movff	plusw1,btemp+9
  6148   010D4E  5035               	movf	(btemp+11)^0,w,c
  6149   010D50  2432               	addwf	(btemp+8)^0,w,c
  6150   010D52  6EE9               	movwf	fsr0l,c
  6151   010D54  0E00               	movlw	0
  6152   010D56  2033               	addwfc	(btemp+9)^0,w,c
  6153   010D58  6EEA               	movwf	fsr0h,c
  6154   010D5A  CFDF FFEF          	movff	indf2,indf0
  6155   010D5E                     
  6156                           ;can/can.c: 1342:         }
  6157                           ;stkvar	_i @ sp[(-110)+107]
  6158   010D5E  0EFD               	movlw	-3
  6159   010D60  2AE3               	incf	plusw1,f,c
  6160   010D62                     l4584:
  6161                           
  6162                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6163                           ;stkvar	_i @ sp[(-110)+107]
  6164   010D62  50E1               	movf	fsr1l,w,c
  6165   010D64  0FFD               	addlw	-3
  6166   010D66  6ED9               	movwf	fsr2l,c
  6167   010D68  50E2               	movf	fsr1h,w,c
  6168   010D6A  6EDA               	movwf	fsr2h,c
  6169   010D6C  0EFF               	movlw	255
  6170   010D6E  22DA               	addwfc	fsr2h,f,c
  6171   010D70  0E8C               	movlw	-116
  6172   010D72  50E3               	movf	plusw1,w,c
  6173   010D74  5CDE               	subwf	postinc2,w,c
  6174   010D76  A0D8               	btfss	status,0,c
  6175   010D78  EFC0  F086         	goto	u2271
  6176   010D7C  EFC2  F086         	goto	u2270
  6177   010D80                     u2271:
  6178   010D80  EF8A  F086         	goto	l4580
  6179   010D84                     u2270:
  6180   010D84  EF10  F087         	goto	l4596
  6181   010D88                     l4586:
  6182                           
  6183                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  6184                           ;stkvar	_rxObj @ sp[(-110)+-3]
  6185   010D88  0E8F               	movlw	-113
  6186   010D8A  CFE3 F034          	movff	plusw1,btemp+10
  6187   010D8E  0E90               	movlw	-112
  6188   010D90  CFE3 F035          	movff	plusw1,btemp+11
  6189   010D94  0E09               	movlw	9
  6190   010D96  2434               	addwf	(btemp+10)^0,w,c
  6191   010D98  6ED9               	movwf	fsr2l,c
  6192   010D9A  0E00               	movlw	0
  6193   010D9C  2035               	addwfc	(btemp+11)^0,w,c
  6194   010D9E  6EDA               	movwf	fsr2h,c
  6195   010DA0  6ADE               	clrf	postinc2,c
  6196   010DA2  6ADE               	clrf	postinc2,c
  6197   010DA4  6ADE               	clrf	postinc2,c
  6198   010DA6  6ADD               	clrf	postdec2,c
  6199   010DA8                     
  6200                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  6201                           ;stkvar	_i @ sp[(-110)+107]
  6202   010DA8  0EFD               	movlw	-3
  6203   010DAA  6AE3               	clrf	plusw1,c
  6204   010DAC  EFFF  F086         	goto	l4594
  6205   010DB0                     l4590:
  6206                           
  6207                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  6208                           ;stkvar	_i @ sp[(-110)+107]
  6209   010DB0  0EFD               	movlw	-3
  6210   010DB2  50E3               	movf	plusw1,w,c
  6211   010DB4  6E34               	movwf	(btemp+10)^0,c
  6212   010DB6  6A35               	clrf	(btemp+11)^0,c
  6213   010DB8  0E08               	movlw	8
  6214   010DBA  2634               	addwf	(btemp+10)^0,f,c
  6215   010DBC  0E00               	movlw	0
  6216   010DBE  2235               	addwfc	(btemp+11)^0,f,c
  6217                           
  6218                           ;stkvar	_ba @ sp[(-110)+4]
  6219   010DC0  0E96               	movlw	150
  6220   010DC2  24E1               	addwf	fsr1l,w,c
  6221   010DC4  6E32               	movwf	(btemp+8)^0,c
  6222   010DC6  0EFF               	movlw	255
  6223   010DC8  20E2               	addwfc	fsr1h,w,c
  6224   010DCA  6E33               	movwf	(btemp+9)^0,c
  6225   010DCC  5034               	movf	(btemp+10)^0,w,c
  6226   010DCE  2432               	addwf	(btemp+8)^0,w,c
  6227   010DD0  6ED9               	movwf	fsr2l,c
  6228   010DD2  5035               	movf	(btemp+11)^0,w,c
  6229   010DD4  2033               	addwfc	(btemp+9)^0,w,c
  6230   010DD6  6EDA               	movwf	fsr2h,c
  6231                           
  6232                           ;stkvar	_i @ sp[(-110)+107]
  6233   010DD8  0EFD               	movlw	-3
  6234   010DDA  CFE3 F035          	movff	plusw1,btemp+11
  6235                           
  6236                           ;stkvar	_rxd @ sp[(-110)+-5]
  6237   010DDE  0E8D               	movlw	-115
  6238   010DE0  CFE3 F032          	movff	plusw1,btemp+8
  6239   010DE4  0E8E               	movlw	-114
  6240   010DE6  CFE3 F033          	movff	plusw1,btemp+9
  6241   010DEA  5035               	movf	(btemp+11)^0,w,c
  6242   010DEC  2432               	addwf	(btemp+8)^0,w,c
  6243   010DEE  6EE9               	movwf	fsr0l,c
  6244   010DF0  0E00               	movlw	0
  6245   010DF2  2033               	addwfc	(btemp+9)^0,w,c
  6246   010DF4  6EEA               	movwf	fsr0h,c
  6247   010DF6  CFDF FFEF          	movff	indf2,indf0
  6248   010DFA                     
  6249                           ;can/can.c: 1349:         }
  6250                           ;stkvar	_i @ sp[(-110)+107]
  6251   010DFA  0EFD               	movlw	-3
  6252   010DFC  2AE3               	incf	plusw1,f,c
  6253   010DFE                     l4594:
  6254                           
  6255                           ;stkvar	_nBytes @ sp[(-110)+-6]
  6256                           ;stkvar	_i @ sp[(-110)+107]
  6257   010DFE  50E1               	movf	fsr1l,w,c
  6258   010E00  0FFD               	addlw	-3
  6259   010E02  6ED9               	movwf	fsr2l,c
  6260   010E04  50E2               	movf	fsr1h,w,c
  6261   010E06  6EDA               	movwf	fsr2h,c
  6262   010E08  0EFF               	movlw	255
  6263   010E0A  22DA               	addwfc	fsr2h,f,c
  6264   010E0C  0E8C               	movlw	-116
  6265   010E0E  50E3               	movf	plusw1,w,c
  6266   010E10  5CDE               	subwf	postinc2,w,c
  6267   010E12  A0D8               	btfss	status,0,c
  6268   010E14  EF0E  F087         	goto	u2281
  6269   010E18  EF10  F087         	goto	u2280
  6270   010E1C                     u2281:
  6271   010E1C  EFD8  F086         	goto	l4590
  6272   010E20                     u2280:
  6273   010E20                     l4596:
  6274                           
  6275                           ;stkvar	_channel @ sp[(-110)+-1]
  6276   010E20  0E91               	movlw	-111
  6277   010E22  50E3               	movf	plusw1,w,c
  6278   010E24  6EE6               	movwf	postinc1,c
  6279   010E26  EC6E  F0A2         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  6280   010E2A                     l357:
  6281                           
  6282                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  6283   010E2A  0E8C               	movlw	140
  6284   010E2C  26E1               	addwf	fsr1l,f,c
  6285   010E2E  0EFF               	movlw	255
  6286   010E30  22E2               	addwfc	fsr1h,f,c
  6287   010E32  0012               	return		;funcret
  6288   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  6289                           	callstack 0
  6290                           
  6291 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  6292 ;; Defined at:
  6293 ;;		line 1378 in file "can/can.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  channel         1  [STACK] enum E5287
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  6298 ;;  a               2  [STACK] unsigned short 
  6299 ;;  spiTransferE    1  [STACK] char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1  [STACK] char 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6313 ;;Total ram usage:        0 bytes
  6314 ;; Hardware stack levels used: 1
  6315 ;; Hardware stack levels required when called: 9
  6316 ;; This function calls:
  6317 ;;		_DRV_CANFDSPI_WriteByte
  6318 ;; This function is called by:
  6319 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6320 ;; This function uses a reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text13
  6324   0144DC                     __ptext13:
  6325                           	callstack 0
  6326   0144DC                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6327                           	callstack 0
  6328                           
  6329                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6330   0144DC  0E08               	movlw	8
  6331   0144DE  26E1               	addwf	fsr1l,f,c
  6332   0144E0  0E00               	movlw	0
  6333   0144E2  22E2               	addwfc	fsr1h,f,c
  6334   0144E4                     
  6335                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6336                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6337   0144E4  0EF8               	movlw	-8
  6338   0144E6  6AE3               	clrf	plusw1,c
  6339   0144E8  0EF9               	movlw	-7
  6340   0144EA  6AE3               	clrf	plusw1,c
  6341   0144EC  0EFA               	movlw	-6
  6342   0144EE  6AE3               	clrf	plusw1,c
  6343   0144F0  0EFB               	movlw	-5
  6344   0144F2  6AE3               	clrf	plusw1,c
  6345   0144F4                     
  6346                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6347                           ;stkvar	_channel @ sp[(-8)+-1]
  6348   0144F4  0EF7               	movlw	-9
  6349   0144F6  50E3               	movf	plusw1,w,c
  6350   0144F8  0D0C               	mullw	12
  6351   0144FA  0E51               	movlw	81
  6352   0144FC  26F3               	addwf	243,f,c
  6353   0144FE  0E00               	movlw	0
  6354   014500  22F4               	addwfc	244,f,c
  6355                           
  6356                           ;stkvar	_a @ sp[(-8)+5]
  6357   014502  0EFD               	movlw	-3
  6358   014504  CFF3 FFE3          	movff	prodl,plusw1
  6359   014508  0EFE               	movlw	-2
  6360   01450A  CFF4 FFE3          	movff	prodh,plusw1
  6361   01450E                     
  6362                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6363                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6364   01450E  0EF9               	movlw	249
  6365   014510  24E1               	addwf	fsr1l,w,c
  6366   014512  6ED9               	movwf	fsr2l,c
  6367   014514  0EFF               	movlw	255
  6368   014516  20E2               	addwfc	fsr1h,w,c
  6369   014518  6EDA               	movwf	fsr2h,c
  6370   01451A  80DF               	bsf	indf2,0,c
  6371   01451C                     
  6372                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6373                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6374   01451C  0EF9               	movlw	249
  6375   01451E  24E1               	addwf	fsr1l,w,c
  6376   014520  6ED9               	movwf	fsr2l,c
  6377   014522  0EFF               	movlw	255
  6378   014524  20E2               	addwfc	fsr1h,w,c
  6379   014526  6EDA               	movwf	fsr2h,c
  6380   014528  50DF               	movf	indf2,w,c
  6381   01452A  6EE6               	movwf	postinc1,c
  6382                           
  6383                           ;stkvar	_a @ sp[(-9)+5]
  6384   01452C  0EFC               	movlw	-4
  6385   01452E  CFE3 FFE6          	movff	plusw1,postinc1
  6386   014532  CFE3 FFE6          	movff	plusw1,postinc1
  6387   014536  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6388                           
  6389                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6390   01453A  0EFF               	movlw	-1
  6391   01453C  C02A  FFE3         	movff	btemp,plusw1
  6392   014540                     
  6393                           ;can/can.c: 1393:     return spiTransferError;
  6394                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6395   014540  0EFF               	movlw	-1
  6396   014542  CFE3 F02A          	movff	plusw1,btemp
  6397   014546                     
  6398                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6399   014546  0EF7               	movlw	247
  6400   014548  26E1               	addwf	fsr1l,f,c
  6401   01454A  0EFF               	movlw	255
  6402   01454C  22E2               	addwfc	fsr1h,f,c
  6403   01454E  0012               	return		;funcret
  6404   014550                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6405                           	callstack 0
  6406                           
  6407 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6408 ;; Defined at:
  6409 ;;		line 356 in file "can/can.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  address         2  [STACK] unsigned short 
  6412 ;;  rxd             2  [STACK] PTR unsigned char 
  6413 ;;		 -> ba(12), ba(76), 
  6414 ;;  nBytes          2  [STACK] unsigned short 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  i               2  [STACK] unsigned short 
  6417 ;;  spiTransferS    2  [STACK] unsigned short 
  6418 ;;  spiTransferE    1  [STACK] char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1  [STACK] char 
  6421 ;; Registers used:
  6422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/0
  6425 ;;		On exit  : 0/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 8
  6435 ;; This function calls:
  6436 ;;		_SpiTransfer
  6437 ;; This function is called by:
  6438 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6439 ;; This function uses a reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text14
  6443   01287A                     __ptext14:
  6444                           	callstack 0
  6445   01287A                     _DRV_CANFDSPI_ReadByteArray:
  6446                           	callstack 0
  6447                           
  6448                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6449   01287A  0E05               	movlw	5
  6450   01287C  26E1               	addwf	fsr1l,f,c
  6451   01287E  0E00               	movlw	0
  6452   012880  22E2               	addwfc	fsr1h,f,c
  6453   012882                     
  6454                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6455                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6456   012882  0EF5               	movlw	-11
  6457   012884  50E3               	movf	plusw1,w,c
  6458   012886  0F02               	addlw	2
  6459   012888  6E34               	movwf	(btemp+10)^0,c
  6460   01288A  0EF6               	movlw	-10
  6461   01288C  CFE3 F035          	movff	plusw1,btemp+11
  6462   012890  0E00               	movlw	0
  6463   012892  2235               	addwfc	(btemp+11)^0,f,c
  6464                           
  6465                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6466   012894  0EFD               	movlw	-3
  6467   012896  C034  FFE3         	movff	btemp+10,plusw1
  6468   01289A  0EFE               	movlw	-2
  6469   01289C  C035  FFE3         	movff	btemp+11,plusw1
  6470   0128A0                     
  6471                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6472                           ;stkvar	_address @ sp[(-5)+-2]
  6473   0128A0  0EFA               	movlw	250
  6474   0128A2  24E1               	addwf	fsr1l,w,c
  6475   0128A4  6ED9               	movwf	fsr2l,c
  6476   0128A6  0EFF               	movlw	255
  6477   0128A8  20E2               	addwfc	fsr1h,w,c
  6478   0128AA  6EDA               	movwf	fsr2h,c
  6479   0128AC  50DF               	movf	indf2,w,c
  6480   0128AE  0B0F               	andlw	15
  6481   0128B0  0F30               	addlw	48
  6482   0128B2  0101               	movlb	1	; () banked
  6483   0128B4  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6484   0128B6                     
  6485                           ; BSR set to: 1
  6486                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6487                           ;stkvar	_address @ sp[(-5)+-2]
  6488   0128B6  0EF9               	movlw	-7
  6489   0128B8  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6490   0128BC                     
  6491                           ; BSR set to: 1
  6492                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6493   0128BC  0E02               	movlw	2
  6494   0128BE  6E34               	movwf	(btemp+10)^0,c
  6495   0128C0  0E00               	movlw	0
  6496   0128C2  6E35               	movwf	(btemp+11)^0,c
  6497                           
  6498                           ;stkvar	_i @ sp[(-5)+0]
  6499   0128C4  0EFB               	movlw	-5
  6500   0128C6  C034  FFE3         	movff	btemp+10,plusw1
  6501   0128CA  0EFC               	movlw	-4
  6502   0128CC  C035  FFE3         	movff	btemp+11,plusw1
  6503   0128D0  EF86  F094         	goto	l4416
  6504   0128D4                     l4412:
  6505                           
  6506                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6507                           ;stkvar	_i @ sp[(-5)+0]
  6508   0128D4  0EFB               	movlw	-5
  6509   0128D6  CFE3 F034          	movff	plusw1,btemp+10
  6510   0128DA  0EFC               	movlw	-4
  6511   0128DC  CFE3 F035          	movff	plusw1,btemp+11
  6512   0128E0  0E00               	movlw	low _spiTransmitBuffer
  6513   0128E2  2434               	addwf	(btemp+10)^0,w,c
  6514   0128E4  6ED9               	movwf	fsr2l,c
  6515   0128E6  0E01               	movlw	high _spiTransmitBuffer
  6516   0128E8  2035               	addwfc	(btemp+11)^0,w,c
  6517   0128EA  6EDA               	movwf	fsr2h,c
  6518   0128EC  6ADF               	clrf	indf2,c
  6519   0128EE                     
  6520                           ;can/can.c: 370:     }
  6521                           ;stkvar	_i @ sp[(-5)+0]
  6522   0128EE  0EFB               	movlw	-5
  6523   0128F0  50E3               	movf	plusw1,w,c
  6524   0128F2  0F01               	addlw	1
  6525   0128F4  6E2A               	movwf	btemp^0,c
  6526   0128F6  0EFB               	movlw	-5
  6527   0128F8  C02A  FFE3         	movff	btemp,plusw1
  6528   0128FC  6A2A               	clrf	btemp^0,c
  6529   0128FE  0EFC               	movlw	-4
  6530   012900  50E3               	movf	plusw1,w,c
  6531   012902  202A               	addwfc	btemp^0,w,c
  6532   012904  6E2A               	movwf	btemp^0,c
  6533   012906  0EFC               	movlw	-4
  6534   012908  C02A  FFE3         	movff	btemp,plusw1
  6535   01290C                     l4416:
  6536                           
  6537                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6538   01290C  0EFD               	movlw	-3
  6539   01290E  CFE3 F034          	movff	plusw1,btemp+10
  6540   012912  0EFE               	movlw	-2
  6541   012914  CFE3 F035          	movff	plusw1,btemp+11
  6542                           
  6543                           ;stkvar	_i @ sp[(-5)+0]
  6544   012918  0EFB               	movlw	-5
  6545   01291A  CFE3 F032          	movff	plusw1,btemp+8
  6546   01291E  0EFC               	movlw	-4
  6547   012920  CFE3 F033          	movff	plusw1,btemp+9
  6548   012924  5034               	movf	(btemp+10)^0,w,c
  6549   012926  5C32               	subwf	(btemp+8)^0,w,c
  6550   012928  5035               	movf	(btemp+11)^0,w,c
  6551   01292A  5833               	subwfb	(btemp+9)^0,w,c
  6552   01292C  A0D8               	btfss	status,0,c
  6553   01292E  EF9B  F094         	goto	u2081
  6554   012932  EF9D  F094         	goto	u2080
  6555   012936                     u2081:
  6556   012936  EF6A  F094         	goto	l4412
  6557   01293A                     u2080:
  6558   01293A                     
  6559                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6560                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6561   01293A  0EFD               	movlw	-3
  6562   01293C  CFE3 FFE6          	movff	plusw1,postinc1
  6563   012940  CFE3 FFE6          	movff	plusw1,postinc1
  6564   012944  0E00               	movlw	low _spiReceiveBuffer
  6565   012946  6EE6               	movwf	postinc1,c
  6566   012948  0E02               	movlw	high _spiReceiveBuffer
  6567   01294A  6EE6               	movwf	postinc1,c
  6568   01294C  0E00               	movlw	low _spiTransmitBuffer
  6569   01294E  6EE6               	movwf	postinc1,c
  6570   012950  0E01               	movlw	high _spiTransmitBuffer
  6571   012952  6EE6               	movwf	postinc1,c
  6572   012954  EC3B  F09E         	call	_SpiTransfer	;wreg free
  6573                           
  6574                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6575   012958  0EFF               	movlw	-1
  6576   01295A  C02A  FFE3         	movff	btemp,plusw1
  6577   01295E                     
  6578                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6579                           ;stkvar	_i @ sp[(-5)+0]
  6580   01295E  0EFB               	movlw	-5
  6581   012960  6AE3               	clrf	plusw1,c
  6582   012962  0EFC               	movlw	-4
  6583   012964  6AE3               	clrf	plusw1,c
  6584   012966  EFE4  F094         	goto	l4426
  6585   01296A                     l4422:
  6586                           
  6587                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6588                           ;stkvar	_i @ sp[(-5)+0]
  6589   01296A  0EFB               	movlw	-5
  6590   01296C  CFE3 F034          	movff	plusw1,btemp+10
  6591   012970  0EFC               	movlw	-4
  6592   012972  CFE3 F035          	movff	plusw1,btemp+11
  6593   012976  0E02               	movlw	low (_spiReceiveBuffer+2)
  6594   012978  2434               	addwf	(btemp+10)^0,w,c
  6595   01297A  6ED9               	movwf	fsr2l,c
  6596   01297C  0E02               	movlw	high (_spiReceiveBuffer+2)
  6597   01297E  2035               	addwfc	(btemp+11)^0,w,c
  6598   012980  6EDA               	movwf	fsr2h,c
  6599                           
  6600                           ;stkvar	_i @ sp[(-5)+0]
  6601   012982  0EFB               	movlw	-5
  6602   012984  CFE3 F034          	movff	plusw1,btemp+10
  6603   012988  0EFC               	movlw	-4
  6604   01298A  CFE3 F035          	movff	plusw1,btemp+11
  6605                           
  6606                           ;stkvar	_rxd @ sp[(-5)+-4]
  6607   01298E  0EF7               	movlw	-9
  6608   012990  CFE3 F032          	movff	plusw1,btemp+8
  6609   012994  0EF8               	movlw	-8
  6610   012996  CFE3 F033          	movff	plusw1,btemp+9
  6611   01299A  5034               	movf	(btemp+10)^0,w,c
  6612   01299C  2432               	addwf	(btemp+8)^0,w,c
  6613   01299E  6EE9               	movwf	fsr0l,c
  6614   0129A0  5035               	movf	(btemp+11)^0,w,c
  6615   0129A2  2033               	addwfc	(btemp+9)^0,w,c
  6616   0129A4  6EEA               	movwf	fsr0h,c
  6617   0129A6  CFDF FFEF          	movff	indf2,indf0
  6618   0129AA                     
  6619                           ;can/can.c: 377:     }
  6620                           ;stkvar	_i @ sp[(-5)+0]
  6621   0129AA  0EFB               	movlw	-5
  6622   0129AC  50E3               	movf	plusw1,w,c
  6623   0129AE  0F01               	addlw	1
  6624   0129B0  6E2A               	movwf	btemp^0,c
  6625   0129B2  0EFB               	movlw	-5
  6626   0129B4  C02A  FFE3         	movff	btemp,plusw1
  6627   0129B8  6A2A               	clrf	btemp^0,c
  6628   0129BA  0EFC               	movlw	-4
  6629   0129BC  50E3               	movf	plusw1,w,c
  6630   0129BE  202A               	addwfc	btemp^0,w,c
  6631   0129C0  6E2A               	movwf	btemp^0,c
  6632   0129C2  0EFC               	movlw	-4
  6633   0129C4  C02A  FFE3         	movff	btemp,plusw1
  6634   0129C8                     l4426:
  6635                           
  6636                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6637   0129C8  0EF5               	movlw	-11
  6638   0129CA  CFE3 F034          	movff	plusw1,btemp+10
  6639   0129CE  0EF6               	movlw	-10
  6640   0129D0  CFE3 F035          	movff	plusw1,btemp+11
  6641                           
  6642                           ;stkvar	_i @ sp[(-5)+0]
  6643   0129D4  0EFB               	movlw	-5
  6644   0129D6  CFE3 F032          	movff	plusw1,btemp+8
  6645   0129DA  0EFC               	movlw	-4
  6646   0129DC  CFE3 F033          	movff	plusw1,btemp+9
  6647   0129E0  5034               	movf	(btemp+10)^0,w,c
  6648   0129E2  5C32               	subwf	(btemp+8)^0,w,c
  6649   0129E4  5035               	movf	(btemp+11)^0,w,c
  6650   0129E6  5833               	subwfb	(btemp+9)^0,w,c
  6651   0129E8  A0D8               	btfss	status,0,c
  6652   0129EA  EFF9  F094         	goto	u2091
  6653   0129EE  EFFB  F094         	goto	u2090
  6654   0129F2                     u2091:
  6655   0129F2  EFB5  F094         	goto	l4422
  6656   0129F6                     u2090:
  6657   0129F6                     
  6658                           ;can/can.c: 379:     return spiTransferError;
  6659                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6660   0129F6  0EFF               	movlw	-1
  6661   0129F8  CFE3 F02A          	movff	plusw1,btemp
  6662   0129FC                     
  6663                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6664   0129FC  0EF5               	movlw	245
  6665   0129FE  26E1               	addwf	fsr1l,f,c
  6666   012A00  0EFF               	movlw	255
  6667   012A02  22E2               	addwfc	fsr1h,f,c
  6668   012A04  0012               	return		;funcret
  6669   012A06                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6670                           	callstack 0
  6671                           
  6672 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6673 ;; Defined at:
  6674 ;;		line 1928 in file "can/can.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  channel         1  [STACK] enum E5287
  6677 ;;  flags           2  [STACK] PTR enum E5588
  6678 ;;		 -> rxFlags(1), 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6681 ;;  a               2  [STACK] unsigned short 
  6682 ;;  spiTransferE    1  [STACK] char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1  [STACK] char 
  6685 ;; Registers used:
  6686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;Total ram usage:        0 bytes
  6697 ;; Hardware stack levels used: 1
  6698 ;; Hardware stack levels required when called: 9
  6699 ;; This function calls:
  6700 ;;		_DRV_CANFDSPI_ReadByte
  6701 ;; This function is called by:
  6702 ;;		_CanReceive
  6703 ;; This function uses a reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text15
  6707   014162                     __ptext15:
  6708                           	callstack 0
  6709   014162                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6710                           	callstack 0
  6711                           
  6712                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6713   014162  0E07               	movlw	7
  6714   014164  26E1               	addwf	fsr1l,f,c
  6715   014166  0E00               	movlw	0
  6716   014168  22E2               	addwfc	fsr1h,f,c
  6717   01416A                     
  6718                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6719                           ;stkvar	_channel @ sp[(-7)+-1]
  6720   01416A  0EF8               	movlw	-8
  6721   01416C  50E3               	movf	plusw1,w,c
  6722   01416E  A4D8               	btfss	status,2,c
  6723   014170  EFBC  F0A0         	goto	u2151
  6724   014174  EFBE  F0A0         	goto	u2150
  6725   014178                     u2151:
  6726   014178  EFC0  F0A0         	goto	l4498
  6727   01417C                     u2150:
  6728   01417C  EFFE  F0A0         	goto	l482
  6729   014180                     l4498:
  6730                           
  6731                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6732                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6733   014180  0EF9               	movlw	-7
  6734   014182  6AE3               	clrf	plusw1,c
  6735   014184  0EFA               	movlw	-6
  6736   014186  6AE3               	clrf	plusw1,c
  6737   014188  0EFB               	movlw	-5
  6738   01418A  6AE3               	clrf	plusw1,c
  6739   01418C  0EFC               	movlw	-4
  6740   01418E  6AE3               	clrf	plusw1,c
  6741   014190                     
  6742                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6743                           ;stkvar	_channel @ sp[(-7)+-1]
  6744   014190  0EF8               	movlw	-8
  6745   014192  50E3               	movf	plusw1,w,c
  6746   014194  0D0C               	mullw	12
  6747   014196  0E54               	movlw	84
  6748   014198  26F3               	addwf	243,f,c
  6749   01419A  0E00               	movlw	0
  6750   01419C  22F4               	addwfc	244,f,c
  6751                           
  6752                           ;stkvar	_a @ sp[(-7)+4]
  6753   01419E  0EFD               	movlw	-3
  6754   0141A0  CFF3 FFE3          	movff	prodl,plusw1
  6755   0141A4  0EFE               	movlw	-2
  6756   0141A6  CFF4 FFE3          	movff	prodh,plusw1
  6757   0141AA                     
  6758                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6759                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6760   0141AA  0EF9               	movlw	249
  6761   0141AC  24E1               	addwf	fsr1l,w,c
  6762   0141AE  6E2A               	movwf	btemp^0,c
  6763   0141B0  0EFF               	movlw	255
  6764   0141B2  20E2               	addwfc	fsr1h,w,c
  6765   0141B4  6E2B               	movwf	(btemp+1)^0,c
  6766   0141B6  C02A  FFE6         	movff	btemp,postinc1
  6767   0141BA  C02B  FFE6         	movff	btemp+1,postinc1
  6768                           
  6769                           ;stkvar	_a @ sp[(-9)+4]
  6770   0141BE  0EFB               	movlw	-5
  6771   0141C0  CFE3 FFE6          	movff	plusw1,postinc1
  6772   0141C4  CFE3 FFE6          	movff	plusw1,postinc1
  6773   0141C8  EC72  F0A3         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6774                           
  6775                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6776   0141CC  0EFF               	movlw	-1
  6777   0141CE  C02A  FFE3         	movff	btemp,plusw1
  6778   0141D2                     
  6779                           ;can/can.c: 1942:     if (spiTransferError) {
  6780                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6781   0141D2  0EFF               	movlw	-1
  6782   0141D4  50E3               	movf	plusw1,w,c
  6783   0141D6  B4D8               	btfsc	status,2,c
  6784   0141D8  EFF0  F0A0         	goto	u2161
  6785   0141DC  EFF2  F0A0         	goto	u2160
  6786   0141E0                     u2161:
  6787   0141E0  EFF4  F0A0         	goto	l4508
  6788   0141E4                     u2160:
  6789   0141E4  EFFE  F0A0         	goto	l482
  6790   0141E8                     l4508:
  6791                           
  6792                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6793                           ;stkvar	_flags @ sp[(-7)+-3]
  6794   0141E8  0EF6               	movlw	-10
  6795   0141EA  CFE3 FFD9          	movff	plusw1,fsr2l
  6796   0141EE  0EF7               	movlw	-9
  6797   0141F0  CFE3 FFDA          	movff	plusw1,fsr2h
  6798                           
  6799                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6800   0141F4  0EF9               	movlw	-7
  6801   0141F6  50E3               	movf	plusw1,w,c
  6802   0141F8  0B0F               	andlw	15
  6803   0141FA  6EDF               	movwf	indf2,c
  6804   0141FC                     l482:
  6805                           
  6806                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6807   0141FC  0EF6               	movlw	246
  6808   0141FE  26E1               	addwf	fsr1l,f,c
  6809   014200  0EFF               	movlw	255
  6810   014202  22E2               	addwfc	fsr1h,f,c
  6811   014204  0012               	return		;funcret
  6812   014206                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6813                           	callstack 0
  6814                           
  6815 ;; *************** function _XF_init *****************
  6816 ;; Defined at:
  6817 ;;		line 80 in file "xf/xf.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;		None
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  i               2  [STACK] int 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1  [STACK] void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;Total ram usage:        0 bytes
  6836 ;; Hardware stack levels used: 1
  6837 ;; Hardware stack levels required when called: 8
  6838 ;; This function calls:
  6839 ;;		_Event_init
  6840 ;; This function is called by:
  6841 ;;		_main
  6842 ;; This function uses a reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text16
  6846   012D08                     __ptext16:
  6847                           	callstack 0
  6848   012D08                     _XF_init:
  6849                           	callstack 0
  6850                           
  6851                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6852   012D08  52E6               	movf	postinc1,f,c
  6853   012D0A  52E6               	movf	postinc1,f,c
  6854   012D0C                     
  6855                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6856                           ;stkvar	_i @ sp[(-2)+0]
  6857   012D0C  0EFE               	movlw	-2
  6858   012D0E  6AE3               	clrf	plusw1,c
  6859   012D10  0EFF               	movlw	-1
  6860   012D12  6AE3               	clrf	plusw1,c
  6861   012D14                     l5344:
  6862                           
  6863                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6864                           ;stkvar	_i @ sp[(-2)+0]
  6865   012D14  0EFE               	movlw	-2
  6866   012D16  CFE3 F034          	movff	plusw1,btemp+10
  6867   012D1A  0EFF               	movlw	-1
  6868   012D1C  CFE3 F035          	movff	plusw1,btemp+11
  6869   012D20  0E06               	movlw	6
  6870   012D22  0234               	mulwf	(btemp+10)^0,c
  6871   012D24  CFF3 F032          	movff	prodl,btemp+8
  6872   012D28  CFF4 F033          	movff	prodh,btemp+9
  6873   012D2C  0235               	mulwf	(btemp+11)^0,c
  6874   012D2E  50F3               	movf	prodl,w,c
  6875   012D30  2633               	addwf	(btemp+9)^0,f,c
  6876   012D32  0E28               	movlw	low (_theXF+96)
  6877   012D34  2432               	addwf	(btemp+8)^0,w,c
  6878   012D36  6E34               	movwf	(btemp+10)^0,c
  6879   012D38  0E03               	movlw	high (_theXF+96)
  6880   012D3A  2033               	addwfc	(btemp+9)^0,w,c
  6881   012D3C  6E35               	movwf	(btemp+11)^0,c
  6882   012D3E  C034  FFE6         	movff	btemp+10,postinc1
  6883   012D42  C035  FFE6         	movff	btemp+11,postinc1
  6884   012D46  EC2A  F0A4         	call	_Event_init	;wreg free
  6885   012D4A                     
  6886                           ;xf/xf.c: 86:     }
  6887                           ;stkvar	_i @ sp[(-2)+0]
  6888   012D4A  0EFE               	movlw	-2
  6889   012D4C  50E3               	movf	plusw1,w,c
  6890   012D4E  0F01               	addlw	1
  6891   012D50  6E2A               	movwf	btemp^0,c
  6892   012D52  0EFE               	movlw	-2
  6893   012D54  C02A  FFE3         	movff	btemp,plusw1
  6894   012D58  6A2A               	clrf	btemp^0,c
  6895   012D5A  0EFF               	movlw	-1
  6896   012D5C  50E3               	movf	plusw1,w,c
  6897   012D5E  202A               	addwfc	btemp^0,w,c
  6898   012D60  6E2A               	movwf	btemp^0,c
  6899   012D62  0EFF               	movlw	-1
  6900   012D64  C02A  FFE3         	movff	btemp,plusw1
  6901   012D68                     
  6902                           ;stkvar	_i @ sp[(-2)+0]
  6903   012D68  0EFF               	movlw	-1
  6904   012D6A  BEE3               	btfsc	plusw1,7,c
  6905   012D6C  EFC5  F096         	goto	u3081
  6906   012D70  0EFF               	movlw	-1
  6907   012D72  50E3               	movf	plusw1,w,c
  6908   012D74  E10C               	bnz	u3080
  6909   012D76  0EFE               	movlw	-2
  6910   012D78  CFE3 F02A          	movff	plusw1,btemp
  6911   012D7C  0E1E               	movlw	30
  6912   012D7E  5E2A               	subwf	btemp^0,f,c
  6913   012D80  A0D8               	btfss	status,0,c
  6914   012D82  EFC5  F096         	goto	u3081
  6915   012D86  EFC7  F096         	goto	u3080
  6916   012D8A                     u3081:
  6917   012D8A  EF8A  F096         	goto	l5344
  6918   012D8E                     u3080:
  6919   012D8E                     
  6920                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6921                           ;stkvar	_i @ sp[(-2)+0]
  6922   012D8E  0EFE               	movlw	-2
  6923   012D90  6AE3               	clrf	plusw1,c
  6924   012D92  0EFF               	movlw	-1
  6925   012D94  6AE3               	clrf	plusw1,c
  6926   012D96                     l5356:
  6927                           
  6928                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6929                           ;stkvar	_i @ sp[(-2)+0]
  6930   012D96  0EFE               	movlw	-2
  6931   012D98  CFE3 F034          	movff	plusw1,btemp+10
  6932   012D9C  0EFF               	movlw	-1
  6933   012D9E  CFE3 F035          	movff	plusw1,btemp+11
  6934   012DA2  90D8               	bcf	status,0,c
  6935   012DA4  3634               	rlcf	(btemp+10)^0,f,c
  6936   012DA6  3635               	rlcf	(btemp+11)^0,f,c
  6937   012DA8  90D8               	bcf	status,0,c
  6938   012DAA  3634               	rlcf	(btemp+10)^0,f,c
  6939   012DAC  3635               	rlcf	(btemp+11)^0,f,c
  6940   012DAE  90D8               	bcf	status,0,c
  6941   012DB0  3634               	rlcf	(btemp+10)^0,f,c
  6942   012DB2  3635               	rlcf	(btemp+11)^0,f,c
  6943   012DB4  0EC8               	movlw	low _theXF
  6944   012DB6  2434               	addwf	(btemp+10)^0,w,c
  6945   012DB8  6ED9               	movwf	fsr2l,c
  6946   012DBA  0E02               	movlw	high _theXF
  6947   012DBC  2035               	addwfc	(btemp+11)^0,w,c
  6948   012DBE  6EDA               	movwf	fsr2h,c
  6949   012DC0  6ADE               	clrf	postinc2,c
  6950   012DC2  6ADD               	clrf	postdec2,c
  6951   012DC4                     
  6952                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6953                           ;stkvar	_i @ sp[(-2)+0]
  6954   012DC4  0EFE               	movlw	-2
  6955   012DC6  CFE3 F034          	movff	plusw1,btemp+10
  6956   012DCA  0EFF               	movlw	-1
  6957   012DCC  CFE3 F035          	movff	plusw1,btemp+11
  6958   012DD0  90D8               	bcf	status,0,c
  6959   012DD2  3634               	rlcf	(btemp+10)^0,f,c
  6960   012DD4  3635               	rlcf	(btemp+11)^0,f,c
  6961   012DD6  90D8               	bcf	status,0,c
  6962   012DD8  3634               	rlcf	(btemp+10)^0,f,c
  6963   012DDA  3635               	rlcf	(btemp+11)^0,f,c
  6964   012DDC  90D8               	bcf	status,0,c
  6965   012DDE  3634               	rlcf	(btemp+10)^0,f,c
  6966   012DE0  3635               	rlcf	(btemp+11)^0,f,c
  6967   012DE2  0ECA               	movlw	low (_theXF+2)
  6968   012DE4  2434               	addwf	(btemp+10)^0,w,c
  6969   012DE6  6E32               	movwf	(btemp+8)^0,c
  6970   012DE8  0E02               	movlw	high (_theXF+2)
  6971   012DEA  2035               	addwfc	(btemp+11)^0,w,c
  6972   012DEC  6E33               	movwf	(btemp+9)^0,c
  6973   012DEE  C032  FFE6         	movff	btemp+8,postinc1
  6974   012DF2  C033  FFE6         	movff	btemp+9,postinc1
  6975   012DF6  EC2A  F0A4         	call	_Event_init	;wreg free
  6976   012DFA                     
  6977                           ;xf/xf.c: 92:     }
  6978                           ;stkvar	_i @ sp[(-2)+0]
  6979   012DFA  0EFE               	movlw	-2
  6980   012DFC  50E3               	movf	plusw1,w,c
  6981   012DFE  0F01               	addlw	1
  6982   012E00  6E2A               	movwf	btemp^0,c
  6983   012E02  0EFE               	movlw	-2
  6984   012E04  C02A  FFE3         	movff	btemp,plusw1
  6985   012E08  6A2A               	clrf	btemp^0,c
  6986   012E0A  0EFF               	movlw	-1
  6987   012E0C  50E3               	movf	plusw1,w,c
  6988   012E0E  202A               	addwfc	btemp^0,w,c
  6989   012E10  6E2A               	movwf	btemp^0,c
  6990   012E12  0EFF               	movlw	-1
  6991   012E14  C02A  FFE3         	movff	btemp,plusw1
  6992   012E18                     
  6993                           ;stkvar	_i @ sp[(-2)+0]
  6994   012E18  0EFF               	movlw	-1
  6995   012E1A  BEE3               	btfsc	plusw1,7,c
  6996   012E1C  EF1D  F097         	goto	u3091
  6997   012E20  0EFF               	movlw	-1
  6998   012E22  50E3               	movf	plusw1,w,c
  6999   012E24  E10C               	bnz	u3090
  7000   012E26  0EFE               	movlw	-2
  7001   012E28  CFE3 F02A          	movff	plusw1,btemp
  7002   012E2C  0E0C               	movlw	12
  7003   012E2E  5E2A               	subwf	btemp^0,f,c
  7004   012E30  A0D8               	btfss	status,0,c
  7005   012E32  EF1D  F097         	goto	u3091
  7006   012E36  EF1F  F097         	goto	u3090
  7007   012E3A                     u3091:
  7008   012E3A  EFCB  F096         	goto	l5356
  7009   012E3E                     u3090:
  7010   012E3E                     
  7011                           ;xf/xf.c: 93:     theXF.in = 0;
  7012   012E3E  0E00               	movlw	0
  7013   012E40  CFE8 F3DC          	movff	wreg,_theXF+276
  7014                           
  7015                           ;xf/xf.c: 94:     theXF.out = 0;
  7016   012E44  0E00               	movlw	0
  7017   012E46  CFE8 F3DD          	movff	wreg,_theXF+277
  7018                           
  7019                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  7020   012E4A  0E00               	movlw	0
  7021   012E4C  CFE8 F3DE          	movff	wreg,_theXF+278
  7022                           
  7023                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  7024   012E50  0E00               	movlw	0
  7025   012E52  CFE8 F3DF          	movff	wreg,_theXF+279
  7026   012E56                     
  7027                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  7028   012E56  52E5               	movf	postdec1,f,c
  7029   012E58  52E5               	movf	postdec1,f,c
  7030   012E5A  0012               	return		;funcret
  7031   012E5C                     __end_of_XF_init:
  7032                           	callstack 0
  7033                           
  7034 ;; *************** function _Event_init *****************
  7035 ;; Defined at:
  7036 ;;		line 4 in file "xf/event.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  me              2  [STACK] PTR struct Event_
  7039 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;		None
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1  [STACK] void 
  7044 ;; Registers used:
  7045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;Total ram usage:        0 bytes
  7056 ;; Hardware stack levels used: 1
  7057 ;; Hardware stack levels required when called: 7
  7058 ;; This function calls:
  7059 ;;		Nothing
  7060 ;; This function is called by:
  7061 ;;		_XF_init
  7062 ;;		_XF_unscheduleTimer
  7063 ;;		_XF_post
  7064 ;; This function uses a reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text17
  7068   014854                     __ptext17:
  7069                           	callstack 0
  7070   014854                     _Event_init:
  7071                           	callstack 10
  7072   014854                     
  7073                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  7074                           ;stkvar	_me @ sp[(0)+-2]
  7075   014854  0EFE               	movlw	-2
  7076   014856  CFE3 FFD9          	movff	plusw1,fsr2l
  7077   01485A  0EFF               	movlw	-1
  7078   01485C  CFE3 FFDA          	movff	plusw1,fsr2h
  7079   014860  6ADF               	clrf	indf2,c
  7080   014862                     
  7081                           ;xf/event.c: 7:     me->delay = 0;
  7082                           ;stkvar	_me @ sp[(0)+-2]
  7083   014862  0EFE               	movlw	-2
  7084   014864  CFE3 F034          	movff	plusw1,btemp+10
  7085   014868  0EFF               	movlw	-1
  7086   01486A  CFE3 F035          	movff	plusw1,btemp+11
  7087   01486E  0E04               	movlw	4
  7088   014870  2434               	addwf	(btemp+10)^0,w,c
  7089   014872  6ED9               	movwf	fsr2l,c
  7090   014874  0E00               	movlw	0
  7091   014876  2035               	addwfc	(btemp+11)^0,w,c
  7092   014878  6EDA               	movwf	fsr2h,c
  7093   01487A  6ADE               	clrf	postinc2,c
  7094   01487C  6ADD               	clrf	postdec2,c
  7095   01487E                     
  7096                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  7097                           ;stkvar	_me @ sp[(0)+-2]
  7098   01487E  0EFE               	movlw	-2
  7099   014880  CFE3 F034          	movff	plusw1,btemp+10
  7100   014884  0EFF               	movlw	-1
  7101   014886  CFE3 F035          	movff	plusw1,btemp+11
  7102   01488A  0E01               	movlw	1
  7103   01488C  2434               	addwf	(btemp+10)^0,w,c
  7104   01488E  6ED9               	movwf	fsr2l,c
  7105   014890  0E00               	movlw	0
  7106   014892  2035               	addwfc	(btemp+11)^0,w,c
  7107   014894  6EDA               	movwf	fsr2h,c
  7108   014896  6ADE               	clrf	postinc2,c
  7109   014898  6ADE               	clrf	postinc2,c
  7110   01489A  6ADD               	clrf	postdec2,c
  7111   01489C                     
  7112                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  7113   01489C  52E5               	movf	postdec1,f,c
  7114   01489E  52E5               	movf	postdec1,f,c
  7115   0148A0  0012               	return		;funcret
  7116   0148A2                     __end_of_Event_init:
  7117                           	callstack 0
  7118                           
  7119 ;; *************** function _XF_executeOnce *****************
  7120 ;; Defined at:
  7121 ;;		line 290 in file "xf/xf.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;  ev              6  [STACK] struct Event_
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1  [STACK] void 
  7128 ;; Registers used:
  7129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:        0 bytes
  7140 ;; Hardware stack levels used: 1
  7141 ;; Hardware stack levels required when called: 14
  7142 ;; This function calls:
  7143 ;;		_XF_popEvent
  7144 ;;		_lightControl_Process
  7145 ;;		_motorControl_Process
  7146 ;; This function is called by:
  7147 ;;		_main
  7148 ;; This function uses a reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text18
  7152   0143C6                     __ptext18:
  7153                           	callstack 0
  7154   0143C6                     _XF_executeOnce:
  7155                           	callstack 0
  7156                           
  7157                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7158   0143C6  0E06               	movlw	6
  7159   0143C8  26E1               	addwf	fsr1l,f,c
  7160   0143CA  0E00               	movlw	0
  7161   0143CC  22E2               	addwfc	fsr1h,f,c
  7162   0143CE                     
  7163                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  7164   0143CE  0E00               	movlw	0
  7165   0143D0  6EE6               	movwf	postinc1,c
  7166   0143D2  EC70  F09D         	call	_XF_popEvent	;wreg free
  7167                           
  7168                           ;stkvar	_ev @ sp[(-12)+0]
  7169   0143D6  0EFA               	movlw	250
  7170   0143D8  24E1               	addwf	fsr1l,w,c
  7171   0143DA  6ED9               	movwf	fsr2l,c
  7172   0143DC  0EFF               	movlw	255
  7173   0143DE  20E2               	addwfc	fsr1h,w,c
  7174   0143E0  6EDA               	movwf	fsr2h,c
  7175   0143E2  0E06               	movlw	6
  7176   0143E4  6E2A               	movwf	btemp^0,c
  7177   0143E6                     uf310999:
  7178   0143E6  50DD               	movf	postdec2,w,c
  7179   0143E8  52E5               	movf	postdec1,f,c
  7180   0143EA  50E7               	movf	indf1,w,c
  7181   0143EC  6EDF               	movwf	indf2,c
  7182   0143EE  2E2A               	decfsz	btemp^0,f,c
  7183   0143F0  D7FA               	bra	uf310999
  7184   0143F2                     
  7185                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  7186                           ;stkvar	_ev @ sp[(-6)+0]
  7187   0143F2  0EFB               	movlw	251
  7188   0143F4  24E1               	addwf	fsr1l,w,c
  7189   0143F6  6ED9               	movwf	fsr2l,c
  7190   0143F8  0EFF               	movlw	255
  7191   0143FA  20E2               	addwfc	fsr1h,w,c
  7192   0143FC  6EDA               	movwf	fsr2h,c
  7193   0143FE  50DE               	movf	postinc2,w,c
  7194   014400  10DE               	iorwf	postinc2,w,c
  7195   014402  10DE               	iorwf	postinc2,w,c
  7196   014404  B4D8               	btfsc	status,2,c
  7197   014406  EF07  F0A2         	goto	u3111
  7198   01440A  EF09  F0A2         	goto	u3110
  7199   01440E                     u3111:
  7200   01440E  EF26  F0A2         	goto	l1261
  7201   014412                     u3110:
  7202   014412                     
  7203                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  7204                           ;stkvar	_ev @ sp[(-6)+0]
  7205   014412  0EFA               	movlw	250
  7206   014414  24E1               	addwf	fsr1l,w,c
  7207   014416  6E2A               	movwf	btemp^0,c
  7208   014418  0EFF               	movlw	255
  7209   01441A  20E2               	addwfc	fsr1h,w,c
  7210   01441C  6E2B               	movwf	(btemp+1)^0,c
  7211   01441E  C02A  FFE6         	movff	btemp,postinc1
  7212   014422  C02B  FFE6         	movff	btemp+1,postinc1
  7213                           
  7214                           ;stkvar	_ev @ sp[(-8)+0]
  7215   014426  0EF9               	movlw	249
  7216   014428  24E1               	addwf	fsr1l,w,c
  7217   01442A  6ED9               	movwf	fsr2l,c
  7218   01442C  0EFF               	movlw	255
  7219   01442E  20E2               	addwfc	fsr1h,w,c
  7220   014430  6EDA               	movwf	fsr2h,c
  7221   014432  D802               	call	u3128
  7222   014434  EF26  F0A2         	goto	u3129
  7223   014438                     u3128:
  7224   014438  0005               	push	
  7225   01443A  6EFA               	movwf	pclath,c
  7226   01443C  50DE               	movf	postinc2,w,c
  7227   01443E  6EFD               	movwf	tosl,c
  7228   014440  50DE               	movf	postinc2,w,c
  7229   014442  6EFE               	movwf	tosh,c
  7230   014444  50DE               	movf	postinc2,w,c
  7231   014446  6EFF               	movwf	tosu,c
  7232   014448  50FA               	movf	pclath,w,c
  7233   01444A  0012               	return		;indir
  7234   01444C                     u3129:
  7235   01444C                     l1261:
  7236                           
  7237                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  7238   01444C  0EFA               	movlw	250
  7239   01444E  26E1               	addwf	fsr1l,f,c
  7240   014450  0EFF               	movlw	255
  7241   014452  22E2               	addwfc	fsr1h,f,c
  7242   014454  0012               	return		;funcret
  7243   014456                     __end_of_XF_executeOnce:
  7244                           	callstack 0
  7245                           
  7246 ;; *************** function _lightControl_Process *****************
  7247 ;; Defined at:
  7248 ;;		line 209 in file "carFunctions.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  ev              2  [STACK] PTR struct Event_
  7251 ;;		 -> ev(6), 
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;		None
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1  [STACK] _Bool 
  7256 ;; Registers used:
  7257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;Total ram usage:        0 bytes
  7268 ;; Hardware stack levels used: 1
  7269 ;; Hardware stack levels required when called: 13
  7270 ;; This function calls:
  7271 ;;		_lightContol_BackLight
  7272 ;;		_lightContol_FrontLight
  7273 ;; This function is called by:
  7274 ;;		_main
  7275 ;;		_updateCarState
  7276 ;;		_XF_executeOnce
  7277 ;; This function uses a reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text19
  7281   0126D2                     __ptext19:
  7282                           	callstack 0
  7283   0126D2                     _lightControl_Process:
  7284                           	callstack 16
  7285   0126D2                     
  7286                           ;carFunctions.c: 209:  _Bool lightControl_Process(Event* ev);carFunctions.c: 210:  {;car
      +                          Functions.c: 219:      static LightState state = INIT;;carFunctions.c: 220:      static 
      +                          LightState oldState = INIT;;carFunctions.c: 221:      switch(state)
  7287   0126D2  EFD7  F093         	goto	l5228
  7288   0126D6                     l5202:
  7289                           
  7290                           ;carFunctions.c: 224:              if(ev->id == E_INIT){
  7291                           ;stkvar	_ev @ sp[(0)+-2]
  7292   0126D6  0EFE               	movlw	-2
  7293   0126D8  CFE3 FFD9          	movff	plusw1,fsr2l
  7294   0126DC  0EFF               	movlw	-1
  7295   0126DE  CFE3 FFDA          	movff	plusw1,fsr2h
  7296   0126E2  50DF               	movf	indf2,w,c
  7297   0126E4  06E8               	decf	wreg,f,c
  7298   0126E6  A4D8               	btfss	status,2,c
  7299   0126E8  EF78  F093         	goto	u2991
  7300   0126EC  EF7A  F093         	goto	u2990
  7301   0126F0                     u2991:
  7302   0126F0  EFF4  F093         	goto	l5230
  7303   0126F4                     u2990:
  7304   0126F4                     l5204:
  7305                           
  7306                           ;carFunctions.c: 225:                  state = OFF;
  7307   0126F4  0E01               	movlw	1
  7308   0126F6  6E25               	movwf	lightControl_Process@state^0,c
  7309   0126F8  EFF4  F093         	goto	l5230
  7310   0126FC                     l5206:
  7311                           
  7312                           ;carFunctions.c: 229:              if(ev->id == E_CONTACT_ON)
  7313                           ;stkvar	_ev @ sp[(0)+-2]
  7314   0126FC  0EFE               	movlw	-2
  7315   0126FE  CFE3 FFD9          	movff	plusw1,fsr2l
  7316   012702  0EFF               	movlw	-1
  7317   012704  CFE3 FFDA          	movff	plusw1,fsr2h
  7318   012708  50DF               	movf	indf2,w,c
  7319   01270A  0A03               	xorlw	3
  7320   01270C  A4D8               	btfss	status,2,c
  7321   01270E  EF8B  F093         	goto	u3001
  7322   012712  EF8D  F093         	goto	u3000
  7323   012716                     u3001:
  7324   012716  EFF4  F093         	goto	l5230
  7325   01271A                     u3000:
  7326   01271A                     l5208:
  7327                           
  7328                           ;carFunctions.c: 230:              {;carFunctions.c: 231:                  state = CRUIS
      +                          E;
  7329   01271A  0E02               	movlw	2
  7330   01271C  6E25               	movwf	lightControl_Process@state^0,c
  7331   01271E  EFF4  F093         	goto	l5230
  7332   012722                     l5210:
  7333                           
  7334                           ;carFunctions.c: 236:              if(ev->id == E_CONTACT_OFF)
  7335                           ;stkvar	_ev @ sp[(0)+-2]
  7336   012722  0EFE               	movlw	-2
  7337   012724  CFE3 FFD9          	movff	plusw1,fsr2l
  7338   012728  0EFF               	movlw	-1
  7339   01272A  CFE3 FFDA          	movff	plusw1,fsr2h
  7340   01272E  50DF               	movf	indf2,w,c
  7341   012730  0A02               	xorlw	2
  7342   012732  A4D8               	btfss	status,2,c
  7343   012734  EF9E  F093         	goto	u3011
  7344   012738  EFA0  F093         	goto	u3010
  7345   01273C                     u3011:
  7346   01273C  EFA2  F093         	goto	l5214
  7347   012740                     u3010:
  7348   012740  EF7A  F093         	goto	l5204
  7349   012744                     l5214:
  7350                           
  7351                           ;stkvar	_ev @ sp[(0)+-2]
  7352   012744  0EFE               	movlw	-2
  7353   012746  CFE3 FFD9          	movff	plusw1,fsr2l
  7354   01274A  0EFF               	movlw	-1
  7355   01274C  CFE3 FFDA          	movff	plusw1,fsr2h
  7356   012750  50DF               	movf	indf2,w,c
  7357   012752  0A04               	xorlw	4
  7358   012754  A4D8               	btfss	status,2,c
  7359   012756  EFAF  F093         	goto	u3021
  7360   01275A  EFB1  F093         	goto	u3020
  7361   01275E                     u3021:
  7362   01275E  EFF4  F093         	goto	l5230
  7363   012762                     u3020:
  7364   012762                     
  7365                           ;carFunctions.c: 242:              {;carFunctions.c: 243:                  state = BRAKE
      +                          ;
  7366   012762  0E03               	movlw	3
  7367   012764  6E25               	movwf	lightControl_Process@state^0,c
  7368   012766  EFF4  F093         	goto	l5230
  7369   01276A                     l5218:
  7370                           
  7371                           ;carFunctions.c: 247:              if(ev->id == E_CONTACT_OFF)
  7372                           ;stkvar	_ev @ sp[(0)+-2]
  7373   01276A  0EFE               	movlw	-2
  7374   01276C  CFE3 FFD9          	movff	plusw1,fsr2l
  7375   012770  0EFF               	movlw	-1
  7376   012772  CFE3 FFDA          	movff	plusw1,fsr2h
  7377   012776  50DF               	movf	indf2,w,c
  7378   012778  0A02               	xorlw	2
  7379   01277A  A4D8               	btfss	status,2,c
  7380   01277C  EFC2  F093         	goto	u3031
  7381   012780  EFC4  F093         	goto	u3030
  7382   012784                     u3031:
  7383   012784  EFC6  F093         	goto	l5222
  7384   012788                     u3030:
  7385   012788  EF7A  F093         	goto	l5204
  7386   01278C                     l5222:
  7387                           
  7388                           ;stkvar	_ev @ sp[(0)+-2]
  7389   01278C  0EFE               	movlw	-2
  7390   01278E  CFE3 FFD9          	movff	plusw1,fsr2l
  7391   012792  0EFF               	movlw	-1
  7392   012794  CFE3 FFDA          	movff	plusw1,fsr2h
  7393   012798  50DF               	movf	indf2,w,c
  7394   01279A  0A0A               	xorlw	10
  7395   01279C  A4D8               	btfss	status,2,c
  7396   01279E  EFD3  F093         	goto	u3041
  7397   0127A2  EFD5  F093         	goto	u3040
  7398   0127A6                     u3041:
  7399   0127A6  EFF4  F093         	goto	l5230
  7400   0127AA                     u3040:
  7401   0127AA  EF8D  F093         	goto	l5208
  7402   0127AE                     l5228:
  7403   0127AE  5025               	movf	lightControl_Process@state^0,w,c
  7404   0127B0  6E34               	movwf	(btemp+10)^0,c
  7405   0127B2  6A35               	clrf	(btemp+11)^0,c
  7406                           
  7407                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7408                           ; Switch size 1, requested type "simple"
  7409                           ; Number of cases is 1, Range of values is 0 to 0
  7410                           ; switch strategies available:
  7411                           ; Name         Instructions Cycles
  7412                           ; simple_byte            4     3 (average)
  7413                           ;	Chosen strategy is simple_byte
  7414   0127B4  5035               	movf	(btemp+11)^0,w,c
  7415   0127B6  0A00               	xorlw	0	; case 0
  7416   0127B8  B4D8               	btfsc	status,2,c
  7417   0127BA  EFE1  F093         	goto	l5666
  7418   0127BE  EFF4  F093         	goto	l5230
  7419   0127C2                     l5666:
  7420                           
  7421                           ; Switch size 1, requested type "simple"
  7422                           ; Number of cases is 4, Range of values is 0 to 3
  7423                           ; switch strategies available:
  7424                           ; Name         Instructions Cycles
  7425                           ; simple_byte           13     7 (average)
  7426                           ;	Chosen strategy is simple_byte
  7427   0127C2  5034               	movf	(btemp+10)^0,w,c
  7428   0127C4  0A00               	xorlw	0	; case 0
  7429   0127C6  B4D8               	btfsc	status,2,c
  7430   0127C8  EF6B  F093         	goto	l5202
  7431   0127CC  0A01               	xorlw	1	; case 1
  7432   0127CE  B4D8               	btfsc	status,2,c
  7433   0127D0  EF7E  F093         	goto	l5206
  7434   0127D4  0A03               	xorlw	3	; case 2
  7435   0127D6  B4D8               	btfsc	status,2,c
  7436   0127D8  EF91  F093         	goto	l5210
  7437   0127DC  0A01               	xorlw	1	; case 3
  7438   0127DE  B4D8               	btfsc	status,2,c
  7439   0127E0  EFB5  F093         	goto	l5218
  7440   0127E4  EFF4  F093         	goto	l5230
  7441   0127E8                     l5230:
  7442                           
  7443                           ;carFunctions.c: 259:     if(oldState == state)
  7444   0127E8  5025               	movf	lightControl_Process@state^0,w,c
  7445   0127EA  1824               	xorwf	lightControl_Process@oldState^0,w,c
  7446   0127EC  A4D8               	btfss	status,2,c
  7447   0127EE  EFFB  F093         	goto	u3051
  7448   0127F2  EFFD  F093         	goto	u3050
  7449   0127F6                     u3051:
  7450   0127F6  EFFF  F093         	goto	l1511
  7451   0127FA                     u3050:
  7452   0127FA  EF3A  F094         	goto	l1512
  7453   0127FE                     l1511:
  7454                           
  7455                           ;carFunctions.c: 263:     oldState = state;
  7456   0127FE  C025  F024         	movff	lightControl_Process@state,lightControl_Process@oldState
  7457                           
  7458                           ;carFunctions.c: 264:     switch(state)
  7459   012802  EF1D  F094         	goto	l5242
  7460   012806                     l5234:
  7461                           
  7462                           ;carFunctions.c: 269:              lightContol_FrontLight(0);
  7463   012806  0E00               	movlw	0
  7464   012808  6EE6               	movwf	postinc1,c
  7465   01280A  ECAE  F09F         	call	_lightContol_FrontLight	;wreg free
  7466                           
  7467                           ;carFunctions.c: 270:              lightContol_BackLight(0);
  7468   01280E  0E00               	movlw	0
  7469   012810  6EE6               	movwf	postinc1,c
  7470   012812  EC54  F09F         	call	_lightContol_BackLight	;wreg free
  7471                           
  7472                           ;carFunctions.c: 271:              break;
  7473   012816  EF3A  F094         	goto	l1512
  7474   01281A                     l5236:
  7475                           
  7476                           ;carFunctions.c: 273:              lightContol_FrontLight(50);
  7477   01281A  0E32               	movlw	50
  7478   01281C  6EE6               	movwf	postinc1,c
  7479   01281E  ECAE  F09F         	call	_lightContol_FrontLight	;wreg free
  7480                           
  7481                           ;carFunctions.c: 274:              lightContol_BackLight(50);
  7482   012822  0E32               	movlw	50
  7483   012824  6EE6               	movwf	postinc1,c
  7484   012826  EC54  F09F         	call	_lightContol_BackLight	;wreg free
  7485                           
  7486                           ;carFunctions.c: 275:              break;
  7487   01282A  EF3A  F094         	goto	l1512
  7488   01282E                     l5238:
  7489                           
  7490                           ;carFunctions.c: 277:              lightContol_BackLight(100);
  7491   01282E  0E64               	movlw	100
  7492   012830  6EE6               	movwf	postinc1,c
  7493   012832  EC54  F09F         	call	_lightContol_BackLight	;wreg free
  7494                           
  7495                           ;carFunctions.c: 278:              break;
  7496   012836  EF3A  F094         	goto	l1512
  7497   01283A                     l5242:
  7498   01283A  5025               	movf	lightControl_Process@state^0,w,c
  7499   01283C  6E34               	movwf	(btemp+10)^0,c
  7500   01283E  6A35               	clrf	(btemp+11)^0,c
  7501                           
  7502                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7503                           ; Switch size 1, requested type "simple"
  7504                           ; Number of cases is 1, Range of values is 0 to 0
  7505                           ; switch strategies available:
  7506                           ; Name         Instructions Cycles
  7507                           ; simple_byte            4     3 (average)
  7508                           ;	Chosen strategy is simple_byte
  7509   012840  5035               	movf	(btemp+11)^0,w,c
  7510   012842  0A00               	xorlw	0	; case 0
  7511   012844  B4D8               	btfsc	status,2,c
  7512   012846  EF27  F094         	goto	l5668
  7513   01284A  EF3A  F094         	goto	l1512
  7514   01284E                     l5668:
  7515                           
  7516                           ; Switch size 1, requested type "simple"
  7517                           ; Number of cases is 4, Range of values is 0 to 3
  7518                           ; switch strategies available:
  7519                           ; Name         Instructions Cycles
  7520                           ; simple_byte           13     7 (average)
  7521                           ;	Chosen strategy is simple_byte
  7522   01284E  5034               	movf	(btemp+10)^0,w,c
  7523   012850  0A00               	xorlw	0	; case 0
  7524   012852  B4D8               	btfsc	status,2,c
  7525   012854  EF3A  F094         	goto	l1512
  7526   012858  0A01               	xorlw	1	; case 1
  7527   01285A  B4D8               	btfsc	status,2,c
  7528   01285C  EF03  F094         	goto	l5234
  7529   012860  0A03               	xorlw	3	; case 2
  7530   012862  B4D8               	btfsc	status,2,c
  7531   012864  EF0D  F094         	goto	l5236
  7532   012868  0A01               	xorlw	1	; case 3
  7533   01286A  B4D8               	btfsc	status,2,c
  7534   01286C  EF17  F094         	goto	l5238
  7535   012870  EF3A  F094         	goto	l1512
  7536   012874                     l1512:
  7537                           
  7538                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7539   012874  52E5               	movf	postdec1,f,c
  7540   012876  52E5               	movf	postdec1,f,c
  7541   012878  0012               	return		;funcret
  7542   01287A                     __end_of_lightControl_Process:
  7543                           	callstack 0
  7544                           
  7545 ;; *************** function _motorControl_Process *****************
  7546 ;; Defined at:
  7547 ;;		line 92 in file "carFunctions.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  ev              2  [STACK] PTR struct Event_
  7550 ;;		 -> ev(6), 
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;                  1  [STACK] _Bool 
  7555 ;; Registers used:
  7556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used: 1
  7568 ;; Hardware stack levels required when called: 13
  7569 ;; This function calls:
  7570 ;;		_motorControl
  7571 ;; This function is called by:
  7572 ;;		_updateCarState
  7573 ;;		_XF_executeOnce
  7574 ;; This function uses a reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text20
  7578   0120A6                     __ptext20:
  7579                           	callstack 0
  7580   0120A6                     _motorControl_Process:
  7581                           	callstack 16
  7582   0120A6                     
  7583                           ;carFunctions.c: 105:      static MotorState state = OFF;;carFunctions.c: 106:      stat
      +                          ic MotorState oldState = OFF;;carFunctions.c: 110:      switch(state)
  7584   0120A6  EF03  F091         	goto	l5178
  7585   0120AA                     l5136:
  7586                           
  7587                           ;carFunctions.c: 114:              if(ev->id == E_CONTACT_ON)
  7588                           ;stkvar	_ev @ sp[(0)+-2]
  7589   0120AA  0EFE               	movlw	-2
  7590   0120AC  CFE3 FFD9          	movff	plusw1,fsr2l
  7591   0120B0  0EFF               	movlw	-1
  7592   0120B2  CFE3 FFDA          	movff	plusw1,fsr2h
  7593   0120B6  50DF               	movf	indf2,w,c
  7594   0120B8  0A03               	xorlw	3
  7595   0120BA  A4D8               	btfss	status,2,c
  7596   0120BC  EF62  F090         	goto	u2881
  7597   0120C0  EF64  F090         	goto	u2880
  7598   0120C4                     u2881:
  7599   0120C4  EF28  F091         	goto	l5180
  7600   0120C8                     u2880:
  7601   0120C8                     
  7602                           ;carFunctions.c: 115:              {;carFunctions.c: 116:                  state = START
      +                          ING;
  7603   0120C8  0E02               	movlw	2
  7604   0120CA  6E5E               	movwf	motorControl_Process@state^0,c
  7605   0120CC  EF28  F091         	goto	l5180
  7606   0120D0                     l5140:
  7607                           
  7608                           ;carFunctions.c: 122:                  state = STANDBY;
  7609   0120D0  0E05               	movlw	5
  7610   0120D2  6E5E               	movwf	motorControl_Process@state^0,c
  7611                           
  7612                           ;carFunctions.c: 123:              break;
  7613   0120D4  EF28  F091         	goto	l5180
  7614   0120D8                     l5142:
  7615                           
  7616                           ;carFunctions.c: 126:              if(ev->id == E_CONTACT_OFF)
  7617                           ;stkvar	_ev @ sp[(0)+-2]
  7618   0120D8  0EFE               	movlw	-2
  7619   0120DA  CFE3 FFD9          	movff	plusw1,fsr2l
  7620   0120DE  0EFF               	movlw	-1
  7621   0120E0  CFE3 FFDA          	movff	plusw1,fsr2h
  7622   0120E4  50DF               	movf	indf2,w,c
  7623   0120E6  0A02               	xorlw	2
  7624   0120E8  A4D8               	btfss	status,2,c
  7625   0120EA  EF79  F090         	goto	u2891
  7626   0120EE  EF7B  F090         	goto	u2890
  7627   0120F2                     u2891:
  7628   0120F2  EF7F  F090         	goto	l5146
  7629   0120F6                     u2890:
  7630   0120F6                     
  7631                           ;carFunctions.c: 127:              {;carFunctions.c: 128:                  state = OFF;
  7632   0120F6  0E01               	movlw	1
  7633   0120F8  6E5E               	movwf	motorControl_Process@state^0,c
  7634                           
  7635                           ;carFunctions.c: 129:              }else if(ev->id == E_ACCELERATION_ON)
  7636   0120FA  EF90  F090         	goto	l5150
  7637   0120FE                     l5146:
  7638                           
  7639                           ;stkvar	_ev @ sp[(0)+-2]
  7640   0120FE  0EFE               	movlw	-2
  7641   012100  CFE3 FFD9          	movff	plusw1,fsr2l
  7642   012104  0EFF               	movlw	-1
  7643   012106  CFE3 FFDA          	movff	plusw1,fsr2h
  7644   01210A  50DF               	movf	indf2,w,c
  7645   01210C  0A08               	xorlw	8
  7646   01210E  A4D8               	btfss	status,2,c
  7647   012110  EF8C  F090         	goto	u2901
  7648   012114  EF8E  F090         	goto	u2900
  7649   012118                     u2901:
  7650   012118  EF90  F090         	goto	l5150
  7651   01211C                     u2900:
  7652   01211C                     
  7653                           ;carFunctions.c: 130:              {;carFunctions.c: 131:                  state = ACCEL
      +                          ERATION;
  7654   01211C  0E06               	movlw	6
  7655   01211E  6E5E               	movwf	motorControl_Process@state^0,c
  7656   012120                     l5150:
  7657                           
  7658                           ;carFunctions.c: 134:              if(ev->id == E_ACCELERATION_OFF)
  7659                           ;stkvar	_ev @ sp[(0)+-2]
  7660   012120  0EFE               	movlw	-2
  7661   012122  CFE3 FFD9          	movff	plusw1,fsr2l
  7662   012126  0EFF               	movlw	-1
  7663   012128  CFE3 FFDA          	movff	plusw1,fsr2h
  7664   01212C  50DF               	movf	indf2,w,c
  7665   01212E  0A09               	xorlw	9
  7666   012130  A4D8               	btfss	status,2,c
  7667   012132  EF9D  F090         	goto	u2911
  7668   012136  EF9F  F090         	goto	u2910
  7669   01213A                     u2911:
  7670   01213A  EFA3  F090         	goto	l5154
  7671   01213E                     u2910:
  7672   01213E                     l5152:
  7673                           
  7674                           ;carFunctions.c: 135:              {;carFunctions.c: 136:                  state = DECEL
      +                          ERATION;
  7675   01213E  0E07               	movlw	7
  7676   012140  6E5E               	movwf	motorControl_Process@state^0,c
  7677                           
  7678                           ;carFunctions.c: 137:              }else if(ev->id == E_HIGH_BRAKE)
  7679   012142  EF28  F091         	goto	l5180
  7680   012146                     l5154:
  7681                           
  7682                           ;stkvar	_ev @ sp[(0)+-2]
  7683   012146  0EFE               	movlw	-2
  7684   012148  CFE3 FFD9          	movff	plusw1,fsr2l
  7685   01214C  0EFF               	movlw	-1
  7686   01214E  CFE3 FFDA          	movff	plusw1,fsr2h
  7687   012152  50DF               	movf	indf2,w,c
  7688   012154  0A04               	xorlw	4
  7689   012156  A4D8               	btfss	status,2,c
  7690   012158  EFB0  F090         	goto	u2921
  7691   01215C  EFB2  F090         	goto	u2920
  7692   012160                     u2921:
  7693   012160  EF28  F091         	goto	l5180
  7694   012164                     u2920:
  7695   012164  EF9F  F090         	goto	l5152
  7696   012168                     l5158:
  7697                           
  7698                           ;carFunctions.c: 144:              if (carState.speed == 0){
  7699   012168  500A               	movf	(_carState+9)^0,w,c
  7700   01216A  100B               	iorwf	(_carState+10)^0,w,c
  7701   01216C  A4D8               	btfss	status,2,c
  7702   01216E  EFBB  F090         	goto	u2931
  7703   012172  EFBD  F090         	goto	u2930
  7704   012176                     u2931:
  7705   012176  EFBF  F090         	goto	l5162
  7706   01217A                     u2930:
  7707   01217A  EF68  F090         	goto	l5140
  7708   01217E                     l5162:
  7709   01217E  BE0B               	btfsc	(_carState+10)^0,7,c
  7710   012180  EFCA  F090         	goto	u2941
  7711   012184  500B               	movf	(_carState+10)^0,w,c
  7712   012186  E108               	bnz	u2940
  7713   012188  040A               	decf	(_carState+9)^0,w,c
  7714   01218A  A0D8               	btfss	status,0,c
  7715   01218C  EFCA  F090         	goto	u2941
  7716   012190  EFCC  F090         	goto	u2940
  7717   012194                     u2941:
  7718   012194  EF28  F091         	goto	l5180
  7719   012198                     u2940:
  7720   012198                     
  7721                           ;stkvar	_ev @ sp[(0)+-2]
  7722   012198  0EFE               	movlw	-2
  7723   01219A  CFE3 FFD9          	movff	plusw1,fsr2l
  7724   01219E  0EFF               	movlw	-1
  7725   0121A0  CFE3 FFDA          	movff	plusw1,fsr2h
  7726   0121A4  50DF               	movf	indf2,w,c
  7727   0121A6  0A04               	xorlw	4
  7728   0121A8  B4D8               	btfsc	status,2,c
  7729   0121AA  EFD9  F090         	goto	u2951
  7730   0121AE  EFDB  F090         	goto	u2950
  7731   0121B2                     u2951:
  7732   0121B2  EF28  F091         	goto	l5180
  7733   0121B6                     u2950:
  7734   0121B6                     
  7735                           ;carFunctions.c: 147:                  state = CRUISE;
  7736   0121B6  0E03               	movlw	3
  7737   0121B8  6E5E               	movwf	motorControl_Process@state^0,c
  7738   0121BA  EF28  F091         	goto	l5180
  7739   0121BE                     l5168:
  7740                           
  7741                           ;carFunctions.c: 153:              if(ev->id == E_CONTACT_OFF)
  7742                           ;stkvar	_ev @ sp[(0)+-2]
  7743   0121BE  0EFE               	movlw	-2
  7744   0121C0  CFE3 FFD9          	movff	plusw1,fsr2l
  7745   0121C4  0EFF               	movlw	-1
  7746   0121C6  CFE3 FFDA          	movff	plusw1,fsr2h
  7747   0121CA  50DF               	movf	indf2,w,c
  7748   0121CC  0A02               	xorlw	2
  7749   0121CE  A4D8               	btfss	status,2,c
  7750   0121D0  EFEC  F090         	goto	u2961
  7751   0121D4  EFEE  F090         	goto	u2960
  7752   0121D8                     u2961:
  7753   0121D8  EFF2  F090         	goto	l5172
  7754   0121DC                     u2960:
  7755   0121DC                     
  7756                           ;carFunctions.c: 154:              {;carFunctions.c: 155:                  state = OFF;
  7757   0121DC  0E01               	movlw	1
  7758   0121DE  6E5E               	movwf	motorControl_Process@state^0,c
  7759                           
  7760                           ;carFunctions.c: 156:              }else if(ev->id == E_ACCELERATION_OFF)
  7761   0121E0  EF28  F091         	goto	l5180
  7762   0121E4                     l5172:
  7763                           
  7764                           ;stkvar	_ev @ sp[(0)+-2]
  7765   0121E4  0EFE               	movlw	-2
  7766   0121E6  CFE3 FFD9          	movff	plusw1,fsr2l
  7767   0121EA  0EFF               	movlw	-1
  7768   0121EC  CFE3 FFDA          	movff	plusw1,fsr2h
  7769   0121F0  50DF               	movf	indf2,w,c
  7770   0121F2  0A09               	xorlw	9
  7771   0121F4  A4D8               	btfss	status,2,c
  7772   0121F6  EFFF  F090         	goto	u2971
  7773   0121FA  EF01  F091         	goto	u2970
  7774   0121FE                     u2971:
  7775   0121FE  EF28  F091         	goto	l5180
  7776   012202                     u2970:
  7777   012202  EF68  F090         	goto	l5140
  7778   012206                     l5178:
  7779   012206  505E               	movf	motorControl_Process@state^0,w,c
  7780   012208  6E34               	movwf	(btemp+10)^0,c
  7781   01220A  6A35               	clrf	(btemp+11)^0,c
  7782                           
  7783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7784                           ; Switch size 1, requested type "simple"
  7785                           ; Number of cases is 1, Range of values is 0 to 0
  7786                           ; switch strategies available:
  7787                           ; Name         Instructions Cycles
  7788                           ; simple_byte            4     3 (average)
  7789                           ;	Chosen strategy is simple_byte
  7790   01220C  5035               	movf	(btemp+11)^0,w,c
  7791   01220E  0A00               	xorlw	0	; case 0
  7792   012210  B4D8               	btfsc	status,2,c
  7793   012212  EF0D  F091         	goto	l5670
  7794   012216  EF28  F091         	goto	l5180
  7795   01221A                     l5670:
  7796                           
  7797                           ; Switch size 1, requested type "simple"
  7798                           ; Number of cases is 6, Range of values is 1 to 7
  7799                           ; switch strategies available:
  7800                           ; Name         Instructions Cycles
  7801                           ; simple_byte           19    10 (average)
  7802                           ;	Chosen strategy is simple_byte
  7803   01221A  5034               	movf	(btemp+10)^0,w,c
  7804   01221C  0A01               	xorlw	1	; case 1
  7805   01221E  B4D8               	btfsc	status,2,c
  7806   012220  EF55  F090         	goto	l5136
  7807   012224  0A03               	xorlw	3	; case 2
  7808   012226  B4D8               	btfsc	status,2,c
  7809   012228  EF68  F090         	goto	l5140
  7810   01222C  0A01               	xorlw	1	; case 3
  7811   01222E  B4D8               	btfsc	status,2,c
  7812   012230  EFDF  F090         	goto	l5168
  7813   012234  0A06               	xorlw	6	; case 5
  7814   012236  B4D8               	btfsc	status,2,c
  7815   012238  EF6C  F090         	goto	l5142
  7816   01223C  0A03               	xorlw	3	; case 6
  7817   01223E  B4D8               	btfsc	status,2,c
  7818   012240  EF90  F090         	goto	l5150
  7819   012244  0A01               	xorlw	1	; case 7
  7820   012246  B4D8               	btfsc	status,2,c
  7821   012248  EFB4  F090         	goto	l5158
  7822   01224C  EF28  F091         	goto	l5180
  7823   012250                     l5180:
  7824                           
  7825                           ;carFunctions.c: 166:      if(oldState == state)
  7826   012250  505E               	movf	motorControl_Process@state^0,w,c
  7827   012252  185D               	xorwf	motorControl_Process@oldState^0,w,c
  7828   012254  A4D8               	btfss	status,2,c
  7829   012256  EF2F  F091         	goto	u2981
  7830   01225A  EF31  F091         	goto	u2980
  7831   01225E                     u2981:
  7832   01225E  EF33  F091         	goto	l1478
  7833   012262                     u2980:
  7834   012262  EF70  F091         	goto	l1479
  7835   012266                     l1478:
  7836                           
  7837                           ;carFunctions.c: 170:     oldState = state;
  7838   012266  C05E  F05D         	movff	motorControl_Process@state,motorControl_Process@oldState
  7839                           
  7840                           ;carFunctions.c: 173:     switch(state)
  7841   01226A  EF47  F091         	goto	l5190
  7842   01226E                     l5184:
  7843                           
  7844                           ;carFunctions.c: 177:              motorControl(0,0);
  7845   01226E  0E00               	movlw	0
  7846   012270  6EE6               	movwf	postinc1,c
  7847   012272  0E00               	movlw	0
  7848   012274  6EE6               	movwf	postinc1,c
  7849   012276  EC2E  F09C         	call	_motorControl	;wreg free
  7850                           
  7851                           ;carFunctions.c: 178:              break;
  7852   01227A  EF70  F091         	goto	l1479
  7853   01227E                     l5186:
  7854                           
  7855                           ;carFunctions.c: 180:              motorControl(10,1);
  7856   01227E  0E01               	movlw	1
  7857   012280  6EE6               	movwf	postinc1,c
  7858   012282  0E0A               	movlw	10
  7859   012284  6EE6               	movwf	postinc1,c
  7860   012286  EC2E  F09C         	call	_motorControl	;wreg free
  7861                           
  7862                           ;carFunctions.c: 181:              break;
  7863   01228A  EF70  F091         	goto	l1479
  7864   01228E                     l5190:
  7865   01228E  505E               	movf	motorControl_Process@state^0,w,c
  7866   012290  6E34               	movwf	(btemp+10)^0,c
  7867   012292  6A35               	clrf	(btemp+11)^0,c
  7868                           
  7869                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7870                           ; Switch size 1, requested type "simple"
  7871                           ; Number of cases is 1, Range of values is 0 to 0
  7872                           ; switch strategies available:
  7873                           ; Name         Instructions Cycles
  7874                           ; simple_byte            4     3 (average)
  7875                           ;	Chosen strategy is simple_byte
  7876   012294  5035               	movf	(btemp+11)^0,w,c
  7877   012296  0A00               	xorlw	0	; case 0
  7878   012298  B4D8               	btfsc	status,2,c
  7879   01229A  EF51  F091         	goto	l5672
  7880   01229E  EF70  F091         	goto	l1479
  7881   0122A2                     l5672:
  7882                           
  7883                           ; Switch size 1, requested type "simple"
  7884                           ; Number of cases is 7, Range of values is 1 to 7
  7885                           ; switch strategies available:
  7886                           ; Name         Instructions Cycles
  7887                           ; simple_byte           22    12 (average)
  7888                           ;	Chosen strategy is simple_byte
  7889   0122A2  5034               	movf	(btemp+10)^0,w,c
  7890   0122A4  0A01               	xorlw	1	; case 1
  7891   0122A6  B4D8               	btfsc	status,2,c
  7892   0122A8  EF37  F091         	goto	l5184
  7893   0122AC  0A03               	xorlw	3	; case 2
  7894   0122AE  B4D8               	btfsc	status,2,c
  7895   0122B0  EF3F  F091         	goto	l5186
  7896   0122B4  0A01               	xorlw	1	; case 3
  7897   0122B6  B4D8               	btfsc	status,2,c
  7898   0122B8  EF70  F091         	goto	l1479
  7899   0122BC  0A07               	xorlw	7	; case 4
  7900   0122BE  B4D8               	btfsc	status,2,c
  7901   0122C0  EF70  F091         	goto	l1479
  7902   0122C4  0A01               	xorlw	1	; case 5
  7903   0122C6  B4D8               	btfsc	status,2,c
  7904   0122C8  EF70  F091         	goto	l1479
  7905   0122CC  0A03               	xorlw	3	; case 6
  7906   0122CE  B4D8               	btfsc	status,2,c
  7907   0122D0  EF70  F091         	goto	l1479
  7908   0122D4  0A01               	xorlw	1	; case 7
  7909   0122D6  B4D8               	btfsc	status,2,c
  7910   0122D8  EF70  F091         	goto	l1479
  7911   0122DC  EF70  F091         	goto	l1479
  7912   0122E0                     l1479:
  7913                           
  7914                           ; _motorControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7915   0122E0  52E5               	movf	postdec1,f,c
  7916   0122E2  52E5               	movf	postdec1,f,c
  7917   0122E4  0012               	return		;funcret
  7918   0122E6                     __end_of_motorControl_Process:
  7919                           	callstack 0
  7920                           
  7921 ;; *************** function _motorControl *****************
  7922 ;; Defined at:
  7923 ;;		line 45 in file "carFunctions.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  percent         1  [STACK] unsigned char 
  7926 ;;  starter         1  [STACK] unsigned char 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7929 ;;  txdata          8  [STACK] unsigned char [8]
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1  [STACK] void 
  7932 ;; Registers used:
  7933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;Total ram usage:        0 bytes
  7944 ;; Hardware stack levels used: 1
  7945 ;; Hardware stack levels required when called: 12
  7946 ;; This function calls:
  7947 ;;		_CanSend
  7948 ;; This function is called by:
  7949 ;;		_motorControl_Process
  7950 ;; This function uses a reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text21
  7954   01385C                     __ptext21:
  7955                           	callstack 0
  7956   01385C                     _motorControl:
  7957                           	callstack 0
  7958                           
  7959                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7960   01385C  0E18               	movlw	24
  7961   01385E  26E1               	addwf	fsr1l,f,c
  7962   013860  0E00               	movlw	0
  7963   013862  22E2               	addwfc	fsr1h,f,c
  7964   013864                     
  7965                           ;carFunctions.c: 46:      static uint8_t lastPercent = 0;;carFunctions.c: 47:      stati
      +                          c uint8_t lastStarter = 0;;carFunctions.c: 48:      CAN_TX_MSGOBJ txMsg={0};
  7966   013864  EE20  F080         	lfsr	2,motorControl@F6669
  7967                           
  7968                           ;stkvar	_txMsg @ sp[(-24)+0]
  7969   013868  0E10               	movlw	16
  7970   01386A  6E2A               	movwf	btemp^0,c
  7971   01386C  0EE8               	movlw	-24
  7972   01386E                     us239999:
  7973   01386E  CFDE FFE3          	movff	postinc2,plusw1
  7974   013872  28E8               	incf	wreg,w,c
  7975   013874  2E2A               	decfsz	btemp^0,f,c
  7976   013876  D7FB               	bra	us239999
  7977   013878                     
  7978                           ;carFunctions.c: 49:      uint8_t txdata[8];;carFunctions.c: 50:          if((lastPercen
      +                          t != percent)||(lastStarter != starter)) {
  7979                           ;stkvar	_percent @ sp[(-24)+-1]
  7980   013878  0EE7               	movlw	-25
  7981   01387A  50E3               	movf	plusw1,w,c
  7982   01387C  1829               	xorwf	motorControl@lastPercent^0,w,c
  7983   01387E  A4D8               	btfss	status,2,c
  7984   013880  EF44  F09C         	goto	u2401
  7985   013884  EF46  F09C         	goto	u2400
  7986   013888                     u2401:
  7987   013888  EF50  F09C         	goto	l4698
  7988   01388C                     u2400:
  7989   01388C                     
  7990                           ;stkvar	_starter @ sp[(-24)+-2]
  7991   01388C  0EE6               	movlw	-26
  7992   01388E  50E3               	movf	plusw1,w,c
  7993   013890  1828               	xorwf	motorControl@lastStarter^0,w,c
  7994   013892  B4D8               	btfsc	status,2,c
  7995   013894  EF4E  F09C         	goto	u2411
  7996   013898  EF50  F09C         	goto	u2410
  7997   01389C                     u2411:
  7998   01389C  EF99  F09C         	goto	l1433
  7999   0138A0                     u2410:
  8000   0138A0                     l4698:
  8001                           
  8002                           ;carFunctions.c: 51:              lastPercent = percent;
  8003                           ;stkvar	_percent @ sp[(-24)+-1]
  8004   0138A0  0EE7               	movlw	-25
  8005   0138A2  CFE3 F029          	movff	plusw1,motorControl@lastPercent
  8006                           
  8007                           ;carFunctions.c: 52:              lastStarter = starter;
  8008                           ;stkvar	_starter @ sp[(-24)+-2]
  8009   0138A6  0EE6               	movlw	-26
  8010   0138A8  CFE3 F028          	movff	plusw1,motorControl@lastStarter
  8011   0138AC                     
  8012                           ;carFunctions.c: 54:              txMsg.bF.id.ID = (0x112);
  8013   0138AC  0E12               	movlw	18
  8014   0138AE  6E32               	movwf	(btemp+8)^0,c
  8015   0138B0  0E01               	movlw	1
  8016   0138B2  6E33               	movwf	(btemp+9)^0,c
  8017   0138B4  0E00               	movlw	0
  8018   0138B6  6E34               	movwf	(btemp+10)^0,c
  8019   0138B8  0E00               	movlw	0
  8020   0138BA  6E35               	movwf	(btemp+11)^0,c
  8021                           
  8022                           ;stkvar	_txMsg @ sp[(-24)+0]
  8023   0138BC  0EE8               	movlw	-24
  8024   0138BE  C032  FFE3         	movff	btemp+8,plusw1
  8025   0138C2  0EE9               	movlw	-23
  8026   0138C4  C033  FFE3         	movff	btemp+9,plusw1
  8027   0138C8  0EEA               	movlw	-22
  8028   0138CA  C034  FFE3         	movff	btemp+10,plusw1
  8029   0138CE  0EEB               	movlw	-21
  8030   0138D0  C035  FFE3         	movff	btemp+11,plusw1
  8031   0138D4                     
  8032                           ;carFunctions.c: 55:              txMsg.bF.ctrl.DLC = CAN_DLC_2;
  8033                           ;stkvar	_txMsg @ sp[(-24)+0]
  8034   0138D4  0EEE               	movlw	238
  8035   0138D6  24E1               	addwf	fsr1l,w,c
  8036   0138D8  6ED9               	movwf	fsr2l,c
  8037   0138DA  0EFF               	movlw	255
  8038   0138DC  20E2               	addwfc	fsr1h,w,c
  8039   0138DE  6EDA               	movwf	fsr2h,c
  8040   0138E0  50DF               	movf	223,w,c
  8041   0138E2  0BF0               	andlw	-16
  8042   0138E4  0902               	iorlw	2
  8043   0138E6  6EDF               	movwf	223,c
  8044   0138E8                     
  8045                           ;carFunctions.c: 56:              txdata[0] = percent;
  8046                           ;stkvar	_percent @ sp[(-24)+-1]
  8047                           ;stkvar	_txdata @ sp[(-24)+16]
  8048   0138E8  0EE7               	movlw	-25
  8049   0138EA  CFE3 F02A          	movff	plusw1,btemp
  8050   0138EE  0EF8               	movlw	-8
  8051   0138F0  C02A  FFE3         	movff	btemp,plusw1
  8052   0138F4                     
  8053                           ;carFunctions.c: 57:              txdata[1] = starter;
  8054                           ;stkvar	_starter @ sp[(-24)+-2]
  8055                           ;stkvar	_txdata @ sp[(-24)+16]
  8056   0138F4  0EF9               	movlw	249
  8057   0138F6  24E1               	addwf	fsr1l,w,c
  8058   0138F8  6ED9               	movwf	fsr2l,c
  8059   0138FA  0EFF               	movlw	255
  8060   0138FC  20E2               	addwfc	fsr1h,w,c
  8061   0138FE  6EDA               	movwf	fsr2h,c
  8062   013900  0EE6               	movlw	-26
  8063   013902  CFE3 FFDF          	movff	plusw1,indf2
  8064   013906                     
  8065                           ;carFunctions.c: 58:          CanSend(&txMsg,txdata);
  8066                           ;stkvar	_txdata @ sp[(-24)+16]
  8067   013906  0EF8               	movlw	248
  8068   013908  24E1               	addwf	fsr1l,w,c
  8069   01390A  6E2A               	movwf	btemp^0,c
  8070   01390C  0EFF               	movlw	255
  8071   01390E  20E2               	addwfc	fsr1h,w,c
  8072   013910  6E2B               	movwf	(btemp+1)^0,c
  8073   013912  C02A  FFE6         	movff	btemp,postinc1
  8074   013916  C02B  FFE6         	movff	btemp+1,postinc1
  8075                           
  8076                           ;stkvar	_txMsg @ sp[(-26)+0]
  8077   01391A  0EE6               	movlw	230
  8078   01391C  24E1               	addwf	fsr1l,w,c
  8079   01391E  6E2A               	movwf	btemp^0,c
  8080   013920  0EFF               	movlw	255
  8081   013922  20E2               	addwfc	fsr1h,w,c
  8082   013924  6E2B               	movwf	(btemp+1)^0,c
  8083   013926  C02A  FFE6         	movff	btemp,postinc1
  8084   01392A  C02B  FFE6         	movff	btemp+1,postinc1
  8085   01392E  EC5C  F0A0         	call	_CanSend	;wreg free
  8086   013932                     l1433:
  8087                           
  8088                           ; _motorControl: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2,
      +                           argsize = 2, vargsize = 0
  8089   013932  0EE6               	movlw	230
  8090   013934  26E1               	addwf	fsr1l,f,c
  8091   013936  0EFF               	movlw	255
  8092   013938  22E2               	addwfc	fsr1h,f,c
  8093   01393A  0012               	return		;funcret
  8094   01393C                     __end_of_motorControl:
  8095                           	callstack 0
  8096                           
  8097 ;; *************** function _lightContol_FrontLight *****************
  8098 ;; Defined at:
  8099 ;;		line 62 in file "carFunctions.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;  light           1  [STACK] unsigned char 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8104 ;;  txdata          8  [STACK] unsigned char [8]
  8105 ;; Return value:  Size  Location     Type
  8106 ;;                  1  [STACK] void 
  8107 ;; Registers used:
  8108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;Total ram usage:        0 bytes
  8119 ;; Hardware stack levels used: 1
  8120 ;; Hardware stack levels required when called: 12
  8121 ;; This function calls:
  8122 ;;		_CanSend
  8123 ;; This function is called by:
  8124 ;;		_lightControl_Process
  8125 ;; This function uses a reentrant model
  8126 ;;
  8127                           
  8128                           	psect	text22
  8129   013F5C                     __ptext22:
  8130                           	callstack 0
  8131   013F5C                     _lightContol_FrontLight:
  8132                           	callstack 0
  8133                           
  8134                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8135   013F5C  0E18               	movlw	24
  8136   013F5E  26E1               	addwf	fsr1l,f,c
  8137   013F60  0E00               	movlw	0
  8138   013F62  22E2               	addwfc	fsr1h,f,c
  8139   013F64                     
  8140                           ;carFunctions.c: 62:  void lightContol_FrontLight(uint8_t light);carFunctions.c: 63:  {;
      +                          carFunctions.c: 65:     static uint8_t lastLight=0;;carFunctions.c: 66:     CAN_TX_MSGOB
      +                          J txMsg={0};
  8141   013F64  EE20  F070         	lfsr	2,lightContol_FrontLight@F6675
  8142                           
  8143                           ;stkvar	_txMsg @ sp[(-24)+0]
  8144   013F68  0E10               	movlw	16
  8145   013F6A  6E2A               	movwf	btemp^0,c
  8146   013F6C  0EE8               	movlw	-24
  8147   013F6E                     us242999:
  8148   013F6E  CFDE FFE3          	movff	postinc2,plusw1
  8149   013F72  28E8               	incf	wreg,w,c
  8150   013F74  2E2A               	decfsz	btemp^0,f,c
  8151   013F76  D7FB               	bra	us242999
  8152   013F78                     
  8153                           ;carFunctions.c: 67:     uint8_t txdata[8];;carFunctions.c: 68:     if(lastLight!= light
      +                          ) {
  8154                           ;stkvar	_light @ sp[(-24)+-1]
  8155   013F78  0EE7               	movlw	-25
  8156   013F7A  50E3               	movf	plusw1,w,c
  8157   013F7C  1827               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  8158   013F7E  B4D8               	btfsc	status,2,c
  8159   013F80  EFC4  F09F         	goto	u2431
  8160   013F84  EFC6  F09F         	goto	u2430
  8161   013F88                     u2431:
  8162   013F88  EF00  F0A0         	goto	l1441
  8163   013F8C                     u2430:
  8164   013F8C                     
  8165                           ;carFunctions.c: 69:         lastLight = light;
  8166                           ;stkvar	_light @ sp[(-24)+-1]
  8167   013F8C  0EE7               	movlw	-25
  8168   013F8E  CFE3 F027          	movff	plusw1,lightContol_FrontLight@lastLight
  8169   013F92                     
  8170                           ;carFunctions.c: 71:         txMsg.bF.id.ID = (0x19);
  8171   013F92  0E19               	movlw	25
  8172   013F94  6E32               	movwf	(btemp+8)^0,c
  8173   013F96  6A33               	clrf	(btemp+9)^0,c
  8174   013F98  6A34               	clrf	(btemp+10)^0,c
  8175   013F9A  6A35               	clrf	(btemp+11)^0,c
  8176                           
  8177                           ;stkvar	_txMsg @ sp[(-24)+0]
  8178   013F9C  0EE8               	movlw	-24
  8179   013F9E  C032  FFE3         	movff	btemp+8,plusw1
  8180   013FA2  0EE9               	movlw	-23
  8181   013FA4  C033  FFE3         	movff	btemp+9,plusw1
  8182   013FA8  0EEA               	movlw	-22
  8183   013FAA  C034  FFE3         	movff	btemp+10,plusw1
  8184   013FAE  0EEB               	movlw	-21
  8185   013FB0  C035  FFE3         	movff	btemp+11,plusw1
  8186   013FB4                     
  8187                           ;carFunctions.c: 72:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8188                           ;stkvar	_txMsg @ sp[(-24)+0]
  8189   013FB4  0EEE               	movlw	238
  8190   013FB6  24E1               	addwf	fsr1l,w,c
  8191   013FB8  6ED9               	movwf	fsr2l,c
  8192   013FBA  0EFF               	movlw	255
  8193   013FBC  20E2               	addwfc	fsr1h,w,c
  8194   013FBE  6EDA               	movwf	fsr2h,c
  8195   013FC0  50DF               	movf	223,w,c
  8196   013FC2  0BF0               	andlw	-16
  8197   013FC4  0901               	iorlw	1
  8198   013FC6  6EDF               	movwf	223,c
  8199   013FC8                     
  8200                           ;carFunctions.c: 73:         txdata[0] = light;
  8201                           ;stkvar	_light @ sp[(-24)+-1]
  8202                           ;stkvar	_txdata @ sp[(-24)+16]
  8203   013FC8  0EE7               	movlw	-25
  8204   013FCA  CFE3 F02A          	movff	plusw1,btemp
  8205   013FCE  0EF8               	movlw	-8
  8206   013FD0  C02A  FFE3         	movff	btemp,plusw1
  8207   013FD4                     
  8208                           ;carFunctions.c: 74:         CanSend(&txMsg,txdata);
  8209                           ;stkvar	_txdata @ sp[(-24)+16]
  8210   013FD4  0EF8               	movlw	248
  8211   013FD6  24E1               	addwf	fsr1l,w,c
  8212   013FD8  6E2A               	movwf	btemp^0,c
  8213   013FDA  0EFF               	movlw	255
  8214   013FDC  20E2               	addwfc	fsr1h,w,c
  8215   013FDE  6E2B               	movwf	(btemp+1)^0,c
  8216   013FE0  C02A  FFE6         	movff	btemp,postinc1
  8217   013FE4  C02B  FFE6         	movff	btemp+1,postinc1
  8218                           
  8219                           ;stkvar	_txMsg @ sp[(-26)+0]
  8220   013FE8  0EE6               	movlw	230
  8221   013FEA  24E1               	addwf	fsr1l,w,c
  8222   013FEC  6E2A               	movwf	btemp^0,c
  8223   013FEE  0EFF               	movlw	255
  8224   013FF0  20E2               	addwfc	fsr1h,w,c
  8225   013FF2  6E2B               	movwf	(btemp+1)^0,c
  8226   013FF4  C02A  FFE6         	movff	btemp,postinc1
  8227   013FF8  C02B  FFE6         	movff	btemp+1,postinc1
  8228   013FFC  EC5C  F0A0         	call	_CanSend	;wreg free
  8229   014000                     l1441:
  8230                           
  8231                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  8232   014000  0EE7               	movlw	231
  8233   014002  26E1               	addwf	fsr1l,f,c
  8234   014004  0EFF               	movlw	255
  8235   014006  22E2               	addwfc	fsr1h,f,c
  8236   014008  0012               	return		;funcret
  8237   01400A                     __end_of_lightContol_FrontLight:
  8238                           	callstack 0
  8239                           
  8240 ;; *************** function _lightContol_BackLight *****************
  8241 ;; Defined at:
  8242 ;;		line 77 in file "carFunctions.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  light           1  [STACK] unsigned char 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  8247 ;;  txdata          8  [STACK] unsigned char [8]
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1  [STACK] void 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;Total ram usage:        0 bytes
  8262 ;; Hardware stack levels used: 1
  8263 ;; Hardware stack levels required when called: 12
  8264 ;; This function calls:
  8265 ;;		_CanSend
  8266 ;; This function is called by:
  8267 ;;		_lightControl_Process
  8268 ;; This function uses a reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text23
  8272   013EA8                     __ptext23:
  8273                           	callstack 0
  8274   013EA8                     _lightContol_BackLight:
  8275                           	callstack 0
  8276                           
  8277                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  8278   013EA8  0E18               	movlw	24
  8279   013EAA  26E1               	addwf	fsr1l,f,c
  8280   013EAC  0E00               	movlw	0
  8281   013EAE  22E2               	addwfc	fsr1h,f,c
  8282   013EB0                     
  8283                           ;carFunctions.c: 77:  void lightContol_BackLight(uint8_t light);carFunctions.c: 78:  {;c
      +                          arFunctions.c: 79:      static uint8_t lastLight=0;;carFunctions.c: 80:      CAN_TX_MSGO
      +                          BJ txMsg={0};
  8284   013EB0  EE20  F060         	lfsr	2,lightContol_BackLight@F6681
  8285                           
  8286                           ;stkvar	_txMsg @ sp[(-24)+0]
  8287   013EB4  0E10               	movlw	16
  8288   013EB6  6E2A               	movwf	btemp^0,c
  8289   013EB8  0EE8               	movlw	-24
  8290   013EBA                     us244999:
  8291   013EBA  CFDE FFE3          	movff	postinc2,plusw1
  8292   013EBE  28E8               	incf	wreg,w,c
  8293   013EC0  2E2A               	decfsz	btemp^0,f,c
  8294   013EC2  D7FB               	bra	us244999
  8295   013EC4                     
  8296                           ;carFunctions.c: 81:      uint8_t txdata[8];;carFunctions.c: 82:      if(lastLight!= lig
      +                          ht) {
  8297                           ;stkvar	_light @ sp[(-24)+-1]
  8298   013EC4  0EE7               	movlw	-25
  8299   013EC6  50E3               	movf	plusw1,w,c
  8300   013EC8  1826               	xorwf	lightContol_BackLight@lastLight^0,w,c
  8301   013ECA  B4D8               	btfsc	status,2,c
  8302   013ECC  EF6A  F09F         	goto	u2451
  8303   013ED0  EF6C  F09F         	goto	u2450
  8304   013ED4                     u2451:
  8305   013ED4  EFA9  F09F         	goto	l1449
  8306   013ED8                     u2450:
  8307   013ED8                     
  8308                           ;carFunctions.c: 83:          lastLight = light;
  8309                           ;stkvar	_light @ sp[(-24)+-1]
  8310   013ED8  0EE7               	movlw	-25
  8311   013EDA  CFE3 F026          	movff	plusw1,lightContol_BackLight@lastLight
  8312   013EDE                     
  8313                           ;carFunctions.c: 85:          txMsg.bF.id.ID = (0x119);
  8314   013EDE  0E19               	movlw	25
  8315   013EE0  6E32               	movwf	(btemp+8)^0,c
  8316   013EE2  0E01               	movlw	1
  8317   013EE4  6E33               	movwf	(btemp+9)^0,c
  8318   013EE6  0E00               	movlw	0
  8319   013EE8  6E34               	movwf	(btemp+10)^0,c
  8320   013EEA  0E00               	movlw	0
  8321   013EEC  6E35               	movwf	(btemp+11)^0,c
  8322                           
  8323                           ;stkvar	_txMsg @ sp[(-24)+0]
  8324   013EEE  0EE8               	movlw	-24
  8325   013EF0  C032  FFE3         	movff	btemp+8,plusw1
  8326   013EF4  0EE9               	movlw	-23
  8327   013EF6  C033  FFE3         	movff	btemp+9,plusw1
  8328   013EFA  0EEA               	movlw	-22
  8329   013EFC  C034  FFE3         	movff	btemp+10,plusw1
  8330   013F00  0EEB               	movlw	-21
  8331   013F02  C035  FFE3         	movff	btemp+11,plusw1
  8332   013F06                     
  8333                           ;carFunctions.c: 86:          txMsg.bF.ctrl.DLC = CAN_DLC_1;
  8334                           ;stkvar	_txMsg @ sp[(-24)+0]
  8335   013F06  0EEE               	movlw	238
  8336   013F08  24E1               	addwf	fsr1l,w,c
  8337   013F0A  6ED9               	movwf	fsr2l,c
  8338   013F0C  0EFF               	movlw	255
  8339   013F0E  20E2               	addwfc	fsr1h,w,c
  8340   013F10  6EDA               	movwf	fsr2h,c
  8341   013F12  50DF               	movf	223,w,c
  8342   013F14  0BF0               	andlw	-16
  8343   013F16  0901               	iorlw	1
  8344   013F18  6EDF               	movwf	223,c
  8345   013F1A                     
  8346                           ;carFunctions.c: 87:          txdata[0] = light;
  8347                           ;stkvar	_light @ sp[(-24)+-1]
  8348                           ;stkvar	_txdata @ sp[(-24)+16]
  8349   013F1A  0EE7               	movlw	-25
  8350   013F1C  CFE3 F02A          	movff	plusw1,btemp
  8351   013F20  0EF8               	movlw	-8
  8352   013F22  C02A  FFE3         	movff	btemp,plusw1
  8353   013F26                     
  8354                           ;carFunctions.c: 88:          CanSend(&txMsg,txdata);
  8355                           ;stkvar	_txdata @ sp[(-24)+16]
  8356   013F26  0EF8               	movlw	248
  8357   013F28  24E1               	addwf	fsr1l,w,c
  8358   013F2A  6E2A               	movwf	btemp^0,c
  8359   013F2C  0EFF               	movlw	255
  8360   013F2E  20E2               	addwfc	fsr1h,w,c
  8361   013F30  6E2B               	movwf	(btemp+1)^0,c
  8362   013F32  C02A  FFE6         	movff	btemp,postinc1
  8363   013F36  C02B  FFE6         	movff	btemp+1,postinc1
  8364                           
  8365                           ;stkvar	_txMsg @ sp[(-26)+0]
  8366   013F3A  0EE6               	movlw	230
  8367   013F3C  24E1               	addwf	fsr1l,w,c
  8368   013F3E  6E2A               	movwf	btemp^0,c
  8369   013F40  0EFF               	movlw	255
  8370   013F42  20E2               	addwfc	fsr1h,w,c
  8371   013F44  6E2B               	movwf	(btemp+1)^0,c
  8372   013F46  C02A  FFE6         	movff	btemp,postinc1
  8373   013F4A  C02B  FFE6         	movff	btemp+1,postinc1
  8374   013F4E  EC5C  F0A0         	call	_CanSend	;wreg free
  8375   013F52                     l1449:
  8376                           
  8377                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  8378   013F52  0EE7               	movlw	231
  8379   013F54  26E1               	addwf	fsr1l,f,c
  8380   013F56  0EFF               	movlw	255
  8381   013F58  22E2               	addwfc	fsr1h,f,c
  8382   013F5A  0012               	return		;funcret
  8383   013F5C                     __end_of_lightContol_BackLight:
  8384                           	callstack 0
  8385                           
  8386 ;; *************** function _CanSend *****************
  8387 ;; Defined at:
  8388 ;;		line 217 in file "can/can.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8391 ;;		 -> txMsg(16), 
  8392 ;;  txd             2  [STACK] PTR unsigned char 
  8393 ;;		 -> txdata(8), txdata(8), txdata(8), txdata(8), 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;  txFlags         1  [STACK] enum E5580
  8396 ;; Return value:  Size  Location     Type
  8397 ;;                  1  [STACK] char 
  8398 ;; Registers used:
  8399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;Total ram usage:        0 bytes
  8410 ;; Hardware stack levels used: 1
  8411 ;; Hardware stack levels required when called: 11
  8412 ;; This function calls:
  8413 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  8414 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8415 ;; This function is called by:
  8416 ;;		_motorControl
  8417 ;;		_lightContol_FrontLight
  8418 ;;		_lightContol_BackLight
  8419 ;; This function uses a reentrant model
  8420 ;;
  8421                           
  8422                           	psect	text24
  8423   0140B8                     __ptext24:
  8424                           	callstack 0
  8425   0140B8                     _CanSend:
  8426                           	callstack 0
  8427                           
  8428                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8429   0140B8  52E6               	movf	postinc1,f,c
  8430   0140BA                     
  8431                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  8432                           ;stkvar	_txObj @ sp[(-1)+-2]
  8433   0140BA  0EFD               	movlw	-3
  8434   0140BC  CFE3 F034          	movff	plusw1,btemp+10
  8435   0140C0  0EFE               	movlw	-2
  8436   0140C2  CFE3 F035          	movff	plusw1,btemp+11
  8437   0140C6  0E08               	movlw	8
  8438   0140C8  2434               	addwf	(btemp+10)^0,w,c
  8439   0140CA  6ED9               	movwf	fsr2l,c
  8440   0140CC  0E00               	movlw	0
  8441   0140CE  2035               	addwfc	(btemp+11)^0,w,c
  8442   0140D0  6EDA               	movwf	fsr2h,c
  8443   0140D2  0E01               	movlw	1
  8444   0140D4  6EDE               	movwf	postinc2,c
  8445   0140D6  0E00               	movlw	0
  8446   0140D8  6EDE               	movwf	postinc2,c
  8447   0140DA  0E00               	movlw	0
  8448   0140DC  6EDE               	movwf	postinc2,c
  8449   0140DE  0E00               	movlw	0
  8450   0140E0  6EDD               	movwf	postdec2,c
  8451   0140E2                     
  8452                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  8453                           ;stkvar	_txFlags @ sp[(-1)+0]
  8454   0140E2  0EFF               	movlw	255
  8455   0140E4  24E1               	addwf	fsr1l,w,c
  8456   0140E6  6E2A               	movwf	btemp^0,c
  8457   0140E8  0EFF               	movlw	255
  8458   0140EA  20E2               	addwfc	fsr1h,w,c
  8459   0140EC  6E2B               	movwf	(btemp+1)^0,c
  8460   0140EE  C02A  FFE6         	movff	btemp,postinc1
  8461   0140F2  C02B  FFE6         	movff	btemp+1,postinc1
  8462   0140F6  0E01               	movlw	1
  8463   0140F8  6EE6               	movwf	postinc1,c
  8464   0140FA  EC03  F0A1         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  8465   0140FE                     
  8466                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  8467                           ;stkvar	_txFlags @ sp[(-1)+0]
  8468   0140FE  0EFF               	movlw	-1
  8469   014100  A0E3               	btfss	plusw1,0,c
  8470   014102  EF85  F0A0         	goto	u2071
  8471   014106  EF87  F0A0         	goto	u2070
  8472   01410A                     u2071:
  8473   01410A  EFAC  F0A0         	goto	l158
  8474   01410E                     u2070:
  8475   01410E                     
  8476                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  8477   01410E  0E01               	movlw	1
  8478   014110  6EE6               	movwf	postinc1,c
  8479                           
  8480                           ;stkvar	_txObj @ sp[(-2)+-2]
  8481   014112  0EFC               	movlw	-4
  8482   014114  CFE3 F034          	movff	plusw1,btemp+10
  8483   014118  0EFD               	movlw	-3
  8484   01411A  CFE3 F035          	movff	plusw1,btemp+11
  8485   01411E  0E06               	movlw	6
  8486   014120  2434               	addwf	(btemp+10)^0,w,c
  8487   014122  6ED9               	movwf	fsr2l,c
  8488   014124  0E00               	movlw	0
  8489   014126  2035               	addwfc	(btemp+11)^0,w,c
  8490   014128  6EDA               	movwf	fsr2h,c
  8491   01412A  50DF               	movf	223,w,c
  8492   01412C  0B0F               	andlw	15
  8493   01412E  6E35               	movwf	(btemp+11)^0,c
  8494   014130  C035  FFE6         	movff	btemp+11,postinc1
  8495   014134  0E00               	movlw	0
  8496   014136  6EE6               	movwf	postinc1,c
  8497   014138  6EE6               	movwf	postinc1,c
  8498   01413A  6EE6               	movwf	postinc1,c
  8499                           
  8500                           ;stkvar	_txd @ sp[(-6)+-4]
  8501   01413C  0EF6               	movlw	-10
  8502   01413E  CFE3 FFE6          	movff	plusw1,postinc1
  8503   014142  CFE3 FFE6          	movff	plusw1,postinc1
  8504                           
  8505                           ;stkvar	_txObj @ sp[(-8)+-2]
  8506   014146  0EF6               	movlw	-10
  8507   014148  CFE3 FFE6          	movff	plusw1,postinc1
  8508   01414C  CFE3 FFE6          	movff	plusw1,postinc1
  8509   014150  0E01               	movlw	1
  8510   014152  6EE6               	movwf	postinc1,c
  8511   014154  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  8512   014158                     l158:
  8513                           
  8514                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  8515   014158  0EFB               	movlw	251
  8516   01415A  26E1               	addwf	fsr1l,f,c
  8517   01415C  0EFF               	movlw	255
  8518   01415E  22E2               	addwfc	fsr1h,f,c
  8519   014160  0012               	return		;funcret
  8520   014162                     __end_of_CanSend:
  8521                           	callstack 0
  8522                           
  8523 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  8524 ;; Defined at:
  8525 ;;		line 706 in file "can/can.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  channel         1  [STACK] enum E5287
  8528 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  8529 ;;		 -> txMsg(16), 
  8530 ;;  txd             2  [STACK] PTR unsigned char 
  8531 ;;		 -> txdata(8), txdata(8), txdata(8), txdata(8), 
  8532 ;;  txdNumBytes     4  [STACK] unsigned long 
  8533 ;;  flush           1  [STACK] _Bool 
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  temp32          4  [STACK] unsigned long 
  8536 ;;  txBuffer       76  [STACK] unsigned char [76]
  8537 ;;  fifoReg        12  [STACK] unsigned long [3]
  8538 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8539 ;;  a               4  [STACK] unsigned long 
  8540 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  8541 ;;  dataBytesInO    4  [STACK] unsigned long 
  8542 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  8543 ;;  n               2  [STACK] unsigned short 
  8544 ;;  spiTransferE    1  [STACK] char 
  8545 ;;  i               1  [STACK] unsigned char 
  8546 ;;  j               1  [STACK] unsigned char 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  1  [STACK] char 
  8549 ;; Registers used:
  8550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;Total ram usage:        0 bytes
  8561 ;; Hardware stack levels used: 1
  8562 ;; Hardware stack levels required when called: 10
  8563 ;; This function calls:
  8564 ;;		_DRV_CANFDSPI_DlcToDataBytes
  8565 ;;		_DRV_CANFDSPI_ReadWordArray
  8566 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  8567 ;;		_DRV_CANFDSPI_WriteByteArray
  8568 ;; This function is called by:
  8569 ;;		_CanSend
  8570 ;; This function uses a reentrant model
  8571 ;;
  8572                           
  8573                           	psect	text25
  8574   010000                     __ptext25:
  8575                           	callstack 0
  8576   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  8577                           	callstack 0
  8578                           
  8579                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  8580   010000  0E72               	movlw	114
  8581   010002  26E1               	addwf	fsr1l,f,c
  8582   010004  0E00               	movlw	0
  8583   010006  22E2               	addwfc	fsr1h,f,c
  8584   010008                     
  8585                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  8586                           ;stkvar	_channel @ sp[(-114)+-1]
  8587   010008  0E8D               	movlw	-115
  8588   01000A  50E3               	movf	plusw1,w,c
  8589   01000C  0D0C               	mullw	12
  8590   01000E  0E50               	movlw	80
  8591   010010  26F3               	addwf	243,f,c
  8592   010012  0E00               	movlw	0
  8593   010014  22F4               	addwfc	244,f,c
  8594                           
  8595                           ;stkvar	_a @ sp[(-114)+97]
  8596   010016  0EEF               	movlw	-17
  8597   010018  CFF3 FFE3          	movff	prodl,plusw1
  8598   01001C  0EF0               	movlw	-16
  8599   01001E  CFF4 FFE3          	movff	prodh,plusw1
  8600   010022  0EF1               	movlw	-15
  8601   010024  6AE3               	clrf	plusw1,c
  8602   010026  0EF2               	movlw	-14
  8603   010028  6AE3               	clrf	plusw1,c
  8604   01002A                     
  8605                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  8606   01002A  0E03               	movlw	3
  8607   01002C  6EE6               	movwf	postinc1,c
  8608   01002E  0E00               	movlw	0
  8609   010030  6EE6               	movwf	postinc1,c
  8610                           
  8611                           ;stkvar	_fifoReg @ sp[(-116)+80]
  8612   010032  0EDC               	movlw	220
  8613   010034  24E1               	addwf	fsr1l,w,c
  8614   010036  6E2A               	movwf	btemp^0,c
  8615   010038  0EFF               	movlw	255
  8616   01003A  20E2               	addwfc	fsr1h,w,c
  8617   01003C  6E2B               	movwf	(btemp+1)^0,c
  8618   01003E  C02A  FFE6         	movff	btemp,postinc1
  8619   010042  C02B  FFE6         	movff	btemp+1,postinc1
  8620                           
  8621                           ;stkvar	_a @ sp[(-118)+97]
  8622   010046  0EEB               	movlw	-21
  8623   010048  CFE3 FFE6          	movff	plusw1,postinc1
  8624   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  8625   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  8626                           
  8627                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8628   010054  0EFD               	movlw	-3
  8629   010056  C02A  FFE3         	movff	btemp,plusw1
  8630   01005A                     
  8631                           ;can/can.c: 722:     if (spiTransferError) {
  8632                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8633   01005A  0EFD               	movlw	-3
  8634   01005C  50E3               	movf	plusw1,w,c
  8635   01005E  B4D8               	btfsc	status,2,c
  8636   010060  EF34  F080         	goto	u1781
  8637   010064  EF36  F080         	goto	u1780
  8638   010068                     u1781:
  8639   010068  EF3A  F080         	goto	l4188
  8640   01006C                     u1780:
  8641   01006C                     
  8642                           ;can/can.c: 723:         return -1;
  8643   01006C  0EFF               	movlw	255
  8644   01006E  6E2A               	movwf	btemp^0,c
  8645   010070  EFA1  F083         	goto	l264
  8646   010074                     l4188:
  8647                           
  8648                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  8649                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8650   010074  0EDE               	movlw	-34
  8651   010076  CFE3 F032          	movff	plusw1,btemp+8
  8652   01007A  0EDF               	movlw	-33
  8653   01007C  CFE3 F033          	movff	plusw1,btemp+9
  8654   010080  0EE0               	movlw	-32
  8655   010082  CFE3 F034          	movff	plusw1,btemp+10
  8656   010086  0EE1               	movlw	-31
  8657   010088  CFE3 F035          	movff	plusw1,btemp+11
  8658                           
  8659                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8660   01008C  0EEA               	movlw	-22
  8661   01008E  C032  FFE3         	movff	btemp+8,plusw1
  8662   010092  0EEB               	movlw	-21
  8663   010094  C033  FFE3         	movff	btemp+9,plusw1
  8664   010098  0EEC               	movlw	-20
  8665   01009A  C034  FFE3         	movff	btemp+10,plusw1
  8666   01009E  0EED               	movlw	-19
  8667   0100A0  C035  FFE3         	movff	btemp+11,plusw1
  8668   0100A4                     
  8669                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  8670                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  8671   0100A4  50E1               	movf	fsr1l,w,c
  8672   0100A6  0FEA               	addlw	-22
  8673   0100A8  6ED9               	movwf	fsr2l,c
  8674   0100AA  50E2               	movf	fsr1h,w,c
  8675   0100AC  6EDA               	movwf	fsr2h,c
  8676   0100AE  0EFF               	movlw	255
  8677   0100B0  22DA               	addwfc	fsr2h,f,c
  8678   0100B2  BEDF               	btfsc	indf2,7,c
  8679   0100B4  EF5E  F080         	goto	u1791
  8680   0100B8  EF60  F080         	goto	u1790
  8681   0100BC                     u1791:
  8682   0100BC  EF64  F080         	goto	l4196
  8683   0100C0                     u1790:
  8684   0100C0                     
  8685                           ;can/can.c: 729:         return -2;
  8686   0100C0  0EFE               	movlw	254
  8687   0100C2  6E2A               	movwf	btemp^0,c
  8688   0100C4  EFA1  F083         	goto	l264
  8689   0100C8                     l4196:
  8690                           
  8691                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  8692                           ;stkvar	_txObj @ sp[(-114)+-3]
  8693   0100C8  0E8B               	movlw	-117
  8694   0100CA  CFE3 F034          	movff	plusw1,btemp+10
  8695   0100CE  0E8C               	movlw	-116
  8696   0100D0  CFE3 F035          	movff	plusw1,btemp+11
  8697   0100D4  0E06               	movlw	6
  8698   0100D6  2434               	addwf	(btemp+10)^0,w,c
  8699   0100D8  6ED9               	movwf	fsr2l,c
  8700   0100DA  0E00               	movlw	0
  8701   0100DC  2035               	addwfc	(btemp+11)^0,w,c
  8702   0100DE  6EDA               	movwf	fsr2h,c
  8703   0100E0  50DF               	movf	223,w,c
  8704   0100E2  0B0F               	andlw	15
  8705   0100E4  6EE6               	movwf	postinc1,c
  8706   0100E6  EC7A  F092         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  8707                           
  8708                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8709   0100EA  0EF7               	movlw	-9
  8710   0100EC  C02A  FFE3         	movff	btemp,plusw1
  8711   0100F0  0EF8               	movlw	-8
  8712   0100F2  C02B  FFE3         	movff	btemp+1,plusw1
  8713   0100F6  0EF9               	movlw	-7
  8714   0100F8  C02C  FFE3         	movff	btemp+2,plusw1
  8715   0100FC  0EFA               	movlw	-6
  8716   0100FE  C02D  FFE3         	movff	btemp+3,plusw1
  8717   010102                     
  8718                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  8719                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8720                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  8721   010102  50E1               	movf	fsr1l,w,c
  8722   010104  0FF7               	addlw	-9
  8723   010106  6ED9               	movwf	fsr2l,c
  8724   010108  50E2               	movf	fsr1h,w,c
  8725   01010A  6EDA               	movwf	fsr2h,c
  8726   01010C  0EFF               	movlw	255
  8727   01010E  22DA               	addwfc	fsr2h,f,c
  8728   010110  0E85               	movlw	-123
  8729   010112  50E3               	movf	plusw1,w,c
  8730   010114  5CDE               	subwf	postinc2,w,c
  8731   010116  0E86               	movlw	-122
  8732   010118  50E3               	movf	plusw1,w,c
  8733   01011A  58DE               	subwfb	postinc2,w,c
  8734   01011C  0E87               	movlw	-121
  8735   01011E  50E3               	movf	plusw1,w,c
  8736   010120  58DE               	subwfb	postinc2,w,c
  8737   010122  0E88               	movlw	-120
  8738   010124  50E3               	movf	plusw1,w,c
  8739   010126  58DE               	subwfb	postinc2,w,c
  8740   010128  B0D8               	btfsc	status,0,c
  8741   01012A  EF99  F080         	goto	u1801
  8742   01012E  EF9B  F080         	goto	u1800
  8743   010132                     u1801:
  8744   010132  EF9F  F080         	goto	l4204
  8745   010136                     u1800:
  8746   010136                     
  8747                           ;can/can.c: 735:         return -3;
  8748   010136  0EFD               	movlw	253
  8749   010138  6E2A               	movwf	btemp^0,c
  8750   01013A  EFA1  F083         	goto	l264
  8751   01013E                     l4204:
  8752                           
  8753                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  8754                           ;stkvar	_fifoReg @ sp[(-114)+80]
  8755   01013E  0EE6               	movlw	230
  8756   010140  24E1               	addwf	fsr1l,w,c
  8757   010142  6ED9               	movwf	fsr2l,c
  8758   010144  0EFF               	movlw	255
  8759   010146  20E2               	addwfc	fsr1h,w,c
  8760   010148  6EDA               	movwf	fsr2h,c
  8761   01014A  CFDE F032          	movff	postinc2,btemp+8
  8762   01014E  CFDE F033          	movff	postinc2,btemp+9
  8763   010152  CFDE F034          	movff	postinc2,btemp+10
  8764   010156  CFDE F035          	movff	postinc2,btemp+11
  8765                           
  8766                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8767   01015A  0EF3               	movlw	-13
  8768   01015C  C032  FFE3         	movff	btemp+8,plusw1
  8769   010160  0EF4               	movlw	-12
  8770   010162  C033  FFE3         	movff	btemp+9,plusw1
  8771   010166  0EF5               	movlw	-11
  8772   010168  C034  FFE3         	movff	btemp+10,plusw1
  8773   01016C  0EF6               	movlw	-10
  8774   01016E  C035  FFE3         	movff	btemp+11,plusw1
  8775   010172                     
  8776                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  8777                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  8778   010172  0EF3               	movlw	-13
  8779   010174  CFE3 F032          	movff	plusw1,btemp+8
  8780   010178  0EF4               	movlw	-12
  8781   01017A  CFE3 F033          	movff	plusw1,btemp+9
  8782   01017E  0EF5               	movlw	-11
  8783   010180  CFE3 F034          	movff	plusw1,btemp+10
  8784   010184  0EF6               	movlw	-10
  8785   010186  CFE3 F035          	movff	plusw1,btemp+11
  8786                           
  8787                           ;stkvar	_a @ sp[(-114)+97]
  8788   01018A  0EEF               	movlw	-17
  8789   01018C  C032  FFE3         	movff	btemp+8,plusw1
  8790   010190  0EF0               	movlw	-16
  8791   010192  C033  FFE3         	movff	btemp+9,plusw1
  8792   010196  0EF1               	movlw	-15
  8793   010198  C034  FFE3         	movff	btemp+10,plusw1
  8794   01019C  0EF2               	movlw	-14
  8795   01019E  C035  FFE3         	movff	btemp+11,plusw1
  8796   0101A2                     
  8797                           ;can/can.c: 748:     a += 0x400;
  8798                           ;stkvar	_a @ sp[(-114)+97]
  8799   0101A2  50E1               	movf	fsr1l,w,c
  8800   0101A4  0FEF               	addlw	-17
  8801   0101A6  6ED9               	movwf	fsr2l,c
  8802   0101A8  50E2               	movf	fsr1h,w,c
  8803   0101AA  6EDA               	movwf	fsr2h,c
  8804   0101AC  0EFF               	movlw	255
  8805   0101AE  22DA               	addwfc	fsr2h,f,c
  8806   0101B0  0E00               	movlw	0
  8807   0101B2  26DE               	addwf	postinc2,f,c
  8808   0101B4  0E04               	movlw	4
  8809   0101B6  22DE               	addwfc	postinc2,f,c
  8810   0101B8  0E00               	movlw	0
  8811   0101BA  22DE               	addwfc	postinc2,f,c
  8812   0101BC  0E00               	movlw	0
  8813   0101BE  22DE               	addwfc	postinc2,f,c
  8814   0101C0                     
  8815                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  8816                           ;stkvar	_txObj @ sp[(-114)+-3]
  8817   0101C0  0E8B               	movlw	-117
  8818   0101C2  CFE3 F034          	movff	plusw1,btemp+10
  8819   0101C6  0E8C               	movlw	-116
  8820   0101C8  CFE3 F035          	movff	plusw1,btemp+11
  8821   0101CC  0E06               	movlw	6
  8822   0101CE  2434               	addwf	(btemp+10)^0,w,c
  8823   0101D0  6ED9               	movwf	fsr2l,c
  8824   0101D2  0E00               	movlw	0
  8825   0101D4  2035               	addwfc	(btemp+11)^0,w,c
  8826   0101D6  6EDA               	movwf	fsr2h,c
  8827   0101D8  B8DF               	btfsc	indf2,4,c
  8828   0101DA  EFF1  F080         	goto	u1811
  8829   0101DE  EFF3  F080         	goto	u1810
  8830   0101E2                     u1811:
  8831   0101E2  EF75  F081         	goto	l4220
  8832   0101E6                     u1810:
  8833   0101E6                     
  8834                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  8835                           ;stkvar	_txObj @ sp[(-114)+-3]
  8836   0101E6  0E8B               	movlw	-117
  8837   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8838   0101EC  0E8C               	movlw	-116
  8839   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8840   0101F2  50DF               	movf	indf2,w,c
  8841   0101F4  6E35               	movwf	(btemp+11)^0,c
  8842                           
  8843                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8844   0101F6  0E92               	movlw	-110
  8845   0101F8  C035  FFE3         	movff	btemp+11,plusw1
  8846   0101FC                     
  8847                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  8848                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8849   0101FC  0E93               	movlw	147
  8850   0101FE  24E1               	addwf	fsr1l,w,c
  8851   010200  6ED9               	movwf	fsr2l,c
  8852   010202  0EFF               	movlw	255
  8853   010204  20E2               	addwfc	fsr1h,w,c
  8854   010206  6EDA               	movwf	fsr2h,c
  8855                           
  8856                           ;stkvar	_txObj @ sp[(-114)+-3]
  8857   010208  0E8B               	movlw	-117
  8858   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  8859   01020E  0E8C               	movlw	-116
  8860   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  8861   010214  CFEE F032          	movff	postinc0,btemp+8
  8862   010218  CFEE F033          	movff	postinc0,btemp+9
  8863   01021C  CFEE F034          	movff	postinc0,btemp+10
  8864   010220  CFEE F035          	movff	postinc0,btemp+11
  8865   010224  C033  F032         	movff	btemp+9,btemp+8
  8866   010228  C034  F033         	movff	btemp+10,btemp+9
  8867   01022C  C035  F034         	movff	btemp+11,btemp+10
  8868   010230  6A35               	clrf	(btemp+11)^0,c
  8869   010232  5032               	movf	(btemp+8)^0,w,c
  8870   010234  6EDF               	movwf	indf2,c
  8871   010236                     
  8872                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  8873                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8874   010236  0E94               	movlw	148
  8875   010238  24E1               	addwf	fsr1l,w,c
  8876   01023A  6ED9               	movwf	fsr2l,c
  8877   01023C  0EFF               	movlw	255
  8878   01023E  20E2               	addwfc	fsr1h,w,c
  8879   010240  6EDA               	movwf	fsr2h,c
  8880                           
  8881                           ;stkvar	_txObj @ sp[(-114)+-3]
  8882   010242  0E8B               	movlw	-117
  8883   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  8884   010248  0E8C               	movlw	-116
  8885   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  8886   01024E  CFEE F032          	movff	postinc0,btemp+8
  8887   010252  CFEE F033          	movff	postinc0,btemp+9
  8888   010256  CFEE F034          	movff	postinc0,btemp+10
  8889   01025A  CFEE F035          	movff	postinc0,btemp+11
  8890   01025E  0E11               	movlw	17
  8891   010260  EF37  F081         	goto	u1820
  8892   010264                     u1825:
  8893   010264  90D8               	bcf	status,0,c
  8894   010266  3235               	rrcf	(btemp+11)^0,f,c
  8895   010268  3234               	rrcf	(btemp+10)^0,f,c
  8896   01026A  3233               	rrcf	(btemp+9)^0,f,c
  8897   01026C  3232               	rrcf	(btemp+8)^0,f,c
  8898   01026E                     u1820:
  8899   01026E  2EE8               	decfsz	wreg,f,c
  8900   010270  EF32  F081         	goto	u1825
  8901   010274  5032               	movf	(btemp+8)^0,w,c
  8902   010276  6EDF               	movwf	indf2,c
  8903   010278                     
  8904                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  8905                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8906   010278  0E95               	movlw	149
  8907   01027A  24E1               	addwf	fsr1l,w,c
  8908   01027C  6ED9               	movwf	fsr2l,c
  8909   01027E  0EFF               	movlw	255
  8910   010280  20E2               	addwfc	fsr1h,w,c
  8911   010282  6EDA               	movwf	fsr2h,c
  8912                           
  8913                           ;stkvar	_txObj @ sp[(-114)+-3]
  8914   010284  0E8B               	movlw	-117
  8915   010286  CFE3 F034          	movff	plusw1,btemp+10
  8916   01028A  0E8C               	movlw	-116
  8917   01028C  CFE3 F035          	movff	plusw1,btemp+11
  8918   010290  0E04               	movlw	4
  8919   010292  2434               	addwf	(btemp+10)^0,w,c
  8920   010294  6EE9               	movwf	fsr0l,c
  8921   010296  0E00               	movlw	0
  8922   010298  2035               	addwfc	(btemp+11)^0,w,c
  8923   01029A  6EEA               	movwf	fsr0h,c
  8924   01029C  50EF               	movf	indf0,w,c
  8925   01029E  6E35               	movwf	(btemp+11)^0,c
  8926   0102A0  0E05               	movlw	5
  8927   0102A2  6E2A               	movwf	btemp^0,c
  8928   0102A4                     u1835:
  8929   0102A4  90D8               	bcf	status,0,c
  8930   0102A6  3635               	rlcf	(btemp+11)^0,f,c
  8931   0102A8  2E2A               	decfsz	btemp^0,f,c
  8932   0102AA  EF52  F081         	goto	u1835
  8933                           
  8934                           ;stkvar	_txObj @ sp[(-114)+-3]
  8935   0102AE  0E8B               	movlw	-117
  8936   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8937   0102B4  0E8C               	movlw	-116
  8938   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8939   0102BA  CFEE F02E          	movff	postinc0,btemp+4
  8940   0102BE  CFEE F02F          	movff	postinc0,btemp+5
  8941   0102C2  CFEE F030          	movff	postinc0,btemp+6
  8942   0102C6  CFEE F031          	movff	postinc0,btemp+7
  8943   0102CA  0E19               	movlw	25
  8944   0102CC  EF6D  F081         	goto	u1840
  8945   0102D0                     u1845:
  8946   0102D0  90D8               	bcf	status,0,c
  8947   0102D2  3231               	rrcf	(btemp+7)^0,f,c
  8948   0102D4  3230               	rrcf	(btemp+6)^0,f,c
  8949   0102D6  322F               	rrcf	(btemp+5)^0,f,c
  8950   0102D8  322E               	rrcf	(btemp+4)^0,f,c
  8951   0102DA                     u1840:
  8952   0102DA  2EE8               	decfsz	wreg,f,c
  8953   0102DC  EF68  F081         	goto	u1845
  8954   0102E0  502E               	movf	(btemp+4)^0,w,c
  8955   0102E2  1035               	iorwf	(btemp+11)^0,w,c
  8956   0102E4  6EDF               	movwf	indf2,c
  8957                           
  8958                           ;can/can.c: 770:     }
  8959   0102E6  EF24  F082         	goto	l4232
  8960   0102EA                     l4220:
  8961                           
  8962                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8963                           ;stkvar	_txObj @ sp[(-114)+-3]
  8964   0102EA  0E8B               	movlw	-117
  8965   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8966   0102F0  0E8C               	movlw	-116
  8967   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8968   0102F6  CFDE F032          	movff	postinc2,btemp+8
  8969   0102FA  CFDE F033          	movff	postinc2,btemp+9
  8970   0102FE  CFDE F034          	movff	postinc2,btemp+10
  8971   010302  CFDE F035          	movff	postinc2,btemp+11
  8972   010306  0E13               	movlw	19
  8973   010308  EF8B  F081         	goto	u1850
  8974   01030C                     u1855:
  8975   01030C  90D8               	bcf	status,0,c
  8976   01030E  3235               	rrcf	(btemp+11)^0,f,c
  8977   010310  3234               	rrcf	(btemp+10)^0,f,c
  8978   010312  3233               	rrcf	(btemp+9)^0,f,c
  8979   010314  3232               	rrcf	(btemp+8)^0,f,c
  8980   010316                     u1850:
  8981   010316  2EE8               	decfsz	wreg,f,c
  8982   010318  EF86  F081         	goto	u1855
  8983   01031C  0EFF               	movlw	255
  8984   01031E  1432               	andwf	(btemp+8)^0,w,c
  8985   010320  6E2E               	movwf	(btemp+4)^0,c
  8986   010322  0E07               	movlw	7
  8987   010324  1433               	andwf	(btemp+9)^0,w,c
  8988   010326  6E2F               	movwf	(btemp+5)^0,c
  8989   010328  0E00               	movlw	0
  8990   01032A  1434               	andwf	(btemp+10)^0,w,c
  8991   01032C  6E30               	movwf	(btemp+6)^0,c
  8992   01032E  0E00               	movlw	0
  8993   010330  1435               	andwf	(btemp+11)^0,w,c
  8994   010332  6E31               	movwf	(btemp+7)^0,c
  8995                           
  8996                           ;stkvar	_txObj @ sp[(-114)+-3]
  8997   010334  0E8B               	movlw	-117
  8998   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8999   01033A  0E8C               	movlw	-116
  9000   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  9001   010340  0EFF               	movlw	255
  9002   010342  14DE               	andwf	postinc2,w,c
  9003   010344  6E32               	movwf	(btemp+8)^0,c
  9004   010346  0EFF               	movlw	255
  9005   010348  14DE               	andwf	postinc2,w,c
  9006   01034A  6E33               	movwf	(btemp+9)^0,c
  9007   01034C  0E03               	movlw	3
  9008   01034E  14DE               	andwf	postinc2,w,c
  9009   010350  6E34               	movwf	(btemp+10)^0,c
  9010   010352  0E00               	movlw	0
  9011   010354  14DE               	andwf	postinc2,w,c
  9012   010356  6E35               	movwf	(btemp+11)^0,c
  9013   010358  0E0B               	movlw	11
  9014   01035A                     u1865:
  9015   01035A  90D8               	bcf	status,0,c
  9016   01035C  3632               	rlcf	(btemp+8)^0,f,c
  9017   01035E  3633               	rlcf	(btemp+9)^0,f,c
  9018   010360  3634               	rlcf	(btemp+10)^0,f,c
  9019   010362  3635               	rlcf	(btemp+11)^0,f,c
  9020   010364  2EE8               	decfsz	wreg,f,c
  9021   010366  EFAD  F081         	goto	u1865
  9022   01036A  502E               	movf	(btemp+4)^0,w,c
  9023   01036C  1032               	iorwf	(btemp+8)^0,w,c
  9024   01036E  6E2A               	movwf	btemp^0,c
  9025   010370  502F               	movf	(btemp+5)^0,w,c
  9026   010372  1033               	iorwf	(btemp+9)^0,w,c
  9027   010374  6E2B               	movwf	(btemp+1)^0,c
  9028   010376  5030               	movf	(btemp+6)^0,w,c
  9029   010378  1034               	iorwf	(btemp+10)^0,w,c
  9030   01037A  6E2C               	movwf	(btemp+2)^0,c
  9031   01037C  5031               	movf	(btemp+7)^0,w,c
  9032   01037E  1035               	iorwf	(btemp+11)^0,w,c
  9033   010380  6E2D               	movwf	(btemp+3)^0,c
  9034                           
  9035                           ;stkvar	_temp32 @ sp[(-114)+0]
  9036   010382  0E8E               	movlw	-114
  9037   010384  C02A  FFE3         	movff	btemp,plusw1
  9038   010388  0E8F               	movlw	-113
  9039   01038A  C02B  FFE3         	movff	btemp+1,plusw1
  9040   01038E  0E90               	movlw	-112
  9041   010390  C02C  FFE3         	movff	btemp+2,plusw1
  9042   010394  0E91               	movlw	-111
  9043   010396  C02D  FFE3         	movff	btemp+3,plusw1
  9044   01039A                     
  9045                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  9046                           ;stkvar	_temp32 @ sp[(-114)+0]
  9047   01039A  50E1               	movf	fsr1l,w,c
  9048   01039C  0F8E               	addlw	-114
  9049   01039E  6ED9               	movwf	fsr2l,c
  9050   0103A0  50E2               	movf	fsr1h,w,c
  9051   0103A2  6EDA               	movwf	fsr2h,c
  9052   0103A4  0EFF               	movlw	255
  9053   0103A6  22DA               	addwfc	fsr2h,f,c
  9054   0103A8  0EFF               	movlw	255
  9055   0103AA  16DE               	andwf	postinc2,f,c
  9056   0103AC  0EFF               	movlw	255
  9057   0103AE  16DE               	andwf	postinc2,f,c
  9058   0103B0  0EFF               	movlw	255
  9059   0103B2  16DE               	andwf	postinc2,f,c
  9060   0103B4  0E1F               	movlw	31
  9061   0103B6  16DE               	andwf	postinc2,f,c
  9062   0103B8                     
  9063                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  9064                           ;stkvar	_temp32 @ sp[(-114)+0]
  9065                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9066   0103B8  0E8E               	movlw	-114
  9067   0103BA  CFE3 F02A          	movff	plusw1,btemp
  9068   0103BE  0E92               	movlw	-110
  9069   0103C0  C02A  FFE3         	movff	btemp,plusw1
  9070   0103C4                     
  9071                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  9072                           ;stkvar	_temp32 @ sp[(-114)+0]
  9073   0103C4  0E8F               	movlw	143
  9074   0103C6  24E1               	addwf	fsr1l,w,c
  9075   0103C8  6ED9               	movwf	fsr2l,c
  9076   0103CA  0EFF               	movlw	255
  9077   0103CC  20E2               	addwfc	fsr1h,w,c
  9078   0103CE  6EDA               	movwf	fsr2h,c
  9079                           
  9080                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9081   0103D0  0E93               	movlw	147
  9082   0103D2  24E1               	addwf	fsr1l,w,c
  9083   0103D4  6EE9               	movwf	fsr0l,c
  9084   0103D6  0EFF               	movlw	255
  9085   0103D8  20E2               	addwfc	fsr1h,w,c
  9086   0103DA  6EEA               	movwf	fsr0h,c
  9087   0103DC  CFDF FFEF          	movff	indf2,indf0
  9088   0103E0                     
  9089                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  9090                           ;stkvar	_temp32 @ sp[(-114)+0]
  9091   0103E0  0E90               	movlw	144
  9092   0103E2  24E1               	addwf	fsr1l,w,c
  9093   0103E4  6ED9               	movwf	fsr2l,c
  9094   0103E6  0EFF               	movlw	255
  9095   0103E8  20E2               	addwfc	fsr1h,w,c
  9096   0103EA  6EDA               	movwf	fsr2h,c
  9097                           
  9098                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9099   0103EC  0E94               	movlw	148
  9100   0103EE  24E1               	addwf	fsr1l,w,c
  9101   0103F0  6EE9               	movwf	fsr0l,c
  9102   0103F2  0EFF               	movlw	255
  9103   0103F4  20E2               	addwfc	fsr1h,w,c
  9104   0103F6  6EEA               	movwf	fsr0h,c
  9105   0103F8  CFDF FFEF          	movff	indf2,indf0
  9106   0103FC                     
  9107                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  9108                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9109   0103FC  0E95               	movlw	149
  9110   0103FE  24E1               	addwf	fsr1l,w,c
  9111   010400  6ED9               	movwf	fsr2l,c
  9112   010402  0EFF               	movlw	255
  9113   010404  20E2               	addwfc	fsr1h,w,c
  9114   010406  6EDA               	movwf	fsr2h,c
  9115                           
  9116                           ;stkvar	_temp32 @ sp[(-114)+0]
  9117   010408  0E91               	movlw	145
  9118   01040A  24E1               	addwf	fsr1l,w,c
  9119   01040C  6EE9               	movwf	fsr0l,c
  9120   01040E  0EFF               	movlw	255
  9121   010410  20E2               	addwfc	fsr1h,w,c
  9122   010412  6EEA               	movwf	fsr0h,c
  9123   010414  50EF               	movf	indf0,w,c
  9124   010416  6E35               	movwf	(btemp+11)^0,c
  9125                           
  9126                           ;stkvar	_txObj @ sp[(-114)+-3]
  9127   010418  0E8B               	movlw	-117
  9128   01041A  CFE3 F032          	movff	plusw1,btemp+8
  9129   01041E  0E8C               	movlw	-116
  9130   010420  CFE3 F033          	movff	plusw1,btemp+9
  9131   010424  0E04               	movlw	4
  9132   010426  2432               	addwf	(btemp+8)^0,w,c
  9133   010428  6EE9               	movwf	fsr0l,c
  9134   01042A  0E00               	movlw	0
  9135   01042C  2033               	addwfc	(btemp+9)^0,w,c
  9136   01042E  6EEA               	movwf	fsr0h,c
  9137   010430  50EF               	movf	indf0,w,c
  9138   010432  6E34               	movwf	(btemp+10)^0,c
  9139   010434  0E05               	movlw	5
  9140   010436  6E2A               	movwf	btemp^0,c
  9141   010438                     u1875:
  9142   010438  90D8               	bcf	status,0,c
  9143   01043A  3634               	rlcf	(btemp+10)^0,f,c
  9144   01043C  2E2A               	decfsz	btemp^0,f,c
  9145   01043E  EF1C  F082         	goto	u1875
  9146   010442  5034               	movf	(btemp+10)^0,w,c
  9147   010444  1035               	iorwf	(btemp+11)^0,w,c
  9148   010446  6EDF               	movwf	indf2,c
  9149   010448                     l4232:
  9150                           
  9151                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  9152                           ;stkvar	_txObj @ sp[(-114)+-3]
  9153   010448  0E8B               	movlw	-117
  9154   01044A  CFE3 F034          	movff	plusw1,btemp+10
  9155   01044E  0E8C               	movlw	-116
  9156   010450  CFE3 F035          	movff	plusw1,btemp+11
  9157   010454  0E06               	movlw	6
  9158   010456  2434               	addwf	(btemp+10)^0,w,c
  9159   010458  6ED9               	movwf	fsr2l,c
  9160   01045A  0E00               	movlw	0
  9161   01045C  2035               	addwfc	(btemp+11)^0,w,c
  9162   01045E  6EDA               	movwf	fsr2h,c
  9163                           
  9164                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9165   010460  0E96               	movlw	150
  9166   010462  24E1               	addwf	fsr1l,w,c
  9167   010464  6EE9               	movwf	fsr0l,c
  9168   010466  0EFF               	movlw	255
  9169   010468  20E2               	addwfc	fsr1h,w,c
  9170   01046A  6EEA               	movwf	fsr0h,c
  9171   01046C  CFDF FFEF          	movff	indf2,indf0
  9172   010470                     
  9173                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  9174                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9175   010470  0E97               	movlw	151
  9176   010472  24E1               	addwf	fsr1l,w,c
  9177   010474  6ED9               	movwf	fsr2l,c
  9178   010476  0EFF               	movlw	255
  9179   010478  20E2               	addwfc	fsr1h,w,c
  9180   01047A  6EDA               	movwf	fsr2h,c
  9181                           
  9182                           ;stkvar	_txObj @ sp[(-114)+-3]
  9183   01047C  0E8B               	movlw	-117
  9184   01047E  CFE3 F034          	movff	plusw1,btemp+10
  9185   010482  0E8C               	movlw	-116
  9186   010484  CFE3 F035          	movff	plusw1,btemp+11
  9187   010488  0E07               	movlw	7
  9188   01048A  2434               	addwf	(btemp+10)^0,w,c
  9189   01048C  6EE9               	movwf	fsr0l,c
  9190   01048E  0E00               	movlw	0
  9191   010490  2035               	addwfc	(btemp+11)^0,w,c
  9192   010492  6EEA               	movwf	fsr0h,c
  9193   010494  50EF               	movf	indf0,w,c
  9194   010496  6E35               	movwf	(btemp+11)^0,c
  9195                           
  9196                           ;stkvar	_txObj @ sp[(-114)+-3]
  9197   010498  0E8B               	movlw	-117
  9198   01049A  CFE3 F032          	movff	plusw1,btemp+8
  9199   01049E  0E8C               	movlw	-116
  9200   0104A0  CFE3 F033          	movff	plusw1,btemp+9
  9201   0104A4  0E08               	movlw	8
  9202   0104A6  2432               	addwf	(btemp+8)^0,w,c
  9203   0104A8  6EE9               	movwf	fsr0l,c
  9204   0104AA  0E00               	movlw	0
  9205   0104AC  2033               	addwfc	(btemp+9)^0,w,c
  9206   0104AE  6EEA               	movwf	fsr0h,c
  9207   0104B0  50EF               	movf	indf0,w,c
  9208   0104B2  6E34               	movwf	(btemp+10)^0,c
  9209   0104B4  90D8               	bcf	status,0,c
  9210   0104B6  3434               	rlcf	(btemp+10)^0,w,c
  9211   0104B8  1035               	iorwf	(btemp+11)^0,w,c
  9212   0104BA  6EDF               	movwf	indf2,c
  9213   0104BC                     
  9214                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  9215                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9216   0104BC  0E98               	movlw	152
  9217   0104BE  24E1               	addwf	fsr1l,w,c
  9218   0104C0  6ED9               	movwf	fsr2l,c
  9219   0104C2  0EFF               	movlw	255
  9220   0104C4  20E2               	addwfc	fsr1h,w,c
  9221   0104C6  6EDA               	movwf	fsr2h,c
  9222                           
  9223                           ;stkvar	_txObj @ sp[(-114)+-3]
  9224   0104C8  0E8B               	movlw	-117
  9225   0104CA  CFE3 F034          	movff	plusw1,btemp+10
  9226   0104CE  0E8C               	movlw	-116
  9227   0104D0  CFE3 F035          	movff	plusw1,btemp+11
  9228   0104D4  0E08               	movlw	8
  9229   0104D6  2434               	addwf	(btemp+10)^0,w,c
  9230   0104D8  6EE9               	movwf	fsr0l,c
  9231   0104DA  0E00               	movlw	0
  9232   0104DC  2035               	addwfc	(btemp+11)^0,w,c
  9233   0104DE  6EEA               	movwf	fsr0h,c
  9234   0104E0  CFEE F032          	movff	postinc0,btemp+8
  9235   0104E4  CFEE F033          	movff	postinc0,btemp+9
  9236   0104E8  CFEE F034          	movff	postinc0,btemp+10
  9237   0104EC  CFEE F035          	movff	postinc0,btemp+11
  9238   0104F0  0E08               	movlw	8
  9239   0104F2  EF80  F082         	goto	u1880
  9240   0104F6                     u1885:
  9241   0104F6  90D8               	bcf	status,0,c
  9242   0104F8  3235               	rrcf	(btemp+11)^0,f,c
  9243   0104FA  3234               	rrcf	(btemp+10)^0,f,c
  9244   0104FC  3233               	rrcf	(btemp+9)^0,f,c
  9245   0104FE  3232               	rrcf	(btemp+8)^0,f,c
  9246   010500                     u1880:
  9247   010500  2EE8               	decfsz	wreg,f,c
  9248   010502  EF7B  F082         	goto	u1885
  9249   010506  5032               	movf	(btemp+8)^0,w,c
  9250   010508  6EDF               	movwf	indf2,c
  9251   01050A                     
  9252                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  9253                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9254   01050A  0E99               	movlw	153
  9255   01050C  24E1               	addwf	fsr1l,w,c
  9256   01050E  6ED9               	movwf	fsr2l,c
  9257   010510  0EFF               	movlw	255
  9258   010512  20E2               	addwfc	fsr1h,w,c
  9259   010514  6EDA               	movwf	fsr2h,c
  9260                           
  9261                           ;stkvar	_txObj @ sp[(-114)+-3]
  9262   010516  0E8B               	movlw	-117
  9263   010518  CFE3 F034          	movff	plusw1,btemp+10
  9264   01051C  0E8C               	movlw	-116
  9265   01051E  CFE3 F035          	movff	plusw1,btemp+11
  9266   010522  0E08               	movlw	8
  9267   010524  2434               	addwf	(btemp+10)^0,w,c
  9268   010526  6EE9               	movwf	fsr0l,c
  9269   010528  0E00               	movlw	0
  9270   01052A  2035               	addwfc	(btemp+11)^0,w,c
  9271   01052C  6EEA               	movwf	fsr0h,c
  9272   01052E  CFEE F032          	movff	postinc0,btemp+8
  9273   010532  CFEE F033          	movff	postinc0,btemp+9
  9274   010536  CFEE F034          	movff	postinc0,btemp+10
  9275   01053A  CFEE F035          	movff	postinc0,btemp+11
  9276   01053E  0E10               	movlw	16
  9277   010540  EFA7  F082         	goto	u1890
  9278   010544                     u1895:
  9279   010544  90D8               	bcf	status,0,c
  9280   010546  3235               	rrcf	(btemp+11)^0,f,c
  9281   010548  3234               	rrcf	(btemp+10)^0,f,c
  9282   01054A  3233               	rrcf	(btemp+9)^0,f,c
  9283   01054C  3232               	rrcf	(btemp+8)^0,f,c
  9284   01054E                     u1890:
  9285   01054E  2EE8               	decfsz	wreg,f,c
  9286   010550  EFA2  F082         	goto	u1895
  9287   010554  5032               	movf	(btemp+8)^0,w,c
  9288   010556  6EDF               	movwf	indf2,c
  9289   010558                     
  9290                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  9291                           ;stkvar	_i @ sp[(-114)+112]
  9292   010558  0EFE               	movlw	-2
  9293   01055A  6AE3               	clrf	plusw1,c
  9294   01055C  EFD7  F082         	goto	l4246
  9295   010560                     l4242:
  9296                           
  9297                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  9298                           ;stkvar	_i @ sp[(-114)+112]
  9299   010560  0EFE               	movlw	-2
  9300   010562  CFE3 F035          	movff	plusw1,btemp+11
  9301                           
  9302                           ;stkvar	_txd @ sp[(-114)+-5]
  9303   010566  0E89               	movlw	-119
  9304   010568  CFE3 F032          	movff	plusw1,btemp+8
  9305   01056C  0E8A               	movlw	-118
  9306   01056E  CFE3 F033          	movff	plusw1,btemp+9
  9307   010572  5035               	movf	(btemp+11)^0,w,c
  9308   010574  2432               	addwf	(btemp+8)^0,w,c
  9309   010576  6ED9               	movwf	fsr2l,c
  9310   010578  0E00               	movlw	0
  9311   01057A  2033               	addwfc	(btemp+9)^0,w,c
  9312   01057C  6EDA               	movwf	fsr2h,c
  9313                           
  9314                           ;stkvar	_i @ sp[(-114)+112]
  9315   01057E  0EFE               	movlw	-2
  9316   010580  50E3               	movf	plusw1,w,c
  9317   010582  6E34               	movwf	(btemp+10)^0,c
  9318   010584  6A35               	clrf	(btemp+11)^0,c
  9319   010586  0E08               	movlw	8
  9320   010588  2634               	addwf	(btemp+10)^0,f,c
  9321   01058A  0E00               	movlw	0
  9322   01058C  2235               	addwfc	(btemp+11)^0,f,c
  9323                           
  9324                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9325   01058E  0E92               	movlw	146
  9326   010590  24E1               	addwf	fsr1l,w,c
  9327   010592  6E32               	movwf	(btemp+8)^0,c
  9328   010594  0EFF               	movlw	255
  9329   010596  20E2               	addwfc	fsr1h,w,c
  9330   010598  6E33               	movwf	(btemp+9)^0,c
  9331   01059A  5034               	movf	(btemp+10)^0,w,c
  9332   01059C  2432               	addwf	(btemp+8)^0,w,c
  9333   01059E  6EE9               	movwf	fsr0l,c
  9334   0105A0  5035               	movf	(btemp+11)^0,w,c
  9335   0105A2  2033               	addwfc	(btemp+9)^0,w,c
  9336   0105A4  6EEA               	movwf	fsr0h,c
  9337   0105A6  CFDF FFEF          	movff	indf2,indf0
  9338   0105AA                     
  9339                           ;can/can.c: 790:     }
  9340                           ;stkvar	_i @ sp[(-114)+112]
  9341   0105AA  0EFE               	movlw	-2
  9342   0105AC  2AE3               	incf	plusw1,f,c
  9343   0105AE                     l4246:
  9344                           
  9345                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9346                           ;stkvar	_i @ sp[(-114)+112]
  9347   0105AE  0EFE               	movlw	-2
  9348   0105B0  CFE3 F035          	movff	plusw1,btemp+11
  9349   0105B4  C035  F02E         	movff	btemp+11,btemp+4
  9350   0105B8  6A2F               	clrf	(btemp+5)^0,c
  9351   0105BA  6A30               	clrf	(btemp+6)^0,c
  9352   0105BC  6A31               	clrf	(btemp+7)^0,c
  9353   0105BE  0E85               	movlw	-123
  9354   0105C0  50E3               	movf	plusw1,w,c
  9355   0105C2  5C2E               	subwf	(btemp+4)^0,w,c
  9356   0105C4  0E86               	movlw	-122
  9357   0105C6  50E3               	movf	plusw1,w,c
  9358   0105C8  582F               	subwfb	(btemp+5)^0,w,c
  9359   0105CA  0E87               	movlw	-121
  9360   0105CC  50E3               	movf	plusw1,w,c
  9361   0105CE  5830               	subwfb	(btemp+6)^0,w,c
  9362   0105D0  0E88               	movlw	-120
  9363   0105D2  50E3               	movf	plusw1,w,c
  9364   0105D4  5831               	subwfb	(btemp+7)^0,w,c
  9365   0105D6  A0D8               	btfss	status,0,c
  9366   0105D8  EFF0  F082         	goto	u1901
  9367   0105DC  EFF2  F082         	goto	u1900
  9368   0105E0                     u1901:
  9369   0105E0  EFB0  F082         	goto	l4242
  9370   0105E4                     u1900:
  9371   0105E4                     
  9372                           ;can/can.c: 793:     uint16_t n = 0;
  9373                           ;stkvar	_n @ sp[(-114)+109]
  9374   0105E4  0EFB               	movlw	-5
  9375   0105E6  6AE3               	clrf	plusw1,c
  9376   0105E8  0EFC               	movlw	-4
  9377   0105EA  6AE3               	clrf	plusw1,c
  9378   0105EC                     
  9379                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  9380                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9381   0105EC  0E85               	movlw	-123
  9382   0105EE  CFE3 F035          	movff	plusw1,btemp+11
  9383   0105F2  0E03               	movlw	3
  9384   0105F4  1635               	andwf	(btemp+11)^0,f,c
  9385   0105F6  B4D8               	btfsc	status,2,c
  9386   0105F8  EF00  F083         	goto	u1911
  9387   0105FC  EF02  F083         	goto	u1910
  9388   010600                     u1911:
  9389   010600  EF51  F083         	goto	l4266
  9390   010604                     u1910:
  9391   010604                     
  9392                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  9393                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9394   010604  0E85               	movlw	-123
  9395   010606  CFE3 F034          	movff	plusw1,btemp+10
  9396   01060A  0E86               	movlw	-122
  9397   01060C  CFE3 F035          	movff	plusw1,btemp+11
  9398   010610  0E03               	movlw	3
  9399   010612  1634               	andwf	(btemp+10)^0,f,c
  9400   010614  0E00               	movlw	0
  9401   010616  1635               	andwf	(btemp+11)^0,f,c
  9402   010618  5034               	movf	(btemp+10)^0,w,c
  9403   01061A  0804               	sublw	4
  9404   01061C  6E32               	movwf	(btemp+8)^0,c
  9405   01061E  5035               	movf	(btemp+11)^0,w,c
  9406   010620  A0D8               	btfss	status,0,c
  9407   010622  2AE8               	incf	wreg,f,c
  9408   010624  0800               	sublw	0
  9409   010626  6E33               	movwf	(btemp+9)^0,c
  9410                           
  9411                           ;stkvar	_n @ sp[(-114)+109]
  9412   010628  0EFB               	movlw	-5
  9413   01062A  C032  FFE3         	movff	btemp+8,plusw1
  9414   01062E  0EFC               	movlw	-4
  9415   010630  C033  FFE3         	movff	btemp+9,plusw1
  9416   010634                     
  9417                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  9418   010634  0E08               	movlw	8
  9419   010636  6E35               	movwf	(btemp+11)^0,c
  9420                           
  9421                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9422   010638  0E85               	movlw	-123
  9423   01063A  50E3               	movf	plusw1,w,c
  9424   01063C  2435               	addwf	(btemp+11)^0,w,c
  9425   01063E  6E34               	movwf	(btemp+10)^0,c
  9426                           
  9427                           ;stkvar	_i @ sp[(-114)+112]
  9428   010640  0EFE               	movlw	-2
  9429   010642  C034  FFE3         	movff	btemp+10,plusw1
  9430   010646                     
  9431                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  9432                           ;stkvar	_j @ sp[(-114)+113]
  9433   010646  0EFF               	movlw	-1
  9434   010648  6AE3               	clrf	plusw1,c
  9435   01064A  EF40  F083         	goto	l4264
  9436   01064E                     l4260:
  9437                           
  9438                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  9439                           ;stkvar	_txBuffer @ sp[(-114)+4]
  9440   01064E  0E92               	movlw	146
  9441   010650  24E1               	addwf	fsr1l,w,c
  9442   010652  6E34               	movwf	(btemp+10)^0,c
  9443   010654  0EFF               	movlw	255
  9444   010656  20E2               	addwfc	fsr1h,w,c
  9445   010658  6E35               	movwf	(btemp+11)^0,c
  9446                           
  9447                           ;stkvar	_i @ sp[(-114)+112]
  9448   01065A  0EFE               	movlw	-2
  9449   01065C  50E3               	movf	plusw1,w,c
  9450   01065E  2634               	addwf	(btemp+10)^0,f,c
  9451   010660  0E00               	movlw	0
  9452   010662  2235               	addwfc	(btemp+11)^0,f,c
  9453                           
  9454                           ;stkvar	_j @ sp[(-114)+113]
  9455   010664  0EFF               	movlw	-1
  9456   010666  50E3               	movf	plusw1,w,c
  9457   010668  2634               	addwf	(btemp+10)^0,f,c
  9458   01066A  0E00               	movlw	0
  9459   01066C  2235               	addwfc	(btemp+11)^0,f,c
  9460   01066E  0E08               	movlw	8
  9461   010670  2434               	addwf	(btemp+10)^0,w,c
  9462   010672  6ED9               	movwf	fsr2l,c
  9463   010674  0E00               	movlw	0
  9464   010676  2035               	addwfc	(btemp+11)^0,w,c
  9465   010678  6EDA               	movwf	fsr2h,c
  9466   01067A  6ADF               	clrf	indf2,c
  9467   01067C                     
  9468                           ;can/can.c: 803:         }
  9469                           ;stkvar	_j @ sp[(-114)+113]
  9470   01067C  0EFF               	movlw	-1
  9471   01067E  2AE3               	incf	plusw1,f,c
  9472   010680                     l4264:
  9473                           
  9474                           ;stkvar	_n @ sp[(-114)+109]
  9475                           ;stkvar	_j @ sp[(-114)+113]
  9476   010680  0EFF               	movlw	-1
  9477   010682  50E3               	movf	plusw1,w,c
  9478   010684  6E34               	movwf	(btemp+10)^0,c
  9479   010686  6A35               	clrf	(btemp+11)^0,c
  9480   010688  0EFB               	movlw	-5
  9481   01068A  50E3               	movf	plusw1,w,c
  9482   01068C  5C34               	subwf	(btemp+10)^0,w,c
  9483   01068E  0EFC               	movlw	-4
  9484   010690  50E3               	movf	plusw1,w,c
  9485   010692  5835               	subwfb	(btemp+11)^0,w,c
  9486   010694  A0D8               	btfss	status,0,c
  9487   010696  EF4F  F083         	goto	u1921
  9488   01069A  EF51  F083         	goto	u1920
  9489   01069E                     u1921:
  9490   01069E  EF27  F083         	goto	l4260
  9491   0106A2                     u1920:
  9492   0106A2                     l4266:
  9493                           
  9494                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  9495                           ;stkvar	_n @ sp[(-114)+109]
  9496                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  9497   0106A2  0E85               	movlw	-123
  9498   0106A4  CFE3 F034          	movff	plusw1,btemp+10
  9499   0106A8  0E86               	movlw	-122
  9500   0106AA  CFE3 F035          	movff	plusw1,btemp+11
  9501   0106AE  0EFB               	movlw	-5
  9502   0106B0  50E3               	movf	plusw1,w,c
  9503   0106B2  2634               	addwf	(btemp+10)^0,f,c
  9504   0106B4  0EFC               	movlw	-4
  9505   0106B6  50E3               	movf	plusw1,w,c
  9506   0106B8  2235               	addwfc	(btemp+11)^0,f,c
  9507   0106BA  0E08               	movlw	8
  9508   0106BC  2634               	addwf	(btemp+10)^0,f,c
  9509   0106BE  0E00               	movlw	0
  9510   0106C0  2235               	addwfc	(btemp+11)^0,f,c
  9511   0106C2  C034  FFE6         	movff	btemp+10,postinc1
  9512   0106C6  C035  FFE6         	movff	btemp+11,postinc1
  9513                           
  9514                           ;stkvar	_txBuffer @ sp[(-116)+4]
  9515   0106CA  0E90               	movlw	144
  9516   0106CC  24E1               	addwf	fsr1l,w,c
  9517   0106CE  6E2A               	movwf	btemp^0,c
  9518   0106D0  0EFF               	movlw	255
  9519   0106D2  20E2               	addwfc	fsr1h,w,c
  9520   0106D4  6E2B               	movwf	(btemp+1)^0,c
  9521   0106D6  C02A  FFE6         	movff	btemp,postinc1
  9522   0106DA  C02B  FFE6         	movff	btemp+1,postinc1
  9523                           
  9524                           ;stkvar	_a @ sp[(-118)+97]
  9525   0106DE  0EEB               	movlw	-21
  9526   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  9527   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  9528   0106E8  ECB1  F099         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  9529                           
  9530                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9531   0106EC  0EFD               	movlw	-3
  9532   0106EE  C02A  FFE3         	movff	btemp,plusw1
  9533   0106F2                     
  9534                           ;can/can.c: 807:     if (spiTransferError) {
  9535                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9536   0106F2  0EFD               	movlw	-3
  9537   0106F4  50E3               	movf	plusw1,w,c
  9538   0106F6  B4D8               	btfsc	status,2,c
  9539   0106F8  EF80  F083         	goto	u1931
  9540   0106FC  EF82  F083         	goto	u1930
  9541   010700                     u1931:
  9542   010700  EF86  F083         	goto	l4274
  9543   010704                     u1930:
  9544   010704                     
  9545                           ;can/can.c: 808:         return -4;
  9546   010704  0EFC               	movlw	252
  9547   010706  6E2A               	movwf	btemp^0,c
  9548   010708  EFA1  F083         	goto	l264
  9549   01070C                     l4274:
  9550                           
  9551                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  9552                           ;stkvar	_flush @ sp[(-114)+-10]
  9553   01070C  0E84               	movlw	-124
  9554   01070E  50E3               	movf	plusw1,w,c
  9555   010710  6EE6               	movwf	postinc1,c
  9556                           
  9557                           ;stkvar	_channel @ sp[(-115)+-1]
  9558   010712  0E8C               	movlw	-116
  9559   010714  50E3               	movf	plusw1,w,c
  9560   010716  6EE6               	movwf	postinc1,c
  9561   010718  EC05  F0A0         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  9562                           
  9563                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9564   01071C  0EFD               	movlw	-3
  9565   01071E  C02A  FFE3         	movff	btemp,plusw1
  9566   010722                     
  9567                           ;can/can.c: 813:     if (spiTransferError) {
  9568                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9569   010722  0EFD               	movlw	-3
  9570   010724  50E3               	movf	plusw1,w,c
  9571   010726  B4D8               	btfsc	status,2,c
  9572   010728  EF98  F083         	goto	u1941
  9573   01072C  EF9A  F083         	goto	u1940
  9574   010730                     u1941:
  9575   010730  EF9E  F083         	goto	l4282
  9576   010734                     u1940:
  9577   010734                     
  9578                           ;can/can.c: 814:         return -5;
  9579   010734  0EFB               	movlw	251
  9580   010736  6E2A               	movwf	btemp^0,c
  9581   010738  EFA1  F083         	goto	l264
  9582   01073C                     l4282:
  9583                           
  9584                           ;can/can.c: 817:     return spiTransferError;
  9585                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  9586   01073C  0EFD               	movlw	-3
  9587   01073E  CFE3 F02A          	movff	plusw1,btemp
  9588   010742                     l264:
  9589                           
  9590                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  9591   010742  0E84               	movlw	132
  9592   010744  26E1               	addwf	fsr1l,f,c
  9593   010746  0EFF               	movlw	255
  9594   010748  22E2               	addwfc	fsr1h,f,c
  9595   01074A  0012               	return		;funcret
  9596   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  9597                           	callstack 0
  9598                           
  9599 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  9600 ;; Defined at:
  9601 ;;		line 383 in file "can/can.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;  address         2  [STACK] unsigned short 
  9604 ;;  txd             2  [STACK] PTR unsigned char 
  9605 ;;		 -> txd(200), txBuffer(76), 
  9606 ;;  nBytes          2  [STACK] unsigned short 
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;  i               2  [STACK] unsigned short 
  9609 ;;  spiTransferS    2  [STACK] unsigned short 
  9610 ;;  spiTransferE    1  [STACK] char 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  1  [STACK] char 
  9613 ;; Registers used:
  9614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used: 1
  9626 ;; Hardware stack levels required when called: 8
  9627 ;; This function calls:
  9628 ;;		_SpiTransfer
  9629 ;; This function is called by:
  9630 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9631 ;; This function uses a reentrant model
  9632 ;;
  9633                           
  9634                           	psect	text26
  9635   013362                     __ptext26:
  9636                           	callstack 0
  9637   013362                     _DRV_CANFDSPI_WriteByteArray:
  9638                           	callstack 0
  9639                           
  9640                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9641   013362  0E05               	movlw	5
  9642   013364  26E1               	addwf	fsr1l,f,c
  9643   013366  0E00               	movlw	0
  9644   013368  22E2               	addwfc	fsr1h,f,c
  9645   01336A                     
  9646                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  9647                           ;stkvar	_nBytes @ sp[(-5)+-6]
  9648   01336A  0EF5               	movlw	-11
  9649   01336C  50E3               	movf	plusw1,w,c
  9650   01336E  0F02               	addlw	2
  9651   013370  6E34               	movwf	(btemp+10)^0,c
  9652   013372  0EF6               	movlw	-10
  9653   013374  CFE3 F035          	movff	plusw1,btemp+11
  9654   013378  0E00               	movlw	0
  9655   01337A  2235               	addwfc	(btemp+11)^0,f,c
  9656                           
  9657                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9658   01337C  0EFD               	movlw	-3
  9659   01337E  C034  FFE3         	movff	btemp+10,plusw1
  9660   013382  0EFE               	movlw	-2
  9661   013384  C035  FFE3         	movff	btemp+11,plusw1
  9662   013388                     
  9663                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  9664                           ;stkvar	_address @ sp[(-5)+-2]
  9665   013388  0EFA               	movlw	250
  9666   01338A  24E1               	addwf	fsr1l,w,c
  9667   01338C  6ED9               	movwf	fsr2l,c
  9668   01338E  0EFF               	movlw	255
  9669   013390  20E2               	addwfc	fsr1h,w,c
  9670   013392  6EDA               	movwf	fsr2h,c
  9671   013394  50DF               	movf	indf2,w,c
  9672   013396  0B0F               	andlw	15
  9673   013398  0F20               	addlw	32
  9674   01339A  0101               	movlb	1	; () banked
  9675   01339C  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9676   01339E                     
  9677                           ; BSR set to: 1
  9678                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  9679                           ;stkvar	_address @ sp[(-5)+-2]
  9680   01339E  0EF9               	movlw	-7
  9681   0133A0  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9682   0133A4                     
  9683                           ; BSR set to: 1
  9684                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  9685   0133A4  0E02               	movlw	2
  9686   0133A6  6E34               	movwf	(btemp+10)^0,c
  9687   0133A8  0E00               	movlw	0
  9688   0133AA  6E35               	movwf	(btemp+11)^0,c
  9689                           
  9690                           ;stkvar	_i @ sp[(-5)+0]
  9691   0133AC  0EFB               	movlw	-5
  9692   0133AE  C034  FFE3         	movff	btemp+10,plusw1
  9693   0133B2  0EFC               	movlw	-4
  9694   0133B4  C035  FFE3         	movff	btemp+11,plusw1
  9695   0133B8  EF0D  F09A         	goto	l4072
  9696   0133BC                     l4068:
  9697                           
  9698                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  9699                           ;stkvar	_i @ sp[(-5)+0]
  9700                           ;stkvar	_txd @ sp[(-5)+-4]
  9701   0133BC  0EF7               	movlw	-9
  9702   0133BE  CFE3 F034          	movff	plusw1,btemp+10
  9703   0133C2  0EF8               	movlw	-8
  9704   0133C4  CFE3 F035          	movff	plusw1,btemp+11
  9705   0133C8  0EFB               	movlw	-5
  9706   0133CA  50E3               	movf	plusw1,w,c
  9707   0133CC  2634               	addwf	(btemp+10)^0,f,c
  9708   0133CE  0EFC               	movlw	-4
  9709   0133D0  50E3               	movf	plusw1,w,c
  9710   0133D2  2235               	addwfc	(btemp+11)^0,f,c
  9711   0133D4  0EFE               	movlw	254
  9712   0133D6  2434               	addwf	(btemp+10)^0,w,c
  9713   0133D8  6ED9               	movwf	fsr2l,c
  9714   0133DA  0EFF               	movlw	255
  9715   0133DC  2035               	addwfc	(btemp+11)^0,w,c
  9716   0133DE  6EDA               	movwf	fsr2h,c
  9717                           
  9718                           ;stkvar	_i @ sp[(-5)+0]
  9719   0133E0  0EFB               	movlw	-5
  9720   0133E2  CFE3 F034          	movff	plusw1,btemp+10
  9721   0133E6  0EFC               	movlw	-4
  9722   0133E8  CFE3 F035          	movff	plusw1,btemp+11
  9723   0133EC  0E00               	movlw	low _spiTransmitBuffer
  9724   0133EE  2434               	addwf	(btemp+10)^0,w,c
  9725   0133F0  6EE9               	movwf	fsr0l,c
  9726   0133F2  0E01               	movlw	high _spiTransmitBuffer
  9727   0133F4  2035               	addwfc	(btemp+11)^0,w,c
  9728   0133F6  6EEA               	movwf	fsr0h,c
  9729   0133F8  CFDF FFEF          	movff	indf2,indf0
  9730   0133FC                     
  9731                           ;can/can.c: 397:     }
  9732                           ;stkvar	_i @ sp[(-5)+0]
  9733   0133FC  0EFB               	movlw	-5
  9734   0133FE  50E3               	movf	plusw1,w,c
  9735   013400  0F01               	addlw	1
  9736   013402  6E2A               	movwf	btemp^0,c
  9737   013404  0EFB               	movlw	-5
  9738   013406  C02A  FFE3         	movff	btemp,plusw1
  9739   01340A  6A2A               	clrf	btemp^0,c
  9740   01340C  0EFC               	movlw	-4
  9741   01340E  50E3               	movf	plusw1,w,c
  9742   013410  202A               	addwfc	btemp^0,w,c
  9743   013412  6E2A               	movwf	btemp^0,c
  9744   013414  0EFC               	movlw	-4
  9745   013416  C02A  FFE3         	movff	btemp,plusw1
  9746   01341A                     l4072:
  9747                           
  9748                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9749   01341A  0EFD               	movlw	-3
  9750   01341C  CFE3 F034          	movff	plusw1,btemp+10
  9751   013420  0EFE               	movlw	-2
  9752   013422  CFE3 F035          	movff	plusw1,btemp+11
  9753                           
  9754                           ;stkvar	_i @ sp[(-5)+0]
  9755   013426  0EFB               	movlw	-5
  9756   013428  CFE3 F032          	movff	plusw1,btemp+8
  9757   01342C  0EFC               	movlw	-4
  9758   01342E  CFE3 F033          	movff	plusw1,btemp+9
  9759   013432  5034               	movf	(btemp+10)^0,w,c
  9760   013434  5C32               	subwf	(btemp+8)^0,w,c
  9761   013436  5035               	movf	(btemp+11)^0,w,c
  9762   013438  5833               	subwfb	(btemp+9)^0,w,c
  9763   01343A  A0D8               	btfss	status,0,c
  9764   01343C  EF22  F09A         	goto	u1701
  9765   013440  EF24  F09A         	goto	u1700
  9766   013444                     u1701:
  9767   013444  EFDE  F099         	goto	l4068
  9768   013448                     u1700:
  9769   013448                     
  9770                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  9771                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  9772   013448  0EFD               	movlw	-3
  9773   01344A  CFE3 FFE6          	movff	plusw1,postinc1
  9774   01344E  CFE3 FFE6          	movff	plusw1,postinc1
  9775   013452  0E00               	movlw	low _spiReceiveBuffer
  9776   013454  6EE6               	movwf	postinc1,c
  9777   013456  0E02               	movlw	high _spiReceiveBuffer
  9778   013458  6EE6               	movwf	postinc1,c
  9779   01345A  0E00               	movlw	low _spiTransmitBuffer
  9780   01345C  6EE6               	movwf	postinc1,c
  9781   01345E  0E01               	movlw	high _spiTransmitBuffer
  9782   013460  6EE6               	movwf	postinc1,c
  9783   013462  EC3B  F09E         	call	_SpiTransfer	;wreg free
  9784                           
  9785                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9786   013466  0EFF               	movlw	-1
  9787   013468  C02A  FFE3         	movff	btemp,plusw1
  9788   01346C                     
  9789                           ;can/can.c: 401:     return spiTransferError;
  9790                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  9791   01346C  0EFF               	movlw	-1
  9792   01346E  CFE3 F02A          	movff	plusw1,btemp
  9793   013472                     
  9794                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9795   013472  0EF5               	movlw	245
  9796   013474  26E1               	addwf	fsr1l,f,c
  9797   013476  0EFF               	movlw	255
  9798   013478  22E2               	addwfc	fsr1h,f,c
  9799   01347A  0012               	return		;funcret
  9800   01347C                     __end_of_DRV_CANFDSPI_WriteByteArray:
  9801                           	callstack 0
  9802                           
  9803 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  9804 ;; Defined at:
  9805 ;;		line 880 in file "can/can.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  channel         1  [STACK] enum E5287
  9808 ;;  flush           1  [STACK] _Bool 
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  9811 ;;  a               2  [STACK] unsigned short 
  9812 ;;  spiTransferE    1  [STACK] char 
  9813 ;; Return value:  Size  Location     Type
  9814 ;;                  1  [STACK] char 
  9815 ;; Registers used:
  9816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  9817 ;; Tracked objects:
  9818 ;;		On entry : 0/0
  9819 ;;		On exit  : 0/0
  9820 ;;		Unchanged: 0/0
  9821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9826 ;;Total ram usage:        0 bytes
  9827 ;; Hardware stack levels used: 1
  9828 ;; Hardware stack levels required when called: 9
  9829 ;; This function calls:
  9830 ;;		_DRV_CANFDSPI_WriteByte
  9831 ;; This function is called by:
  9832 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9833 ;; This function uses a reentrant model
  9834 ;;
  9835                           
  9836                           	psect	text27
  9837   01400A                     __ptext27:
  9838                           	callstack 0
  9839   01400A                     _DRV_CANFDSPI_TransmitChannelUpdate:
  9840                           	callstack 0
  9841                           
  9842                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9843   01400A  0E08               	movlw	8
  9844   01400C  26E1               	addwf	fsr1l,f,c
  9845   01400E  0E00               	movlw	0
  9846   014010  22E2               	addwfc	fsr1h,f,c
  9847   014012                     
  9848                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  9849                           ;stkvar	_channel @ sp[(-8)+-1]
  9850   014012  0EF7               	movlw	-9
  9851   014014  50E3               	movf	plusw1,w,c
  9852   014016  0D0C               	mullw	12
  9853   014018  0E51               	movlw	81
  9854   01401A  26F3               	addwf	243,f,c
  9855   01401C  0E00               	movlw	0
  9856   01401E  22F4               	addwfc	244,f,c
  9857                           
  9858                           ;stkvar	_a @ sp[(-8)+5]
  9859   014020  0EFD               	movlw	-3
  9860   014022  CFF3 FFE3          	movff	prodl,plusw1
  9861   014026  0EFE               	movlw	-2
  9862   014028  CFF4 FFE3          	movff	prodh,plusw1
  9863   01402C                     
  9864                           ;can/can.c: 889:     ciFifoCon.word = 0;
  9865                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9866   01402C  0EF8               	movlw	-8
  9867   01402E  6AE3               	clrf	plusw1,c
  9868   014030  0EF9               	movlw	-7
  9869   014032  6AE3               	clrf	plusw1,c
  9870   014034  0EFA               	movlw	-6
  9871   014036  6AE3               	clrf	plusw1,c
  9872   014038  0EFB               	movlw	-5
  9873   01403A  6AE3               	clrf	plusw1,c
  9874   01403C                     
  9875                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  9876                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9877   01403C  0EF9               	movlw	249
  9878   01403E  24E1               	addwf	fsr1l,w,c
  9879   014040  6ED9               	movwf	fsr2l,c
  9880   014042  0EFF               	movlw	255
  9881   014044  20E2               	addwfc	fsr1h,w,c
  9882   014046  6EDA               	movwf	fsr2h,c
  9883   014048  80DF               	bsf	indf2,0,c
  9884   01404A                     
  9885                           ;can/can.c: 893:     if (flush) {
  9886                           ;stkvar	_flush @ sp[(-8)+-2]
  9887   01404A  0EF6               	movlw	-10
  9888   01404C  50E3               	movf	plusw1,w,c
  9889   01404E  B4D8               	btfsc	status,2,c
  9890   014050  EF2C  F0A0         	goto	u1681
  9891   014054  EF2E  F0A0         	goto	u1680
  9892   014058                     u1681:
  9893   014058  EF35  F0A0         	goto	l4028
  9894   01405C                     u1680:
  9895   01405C                     
  9896                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  9897                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9898   01405C  0EF9               	movlw	249
  9899   01405E  24E1               	addwf	fsr1l,w,c
  9900   014060  6ED9               	movwf	fsr2l,c
  9901   014062  0EFF               	movlw	255
  9902   014064  20E2               	addwfc	fsr1h,w,c
  9903   014066  6EDA               	movwf	fsr2h,c
  9904   014068  82DF               	bsf	indf2,1,c
  9905   01406A                     l4028:
  9906                           
  9907                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  9908                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  9909   01406A  0EF9               	movlw	249
  9910   01406C  24E1               	addwf	fsr1l,w,c
  9911   01406E  6ED9               	movwf	fsr2l,c
  9912   014070  0EFF               	movlw	255
  9913   014072  20E2               	addwfc	fsr1h,w,c
  9914   014074  6EDA               	movwf	fsr2h,c
  9915   014076  50DF               	movf	indf2,w,c
  9916   014078  6EE6               	movwf	postinc1,c
  9917                           
  9918                           ;stkvar	_a @ sp[(-9)+5]
  9919   01407A  0EFC               	movlw	-4
  9920   01407C  CFE3 FFE6          	movff	plusw1,postinc1
  9921   014080  CFE3 FFE6          	movff	plusw1,postinc1
  9922   014084  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9923                           
  9924                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9925   014088  0EFF               	movlw	-1
  9926   01408A  C02A  FFE3         	movff	btemp,plusw1
  9927   01408E                     
  9928                           ;can/can.c: 898:     if (spiTransferError) {
  9929                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9930   01408E  0EFF               	movlw	-1
  9931   014090  50E3               	movf	plusw1,w,c
  9932   014092  B4D8               	btfsc	status,2,c
  9933   014094  EF4E  F0A0         	goto	u1691
  9934   014098  EF50  F0A0         	goto	u1690
  9935   01409C                     u1691:
  9936   01409C  EF54  F0A0         	goto	l4036
  9937   0140A0                     u1690:
  9938   0140A0                     
  9939                           ;can/can.c: 899:         return -1;
  9940   0140A0  0EFF               	movlw	255
  9941   0140A2  6E2A               	movwf	btemp^0,c
  9942   0140A4  EF57  F0A0         	goto	l293
  9943   0140A8                     l4036:
  9944                           
  9945                           ;can/can.c: 902:     return spiTransferError;
  9946                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9947   0140A8  0EFF               	movlw	-1
  9948   0140AA  CFE3 F02A          	movff	plusw1,btemp
  9949   0140AE                     l293:
  9950                           
  9951                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9952   0140AE  0EF6               	movlw	246
  9953   0140B0  26E1               	addwf	fsr1l,f,c
  9954   0140B2  0EFF               	movlw	255
  9955   0140B4  22E2               	addwfc	fsr1h,f,c
  9956   0140B6  0012               	return		;funcret
  9957   0140B8                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9958                           	callstack 0
  9959                           
  9960 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9961 ;; Defined at:
  9962 ;;		line 405 in file "can/can.c"
  9963 ;; Parameters:    Size  Location     Type
  9964 ;;  address         2  [STACK] unsigned short 
  9965 ;;  rxd             2  [STACK] PTR unsigned long 
  9966 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9967 ;;		 -> fifoReg(12), 
  9968 ;;  nWords          2  [STACK] unsigned short 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  w               4  [STACK] struct _REG_t
  9971 ;;  i               2  [STACK] unsigned short 
  9972 ;;  j               2  [STACK] unsigned short 
  9973 ;;  spiTransferS    2  [STACK] unsigned short 
  9974 ;;  n               2  [STACK] unsigned short 
  9975 ;;  spiTransferE    1  [STACK] char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1  [STACK] char 
  9978 ;; Registers used:
  9979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used: 1
  9991 ;; Hardware stack levels required when called: 8
  9992 ;; This function calls:
  9993 ;;		_SpiTransfer
  9994 ;; This function is called by:
  9995 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9996 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9997 ;; This function uses a reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text28
 10001   0114B2                     __ptext28:
 10002                           	callstack 0
 10003   0114B2                     _DRV_CANFDSPI_ReadWordArray:
 10004                           	callstack 0
 10005                           
 10006                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 10007   0114B2  0E0D               	movlw	13
 10008   0114B4  26E1               	addwf	fsr1l,f,c
 10009   0114B6  0E00               	movlw	0
 10010   0114B8  22E2               	addwfc	fsr1h,f,c
 10011   0114BA                     
 10012                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
 10013                           ;stkvar	_nWords @ sp[(-13)+-6]
 10014   0114BA  0EED               	movlw	-19
 10015   0114BC  CFE3 F034          	movff	plusw1,btemp+10
 10016   0114C0  0EEE               	movlw	-18
 10017   0114C2  CFE3 F035          	movff	plusw1,btemp+11
 10018   0114C6  90D8               	bcf	status,0,c
 10019   0114C8  3634               	rlcf	(btemp+10)^0,f,c
 10020   0114CA  3635               	rlcf	(btemp+11)^0,f,c
 10021   0114CC  90D8               	bcf	status,0,c
 10022   0114CE  3634               	rlcf	(btemp+10)^0,f,c
 10023   0114D0  3635               	rlcf	(btemp+11)^0,f,c
 10024   0114D2  0E02               	movlw	2
 10025   0114D4  2634               	addwf	(btemp+10)^0,f,c
 10026   0114D6  0E00               	movlw	0
 10027   0114D8  2235               	addwfc	(btemp+11)^0,f,c
 10028                           
 10029                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10030   0114DA  0EFB               	movlw	-5
 10031   0114DC  C034  FFE3         	movff	btemp+10,plusw1
 10032   0114E0  0EFC               	movlw	-4
 10033   0114E2  C035  FFE3         	movff	btemp+11,plusw1
 10034   0114E6                     
 10035                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
 10036                           ;stkvar	_address @ sp[(-13)+-2]
 10037   0114E6  0EF2               	movlw	242
 10038   0114E8  24E1               	addwf	fsr1l,w,c
 10039   0114EA  6ED9               	movwf	fsr2l,c
 10040   0114EC  0EFF               	movlw	255
 10041   0114EE  20E2               	addwfc	fsr1h,w,c
 10042   0114F0  6EDA               	movwf	fsr2h,c
 10043   0114F2  50DF               	movf	indf2,w,c
 10044   0114F4  0B0F               	andlw	15
 10045   0114F6  0F30               	addlw	48
 10046   0114F8  0101               	movlb	1	; () banked
 10047   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 10048   0114FC                     
 10049                           ; BSR set to: 1
 10050                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
 10051                           ;stkvar	_address @ sp[(-13)+-2]
 10052   0114FC  0EF1               	movlw	-15
 10053   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 10054   011502                     
 10055                           ; BSR set to: 1
 10056                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
 10057   011502  0E02               	movlw	2
 10058   011504  6E34               	movwf	(btemp+10)^0,c
 10059   011506  0E00               	movlw	0
 10060   011508  6E35               	movwf	(btemp+11)^0,c
 10061                           
 10062                           ;stkvar	_i @ sp[(-13)+4]
 10063   01150A  0EF7               	movlw	-9
 10064   01150C  C034  FFE3         	movff	btemp+10,plusw1
 10065   011510  0EF8               	movlw	-8
 10066   011512  C035  FFE3         	movff	btemp+11,plusw1
 10067   011516  EFA9  F08A         	goto	l4094
 10068   01151A                     l4090:
 10069                           
 10070                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
 10071                           ;stkvar	_i @ sp[(-13)+4]
 10072   01151A  0EF7               	movlw	-9
 10073   01151C  CFE3 F034          	movff	plusw1,btemp+10
 10074   011520  0EF8               	movlw	-8
 10075   011522  CFE3 F035          	movff	plusw1,btemp+11
 10076   011526  0E00               	movlw	low _spiTransmitBuffer
 10077   011528  2434               	addwf	(btemp+10)^0,w,c
 10078   01152A  6ED9               	movwf	fsr2l,c
 10079   01152C  0E01               	movlw	high _spiTransmitBuffer
 10080   01152E  2035               	addwfc	(btemp+11)^0,w,c
 10081   011530  6EDA               	movwf	fsr2h,c
 10082   011532  6ADF               	clrf	indf2,c
 10083   011534                     
 10084                           ;can/can.c: 420:     }
 10085                           ;stkvar	_i @ sp[(-13)+4]
 10086   011534  0EF7               	movlw	-9
 10087   011536  50E3               	movf	plusw1,w,c
 10088   011538  0F01               	addlw	1
 10089   01153A  6E2A               	movwf	btemp^0,c
 10090   01153C  0EF7               	movlw	-9
 10091   01153E  C02A  FFE3         	movff	btemp,plusw1
 10092   011542  6A2A               	clrf	btemp^0,c
 10093   011544  0EF8               	movlw	-8
 10094   011546  50E3               	movf	plusw1,w,c
 10095   011548  202A               	addwfc	btemp^0,w,c
 10096   01154A  6E2A               	movwf	btemp^0,c
 10097   01154C  0EF8               	movlw	-8
 10098   01154E  C02A  FFE3         	movff	btemp,plusw1
 10099   011552                     l4094:
 10100                           
 10101                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10102   011552  0EFB               	movlw	-5
 10103   011554  CFE3 F034          	movff	plusw1,btemp+10
 10104   011558  0EFC               	movlw	-4
 10105   01155A  CFE3 F035          	movff	plusw1,btemp+11
 10106                           
 10107                           ;stkvar	_i @ sp[(-13)+4]
 10108   01155E  0EF7               	movlw	-9
 10109   011560  CFE3 F032          	movff	plusw1,btemp+8
 10110   011564  0EF8               	movlw	-8
 10111   011566  CFE3 F033          	movff	plusw1,btemp+9
 10112   01156A  5034               	movf	(btemp+10)^0,w,c
 10113   01156C  5C32               	subwf	(btemp+8)^0,w,c
 10114   01156E  5035               	movf	(btemp+11)^0,w,c
 10115   011570  5833               	subwfb	(btemp+9)^0,w,c
 10116   011572  A0D8               	btfss	status,0,c
 10117   011574  EFBE  F08A         	goto	u1711
 10118   011578  EFC0  F08A         	goto	u1710
 10119   01157C                     u1711:
 10120   01157C  EF8D  F08A         	goto	l4090
 10121   011580                     u1710:
 10122   011580                     
 10123                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 10124                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
 10125   011580  0EFB               	movlw	-5
 10126   011582  CFE3 FFE6          	movff	plusw1,postinc1
 10127   011586  CFE3 FFE6          	movff	plusw1,postinc1
 10128   01158A  0E00               	movlw	low _spiReceiveBuffer
 10129   01158C  6EE6               	movwf	postinc1,c
 10130   01158E  0E02               	movlw	high _spiReceiveBuffer
 10131   011590  6EE6               	movwf	postinc1,c
 10132   011592  0E00               	movlw	low _spiTransmitBuffer
 10133   011594  6EE6               	movwf	postinc1,c
 10134   011596  0E01               	movlw	high _spiTransmitBuffer
 10135   011598  6EE6               	movwf	postinc1,c
 10136   01159A  EC3B  F09E         	call	_SpiTransfer	;wreg free
 10137                           
 10138                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10139   01159E  0EFF               	movlw	-1
 10140   0115A0  C02A  FFE3         	movff	btemp,plusw1
 10141   0115A4                     
 10142                           ;can/can.c: 423:     if (spiTransferError) {
 10143                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10144   0115A4  0EFF               	movlw	-1
 10145   0115A6  50E3               	movf	plusw1,w,c
 10146   0115A8  B4D8               	btfsc	status,2,c
 10147   0115AA  EFD9  F08A         	goto	u1721
 10148   0115AE  EFDB  F08A         	goto	u1720
 10149   0115B2                     u1721:
 10150   0115B2  EFE0  F08A         	goto	l4104
 10151   0115B6                     u1720:
 10152   0115B6                     l4100:
 10153                           
 10154                           ;can/can.c: 424:         return spiTransferError;
 10155                           ;stkvar	_spiTransferError @ sp[(-13)+12]
 10156   0115B6  0EFF               	movlw	-1
 10157   0115B8  CFE3 F02A          	movff	plusw1,btemp
 10158   0115BC  EF98  F08B         	goto	l206
 10159   0115C0                     l4104:
 10160                           
 10161                           ;can/can.c: 428:     n = 2;
 10162   0115C0  0E02               	movlw	2
 10163   0115C2  6E34               	movwf	(btemp+10)^0,c
 10164   0115C4  0E00               	movlw	0
 10165   0115C6  6E35               	movwf	(btemp+11)^0,c
 10166                           
 10167                           ;stkvar	_n @ sp[(-13)+10]
 10168   0115C8  0EFD               	movlw	-3
 10169   0115CA  C034  FFE3         	movff	btemp+10,plusw1
 10170   0115CE  0EFE               	movlw	-2
 10171   0115D0  C035  FFE3         	movff	btemp+11,plusw1
 10172   0115D4                     
 10173                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
 10174                           ;stkvar	_i @ sp[(-13)+4]
 10175   0115D4  0EF7               	movlw	-9
 10176   0115D6  6AE3               	clrf	plusw1,c
 10177   0115D8  0EF8               	movlw	-8
 10178   0115DA  6AE3               	clrf	plusw1,c
 10179   0115DC  EF7F  F08B         	goto	l4126
 10180   0115E0                     l4108:
 10181                           
 10182                           ;can/can.c: 430:         w.word = 0;
 10183                           ;stkvar	_w @ sp[(-13)+0]
 10184   0115E0  0EF3               	movlw	-13
 10185   0115E2  6AE3               	clrf	plusw1,c
 10186   0115E4  0EF4               	movlw	-12
 10187   0115E6  6AE3               	clrf	plusw1,c
 10188   0115E8  0EF5               	movlw	-11
 10189   0115EA  6AE3               	clrf	plusw1,c
 10190   0115EC  0EF6               	movlw	-10
 10191   0115EE  6AE3               	clrf	plusw1,c
 10192                           
 10193                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
 10194                           ;stkvar	_j @ sp[(-13)+6]
 10195   0115F0  0EF9               	movlw	-7
 10196   0115F2  6AE3               	clrf	plusw1,c
 10197   0115F4  0EFA               	movlw	-6
 10198   0115F6  6AE3               	clrf	plusw1,c
 10199   0115F8                     l4114:
 10200                           
 10201                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
 10202                           ;stkvar	_n @ sp[(-13)+10]
 10203   0115F8  0EFD               	movlw	-3
 10204   0115FA  CFE3 F034          	movff	plusw1,btemp+10
 10205   0115FE  0EFE               	movlw	-2
 10206   011600  CFE3 F035          	movff	plusw1,btemp+11
 10207   011604  0E00               	movlw	low _spiReceiveBuffer
 10208   011606  2434               	addwf	(btemp+10)^0,w,c
 10209   011608  6ED9               	movwf	fsr2l,c
 10210   01160A  0E02               	movlw	high _spiReceiveBuffer
 10211   01160C  2035               	addwfc	(btemp+11)^0,w,c
 10212   01160E  6EDA               	movwf	fsr2h,c
 10213                           
 10214                           ;stkvar	_j @ sp[(-13)+6]
 10215   011610  0EF9               	movlw	-7
 10216   011612  CFE3 F034          	movff	plusw1,btemp+10
 10217   011616  0EFA               	movlw	-6
 10218   011618  CFE3 F035          	movff	plusw1,btemp+11
 10219                           
 10220                           ;stkvar	_w @ sp[(-13)+0]
 10221   01161C  0EF3               	movlw	243
 10222   01161E  24E1               	addwf	fsr1l,w,c
 10223   011620  6E32               	movwf	(btemp+8)^0,c
 10224   011622  0EFF               	movlw	255
 10225   011624  20E2               	addwfc	fsr1h,w,c
 10226   011626  6E33               	movwf	(btemp+9)^0,c
 10227   011628  5034               	movf	(btemp+10)^0,w,c
 10228   01162A  2432               	addwf	(btemp+8)^0,w,c
 10229   01162C  6EE9               	movwf	fsr0l,c
 10230   01162E  5035               	movf	(btemp+11)^0,w,c
 10231   011630  2033               	addwfc	(btemp+9)^0,w,c
 10232   011632  6EEA               	movwf	fsr0h,c
 10233   011634  CFDF FFEF          	movff	indf2,indf0
 10234   011638                     
 10235                           ;can/can.c: 433:         }
 10236                           ;stkvar	_j @ sp[(-13)+6]
 10237   011638  0EF9               	movlw	-7
 10238   01163A  50E3               	movf	plusw1,w,c
 10239   01163C  0F01               	addlw	1
 10240   01163E  6E2A               	movwf	btemp^0,c
 10241   011640  0EF9               	movlw	-7
 10242   011642  C02A  FFE3         	movff	btemp,plusw1
 10243   011646  6A2A               	clrf	btemp^0,c
 10244   011648  0EFA               	movlw	-6
 10245   01164A  50E3               	movf	plusw1,w,c
 10246   01164C  202A               	addwfc	btemp^0,w,c
 10247   01164E  6E2A               	movwf	btemp^0,c
 10248   011650  0EFA               	movlw	-6
 10249   011652  C02A  FFE3         	movff	btemp,plusw1
 10250   011656                     
 10251                           ;stkvar	_n @ sp[(-13)+10]
 10252   011656  0EFD               	movlw	-3
 10253   011658  50E3               	movf	plusw1,w,c
 10254   01165A  0F01               	addlw	1
 10255   01165C  6E2A               	movwf	btemp^0,c
 10256   01165E  0EFD               	movlw	-3
 10257   011660  C02A  FFE3         	movff	btemp,plusw1
 10258   011664  6A2A               	clrf	btemp^0,c
 10259   011666  0EFE               	movlw	-2
 10260   011668  50E3               	movf	plusw1,w,c
 10261   01166A  202A               	addwfc	btemp^0,w,c
 10262   01166C  6E2A               	movwf	btemp^0,c
 10263   01166E  0EFE               	movlw	-2
 10264   011670  C02A  FFE3         	movff	btemp,plusw1
 10265   011674                     
 10266                           ;stkvar	_j @ sp[(-13)+6]
 10267   011674  0EFA               	movlw	-6
 10268   011676  50E3               	movf	plusw1,w,c
 10269   011678  E10C               	bnz	u1730
 10270   01167A  0EF9               	movlw	-7
 10271   01167C  CFE3 F02A          	movff	plusw1,btemp
 10272   011680  0E04               	movlw	4
 10273   011682  5E2A               	subwf	btemp^0,f,c
 10274   011684  A0D8               	btfss	status,0,c
 10275   011686  EF47  F08B         	goto	u1731
 10276   01168A  EF49  F08B         	goto	u1730
 10277   01168E                     u1731:
 10278   01168E  EFFC  F08A         	goto	l4114
 10279   011692                     u1730:
 10280   011692                     
 10281                           ;can/can.c: 434:         rxd[i] = w.word;
 10282                           ;stkvar	_w @ sp[(-13)+0]
 10283   011692  50E1               	movf	fsr1l,w,c
 10284   011694  0FF3               	addlw	-13
 10285   011696  6ED9               	movwf	fsr2l,c
 10286   011698  50E2               	movf	fsr1h,w,c
 10287   01169A  6EDA               	movwf	fsr2h,c
 10288   01169C  0EFF               	movlw	255
 10289   01169E  22DA               	addwfc	fsr2h,f,c
 10290                           
 10291                           ;stkvar	_i @ sp[(-13)+4]
 10292   0116A0  0EF7               	movlw	-9
 10293   0116A2  CFE3 F034          	movff	plusw1,btemp+10
 10294   0116A6  0EF8               	movlw	-8
 10295   0116A8  CFE3 F035          	movff	plusw1,btemp+11
 10296   0116AC  90D8               	bcf	status,0,c
 10297   0116AE  3634               	rlcf	(btemp+10)^0,f,c
 10298   0116B0  3635               	rlcf	(btemp+11)^0,f,c
 10299   0116B2  90D8               	bcf	status,0,c
 10300   0116B4  3634               	rlcf	(btemp+10)^0,f,c
 10301   0116B6  3635               	rlcf	(btemp+11)^0,f,c
 10302                           
 10303                           ;stkvar	_rxd @ sp[(-13)+-4]
 10304   0116B8  0EEF               	movlw	-17
 10305   0116BA  CFE3 F032          	movff	plusw1,btemp+8
 10306   0116BE  0EF0               	movlw	-16
 10307   0116C0  CFE3 F033          	movff	plusw1,btemp+9
 10308   0116C4  5034               	movf	(btemp+10)^0,w,c
 10309   0116C6  2432               	addwf	(btemp+8)^0,w,c
 10310   0116C8  6EE9               	movwf	fsr0l,c
 10311   0116CA  5035               	movf	(btemp+11)^0,w,c
 10312   0116CC  2033               	addwfc	(btemp+9)^0,w,c
 10313   0116CE  6EEA               	movwf	fsr0h,c
 10314   0116D0  CFDE FFEE          	movff	postinc2,postinc0
 10315   0116D4  CFDE FFEE          	movff	postinc2,postinc0
 10316   0116D8  CFDE FFEE          	movff	postinc2,postinc0
 10317   0116DC  CFDE FFEE          	movff	postinc2,postinc0
 10318   0116E0                     
 10319                           ;can/can.c: 435:     }
 10320                           ;stkvar	_i @ sp[(-13)+4]
 10321   0116E0  0EF7               	movlw	-9
 10322   0116E2  50E3               	movf	plusw1,w,c
 10323   0116E4  0F01               	addlw	1
 10324   0116E6  6E2A               	movwf	btemp^0,c
 10325   0116E8  0EF7               	movlw	-9
 10326   0116EA  C02A  FFE3         	movff	btemp,plusw1
 10327   0116EE  6A2A               	clrf	btemp^0,c
 10328   0116F0  0EF8               	movlw	-8
 10329   0116F2  50E3               	movf	plusw1,w,c
 10330   0116F4  202A               	addwfc	btemp^0,w,c
 10331   0116F6  6E2A               	movwf	btemp^0,c
 10332   0116F8  0EF8               	movlw	-8
 10333   0116FA  C02A  FFE3         	movff	btemp,plusw1
 10334   0116FE                     l4126:
 10335                           
 10336                           ;stkvar	_nWords @ sp[(-13)+-6]
 10337   0116FE  0EED               	movlw	-19
 10338   011700  CFE3 F034          	movff	plusw1,btemp+10
 10339   011704  0EEE               	movlw	-18
 10340   011706  CFE3 F035          	movff	plusw1,btemp+11
 10341                           
 10342                           ;stkvar	_i @ sp[(-13)+4]
 10343   01170A  0EF7               	movlw	-9
 10344   01170C  CFE3 F032          	movff	plusw1,btemp+8
 10345   011710  0EF8               	movlw	-8
 10346   011712  CFE3 F033          	movff	plusw1,btemp+9
 10347   011716  5034               	movf	(btemp+10)^0,w,c
 10348   011718  5C32               	subwf	(btemp+8)^0,w,c
 10349   01171A  5035               	movf	(btemp+11)^0,w,c
 10350   01171C  5833               	subwfb	(btemp+9)^0,w,c
 10351   01171E  A0D8               	btfss	status,0,c
 10352   011720  EF94  F08B         	goto	u1741
 10353   011724  EF96  F08B         	goto	u1740
 10354   011728                     u1741:
 10355   011728  EFF0  F08A         	goto	l4108
 10356   01172C                     u1740:
 10357   01172C  EFDB  F08A         	goto	l4100
 10358   011730                     l206:
 10359                           
 10360                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
 10361   011730  0EED               	movlw	237
 10362   011732  26E1               	addwf	fsr1l,f,c
 10363   011734  0EFF               	movlw	255
 10364   011736  22E2               	addwfc	fsr1h,f,c
 10365   011738  0012               	return		;funcret
 10366   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
 10367                           	callstack 0
 10368                           
 10369 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
 10370 ;; Defined at:
 10371 ;;		line 3766 in file "can/can.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  dlc             1  [STACK] enum E5461
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;  dataBytesInO    4  [STACK] unsigned long 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  4  [STACK] unsigned long 
 10378 ;; Registers used:
 10379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;Total ram usage:        0 bytes
 10390 ;; Hardware stack levels used: 1
 10391 ;; Hardware stack levels required when called: 7
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_DRV_CANFDSPI_TransmitChannelLoad
 10396 ;; This function uses a reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text29
 10400   0124F4                     __ptext29:
 10401                           	callstack 0
 10402   0124F4                     _DRV_CANFDSPI_DlcToDataBytes:
 10403                           	callstack 0
 10404                           
 10405                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10406   0124F4  52E6               	movf	postinc1,f,c
 10407   0124F6  52E6               	movf	postinc1,f,c
 10408   0124F8  52E6               	movf	postinc1,f,c
 10409   0124FA  52E6               	movf	postinc1,f,c
 10410   0124FC                     
 10411                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
 10412                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10413   0124FC  0EFC               	movlw	-4
 10414   0124FE  6AE3               	clrf	plusw1,c
 10415   012500  0EFD               	movlw	-3
 10416   012502  6AE3               	clrf	plusw1,c
 10417   012504  0EFE               	movlw	-2
 10418   012506  6AE3               	clrf	plusw1,c
 10419   012508  0EFF               	movlw	-1
 10420   01250A  6AE3               	clrf	plusw1,c
 10421   01250C                     
 10422                           ;can/can.c: 3770:     __nop();
 10423   01250C  0000               	nop	
 10424   01250E                     
 10425                           ;can/can.c: 3771:     __nop();
 10426   01250E  0000               	nop	
 10427   012510                     
 10428                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
 10429                           ;stkvar	_dlc @ sp[(-4)+-1]
 10430   012510  0EFB               	movlw	-5
 10431   012512  CFE3 F02A          	movff	plusw1,btemp
 10432   012516  0E09               	movlw	9
 10433   012518  602A               	cpfslt	btemp^0,c
 10434   01251A  EF91  F092         	goto	u1751
 10435   01251E  EF93  F092         	goto	u1750
 10436   012522                     u1751:
 10437   012522  EF2E  F093         	goto	l4158
 10438   012526                     u1750:
 10439   012526                     
 10440                           ;can/can.c: 3774:         dataBytesInObject = dlc;
 10441                           ;stkvar	_dlc @ sp[(-4)+-1]
 10442   012526  0EFB               	movlw	-5
 10443   012528  CFE3 F035          	movff	plusw1,btemp+11
 10444   01252C  C035  F02E         	movff	btemp+11,btemp+4
 10445   012530  6A2F               	clrf	(btemp+5)^0,c
 10446   012532  6A30               	clrf	(btemp+6)^0,c
 10447   012534  6A31               	clrf	(btemp+7)^0,c
 10448                           
 10449                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10450   012536  0EFC               	movlw	-4
 10451   012538  C02E  FFE3         	movff	btemp+4,plusw1
 10452   01253C  0EFD               	movlw	-3
 10453   01253E  C02F  FFE3         	movff	btemp+5,plusw1
 10454   012542  0EFE               	movlw	-2
 10455   012544  C030  FFE3         	movff	btemp+6,plusw1
 10456   012548  0EFF               	movlw	-1
 10457   01254A  C031  FFE3         	movff	btemp+7,plusw1
 10458                           
 10459                           ;can/can.c: 3775:     } else {
 10460   01254E  EF58  F093         	goto	l4160
 10461   012552                     l4142:
 10462                           
 10463                           ;can/can.c: 3778:                 dataBytesInObject = 12;
 10464   012552  0E0C               	movlw	12
 10465   012554  6E32               	movwf	(btemp+8)^0,c
 10466   012556  6A33               	clrf	(btemp+9)^0,c
 10467   012558  6A34               	clrf	(btemp+10)^0,c
 10468   01255A  6A35               	clrf	(btemp+11)^0,c
 10469                           
 10470                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10471   01255C  0EFC               	movlw	-4
 10472   01255E  C032  FFE3         	movff	btemp+8,plusw1
 10473   012562  0EFD               	movlw	-3
 10474   012564  C033  FFE3         	movff	btemp+9,plusw1
 10475   012568  0EFE               	movlw	-2
 10476   01256A  C034  FFE3         	movff	btemp+10,plusw1
 10477   01256E  0EFF               	movlw	-1
 10478   012570  C035  FFE3         	movff	btemp+11,plusw1
 10479                           
 10480                           ;can/can.c: 3779:                 break;
 10481   012574  EF58  F093         	goto	l4160
 10482   012578                     l4144:
 10483                           
 10484                           ;can/can.c: 3781:                 dataBytesInObject = 16;
 10485   012578  0E10               	movlw	16
 10486   01257A  6E32               	movwf	(btemp+8)^0,c
 10487   01257C  6A33               	clrf	(btemp+9)^0,c
 10488   01257E  6A34               	clrf	(btemp+10)^0,c
 10489   012580  6A35               	clrf	(btemp+11)^0,c
 10490                           
 10491                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10492   012582  0EFC               	movlw	-4
 10493   012584  C032  FFE3         	movff	btemp+8,plusw1
 10494   012588  0EFD               	movlw	-3
 10495   01258A  C033  FFE3         	movff	btemp+9,plusw1
 10496   01258E  0EFE               	movlw	-2
 10497   012590  C034  FFE3         	movff	btemp+10,plusw1
 10498   012594  0EFF               	movlw	-1
 10499   012596  C035  FFE3         	movff	btemp+11,plusw1
 10500                           
 10501                           ;can/can.c: 3782:                 break;
 10502   01259A  EF58  F093         	goto	l4160
 10503   01259E                     l4146:
 10504                           
 10505                           ;can/can.c: 3784:                 dataBytesInObject = 20;
 10506   01259E  0E14               	movlw	20
 10507   0125A0  6E32               	movwf	(btemp+8)^0,c
 10508   0125A2  6A33               	clrf	(btemp+9)^0,c
 10509   0125A4  6A34               	clrf	(btemp+10)^0,c
 10510   0125A6  6A35               	clrf	(btemp+11)^0,c
 10511                           
 10512                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10513   0125A8  0EFC               	movlw	-4
 10514   0125AA  C032  FFE3         	movff	btemp+8,plusw1
 10515   0125AE  0EFD               	movlw	-3
 10516   0125B0  C033  FFE3         	movff	btemp+9,plusw1
 10517   0125B4  0EFE               	movlw	-2
 10518   0125B6  C034  FFE3         	movff	btemp+10,plusw1
 10519   0125BA  0EFF               	movlw	-1
 10520   0125BC  C035  FFE3         	movff	btemp+11,plusw1
 10521                           
 10522                           ;can/can.c: 3785:                 break;
 10523   0125C0  EF58  F093         	goto	l4160
 10524   0125C4                     l4148:
 10525                           
 10526                           ;can/can.c: 3787:                 dataBytesInObject = 24;
 10527   0125C4  0E18               	movlw	24
 10528   0125C6  6E32               	movwf	(btemp+8)^0,c
 10529   0125C8  6A33               	clrf	(btemp+9)^0,c
 10530   0125CA  6A34               	clrf	(btemp+10)^0,c
 10531   0125CC  6A35               	clrf	(btemp+11)^0,c
 10532                           
 10533                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10534   0125CE  0EFC               	movlw	-4
 10535   0125D0  C032  FFE3         	movff	btemp+8,plusw1
 10536   0125D4  0EFD               	movlw	-3
 10537   0125D6  C033  FFE3         	movff	btemp+9,plusw1
 10538   0125DA  0EFE               	movlw	-2
 10539   0125DC  C034  FFE3         	movff	btemp+10,plusw1
 10540   0125E0  0EFF               	movlw	-1
 10541   0125E2  C035  FFE3         	movff	btemp+11,plusw1
 10542                           
 10543                           ;can/can.c: 3788:                 break;
 10544   0125E6  EF58  F093         	goto	l4160
 10545   0125EA                     l4150:
 10546                           
 10547                           ;can/can.c: 3790:                 dataBytesInObject = 32;
 10548   0125EA  0E20               	movlw	32
 10549   0125EC  6E32               	movwf	(btemp+8)^0,c
 10550   0125EE  6A33               	clrf	(btemp+9)^0,c
 10551   0125F0  6A34               	clrf	(btemp+10)^0,c
 10552   0125F2  6A35               	clrf	(btemp+11)^0,c
 10553                           
 10554                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10555   0125F4  0EFC               	movlw	-4
 10556   0125F6  C032  FFE3         	movff	btemp+8,plusw1
 10557   0125FA  0EFD               	movlw	-3
 10558   0125FC  C033  FFE3         	movff	btemp+9,plusw1
 10559   012600  0EFE               	movlw	-2
 10560   012602  C034  FFE3         	movff	btemp+10,plusw1
 10561   012606  0EFF               	movlw	-1
 10562   012608  C035  FFE3         	movff	btemp+11,plusw1
 10563                           
 10564                           ;can/can.c: 3791:                 break;
 10565   01260C  EF58  F093         	goto	l4160
 10566   012610                     l4152:
 10567                           
 10568                           ;can/can.c: 3793:                 dataBytesInObject = 48;
 10569   012610  0E30               	movlw	48
 10570   012612  6E32               	movwf	(btemp+8)^0,c
 10571   012614  6A33               	clrf	(btemp+9)^0,c
 10572   012616  6A34               	clrf	(btemp+10)^0,c
 10573   012618  6A35               	clrf	(btemp+11)^0,c
 10574                           
 10575                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10576   01261A  0EFC               	movlw	-4
 10577   01261C  C032  FFE3         	movff	btemp+8,plusw1
 10578   012620  0EFD               	movlw	-3
 10579   012622  C033  FFE3         	movff	btemp+9,plusw1
 10580   012626  0EFE               	movlw	-2
 10581   012628  C034  FFE3         	movff	btemp+10,plusw1
 10582   01262C  0EFF               	movlw	-1
 10583   01262E  C035  FFE3         	movff	btemp+11,plusw1
 10584                           
 10585                           ;can/can.c: 3794:                 break;
 10586   012632  EF58  F093         	goto	l4160
 10587   012636                     l4154:
 10588                           
 10589                           ;can/can.c: 3796:                 dataBytesInObject = 64;
 10590   012636  0E40               	movlw	64
 10591   012638  6E32               	movwf	(btemp+8)^0,c
 10592   01263A  6A33               	clrf	(btemp+9)^0,c
 10593   01263C  6A34               	clrf	(btemp+10)^0,c
 10594   01263E  6A35               	clrf	(btemp+11)^0,c
 10595                           
 10596                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10597   012640  0EFC               	movlw	-4
 10598   012642  C032  FFE3         	movff	btemp+8,plusw1
 10599   012646  0EFD               	movlw	-3
 10600   012648  C033  FFE3         	movff	btemp+9,plusw1
 10601   01264C  0EFE               	movlw	-2
 10602   01264E  C034  FFE3         	movff	btemp+10,plusw1
 10603   012652  0EFF               	movlw	-1
 10604   012654  C035  FFE3         	movff	btemp+11,plusw1
 10605                           
 10606                           ;can/can.c: 3797:                 break;
 10607   012658  EF58  F093         	goto	l4160
 10608   01265C                     l4158:
 10609                           
 10610                           ;stkvar	_dlc @ sp[(-4)+-1]
 10611   01265C  0EFB               	movlw	-5
 10612   01265E  50E3               	movf	plusw1,w,c
 10613   012660  6E34               	movwf	(btemp+10)^0,c
 10614   012662  6A35               	clrf	(btemp+11)^0,c
 10615                           
 10616                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10617                           ; Switch size 1, requested type "simple"
 10618                           ; Number of cases is 1, Range of values is 0 to 0
 10619                           ; switch strategies available:
 10620                           ; Name         Instructions Cycles
 10621                           ; simple_byte            4     3 (average)
 10622                           ;	Chosen strategy is simple_byte
 10623   012664  5035               	movf	(btemp+11)^0,w,c
 10624   012666  0A00               	xorlw	0	; case 0
 10625   012668  B4D8               	btfsc	status,2,c
 10626   01266A  EF39  F093         	goto	l5674
 10627   01266E  EF58  F093         	goto	l4160
 10628   012672                     l5674:
 10629                           
 10630                           ; Switch size 1, requested type "simple"
 10631                           ; Number of cases is 7, Range of values is 9 to 15
 10632                           ; switch strategies available:
 10633                           ; Name         Instructions Cycles
 10634                           ; simple_byte           22    12 (average)
 10635                           ;	Chosen strategy is simple_byte
 10636   012672  5034               	movf	(btemp+10)^0,w,c
 10637   012674  0A09               	xorlw	9	; case 9
 10638   012676  B4D8               	btfsc	status,2,c
 10639   012678  EFA9  F092         	goto	l4142
 10640   01267C  0A03               	xorlw	3	; case 10
 10641   01267E  B4D8               	btfsc	status,2,c
 10642   012680  EFBC  F092         	goto	l4144
 10643   012684  0A01               	xorlw	1	; case 11
 10644   012686  B4D8               	btfsc	status,2,c
 10645   012688  EFCF  F092         	goto	l4146
 10646   01268C  0A07               	xorlw	7	; case 12
 10647   01268E  B4D8               	btfsc	status,2,c
 10648   012690  EFE2  F092         	goto	l4148
 10649   012694  0A01               	xorlw	1	; case 13
 10650   012696  B4D8               	btfsc	status,2,c
 10651   012698  EFF5  F092         	goto	l4150
 10652   01269C  0A03               	xorlw	3	; case 14
 10653   01269E  B4D8               	btfsc	status,2,c
 10654   0126A0  EF08  F093         	goto	l4152
 10655   0126A4  0A01               	xorlw	1	; case 15
 10656   0126A6  B4D8               	btfsc	status,2,c
 10657   0126A8  EF1B  F093         	goto	l4154
 10658   0126AC  EF58  F093         	goto	l4160
 10659   0126B0                     l4160:
 10660                           
 10661                           ;can/can.c: 3803:     return dataBytesInObject;
 10662                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
 10663   0126B0  0EFC               	movlw	-4
 10664   0126B2  CFE3 F02A          	movff	plusw1,btemp
 10665   0126B6  0EFD               	movlw	-3
 10666   0126B8  CFE3 F02B          	movff	plusw1,btemp+1
 10667   0126BC  0EFE               	movlw	-2
 10668   0126BE  CFE3 F02C          	movff	plusw1,btemp+2
 10669   0126C2  0EFF               	movlw	-1
 10670   0126C4  CFE3 F02D          	movff	plusw1,btemp+3
 10671   0126C8                     
 10672                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
 10673   0126C8  0EFB               	movlw	251
 10674   0126CA  26E1               	addwf	fsr1l,f,c
 10675   0126CC  0EFF               	movlw	255
 10676   0126CE  22E2               	addwfc	fsr1h,f,c
 10677   0126D0  0012               	return		;funcret
 10678   0126D2                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
 10679                           	callstack 0
 10680                           
 10681 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
 10682 ;; Defined at:
 10683 ;;		line 1776 in file "can/can.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;  channel         1  [STACK] enum E5287
 10686 ;;  flags           2  [STACK] PTR enum E5580
 10687 ;;		 -> txFlags(1), 
 10688 ;; Auto vars:     Size  Location     Type
 10689 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
 10690 ;;  a               2  [STACK] unsigned short 
 10691 ;;  spiTransferE    1  [STACK] char 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  1  [STACK] char 
 10694 ;; Registers used:
 10695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;Total ram usage:        0 bytes
 10706 ;; Hardware stack levels used: 1
 10707 ;; Hardware stack levels required when called: 9
 10708 ;; This function calls:
 10709 ;;		_DRV_CANFDSPI_ReadByte
 10710 ;; This function is called by:
 10711 ;;		_CanSend
 10712 ;; This function uses a reentrant model
 10713 ;;
 10714                           
 10715                           	psect	text30
 10716   014206                     __ptext30:
 10717                           	callstack 0
 10718   014206                     _DRV_CANFDSPI_TransmitChannelEventGet:
 10719                           	callstack 0
 10720                           
 10721                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10722   014206  0E07               	movlw	7
 10723   014208  26E1               	addwf	fsr1l,f,c
 10724   01420A  0E00               	movlw	0
 10725   01420C  22E2               	addwfc	fsr1h,f,c
 10726   01420E                     
 10727                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
 10728                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10729   01420E  0EF9               	movlw	-7
 10730   014210  6AE3               	clrf	plusw1,c
 10731   014212  0EFA               	movlw	-6
 10732   014214  6AE3               	clrf	plusw1,c
 10733   014216  0EFB               	movlw	-5
 10734   014218  6AE3               	clrf	plusw1,c
 10735   01421A  0EFC               	movlw	-4
 10736   01421C  6AE3               	clrf	plusw1,c
 10737   01421E                     
 10738                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
 10739                           ;stkvar	_channel @ sp[(-7)+-1]
 10740   01421E  0EF8               	movlw	-8
 10741   014220  50E3               	movf	plusw1,w,c
 10742   014222  0D0C               	mullw	12
 10743   014224  0E54               	movlw	84
 10744   014226  26F3               	addwf	243,f,c
 10745   014228  0E00               	movlw	0
 10746   01422A  22F4               	addwfc	244,f,c
 10747                           
 10748                           ;stkvar	_a @ sp[(-7)+4]
 10749   01422C  0EFD               	movlw	-3
 10750   01422E  CFF3 FFE3          	movff	prodl,plusw1
 10751   014232  0EFE               	movlw	-2
 10752   014234  CFF4 FFE3          	movff	prodh,plusw1
 10753   014238                     
 10754                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
 10755                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10756   014238  0EF9               	movlw	249
 10757   01423A  24E1               	addwf	fsr1l,w,c
 10758   01423C  6E2A               	movwf	btemp^0,c
 10759   01423E  0EFF               	movlw	255
 10760   014240  20E2               	addwfc	fsr1h,w,c
 10761   014242  6E2B               	movwf	(btemp+1)^0,c
 10762   014244  C02A  FFE6         	movff	btemp,postinc1
 10763   014248  C02B  FFE6         	movff	btemp+1,postinc1
 10764                           
 10765                           ;stkvar	_a @ sp[(-9)+4]
 10766   01424C  0EFB               	movlw	-5
 10767   01424E  CFE3 FFE6          	movff	plusw1,postinc1
 10768   014252  CFE3 FFE6          	movff	plusw1,postinc1
 10769   014256  EC72  F0A3         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 10770                           
 10771                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10772   01425A  0EFF               	movlw	-1
 10773   01425C  C02A  FFE3         	movff	btemp,plusw1
 10774   014260                     
 10775                           ;can/can.c: 1788:     if (spiTransferError) {
 10776                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10777   014260  0EFF               	movlw	-1
 10778   014262  50E3               	movf	plusw1,w,c
 10779   014264  B4D8               	btfsc	status,2,c
 10780   014266  EF37  F0A1         	goto	u1951
 10781   01426A  EF39  F0A1         	goto	u1950
 10782   01426E                     u1951:
 10783   01426E  EF3D  F0A1         	goto	l4302
 10784   014272                     u1950:
 10785   014272                     
 10786                           ;can/can.c: 1789:         return -1;
 10787   014272  0EFF               	movlw	255
 10788   014274  6E2A               	movwf	btemp^0,c
 10789   014276  EF4A  F0A1         	goto	l453
 10790   01427A                     l4302:
 10791                           
 10792                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
 10793                           ;stkvar	_flags @ sp[(-7)+-3]
 10794   01427A  0EF6               	movlw	-10
 10795   01427C  CFE3 FFD9          	movff	plusw1,fsr2l
 10796   014280  0EF7               	movlw	-9
 10797   014282  CFE3 FFDA          	movff	plusw1,fsr2h
 10798                           
 10799                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
 10800   014286  0EF9               	movlw	-7
 10801   014288  50E3               	movf	plusw1,w,c
 10802   01428A  0B17               	andlw	23
 10803   01428C  6EDF               	movwf	indf2,c
 10804   01428E                     
 10805                           ;can/can.c: 1795:     return spiTransferError;
 10806                           ;stkvar	_spiTransferError @ sp[(-7)+6]
 10807   01428E  0EFF               	movlw	-1
 10808   014290  CFE3 F02A          	movff	plusw1,btemp
 10809   014294                     l453:
 10810                           
 10811                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 10812   014294  0EF6               	movlw	246
 10813   014296  26E1               	addwf	fsr1l,f,c
 10814   014298  0EFF               	movlw	255
 10815   01429A  22E2               	addwfc	fsr1h,f,c
 10816   01429C  0012               	return		;funcret
 10817   01429E                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
 10818                           	callstack 0
 10819                           
 10820 ;; *************** function _XF_popEvent *****************
 10821 ;; Defined at:
 10822 ;;		line 142 in file "xf/xf.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  inISR           1  [STACK] _Bool 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  ev              6  [STACK] struct Event_
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  6  [STACK] struct Event_
 10829 ;; Registers used:
 10830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;Total ram usage:        0 bytes
 10841 ;; Hardware stack levels used: 1
 10842 ;; Hardware stack levels required when called: 8
 10843 ;; This function calls:
 10844 ;;		_ENTERCRITICAL
 10845 ;;		_LEAVECRITICAL
 10846 ;;		___awmod
 10847 ;; This function is called by:
 10848 ;;		_XF_executeOnce
 10849 ;; This function uses a reentrant model
 10850 ;;
 10851                           
 10852                           	psect	text31
 10853   013AE0                     __ptext31:
 10854                           	callstack 0
 10855   013AE0                     _XF_popEvent:
 10856                           	callstack 0
 10857                           
 10858                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
 10859   013AE0  0E0B               	movlw	11
 10860   013AE2  26E1               	addwf	fsr1l,f,c
 10861   013AE4  0E00               	movlw	0
 10862   013AE6  22E2               	addwfc	fsr1h,f,c
 10863   013AE8                     
 10864                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
 10865                           ;stkvar	_ev @ sp[(-6)+0]
 10866   013AE8  0EFA               	movlw	-6
 10867   013AEA  6AE3               	clrf	plusw1,c
 10868   013AEC                     
 10869                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
 10870                           ;stkvar	_ev @ sp[(-6)+0]
 10871   013AEC  0EFB               	movlw	251
 10872   013AEE  24E1               	addwf	fsr1l,w,c
 10873   013AF0  6ED9               	movwf	fsr2l,c
 10874   013AF2  0EFF               	movlw	255
 10875   013AF4  20E2               	addwfc	fsr1h,w,c
 10876   013AF6  6EDA               	movwf	fsr2h,c
 10877   013AF8  6ADE               	clrf	postinc2,c
 10878   013AFA  6ADE               	clrf	postinc2,c
 10879   013AFC  6ADD               	clrf	postdec2,c
 10880   013AFE                     
 10881                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
 10882                           ;stkvar	_inISR @ sp[(-6)+-6]
 10883   013AFE  0EF4               	movlw	-12
 10884   013B00  50E3               	movf	plusw1,w,c
 10885   013B02  6EE6               	movwf	postinc1,c
 10886   013B04  EC65  F0A5         	call	_ENTERCRITICAL	;wreg free
 10887   013B08                     
 10888                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
 10889   013B08  EE23  F0DF         	lfsr	2,_theXF+279
 10890   013B0C  50DF               	movf	indf2,w,c
 10891   013B0E  A4D8               	btfss	status,2,c
 10892   013B10  EF8C  F09D         	goto	u2841
 10893   013B14  EF8E  F09D         	goto	u2840
 10894   013B18                     u2841:
 10895   013B18  EFA3  F09D         	goto	l5108
 10896   013B1C                     u2840:
 10897   013B1C                     l5102:
 10898                           
 10899                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
 10900                           ;stkvar	_inISR @ sp[(-6)+-6]
 10901   013B1C  0EF4               	movlw	-12
 10902   013B1E  50E3               	movf	plusw1,w,c
 10903   013B20  6EE6               	movwf	postinc1,c
 10904   013B22  EC59  F0A5         	call	_LEAVECRITICAL	;wreg free
 10905   013B26                     
 10906                           ;xf/xf.c: 152:       return ev;
 10907                           ;stkvar	_ev @ sp[(-6)+0]
 10908   013B26  0EFA               	movlw	250
 10909   013B28  24E1               	addwf	fsr1l,w,c
 10910   013B2A  6ED9               	movwf	fsr2l,c
 10911   013B2C  0EFF               	movlw	255
 10912   013B2E  20E2               	addwfc	fsr1h,w,c
 10913   013B30  6EDA               	movwf	fsr2h,c
 10914                           
 10915                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
 10916   013B32  0E06               	movlw	6
 10917   013B34  6E2A               	movwf	btemp^0,c
 10918   013B36  0EF4               	movlw	-12
 10919   013B38                     us285999:
 10920   013B38  CFDE FFE3          	movff	postinc2,plusw1
 10921   013B3C  28E8               	incf	wreg,w,c
 10922   013B3E  2E2A               	decfsz	btemp^0,f,c
 10923   013B40  D7FB               	bra	us285999
 10924   013B42  EFD1  F09D         	goto	l1227
 10925   013B46                     l5108:
 10926                           
 10927                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10928   013B46  EE23  F0DD         	lfsr	2,_theXF+277
 10929   013B4A  50DF               	movf	indf2,w,c
 10930   013B4C  0D06               	mullw	6
 10931   013B4E  0E28               	movlw	low (_theXF+96)
 10932   013B50  24F3               	addwf	243,w,c
 10933   013B52  6ED9               	movwf	fsr2l,c
 10934   013B54  0E03               	movlw	high (_theXF+96)
 10935   013B56  20F4               	addwfc	prodh,w,c
 10936   013B58  6EDA               	movwf	fsr2h,c
 10937                           
 10938                           ;stkvar	_ev @ sp[(-6)+0]
 10939   013B5A  0E06               	movlw	6
 10940   013B5C  6E2A               	movwf	btemp^0,c
 10941   013B5E  0EFA               	movlw	-6
 10942   013B60                     us286999:
 10943   013B60  CFDE FFE3          	movff	postinc2,plusw1
 10944   013B64  28E8               	incf	wreg,w,c
 10945   013B66  2E2A               	decfsz	btemp^0,f,c
 10946   013B68  D7FB               	bra	us286999
 10947   013B6A                     
 10948                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10949   013B6A  0E1E               	movlw	30
 10950   013B6C  6EE6               	movwf	postinc1,c
 10951   013B6E  0E00               	movlw	0
 10952   013B70  6EE6               	movwf	postinc1,c
 10953   013B72  EE23  F0DD         	lfsr	2,_theXF+277
 10954   013B76  50DF               	movf	indf2,w,c
 10955   013B78  6E34               	movwf	(btemp+10)^0,c
 10956   013B7A  6A35               	clrf	(btemp+11)^0,c
 10957   013B7C  0E01               	movlw	1
 10958   013B7E  2634               	addwf	(btemp+10)^0,f,c
 10959   013B80  0E00               	movlw	0
 10960   013B82  2235               	addwfc	(btemp+11)^0,f,c
 10961   013B84  C034  FFE6         	movff	btemp+10,postinc1
 10962   013B88  C035  FFE6         	movff	btemp+11,postinc1
 10963   013B8C  EC2E  F097         	call	___awmod	;wreg free
 10964   013B90  C02A  F3DD         	movff	btemp,_theXF+277
 10965   013B94                     
 10966                           ;xf/xf.c: 156:     theXF.countEvt--;
 10967   013B94  C3DF  FFE8         	movff	_theXF+279,wreg
 10968   013B98  0FFF               	addlw	-1
 10969   013B9A  CFE8 F3DF          	movff	wreg,_theXF+279
 10970   013B9E  EF8E  F09D         	goto	l5102
 10971   013BA2                     l1227:
 10972                           
 10973                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10974   013BA2  0EFA               	movlw	250
 10975   013BA4  26E1               	addwf	fsr1l,f,c
 10976   013BA6  0EFF               	movlw	255
 10977   013BA8  22E2               	addwfc	fsr1h,f,c
 10978   013BAA  0012               	return		;funcret
 10979   013BAC                     __end_of_XF_popEvent:
 10980                           	callstack 0
 10981                           
 10982 ;; *************** function ___awmod *****************
 10983 ;; Defined at:
 10984 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;  dividend        2  [STACK] int 
 10987 ;;  divisor         2  [STACK] int 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  sign            1  [STACK] unsigned char 
 10990 ;;  counter         1  [STACK] unsigned char 
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  2  [STACK] int 
 10993 ;; Registers used:
 10994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used: 1
 11006 ;; Hardware stack levels required when called: 7
 11007 ;; This function calls:
 11008 ;;		Nothing
 11009 ;; This function is called by:
 11010 ;;		_XF_pushEvent
 11011 ;;		_XF_popEvent
 11012 ;; This function uses a reentrant model
 11013 ;;
 11014                           
 11015                           	psect	text32
 11016   012E5C                     __ptext32:
 11017                           	callstack 0
 11018   012E5C                     ___awmod:
 11019                           	callstack 0
 11020                           
 11021                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11022   012E5C  52E6               	movf	postinc1,f,c
 11023   012E5E  52E6               	movf	postinc1,f,c
 11024   012E60                     
 11025                           ;stkvar	_sign @ sp[(-2)+0]
 11026   012E60  0EFE               	movlw	-2
 11027   012E62  6AE3               	clrf	plusw1,c
 11028   012E64                     
 11029                           ;stkvar	_dividend @ sp[(-2)+-2]
 11030   012E64  0EFD               	movlw	-3
 11031   012E66  BEE3               	btfsc	plusw1,7,c
 11032   012E68  EF3A  F097         	goto	u2000
 11033   012E6C  EF38  F097         	goto	u2001
 11034   012E70                     u2001:
 11035   012E70  EF43  F097         	goto	l4362
 11036   012E74                     u2000:
 11037   012E74                     
 11038                           ;stkvar	_dividend @ sp[(-2)+-2]
 11039                           ;stkvar	_dividend @ sp[(-2)+-2]
 11040   012E74  0EFC               	movlw	-4
 11041   012E76  6CE3               	negf	plusw1,c
 11042   012E78  0EFD               	movlw	-3
 11043   012E7A  1EE3               	comf	plusw1,f,c
 11044   012E7C  B0D8               	btfsc	status,0,c
 11045   012E7E  2AE3               	incf	plusw1,f,c
 11046   012E80                     
 11047                           ;stkvar	_sign @ sp[(-2)+0]
 11048   012E80  0EFE               	movlw	-2
 11049   012E82  6AE3               	clrf	plusw1,c
 11050   012E84  2AE3               	incf	plusw1,f,c
 11051   012E86                     l4362:
 11052                           
 11053                           ;stkvar	_divisor @ sp[(-2)+-4]
 11054   012E86  0EFB               	movlw	-5
 11055   012E88  BEE3               	btfsc	plusw1,7,c
 11056   012E8A  EF4B  F097         	goto	u2010
 11057   012E8E  EF49  F097         	goto	u2011
 11058   012E92                     u2011:
 11059   012E92  EF51  F097         	goto	l4366
 11060   012E96                     u2010:
 11061   012E96                     
 11062                           ;stkvar	_divisor @ sp[(-2)+-4]
 11063                           ;stkvar	_divisor @ sp[(-2)+-4]
 11064   012E96  0EFA               	movlw	-6
 11065   012E98  6CE3               	negf	plusw1,c
 11066   012E9A  0EFB               	movlw	-5
 11067   012E9C  1EE3               	comf	plusw1,f,c
 11068   012E9E  B0D8               	btfsc	status,0,c
 11069   012EA0  2AE3               	incf	plusw1,f,c
 11070   012EA2                     l4366:
 11071                           
 11072                           ;stkvar	_divisor @ sp[(-2)+-4]
 11073   012EA2  0EFA               	movlw	-6
 11074   012EA4  CFE3 F02A          	movff	plusw1,btemp
 11075   012EA8  0EFB               	movlw	-5
 11076   012EAA  50E3               	movf	plusw1,w,c
 11077   012EAC  102A               	iorwf	btemp^0,w,c
 11078   012EAE  B4D8               	btfsc	status,2,c
 11079   012EB0  EF5C  F097         	goto	u2021
 11080   012EB4  EF5E  F097         	goto	u2020
 11081   012EB8                     u2021:
 11082   012EB8  EFB9  F097         	goto	l4384
 11083   012EBC                     u2020:
 11084   012EBC                     
 11085                           ;stkvar	_counter @ sp[(-2)+1]
 11086   012EBC  0EFF               	movlw	-1
 11087   012EBE  6AE3               	clrf	plusw1,c
 11088   012EC0  2AE3               	incf	plusw1,f,c
 11089   012EC2  EF74  F097         	goto	l4374
 11090   012EC6                     l4370:
 11091                           
 11092                           ;stkvar	_divisor @ sp[(-2)+-4]
 11093   012EC6  0EFA               	movlw	-6
 11094   012EC8  50E3               	movf	plusw1,w,c
 11095   012ECA  90D8               	bcf	status,0,c
 11096   012ECC  34E8               	rlcf	wreg,w,c
 11097   012ECE  6E2A               	movwf	btemp^0,c
 11098   012ED0  0EFA               	movlw	-6
 11099   012ED2  C02A  FFE3         	movff	btemp,plusw1
 11100   012ED6  0EFB               	movlw	-5
 11101   012ED8  50E3               	movf	plusw1,w,c
 11102   012EDA  34E8               	rlcf	wreg,w,c
 11103   012EDC  6E2A               	movwf	btemp^0,c
 11104   012EDE  0EFB               	movlw	-5
 11105   012EE0  C02A  FFE3         	movff	btemp,plusw1
 11106   012EE4                     
 11107                           ;stkvar	_counter @ sp[(-2)+1]
 11108   012EE4  0EFF               	movlw	-1
 11109   012EE6  2AE3               	incf	plusw1,f,c
 11110   012EE8                     l4374:
 11111                           
 11112                           ;stkvar	_divisor @ sp[(-2)+-4]
 11113   012EE8  0EFB               	movlw	-5
 11114   012EEA  AEE3               	btfss	plusw1,7,c
 11115   012EEC  EF7A  F097         	goto	u2031
 11116   012EF0  EF7C  F097         	goto	u2030
 11117   012EF4                     u2031:
 11118   012EF4  EF63  F097         	goto	l4370
 11119   012EF8                     u2030:
 11120   012EF8                     l4376:
 11121                           
 11122                           ;stkvar	_divisor @ sp[(-2)+-4]
 11123   012EF8  0EFA               	movlw	-6
 11124   012EFA  CFE3 F034          	movff	plusw1,btemp+10
 11125   012EFE  0EFB               	movlw	-5
 11126   012F00  CFE3 F035          	movff	plusw1,btemp+11
 11127                           
 11128                           ;stkvar	_dividend @ sp[(-2)+-2]
 11129   012F04  0EFC               	movlw	-4
 11130   012F06  CFE3 F032          	movff	plusw1,btemp+8
 11131   012F0A  0EFD               	movlw	-3
 11132   012F0C  CFE3 F033          	movff	plusw1,btemp+9
 11133   012F10  5034               	movf	(btemp+10)^0,w,c
 11134   012F12  5C32               	subwf	(btemp+8)^0,w,c
 11135   012F14  5035               	movf	(btemp+11)^0,w,c
 11136   012F16  5833               	subwfb	(btemp+9)^0,w,c
 11137   012F18  A0D8               	btfss	status,0,c
 11138   012F1A  EF91  F097         	goto	u2041
 11139   012F1E  EF93  F097         	goto	u2040
 11140   012F22                     u2041:
 11141   012F22  EFA5  F097         	goto	l4380
 11142   012F26                     u2040:
 11143   012F26                     
 11144                           ;stkvar	_divisor @ sp[(-2)+-4]
 11145                           ;stkvar	_dividend @ sp[(-2)+-2]
 11146   012F26  0EFC               	movlw	-4
 11147   012F28  50E3               	movf	plusw1,w,c
 11148   012F2A  6E2A               	movwf	btemp^0,c
 11149   012F2C  0EFA               	movlw	-6
 11150   012F2E  50E3               	movf	plusw1,w,c
 11151   012F30  5E2A               	subwf	btemp^0,f,c
 11152   012F32  0EFC               	movlw	-4
 11153   012F34  C02A  FFE3         	movff	btemp,plusw1
 11154   012F38  0EFD               	movlw	-3
 11155   012F3A  50E3               	movf	plusw1,w,c
 11156   012F3C  6E2A               	movwf	btemp^0,c
 11157   012F3E  0EFB               	movlw	-5
 11158   012F40  50E3               	movf	plusw1,w,c
 11159   012F42  5A2A               	subwfb	btemp^0,f,c
 11160   012F44  0EFD               	movlw	-3
 11161   012F46  C02A  FFE3         	movff	btemp,plusw1
 11162   012F4A                     l4380:
 11163                           
 11164                           ;stkvar	_divisor @ sp[(-2)+-4]
 11165   012F4A  90D8               	bcf	status,0,c
 11166   012F4C  0EFB               	movlw	-5
 11167   012F4E  32E3               	rrcf	plusw1,f,c
 11168   012F50  0EFA               	movlw	-6
 11169   012F52  32E3               	rrcf	plusw1,f,c
 11170   012F54                     
 11171                           ;stkvar	_counter @ sp[(-2)+1]
 11172   012F54  0EFF               	movlw	-1
 11173   012F56  50E3               	movf	plusw1,w,c
 11174   012F58  6E2A               	movwf	btemp^0,c
 11175   012F5A  0E01               	movlw	1
 11176   012F5C  5E2A               	subwf	btemp^0,f,c
 11177   012F5E  0EFF               	movlw	-1
 11178   012F60  C02A  FFE3         	movff	btemp,plusw1
 11179   012F64  A4D8               	btfss	status,2,c
 11180   012F66  EFB7  F097         	goto	u2051
 11181   012F6A  EFB9  F097         	goto	u2050
 11182   012F6E                     u2051:
 11183   012F6E  EF7C  F097         	goto	l4376
 11184   012F72                     u2050:
 11185   012F72                     l4384:
 11186                           
 11187                           ;stkvar	_sign @ sp[(-2)+0]
 11188   012F72  0EFE               	movlw	-2
 11189   012F74  50E3               	movf	plusw1,w,c
 11190   012F76  B4D8               	btfsc	status,2,c
 11191   012F78  EFC0  F097         	goto	u2061
 11192   012F7C  EFC2  F097         	goto	u2060
 11193   012F80                     u2061:
 11194   012F80  EFC8  F097         	goto	l4388
 11195   012F84                     u2060:
 11196   012F84                     
 11197                           ;stkvar	_dividend @ sp[(-2)+-2]
 11198                           ;stkvar	_dividend @ sp[(-2)+-2]
 11199   012F84  0EFC               	movlw	-4
 11200   012F86  6CE3               	negf	plusw1,c
 11201   012F88  0EFD               	movlw	-3
 11202   012F8A  1EE3               	comf	plusw1,f,c
 11203   012F8C  B0D8               	btfsc	status,0,c
 11204   012F8E  2AE3               	incf	plusw1,f,c
 11205   012F90                     l4388:
 11206                           
 11207                           ;stkvar	_dividend @ sp[(-2)+-2]
 11208   012F90  0EFC               	movlw	-4
 11209   012F92  CFE3 F02A          	movff	plusw1,btemp
 11210   012F96  0EFD               	movlw	-3
 11211   012F98  CFE3 F02B          	movff	plusw1,btemp+1
 11212   012F9C                     
 11213                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 11214   012F9C  0EFA               	movlw	250
 11215   012F9E  26E1               	addwf	fsr1l,f,c
 11216   012FA0  0EFF               	movlw	255
 11217   012FA2  22E2               	addwfc	fsr1h,f,c
 11218   012FA4  0012               	return		;funcret
 11219   012FA6                     __end_of___awmod:
 11220                           	callstack 0
 11221                           
 11222 ;; *************** function _LEAVECRITICAL *****************
 11223 ;; Defined at:
 11224 ;;		line 265 in file "xf/xf.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  inISR           1  [STACK] _Bool 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;		None
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1  [STACK] void 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, status,2
 11233 ;; Tracked objects:
 11234 ;;		On entry : 0/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;Total ram usage:        0 bytes
 11243 ;; Hardware stack levels used: 1
 11244 ;; Hardware stack levels required when called: 7
 11245 ;; This function calls:
 11246 ;;		Nothing
 11247 ;; This function is called by:
 11248 ;;		_XF_pushEvent
 11249 ;;		_XF_popEvent
 11250 ;;		_XF_scheduleTimer
 11251 ;;		_XF_unscheduleTimer
 11252 ;; This function uses a reentrant model
 11253 ;;
 11254                           
 11255                           	psect	text33
 11256   014AB2                     __ptext33:
 11257                           	callstack 0
 11258   014AB2                     _LEAVECRITICAL:
 11259                           	callstack 10
 11260   014AB2                     
 11261                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 11262                           ;stkvar	_inISR @ sp[(0)+-1]
 11263   014AB2  0EFF               	movlw	-1
 11264   014AB4  50E3               	movf	plusw1,w,c
 11265   014AB6  A4D8               	btfss	status,2,c
 11266   014AB8  EF60  F0A5         	goto	u1771
 11267   014ABC  EF62  F0A5         	goto	u1770
 11268   014AC0                     u1771:
 11269   014AC0  EF63  F0A5         	goto	l1254
 11270   014AC4                     u1770:
 11271   014AC4                     
 11272                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 11273   014AC4  8EF2               	bsf	242,7,c	;volatile
 11274   014AC6                     l1254:
 11275                           
 11276                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11277   014AC6  52E5               	movf	postdec1,f,c
 11278   014AC8  0012               	return		;funcret
 11279   014ACA                     __end_of_LEAVECRITICAL:
 11280                           	callstack 0
 11281                           
 11282 ;; *************** function _ENTERCRITICAL *****************
 11283 ;; Defined at:
 11284 ;;		line 250 in file "xf/xf.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;  inISR           1  [STACK] _Bool 
 11287 ;; Auto vars:     Size  Location     Type
 11288 ;;		None
 11289 ;; Return value:  Size  Location     Type
 11290 ;;                  1  [STACK] void 
 11291 ;; Registers used:
 11292 ;;		wreg, fsr1l, fsr1h, status,2
 11293 ;; Tracked objects:
 11294 ;;		On entry : 0/0
 11295 ;;		On exit  : 0/0
 11296 ;;		Unchanged: 0/0
 11297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11302 ;;Total ram usage:        0 bytes
 11303 ;; Hardware stack levels used: 1
 11304 ;; Hardware stack levels required when called: 7
 11305 ;; This function calls:
 11306 ;;		Nothing
 11307 ;; This function is called by:
 11308 ;;		_XF_pushEvent
 11309 ;;		_XF_popEvent
 11310 ;;		_XF_scheduleTimer
 11311 ;;		_XF_unscheduleTimer
 11312 ;; This function uses a reentrant model
 11313 ;;
 11314                           
 11315                           	psect	text34
 11316   014ACA                     __ptext34:
 11317                           	callstack 0
 11318   014ACA                     _ENTERCRITICAL:
 11319                           	callstack 10
 11320   014ACA                     
 11321                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 11322                           ;stkvar	_inISR @ sp[(0)+-1]
 11323   014ACA  0EFF               	movlw	-1
 11324   014ACC  50E3               	movf	plusw1,w,c
 11325   014ACE  A4D8               	btfss	status,2,c
 11326   014AD0  EF6C  F0A5         	goto	u1761
 11327   014AD4  EF6E  F0A5         	goto	u1760
 11328   014AD8                     u1761:
 11329   014AD8  EF6F  F0A5         	goto	l1250
 11330   014ADC                     u1760:
 11331   014ADC                     
 11332                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 11333   014ADC  9EF2               	bcf	242,7,c	;volatile
 11334   014ADE                     l1250:
 11335                           
 11336                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 11337   014ADE  52E5               	movf	postdec1,f,c
 11338   014AE0  0012               	return		;funcret
 11339   014AE2                     __end_of_ENTERCRITICAL:
 11340                           	callstack 0
 11341                           
 11342 ;; *************** function _SYSTEM_Initialize *****************
 11343 ;; Defined at:
 11344 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1  [STACK] void 
 11351 ;; Registers used:
 11352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11353 ;; Tracked objects:
 11354 ;;		On entry : 0/0
 11355 ;;		On exit  : 0/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used: 1
 11364 ;; Hardware stack levels required when called: 9
 11365 ;; This function calls:
 11366 ;;		_INTERRUPT_Initialize
 11367 ;;		_OSCILLATOR_Initialize
 11368 ;;		_PIN_MANAGER_Initialize
 11369 ;;		_SPI2_Initialize
 11370 ;;		_TMR0_Initialize
 11371 ;; This function is called by:
 11372 ;;		_main
 11373 ;; This function uses a reentrant model
 11374 ;;
 11375                           
 11376                           	psect	text35
 11377   014AE2                     __ptext35:
 11378                           	callstack 0
 11379   014AE2                     _SYSTEM_Initialize:
 11380                           	callstack 21
 11381   014AE2                     
 11382                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 11383   014AE2  EC8E  F0A5         	call	_INTERRUPT_Initialize	;wreg free
 11384   014AE6                     
 11385                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 11386   014AE6  EC7C  F0A5         	call	_SPI2_Initialize	;wreg free
 11387                           
 11388                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 11389   014AEA  ECC2  F0A4         	call	_PIN_MANAGER_Initialize	;wreg free
 11390                           
 11391                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 11392   014AEE  EC84  F0A5         	call	_OSCILLATOR_Initialize	;wreg free
 11393   014AF2                     
 11394                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 11395   014AF2  EC6F  F0A4         	call	_TMR0_Initialize	;wreg free
 11396   014AF6                     
 11397                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 11398   014AF6  0012               	return		;funcret
 11399   014AF8                     __end_of_SYSTEM_Initialize:
 11400                           	callstack 0
 11401                           
 11402 ;; *************** function _TMR0_Initialize *****************
 11403 ;; Defined at:
 11404 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;		None
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;		None
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  1  [STACK] void 
 11411 ;; Registers used:
 11412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11422 ;;Total ram usage:        0 bytes
 11423 ;; Hardware stack levels used: 1
 11424 ;; Hardware stack levels required when called: 8
 11425 ;; This function calls:
 11426 ;;		_TMR0_SetInterruptHandler
 11427 ;; This function is called by:
 11428 ;;		_SYSTEM_Initialize
 11429 ;; This function uses a reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text36
 11433   0148DE                     __ptext36:
 11434                           	callstack 0
 11435   0148DE                     _TMR0_Initialize:
 11436                           	callstack 21
 11437   0148DE                     
 11438                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 11439   0148DE  9CD5               	bcf	213,6,c	;volatile
 11440   0148E0                     
 11441                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 11442   0148E0  0EFD               	movlw	253
 11443   0148E2  6ED7               	movwf	215,c	;volatile
 11444                           
 11445                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 11446   0148E4  0E9D               	movlw	157
 11447   0148E6  6ED6               	movwf	214,c	;volatile
 11448   0148E8                     
 11449                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 11450   0148E8  50D6               	movf	214,w,c	;volatile
 11451   0148EA  CFD7 F02A          	movff	4055,btemp	;volatile
 11452   0148EE  6A2B               	clrf	(btemp+1)^0,c
 11453   0148F0  C02A  F02B         	movff	btemp,btemp+1
 11454   0148F4  6A2A               	clrf	btemp^0,c
 11455   0148F6  102A               	iorwf	btemp^0,w,c
 11456   0148F8  6E22               	movwf	_timer0ReloadVal^0,c	;volatile
 11457   0148FA  502B               	movf	(btemp+1)^0,w,c
 11458   0148FC  6E23               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 11459   0148FE                     
 11460                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 11461   0148FE  94F2               	bcf	242,2,c	;volatile
 11462   014900                     
 11463                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 11464   014900  8AF2               	bsf	242,5,c	;volatile
 11465   014902                     
 11466                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 11467   014902  0E22               	movlw	low _TMR0_DefaultInterruptHandler
 11468   014904  6EE6               	movwf	postinc1,c
 11469   014906  0E4B               	movlw	high _TMR0_DefaultInterruptHandler
 11470   014908  6EE6               	movwf	postinc1,c
 11471   01490A  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 11472   01490C  6EE6               	movwf	postinc1,c
 11473   01490E  EC2D  F0A5         	call	_TMR0_SetInterruptHandler	;wreg free
 11474   014912                     
 11475                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 11476   014912  0E97               	movlw	151
 11477   014914  6ED5               	movwf	213,c	;volatile
 11478   014916                     
 11479                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11480   014916  0012               	return		;funcret
 11481   014918                     __end_of_TMR0_Initialize:
 11482                           	callstack 0
 11483                           
 11484 ;; *************** function _TMR0_SetInterruptHandler *****************
 11485 ;; Defined at:
 11486 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 11489 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;		None
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1  [STACK] void 
 11494 ;; Registers used:
 11495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;Total ram usage:        0 bytes
 11506 ;; Hardware stack levels used: 1
 11507 ;; Hardware stack levels required when called: 7
 11508 ;; This function calls:
 11509 ;;		Nothing
 11510 ;; This function is called by:
 11511 ;;		_TMR0_Initialize
 11512 ;;		_main
 11513 ;; This function uses a reentrant model
 11514 ;;
 11515                           
 11516                           	psect	text37
 11517   014A5A                     __ptext37:
 11518                           	callstack 0
 11519   014A5A                     _TMR0_SetInterruptHandler:
 11520                           	callstack 23
 11521   014A5A                     
 11522                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 11523                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 11524   014A5A  50E1               	movf	fsr1l,w,c
 11525   014A5C  0FFD               	addlw	-3
 11526   014A5E  6ED9               	movwf	fsr2l,c
 11527   014A60  50E2               	movf	fsr1h,w,c
 11528   014A62  6EDA               	movwf	fsr2h,c
 11529   014A64  0EFF               	movlw	255
 11530   014A66  22DA               	addwfc	fsr2h,f,c
 11531   014A68  CFDE F05A          	movff	postinc2,_TMR0_InterruptHandler
 11532   014A6C  CFDE F05B          	movff	postinc2,_TMR0_InterruptHandler+1
 11533   014A70  CFDD F05C          	movff	postdec2,_TMR0_InterruptHandler+2
 11534   014A74                     
 11535                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 11536   014A74  52E5               	movf	postdec1,f,c
 11537   014A76  52E5               	movf	postdec1,f,c
 11538   014A78  52E5               	movf	postdec1,f,c
 11539   014A7A  0012               	return		;funcret
 11540   014A7C                     __end_of_TMR0_SetInterruptHandler:
 11541                           	callstack 0
 11542                           
 11543 ;; *************** function _SPI2_Initialize *****************
 11544 ;; Defined at:
 11545 ;;		line 62 in file "mcc_generated_files/spi2.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;		None
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;		None
 11550 ;; Return value:  Size  Location     Type
 11551 ;;                  1  [STACK] void 
 11552 ;; Registers used:
 11553 ;;		wreg, status,2
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11563 ;;Total ram usage:        0 bytes
 11564 ;; Hardware stack levels used: 1
 11565 ;; Hardware stack levels required when called: 7
 11566 ;; This function calls:
 11567 ;;		Nothing
 11568 ;; This function is called by:
 11569 ;;		_SYSTEM_Initialize
 11570 ;; This function uses a reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text38
 11574   014AF8                     __ptext38:
 11575                           	callstack 0
 11576   014AF8                     _SPI2_Initialize:
 11577                           	callstack 22
 11578   014AF8                     
 11579                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 11580   014AF8  0E40               	movlw	64
 11581   014AFA  6E64               	movwf	100,c	;volatile
 11582                           
 11583                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 11584   014AFC  0E01               	movlw	1
 11585   014AFE  6E63               	movwf	99,c	;volatile
 11586   014B00                     
 11587                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 11588   014B00  6A65               	clrf	101,c	;volatile
 11589   014B02                     
 11590                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 11591   014B02  9C95               	bcf	149,6,c	;volatile
 11592   014B04                     
 11593                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 11594   014B04  9A63               	bcf	99,5,c	;volatile
 11595   014B06                     
 11596                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 11597   014B06  0012               	return		;funcret
 11598   014B08                     __end_of_SPI2_Initialize:
 11599                           	callstack 0
 11600                           
 11601 ;; *************** function _PIN_MANAGER_Initialize *****************
 11602 ;; Defined at:
 11603 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;		None
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;		None
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1  [STACK] void 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11621 ;;Total ram usage:        0 bytes
 11622 ;; Hardware stack levels used: 1
 11623 ;; Hardware stack levels required when called: 7
 11624 ;; This function calls:
 11625 ;;		Nothing
 11626 ;; This function is called by:
 11627 ;;		_SYSTEM_Initialize
 11628 ;; This function uses a reentrant model
 11629 ;;
 11630                           
 11631                           	psect	text39
 11632   014984                     __ptext39:
 11633                           	callstack 0
 11634   014984                     _PIN_MANAGER_Initialize:
 11635                           	callstack 22
 11636   014984                     
 11637                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 11638   014984  6A8D               	clrf	141,c	;volatile
 11639                           
 11640                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 11641   014986  6A91               	clrf	145,c	;volatile
 11642                           
 11643                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 11644   014988  6A8C               	clrf	140,c	;volatile
 11645                           
 11646                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 11647   01498A  6A89               	clrf	137,c	;volatile
 11648                           
 11649                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 11650   01498C  6A8E               	clrf	142,c	;volatile
 11651                           
 11652                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 11653   01498E  6A8A               	clrf	138,c	;volatile
 11654                           
 11655                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 11656   014990  6A8F               	clrf	143,c	;volatile
 11657                           
 11658                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11659   014992  6A8B               	clrf	139,c	;volatile
 11660                           
 11661                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 11662   014994  6A90               	clrf	144,c	;volatile
 11663                           
 11664                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 11665   014996  6896               	setf	150,c	;volatile
 11666                           
 11667                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 11668   014998  6897               	setf	151,c	;volatile
 11669   01499A                     
 11670                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 11671   01499A  0E3F               	movlw	63
 11672   01499C  6E92               	movwf	146,c	;volatile
 11673   01499E                     
 11674                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 11675   01499E  6898               	setf	152,c	;volatile
 11676   0149A0                     
 11677                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 11678   0149A0  6893               	setf	147,c	;volatile
 11679   0149A2                     
 11680                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 11681   0149A2  6899               	setf	153,c	;volatile
 11682   0149A4                     
 11683                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 11684   0149A4  6894               	setf	148,c	;volatile
 11685                           
 11686                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 11687   0149A6  0EAF               	movlw	175
 11688   0149A8  6E95               	movwf	149,c	;volatile
 11689   0149AA                     
 11690                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 11691   0149AA  689A               	setf	154,c	;volatile
 11692                           
 11693                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 11694   0149AC  0EF0               	movlw	-16
 11695   0149AE  16C1               	andwf	193,f,c	;volatile
 11696   0149B0                     
 11697                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 11698   0149B0  0012               	return		;funcret
 11699   0149B2                     __end_of_PIN_MANAGER_Initialize:
 11700                           	callstack 0
 11701                           
 11702 ;; *************** function _OSCILLATOR_Initialize *****************
 11703 ;; Defined at:
 11704 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;		None
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;		None
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  1  [STACK] void 
 11711 ;; Registers used:
 11712 ;;		wreg, status,2
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11722 ;;Total ram usage:        0 bytes
 11723 ;; Hardware stack levels used: 1
 11724 ;; Hardware stack levels required when called: 7
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_SYSTEM_Initialize
 11729 ;; This function uses a reentrant model
 11730 ;;
 11731                           
 11732                           	psect	text40
 11733   014B08                     __ptext40:
 11734                           	callstack 0
 11735   014B08                     _OSCILLATOR_Initialize:
 11736                           	callstack 22
 11737   014B08                     
 11738                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 11739   014B08  6AD3               	clrf	211,c	;volatile
 11740   014B0A                     
 11741                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 11742   014B0A  0E50               	movlw	80
 11743   014B0C  6E9B               	movwf	155,c	;volatile
 11744   014B0E                     
 11745                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 11746   014B0E  0012               	return		;funcret
 11747   014B10                     __end_of_OSCILLATOR_Initialize:
 11748                           	callstack 0
 11749                           
 11750 ;; *************** function _INTERRUPT_Initialize *****************
 11751 ;; Defined at:
 11752 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;                  1  [STACK] void 
 11759 ;; Registers used:
 11760 ;;		None
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11770 ;;Total ram usage:        0 bytes
 11771 ;; Hardware stack levels used: 1
 11772 ;; Hardware stack levels required when called: 7
 11773 ;; This function calls:
 11774 ;;		Nothing
 11775 ;; This function is called by:
 11776 ;;		_SYSTEM_Initialize
 11777 ;; This function uses a reentrant model
 11778 ;;
 11779                           
 11780                           	psect	text41
 11781   014B1C                     __ptext41:
 11782                           	callstack 0
 11783   014B1C                     _INTERRUPT_Initialize:
 11784                           	callstack 22
 11785   014B1C                     
 11786                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 11787   014B1C  9ED0               	bcf	208,7,c	;volatile
 11788   014B1E                     
 11789                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 11790   014B1E  0012               	return		;funcret
 11791   014B20                     __end_of_INTERRUPT_Initialize:
 11792                           	callstack 0
 11793                           
 11794 ;; *************** function _CanSetFilter *****************
 11795 ;; Defined at:
 11796 ;;		line 231 in file "can/can.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  filter          1  [STACK] enum E5322
 11799 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 11800 ;;		 -> filterObj(6), 
 11801 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 11802 ;;		 -> maskObj(6), 
 11803 ;; Auto vars:     Size  Location     Type
 11804 ;;		None
 11805 ;; Return value:  Size  Location     Type
 11806 ;;                  1  [STACK] void 
 11807 ;; Registers used:
 11808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11809 ;; Tracked objects:
 11810 ;;		On entry : 0/0
 11811 ;;		On exit  : 0/0
 11812 ;;		Unchanged: 0/0
 11813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11818 ;;Total ram usage:        0 bytes
 11819 ;; Hardware stack levels used: 1
 11820 ;; Hardware stack levels required when called: 10
 11821 ;; This function calls:
 11822 ;;		_DRV_CANFDSPI_FilterDisable
 11823 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 11824 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 11825 ;;		_DRV_CANFDSPI_FilterToFifoLink
 11826 ;; This function is called by:
 11827 ;;		_main
 11828 ;; This function uses a reentrant model
 11829 ;;
 11830                           
 11831                           	psect	text42
 11832   014550                     __ptext42:
 11833                           	callstack 0
 11834   014550                     _CanSetFilter:
 11835                           	callstack 20
 11836   014550                     
 11837                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 11838                           ;stkvar	_filter @ sp[(0)+-1]
 11839   014550  0EFF               	movlw	-1
 11840   014552  50E3               	movf	plusw1,w,c
 11841   014554  6EE6               	movwf	postinc1,c
 11842   014556  EC9A  F0A1         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 11843   01455A                     
 11844                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 11845                           ;stkvar	_fObj @ sp[(0)+-3]
 11846   01455A  0EFD               	movlw	-3
 11847   01455C  CFE3 FFE6          	movff	plusw1,postinc1
 11848   014560  CFE3 FFE6          	movff	plusw1,postinc1
 11849                           
 11850                           ;stkvar	_filter @ sp[(-2)+-1]
 11851   014564  0EFD               	movlw	-3
 11852   014566  50E3               	movf	plusw1,w,c
 11853   014568  6EE6               	movwf	postinc1,c
 11854   01456A  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 11855   01456E                     
 11856                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 11857                           ;stkvar	_fObj @ sp[(0)+-3]
 11858   01456E  0EFD               	movlw	-3
 11859   014570  CFE3 F034          	movff	plusw1,btemp+10
 11860   014574  0EFE               	movlw	-2
 11861   014576  CFE3 F035          	movff	plusw1,btemp+11
 11862   01457A  0E05               	movlw	5
 11863   01457C  2434               	addwf	(btemp+10)^0,w,c
 11864   01457E  6ED9               	movwf	fsr2l,c
 11865   014580  0E00               	movlw	0
 11866   014582  2035               	addwfc	(btemp+11)^0,w,c
 11867   014584  6EDA               	movwf	fsr2h,c
 11868   014586  50DF               	movf	indf2,w,c
 11869   014588  6EE6               	movwf	postinc1,c
 11870                           
 11871                           ;stkvar	_mObj @ sp[(-1)+-5]
 11872   01458A  0EFA               	movlw	-6
 11873   01458C  CFE3 FFE6          	movff	plusw1,postinc1
 11874   014590  CFE3 FFE6          	movff	plusw1,postinc1
 11875                           
 11876                           ;stkvar	_filter @ sp[(-3)+-1]
 11877   014594  0EFC               	movlw	-4
 11878   014596  50E3               	movf	plusw1,w,c
 11879   014598  6EE6               	movwf	postinc1,c
 11880   01459A  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 11881   01459E                     
 11882                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 11883   01459E  0E01               	movlw	1
 11884   0145A0  6EE6               	movwf	postinc1,c
 11885   0145A2  0E02               	movlw	2
 11886   0145A4  6EE6               	movwf	postinc1,c
 11887                           
 11888                           ;stkvar	_filter @ sp[(-2)+-1]
 11889   0145A6  0EFD               	movlw	-3
 11890   0145A8  50E3               	movf	plusw1,w,c
 11891   0145AA  6EE6               	movwf	postinc1,c
 11892   0145AC  EC4F  F0A1         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 11893   0145B0                     
 11894                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 11895   0145B0  0EFB               	movlw	251
 11896   0145B2  26E1               	addwf	fsr1l,f,c
 11897   0145B4  0EFF               	movlw	255
 11898   0145B6  22E2               	addwfc	fsr1h,f,c
 11899   0145B8  0012               	return		;funcret
 11900   0145BA                     __end_of_CanSetFilter:
 11901                           	callstack 0
 11902                           
 11903 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 11904 ;; Defined at:
 11905 ;;		line 1072 in file "can/can.c"
 11906 ;; Parameters:    Size  Location     Type
 11907 ;;  filter          1  [STACK] enum E5322
 11908 ;;  channel         1  [STACK] enum E5287
 11909 ;;  enable          1  [STACK] _Bool 
 11910 ;; Auto vars:     Size  Location     Type
 11911 ;;  a               2  [STACK] unsigned short 
 11912 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 11913 ;;  spiTransferE    1    0        char 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1  [STACK] char 
 11916 ;; Registers used:
 11917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;Total ram usage:        0 bytes
 11928 ;; Hardware stack levels used: 1
 11929 ;; Hardware stack levels required when called: 9
 11930 ;; This function calls:
 11931 ;;		_DRV_CANFDSPI_WriteByte
 11932 ;; This function is called by:
 11933 ;;		_CanSetFilter
 11934 ;; This function uses a reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text43
 11938   01429E                     __ptext43:
 11939                           	callstack 0
 11940   01429E                     _DRV_CANFDSPI_FilterToFifoLink:
 11941                           	callstack 0
 11942                           
 11943                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11944   01429E  52E6               	movf	postinc1,f,c
 11945   0142A0  52E6               	movf	postinc1,f,c
 11946   0142A2  52E6               	movf	postinc1,f,c
 11947   0142A4                     
 11948                           ;can/can.c: 1080:     if (enable) {
 11949                           ;stkvar	_enable @ sp[(-3)+-3]
 11950   0142A4  0EFA               	movlw	-6
 11951   0142A6  50E3               	movf	plusw1,w,c
 11952   0142A8  B4D8               	btfsc	status,2,c
 11953   0142AA  EF59  F0A1         	goto	u2801
 11954   0142AE  EF5B  F0A1         	goto	u2800
 11955   0142B2                     u2801:
 11956   0142B2  EF65  F0A1         	goto	l5050
 11957   0142B6                     u2800:
 11958   0142B6                     
 11959                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11960                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11961   0142B6  50E1               	movf	fsr1l,w,c
 11962   0142B8  0FFF               	addlw	-1
 11963   0142BA  6ED9               	movwf	fsr2l,c
 11964   0142BC  50E2               	movf	fsr1h,w,c
 11965   0142BE  6EDA               	movwf	fsr2h,c
 11966   0142C0  0EFF               	movlw	255
 11967   0142C2  22DA               	addwfc	fsr2h,f,c
 11968   0142C4  8EDF               	bsf	indf2,7,c
 11969                           
 11970                           ;can/can.c: 1082:     } else {
 11971   0142C6  EF6D  F0A1         	goto	l5052
 11972   0142CA                     l5050:
 11973                           
 11974                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11975                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11976   0142CA  50E1               	movf	fsr1l,w,c
 11977   0142CC  0FFF               	addlw	-1
 11978   0142CE  6ED9               	movwf	fsr2l,c
 11979   0142D0  50E2               	movf	fsr1h,w,c
 11980   0142D2  6EDA               	movwf	fsr2h,c
 11981   0142D4  0EFF               	movlw	255
 11982   0142D6  22DA               	addwfc	fsr2h,f,c
 11983   0142D8  9EDF               	bcf	indf2,7,c
 11984   0142DA                     l5052:
 11985                           
 11986                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11987                           ;stkvar	_channel @ sp[(-3)+-2]
 11988   0142DA  0EFB               	movlw	-5
 11989   0142DC  CFE3 F035          	movff	plusw1,btemp+11
 11990                           
 11991                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11992   0142E0  50E1               	movf	fsr1l,w,c
 11993   0142E2  0FFF               	addlw	-1
 11994   0142E4  6ED9               	movwf	fsr2l,c
 11995   0142E6  50E2               	movf	fsr1h,w,c
 11996   0142E8  6EDA               	movwf	fsr2h,c
 11997   0142EA  0EFF               	movlw	255
 11998   0142EC  22DA               	addwfc	fsr2h,f,c
 11999   0142EE  50DF               	movf	223,w,c
 12000   0142F0  1835               	xorwf	(btemp+11)^0,w,c
 12001   0142F2  0BE0               	andlw	-32
 12002   0142F4  1835               	xorwf	(btemp+11)^0,w,c
 12003   0142F6  6EDF               	movwf	223,c
 12004   0142F8                     
 12005                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12006                           ;stkvar	_filter @ sp[(-3)+-1]
 12007   0142F8  0EFC               	movlw	-4
 12008   0142FA  CFE3 F035          	movff	plusw1,btemp+11
 12009   0142FE  0ED0               	movlw	208
 12010   014300  2435               	addwf	(btemp+11)^0,w,c
 12011   014302  6E32               	movwf	(btemp+8)^0,c
 12012   014304  6A33               	clrf	(btemp+9)^0,c
 12013   014306  0E01               	movlw	1
 12014   014308  2233               	addwfc	(btemp+9)^0,f,c
 12015                           
 12016                           ;stkvar	_a @ sp[(-3)+0]
 12017   01430A  0EFD               	movlw	-3
 12018   01430C  C032  FFE3         	movff	btemp+8,plusw1
 12019   014310  0EFE               	movlw	-2
 12020   014312  C033  FFE3         	movff	btemp+9,plusw1
 12021   014316                     
 12022                           ;stkvar	_fCtrl @ sp[(-3)+2]
 12023   014316  0EFF               	movlw	-1
 12024   014318  50E3               	movf	plusw1,w,c
 12025   01431A  6EE6               	movwf	postinc1,c
 12026                           
 12027                           ;stkvar	_a @ sp[(-4)+0]
 12028   01431C  0EFC               	movlw	-4
 12029   01431E  CFE3 FFE6          	movff	plusw1,postinc1
 12030   014322  CFE3 FFE6          	movff	plusw1,postinc1
 12031   014326  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12032   01432A                     
 12033                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 12034   01432A  0EFA               	movlw	250
 12035   01432C  26E1               	addwf	fsr1l,f,c
 12036   01432E  0EFF               	movlw	255
 12037   014330  22E2               	addwfc	fsr1h,f,c
 12038   014332  0012               	return		;funcret
 12039   014334                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 12040                           	callstack 0
 12041                           
 12042 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 12043 ;; Defined at:
 12044 ;;		line 1001 in file "can/can.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  filter          1  [STACK] enum E5322
 12047 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 12048 ;;		 -> filterObj(6), 
 12049 ;; Auto vars:     Size  Location     Type
 12050 ;;  temp32          4  [STACK] unsigned long 
 12051 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 12052 ;;  a               2  [STACK] unsigned short 
 12053 ;;  spiTransferE    1    0        char 
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1  [STACK] char 
 12056 ;; Registers used:
 12057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12058 ;; Tracked objects:
 12059 ;;		On entry : 0/0
 12060 ;;		On exit  : 0/0
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;Total ram usage:        0 bytes
 12068 ;; Hardware stack levels used: 1
 12069 ;; Hardware stack levels required when called: 9
 12070 ;; This function calls:
 12071 ;;		_DRV_CANFDSPI_WriteWord
 12072 ;; This function is called by:
 12073 ;;		_CanSetFilter
 12074 ;; This function uses a reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text44
 12078   010E34                     __ptext44:
 12079                           	callstack 0
 12080   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 12081                           	callstack 0
 12082                           
 12083                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12084   010E34  0E0C               	movlw	12
 12085   010E36  26E1               	addwf	fsr1l,f,c
 12086   010E38  0E00               	movlw	0
 12087   010E3A  22E2               	addwfc	fsr1h,f,c
 12088   010E3C                     
 12089                           ;can/can.c: 1009:     fObj.word = 0;
 12090                           ;stkvar	_fObj @ sp[(-12)+4]
 12091   010E3C  0EF8               	movlw	-8
 12092   010E3E  6AE3               	clrf	plusw1,c
 12093   010E40  0EF9               	movlw	-7
 12094   010E42  6AE3               	clrf	plusw1,c
 12095   010E44  0EFA               	movlw	-6
 12096   010E46  6AE3               	clrf	plusw1,c
 12097   010E48  0EFB               	movlw	-5
 12098   010E4A  6AE3               	clrf	plusw1,c
 12099   010E4C                     
 12100                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 12101                           ;stkvar	_id @ sp[(-12)+-3]
 12102   010E4C  0EF1               	movlw	-15
 12103   010E4E  CFE3 F034          	movff	plusw1,btemp+10
 12104   010E52  0EF2               	movlw	-14
 12105   010E54  CFE3 F035          	movff	plusw1,btemp+11
 12106   010E58  0E05               	movlw	5
 12107   010E5A  2434               	addwf	(btemp+10)^0,w,c
 12108   010E5C  6ED9               	movwf	fsr2l,c
 12109   010E5E  0E00               	movlw	0
 12110   010E60  2035               	addwfc	(btemp+11)^0,w,c
 12111   010E62  6EDA               	movwf	fsr2h,c
 12112   010E64  50DF               	movf	indf2,w,c
 12113   010E66  A4D8               	btfss	status,2,c
 12114   010E68  EF38  F087         	goto	u2621
 12115   010E6C  EF3A  F087         	goto	u2620
 12116   010E70                     u2621:
 12117   010E70  EFD2  F087         	goto	l4996
 12118   010E74                     u2620:
 12119   010E74                     
 12120                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 12121                           ;stkvar	_id @ sp[(-12)+-3]
 12122   010E74  0EF1               	movlw	-15
 12123   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 12124   010E7A  0EF2               	movlw	-14
 12125   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 12126   010E80  50DF               	movf	indf2,w,c
 12127   010E82  6E35               	movwf	(btemp+11)^0,c
 12128                           
 12129                           ;stkvar	_fObj @ sp[(-12)+4]
 12130   010E84  0EF8               	movlw	-8
 12131   010E86  C035  FFE3         	movff	btemp+11,plusw1
 12132   010E8A                     
 12133                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 12134                           ;stkvar	_fObj @ sp[(-12)+4]
 12135   010E8A  0EF9               	movlw	249
 12136   010E8C  24E1               	addwf	fsr1l,w,c
 12137   010E8E  6ED9               	movwf	fsr2l,c
 12138   010E90  0EFF               	movlw	255
 12139   010E92  20E2               	addwfc	fsr1h,w,c
 12140   010E94  6EDA               	movwf	fsr2h,c
 12141                           
 12142                           ;stkvar	_id @ sp[(-12)+-3]
 12143   010E96  0EF1               	movlw	-15
 12144   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 12145   010E9C  0EF2               	movlw	-14
 12146   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 12147   010EA2  CFEE F032          	movff	postinc0,btemp+8
 12148   010EA6  CFEE F033          	movff	postinc0,btemp+9
 12149   010EAA  CFEE F034          	movff	postinc0,btemp+10
 12150   010EAE  CFEE F035          	movff	postinc0,btemp+11
 12151   010EB2  C033  F032         	movff	btemp+9,btemp+8
 12152   010EB6  C034  F033         	movff	btemp+10,btemp+9
 12153   010EBA  C035  F034         	movff	btemp+11,btemp+10
 12154   010EBE  6A35               	clrf	(btemp+11)^0,c
 12155   010EC0  5032               	movf	(btemp+8)^0,w,c
 12156   010EC2  6EDF               	movwf	indf2,c
 12157   010EC4                     
 12158                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 12159                           ;stkvar	_fObj @ sp[(-12)+4]
 12160   010EC4  0EFA               	movlw	250
 12161   010EC6  24E1               	addwf	fsr1l,w,c
 12162   010EC8  6ED9               	movwf	fsr2l,c
 12163   010ECA  0EFF               	movlw	255
 12164   010ECC  20E2               	addwfc	fsr1h,w,c
 12165   010ECE  6EDA               	movwf	fsr2h,c
 12166                           
 12167                           ;stkvar	_id @ sp[(-12)+-3]
 12168   010ED0  0EF1               	movlw	-15
 12169   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 12170   010ED6  0EF2               	movlw	-14
 12171   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 12172   010EDC  CFEE F032          	movff	postinc0,btemp+8
 12173   010EE0  CFEE F033          	movff	postinc0,btemp+9
 12174   010EE4  CFEE F034          	movff	postinc0,btemp+10
 12175   010EE8  CFEE F035          	movff	postinc0,btemp+11
 12176   010EEC  0E11               	movlw	17
 12177   010EEE  EF7E  F087         	goto	u2630
 12178   010EF2                     u2635:
 12179   010EF2  90D8               	bcf	status,0,c
 12180   010EF4  3235               	rrcf	(btemp+11)^0,f,c
 12181   010EF6  3234               	rrcf	(btemp+10)^0,f,c
 12182   010EF8  3233               	rrcf	(btemp+9)^0,f,c
 12183   010EFA  3232               	rrcf	(btemp+8)^0,f,c
 12184   010EFC                     u2630:
 12185   010EFC  2EE8               	decfsz	wreg,f,c
 12186   010EFE  EF79  F087         	goto	u2635
 12187   010F02  5032               	movf	(btemp+8)^0,w,c
 12188   010F04  6EDF               	movwf	indf2,c
 12189   010F06                     
 12190                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12191                           ;stkvar	_fObj @ sp[(-12)+4]
 12192   010F06  0EFB               	movlw	251
 12193   010F08  24E1               	addwf	fsr1l,w,c
 12194   010F0A  6ED9               	movwf	fsr2l,c
 12195   010F0C  0EFF               	movlw	255
 12196   010F0E  20E2               	addwfc	fsr1h,w,c
 12197   010F10  6EDA               	movwf	fsr2h,c
 12198                           
 12199                           ;stkvar	_id @ sp[(-12)+-3]
 12200   010F12  0EF1               	movlw	-15
 12201   010F14  CFE3 F034          	movff	plusw1,btemp+10
 12202   010F18  0EF2               	movlw	-14
 12203   010F1A  CFE3 F035          	movff	plusw1,btemp+11
 12204   010F1E  0E05               	movlw	5
 12205   010F20  2434               	addwf	(btemp+10)^0,w,c
 12206   010F22  6EE9               	movwf	fsr0l,c
 12207   010F24  0E00               	movlw	0
 12208   010F26  2035               	addwfc	(btemp+11)^0,w,c
 12209   010F28  6EEA               	movwf	fsr0h,c
 12210   010F2A  50EF               	movf	indf0,w,c
 12211   010F2C  6E35               	movwf	(btemp+11)^0,c
 12212   010F2E  0E06               	movlw	6
 12213   010F30  6E2A               	movwf	btemp^0,c
 12214   010F32                     u2645:
 12215   010F32  90D8               	bcf	status,0,c
 12216   010F34  3635               	rlcf	(btemp+11)^0,f,c
 12217   010F36  2E2A               	decfsz	btemp^0,f,c
 12218   010F38  EF99  F087         	goto	u2645
 12219                           
 12220                           ;stkvar	_id @ sp[(-12)+-3]
 12221   010F3C  0EF1               	movlw	-15
 12222   010F3E  CFE3 F032          	movff	plusw1,btemp+8
 12223   010F42  0EF2               	movlw	-14
 12224   010F44  CFE3 F033          	movff	plusw1,btemp+9
 12225   010F48  0E04               	movlw	4
 12226   010F4A  2432               	addwf	(btemp+8)^0,w,c
 12227   010F4C  6EE9               	movwf	fsr0l,c
 12228   010F4E  0E00               	movlw	0
 12229   010F50  2033               	addwfc	(btemp+9)^0,w,c
 12230   010F52  6EEA               	movwf	fsr0h,c
 12231   010F54  50EF               	movf	indf0,w,c
 12232   010F56  6E34               	movwf	(btemp+10)^0,c
 12233   010F58  0E05               	movlw	5
 12234   010F5A  6E2A               	movwf	btemp^0,c
 12235   010F5C                     u2655:
 12236   010F5C  90D8               	bcf	status,0,c
 12237   010F5E  3634               	rlcf	(btemp+10)^0,f,c
 12238   010F60  2E2A               	decfsz	btemp^0,f,c
 12239   010F62  EFAE  F087         	goto	u2655
 12240                           
 12241                           ;stkvar	_id @ sp[(-12)+-3]
 12242   010F66  0EF1               	movlw	-15
 12243   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 12244   010F6C  0EF2               	movlw	-14
 12245   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 12246   010F72  CFEE F02E          	movff	postinc0,btemp+4
 12247   010F76  CFEE F02F          	movff	postinc0,btemp+5
 12248   010F7A  CFEE F030          	movff	postinc0,btemp+6
 12249   010F7E  CFEE F031          	movff	postinc0,btemp+7
 12250   010F82  0E19               	movlw	25
 12251   010F84  EFC9  F087         	goto	u2660
 12252   010F88                     u2665:
 12253   010F88  90D8               	bcf	status,0,c
 12254   010F8A  3231               	rrcf	(btemp+7)^0,f,c
 12255   010F8C  3230               	rrcf	(btemp+6)^0,f,c
 12256   010F8E  322F               	rrcf	(btemp+5)^0,f,c
 12257   010F90  322E               	rrcf	(btemp+4)^0,f,c
 12258   010F92                     u2660:
 12259   010F92  2EE8               	decfsz	wreg,f,c
 12260   010F94  EFC4  F087         	goto	u2665
 12261   010F98  502E               	movf	(btemp+4)^0,w,c
 12262   010F9A  1034               	iorwf	(btemp+10)^0,w,c
 12263   010F9C  1035               	iorwf	(btemp+11)^0,w,c
 12264   010F9E  6EDF               	movwf	indf2,c
 12265                           
 12266                           ;can/can.c: 1017:     }
 12267   010FA0  EF97  F088         	goto	l5008
 12268   010FA4                     l4996:
 12269                           
 12270                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 12271                           ;stkvar	_id @ sp[(-12)+-3]
 12272   010FA4  0EF1               	movlw	-15
 12273   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 12274   010FAA  0EF2               	movlw	-14
 12275   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 12276   010FB0  CFDE F032          	movff	postinc2,btemp+8
 12277   010FB4  CFDE F033          	movff	postinc2,btemp+9
 12278   010FB8  CFDE F034          	movff	postinc2,btemp+10
 12279   010FBC  CFDE F035          	movff	postinc2,btemp+11
 12280   010FC0  0E13               	movlw	19
 12281   010FC2  EFE8  F087         	goto	u2670
 12282   010FC6                     u2675:
 12283   010FC6  90D8               	bcf	status,0,c
 12284   010FC8  3235               	rrcf	(btemp+11)^0,f,c
 12285   010FCA  3234               	rrcf	(btemp+10)^0,f,c
 12286   010FCC  3233               	rrcf	(btemp+9)^0,f,c
 12287   010FCE  3232               	rrcf	(btemp+8)^0,f,c
 12288   010FD0                     u2670:
 12289   010FD0  2EE8               	decfsz	wreg,f,c
 12290   010FD2  EFE3  F087         	goto	u2675
 12291   010FD6  0EFF               	movlw	255
 12292   010FD8  1432               	andwf	(btemp+8)^0,w,c
 12293   010FDA  6E2E               	movwf	(btemp+4)^0,c
 12294   010FDC  0E07               	movlw	7
 12295   010FDE  1433               	andwf	(btemp+9)^0,w,c
 12296   010FE0  6E2F               	movwf	(btemp+5)^0,c
 12297   010FE2  0E00               	movlw	0
 12298   010FE4  1434               	andwf	(btemp+10)^0,w,c
 12299   010FE6  6E30               	movwf	(btemp+6)^0,c
 12300   010FE8  0E00               	movlw	0
 12301   010FEA  1435               	andwf	(btemp+11)^0,w,c
 12302   010FEC  6E31               	movwf	(btemp+7)^0,c
 12303                           
 12304                           ;stkvar	_id @ sp[(-12)+-3]
 12305   010FEE  0EF1               	movlw	-15
 12306   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 12307   010FF4  0EF2               	movlw	-14
 12308   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 12309   010FFA  0EFF               	movlw	255
 12310   010FFC  14DE               	andwf	postinc2,w,c
 12311   010FFE  6E32               	movwf	(btemp+8)^0,c
 12312   011000  0EFF               	movlw	255
 12313   011002  14DE               	andwf	postinc2,w,c
 12314   011004  6E33               	movwf	(btemp+9)^0,c
 12315   011006  0E03               	movlw	3
 12316   011008  14DE               	andwf	postinc2,w,c
 12317   01100A  6E34               	movwf	(btemp+10)^0,c
 12318   01100C  0E00               	movlw	0
 12319   01100E  14DE               	andwf	postinc2,w,c
 12320   011010  6E35               	movwf	(btemp+11)^0,c
 12321   011012  0E0B               	movlw	11
 12322   011014                     u2685:
 12323   011014  90D8               	bcf	status,0,c
 12324   011016  3632               	rlcf	(btemp+8)^0,f,c
 12325   011018  3633               	rlcf	(btemp+9)^0,f,c
 12326   01101A  3634               	rlcf	(btemp+10)^0,f,c
 12327   01101C  3635               	rlcf	(btemp+11)^0,f,c
 12328   01101E  2EE8               	decfsz	wreg,f,c
 12329   011020  EF0A  F088         	goto	u2685
 12330   011024  502E               	movf	(btemp+4)^0,w,c
 12331   011026  1032               	iorwf	(btemp+8)^0,w,c
 12332   011028  6E2A               	movwf	btemp^0,c
 12333   01102A  502F               	movf	(btemp+5)^0,w,c
 12334   01102C  1033               	iorwf	(btemp+9)^0,w,c
 12335   01102E  6E2B               	movwf	(btemp+1)^0,c
 12336   011030  5030               	movf	(btemp+6)^0,w,c
 12337   011032  1034               	iorwf	(btemp+10)^0,w,c
 12338   011034  6E2C               	movwf	(btemp+2)^0,c
 12339   011036  5031               	movf	(btemp+7)^0,w,c
 12340   011038  1035               	iorwf	(btemp+11)^0,w,c
 12341   01103A  6E2D               	movwf	(btemp+3)^0,c
 12342                           
 12343                           ;stkvar	_temp32 @ sp[(-12)+0]
 12344   01103C  0EF4               	movlw	-12
 12345   01103E  C02A  FFE3         	movff	btemp,plusw1
 12346   011042  0EF5               	movlw	-11
 12347   011044  C02B  FFE3         	movff	btemp+1,plusw1
 12348   011048  0EF6               	movlw	-10
 12349   01104A  C02C  FFE3         	movff	btemp+2,plusw1
 12350   01104E  0EF7               	movlw	-9
 12351   011050  C02D  FFE3         	movff	btemp+3,plusw1
 12352   011054                     
 12353                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 12354                           ;stkvar	_temp32 @ sp[(-12)+0]
 12355   011054  50E1               	movf	fsr1l,w,c
 12356   011056  0FF4               	addlw	-12
 12357   011058  6ED9               	movwf	fsr2l,c
 12358   01105A  50E2               	movf	fsr1h,w,c
 12359   01105C  6EDA               	movwf	fsr2h,c
 12360   01105E  0EFF               	movlw	255
 12361   011060  22DA               	addwfc	fsr2h,f,c
 12362   011062  0EFF               	movlw	255
 12363   011064  16DE               	andwf	postinc2,f,c
 12364   011066  0EFF               	movlw	255
 12365   011068  16DE               	andwf	postinc2,f,c
 12366   01106A  0EFF               	movlw	255
 12367   01106C  16DE               	andwf	postinc2,f,c
 12368   01106E  0E1F               	movlw	31
 12369   011070  16DE               	andwf	postinc2,f,c
 12370   011072                     
 12371                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 12372                           ;stkvar	_temp32 @ sp[(-12)+0]
 12373                           ;stkvar	_fObj @ sp[(-12)+4]
 12374   011072  0EF4               	movlw	-12
 12375   011074  CFE3 F02A          	movff	plusw1,btemp
 12376   011078  0EF8               	movlw	-8
 12377   01107A  C02A  FFE3         	movff	btemp,plusw1
 12378   01107E                     
 12379                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 12380                           ;stkvar	_temp32 @ sp[(-12)+0]
 12381   01107E  0EF5               	movlw	245
 12382   011080  24E1               	addwf	fsr1l,w,c
 12383   011082  6ED9               	movwf	fsr2l,c
 12384   011084  0EFF               	movlw	255
 12385   011086  20E2               	addwfc	fsr1h,w,c
 12386   011088  6EDA               	movwf	fsr2h,c
 12387                           
 12388                           ;stkvar	_fObj @ sp[(-12)+4]
 12389   01108A  0EF9               	movlw	249
 12390   01108C  24E1               	addwf	fsr1l,w,c
 12391   01108E  6EE9               	movwf	fsr0l,c
 12392   011090  0EFF               	movlw	255
 12393   011092  20E2               	addwfc	fsr1h,w,c
 12394   011094  6EEA               	movwf	fsr0h,c
 12395   011096  CFDF FFEF          	movff	indf2,indf0
 12396   01109A                     
 12397                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 12398                           ;stkvar	_temp32 @ sp[(-12)+0]
 12399   01109A  0EF6               	movlw	246
 12400   01109C  24E1               	addwf	fsr1l,w,c
 12401   01109E  6ED9               	movwf	fsr2l,c
 12402   0110A0  0EFF               	movlw	255
 12403   0110A2  20E2               	addwfc	fsr1h,w,c
 12404   0110A4  6EDA               	movwf	fsr2h,c
 12405                           
 12406                           ;stkvar	_fObj @ sp[(-12)+4]
 12407   0110A6  0EFA               	movlw	250
 12408   0110A8  24E1               	addwf	fsr1l,w,c
 12409   0110AA  6EE9               	movwf	fsr0l,c
 12410   0110AC  0EFF               	movlw	255
 12411   0110AE  20E2               	addwfc	fsr1h,w,c
 12412   0110B0  6EEA               	movwf	fsr0h,c
 12413   0110B2  CFDF FFEF          	movff	indf2,indf0
 12414   0110B6                     
 12415                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 12416                           ;stkvar	_fObj @ sp[(-12)+4]
 12417   0110B6  0EFB               	movlw	251
 12418   0110B8  24E1               	addwf	fsr1l,w,c
 12419   0110BA  6ED9               	movwf	fsr2l,c
 12420   0110BC  0EFF               	movlw	255
 12421   0110BE  20E2               	addwfc	fsr1h,w,c
 12422   0110C0  6EDA               	movwf	fsr2h,c
 12423                           
 12424                           ;stkvar	_temp32 @ sp[(-12)+0]
 12425   0110C2  0EF7               	movlw	247
 12426   0110C4  24E1               	addwf	fsr1l,w,c
 12427   0110C6  6EE9               	movwf	fsr0l,c
 12428   0110C8  0EFF               	movlw	255
 12429   0110CA  20E2               	addwfc	fsr1h,w,c
 12430   0110CC  6EEA               	movwf	fsr0h,c
 12431   0110CE  50EF               	movf	indf0,w,c
 12432   0110D0  6E35               	movwf	(btemp+11)^0,c
 12433                           
 12434                           ;stkvar	_id @ sp[(-12)+-3]
 12435   0110D2  0EF1               	movlw	-15
 12436   0110D4  CFE3 F032          	movff	plusw1,btemp+8
 12437   0110D8  0EF2               	movlw	-14
 12438   0110DA  CFE3 F033          	movff	plusw1,btemp+9
 12439   0110DE  0E05               	movlw	5
 12440   0110E0  2432               	addwf	(btemp+8)^0,w,c
 12441   0110E2  6EE9               	movwf	fsr0l,c
 12442   0110E4  0E00               	movlw	0
 12443   0110E6  2033               	addwfc	(btemp+9)^0,w,c
 12444   0110E8  6EEA               	movwf	fsr0h,c
 12445   0110EA  50EF               	movf	indf0,w,c
 12446   0110EC  6E34               	movwf	(btemp+10)^0,c
 12447   0110EE  0E06               	movlw	6
 12448   0110F0  6E2A               	movwf	btemp^0,c
 12449   0110F2                     u2695:
 12450   0110F2  90D8               	bcf	status,0,c
 12451   0110F4  3634               	rlcf	(btemp+10)^0,f,c
 12452   0110F6  2E2A               	decfsz	btemp^0,f,c
 12453   0110F8  EF79  F088         	goto	u2695
 12454                           
 12455                           ;stkvar	_id @ sp[(-12)+-3]
 12456   0110FC  0EF1               	movlw	-15
 12457   0110FE  CFE3 F032          	movff	plusw1,btemp+8
 12458   011102  0EF2               	movlw	-14
 12459   011104  CFE3 F033          	movff	plusw1,btemp+9
 12460   011108  0E04               	movlw	4
 12461   01110A  2432               	addwf	(btemp+8)^0,w,c
 12462   01110C  6EE9               	movwf	fsr0l,c
 12463   01110E  0E00               	movlw	0
 12464   011110  2033               	addwfc	(btemp+9)^0,w,c
 12465   011112  6EEA               	movwf	fsr0h,c
 12466   011114  50EF               	movf	indf0,w,c
 12467   011116  6E33               	movwf	(btemp+9)^0,c
 12468   011118  0E05               	movlw	5
 12469   01111A  6E2A               	movwf	btemp^0,c
 12470   01111C                     u2705:
 12471   01111C  90D8               	bcf	status,0,c
 12472   01111E  3633               	rlcf	(btemp+9)^0,f,c
 12473   011120  2E2A               	decfsz	btemp^0,f,c
 12474   011122  EF8E  F088         	goto	u2705
 12475   011126  5033               	movf	(btemp+9)^0,w,c
 12476   011128  1034               	iorwf	(btemp+10)^0,w,c
 12477   01112A  1035               	iorwf	(btemp+11)^0,w,c
 12478   01112C  6EDF               	movwf	indf2,c
 12479   01112E                     l5008:
 12480                           
 12481                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 12482                           ;stkvar	_filter @ sp[(-12)+-1]
 12483   01112E  0EF3               	movlw	-13
 12484   011130  50E3               	movf	plusw1,w,c
 12485   011132  0D08               	mullw	8
 12486   011134  CFF3 F034          	movff	prodl,btemp+10
 12487   011138  CFF4 F035          	movff	prodh,btemp+11
 12488   01113C  0EF0               	movlw	240
 12489   01113E  2434               	addwf	(btemp+10)^0,w,c
 12490   011140  6E32               	movwf	(btemp+8)^0,c
 12491   011142  0E01               	movlw	1
 12492   011144  2035               	addwfc	(btemp+11)^0,w,c
 12493   011146  6E33               	movwf	(btemp+9)^0,c
 12494                           
 12495                           ;stkvar	_a @ sp[(-12)+10]
 12496   011148  0EFE               	movlw	-2
 12497   01114A  C032  FFE3         	movff	btemp+8,plusw1
 12498   01114E  0EFF               	movlw	-1
 12499   011150  C033  FFE3         	movff	btemp+9,plusw1
 12500   011154                     
 12501                           ;stkvar	_fObj @ sp[(-12)+4]
 12502   011154  0EF8               	movlw	-8
 12503   011156  CFE3 FFE6          	movff	plusw1,postinc1
 12504   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 12505   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 12506   011162  CFE3 FFE6          	movff	plusw1,postinc1
 12507                           
 12508                           ;stkvar	_a @ sp[(-16)+10]
 12509   011166  0EFA               	movlw	-6
 12510   011168  CFE3 FFE6          	movff	plusw1,postinc1
 12511   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 12512   011170  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12513   011174                     
 12514                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 12515   011174  0EF1               	movlw	241
 12516   011176  26E1               	addwf	fsr1l,f,c
 12517   011178  0EFF               	movlw	255
 12518   01117A  22E2               	addwfc	fsr1h,f,c
 12519   01117C  0012               	return		;funcret
 12520   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 12521                           	callstack 0
 12522                           
 12523 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 12524 ;; Defined at:
 12525 ;;		line 1035 in file "can/can.c"
 12526 ;; Parameters:    Size  Location     Type
 12527 ;;  filter          1  [STACK] enum E5322
 12528 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 12529 ;;		 -> maskObj(6), 
 12530 ;;  EXIDE           1  [STACK] unsigned char 
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;  temp32          4  [STACK] unsigned long 
 12533 ;;  mObj            6  [STACK] struct _REG_CiMASK
 12534 ;;  a               2  [STACK] unsigned short 
 12535 ;;  spiTransferE    1    0        char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;                  1  [STACK] char 
 12538 ;; Registers used:
 12539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;Total ram usage:        0 bytes
 12550 ;; Hardware stack levels used: 1
 12551 ;; Hardware stack levels required when called: 9
 12552 ;; This function calls:
 12553 ;;		_DRV_CANFDSPI_WriteWord
 12554 ;; This function is called by:
 12555 ;;		_CanSetFilter
 12556 ;; This function uses a reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text45
 12560   01117E                     __ptext45:
 12561                           	callstack 0
 12562   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 12563                           	callstack 0
 12564                           
 12565                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12566   01117E  0E0C               	movlw	12
 12567   011180  26E1               	addwf	fsr1l,f,c
 12568   011182  0E00               	movlw	0
 12569   011184  22E2               	addwfc	fsr1h,f,c
 12570   011186                     
 12571                           ;can/can.c: 1043:     mObj.word = 0;
 12572                           ;stkvar	_mObj @ sp[(-12)+4]
 12573   011186  0EF8               	movlw	-8
 12574   011188  6AE3               	clrf	plusw1,c
 12575   01118A  0EF9               	movlw	-7
 12576   01118C  6AE3               	clrf	plusw1,c
 12577   01118E  0EFA               	movlw	-6
 12578   011190  6AE3               	clrf	plusw1,c
 12579   011192  0EFB               	movlw	-5
 12580   011194  6AE3               	clrf	plusw1,c
 12581   011196                     
 12582                           ;can/can.c: 1047:     if(EXIDE == 0)
 12583                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 12584   011196  0EF0               	movlw	-16
 12585   011198  50E3               	movf	plusw1,w,c
 12586   01119A  A4D8               	btfss	status,2,c
 12587   01119C  EFD2  F088         	goto	u2711
 12588   0111A0  EFD4  F088         	goto	u2710
 12589   0111A4                     u2711:
 12590   0111A4  EF6C  F089         	goto	l5028
 12591   0111A8                     u2710:
 12592   0111A8                     
 12593                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 12594                           ;stkvar	_mask @ sp[(-12)+-3]
 12595   0111A8  0EF1               	movlw	-15
 12596   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 12597   0111AE  0EF2               	movlw	-14
 12598   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 12599   0111B4  50DF               	movf	indf2,w,c
 12600   0111B6  6E35               	movwf	(btemp+11)^0,c
 12601                           
 12602                           ;stkvar	_mObj @ sp[(-12)+4]
 12603   0111B8  0EF8               	movlw	-8
 12604   0111BA  C035  FFE3         	movff	btemp+11,plusw1
 12605   0111BE                     
 12606                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 12607                           ;stkvar	_mObj @ sp[(-12)+4]
 12608   0111BE  0EF9               	movlw	249
 12609   0111C0  24E1               	addwf	fsr1l,w,c
 12610   0111C2  6ED9               	movwf	fsr2l,c
 12611   0111C4  0EFF               	movlw	255
 12612   0111C6  20E2               	addwfc	fsr1h,w,c
 12613   0111C8  6EDA               	movwf	fsr2h,c
 12614                           
 12615                           ;stkvar	_mask @ sp[(-12)+-3]
 12616   0111CA  0EF1               	movlw	-15
 12617   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 12618   0111D0  0EF2               	movlw	-14
 12619   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 12620   0111D6  CFEE F032          	movff	postinc0,btemp+8
 12621   0111DA  CFEE F033          	movff	postinc0,btemp+9
 12622   0111DE  CFEE F034          	movff	postinc0,btemp+10
 12623   0111E2  CFEE F035          	movff	postinc0,btemp+11
 12624   0111E6  C033  F032         	movff	btemp+9,btemp+8
 12625   0111EA  C034  F033         	movff	btemp+10,btemp+9
 12626   0111EE  C035  F034         	movff	btemp+11,btemp+10
 12627   0111F2  6A35               	clrf	(btemp+11)^0,c
 12628   0111F4  5032               	movf	(btemp+8)^0,w,c
 12629   0111F6  6EDF               	movwf	indf2,c
 12630   0111F8                     
 12631                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 12632                           ;stkvar	_mObj @ sp[(-12)+4]
 12633   0111F8  0EFA               	movlw	250
 12634   0111FA  24E1               	addwf	fsr1l,w,c
 12635   0111FC  6ED9               	movwf	fsr2l,c
 12636   0111FE  0EFF               	movlw	255
 12637   011200  20E2               	addwfc	fsr1h,w,c
 12638   011202  6EDA               	movwf	fsr2h,c
 12639                           
 12640                           ;stkvar	_mask @ sp[(-12)+-3]
 12641   011204  0EF1               	movlw	-15
 12642   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 12643   01120A  0EF2               	movlw	-14
 12644   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 12645   011210  CFEE F032          	movff	postinc0,btemp+8
 12646   011214  CFEE F033          	movff	postinc0,btemp+9
 12647   011218  CFEE F034          	movff	postinc0,btemp+10
 12648   01121C  CFEE F035          	movff	postinc0,btemp+11
 12649   011220  0E11               	movlw	17
 12650   011222  EF18  F089         	goto	u2720
 12651   011226                     u2725:
 12652   011226  90D8               	bcf	status,0,c
 12653   011228  3235               	rrcf	(btemp+11)^0,f,c
 12654   01122A  3234               	rrcf	(btemp+10)^0,f,c
 12655   01122C  3233               	rrcf	(btemp+9)^0,f,c
 12656   01122E  3232               	rrcf	(btemp+8)^0,f,c
 12657   011230                     u2720:
 12658   011230  2EE8               	decfsz	wreg,f,c
 12659   011232  EF13  F089         	goto	u2725
 12660   011236  5032               	movf	(btemp+8)^0,w,c
 12661   011238  6EDF               	movwf	indf2,c
 12662   01123A                     
 12663                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 12664                           ;stkvar	_mObj @ sp[(-12)+4]
 12665   01123A  0EFB               	movlw	251
 12666   01123C  24E1               	addwf	fsr1l,w,c
 12667   01123E  6ED9               	movwf	fsr2l,c
 12668   011240  0EFF               	movlw	255
 12669   011242  20E2               	addwfc	fsr1h,w,c
 12670   011244  6EDA               	movwf	fsr2h,c
 12671                           
 12672                           ;stkvar	_mask @ sp[(-12)+-3]
 12673   011246  0EF1               	movlw	-15
 12674   011248  CFE3 F034          	movff	plusw1,btemp+10
 12675   01124C  0EF2               	movlw	-14
 12676   01124E  CFE3 F035          	movff	plusw1,btemp+11
 12677   011252  0E05               	movlw	5
 12678   011254  2434               	addwf	(btemp+10)^0,w,c
 12679   011256  6EE9               	movwf	fsr0l,c
 12680   011258  0E00               	movlw	0
 12681   01125A  2035               	addwfc	(btemp+11)^0,w,c
 12682   01125C  6EEA               	movwf	fsr0h,c
 12683   01125E  50EF               	movf	indf0,w,c
 12684   011260  6E35               	movwf	(btemp+11)^0,c
 12685   011262  0E06               	movlw	6
 12686   011264  6E2A               	movwf	btemp^0,c
 12687   011266                     u2735:
 12688   011266  90D8               	bcf	status,0,c
 12689   011268  3635               	rlcf	(btemp+11)^0,f,c
 12690   01126A  2E2A               	decfsz	btemp^0,f,c
 12691   01126C  EF33  F089         	goto	u2735
 12692                           
 12693                           ;stkvar	_mask @ sp[(-12)+-3]
 12694   011270  0EF1               	movlw	-15
 12695   011272  CFE3 F032          	movff	plusw1,btemp+8
 12696   011276  0EF2               	movlw	-14
 12697   011278  CFE3 F033          	movff	plusw1,btemp+9
 12698   01127C  0E04               	movlw	4
 12699   01127E  2432               	addwf	(btemp+8)^0,w,c
 12700   011280  6EE9               	movwf	fsr0l,c
 12701   011282  0E00               	movlw	0
 12702   011284  2033               	addwfc	(btemp+9)^0,w,c
 12703   011286  6EEA               	movwf	fsr0h,c
 12704   011288  50EF               	movf	indf0,w,c
 12705   01128A  6E34               	movwf	(btemp+10)^0,c
 12706   01128C  0E05               	movlw	5
 12707   01128E  6E2A               	movwf	btemp^0,c
 12708   011290                     u2745:
 12709   011290  90D8               	bcf	status,0,c
 12710   011292  3634               	rlcf	(btemp+10)^0,f,c
 12711   011294  2E2A               	decfsz	btemp^0,f,c
 12712   011296  EF48  F089         	goto	u2745
 12713                           
 12714                           ;stkvar	_mask @ sp[(-12)+-3]
 12715   01129A  0EF1               	movlw	-15
 12716   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 12717   0112A0  0EF2               	movlw	-14
 12718   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 12719   0112A6  CFEE F02E          	movff	postinc0,btemp+4
 12720   0112AA  CFEE F02F          	movff	postinc0,btemp+5
 12721   0112AE  CFEE F030          	movff	postinc0,btemp+6
 12722   0112B2  CFEE F031          	movff	postinc0,btemp+7
 12723   0112B6  0E19               	movlw	25
 12724   0112B8  EF63  F089         	goto	u2750
 12725   0112BC                     u2755:
 12726   0112BC  90D8               	bcf	status,0,c
 12727   0112BE  3231               	rrcf	(btemp+7)^0,f,c
 12728   0112C0  3230               	rrcf	(btemp+6)^0,f,c
 12729   0112C2  322F               	rrcf	(btemp+5)^0,f,c
 12730   0112C4  322E               	rrcf	(btemp+4)^0,f,c
 12731   0112C6                     u2750:
 12732   0112C6  2EE8               	decfsz	wreg,f,c
 12733   0112C8  EF5E  F089         	goto	u2755
 12734   0112CC  502E               	movf	(btemp+4)^0,w,c
 12735   0112CE  1034               	iorwf	(btemp+10)^0,w,c
 12736   0112D0  1035               	iorwf	(btemp+11)^0,w,c
 12737   0112D2  6EDF               	movwf	indf2,c
 12738                           
 12739                           ;can/can.c: 1053:     }
 12740   0112D4  EF31  F08A         	goto	l5040
 12741   0112D8                     l5028:
 12742                           
 12743                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 12744                           ;stkvar	_mask @ sp[(-12)+-3]
 12745   0112D8  0EF1               	movlw	-15
 12746   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 12747   0112DE  0EF2               	movlw	-14
 12748   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 12749   0112E4  CFDE F032          	movff	postinc2,btemp+8
 12750   0112E8  CFDE F033          	movff	postinc2,btemp+9
 12751   0112EC  CFDE F034          	movff	postinc2,btemp+10
 12752   0112F0  CFDE F035          	movff	postinc2,btemp+11
 12753   0112F4  0E13               	movlw	19
 12754   0112F6  EF82  F089         	goto	u2760
 12755   0112FA                     u2765:
 12756   0112FA  90D8               	bcf	status,0,c
 12757   0112FC  3235               	rrcf	(btemp+11)^0,f,c
 12758   0112FE  3234               	rrcf	(btemp+10)^0,f,c
 12759   011300  3233               	rrcf	(btemp+9)^0,f,c
 12760   011302  3232               	rrcf	(btemp+8)^0,f,c
 12761   011304                     u2760:
 12762   011304  2EE8               	decfsz	wreg,f,c
 12763   011306  EF7D  F089         	goto	u2765
 12764   01130A  0EFF               	movlw	255
 12765   01130C  1432               	andwf	(btemp+8)^0,w,c
 12766   01130E  6E2E               	movwf	(btemp+4)^0,c
 12767   011310  0E07               	movlw	7
 12768   011312  1433               	andwf	(btemp+9)^0,w,c
 12769   011314  6E2F               	movwf	(btemp+5)^0,c
 12770   011316  0E00               	movlw	0
 12771   011318  1434               	andwf	(btemp+10)^0,w,c
 12772   01131A  6E30               	movwf	(btemp+6)^0,c
 12773   01131C  0E00               	movlw	0
 12774   01131E  1435               	andwf	(btemp+11)^0,w,c
 12775   011320  6E31               	movwf	(btemp+7)^0,c
 12776                           
 12777                           ;stkvar	_mask @ sp[(-12)+-3]
 12778   011322  0EF1               	movlw	-15
 12779   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 12780   011328  0EF2               	movlw	-14
 12781   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 12782   01132E  0EFF               	movlw	255
 12783   011330  14DE               	andwf	postinc2,w,c
 12784   011332  6E32               	movwf	(btemp+8)^0,c
 12785   011334  0EFF               	movlw	255
 12786   011336  14DE               	andwf	postinc2,w,c
 12787   011338  6E33               	movwf	(btemp+9)^0,c
 12788   01133A  0E03               	movlw	3
 12789   01133C  14DE               	andwf	postinc2,w,c
 12790   01133E  6E34               	movwf	(btemp+10)^0,c
 12791   011340  0E00               	movlw	0
 12792   011342  14DE               	andwf	postinc2,w,c
 12793   011344  6E35               	movwf	(btemp+11)^0,c
 12794   011346  0E0B               	movlw	11
 12795   011348                     u2775:
 12796   011348  90D8               	bcf	status,0,c
 12797   01134A  3632               	rlcf	(btemp+8)^0,f,c
 12798   01134C  3633               	rlcf	(btemp+9)^0,f,c
 12799   01134E  3634               	rlcf	(btemp+10)^0,f,c
 12800   011350  3635               	rlcf	(btemp+11)^0,f,c
 12801   011352  2EE8               	decfsz	wreg,f,c
 12802   011354  EFA4  F089         	goto	u2775
 12803   011358  502E               	movf	(btemp+4)^0,w,c
 12804   01135A  1032               	iorwf	(btemp+8)^0,w,c
 12805   01135C  6E2A               	movwf	btemp^0,c
 12806   01135E  502F               	movf	(btemp+5)^0,w,c
 12807   011360  1033               	iorwf	(btemp+9)^0,w,c
 12808   011362  6E2B               	movwf	(btemp+1)^0,c
 12809   011364  5030               	movf	(btemp+6)^0,w,c
 12810   011366  1034               	iorwf	(btemp+10)^0,w,c
 12811   011368  6E2C               	movwf	(btemp+2)^0,c
 12812   01136A  5031               	movf	(btemp+7)^0,w,c
 12813   01136C  1035               	iorwf	(btemp+11)^0,w,c
 12814   01136E  6E2D               	movwf	(btemp+3)^0,c
 12815                           
 12816                           ;stkvar	_temp32 @ sp[(-12)+0]
 12817   011370  0EF4               	movlw	-12
 12818   011372  C02A  FFE3         	movff	btemp,plusw1
 12819   011376  0EF5               	movlw	-11
 12820   011378  C02B  FFE3         	movff	btemp+1,plusw1
 12821   01137C  0EF6               	movlw	-10
 12822   01137E  C02C  FFE3         	movff	btemp+2,plusw1
 12823   011382  0EF7               	movlw	-9
 12824   011384  C02D  FFE3         	movff	btemp+3,plusw1
 12825   011388                     
 12826                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 12827                           ;stkvar	_temp32 @ sp[(-12)+0]
 12828   011388  50E1               	movf	fsr1l,w,c
 12829   01138A  0FF4               	addlw	-12
 12830   01138C  6ED9               	movwf	fsr2l,c
 12831   01138E  50E2               	movf	fsr1h,w,c
 12832   011390  6EDA               	movwf	fsr2h,c
 12833   011392  0EFF               	movlw	255
 12834   011394  22DA               	addwfc	fsr2h,f,c
 12835   011396  0EFF               	movlw	255
 12836   011398  16DE               	andwf	postinc2,f,c
 12837   01139A  0EFF               	movlw	255
 12838   01139C  16DE               	andwf	postinc2,f,c
 12839   01139E  0EFF               	movlw	255
 12840   0113A0  16DE               	andwf	postinc2,f,c
 12841   0113A2  0E1F               	movlw	31
 12842   0113A4  16DE               	andwf	postinc2,f,c
 12843   0113A6                     
 12844                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 12845                           ;stkvar	_temp32 @ sp[(-12)+0]
 12846                           ;stkvar	_mObj @ sp[(-12)+4]
 12847   0113A6  0EF4               	movlw	-12
 12848   0113A8  CFE3 F02A          	movff	plusw1,btemp
 12849   0113AC  0EF8               	movlw	-8
 12850   0113AE  C02A  FFE3         	movff	btemp,plusw1
 12851   0113B2                     
 12852                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 12853                           ;stkvar	_temp32 @ sp[(-12)+0]
 12854   0113B2  0EF5               	movlw	245
 12855   0113B4  24E1               	addwf	fsr1l,w,c
 12856   0113B6  6ED9               	movwf	fsr2l,c
 12857   0113B8  0EFF               	movlw	255
 12858   0113BA  20E2               	addwfc	fsr1h,w,c
 12859   0113BC  6EDA               	movwf	fsr2h,c
 12860                           
 12861                           ;stkvar	_mObj @ sp[(-12)+4]
 12862   0113BE  0EF9               	movlw	249
 12863   0113C0  24E1               	addwf	fsr1l,w,c
 12864   0113C2  6EE9               	movwf	fsr0l,c
 12865   0113C4  0EFF               	movlw	255
 12866   0113C6  20E2               	addwfc	fsr1h,w,c
 12867   0113C8  6EEA               	movwf	fsr0h,c
 12868   0113CA  CFDF FFEF          	movff	indf2,indf0
 12869   0113CE                     
 12870                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 12871                           ;stkvar	_temp32 @ sp[(-12)+0]
 12872   0113CE  0EF6               	movlw	246
 12873   0113D0  24E1               	addwf	fsr1l,w,c
 12874   0113D2  6ED9               	movwf	fsr2l,c
 12875   0113D4  0EFF               	movlw	255
 12876   0113D6  20E2               	addwfc	fsr1h,w,c
 12877   0113D8  6EDA               	movwf	fsr2h,c
 12878                           
 12879                           ;stkvar	_mObj @ sp[(-12)+4]
 12880   0113DA  0EFA               	movlw	250
 12881   0113DC  24E1               	addwf	fsr1l,w,c
 12882   0113DE  6EE9               	movwf	fsr0l,c
 12883   0113E0  0EFF               	movlw	255
 12884   0113E2  20E2               	addwfc	fsr1h,w,c
 12885   0113E4  6EEA               	movwf	fsr0h,c
 12886   0113E6  CFDF FFEF          	movff	indf2,indf0
 12887   0113EA                     
 12888                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 12889                           ;stkvar	_mObj @ sp[(-12)+4]
 12890   0113EA  0EFB               	movlw	251
 12891   0113EC  24E1               	addwf	fsr1l,w,c
 12892   0113EE  6ED9               	movwf	fsr2l,c
 12893   0113F0  0EFF               	movlw	255
 12894   0113F2  20E2               	addwfc	fsr1h,w,c
 12895   0113F4  6EDA               	movwf	fsr2h,c
 12896                           
 12897                           ;stkvar	_temp32 @ sp[(-12)+0]
 12898   0113F6  0EF7               	movlw	247
 12899   0113F8  24E1               	addwf	fsr1l,w,c
 12900   0113FA  6EE9               	movwf	fsr0l,c
 12901   0113FC  0EFF               	movlw	255
 12902   0113FE  20E2               	addwfc	fsr1h,w,c
 12903   011400  6EEA               	movwf	fsr0h,c
 12904   011402  50EF               	movf	indf0,w,c
 12905   011404  6E35               	movwf	(btemp+11)^0,c
 12906                           
 12907                           ;stkvar	_mask @ sp[(-12)+-3]
 12908   011406  0EF1               	movlw	-15
 12909   011408  CFE3 F032          	movff	plusw1,btemp+8
 12910   01140C  0EF2               	movlw	-14
 12911   01140E  CFE3 F033          	movff	plusw1,btemp+9
 12912   011412  0E05               	movlw	5
 12913   011414  2432               	addwf	(btemp+8)^0,w,c
 12914   011416  6EE9               	movwf	fsr0l,c
 12915   011418  0E00               	movlw	0
 12916   01141A  2033               	addwfc	(btemp+9)^0,w,c
 12917   01141C  6EEA               	movwf	fsr0h,c
 12918   01141E  50EF               	movf	indf0,w,c
 12919   011420  6E34               	movwf	(btemp+10)^0,c
 12920   011422  0E06               	movlw	6
 12921   011424  6E2A               	movwf	btemp^0,c
 12922   011426                     u2785:
 12923   011426  90D8               	bcf	status,0,c
 12924   011428  3634               	rlcf	(btemp+10)^0,f,c
 12925   01142A  2E2A               	decfsz	btemp^0,f,c
 12926   01142C  EF13  F08A         	goto	u2785
 12927                           
 12928                           ;stkvar	_mask @ sp[(-12)+-3]
 12929   011430  0EF1               	movlw	-15
 12930   011432  CFE3 F032          	movff	plusw1,btemp+8
 12931   011436  0EF2               	movlw	-14
 12932   011438  CFE3 F033          	movff	plusw1,btemp+9
 12933   01143C  0E04               	movlw	4
 12934   01143E  2432               	addwf	(btemp+8)^0,w,c
 12935   011440  6EE9               	movwf	fsr0l,c
 12936   011442  0E00               	movlw	0
 12937   011444  2033               	addwfc	(btemp+9)^0,w,c
 12938   011446  6EEA               	movwf	fsr0h,c
 12939   011448  50EF               	movf	indf0,w,c
 12940   01144A  6E33               	movwf	(btemp+9)^0,c
 12941   01144C  0E05               	movlw	5
 12942   01144E  6E2A               	movwf	btemp^0,c
 12943   011450                     u2795:
 12944   011450  90D8               	bcf	status,0,c
 12945   011452  3633               	rlcf	(btemp+9)^0,f,c
 12946   011454  2E2A               	decfsz	btemp^0,f,c
 12947   011456  EF28  F08A         	goto	u2795
 12948   01145A  5033               	movf	(btemp+9)^0,w,c
 12949   01145C  1034               	iorwf	(btemp+10)^0,w,c
 12950   01145E  1035               	iorwf	(btemp+11)^0,w,c
 12951   011460  6EDF               	movwf	indf2,c
 12952   011462                     l5040:
 12953                           
 12954                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12955                           ;stkvar	_filter @ sp[(-12)+-1]
 12956   011462  0EF3               	movlw	-13
 12957   011464  50E3               	movf	plusw1,w,c
 12958   011466  0D08               	mullw	8
 12959   011468  CFF3 F034          	movff	prodl,btemp+10
 12960   01146C  CFF4 F035          	movff	prodh,btemp+11
 12961   011470  0EF4               	movlw	244
 12962   011472  2434               	addwf	(btemp+10)^0,w,c
 12963   011474  6E32               	movwf	(btemp+8)^0,c
 12964   011476  0E01               	movlw	1
 12965   011478  2035               	addwfc	(btemp+11)^0,w,c
 12966   01147A  6E33               	movwf	(btemp+9)^0,c
 12967                           
 12968                           ;stkvar	_a @ sp[(-12)+10]
 12969   01147C  0EFE               	movlw	-2
 12970   01147E  C032  FFE3         	movff	btemp+8,plusw1
 12971   011482  0EFF               	movlw	-1
 12972   011484  C033  FFE3         	movff	btemp+9,plusw1
 12973   011488                     
 12974                           ;stkvar	_mObj @ sp[(-12)+4]
 12975   011488  0EF8               	movlw	-8
 12976   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12977   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12978   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12979   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12980                           
 12981                           ;stkvar	_a @ sp[(-16)+10]
 12982   01149A  0EFA               	movlw	-6
 12983   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12984   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12985   0114A4  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12986   0114A8                     
 12987                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12988   0114A8  0EF0               	movlw	240
 12989   0114AA  26E1               	addwf	fsr1l,f,c
 12990   0114AC  0EFF               	movlw	255
 12991   0114AE  22E2               	addwfc	fsr1h,f,c
 12992   0114B0  0012               	return		;funcret
 12993   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12994                           	callstack 0
 12995                           
 12996 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12997 ;; Defined at:
 12998 ;;		line 1121 in file "can/can.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  filter          1  [STACK] enum E5322
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  a               2  [STACK] unsigned short 
 13003 ;;  spiTransferE    1  [STACK] char 
 13004 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  1  [STACK] char 
 13007 ;; Registers used:
 13008 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;Total ram usage:        0 bytes
 13019 ;; Hardware stack levels used: 1
 13020 ;; Hardware stack levels required when called: 9
 13021 ;; This function calls:
 13022 ;;		_DRV_CANFDSPI_ReadByte
 13023 ;;		_DRV_CANFDSPI_WriteByte
 13024 ;; This function is called by:
 13025 ;;		_CanSetFilter
 13026 ;; This function uses a reentrant model
 13027 ;;
 13028                           
 13029                           	psect	text46
 13030   014334                     __ptext46:
 13031                           	callstack 0
 13032   014334                     _DRV_CANFDSPI_FilterDisable:
 13033                           	callstack 0
 13034                           
 13035                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13036   014334  52E6               	movf	postinc1,f,c
 13037   014336  52E6               	movf	postinc1,f,c
 13038   014338  52E6               	movf	postinc1,f,c
 13039   01433A  52E6               	movf	postinc1,f,c
 13040   01433C                     
 13041                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 13042                           ;stkvar	_filter @ sp[(-4)+-1]
 13043   01433C  0EFB               	movlw	-5
 13044   01433E  CFE3 F035          	movff	plusw1,btemp+11
 13045   014342  0ED0               	movlw	208
 13046   014344  2435               	addwf	(btemp+11)^0,w,c
 13047   014346  6E32               	movwf	(btemp+8)^0,c
 13048   014348  6A33               	clrf	(btemp+9)^0,c
 13049   01434A  0E01               	movlw	1
 13050   01434C  2233               	addwfc	(btemp+9)^0,f,c
 13051                           
 13052                           ;stkvar	_a @ sp[(-4)+0]
 13053   01434E  0EFC               	movlw	-4
 13054   014350  C032  FFE3         	movff	btemp+8,plusw1
 13055   014354  0EFD               	movlw	-3
 13056   014356  C033  FFE3         	movff	btemp+9,plusw1
 13057   01435A                     
 13058                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 13059                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13060   01435A  0EFF               	movlw	255
 13061   01435C  24E1               	addwf	fsr1l,w,c
 13062   01435E  6E2A               	movwf	btemp^0,c
 13063   014360  0EFF               	movlw	255
 13064   014362  20E2               	addwfc	fsr1h,w,c
 13065   014364  6E2B               	movwf	(btemp+1)^0,c
 13066   014366  C02A  FFE6         	movff	btemp,postinc1
 13067   01436A  C02B  FFE6         	movff	btemp+1,postinc1
 13068                           
 13069                           ;stkvar	_a @ sp[(-6)+0]
 13070   01436E  0EFA               	movlw	-6
 13071   014370  CFE3 FFE6          	movff	plusw1,postinc1
 13072   014374  CFE3 FFE6          	movff	plusw1,postinc1
 13073   014378  EC72  F0A3         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 13074                           
 13075                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 13076   01437C  0EFE               	movlw	-2
 13077   01437E  C02A  FFE3         	movff	btemp,plusw1
 13078   014382                     
 13079                           ;can/can.c: 1131:     if (spiTransferError) {
 13080                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 13081   014382  0EFE               	movlw	-2
 13082   014384  50E3               	movf	plusw1,w,c
 13083   014386  B4D8               	btfsc	status,2,c
 13084   014388  EFC8  F0A1         	goto	u2611
 13085   01438C  EFCA  F0A1         	goto	u2610
 13086   014390                     u2611:
 13087   014390  EFCC  F0A1         	goto	l4974
 13088   014394                     u2610:
 13089   014394  EFDE  F0A1         	goto	l336
 13090   014398                     l4974:
 13091                           
 13092                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 13093                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13094   014398  50E1               	movf	fsr1l,w,c
 13095   01439A  0FFF               	addlw	-1
 13096   01439C  6ED9               	movwf	fsr2l,c
 13097   01439E  50E2               	movf	fsr1h,w,c
 13098   0143A0  6EDA               	movwf	fsr2h,c
 13099   0143A2  0EFF               	movlw	255
 13100   0143A4  22DA               	addwfc	fsr2h,f,c
 13101   0143A6  9EDF               	bcf	indf2,7,c
 13102   0143A8                     
 13103                           ;stkvar	_fCtrl @ sp[(-4)+3]
 13104   0143A8  0EFF               	movlw	-1
 13105   0143AA  50E3               	movf	plusw1,w,c
 13106   0143AC  6EE6               	movwf	postinc1,c
 13107                           
 13108                           ;stkvar	_a @ sp[(-5)+0]
 13109   0143AE  0EFB               	movlw	-5
 13110   0143B0  CFE3 FFE6          	movff	plusw1,postinc1
 13111   0143B4  CFE3 FFE6          	movff	plusw1,postinc1
 13112   0143B8  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 13113   0143BC                     l336:
 13114                           
 13115                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 13116   0143BC  0EFB               	movlw	251
 13117   0143BE  26E1               	addwf	fsr1l,f,c
 13118   0143C0  0EFF               	movlw	255
 13119   0143C2  22E2               	addwfc	fsr1h,f,c
 13120   0143C4  0012               	return		;funcret
 13121   0143C6                     __end_of_DRV_CANFDSPI_FilterDisable:
 13122                           	callstack 0
 13123                           
 13124 ;; *************** function _CanInit *****************
 13125 ;; Defined at:
 13126 ;;		line 156 in file "can/can.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;  bitTime         1  [STACK] enum E5604
 13129 ;;  withISR         1  [STACK] _Bool 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 13132 ;;  config          3  [STACK] struct _CAN_CONFIG
 13133 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 13134 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 13135 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1  [STACK] void 
 13138 ;; Registers used:
 13139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13149 ;;Total ram usage:        0 bytes
 13150 ;; Hardware stack levels used: 1
 13151 ;; Hardware stack levels required when called: 10
 13152 ;; This function calls:
 13153 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 13154 ;;		_DRV_CANFDSPI_Configure
 13155 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 13156 ;;		_DRV_CANFDSPI_ModuleEventEnable
 13157 ;;		_DRV_CANFDSPI_OperationModeSelect
 13158 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 13159 ;;		_DRV_CANFDSPI_Reset
 13160 ;;		_DRV_CANFDSPI_TefConfigure
 13161 ;;		_DRV_CANFDSPI_TimeStampEnable
 13162 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 13163 ;;		_DRV_CANFDSPI_TimeStampSet
 13164 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 13165 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 13166 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 13167 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 13168 ;; This function is called by:
 13169 ;;		_main
 13170 ;; This function uses a reentrant model
 13171 ;;
 13172                           
 13173                           	psect	text47
 13174   0122E6                     __ptext47:
 13175                           	callstack 0
 13176   0122E6                     _CanInit:
 13177                           	callstack 0
 13178                           
 13179                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 13180   0122E6  0E0D               	movlw	13
 13181   0122E8  26E1               	addwf	fsr1l,f,c
 13182   0122EA  0E00               	movlw	0
 13183   0122EC  22E2               	addwfc	fsr1h,f,c
 13184   0122EE                     
 13185                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 13186   0122EE  9898               	bcf	152,4,c	;volatile
 13187                           
 13188                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 13189   0122F0  888F               	bsf	143,4,c	;volatile
 13190   0122F2                     
 13191                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 13192   0122F2  ECF0  F0A4         	call	_DRV_CANFDSPI_Reset	;wreg free
 13193   0122F6                     
 13194                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 13195                           ;stkvar	_bitTime @ sp[(-13)+-1]
 13196   0122F6  0EF2               	movlw	-14
 13197   0122F8  50E3               	movf	plusw1,w,c
 13198   0122FA  6EE6               	movwf	postinc1,c
 13199   0122FC  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 13200   012300                     
 13201                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 13202                           ;stkvar	_config @ sp[(-13)+4]
 13203   012300  0EF7               	movlw	247
 13204   012302  24E1               	addwf	fsr1l,w,c
 13205   012304  6E2A               	movwf	btemp^0,c
 13206   012306  0EFF               	movlw	255
 13207   012308  20E2               	addwfc	fsr1h,w,c
 13208   01230A  6E2B               	movwf	(btemp+1)^0,c
 13209   01230C  C02A  FFE6         	movff	btemp,postinc1
 13210   012310  C02B  FFE6         	movff	btemp+1,postinc1
 13211   012314  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 13212   012318                     
 13213                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 13214                           ;stkvar	_config @ sp[(-13)+4]
 13215   012318  50E1               	movf	fsr1l,w,c
 13216   01231A  0FF7               	addlw	-9
 13217   01231C  6ED9               	movwf	fsr2l,c
 13218   01231E  50E2               	movf	fsr1h,w,c
 13219   012320  6EDA               	movwf	fsr2h,c
 13220   012322  0EFF               	movlw	255
 13221   012324  22DA               	addwfc	fsr2h,f,c
 13222   012326  8ADF               	bsf	indf2,5,c
 13223   012328                     
 13224                           ;can/can.c: 166:     config.StoreInTEF = 1;
 13225                           ;stkvar	_config @ sp[(-13)+4]
 13226   012328  0EF8               	movlw	248
 13227   01232A  24E1               	addwf	fsr1l,w,c
 13228   01232C  6ED9               	movwf	fsr2l,c
 13229   01232E  0EFF               	movlw	255
 13230   012330  20E2               	addwfc	fsr1h,w,c
 13231   012332  6EDA               	movwf	fsr2h,c
 13232   012334  8CDF               	bsf	indf2,6,c
 13233   012336                     
 13234                           ;can/can.c: 167:     config.TXQEnable = 1;
 13235                           ;stkvar	_config @ sp[(-13)+4]
 13236   012336  0EF8               	movlw	248
 13237   012338  24E1               	addwf	fsr1l,w,c
 13238   01233A  6ED9               	movwf	fsr2l,c
 13239   01233C  0EFF               	movlw	255
 13240   01233E  20E2               	addwfc	fsr1h,w,c
 13241   012340  6EDA               	movwf	fsr2h,c
 13242   012342  8EDF               	bsf	indf2,7,c
 13243   012344                     
 13244                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 13245                           ;stkvar	_config @ sp[(-13)+4]
 13246   012344  0EF7               	movlw	247
 13247   012346  24E1               	addwf	fsr1l,w,c
 13248   012348  6E2A               	movwf	btemp^0,c
 13249   01234A  0EFF               	movlw	255
 13250   01234C  20E2               	addwfc	fsr1h,w,c
 13251   01234E  6E2B               	movwf	(btemp+1)^0,c
 13252   012350  C02A  FFE6         	movff	btemp,postinc1
 13253   012354  C02B  FFE6         	movff	btemp+1,postinc1
 13254   012358  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 13255   01235C                     
 13256                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 13257                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13258   01235C  50E1               	movf	fsr1l,w,c
 13259   01235E  0FFF               	addlw	-1
 13260   012360  6ED9               	movwf	fsr2l,c
 13261   012362  50E2               	movf	fsr1h,w,c
 13262   012364  6EDA               	movwf	fsr2h,c
 13263   012366  0EFF               	movlw	255
 13264   012368  22DA               	addwfc	fsr2h,f,c
 13265   01236A  50DF               	movf	223,w,c
 13266   01236C  0BC1               	andlw	-63
 13267   01236E  0916               	iorlw	22
 13268   012370  6EDF               	movwf	223,c
 13269   012372                     
 13270                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 13271                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13272   012372  50E1               	movf	fsr1l,w,c
 13273   012374  0FFF               	addlw	-1
 13274   012376  6ED9               	movwf	fsr2l,c
 13275   012378  50E2               	movf	fsr1h,w,c
 13276   01237A  6EDA               	movwf	fsr2h,c
 13277   01237C  0EFF               	movlw	255
 13278   01237E  22DA               	addwfc	fsr2h,f,c
 13279   012380  80DF               	bsf	indf2,0,c
 13280   012382                     
 13281                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 13282                           ;stkvar	_tefConfig @ sp[(-13)+12]
 13283   012382  0EFF               	movlw	255
 13284   012384  24E1               	addwf	fsr1l,w,c
 13285   012386  6E2A               	movwf	btemp^0,c
 13286   012388  0EFF               	movlw	255
 13287   01238A  20E2               	addwfc	fsr1h,w,c
 13288   01238C  6E2B               	movwf	(btemp+1)^0,c
 13289   01238E  C02A  FFE6         	movff	btemp,postinc1
 13290   012392  C02B  FFE6         	movff	btemp+1,postinc1
 13291   012396  EC9D  F09E         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 13292   01239A                     
 13293                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 13294                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13295   01239A  0EF3               	movlw	243
 13296   01239C  24E1               	addwf	fsr1l,w,c
 13297   01239E  6E2A               	movwf	btemp^0,c
 13298   0123A0  0EFF               	movlw	255
 13299   0123A2  20E2               	addwfc	fsr1h,w,c
 13300   0123A4  6E2B               	movwf	(btemp+1)^0,c
 13301   0123A6  C02A  FFE6         	movff	btemp,postinc1
 13302   0123AA  C02B  FFE6         	movff	btemp+1,postinc1
 13303   0123AE  EC42  F09B         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 13304   0123B2                     
 13305                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 13306                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13307   0123B2  0EF3               	movlw	-13
 13308   0123B4  6AE3               	clrf	plusw1,c
 13309   0123B6  2AE3               	incf	plusw1,f,c
 13310   0123B8                     
 13311                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 13312                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13313   0123B8  0EF5               	movlw	245
 13314   0123BA  24E1               	addwf	fsr1l,w,c
 13315   0123BC  6ED9               	movwf	fsr2l,c
 13316   0123BE  0EFF               	movlw	255
 13317   0123C0  20E2               	addwfc	fsr1h,w,c
 13318   0123C2  6EDA               	movwf	fsr2h,c
 13319   0123C4  0E07               	movlw	7
 13320   0123C6  6EDF               	movwf	indf2,c
 13321   0123C8                     
 13322                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 13323                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13324   0123C8  0EF6               	movlw	246
 13325   0123CA  24E1               	addwf	fsr1l,w,c
 13326   0123CC  6ED9               	movwf	fsr2l,c
 13327   0123CE  0EFF               	movlw	255
 13328   0123D0  20E2               	addwfc	fsr1h,w,c
 13329   0123D2  6EDA               	movwf	fsr2h,c
 13330   0123D4  0E05               	movlw	5
 13331   0123D6  6EDF               	movwf	indf2,c
 13332   0123D8                     
 13333                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 13334                           ;stkvar	_txqConfig @ sp[(-13)+0]
 13335   0123D8  0EF3               	movlw	243
 13336   0123DA  24E1               	addwf	fsr1l,w,c
 13337   0123DC  6E2A               	movwf	btemp^0,c
 13338   0123DE  0EFF               	movlw	255
 13339   0123E0  20E2               	addwfc	fsr1h,w,c
 13340   0123E2  6E2B               	movwf	(btemp+1)^0,c
 13341   0123E4  C02A  FFE6         	movff	btemp,postinc1
 13342   0123E8  C02B  FFE6         	movff	btemp+1,postinc1
 13343   0123EC  EC74  F098         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 13344   0123F0                     
 13345                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 13346                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13347   0123F0  0EFD               	movlw	253
 13348   0123F2  24E1               	addwf	fsr1l,w,c
 13349   0123F4  6E2A               	movwf	btemp^0,c
 13350   0123F6  0EFF               	movlw	255
 13351   0123F8  20E2               	addwfc	fsr1h,w,c
 13352   0123FA  6E2B               	movwf	(btemp+1)^0,c
 13353   0123FC  C02A  FFE6         	movff	btemp,postinc1
 13354   012400  C02B  FFE6         	movff	btemp+1,postinc1
 13355   012404  EC14  F099         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 13356   012408                     
 13357                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 13358                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13359   012408  0EFE               	movlw	254
 13360   01240A  24E1               	addwf	fsr1l,w,c
 13361   01240C  6ED9               	movwf	fsr2l,c
 13362   01240E  0EFF               	movlw	255
 13363   012410  20E2               	addwfc	fsr1h,w,c
 13364   012412  6EDA               	movwf	fsr2h,c
 13365   012414  50DF               	movf	223,w,c
 13366   012416  0BE0               	andlw	-32
 13367   012418  0904               	iorlw	4
 13368   01241A  6EDF               	movwf	223,c
 13369   01241C                     
 13370                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 13371                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13372   01241C  0EFE               	movlw	254
 13373   01241E  24E1               	addwf	fsr1l,w,c
 13374   012420  6ED9               	movwf	fsr2l,c
 13375   012422  0EFF               	movlw	255
 13376   012424  20E2               	addwfc	fsr1h,w,c
 13377   012426  6EDA               	movwf	fsr2h,c
 13378   012428  0EE0               	movlw	224
 13379   01242A  12DF               	iorwf	223,f,c
 13380   01242C                     
 13381                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 13382                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13383   01242C  50E1               	movf	fsr1l,w,c
 13384   01242E  0FFD               	addlw	-3
 13385   012430  6ED9               	movwf	fsr2l,c
 13386   012432  50E2               	movf	fsr1h,w,c
 13387   012434  6EDA               	movwf	fsr2h,c
 13388   012436  0EFF               	movlw	255
 13389   012438  22DA               	addwfc	fsr2h,f,c
 13390   01243A  0EC1               	movlw	-63
 13391   01243C  16DF               	andwf	223,f,c
 13392   01243E                     
 13393                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 13394                           ;stkvar	_txfConfig @ sp[(-13)+10]
 13395   01243E  0EFD               	movlw	253
 13396   012440  24E1               	addwf	fsr1l,w,c
 13397   012442  6E2A               	movwf	btemp^0,c
 13398   012444  0EFF               	movlw	255
 13399   012446  20E2               	addwfc	fsr1h,w,c
 13400   012448  6E2B               	movwf	(btemp+1)^0,c
 13401   01244A  C02A  FFE6         	movff	btemp,postinc1
 13402   01244E  C02B  FFE6         	movff	btemp+1,postinc1
 13403   012452  0E01               	movlw	1
 13404   012454  6EE6               	movwf	postinc1,c
 13405   012456  EC03  F095         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 13406   01245A                     
 13407                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 13408                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13409   01245A  0EFB               	movlw	251
 13410   01245C  24E1               	addwf	fsr1l,w,c
 13411   01245E  6ED9               	movwf	fsr2l,c
 13412   012460  0EFF               	movlw	255
 13413   012462  20E2               	addwfc	fsr1h,w,c
 13414   012464  6EDA               	movwf	fsr2h,c
 13415   012466  0E0F               	movlw	15
 13416   012468  6EDF               	movwf	indf2,c
 13417   01246A                     
 13418                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 13419                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13420   01246A  0EFC               	movlw	252
 13421   01246C  24E1               	addwf	fsr1l,w,c
 13422   01246E  6ED9               	movwf	fsr2l,c
 13423   012470  0EFF               	movlw	255
 13424   012472  20E2               	addwfc	fsr1h,w,c
 13425   012474  6EDA               	movwf	fsr2h,c
 13426   012476  0E07               	movlw	7
 13427   012478  6EDF               	movwf	indf2,c
 13428   01247A                     
 13429                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 13430                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13431   01247A  0EFA               	movlw	-6
 13432   01247C  6AE3               	clrf	plusw1,c
 13433   01247E  2AE3               	incf	plusw1,f,c
 13434   012480                     
 13435                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 13436                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 13437   012480  0EFA               	movlw	250
 13438   012482  24E1               	addwf	fsr1l,w,c
 13439   012484  6E2A               	movwf	btemp^0,c
 13440   012486  0EFF               	movlw	255
 13441   012488  20E2               	addwfc	fsr1h,w,c
 13442   01248A  6E2B               	movwf	(btemp+1)^0,c
 13443   01248C  C02A  FFE6         	movff	btemp,postinc1
 13444   012490  C02B  FFE6         	movff	btemp+1,postinc1
 13445   012494  0E02               	movlw	2
 13446   012496  6EE6               	movwf	postinc1,c
 13447   012498  ECD3  F097         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 13448   01249C                     
 13449                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 13450   01249C  0E27               	movlw	39
 13451   01249E  6EE6               	movwf	postinc1,c
 13452   0124A0  0E00               	movlw	0
 13453   0124A2  6EE6               	movwf	postinc1,c
 13454   0124A4  EC3E  F0A5         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 13455   0124A8                     
 13456                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 13457   0124A8  0E00               	movlw	0
 13458   0124AA  6EE6               	movwf	postinc1,c
 13459   0124AC  0E00               	movlw	0
 13460   0124AE  6EE6               	movwf	postinc1,c
 13461   0124B0  0E00               	movlw	0
 13462   0124B2  6EE6               	movwf	postinc1,c
 13463   0124B4  0E00               	movlw	0
 13464   0124B6  6EE6               	movwf	postinc1,c
 13465   0124B8  EC06  F0A5         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 13466   0124BC                     
 13467                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 13468   0124BC  ECA3  F0A3         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 13469   0124C0                     
 13470                           ;can/can.c: 209:     if(withISR == 1)
 13471                           ;stkvar	_withISR @ sp[(-13)+-2]
 13472   0124C0  0EF1               	movlw	-15
 13473   0124C2  04E3               	decf	plusw1,w,c
 13474   0124C4  A4D8               	btfss	status,2,c
 13475   0124C6  EF67  F092         	goto	u3061
 13476   0124CA  EF69  F092         	goto	u3060
 13477   0124CE                     u3061:
 13478   0124CE  EF71  F092         	goto	l5312
 13479   0124D2                     u3060:
 13480   0124D2                     
 13481                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 13482   0124D2  0E02               	movlw	2
 13483   0124D4  6EE6               	movwf	postinc1,c
 13484   0124D6  0E00               	movlw	0
 13485   0124D8  6EE6               	movwf	postinc1,c
 13486   0124DA  0E00               	movlw	0
 13487   0124DC  6EE6               	movwf	postinc1,c
 13488   0124DE  EC0F  F0A3         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 13489   0124E2                     l5312:
 13490                           
 13491                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 13492   0124E2  0E06               	movlw	6
 13493   0124E4  6EE6               	movwf	postinc1,c
 13494   0124E6  EC2B  F0A2         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 13495   0124EA                     
 13496                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 13497   0124EA  0EF1               	movlw	241
 13498   0124EC  26E1               	addwf	fsr1l,f,c
 13499   0124EE  0EFF               	movlw	255
 13500   0124F0  22E2               	addwfc	fsr1h,f,c
 13501   0124F2  0012               	return		;funcret
 13502   0124F4                     __end_of_CanInit:
 13503                           	callstack 0
 13504                           
 13505 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 13506 ;; Defined at:
 13507 ;;		line 693 in file "can/can.c"
 13508 ;; Parameters:    Size  Location     Type
 13509 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13510 ;;		 -> txqConfig(4), 
 13511 ;; Auto vars:     Size  Location     Type
 13512 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13513 ;; Return value:  Size  Location     Type
 13514 ;;                  1  [STACK] char 
 13515 ;; Registers used:
 13516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13517 ;; Tracked objects:
 13518 ;;		On entry : 0/0
 13519 ;;		On exit  : 0/0
 13520 ;;		Unchanged: 0/0
 13521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;Total ram usage:        0 bytes
 13527 ;; Hardware stack levels used: 1
 13528 ;; Hardware stack levels required when called: 7
 13529 ;; This function calls:
 13530 ;;		Nothing
 13531 ;; This function is called by:
 13532 ;;		_CanInit
 13533 ;; This function uses a reentrant model
 13534 ;;
 13535                           
 13536                           	psect	text48
 13537   013684                     __ptext48:
 13538                           	callstack 0
 13539   013684                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13540                           	callstack 0
 13541                           
 13542                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13543   013684  0E05               	movlw	5
 13544   013686  26E1               	addwf	fsr1l,f,c
 13545   013688  0E00               	movlw	0
 13546   01368A  22E2               	addwfc	fsr1h,f,c
 13547   01368C                     
 13548                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 13549   01368C  0EDD               	movlw	low _canFifoResetValues
 13550   01368E  6EF6               	movwf	tblptrl,c
 13551   013690                     	if	1	;There is more than 1 active tblptr byte
 13552   013690  0EFF               	movlw	high _canFifoResetValues
 13553   013692  6EF7               	movwf	tblptrh,c
 13554   013694                     	endif
 13555   013694                     	if	1	;There are 3 active tblptr bytes
 13556   013694  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13557   013696  6EF8               	movwf	tblptru,c
 13558   013698                     	endif
 13559   013698  0009               	tblrd		*+
 13560   01369A  CFF5 F032          	movff	tablat,btemp+8
 13561   01369E  0009               	tblrd		*+
 13562   0136A0  CFF5 F033          	movff	tablat,btemp+9
 13563   0136A4  0009               	tblrd		*+
 13564   0136A6  CFF5 F034          	movff	tablat,btemp+10
 13565   0136AA  0009               	tblrd		*+
 13566   0136AC  CFF5 F035          	movff	tablat,btemp+11
 13567                           
 13568                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13569   0136B0  0EFB               	movlw	-5
 13570   0136B2  C032  FFE3         	movff	btemp+8,plusw1
 13571   0136B6  0EFC               	movlw	-4
 13572   0136B8  C033  FFE3         	movff	btemp+9,plusw1
 13573   0136BC  0EFD               	movlw	-3
 13574   0136BE  C034  FFE3         	movff	btemp+10,plusw1
 13575   0136C2  0EFE               	movlw	-2
 13576   0136C4  C035  FFE3         	movff	btemp+11,plusw1
 13577   0136C8                     
 13578                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13579                           ;stkvar	_config @ sp[(-5)+-2]
 13580   0136C8  0EF9               	movlw	-7
 13581   0136CA  CFE3 FFD9          	movff	plusw1,fsr2l
 13582   0136CE  0EFA               	movlw	-6
 13583   0136D0  CFE3 FFDA          	movff	plusw1,fsr2h
 13584                           
 13585                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13586   0136D4  0EFD               	movlw	253
 13587   0136D6  24E1               	addwf	fsr1l,w,c
 13588   0136D8  6EE9               	movwf	fsr0l,c
 13589   0136DA  0EFF               	movlw	255
 13590   0136DC  20E2               	addwfc	fsr1h,w,c
 13591   0136DE  6EEA               	movwf	fsr0h,c
 13592   0136E0  50EF               	movf	239,w,c
 13593   0136E2  0B1F               	andlw	31
 13594   0136E4  6EDF               	movwf	indf2,c
 13595   0136E6                     
 13596                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13597                           ;stkvar	_config @ sp[(-5)+-2]
 13598   0136E6  0EF9               	movlw	-7
 13599   0136E8  CFE3 F034          	movff	plusw1,btemp+10
 13600   0136EC  0EFA               	movlw	-6
 13601   0136EE  CFE3 F035          	movff	plusw1,btemp+11
 13602   0136F2  0E01               	movlw	1
 13603   0136F4  2434               	addwf	(btemp+10)^0,w,c
 13604   0136F6  6ED9               	movwf	fsr2l,c
 13605   0136F8  0E00               	movlw	0
 13606   0136FA  2035               	addwfc	(btemp+11)^0,w,c
 13607   0136FC  6EDA               	movwf	fsr2h,c
 13608                           
 13609                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13610   0136FE  0EFD               	movlw	253
 13611   013700  24E1               	addwf	fsr1l,w,c
 13612   013702  6EE9               	movwf	fsr0l,c
 13613   013704  0EFF               	movlw	255
 13614   013706  20E2               	addwfc	fsr1h,w,c
 13615   013708  6EEA               	movwf	fsr0h,c
 13616   01370A  38EF               	swapf	239,w,c
 13617   01370C  32E8               	rrcf	wreg,f,c
 13618   01370E  0B03               	andlw	3
 13619   013710  6EDF               	movwf	indf2,c
 13620   013712                     
 13621                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13622                           ;stkvar	_config @ sp[(-5)+-2]
 13623   013712  0EF9               	movlw	-7
 13624   013714  CFE3 F034          	movff	plusw1,btemp+10
 13625   013718  0EFA               	movlw	-6
 13626   01371A  CFE3 F035          	movff	plusw1,btemp+11
 13627   01371E  0E02               	movlw	2
 13628   013720  2434               	addwf	(btemp+10)^0,w,c
 13629   013722  6ED9               	movwf	fsr2l,c
 13630   013724  0E00               	movlw	0
 13631   013726  2035               	addwfc	(btemp+11)^0,w,c
 13632   013728  6EDA               	movwf	fsr2h,c
 13633                           
 13634                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13635   01372A  0EFE               	movlw	254
 13636   01372C  24E1               	addwf	fsr1l,w,c
 13637   01372E  6EE9               	movwf	fsr0l,c
 13638   013730  0EFF               	movlw	255
 13639   013732  20E2               	addwfc	fsr1h,w,c
 13640   013734  6EEA               	movwf	fsr0h,c
 13641   013736  50EF               	movf	239,w,c
 13642   013738  0B1F               	andlw	31
 13643   01373A  6EDF               	movwf	indf2,c
 13644   01373C                     
 13645                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13646                           ;stkvar	_config @ sp[(-5)+-2]
 13647   01373C  0EF9               	movlw	-7
 13648   01373E  CFE3 F034          	movff	plusw1,btemp+10
 13649   013742  0EFA               	movlw	-6
 13650   013744  CFE3 F035          	movff	plusw1,btemp+11
 13651   013748  0E03               	movlw	3
 13652   01374A  2434               	addwf	(btemp+10)^0,w,c
 13653   01374C  6ED9               	movwf	fsr2l,c
 13654   01374E  0E00               	movlw	0
 13655   013750  2035               	addwfc	(btemp+11)^0,w,c
 13656   013752  6EDA               	movwf	fsr2h,c
 13657                           
 13658                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13659   013754  0EFE               	movlw	254
 13660   013756  24E1               	addwf	fsr1l,w,c
 13661   013758  6EE9               	movwf	fsr0l,c
 13662   01375A  0EFF               	movlw	255
 13663   01375C  20E2               	addwfc	fsr1h,w,c
 13664   01375E  6EEA               	movwf	fsr0h,c
 13665   013760  38EF               	swapf	239,w,c
 13666   013762  32E8               	rrcf	wreg,f,c
 13667   013764  0B07               	andlw	7
 13668   013766  6EDF               	movwf	indf2,c
 13669   013768                     
 13670                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13671   013768  0EF9               	movlw	249
 13672   01376A  26E1               	addwf	fsr1l,f,c
 13673   01376C  0EFF               	movlw	255
 13674   01376E  22E2               	addwfc	fsr1h,f,c
 13675   013770  0012               	return		;funcret
 13676   013772                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 13677                           	callstack 0
 13678                           
 13679 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 13680 ;; Defined at:
 13681 ;;		line 671 in file "can/can.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 13684 ;;		 -> txqConfig(4), 
 13685 ;; Auto vars:     Size  Location     Type
 13686 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 13687 ;;  a               2    0        unsigned short 
 13688 ;;  spiTransferE    1    0        char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1  [STACK] char 
 13691 ;; Registers used:
 13692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;Total ram usage:        0 bytes
 13703 ;; Hardware stack levels used: 1
 13704 ;; Hardware stack levels required when called: 9
 13705 ;; This function calls:
 13706 ;;		_DRV_CANFDSPI_WriteWord
 13707 ;; This function is called by:
 13708 ;;		_CanInit
 13709 ;; This function uses a reentrant model
 13710 ;;
 13711                           
 13712                           	psect	text49
 13713   0130E8                     __ptext49:
 13714                           	callstack 0
 13715   0130E8                     _DRV_CANFDSPI_TransmitQueueConfigure:
 13716                           	callstack 0
 13717                           
 13718                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13719   0130E8  52E6               	movf	postinc1,f,c
 13720   0130EA  52E6               	movf	postinc1,f,c
 13721   0130EC  52E6               	movf	postinc1,f,c
 13722   0130EE  52E6               	movf	postinc1,f,c
 13723   0130F0                     
 13724                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 13725   0130F0  0EDD               	movlw	low _canFifoResetValues
 13726   0130F2  6EF6               	movwf	tblptrl,c
 13727   0130F4                     	if	1	;There is more than 1 active tblptr byte
 13728   0130F4  0EFF               	movlw	high _canFifoResetValues
 13729   0130F6  6EF7               	movwf	tblptrh,c
 13730   0130F8                     	endif
 13731   0130F8                     	if	1	;There are 3 active tblptr bytes
 13732   0130F8  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13733   0130FA  6EF8               	movwf	tblptru,c
 13734   0130FC                     	endif
 13735   0130FC  0009               	tblrd		*+
 13736   0130FE  CFF5 F032          	movff	tablat,btemp+8
 13737   013102  0009               	tblrd		*+
 13738   013104  CFF5 F033          	movff	tablat,btemp+9
 13739   013108  0009               	tblrd		*+
 13740   01310A  CFF5 F034          	movff	tablat,btemp+10
 13741   01310E  0009               	tblrd		*+
 13742   013110  CFF5 F035          	movff	tablat,btemp+11
 13743                           
 13744                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13745   013114  0EFC               	movlw	-4
 13746   013116  C032  FFE3         	movff	btemp+8,plusw1
 13747   01311A  0EFD               	movlw	-3
 13748   01311C  C033  FFE3         	movff	btemp+9,plusw1
 13749   013120  0EFE               	movlw	-2
 13750   013122  C034  FFE3         	movff	btemp+10,plusw1
 13751   013126  0EFF               	movlw	-1
 13752   013128  C035  FFE3         	movff	btemp+11,plusw1
 13753   01312C                     
 13754                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 13755                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13756   01312C  50E1               	movf	fsr1l,w,c
 13757   01312E  0FFC               	addlw	-4
 13758   013130  6ED9               	movwf	fsr2l,c
 13759   013132  50E2               	movf	fsr1h,w,c
 13760   013134  6EDA               	movwf	fsr2h,c
 13761   013136  0EFF               	movlw	255
 13762   013138  22DA               	addwfc	fsr2h,f,c
 13763   01313A  8EDF               	bsf	indf2,7,c
 13764   01313C                     
 13765                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13766                           ;stkvar	_config @ sp[(-4)+-2]
 13767   01313C  0EFA               	movlw	-6
 13768   01313E  CFE3 F034          	movff	plusw1,btemp+10
 13769   013142  0EFB               	movlw	-5
 13770   013144  CFE3 F035          	movff	plusw1,btemp+11
 13771   013148  0E02               	movlw	2
 13772   01314A  2434               	addwf	(btemp+10)^0,w,c
 13773   01314C  6ED9               	movwf	fsr2l,c
 13774   01314E  0E00               	movlw	0
 13775   013150  2035               	addwfc	(btemp+11)^0,w,c
 13776   013152  6EDA               	movwf	fsr2h,c
 13777   013154  50DF               	movf	indf2,w,c
 13778   013156  6E35               	movwf	(btemp+11)^0,c
 13779                           
 13780                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13781   013158  0EFF               	movlw	255
 13782   01315A  24E1               	addwf	fsr1l,w,c
 13783   01315C  6ED9               	movwf	fsr2l,c
 13784   01315E  0EFF               	movlw	255
 13785   013160  20E2               	addwfc	fsr1h,w,c
 13786   013162  6EDA               	movwf	fsr2h,c
 13787   013164  50DF               	movf	223,w,c
 13788   013166  1835               	xorwf	(btemp+11)^0,w,c
 13789   013168  0BE0               	andlw	-32
 13790   01316A  1835               	xorwf	(btemp+11)^0,w,c
 13791   01316C  6EDF               	movwf	223,c
 13792   01316E                     
 13793                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13794                           ;stkvar	_config @ sp[(-4)+-2]
 13795   01316E  0EFA               	movlw	-6
 13796   013170  CFE3 F034          	movff	plusw1,btemp+10
 13797   013174  0EFB               	movlw	-5
 13798   013176  CFE3 F035          	movff	plusw1,btemp+11
 13799   01317A  0E03               	movlw	3
 13800   01317C  2434               	addwf	(btemp+10)^0,w,c
 13801   01317E  6ED9               	movwf	fsr2l,c
 13802   013180  0E00               	movlw	0
 13803   013182  2035               	addwfc	(btemp+11)^0,w,c
 13804   013184  6EDA               	movwf	fsr2h,c
 13805   013186  50DF               	movf	indf2,w,c
 13806   013188  6E35               	movwf	(btemp+11)^0,c
 13807                           
 13808                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13809   01318A  0EFF               	movlw	255
 13810   01318C  24E1               	addwf	fsr1l,w,c
 13811   01318E  6ED9               	movwf	fsr2l,c
 13812   013190  0EFF               	movlw	255
 13813   013192  20E2               	addwfc	fsr1h,w,c
 13814   013194  6EDA               	movwf	fsr2h,c
 13815   013196  3A35               	swapf	(btemp+11)^0,f,c
 13816   013198  4635               	rlncf	(btemp+11)^0,f,c
 13817   01319A  50DF               	movf	223,w,c
 13818   01319C  1835               	xorwf	(btemp+11)^0,w,c
 13819   01319E  0B1F               	andlw	-225
 13820   0131A0  1835               	xorwf	(btemp+11)^0,w,c
 13821   0131A2  6EDF               	movwf	223,c
 13822   0131A4                     
 13823                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13824                           ;stkvar	_config @ sp[(-4)+-2]
 13825   0131A4  0EFA               	movlw	-6
 13826   0131A6  CFE3 F034          	movff	plusw1,btemp+10
 13827   0131AA  0EFB               	movlw	-5
 13828   0131AC  CFE3 F035          	movff	plusw1,btemp+11
 13829   0131B0  0E01               	movlw	1
 13830   0131B2  2434               	addwf	(btemp+10)^0,w,c
 13831   0131B4  6ED9               	movwf	fsr2l,c
 13832   0131B6  0E00               	movlw	0
 13833   0131B8  2035               	addwfc	(btemp+11)^0,w,c
 13834   0131BA  6EDA               	movwf	fsr2h,c
 13835   0131BC  50DF               	movf	indf2,w,c
 13836   0131BE  6E35               	movwf	(btemp+11)^0,c
 13837                           
 13838                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13839   0131C0  0EFE               	movlw	254
 13840   0131C2  24E1               	addwf	fsr1l,w,c
 13841   0131C4  6ED9               	movwf	fsr2l,c
 13842   0131C6  0EFF               	movlw	255
 13843   0131C8  20E2               	addwfc	fsr1h,w,c
 13844   0131CA  6EDA               	movwf	fsr2h,c
 13845   0131CC  3A35               	swapf	(btemp+11)^0,f,c
 13846   0131CE  4635               	rlncf	(btemp+11)^0,f,c
 13847   0131D0  50DF               	movf	223,w,c
 13848   0131D2  1835               	xorwf	(btemp+11)^0,w,c
 13849   0131D4  0B9F               	andlw	-97
 13850   0131D6  1835               	xorwf	(btemp+11)^0,w,c
 13851   0131D8  6EDF               	movwf	223,c
 13852   0131DA                     
 13853                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13854                           ;stkvar	_config @ sp[(-4)+-2]
 13855   0131DA  0EFA               	movlw	-6
 13856   0131DC  CFE3 FFD9          	movff	plusw1,fsr2l
 13857   0131E0  0EFB               	movlw	-5
 13858   0131E2  CFE3 FFDA          	movff	plusw1,fsr2h
 13859   0131E6  50DF               	movf	indf2,w,c
 13860   0131E8  6E35               	movwf	(btemp+11)^0,c
 13861                           
 13862                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13863   0131EA  0EFE               	movlw	254
 13864   0131EC  24E1               	addwf	fsr1l,w,c
 13865   0131EE  6ED9               	movwf	fsr2l,c
 13866   0131F0  0EFF               	movlw	255
 13867   0131F2  20E2               	addwfc	fsr1h,w,c
 13868   0131F4  6EDA               	movwf	fsr2h,c
 13869   0131F6  50DF               	movf	223,w,c
 13870   0131F8  1835               	xorwf	(btemp+11)^0,w,c
 13871   0131FA  0BE0               	andlw	-32
 13872   0131FC  1835               	xorwf	(btemp+11)^0,w,c
 13873   0131FE  6EDF               	movwf	223,c
 13874   013200                     
 13875                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 13876   013200  0EFC               	movlw	-4
 13877   013202  CFE3 FFE6          	movff	plusw1,postinc1
 13878   013206  CFE3 FFE6          	movff	plusw1,postinc1
 13879   01320A  CFE3 FFE6          	movff	plusw1,postinc1
 13880   01320E  CFE3 FFE6          	movff	plusw1,postinc1
 13881   013212  0E50               	movlw	80
 13882   013214  6EE6               	movwf	postinc1,c
 13883   013216  0E00               	movlw	0
 13884   013218  6EE6               	movwf	postinc1,c
 13885   01321A  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13886   01321E                     
 13887                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 13888   01321E  0EFA               	movlw	250
 13889   013220  26E1               	addwf	fsr1l,f,c
 13890   013222  0EFF               	movlw	255
 13891   013224  22E2               	addwfc	fsr1h,f,c
 13892   013226  0012               	return		;funcret
 13893   013228                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 13894                           	callstack 0
 13895                           
 13896 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 13897 ;; Defined at:
 13898 ;;		line 657 in file "can/can.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13901 ;;		 -> txfConfig(2), 
 13902 ;; Auto vars:     Size  Location     Type
 13903 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13904 ;; Return value:  Size  Location     Type
 13905 ;;                  1  [STACK] char 
 13906 ;; Registers used:
 13907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 13908 ;; Tracked objects:
 13909 ;;		On entry : 0/0
 13910 ;;		On exit  : 0/0
 13911 ;;		Unchanged: 0/0
 13912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13917 ;;Total ram usage:        0 bytes
 13918 ;; Hardware stack levels used: 1
 13919 ;; Hardware stack levels required when called: 7
 13920 ;; This function calls:
 13921 ;;		Nothing
 13922 ;; This function is called by:
 13923 ;;		_CanInit
 13924 ;; This function uses a reentrant model
 13925 ;;
 13926                           
 13927                           	psect	text50
 13928   013228                     __ptext50:
 13929                           	callstack 0
 13930   013228                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13931                           	callstack 0
 13932                           
 13933                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13934   013228  0E05               	movlw	5
 13935   01322A  26E1               	addwf	fsr1l,f,c
 13936   01322C  0E00               	movlw	0
 13937   01322E  22E2               	addwfc	fsr1h,f,c
 13938   013230                     
 13939                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13940   013230  0EDD               	movlw	low _canFifoResetValues
 13941   013232  6EF6               	movwf	tblptrl,c
 13942   013234                     	if	1	;There is more than 1 active tblptr byte
 13943   013234  0EFF               	movlw	high _canFifoResetValues
 13944   013236  6EF7               	movwf	tblptrh,c
 13945   013238                     	endif
 13946   013238                     	if	1	;There are 3 active tblptr bytes
 13947   013238  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13948   01323A  6EF8               	movwf	tblptru,c
 13949   01323C                     	endif
 13950   01323C  0009               	tblrd		*+
 13951   01323E  CFF5 F032          	movff	tablat,btemp+8
 13952   013242  0009               	tblrd		*+
 13953   013244  CFF5 F033          	movff	tablat,btemp+9
 13954   013248  0009               	tblrd		*+
 13955   01324A  CFF5 F034          	movff	tablat,btemp+10
 13956   01324E  0009               	tblrd		*+
 13957   013250  CFF5 F035          	movff	tablat,btemp+11
 13958                           
 13959                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13960   013254  0EFB               	movlw	-5
 13961   013256  C032  FFE3         	movff	btemp+8,plusw1
 13962   01325A  0EFC               	movlw	-4
 13963   01325C  C033  FFE3         	movff	btemp+9,plusw1
 13964   013260  0EFD               	movlw	-3
 13965   013262  C034  FFE3         	movff	btemp+10,plusw1
 13966   013266  0EFE               	movlw	-2
 13967   013268  C035  FFE3         	movff	btemp+11,plusw1
 13968   01326C                     
 13969                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13970                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13971   01326C  50E1               	movf	fsr1l,w,c
 13972   01326E  0FFB               	addlw	-5
 13973   013270  6ED9               	movwf	fsr2l,c
 13974   013272  50E2               	movf	fsr1h,w,c
 13975   013274  6EDA               	movwf	fsr2h,c
 13976   013276  0EFF               	movlw	255
 13977   013278  22DA               	addwfc	fsr2h,f,c
 13978                           
 13979                           ;stkvar	_config @ sp[(-5)+-2]
 13980   01327A  0EF9               	movlw	-7
 13981   01327C  CFE3 FFE9          	movff	plusw1,fsr0l
 13982   013280  0EFA               	movlw	-6
 13983   013282  CFE3 FFEA          	movff	plusw1,fsr0h
 13984   013286  90EF               	bcf	indf0,0,c
 13985   013288  ACDF               	btfss	indf2,6,c
 13986   01328A  EF48  F099         	goto	u1005
 13987   01328E  80EF               	bsf	indf0,0,c
 13988   013290                     u1005:
 13989   013290                     
 13990                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13991                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13992   013290  0EFD               	movlw	253
 13993   013292  24E1               	addwf	fsr1l,w,c
 13994   013294  6ED9               	movwf	fsr2l,c
 13995   013296  0EFF               	movlw	255
 13996   013298  20E2               	addwfc	fsr1h,w,c
 13997   01329A  6EDA               	movwf	fsr2h,c
 13998   01329C  50DF               	movf	223,w,c
 13999   01329E  0B1F               	andlw	31
 14000   0132A0  6E35               	movwf	(btemp+11)^0,c
 14001                           
 14002                           ;stkvar	_config @ sp[(-5)+-2]
 14003   0132A2  0EF9               	movlw	-7
 14004   0132A4  CFE3 FFD9          	movff	plusw1,fsr2l
 14005   0132A8  0EFA               	movlw	-6
 14006   0132AA  CFE3 FFDA          	movff	plusw1,fsr2h
 14007   0132AE  4635               	rlncf	(btemp+11)^0,f,c
 14008   0132B0  50DF               	movf	223,w,c
 14009   0132B2  1835               	xorwf	(btemp+11)^0,w,c
 14010   0132B4  0BC1               	andlw	-63
 14011   0132B6  1835               	xorwf	(btemp+11)^0,w,c
 14012   0132B8  6EDF               	movwf	223,c
 14013   0132BA                     
 14014                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 14015                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14016   0132BA  0EFD               	movlw	253
 14017   0132BC  24E1               	addwf	fsr1l,w,c
 14018   0132BE  6ED9               	movwf	fsr2l,c
 14019   0132C0  0EFF               	movlw	255
 14020   0132C2  20E2               	addwfc	fsr1h,w,c
 14021   0132C4  6EDA               	movwf	fsr2h,c
 14022   0132C6  38DF               	swapf	223,w,c
 14023   0132C8  32E8               	rrcf	wreg,f,c
 14024   0132CA  0B03               	andlw	3
 14025   0132CC  6E35               	movwf	(btemp+11)^0,c
 14026                           
 14027                           ;stkvar	_config @ sp[(-5)+-2]
 14028   0132CE  0EF9               	movlw	-7
 14029   0132D0  CFE3 FFD9          	movff	plusw1,fsr2l
 14030   0132D4  0EFA               	movlw	-6
 14031   0132D6  CFE3 FFDA          	movff	plusw1,fsr2h
 14032   0132DA  3A35               	swapf	(btemp+11)^0,f,c
 14033   0132DC  4635               	rlncf	(btemp+11)^0,f,c
 14034   0132DE  4635               	rlncf	(btemp+11)^0,f,c
 14035   0132E0  50DF               	movf	223,w,c
 14036   0132E2  1835               	xorwf	(btemp+11)^0,w,c
 14037   0132E4  0B3F               	andlw	-193
 14038   0132E6  1835               	xorwf	(btemp+11)^0,w,c
 14039   0132E8  6EDF               	movwf	223,c
 14040   0132EA                     
 14041                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 14042                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14043   0132EA  0EFE               	movlw	254
 14044   0132EC  24E1               	addwf	fsr1l,w,c
 14045   0132EE  6ED9               	movwf	fsr2l,c
 14046   0132F0  0EFF               	movlw	255
 14047   0132F2  20E2               	addwfc	fsr1h,w,c
 14048   0132F4  6EDA               	movwf	fsr2h,c
 14049   0132F6  50DF               	movf	223,w,c
 14050   0132F8  0B1F               	andlw	31
 14051   0132FA  6E35               	movwf	(btemp+11)^0,c
 14052                           
 14053                           ;stkvar	_config @ sp[(-5)+-2]
 14054   0132FC  0EF9               	movlw	-7
 14055   0132FE  CFE3 F032          	movff	plusw1,btemp+8
 14056   013302  0EFA               	movlw	-6
 14057   013304  CFE3 F033          	movff	plusw1,btemp+9
 14058   013308  0E01               	movlw	1
 14059   01330A  2432               	addwf	(btemp+8)^0,w,c
 14060   01330C  6ED9               	movwf	fsr2l,c
 14061   01330E  0E00               	movlw	0
 14062   013310  2033               	addwfc	(btemp+9)^0,w,c
 14063   013312  6EDA               	movwf	fsr2h,c
 14064   013314  50DF               	movf	223,w,c
 14065   013316  1835               	xorwf	(btemp+11)^0,w,c
 14066   013318  0BE0               	andlw	-32
 14067   01331A  1835               	xorwf	(btemp+11)^0,w,c
 14068   01331C  6EDF               	movwf	223,c
 14069   01331E                     
 14070                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 14071                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 14072   01331E  0EFE               	movlw	254
 14073   013320  24E1               	addwf	fsr1l,w,c
 14074   013322  6ED9               	movwf	fsr2l,c
 14075   013324  0EFF               	movlw	255
 14076   013326  20E2               	addwfc	fsr1h,w,c
 14077   013328  6EDA               	movwf	fsr2h,c
 14078   01332A  38DF               	swapf	223,w,c
 14079   01332C  32E8               	rrcf	wreg,f,c
 14080   01332E  0B07               	andlw	7
 14081   013330  6E35               	movwf	(btemp+11)^0,c
 14082                           
 14083                           ;stkvar	_config @ sp[(-5)+-2]
 14084   013332  0EF9               	movlw	-7
 14085   013334  CFE3 F032          	movff	plusw1,btemp+8
 14086   013338  0EFA               	movlw	-6
 14087   01333A  CFE3 F033          	movff	plusw1,btemp+9
 14088   01333E  0E01               	movlw	1
 14089   013340  2432               	addwf	(btemp+8)^0,w,c
 14090   013342  6ED9               	movwf	fsr2l,c
 14091   013344  0E00               	movlw	0
 14092   013346  2033               	addwfc	(btemp+9)^0,w,c
 14093   013348  6EDA               	movwf	fsr2h,c
 14094   01334A  3A35               	swapf	(btemp+11)^0,f,c
 14095   01334C  4635               	rlncf	(btemp+11)^0,f,c
 14096   01334E  50DF               	movf	223,w,c
 14097   013350  1835               	xorwf	(btemp+11)^0,w,c
 14098   013352  0B1F               	andlw	-225
 14099   013354  1835               	xorwf	(btemp+11)^0,w,c
 14100   013356  6EDF               	movwf	223,c
 14101   013358                     
 14102                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 14103   013358  0EF9               	movlw	249
 14104   01335A  26E1               	addwf	fsr1l,f,c
 14105   01335C  0EFF               	movlw	255
 14106   01335E  22E2               	addwfc	fsr1h,f,c
 14107   013360  0012               	return		;funcret
 14108   013362                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 14109                           	callstack 0
 14110                           
 14111 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 14112 ;; Defined at:
 14113 ;;		line 633 in file "can/can.c"
 14114 ;; Parameters:    Size  Location     Type
 14115 ;;  channel         1  [STACK] enum E5287
 14116 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 14117 ;;		 -> txfConfig(2), 
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14120 ;;  a               2  [STACK] unsigned short 
 14121 ;;  spiTransferE    1    0        char 
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  1  [STACK] char 
 14124 ;; Registers used:
 14125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14135 ;;Total ram usage:        0 bytes
 14136 ;; Hardware stack levels used: 1
 14137 ;; Hardware stack levels required when called: 9
 14138 ;; This function calls:
 14139 ;;		_DRV_CANFDSPI_WriteWord
 14140 ;; This function is called by:
 14141 ;;		_CanInit
 14142 ;; This function uses a reentrant model
 14143 ;;
 14144                           
 14145                           	psect	text51
 14146   012A06                     __ptext51:
 14147                           	callstack 0
 14148   012A06                     _DRV_CANFDSPI_TransmitChannelConfigure:
 14149                           	callstack 0
 14150                           
 14151                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14152   012A06  0E07               	movlw	7
 14153   012A08  26E1               	addwf	fsr1l,f,c
 14154   012A0A  0E00               	movlw	0
 14155   012A0C  22E2               	addwfc	fsr1h,f,c
 14156   012A0E                     
 14157                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 14158   012A0E  0EDD               	movlw	low _canFifoResetValues
 14159   012A10  6EF6               	movwf	tblptrl,c
 14160   012A12                     	if	1	;There is more than 1 active tblptr byte
 14161   012A12  0EFF               	movlw	high _canFifoResetValues
 14162   012A14  6EF7               	movwf	tblptrh,c
 14163   012A16                     	endif
 14164   012A16                     	if	1	;There are 3 active tblptr bytes
 14165   012A16  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14166   012A18  6EF8               	movwf	tblptru,c
 14167   012A1A                     	endif
 14168   012A1A  0009               	tblrd		*+
 14169   012A1C  CFF5 F032          	movff	tablat,btemp+8
 14170   012A20  0009               	tblrd		*+
 14171   012A22  CFF5 F033          	movff	tablat,btemp+9
 14172   012A26  0009               	tblrd		*+
 14173   012A28  CFF5 F034          	movff	tablat,btemp+10
 14174   012A2C  0009               	tblrd		*+
 14175   012A2E  CFF5 F035          	movff	tablat,btemp+11
 14176                           
 14177                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14178   012A32  0EF9               	movlw	-7
 14179   012A34  C032  FFE3         	movff	btemp+8,plusw1
 14180   012A38  0EFA               	movlw	-6
 14181   012A3A  C033  FFE3         	movff	btemp+9,plusw1
 14182   012A3E  0EFB               	movlw	-5
 14183   012A40  C034  FFE3         	movff	btemp+10,plusw1
 14184   012A44  0EFC               	movlw	-4
 14185   012A46  C035  FFE3         	movff	btemp+11,plusw1
 14186   012A4A                     
 14187                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 14188                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14189   012A4A  50E1               	movf	fsr1l,w,c
 14190   012A4C  0FF9               	addlw	-7
 14191   012A4E  6ED9               	movwf	fsr2l,c
 14192   012A50  50E2               	movf	fsr1h,w,c
 14193   012A52  6EDA               	movwf	fsr2h,c
 14194   012A54  0EFF               	movlw	255
 14195   012A56  22DA               	addwfc	fsr2h,f,c
 14196   012A58  8EDF               	bsf	indf2,7,c
 14197   012A5A                     
 14198                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 14199                           ;stkvar	_config @ sp[(-7)+-3]
 14200   012A5A  0EF6               	movlw	-10
 14201   012A5C  CFE3 F034          	movff	plusw1,btemp+10
 14202   012A60  0EF7               	movlw	-9
 14203   012A62  CFE3 F035          	movff	plusw1,btemp+11
 14204   012A66  0E01               	movlw	1
 14205   012A68  2434               	addwf	(btemp+10)^0,w,c
 14206   012A6A  6ED9               	movwf	fsr2l,c
 14207   012A6C  0E00               	movlw	0
 14208   012A6E  2035               	addwfc	(btemp+11)^0,w,c
 14209   012A70  6EDA               	movwf	fsr2h,c
 14210   012A72  50DF               	movf	223,w,c
 14211   012A74  0B1F               	andlw	31
 14212   012A76  6E35               	movwf	(btemp+11)^0,c
 14213                           
 14214                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14215   012A78  0EFC               	movlw	252
 14216   012A7A  24E1               	addwf	fsr1l,w,c
 14217   012A7C  6ED9               	movwf	fsr2l,c
 14218   012A7E  0EFF               	movlw	255
 14219   012A80  20E2               	addwfc	fsr1h,w,c
 14220   012A82  6EDA               	movwf	fsr2h,c
 14221   012A84  50DF               	movf	223,w,c
 14222   012A86  1835               	xorwf	(btemp+11)^0,w,c
 14223   012A88  0BE0               	andlw	-32
 14224   012A8A  1835               	xorwf	(btemp+11)^0,w,c
 14225   012A8C  6EDF               	movwf	223,c
 14226   012A8E                     
 14227                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 14228                           ;stkvar	_config @ sp[(-7)+-3]
 14229   012A8E  0EF6               	movlw	-10
 14230   012A90  CFE3 F034          	movff	plusw1,btemp+10
 14231   012A94  0EF7               	movlw	-9
 14232   012A96  CFE3 F035          	movff	plusw1,btemp+11
 14233   012A9A  0E01               	movlw	1
 14234   012A9C  2434               	addwf	(btemp+10)^0,w,c
 14235   012A9E  6ED9               	movwf	fsr2l,c
 14236   012AA0  0E00               	movlw	0
 14237   012AA2  2035               	addwfc	(btemp+11)^0,w,c
 14238   012AA4  6EDA               	movwf	fsr2h,c
 14239   012AA6  38DF               	swapf	223,w,c
 14240   012AA8  32E8               	rrcf	wreg,f,c
 14241   012AAA  0B07               	andlw	7
 14242   012AAC  6E35               	movwf	(btemp+11)^0,c
 14243                           
 14244                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14245   012AAE  0EFC               	movlw	252
 14246   012AB0  24E1               	addwf	fsr1l,w,c
 14247   012AB2  6ED9               	movwf	fsr2l,c
 14248   012AB4  0EFF               	movlw	255
 14249   012AB6  20E2               	addwfc	fsr1h,w,c
 14250   012AB8  6EDA               	movwf	fsr2h,c
 14251   012ABA  3A35               	swapf	(btemp+11)^0,f,c
 14252   012ABC  4635               	rlncf	(btemp+11)^0,f,c
 14253   012ABE  50DF               	movf	223,w,c
 14254   012AC0  1835               	xorwf	(btemp+11)^0,w,c
 14255   012AC2  0B1F               	andlw	-225
 14256   012AC4  1835               	xorwf	(btemp+11)^0,w,c
 14257   012AC6  6EDF               	movwf	223,c
 14258   012AC8                     
 14259                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 14260                           ;stkvar	_config @ sp[(-7)+-3]
 14261   012AC8  0EF6               	movlw	-10
 14262   012ACA  CFE3 FFD9          	movff	plusw1,fsr2l
 14263   012ACE  0EF7               	movlw	-9
 14264   012AD0  CFE3 FFDA          	movff	plusw1,fsr2h
 14265   012AD4  38DF               	swapf	223,w,c
 14266   012AD6  32E8               	rrcf	wreg,f,c
 14267   012AD8  32E8               	rrcf	wreg,f,c
 14268   012ADA  0B03               	andlw	3
 14269   012ADC  6E35               	movwf	(btemp+11)^0,c
 14270                           
 14271                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14272   012ADE  0EFB               	movlw	251
 14273   012AE0  24E1               	addwf	fsr1l,w,c
 14274   012AE2  6ED9               	movwf	fsr2l,c
 14275   012AE4  0EFF               	movlw	255
 14276   012AE6  20E2               	addwfc	fsr1h,w,c
 14277   012AE8  6EDA               	movwf	fsr2h,c
 14278   012AEA  3A35               	swapf	(btemp+11)^0,f,c
 14279   012AEC  4635               	rlncf	(btemp+11)^0,f,c
 14280   012AEE  50DF               	movf	223,w,c
 14281   012AF0  1835               	xorwf	(btemp+11)^0,w,c
 14282   012AF2  0B9F               	andlw	-97
 14283   012AF4  1835               	xorwf	(btemp+11)^0,w,c
 14284   012AF6  6EDF               	movwf	223,c
 14285   012AF8                     
 14286                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 14287                           ;stkvar	_config @ sp[(-7)+-3]
 14288   012AF8  0EF6               	movlw	-10
 14289   012AFA  CFE3 FFD9          	movff	plusw1,fsr2l
 14290   012AFE  0EF7               	movlw	-9
 14291   012B00  CFE3 FFDA          	movff	plusw1,fsr2h
 14292   012B04  30DF               	rrcf	223,w,c
 14293   012B06  0B1F               	andlw	31
 14294   012B08  6E35               	movwf	(btemp+11)^0,c
 14295                           
 14296                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14297   012B0A  0EFB               	movlw	251
 14298   012B0C  24E1               	addwf	fsr1l,w,c
 14299   012B0E  6ED9               	movwf	fsr2l,c
 14300   012B10  0EFF               	movlw	255
 14301   012B12  20E2               	addwfc	fsr1h,w,c
 14302   012B14  6EDA               	movwf	fsr2h,c
 14303   012B16  50DF               	movf	223,w,c
 14304   012B18  1835               	xorwf	(btemp+11)^0,w,c
 14305   012B1A  0BE0               	andlw	-32
 14306   012B1C  1835               	xorwf	(btemp+11)^0,w,c
 14307   012B1E  6EDF               	movwf	223,c
 14308   012B20                     
 14309                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 14310                           ;stkvar	_config @ sp[(-7)+-3]
 14311   012B20  0EF6               	movlw	-10
 14312   012B22  CFE3 FFD9          	movff	plusw1,fsr2l
 14313   012B26  0EF7               	movlw	-9
 14314   012B28  CFE3 FFDA          	movff	plusw1,fsr2h
 14315                           
 14316                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14317   012B2C  50E1               	movf	fsr1l,w,c
 14318   012B2E  0FF9               	addlw	-7
 14319   012B30  6EE9               	movwf	fsr0l,c
 14320   012B32  50E2               	movf	fsr1h,w,c
 14321   012B34  6EEA               	movwf	fsr0h,c
 14322   012B36  0EFF               	movlw	255
 14323   012B38  22EA               	addwfc	fsr0h,f,c
 14324   012B3A  9CEF               	bcf	indf0,6,c
 14325   012B3C  A0DF               	btfss	indf2,0,c
 14326   012B3E  EFA2  F095         	goto	u2565
 14327   012B42  8CEF               	bsf	indf0,6,c
 14328   012B44                     u2565:
 14329   012B44                     
 14330                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 14331                           ;stkvar	_channel @ sp[(-7)+-1]
 14332   012B44  0EF8               	movlw	-8
 14333   012B46  50E3               	movf	plusw1,w,c
 14334   012B48  0D0C               	mullw	12
 14335   012B4A  0E50               	movlw	80
 14336   012B4C  26F3               	addwf	243,f,c
 14337   012B4E  0E00               	movlw	0
 14338   012B50  22F4               	addwfc	244,f,c
 14339                           
 14340                           ;stkvar	_a @ sp[(-7)+5]
 14341   012B52  0EFE               	movlw	-2
 14342   012B54  CFF3 FFE3          	movff	prodl,plusw1
 14343   012B58  0EFF               	movlw	-1
 14344   012B5A  CFF4 FFE3          	movff	prodh,plusw1
 14345   012B5E                     
 14346                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14347   012B5E  0EF9               	movlw	-7
 14348   012B60  CFE3 FFE6          	movff	plusw1,postinc1
 14349   012B64  CFE3 FFE6          	movff	plusw1,postinc1
 14350   012B68  CFE3 FFE6          	movff	plusw1,postinc1
 14351   012B6C  CFE3 FFE6          	movff	plusw1,postinc1
 14352                           
 14353                           ;stkvar	_a @ sp[(-11)+5]
 14354   012B70  0EFA               	movlw	-6
 14355   012B72  CFE3 FFE6          	movff	plusw1,postinc1
 14356   012B76  CFE3 FFE6          	movff	plusw1,postinc1
 14357   012B7A  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14358   012B7E                     
 14359                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14360   012B7E  0EF6               	movlw	246
 14361   012B80  26E1               	addwf	fsr1l,f,c
 14362   012B82  0EFF               	movlw	255
 14363   012B84  22E2               	addwfc	fsr1h,f,c
 14364   012B86  0012               	return		;funcret
 14365   012B88                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 14366                           	callstack 0
 14367                           
 14368 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 14369 ;; Defined at:
 14370 ;;		line 2690 in file "can/can.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;  ts              4  [STACK] unsigned long 
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;  spiTransferE    1    0        char 
 14375 ;; Return value:  Size  Location     Type
 14376 ;;                  1  [STACK] char 
 14377 ;; Registers used:
 14378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14379 ;; Tracked objects:
 14380 ;;		On entry : 0/0
 14381 ;;		On exit  : 0/0
 14382 ;;		Unchanged: 0/0
 14383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14388 ;;Total ram usage:        0 bytes
 14389 ;; Hardware stack levels used: 1
 14390 ;; Hardware stack levels required when called: 9
 14391 ;; This function calls:
 14392 ;;		_DRV_CANFDSPI_WriteWord
 14393 ;; This function is called by:
 14394 ;;		_CanInit
 14395 ;; This function uses a reentrant model
 14396 ;;
 14397                           
 14398                           	psect	text52
 14399   014A0C                     __ptext52:
 14400                           	callstack 0
 14401   014A0C                     _DRV_CANFDSPI_TimeStampSet:
 14402                           	callstack 20
 14403   014A0C                     
 14404                           ;stkvar	_ts @ sp[(0)+-4]
 14405   014A0C  0EFC               	movlw	-4
 14406   014A0E  CFE3 FFE6          	movff	plusw1,postinc1
 14407   014A12  CFE3 FFE6          	movff	plusw1,postinc1
 14408   014A16  CFE3 FFE6          	movff	plusw1,postinc1
 14409   014A1A  CFE3 FFE6          	movff	plusw1,postinc1
 14410   014A1E  0E10               	movlw	16
 14411   014A20  6EE6               	movwf	postinc1,c
 14412   014A22  0E00               	movlw	0
 14413   014A24  6EE6               	movwf	postinc1,c
 14414   014A26  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14415   014A2A                     
 14416                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 14417   014A2A  52E5               	movf	postdec1,f,c
 14418   014A2C  52E5               	movf	postdec1,f,c
 14419   014A2E  52E5               	movf	postdec1,f,c
 14420   014A30  52E5               	movf	postdec1,f,c
 14421   014A32  0012               	return		;funcret
 14422   014A34                     __end_of_DRV_CANFDSPI_TimeStampSet:
 14423                           	callstack 0
 14424                           
 14425 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 14426 ;; Defined at:
 14427 ;;		line 2725 in file "can/can.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  ps              2  [STACK] unsigned short 
 14430 ;; Auto vars:     Size  Location     Type
 14431 ;;  spiTransferE    1    0        char 
 14432 ;; Return value:  Size  Location     Type
 14433 ;;                  1  [STACK] char 
 14434 ;; Registers used:
 14435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14436 ;; Tracked objects:
 14437 ;;		On entry : 0/0
 14438 ;;		On exit  : 0/0
 14439 ;;		Unchanged: 0/0
 14440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14445 ;;Total ram usage:        0 bytes
 14446 ;; Hardware stack levels used: 1
 14447 ;; Hardware stack levels required when called: 9
 14448 ;; This function calls:
 14449 ;;		_DRV_CANFDSPI_WriteHalfWord
 14450 ;; This function is called by:
 14451 ;;		_CanInit
 14452 ;; This function uses a reentrant model
 14453 ;;
 14454                           
 14455                           	psect	text53
 14456   014A7C                     __ptext53:
 14457                           	callstack 0
 14458   014A7C                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 14459                           	callstack 20
 14460   014A7C                     
 14461                           ;stkvar	_ps @ sp[(0)+-2]
 14462   014A7C  0EFE               	movlw	-2
 14463   014A7E  CFE3 FFE6          	movff	plusw1,postinc1
 14464   014A82  CFE3 FFE6          	movff	plusw1,postinc1
 14465   014A86  0E14               	movlw	20
 14466   014A88  6EE6               	movwf	postinc1,c
 14467   014A8A  0E00               	movlw	0
 14468   014A8C  6EE6               	movwf	postinc1,c
 14469   014A8E  ECD6  F09D         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14470   014A92                     
 14471                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 14472   014A92  52E5               	movf	postdec1,f,c
 14473   014A94  52E5               	movf	postdec1,f,c
 14474   014A96  0012               	return		;funcret
 14475   014A98                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 14476                           	callstack 0
 14477                           
 14478 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 14479 ;; Defined at:
 14480 ;;		line 2634 in file "can/can.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;		None
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;  d               1  [STACK] unsigned char 
 14485 ;;  spiTransferE    1  [STACK] char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  1  [STACK] char 
 14488 ;; Registers used:
 14489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;Total ram usage:        0 bytes
 14500 ;; Hardware stack levels used: 1
 14501 ;; Hardware stack levels required when called: 9
 14502 ;; This function calls:
 14503 ;;		_DRV_CANFDSPI_ReadByte
 14504 ;;		_DRV_CANFDSPI_WriteByte
 14505 ;; This function is called by:
 14506 ;;		_CanInit
 14507 ;; This function uses a reentrant model
 14508 ;;
 14509                           
 14510                           	psect	text54
 14511   014746                     __ptext54:
 14512                           	callstack 0
 14513   014746                     _DRV_CANFDSPI_TimeStampEnable:
 14514                           	callstack 0
 14515                           
 14516                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14517   014746  52E6               	movf	postinc1,f,c
 14518   014748  52E6               	movf	postinc1,f,c
 14519   01474A                     
 14520                           ;can/can.c: 2637:     uint8_t d = 0;
 14521                           ;stkvar	_d @ sp[(-2)+0]
 14522   01474A  0EFE               	movlw	-2
 14523   01474C  6AE3               	clrf	plusw1,c
 14524   01474E                     
 14525                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 14526                           ;stkvar	_d @ sp[(-2)+0]
 14527   01474E  0EFE               	movlw	254
 14528   014750  24E1               	addwf	fsr1l,w,c
 14529   014752  6E2A               	movwf	btemp^0,c
 14530   014754  0EFF               	movlw	255
 14531   014756  20E2               	addwfc	fsr1h,w,c
 14532   014758  6E2B               	movwf	(btemp+1)^0,c
 14533   01475A  C02A  FFE6         	movff	btemp,postinc1
 14534   01475E  C02B  FFE6         	movff	btemp+1,postinc1
 14535   014762  0E16               	movlw	22
 14536   014764  6EE6               	movwf	postinc1,c
 14537   014766  0E00               	movlw	0
 14538   014768  6EE6               	movwf	postinc1,c
 14539   01476A  EC72  F0A3         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14540                           
 14541                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14542   01476E  0EFF               	movlw	-1
 14543   014770  C02A  FFE3         	movff	btemp,plusw1
 14544   014774                     
 14545                           ;can/can.c: 2641:     if (spiTransferError) {
 14546                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14547   014774  0EFF               	movlw	-1
 14548   014776  50E3               	movf	plusw1,w,c
 14549   014778  B4D8               	btfsc	status,2,c
 14550   01477A  EFC1  F0A3         	goto	u2591
 14551   01477E  EFC3  F0A3         	goto	u2590
 14552   014782                     u2591:
 14553   014782  EFC5  F0A3         	goto	l4922
 14554   014786                     u2590:
 14555   014786  EFD0  F0A3         	goto	l623
 14556   01478A                     l4922:
 14557                           
 14558                           ;can/can.c: 2646:     d |= 0x01;
 14559                           ;stkvar	_d @ sp[(-2)+0]
 14560   01478A  0EFE               	movlw	-2
 14561   01478C  80E3               	bsf	plusw1,0,c
 14562   01478E                     
 14563                           ;stkvar	_d @ sp[(-2)+0]
 14564   01478E  0EFE               	movlw	-2
 14565   014790  50E3               	movf	plusw1,w,c
 14566   014792  6EE6               	movwf	postinc1,c
 14567   014794  0E16               	movlw	22
 14568   014796  6EE6               	movwf	postinc1,c
 14569   014798  0E00               	movlw	0
 14570   01479A  6EE6               	movwf	postinc1,c
 14571   01479C  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14572   0147A0                     l623:
 14573                           
 14574                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 14575   0147A0  52E5               	movf	postdec1,f,c
 14576   0147A2  52E5               	movf	postdec1,f,c
 14577   0147A4  0012               	return		;funcret
 14578   0147A6                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 14579                           	callstack 0
 14580                           
 14581 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 14582 ;; Defined at:
 14583 ;;		line 1539 in file "can/can.c"
 14584 ;; Parameters:    Size  Location     Type
 14585 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 14586 ;;		 -> tefConfig(1), 
 14587 ;; Auto vars:     Size  Location     Type
 14588 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 14589 ;;  spiTransferE    1    0        char 
 14590 ;; Return value:  Size  Location     Type
 14591 ;;                  1  [STACK] char 
 14592 ;; Registers used:
 14593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;Total ram usage:        0 bytes
 14604 ;; Hardware stack levels used: 1
 14605 ;; Hardware stack levels required when called: 9
 14606 ;; This function calls:
 14607 ;;		_DRV_CANFDSPI_WriteWord
 14608 ;; This function is called by:
 14609 ;;		_CanInit
 14610 ;; This function uses a reentrant model
 14611 ;;
 14612                           
 14613                           	psect	text55
 14614   013D3A                     __ptext55:
 14615                           	callstack 0
 14616   013D3A                     _DRV_CANFDSPI_TefConfigure:
 14617                           	callstack 0
 14618                           
 14619                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14620   013D3A  52E6               	movf	postinc1,f,c
 14621   013D3C  52E6               	movf	postinc1,f,c
 14622   013D3E  52E6               	movf	postinc1,f,c
 14623   013D40  52E6               	movf	postinc1,f,c
 14624   013D42                     
 14625                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 14626   013D42  0EDD               	movlw	low _canFifoResetValues
 14627   013D44  6EF6               	movwf	tblptrl,c
 14628   013D46                     	if	1	;There is more than 1 active tblptr byte
 14629   013D46  0EFF               	movlw	high _canFifoResetValues
 14630   013D48  6EF7               	movwf	tblptrh,c
 14631   013D4A                     	endif
 14632   013D4A                     	if	1	;There are 3 active tblptr bytes
 14633   013D4A  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14634   013D4C  6EF8               	movwf	tblptru,c
 14635   013D4E                     	endif
 14636   013D4E  0009               	tblrd		*+
 14637   013D50  CFF5 F032          	movff	tablat,btemp+8
 14638   013D54  0009               	tblrd		*+
 14639   013D56  CFF5 F033          	movff	tablat,btemp+9
 14640   013D5A  0009               	tblrd		*+
 14641   013D5C  CFF5 F034          	movff	tablat,btemp+10
 14642   013D60  0009               	tblrd		*+
 14643   013D62  CFF5 F035          	movff	tablat,btemp+11
 14644                           
 14645                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14646   013D66  0EFC               	movlw	-4
 14647   013D68  C032  FFE3         	movff	btemp+8,plusw1
 14648   013D6C  0EFD               	movlw	-3
 14649   013D6E  C033  FFE3         	movff	btemp+9,plusw1
 14650   013D72  0EFE               	movlw	-2
 14651   013D74  C034  FFE3         	movff	btemp+10,plusw1
 14652   013D78  0EFF               	movlw	-1
 14653   013D7A  C035  FFE3         	movff	btemp+11,plusw1
 14654   013D7E                     
 14655                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 14656                           ;stkvar	_config @ sp[(-4)+-2]
 14657   013D7E  0EFA               	movlw	-6
 14658   013D80  CFE3 FFD9          	movff	plusw1,fsr2l
 14659   013D84  0EFB               	movlw	-5
 14660   013D86  CFE3 FFDA          	movff	plusw1,fsr2h
 14661   013D8A  30DF               	rrcf	223,w,c
 14662   013D8C  0B1F               	andlw	31
 14663   013D8E  6E35               	movwf	(btemp+11)^0,c
 14664                           
 14665                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14666   013D90  0EFF               	movlw	255
 14667   013D92  24E1               	addwf	fsr1l,w,c
 14668   013D94  6ED9               	movwf	fsr2l,c
 14669   013D96  0EFF               	movlw	255
 14670   013D98  20E2               	addwfc	fsr1h,w,c
 14671   013D9A  6EDA               	movwf	fsr2h,c
 14672   013D9C  50DF               	movf	223,w,c
 14673   013D9E  1835               	xorwf	(btemp+11)^0,w,c
 14674   013DA0  0BE0               	andlw	-32
 14675   013DA2  1835               	xorwf	(btemp+11)^0,w,c
 14676   013DA4  6EDF               	movwf	223,c
 14677   013DA6                     
 14678                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 14679                           ;stkvar	_config @ sp[(-4)+-2]
 14680   013DA6  0EFA               	movlw	-6
 14681   013DA8  CFE3 FFD9          	movff	plusw1,fsr2l
 14682   013DAC  0EFB               	movlw	-5
 14683   013DAE  CFE3 FFDA          	movff	plusw1,fsr2h
 14684                           
 14685                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14686   013DB2  50E1               	movf	fsr1l,w,c
 14687   013DB4  0FFC               	addlw	-4
 14688   013DB6  6EE9               	movwf	fsr0l,c
 14689   013DB8  50E2               	movf	fsr1h,w,c
 14690   013DBA  6EEA               	movwf	fsr0h,c
 14691   013DBC  0EFF               	movlw	255
 14692   013DBE  22EA               	addwfc	fsr0h,f,c
 14693   013DC0  9AEF               	bcf	indf0,5,c
 14694   013DC2  A0DF               	btfss	indf2,0,c
 14695   013DC4  EFE5  F09E         	goto	u2555
 14696   013DC8  8AEF               	bsf	indf0,5,c
 14697   013DCA                     u2555:
 14698   013DCA                     
 14699                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 14700   013DCA  0EFC               	movlw	-4
 14701   013DCC  CFE3 FFE6          	movff	plusw1,postinc1
 14702   013DD0  CFE3 FFE6          	movff	plusw1,postinc1
 14703   013DD4  CFE3 FFE6          	movff	plusw1,postinc1
 14704   013DD8  CFE3 FFE6          	movff	plusw1,postinc1
 14705   013DDC  0E40               	movlw	64
 14706   013DDE  6EE6               	movwf	postinc1,c
 14707   013DE0  0E00               	movlw	0
 14708   013DE2  6EE6               	movwf	postinc1,c
 14709   013DE4  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14710   013DE8                     
 14711                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 14712   013DE8  0EFA               	movlw	250
 14713   013DEA  26E1               	addwf	fsr1l,f,c
 14714   013DEC  0EFF               	movlw	255
 14715   013DEE  22E2               	addwfc	fsr1h,f,c
 14716   013DF0  0012               	return		;funcret
 14717   013DF2                     __end_of_DRV_CANFDSPI_TefConfigure:
 14718                           	callstack 0
 14719                           
 14720 ;; *************** function _DRV_CANFDSPI_Reset *****************
 14721 ;; Defined at:
 14722 ;;		line 257 in file "can/can.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;		None
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  spiTransferS    2    0        unsigned short 
 14727 ;;  spiTransferE    1    0        char 
 14728 ;; Return value:  Size  Location     Type
 14729 ;;                  1  [STACK] char 
 14730 ;; Registers used:
 14731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 14732 ;; Tracked objects:
 14733 ;;		On entry : 0/0
 14734 ;;		On exit  : 0/0
 14735 ;;		Unchanged: 0/0
 14736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;Total ram usage:        0 bytes
 14742 ;; Hardware stack levels used: 1
 14743 ;; Hardware stack levels required when called: 8
 14744 ;; This function calls:
 14745 ;;		_SPI2_Open
 14746 ;;		_SpiTransfer
 14747 ;; This function is called by:
 14748 ;;		_CanInit
 14749 ;; This function uses a reentrant model
 14750 ;;
 14751                           
 14752                           	psect	text56
 14753   0149E0                     __ptext56:
 14754                           	callstack 0
 14755   0149E0                     _DRV_CANFDSPI_Reset:
 14756                           	callstack 21
 14757   0149E0                     
 14758                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 14759   0149E0  0101               	movlb	1	; () banked
 14760   0149E2  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 14761   0149E4                     
 14762                           ; BSR set to: 1
 14763                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 14764   0149E4  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 14765   0149E6                     
 14766                           ; BSR set to: 1
 14767                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 14768   0149E6  0E00               	movlw	0
 14769   0149E8  6EE6               	movwf	postinc1,c
 14770   0149EA  ECF9  F09E         	call	_SPI2_Open	;wreg free
 14771   0149EE  0E02               	movlw	2
 14772   0149F0  6EE6               	movwf	postinc1,c
 14773   0149F2  0E00               	movlw	0
 14774   0149F4  6EE6               	movwf	postinc1,c
 14775   0149F6  0E00               	movlw	low _spiReceiveBuffer
 14776   0149F8  6EE6               	movwf	postinc1,c
 14777   0149FA  0E02               	movlw	high _spiReceiveBuffer
 14778   0149FC  6EE6               	movwf	postinc1,c
 14779   0149FE  0E00               	movlw	low _spiTransmitBuffer
 14780   014A00  6EE6               	movwf	postinc1,c
 14781   014A02  0E01               	movlw	high _spiTransmitBuffer
 14782   014A04  6EE6               	movwf	postinc1,c
 14783   014A06  EC3B  F09E         	call	_SpiTransfer	;wreg free
 14784   014A0A                     
 14785                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 14786   014A0A  0012               	return		;funcret
 14787   014A0C                     __end_of_DRV_CANFDSPI_Reset:
 14788                           	callstack 0
 14789                           
 14790 ;; *************** function _SPI2_Open *****************
 14791 ;; Defined at:
 14792 ;;		line 72 in file "mcc_generated_files/spi2.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  spi2UniqueCo    1  [STACK] enum E358
 14795 ;; Auto vars:     Size  Location     Type
 14796 ;;		None
 14797 ;; Return value:  Size  Location     Type
 14798 ;;                  1  [STACK] _Bool 
 14799 ;; Registers used:
 14800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 14801 ;; Tracked objects:
 14802 ;;		On entry : 3F/1
 14803 ;;		On exit  : 0/0
 14804 ;;		Unchanged: 0/0
 14805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;Total ram usage:        0 bytes
 14811 ;; Hardware stack levels used: 1
 14812 ;; Hardware stack levels required when called: 7
 14813 ;; This function calls:
 14814 ;;		Nothing
 14815 ;; This function is called by:
 14816 ;;		_DRV_CANFDSPI_Reset
 14817 ;; This function uses a reentrant model
 14818 ;;
 14819                           
 14820                           	psect	text57
 14821   013DF2                     __ptext57:
 14822                           	callstack 0
 14823   013DF2                     _SPI2_Open:
 14824                           	callstack 21
 14825   013DF2                     
 14826                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 14827   013DF2  BA63               	btfsc	99,5,c	;volatile
 14828   013DF4  EFFE  F09E         	goto	u2291
 14829   013DF8  EF00  F09F         	goto	u2290
 14830   013DFC                     u2291:
 14831   013DFC  EF52  F09F         	goto	l1120
 14832   013E00                     u2290:
 14833   013E00                     
 14834                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 14835                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14836   013E00  0EFF               	movlw	-1
 14837   013E02  50E3               	movf	plusw1,w,c
 14838   013E04  0D04               	mullw	4
 14839   013E06  0E01               	movlw	1
 14840   013E08  26F3               	addwf	243,f,c
 14841   013E0A  0E00               	movlw	0
 14842   013E0C  22F4               	addwfc	244,f,c
 14843   013E0E  0EE9               	movlw	low _spi2_configuration
 14844   013E10  24F3               	addwf	243,w,c
 14845   013E12  6EF6               	movwf	tblptrl,c
 14846   013E14  0EFF               	movlw	high _spi2_configuration
 14847   013E16  20F4               	addwfc	244,w,c
 14848   013E18  6EF7               	movwf	tblptrh,c
 14849   013E1A                     	if	1	;There are 3 active tblptr bytes
 14850   013E1A  6AF8               	clrf	tblptru,c
 14851   013E1C  0E00               	movlw	low (__mediumconst shr (0+16))
 14852   013E1E  22F8               	addwfc	tblptru,f,c
 14853   013E20                     	endif
 14854   013E20  0008               	tblrd		*
 14855   013E22  CFF5 FF64          	movff	tablat,3940	;volatile
 14856                           
 14857                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 14858                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14859   013E26  0EFF               	movlw	-1
 14860   013E28  50E3               	movf	plusw1,w,c
 14861   013E2A  0D04               	mullw	4
 14862   013E2C  0EE9               	movlw	low _spi2_configuration
 14863   013E2E  24F3               	addwf	243,w,c
 14864   013E30  6EF6               	movwf	tblptrl,c
 14865   013E32  0EFF               	movlw	high _spi2_configuration
 14866   013E34  20F4               	addwfc	244,w,c
 14867   013E36  6EF7               	movwf	tblptrh,c
 14868   013E38                     	if	1	;There are 3 active tblptr bytes
 14869   013E38  6AF8               	clrf	tblptru,c
 14870   013E3A  0E00               	movlw	low (__mediumconst shr (0+16))
 14871   013E3C  22F8               	addwfc	tblptru,f,c
 14872   013E3E                     	endif
 14873   013E3E  0008               	tblrd		*
 14874   013E40  CFF5 FF63          	movff	tablat,3939	;volatile
 14875   013E44                     
 14876                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 14877   013E44  6A62               	clrf	98,c	;volatile
 14878                           
 14879                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 14880                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14881   013E46  0EFF               	movlw	-1
 14882   013E48  50E3               	movf	plusw1,w,c
 14883   013E4A  0D04               	mullw	4
 14884   013E4C  0E02               	movlw	2
 14885   013E4E  26F3               	addwf	243,f,c
 14886   013E50  0E00               	movlw	0
 14887   013E52  22F4               	addwfc	244,f,c
 14888   013E54  0EE9               	movlw	low _spi2_configuration
 14889   013E56  24F3               	addwf	243,w,c
 14890   013E58  6EF6               	movwf	tblptrl,c
 14891   013E5A  0EFF               	movlw	high _spi2_configuration
 14892   013E5C  20F4               	addwfc	244,w,c
 14893   013E5E  6EF7               	movwf	tblptrh,c
 14894   013E60                     	if	1	;There are 3 active tblptr bytes
 14895   013E60  6AF8               	clrf	tblptru,c
 14896   013E62  0E00               	movlw	low (__mediumconst shr (0+16))
 14897   013E64  22F8               	addwfc	tblptru,f,c
 14898   013E66                     	endif
 14899   013E66  0008               	tblrd		*
 14900   013E68  CFF5 FF65          	movff	tablat,3941	;volatile
 14901   013E6C                     
 14902                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 14903                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 14904   013E6C  0EFF               	movlw	-1
 14905   013E6E  50E3               	movf	plusw1,w,c
 14906   013E70  0D04               	mullw	4
 14907   013E72  0E03               	movlw	3
 14908   013E74  26F3               	addwf	243,f,c
 14909   013E76  0E00               	movlw	0
 14910   013E78  22F4               	addwfc	244,f,c
 14911   013E7A  0EE9               	movlw	low _spi2_configuration
 14912   013E7C  24F3               	addwf	243,w,c
 14913   013E7E  6EF6               	movwf	tblptrl,c
 14914   013E80  0EFF               	movlw	high _spi2_configuration
 14915   013E82  20F4               	addwfc	244,w,c
 14916   013E84  6EF7               	movwf	tblptrh,c
 14917   013E86                     	if	1	;There are 3 active tblptr bytes
 14918   013E86  6AF8               	clrf	tblptru,c
 14919   013E88  0E00               	movlw	low (__mediumconst shr (0+16))
 14920   013E8A  22F8               	addwfc	tblptru,f,c
 14921   013E8C                     	endif
 14922   013E8C  0008               	tblrd		*
 14923   013E8E  CFF5 F035          	movff	tablat,btemp+11
 14924   013E92  3A35               	swapf	(btemp+11)^0,f,c
 14925   013E94  4635               	rlncf	(btemp+11)^0,f,c
 14926   013E96  4635               	rlncf	(btemp+11)^0,f,c
 14927   013E98  5095               	movf	149,w,c	;volatile
 14928   013E9A  1835               	xorwf	(btemp+11)^0,w,c
 14929   013E9C  0BBF               	andlw	-65
 14930   013E9E  1835               	xorwf	(btemp+11)^0,w,c
 14931   013EA0  6E95               	movwf	149,c	;volatile
 14932   013EA2                     
 14933                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14934   013EA2  8A63               	bsf	99,5,c	;volatile
 14935   013EA4                     l1120:
 14936                           
 14937                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14938   013EA4  52E5               	movf	postdec1,f,c
 14939   013EA6  0012               	return		;funcret
 14940   013EA8                     __end_of_SPI2_Open:
 14941                           	callstack 0
 14942                           
 14943 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14944 ;; Defined at:
 14945 ;;		line 1172 in file "can/can.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;  channel         1  [STACK] enum E5287
 14948 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14949 ;;		 -> rxfConfig(3), 
 14950 ;; Auto vars:     Size  Location     Type
 14951 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14952 ;;  a               2  [STACK] unsigned short 
 14953 ;;  spiTransferE    1    0        char 
 14954 ;; Return value:  Size  Location     Type
 14955 ;;                  1  [STACK] char 
 14956 ;; Registers used:
 14957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14967 ;;Total ram usage:        0 bytes
 14968 ;; Hardware stack levels used: 1
 14969 ;; Hardware stack levels required when called: 9
 14970 ;; This function calls:
 14971 ;;		_DRV_CANFDSPI_WriteWord
 14972 ;; This function is called by:
 14973 ;;		_CanInit
 14974 ;; This function uses a reentrant model
 14975 ;;
 14976                           
 14977                           	psect	text58
 14978   012FA6                     __ptext58:
 14979                           	callstack 0
 14980   012FA6                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14981                           	callstack 0
 14982                           
 14983                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14984   012FA6  0E07               	movlw	7
 14985   012FA8  26E1               	addwf	fsr1l,f,c
 14986   012FAA  0E00               	movlw	0
 14987   012FAC  22E2               	addwfc	fsr1h,f,c
 14988   012FAE                     
 14989                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14990                           ;stkvar	_channel @ sp[(-7)+-1]
 14991   012FAE  0EF8               	movlw	-8
 14992   012FB0  50E3               	movf	plusw1,w,c
 14993   012FB2  A4D8               	btfss	status,2,c
 14994   012FB4  EFDE  F097         	goto	u2571
 14995   012FB8  EFE0  F097         	goto	u2570
 14996   012FBC                     u2571:
 14997   012FBC  EFE2  F097         	goto	l4886
 14998   012FC0                     u2570:
 14999   012FC0  EF6F  F098         	goto	l346
 15000   012FC4                     l4886:
 15001                           
 15002                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 15003   012FC4  0EDD               	movlw	low _canFifoResetValues
 15004   012FC6  6EF6               	movwf	tblptrl,c
 15005   012FC8                     	if	1	;There is more than 1 active tblptr byte
 15006   012FC8  0EFF               	movlw	high _canFifoResetValues
 15007   012FCA  6EF7               	movwf	tblptrh,c
 15008   012FCC                     	endif
 15009   012FCC                     	if	1	;There are 3 active tblptr bytes
 15010   012FCC  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 15011   012FCE  6EF8               	movwf	tblptru,c
 15012   012FD0                     	endif
 15013   012FD0  0009               	tblrd		*+
 15014   012FD2  CFF5 F032          	movff	tablat,btemp+8
 15015   012FD6  0009               	tblrd		*+
 15016   012FD8  CFF5 F033          	movff	tablat,btemp+9
 15017   012FDC  0009               	tblrd		*+
 15018   012FDE  CFF5 F034          	movff	tablat,btemp+10
 15019   012FE2  0009               	tblrd		*+
 15020   012FE4  CFF5 F035          	movff	tablat,btemp+11
 15021                           
 15022                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15023   012FE8  0EF9               	movlw	-7
 15024   012FEA  C032  FFE3         	movff	btemp+8,plusw1
 15025   012FEE  0EFA               	movlw	-6
 15026   012FF0  C033  FFE3         	movff	btemp+9,plusw1
 15027   012FF4  0EFB               	movlw	-5
 15028   012FF6  C034  FFE3         	movff	btemp+10,plusw1
 15029   012FFA  0EFC               	movlw	-4
 15030   012FFC  C035  FFE3         	movff	btemp+11,plusw1
 15031   013000                     
 15032                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 15033                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15034   013000  50E1               	movf	fsr1l,w,c
 15035   013002  0FF9               	addlw	-7
 15036   013004  6ED9               	movwf	fsr2l,c
 15037   013006  50E2               	movf	fsr1h,w,c
 15038   013008  6EDA               	movwf	fsr2h,c
 15039   01300A  0EFF               	movlw	255
 15040   01300C  22DA               	addwfc	fsr2h,f,c
 15041   01300E  9EDF               	bcf	indf2,7,c
 15042   013010                     
 15043                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 15044                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15045   013010  0EFC               	movlw	252
 15046   013012  24E1               	addwf	fsr1l,w,c
 15047   013014  6ED9               	movwf	fsr2l,c
 15048   013016  0EFF               	movlw	255
 15049   013018  20E2               	addwfc	fsr1h,w,c
 15050   01301A  6EDA               	movwf	fsr2h,c
 15051                           
 15052                           ;stkvar	_config @ sp[(-7)+-3]
 15053   01301C  0EF6               	movlw	-10
 15054   01301E  CFE3 F034          	movff	plusw1,btemp+10
 15055   013022  0EF7               	movlw	-9
 15056   013024  CFE3 F035          	movff	plusw1,btemp+11
 15057   013028  0E01               	movlw	1
 15058   01302A  2434               	addwf	(btemp+10)^0,w,c
 15059   01302C  6EE9               	movwf	fsr0l,c
 15060   01302E  0E00               	movlw	0
 15061   013030  2035               	addwfc	(btemp+11)^0,w,c
 15062   013032  6EEA               	movwf	fsr0h,c
 15063   013034  50EF               	movf	indf0,w,c
 15064   013036  6E35               	movwf	(btemp+11)^0,c
 15065                           
 15066                           ;stkvar	_config @ sp[(-7)+-3]
 15067   013038  0EF6               	movlw	-10
 15068   01303A  CFE3 F032          	movff	plusw1,btemp+8
 15069   01303E  0EF7               	movlw	-9
 15070   013040  CFE3 F033          	movff	plusw1,btemp+9
 15071   013044  0E02               	movlw	2
 15072   013046  2432               	addwf	(btemp+8)^0,w,c
 15073   013048  6EE9               	movwf	fsr0l,c
 15074   01304A  0E00               	movlw	0
 15075   01304C  2033               	addwfc	(btemp+9)^0,w,c
 15076   01304E  6EEA               	movwf	fsr0h,c
 15077   013050  50EF               	movf	indf0,w,c
 15078   013052  6E34               	movwf	(btemp+10)^0,c
 15079   013054  0E05               	movlw	5
 15080   013056  6E2A               	movwf	btemp^0,c
 15081   013058                     u2585:
 15082   013058  90D8               	bcf	status,0,c
 15083   01305A  3634               	rlcf	(btemp+10)^0,f,c
 15084   01305C  2E2A               	decfsz	btemp^0,f,c
 15085   01305E  EF2C  F098         	goto	u2585
 15086   013062  5034               	movf	(btemp+10)^0,w,c
 15087   013064  1035               	iorwf	(btemp+11)^0,w,c
 15088   013066  6EDF               	movwf	indf2,c
 15089   013068                     
 15090                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 15091                           ;stkvar	_config @ sp[(-7)+-3]
 15092   013068  0EF6               	movlw	-10
 15093   01306A  CFE3 FFD9          	movff	plusw1,fsr2l
 15094   01306E  0EF7               	movlw	-9
 15095   013070  CFE3 FFDA          	movff	plusw1,fsr2h
 15096   013074  50DF               	movf	indf2,w,c
 15097   013076  6E35               	movwf	(btemp+11)^0,c
 15098                           
 15099                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15100   013078  50E1               	movf	fsr1l,w,c
 15101   01307A  0FF9               	addlw	-7
 15102   01307C  6ED9               	movwf	fsr2l,c
 15103   01307E  50E2               	movf	fsr1h,w,c
 15104   013080  6EDA               	movwf	fsr2h,c
 15105   013082  0EFF               	movlw	255
 15106   013084  22DA               	addwfc	fsr2h,f,c
 15107   013086  3A35               	swapf	(btemp+11)^0,f,c
 15108   013088  4635               	rlncf	(btemp+11)^0,f,c
 15109   01308A  50DF               	movf	223,w,c
 15110   01308C  1835               	xorwf	(btemp+11)^0,w,c
 15111   01308E  0BDF               	andlw	-33
 15112   013090  1835               	xorwf	(btemp+11)^0,w,c
 15113   013092  6EDF               	movwf	223,c
 15114   013094                     
 15115                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 15116                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15117   013094  50E1               	movf	fsr1l,w,c
 15118   013096  0FF9               	addlw	-7
 15119   013098  6ED9               	movwf	fsr2l,c
 15120   01309A  50E2               	movf	fsr1h,w,c
 15121   01309C  6EDA               	movwf	fsr2h,c
 15122   01309E  0EFF               	movlw	255
 15123   0130A0  22DA               	addwfc	fsr2h,f,c
 15124   0130A2  80DF               	bsf	indf2,0,c
 15125   0130A4                     
 15126                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 15127                           ;stkvar	_channel @ sp[(-7)+-1]
 15128   0130A4  0EF8               	movlw	-8
 15129   0130A6  50E3               	movf	plusw1,w,c
 15130   0130A8  0D0C               	mullw	12
 15131   0130AA  0E50               	movlw	80
 15132   0130AC  26F3               	addwf	243,f,c
 15133   0130AE  0E00               	movlw	0
 15134   0130B0  22F4               	addwfc	244,f,c
 15135                           
 15136                           ;stkvar	_a @ sp[(-7)+5]
 15137   0130B2  0EFE               	movlw	-2
 15138   0130B4  CFF3 FFE3          	movff	prodl,plusw1
 15139   0130B8  0EFF               	movlw	-1
 15140   0130BA  CFF4 FFE3          	movff	prodh,plusw1
 15141   0130BE                     
 15142                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 15143   0130BE  0EF9               	movlw	-7
 15144   0130C0  CFE3 FFE6          	movff	plusw1,postinc1
 15145   0130C4  CFE3 FFE6          	movff	plusw1,postinc1
 15146   0130C8  CFE3 FFE6          	movff	plusw1,postinc1
 15147   0130CC  CFE3 FFE6          	movff	plusw1,postinc1
 15148                           
 15149                           ;stkvar	_a @ sp[(-11)+5]
 15150   0130D0  0EFA               	movlw	-6
 15151   0130D2  CFE3 FFE6          	movff	plusw1,postinc1
 15152   0130D6  CFE3 FFE6          	movff	plusw1,postinc1
 15153   0130DA  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 15154   0130DE                     l346:
 15155                           
 15156                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 15157   0130DE  0EF6               	movlw	246
 15158   0130E0  26E1               	addwf	fsr1l,f,c
 15159   0130E2  0EFF               	movlw	255
 15160   0130E4  22E2               	addwfc	fsr1h,f,c
 15161   0130E6  0012               	return		;funcret
 15162   0130E8                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 15163                           	callstack 0
 15164                           
 15165 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 15166 ;; Defined at:
 15167 ;;		line 499 in file "can/can.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;  opMode          1  [STACK] enum E5357
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  d               1  [STACK] unsigned char 
 15172 ;;  spiTransferE    1  [STACK] char 
 15173 ;; Return value:  Size  Location     Type
 15174 ;;                  1  [STACK] char 
 15175 ;; Registers used:
 15176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15186 ;;Total ram usage:        0 bytes
 15187 ;; Hardware stack levels used: 1
 15188 ;; Hardware stack levels required when called: 9
 15189 ;; This function calls:
 15190 ;;		_DRV_CANFDSPI_ReadByte
 15191 ;;		_DRV_CANFDSPI_WriteByte
 15192 ;; This function is called by:
 15193 ;;		_CanInit
 15194 ;; This function uses a reentrant model
 15195 ;;
 15196                           
 15197                           	psect	text59
 15198   014456                     __ptext59:
 15199                           	callstack 0
 15200   014456                     _DRV_CANFDSPI_OperationModeSelect:
 15201                           	callstack 0
 15202                           
 15203                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15204   014456  52E6               	movf	postinc1,f,c
 15205   014458  52E6               	movf	postinc1,f,c
 15206   01445A                     
 15207                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 15208                           ;stkvar	_d @ sp[(-2)+0]
 15209   01445A  0EFE               	movlw	-2
 15210   01445C  6AE3               	clrf	plusw1,c
 15211   01445E                     
 15212                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 15213                           ;stkvar	_d @ sp[(-2)+0]
 15214   01445E  0EFE               	movlw	254
 15215   014460  24E1               	addwf	fsr1l,w,c
 15216   014462  6E2A               	movwf	btemp^0,c
 15217   014464  0EFF               	movlw	255
 15218   014466  20E2               	addwfc	fsr1h,w,c
 15219   014468  6E2B               	movwf	(btemp+1)^0,c
 15220   01446A  C02A  FFE6         	movff	btemp,postinc1
 15221   01446E  C02B  FFE6         	movff	btemp+1,postinc1
 15222   014472  0E03               	movlw	3
 15223   014474  6EE6               	movwf	postinc1,c
 15224   014476  0E00               	movlw	0
 15225   014478  6EE6               	movwf	postinc1,c
 15226   01447A  EC72  F0A3         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 15227                           
 15228                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15229   01447E  0EFF               	movlw	-1
 15230   014480  C02A  FFE3         	movff	btemp,plusw1
 15231   014484                     
 15232                           ;can/can.c: 506:     if (spiTransferError) {
 15233                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 15234   014484  0EFF               	movlw	-1
 15235   014486  50E3               	movf	plusw1,w,c
 15236   014488  B4D8               	btfsc	status,2,c
 15237   01448A  EF49  F0A2         	goto	u2601
 15238   01448E  EF4B  F0A2         	goto	u2600
 15239   014492                     u2601:
 15240   014492  EF4D  F0A2         	goto	l4954
 15241   014496                     u2600:
 15242   014496  EF6A  F0A2         	goto	l222
 15243   01449A                     l4954:
 15244                           
 15245                           ;can/can.c: 511:     d &= ~0x07;
 15246                           ;stkvar	_d @ sp[(-2)+0]
 15247   01449A  0EFE               	movlw	-2
 15248   01449C  CFE3 F02A          	movff	plusw1,btemp
 15249   0144A0  0EF8               	movlw	248
 15250   0144A2  162A               	andwf	btemp^0,f,c
 15251   0144A4  0EFE               	movlw	-2
 15252   0144A6  C02A  FFE3         	movff	btemp,plusw1
 15253   0144AA                     
 15254                           ;can/can.c: 512:     d |= opMode;
 15255                           ;stkvar	_opMode @ sp[(-2)+-1]
 15256   0144AA  0EFD               	movlw	-3
 15257   0144AC  CFE3 F035          	movff	plusw1,btemp+11
 15258                           
 15259                           ;stkvar	_d @ sp[(-2)+0]
 15260   0144B0  50E1               	movf	fsr1l,w,c
 15261   0144B2  0FFE               	addlw	-2
 15262   0144B4  6ED9               	movwf	fsr2l,c
 15263   0144B6  50E2               	movf	fsr1h,w,c
 15264   0144B8  6EDA               	movwf	fsr2h,c
 15265   0144BA  0EFF               	movlw	255
 15266   0144BC  22DA               	addwfc	fsr2h,f,c
 15267   0144BE  5035               	movf	(btemp+11)^0,w,c
 15268   0144C0  12DF               	iorwf	indf2,f,c
 15269   0144C2                     
 15270                           ;stkvar	_d @ sp[(-2)+0]
 15271   0144C2  0EFE               	movlw	-2
 15272   0144C4  50E3               	movf	plusw1,w,c
 15273   0144C6  6EE6               	movwf	postinc1,c
 15274   0144C8  0E03               	movlw	3
 15275   0144CA  6EE6               	movwf	postinc1,c
 15276   0144CC  0E00               	movlw	0
 15277   0144CE  6EE6               	movwf	postinc1,c
 15278   0144D0  ECFF  F0A3         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 15279   0144D4                     l222:
 15280                           
 15281                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 15282   0144D4  52E5               	movf	postdec1,f,c
 15283   0144D6  52E5               	movf	postdec1,f,c
 15284   0144D8  52E5               	movf	postdec1,f,c
 15285   0144DA  0012               	return		;funcret
 15286   0144DC                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 15287                           	callstack 0
 15288                           
 15289 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 15290 ;; Defined at:
 15291 ;;		line 294 in file "can/can.c"
 15292 ;; Parameters:    Size  Location     Type
 15293 ;;  address         2  [STACK] unsigned short 
 15294 ;;  txd             1  [STACK] unsigned char 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  spiTransferS    2    0        unsigned short 
 15297 ;;  spiTransferE    1  [STACK] char 
 15298 ;; Return value:  Size  Location     Type
 15299 ;;                  1  [STACK] char 
 15300 ;; Registers used:
 15301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15302 ;; Tracked objects:
 15303 ;;		On entry : 0/0
 15304 ;;		On exit  : 0/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15311 ;;Total ram usage:        0 bytes
 15312 ;; Hardware stack levels used: 1
 15313 ;; Hardware stack levels required when called: 8
 15314 ;; This function calls:
 15315 ;;		_SpiTransfer
 15316 ;; This function is called by:
 15317 ;;		_DRV_CANFDSPI_OperationModeSelect
 15318 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 15319 ;;		_DRV_CANFDSPI_FilterToFifoLink
 15320 ;;		_DRV_CANFDSPI_FilterDisable
 15321 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 15322 ;;		_DRV_CANFDSPI_TimeStampEnable
 15323 ;; This function uses a reentrant model
 15324 ;;
 15325                           
 15326                           	psect	text60
 15327   0147FE                     __ptext60:
 15328                           	callstack 0
 15329   0147FE                     _DRV_CANFDSPI_WriteByte:
 15330                           	callstack 0
 15331                           
 15332                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15333   0147FE  52E6               	movf	postinc1,f,c
 15334   014800                     
 15335                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15336                           ;stkvar	_address @ sp[(-1)+-2]
 15337   014800  0EFE               	movlw	254
 15338   014802  24E1               	addwf	fsr1l,w,c
 15339   014804  6ED9               	movwf	fsr2l,c
 15340   014806  0EFF               	movlw	255
 15341   014808  20E2               	addwfc	fsr1h,w,c
 15342   01480A  6EDA               	movwf	fsr2h,c
 15343   01480C  50DF               	movf	indf2,w,c
 15344   01480E  0B0F               	andlw	15
 15345   014810  0F20               	addlw	32
 15346   014812  0101               	movlb	1	; () banked
 15347   014814  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15348   014816                     
 15349                           ; BSR set to: 1
 15350                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15351                           ;stkvar	_address @ sp[(-1)+-2]
 15352   014816  0EFD               	movlw	-3
 15353   014818  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15354   01481C                     
 15355                           ; BSR set to: 1
 15356                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 15357                           ;stkvar	_txd @ sp[(-1)+-3]
 15358   01481C  0EFC               	movlw	-4
 15359   01481E  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 15360   014822                     
 15361                           ; BSR set to: 1
 15362                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15363   014822  0E03               	movlw	3
 15364   014824  6EE6               	movwf	postinc1,c
 15365   014826  0E00               	movlw	0
 15366   014828  6EE6               	movwf	postinc1,c
 15367   01482A  0E00               	movlw	low _spiReceiveBuffer
 15368   01482C  6EE6               	movwf	postinc1,c
 15369   01482E  0E02               	movlw	high _spiReceiveBuffer
 15370   014830  6EE6               	movwf	postinc1,c
 15371   014832  0E00               	movlw	low _spiTransmitBuffer
 15372   014834  6EE6               	movwf	postinc1,c
 15373   014836  0E01               	movlw	high _spiTransmitBuffer
 15374   014838  6EE6               	movwf	postinc1,c
 15375   01483A  EC3B  F09E         	call	_SpiTransfer	;wreg free
 15376                           
 15377                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15378   01483E  0EFF               	movlw	-1
 15379   014840  C02A  FFE3         	movff	btemp,plusw1
 15380   014844                     
 15381                           ;can/can.c: 306:     return spiTransferError;
 15382                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15383   014844  0EFF               	movlw	-1
 15384   014846  CFE3 F02A          	movff	plusw1,btemp
 15385   01484A                     
 15386                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 15387   01484A  52E5               	movf	postdec1,f,c
 15388   01484C  52E5               	movf	postdec1,f,c
 15389   01484E  52E5               	movf	postdec1,f,c
 15390   014850  52E5               	movf	postdec1,f,c
 15391   014852  0012               	return		;funcret
 15392   014854                     __end_of_DRV_CANFDSPI_WriteByte:
 15393                           	callstack 0
 15394                           
 15395 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 15396 ;; Defined at:
 15397 ;;		line 276 in file "can/can.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;  address         2  [STACK] unsigned short 
 15400 ;;  rxd             2  [STACK] PTR unsigned char 
 15401 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 15402 ;;		 -> d(1), d(1), d(1), crc(1), 
 15403 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 15404 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 15405 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 15406 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 15407 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 15408 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 15409 ;;		 -> d(1), d(1), 
 15410 ;; Auto vars:     Size  Location     Type
 15411 ;;  spiTransferS    2    0        unsigned short 
 15412 ;;  spiTransferE    1  [STACK] char 
 15413 ;; Return value:  Size  Location     Type
 15414 ;;                  1  [STACK] char 
 15415 ;; Registers used:
 15416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 15417 ;; Tracked objects:
 15418 ;;		On entry : 0/0
 15419 ;;		On exit  : 0/0
 15420 ;;		Unchanged: 0/0
 15421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15426 ;;Total ram usage:        0 bytes
 15427 ;; Hardware stack levels used: 1
 15428 ;; Hardware stack levels required when called: 8
 15429 ;; This function calls:
 15430 ;;		_SpiTransfer
 15431 ;; This function is called by:
 15432 ;;		_DRV_CANFDSPI_OperationModeSelect
 15433 ;;		_DRV_CANFDSPI_FilterDisable
 15434 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 15435 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 15436 ;;		_DRV_CANFDSPI_TimeStampEnable
 15437 ;; This function uses a reentrant model
 15438 ;;
 15439                           
 15440                           	psect	text61
 15441   0146E4                     __ptext61:
 15442                           	callstack 0
 15443   0146E4                     _DRV_CANFDSPI_ReadByte:
 15444                           	callstack 0
 15445                           
 15446                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15447   0146E4  52E6               	movf	postinc1,f,c
 15448   0146E6                     
 15449                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 15450                           ;stkvar	_address @ sp[(-1)+-2]
 15451   0146E6  0EFE               	movlw	254
 15452   0146E8  24E1               	addwf	fsr1l,w,c
 15453   0146EA  6ED9               	movwf	fsr2l,c
 15454   0146EC  0EFF               	movlw	255
 15455   0146EE  20E2               	addwfc	fsr1h,w,c
 15456   0146F0  6EDA               	movwf	fsr2h,c
 15457   0146F2  50DF               	movf	indf2,w,c
 15458   0146F4  0B0F               	andlw	15
 15459   0146F6  0F30               	addlw	48
 15460   0146F8  0101               	movlb	1	; () banked
 15461   0146FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15462   0146FC                     
 15463                           ; BSR set to: 1
 15464                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15465                           ;stkvar	_address @ sp[(-1)+-2]
 15466   0146FC  0EFD               	movlw	-3
 15467   0146FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15468   014702                     
 15469                           ; BSR set to: 1
 15470                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 15471   014702  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 15472   014704                     
 15473                           ; BSR set to: 1
 15474                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 15475   014704  0E03               	movlw	3
 15476   014706  6EE6               	movwf	postinc1,c
 15477   014708  0E00               	movlw	0
 15478   01470A  6EE6               	movwf	postinc1,c
 15479   01470C  0E00               	movlw	low _spiReceiveBuffer
 15480   01470E  6EE6               	movwf	postinc1,c
 15481   014710  0E02               	movlw	high _spiReceiveBuffer
 15482   014712  6EE6               	movwf	postinc1,c
 15483   014714  0E00               	movlw	low _spiTransmitBuffer
 15484   014716  6EE6               	movwf	postinc1,c
 15485   014718  0E01               	movlw	high _spiTransmitBuffer
 15486   01471A  6EE6               	movwf	postinc1,c
 15487   01471C  EC3B  F09E         	call	_SpiTransfer	;wreg free
 15488                           
 15489                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15490   014720  0EFF               	movlw	-1
 15491   014722  C02A  FFE3         	movff	btemp,plusw1
 15492   014726                     
 15493                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 15494                           ;stkvar	_rxd @ sp[(-1)+-4]
 15495   014726  0EFB               	movlw	-5
 15496   014728  CFE3 FFD9          	movff	plusw1,fsr2l
 15497   01472C  0EFC               	movlw	-4
 15498   01472E  CFE3 FFDA          	movff	plusw1,fsr2h
 15499   014732  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 15500   014736                     
 15501                           ;can/can.c: 291:     return spiTransferError;
 15502                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 15503   014736  0EFF               	movlw	-1
 15504   014738  CFE3 F02A          	movff	plusw1,btemp
 15505   01473C                     
 15506                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 15507   01473C  0EFB               	movlw	251
 15508   01473E  26E1               	addwf	fsr1l,f,c
 15509   014740  0EFF               	movlw	255
 15510   014742  22E2               	addwfc	fsr1h,f,c
 15511   014744  0012               	return		;funcret
 15512   014746                     __end_of_DRV_CANFDSPI_ReadByte:
 15513                           	callstack 0
 15514                           
 15515 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 15516 ;; Defined at:
 15517 ;;		line 1591 in file "can/can.c"
 15518 ;; Parameters:    Size  Location     Type
 15519 ;;  index           1  [STACK] unsigned char 
 15520 ;;  flags           2  [STACK] enum E5563
 15521 ;; Auto vars:     Size  Location     Type
 15522 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 15523 ;;  a               2    0        unsigned short 
 15524 ;;  spiTransferE    1    0        char 
 15525 ;; Return value:  Size  Location     Type
 15526 ;;                  1  [STACK] char 
 15527 ;; Registers used:
 15528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15529 ;; Tracked objects:
 15530 ;;		On entry : 0/0
 15531 ;;		On exit  : 0/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15538 ;;Total ram usage:        0 bytes
 15539 ;; Hardware stack levels used: 1
 15540 ;; Hardware stack levels required when called: 9
 15541 ;; This function calls:
 15542 ;;		_DRV_CANFDSPI_WriteHalfWord
 15543 ;; This function is called by:
 15544 ;;		_CanInit
 15545 ;; This function uses a reentrant model
 15546 ;;
 15547                           
 15548                           	psect	text62
 15549   01461E                     __ptext62:
 15550                           	callstack 0
 15551   01461E                     _DRV_CANFDSPI_ModuleEventEnable:
 15552                           	callstack 0
 15553                           
 15554                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15555   01461E  52E6               	movf	postinc1,f,c
 15556   014620  52E6               	movf	postinc1,f,c
 15557   014622                     
 15558                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 15559                           ;stkvar	_intEnables @ sp[(-2)+0]
 15560   014622  0EFE               	movlw	-2
 15561   014624  6AE3               	clrf	plusw1,c
 15562   014626  0EFF               	movlw	-1
 15563   014628  6AE3               	clrf	plusw1,c
 15564   01462A                     
 15565                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 15566                           ;stkvar	_flags @ sp[(-2)+-3]
 15567   01462A  0EFB               	movlw	-5
 15568   01462C  CFE3 F034          	movff	plusw1,btemp+10
 15569   014630  0EFC               	movlw	-4
 15570   014632  CFE3 F035          	movff	plusw1,btemp+11
 15571   014636  0E1F               	movlw	31
 15572   014638  1434               	andwf	(btemp+10)^0,w,c
 15573   01463A  6E32               	movwf	(btemp+8)^0,c
 15574   01463C  0EFF               	movlw	255
 15575   01463E  1435               	andwf	(btemp+11)^0,w,c
 15576   014640  6E33               	movwf	(btemp+9)^0,c
 15577                           
 15578                           ;stkvar	_intEnables @ sp[(-2)+0]
 15579   014642  0EFE               	movlw	-2
 15580   014644  CFE3 F02A          	movff	plusw1,btemp
 15581   014648  5032               	movf	(btemp+8)^0,w,c
 15582   01464A  122A               	iorwf	btemp^0,f,c
 15583   01464C  0EFE               	movlw	-2
 15584   01464E  C02A  FFE3         	movff	btemp,plusw1
 15585   014652  0EFF               	movlw	-1
 15586   014654  CFE3 F02A          	movff	plusw1,btemp
 15587   014658  5033               	movf	(btemp+9)^0,w,c
 15588   01465A  122A               	iorwf	btemp^0,f,c
 15589   01465C  0EFF               	movlw	-1
 15590   01465E  C02A  FFE3         	movff	btemp,plusw1
 15591   014662                     
 15592                           ;stkvar	_intEnables @ sp[(-2)+0]
 15593   014662  0EFE               	movlw	-2
 15594   014664  CFE3 FFE6          	movff	plusw1,postinc1
 15595   014668  CFE3 FFE6          	movff	plusw1,postinc1
 15596   01466C  0E1E               	movlw	30
 15597   01466E  6EE6               	movwf	postinc1,c
 15598   014670  0E00               	movlw	0
 15599   014672  6EE6               	movwf	postinc1,c
 15600   014674  ECD6  F09D         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 15601   014678                     
 15602                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 15603   014678  0EFB               	movlw	251
 15604   01467A  26E1               	addwf	fsr1l,f,c
 15605   01467C  0EFF               	movlw	255
 15606   01467E  22E2               	addwfc	fsr1h,f,c
 15607   014680  0012               	return		;funcret
 15608   014682                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 15609                           	callstack 0
 15610                           
 15611 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 15612 ;; Defined at:
 15613 ;;		line 332 in file "can/can.c"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  address         2  [STACK] unsigned short 
 15616 ;;  txd             2  [STACK] unsigned short 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  spiTransferS    2  [STACK] unsigned short 
 15619 ;;  i               1  [STACK] unsigned char 
 15620 ;;  spiTransferE    1  [STACK] char 
 15621 ;; Return value:  Size  Location     Type
 15622 ;;                  1  [STACK] char 
 15623 ;; Registers used:
 15624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15634 ;;Total ram usage:        0 bytes
 15635 ;; Hardware stack levels used: 1
 15636 ;; Hardware stack levels required when called: 8
 15637 ;; This function calls:
 15638 ;;		_SpiTransfer
 15639 ;; This function is called by:
 15640 ;;		_DRV_CANFDSPI_ModuleEventEnable
 15641 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 15642 ;; This function uses a reentrant model
 15643 ;;
 15644                           
 15645                           	psect	text63
 15646   013BAC                     __ptext63:
 15647                           	callstack 0
 15648   013BAC                     _DRV_CANFDSPI_WriteHalfWord:
 15649                           	callstack 0
 15650                           
 15651                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15652   013BAC  52E6               	movf	postinc1,f,c
 15653   013BAE  52E6               	movf	postinc1,f,c
 15654   013BB0  52E6               	movf	postinc1,f,c
 15655   013BB2  52E6               	movf	postinc1,f,c
 15656   013BB4                     
 15657                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 15658   013BB4  0E04               	movlw	4
 15659   013BB6  6E34               	movwf	(btemp+10)^0,c
 15660   013BB8  0E00               	movlw	0
 15661   013BBA  6E35               	movwf	(btemp+11)^0,c
 15662                           
 15663                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15664   013BBC  0EFC               	movlw	-4
 15665   013BBE  C034  FFE3         	movff	btemp+10,plusw1
 15666   013BC2  0EFD               	movlw	-3
 15667   013BC4  C035  FFE3         	movff	btemp+11,plusw1
 15668   013BC8                     
 15669                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 15670                           ;stkvar	_address @ sp[(-4)+-2]
 15671   013BC8  0EFB               	movlw	251
 15672   013BCA  24E1               	addwf	fsr1l,w,c
 15673   013BCC  6ED9               	movwf	fsr2l,c
 15674   013BCE  0EFF               	movlw	255
 15675   013BD0  20E2               	addwfc	fsr1h,w,c
 15676   013BD2  6EDA               	movwf	fsr2h,c
 15677   013BD4  50DF               	movf	indf2,w,c
 15678   013BD6  0B0F               	andlw	15
 15679   013BD8  0F20               	addlw	32
 15680   013BDA  0101               	movlb	1	; () banked
 15681   013BDC  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 15682   013BDE                     
 15683                           ; BSR set to: 1
 15684                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 15685                           ;stkvar	_address @ sp[(-4)+-2]
 15686   013BDE  0EFA               	movlw	-6
 15687   013BE0  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 15688   013BE4                     
 15689                           ; BSR set to: 1
 15690                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 15691                           ;stkvar	_i @ sp[(-4)+2]
 15692   013BE4  0EFE               	movlw	-2
 15693   013BE6  6AE3               	clrf	plusw1,c
 15694   013BE8                     l4654:
 15695                           
 15696                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 15697                           ;stkvar	_i @ sp[(-4)+2]
 15698   013BE8  0EFE               	movlw	-2
 15699   013BEA  50E3               	movf	plusw1,w,c
 15700   013BEC  6E34               	movwf	(btemp+10)^0,c
 15701   013BEE  6A35               	clrf	(btemp+11)^0,c
 15702   013BF0  0E02               	movlw	low (_spiTransmitBuffer+2)
 15703   013BF2  2434               	addwf	(btemp+10)^0,w,c
 15704   013BF4  6ED9               	movwf	fsr2l,c
 15705   013BF6  0E01               	movlw	high (_spiTransmitBuffer+2)
 15706   013BF8  2035               	addwfc	(btemp+11)^0,w,c
 15707   013BFA  6EDA               	movwf	fsr2h,c
 15708                           
 15709                           ;stkvar	_i @ sp[(-4)+2]
 15710   013BFC  0EFE               	movlw	-2
 15711   013BFE  50E3               	movf	plusw1,w,c
 15712   013C00  0D08               	mullw	8
 15713   013C02  CFF3 F035          	movff	prodl,btemp+11
 15714                           
 15715                           ;stkvar	_txd @ sp[(-4)+-4]
 15716   013C06  0EF8               	movlw	-8
 15717   013C08  CFE3 F032          	movff	plusw1,btemp+8
 15718   013C0C  0EF9               	movlw	-7
 15719   013C0E  CFE3 F033          	movff	plusw1,btemp+9
 15720   013C12  2A35               	incf	(btemp+11)^0,f,c
 15721   013C14  EF0F  F09E         	goto	u2324
 15722   013C18                     u2325:
 15723   013C18  90D8               	bcf	status,0,c
 15724   013C1A  3233               	rrcf	(btemp+9)^0,f,c
 15725   013C1C  3232               	rrcf	(btemp+8)^0,f,c
 15726   013C1E                     u2324:
 15727   013C1E  2E35               	decfsz	(btemp+11)^0,f,c
 15728   013C20  EF0C  F09E         	goto	u2325
 15729   013C24  5032               	movf	(btemp+8)^0,w,c
 15730   013C26  6EDF               	movwf	indf2,c
 15731   013C28                     
 15732                           ;can/can.c: 346:     }
 15733                           ;stkvar	_i @ sp[(-4)+2]
 15734   013C28  0EFE               	movlw	-2
 15735   013C2A  2AE3               	incf	plusw1,f,c
 15736   013C2C                     
 15737                           ;stkvar	_i @ sp[(-4)+2]
 15738   013C2C  0EFE               	movlw	-2
 15739   013C2E  CFE3 F02A          	movff	plusw1,btemp
 15740   013C32  0E01               	movlw	1
 15741   013C34  642A               	cpfsgt	btemp^0,c
 15742   013C36  EF1F  F09E         	goto	u2331
 15743   013C3A  EF21  F09E         	goto	u2330
 15744   013C3E                     u2331:
 15745   013C3E  EFF4  F09D         	goto	l4654
 15746   013C42                     u2330:
 15747   013C42                     
 15748                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 15749                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 15750   013C42  0EFC               	movlw	-4
 15751   013C44  CFE3 FFE6          	movff	plusw1,postinc1
 15752   013C48  CFE3 FFE6          	movff	plusw1,postinc1
 15753   013C4C  0E00               	movlw	low _spiReceiveBuffer
 15754   013C4E  6EE6               	movwf	postinc1,c
 15755   013C50  0E02               	movlw	high _spiReceiveBuffer
 15756   013C52  6EE6               	movwf	postinc1,c
 15757   013C54  0E00               	movlw	low _spiTransmitBuffer
 15758   013C56  6EE6               	movwf	postinc1,c
 15759   013C58  0E01               	movlw	high _spiTransmitBuffer
 15760   013C5A  6EE6               	movwf	postinc1,c
 15761   013C5C  EC3B  F09E         	call	_SpiTransfer	;wreg free
 15762                           
 15763                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15764   013C60  0EFF               	movlw	-1
 15765   013C62  C02A  FFE3         	movff	btemp,plusw1
 15766   013C66                     
 15767                           ;can/can.c: 350:     return spiTransferError;
 15768                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 15769   013C66  0EFF               	movlw	-1
 15770   013C68  CFE3 F02A          	movff	plusw1,btemp
 15771   013C6C                     
 15772                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 15773   013C6C  0EF8               	movlw	248
 15774   013C6E  26E1               	addwf	fsr1l,f,c
 15775   013C70  0EFF               	movlw	255
 15776   013C72  22E2               	addwfc	fsr1h,f,c
 15777   013C74  0012               	return		;funcret
 15778   013C76                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 15779                           	callstack 0
 15780                           
 15781 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 15782 ;; Defined at:
 15783 ;;		line 474 in file "can/can.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15786 ;;		 -> config(3), 
 15787 ;; Auto vars:     Size  Location     Type
 15788 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15789 ;; Return value:  Size  Location     Type
 15790 ;;                  1  [STACK] char 
 15791 ;; Registers used:
 15792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 15793 ;; Tracked objects:
 15794 ;;		On entry : 0/0
 15795 ;;		On exit  : 0/0
 15796 ;;		Unchanged: 0/0
 15797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15802 ;;Total ram usage:        0 bytes
 15803 ;; Hardware stack levels used: 1
 15804 ;; Hardware stack levels required when called: 7
 15805 ;; This function calls:
 15806 ;;		Nothing
 15807 ;; This function is called by:
 15808 ;;		_CanInit
 15809 ;; This function uses a reentrant model
 15810 ;;
 15811                           
 15812                           	psect	text64
 15813   0119BA                     __ptext64:
 15814                           	callstack 0
 15815   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 15816                           	callstack 0
 15817                           
 15818                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15819   0119BA  52E6               	movf	postinc1,f,c
 15820   0119BC  52E6               	movf	postinc1,f,c
 15821   0119BE  52E6               	movf	postinc1,f,c
 15822   0119C0  52E6               	movf	postinc1,f,c
 15823   0119C2                     
 15824                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 15825   0119C2  0E8D               	movlw	low _canControlResetValues
 15826   0119C4  6EF6               	movwf	tblptrl,c
 15827   0119C6                     	if	1	;There is more than 1 active tblptr byte
 15828   0119C6  0EFF               	movlw	high _canControlResetValues
 15829   0119C8  6EF7               	movwf	tblptrh,c
 15830   0119CA                     	endif
 15831   0119CA                     	if	1	;There are 3 active tblptr bytes
 15832   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15833   0119CC  6EF8               	movwf	tblptru,c
 15834   0119CE                     	endif
 15835   0119CE  0009               	tblrd		*+
 15836   0119D0  CFF5 F032          	movff	tablat,btemp+8
 15837   0119D4  0009               	tblrd		*+
 15838   0119D6  CFF5 F033          	movff	tablat,btemp+9
 15839   0119DA  0009               	tblrd		*+
 15840   0119DC  CFF5 F034          	movff	tablat,btemp+10
 15841   0119E0  0009               	tblrd		*+
 15842   0119E2  CFF5 F035          	movff	tablat,btemp+11
 15843                           
 15844                           ;stkvar	_ciCon @ sp[(-4)+0]
 15845   0119E6  0EFC               	movlw	-4
 15846   0119E8  C032  FFE3         	movff	btemp+8,plusw1
 15847   0119EC  0EFD               	movlw	-3
 15848   0119EE  C033  FFE3         	movff	btemp+9,plusw1
 15849   0119F2  0EFE               	movlw	-2
 15850   0119F4  C034  FFE3         	movff	btemp+10,plusw1
 15851   0119F8  0EFF               	movlw	-1
 15852   0119FA  C035  FFE3         	movff	btemp+11,plusw1
 15853   0119FE                     
 15854                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 15855                           ;stkvar	_ciCon @ sp[(-4)+0]
 15856   0119FE  50E1               	movf	fsr1l,w,c
 15857   011A00  0FFC               	addlw	-4
 15858   011A02  6ED9               	movwf	fsr2l,c
 15859   011A04  50E2               	movf	fsr1h,w,c
 15860   011A06  6EDA               	movwf	fsr2h,c
 15861   011A08  0EFF               	movlw	255
 15862   011A0A  22DA               	addwfc	fsr2h,f,c
 15863   011A0C  50DF               	movf	223,w,c
 15864   011A0E  0B1F               	andlw	31
 15865   011A10  6E35               	movwf	(btemp+11)^0,c
 15866                           
 15867                           ;stkvar	_config @ sp[(-4)+-2]
 15868   011A12  0EFA               	movlw	-6
 15869   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 15870   011A18  0EFB               	movlw	-5
 15871   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 15872   011A1E  50DF               	movf	223,w,c
 15873   011A20  1835               	xorwf	(btemp+11)^0,w,c
 15874   011A22  0BE0               	andlw	-32
 15875   011A24  1835               	xorwf	(btemp+11)^0,w,c
 15876   011A26  6EDF               	movwf	223,c
 15877   011A28                     
 15878                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 15879                           ;stkvar	_ciCon @ sp[(-4)+0]
 15880   011A28  50E1               	movf	fsr1l,w,c
 15881   011A2A  0FFC               	addlw	-4
 15882   011A2C  6ED9               	movwf	fsr2l,c
 15883   011A2E  50E2               	movf	fsr1h,w,c
 15884   011A30  6EDA               	movwf	fsr2h,c
 15885   011A32  0EFF               	movlw	255
 15886   011A34  22DA               	addwfc	fsr2h,f,c
 15887                           
 15888                           ;stkvar	_config @ sp[(-4)+-2]
 15889   011A36  0EFA               	movlw	-6
 15890   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 15891   011A3C  0EFB               	movlw	-5
 15892   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 15893   011A42  9AEF               	bcf	indf0,5,c
 15894   011A44  AADF               	btfss	indf2,5,c
 15895   011A46  EF26  F08D         	goto	u815
 15896   011A4A  8AEF               	bsf	indf0,5,c
 15897   011A4C                     u815:
 15898   011A4C                     
 15899                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 15900                           ;stkvar	_ciCon @ sp[(-4)+0]
 15901   011A4C  50E1               	movf	fsr1l,w,c
 15902   011A4E  0FFC               	addlw	-4
 15903   011A50  6ED9               	movwf	fsr2l,c
 15904   011A52  50E2               	movf	fsr1h,w,c
 15905   011A54  6EDA               	movwf	fsr2h,c
 15906   011A56  0EFF               	movlw	255
 15907   011A58  22DA               	addwfc	fsr2h,f,c
 15908                           
 15909                           ;stkvar	_config @ sp[(-4)+-2]
 15910   011A5A  0EFA               	movlw	-6
 15911   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 15912   011A60  0EFB               	movlw	-5
 15913   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 15914   011A66  9CEF               	bcf	indf0,6,c
 15915   011A68  ACDF               	btfss	indf2,6,c
 15916   011A6A  EF38  F08D         	goto	u825
 15917   011A6E  8CEF               	bsf	indf0,6,c
 15918   011A70                     u825:
 15919   011A70                     
 15920                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15921                           ;stkvar	_ciCon @ sp[(-4)+0]
 15922   011A70  0EFD               	movlw	253
 15923   011A72  24E1               	addwf	fsr1l,w,c
 15924   011A74  6ED9               	movwf	fsr2l,c
 15925   011A76  0EFF               	movlw	255
 15926   011A78  20E2               	addwfc	fsr1h,w,c
 15927   011A7A  6EDA               	movwf	fsr2h,c
 15928                           
 15929                           ;stkvar	_config @ sp[(-4)+-2]
 15930   011A7C  0EFA               	movlw	-6
 15931   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15932   011A82  0EFB               	movlw	-5
 15933   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15934   011A88  9EEF               	bcf	indf0,7,c
 15935   011A8A  A0DF               	btfss	indf2,0,c
 15936   011A8C  EF49  F08D         	goto	u835
 15937   011A90  8EEF               	bsf	indf0,7,c
 15938   011A92                     u835:
 15939   011A92                     
 15940                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15941                           ;stkvar	_ciCon @ sp[(-4)+0]
 15942   011A92  0EFD               	movlw	253
 15943   011A94  24E1               	addwf	fsr1l,w,c
 15944   011A96  6ED9               	movwf	fsr2l,c
 15945   011A98  0EFF               	movlw	255
 15946   011A9A  20E2               	addwfc	fsr1h,w,c
 15947   011A9C  6EDA               	movwf	fsr2h,c
 15948   011A9E  30DF               	rrcf	223,w,c
 15949   011AA0  0B03               	andlw	3
 15950   011AA2  6E35               	movwf	(btemp+11)^0,c
 15951                           
 15952                           ;stkvar	_config @ sp[(-4)+-2]
 15953   011AA4  0EFA               	movlw	-6
 15954   011AA6  CFE3 F032          	movff	plusw1,btemp+8
 15955   011AAA  0EFB               	movlw	-5
 15956   011AAC  CFE3 F033          	movff	plusw1,btemp+9
 15957   011AB0  0E01               	movlw	1
 15958   011AB2  2432               	addwf	(btemp+8)^0,w,c
 15959   011AB4  6ED9               	movwf	fsr2l,c
 15960   011AB6  0E00               	movlw	0
 15961   011AB8  2033               	addwfc	(btemp+9)^0,w,c
 15962   011ABA  6EDA               	movwf	fsr2h,c
 15963   011ABC  50DF               	movf	223,w,c
 15964   011ABE  1835               	xorwf	(btemp+11)^0,w,c
 15965   011AC0  0BFC               	andlw	-4
 15966   011AC2  1835               	xorwf	(btemp+11)^0,w,c
 15967   011AC4  6EDF               	movwf	223,c
 15968   011AC6                     
 15969                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15970                           ;stkvar	_ciCon @ sp[(-4)+0]
 15971   011AC6  0EFD               	movlw	253
 15972   011AC8  24E1               	addwf	fsr1l,w,c
 15973   011ACA  6ED9               	movwf	fsr2l,c
 15974   011ACC  0EFF               	movlw	255
 15975   011ACE  20E2               	addwfc	fsr1h,w,c
 15976   011AD0  6EDA               	movwf	fsr2h,c
 15977                           
 15978                           ;stkvar	_config @ sp[(-4)+-2]
 15979   011AD2  0EFA               	movlw	-6
 15980   011AD4  CFE3 F034          	movff	plusw1,btemp+10
 15981   011AD8  0EFB               	movlw	-5
 15982   011ADA  CFE3 F035          	movff	plusw1,btemp+11
 15983   011ADE  0E01               	movlw	1
 15984   011AE0  2434               	addwf	(btemp+10)^0,w,c
 15985   011AE2  6EE9               	movwf	fsr0l,c
 15986   011AE4  0E00               	movlw	0
 15987   011AE6  2035               	addwfc	(btemp+11)^0,w,c
 15988   011AE8  6EEA               	movwf	fsr0h,c
 15989   011AEA  94EF               	bcf	indf0,2,c
 15990   011AEC  A8DF               	btfss	indf2,4,c
 15991   011AEE  EF7A  F08D         	goto	u845
 15992   011AF2  84EF               	bsf	indf0,2,c
 15993   011AF4                     u845:
 15994   011AF4                     
 15995                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15996                           ;stkvar	_ciCon @ sp[(-4)+0]
 15997   011AF4  0EFE               	movlw	254
 15998   011AF6  24E1               	addwf	fsr1l,w,c
 15999   011AF8  6ED9               	movwf	fsr2l,c
 16000   011AFA  0EFF               	movlw	255
 16001   011AFC  20E2               	addwfc	fsr1h,w,c
 16002   011AFE  6EDA               	movwf	fsr2h,c
 16003                           
 16004                           ;stkvar	_config @ sp[(-4)+-2]
 16005   011B00  0EFA               	movlw	-6
 16006   011B02  CFE3 F034          	movff	plusw1,btemp+10
 16007   011B06  0EFB               	movlw	-5
 16008   011B08  CFE3 F035          	movff	plusw1,btemp+11
 16009   011B0C  0E01               	movlw	1
 16010   011B0E  2434               	addwf	(btemp+10)^0,w,c
 16011   011B10  6EE9               	movwf	fsr0l,c
 16012   011B12  0E00               	movlw	0
 16013   011B14  2035               	addwfc	(btemp+11)^0,w,c
 16014   011B16  6EEA               	movwf	fsr0h,c
 16015   011B18  96EF               	bcf	indf0,3,c
 16016   011B1A  A0DF               	btfss	indf2,0,c
 16017   011B1C  EF91  F08D         	goto	u855
 16018   011B20  86EF               	bsf	indf0,3,c
 16019   011B22                     u855:
 16020   011B22                     
 16021                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 16022                           ;stkvar	_ciCon @ sp[(-4)+0]
 16023   011B22  0EFE               	movlw	254
 16024   011B24  24E1               	addwf	fsr1l,w,c
 16025   011B26  6ED9               	movwf	fsr2l,c
 16026   011B28  0EFF               	movlw	255
 16027   011B2A  20E2               	addwfc	fsr1h,w,c
 16028   011B2C  6EDA               	movwf	fsr2h,c
 16029                           
 16030                           ;stkvar	_config @ sp[(-4)+-2]
 16031   011B2E  0EFA               	movlw	-6
 16032   011B30  CFE3 F034          	movff	plusw1,btemp+10
 16033   011B34  0EFB               	movlw	-5
 16034   011B36  CFE3 F035          	movff	plusw1,btemp+11
 16035   011B3A  0E01               	movlw	1
 16036   011B3C  2434               	addwf	(btemp+10)^0,w,c
 16037   011B3E  6EE9               	movwf	fsr0l,c
 16038   011B40  0E00               	movlw	0
 16039   011B42  2035               	addwfc	(btemp+11)^0,w,c
 16040   011B44  6EEA               	movwf	fsr0h,c
 16041   011B46  98EF               	bcf	indf0,4,c
 16042   011B48  A2DF               	btfss	indf2,1,c
 16043   011B4A  EFA8  F08D         	goto	u865
 16044   011B4E  88EF               	bsf	indf0,4,c
 16045   011B50                     u865:
 16046   011B50                     
 16047                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 16048                           ;stkvar	_ciCon @ sp[(-4)+0]
 16049   011B50  0EFE               	movlw	254
 16050   011B52  24E1               	addwf	fsr1l,w,c
 16051   011B54  6ED9               	movwf	fsr2l,c
 16052   011B56  0EFF               	movlw	255
 16053   011B58  20E2               	addwfc	fsr1h,w,c
 16054   011B5A  6EDA               	movwf	fsr2h,c
 16055                           
 16056                           ;stkvar	_config @ sp[(-4)+-2]
 16057   011B5C  0EFA               	movlw	-6
 16058   011B5E  CFE3 F034          	movff	plusw1,btemp+10
 16059   011B62  0EFB               	movlw	-5
 16060   011B64  CFE3 F035          	movff	plusw1,btemp+11
 16061   011B68  0E01               	movlw	1
 16062   011B6A  2434               	addwf	(btemp+10)^0,w,c
 16063   011B6C  6EE9               	movwf	fsr0l,c
 16064   011B6E  0E00               	movlw	0
 16065   011B70  2035               	addwfc	(btemp+11)^0,w,c
 16066   011B72  6EEA               	movwf	fsr0h,c
 16067   011B74  9AEF               	bcf	indf0,5,c
 16068   011B76  A4DF               	btfss	indf2,2,c
 16069   011B78  EFBF  F08D         	goto	u875
 16070   011B7C  8AEF               	bsf	indf0,5,c
 16071   011B7E                     u875:
 16072   011B7E                     
 16073                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 16074                           ;stkvar	_ciCon @ sp[(-4)+0]
 16075   011B7E  0EFE               	movlw	254
 16076   011B80  24E1               	addwf	fsr1l,w,c
 16077   011B82  6ED9               	movwf	fsr2l,c
 16078   011B84  0EFF               	movlw	255
 16079   011B86  20E2               	addwfc	fsr1h,w,c
 16080   011B88  6EDA               	movwf	fsr2h,c
 16081                           
 16082                           ;stkvar	_config @ sp[(-4)+-2]
 16083   011B8A  0EFA               	movlw	-6
 16084   011B8C  CFE3 F034          	movff	plusw1,btemp+10
 16085   011B90  0EFB               	movlw	-5
 16086   011B92  CFE3 F035          	movff	plusw1,btemp+11
 16087   011B96  0E01               	movlw	1
 16088   011B98  2434               	addwf	(btemp+10)^0,w,c
 16089   011B9A  6EE9               	movwf	fsr0l,c
 16090   011B9C  0E00               	movlw	0
 16091   011B9E  2035               	addwfc	(btemp+11)^0,w,c
 16092   011BA0  6EEA               	movwf	fsr0h,c
 16093   011BA2  9CEF               	bcf	indf0,6,c
 16094   011BA4  A6DF               	btfss	indf2,3,c
 16095   011BA6  EFD6  F08D         	goto	u885
 16096   011BAA  8CEF               	bsf	indf0,6,c
 16097   011BAC                     u885:
 16098   011BAC                     
 16099                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 16100                           ;stkvar	_ciCon @ sp[(-4)+0]
 16101   011BAC  0EFE               	movlw	254
 16102   011BAE  24E1               	addwf	fsr1l,w,c
 16103   011BB0  6ED9               	movwf	fsr2l,c
 16104   011BB2  0EFF               	movlw	255
 16105   011BB4  20E2               	addwfc	fsr1h,w,c
 16106   011BB6  6EDA               	movwf	fsr2h,c
 16107                           
 16108                           ;stkvar	_config @ sp[(-4)+-2]
 16109   011BB8  0EFA               	movlw	-6
 16110   011BBA  CFE3 F034          	movff	plusw1,btemp+10
 16111   011BBE  0EFB               	movlw	-5
 16112   011BC0  CFE3 F035          	movff	plusw1,btemp+11
 16113   011BC4  0E01               	movlw	1
 16114   011BC6  2434               	addwf	(btemp+10)^0,w,c
 16115   011BC8  6EE9               	movwf	fsr0l,c
 16116   011BCA  0E00               	movlw	0
 16117   011BCC  2035               	addwfc	(btemp+11)^0,w,c
 16118   011BCE  6EEA               	movwf	fsr0h,c
 16119   011BD0  9EEF               	bcf	indf0,7,c
 16120   011BD2  A8DF               	btfss	indf2,4,c
 16121   011BD4  EFED  F08D         	goto	u895
 16122   011BD8  8EEF               	bsf	indf0,7,c
 16123   011BDA                     u895:
 16124   011BDA                     
 16125                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 16126                           ;stkvar	_ciCon @ sp[(-4)+0]
 16127   011BDA  0EFF               	movlw	255
 16128   011BDC  24E1               	addwf	fsr1l,w,c
 16129   011BDE  6ED9               	movwf	fsr2l,c
 16130   011BE0  0EFF               	movlw	255
 16131   011BE2  20E2               	addwfc	fsr1h,w,c
 16132   011BE4  6EDA               	movwf	fsr2h,c
 16133   011BE6  38DF               	swapf	223,w,c
 16134   011BE8  0B0F               	andlw	15
 16135   011BEA  6E35               	movwf	(btemp+11)^0,c
 16136                           
 16137                           ;stkvar	_config @ sp[(-4)+-2]
 16138   011BEC  0EFA               	movlw	-6
 16139   011BEE  CFE3 F032          	movff	plusw1,btemp+8
 16140   011BF2  0EFB               	movlw	-5
 16141   011BF4  CFE3 F033          	movff	plusw1,btemp+9
 16142   011BF8  0E02               	movlw	2
 16143   011BFA  2432               	addwf	(btemp+8)^0,w,c
 16144   011BFC  6ED9               	movwf	fsr2l,c
 16145   011BFE  0E00               	movlw	0
 16146   011C00  2033               	addwfc	(btemp+9)^0,w,c
 16147   011C02  6EDA               	movwf	fsr2h,c
 16148   011C04  50DF               	movf	223,w,c
 16149   011C06  1835               	xorwf	(btemp+11)^0,w,c
 16150   011C08  0BF0               	andlw	-16
 16151   011C0A  1835               	xorwf	(btemp+11)^0,w,c
 16152   011C0C  6EDF               	movwf	223,c
 16153   011C0E                     
 16154                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 16155   011C0E  0EFA               	movlw	250
 16156   011C10  26E1               	addwf	fsr1l,f,c
 16157   011C12  0EFF               	movlw	255
 16158   011C14  22E2               	addwfc	fsr1h,f,c
 16159   011C16  0012               	return		;funcret
 16160   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 16161                           	callstack 0
 16162                           
 16163 ;; *************** function _DRV_CANFDSPI_Configure *****************
 16164 ;; Defined at:
 16165 ;;		line 446 in file "can/can.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 16168 ;;		 -> config(3), 
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;  ciCon           4  [STACK] struct _REG_CiCON
 16171 ;;  spiTransferE    1    0        char 
 16172 ;; Return value:  Size  Location     Type
 16173 ;;                  1  [STACK] char 
 16174 ;; Registers used:
 16175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 16176 ;; Tracked objects:
 16177 ;;		On entry : 0/0
 16178 ;;		On exit  : 0/0
 16179 ;;		Unchanged: 0/0
 16180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16185 ;;Total ram usage:        0 bytes
 16186 ;; Hardware stack levels used: 1
 16187 ;; Hardware stack levels required when called: 9
 16188 ;; This function calls:
 16189 ;;		_DRV_CANFDSPI_WriteWord
 16190 ;; This function is called by:
 16191 ;;		_CanInit
 16192 ;; This function uses a reentrant model
 16193 ;;
 16194                           
 16195                           	psect	text65
 16196   01173A                     __ptext65:
 16197                           	callstack 0
 16198   01173A                     _DRV_CANFDSPI_Configure:
 16199                           	callstack 0
 16200                           
 16201                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16202   01173A  52E6               	movf	postinc1,f,c
 16203   01173C  52E6               	movf	postinc1,f,c
 16204   01173E  52E6               	movf	postinc1,f,c
 16205   011740  52E6               	movf	postinc1,f,c
 16206   011742                     
 16207                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 16208   011742  0E8D               	movlw	low _canControlResetValues
 16209   011744  6EF6               	movwf	tblptrl,c
 16210   011746                     	if	1	;There is more than 1 active tblptr byte
 16211   011746  0EFF               	movlw	high _canControlResetValues
 16212   011748  6EF7               	movwf	tblptrh,c
 16213   01174A                     	endif
 16214   01174A                     	if	1	;There are 3 active tblptr bytes
 16215   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 16216   01174C  6EF8               	movwf	tblptru,c
 16217   01174E                     	endif
 16218   01174E  0009               	tblrd		*+
 16219   011750  CFF5 F032          	movff	tablat,btemp+8
 16220   011754  0009               	tblrd		*+
 16221   011756  CFF5 F033          	movff	tablat,btemp+9
 16222   01175A  0009               	tblrd		*+
 16223   01175C  CFF5 F034          	movff	tablat,btemp+10
 16224   011760  0009               	tblrd		*+
 16225   011762  CFF5 F035          	movff	tablat,btemp+11
 16226                           
 16227                           ;stkvar	_ciCon @ sp[(-4)+0]
 16228   011766  0EFC               	movlw	-4
 16229   011768  C032  FFE3         	movff	btemp+8,plusw1
 16230   01176C  0EFD               	movlw	-3
 16231   01176E  C033  FFE3         	movff	btemp+9,plusw1
 16232   011772  0EFE               	movlw	-2
 16233   011774  C034  FFE3         	movff	btemp+10,plusw1
 16234   011778  0EFF               	movlw	-1
 16235   01177A  C035  FFE3         	movff	btemp+11,plusw1
 16236   01177E                     
 16237                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 16238                           ;stkvar	_config @ sp[(-4)+-2]
 16239   01177E  0EFA               	movlw	-6
 16240   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 16241   011784  0EFB               	movlw	-5
 16242   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 16243   01178A  50DF               	movf	223,w,c
 16244   01178C  0B1F               	andlw	31
 16245   01178E  6E35               	movwf	(btemp+11)^0,c
 16246                           
 16247                           ;stkvar	_ciCon @ sp[(-4)+0]
 16248   011790  50E1               	movf	fsr1l,w,c
 16249   011792  0FFC               	addlw	-4
 16250   011794  6ED9               	movwf	fsr2l,c
 16251   011796  50E2               	movf	fsr1h,w,c
 16252   011798  6EDA               	movwf	fsr2h,c
 16253   01179A  0EFF               	movlw	255
 16254   01179C  22DA               	addwfc	fsr2h,f,c
 16255   01179E  50DF               	movf	223,w,c
 16256   0117A0  1835               	xorwf	(btemp+11)^0,w,c
 16257   0117A2  0BE0               	andlw	-32
 16258   0117A4  1835               	xorwf	(btemp+11)^0,w,c
 16259   0117A6  6EDF               	movwf	223,c
 16260   0117A8                     
 16261                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 16262                           ;stkvar	_config @ sp[(-4)+-2]
 16263   0117A8  0EFA               	movlw	-6
 16264   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 16265   0117AE  0EFB               	movlw	-5
 16266   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 16267                           
 16268                           ;stkvar	_ciCon @ sp[(-4)+0]
 16269   0117B4  50E1               	movf	fsr1l,w,c
 16270   0117B6  0FFC               	addlw	-4
 16271   0117B8  6EE9               	movwf	fsr0l,c
 16272   0117BA  50E2               	movf	fsr1h,w,c
 16273   0117BC  6EEA               	movwf	fsr0h,c
 16274   0117BE  0EFF               	movlw	255
 16275   0117C0  22EA               	addwfc	fsr0h,f,c
 16276   0117C2  9AEF               	bcf	indf0,5,c
 16277   0117C4  AADF               	btfss	indf2,5,c
 16278   0117C6  EFE6  F08B         	goto	u2465
 16279   0117CA  8AEF               	bsf	indf0,5,c
 16280   0117CC                     u2465:
 16281   0117CC                     
 16282                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 16283                           ;stkvar	_config @ sp[(-4)+-2]
 16284   0117CC  0EFA               	movlw	-6
 16285   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 16286   0117D2  0EFB               	movlw	-5
 16287   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 16288                           
 16289                           ;stkvar	_ciCon @ sp[(-4)+0]
 16290   0117D8  50E1               	movf	fsr1l,w,c
 16291   0117DA  0FFC               	addlw	-4
 16292   0117DC  6EE9               	movwf	fsr0l,c
 16293   0117DE  50E2               	movf	fsr1h,w,c
 16294   0117E0  6EEA               	movwf	fsr0h,c
 16295   0117E2  0EFF               	movlw	255
 16296   0117E4  22EA               	addwfc	fsr0h,f,c
 16297   0117E6  9CEF               	bcf	indf0,6,c
 16298   0117E8  ACDF               	btfss	indf2,6,c
 16299   0117EA  EFF8  F08B         	goto	u2475
 16300   0117EE  8CEF               	bsf	indf0,6,c
 16301   0117F0                     u2475:
 16302   0117F0                     
 16303                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 16304                           ;stkvar	_config @ sp[(-4)+-2]
 16305   0117F0  0EFA               	movlw	-6
 16306   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 16307   0117F6  0EFB               	movlw	-5
 16308   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 16309                           
 16310                           ;stkvar	_ciCon @ sp[(-4)+0]
 16311   0117FC  0EFD               	movlw	253
 16312   0117FE  24E1               	addwf	fsr1l,w,c
 16313   011800  6EE9               	movwf	fsr0l,c
 16314   011802  0EFF               	movlw	255
 16315   011804  20E2               	addwfc	fsr1h,w,c
 16316   011806  6EEA               	movwf	fsr0h,c
 16317   011808  90EF               	bcf	indf0,0,c
 16318   01180A  AEDF               	btfss	indf2,7,c
 16319   01180C  EF09  F08C         	goto	u2485
 16320   011810  80EF               	bsf	indf0,0,c
 16321   011812                     u2485:
 16322   011812                     
 16323                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 16324                           ;stkvar	_config @ sp[(-4)+-2]
 16325   011812  0EFA               	movlw	-6
 16326   011814  CFE3 F034          	movff	plusw1,btemp+10
 16327   011818  0EFB               	movlw	-5
 16328   01181A  CFE3 F035          	movff	plusw1,btemp+11
 16329   01181E  0E01               	movlw	1
 16330   011820  2434               	addwf	(btemp+10)^0,w,c
 16331   011822  6ED9               	movwf	fsr2l,c
 16332   011824  0E00               	movlw	0
 16333   011826  2035               	addwfc	(btemp+11)^0,w,c
 16334   011828  6EDA               	movwf	fsr2h,c
 16335   01182A  50DF               	movf	223,w,c
 16336   01182C  0B03               	andlw	3
 16337   01182E  6E35               	movwf	(btemp+11)^0,c
 16338                           
 16339                           ;stkvar	_ciCon @ sp[(-4)+0]
 16340   011830  0EFD               	movlw	253
 16341   011832  24E1               	addwf	fsr1l,w,c
 16342   011834  6ED9               	movwf	fsr2l,c
 16343   011836  0EFF               	movlw	255
 16344   011838  20E2               	addwfc	fsr1h,w,c
 16345   01183A  6EDA               	movwf	fsr2h,c
 16346   01183C  4635               	rlncf	(btemp+11)^0,f,c
 16347   01183E  50DF               	movf	223,w,c
 16348   011840  1835               	xorwf	(btemp+11)^0,w,c
 16349   011842  0BF9               	andlw	-7
 16350   011844  1835               	xorwf	(btemp+11)^0,w,c
 16351   011846  6EDF               	movwf	223,c
 16352   011848                     
 16353                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 16354                           ;stkvar	_config @ sp[(-4)+-2]
 16355   011848  0EFA               	movlw	-6
 16356   01184A  CFE3 F034          	movff	plusw1,btemp+10
 16357   01184E  0EFB               	movlw	-5
 16358   011850  CFE3 F035          	movff	plusw1,btemp+11
 16359   011854  0E01               	movlw	1
 16360   011856  2434               	addwf	(btemp+10)^0,w,c
 16361   011858  6ED9               	movwf	fsr2l,c
 16362   01185A  0E00               	movlw	0
 16363   01185C  2035               	addwfc	(btemp+11)^0,w,c
 16364   01185E  6EDA               	movwf	fsr2h,c
 16365                           
 16366                           ;stkvar	_ciCon @ sp[(-4)+0]
 16367   011860  0EFD               	movlw	253
 16368   011862  24E1               	addwf	fsr1l,w,c
 16369   011864  6EE9               	movwf	fsr0l,c
 16370   011866  0EFF               	movlw	255
 16371   011868  20E2               	addwfc	fsr1h,w,c
 16372   01186A  6EEA               	movwf	fsr0h,c
 16373   01186C  98EF               	bcf	indf0,4,c
 16374   01186E  A4DF               	btfss	indf2,2,c
 16375   011870  EF3B  F08C         	goto	u2495
 16376   011874  88EF               	bsf	indf0,4,c
 16377   011876                     u2495:
 16378   011876                     
 16379                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 16380                           ;stkvar	_config @ sp[(-4)+-2]
 16381   011876  0EFA               	movlw	-6
 16382   011878  CFE3 F034          	movff	plusw1,btemp+10
 16383   01187C  0EFB               	movlw	-5
 16384   01187E  CFE3 F035          	movff	plusw1,btemp+11
 16385   011882  0E01               	movlw	1
 16386   011884  2434               	addwf	(btemp+10)^0,w,c
 16387   011886  6ED9               	movwf	fsr2l,c
 16388   011888  0E00               	movlw	0
 16389   01188A  2035               	addwfc	(btemp+11)^0,w,c
 16390   01188C  6EDA               	movwf	fsr2h,c
 16391                           
 16392                           ;stkvar	_ciCon @ sp[(-4)+0]
 16393   01188E  0EFE               	movlw	254
 16394   011890  24E1               	addwf	fsr1l,w,c
 16395   011892  6EE9               	movwf	fsr0l,c
 16396   011894  0EFF               	movlw	255
 16397   011896  20E2               	addwfc	fsr1h,w,c
 16398   011898  6EEA               	movwf	fsr0h,c
 16399   01189A  90EF               	bcf	indf0,0,c
 16400   01189C  A6DF               	btfss	indf2,3,c
 16401   01189E  EF52  F08C         	goto	u2505
 16402   0118A2  80EF               	bsf	indf0,0,c
 16403   0118A4                     u2505:
 16404   0118A4                     
 16405                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 16406                           ;stkvar	_config @ sp[(-4)+-2]
 16407   0118A4  0EFA               	movlw	-6
 16408   0118A6  CFE3 F034          	movff	plusw1,btemp+10
 16409   0118AA  0EFB               	movlw	-5
 16410   0118AC  CFE3 F035          	movff	plusw1,btemp+11
 16411   0118B0  0E01               	movlw	1
 16412   0118B2  2434               	addwf	(btemp+10)^0,w,c
 16413   0118B4  6ED9               	movwf	fsr2l,c
 16414   0118B6  0E00               	movlw	0
 16415   0118B8  2035               	addwfc	(btemp+11)^0,w,c
 16416   0118BA  6EDA               	movwf	fsr2h,c
 16417                           
 16418                           ;stkvar	_ciCon @ sp[(-4)+0]
 16419   0118BC  0EFE               	movlw	254
 16420   0118BE  24E1               	addwf	fsr1l,w,c
 16421   0118C0  6EE9               	movwf	fsr0l,c
 16422   0118C2  0EFF               	movlw	255
 16423   0118C4  20E2               	addwfc	fsr1h,w,c
 16424   0118C6  6EEA               	movwf	fsr0h,c
 16425   0118C8  92EF               	bcf	indf0,1,c
 16426   0118CA  A8DF               	btfss	indf2,4,c
 16427   0118CC  EF69  F08C         	goto	u2515
 16428   0118D0  82EF               	bsf	indf0,1,c
 16429   0118D2                     u2515:
 16430   0118D2                     
 16431                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 16432                           ;stkvar	_config @ sp[(-4)+-2]
 16433   0118D2  0EFA               	movlw	-6
 16434   0118D4  CFE3 F034          	movff	plusw1,btemp+10
 16435   0118D8  0EFB               	movlw	-5
 16436   0118DA  CFE3 F035          	movff	plusw1,btemp+11
 16437   0118DE  0E01               	movlw	1
 16438   0118E0  2434               	addwf	(btemp+10)^0,w,c
 16439   0118E2  6ED9               	movwf	fsr2l,c
 16440   0118E4  0E00               	movlw	0
 16441   0118E6  2035               	addwfc	(btemp+11)^0,w,c
 16442   0118E8  6EDA               	movwf	fsr2h,c
 16443                           
 16444                           ;stkvar	_ciCon @ sp[(-4)+0]
 16445   0118EA  0EFE               	movlw	254
 16446   0118EC  24E1               	addwf	fsr1l,w,c
 16447   0118EE  6EE9               	movwf	fsr0l,c
 16448   0118F0  0EFF               	movlw	255
 16449   0118F2  20E2               	addwfc	fsr1h,w,c
 16450   0118F4  6EEA               	movwf	fsr0h,c
 16451   0118F6  94EF               	bcf	indf0,2,c
 16452   0118F8  AADF               	btfss	indf2,5,c
 16453   0118FA  EF80  F08C         	goto	u2525
 16454   0118FE  84EF               	bsf	indf0,2,c
 16455   011900                     u2525:
 16456   011900                     
 16457                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 16458                           ;stkvar	_config @ sp[(-4)+-2]
 16459   011900  0EFA               	movlw	-6
 16460   011902  CFE3 F034          	movff	plusw1,btemp+10
 16461   011906  0EFB               	movlw	-5
 16462   011908  CFE3 F035          	movff	plusw1,btemp+11
 16463   01190C  0E01               	movlw	1
 16464   01190E  2434               	addwf	(btemp+10)^0,w,c
 16465   011910  6ED9               	movwf	fsr2l,c
 16466   011912  0E00               	movlw	0
 16467   011914  2035               	addwfc	(btemp+11)^0,w,c
 16468   011916  6EDA               	movwf	fsr2h,c
 16469                           
 16470                           ;stkvar	_ciCon @ sp[(-4)+0]
 16471   011918  0EFE               	movlw	254
 16472   01191A  24E1               	addwf	fsr1l,w,c
 16473   01191C  6EE9               	movwf	fsr0l,c
 16474   01191E  0EFF               	movlw	255
 16475   011920  20E2               	addwfc	fsr1h,w,c
 16476   011922  6EEA               	movwf	fsr0h,c
 16477   011924  96EF               	bcf	indf0,3,c
 16478   011926  ACDF               	btfss	indf2,6,c
 16479   011928  EF97  F08C         	goto	u2535
 16480   01192C  86EF               	bsf	indf0,3,c
 16481   01192E                     u2535:
 16482   01192E                     
 16483                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 16484                           ;stkvar	_config @ sp[(-4)+-2]
 16485   01192E  0EFA               	movlw	-6
 16486   011930  CFE3 F034          	movff	plusw1,btemp+10
 16487   011934  0EFB               	movlw	-5
 16488   011936  CFE3 F035          	movff	plusw1,btemp+11
 16489   01193A  0E01               	movlw	1
 16490   01193C  2434               	addwf	(btemp+10)^0,w,c
 16491   01193E  6ED9               	movwf	fsr2l,c
 16492   011940  0E00               	movlw	0
 16493   011942  2035               	addwfc	(btemp+11)^0,w,c
 16494   011944  6EDA               	movwf	fsr2h,c
 16495                           
 16496                           ;stkvar	_ciCon @ sp[(-4)+0]
 16497   011946  0EFE               	movlw	254
 16498   011948  24E1               	addwf	fsr1l,w,c
 16499   01194A  6EE9               	movwf	fsr0l,c
 16500   01194C  0EFF               	movlw	255
 16501   01194E  20E2               	addwfc	fsr1h,w,c
 16502   011950  6EEA               	movwf	fsr0h,c
 16503   011952  98EF               	bcf	indf0,4,c
 16504   011954  AEDF               	btfss	indf2,7,c
 16505   011956  EFAE  F08C         	goto	u2545
 16506   01195A  88EF               	bsf	indf0,4,c
 16507   01195C                     u2545:
 16508   01195C                     
 16509                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 16510                           ;stkvar	_config @ sp[(-4)+-2]
 16511   01195C  0EFA               	movlw	-6
 16512   01195E  CFE3 F034          	movff	plusw1,btemp+10
 16513   011962  0EFB               	movlw	-5
 16514   011964  CFE3 F035          	movff	plusw1,btemp+11
 16515   011968  0E02               	movlw	2
 16516   01196A  2434               	addwf	(btemp+10)^0,w,c
 16517   01196C  6ED9               	movwf	fsr2l,c
 16518   01196E  0E00               	movlw	0
 16519   011970  2035               	addwfc	(btemp+11)^0,w,c
 16520   011972  6EDA               	movwf	fsr2h,c
 16521   011974  50DF               	movf	223,w,c
 16522   011976  0B0F               	andlw	15
 16523   011978  6E35               	movwf	(btemp+11)^0,c
 16524                           
 16525                           ;stkvar	_ciCon @ sp[(-4)+0]
 16526   01197A  0EFF               	movlw	255
 16527   01197C  24E1               	addwf	fsr1l,w,c
 16528   01197E  6ED9               	movwf	fsr2l,c
 16529   011980  0EFF               	movlw	255
 16530   011982  20E2               	addwfc	fsr1h,w,c
 16531   011984  6EDA               	movwf	fsr2h,c
 16532   011986  3A35               	swapf	(btemp+11)^0,f,c
 16533   011988  50DF               	movf	223,w,c
 16534   01198A  1835               	xorwf	(btemp+11)^0,w,c
 16535   01198C  0B0F               	andlw	-241
 16536   01198E  1835               	xorwf	(btemp+11)^0,w,c
 16537   011990  6EDF               	movwf	223,c
 16538   011992                     
 16539                           ;stkvar	_ciCon @ sp[(-4)+0]
 16540   011992  0EFC               	movlw	-4
 16541   011994  CFE3 FFE6          	movff	plusw1,postinc1
 16542   011998  CFE3 FFE6          	movff	plusw1,postinc1
 16543   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 16544   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 16545   0119A4  0E00               	movlw	0
 16546   0119A6  6EE6               	movwf	postinc1,c
 16547   0119A8  0E00               	movlw	0
 16548   0119AA  6EE6               	movwf	postinc1,c
 16549   0119AC  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16550   0119B0                     
 16551                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 16552   0119B0  0EFA               	movlw	250
 16553   0119B2  26E1               	addwf	fsr1l,f,c
 16554   0119B4  0EFF               	movlw	255
 16555   0119B6  22E2               	addwfc	fsr1h,f,c
 16556   0119B8  0012               	return		;funcret
 16557   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 16558                           	callstack 0
 16559                           
 16560 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 16561 ;; Defined at:
 16562 ;;		line 2825 in file "can/can.c"
 16563 ;; Parameters:    Size  Location     Type
 16564 ;;  bitTime         1  [STACK] enum E5604
 16565 ;; Auto vars:     Size  Location     Type
 16566 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 16567 ;;  spiTransferE    1    0        char 
 16568 ;; Return value:  Size  Location     Type
 16569 ;;                  1  [STACK] char 
 16570 ;; Registers used:
 16571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;Total ram usage:        0 bytes
 16582 ;; Hardware stack levels used: 1
 16583 ;; Hardware stack levels required when called: 9
 16584 ;; This function calls:
 16585 ;;		_DRV_CANFDSPI_WriteWord
 16586 ;; This function is called by:
 16587 ;;		_CanInit
 16588 ;; This function uses a reentrant model
 16589 ;;
 16590                           
 16591                           	psect	text66
 16592   011C18                     __ptext66:
 16593                           	callstack 0
 16594   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16595                           	callstack 0
 16596                           
 16597                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16598   011C18  52E6               	movf	postinc1,f,c
 16599   011C1A  52E6               	movf	postinc1,f,c
 16600   011C1C  52E6               	movf	postinc1,f,c
 16601   011C1E  52E6               	movf	postinc1,f,c
 16602   011C20                     
 16603                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 16604   011C20  0E91               	movlw	low (_canControlResetValues+4)
 16605   011C22  6EF6               	movwf	tblptrl,c
 16606   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 16607   011C26  6EF7               	movwf	tblptrh,c
 16608   011C28                     	if	0	;tblptru may be non-zero
 16609   011C28                     	endif
 16610   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 16611   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 16612   011C2A  6EF8               	movwf	tblptru,c
 16613   011C2C                     	endif
 16614   011C2C  0009               	tblrd		*+
 16615   011C2E  CFF5 F032          	movff	tablat,btemp+8
 16616   011C32  0009               	tblrd		*+
 16617   011C34  CFF5 F033          	movff	tablat,btemp+9
 16618   011C38  0009               	tblrd		*+
 16619   011C3A  CFF5 F034          	movff	tablat,btemp+10
 16620   011C3E  0009               	tblrd		*+
 16621   011C40  CFF5 F035          	movff	tablat,btemp+11
 16622                           
 16623                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16624   011C44  0EFC               	movlw	-4
 16625   011C46  C032  FFE3         	movff	btemp+8,plusw1
 16626   011C4A  0EFD               	movlw	-3
 16627   011C4C  C033  FFE3         	movff	btemp+9,plusw1
 16628   011C50  0EFE               	movlw	-2
 16629   011C52  C034  FFE3         	movff	btemp+10,plusw1
 16630   011C56  0EFF               	movlw	-1
 16631   011C58  C035  FFE3         	movff	btemp+11,plusw1
 16632                           
 16633                           ;can/can.c: 2834:     switch (bitTime) {
 16634   011C5C  EFC8  F08E         	goto	l4776
 16635   011C60                     l665:
 16636   011C60                     l4756:
 16637                           
 16638                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 16639                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16640   011C60  0EFF               	movlw	255
 16641   011C62  24E1               	addwf	fsr1l,w,c
 16642   011C64  6ED9               	movwf	fsr2l,c
 16643   011C66  0EFF               	movlw	255
 16644   011C68  20E2               	addwfc	fsr1h,w,c
 16645   011C6A  6EDA               	movwf	fsr2h,c
 16646   011C6C  6ADF               	clrf	indf2,c
 16647                           
 16648                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 16649                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16650   011C6E  0EFE               	movlw	254
 16651   011C70  24E1               	addwf	fsr1l,w,c
 16652   011C72  6ED9               	movwf	fsr2l,c
 16653   011C74  0EFF               	movlw	255
 16654   011C76  20E2               	addwfc	fsr1h,w,c
 16655   011C78  6EDA               	movwf	fsr2h,c
 16656   011C7A  0E3E               	movlw	62
 16657   011C7C  6EDF               	movwf	indf2,c
 16658                           
 16659                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 16660                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16661   011C7E  0EFD               	movlw	253
 16662   011C80  24E1               	addwf	fsr1l,w,c
 16663   011C82  6ED9               	movwf	fsr2l,c
 16664   011C84  0EFF               	movlw	255
 16665   011C86  20E2               	addwfc	fsr1h,w,c
 16666   011C88  6EDA               	movwf	fsr2h,c
 16667   011C8A  50DF               	movf	223,w,c
 16668   011C8C  0B80               	andlw	-128
 16669   011C8E  090F               	iorlw	15
 16670   011C90  6EDF               	movwf	223,c
 16671   011C92                     
 16672                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 16673                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16674   011C92  50E1               	movf	fsr1l,w,c
 16675   011C94  0FFC               	addlw	-4
 16676   011C96  6ED9               	movwf	fsr2l,c
 16677   011C98  50E2               	movf	fsr1h,w,c
 16678   011C9A  6EDA               	movwf	fsr2h,c
 16679   011C9C  0EFF               	movlw	255
 16680   011C9E  22DA               	addwfc	fsr2h,f,c
 16681   011CA0  50DF               	movf	223,w,c
 16682   011CA2  0B80               	andlw	-128
 16683   011CA4  090F               	iorlw	15
 16684   011CA6  6EDF               	movwf	223,c
 16685                           
 16686                           ;can/can.c: 2848:             break;
 16687   011CA8  EF1E  F08F         	goto	l4778
 16688   011CAC                     l674:
 16689   011CAC                     l4760:
 16690                           
 16691                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 16692                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16693   011CAC  0EFF               	movlw	255
 16694   011CAE  24E1               	addwf	fsr1l,w,c
 16695   011CB0  6ED9               	movwf	fsr2l,c
 16696   011CB2  0EFF               	movlw	255
 16697   011CB4  20E2               	addwfc	fsr1h,w,c
 16698   011CB6  6EDA               	movwf	fsr2h,c
 16699   011CB8  6ADF               	clrf	indf2,c
 16700                           
 16701                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 16702                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16703   011CBA  0EFE               	movlw	254
 16704   011CBC  24E1               	addwf	fsr1l,w,c
 16705   011CBE  6ED9               	movwf	fsr2l,c
 16706   011CC0  0EFF               	movlw	255
 16707   011CC2  20E2               	addwfc	fsr1h,w,c
 16708   011CC4  6EDA               	movwf	fsr2h,c
 16709   011CC6  0E7E               	movlw	126
 16710   011CC8  6EDF               	movwf	indf2,c
 16711                           
 16712                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 16713                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16714   011CCA  0EFD               	movlw	253
 16715   011CCC  24E1               	addwf	fsr1l,w,c
 16716   011CCE  6ED9               	movwf	fsr2l,c
 16717   011CD0  0EFF               	movlw	255
 16718   011CD2  20E2               	addwfc	fsr1h,w,c
 16719   011CD4  6EDA               	movwf	fsr2h,c
 16720   011CD6  50DF               	movf	223,w,c
 16721   011CD8  0B80               	andlw	-128
 16722   011CDA  091F               	iorlw	31
 16723   011CDC  6EDF               	movwf	223,c
 16724   011CDE                     
 16725                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 16726                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16727   011CDE  50E1               	movf	fsr1l,w,c
 16728   011CE0  0FFC               	addlw	-4
 16729   011CE2  6ED9               	movwf	fsr2l,c
 16730   011CE4  50E2               	movf	fsr1h,w,c
 16731   011CE6  6EDA               	movwf	fsr2h,c
 16732   011CE8  0EFF               	movlw	255
 16733   011CEA  22DA               	addwfc	fsr2h,f,c
 16734   011CEC  50DF               	movf	223,w,c
 16735   011CEE  0B80               	andlw	-128
 16736   011CF0  091F               	iorlw	31
 16737   011CF2  6EDF               	movwf	223,c
 16738                           
 16739                           ;can/can.c: 2862:             break;
 16740   011CF4  EF1E  F08F         	goto	l4778
 16741   011CF8                     l4764:
 16742                           
 16743                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 16744                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16745   011CF8  0EFF               	movlw	255
 16746   011CFA  24E1               	addwf	fsr1l,w,c
 16747   011CFC  6ED9               	movwf	fsr2l,c
 16748   011CFE  0EFF               	movlw	255
 16749   011D00  20E2               	addwfc	fsr1h,w,c
 16750   011D02  6EDA               	movwf	fsr2h,c
 16751   011D04  6ADF               	clrf	indf2,c
 16752                           
 16753                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 16754                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16755   011D06  0EFE               	movlw	254
 16756   011D08  24E1               	addwf	fsr1l,w,c
 16757   011D0A  6ED9               	movwf	fsr2l,c
 16758   011D0C  0EFF               	movlw	255
 16759   011D0E  20E2               	addwfc	fsr1h,w,c
 16760   011D10  6EDA               	movwf	fsr2h,c
 16761   011D12  0E1E               	movlw	30
 16762   011D14  6EDF               	movwf	indf2,c
 16763                           
 16764                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 16765                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16766   011D16  0EFD               	movlw	253
 16767   011D18  24E1               	addwf	fsr1l,w,c
 16768   011D1A  6ED9               	movwf	fsr2l,c
 16769   011D1C  0EFF               	movlw	255
 16770   011D1E  20E2               	addwfc	fsr1h,w,c
 16771   011D20  6EDA               	movwf	fsr2h,c
 16772   011D22  50DF               	movf	223,w,c
 16773   011D24  0B80               	andlw	-128
 16774   011D26  0907               	iorlw	7
 16775   011D28  6EDF               	movwf	223,c
 16776   011D2A                     
 16777                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 16778                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16779   011D2A  50E1               	movf	fsr1l,w,c
 16780   011D2C  0FFC               	addlw	-4
 16781   011D2E  6ED9               	movwf	fsr2l,c
 16782   011D30  50E2               	movf	fsr1h,w,c
 16783   011D32  6EDA               	movwf	fsr2h,c
 16784   011D34  0EFF               	movlw	255
 16785   011D36  22DA               	addwfc	fsr2h,f,c
 16786   011D38  50DF               	movf	223,w,c
 16787   011D3A  0B80               	andlw	-128
 16788   011D3C  0907               	iorlw	7
 16789   011D3E  6EDF               	movwf	223,c
 16790                           
 16791                           ;can/can.c: 2870:             break;
 16792   011D40  EF1E  F08F         	goto	l4778
 16793   011D44                     l4768:
 16794                           
 16795                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 16796                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16797   011D44  0EFF               	movlw	255
 16798   011D46  24E1               	addwf	fsr1l,w,c
 16799   011D48  6ED9               	movwf	fsr2l,c
 16800   011D4A  0EFF               	movlw	255
 16801   011D4C  20E2               	addwfc	fsr1h,w,c
 16802   011D4E  6EDA               	movwf	fsr2h,c
 16803   011D50  6ADF               	clrf	indf2,c
 16804                           
 16805                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 16806                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16807   011D52  0EFE               	movlw	254
 16808   011D54  24E1               	addwf	fsr1l,w,c
 16809   011D56  6ED9               	movwf	fsr2l,c
 16810   011D58  0EFF               	movlw	255
 16811   011D5A  20E2               	addwfc	fsr1h,w,c
 16812   011D5C  6EDA               	movwf	fsr2h,c
 16813   011D5E  0EFE               	movlw	254
 16814   011D60  6EDF               	movwf	indf2,c
 16815                           
 16816                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 16817                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16818   011D62  0EFD               	movlw	253
 16819   011D64  24E1               	addwf	fsr1l,w,c
 16820   011D66  6ED9               	movwf	fsr2l,c
 16821   011D68  0EFF               	movlw	255
 16822   011D6A  20E2               	addwfc	fsr1h,w,c
 16823   011D6C  6EDA               	movwf	fsr2h,c
 16824   011D6E  50DF               	movf	223,w,c
 16825   011D70  0B80               	andlw	-128
 16826   011D72  093F               	iorlw	63
 16827   011D74  6EDF               	movwf	223,c
 16828   011D76                     
 16829                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 16830                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16831   011D76  50E1               	movf	fsr1l,w,c
 16832   011D78  0FFC               	addlw	-4
 16833   011D7A  6ED9               	movwf	fsr2l,c
 16834   011D7C  50E2               	movf	fsr1h,w,c
 16835   011D7E  6EDA               	movwf	fsr2h,c
 16836   011D80  0EFF               	movlw	255
 16837   011D82  22DA               	addwfc	fsr2h,f,c
 16838   011D84  50DF               	movf	223,w,c
 16839   011D86  0B80               	andlw	-128
 16840   011D88  093F               	iorlw	63
 16841   011D8A  6EDF               	movwf	223,c
 16842                           
 16843                           ;can/can.c: 2877:             break;
 16844   011D8C  EF1E  F08F         	goto	l4778
 16845   011D90                     l4776:
 16846                           
 16847                           ;stkvar	_bitTime @ sp[(-4)+-1]
 16848   011D90  0EFB               	movlw	-5
 16849   011D92  50E3               	movf	plusw1,w,c
 16850   011D94  6E34               	movwf	(btemp+10)^0,c
 16851   011D96  6A35               	clrf	(btemp+11)^0,c
 16852                           
 16853                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16854                           ; Switch size 1, requested type "simple"
 16855                           ; Number of cases is 1, Range of values is 0 to 0
 16856                           ; switch strategies available:
 16857                           ; Name         Instructions Cycles
 16858                           ; simple_byte            4     3 (average)
 16859                           ;	Chosen strategy is simple_byte
 16860   011D98  5035               	movf	(btemp+11)^0,w,c
 16861   011D9A  0A00               	xorlw	0	; case 0
 16862   011D9C  B4D8               	btfsc	status,2,c
 16863   011D9E  EFD3  F08E         	goto	l5676
 16864   011DA2  EF2D  F08F         	goto	l682
 16865   011DA6                     l5676:
 16866                           
 16867                           ; Switch size 1, requested type "simple"
 16868                           ; Number of cases is 18, Range of values is 0 to 17
 16869                           ; switch strategies available:
 16870                           ; Name         Instructions Cycles
 16871                           ; simple_byte           55    28 (average)
 16872                           ;	Chosen strategy is simple_byte
 16873   011DA6  5034               	movf	(btemp+10)^0,w,c
 16874   011DA8  0A00               	xorlw	0	; case 0
 16875   011DAA  B4D8               	btfsc	status,2,c
 16876   011DAC  EF30  F08E         	goto	l665
 16877   011DB0  0A01               	xorlw	1	; case 1
 16878   011DB2  B4D8               	btfsc	status,2,c
 16879   011DB4  EF30  F08E         	goto	l4756
 16880   011DB8  0A03               	xorlw	3	; case 2
 16881   011DBA  B4D8               	btfsc	status,2,c
 16882   011DBC  EF30  F08E         	goto	l4756
 16883   011DC0  0A01               	xorlw	1	; case 3
 16884   011DC2  B4D8               	btfsc	status,2,c
 16885   011DC4  EF30  F08E         	goto	l4756
 16886   011DC8  0A07               	xorlw	7	; case 4
 16887   011DCA  B4D8               	btfsc	status,2,c
 16888   011DCC  EF30  F08E         	goto	l4756
 16889   011DD0  0A01               	xorlw	1	; case 5
 16890   011DD2  B4D8               	btfsc	status,2,c
 16891   011DD4  EF30  F08E         	goto	l4756
 16892   011DD8  0A03               	xorlw	3	; case 6
 16893   011DDA  B4D8               	btfsc	status,2,c
 16894   011DDC  EF30  F08E         	goto	l4756
 16895   011DE0  0A01               	xorlw	1	; case 7
 16896   011DE2  B4D8               	btfsc	status,2,c
 16897   011DE4  EF30  F08E         	goto	l4756
 16898   011DE8  0A0F               	xorlw	15	; case 8
 16899   011DEA  B4D8               	btfsc	status,2,c
 16900   011DEC  EF56  F08E         	goto	l674
 16901   011DF0  0A01               	xorlw	1	; case 9
 16902   011DF2  B4D8               	btfsc	status,2,c
 16903   011DF4  EF56  F08E         	goto	l4760
 16904   011DF8  0A03               	xorlw	3	; case 10
 16905   011DFA  B4D8               	btfsc	status,2,c
 16906   011DFC  EF56  F08E         	goto	l4760
 16907   011E00  0A01               	xorlw	1	; case 11
 16908   011E02  B4D8               	btfsc	status,2,c
 16909   011E04  EF56  F08E         	goto	l4760
 16910   011E08  0A07               	xorlw	7	; case 12
 16911   011E0A  B4D8               	btfsc	status,2,c
 16912   011E0C  EF56  F08E         	goto	l4760
 16913   011E10  0A01               	xorlw	1	; case 13
 16914   011E12  B4D8               	btfsc	status,2,c
 16915   011E14  EF56  F08E         	goto	l4760
 16916   011E18  0A03               	xorlw	3	; case 14
 16917   011E1A  B4D8               	btfsc	status,2,c
 16918   011E1C  EF56  F08E         	goto	l4760
 16919   011E20  0A01               	xorlw	1	; case 15
 16920   011E22  B4D8               	btfsc	status,2,c
 16921   011E24  EF7C  F08E         	goto	l4764
 16922   011E28  0A1F               	xorlw	31	; case 16
 16923   011E2A  B4D8               	btfsc	status,2,c
 16924   011E2C  EF7C  F08E         	goto	l4764
 16925   011E30  0A01               	xorlw	1	; case 17
 16926   011E32  B4D8               	btfsc	status,2,c
 16927   011E34  EFA2  F08E         	goto	l4768
 16928   011E38  EF2D  F08F         	goto	l682
 16929   011E3C                     l4778:
 16930                           
 16931                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16932   011E3C  0EFC               	movlw	-4
 16933   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16934   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16935   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16936   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16937   011E4E  0E04               	movlw	4
 16938   011E50  6EE6               	movwf	postinc1,c
 16939   011E52  0E00               	movlw	0
 16940   011E54  6EE6               	movwf	postinc1,c
 16941   011E56  EC9E  F09C         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16942   011E5A                     l682:
 16943                           
 16944                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16945   011E5A  0EFB               	movlw	251
 16946   011E5C  26E1               	addwf	fsr1l,f,c
 16947   011E5E  0EFF               	movlw	255
 16948   011E60  22E2               	addwfc	fsr1h,f,c
 16949   011E62  0012               	return		;funcret
 16950   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16951                           	callstack 0
 16952                           
 16953 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16954 ;; Defined at:
 16955 ;;		line 310 in file "can/can.c"
 16956 ;; Parameters:    Size  Location     Type
 16957 ;;  address         2  [STACK] unsigned short 
 16958 ;;  txd             4  [STACK] unsigned long 
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;  spiTransferS    2  [STACK] unsigned short 
 16961 ;;  i               1  [STACK] unsigned char 
 16962 ;;  spiTransferE    1  [STACK] char 
 16963 ;; Return value:  Size  Location     Type
 16964 ;;                  1  [STACK] char 
 16965 ;; Registers used:
 16966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16967 ;; Tracked objects:
 16968 ;;		On entry : 0/0
 16969 ;;		On exit  : 0/0
 16970 ;;		Unchanged: 0/0
 16971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16976 ;;Total ram usage:        0 bytes
 16977 ;; Hardware stack levels used: 1
 16978 ;; Hardware stack levels required when called: 8
 16979 ;; This function calls:
 16980 ;;		_SpiTransfer
 16981 ;; This function is called by:
 16982 ;;		_DRV_CANFDSPI_Configure
 16983 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16984 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16985 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16986 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16987 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16988 ;;		_DRV_CANFDSPI_TefConfigure
 16989 ;;		_DRV_CANFDSPI_TimeStampSet
 16990 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16991 ;; This function uses a reentrant model
 16992 ;;
 16993                           
 16994                           	psect	text67
 16995   01393C                     __ptext67:
 16996                           	callstack 0
 16997   01393C                     _DRV_CANFDSPI_WriteWord:
 16998                           	callstack 0
 16999                           
 17000                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17001   01393C  52E6               	movf	postinc1,f,c
 17002   01393E  52E6               	movf	postinc1,f,c
 17003   013940  52E6               	movf	postinc1,f,c
 17004   013942  52E6               	movf	postinc1,f,c
 17005   013944                     
 17006                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 17007   013944  0E06               	movlw	6
 17008   013946  6E34               	movwf	(btemp+10)^0,c
 17009   013948  0E00               	movlw	0
 17010   01394A  6E35               	movwf	(btemp+11)^0,c
 17011                           
 17012                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 17013   01394C  0EFC               	movlw	-4
 17014   01394E  C034  FFE3         	movff	btemp+10,plusw1
 17015   013952  0EFD               	movlw	-3
 17016   013954  C035  FFE3         	movff	btemp+11,plusw1
 17017   013958                     
 17018                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 17019                           ;stkvar	_address @ sp[(-4)+-2]
 17020   013958  0EFB               	movlw	251
 17021   01395A  24E1               	addwf	fsr1l,w,c
 17022   01395C  6ED9               	movwf	fsr2l,c
 17023   01395E  0EFF               	movlw	255
 17024   013960  20E2               	addwfc	fsr1h,w,c
 17025   013962  6EDA               	movwf	fsr2h,c
 17026   013964  50DF               	movf	indf2,w,c
 17027   013966  0B0F               	andlw	15
 17028   013968  0F20               	addlw	32
 17029   01396A  0101               	movlb	1	; () banked
 17030   01396C  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 17031   01396E                     
 17032                           ; BSR set to: 1
 17033                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 17034                           ;stkvar	_address @ sp[(-4)+-2]
 17035   01396E  0EFA               	movlw	-6
 17036   013970  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 17037   013974                     
 17038                           ; BSR set to: 1
 17039                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 17040                           ;stkvar	_i @ sp[(-4)+2]
 17041   013974  0EFE               	movlw	-2
 17042   013976  6AE3               	clrf	plusw1,c
 17043   013978                     l4628:
 17044                           
 17045                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 17046                           ;stkvar	_i @ sp[(-4)+2]
 17047   013978  0EFE               	movlw	-2
 17048   01397A  50E3               	movf	plusw1,w,c
 17049   01397C  6E34               	movwf	(btemp+10)^0,c
 17050   01397E  6A35               	clrf	(btemp+11)^0,c
 17051   013980  0E02               	movlw	low (_spiTransmitBuffer+2)
 17052   013982  2434               	addwf	(btemp+10)^0,w,c
 17053   013984  6ED9               	movwf	fsr2l,c
 17054   013986  0E01               	movlw	high (_spiTransmitBuffer+2)
 17055   013988  2035               	addwfc	(btemp+11)^0,w,c
 17056   01398A  6EDA               	movwf	fsr2h,c
 17057                           
 17058                           ;stkvar	_txd @ sp[(-4)+-6]
 17059   01398C  0EF6               	movlw	-10
 17060   01398E  CFE3 F032          	movff	plusw1,btemp+8
 17061   013992  0EF7               	movlw	-9
 17062   013994  CFE3 F033          	movff	plusw1,btemp+9
 17063   013998  0EF8               	movlw	-8
 17064   01399A  CFE3 F034          	movff	plusw1,btemp+10
 17065   01399E  0EF9               	movlw	-7
 17066   0139A0  CFE3 F035          	movff	plusw1,btemp+11
 17067                           
 17068                           ;stkvar	_i @ sp[(-4)+2]
 17069   0139A4  0EFE               	movlw	-2
 17070   0139A6  50E3               	movf	plusw1,w,c
 17071   0139A8  0D08               	mullw	8
 17072   0139AA  50F3               	movf	243,w,c
 17073   0139AC  2AE8               	incf	wreg,f,c
 17074   0139AE  EFDE  F09C         	goto	u2300
 17075   0139B2                     u2305:
 17076   0139B2  90D8               	bcf	status,0,c
 17077   0139B4  3235               	rrcf	(btemp+11)^0,f,c
 17078   0139B6  3234               	rrcf	(btemp+10)^0,f,c
 17079   0139B8  3233               	rrcf	(btemp+9)^0,f,c
 17080   0139BA  3232               	rrcf	(btemp+8)^0,f,c
 17081   0139BC                     u2300:
 17082   0139BC  2EE8               	decfsz	wreg,f,c
 17083   0139BE  EFD9  F09C         	goto	u2305
 17084   0139C2  5032               	movf	(btemp+8)^0,w,c
 17085   0139C4  6EDF               	movwf	indf2,c
 17086   0139C6                     
 17087                           ;can/can.c: 324:     }
 17088                           ;stkvar	_i @ sp[(-4)+2]
 17089   0139C6  0EFE               	movlw	-2
 17090   0139C8  2AE3               	incf	plusw1,f,c
 17091   0139CA                     
 17092                           ;stkvar	_i @ sp[(-4)+2]
 17093   0139CA  0EFE               	movlw	-2
 17094   0139CC  CFE3 F02A          	movff	plusw1,btemp
 17095   0139D0  0E03               	movlw	3
 17096   0139D2  642A               	cpfsgt	btemp^0,c
 17097   0139D4  EFEE  F09C         	goto	u2311
 17098   0139D8  EFF0  F09C         	goto	u2310
 17099   0139DC                     u2311:
 17100   0139DC  EFBC  F09C         	goto	l4628
 17101   0139E0                     u2310:
 17102   0139E0                     
 17103                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 17104                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 17105   0139E0  0EFC               	movlw	-4
 17106   0139E2  CFE3 FFE6          	movff	plusw1,postinc1
 17107   0139E6  CFE3 FFE6          	movff	plusw1,postinc1
 17108   0139EA  0E00               	movlw	low _spiReceiveBuffer
 17109   0139EC  6EE6               	movwf	postinc1,c
 17110   0139EE  0E02               	movlw	high _spiReceiveBuffer
 17111   0139F0  6EE6               	movwf	postinc1,c
 17112   0139F2  0E00               	movlw	low _spiTransmitBuffer
 17113   0139F4  6EE6               	movwf	postinc1,c
 17114   0139F6  0E01               	movlw	high _spiTransmitBuffer
 17115   0139F8  6EE6               	movwf	postinc1,c
 17116   0139FA  EC3B  F09E         	call	_SpiTransfer	;wreg free
 17117                           
 17118                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 17119   0139FE  0EFF               	movlw	-1
 17120   013A00  C02A  FFE3         	movff	btemp,plusw1
 17121   013A04                     
 17122                           ;can/can.c: 328:     return spiTransferError;
 17123                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 17124   013A04  0EFF               	movlw	-1
 17125   013A06  CFE3 F02A          	movff	plusw1,btemp
 17126   013A0A                     
 17127                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 17128   013A0A  0EF6               	movlw	246
 17129   013A0C  26E1               	addwf	fsr1l,f,c
 17130   013A0E  0EFF               	movlw	255
 17131   013A10  22E2               	addwfc	fsr1h,f,c
 17132   013A12  0012               	return		;funcret
 17133   013A14                     __end_of_DRV_CANFDSPI_WriteWord:
 17134                           	callstack 0
 17135                           
 17136 ;; *************** function _SpiTransfer *****************
 17137 ;; Defined at:
 17138 ;;		line 132 in file "can/can.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;  txPtr           2  [STACK] PTR unsigned char 
 17141 ;;		 -> spiTransmitBuffer(200), 
 17142 ;;  rxPtr           2  [STACK] PTR unsigned char 
 17143 ;;		 -> spiReceiveBuffer(200), 
 17144 ;;  size            2  [STACK] unsigned short 
 17145 ;; Auto vars:     Size  Location     Type
 17146 ;;  dummy           1  [STACK] volatile unsigned char 
 17147 ;; Return value:  Size  Location     Type
 17148 ;;                  1  [STACK] char 
 17149 ;; Registers used:
 17150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 17151 ;; Tracked objects:
 17152 ;;		On entry : 0/1
 17153 ;;		On exit  : 0/0
 17154 ;;		Unchanged: 0/0
 17155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;Total ram usage:        0 bytes
 17161 ;; Hardware stack levels used: 1
 17162 ;; Hardware stack levels required when called: 7
 17163 ;; This function calls:
 17164 ;;		Nothing
 17165 ;; This function is called by:
 17166 ;;		_DRV_CANFDSPI_Reset
 17167 ;;		_DRV_CANFDSPI_ReadByte
 17168 ;;		_DRV_CANFDSPI_WriteByte
 17169 ;;		_DRV_CANFDSPI_WriteWord
 17170 ;;		_DRV_CANFDSPI_WriteHalfWord
 17171 ;;		_DRV_CANFDSPI_ReadByteArray
 17172 ;;		_DRV_CANFDSPI_WriteByteArray
 17173 ;;		_DRV_CANFDSPI_ReadWordArray
 17174 ;; This function uses a reentrant model
 17175 ;;
 17176                           
 17177                           	psect	text68
 17178   013C76                     __ptext68:
 17179                           	callstack 0
 17180   013C76                     _SpiTransfer:
 17181                           	callstack 0
 17182                           
 17183                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17184   013C76  52E6               	movf	postinc1,f,c
 17185   013C78                     
 17186                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 17187   013C78  988F               	bcf	143,4,c	;volatile
 17188                           
 17189                           ;can/can.c: 136:   while(size > 0)
 17190   013C7A  EF88  F09E         	goto	l3994
 17191   013C7E                     l145:
 17192                           
 17193                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 17194   013C7E  9064               	bcf	100,0,c	;volatile
 17195   013C80                     
 17196                           ;can/can.c: 139:     dummy = SSP2BUF;
 17197                           ;stkvar	_dummy @ sp[(-1)+0]
 17198   013C80  0EFF               	movlw	-1
 17199   013C82  CF66 FFE3          	movff	3942,plusw1	;volatile
 17200   013C86                     
 17201                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 17202                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17203   013C86  0EFD               	movlw	-3
 17204   013C88  CFE3 FFD9          	movff	plusw1,fsr2l
 17205   013C8C  0EFE               	movlw	-2
 17206   013C8E  CFE3 FFDA          	movff	plusw1,fsr2h
 17207   013C92  50DF               	movf	indf2,w,c
 17208   013C94  6E66               	movwf	102,c	;volatile
 17209   013C96                     l146:
 17210   013C96  A064               	btfss	100,0,c	;volatile
 17211   013C98  EF50  F09E         	goto	u1661
 17212   013C9C  EF52  F09E         	goto	u1660
 17213   013CA0                     u1661:
 17214   013CA0  EF4B  F09E         	goto	l146
 17215   013CA4                     u1660:
 17216   013CA4                     
 17217                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 17218                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17219   013CA4  0EFB               	movlw	-5
 17220   013CA6  CFE3 FFD9          	movff	plusw1,fsr2l
 17221   013CAA  0EFC               	movlw	-4
 17222   013CAC  CFE3 FFDA          	movff	plusw1,fsr2h
 17223   013CB0  CF66 FFDF          	movff	3942,indf2	;volatile
 17224   013CB4                     
 17225                           ;can/can.c: 143:     txPtr++;
 17226                           ;stkvar	_txPtr @ sp[(-1)+-2]
 17227   013CB4  0EFD               	movlw	-3
 17228   013CB6  50E3               	movf	plusw1,w,c
 17229   013CB8  0F01               	addlw	1
 17230   013CBA  6E2A               	movwf	btemp^0,c
 17231   013CBC  0EFD               	movlw	-3
 17232   013CBE  C02A  FFE3         	movff	btemp,plusw1
 17233   013CC2  6A2A               	clrf	btemp^0,c
 17234   013CC4  0EFE               	movlw	-2
 17235   013CC6  50E3               	movf	plusw1,w,c
 17236   013CC8  202A               	addwfc	btemp^0,w,c
 17237   013CCA  6E2A               	movwf	btemp^0,c
 17238   013CCC  0EFE               	movlw	-2
 17239   013CCE  C02A  FFE3         	movff	btemp,plusw1
 17240   013CD2                     
 17241                           ;can/can.c: 144:     rxPtr++;
 17242                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 17243   013CD2  0EFB               	movlw	-5
 17244   013CD4  50E3               	movf	plusw1,w,c
 17245   013CD6  0F01               	addlw	1
 17246   013CD8  6E2A               	movwf	btemp^0,c
 17247   013CDA  0EFB               	movlw	-5
 17248   013CDC  C02A  FFE3         	movff	btemp,plusw1
 17249   013CE0  6A2A               	clrf	btemp^0,c
 17250   013CE2  0EFC               	movlw	-4
 17251   013CE4  50E3               	movf	plusw1,w,c
 17252   013CE6  202A               	addwfc	btemp^0,w,c
 17253   013CE8  6E2A               	movwf	btemp^0,c
 17254   013CEA  0EFC               	movlw	-4
 17255   013CEC  C02A  FFE3         	movff	btemp,plusw1
 17256   013CF0                     
 17257                           ;can/can.c: 145:     size--;
 17258                           ;stkvar	_size @ sp[(-1)+-6]
 17259   013CF0  0EF9               	movlw	-7
 17260   013CF2  CFE3 F02A          	movff	plusw1,btemp
 17261   013CF6  0E01               	movlw	1
 17262   013CF8  5E2A               	subwf	btemp^0,f,c
 17263   013CFA  0EF9               	movlw	-7
 17264   013CFC  C02A  FFE3         	movff	btemp,plusw1
 17265   013D00  0EFA               	movlw	-6
 17266   013D02  CFE3 F02A          	movff	plusw1,btemp
 17267   013D06  0E00               	movlw	0
 17268   013D08  5A2A               	subwfb	btemp^0,f,c
 17269   013D0A  0EFA               	movlw	-6
 17270   013D0C  C02A  FFE3         	movff	btemp,plusw1
 17271   013D10                     l3994:
 17272                           
 17273                           ;can/can.c: 136:   while(size > 0)
 17274                           ;stkvar	_size @ sp[(-1)+-6]
 17275   013D10  0EF9               	movlw	-7
 17276   013D12  CFE3 F02A          	movff	plusw1,btemp
 17277   013D16  0EFA               	movlw	-6
 17278   013D18  50E3               	movf	plusw1,w,c
 17279   013D1A  102A               	iorwf	btemp^0,w,c
 17280   013D1C  A4D8               	btfss	status,2,c
 17281   013D1E  EF93  F09E         	goto	u1671
 17282   013D22  EF95  F09E         	goto	u1670
 17283   013D26                     u1671:
 17284   013D26  EF3F  F09E         	goto	l145
 17285   013D2A                     u1670:
 17286   013D2A                     
 17287                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 17288   013D2A  888F               	bsf	143,4,c	;volatile
 17289   013D2C                     
 17290                           ;can/can.c: 148:   return 0;
 17291   013D2C  0E00               	movlw	0
 17292   013D2E  6E2A               	movwf	btemp^0,c
 17293   013D30                     
 17294                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 17295   013D30  0EF9               	movlw	249
 17296   013D32  26E1               	addwf	fsr1l,f,c
 17297   013D34  0EFF               	movlw	255
 17298   013D36  22E2               	addwfc	fsr1h,f,c
 17299   013D38  0012               	return		;funcret
 17300   013D3A                     __end_of_SpiTransfer:
 17301                           	callstack 0
 17302                           
 17303 ;; *************** function _INTERRUPT_InterruptManager *****************
 17304 ;; Defined at:
 17305 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 17306 ;; Parameters:    Size  Location     Type
 17307 ;;		None
 17308 ;; Auto vars:     Size  Location     Type
 17309 ;;		None
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      void 
 17312 ;; Registers used:
 17313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17314 ;; Tracked objects:
 17315 ;;		On entry : 0/0
 17316 ;;		On exit  : 0/0
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17321 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17322 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17323 ;;Total ram usage:       16 bytes
 17324 ;; Hardware stack levels used: 1
 17325 ;; Hardware stack levels required when called: 6
 17326 ;; This function calls:
 17327 ;;		_TMR0_ISR
 17328 ;; This function is called by:
 17329 ;;		Interrupt level 2
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           	psect	intcode
 17334   000008                     __pintcode:
 17335                           	callstack 0
 17336   000008                     _INTERRUPT_InterruptManager:
 17337                           	callstack 16
 17338                           
 17339                           ;incstack = 0
 17340   000008  CFFA F04A          	movff	pclath,??_INTERRUPT_InterruptManager
 17341   00000C  CFFB F04B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17342   000010  CFE9 F04C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17343   000014  CFEA F04D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17344   000018  CFE1 F04E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17345   00001C  CFE2 F04F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17346   000020  CFD9 F050          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17347   000024  CFDA F051          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17348   000028  CFF3 F052          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17349   00002C  CFF4 F053          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17350   000030  C02A  F054         	movff	btemp,??_INTERRUPT_InterruptManager+10
 17351   000034  C02B  F055         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 17352   000038  C032  F056         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 17353   00003C  C033  F057         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 17354   000040  C034  F058         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 17355   000044  C035  F059         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 17356   000048  EE19  F031         	lfsr	1,___inthi_sp
 17357   00004C                     
 17358                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 17359   00004C  AAF2               	btfss	242,5,c	;volatile
 17360   00004E  EF2B  F000         	goto	i2u319_41
 17361   000052  EF2D  F000         	goto	i2u319_40
 17362   000056                     i2u319_41:
 17363   000056  EF36  F000         	goto	i2l1039
 17364   00005A                     i2u319_40:
 17365   00005A  A4F2               	btfss	242,2,c	;volatile
 17366   00005C  EF32  F000         	goto	i2u320_41
 17367   000060  EF34  F000         	goto	i2u320_40
 17368   000064                     i2u320_41:
 17369   000064  EF36  F000         	goto	i2l1039
 17370   000068                     i2u320_40:
 17371   000068                     
 17372                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 17373   000068  ECD9  F0A4         	call	_TMR0_ISR	;wreg free
 17374   00006C                     i2l1039:
 17375   00006C  C059  F035         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 17376   000070  C058  F034         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 17377   000074  C057  F033         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 17378   000078  C056  F032         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 17379   00007C  C055  F02B         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 17380   000080  C054  F02A         	movff	??_INTERRUPT_InterruptManager+10,btemp
 17381   000084  C053  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17382   000088  C052  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17383   00008C  C051  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17384   000090  C050  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17385   000094  C04F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17386   000098  C04E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17387   00009C  C04D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17388   0000A0  C04C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17389   0000A4  C04B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17390   0000A8  C04A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17391   0000AC  0011               	retfie		f
 17392   0000AE                     __end_of_INTERRUPT_InterruptManager:
 17393                           	callstack 0
 17394                           
 17395 ;; *************** function _TMR0_ISR *****************
 17396 ;; Defined at:
 17397 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;		None
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;		None
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  1  [STACK] void 
 17404 ;; Registers used:
 17405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;Total ram usage:        0 bytes
 17416 ;; Hardware stack levels used: 1
 17417 ;; Hardware stack levels required when called: 5
 17418 ;; This function calls:
 17419 ;;		_TMR0_CallBack
 17420 ;; This function is called by:
 17421 ;;		_INTERRUPT_InterruptManager
 17422 ;; This function uses a reentrant model
 17423 ;;
 17424                           
 17425                           	psect	text70
 17426   0149B2                     __ptext70:
 17427                           	callstack 0
 17428   0149B2                     _TMR0_ISR:
 17429                           	callstack 16
 17430   0149B2                     
 17431                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 17432   0149B2  94F2               	bcf	242,2,c	;volatile
 17433                           
 17434                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 17435   0149B4  C023  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 17436                           
 17437                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 17438   0149B8  C022  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17439   0149BC                     
 17440                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 17441   0149BC  0E01               	movlw	1
 17442   0149BE  6E17               	movwf	(_carState+22)^0,c
 17443   0149C0                     
 17444                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 17445   0149C0  4A20               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 17446   0149C2  2A21               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 17447   0149C4  5020               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 17448   0149C6  1021               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 17449   0149C8  B4D8               	btfsc	status,2,c
 17450   0149CA  EFE9  F0A4         	goto	u307_41
 17451   0149CE  EFEB  F0A4         	goto	u307_40
 17452   0149D2                     u307_41:
 17453   0149D2  EFEF  F0A4         	goto	l1085
 17454   0149D6                     u307_40:
 17455   0149D6                     
 17456                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 17457   0149D6  ECA8  F0A4         	call	_TMR0_CallBack	;wreg free
 17458   0149DA                     
 17459                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 17460   0149DA  6A20               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 17461   0149DC  6A21               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 17462   0149DE                     l1085:
 17463                           
 17464                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 17465   0149DE  0012               	return		;funcret
 17466   0149E0                     __end_of_TMR0_ISR:
 17467                           	callstack 0
 17468                           
 17469 ;; *************** function _TMR0_CallBack *****************
 17470 ;; Defined at:
 17471 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 17472 ;; Parameters:    Size  Location     Type
 17473 ;;		None
 17474 ;; Auto vars:     Size  Location     Type
 17475 ;;		None
 17476 ;; Return value:  Size  Location     Type
 17477 ;;                  1  [STACK] void 
 17478 ;; Registers used:
 17479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 17480 ;; Tracked objects:
 17481 ;;		On entry : 0/0
 17482 ;;		On exit  : 0/0
 17483 ;;		Unchanged: 0/0
 17484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17489 ;;Total ram usage:        0 bytes
 17490 ;; Hardware stack levels used: 1
 17491 ;; Hardware stack levels required when called: 4
 17492 ;; This function calls:
 17493 ;;		NULL
 17494 ;;		_TMR0_DefaultInterruptHandler
 17495 ;;		_XF_decrementAndQueueTimers
 17496 ;; This function is called by:
 17497 ;;		_TMR0_ISR
 17498 ;; This function uses a reentrant model
 17499 ;;
 17500                           
 17501                           	psect	text71
 17502   014950                     __ptext71:
 17503                           	callstack 0
 17504   014950                     _TMR0_CallBack:
 17505                           	callstack 16
 17506   014950                     
 17507                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 17508   014950  0E01               	movlw	1
 17509   014952  6E16               	movwf	(_carState+21)^0,c
 17510   014954                     
 17511                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 17512   014954  505A               	movf	_TMR0_InterruptHandler^0,w,c
 17513   014956  105B               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 17514   014958  105C               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 17515   01495A  B4D8               	btfsc	status,2,c
 17516   01495C  EFB2  F0A4         	goto	u282_41
 17517   014960  EFB4  F0A4         	goto	u282_40
 17518   014964                     u282_41:
 17519   014964  EFC1  F0A4         	goto	l1089
 17520   014968                     u282_40:
 17521   014968                     
 17522                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 17523   014968  D802               	call	u283_48
 17524   01496A  EFC1  F0A4         	goto	u283_49
 17525   01496E                     u283_48:
 17526   01496E  0005               	push	
 17527   014970  6EFA               	movwf	pclath,c
 17528   014972  505A               	movf	_TMR0_InterruptHandler^0,w,c
 17529   014974  6EFD               	movwf	tosl,c
 17530   014976  505B               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 17531   014978  6EFE               	movwf	tosh,c
 17532   01497A  505C               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 17533   01497C  6EFF               	movwf	tosu,c
 17534   01497E  50FA               	movf	pclath,w,c
 17535   014980  0012               	return		;indir
 17536   014982                     u283_49:
 17537   014982                     l1089:
 17538                           
 17539                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 17540   014982  0012               	return		;funcret
 17541   014984                     __end_of_TMR0_CallBack:
 17542                           	callstack 0
 17543                           
 17544 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 17545 ;; Defined at:
 17546 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 17547 ;; Parameters:    Size  Location     Type
 17548 ;;		None
 17549 ;; Auto vars:     Size  Location     Type
 17550 ;;		None
 17551 ;; Return value:  Size  Location     Type
 17552 ;;                  1  [STACK] void 
 17553 ;; Registers used:
 17554 ;;		None
 17555 ;; Tracked objects:
 17556 ;;		On entry : 0/0
 17557 ;;		On exit  : 0/0
 17558 ;;		Unchanged: 0/0
 17559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;Total ram usage:        0 bytes
 17565 ;; Hardware stack levels used: 1
 17566 ;; This function calls:
 17567 ;;		Nothing
 17568 ;; This function is called by:
 17569 ;;		_TMR0_Initialize
 17570 ;;		_TMR0_CallBack
 17571 ;; This function uses a reentrant model
 17572 ;;
 17573                           
 17574                           	psect	text72
 17575   014B22                     __ptext72:
 17576                           	callstack 0
 17577   014B22                     _TMR0_DefaultInterruptHandler:
 17578                           	callstack 19
 17579   014B22                     
 17580                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 17581   014B22  0012               	return		;funcret
 17582   014B24                     __end_of_TMR0_DefaultInterruptHandler:
 17583                           	callstack 0
 17584                           
 17585 ;; *************** function _XF_decrementAndQueueTimers *****************
 17586 ;; Defined at:
 17587 ;;		line 217 in file "xf/xf.c"
 17588 ;; Parameters:    Size  Location     Type
 17589 ;;		None
 17590 ;; Auto vars:     Size  Location     Type
 17591 ;;  dummy           1  [STACK] unsigned char 
 17592 ;;  i               1  [STACK] unsigned char 
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1  [STACK] void 
 17595 ;; Registers used:
 17596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 17597 ;; Tracked objects:
 17598 ;;		On entry : 0/0
 17599 ;;		On exit  : 0/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;Total ram usage:        0 bytes
 17607 ;; Hardware stack levels used: 1
 17608 ;; Hardware stack levels required when called: 3
 17609 ;; This function calls:
 17610 ;;		_XF_pushEvent
 17611 ;;		_XF_unscheduleTimer
 17612 ;; This function is called by:
 17613 ;;		_main
 17614 ;;		_TMR0_CallBack
 17615 ;; This function uses a reentrant model
 17616 ;;
 17617                           
 17618                           	psect	text73
 17619   013586                     __ptext73:
 17620                           	callstack 0
 17621   013586                     _XF_decrementAndQueueTimers:
 17622                           	callstack 0
 17623                           
 17624                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 17625   013586  52E6               	movf	postinc1,f,c
 17626   013588  52E6               	movf	postinc1,f,c
 17627   01358A                     
 17628                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 17629                           ;stkvar	_i @ sp[(-2)+1]
 17630   01358A  0EFF               	movlw	-1
 17631   01358C  6AE3               	clrf	plusw1,c
 17632   01358E                     l4676:
 17633                           
 17634                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 17635                           ;stkvar	_i @ sp[(-2)+1]
 17636   01358E  0EFF               	movlw	-1
 17637   013590  50E3               	movf	plusw1,w,c
 17638   013592  0D08               	mullw	8
 17639   013594  0ECA               	movlw	low (_theXF+2)
 17640   013596  24F3               	addwf	243,w,c
 17641   013598  6ED9               	movwf	fsr2l,c
 17642   01359A  0E02               	movlw	high (_theXF+2)
 17643   01359C  20F4               	addwfc	prodh,w,c
 17644   01359E  6EDA               	movwf	fsr2h,c
 17645   0135A0  50DF               	movf	indf2,w,c
 17646   0135A2  B4D8               	btfsc	status,2,c
 17647   0135A4  EFD6  F09A         	goto	u234_41
 17648   0135A8  EFD8  F09A         	goto	u234_40
 17649   0135AC                     u234_41:
 17650   0135AC  EF32  F09B         	goto	l4688
 17651   0135B0                     u234_40:
 17652   0135B0                     
 17653                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 17654                           ;stkvar	_i @ sp[(-2)+1]
 17655   0135B0  0EFF               	movlw	-1
 17656   0135B2  50E3               	movf	plusw1,w,c
 17657   0135B4  0D08               	mullw	8
 17658   0135B6  0EC8               	movlw	low _theXF
 17659   0135B8  24F3               	addwf	243,w,c
 17660   0135BA  6ED9               	movwf	fsr2l,c
 17661   0135BC  0E02               	movlw	high _theXF
 17662   0135BE  20F4               	addwfc	prodh,w,c
 17663   0135C0  6EDA               	movwf	fsr2h,c
 17664   0135C2  0E0A               	movlw	10
 17665   0135C4  5EDE               	subwf	postinc2,f,c
 17666   0135C6  0E00               	movlw	0
 17667   0135C8  5ADD               	subwfb	postdec2,f,c
 17668   0135CA                     
 17669                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 17670                           ;stkvar	_i @ sp[(-2)+1]
 17671   0135CA  0EFF               	movlw	-1
 17672   0135CC  50E3               	movf	plusw1,w,c
 17673   0135CE  0D08               	mullw	8
 17674   0135D0  0EC8               	movlw	low _theXF
 17675   0135D2  24F3               	addwf	243,w,c
 17676   0135D4  6ED9               	movwf	fsr2l,c
 17677   0135D6  0E02               	movlw	high _theXF
 17678   0135D8  20F4               	addwfc	prodh,w,c
 17679   0135DA  6EDA               	movwf	fsr2h,c
 17680   0135DC  50DE               	movf	postinc2,w,c
 17681   0135DE  10DE               	iorwf	postinc2,w,c
 17682   0135E0  A4D8               	btfss	status,2,c
 17683   0135E2  EFF5  F09A         	goto	u235_41
 17684   0135E6  EFF7  F09A         	goto	u235_40
 17685   0135EA                     u235_41:
 17686   0135EA  EF32  F09B         	goto	l4688
 17687   0135EE                     u235_40:
 17688   0135EE                     
 17689                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 17690                           ;stkvar	_dummy @ sp[(-2)+0]
 17691   0135EE  0EFE               	movlw	254
 17692   0135F0  24E1               	addwf	fsr1l,w,c
 17693   0135F2  6E2A               	movwf	btemp^0,c
 17694   0135F4  0EFF               	movlw	255
 17695   0135F6  20E2               	addwfc	fsr1h,w,c
 17696   0135F8  6E2B               	movwf	(btemp+1)^0,c
 17697   0135FA  C02A  FFE6         	movff	btemp,postinc1
 17698   0135FE  C02B  FFE6         	movff	btemp+1,postinc1
 17699   013602  0E01               	movlw	1
 17700   013604  6EE6               	movwf	postinc1,c
 17701                           
 17702                           ;stkvar	_i @ sp[(-5)+1]
 17703   013606  0EFC               	movlw	-4
 17704   013608  50E3               	movf	plusw1,w,c
 17705   01360A  0D08               	mullw	8
 17706   01360C  0ECA               	movlw	low (_theXF+2)
 17707   01360E  24F3               	addwf	243,w,c
 17708   013610  6ED9               	movwf	fsr2l,c
 17709   013612  0E02               	movlw	high (_theXF+2)
 17710   013614  20F4               	addwfc	prodh,w,c
 17711   013616  6EDA               	movwf	fsr2h,c
 17712   013618  0E06               	movlw	6
 17713   01361A                     u236_41:
 17714   01361A  CFDE FFE6          	movff	postinc2,postinc1
 17715   01361E  2CE8               	decfsz	wreg,w,c
 17716   013620  EF0D  F09B         	goto	u236_41
 17717   013624  ECC4  F095         	call	_XF_pushEvent	;wreg free
 17718   013628  042A               	decf	btemp^0,w,c
 17719   01362A  A4D8               	btfss	status,2,c
 17720   01362C  EF1A  F09B         	goto	u237_41
 17721   013630  EF1C  F09B         	goto	u237_40
 17722   013634                     u237_41:
 17723   013634  EF25  F09B         	goto	l4686
 17724   013638                     u237_40:
 17725   013638                     
 17726                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 17727   013638  0E01               	movlw	1
 17728   01363A  6EE6               	movwf	postinc1,c
 17729                           
 17730                           ;stkvar	_i @ sp[(-3)+1]
 17731   01363C  0EFE               	movlw	-2
 17732   01363E  50E3               	movf	plusw1,w,c
 17733   013640  6EE6               	movwf	postinc1,c
 17734   013642  ECD3  F0A3         	call	_XF_unscheduleTimer	;wreg free
 17735                           
 17736                           ;xf/xf.c: 231:                 }
 17737   013646  EF32  F09B         	goto	l4688
 17738   01364A                     l4686:
 17739                           
 17740                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 17741                           ;stkvar	_i @ sp[(-2)+1]
 17742   01364A  0EFF               	movlw	-1
 17743   01364C  50E3               	movf	plusw1,w,c
 17744   01364E  0D08               	mullw	8
 17745   013650  0EC8               	movlw	low _theXF
 17746   013652  24F3               	addwf	243,w,c
 17747   013654  6ED9               	movwf	fsr2l,c
 17748   013656  0E02               	movlw	high _theXF
 17749   013658  20F4               	addwfc	prodh,w,c
 17750   01365A  6EDA               	movwf	fsr2h,c
 17751   01365C  0E01               	movlw	1
 17752   01365E  6EDE               	movwf	postinc2,c
 17753   013660  0E00               	movlw	0
 17754   013662  6EDD               	movwf	postdec2,c
 17755   013664                     l4688:
 17756                           
 17757                           ;xf/xf.c: 238:     }
 17758                           ;stkvar	_i @ sp[(-2)+1]
 17759   013664  0EFF               	movlw	-1
 17760   013666  2AE3               	incf	plusw1,f,c
 17761   013668                     
 17762                           ;stkvar	_i @ sp[(-2)+1]
 17763   013668  0EFF               	movlw	-1
 17764   01366A  CFE3 F02A          	movff	plusw1,btemp
 17765   01366E  0E0B               	movlw	11
 17766   013670  642A               	cpfsgt	btemp^0,c
 17767   013672  EF3D  F09B         	goto	u238_41
 17768   013676  EF3F  F09B         	goto	u238_40
 17769   01367A                     u238_41:
 17770   01367A  EFC7  F09A         	goto	l4676
 17771   01367E                     u238_40:
 17772   01367E                     
 17773                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 17774   01367E  52E5               	movf	postdec1,f,c
 17775   013680  52E5               	movf	postdec1,f,c
 17776   013682  0012               	return		;funcret
 17777   013684                     __end_of_XF_decrementAndQueueTimers:
 17778                           	callstack 0
 17779                           
 17780 ;; *************** function _XF_unscheduleTimer *****************
 17781 ;; Defined at:
 17782 ;;		line 202 in file "xf/xf.c"
 17783 ;; Parameters:    Size  Location     Type
 17784 ;;  id              1  [STACK] unsigned char 
 17785 ;;  inISR           1  [STACK] _Bool 
 17786 ;; Auto vars:     Size  Location     Type
 17787 ;;		None
 17788 ;; Return value:  Size  Location     Type
 17789 ;;                  1  [STACK] void 
 17790 ;; Registers used:
 17791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 17792 ;; Tracked objects:
 17793 ;;		On entry : 0/0
 17794 ;;		On exit  : 0/0
 17795 ;;		Unchanged: 0/0
 17796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17801 ;;Total ram usage:        0 bytes
 17802 ;; Hardware stack levels used: 1
 17803 ;; Hardware stack levels required when called: 1
 17804 ;; This function calls:
 17805 ;;		_ENTERCRITICAL
 17806 ;;		_Event_init
 17807 ;;		_LEAVECRITICAL
 17808 ;; This function is called by:
 17809 ;;		_XF_decrementAndQueueTimers
 17810 ;; This function uses a reentrant model
 17811 ;;
 17812                           
 17813                           	psect	text74
 17814   0147A6                     __ptext74:
 17815                           	callstack 0
 17816   0147A6                     _XF_unscheduleTimer:
 17817                           	callstack 17
 17818   0147A6                     
 17819                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 17820                           ;stkvar	_inISR @ sp[(0)+-2]
 17821   0147A6  0EFE               	movlw	-2
 17822   0147A8  50E3               	movf	plusw1,w,c
 17823   0147AA  6EE6               	movwf	postinc1,c
 17824   0147AC  EC65  F0A5         	call	_ENTERCRITICAL	;wreg free
 17825   0147B0                     
 17826                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 17827                           ;stkvar	_id @ sp[(0)+-1]
 17828   0147B0  0EFF               	movlw	-1
 17829   0147B2  50E3               	movf	plusw1,w,c
 17830   0147B4  0D08               	mullw	8
 17831   0147B6  0EC8               	movlw	low _theXF
 17832   0147B8  24F3               	addwf	243,w,c
 17833   0147BA  6ED9               	movwf	fsr2l,c
 17834   0147BC  0E02               	movlw	high _theXF
 17835   0147BE  20F4               	addwfc	prodh,w,c
 17836   0147C0  6EDA               	movwf	fsr2h,c
 17837   0147C2  6ADE               	clrf	postinc2,c
 17838   0147C4  6ADD               	clrf	postdec2,c
 17839   0147C6                     
 17840                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 17841                           ;stkvar	_id @ sp[(0)+-1]
 17842   0147C6  0EFF               	movlw	-1
 17843   0147C8  50E3               	movf	plusw1,w,c
 17844   0147CA  0D08               	mullw	8
 17845   0147CC  0ECA               	movlw	low (_theXF+2)
 17846   0147CE  24F3               	addwf	243,w,c
 17847   0147D0  6E34               	movwf	(btemp+10)^0,c
 17848   0147D2  0E02               	movlw	high (_theXF+2)
 17849   0147D4  20F4               	addwfc	prodh,w,c
 17850   0147D6  6E35               	movwf	(btemp+11)^0,c
 17851   0147D8  C034  FFE6         	movff	btemp+10,postinc1
 17852   0147DC  C035  FFE6         	movff	btemp+11,postinc1
 17853   0147E0  EC2A  F0A4         	call	_Event_init	;wreg free
 17854   0147E4                     
 17855                           ;xf/xf.c: 207:     theXF.countTmr--;
 17856   0147E4  C3E1  FFE8         	movff	_theXF+281,wreg
 17857   0147E8  0FFF               	addlw	-1
 17858   0147EA  CFE8 F3E1          	movff	wreg,_theXF+281
 17859   0147EE                     
 17860                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 17861                           ;stkvar	_inISR @ sp[(0)+-2]
 17862   0147EE  0EFE               	movlw	-2
 17863   0147F0  50E3               	movf	plusw1,w,c
 17864   0147F2  6EE6               	movwf	postinc1,c
 17865   0147F4  EC59  F0A5         	call	_LEAVECRITICAL	;wreg free
 17866   0147F8                     
 17867                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17868   0147F8  52E5               	movf	postdec1,f,c
 17869   0147FA  52E5               	movf	postdec1,f,c
 17870   0147FC  0012               	return		;funcret
 17871   0147FE                     __end_of_XF_unscheduleTimer:
 17872                           	callstack 0
 17873                           
 17874                           	psect	rparam
 17875   000001                     ___rparam_used  equ	1
 17876   000000                     ___param_bank   equ	0
 17877   000000                     __Lparam        equ	__Lrparam
 17878   000000                     __Hparam        equ	__Hrparam
 17879                           
 17880                           	psect	temp
 17881   00002A                     btemp:
 17882                           	callstack 0
 17883   00002A                     	ds	32
 17884   00002A                     wtemp0          set	btemp
 17885   00002C                     wtemp1          set	btemp+2
 17886   00002E                     wtemp2          set	btemp+4
 17887   000030                     wtemp3          set	btemp+6
 17888   000032                     wtemp4          set	btemp+8
 17889   000034                     wtemp5          set	btemp+10
 17890   00002B                     wtemp8          set	btemp+1
 17891   00002A                     ttemp0          set	btemp
 17892   00002D                     ttemp1          set	btemp+3
 17893   000030                     ttemp2          set	btemp+6
 17894   000033                     ttemp3          set	btemp+9
 17895   00002B                     ttemp5          set	btemp+1
 17896   00002E                     ttemp6          set	btemp+4
 17897   000032                     ttemp7          set	btemp+8
 17898   00002A                     ltemp0          set	btemp
 17899   00002E                     ltemp1          set	btemp+4
 17900   000032                     ltemp2          set	btemp+8
 17901   00002A                     lltemp0         set	btemp
 17902   000032                     lltemp1         set	btemp+8
 17903   00003A                     lltemp2         set	btemp+16
 17904   000042                     lltemp3         set	btemp+24
 17905                           
 17906                           	psect	config
 17907                           
 17908                           ;Config register CONFIG1L @ 0x1FFF8
 17909                           ;	Watchdog Timer Enable bit
 17910                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 17911                           ;	Stack Overflow/Underflow Reset Enable bit
 17912                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17913                           ;	Extended Instruction Set Enable bit
 17914                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17915                           ;	Background Debugger Enable bit
 17916                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17917   01FFF8                     	org	131064
 17918   01FFF8  A0                 	db	160
 17919                           
 17920                           ;Config register CONFIG1H @ 0x1FFF9
 17921                           ;	Code Protection bit
 17922                           ;	CP0 = OFF, Program memory is not code-protected
 17923   01FFF9                     	org	131065
 17924   01FFF9  F4                 	db	244
 17925                           
 17926                           ;Config register CONFIG2L @ 0x1FFFA
 17927                           ;	Oscillator Selection bits
 17928                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17929                           ;	Default/Reset System Clock Select bit
 17930                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17931                           ;	Fail-Safe Clock Monitor Enable
 17932                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17933                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17934                           ;	IESO = ON, Two-Speed Start-up enabled
 17935   01FFFA                     	org	131066
 17936   01FFFA  C5                 	db	197
 17937                           
 17938                           ;Config register CONFIG2H @ 0x1FFFB
 17939                           ;	Watchdog Timer Postscaler Select bits
 17940                           ;	WDTPS = 32768, 1:32768
 17941   01FFFB                     	org	131067
 17942   01FFFB  FF                 	db	255
 17943                           
 17944                           ;Config register CONFIG3L @ 0x1FFFC
 17945                           ;	External Address Bus Shift Enable bit
 17946                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17947                           ;	External Memory Bus
 17948                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17949                           ;	Data Bus Width Select bit
 17950                           ;	BW = 16, 16-Bit Data Width mode
 17951                           ;	External Bus Wait Enable bit
 17952                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17953   01FFFC                     	org	131068
 17954   01FFFC  F8                 	db	248
 17955                           
 17956                           ;Config register CONFIG3H @ 0x1FFFD
 17957                           ;	ECCP2 MUX bit
 17958                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17959                           ;	ECCP MUX bit
 17960                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17961                           ;	Ethernet LED Enable bit
 17962                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17963   01FFFD                     	org	131069
 17964   01FFFD  F7                 	db	247
 17965                           tosu	equ	0xFFF
 17966                           tosh	equ	0xFFE
 17967                           tosl	equ	0xFFD
 17968                           stkptr	equ	0xFFC
 17969                           pclatu	equ	0xFFB
 17970                           pclath	equ	0xFFA
 17971                           pcl	equ	0xFF9
 17972                           tblptru	equ	0xFF8
 17973                           tblptrh	equ	0xFF7
 17974                           tblptrl	equ	0xFF6
 17975                           tablat	equ	0xFF5
 17976                           prodh	equ	0xFF4
 17977                           prodl	equ	0xFF3
 17978                           indf0	equ	0xFEF
 17979                           postinc0	equ	0xFEE
 17980                           postdec0	equ	0xFED
 17981                           preinc0	equ	0xFEC
 17982                           plusw0	equ	0xFEB
 17983                           fsr0h	equ	0xFEA
 17984                           fsr0l	equ	0xFE9
 17985                           wreg	equ	0xFE8
 17986                           indf1	equ	0xFE7
 17987                           postinc1	equ	0xFE6
 17988                           postdec1	equ	0xFE5
 17989                           preinc1	equ	0xFE4
 17990                           plusw1	equ	0xFE3
 17991                           fsr1h	equ	0xFE2
 17992                           fsr1l	equ	0xFE1
 17993                           bsr	equ	0xFE0
 17994                           indf2	equ	0xFDF
 17995                           postinc2	equ	0xFDE
 17996                           postdec2	equ	0xFDD
 17997                           preinc2	equ	0xFDC
 17998                           plusw2	equ	0xFDB
 17999                           fsr2h	equ	0xFDA
 18000                           fsr2l	equ	0xFD9
 18001                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        2
    BSS         771
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      62
    BANK0           160      0      48
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5588 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5580 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> filterObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> maskObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), motorControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   26711
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4713
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1397
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     992
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0   10953
                        _XF_popEvent
               _lightControl_Process *
               _motorControl_Process *
 ---------------------------------------------------------------------------------
 (2) _motorControl_Process                                 2     0      2    3604
                       _motorControl
 ---------------------------------------------------------------------------------
 (3) _motorControl                                        26    24      2    3428
                            _CanSend
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6808
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3338
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3202
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2725
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      97
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1392
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1392
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1392
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1392
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     992
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
     _motorControl_Process *
       _motorControl
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      48     30.0%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      62     98.4%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     251      0.0%
DATA                 0      0    1043      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Mar 04 14:39:13 2025

                                  __end_of_updateCarState 20A6  
                                              _CanReceive 45BA  
                                         _timer0ReloadVal 0022  
                                                     l150 3D30  
                                                     l222 44D4  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3C7E  
                                                     l401 3DE8  
                                                     l161 45B0  
                                                     l146 3C96  
                                                     l218 1C0E  
                                                     l154 24EA  
                                                     l322 14A8  
                                                     l171 473C  
                                                     l251 2B7E  
                                                     l412 4678  
                                                     l260 3768  
                                                     l149 3D2A  
                                                     l317 1174  
                                                     l165 4614  
                                                     l174 484A  
                                                     l254 3358  
                                                     l158 4158  
                                                     l327 432A  
                                                     l184 3C6C  
                                                     l168 4A0A  
                                                     l336 43BC  
                                                     l264 0742  
                                                     l257 321E  
                                                     l193 29FC  
                                                     l346 30DE  
                                                     l179 3A0A  
                                                     l453 4294  
                                                     l293 40AE  
                                                     l357 0E2A  
                                                     l623 47A0  
                                                     l199 3472  
                                                     l482 41FC  
                                                     l643 4A92  
                                                     l635 4A2A  
                                                     l379 4546  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 26C8  
                                                     l976 4AF6  
                                                     l979 4B0E  
                                                     u815 1A4C  
                                                     u825 1A70  
                                                     u835 1A92  
                                                     u845 1AF4  
                                                     u855 1B22  
                                                     u865 1B50  
                                                     u875 1B7E  
                                                     u885 1BAC  
                                                     u895 1BDA  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4682  
                          _DRV_CANFDSPI_ModuleEventEnable 461E  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 429E  
                    _DRV_CANFDSPI_TransmitChannelEventGet 4206  
                                                    l1020 49B0  
                                                    l1120 3EA4  
                                                    l1032 4B1E  
                                                    l1200 4B16  
                                                    l1201 4B16  
                                                    l1116 4B06  
                                                    l1206 4B10  
                                                    l1215 2E3E  
                                                    l1207 4B10  
                                                    l1231 384A  
                                                    l1223 2CFE  
                                                    l1064 4916  
                                                    l1216 2E56  
                                                    l1250 4ADE  
                                                    l1162 48D4  
                                                    l1234 3852  
                                                    l1227 3BA2  
                                                    l1092 4A74  
                                                    l1237 47F8  
                                                    l1085 49DE  
                                                    l1261 444C  
                                                    l1246 367E  
                                                    l3030 19FE  
                                                    l3110 373C  
                                                    l3102 368C  
                                                    l1254 4AC6  
                                                    l1174 4946  
                                                    l1095 4B22  
                                                    l1511 27FE  
                                                    l1159 489C  
                                                    l3040 1AC6  
                                                    l3032 1A28  
                                                    l4000 4800  
                                                    l3104 36C8  
                                                    l1512 2874  
                                                    l1168 4AAA  
                                                    l1089 4982  
                                                    l1441 4000  
                                                    l1433 3932  
                                                    l1177 4A54  
                                                    l1257 3AD6  
                                                    l3050 1BAC  
                                                    l3042 1AF4  
                                                    l3034 1A4C  
                                                    l4010 4822  
                                                    l4002 4800  
                                                    l3106 36E6  
                                                    l3052 1BDA  
                                                    l3044 1B22  
                                                    l3036 1A70  
                                                    l3028 19C2  
                                                    l4012 4844  
                                                    l4004 4800  
                                                    l3140 3290  
                                                    l3108 3712  
                                                    l4100 15B6  
                                                    l4020 402C  
                                                    l3046 1B50  
                                                    l3038 1A92  
                                                    l4006 4816  
                                                    l3142 32BA  
                                                    l4030 408E  
                                                    l4022 403C  
                                                    l1527 209C  
                                                    l3048 1B7E  
                                                    l4040 46E6  
                                                    l4008 481C  
                                                    l3144 32EA  
                                                    l3136 3230  
                                                    l5000 1072  
                                                    l4120 1674  
                                                    l4104 15C0  
                                                    l4032 40A0  
                                                    l4024 404A  
                                                    l4016 4012  
                                                    l4200 0136  
                                                    l1449 3F52  
                                                    l1537 209C  
                                                    l4050 4704  
                                                    l4042 46E6  
                                                    l3146 331E  
                                                    l3138 326C  
                                                    l5010 1154  
                                                    l5002 107E  
                                                    l4122 1692  
                                                    l4114 15F8  
                                                    l4106 15D4  
                                                    l4026 405C  
                                                    l4018 4012  
                                                    l4210 01C0  
                                                    l4052 4726  
                                                    l4044 46E6  
                                                    l5020 11A8  
                                                    l5004 109A  
                                                    l5100 3B08  
                                                    l4140 2526  
                                                    l4132 24FC  
                                                    l4124 16E0  
                                                    l4116 1638  
                                                    l4108 15E0  
                                                    l4036 40A8  
                                                    l4028 406A  
                                                    l4060 3388  
                                                    l4212 01E6  
                                                    l4220 02EA  
                                                    l4204 013E  
                                                    l4054 4736  
                                                    l4046 46FC  
                                                    l5030 1388  
                                                    l5022 11BE  
                                                    l5014 1186  
                                                    l5006 10B6  
                                                    l5110 3B6A  
                                                    l5102 3B1C  
                                                    l4302 427A  
                                                    l4150 25EA  
                                                    l4142 2552  
                                                    l4134 250C  
                                                    l4118 1656  
                                                    l4126 16FE  
                                                    l4070 33FC  
                                                    l4062 3388  
                                                    l4230 03FC  
                                                    l4222 039A  
                                                    l4214 01FC  
                                                    l4206 0172  
                                                    l1478 2266  
                                                    l4310 4862  
                                                    l1479 22E0  
                                                    l4048 4702  
                                                    l5032 13A6  
                                                    l5040 1462  
                                                    l5024 11F8  
                                                    l5016 1186  
                                                    l5008 112E  
                                                    l5112 3B94  
                                                    l5104 3B26  
                                                    l4304 428E  
                                                    l4152 2610  
                                                    l4144 2578  
                                                    l4160 26B0  
                                                    l4136 250E  
                                                    l4080 14BA  
                                                    l4072 341A  
                                                    l4064 339E  
                                                    l4240 0558  
                                                    l4224 03B8  
                                                    l4232 0448  
                                                    l4216 0236  
                                                    l4208 01A2  
                                                    l5200 26D2  
                                                    l4312 487E  
                                                    l4320 3774  
                                                    l5120 3A1C  
                                                    l5042 1488  
                                                    l5034 13B2  
                                                    l5026 123A  
                                                    l5018 1196  
                                                    l5050 42CA  
                                                    l3370 4B1C  
                                                    l4170 4ADC  
                                                    l4154 2636  
                                                    l4146 259E  
                                                    l4138 2510  
                                                    l4090 151A  
                                                    l4082 14E6  
                                                    l4074 3448  
                                                    l4066 33A4  
                                                    l4058 336A  
                                                    l4250 05EC  
                                                    l4242 0560  
                                                    l4234 0470  
                                                    l4226 03C4  
                                                    l4218 0278  
                                                    l5210 2722  
                                                    l5202 26D6  
                                                    l4410 28BC  
                                                    l4402 2882  
                                                    l4314 4918  
                                                    l4330 37F4  
                                                    l5130 3AA2  
                                                    l5122 3A24  
                                                    l5300 2480  
                                                    l5036 13CE  
                                                    l5028 12D8  
                                                    l5052 42DA  
                                                    l3380 4984  
                                                    l3372 4AF8  
                                                    l4172 4AB2  
                                                    l5108 3B46  
                                                    l4148 25C4  
                                                    l4092 1534  
                                                    l4084 14E6  
                                                    l4076 346C  
                                                    l4068 33BC  
                                                    l4260 064E  
                                                    l4252 05EC  
                                                    l4244 05AA  
                                                    l4236 04BC  
                                                    l4228 03E0  
                                                    l4180 002A  
                                                    l5140 20D0  
                                                    l5204 26F4  
                                                    l4308 4854  
                                                    l4500 4190  
                                                    l4420 295E  
                                                    l4412 28D4  
                                                    l4404 28A0  
                                                    l5060 45BC  
                                                    l4316 4A34  
                                                    l4332 37FE  
                                                    l5124 3A3C  
                                                    l5310 24D2  
                                                    l5302 249C  
                                                    l5038 13EA  
                                                    l5054 42F8  
                                                    l5046 42A4  
                                                    l3390 49A4  
                                                    l3382 499A  
                                                    l3374 4B00  
                                                    l4174 4AC4  
                                                    l4158 265C  
                                                    l4094 1552  
                                                    l4086 14FC  
                                                    l4270 0704  
                                                    l4262 067C  
                                                    l4254 0604  
                                                    l4246 05AE  
                                                    l4238 050A  
                                                    l4190 00A4  
                                                    l4182 005A  
                                                    l5150 2120  
                                                    l5142 20D8  
                                                    l5134 20A6  
                                                    l5222 278C  
                                                    l5214 2744  
                                                    l5206 26FC  
                                                    l5230 27E8  
                                                    l4502 41AA  
                                                    l4422 296A  
                                                    l4414 28EE  
                                                    l4406 28A0  
                                                    l5070 4610  
                                                    l5062 45D8  
                                                    l4334 3818  
                                                    l4326 3782  
                                                    l5126 3A62  
                                                    l5312 24E2  
                                                    l5304 24A8  
                                                    l5056 4316  
                                                    l5048 42B6  
                                                    l5320 459E  
                                                    l3392 49AA  
                                                    l3384 499E  
                                                    l3376 4B02  
                                                    l5080 48FE  
                                                    l4168 4ACA  
                                                    l1784 2F9C  
                                                    l4360 2E80  
                                                    l4096 1580  
                                                    l4088 1502  
                                                    l4264 0680  
                                                    l4256 0634  
                                                    l4248 05E4  
                                                    l4192 00C0  
                                                    l4184 006C  
                                                    l4176 0008  
                                                    l5152 213E  
                                                    l5144 20F6  
                                                    l5136 20AA  
                                                    l5216 2762  
                                                    l5208 271A  
                                                    l4504 41D2  
                                                    l4424 29AA  
                                                    l4416 290C  
                                                    l4408 28B6  
                                                    l4440 450E  
                                                    l4432 44E4  
                                                    l4512 0754  
                                                    l5064 45E8  
                                                    l4336 381C  
                                                    l4328 37A4  
                                                    l4344 3830  
                                                    l5128 3A80  
                                                    l5400 2000  
                                                    l5090 4954  
                                                    l5330 49BC  
                                                    l4610 3EA2  
                                                    l4602 3DF2  
                                                    l5306 24BC  
                                                    l5314 4550  
                                                    l3394 4B08  
                                                    l3386 49A0  
                                                    l3378 4B04  
                                                    l2906 4A5A  
                                                    l5082 4900  
                                                    l5074 48DE  
                                                    l5322 4AE2  
                                                    l4370 2EC6  
                                                    l4362 2E86  
                                                    l4354 2E60  
                                                    l4290 420E  
                                                    l4098 15A4  
                                                    l4282 073C  
                                                    l4274 070C  
                                                    l4258 0646  
                                                    l4266 06A2  
                                                    l4178 0008  
                                                    l5170 21DC  
                                                    l5162 217E  
                                                    l5154 2146  
                                                    l5146 20FE  
                                                    l5138 20C8  
                                                    l5234 2806  
                                                    l5242 283A  
                                                    l5218 276A  
                                                    l4426 29C8  
                                                    l4418 293A  
                                                    l4442 451C  
                                                    l4434 44E4  
                                                    l4530 0840  
                                                    l4522 07BC  
                                                    l4514 075C  
                                                    l5066 4608  
                                                    l4346 3834  
                                                    l4338 3826  
                                                    l4450 2BB2  
                                                    l5092 4968  
                                                    l5332 49C0  
                                                    l4620 396E  
                                                    l4604 3E00  
                                                    l5308 24C0  
                                                    l5260 2318  
                                                    l5252 22EE  
                                                    l5316 455A  
                                                    l3396 4B0A  
                                                    l3388 49A2  
                                                    l5084 4902  
                                                    l5076 48E0  
                                                    l5324 4AE6  
                                                    l4380 2F4A  
                                                    l4372 2EE4  
                                                    l4364 2E96  
                                                    l4356 2E64  
                                                    l4292 421E  
                                                    l4276 0722  
                                                    l4268 06F2  
                                                    l4196 00C8  
                                                    l4188 0074  
                                                    l4700 38AC  
                                                    l5172 21E4  
                                                    l5164 2198  
                                                    l5148 211C  
                                                    l5180 2250  
                                                    l5236 281A  
                                                    l5228 27AE  
                                                    l4508 41E8  
                                                    l4428 29F6  
                                                    l4444 4540  
                                                    l4436 44E4  
                                                    l4540 08AC  
                                                    l4532 0858  
                                                    l4524 07EC  
                                                    l4516 0776  
                                                    l4460 2C64  
                                                    l4452 2BCC  
                                                    l5404 2020  
                                                    l5334 49D6  
                                                    l4630 39C6  
                                                    l4622 3974  
                                                    l4614 3944  
                                                    l4606 3E44  
                                                    l5270 2372  
                                                    l5262 2328  
                                                    l5254 22F2  
                                                    l5318 456E  
                                                    l5086 4912  
                                                    l5078 48E8  
                                                    l5326 4AF2  
                                                    l4382 2F54  
                                                    l4374 2EE8  
                                                    l4366 2EA2  
                                                    l4358 2E74  
                                                    l5094 3AE8  
                                                    l4294 4238  
                                                    l4286 420E  
                                                    l4278 0734  
                                                    l4198 0102  
                                                    l4710 3F64  
                                                    l4702 38D4  
                                                    l5190 228E  
                                                    l5166 21B6  
                                                    l5158 2168  
                                                    l5238 282E  
                                                    l5350 2D8E  
                                                    l4438 44F4  
                                                    l4550 0936  
                                                    l4542 08C4  
                                                    l4534 086E  
                                                    l4518 07A6  
                                                    l4470 2CBC  
                                                    l4462 2C68  
                                                    l4454 2BEC  
                                                    l5430 34A6  
                                                    l4480 47A6  
                                                    l5088 4950  
                                                    l5336 49DA  
                                                    l5328 49B2  
                                                    l4632 39CA  
                                                    l4616 3958  
                                                    l4800 1848  
                                                    l4640 3BB4  
                                                    l4608 3E6C  
                                                    l5280 23C8  
                                                    l5272 2382  
                                                    l5264 2336  
                                                    l5256 22F6  
                                                    l4376 2EF8  
                                                    l4368 2EBC  
                                                    l4384 2F72  
                                                    l5096 3AEC  
                                                    l4296 4260  
                                                    l4288 420E  
                                                    l4392 40BA  
                                                    l4720 3FC8  
                                                    l4712 3F78  
                                                    l4704 38E8  
                                                    l5184 226E  
                                                    l5168 21BE  
                                                    l5360 2DFA  
                                                    l5344 2D14  
                                                    l4560 0A70  
                                                    l4544 08E4  
                                                    l4536 0880  
                                                    l4528 080C  
                                                    l4472 2CE6  
                                                    l4464 2C72  
                                                    l4456 2C2C  
                                                    l4448 2B8E  
                                                    l5440 3506  
                                                    l5432 34B4  
                                                    l4482 47B0  
                                                    l4634 39E0  
                                                    l4618 3958  
                                                    l4810 192E  
                                                    l4802 1876  
                                                    l4642 3BC8  
                                                    l5290 242C  
                                                    l5282 23D8  
                                                    l5274 239A  
                                                    l5266 2344  
                                                    l5258 2300  
                                                    l4386 2F84  
                                                    l4378 2F26  
                                                    l5098 3AFE  
                                                    l4298 4272  
                                                    l4394 40E2  
                                                    l4730 3EDE  
                                                    l4722 3FD4  
                                                    l4714 3F8C  
                                                    l4706 38F4  
                                                    l5186 227E  
                                                    l5178 2206  
                                                    l5362 2E18  
                                                    l5346 2D4A  
                                                    l5338 2D0C  
                                                    l4490 416A  
                                                    l4570 0C82  
                                                    l4562 0BF0  
                                                    l4554 094C  
                                                    l4546 08FA  
                                                    l4538 089C  
                                                    l4474 2CF0  
                                                    l4466 2C8C  
                                                    l4458 2C36  
                                                    l5370 1E6C  
                                                    l5450 3558  
                                                    l5442 3512  
                                                    l5434 34E4  
                                                    l4484 47C6  
                                                    l4636 3A04  
                                                    l4628 3978  
                                                    l4812 195C  
                                                    l4804 18A4  
                                                    l4660 3C42  
                                                    l4644 3BC8  
                                                    l4740 49E0  
                                                    l4820 3D42  
                                                    l5292 243E  
                                                    l5284 23F0  
                                                    l5276 23B2  
                                                    l5268 235C  
                                                    l4388 2F90  
                                                    l4396 40FE  
                                                    l4732 3F06  
                                                    l4724 3EB0  
                                                    l4716 3F92  
                                                    l4708 3906  
                                                    l5364 43CE  
                                                    l5356 2D96  
                                                    l5348 2D68  
                                                    l4492 416A  
                                                    l4580 0D14  
                                                    l4572 0C9E  
                                                    l4564 0C1A  
                                                    l4556 0974  
                                                    l4548 0904  
                                                    l4468 2C90  
                                                    l4476 2CFA  
                                                    l5380 1F00  
                                                    l5452 355A  
                                                    l5444 3542  
                                                    l5436 34F4  
                                                    l5428 3484  
                                                    l4486 47E4  
                                                    l4670 358A  
                                                    l4814 1992  
                                                    l4806 18D2  
                                                    l4662 3C66  
                                                    l4654 3BE8  
                                                    l4646 3BDE  
                                                    l4742 49E0  
                                                    l4822 3D42  
                                                    l4902 4A7C  
                                                    l4910 4A0C  
                                                    l5294 245A  
                                                    l5286 2408  
                                                    l5278 23B8  
                                                    l4398 410E  
                                                    l4734 3F1A  
                                                    l4726 3EC4  
                                                    l4718 3FB4  
                                                    l5366 43F2  
                                                    l5358 2DC4  
                                                    l4494 416A  
                                                    l4590 0DB0  
                                                    l4582 0D5E  
                                                    l4574 0CBA  
                                                    l4566 0C50  
                                                    l4558 099A  
                                                    l5390 1F8E  
                                                    l5382 1F3C  
                                                    l5374 1EAC  
                                                    l5454 3576  
                                                    l5446 3546  
                                                    l5438 3502  
                                                    l4488 47EE  
                                                    l4680 35CA  
                                                    l4760 1CAC  
                                                    l4752 1C20  
                                                    l4808 1900  
                                                    l4656 3C28  
                                                    l4648 3BE4  
                                                    l4744 49E4  
                                                    l4824 3D7E  
                                                    l4904 4A7C  
                                                    l4840 313C  
                                                    l4832 30F0  
                                                    l5296 246A  
                                                    l5288 241C  
                                                    l4736 3F26  
                                                    l4728 3ED8  
                                                    l5368 4412  
                                                    l4592 0DFA  
                                                    l4584 0D62  
                                                    l4576 0CD6  
                                                    l4568 0C6C  
                                                    l5392 1FAE  
                                                    l5384 1F42  
                                                    l5376 1EB2  
                                                    l5456 357A  
                                                    l5448 3556  
                                                    l4690 3668  
                                                    l4682 35EE  
                                                    l4770 1D76  
                                                    l4762 1CDE  
                                                    l4754 1C20  
                                                    l4658 3C2C  
                                                    l4930 4622  
                                                    l4746 49E6  
                                                    l4738 49E0  
                                                    l4826 3DA6  
                                                    l4922 478A  
                                                    l4914 474A  
                                                    l4850 3200  
                                                    l4842 316E  
                                                    l4834 30F0  
                                                    l5298 247A  
                                                    l4498 4180  
                                                    l4594 0DFE  
                                                    l4578 0D0C  
                                                    l4586 0D88  
                                                    l4666 48A2  
                                                    l5394 1FB4  
                                                    l5386 1F58  
                                                    l5378 1EC4  
                                                    l4684 3638  
                                                    l4676 358E  
                                                    l3980 3C78  
                                                    l4764 1CF8  
                                                    l4756 1C60  
                                                    l4940 4662  
                                                    l4932 4622  
                                                    l4748 49EE  
                                                    l4828 3DCA  
                                                    l4924 478E  
                                                    l4916 474E  
                                                    l4908 4A0C  
                                                    l4860 2A4A  
                                                    l4844 31A4  
                                                    l4836 30F0  
                                                    l4692 3864  
                                                    l4588 0DA8  
                                                    l4596 0E20  
                                                    l4668 4A98  
                                                    l5660 208E  
                                                    l5396 1FCA  
                                                    l5388 1F78  
                                                    l4686 364A  
                                                    l4678 35B0  
                                                    l3990 3CD2  
                                                    l3982 3C80  
                                                    l4766 1D2A  
                                                    l4758 1C92  
                                                    l4790 177E  
                                                    l4934 4622  
                                                    l4950 4484  
                                                    l4918 4774  
                                                    l4870 2B20  
                                                    l4862 2A5A  
                                                    l4854 2A0E  
                                                    l4846 31DA  
                                                    l4838 312C  
                                                    l4694 3878  
                                                    l5670 221A  
                                                    l5662 206A  
                                                    l5398 1FEA  
                                                    l4688 3664  
                                                    l3992 3CF0  
                                                    l3984 3C86  
                                                    l4768 1D44  
                                                    l4776 1D90  
                                                    l4792 17A8  
                                                    l4936 4622  
                                                    l4880 2FAE  
                                                    l4872 2B44  
                                                    l4864 2A8E  
                                                    l4856 2A0E  
                                                    l4848 3200  
                                                    l4696 388C  
                                                    l5672 22A2  
                                                    l5664 2080  
                                                    l3986 3CA4  
                                                    l3994 3D10  
                                                    l4778 1E3C  
                                                    l4794 17CC  
                                                    l4786 1742  
                                                    l4938 462A  
                                                    l4954 449A  
                                                    l4946 445A  
                                                    l4890 3010  
                                                    l4882 2FAE  
                                                    l4874 2B5E  
                                                    l4866 2AC8  
                                                    l4858 2A0E  
                                                    l4970 4382  
                                                    l5674 2672  
                                                    l4698 38A0  
                                                    l5666 27C2  
                                                    l5658 2054  
                                                    l3996 3D2C  
                                                    l3988 3CB4  
                                                    l5676 1DA6  
                                                    l4796 17F0  
                                                    l4788 1742  
                                                    l4956 44AA  
                                                    l4948 445E  
                                                    l4892 3068  
                                                    l4868 2AF8  
                                                    l4964 433C  
                                                    l5668 284E  
                                                    l4798 1812  
                                                    l4958 44C2  
                                                    l4894 3094  
                                                    l4886 2FC4  
                                                    l4878 2FAE  
                                                    l4974 4398  
                                                    l4966 433C  
                                                    l4990 0E8A  
                                                    l4982 0E3C  
                                                    l4896 30A4  
                                                    l4888 3000  
                                                    l4976 43A8  
                                                    l4968 435A  
                                                    l4992 0EC4  
                                                    l4984 0E3C  
                                                    l4898 30BE  
                                                    l4994 0F06  
                                                    l4986 0E4C  
                                                    l4988 0E74  
                                                    l4996 0FA4  
                                                    l4998 1054  
                                     __end_of_XF_popEvent 3BAC  
                                                    STR_1 FFED  
                                                    u1005 3290  
                                                    u2000 2E74  
                                                    u2001 2E70  
                                                    u2010 2E96  
                                                    u2011 2E92  
                                                    u2020 2EBC  
                                                    u2100 2BCC  
                                                    u2021 2EB8  
                                                    u2101 2BC8  
                                                    u2030 2EF8  
                                                    u2031 2EF4  
                                                    u2111 2C00  
                                                    u2040 2F26  
                                                    u3000 271A  
                                                    u2200 08C4  
                                                    u2120 2C64  
                                                    u2041 2F22  
                                                    u3001 2716  
                                                    u2201 08C0  
                                                    u2121 2C60  
                                                    u2050 2F72  
                                                    u3010 2740  
                                                    u2210 08FA  
                                                    u2130 2C8C  
                                                    u2051 2F6E  
                                                    u3011 273C  
                                                    u2211 08F6  
                                                    u2131 2C88  
                                                    u2300 39BC  
                                                    u2060 2F84  
                                                    u3020 2762  
                                                    u2220 0948  
                                                    u2061 2F80  
                                                    u3021 275E  
                                                    u2221 0944  
                                                    u2141 2CDE  
                                                    _LATA 0F89  
                                                    u2310 39E0  
                                                    u2070 410E  
                                                    u3030 2788  
                                                    u3110 4412  
                                                    u2150 417C  
                                                    u2230 099A  
                                                    _LATB 0F8A  
                                                    u2311 39DC  
                                                    u2071 410A  
                                                    u3031 2784  
                                                    u3111 440E  
                                                    u2151 4178  
                                                    u2231 0996  
                                                    _LATC 0F8B  
                                                    u2400 388C  
                                                    u3040 27AA  
                                                    u2160 41E4  
                                                    u2080 293A  
                                                    u2240 0B66  
                                                    _LATD 0F8C  
                                                    u2305 39B2  
                                                    u2401 3888  
                                                    u3041 27A6  
                                                    u2161 41E0  
                                                    u2081 2936  
                                                    _LATE 0F8D  
                                                    u2330 3C42  
                                                    u2410 38A0  
                                                    u3050 27FA  
                                                    u2090 29F6  
                                                    u2170 07B8  
                                                    u3130 1EA8  
                                                    _LATF 0F8E  
                                                    u2331 3C3E  
                                                    u2411 389C  
                                                    u3051 27F6  
                                                    u2091 29F2  
                                                    u2171 07B4  
                                                    u3131 1EA4  
                                                    _LATG 0F8F  
                                                    u2324 3C1E  
                                                    u3060 24D2  
                                                    u1700 3448  
                                                    u2260 0C6C  
                                                    u2180 0808  
                                                    u3140 1EC4  
                                                    _LATH 0F90  
                                                    u2325 3C18  
                                                    u3061 24CE  
                                                    u1701 3444  
                                                    u2261 0C68  
                                                    u2245 0B5C  
                                                    u2181 0804  
                                                    u3141 1EC0  
                                                    u1710 1580  
                                                    u2430 3F8C  
                                                    u2270 0D84  
                                                    u2190 089C  
                                                    u3150 1F58  
                                                    _LATJ 0F91  
                                                    u1711 157C  
                                                    u2431 3F88  
                                                    u2271 0D80  
                                                    u2255 0BAC  
                                                    u2191 0898  
                                                    u3151 1F54  
                                                    u2600 4496  
                                                    u1720 15B6  
                                                    u1800 0136  
                                                    u3128 4438  
                                                    u3080 2D8E  
                                                    u2280 0E20  
                                                    u3160 1F8E  
                                                    u2505 18A4  
                                                    u2601 4492  
                                                    u1721 15B2  
                                                    u1801 0132  
                                                    u3129 444C  
                                                    u3081 2D8A  
                                                    u2281 0E1C  
                                                    u3161 1F8A  
                                                    u2290 3E00  
                                                    u2610 4394  
                                                    u1730 1692  
                                                    u1810 01E6  
                                                    u2450 3ED8  
                                                    u3090 2E3E  
                                                    u3170 1FCA  
                                                    u2515 18D2  
                                                    u2291 3DFC  
                                                    u2611 4390  
                                                    u1731 168E  
                                                    u1811 01E2  
                                                    u2451 3ED4  
                                                    u3091 2E3A  
                                                    u3171 1FC6  
                                                    u1660 3CA4  
                                                    u2620 0E74  
                                                    u1740 172C  
                                                    u1900 05E4  
                                                    u1820 026E  
                                                    u3180 2000  
                                                    u1661 3CA0  
                                                    u2525 1900  
                                                    u2621 0E70  
                                                    u1741 1728  
                                                    u1901 05E0  
                                                    u3181 1FFC  
                                                    u1670 3D2A  
                                                    u2710 11A8  
                                                    u2630 0EFC  
                                                    u1750 2526  
                                                    u1910 0604  
                                                    u1671 3D26  
                                                    u2535 192E  
                                                    u2711 11A4  
                                                    u1751 2522  
                                                    u1911 0600  
                                                    u2720 1230  
                                                    u2800 42B6  
                                                    u1760 4ADC  
                                                    u1680 405C  
                                                    u1920 06A2  
                                                    u1840 02DA  
                                                    u2545 195C  
                                                    u2465 17CC  
                                                    u2705 111C  
                                                    u2801 42B2  
                                                    u1761 4AD8  
                                                    u1681 4058  
                                                    u1921 069E  
                                                    u1825 0264  
                                                    u2570 2FC0  
                                                    u1770 4AC4  
                                                    u1690 40A0  
                                                    u1930 0704  
                                                    u1850 0316  
                                                    u2810 45E8  
                                                    u2475 17F0  
                                                    u2571 2FBC  
                                                    u2555 3DCA  
                                                    u2635 0EF2  
                                                    u1771 4AC0  
                                                    u1691 409C  
                                                    u1931 0700  
                                                    u1835 02A4  
                                                    u2811 45E4  
                                                    u2660 0F92  
                                                    u1940 0734  
                                                    u1780 006C  
                                                    u2900 211C  
                                                    u2485 1812  
                                                    u2565 2B44  
                                                    u2725 1226  
                                                    u2645 0F32  
                                                    u1941 0730  
                                                    u1845 02D0  
                                                    u1781 0068  
                                                    u2901 2118  
                                                    u2590 4786  
                                                    u2750 12C6  
                                                    u2670 0FD0  
                                                    u1950 4272  
                                                    u1790 00C0  
                                                    u2910 213E  
                                                    u2495 1876  
                                                    u2591 4782  
                                                    u2735 1266  
                                                    u2655 0F5C  
                                                    u1951 426E  
                                                    u1855 030C  
                                                    u1791 00BC  
                                                    u2911 213A  
                                                    u2760 1304  
                                                    u2840 3B1C  
                                                    u1880 0500  
                                                    u2920 2164  
                                                    u1960 37A4  
                                                    u2585 3058  
                                                    u2745 1290  
                                                    u2665 0F88  
                                                    u2841 3B18  
                                                    u1865 035A  
                                                    u2921 2160  
                                                    u1961 37A0  
                                                    u1890 054E  
                                                    u2930 217A  
                                                    u2755 12BC  
                                                    u2675 0FC6  
                                                    u1875 0438  
                                                    u2931 2176  
                                                    u1971 37EC  
                                                    u2940 2198  
                                                    u1980 3818  
                                                    u2765 12FA  
                                                    u2685 1014  
                                                    u1885 04F6  
                                                    u2941 2194  
                                                    u1981 3814  
                                                    u2950 21B6  
                                                    u1990 384A  
                                                    u2775 1348  
                                                    u2695 10F2  
                                                    u1895 0544  
                                                    u2951 21B2  
                                                    u1991 3846  
                                                    u2871 3AC8  
                                                    u2960 21DC  
                                                    u2880 20C8  
                                                    u2785 1426  
                                                    u2961 21D8  
                                                    u2881 20C4  
                                                    u2970 2202  
                                                    u2890 20F6  
                                                    u2795 1450  
                                                    u2971 21FE  
                                                    u2891 20F2  
                                                    u2980 2262  
                                                    u2981 225E  
                                                    u2990 26F4  
                                                    u2991 26F0  
                       __end_of_DRV_CANFDSPI_TimeStampSet 4A34  
                                    _motorControl_Process 20A6  
                                                    _main 347C  
                                        _XF_scheduleTimer 3772  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 002A  
                                            _CanSetFilter 4550  
                                         __end_of_CanInit 24F4  
                                         __end_of_CanSend 4162  
                                   _lightContol_BackLight 3EA8  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2E5C  
                                         __end_of_XF_post 3AE0  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 3228  
                     _DRV_CANFDSPI_TransmitQueueConfigure 30E8  
                                 __end_of_TMR0_Initialize 4918  
                     __end_of_DRV_CANFDSPI_WriteByteArray 347C  
                             _DRV_CANFDSPI_WriteByteArray 3362  
                           __end_of_OSCILLATOR_Initialize 4B10  
                                         __end_of___awmod 2FA6  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3362  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 3228  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 49E0  
                                                   _dummy 001C  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 2D08  
                               motorControl_Process@state 005E  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 002A  
                                                   ltemp1 002E  
                                                   ltemp2 0032  
                            lightControl_Process@oldState 0024  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 002A  
                                                   ttemp1 002D  
                                                   ttemp2 0030  
                                                   ttemp3 0033  
                                                   ttemp5 002B  
                                                   ttemp6 002E  
                                                   ttemp7 0032  
                                                   status 0FD8  
                                                   wtemp0 002A  
                                                   wtemp1 002C  
                                                   wtemp2 002E  
                                                   wtemp3 0030  
                                                   wtemp4 0032  
                                                   wtemp5 0034  
                                                   wtemp8 002B  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 4334  
                           _DRV_CANFDSPI_FilterToFifoLink 429E  
                               _DRV_CANFDSPI_TefConfigure 3D3A  
                                         __initialization 4682  
                                              _Event_init 4854  
                                            __end_of_main 3586  
                             ?_INTERRUPT_InterruptManager 004A  
                      __end_of_DRV_CANFDSPI_ReadByteArray 2A06  
                              _DRV_CANFDSPI_ReadByteArray 287A  
                                     __end_of_Event_setPE 48DE  
                                     __end_of_Event_setId 4AB2  
                                           __activetblptr 0003  
                                          _Event_getDelay 4A34  
                                             _XF_popEvent 3AE0  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  i2l5422 004C  
                                                  i2l5424 005A  
                                                  i2l5426 0068  
                                                  u234_40 35B0  
                                                  u234_41 35AC  
                                                  u235_40 35EE  
                                                  u307_40 49D6  
                                                  u235_41 35EA  
                                                  u307_41 49D2  
                                                  u236_41 361A  
                                                  u237_40 3638  
                                                  u237_41 3634  
                                                  u238_40 367E  
                                                  u238_41 367A  
                                                  u282_40 4968  
                                                  u282_41 4964  
                                                  u283_48 496E  
                                                  u283_49 4982  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 4918  
                                          _XF_noMoreEvent 4B16  
                                          _XF_noMoreTimer 4B10  
                          __end_of_DRV_CANFDSPI_WriteByte 4854  
                          __end_of_DRV_CANFDSPI_WriteWord 3A14  
                                       __end_of_SPI2_Open 3EA8  
                                          _XF_executeOnce 43C6  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 46A2  
                                                  clear_1 46B4  
                                                  clear_2 46C0  
                                                  clear_3 46CC  
                                                  clear_4 46D8  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 4A5A  
                                            __pdataCOMRAM 005D  
                                                  lltemp0 002A  
                                                  lltemp1 0032  
                                                  lltemp2 003A  
                                                  lltemp3 0042  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 3C76  
                              _DRV_CANFDSPI_WriteHalfWord 3BAC  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 4984  
                                  __end_of_Event_setDelay 4950  
                                  __end_of_XF_noMoreEvent 4B1C  
                                  __end_of_XF_noMoreTimer 4B16  
                                       _SYSTEM_Initialize 4AE2  
                         lightContol_FrontLight@lastLight 0027  
                                              __accesstop 0060  
                                 __end_of__initialization 46DE  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 4456  
                                  _lightContol_FrontLight 3F5C  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 004A  
                                              ___inthi_sp 0931  
                                             _Event_setPE 48A2  
                                             _Event_setId 4A98  
                                __end_of_XF_scheduleTimer 385C  
                                   TMR0_ISR@CountCallBack 0020  
                                     __end_of_SpiTransfer 3D3A  
                                   __end_of_LEAVECRITICAL 4ACA  
                               __end_of_SYSTEM_Initialize 4AF8  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 005A  
                        __end_of_TMR0_SetInterruptHandler 4A7C  
                               _DRV_CANFDSPI_TimeStampSet 4A0C  
                                            _XF_pushEvent 2B88  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 4AE2  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 22E6  
                                                 _CanSend 40B8  
                                                 _XF_init 2D08  
                                                 _XF_post 3A14  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 26D2  
                             _DRV_CANFDSPI_DlcToDataBytes 24F4  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 30E8  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2FA6  
                                                 ___awmod 2E5C  
                                                 uf310999 43E6  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 4206  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 4162  
                                                 __pcinit 4682  
                                                 __ramtop 1000  
                                                 __ptext0 347C  
                                                 __ptext1 1E64  
                                                 __ptext2 3A14  
                                                 __ptext3 2B88  
                                                 __ptext4 3772  
                                                 __ptext5 4B10  
                                                 __ptext6 4B16  
                                                 __ptext7 4918  
                                                 __ptext8 4A34  
                                                 __ptext9 48A2  
                                             _SpiTransfer 3C76  
                                               _T0CONbits 0FD5  
                                                 us242999 3F6E  
                                                 us244999 3EBA  
                                                 us239999 386E  
                                   _OSCILLATOR_Initialize 4B08  
                                                 us285999 3B38  
                                                 us286999 3B60  
                             lightContol_FrontLight@F6675 0070  
                                    end_of_initialization 46DE  
                              __end_of_DRV_CANFDSPI_Reset 4A0C  
                                      __end_of_CanReceive 461E  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3772  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3684  
                                               _SPI2_Open 3DF2  
                                _TMR0_SetInterruptHandler 4A5A  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 4B20  
                            __end_of_lightControl_Process 287A  
                                           __pidataCOMRAM 4B20  
                                         _SPI2_Initialize 4AF8  
                                      _spi2_configuration FFE9  
                                     start_initialization 4682  
                           __end_of_DRV_CANFDSPI_ReadByte 4746  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 48A2  
                          __end_of_lightContol_FrontLight 400A  
                              __end_of_XF_unscheduleTimer 47FE  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0001  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 2B88  
                   _DRV_CANFDSPI_TransmitChannelConfigure 2A06  
                                       _spiTransmitBuffer 0100  
                                    __end_of_motorControl 393C  
                               lightControl_Process@state 0025  
                                   _TMR0_InterruptHandler 005A  
                                  _PIN_MANAGER_Initialize 4984  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 4B08  
                            ??_INTERRUPT_InterruptManager 004A  
                                 motorControl@lastPercent 0029  
                                 motorControl@lastStarter 0028  
                                           _TMR0_CallBack 4950  
                                    _INTERRUPT_Initialize 4B1C  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 26D2  
                           __end_of_lightContol_BackLight 3F5C  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 44DC  
                        _DRV_CANFDSPI_OperationModeSelect 4456  
                                                i2u320_40 0068  
                                                i2u320_41 0064  
                                                i2u319_40 005A  
                                                i2u319_41 0056  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 49E0  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 49B2  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 0026  
                                           _LEAVECRITICAL 4AB2  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 4A98  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 4A7C  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                                       motorControl@F6669 0080  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 45BA  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 40B8  
                      _DRV_CANFDSPI_TransmitChannelUpdate 400A  
                            motorControl_Process@oldState 005D  
                                                _carState 0001  
                       __end_of_DRV_CANFDSPI_TefConfigure 3DF2  
                                                __ptext10 4A98  
                                                __ptext11 45BA  
                                                __ptext20 20A6  
                                                __ptext12 074C  
                                                __ptext21 385C  
                                                __ptext13 44DC  
                                                __ptext30 4206  
                                                __ptext22 3F5C  
                                                __ptext14 287A  
                                                __ptext31 3AE0  
                                                __ptext23 3EA8  
                                                __ptext15 4162  
                                                __ptext40 4B08  
                                                __ptext32 2E5C  
                                                __ptext24 40B8  
                                                __ptext16 2D08  
                                                __ptext41 4B1C  
                                                __ptext33 4AB2  
                                                __ptext25 0000  
                                                __ptext17 4854  
                                                __ptext50 3228  
                                                __ptext42 4550  
                                                __ptext34 4ACA  
                                                __ptext26 3362  
                                                __ptext18 43C6  
                                                __ptext51 2A06  
                                                __ptext43 429E  
                                                __ptext35 4AE2  
                                                __ptext27 400A  
                                                __ptext19 26D2  
                                                __ptext60 47FE  
                                                __ptext52 4A0C  
                                                __ptext44 0E34  
                                                __ptext36 48DE  
                                                __ptext28 14B2  
                                                __ptext61 46E4  
                                                __ptext53 4A7C  
                                                __ptext45 117E  
                                                __ptext37 4A5A  
                                                __ptext29 24F4  
                                                __ptext70 49B2  
                                                __ptext62 461E  
                                                __ptext54 4746  
                                                __ptext46 4334  
                                                __ptext38 4AF8  
                                                __ptext71 4950  
                                                __ptext63 3BAC  
                                                __ptext55 3D3A  
                                                __ptext47 22E6  
                                                __ptext39 4984  
                                                __ptext72 4B22  
                                                __ptext64 19BA  
                                                __ptext56 49E0  
                                                __ptext48 3684  
                                                __ptext73 3586  
                                                __ptext65 173A  
                                                __ptext57 3DF2  
                                                __ptext49 30E8  
                                                __ptext74 47A6  
                                                __ptext66 1C18  
                                                __ptext58 2FA6  
                                                __ptext67 393C  
                                                __ptext59 4456  
                                                __ptext68 3C76  
                                           _ENTERCRITICAL 4ACA  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 3684  
                              _XF_decrementAndQueueTimers 3586  
                    __end_of_TMR0_DefaultInterruptHandler 4B24  
                            _TMR0_DefaultInterruptHandler 4B22  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 47A6  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 47FE  
                            __end_of_motorControl_Process 22E6  
                                  _DRV_CANFDSPI_WriteWord 393C  
                                            _motorControl 385C  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 43C6  
                              _DRV_CANFDSPI_FilterDisable 4334  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 46E4  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 47A6  
                            _DRV_CANFDSPI_TimeStampEnable 4746  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 4550  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 44DC  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 1E64  
                                         _TMR0_Initialize 48DE  
                              lightContol_BackLight@F6681 0060  
                          __end_of_PIN_MANAGER_Initialize 49B2  
