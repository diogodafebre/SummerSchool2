

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Feb 27 12:32:06 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,space=0,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,space=0,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,space=0,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,space=0,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,space=0,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,space=0,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,space=0,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,space=0,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,space=0,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,space=0,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,space=0,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,space=0,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,space=0,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,space=0,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,space=0,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,space=0,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,space=0,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,space=0,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,space=0,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,space=0,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,space=0,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,space=0,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,space=0,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,space=0,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,space=0,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,space=0,delta=1
    81                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,space=0,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,space=0,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,space=0,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,space=0,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,space=0,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    89                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    90                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    91   000000                     
    92                           ; Generated 17/08/2023 GMT
    93                           ; 
    94                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution. Publication is not required when
   108                           ;        this file is used in an embedded application.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F97J60 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126   000FE0                     bsr             equ	4064
   127   000FE9                     fsr0            equ	4073
   128   000FEA                     fsr0h           equ	4074
   129   000FE9                     fsr0l           equ	4073
   130   000FE1                     fsr1            equ	4065
   131   000FE2                     fsr1h           equ	4066
   132   000FE1                     fsr1l           equ	4065
   133   000FD9                     fsr2            equ	4057
   134   000FDA                     fsr2h           equ	4058
   135   000FD9                     fsr2l           equ	4057
   136   000FEF                     indf0           equ	4079
   137   000FE7                     indf1           equ	4071
   138   000FDF                     indf2           equ	4063
   139   000FF2                     intcon          equ	4082
   140   000000                     nvmcon          equ	0
   141   000FF9                     pcl             equ	4089
   142   000FFA                     pclath          equ	4090
   143   000FFB                     pclatu          equ	4091
   144   000FEB                     plusw0          equ	4075
   145   000FE3                     plusw1          equ	4067
   146   000FDB                     plusw2          equ	4059
   147   000FED                     postdec0        equ	4077
   148   000FE5                     postdec1        equ	4069
   149   000FDD                     postdec2        equ	4061
   150   000FEE                     postinc0        equ	4078
   151   000FE6                     postinc1        equ	4070
   152   000FDE                     postinc2        equ	4062
   153   000FEC                     preinc0         equ	4076
   154   000FE4                     preinc1         equ	4068
   155   000FDC                     preinc2         equ	4060
   156   000FF3                     prod            equ	4083
   157   000FF4                     prodh           equ	4084
   158   000FF3                     prodl           equ	4083
   159   000FD8                     status          equ	4056
   160   000FF5                     tablat          equ	4085
   161   000FF6                     tblptr          equ	4086
   162   000FF7                     tblptrh         equ	4087
   163   000FF6                     tblptrl         equ	4086
   164   000FF8                     tblptru         equ	4088
   165   000FFD                     tosl            equ	4093
   166   000FE8                     wreg            equ	4072
   167   000E80                     MAADR5          equ	3712	;# 
   168   000E81                     MAADR6          equ	3713	;# 
   169   000E82                     MAADR3          equ	3714	;# 
   170   000E83                     MAADR4          equ	3715	;# 
   171   000E84                     MAADR1          equ	3716	;# 
   172   000E85                     MAADR2          equ	3717	;# 
   173   000E8A                     MISTAT          equ	3722	;# 
   174   000E97                     EFLOCON         equ	3735	;# 
   175   000E98                     EPAUS           equ	3736	;# 
   176   000E98                     EPAUSL          equ	3736	;# 
   177   000E99                     EPAUSH          equ	3737	;# 
   178   000EA0                     MACON1          equ	3744	;# 
   179   000EA2                     MACON3          equ	3746	;# 
   180   000EA3                     MACON4          equ	3747	;# 
   181   000EA4                     MABBIPG         equ	3748	;# 
   182   000EA6                     MAIPG           equ	3750	;# 
   183   000EA6                     MAIPGL          equ	3750	;# 
   184   000EA7                     MAIPGH          equ	3751	;# 
   185   000EAA                     MAMXFL          equ	3754	;# 
   186   000EAA                     MAMXFLL         equ	3754	;# 
   187   000EAB                     MAMXFLH         equ	3755	;# 
   188   000EB2                     MICMD           equ	3762	;# 
   189   000EB4                     MIREGADR        equ	3764	;# 
   190   000EB6                     MIWR            equ	3766	;# 
   191   000EB6                     MIWRL           equ	3766	;# 
   192   000EB7                     MIWRH           equ	3767	;# 
   193   000EB8                     MIRD            equ	3768	;# 
   194   000EB8                     MIRDL           equ	3768	;# 
   195   000EB9                     MIRDH           equ	3769	;# 
   196   000EC0                     EHT0            equ	3776	;# 
   197   000EC1                     EHT1            equ	3777	;# 
   198   000EC2                     EHT2            equ	3778	;# 
   199   000EC3                     EHT3            equ	3779	;# 
   200   000EC4                     EHT4            equ	3780	;# 
   201   000EC5                     EHT5            equ	3781	;# 
   202   000EC6                     EHT6            equ	3782	;# 
   203   000EC7                     EHT7            equ	3783	;# 
   204   000EC8                     EPMM0           equ	3784	;# 
   205   000EC9                     EPMM1           equ	3785	;# 
   206   000ECA                     EPMM2           equ	3786	;# 
   207   000ECB                     EPMM3           equ	3787	;# 
   208   000ECC                     EPMM4           equ	3788	;# 
   209   000ECD                     EPMM5           equ	3789	;# 
   210   000ECE                     EPMM6           equ	3790	;# 
   211   000ECF                     EPMM7           equ	3791	;# 
   212   000ED0                     EPMCS           equ	3792	;# 
   213   000ED0                     EPMCSL          equ	3792	;# 
   214   000ED1                     EPMCSH          equ	3793	;# 
   215   000ED4                     EPMO            equ	3796	;# 
   216   000ED4                     EPMOL           equ	3796	;# 
   217   000ED5                     EPMOH           equ	3797	;# 
   218   000ED8                     ERXFCON         equ	3800	;# 
   219   000ED9                     EPKTCNT         equ	3801	;# 
   220   000EE2                     EWRPT           equ	3810	;# 
   221   000EE2                     EWRPTL          equ	3810	;# 
   222   000EE3                     EWRPTH          equ	3811	;# 
   223   000EE4                     ETXST           equ	3812	;# 
   224   000EE4                     ETXSTL          equ	3812	;# 
   225   000EE5                     ETXSTH          equ	3813	;# 
   226   000EE6                     ETXND           equ	3814	;# 
   227   000EE6                     ETXNDL          equ	3814	;# 
   228   000EE7                     ETXNDH          equ	3815	;# 
   229   000EE8                     ERXST           equ	3816	;# 
   230   000EE8                     ERXSTL          equ	3816	;# 
   231   000EE9                     ERXSTH          equ	3817	;# 
   232   000EEA                     ERXND           equ	3818	;# 
   233   000EEA                     ERXNDL          equ	3818	;# 
   234   000EEB                     ERXNDH          equ	3819	;# 
   235   000EEC                     ERXRDPT         equ	3820	;# 
   236   000EEC                     ERXRDPTL        equ	3820	;# 
   237   000EED                     ERXRDPTH        equ	3821	;# 
   238   000EEE                     ERXWRPT         equ	3822	;# 
   239   000EEE                     ERXWRPTL        equ	3822	;# 
   240   000EEF                     ERXWRPTH        equ	3823	;# 
   241   000EF0                     EDMAST          equ	3824	;# 
   242   000EF0                     EDMASTL         equ	3824	;# 
   243   000EF1                     EDMASTH         equ	3825	;# 
   244   000EF2                     EDMAND          equ	3826	;# 
   245   000EF2                     EDMANDL         equ	3826	;# 
   246   000EF3                     EDMANDH         equ	3827	;# 
   247   000EF4                     EDMADST         equ	3828	;# 
   248   000EF4                     EDMADSTL        equ	3828	;# 
   249   000EF5                     EDMADSTH        equ	3829	;# 
   250   000EF6                     EDMACS          equ	3830	;# 
   251   000EF6                     EDMACSL         equ	3830	;# 
   252   000EF7                     EDMACSH         equ	3831	;# 
   253   000EFB                     EIE             equ	3835	;# 
   254   000EFD                     ESTAT           equ	3837	;# 
   255   000EFE                     ECON2           equ	3838	;# 
   256   000F60                     EIR             equ	3936	;# 
   257   000F61                     EDATA           equ	3937	;# 
   258   000F62                     SSP2CON2        equ	3938	;# 
   259   000F63                     SSP2CON1        equ	3939	;# 
   260   000F64                     SSP2STAT        equ	3940	;# 
   261   000F65                     SSP2ADD         equ	3941	;# 
   262   000F66                     SSP2BUF         equ	3942	;# 
   263   000F67                     ECCP2DEL        equ	3943	;# 
   264   000F68                     ECCP2AS         equ	3944	;# 
   265   000F69                     ECCP3DEL        equ	3945	;# 
   266   000F6A                     ECCP3AS         equ	3946	;# 
   267   000F6B                     RCSTA2          equ	3947	;# 
   268   000F6C                     TXSTA2          equ	3948	;# 
   269   000F6D                     TXREG2          equ	3949	;# 
   270   000F6E                     RCREG2          equ	3950	;# 
   271   000F6F                     SPBRG2          equ	3951	;# 
   272   000F70                     CCP5CON         equ	3952	;# 
   273   000F71                     CCPR5           equ	3953	;# 
   274   000F71                     CCPR5L          equ	3953	;# 
   275   000F72                     CCPR5H          equ	3954	;# 
   276   000F73                     CCP4CON         equ	3955	;# 
   277   000F74                     CCPR4           equ	3956	;# 
   278   000F74                     CCPR4L          equ	3956	;# 
   279   000F75                     CCPR4H          equ	3957	;# 
   280   000F76                     T4CON           equ	3958	;# 
   281   000F77                     PR4             equ	3959	;# 
   282   000F78                     TMR4            equ	3960	;# 
   283   000F79                     ECCP1DEL        equ	3961	;# 
   284   000F7A                     ERDPT           equ	3962	;# 
   285   000F7A                     ERDPTL          equ	3962	;# 
   286   000F7B                     ERDPTH          equ	3963	;# 
   287   000F7C                     BAUDCON2        equ	3964	;# 
   288   000F7C                     BAUDCTL2        equ	3964	;# 
   289   000F7D                     SPBRGH2         equ	3965	;# 
   290   000F7E                     BAUDCON1        equ	3966	;# 
   291   000F7E                     BAUDCON         equ	3966	;# 
   292   000F7E                     BAUDCTL         equ	3966	;# 
   293   000F7E                     BAUDCTL1        equ	3966	;# 
   294   000F7F                     SPBRGH1         equ	3967	;# 
   295   000F7F                     SPBRGH          equ	3967	;# 
   296   000F80                     PORTA           equ	3968	;# 
   297   000F81                     PORTB           equ	3969	;# 
   298   000F82                     PORTC           equ	3970	;# 
   299   000F83                     PORTD           equ	3971	;# 
   300   000F84                     PORTE           equ	3972	;# 
   301   000F85                     PORTF           equ	3973	;# 
   302   000F86                     PORTG           equ	3974	;# 
   303   000F87                     PORTH           equ	3975	;# 
   304   000F88                     PORTJ           equ	3976	;# 
   305   000F89                     LATA            equ	3977	;# 
   306   000F8A                     LATB            equ	3978	;# 
   307   000F8B                     LATC            equ	3979	;# 
   308   000F8C                     LATD            equ	3980	;# 
   309   000F8D                     LATE            equ	3981	;# 
   310   000F8E                     LATF            equ	3982	;# 
   311   000F8F                     LATG            equ	3983	;# 
   312   000F90                     LATH            equ	3984	;# 
   313   000F91                     LATJ            equ	3985	;# 
   314   000F92                     TRISA           equ	3986	;# 
   315   000F92                     DDRA            equ	3986	;# 
   316   000F93                     TRISB           equ	3987	;# 
   317   000F93                     DDRB            equ	3987	;# 
   318   000F94                     TRISC           equ	3988	;# 
   319   000F94                     DDRC            equ	3988	;# 
   320   000F95                     TRISD           equ	3989	;# 
   321   000F95                     DDRD            equ	3989	;# 
   322   000F96                     TRISE           equ	3990	;# 
   323   000F96                     DDRE            equ	3990	;# 
   324   000F97                     TRISF           equ	3991	;# 
   325   000F97                     DDRF            equ	3991	;# 
   326   000F98                     TRISG           equ	3992	;# 
   327   000F98                     DDRG            equ	3992	;# 
   328   000F99                     TRISH           equ	3993	;# 
   329   000F99                     DDRH            equ	3993	;# 
   330   000F9A                     TRISJ           equ	3994	;# 
   331   000F9A                     DDRJ            equ	3994	;# 
   332   000F9B                     OSCTUNE         equ	3995	;# 
   333   000F9C                     MEMCON          equ	3996	;# 
   334   000F9D                     PIE1            equ	3997	;# 
   335   000F9E                     PIR1            equ	3998	;# 
   336   000F9F                     IPR1            equ	3999	;# 
   337   000FA0                     PIE2            equ	4000	;# 
   338   000FA1                     PIR2            equ	4001	;# 
   339   000FA2                     IPR2            equ	4002	;# 
   340   000FA3                     PIE3            equ	4003	;# 
   341   000FA4                     PIR3            equ	4004	;# 
   342   000FA5                     IPR3            equ	4005	;# 
   343   000FA6                     EECON1          equ	4006	;# 
   344   000FA7                     EECON2          equ	4007	;# 
   345   000FAB                     RCSTA1          equ	4011	;# 
   346   000FAB                     RCSTA           equ	4011	;# 
   347   000FAC                     TXSTA1          equ	4012	;# 
   348   000FAC                     TXSTA           equ	4012	;# 
   349   000FAD                     TXREG1          equ	4013	;# 
   350   000FAD                     TXREG           equ	4013	;# 
   351   000FAE                     RCREG1          equ	4014	;# 
   352   000FAE                     RCREG           equ	4014	;# 
   353   000FAF                     SPBRG1          equ	4015	;# 
   354   000FAF                     SPBRG           equ	4015	;# 
   355   000FB0                     PSPCON          equ	4016	;# 
   356   000FB1                     T3CON           equ	4017	;# 
   357   000FB2                     TMR3            equ	4018	;# 
   358   000FB2                     TMR3L           equ	4018	;# 
   359   000FB3                     TMR3H           equ	4019	;# 
   360   000FB4                     CMCON           equ	4020	;# 
   361   000FB5                     CVRCON          equ	4021	;# 
   362   000FB6                     ECCP1AS         equ	4022	;# 
   363   000FB7                     CCP3CON         equ	4023	;# 
   364   000FB7                     ECCP3CON        equ	4023	;# 
   365   000FB8                     CCPR3           equ	4024	;# 
   366   000FB8                     CCPR3L          equ	4024	;# 
   367   000FB9                     CCPR3H          equ	4025	;# 
   368   000FBA                     CCP2CON         equ	4026	;# 
   369   000FBA                     ECCP2CON        equ	4026	;# 
   370   000FBB                     CCPR2           equ	4027	;# 
   371   000FBB                     CCPR2L          equ	4027	;# 
   372   000FBC                     CCPR2H          equ	4028	;# 
   373   000FBD                     CCP1CON         equ	4029	;# 
   374   000FBD                     ECCP1CON        equ	4029	;# 
   375   000FBE                     CCPR1           equ	4030	;# 
   376   000FBE                     CCPR1L          equ	4030	;# 
   377   000FBF                     CCPR1H          equ	4031	;# 
   378   000FC0                     ADCON2          equ	4032	;# 
   379   000FC1                     ADCON1          equ	4033	;# 
   380   000FC2                     ADCON0          equ	4034	;# 
   381   000FC3                     ADRES           equ	4035	;# 
   382   000FC3                     ADRESL          equ	4035	;# 
   383   000FC4                     ADRESH          equ	4036	;# 
   384   000FC5                     SSP1CON2        equ	4037	;# 
   385   000FC5                     SSPCON2         equ	4037	;# 
   386   000FC6                     SSP1CON1        equ	4038	;# 
   387   000FC6                     SSPCON1         equ	4038	;# 
   388   000FC7                     SSP1STAT        equ	4039	;# 
   389   000FC7                     SSPSTAT         equ	4039	;# 
   390   000FC8                     SSP1ADD         equ	4040	;# 
   391   000FC8                     SSPADD          equ	4040	;# 
   392   000FC9                     SSP1BUF         equ	4041	;# 
   393   000FC9                     SSPBUF          equ	4041	;# 
   394   000FCA                     T2CON           equ	4042	;# 
   395   000FCB                     PR2             equ	4043	;# 
   396   000FCC                     TMR2            equ	4044	;# 
   397   000FCD                     T1CON           equ	4045	;# 
   398   000FCE                     TMR1            equ	4046	;# 
   399   000FCE                     TMR1L           equ	4046	;# 
   400   000FCF                     TMR1H           equ	4047	;# 
   401   000FD0                     RCON            equ	4048	;# 
   402   000FD1                     WDTCON          equ	4049	;# 
   403   000FD2                     ECON1           equ	4050	;# 
   404   000FD3                     OSCCON          equ	4051	;# 
   405   000FD5                     T0CON           equ	4053	;# 
   406   000FD6                     TMR0            equ	4054	;# 
   407   000FD6                     TMR0L           equ	4054	;# 
   408   000FD7                     TMR0H           equ	4055	;# 
   409   000FD8                     STATUS          equ	4056	;# 
   410   000FD9                     FSR2            equ	4057	;# 
   411   000FD9                     FSR2L           equ	4057	;# 
   412   000FDA                     FSR2H           equ	4058	;# 
   413   000FDB                     PLUSW2          equ	4059	;# 
   414   000FDC                     PREINC2         equ	4060	;# 
   415   000FDD                     POSTDEC2        equ	4061	;# 
   416   000FDE                     POSTINC2        equ	4062	;# 
   417   000FDF                     INDF2           equ	4063	;# 
   418   000FE0                     BSR             equ	4064	;# 
   419   000FE1                     FSR1            equ	4065	;# 
   420   000FE1                     FSR1L           equ	4065	;# 
   421   000FE2                     FSR1H           equ	4066	;# 
   422   000FE3                     PLUSW1          equ	4067	;# 
   423   000FE4                     PREINC1         equ	4068	;# 
   424   000FE5                     POSTDEC1        equ	4069	;# 
   425   000FE6                     POSTINC1        equ	4070	;# 
   426   000FE7                     INDF1           equ	4071	;# 
   427   000FE8                     WREG            equ	4072	;# 
   428   000FE9                     FSR0            equ	4073	;# 
   429   000FE9                     FSR0L           equ	4073	;# 
   430   000FEA                     FSR0H           equ	4074	;# 
   431   000FEB                     PLUSW0          equ	4075	;# 
   432   000FEC                     PREINC0         equ	4076	;# 
   433   000FED                     POSTDEC0        equ	4077	;# 
   434   000FEE                     POSTINC0        equ	4078	;# 
   435   000FEF                     INDF0           equ	4079	;# 
   436   000FF0                     INTCON3         equ	4080	;# 
   437   000FF1                     INTCON2         equ	4081	;# 
   438   000FF2                     INTCON          equ	4082	;# 
   439   000FF3                     PROD            equ	4083	;# 
   440   000FF3                     PRODL           equ	4083	;# 
   441   000FF4                     PRODH           equ	4084	;# 
   442   000FF5                     TABLAT          equ	4085	;# 
   443   000FF6                     TBLPTR          equ	4086	;# 
   444   000FF6                     TBLPTRL         equ	4086	;# 
   445   000FF7                     TBLPTRH         equ	4087	;# 
   446   000FF8                     TBLPTRU         equ	4088	;# 
   447   000FF9                     PCLAT           equ	4089	;# 
   448   000FF9                     PC              equ	4089	;# 
   449   000FF9                     PCL             equ	4089	;# 
   450   000FFA                     PCLATH          equ	4090	;# 
   451   000FFB                     PCLATU          equ	4091	;# 
   452   000FFC                     STKPTR          equ	4092	;# 
   453   000FFD                     TOS             equ	4093	;# 
   454   000FFD                     TOSL            equ	4093	;# 
   455   000FFE                     TOSH            equ	4094	;# 
   456   000FFF                     TOSU            equ	4095	;# 
   457   000E80                     MAADR5          equ	3712	;# 
   458   000E81                     MAADR6          equ	3713	;# 
   459   000E82                     MAADR3          equ	3714	;# 
   460   000E83                     MAADR4          equ	3715	;# 
   461   000E84                     MAADR1          equ	3716	;# 
   462   000E85                     MAADR2          equ	3717	;# 
   463   000E8A                     MISTAT          equ	3722	;# 
   464   000E97                     EFLOCON         equ	3735	;# 
   465   000E98                     EPAUS           equ	3736	;# 
   466   000E98                     EPAUSL          equ	3736	;# 
   467   000E99                     EPAUSH          equ	3737	;# 
   468   000EA0                     MACON1          equ	3744	;# 
   469   000EA2                     MACON3          equ	3746	;# 
   470   000EA3                     MACON4          equ	3747	;# 
   471   000EA4                     MABBIPG         equ	3748	;# 
   472   000EA6                     MAIPG           equ	3750	;# 
   473   000EA6                     MAIPGL          equ	3750	;# 
   474   000EA7                     MAIPGH          equ	3751	;# 
   475   000EAA                     MAMXFL          equ	3754	;# 
   476   000EAA                     MAMXFLL         equ	3754	;# 
   477   000EAB                     MAMXFLH         equ	3755	;# 
   478   000EB2                     MICMD           equ	3762	;# 
   479   000EB4                     MIREGADR        equ	3764	;# 
   480   000EB6                     MIWR            equ	3766	;# 
   481   000EB6                     MIWRL           equ	3766	;# 
   482   000EB7                     MIWRH           equ	3767	;# 
   483   000EB8                     MIRD            equ	3768	;# 
   484   000EB8                     MIRDL           equ	3768	;# 
   485   000EB9                     MIRDH           equ	3769	;# 
   486   000EC0                     EHT0            equ	3776	;# 
   487   000EC1                     EHT1            equ	3777	;# 
   488   000EC2                     EHT2            equ	3778	;# 
   489   000EC3                     EHT3            equ	3779	;# 
   490   000EC4                     EHT4            equ	3780	;# 
   491   000EC5                     EHT5            equ	3781	;# 
   492   000EC6                     EHT6            equ	3782	;# 
   493   000EC7                     EHT7            equ	3783	;# 
   494   000EC8                     EPMM0           equ	3784	;# 
   495   000EC9                     EPMM1           equ	3785	;# 
   496   000ECA                     EPMM2           equ	3786	;# 
   497   000ECB                     EPMM3           equ	3787	;# 
   498   000ECC                     EPMM4           equ	3788	;# 
   499   000ECD                     EPMM5           equ	3789	;# 
   500   000ECE                     EPMM6           equ	3790	;# 
   501   000ECF                     EPMM7           equ	3791	;# 
   502   000ED0                     EPMCS           equ	3792	;# 
   503   000ED0                     EPMCSL          equ	3792	;# 
   504   000ED1                     EPMCSH          equ	3793	;# 
   505   000ED4                     EPMO            equ	3796	;# 
   506   000ED4                     EPMOL           equ	3796	;# 
   507   000ED5                     EPMOH           equ	3797	;# 
   508   000ED8                     ERXFCON         equ	3800	;# 
   509   000ED9                     EPKTCNT         equ	3801	;# 
   510   000EE2                     EWRPT           equ	3810	;# 
   511   000EE2                     EWRPTL          equ	3810	;# 
   512   000EE3                     EWRPTH          equ	3811	;# 
   513   000EE4                     ETXST           equ	3812	;# 
   514   000EE4                     ETXSTL          equ	3812	;# 
   515   000EE5                     ETXSTH          equ	3813	;# 
   516   000EE6                     ETXND           equ	3814	;# 
   517   000EE6                     ETXNDL          equ	3814	;# 
   518   000EE7                     ETXNDH          equ	3815	;# 
   519   000EE8                     ERXST           equ	3816	;# 
   520   000EE8                     ERXSTL          equ	3816	;# 
   521   000EE9                     ERXSTH          equ	3817	;# 
   522   000EEA                     ERXND           equ	3818	;# 
   523   000EEA                     ERXNDL          equ	3818	;# 
   524   000EEB                     ERXNDH          equ	3819	;# 
   525   000EEC                     ERXRDPT         equ	3820	;# 
   526   000EEC                     ERXRDPTL        equ	3820	;# 
   527   000EED                     ERXRDPTH        equ	3821	;# 
   528   000EEE                     ERXWRPT         equ	3822	;# 
   529   000EEE                     ERXWRPTL        equ	3822	;# 
   530   000EEF                     ERXWRPTH        equ	3823	;# 
   531   000EF0                     EDMAST          equ	3824	;# 
   532   000EF0                     EDMASTL         equ	3824	;# 
   533   000EF1                     EDMASTH         equ	3825	;# 
   534   000EF2                     EDMAND          equ	3826	;# 
   535   000EF2                     EDMANDL         equ	3826	;# 
   536   000EF3                     EDMANDH         equ	3827	;# 
   537   000EF4                     EDMADST         equ	3828	;# 
   538   000EF4                     EDMADSTL        equ	3828	;# 
   539   000EF5                     EDMADSTH        equ	3829	;# 
   540   000EF6                     EDMACS          equ	3830	;# 
   541   000EF6                     EDMACSL         equ	3830	;# 
   542   000EF7                     EDMACSH         equ	3831	;# 
   543   000EFB                     EIE             equ	3835	;# 
   544   000EFD                     ESTAT           equ	3837	;# 
   545   000EFE                     ECON2           equ	3838	;# 
   546   000F60                     EIR             equ	3936	;# 
   547   000F61                     EDATA           equ	3937	;# 
   548   000F62                     SSP2CON2        equ	3938	;# 
   549   000F63                     SSP2CON1        equ	3939	;# 
   550   000F64                     SSP2STAT        equ	3940	;# 
   551   000F65                     SSP2ADD         equ	3941	;# 
   552   000F66                     SSP2BUF         equ	3942	;# 
   553   000F67                     ECCP2DEL        equ	3943	;# 
   554   000F68                     ECCP2AS         equ	3944	;# 
   555   000F69                     ECCP3DEL        equ	3945	;# 
   556   000F6A                     ECCP3AS         equ	3946	;# 
   557   000F6B                     RCSTA2          equ	3947	;# 
   558   000F6C                     TXSTA2          equ	3948	;# 
   559   000F6D                     TXREG2          equ	3949	;# 
   560   000F6E                     RCREG2          equ	3950	;# 
   561   000F6F                     SPBRG2          equ	3951	;# 
   562   000F70                     CCP5CON         equ	3952	;# 
   563   000F71                     CCPR5           equ	3953	;# 
   564   000F71                     CCPR5L          equ	3953	;# 
   565   000F72                     CCPR5H          equ	3954	;# 
   566   000F73                     CCP4CON         equ	3955	;# 
   567   000F74                     CCPR4           equ	3956	;# 
   568   000F74                     CCPR4L          equ	3956	;# 
   569   000F75                     CCPR4H          equ	3957	;# 
   570   000F76                     T4CON           equ	3958	;# 
   571   000F77                     PR4             equ	3959	;# 
   572   000F78                     TMR4            equ	3960	;# 
   573   000F79                     ECCP1DEL        equ	3961	;# 
   574   000F7A                     ERDPT           equ	3962	;# 
   575   000F7A                     ERDPTL          equ	3962	;# 
   576   000F7B                     ERDPTH          equ	3963	;# 
   577   000F7C                     BAUDCON2        equ	3964	;# 
   578   000F7C                     BAUDCTL2        equ	3964	;# 
   579   000F7D                     SPBRGH2         equ	3965	;# 
   580   000F7E                     BAUDCON1        equ	3966	;# 
   581   000F7E                     BAUDCON         equ	3966	;# 
   582   000F7E                     BAUDCTL         equ	3966	;# 
   583   000F7E                     BAUDCTL1        equ	3966	;# 
   584   000F7F                     SPBRGH1         equ	3967	;# 
   585   000F7F                     SPBRGH          equ	3967	;# 
   586   000F80                     PORTA           equ	3968	;# 
   587   000F81                     PORTB           equ	3969	;# 
   588   000F82                     PORTC           equ	3970	;# 
   589   000F83                     PORTD           equ	3971	;# 
   590   000F84                     PORTE           equ	3972	;# 
   591   000F85                     PORTF           equ	3973	;# 
   592   000F86                     PORTG           equ	3974	;# 
   593   000F87                     PORTH           equ	3975	;# 
   594   000F88                     PORTJ           equ	3976	;# 
   595   000F89                     LATA            equ	3977	;# 
   596   000F8A                     LATB            equ	3978	;# 
   597   000F8B                     LATC            equ	3979	;# 
   598   000F8C                     LATD            equ	3980	;# 
   599   000F8D                     LATE            equ	3981	;# 
   600   000F8E                     LATF            equ	3982	;# 
   601   000F8F                     LATG            equ	3983	;# 
   602   000F90                     LATH            equ	3984	;# 
   603   000F91                     LATJ            equ	3985	;# 
   604   000F92                     TRISA           equ	3986	;# 
   605   000F92                     DDRA            equ	3986	;# 
   606   000F93                     TRISB           equ	3987	;# 
   607   000F93                     DDRB            equ	3987	;# 
   608   000F94                     TRISC           equ	3988	;# 
   609   000F94                     DDRC            equ	3988	;# 
   610   000F95                     TRISD           equ	3989	;# 
   611   000F95                     DDRD            equ	3989	;# 
   612   000F96                     TRISE           equ	3990	;# 
   613   000F96                     DDRE            equ	3990	;# 
   614   000F97                     TRISF           equ	3991	;# 
   615   000F97                     DDRF            equ	3991	;# 
   616   000F98                     TRISG           equ	3992	;# 
   617   000F98                     DDRG            equ	3992	;# 
   618   000F99                     TRISH           equ	3993	;# 
   619   000F99                     DDRH            equ	3993	;# 
   620   000F9A                     TRISJ           equ	3994	;# 
   621   000F9A                     DDRJ            equ	3994	;# 
   622   000F9B                     OSCTUNE         equ	3995	;# 
   623   000F9C                     MEMCON          equ	3996	;# 
   624   000F9D                     PIE1            equ	3997	;# 
   625   000F9E                     PIR1            equ	3998	;# 
   626   000F9F                     IPR1            equ	3999	;# 
   627   000FA0                     PIE2            equ	4000	;# 
   628   000FA1                     PIR2            equ	4001	;# 
   629   000FA2                     IPR2            equ	4002	;# 
   630   000FA3                     PIE3            equ	4003	;# 
   631   000FA4                     PIR3            equ	4004	;# 
   632   000FA5                     IPR3            equ	4005	;# 
   633   000FA6                     EECON1          equ	4006	;# 
   634   000FA7                     EECON2          equ	4007	;# 
   635   000FAB                     RCSTA1          equ	4011	;# 
   636   000FAB                     RCSTA           equ	4011	;# 
   637   000FAC                     TXSTA1          equ	4012	;# 
   638   000FAC                     TXSTA           equ	4012	;# 
   639   000FAD                     TXREG1          equ	4013	;# 
   640   000FAD                     TXREG           equ	4013	;# 
   641   000FAE                     RCREG1          equ	4014	;# 
   642   000FAE                     RCREG           equ	4014	;# 
   643   000FAF                     SPBRG1          equ	4015	;# 
   644   000FAF                     SPBRG           equ	4015	;# 
   645   000FB0                     PSPCON          equ	4016	;# 
   646   000FB1                     T3CON           equ	4017	;# 
   647   000FB2                     TMR3            equ	4018	;# 
   648   000FB2                     TMR3L           equ	4018	;# 
   649   000FB3                     TMR3H           equ	4019	;# 
   650   000FB4                     CMCON           equ	4020	;# 
   651   000FB5                     CVRCON          equ	4021	;# 
   652   000FB6                     ECCP1AS         equ	4022	;# 
   653   000FB7                     CCP3CON         equ	4023	;# 
   654   000FB7                     ECCP3CON        equ	4023	;# 
   655   000FB8                     CCPR3           equ	4024	;# 
   656   000FB8                     CCPR3L          equ	4024	;# 
   657   000FB9                     CCPR3H          equ	4025	;# 
   658   000FBA                     CCP2CON         equ	4026	;# 
   659   000FBA                     ECCP2CON        equ	4026	;# 
   660   000FBB                     CCPR2           equ	4027	;# 
   661   000FBB                     CCPR2L          equ	4027	;# 
   662   000FBC                     CCPR2H          equ	4028	;# 
   663   000FBD                     CCP1CON         equ	4029	;# 
   664   000FBD                     ECCP1CON        equ	4029	;# 
   665   000FBE                     CCPR1           equ	4030	;# 
   666   000FBE                     CCPR1L          equ	4030	;# 
   667   000FBF                     CCPR1H          equ	4031	;# 
   668   000FC0                     ADCON2          equ	4032	;# 
   669   000FC1                     ADCON1          equ	4033	;# 
   670   000FC2                     ADCON0          equ	4034	;# 
   671   000FC3                     ADRES           equ	4035	;# 
   672   000FC3                     ADRESL          equ	4035	;# 
   673   000FC4                     ADRESH          equ	4036	;# 
   674   000FC5                     SSP1CON2        equ	4037	;# 
   675   000FC5                     SSPCON2         equ	4037	;# 
   676   000FC6                     SSP1CON1        equ	4038	;# 
   677   000FC6                     SSPCON1         equ	4038	;# 
   678   000FC7                     SSP1STAT        equ	4039	;# 
   679   000FC7                     SSPSTAT         equ	4039	;# 
   680   000FC8                     SSP1ADD         equ	4040	;# 
   681   000FC8                     SSPADD          equ	4040	;# 
   682   000FC9                     SSP1BUF         equ	4041	;# 
   683   000FC9                     SSPBUF          equ	4041	;# 
   684   000FCA                     T2CON           equ	4042	;# 
   685   000FCB                     PR2             equ	4043	;# 
   686   000FCC                     TMR2            equ	4044	;# 
   687   000FCD                     T1CON           equ	4045	;# 
   688   000FCE                     TMR1            equ	4046	;# 
   689   000FCE                     TMR1L           equ	4046	;# 
   690   000FCF                     TMR1H           equ	4047	;# 
   691   000FD0                     RCON            equ	4048	;# 
   692   000FD1                     WDTCON          equ	4049	;# 
   693   000FD2                     ECON1           equ	4050	;# 
   694   000FD3                     OSCCON          equ	4051	;# 
   695   000FD5                     T0CON           equ	4053	;# 
   696   000FD6                     TMR0            equ	4054	;# 
   697   000FD6                     TMR0L           equ	4054	;# 
   698   000FD7                     TMR0H           equ	4055	;# 
   699   000FD8                     STATUS          equ	4056	;# 
   700   000FD9                     FSR2            equ	4057	;# 
   701   000FD9                     FSR2L           equ	4057	;# 
   702   000FDA                     FSR2H           equ	4058	;# 
   703   000FDB                     PLUSW2          equ	4059	;# 
   704   000FDC                     PREINC2         equ	4060	;# 
   705   000FDD                     POSTDEC2        equ	4061	;# 
   706   000FDE                     POSTINC2        equ	4062	;# 
   707   000FDF                     INDF2           equ	4063	;# 
   708   000FE0                     BSR             equ	4064	;# 
   709   000FE1                     FSR1            equ	4065	;# 
   710   000FE1                     FSR1L           equ	4065	;# 
   711   000FE2                     FSR1H           equ	4066	;# 
   712   000FE3                     PLUSW1          equ	4067	;# 
   713   000FE4                     PREINC1         equ	4068	;# 
   714   000FE5                     POSTDEC1        equ	4069	;# 
   715   000FE6                     POSTINC1        equ	4070	;# 
   716   000FE7                     INDF1           equ	4071	;# 
   717   000FE8                     WREG            equ	4072	;# 
   718   000FE9                     FSR0            equ	4073	;# 
   719   000FE9                     FSR0L           equ	4073	;# 
   720   000FEA                     FSR0H           equ	4074	;# 
   721   000FEB                     PLUSW0          equ	4075	;# 
   722   000FEC                     PREINC0         equ	4076	;# 
   723   000FED                     POSTDEC0        equ	4077	;# 
   724   000FEE                     POSTINC0        equ	4078	;# 
   725   000FEF                     INDF0           equ	4079	;# 
   726   000FF0                     INTCON3         equ	4080	;# 
   727   000FF1                     INTCON2         equ	4081	;# 
   728   000FF2                     INTCON          equ	4082	;# 
   729   000FF3                     PROD            equ	4083	;# 
   730   000FF3                     PRODL           equ	4083	;# 
   731   000FF4                     PRODH           equ	4084	;# 
   732   000FF5                     TABLAT          equ	4085	;# 
   733   000FF6                     TBLPTR          equ	4086	;# 
   734   000FF6                     TBLPTRL         equ	4086	;# 
   735   000FF7                     TBLPTRH         equ	4087	;# 
   736   000FF8                     TBLPTRU         equ	4088	;# 
   737   000FF9                     PCLAT           equ	4089	;# 
   738   000FF9                     PC              equ	4089	;# 
   739   000FF9                     PCL             equ	4089	;# 
   740   000FFA                     PCLATH          equ	4090	;# 
   741   000FFB                     PCLATU          equ	4091	;# 
   742   000FFC                     STKPTR          equ	4092	;# 
   743   000FFD                     TOS             equ	4093	;# 
   744   000FFD                     TOSL            equ	4093	;# 
   745   000FFE                     TOSH            equ	4094	;# 
   746   000FFF                     TOSU            equ	4095	;# 
   747   000E80                     MAADR5          equ	3712	;# 
   748   000E81                     MAADR6          equ	3713	;# 
   749   000E82                     MAADR3          equ	3714	;# 
   750   000E83                     MAADR4          equ	3715	;# 
   751   000E84                     MAADR1          equ	3716	;# 
   752   000E85                     MAADR2          equ	3717	;# 
   753   000E8A                     MISTAT          equ	3722	;# 
   754   000E97                     EFLOCON         equ	3735	;# 
   755   000E98                     EPAUS           equ	3736	;# 
   756   000E98                     EPAUSL          equ	3736	;# 
   757   000E99                     EPAUSH          equ	3737	;# 
   758   000EA0                     MACON1          equ	3744	;# 
   759   000EA2                     MACON3          equ	3746	;# 
   760   000EA3                     MACON4          equ	3747	;# 
   761   000EA4                     MABBIPG         equ	3748	;# 
   762   000EA6                     MAIPG           equ	3750	;# 
   763   000EA6                     MAIPGL          equ	3750	;# 
   764   000EA7                     MAIPGH          equ	3751	;# 
   765   000EAA                     MAMXFL          equ	3754	;# 
   766   000EAA                     MAMXFLL         equ	3754	;# 
   767   000EAB                     MAMXFLH         equ	3755	;# 
   768   000EB2                     MICMD           equ	3762	;# 
   769   000EB4                     MIREGADR        equ	3764	;# 
   770   000EB6                     MIWR            equ	3766	;# 
   771   000EB6                     MIWRL           equ	3766	;# 
   772   000EB7                     MIWRH           equ	3767	;# 
   773   000EB8                     MIRD            equ	3768	;# 
   774   000EB8                     MIRDL           equ	3768	;# 
   775   000EB9                     MIRDH           equ	3769	;# 
   776   000EC0                     EHT0            equ	3776	;# 
   777   000EC1                     EHT1            equ	3777	;# 
   778   000EC2                     EHT2            equ	3778	;# 
   779   000EC3                     EHT3            equ	3779	;# 
   780   000EC4                     EHT4            equ	3780	;# 
   781   000EC5                     EHT5            equ	3781	;# 
   782   000EC6                     EHT6            equ	3782	;# 
   783   000EC7                     EHT7            equ	3783	;# 
   784   000EC8                     EPMM0           equ	3784	;# 
   785   000EC9                     EPMM1           equ	3785	;# 
   786   000ECA                     EPMM2           equ	3786	;# 
   787   000ECB                     EPMM3           equ	3787	;# 
   788   000ECC                     EPMM4           equ	3788	;# 
   789   000ECD                     EPMM5           equ	3789	;# 
   790   000ECE                     EPMM6           equ	3790	;# 
   791   000ECF                     EPMM7           equ	3791	;# 
   792   000ED0                     EPMCS           equ	3792	;# 
   793   000ED0                     EPMCSL          equ	3792	;# 
   794   000ED1                     EPMCSH          equ	3793	;# 
   795   000ED4                     EPMO            equ	3796	;# 
   796   000ED4                     EPMOL           equ	3796	;# 
   797   000ED5                     EPMOH           equ	3797	;# 
   798   000ED8                     ERXFCON         equ	3800	;# 
   799   000ED9                     EPKTCNT         equ	3801	;# 
   800   000EE2                     EWRPT           equ	3810	;# 
   801   000EE2                     EWRPTL          equ	3810	;# 
   802   000EE3                     EWRPTH          equ	3811	;# 
   803   000EE4                     ETXST           equ	3812	;# 
   804   000EE4                     ETXSTL          equ	3812	;# 
   805   000EE5                     ETXSTH          equ	3813	;# 
   806   000EE6                     ETXND           equ	3814	;# 
   807   000EE6                     ETXNDL          equ	3814	;# 
   808   000EE7                     ETXNDH          equ	3815	;# 
   809   000EE8                     ERXST           equ	3816	;# 
   810   000EE8                     ERXSTL          equ	3816	;# 
   811   000EE9                     ERXSTH          equ	3817	;# 
   812   000EEA                     ERXND           equ	3818	;# 
   813   000EEA                     ERXNDL          equ	3818	;# 
   814   000EEB                     ERXNDH          equ	3819	;# 
   815   000EEC                     ERXRDPT         equ	3820	;# 
   816   000EEC                     ERXRDPTL        equ	3820	;# 
   817   000EED                     ERXRDPTH        equ	3821	;# 
   818   000EEE                     ERXWRPT         equ	3822	;# 
   819   000EEE                     ERXWRPTL        equ	3822	;# 
   820   000EEF                     ERXWRPTH        equ	3823	;# 
   821   000EF0                     EDMAST          equ	3824	;# 
   822   000EF0                     EDMASTL         equ	3824	;# 
   823   000EF1                     EDMASTH         equ	3825	;# 
   824   000EF2                     EDMAND          equ	3826	;# 
   825   000EF2                     EDMANDL         equ	3826	;# 
   826   000EF3                     EDMANDH         equ	3827	;# 
   827   000EF4                     EDMADST         equ	3828	;# 
   828   000EF4                     EDMADSTL        equ	3828	;# 
   829   000EF5                     EDMADSTH        equ	3829	;# 
   830   000EF6                     EDMACS          equ	3830	;# 
   831   000EF6                     EDMACSL         equ	3830	;# 
   832   000EF7                     EDMACSH         equ	3831	;# 
   833   000EFB                     EIE             equ	3835	;# 
   834   000EFD                     ESTAT           equ	3837	;# 
   835   000EFE                     ECON2           equ	3838	;# 
   836   000F60                     EIR             equ	3936	;# 
   837   000F61                     EDATA           equ	3937	;# 
   838   000F62                     SSP2CON2        equ	3938	;# 
   839   000F63                     SSP2CON1        equ	3939	;# 
   840   000F64                     SSP2STAT        equ	3940	;# 
   841   000F65                     SSP2ADD         equ	3941	;# 
   842   000F66                     SSP2BUF         equ	3942	;# 
   843   000F67                     ECCP2DEL        equ	3943	;# 
   844   000F68                     ECCP2AS         equ	3944	;# 
   845   000F69                     ECCP3DEL        equ	3945	;# 
   846   000F6A                     ECCP3AS         equ	3946	;# 
   847   000F6B                     RCSTA2          equ	3947	;# 
   848   000F6C                     TXSTA2          equ	3948	;# 
   849   000F6D                     TXREG2          equ	3949	;# 
   850   000F6E                     RCREG2          equ	3950	;# 
   851   000F6F                     SPBRG2          equ	3951	;# 
   852   000F70                     CCP5CON         equ	3952	;# 
   853   000F71                     CCPR5           equ	3953	;# 
   854   000F71                     CCPR5L          equ	3953	;# 
   855   000F72                     CCPR5H          equ	3954	;# 
   856   000F73                     CCP4CON         equ	3955	;# 
   857   000F74                     CCPR4           equ	3956	;# 
   858   000F74                     CCPR4L          equ	3956	;# 
   859   000F75                     CCPR4H          equ	3957	;# 
   860   000F76                     T4CON           equ	3958	;# 
   861   000F77                     PR4             equ	3959	;# 
   862   000F78                     TMR4            equ	3960	;# 
   863   000F79                     ECCP1DEL        equ	3961	;# 
   864   000F7A                     ERDPT           equ	3962	;# 
   865   000F7A                     ERDPTL          equ	3962	;# 
   866   000F7B                     ERDPTH          equ	3963	;# 
   867   000F7C                     BAUDCON2        equ	3964	;# 
   868   000F7C                     BAUDCTL2        equ	3964	;# 
   869   000F7D                     SPBRGH2         equ	3965	;# 
   870   000F7E                     BAUDCON1        equ	3966	;# 
   871   000F7E                     BAUDCON         equ	3966	;# 
   872   000F7E                     BAUDCTL         equ	3966	;# 
   873   000F7E                     BAUDCTL1        equ	3966	;# 
   874   000F7F                     SPBRGH1         equ	3967	;# 
   875   000F7F                     SPBRGH          equ	3967	;# 
   876   000F80                     PORTA           equ	3968	;# 
   877   000F81                     PORTB           equ	3969	;# 
   878   000F82                     PORTC           equ	3970	;# 
   879   000F83                     PORTD           equ	3971	;# 
   880   000F84                     PORTE           equ	3972	;# 
   881   000F85                     PORTF           equ	3973	;# 
   882   000F86                     PORTG           equ	3974	;# 
   883   000F87                     PORTH           equ	3975	;# 
   884   000F88                     PORTJ           equ	3976	;# 
   885   000F89                     LATA            equ	3977	;# 
   886   000F8A                     LATB            equ	3978	;# 
   887   000F8B                     LATC            equ	3979	;# 
   888   000F8C                     LATD            equ	3980	;# 
   889   000F8D                     LATE            equ	3981	;# 
   890   000F8E                     LATF            equ	3982	;# 
   891   000F8F                     LATG            equ	3983	;# 
   892   000F90                     LATH            equ	3984	;# 
   893   000F91                     LATJ            equ	3985	;# 
   894   000F92                     TRISA           equ	3986	;# 
   895   000F92                     DDRA            equ	3986	;# 
   896   000F93                     TRISB           equ	3987	;# 
   897   000F93                     DDRB            equ	3987	;# 
   898   000F94                     TRISC           equ	3988	;# 
   899   000F94                     DDRC            equ	3988	;# 
   900   000F95                     TRISD           equ	3989	;# 
   901   000F95                     DDRD            equ	3989	;# 
   902   000F96                     TRISE           equ	3990	;# 
   903   000F96                     DDRE            equ	3990	;# 
   904   000F97                     TRISF           equ	3991	;# 
   905   000F97                     DDRF            equ	3991	;# 
   906   000F98                     TRISG           equ	3992	;# 
   907   000F98                     DDRG            equ	3992	;# 
   908   000F99                     TRISH           equ	3993	;# 
   909   000F99                     DDRH            equ	3993	;# 
   910   000F9A                     TRISJ           equ	3994	;# 
   911   000F9A                     DDRJ            equ	3994	;# 
   912   000F9B                     OSCTUNE         equ	3995	;# 
   913   000F9C                     MEMCON          equ	3996	;# 
   914   000F9D                     PIE1            equ	3997	;# 
   915   000F9E                     PIR1            equ	3998	;# 
   916   000F9F                     IPR1            equ	3999	;# 
   917   000FA0                     PIE2            equ	4000	;# 
   918   000FA1                     PIR2            equ	4001	;# 
   919   000FA2                     IPR2            equ	4002	;# 
   920   000FA3                     PIE3            equ	4003	;# 
   921   000FA4                     PIR3            equ	4004	;# 
   922   000FA5                     IPR3            equ	4005	;# 
   923   000FA6                     EECON1          equ	4006	;# 
   924   000FA7                     EECON2          equ	4007	;# 
   925   000FAB                     RCSTA1          equ	4011	;# 
   926   000FAB                     RCSTA           equ	4011	;# 
   927   000FAC                     TXSTA1          equ	4012	;# 
   928   000FAC                     TXSTA           equ	4012	;# 
   929   000FAD                     TXREG1          equ	4013	;# 
   930   000FAD                     TXREG           equ	4013	;# 
   931   000FAE                     RCREG1          equ	4014	;# 
   932   000FAE                     RCREG           equ	4014	;# 
   933   000FAF                     SPBRG1          equ	4015	;# 
   934   000FAF                     SPBRG           equ	4015	;# 
   935   000FB0                     PSPCON          equ	4016	;# 
   936   000FB1                     T3CON           equ	4017	;# 
   937   000FB2                     TMR3            equ	4018	;# 
   938   000FB2                     TMR3L           equ	4018	;# 
   939   000FB3                     TMR3H           equ	4019	;# 
   940   000FB4                     CMCON           equ	4020	;# 
   941   000FB5                     CVRCON          equ	4021	;# 
   942   000FB6                     ECCP1AS         equ	4022	;# 
   943   000FB7                     CCP3CON         equ	4023	;# 
   944   000FB7                     ECCP3CON        equ	4023	;# 
   945   000FB8                     CCPR3           equ	4024	;# 
   946   000FB8                     CCPR3L          equ	4024	;# 
   947   000FB9                     CCPR3H          equ	4025	;# 
   948   000FBA                     CCP2CON         equ	4026	;# 
   949   000FBA                     ECCP2CON        equ	4026	;# 
   950   000FBB                     CCPR2           equ	4027	;# 
   951   000FBB                     CCPR2L          equ	4027	;# 
   952   000FBC                     CCPR2H          equ	4028	;# 
   953   000FBD                     CCP1CON         equ	4029	;# 
   954   000FBD                     ECCP1CON        equ	4029	;# 
   955   000FBE                     CCPR1           equ	4030	;# 
   956   000FBE                     CCPR1L          equ	4030	;# 
   957   000FBF                     CCPR1H          equ	4031	;# 
   958   000FC0                     ADCON2          equ	4032	;# 
   959   000FC1                     ADCON1          equ	4033	;# 
   960   000FC2                     ADCON0          equ	4034	;# 
   961   000FC3                     ADRES           equ	4035	;# 
   962   000FC3                     ADRESL          equ	4035	;# 
   963   000FC4                     ADRESH          equ	4036	;# 
   964   000FC5                     SSP1CON2        equ	4037	;# 
   965   000FC5                     SSPCON2         equ	4037	;# 
   966   000FC6                     SSP1CON1        equ	4038	;# 
   967   000FC6                     SSPCON1         equ	4038	;# 
   968   000FC7                     SSP1STAT        equ	4039	;# 
   969   000FC7                     SSPSTAT         equ	4039	;# 
   970   000FC8                     SSP1ADD         equ	4040	;# 
   971   000FC8                     SSPADD          equ	4040	;# 
   972   000FC9                     SSP1BUF         equ	4041	;# 
   973   000FC9                     SSPBUF          equ	4041	;# 
   974   000FCA                     T2CON           equ	4042	;# 
   975   000FCB                     PR2             equ	4043	;# 
   976   000FCC                     TMR2            equ	4044	;# 
   977   000FCD                     T1CON           equ	4045	;# 
   978   000FCE                     TMR1            equ	4046	;# 
   979   000FCE                     TMR1L           equ	4046	;# 
   980   000FCF                     TMR1H           equ	4047	;# 
   981   000FD0                     RCON            equ	4048	;# 
   982   000FD1                     WDTCON          equ	4049	;# 
   983   000FD2                     ECON1           equ	4050	;# 
   984   000FD3                     OSCCON          equ	4051	;# 
   985   000FD5                     T0CON           equ	4053	;# 
   986   000FD6                     TMR0            equ	4054	;# 
   987   000FD6                     TMR0L           equ	4054	;# 
   988   000FD7                     TMR0H           equ	4055	;# 
   989   000FD8                     STATUS          equ	4056	;# 
   990   000FD9                     FSR2            equ	4057	;# 
   991   000FD9                     FSR2L           equ	4057	;# 
   992   000FDA                     FSR2H           equ	4058	;# 
   993   000FDB                     PLUSW2          equ	4059	;# 
   994   000FDC                     PREINC2         equ	4060	;# 
   995   000FDD                     POSTDEC2        equ	4061	;# 
   996   000FDE                     POSTINC2        equ	4062	;# 
   997   000FDF                     INDF2           equ	4063	;# 
   998   000FE0                     BSR             equ	4064	;# 
   999   000FE1                     FSR1            equ	4065	;# 
  1000   000FE1                     FSR1L           equ	4065	;# 
  1001   000FE2                     FSR1H           equ	4066	;# 
  1002   000FE3                     PLUSW1          equ	4067	;# 
  1003   000FE4                     PREINC1         equ	4068	;# 
  1004   000FE5                     POSTDEC1        equ	4069	;# 
  1005   000FE6                     POSTINC1        equ	4070	;# 
  1006   000FE7                     INDF1           equ	4071	;# 
  1007   000FE8                     WREG            equ	4072	;# 
  1008   000FE9                     FSR0            equ	4073	;# 
  1009   000FE9                     FSR0L           equ	4073	;# 
  1010   000FEA                     FSR0H           equ	4074	;# 
  1011   000FEB                     PLUSW0          equ	4075	;# 
  1012   000FEC                     PREINC0         equ	4076	;# 
  1013   000FED                     POSTDEC0        equ	4077	;# 
  1014   000FEE                     POSTINC0        equ	4078	;# 
  1015   000FEF                     INDF0           equ	4079	;# 
  1016   000FF0                     INTCON3         equ	4080	;# 
  1017   000FF1                     INTCON2         equ	4081	;# 
  1018   000FF2                     INTCON          equ	4082	;# 
  1019   000FF3                     PROD            equ	4083	;# 
  1020   000FF3                     PRODL           equ	4083	;# 
  1021   000FF4                     PRODH           equ	4084	;# 
  1022   000FF5                     TABLAT          equ	4085	;# 
  1023   000FF6                     TBLPTR          equ	4086	;# 
  1024   000FF6                     TBLPTRL         equ	4086	;# 
  1025   000FF7                     TBLPTRH         equ	4087	;# 
  1026   000FF8                     TBLPTRU         equ	4088	;# 
  1027   000FF9                     PCLAT           equ	4089	;# 
  1028   000FF9                     PC              equ	4089	;# 
  1029   000FF9                     PCL             equ	4089	;# 
  1030   000FFA                     PCLATH          equ	4090	;# 
  1031   000FFB                     PCLATU          equ	4091	;# 
  1032   000FFC                     STKPTR          equ	4092	;# 
  1033   000FFD                     TOS             equ	4093	;# 
  1034   000FFD                     TOSL            equ	4093	;# 
  1035   000FFE                     TOSH            equ	4094	;# 
  1036   000FFF                     TOSU            equ	4095	;# 
  1037   000E80                     MAADR5          equ	3712	;# 
  1038   000E81                     MAADR6          equ	3713	;# 
  1039   000E82                     MAADR3          equ	3714	;# 
  1040   000E83                     MAADR4          equ	3715	;# 
  1041   000E84                     MAADR1          equ	3716	;# 
  1042   000E85                     MAADR2          equ	3717	;# 
  1043   000E8A                     MISTAT          equ	3722	;# 
  1044   000E97                     EFLOCON         equ	3735	;# 
  1045   000E98                     EPAUS           equ	3736	;# 
  1046   000E98                     EPAUSL          equ	3736	;# 
  1047   000E99                     EPAUSH          equ	3737	;# 
  1048   000EA0                     MACON1          equ	3744	;# 
  1049   000EA2                     MACON3          equ	3746	;# 
  1050   000EA3                     MACON4          equ	3747	;# 
  1051   000EA4                     MABBIPG         equ	3748	;# 
  1052   000EA6                     MAIPG           equ	3750	;# 
  1053   000EA6                     MAIPGL          equ	3750	;# 
  1054   000EA7                     MAIPGH          equ	3751	;# 
  1055   000EAA                     MAMXFL          equ	3754	;# 
  1056   000EAA                     MAMXFLL         equ	3754	;# 
  1057   000EAB                     MAMXFLH         equ	3755	;# 
  1058   000EB2                     MICMD           equ	3762	;# 
  1059   000EB4                     MIREGADR        equ	3764	;# 
  1060   000EB6                     MIWR            equ	3766	;# 
  1061   000EB6                     MIWRL           equ	3766	;# 
  1062   000EB7                     MIWRH           equ	3767	;# 
  1063   000EB8                     MIRD            equ	3768	;# 
  1064   000EB8                     MIRDL           equ	3768	;# 
  1065   000EB9                     MIRDH           equ	3769	;# 
  1066   000EC0                     EHT0            equ	3776	;# 
  1067   000EC1                     EHT1            equ	3777	;# 
  1068   000EC2                     EHT2            equ	3778	;# 
  1069   000EC3                     EHT3            equ	3779	;# 
  1070   000EC4                     EHT4            equ	3780	;# 
  1071   000EC5                     EHT5            equ	3781	;# 
  1072   000EC6                     EHT6            equ	3782	;# 
  1073   000EC7                     EHT7            equ	3783	;# 
  1074   000EC8                     EPMM0           equ	3784	;# 
  1075   000EC9                     EPMM1           equ	3785	;# 
  1076   000ECA                     EPMM2           equ	3786	;# 
  1077   000ECB                     EPMM3           equ	3787	;# 
  1078   000ECC                     EPMM4           equ	3788	;# 
  1079   000ECD                     EPMM5           equ	3789	;# 
  1080   000ECE                     EPMM6           equ	3790	;# 
  1081   000ECF                     EPMM7           equ	3791	;# 
  1082   000ED0                     EPMCS           equ	3792	;# 
  1083   000ED0                     EPMCSL          equ	3792	;# 
  1084   000ED1                     EPMCSH          equ	3793	;# 
  1085   000ED4                     EPMO            equ	3796	;# 
  1086   000ED4                     EPMOL           equ	3796	;# 
  1087   000ED5                     EPMOH           equ	3797	;# 
  1088   000ED8                     ERXFCON         equ	3800	;# 
  1089   000ED9                     EPKTCNT         equ	3801	;# 
  1090   000EE2                     EWRPT           equ	3810	;# 
  1091   000EE2                     EWRPTL          equ	3810	;# 
  1092   000EE3                     EWRPTH          equ	3811	;# 
  1093   000EE4                     ETXST           equ	3812	;# 
  1094   000EE4                     ETXSTL          equ	3812	;# 
  1095   000EE5                     ETXSTH          equ	3813	;# 
  1096   000EE6                     ETXND           equ	3814	;# 
  1097   000EE6                     ETXNDL          equ	3814	;# 
  1098   000EE7                     ETXNDH          equ	3815	;# 
  1099   000EE8                     ERXST           equ	3816	;# 
  1100   000EE8                     ERXSTL          equ	3816	;# 
  1101   000EE9                     ERXSTH          equ	3817	;# 
  1102   000EEA                     ERXND           equ	3818	;# 
  1103   000EEA                     ERXNDL          equ	3818	;# 
  1104   000EEB                     ERXNDH          equ	3819	;# 
  1105   000EEC                     ERXRDPT         equ	3820	;# 
  1106   000EEC                     ERXRDPTL        equ	3820	;# 
  1107   000EED                     ERXRDPTH        equ	3821	;# 
  1108   000EEE                     ERXWRPT         equ	3822	;# 
  1109   000EEE                     ERXWRPTL        equ	3822	;# 
  1110   000EEF                     ERXWRPTH        equ	3823	;# 
  1111   000EF0                     EDMAST          equ	3824	;# 
  1112   000EF0                     EDMASTL         equ	3824	;# 
  1113   000EF1                     EDMASTH         equ	3825	;# 
  1114   000EF2                     EDMAND          equ	3826	;# 
  1115   000EF2                     EDMANDL         equ	3826	;# 
  1116   000EF3                     EDMANDH         equ	3827	;# 
  1117   000EF4                     EDMADST         equ	3828	;# 
  1118   000EF4                     EDMADSTL        equ	3828	;# 
  1119   000EF5                     EDMADSTH        equ	3829	;# 
  1120   000EF6                     EDMACS          equ	3830	;# 
  1121   000EF6                     EDMACSL         equ	3830	;# 
  1122   000EF7                     EDMACSH         equ	3831	;# 
  1123   000EFB                     EIE             equ	3835	;# 
  1124   000EFD                     ESTAT           equ	3837	;# 
  1125   000EFE                     ECON2           equ	3838	;# 
  1126   000F60                     EIR             equ	3936	;# 
  1127   000F61                     EDATA           equ	3937	;# 
  1128   000F62                     SSP2CON2        equ	3938	;# 
  1129   000F63                     SSP2CON1        equ	3939	;# 
  1130   000F64                     SSP2STAT        equ	3940	;# 
  1131   000F65                     SSP2ADD         equ	3941	;# 
  1132   000F66                     SSP2BUF         equ	3942	;# 
  1133   000F67                     ECCP2DEL        equ	3943	;# 
  1134   000F68                     ECCP2AS         equ	3944	;# 
  1135   000F69                     ECCP3DEL        equ	3945	;# 
  1136   000F6A                     ECCP3AS         equ	3946	;# 
  1137   000F6B                     RCSTA2          equ	3947	;# 
  1138   000F6C                     TXSTA2          equ	3948	;# 
  1139   000F6D                     TXREG2          equ	3949	;# 
  1140   000F6E                     RCREG2          equ	3950	;# 
  1141   000F6F                     SPBRG2          equ	3951	;# 
  1142   000F70                     CCP5CON         equ	3952	;# 
  1143   000F71                     CCPR5           equ	3953	;# 
  1144   000F71                     CCPR5L          equ	3953	;# 
  1145   000F72                     CCPR5H          equ	3954	;# 
  1146   000F73                     CCP4CON         equ	3955	;# 
  1147   000F74                     CCPR4           equ	3956	;# 
  1148   000F74                     CCPR4L          equ	3956	;# 
  1149   000F75                     CCPR4H          equ	3957	;# 
  1150   000F76                     T4CON           equ	3958	;# 
  1151   000F77                     PR4             equ	3959	;# 
  1152   000F78                     TMR4            equ	3960	;# 
  1153   000F79                     ECCP1DEL        equ	3961	;# 
  1154   000F7A                     ERDPT           equ	3962	;# 
  1155   000F7A                     ERDPTL          equ	3962	;# 
  1156   000F7B                     ERDPTH          equ	3963	;# 
  1157   000F7C                     BAUDCON2        equ	3964	;# 
  1158   000F7C                     BAUDCTL2        equ	3964	;# 
  1159   000F7D                     SPBRGH2         equ	3965	;# 
  1160   000F7E                     BAUDCON1        equ	3966	;# 
  1161   000F7E                     BAUDCON         equ	3966	;# 
  1162   000F7E                     BAUDCTL         equ	3966	;# 
  1163   000F7E                     BAUDCTL1        equ	3966	;# 
  1164   000F7F                     SPBRGH1         equ	3967	;# 
  1165   000F7F                     SPBRGH          equ	3967	;# 
  1166   000F80                     PORTA           equ	3968	;# 
  1167   000F81                     PORTB           equ	3969	;# 
  1168   000F82                     PORTC           equ	3970	;# 
  1169   000F83                     PORTD           equ	3971	;# 
  1170   000F84                     PORTE           equ	3972	;# 
  1171   000F85                     PORTF           equ	3973	;# 
  1172   000F86                     PORTG           equ	3974	;# 
  1173   000F87                     PORTH           equ	3975	;# 
  1174   000F88                     PORTJ           equ	3976	;# 
  1175   000F89                     LATA            equ	3977	;# 
  1176   000F8A                     LATB            equ	3978	;# 
  1177   000F8B                     LATC            equ	3979	;# 
  1178   000F8C                     LATD            equ	3980	;# 
  1179   000F8D                     LATE            equ	3981	;# 
  1180   000F8E                     LATF            equ	3982	;# 
  1181   000F8F                     LATG            equ	3983	;# 
  1182   000F90                     LATH            equ	3984	;# 
  1183   000F91                     LATJ            equ	3985	;# 
  1184   000F92                     TRISA           equ	3986	;# 
  1185   000F92                     DDRA            equ	3986	;# 
  1186   000F93                     TRISB           equ	3987	;# 
  1187   000F93                     DDRB            equ	3987	;# 
  1188   000F94                     TRISC           equ	3988	;# 
  1189   000F94                     DDRC            equ	3988	;# 
  1190   000F95                     TRISD           equ	3989	;# 
  1191   000F95                     DDRD            equ	3989	;# 
  1192   000F96                     TRISE           equ	3990	;# 
  1193   000F96                     DDRE            equ	3990	;# 
  1194   000F97                     TRISF           equ	3991	;# 
  1195   000F97                     DDRF            equ	3991	;# 
  1196   000F98                     TRISG           equ	3992	;# 
  1197   000F98                     DDRG            equ	3992	;# 
  1198   000F99                     TRISH           equ	3993	;# 
  1199   000F99                     DDRH            equ	3993	;# 
  1200   000F9A                     TRISJ           equ	3994	;# 
  1201   000F9A                     DDRJ            equ	3994	;# 
  1202   000F9B                     OSCTUNE         equ	3995	;# 
  1203   000F9C                     MEMCON          equ	3996	;# 
  1204   000F9D                     PIE1            equ	3997	;# 
  1205   000F9E                     PIR1            equ	3998	;# 
  1206   000F9F                     IPR1            equ	3999	;# 
  1207   000FA0                     PIE2            equ	4000	;# 
  1208   000FA1                     PIR2            equ	4001	;# 
  1209   000FA2                     IPR2            equ	4002	;# 
  1210   000FA3                     PIE3            equ	4003	;# 
  1211   000FA4                     PIR3            equ	4004	;# 
  1212   000FA5                     IPR3            equ	4005	;# 
  1213   000FA6                     EECON1          equ	4006	;# 
  1214   000FA7                     EECON2          equ	4007	;# 
  1215   000FAB                     RCSTA1          equ	4011	;# 
  1216   000FAB                     RCSTA           equ	4011	;# 
  1217   000FAC                     TXSTA1          equ	4012	;# 
  1218   000FAC                     TXSTA           equ	4012	;# 
  1219   000FAD                     TXREG1          equ	4013	;# 
  1220   000FAD                     TXREG           equ	4013	;# 
  1221   000FAE                     RCREG1          equ	4014	;# 
  1222   000FAE                     RCREG           equ	4014	;# 
  1223   000FAF                     SPBRG1          equ	4015	;# 
  1224   000FAF                     SPBRG           equ	4015	;# 
  1225   000FB0                     PSPCON          equ	4016	;# 
  1226   000FB1                     T3CON           equ	4017	;# 
  1227   000FB2                     TMR3            equ	4018	;# 
  1228   000FB2                     TMR3L           equ	4018	;# 
  1229   000FB3                     TMR3H           equ	4019	;# 
  1230   000FB4                     CMCON           equ	4020	;# 
  1231   000FB5                     CVRCON          equ	4021	;# 
  1232   000FB6                     ECCP1AS         equ	4022	;# 
  1233   000FB7                     CCP3CON         equ	4023	;# 
  1234   000FB7                     ECCP3CON        equ	4023	;# 
  1235   000FB8                     CCPR3           equ	4024	;# 
  1236   000FB8                     CCPR3L          equ	4024	;# 
  1237   000FB9                     CCPR3H          equ	4025	;# 
  1238   000FBA                     CCP2CON         equ	4026	;# 
  1239   000FBA                     ECCP2CON        equ	4026	;# 
  1240   000FBB                     CCPR2           equ	4027	;# 
  1241   000FBB                     CCPR2L          equ	4027	;# 
  1242   000FBC                     CCPR2H          equ	4028	;# 
  1243   000FBD                     CCP1CON         equ	4029	;# 
  1244   000FBD                     ECCP1CON        equ	4029	;# 
  1245   000FBE                     CCPR1           equ	4030	;# 
  1246   000FBE                     CCPR1L          equ	4030	;# 
  1247   000FBF                     CCPR1H          equ	4031	;# 
  1248   000FC0                     ADCON2          equ	4032	;# 
  1249   000FC1                     ADCON1          equ	4033	;# 
  1250   000FC2                     ADCON0          equ	4034	;# 
  1251   000FC3                     ADRES           equ	4035	;# 
  1252   000FC3                     ADRESL          equ	4035	;# 
  1253   000FC4                     ADRESH          equ	4036	;# 
  1254   000FC5                     SSP1CON2        equ	4037	;# 
  1255   000FC5                     SSPCON2         equ	4037	;# 
  1256   000FC6                     SSP1CON1        equ	4038	;# 
  1257   000FC6                     SSPCON1         equ	4038	;# 
  1258   000FC7                     SSP1STAT        equ	4039	;# 
  1259   000FC7                     SSPSTAT         equ	4039	;# 
  1260   000FC8                     SSP1ADD         equ	4040	;# 
  1261   000FC8                     SSPADD          equ	4040	;# 
  1262   000FC9                     SSP1BUF         equ	4041	;# 
  1263   000FC9                     SSPBUF          equ	4041	;# 
  1264   000FCA                     T2CON           equ	4042	;# 
  1265   000FCB                     PR2             equ	4043	;# 
  1266   000FCC                     TMR2            equ	4044	;# 
  1267   000FCD                     T1CON           equ	4045	;# 
  1268   000FCE                     TMR1            equ	4046	;# 
  1269   000FCE                     TMR1L           equ	4046	;# 
  1270   000FCF                     TMR1H           equ	4047	;# 
  1271   000FD0                     RCON            equ	4048	;# 
  1272   000FD1                     WDTCON          equ	4049	;# 
  1273   000FD2                     ECON1           equ	4050	;# 
  1274   000FD3                     OSCCON          equ	4051	;# 
  1275   000FD5                     T0CON           equ	4053	;# 
  1276   000FD6                     TMR0            equ	4054	;# 
  1277   000FD6                     TMR0L           equ	4054	;# 
  1278   000FD7                     TMR0H           equ	4055	;# 
  1279   000FD8                     STATUS          equ	4056	;# 
  1280   000FD9                     FSR2            equ	4057	;# 
  1281   000FD9                     FSR2L           equ	4057	;# 
  1282   000FDA                     FSR2H           equ	4058	;# 
  1283   000FDB                     PLUSW2          equ	4059	;# 
  1284   000FDC                     PREINC2         equ	4060	;# 
  1285   000FDD                     POSTDEC2        equ	4061	;# 
  1286   000FDE                     POSTINC2        equ	4062	;# 
  1287   000FDF                     INDF2           equ	4063	;# 
  1288   000FE0                     BSR             equ	4064	;# 
  1289   000FE1                     FSR1            equ	4065	;# 
  1290   000FE1                     FSR1L           equ	4065	;# 
  1291   000FE2                     FSR1H           equ	4066	;# 
  1292   000FE3                     PLUSW1          equ	4067	;# 
  1293   000FE4                     PREINC1         equ	4068	;# 
  1294   000FE5                     POSTDEC1        equ	4069	;# 
  1295   000FE6                     POSTINC1        equ	4070	;# 
  1296   000FE7                     INDF1           equ	4071	;# 
  1297   000FE8                     WREG            equ	4072	;# 
  1298   000FE9                     FSR0            equ	4073	;# 
  1299   000FE9                     FSR0L           equ	4073	;# 
  1300   000FEA                     FSR0H           equ	4074	;# 
  1301   000FEB                     PLUSW0          equ	4075	;# 
  1302   000FEC                     PREINC0         equ	4076	;# 
  1303   000FED                     POSTDEC0        equ	4077	;# 
  1304   000FEE                     POSTINC0        equ	4078	;# 
  1305   000FEF                     INDF0           equ	4079	;# 
  1306   000FF0                     INTCON3         equ	4080	;# 
  1307   000FF1                     INTCON2         equ	4081	;# 
  1308   000FF2                     INTCON          equ	4082	;# 
  1309   000FF3                     PROD            equ	4083	;# 
  1310   000FF3                     PRODL           equ	4083	;# 
  1311   000FF4                     PRODH           equ	4084	;# 
  1312   000FF5                     TABLAT          equ	4085	;# 
  1313   000FF6                     TBLPTR          equ	4086	;# 
  1314   000FF6                     TBLPTRL         equ	4086	;# 
  1315   000FF7                     TBLPTRH         equ	4087	;# 
  1316   000FF8                     TBLPTRU         equ	4088	;# 
  1317   000FF9                     PCLAT           equ	4089	;# 
  1318   000FF9                     PC              equ	4089	;# 
  1319   000FF9                     PCL             equ	4089	;# 
  1320   000FFA                     PCLATH          equ	4090	;# 
  1321   000FFB                     PCLATU          equ	4091	;# 
  1322   000FFC                     STKPTR          equ	4092	;# 
  1323   000FFD                     TOS             equ	4093	;# 
  1324   000FFD                     TOSL            equ	4093	;# 
  1325   000FFE                     TOSH            equ	4094	;# 
  1326   000FFF                     TOSU            equ	4095	;# 
  1327   000E80                     MAADR5          equ	3712	;# 
  1328   000E81                     MAADR6          equ	3713	;# 
  1329   000E82                     MAADR3          equ	3714	;# 
  1330   000E83                     MAADR4          equ	3715	;# 
  1331   000E84                     MAADR1          equ	3716	;# 
  1332   000E85                     MAADR2          equ	3717	;# 
  1333   000E8A                     MISTAT          equ	3722	;# 
  1334   000E97                     EFLOCON         equ	3735	;# 
  1335   000E98                     EPAUS           equ	3736	;# 
  1336   000E98                     EPAUSL          equ	3736	;# 
  1337   000E99                     EPAUSH          equ	3737	;# 
  1338   000EA0                     MACON1          equ	3744	;# 
  1339   000EA2                     MACON3          equ	3746	;# 
  1340   000EA3                     MACON4          equ	3747	;# 
  1341   000EA4                     MABBIPG         equ	3748	;# 
  1342   000EA6                     MAIPG           equ	3750	;# 
  1343   000EA6                     MAIPGL          equ	3750	;# 
  1344   000EA7                     MAIPGH          equ	3751	;# 
  1345   000EAA                     MAMXFL          equ	3754	;# 
  1346   000EAA                     MAMXFLL         equ	3754	;# 
  1347   000EAB                     MAMXFLH         equ	3755	;# 
  1348   000EB2                     MICMD           equ	3762	;# 
  1349   000EB4                     MIREGADR        equ	3764	;# 
  1350   000EB6                     MIWR            equ	3766	;# 
  1351   000EB6                     MIWRL           equ	3766	;# 
  1352   000EB7                     MIWRH           equ	3767	;# 
  1353   000EB8                     MIRD            equ	3768	;# 
  1354   000EB8                     MIRDL           equ	3768	;# 
  1355   000EB9                     MIRDH           equ	3769	;# 
  1356   000EC0                     EHT0            equ	3776	;# 
  1357   000EC1                     EHT1            equ	3777	;# 
  1358   000EC2                     EHT2            equ	3778	;# 
  1359   000EC3                     EHT3            equ	3779	;# 
  1360   000EC4                     EHT4            equ	3780	;# 
  1361   000EC5                     EHT5            equ	3781	;# 
  1362   000EC6                     EHT6            equ	3782	;# 
  1363   000EC7                     EHT7            equ	3783	;# 
  1364   000EC8                     EPMM0           equ	3784	;# 
  1365   000EC9                     EPMM1           equ	3785	;# 
  1366   000ECA                     EPMM2           equ	3786	;# 
  1367   000ECB                     EPMM3           equ	3787	;# 
  1368   000ECC                     EPMM4           equ	3788	;# 
  1369   000ECD                     EPMM5           equ	3789	;# 
  1370   000ECE                     EPMM6           equ	3790	;# 
  1371   000ECF                     EPMM7           equ	3791	;# 
  1372   000ED0                     EPMCS           equ	3792	;# 
  1373   000ED0                     EPMCSL          equ	3792	;# 
  1374   000ED1                     EPMCSH          equ	3793	;# 
  1375   000ED4                     EPMO            equ	3796	;# 
  1376   000ED4                     EPMOL           equ	3796	;# 
  1377   000ED5                     EPMOH           equ	3797	;# 
  1378   000ED8                     ERXFCON         equ	3800	;# 
  1379   000ED9                     EPKTCNT         equ	3801	;# 
  1380   000EE2                     EWRPT           equ	3810	;# 
  1381   000EE2                     EWRPTL          equ	3810	;# 
  1382   000EE3                     EWRPTH          equ	3811	;# 
  1383   000EE4                     ETXST           equ	3812	;# 
  1384   000EE4                     ETXSTL          equ	3812	;# 
  1385   000EE5                     ETXSTH          equ	3813	;# 
  1386   000EE6                     ETXND           equ	3814	;# 
  1387   000EE6                     ETXNDL          equ	3814	;# 
  1388   000EE7                     ETXNDH          equ	3815	;# 
  1389   000EE8                     ERXST           equ	3816	;# 
  1390   000EE8                     ERXSTL          equ	3816	;# 
  1391   000EE9                     ERXSTH          equ	3817	;# 
  1392   000EEA                     ERXND           equ	3818	;# 
  1393   000EEA                     ERXNDL          equ	3818	;# 
  1394   000EEB                     ERXNDH          equ	3819	;# 
  1395   000EEC                     ERXRDPT         equ	3820	;# 
  1396   000EEC                     ERXRDPTL        equ	3820	;# 
  1397   000EED                     ERXRDPTH        equ	3821	;# 
  1398   000EEE                     ERXWRPT         equ	3822	;# 
  1399   000EEE                     ERXWRPTL        equ	3822	;# 
  1400   000EEF                     ERXWRPTH        equ	3823	;# 
  1401   000EF0                     EDMAST          equ	3824	;# 
  1402   000EF0                     EDMASTL         equ	3824	;# 
  1403   000EF1                     EDMASTH         equ	3825	;# 
  1404   000EF2                     EDMAND          equ	3826	;# 
  1405   000EF2                     EDMANDL         equ	3826	;# 
  1406   000EF3                     EDMANDH         equ	3827	;# 
  1407   000EF4                     EDMADST         equ	3828	;# 
  1408   000EF4                     EDMADSTL        equ	3828	;# 
  1409   000EF5                     EDMADSTH        equ	3829	;# 
  1410   000EF6                     EDMACS          equ	3830	;# 
  1411   000EF6                     EDMACSL         equ	3830	;# 
  1412   000EF7                     EDMACSH         equ	3831	;# 
  1413   000EFB                     EIE             equ	3835	;# 
  1414   000EFD                     ESTAT           equ	3837	;# 
  1415   000EFE                     ECON2           equ	3838	;# 
  1416   000F60                     EIR             equ	3936	;# 
  1417   000F61                     EDATA           equ	3937	;# 
  1418   000F62                     SSP2CON2        equ	3938	;# 
  1419   000F63                     SSP2CON1        equ	3939	;# 
  1420   000F64                     SSP2STAT        equ	3940	;# 
  1421   000F65                     SSP2ADD         equ	3941	;# 
  1422   000F66                     SSP2BUF         equ	3942	;# 
  1423   000F67                     ECCP2DEL        equ	3943	;# 
  1424   000F68                     ECCP2AS         equ	3944	;# 
  1425   000F69                     ECCP3DEL        equ	3945	;# 
  1426   000F6A                     ECCP3AS         equ	3946	;# 
  1427   000F6B                     RCSTA2          equ	3947	;# 
  1428   000F6C                     TXSTA2          equ	3948	;# 
  1429   000F6D                     TXREG2          equ	3949	;# 
  1430   000F6E                     RCREG2          equ	3950	;# 
  1431   000F6F                     SPBRG2          equ	3951	;# 
  1432   000F70                     CCP5CON         equ	3952	;# 
  1433   000F71                     CCPR5           equ	3953	;# 
  1434   000F71                     CCPR5L          equ	3953	;# 
  1435   000F72                     CCPR5H          equ	3954	;# 
  1436   000F73                     CCP4CON         equ	3955	;# 
  1437   000F74                     CCPR4           equ	3956	;# 
  1438   000F74                     CCPR4L          equ	3956	;# 
  1439   000F75                     CCPR4H          equ	3957	;# 
  1440   000F76                     T4CON           equ	3958	;# 
  1441   000F77                     PR4             equ	3959	;# 
  1442   000F78                     TMR4            equ	3960	;# 
  1443   000F79                     ECCP1DEL        equ	3961	;# 
  1444   000F7A                     ERDPT           equ	3962	;# 
  1445   000F7A                     ERDPTL          equ	3962	;# 
  1446   000F7B                     ERDPTH          equ	3963	;# 
  1447   000F7C                     BAUDCON2        equ	3964	;# 
  1448   000F7C                     BAUDCTL2        equ	3964	;# 
  1449   000F7D                     SPBRGH2         equ	3965	;# 
  1450   000F7E                     BAUDCON1        equ	3966	;# 
  1451   000F7E                     BAUDCON         equ	3966	;# 
  1452   000F7E                     BAUDCTL         equ	3966	;# 
  1453   000F7E                     BAUDCTL1        equ	3966	;# 
  1454   000F7F                     SPBRGH1         equ	3967	;# 
  1455   000F7F                     SPBRGH          equ	3967	;# 
  1456   000F80                     PORTA           equ	3968	;# 
  1457   000F81                     PORTB           equ	3969	;# 
  1458   000F82                     PORTC           equ	3970	;# 
  1459   000F83                     PORTD           equ	3971	;# 
  1460   000F84                     PORTE           equ	3972	;# 
  1461   000F85                     PORTF           equ	3973	;# 
  1462   000F86                     PORTG           equ	3974	;# 
  1463   000F87                     PORTH           equ	3975	;# 
  1464   000F88                     PORTJ           equ	3976	;# 
  1465   000F89                     LATA            equ	3977	;# 
  1466   000F8A                     LATB            equ	3978	;# 
  1467   000F8B                     LATC            equ	3979	;# 
  1468   000F8C                     LATD            equ	3980	;# 
  1469   000F8D                     LATE            equ	3981	;# 
  1470   000F8E                     LATF            equ	3982	;# 
  1471   000F8F                     LATG            equ	3983	;# 
  1472   000F90                     LATH            equ	3984	;# 
  1473   000F91                     LATJ            equ	3985	;# 
  1474   000F92                     TRISA           equ	3986	;# 
  1475   000F92                     DDRA            equ	3986	;# 
  1476   000F93                     TRISB           equ	3987	;# 
  1477   000F93                     DDRB            equ	3987	;# 
  1478   000F94                     TRISC           equ	3988	;# 
  1479   000F94                     DDRC            equ	3988	;# 
  1480   000F95                     TRISD           equ	3989	;# 
  1481   000F95                     DDRD            equ	3989	;# 
  1482   000F96                     TRISE           equ	3990	;# 
  1483   000F96                     DDRE            equ	3990	;# 
  1484   000F97                     TRISF           equ	3991	;# 
  1485   000F97                     DDRF            equ	3991	;# 
  1486   000F98                     TRISG           equ	3992	;# 
  1487   000F98                     DDRG            equ	3992	;# 
  1488   000F99                     TRISH           equ	3993	;# 
  1489   000F99                     DDRH            equ	3993	;# 
  1490   000F9A                     TRISJ           equ	3994	;# 
  1491   000F9A                     DDRJ            equ	3994	;# 
  1492   000F9B                     OSCTUNE         equ	3995	;# 
  1493   000F9C                     MEMCON          equ	3996	;# 
  1494   000F9D                     PIE1            equ	3997	;# 
  1495   000F9E                     PIR1            equ	3998	;# 
  1496   000F9F                     IPR1            equ	3999	;# 
  1497   000FA0                     PIE2            equ	4000	;# 
  1498   000FA1                     PIR2            equ	4001	;# 
  1499   000FA2                     IPR2            equ	4002	;# 
  1500   000FA3                     PIE3            equ	4003	;# 
  1501   000FA4                     PIR3            equ	4004	;# 
  1502   000FA5                     IPR3            equ	4005	;# 
  1503   000FA6                     EECON1          equ	4006	;# 
  1504   000FA7                     EECON2          equ	4007	;# 
  1505   000FAB                     RCSTA1          equ	4011	;# 
  1506   000FAB                     RCSTA           equ	4011	;# 
  1507   000FAC                     TXSTA1          equ	4012	;# 
  1508   000FAC                     TXSTA           equ	4012	;# 
  1509   000FAD                     TXREG1          equ	4013	;# 
  1510   000FAD                     TXREG           equ	4013	;# 
  1511   000FAE                     RCREG1          equ	4014	;# 
  1512   000FAE                     RCREG           equ	4014	;# 
  1513   000FAF                     SPBRG1          equ	4015	;# 
  1514   000FAF                     SPBRG           equ	4015	;# 
  1515   000FB0                     PSPCON          equ	4016	;# 
  1516   000FB1                     T3CON           equ	4017	;# 
  1517   000FB2                     TMR3            equ	4018	;# 
  1518   000FB2                     TMR3L           equ	4018	;# 
  1519   000FB3                     TMR3H           equ	4019	;# 
  1520   000FB4                     CMCON           equ	4020	;# 
  1521   000FB5                     CVRCON          equ	4021	;# 
  1522   000FB6                     ECCP1AS         equ	4022	;# 
  1523   000FB7                     CCP3CON         equ	4023	;# 
  1524   000FB7                     ECCP3CON        equ	4023	;# 
  1525   000FB8                     CCPR3           equ	4024	;# 
  1526   000FB8                     CCPR3L          equ	4024	;# 
  1527   000FB9                     CCPR3H          equ	4025	;# 
  1528   000FBA                     CCP2CON         equ	4026	;# 
  1529   000FBA                     ECCP2CON        equ	4026	;# 
  1530   000FBB                     CCPR2           equ	4027	;# 
  1531   000FBB                     CCPR2L          equ	4027	;# 
  1532   000FBC                     CCPR2H          equ	4028	;# 
  1533   000FBD                     CCP1CON         equ	4029	;# 
  1534   000FBD                     ECCP1CON        equ	4029	;# 
  1535   000FBE                     CCPR1           equ	4030	;# 
  1536   000FBE                     CCPR1L          equ	4030	;# 
  1537   000FBF                     CCPR1H          equ	4031	;# 
  1538   000FC0                     ADCON2          equ	4032	;# 
  1539   000FC1                     ADCON1          equ	4033	;# 
  1540   000FC2                     ADCON0          equ	4034	;# 
  1541   000FC3                     ADRES           equ	4035	;# 
  1542   000FC3                     ADRESL          equ	4035	;# 
  1543   000FC4                     ADRESH          equ	4036	;# 
  1544   000FC5                     SSP1CON2        equ	4037	;# 
  1545   000FC5                     SSPCON2         equ	4037	;# 
  1546   000FC6                     SSP1CON1        equ	4038	;# 
  1547   000FC6                     SSPCON1         equ	4038	;# 
  1548   000FC7                     SSP1STAT        equ	4039	;# 
  1549   000FC7                     SSPSTAT         equ	4039	;# 
  1550   000FC8                     SSP1ADD         equ	4040	;# 
  1551   000FC8                     SSPADD          equ	4040	;# 
  1552   000FC9                     SSP1BUF         equ	4041	;# 
  1553   000FC9                     SSPBUF          equ	4041	;# 
  1554   000FCA                     T2CON           equ	4042	;# 
  1555   000FCB                     PR2             equ	4043	;# 
  1556   000FCC                     TMR2            equ	4044	;# 
  1557   000FCD                     T1CON           equ	4045	;# 
  1558   000FCE                     TMR1            equ	4046	;# 
  1559   000FCE                     TMR1L           equ	4046	;# 
  1560   000FCF                     TMR1H           equ	4047	;# 
  1561   000FD0                     RCON            equ	4048	;# 
  1562   000FD1                     WDTCON          equ	4049	;# 
  1563   000FD2                     ECON1           equ	4050	;# 
  1564   000FD3                     OSCCON          equ	4051	;# 
  1565   000FD5                     T0CON           equ	4053	;# 
  1566   000FD6                     TMR0            equ	4054	;# 
  1567   000FD6                     TMR0L           equ	4054	;# 
  1568   000FD7                     TMR0H           equ	4055	;# 
  1569   000FD8                     STATUS          equ	4056	;# 
  1570   000FD9                     FSR2            equ	4057	;# 
  1571   000FD9                     FSR2L           equ	4057	;# 
  1572   000FDA                     FSR2H           equ	4058	;# 
  1573   000FDB                     PLUSW2          equ	4059	;# 
  1574   000FDC                     PREINC2         equ	4060	;# 
  1575   000FDD                     POSTDEC2        equ	4061	;# 
  1576   000FDE                     POSTINC2        equ	4062	;# 
  1577   000FDF                     INDF2           equ	4063	;# 
  1578   000FE0                     BSR             equ	4064	;# 
  1579   000FE1                     FSR1            equ	4065	;# 
  1580   000FE1                     FSR1L           equ	4065	;# 
  1581   000FE2                     FSR1H           equ	4066	;# 
  1582   000FE3                     PLUSW1          equ	4067	;# 
  1583   000FE4                     PREINC1         equ	4068	;# 
  1584   000FE5                     POSTDEC1        equ	4069	;# 
  1585   000FE6                     POSTINC1        equ	4070	;# 
  1586   000FE7                     INDF1           equ	4071	;# 
  1587   000FE8                     WREG            equ	4072	;# 
  1588   000FE9                     FSR0            equ	4073	;# 
  1589   000FE9                     FSR0L           equ	4073	;# 
  1590   000FEA                     FSR0H           equ	4074	;# 
  1591   000FEB                     PLUSW0          equ	4075	;# 
  1592   000FEC                     PREINC0         equ	4076	;# 
  1593   000FED                     POSTDEC0        equ	4077	;# 
  1594   000FEE                     POSTINC0        equ	4078	;# 
  1595   000FEF                     INDF0           equ	4079	;# 
  1596   000FF0                     INTCON3         equ	4080	;# 
  1597   000FF1                     INTCON2         equ	4081	;# 
  1598   000FF2                     INTCON          equ	4082	;# 
  1599   000FF3                     PROD            equ	4083	;# 
  1600   000FF3                     PRODL           equ	4083	;# 
  1601   000FF4                     PRODH           equ	4084	;# 
  1602   000FF5                     TABLAT          equ	4085	;# 
  1603   000FF6                     TBLPTR          equ	4086	;# 
  1604   000FF6                     TBLPTRL         equ	4086	;# 
  1605   000FF7                     TBLPTRH         equ	4087	;# 
  1606   000FF8                     TBLPTRU         equ	4088	;# 
  1607   000FF9                     PCLAT           equ	4089	;# 
  1608   000FF9                     PC              equ	4089	;# 
  1609   000FF9                     PCL             equ	4089	;# 
  1610   000FFA                     PCLATH          equ	4090	;# 
  1611   000FFB                     PCLATU          equ	4091	;# 
  1612   000FFC                     STKPTR          equ	4092	;# 
  1613   000FFD                     TOS             equ	4093	;# 
  1614   000FFD                     TOSL            equ	4093	;# 
  1615   000FFE                     TOSH            equ	4094	;# 
  1616   000FFF                     TOSU            equ	4095	;# 
  1617   000E80                     MAADR5          equ	3712	;# 
  1618   000E81                     MAADR6          equ	3713	;# 
  1619   000E82                     MAADR3          equ	3714	;# 
  1620   000E83                     MAADR4          equ	3715	;# 
  1621   000E84                     MAADR1          equ	3716	;# 
  1622   000E85                     MAADR2          equ	3717	;# 
  1623   000E8A                     MISTAT          equ	3722	;# 
  1624   000E97                     EFLOCON         equ	3735	;# 
  1625   000E98                     EPAUS           equ	3736	;# 
  1626   000E98                     EPAUSL          equ	3736	;# 
  1627   000E99                     EPAUSH          equ	3737	;# 
  1628   000EA0                     MACON1          equ	3744	;# 
  1629   000EA2                     MACON3          equ	3746	;# 
  1630   000EA3                     MACON4          equ	3747	;# 
  1631   000EA4                     MABBIPG         equ	3748	;# 
  1632   000EA6                     MAIPG           equ	3750	;# 
  1633   000EA6                     MAIPGL          equ	3750	;# 
  1634   000EA7                     MAIPGH          equ	3751	;# 
  1635   000EAA                     MAMXFL          equ	3754	;# 
  1636   000EAA                     MAMXFLL         equ	3754	;# 
  1637   000EAB                     MAMXFLH         equ	3755	;# 
  1638   000EB2                     MICMD           equ	3762	;# 
  1639   000EB4                     MIREGADR        equ	3764	;# 
  1640   000EB6                     MIWR            equ	3766	;# 
  1641   000EB6                     MIWRL           equ	3766	;# 
  1642   000EB7                     MIWRH           equ	3767	;# 
  1643   000EB8                     MIRD            equ	3768	;# 
  1644   000EB8                     MIRDL           equ	3768	;# 
  1645   000EB9                     MIRDH           equ	3769	;# 
  1646   000EC0                     EHT0            equ	3776	;# 
  1647   000EC1                     EHT1            equ	3777	;# 
  1648   000EC2                     EHT2            equ	3778	;# 
  1649   000EC3                     EHT3            equ	3779	;# 
  1650   000EC4                     EHT4            equ	3780	;# 
  1651   000EC5                     EHT5            equ	3781	;# 
  1652   000EC6                     EHT6            equ	3782	;# 
  1653   000EC7                     EHT7            equ	3783	;# 
  1654   000EC8                     EPMM0           equ	3784	;# 
  1655   000EC9                     EPMM1           equ	3785	;# 
  1656   000ECA                     EPMM2           equ	3786	;# 
  1657   000ECB                     EPMM3           equ	3787	;# 
  1658   000ECC                     EPMM4           equ	3788	;# 
  1659   000ECD                     EPMM5           equ	3789	;# 
  1660   000ECE                     EPMM6           equ	3790	;# 
  1661   000ECF                     EPMM7           equ	3791	;# 
  1662   000ED0                     EPMCS           equ	3792	;# 
  1663   000ED0                     EPMCSL          equ	3792	;# 
  1664   000ED1                     EPMCSH          equ	3793	;# 
  1665   000ED4                     EPMO            equ	3796	;# 
  1666   000ED4                     EPMOL           equ	3796	;# 
  1667   000ED5                     EPMOH           equ	3797	;# 
  1668   000ED8                     ERXFCON         equ	3800	;# 
  1669   000ED9                     EPKTCNT         equ	3801	;# 
  1670   000EE2                     EWRPT           equ	3810	;# 
  1671   000EE2                     EWRPTL          equ	3810	;# 
  1672   000EE3                     EWRPTH          equ	3811	;# 
  1673   000EE4                     ETXST           equ	3812	;# 
  1674   000EE4                     ETXSTL          equ	3812	;# 
  1675   000EE5                     ETXSTH          equ	3813	;# 
  1676   000EE6                     ETXND           equ	3814	;# 
  1677   000EE6                     ETXNDL          equ	3814	;# 
  1678   000EE7                     ETXNDH          equ	3815	;# 
  1679   000EE8                     ERXST           equ	3816	;# 
  1680   000EE8                     ERXSTL          equ	3816	;# 
  1681   000EE9                     ERXSTH          equ	3817	;# 
  1682   000EEA                     ERXND           equ	3818	;# 
  1683   000EEA                     ERXNDL          equ	3818	;# 
  1684   000EEB                     ERXNDH          equ	3819	;# 
  1685   000EEC                     ERXRDPT         equ	3820	;# 
  1686   000EEC                     ERXRDPTL        equ	3820	;# 
  1687   000EED                     ERXRDPTH        equ	3821	;# 
  1688   000EEE                     ERXWRPT         equ	3822	;# 
  1689   000EEE                     ERXWRPTL        equ	3822	;# 
  1690   000EEF                     ERXWRPTH        equ	3823	;# 
  1691   000EF0                     EDMAST          equ	3824	;# 
  1692   000EF0                     EDMASTL         equ	3824	;# 
  1693   000EF1                     EDMASTH         equ	3825	;# 
  1694   000EF2                     EDMAND          equ	3826	;# 
  1695   000EF2                     EDMANDL         equ	3826	;# 
  1696   000EF3                     EDMANDH         equ	3827	;# 
  1697   000EF4                     EDMADST         equ	3828	;# 
  1698   000EF4                     EDMADSTL        equ	3828	;# 
  1699   000EF5                     EDMADSTH        equ	3829	;# 
  1700   000EF6                     EDMACS          equ	3830	;# 
  1701   000EF6                     EDMACSL         equ	3830	;# 
  1702   000EF7                     EDMACSH         equ	3831	;# 
  1703   000EFB                     EIE             equ	3835	;# 
  1704   000EFD                     ESTAT           equ	3837	;# 
  1705   000EFE                     ECON2           equ	3838	;# 
  1706   000F60                     EIR             equ	3936	;# 
  1707   000F61                     EDATA           equ	3937	;# 
  1708   000F62                     SSP2CON2        equ	3938	;# 
  1709   000F63                     SSP2CON1        equ	3939	;# 
  1710   000F64                     SSP2STAT        equ	3940	;# 
  1711   000F65                     SSP2ADD         equ	3941	;# 
  1712   000F66                     SSP2BUF         equ	3942	;# 
  1713   000F67                     ECCP2DEL        equ	3943	;# 
  1714   000F68                     ECCP2AS         equ	3944	;# 
  1715   000F69                     ECCP3DEL        equ	3945	;# 
  1716   000F6A                     ECCP3AS         equ	3946	;# 
  1717   000F6B                     RCSTA2          equ	3947	;# 
  1718   000F6C                     TXSTA2          equ	3948	;# 
  1719   000F6D                     TXREG2          equ	3949	;# 
  1720   000F6E                     RCREG2          equ	3950	;# 
  1721   000F6F                     SPBRG2          equ	3951	;# 
  1722   000F70                     CCP5CON         equ	3952	;# 
  1723   000F71                     CCPR5           equ	3953	;# 
  1724   000F71                     CCPR5L          equ	3953	;# 
  1725   000F72                     CCPR5H          equ	3954	;# 
  1726   000F73                     CCP4CON         equ	3955	;# 
  1727   000F74                     CCPR4           equ	3956	;# 
  1728   000F74                     CCPR4L          equ	3956	;# 
  1729   000F75                     CCPR4H          equ	3957	;# 
  1730   000F76                     T4CON           equ	3958	;# 
  1731   000F77                     PR4             equ	3959	;# 
  1732   000F78                     TMR4            equ	3960	;# 
  1733   000F79                     ECCP1DEL        equ	3961	;# 
  1734   000F7A                     ERDPT           equ	3962	;# 
  1735   000F7A                     ERDPTL          equ	3962	;# 
  1736   000F7B                     ERDPTH          equ	3963	;# 
  1737   000F7C                     BAUDCON2        equ	3964	;# 
  1738   000F7C                     BAUDCTL2        equ	3964	;# 
  1739   000F7D                     SPBRGH2         equ	3965	;# 
  1740   000F7E                     BAUDCON1        equ	3966	;# 
  1741   000F7E                     BAUDCON         equ	3966	;# 
  1742   000F7E                     BAUDCTL         equ	3966	;# 
  1743   000F7E                     BAUDCTL1        equ	3966	;# 
  1744   000F7F                     SPBRGH1         equ	3967	;# 
  1745   000F7F                     SPBRGH          equ	3967	;# 
  1746   000F80                     PORTA           equ	3968	;# 
  1747   000F81                     PORTB           equ	3969	;# 
  1748   000F82                     PORTC           equ	3970	;# 
  1749   000F83                     PORTD           equ	3971	;# 
  1750   000F84                     PORTE           equ	3972	;# 
  1751   000F85                     PORTF           equ	3973	;# 
  1752   000F86                     PORTG           equ	3974	;# 
  1753   000F87                     PORTH           equ	3975	;# 
  1754   000F88                     PORTJ           equ	3976	;# 
  1755   000F89                     LATA            equ	3977	;# 
  1756   000F8A                     LATB            equ	3978	;# 
  1757   000F8B                     LATC            equ	3979	;# 
  1758   000F8C                     LATD            equ	3980	;# 
  1759   000F8D                     LATE            equ	3981	;# 
  1760   000F8E                     LATF            equ	3982	;# 
  1761   000F8F                     LATG            equ	3983	;# 
  1762   000F90                     LATH            equ	3984	;# 
  1763   000F91                     LATJ            equ	3985	;# 
  1764   000F92                     TRISA           equ	3986	;# 
  1765   000F92                     DDRA            equ	3986	;# 
  1766   000F93                     TRISB           equ	3987	;# 
  1767   000F93                     DDRB            equ	3987	;# 
  1768   000F94                     TRISC           equ	3988	;# 
  1769   000F94                     DDRC            equ	3988	;# 
  1770   000F95                     TRISD           equ	3989	;# 
  1771   000F95                     DDRD            equ	3989	;# 
  1772   000F96                     TRISE           equ	3990	;# 
  1773   000F96                     DDRE            equ	3990	;# 
  1774   000F97                     TRISF           equ	3991	;# 
  1775   000F97                     DDRF            equ	3991	;# 
  1776   000F98                     TRISG           equ	3992	;# 
  1777   000F98                     DDRG            equ	3992	;# 
  1778   000F99                     TRISH           equ	3993	;# 
  1779   000F99                     DDRH            equ	3993	;# 
  1780   000F9A                     TRISJ           equ	3994	;# 
  1781   000F9A                     DDRJ            equ	3994	;# 
  1782   000F9B                     OSCTUNE         equ	3995	;# 
  1783   000F9C                     MEMCON          equ	3996	;# 
  1784   000F9D                     PIE1            equ	3997	;# 
  1785   000F9E                     PIR1            equ	3998	;# 
  1786   000F9F                     IPR1            equ	3999	;# 
  1787   000FA0                     PIE2            equ	4000	;# 
  1788   000FA1                     PIR2            equ	4001	;# 
  1789   000FA2                     IPR2            equ	4002	;# 
  1790   000FA3                     PIE3            equ	4003	;# 
  1791   000FA4                     PIR3            equ	4004	;# 
  1792   000FA5                     IPR3            equ	4005	;# 
  1793   000FA6                     EECON1          equ	4006	;# 
  1794   000FA7                     EECON2          equ	4007	;# 
  1795   000FAB                     RCSTA1          equ	4011	;# 
  1796   000FAB                     RCSTA           equ	4011	;# 
  1797   000FAC                     TXSTA1          equ	4012	;# 
  1798   000FAC                     TXSTA           equ	4012	;# 
  1799   000FAD                     TXREG1          equ	4013	;# 
  1800   000FAD                     TXREG           equ	4013	;# 
  1801   000FAE                     RCREG1          equ	4014	;# 
  1802   000FAE                     RCREG           equ	4014	;# 
  1803   000FAF                     SPBRG1          equ	4015	;# 
  1804   000FAF                     SPBRG           equ	4015	;# 
  1805   000FB0                     PSPCON          equ	4016	;# 
  1806   000FB1                     T3CON           equ	4017	;# 
  1807   000FB2                     TMR3            equ	4018	;# 
  1808   000FB2                     TMR3L           equ	4018	;# 
  1809   000FB3                     TMR3H           equ	4019	;# 
  1810   000FB4                     CMCON           equ	4020	;# 
  1811   000FB5                     CVRCON          equ	4021	;# 
  1812   000FB6                     ECCP1AS         equ	4022	;# 
  1813   000FB7                     CCP3CON         equ	4023	;# 
  1814   000FB7                     ECCP3CON        equ	4023	;# 
  1815   000FB8                     CCPR3           equ	4024	;# 
  1816   000FB8                     CCPR3L          equ	4024	;# 
  1817   000FB9                     CCPR3H          equ	4025	;# 
  1818   000FBA                     CCP2CON         equ	4026	;# 
  1819   000FBA                     ECCP2CON        equ	4026	;# 
  1820   000FBB                     CCPR2           equ	4027	;# 
  1821   000FBB                     CCPR2L          equ	4027	;# 
  1822   000FBC                     CCPR2H          equ	4028	;# 
  1823   000FBD                     CCP1CON         equ	4029	;# 
  1824   000FBD                     ECCP1CON        equ	4029	;# 
  1825   000FBE                     CCPR1           equ	4030	;# 
  1826   000FBE                     CCPR1L          equ	4030	;# 
  1827   000FBF                     CCPR1H          equ	4031	;# 
  1828   000FC0                     ADCON2          equ	4032	;# 
  1829   000FC1                     ADCON1          equ	4033	;# 
  1830   000FC2                     ADCON0          equ	4034	;# 
  1831   000FC3                     ADRES           equ	4035	;# 
  1832   000FC3                     ADRESL          equ	4035	;# 
  1833   000FC4                     ADRESH          equ	4036	;# 
  1834   000FC5                     SSP1CON2        equ	4037	;# 
  1835   000FC5                     SSPCON2         equ	4037	;# 
  1836   000FC6                     SSP1CON1        equ	4038	;# 
  1837   000FC6                     SSPCON1         equ	4038	;# 
  1838   000FC7                     SSP1STAT        equ	4039	;# 
  1839   000FC7                     SSPSTAT         equ	4039	;# 
  1840   000FC8                     SSP1ADD         equ	4040	;# 
  1841   000FC8                     SSPADD          equ	4040	;# 
  1842   000FC9                     SSP1BUF         equ	4041	;# 
  1843   000FC9                     SSPBUF          equ	4041	;# 
  1844   000FCA                     T2CON           equ	4042	;# 
  1845   000FCB                     PR2             equ	4043	;# 
  1846   000FCC                     TMR2            equ	4044	;# 
  1847   000FCD                     T1CON           equ	4045	;# 
  1848   000FCE                     TMR1            equ	4046	;# 
  1849   000FCE                     TMR1L           equ	4046	;# 
  1850   000FCF                     TMR1H           equ	4047	;# 
  1851   000FD0                     RCON            equ	4048	;# 
  1852   000FD1                     WDTCON          equ	4049	;# 
  1853   000FD2                     ECON1           equ	4050	;# 
  1854   000FD3                     OSCCON          equ	4051	;# 
  1855   000FD5                     T0CON           equ	4053	;# 
  1856   000FD6                     TMR0            equ	4054	;# 
  1857   000FD6                     TMR0L           equ	4054	;# 
  1858   000FD7                     TMR0H           equ	4055	;# 
  1859   000FD8                     STATUS          equ	4056	;# 
  1860   000FD9                     FSR2            equ	4057	;# 
  1861   000FD9                     FSR2L           equ	4057	;# 
  1862   000FDA                     FSR2H           equ	4058	;# 
  1863   000FDB                     PLUSW2          equ	4059	;# 
  1864   000FDC                     PREINC2         equ	4060	;# 
  1865   000FDD                     POSTDEC2        equ	4061	;# 
  1866   000FDE                     POSTINC2        equ	4062	;# 
  1867   000FDF                     INDF2           equ	4063	;# 
  1868   000FE0                     BSR             equ	4064	;# 
  1869   000FE1                     FSR1            equ	4065	;# 
  1870   000FE1                     FSR1L           equ	4065	;# 
  1871   000FE2                     FSR1H           equ	4066	;# 
  1872   000FE3                     PLUSW1          equ	4067	;# 
  1873   000FE4                     PREINC1         equ	4068	;# 
  1874   000FE5                     POSTDEC1        equ	4069	;# 
  1875   000FE6                     POSTINC1        equ	4070	;# 
  1876   000FE7                     INDF1           equ	4071	;# 
  1877   000FE8                     WREG            equ	4072	;# 
  1878   000FE9                     FSR0            equ	4073	;# 
  1879   000FE9                     FSR0L           equ	4073	;# 
  1880   000FEA                     FSR0H           equ	4074	;# 
  1881   000FEB                     PLUSW0          equ	4075	;# 
  1882   000FEC                     PREINC0         equ	4076	;# 
  1883   000FED                     POSTDEC0        equ	4077	;# 
  1884   000FEE                     POSTINC0        equ	4078	;# 
  1885   000FEF                     INDF0           equ	4079	;# 
  1886   000FF0                     INTCON3         equ	4080	;# 
  1887   000FF1                     INTCON2         equ	4081	;# 
  1888   000FF2                     INTCON          equ	4082	;# 
  1889   000FF3                     PROD            equ	4083	;# 
  1890   000FF3                     PRODL           equ	4083	;# 
  1891   000FF4                     PRODH           equ	4084	;# 
  1892   000FF5                     TABLAT          equ	4085	;# 
  1893   000FF6                     TBLPTR          equ	4086	;# 
  1894   000FF6                     TBLPTRL         equ	4086	;# 
  1895   000FF7                     TBLPTRH         equ	4087	;# 
  1896   000FF8                     TBLPTRU         equ	4088	;# 
  1897   000FF9                     PCLAT           equ	4089	;# 
  1898   000FF9                     PC              equ	4089	;# 
  1899   000FF9                     PCL             equ	4089	;# 
  1900   000FFA                     PCLATH          equ	4090	;# 
  1901   000FFB                     PCLATU          equ	4091	;# 
  1902   000FFC                     STKPTR          equ	4092	;# 
  1903   000FFD                     TOS             equ	4093	;# 
  1904   000FFD                     TOSL            equ	4093	;# 
  1905   000FFE                     TOSH            equ	4094	;# 
  1906   000FFF                     TOSU            equ	4095	;# 
  1907   000E80                     MAADR5          equ	3712	;# 
  1908   000E81                     MAADR6          equ	3713	;# 
  1909   000E82                     MAADR3          equ	3714	;# 
  1910   000E83                     MAADR4          equ	3715	;# 
  1911   000E84                     MAADR1          equ	3716	;# 
  1912   000E85                     MAADR2          equ	3717	;# 
  1913   000E8A                     MISTAT          equ	3722	;# 
  1914   000E97                     EFLOCON         equ	3735	;# 
  1915   000E98                     EPAUS           equ	3736	;# 
  1916   000E98                     EPAUSL          equ	3736	;# 
  1917   000E99                     EPAUSH          equ	3737	;# 
  1918   000EA0                     MACON1          equ	3744	;# 
  1919   000EA2                     MACON3          equ	3746	;# 
  1920   000EA3                     MACON4          equ	3747	;# 
  1921   000EA4                     MABBIPG         equ	3748	;# 
  1922   000EA6                     MAIPG           equ	3750	;# 
  1923   000EA6                     MAIPGL          equ	3750	;# 
  1924   000EA7                     MAIPGH          equ	3751	;# 
  1925   000EAA                     MAMXFL          equ	3754	;# 
  1926   000EAA                     MAMXFLL         equ	3754	;# 
  1927   000EAB                     MAMXFLH         equ	3755	;# 
  1928   000EB2                     MICMD           equ	3762	;# 
  1929   000EB4                     MIREGADR        equ	3764	;# 
  1930   000EB6                     MIWR            equ	3766	;# 
  1931   000EB6                     MIWRL           equ	3766	;# 
  1932   000EB7                     MIWRH           equ	3767	;# 
  1933   000EB8                     MIRD            equ	3768	;# 
  1934   000EB8                     MIRDL           equ	3768	;# 
  1935   000EB9                     MIRDH           equ	3769	;# 
  1936   000EC0                     EHT0            equ	3776	;# 
  1937   000EC1                     EHT1            equ	3777	;# 
  1938   000EC2                     EHT2            equ	3778	;# 
  1939   000EC3                     EHT3            equ	3779	;# 
  1940   000EC4                     EHT4            equ	3780	;# 
  1941   000EC5                     EHT5            equ	3781	;# 
  1942   000EC6                     EHT6            equ	3782	;# 
  1943   000EC7                     EHT7            equ	3783	;# 
  1944   000EC8                     EPMM0           equ	3784	;# 
  1945   000EC9                     EPMM1           equ	3785	;# 
  1946   000ECA                     EPMM2           equ	3786	;# 
  1947   000ECB                     EPMM3           equ	3787	;# 
  1948   000ECC                     EPMM4           equ	3788	;# 
  1949   000ECD                     EPMM5           equ	3789	;# 
  1950   000ECE                     EPMM6           equ	3790	;# 
  1951   000ECF                     EPMM7           equ	3791	;# 
  1952   000ED0                     EPMCS           equ	3792	;# 
  1953   000ED0                     EPMCSL          equ	3792	;# 
  1954   000ED1                     EPMCSH          equ	3793	;# 
  1955   000ED4                     EPMO            equ	3796	;# 
  1956   000ED4                     EPMOL           equ	3796	;# 
  1957   000ED5                     EPMOH           equ	3797	;# 
  1958   000ED8                     ERXFCON         equ	3800	;# 
  1959   000ED9                     EPKTCNT         equ	3801	;# 
  1960   000EE2                     EWRPT           equ	3810	;# 
  1961   000EE2                     EWRPTL          equ	3810	;# 
  1962   000EE3                     EWRPTH          equ	3811	;# 
  1963   000EE4                     ETXST           equ	3812	;# 
  1964   000EE4                     ETXSTL          equ	3812	;# 
  1965   000EE5                     ETXSTH          equ	3813	;# 
  1966   000EE6                     ETXND           equ	3814	;# 
  1967   000EE6                     ETXNDL          equ	3814	;# 
  1968   000EE7                     ETXNDH          equ	3815	;# 
  1969   000EE8                     ERXST           equ	3816	;# 
  1970   000EE8                     ERXSTL          equ	3816	;# 
  1971   000EE9                     ERXSTH          equ	3817	;# 
  1972   000EEA                     ERXND           equ	3818	;# 
  1973   000EEA                     ERXNDL          equ	3818	;# 
  1974   000EEB                     ERXNDH          equ	3819	;# 
  1975   000EEC                     ERXRDPT         equ	3820	;# 
  1976   000EEC                     ERXRDPTL        equ	3820	;# 
  1977   000EED                     ERXRDPTH        equ	3821	;# 
  1978   000EEE                     ERXWRPT         equ	3822	;# 
  1979   000EEE                     ERXWRPTL        equ	3822	;# 
  1980   000EEF                     ERXWRPTH        equ	3823	;# 
  1981   000EF0                     EDMAST          equ	3824	;# 
  1982   000EF0                     EDMASTL         equ	3824	;# 
  1983   000EF1                     EDMASTH         equ	3825	;# 
  1984   000EF2                     EDMAND          equ	3826	;# 
  1985   000EF2                     EDMANDL         equ	3826	;# 
  1986   000EF3                     EDMANDH         equ	3827	;# 
  1987   000EF4                     EDMADST         equ	3828	;# 
  1988   000EF4                     EDMADSTL        equ	3828	;# 
  1989   000EF5                     EDMADSTH        equ	3829	;# 
  1990   000EF6                     EDMACS          equ	3830	;# 
  1991   000EF6                     EDMACSL         equ	3830	;# 
  1992   000EF7                     EDMACSH         equ	3831	;# 
  1993   000EFB                     EIE             equ	3835	;# 
  1994   000EFD                     ESTAT           equ	3837	;# 
  1995   000EFE                     ECON2           equ	3838	;# 
  1996   000F60                     EIR             equ	3936	;# 
  1997   000F61                     EDATA           equ	3937	;# 
  1998   000F62                     SSP2CON2        equ	3938	;# 
  1999   000F63                     SSP2CON1        equ	3939	;# 
  2000   000F64                     SSP2STAT        equ	3940	;# 
  2001   000F65                     SSP2ADD         equ	3941	;# 
  2002   000F66                     SSP2BUF         equ	3942	;# 
  2003   000F67                     ECCP2DEL        equ	3943	;# 
  2004   000F68                     ECCP2AS         equ	3944	;# 
  2005   000F69                     ECCP3DEL        equ	3945	;# 
  2006   000F6A                     ECCP3AS         equ	3946	;# 
  2007   000F6B                     RCSTA2          equ	3947	;# 
  2008   000F6C                     TXSTA2          equ	3948	;# 
  2009   000F6D                     TXREG2          equ	3949	;# 
  2010   000F6E                     RCREG2          equ	3950	;# 
  2011   000F6F                     SPBRG2          equ	3951	;# 
  2012   000F70                     CCP5CON         equ	3952	;# 
  2013   000F71                     CCPR5           equ	3953	;# 
  2014   000F71                     CCPR5L          equ	3953	;# 
  2015   000F72                     CCPR5H          equ	3954	;# 
  2016   000F73                     CCP4CON         equ	3955	;# 
  2017   000F74                     CCPR4           equ	3956	;# 
  2018   000F74                     CCPR4L          equ	3956	;# 
  2019   000F75                     CCPR4H          equ	3957	;# 
  2020   000F76                     T4CON           equ	3958	;# 
  2021   000F77                     PR4             equ	3959	;# 
  2022   000F78                     TMR4            equ	3960	;# 
  2023   000F79                     ECCP1DEL        equ	3961	;# 
  2024   000F7A                     ERDPT           equ	3962	;# 
  2025   000F7A                     ERDPTL          equ	3962	;# 
  2026   000F7B                     ERDPTH          equ	3963	;# 
  2027   000F7C                     BAUDCON2        equ	3964	;# 
  2028   000F7C                     BAUDCTL2        equ	3964	;# 
  2029   000F7D                     SPBRGH2         equ	3965	;# 
  2030   000F7E                     BAUDCON1        equ	3966	;# 
  2031   000F7E                     BAUDCON         equ	3966	;# 
  2032   000F7E                     BAUDCTL         equ	3966	;# 
  2033   000F7E                     BAUDCTL1        equ	3966	;# 
  2034   000F7F                     SPBRGH1         equ	3967	;# 
  2035   000F7F                     SPBRGH          equ	3967	;# 
  2036   000F80                     PORTA           equ	3968	;# 
  2037   000F81                     PORTB           equ	3969	;# 
  2038   000F82                     PORTC           equ	3970	;# 
  2039   000F83                     PORTD           equ	3971	;# 
  2040   000F84                     PORTE           equ	3972	;# 
  2041   000F85                     PORTF           equ	3973	;# 
  2042   000F86                     PORTG           equ	3974	;# 
  2043   000F87                     PORTH           equ	3975	;# 
  2044   000F88                     PORTJ           equ	3976	;# 
  2045   000F89                     LATA            equ	3977	;# 
  2046   000F8A                     LATB            equ	3978	;# 
  2047   000F8B                     LATC            equ	3979	;# 
  2048   000F8C                     LATD            equ	3980	;# 
  2049   000F8D                     LATE            equ	3981	;# 
  2050   000F8E                     LATF            equ	3982	;# 
  2051   000F8F                     LATG            equ	3983	;# 
  2052   000F90                     LATH            equ	3984	;# 
  2053   000F91                     LATJ            equ	3985	;# 
  2054   000F92                     TRISA           equ	3986	;# 
  2055   000F92                     DDRA            equ	3986	;# 
  2056   000F93                     TRISB           equ	3987	;# 
  2057   000F93                     DDRB            equ	3987	;# 
  2058   000F94                     TRISC           equ	3988	;# 
  2059   000F94                     DDRC            equ	3988	;# 
  2060   000F95                     TRISD           equ	3989	;# 
  2061   000F95                     DDRD            equ	3989	;# 
  2062   000F96                     TRISE           equ	3990	;# 
  2063   000F96                     DDRE            equ	3990	;# 
  2064   000F97                     TRISF           equ	3991	;# 
  2065   000F97                     DDRF            equ	3991	;# 
  2066   000F98                     TRISG           equ	3992	;# 
  2067   000F98                     DDRG            equ	3992	;# 
  2068   000F99                     TRISH           equ	3993	;# 
  2069   000F99                     DDRH            equ	3993	;# 
  2070   000F9A                     TRISJ           equ	3994	;# 
  2071   000F9A                     DDRJ            equ	3994	;# 
  2072   000F9B                     OSCTUNE         equ	3995	;# 
  2073   000F9C                     MEMCON          equ	3996	;# 
  2074   000F9D                     PIE1            equ	3997	;# 
  2075   000F9E                     PIR1            equ	3998	;# 
  2076   000F9F                     IPR1            equ	3999	;# 
  2077   000FA0                     PIE2            equ	4000	;# 
  2078   000FA1                     PIR2            equ	4001	;# 
  2079   000FA2                     IPR2            equ	4002	;# 
  2080   000FA3                     PIE3            equ	4003	;# 
  2081   000FA4                     PIR3            equ	4004	;# 
  2082   000FA5                     IPR3            equ	4005	;# 
  2083   000FA6                     EECON1          equ	4006	;# 
  2084   000FA7                     EECON2          equ	4007	;# 
  2085   000FAB                     RCSTA1          equ	4011	;# 
  2086   000FAB                     RCSTA           equ	4011	;# 
  2087   000FAC                     TXSTA1          equ	4012	;# 
  2088   000FAC                     TXSTA           equ	4012	;# 
  2089   000FAD                     TXREG1          equ	4013	;# 
  2090   000FAD                     TXREG           equ	4013	;# 
  2091   000FAE                     RCREG1          equ	4014	;# 
  2092   000FAE                     RCREG           equ	4014	;# 
  2093   000FAF                     SPBRG1          equ	4015	;# 
  2094   000FAF                     SPBRG           equ	4015	;# 
  2095   000FB0                     PSPCON          equ	4016	;# 
  2096   000FB1                     T3CON           equ	4017	;# 
  2097   000FB2                     TMR3            equ	4018	;# 
  2098   000FB2                     TMR3L           equ	4018	;# 
  2099   000FB3                     TMR3H           equ	4019	;# 
  2100   000FB4                     CMCON           equ	4020	;# 
  2101   000FB5                     CVRCON          equ	4021	;# 
  2102   000FB6                     ECCP1AS         equ	4022	;# 
  2103   000FB7                     CCP3CON         equ	4023	;# 
  2104   000FB7                     ECCP3CON        equ	4023	;# 
  2105   000FB8                     CCPR3           equ	4024	;# 
  2106   000FB8                     CCPR3L          equ	4024	;# 
  2107   000FB9                     CCPR3H          equ	4025	;# 
  2108   000FBA                     CCP2CON         equ	4026	;# 
  2109   000FBA                     ECCP2CON        equ	4026	;# 
  2110   000FBB                     CCPR2           equ	4027	;# 
  2111   000FBB                     CCPR2L          equ	4027	;# 
  2112   000FBC                     CCPR2H          equ	4028	;# 
  2113   000FBD                     CCP1CON         equ	4029	;# 
  2114   000FBD                     ECCP1CON        equ	4029	;# 
  2115   000FBE                     CCPR1           equ	4030	;# 
  2116   000FBE                     CCPR1L          equ	4030	;# 
  2117   000FBF                     CCPR1H          equ	4031	;# 
  2118   000FC0                     ADCON2          equ	4032	;# 
  2119   000FC1                     ADCON1          equ	4033	;# 
  2120   000FC2                     ADCON0          equ	4034	;# 
  2121   000FC3                     ADRES           equ	4035	;# 
  2122   000FC3                     ADRESL          equ	4035	;# 
  2123   000FC4                     ADRESH          equ	4036	;# 
  2124   000FC5                     SSP1CON2        equ	4037	;# 
  2125   000FC5                     SSPCON2         equ	4037	;# 
  2126   000FC6                     SSP1CON1        equ	4038	;# 
  2127   000FC6                     SSPCON1         equ	4038	;# 
  2128   000FC7                     SSP1STAT        equ	4039	;# 
  2129   000FC7                     SSPSTAT         equ	4039	;# 
  2130   000FC8                     SSP1ADD         equ	4040	;# 
  2131   000FC8                     SSPADD          equ	4040	;# 
  2132   000FC9                     SSP1BUF         equ	4041	;# 
  2133   000FC9                     SSPBUF          equ	4041	;# 
  2134   000FCA                     T2CON           equ	4042	;# 
  2135   000FCB                     PR2             equ	4043	;# 
  2136   000FCC                     TMR2            equ	4044	;# 
  2137   000FCD                     T1CON           equ	4045	;# 
  2138   000FCE                     TMR1            equ	4046	;# 
  2139   000FCE                     TMR1L           equ	4046	;# 
  2140   000FCF                     TMR1H           equ	4047	;# 
  2141   000FD0                     RCON            equ	4048	;# 
  2142   000FD1                     WDTCON          equ	4049	;# 
  2143   000FD2                     ECON1           equ	4050	;# 
  2144   000FD3                     OSCCON          equ	4051	;# 
  2145   000FD5                     T0CON           equ	4053	;# 
  2146   000FD6                     TMR0            equ	4054	;# 
  2147   000FD6                     TMR0L           equ	4054	;# 
  2148   000FD7                     TMR0H           equ	4055	;# 
  2149   000FD8                     STATUS          equ	4056	;# 
  2150   000FD9                     FSR2            equ	4057	;# 
  2151   000FD9                     FSR2L           equ	4057	;# 
  2152   000FDA                     FSR2H           equ	4058	;# 
  2153   000FDB                     PLUSW2          equ	4059	;# 
  2154   000FDC                     PREINC2         equ	4060	;# 
  2155   000FDD                     POSTDEC2        equ	4061	;# 
  2156   000FDE                     POSTINC2        equ	4062	;# 
  2157   000FDF                     INDF2           equ	4063	;# 
  2158   000FE0                     BSR             equ	4064	;# 
  2159   000FE1                     FSR1            equ	4065	;# 
  2160   000FE1                     FSR1L           equ	4065	;# 
  2161   000FE2                     FSR1H           equ	4066	;# 
  2162   000FE3                     PLUSW1          equ	4067	;# 
  2163   000FE4                     PREINC1         equ	4068	;# 
  2164   000FE5                     POSTDEC1        equ	4069	;# 
  2165   000FE6                     POSTINC1        equ	4070	;# 
  2166   000FE7                     INDF1           equ	4071	;# 
  2167   000FE8                     WREG            equ	4072	;# 
  2168   000FE9                     FSR0            equ	4073	;# 
  2169   000FE9                     FSR0L           equ	4073	;# 
  2170   000FEA                     FSR0H           equ	4074	;# 
  2171   000FEB                     PLUSW0          equ	4075	;# 
  2172   000FEC                     PREINC0         equ	4076	;# 
  2173   000FED                     POSTDEC0        equ	4077	;# 
  2174   000FEE                     POSTINC0        equ	4078	;# 
  2175   000FEF                     INDF0           equ	4079	;# 
  2176   000FF0                     INTCON3         equ	4080	;# 
  2177   000FF1                     INTCON2         equ	4081	;# 
  2178   000FF2                     INTCON          equ	4082	;# 
  2179   000FF3                     PROD            equ	4083	;# 
  2180   000FF3                     PRODL           equ	4083	;# 
  2181   000FF4                     PRODH           equ	4084	;# 
  2182   000FF5                     TABLAT          equ	4085	;# 
  2183   000FF6                     TBLPTR          equ	4086	;# 
  2184   000FF6                     TBLPTRL         equ	4086	;# 
  2185   000FF7                     TBLPTRH         equ	4087	;# 
  2186   000FF8                     TBLPTRU         equ	4088	;# 
  2187   000FF9                     PCLAT           equ	4089	;# 
  2188   000FF9                     PC              equ	4089	;# 
  2189   000FF9                     PCL             equ	4089	;# 
  2190   000FFA                     PCLATH          equ	4090	;# 
  2191   000FFB                     PCLATU          equ	4091	;# 
  2192   000FFC                     STKPTR          equ	4092	;# 
  2193   000FFD                     TOS             equ	4093	;# 
  2194   000FFD                     TOSL            equ	4093	;# 
  2195   000FFE                     TOSH            equ	4094	;# 
  2196   000FFF                     TOSU            equ	4095	;# 
  2197   000E80                     MAADR5          equ	3712	;# 
  2198   000E81                     MAADR6          equ	3713	;# 
  2199   000E82                     MAADR3          equ	3714	;# 
  2200   000E83                     MAADR4          equ	3715	;# 
  2201   000E84                     MAADR1          equ	3716	;# 
  2202   000E85                     MAADR2          equ	3717	;# 
  2203   000E8A                     MISTAT          equ	3722	;# 
  2204   000E97                     EFLOCON         equ	3735	;# 
  2205   000E98                     EPAUS           equ	3736	;# 
  2206   000E98                     EPAUSL          equ	3736	;# 
  2207   000E99                     EPAUSH          equ	3737	;# 
  2208   000EA0                     MACON1          equ	3744	;# 
  2209   000EA2                     MACON3          equ	3746	;# 
  2210   000EA3                     MACON4          equ	3747	;# 
  2211   000EA4                     MABBIPG         equ	3748	;# 
  2212   000EA6                     MAIPG           equ	3750	;# 
  2213   000EA6                     MAIPGL          equ	3750	;# 
  2214   000EA7                     MAIPGH          equ	3751	;# 
  2215   000EAA                     MAMXFL          equ	3754	;# 
  2216   000EAA                     MAMXFLL         equ	3754	;# 
  2217   000EAB                     MAMXFLH         equ	3755	;# 
  2218   000EB2                     MICMD           equ	3762	;# 
  2219   000EB4                     MIREGADR        equ	3764	;# 
  2220   000EB6                     MIWR            equ	3766	;# 
  2221   000EB6                     MIWRL           equ	3766	;# 
  2222   000EB7                     MIWRH           equ	3767	;# 
  2223   000EB8                     MIRD            equ	3768	;# 
  2224   000EB8                     MIRDL           equ	3768	;# 
  2225   000EB9                     MIRDH           equ	3769	;# 
  2226   000EC0                     EHT0            equ	3776	;# 
  2227   000EC1                     EHT1            equ	3777	;# 
  2228   000EC2                     EHT2            equ	3778	;# 
  2229   000EC3                     EHT3            equ	3779	;# 
  2230   000EC4                     EHT4            equ	3780	;# 
  2231   000EC5                     EHT5            equ	3781	;# 
  2232   000EC6                     EHT6            equ	3782	;# 
  2233   000EC7                     EHT7            equ	3783	;# 
  2234   000EC8                     EPMM0           equ	3784	;# 
  2235   000EC9                     EPMM1           equ	3785	;# 
  2236   000ECA                     EPMM2           equ	3786	;# 
  2237   000ECB                     EPMM3           equ	3787	;# 
  2238   000ECC                     EPMM4           equ	3788	;# 
  2239   000ECD                     EPMM5           equ	3789	;# 
  2240   000ECE                     EPMM6           equ	3790	;# 
  2241   000ECF                     EPMM7           equ	3791	;# 
  2242   000ED0                     EPMCS           equ	3792	;# 
  2243   000ED0                     EPMCSL          equ	3792	;# 
  2244   000ED1                     EPMCSH          equ	3793	;# 
  2245   000ED4                     EPMO            equ	3796	;# 
  2246   000ED4                     EPMOL           equ	3796	;# 
  2247   000ED5                     EPMOH           equ	3797	;# 
  2248   000ED8                     ERXFCON         equ	3800	;# 
  2249   000ED9                     EPKTCNT         equ	3801	;# 
  2250   000EE2                     EWRPT           equ	3810	;# 
  2251   000EE2                     EWRPTL          equ	3810	;# 
  2252   000EE3                     EWRPTH          equ	3811	;# 
  2253   000EE4                     ETXST           equ	3812	;# 
  2254   000EE4                     ETXSTL          equ	3812	;# 
  2255   000EE5                     ETXSTH          equ	3813	;# 
  2256   000EE6                     ETXND           equ	3814	;# 
  2257   000EE6                     ETXNDL          equ	3814	;# 
  2258   000EE7                     ETXNDH          equ	3815	;# 
  2259   000EE8                     ERXST           equ	3816	;# 
  2260   000EE8                     ERXSTL          equ	3816	;# 
  2261   000EE9                     ERXSTH          equ	3817	;# 
  2262   000EEA                     ERXND           equ	3818	;# 
  2263   000EEA                     ERXNDL          equ	3818	;# 
  2264   000EEB                     ERXNDH          equ	3819	;# 
  2265   000EEC                     ERXRDPT         equ	3820	;# 
  2266   000EEC                     ERXRDPTL        equ	3820	;# 
  2267   000EED                     ERXRDPTH        equ	3821	;# 
  2268   000EEE                     ERXWRPT         equ	3822	;# 
  2269   000EEE                     ERXWRPTL        equ	3822	;# 
  2270   000EEF                     ERXWRPTH        equ	3823	;# 
  2271   000EF0                     EDMAST          equ	3824	;# 
  2272   000EF0                     EDMASTL         equ	3824	;# 
  2273   000EF1                     EDMASTH         equ	3825	;# 
  2274   000EF2                     EDMAND          equ	3826	;# 
  2275   000EF2                     EDMANDL         equ	3826	;# 
  2276   000EF3                     EDMANDH         equ	3827	;# 
  2277   000EF4                     EDMADST         equ	3828	;# 
  2278   000EF4                     EDMADSTL        equ	3828	;# 
  2279   000EF5                     EDMADSTH        equ	3829	;# 
  2280   000EF6                     EDMACS          equ	3830	;# 
  2281   000EF6                     EDMACSL         equ	3830	;# 
  2282   000EF7                     EDMACSH         equ	3831	;# 
  2283   000EFB                     EIE             equ	3835	;# 
  2284   000EFD                     ESTAT           equ	3837	;# 
  2285   000EFE                     ECON2           equ	3838	;# 
  2286   000F60                     EIR             equ	3936	;# 
  2287   000F61                     EDATA           equ	3937	;# 
  2288   000F62                     SSP2CON2        equ	3938	;# 
  2289   000F63                     SSP2CON1        equ	3939	;# 
  2290   000F64                     SSP2STAT        equ	3940	;# 
  2291   000F65                     SSP2ADD         equ	3941	;# 
  2292   000F66                     SSP2BUF         equ	3942	;# 
  2293   000F67                     ECCP2DEL        equ	3943	;# 
  2294   000F68                     ECCP2AS         equ	3944	;# 
  2295   000F69                     ECCP3DEL        equ	3945	;# 
  2296   000F6A                     ECCP3AS         equ	3946	;# 
  2297   000F6B                     RCSTA2          equ	3947	;# 
  2298   000F6C                     TXSTA2          equ	3948	;# 
  2299   000F6D                     TXREG2          equ	3949	;# 
  2300   000F6E                     RCREG2          equ	3950	;# 
  2301   000F6F                     SPBRG2          equ	3951	;# 
  2302   000F70                     CCP5CON         equ	3952	;# 
  2303   000F71                     CCPR5           equ	3953	;# 
  2304   000F71                     CCPR5L          equ	3953	;# 
  2305   000F72                     CCPR5H          equ	3954	;# 
  2306   000F73                     CCP4CON         equ	3955	;# 
  2307   000F74                     CCPR4           equ	3956	;# 
  2308   000F74                     CCPR4L          equ	3956	;# 
  2309   000F75                     CCPR4H          equ	3957	;# 
  2310   000F76                     T4CON           equ	3958	;# 
  2311   000F77                     PR4             equ	3959	;# 
  2312   000F78                     TMR4            equ	3960	;# 
  2313   000F79                     ECCP1DEL        equ	3961	;# 
  2314   000F7A                     ERDPT           equ	3962	;# 
  2315   000F7A                     ERDPTL          equ	3962	;# 
  2316   000F7B                     ERDPTH          equ	3963	;# 
  2317   000F7C                     BAUDCON2        equ	3964	;# 
  2318   000F7C                     BAUDCTL2        equ	3964	;# 
  2319   000F7D                     SPBRGH2         equ	3965	;# 
  2320   000F7E                     BAUDCON1        equ	3966	;# 
  2321   000F7E                     BAUDCON         equ	3966	;# 
  2322   000F7E                     BAUDCTL         equ	3966	;# 
  2323   000F7E                     BAUDCTL1        equ	3966	;# 
  2324   000F7F                     SPBRGH1         equ	3967	;# 
  2325   000F7F                     SPBRGH          equ	3967	;# 
  2326   000F80                     PORTA           equ	3968	;# 
  2327   000F81                     PORTB           equ	3969	;# 
  2328   000F82                     PORTC           equ	3970	;# 
  2329   000F83                     PORTD           equ	3971	;# 
  2330   000F84                     PORTE           equ	3972	;# 
  2331   000F85                     PORTF           equ	3973	;# 
  2332   000F86                     PORTG           equ	3974	;# 
  2333   000F87                     PORTH           equ	3975	;# 
  2334   000F88                     PORTJ           equ	3976	;# 
  2335   000F89                     LATA            equ	3977	;# 
  2336   000F8A                     LATB            equ	3978	;# 
  2337   000F8B                     LATC            equ	3979	;# 
  2338   000F8C                     LATD            equ	3980	;# 
  2339   000F8D                     LATE            equ	3981	;# 
  2340   000F8E                     LATF            equ	3982	;# 
  2341   000F8F                     LATG            equ	3983	;# 
  2342   000F90                     LATH            equ	3984	;# 
  2343   000F91                     LATJ            equ	3985	;# 
  2344   000F92                     TRISA           equ	3986	;# 
  2345   000F92                     DDRA            equ	3986	;# 
  2346   000F93                     TRISB           equ	3987	;# 
  2347   000F93                     DDRB            equ	3987	;# 
  2348   000F94                     TRISC           equ	3988	;# 
  2349   000F94                     DDRC            equ	3988	;# 
  2350   000F95                     TRISD           equ	3989	;# 
  2351   000F95                     DDRD            equ	3989	;# 
  2352   000F96                     TRISE           equ	3990	;# 
  2353   000F96                     DDRE            equ	3990	;# 
  2354   000F97                     TRISF           equ	3991	;# 
  2355   000F97                     DDRF            equ	3991	;# 
  2356   000F98                     TRISG           equ	3992	;# 
  2357   000F98                     DDRG            equ	3992	;# 
  2358   000F99                     TRISH           equ	3993	;# 
  2359   000F99                     DDRH            equ	3993	;# 
  2360   000F9A                     TRISJ           equ	3994	;# 
  2361   000F9A                     DDRJ            equ	3994	;# 
  2362   000F9B                     OSCTUNE         equ	3995	;# 
  2363   000F9C                     MEMCON          equ	3996	;# 
  2364   000F9D                     PIE1            equ	3997	;# 
  2365   000F9E                     PIR1            equ	3998	;# 
  2366   000F9F                     IPR1            equ	3999	;# 
  2367   000FA0                     PIE2            equ	4000	;# 
  2368   000FA1                     PIR2            equ	4001	;# 
  2369   000FA2                     IPR2            equ	4002	;# 
  2370   000FA3                     PIE3            equ	4003	;# 
  2371   000FA4                     PIR3            equ	4004	;# 
  2372   000FA5                     IPR3            equ	4005	;# 
  2373   000FA6                     EECON1          equ	4006	;# 
  2374   000FA7                     EECON2          equ	4007	;# 
  2375   000FAB                     RCSTA1          equ	4011	;# 
  2376   000FAB                     RCSTA           equ	4011	;# 
  2377   000FAC                     TXSTA1          equ	4012	;# 
  2378   000FAC                     TXSTA           equ	4012	;# 
  2379   000FAD                     TXREG1          equ	4013	;# 
  2380   000FAD                     TXREG           equ	4013	;# 
  2381   000FAE                     RCREG1          equ	4014	;# 
  2382   000FAE                     RCREG           equ	4014	;# 
  2383   000FAF                     SPBRG1          equ	4015	;# 
  2384   000FAF                     SPBRG           equ	4015	;# 
  2385   000FB0                     PSPCON          equ	4016	;# 
  2386   000FB1                     T3CON           equ	4017	;# 
  2387   000FB2                     TMR3            equ	4018	;# 
  2388   000FB2                     TMR3L           equ	4018	;# 
  2389   000FB3                     TMR3H           equ	4019	;# 
  2390   000FB4                     CMCON           equ	4020	;# 
  2391   000FB5                     CVRCON          equ	4021	;# 
  2392   000FB6                     ECCP1AS         equ	4022	;# 
  2393   000FB7                     CCP3CON         equ	4023	;# 
  2394   000FB7                     ECCP3CON        equ	4023	;# 
  2395   000FB8                     CCPR3           equ	4024	;# 
  2396   000FB8                     CCPR3L          equ	4024	;# 
  2397   000FB9                     CCPR3H          equ	4025	;# 
  2398   000FBA                     CCP2CON         equ	4026	;# 
  2399   000FBA                     ECCP2CON        equ	4026	;# 
  2400   000FBB                     CCPR2           equ	4027	;# 
  2401   000FBB                     CCPR2L          equ	4027	;# 
  2402   000FBC                     CCPR2H          equ	4028	;# 
  2403   000FBD                     CCP1CON         equ	4029	;# 
  2404   000FBD                     ECCP1CON        equ	4029	;# 
  2405   000FBE                     CCPR1           equ	4030	;# 
  2406   000FBE                     CCPR1L          equ	4030	;# 
  2407   000FBF                     CCPR1H          equ	4031	;# 
  2408   000FC0                     ADCON2          equ	4032	;# 
  2409   000FC1                     ADCON1          equ	4033	;# 
  2410   000FC2                     ADCON0          equ	4034	;# 
  2411   000FC3                     ADRES           equ	4035	;# 
  2412   000FC3                     ADRESL          equ	4035	;# 
  2413   000FC4                     ADRESH          equ	4036	;# 
  2414   000FC5                     SSP1CON2        equ	4037	;# 
  2415   000FC5                     SSPCON2         equ	4037	;# 
  2416   000FC6                     SSP1CON1        equ	4038	;# 
  2417   000FC6                     SSPCON1         equ	4038	;# 
  2418   000FC7                     SSP1STAT        equ	4039	;# 
  2419   000FC7                     SSPSTAT         equ	4039	;# 
  2420   000FC8                     SSP1ADD         equ	4040	;# 
  2421   000FC8                     SSPADD          equ	4040	;# 
  2422   000FC9                     SSP1BUF         equ	4041	;# 
  2423   000FC9                     SSPBUF          equ	4041	;# 
  2424   000FCA                     T2CON           equ	4042	;# 
  2425   000FCB                     PR2             equ	4043	;# 
  2426   000FCC                     TMR2            equ	4044	;# 
  2427   000FCD                     T1CON           equ	4045	;# 
  2428   000FCE                     TMR1            equ	4046	;# 
  2429   000FCE                     TMR1L           equ	4046	;# 
  2430   000FCF                     TMR1H           equ	4047	;# 
  2431   000FD0                     RCON            equ	4048	;# 
  2432   000FD1                     WDTCON          equ	4049	;# 
  2433   000FD2                     ECON1           equ	4050	;# 
  2434   000FD3                     OSCCON          equ	4051	;# 
  2435   000FD5                     T0CON           equ	4053	;# 
  2436   000FD6                     TMR0            equ	4054	;# 
  2437   000FD6                     TMR0L           equ	4054	;# 
  2438   000FD7                     TMR0H           equ	4055	;# 
  2439   000FD8                     STATUS          equ	4056	;# 
  2440   000FD9                     FSR2            equ	4057	;# 
  2441   000FD9                     FSR2L           equ	4057	;# 
  2442   000FDA                     FSR2H           equ	4058	;# 
  2443   000FDB                     PLUSW2          equ	4059	;# 
  2444   000FDC                     PREINC2         equ	4060	;# 
  2445   000FDD                     POSTDEC2        equ	4061	;# 
  2446   000FDE                     POSTINC2        equ	4062	;# 
  2447   000FDF                     INDF2           equ	4063	;# 
  2448   000FE0                     BSR             equ	4064	;# 
  2449   000FE1                     FSR1            equ	4065	;# 
  2450   000FE1                     FSR1L           equ	4065	;# 
  2451   000FE2                     FSR1H           equ	4066	;# 
  2452   000FE3                     PLUSW1          equ	4067	;# 
  2453   000FE4                     PREINC1         equ	4068	;# 
  2454   000FE5                     POSTDEC1        equ	4069	;# 
  2455   000FE6                     POSTINC1        equ	4070	;# 
  2456   000FE7                     INDF1           equ	4071	;# 
  2457   000FE8                     WREG            equ	4072	;# 
  2458   000FE9                     FSR0            equ	4073	;# 
  2459   000FE9                     FSR0L           equ	4073	;# 
  2460   000FEA                     FSR0H           equ	4074	;# 
  2461   000FEB                     PLUSW0          equ	4075	;# 
  2462   000FEC                     PREINC0         equ	4076	;# 
  2463   000FED                     POSTDEC0        equ	4077	;# 
  2464   000FEE                     POSTINC0        equ	4078	;# 
  2465   000FEF                     INDF0           equ	4079	;# 
  2466   000FF0                     INTCON3         equ	4080	;# 
  2467   000FF1                     INTCON2         equ	4081	;# 
  2468   000FF2                     INTCON          equ	4082	;# 
  2469   000FF3                     PROD            equ	4083	;# 
  2470   000FF3                     PRODL           equ	4083	;# 
  2471   000FF4                     PRODH           equ	4084	;# 
  2472   000FF5                     TABLAT          equ	4085	;# 
  2473   000FF6                     TBLPTR          equ	4086	;# 
  2474   000FF6                     TBLPTRL         equ	4086	;# 
  2475   000FF7                     TBLPTRH         equ	4087	;# 
  2476   000FF8                     TBLPTRU         equ	4088	;# 
  2477   000FF9                     PCLAT           equ	4089	;# 
  2478   000FF9                     PC              equ	4089	;# 
  2479   000FF9                     PCL             equ	4089	;# 
  2480   000FFA                     PCLATH          equ	4090	;# 
  2481   000FFB                     PCLATU          equ	4091	;# 
  2482   000FFC                     STKPTR          equ	4092	;# 
  2483   000FFD                     TOS             equ	4093	;# 
  2484   000FFD                     TOSL            equ	4093	;# 
  2485   000FFE                     TOSH            equ	4094	;# 
  2486   000FFF                     TOSU            equ	4095	;# 
  2487   000E80                     MAADR5          equ	3712	;# 
  2488   000E81                     MAADR6          equ	3713	;# 
  2489   000E82                     MAADR3          equ	3714	;# 
  2490   000E83                     MAADR4          equ	3715	;# 
  2491   000E84                     MAADR1          equ	3716	;# 
  2492   000E85                     MAADR2          equ	3717	;# 
  2493   000E8A                     MISTAT          equ	3722	;# 
  2494   000E97                     EFLOCON         equ	3735	;# 
  2495   000E98                     EPAUS           equ	3736	;# 
  2496   000E98                     EPAUSL          equ	3736	;# 
  2497   000E99                     EPAUSH          equ	3737	;# 
  2498   000EA0                     MACON1          equ	3744	;# 
  2499   000EA2                     MACON3          equ	3746	;# 
  2500   000EA3                     MACON4          equ	3747	;# 
  2501   000EA4                     MABBIPG         equ	3748	;# 
  2502   000EA6                     MAIPG           equ	3750	;# 
  2503   000EA6                     MAIPGL          equ	3750	;# 
  2504   000EA7                     MAIPGH          equ	3751	;# 
  2505   000EAA                     MAMXFL          equ	3754	;# 
  2506   000EAA                     MAMXFLL         equ	3754	;# 
  2507   000EAB                     MAMXFLH         equ	3755	;# 
  2508   000EB2                     MICMD           equ	3762	;# 
  2509   000EB4                     MIREGADR        equ	3764	;# 
  2510   000EB6                     MIWR            equ	3766	;# 
  2511   000EB6                     MIWRL           equ	3766	;# 
  2512   000EB7                     MIWRH           equ	3767	;# 
  2513   000EB8                     MIRD            equ	3768	;# 
  2514   000EB8                     MIRDL           equ	3768	;# 
  2515   000EB9                     MIRDH           equ	3769	;# 
  2516   000EC0                     EHT0            equ	3776	;# 
  2517   000EC1                     EHT1            equ	3777	;# 
  2518   000EC2                     EHT2            equ	3778	;# 
  2519   000EC3                     EHT3            equ	3779	;# 
  2520   000EC4                     EHT4            equ	3780	;# 
  2521   000EC5                     EHT5            equ	3781	;# 
  2522   000EC6                     EHT6            equ	3782	;# 
  2523   000EC7                     EHT7            equ	3783	;# 
  2524   000EC8                     EPMM0           equ	3784	;# 
  2525   000EC9                     EPMM1           equ	3785	;# 
  2526   000ECA                     EPMM2           equ	3786	;# 
  2527   000ECB                     EPMM3           equ	3787	;# 
  2528   000ECC                     EPMM4           equ	3788	;# 
  2529   000ECD                     EPMM5           equ	3789	;# 
  2530   000ECE                     EPMM6           equ	3790	;# 
  2531   000ECF                     EPMM7           equ	3791	;# 
  2532   000ED0                     EPMCS           equ	3792	;# 
  2533   000ED0                     EPMCSL          equ	3792	;# 
  2534   000ED1                     EPMCSH          equ	3793	;# 
  2535   000ED4                     EPMO            equ	3796	;# 
  2536   000ED4                     EPMOL           equ	3796	;# 
  2537   000ED5                     EPMOH           equ	3797	;# 
  2538   000ED8                     ERXFCON         equ	3800	;# 
  2539   000ED9                     EPKTCNT         equ	3801	;# 
  2540   000EE2                     EWRPT           equ	3810	;# 
  2541   000EE2                     EWRPTL          equ	3810	;# 
  2542   000EE3                     EWRPTH          equ	3811	;# 
  2543   000EE4                     ETXST           equ	3812	;# 
  2544   000EE4                     ETXSTL          equ	3812	;# 
  2545   000EE5                     ETXSTH          equ	3813	;# 
  2546   000EE6                     ETXND           equ	3814	;# 
  2547   000EE6                     ETXNDL          equ	3814	;# 
  2548   000EE7                     ETXNDH          equ	3815	;# 
  2549   000EE8                     ERXST           equ	3816	;# 
  2550   000EE8                     ERXSTL          equ	3816	;# 
  2551   000EE9                     ERXSTH          equ	3817	;# 
  2552   000EEA                     ERXND           equ	3818	;# 
  2553   000EEA                     ERXNDL          equ	3818	;# 
  2554   000EEB                     ERXNDH          equ	3819	;# 
  2555   000EEC                     ERXRDPT         equ	3820	;# 
  2556   000EEC                     ERXRDPTL        equ	3820	;# 
  2557   000EED                     ERXRDPTH        equ	3821	;# 
  2558   000EEE                     ERXWRPT         equ	3822	;# 
  2559   000EEE                     ERXWRPTL        equ	3822	;# 
  2560   000EEF                     ERXWRPTH        equ	3823	;# 
  2561   000EF0                     EDMAST          equ	3824	;# 
  2562   000EF0                     EDMASTL         equ	3824	;# 
  2563   000EF1                     EDMASTH         equ	3825	;# 
  2564   000EF2                     EDMAND          equ	3826	;# 
  2565   000EF2                     EDMANDL         equ	3826	;# 
  2566   000EF3                     EDMANDH         equ	3827	;# 
  2567   000EF4                     EDMADST         equ	3828	;# 
  2568   000EF4                     EDMADSTL        equ	3828	;# 
  2569   000EF5                     EDMADSTH        equ	3829	;# 
  2570   000EF6                     EDMACS          equ	3830	;# 
  2571   000EF6                     EDMACSL         equ	3830	;# 
  2572   000EF7                     EDMACSH         equ	3831	;# 
  2573   000EFB                     EIE             equ	3835	;# 
  2574   000EFD                     ESTAT           equ	3837	;# 
  2575   000EFE                     ECON2           equ	3838	;# 
  2576   000F60                     EIR             equ	3936	;# 
  2577   000F61                     EDATA           equ	3937	;# 
  2578   000F62                     SSP2CON2        equ	3938	;# 
  2579   000F63                     SSP2CON1        equ	3939	;# 
  2580   000F64                     SSP2STAT        equ	3940	;# 
  2581   000F65                     SSP2ADD         equ	3941	;# 
  2582   000F66                     SSP2BUF         equ	3942	;# 
  2583   000F67                     ECCP2DEL        equ	3943	;# 
  2584   000F68                     ECCP2AS         equ	3944	;# 
  2585   000F69                     ECCP3DEL        equ	3945	;# 
  2586   000F6A                     ECCP3AS         equ	3946	;# 
  2587   000F6B                     RCSTA2          equ	3947	;# 
  2588   000F6C                     TXSTA2          equ	3948	;# 
  2589   000F6D                     TXREG2          equ	3949	;# 
  2590   000F6E                     RCREG2          equ	3950	;# 
  2591   000F6F                     SPBRG2          equ	3951	;# 
  2592   000F70                     CCP5CON         equ	3952	;# 
  2593   000F71                     CCPR5           equ	3953	;# 
  2594   000F71                     CCPR5L          equ	3953	;# 
  2595   000F72                     CCPR5H          equ	3954	;# 
  2596   000F73                     CCP4CON         equ	3955	;# 
  2597   000F74                     CCPR4           equ	3956	;# 
  2598   000F74                     CCPR4L          equ	3956	;# 
  2599   000F75                     CCPR4H          equ	3957	;# 
  2600   000F76                     T4CON           equ	3958	;# 
  2601   000F77                     PR4             equ	3959	;# 
  2602   000F78                     TMR4            equ	3960	;# 
  2603   000F79                     ECCP1DEL        equ	3961	;# 
  2604   000F7A                     ERDPT           equ	3962	;# 
  2605   000F7A                     ERDPTL          equ	3962	;# 
  2606   000F7B                     ERDPTH          equ	3963	;# 
  2607   000F7C                     BAUDCON2        equ	3964	;# 
  2608   000F7C                     BAUDCTL2        equ	3964	;# 
  2609   000F7D                     SPBRGH2         equ	3965	;# 
  2610   000F7E                     BAUDCON1        equ	3966	;# 
  2611   000F7E                     BAUDCON         equ	3966	;# 
  2612   000F7E                     BAUDCTL         equ	3966	;# 
  2613   000F7E                     BAUDCTL1        equ	3966	;# 
  2614   000F7F                     SPBRGH1         equ	3967	;# 
  2615   000F7F                     SPBRGH          equ	3967	;# 
  2616   000F80                     PORTA           equ	3968	;# 
  2617   000F81                     PORTB           equ	3969	;# 
  2618   000F82                     PORTC           equ	3970	;# 
  2619   000F83                     PORTD           equ	3971	;# 
  2620   000F84                     PORTE           equ	3972	;# 
  2621   000F85                     PORTF           equ	3973	;# 
  2622   000F86                     PORTG           equ	3974	;# 
  2623   000F87                     PORTH           equ	3975	;# 
  2624   000F88                     PORTJ           equ	3976	;# 
  2625   000F89                     LATA            equ	3977	;# 
  2626   000F8A                     LATB            equ	3978	;# 
  2627   000F8B                     LATC            equ	3979	;# 
  2628   000F8C                     LATD            equ	3980	;# 
  2629   000F8D                     LATE            equ	3981	;# 
  2630   000F8E                     LATF            equ	3982	;# 
  2631   000F8F                     LATG            equ	3983	;# 
  2632   000F90                     LATH            equ	3984	;# 
  2633   000F91                     LATJ            equ	3985	;# 
  2634   000F92                     TRISA           equ	3986	;# 
  2635   000F92                     DDRA            equ	3986	;# 
  2636   000F93                     TRISB           equ	3987	;# 
  2637   000F93                     DDRB            equ	3987	;# 
  2638   000F94                     TRISC           equ	3988	;# 
  2639   000F94                     DDRC            equ	3988	;# 
  2640   000F95                     TRISD           equ	3989	;# 
  2641   000F95                     DDRD            equ	3989	;# 
  2642   000F96                     TRISE           equ	3990	;# 
  2643   000F96                     DDRE            equ	3990	;# 
  2644   000F97                     TRISF           equ	3991	;# 
  2645   000F97                     DDRF            equ	3991	;# 
  2646   000F98                     TRISG           equ	3992	;# 
  2647   000F98                     DDRG            equ	3992	;# 
  2648   000F99                     TRISH           equ	3993	;# 
  2649   000F99                     DDRH            equ	3993	;# 
  2650   000F9A                     TRISJ           equ	3994	;# 
  2651   000F9A                     DDRJ            equ	3994	;# 
  2652   000F9B                     OSCTUNE         equ	3995	;# 
  2653   000F9C                     MEMCON          equ	3996	;# 
  2654   000F9D                     PIE1            equ	3997	;# 
  2655   000F9E                     PIR1            equ	3998	;# 
  2656   000F9F                     IPR1            equ	3999	;# 
  2657   000FA0                     PIE2            equ	4000	;# 
  2658   000FA1                     PIR2            equ	4001	;# 
  2659   000FA2                     IPR2            equ	4002	;# 
  2660   000FA3                     PIE3            equ	4003	;# 
  2661   000FA4                     PIR3            equ	4004	;# 
  2662   000FA5                     IPR3            equ	4005	;# 
  2663   000FA6                     EECON1          equ	4006	;# 
  2664   000FA7                     EECON2          equ	4007	;# 
  2665   000FAB                     RCSTA1          equ	4011	;# 
  2666   000FAB                     RCSTA           equ	4011	;# 
  2667   000FAC                     TXSTA1          equ	4012	;# 
  2668   000FAC                     TXSTA           equ	4012	;# 
  2669   000FAD                     TXREG1          equ	4013	;# 
  2670   000FAD                     TXREG           equ	4013	;# 
  2671   000FAE                     RCREG1          equ	4014	;# 
  2672   000FAE                     RCREG           equ	4014	;# 
  2673   000FAF                     SPBRG1          equ	4015	;# 
  2674   000FAF                     SPBRG           equ	4015	;# 
  2675   000FB0                     PSPCON          equ	4016	;# 
  2676   000FB1                     T3CON           equ	4017	;# 
  2677   000FB2                     TMR3            equ	4018	;# 
  2678   000FB2                     TMR3L           equ	4018	;# 
  2679   000FB3                     TMR3H           equ	4019	;# 
  2680   000FB4                     CMCON           equ	4020	;# 
  2681   000FB5                     CVRCON          equ	4021	;# 
  2682   000FB6                     ECCP1AS         equ	4022	;# 
  2683   000FB7                     CCP3CON         equ	4023	;# 
  2684   000FB7                     ECCP3CON        equ	4023	;# 
  2685   000FB8                     CCPR3           equ	4024	;# 
  2686   000FB8                     CCPR3L          equ	4024	;# 
  2687   000FB9                     CCPR3H          equ	4025	;# 
  2688   000FBA                     CCP2CON         equ	4026	;# 
  2689   000FBA                     ECCP2CON        equ	4026	;# 
  2690   000FBB                     CCPR2           equ	4027	;# 
  2691   000FBB                     CCPR2L          equ	4027	;# 
  2692   000FBC                     CCPR2H          equ	4028	;# 
  2693   000FBD                     CCP1CON         equ	4029	;# 
  2694   000FBD                     ECCP1CON        equ	4029	;# 
  2695   000FBE                     CCPR1           equ	4030	;# 
  2696   000FBE                     CCPR1L          equ	4030	;# 
  2697   000FBF                     CCPR1H          equ	4031	;# 
  2698   000FC0                     ADCON2          equ	4032	;# 
  2699   000FC1                     ADCON1          equ	4033	;# 
  2700   000FC2                     ADCON0          equ	4034	;# 
  2701   000FC3                     ADRES           equ	4035	;# 
  2702   000FC3                     ADRESL          equ	4035	;# 
  2703   000FC4                     ADRESH          equ	4036	;# 
  2704   000FC5                     SSP1CON2        equ	4037	;# 
  2705   000FC5                     SSPCON2         equ	4037	;# 
  2706   000FC6                     SSP1CON1        equ	4038	;# 
  2707   000FC6                     SSPCON1         equ	4038	;# 
  2708   000FC7                     SSP1STAT        equ	4039	;# 
  2709   000FC7                     SSPSTAT         equ	4039	;# 
  2710   000FC8                     SSP1ADD         equ	4040	;# 
  2711   000FC8                     SSPADD          equ	4040	;# 
  2712   000FC9                     SSP1BUF         equ	4041	;# 
  2713   000FC9                     SSPBUF          equ	4041	;# 
  2714   000FCA                     T2CON           equ	4042	;# 
  2715   000FCB                     PR2             equ	4043	;# 
  2716   000FCC                     TMR2            equ	4044	;# 
  2717   000FCD                     T1CON           equ	4045	;# 
  2718   000FCE                     TMR1            equ	4046	;# 
  2719   000FCE                     TMR1L           equ	4046	;# 
  2720   000FCF                     TMR1H           equ	4047	;# 
  2721   000FD0                     RCON            equ	4048	;# 
  2722   000FD1                     WDTCON          equ	4049	;# 
  2723   000FD2                     ECON1           equ	4050	;# 
  2724   000FD3                     OSCCON          equ	4051	;# 
  2725   000FD5                     T0CON           equ	4053	;# 
  2726   000FD6                     TMR0            equ	4054	;# 
  2727   000FD6                     TMR0L           equ	4054	;# 
  2728   000FD7                     TMR0H           equ	4055	;# 
  2729   000FD8                     STATUS          equ	4056	;# 
  2730   000FD9                     FSR2            equ	4057	;# 
  2731   000FD9                     FSR2L           equ	4057	;# 
  2732   000FDA                     FSR2H           equ	4058	;# 
  2733   000FDB                     PLUSW2          equ	4059	;# 
  2734   000FDC                     PREINC2         equ	4060	;# 
  2735   000FDD                     POSTDEC2        equ	4061	;# 
  2736   000FDE                     POSTINC2        equ	4062	;# 
  2737   000FDF                     INDF2           equ	4063	;# 
  2738   000FE0                     BSR             equ	4064	;# 
  2739   000FE1                     FSR1            equ	4065	;# 
  2740   000FE1                     FSR1L           equ	4065	;# 
  2741   000FE2                     FSR1H           equ	4066	;# 
  2742   000FE3                     PLUSW1          equ	4067	;# 
  2743   000FE4                     PREINC1         equ	4068	;# 
  2744   000FE5                     POSTDEC1        equ	4069	;# 
  2745   000FE6                     POSTINC1        equ	4070	;# 
  2746   000FE7                     INDF1           equ	4071	;# 
  2747   000FE8                     WREG            equ	4072	;# 
  2748   000FE9                     FSR0            equ	4073	;# 
  2749   000FE9                     FSR0L           equ	4073	;# 
  2750   000FEA                     FSR0H           equ	4074	;# 
  2751   000FEB                     PLUSW0          equ	4075	;# 
  2752   000FEC                     PREINC0         equ	4076	;# 
  2753   000FED                     POSTDEC0        equ	4077	;# 
  2754   000FEE                     POSTINC0        equ	4078	;# 
  2755   000FEF                     INDF0           equ	4079	;# 
  2756   000FF0                     INTCON3         equ	4080	;# 
  2757   000FF1                     INTCON2         equ	4081	;# 
  2758   000FF2                     INTCON          equ	4082	;# 
  2759   000FF3                     PROD            equ	4083	;# 
  2760   000FF3                     PRODL           equ	4083	;# 
  2761   000FF4                     PRODH           equ	4084	;# 
  2762   000FF5                     TABLAT          equ	4085	;# 
  2763   000FF6                     TBLPTR          equ	4086	;# 
  2764   000FF6                     TBLPTRL         equ	4086	;# 
  2765   000FF7                     TBLPTRH         equ	4087	;# 
  2766   000FF8                     TBLPTRU         equ	4088	;# 
  2767   000FF9                     PCLAT           equ	4089	;# 
  2768   000FF9                     PC              equ	4089	;# 
  2769   000FF9                     PCL             equ	4089	;# 
  2770   000FFA                     PCLATH          equ	4090	;# 
  2771   000FFB                     PCLATU          equ	4091	;# 
  2772   000FFC                     STKPTR          equ	4092	;# 
  2773   000FFD                     TOS             equ	4093	;# 
  2774   000FFD                     TOSL            equ	4093	;# 
  2775   000FFE                     TOSH            equ	4094	;# 
  2776   000FFF                     TOSU            equ	4095	;# 
  2777   000E80                     MAADR5          equ	3712	;# 
  2778   000E81                     MAADR6          equ	3713	;# 
  2779   000E82                     MAADR3          equ	3714	;# 
  2780   000E83                     MAADR4          equ	3715	;# 
  2781   000E84                     MAADR1          equ	3716	;# 
  2782   000E85                     MAADR2          equ	3717	;# 
  2783   000E8A                     MISTAT          equ	3722	;# 
  2784   000E97                     EFLOCON         equ	3735	;# 
  2785   000E98                     EPAUS           equ	3736	;# 
  2786   000E98                     EPAUSL          equ	3736	;# 
  2787   000E99                     EPAUSH          equ	3737	;# 
  2788   000EA0                     MACON1          equ	3744	;# 
  2789   000EA2                     MACON3          equ	3746	;# 
  2790   000EA3                     MACON4          equ	3747	;# 
  2791   000EA4                     MABBIPG         equ	3748	;# 
  2792   000EA6                     MAIPG           equ	3750	;# 
  2793   000EA6                     MAIPGL          equ	3750	;# 
  2794   000EA7                     MAIPGH          equ	3751	;# 
  2795   000EAA                     MAMXFL          equ	3754	;# 
  2796   000EAA                     MAMXFLL         equ	3754	;# 
  2797   000EAB                     MAMXFLH         equ	3755	;# 
  2798   000EB2                     MICMD           equ	3762	;# 
  2799   000EB4                     MIREGADR        equ	3764	;# 
  2800   000EB6                     MIWR            equ	3766	;# 
  2801   000EB6                     MIWRL           equ	3766	;# 
  2802   000EB7                     MIWRH           equ	3767	;# 
  2803   000EB8                     MIRD            equ	3768	;# 
  2804   000EB8                     MIRDL           equ	3768	;# 
  2805   000EB9                     MIRDH           equ	3769	;# 
  2806   000EC0                     EHT0            equ	3776	;# 
  2807   000EC1                     EHT1            equ	3777	;# 
  2808   000EC2                     EHT2            equ	3778	;# 
  2809   000EC3                     EHT3            equ	3779	;# 
  2810   000EC4                     EHT4            equ	3780	;# 
  2811   000EC5                     EHT5            equ	3781	;# 
  2812   000EC6                     EHT6            equ	3782	;# 
  2813   000EC7                     EHT7            equ	3783	;# 
  2814   000EC8                     EPMM0           equ	3784	;# 
  2815   000EC9                     EPMM1           equ	3785	;# 
  2816   000ECA                     EPMM2           equ	3786	;# 
  2817   000ECB                     EPMM3           equ	3787	;# 
  2818   000ECC                     EPMM4           equ	3788	;# 
  2819   000ECD                     EPMM5           equ	3789	;# 
  2820   000ECE                     EPMM6           equ	3790	;# 
  2821   000ECF                     EPMM7           equ	3791	;# 
  2822   000ED0                     EPMCS           equ	3792	;# 
  2823   000ED0                     EPMCSL          equ	3792	;# 
  2824   000ED1                     EPMCSH          equ	3793	;# 
  2825   000ED4                     EPMO            equ	3796	;# 
  2826   000ED4                     EPMOL           equ	3796	;# 
  2827   000ED5                     EPMOH           equ	3797	;# 
  2828   000ED8                     ERXFCON         equ	3800	;# 
  2829   000ED9                     EPKTCNT         equ	3801	;# 
  2830   000EE2                     EWRPT           equ	3810	;# 
  2831   000EE2                     EWRPTL          equ	3810	;# 
  2832   000EE3                     EWRPTH          equ	3811	;# 
  2833   000EE4                     ETXST           equ	3812	;# 
  2834   000EE4                     ETXSTL          equ	3812	;# 
  2835   000EE5                     ETXSTH          equ	3813	;# 
  2836   000EE6                     ETXND           equ	3814	;# 
  2837   000EE6                     ETXNDL          equ	3814	;# 
  2838   000EE7                     ETXNDH          equ	3815	;# 
  2839   000EE8                     ERXST           equ	3816	;# 
  2840   000EE8                     ERXSTL          equ	3816	;# 
  2841   000EE9                     ERXSTH          equ	3817	;# 
  2842   000EEA                     ERXND           equ	3818	;# 
  2843   000EEA                     ERXNDL          equ	3818	;# 
  2844   000EEB                     ERXNDH          equ	3819	;# 
  2845   000EEC                     ERXRDPT         equ	3820	;# 
  2846   000EEC                     ERXRDPTL        equ	3820	;# 
  2847   000EED                     ERXRDPTH        equ	3821	;# 
  2848   000EEE                     ERXWRPT         equ	3822	;# 
  2849   000EEE                     ERXWRPTL        equ	3822	;# 
  2850   000EEF                     ERXWRPTH        equ	3823	;# 
  2851   000EF0                     EDMAST          equ	3824	;# 
  2852   000EF0                     EDMASTL         equ	3824	;# 
  2853   000EF1                     EDMASTH         equ	3825	;# 
  2854   000EF2                     EDMAND          equ	3826	;# 
  2855   000EF2                     EDMANDL         equ	3826	;# 
  2856   000EF3                     EDMANDH         equ	3827	;# 
  2857   000EF4                     EDMADST         equ	3828	;# 
  2858   000EF4                     EDMADSTL        equ	3828	;# 
  2859   000EF5                     EDMADSTH        equ	3829	;# 
  2860   000EF6                     EDMACS          equ	3830	;# 
  2861   000EF6                     EDMACSL         equ	3830	;# 
  2862   000EF7                     EDMACSH         equ	3831	;# 
  2863   000EFB                     EIE             equ	3835	;# 
  2864   000EFD                     ESTAT           equ	3837	;# 
  2865   000EFE                     ECON2           equ	3838	;# 
  2866   000F60                     EIR             equ	3936	;# 
  2867   000F61                     EDATA           equ	3937	;# 
  2868   000F62                     SSP2CON2        equ	3938	;# 
  2869   000F63                     SSP2CON1        equ	3939	;# 
  2870   000F64                     SSP2STAT        equ	3940	;# 
  2871   000F65                     SSP2ADD         equ	3941	;# 
  2872   000F66                     SSP2BUF         equ	3942	;# 
  2873   000F67                     ECCP2DEL        equ	3943	;# 
  2874   000F68                     ECCP2AS         equ	3944	;# 
  2875   000F69                     ECCP3DEL        equ	3945	;# 
  2876   000F6A                     ECCP3AS         equ	3946	;# 
  2877   000F6B                     RCSTA2          equ	3947	;# 
  2878   000F6C                     TXSTA2          equ	3948	;# 
  2879   000F6D                     TXREG2          equ	3949	;# 
  2880   000F6E                     RCREG2          equ	3950	;# 
  2881   000F6F                     SPBRG2          equ	3951	;# 
  2882   000F70                     CCP5CON         equ	3952	;# 
  2883   000F71                     CCPR5           equ	3953	;# 
  2884   000F71                     CCPR5L          equ	3953	;# 
  2885   000F72                     CCPR5H          equ	3954	;# 
  2886   000F73                     CCP4CON         equ	3955	;# 
  2887   000F74                     CCPR4           equ	3956	;# 
  2888   000F74                     CCPR4L          equ	3956	;# 
  2889   000F75                     CCPR4H          equ	3957	;# 
  2890   000F76                     T4CON           equ	3958	;# 
  2891   000F77                     PR4             equ	3959	;# 
  2892   000F78                     TMR4            equ	3960	;# 
  2893   000F79                     ECCP1DEL        equ	3961	;# 
  2894   000F7A                     ERDPT           equ	3962	;# 
  2895   000F7A                     ERDPTL          equ	3962	;# 
  2896   000F7B                     ERDPTH          equ	3963	;# 
  2897   000F7C                     BAUDCON2        equ	3964	;# 
  2898   000F7C                     BAUDCTL2        equ	3964	;# 
  2899   000F7D                     SPBRGH2         equ	3965	;# 
  2900   000F7E                     BAUDCON1        equ	3966	;# 
  2901   000F7E                     BAUDCON         equ	3966	;# 
  2902   000F7E                     BAUDCTL         equ	3966	;# 
  2903   000F7E                     BAUDCTL1        equ	3966	;# 
  2904   000F7F                     SPBRGH1         equ	3967	;# 
  2905   000F7F                     SPBRGH          equ	3967	;# 
  2906   000F80                     PORTA           equ	3968	;# 
  2907   000F81                     PORTB           equ	3969	;# 
  2908   000F82                     PORTC           equ	3970	;# 
  2909   000F83                     PORTD           equ	3971	;# 
  2910   000F84                     PORTE           equ	3972	;# 
  2911   000F85                     PORTF           equ	3973	;# 
  2912   000F86                     PORTG           equ	3974	;# 
  2913   000F87                     PORTH           equ	3975	;# 
  2914   000F88                     PORTJ           equ	3976	;# 
  2915   000F89                     LATA            equ	3977	;# 
  2916   000F8A                     LATB            equ	3978	;# 
  2917   000F8B                     LATC            equ	3979	;# 
  2918   000F8C                     LATD            equ	3980	;# 
  2919   000F8D                     LATE            equ	3981	;# 
  2920   000F8E                     LATF            equ	3982	;# 
  2921   000F8F                     LATG            equ	3983	;# 
  2922   000F90                     LATH            equ	3984	;# 
  2923   000F91                     LATJ            equ	3985	;# 
  2924   000F92                     TRISA           equ	3986	;# 
  2925   000F92                     DDRA            equ	3986	;# 
  2926   000F93                     TRISB           equ	3987	;# 
  2927   000F93                     DDRB            equ	3987	;# 
  2928   000F94                     TRISC           equ	3988	;# 
  2929   000F94                     DDRC            equ	3988	;# 
  2930   000F95                     TRISD           equ	3989	;# 
  2931   000F95                     DDRD            equ	3989	;# 
  2932   000F96                     TRISE           equ	3990	;# 
  2933   000F96                     DDRE            equ	3990	;# 
  2934   000F97                     TRISF           equ	3991	;# 
  2935   000F97                     DDRF            equ	3991	;# 
  2936   000F98                     TRISG           equ	3992	;# 
  2937   000F98                     DDRG            equ	3992	;# 
  2938   000F99                     TRISH           equ	3993	;# 
  2939   000F99                     DDRH            equ	3993	;# 
  2940   000F9A                     TRISJ           equ	3994	;# 
  2941   000F9A                     DDRJ            equ	3994	;# 
  2942   000F9B                     OSCTUNE         equ	3995	;# 
  2943   000F9C                     MEMCON          equ	3996	;# 
  2944   000F9D                     PIE1            equ	3997	;# 
  2945   000F9E                     PIR1            equ	3998	;# 
  2946   000F9F                     IPR1            equ	3999	;# 
  2947   000FA0                     PIE2            equ	4000	;# 
  2948   000FA1                     PIR2            equ	4001	;# 
  2949   000FA2                     IPR2            equ	4002	;# 
  2950   000FA3                     PIE3            equ	4003	;# 
  2951   000FA4                     PIR3            equ	4004	;# 
  2952   000FA5                     IPR3            equ	4005	;# 
  2953   000FA6                     EECON1          equ	4006	;# 
  2954   000FA7                     EECON2          equ	4007	;# 
  2955   000FAB                     RCSTA1          equ	4011	;# 
  2956   000FAB                     RCSTA           equ	4011	;# 
  2957   000FAC                     TXSTA1          equ	4012	;# 
  2958   000FAC                     TXSTA           equ	4012	;# 
  2959   000FAD                     TXREG1          equ	4013	;# 
  2960   000FAD                     TXREG           equ	4013	;# 
  2961   000FAE                     RCREG1          equ	4014	;# 
  2962   000FAE                     RCREG           equ	4014	;# 
  2963   000FAF                     SPBRG1          equ	4015	;# 
  2964   000FAF                     SPBRG           equ	4015	;# 
  2965   000FB0                     PSPCON          equ	4016	;# 
  2966   000FB1                     T3CON           equ	4017	;# 
  2967   000FB2                     TMR3            equ	4018	;# 
  2968   000FB2                     TMR3L           equ	4018	;# 
  2969   000FB3                     TMR3H           equ	4019	;# 
  2970   000FB4                     CMCON           equ	4020	;# 
  2971   000FB5                     CVRCON          equ	4021	;# 
  2972   000FB6                     ECCP1AS         equ	4022	;# 
  2973   000FB7                     CCP3CON         equ	4023	;# 
  2974   000FB7                     ECCP3CON        equ	4023	;# 
  2975   000FB8                     CCPR3           equ	4024	;# 
  2976   000FB8                     CCPR3L          equ	4024	;# 
  2977   000FB9                     CCPR3H          equ	4025	;# 
  2978   000FBA                     CCP2CON         equ	4026	;# 
  2979   000FBA                     ECCP2CON        equ	4026	;# 
  2980   000FBB                     CCPR2           equ	4027	;# 
  2981   000FBB                     CCPR2L          equ	4027	;# 
  2982   000FBC                     CCPR2H          equ	4028	;# 
  2983   000FBD                     CCP1CON         equ	4029	;# 
  2984   000FBD                     ECCP1CON        equ	4029	;# 
  2985   000FBE                     CCPR1           equ	4030	;# 
  2986   000FBE                     CCPR1L          equ	4030	;# 
  2987   000FBF                     CCPR1H          equ	4031	;# 
  2988   000FC0                     ADCON2          equ	4032	;# 
  2989   000FC1                     ADCON1          equ	4033	;# 
  2990   000FC2                     ADCON0          equ	4034	;# 
  2991   000FC3                     ADRES           equ	4035	;# 
  2992   000FC3                     ADRESL          equ	4035	;# 
  2993   000FC4                     ADRESH          equ	4036	;# 
  2994   000FC5                     SSP1CON2        equ	4037	;# 
  2995   000FC5                     SSPCON2         equ	4037	;# 
  2996   000FC6                     SSP1CON1        equ	4038	;# 
  2997   000FC6                     SSPCON1         equ	4038	;# 
  2998   000FC7                     SSP1STAT        equ	4039	;# 
  2999   000FC7                     SSPSTAT         equ	4039	;# 
  3000   000FC8                     SSP1ADD         equ	4040	;# 
  3001   000FC8                     SSPADD          equ	4040	;# 
  3002   000FC9                     SSP1BUF         equ	4041	;# 
  3003   000FC9                     SSPBUF          equ	4041	;# 
  3004   000FCA                     T2CON           equ	4042	;# 
  3005   000FCB                     PR2             equ	4043	;# 
  3006   000FCC                     TMR2            equ	4044	;# 
  3007   000FCD                     T1CON           equ	4045	;# 
  3008   000FCE                     TMR1            equ	4046	;# 
  3009   000FCE                     TMR1L           equ	4046	;# 
  3010   000FCF                     TMR1H           equ	4047	;# 
  3011   000FD0                     RCON            equ	4048	;# 
  3012   000FD1                     WDTCON          equ	4049	;# 
  3013   000FD2                     ECON1           equ	4050	;# 
  3014   000FD3                     OSCCON          equ	4051	;# 
  3015   000FD5                     T0CON           equ	4053	;# 
  3016   000FD6                     TMR0            equ	4054	;# 
  3017   000FD6                     TMR0L           equ	4054	;# 
  3018   000FD7                     TMR0H           equ	4055	;# 
  3019   000FD8                     STATUS          equ	4056	;# 
  3020   000FD9                     FSR2            equ	4057	;# 
  3021   000FD9                     FSR2L           equ	4057	;# 
  3022   000FDA                     FSR2H           equ	4058	;# 
  3023   000FDB                     PLUSW2          equ	4059	;# 
  3024   000FDC                     PREINC2         equ	4060	;# 
  3025   000FDD                     POSTDEC2        equ	4061	;# 
  3026   000FDE                     POSTINC2        equ	4062	;# 
  3027   000FDF                     INDF2           equ	4063	;# 
  3028   000FE0                     BSR             equ	4064	;# 
  3029   000FE1                     FSR1            equ	4065	;# 
  3030   000FE1                     FSR1L           equ	4065	;# 
  3031   000FE2                     FSR1H           equ	4066	;# 
  3032   000FE3                     PLUSW1          equ	4067	;# 
  3033   000FE4                     PREINC1         equ	4068	;# 
  3034   000FE5                     POSTDEC1        equ	4069	;# 
  3035   000FE6                     POSTINC1        equ	4070	;# 
  3036   000FE7                     INDF1           equ	4071	;# 
  3037   000FE8                     WREG            equ	4072	;# 
  3038   000FE9                     FSR0            equ	4073	;# 
  3039   000FE9                     FSR0L           equ	4073	;# 
  3040   000FEA                     FSR0H           equ	4074	;# 
  3041   000FEB                     PLUSW0          equ	4075	;# 
  3042   000FEC                     PREINC0         equ	4076	;# 
  3043   000FED                     POSTDEC0        equ	4077	;# 
  3044   000FEE                     POSTINC0        equ	4078	;# 
  3045   000FEF                     INDF0           equ	4079	;# 
  3046   000FF0                     INTCON3         equ	4080	;# 
  3047   000FF1                     INTCON2         equ	4081	;# 
  3048   000FF2                     INTCON          equ	4082	;# 
  3049   000FF3                     PROD            equ	4083	;# 
  3050   000FF3                     PRODL           equ	4083	;# 
  3051   000FF4                     PRODH           equ	4084	;# 
  3052   000FF5                     TABLAT          equ	4085	;# 
  3053   000FF6                     TBLPTR          equ	4086	;# 
  3054   000FF6                     TBLPTRL         equ	4086	;# 
  3055   000FF7                     TBLPTRH         equ	4087	;# 
  3056   000FF8                     TBLPTRU         equ	4088	;# 
  3057   000FF9                     PCLAT           equ	4089	;# 
  3058   000FF9                     PC              equ	4089	;# 
  3059   000FF9                     PCL             equ	4089	;# 
  3060   000FFA                     PCLATH          equ	4090	;# 
  3061   000FFB                     PCLATU          equ	4091	;# 
  3062   000FFC                     STKPTR          equ	4092	;# 
  3063   000FFD                     TOS             equ	4093	;# 
  3064   000FFD                     TOSL            equ	4093	;# 
  3065   000FFE                     TOSH            equ	4094	;# 
  3066   000FFF                     TOSU            equ	4095	;# 
  3067                           
  3068 ;;_fObj	offset	0
  3069 ;;_mObj	offset	6
  3070 ;;_rxObj	offset	0
  3071 ;;_rxdata	offset	16
  3072 ;;_ev	offset	0
  3073 ;;_tmid	offset	6
  3074 ;;_processEvent	offset=-3 (param)
  3075 ;;_id	offset=-4 (param)
  3076 ;;_delay	offset=-6 (param)
  3077 ;;_tm	offset	0
  3078 ;;_temp	offset	2
  3079 ;;_ev	offset=-6 (param)
  3080 ;;_inISR	offset=-7 (param)
  3081 ;;_tmid	offset=-9 (param)
  3082 ;;_i	offset	0
  3083 ;;_tm	offset=-2 (param)
  3084 ;;_ev	offset=-8 (param)
  3085 ;;_inISR	offset=-9 (param)
  3086 ;;_me	offset=-2 (param)
  3087 ;;_delay	offset=-4 (param)
  3088 ;;_me	offset=-2 (param)
  3089 ;;_me	offset=-2 (param)
  3090 ;;_processEvent	offset=-5 (param)
  3091 ;;_me	offset=-2 (param)
  3092 ;;_eventID	offset=-3 (param)
  3093 ;;_rxFlags	offset	0
  3094 ;;_rxObj	offset=-2 (param)
  3095 ;;_rxd	offset=-4 (param)
  3096 ;;_temp32	offset	0
  3097 ;;_ba	offset	4
  3098 ;;_fifoReg	offset	80
  3099 ;;_ciFifoCon	offset	92
  3100 ;;_myReg	offset	97
  3101 ;;_ciFifoUa	offset	101
  3102 ;;_a	offset	105
  3103 ;;_i	offset	107
  3104 ;;_n	offset	108
  3105 ;;_spiTransferError	offset	109
  3106 ;;_channel	offset=-1 (param)
  3107 ;;_rxObj	offset=-3 (param)
  3108 ;;_rxd	offset=-5 (param)
  3109 ;;_nBytes	offset=-6 (param)
  3110 ;;_ciFifoCon	offset	0
  3111 ;;_a	offset	5
  3112 ;;_spiTransferError	offset	7
  3113 ;;_channel	offset=-1 (param)
  3114 ;;_i	offset	0
  3115 ;;_spiTransferSize	offset	2
  3116 ;;_spiTransferError	offset	4
  3117 ;;_address	offset=-2 (param)
  3118 ;;_rxd	offset=-4 (param)
  3119 ;;_nBytes	offset=-6 (param)
  3120 ;;_ciFifoSta	offset	0
  3121 ;;_a	offset	4
  3122 ;;_spiTransferError	offset	6
  3123 ;;_channel	offset=-1 (param)
  3124 ;;_flags	offset=-3 (param)
  3125 ;;_i	offset	0
  3126 ;;_me	offset=-2 (param)
  3127 ;;_ev	offset	0
  3128 ;;_ev	offset=-2 (param)
  3129 ;;_txMsg	offset	0
  3130 ;;_txdata	offset	16
  3131 ;;_light	offset=-1 (param)
  3132 ;;_txMsg	offset	0
  3133 ;;_txdata	offset	16
  3134 ;;_light	offset=-1 (param)
  3135 ;;_txFlags	offset	0
  3136 ;;_txObj	offset=-2 (param)
  3137 ;;_txd	offset=-4 (param)
  3138 ;;_temp32	offset	0
  3139 ;;_txBuffer	offset	4
  3140 ;;_fifoReg	offset	80
  3141 ;;_ciFifoCon	offset	92
  3142 ;;_a	offset	97
  3143 ;;_ciFifoUa	offset	101
  3144 ;;_dataBytesInObject	offset	105
  3145 ;;_n	offset	109
  3146 ;;_spiTransferError	offset	111
  3147 ;;_i	offset	112
  3148 ;;_j	offset	113
  3149 ;;_channel	offset=-1 (param)
  3150 ;;_txObj	offset=-3 (param)
  3151 ;;_txd	offset=-5 (param)
  3152 ;;_txdNumBytes	offset=-9 (param)
  3153 ;;_flush	offset=-10 (param)
  3154 ;;_i	offset	0
  3155 ;;_spiTransferSize	offset	2
  3156 ;;_spiTransferError	offset	4
  3157 ;;_address	offset=-2 (param)
  3158 ;;_txd	offset=-4 (param)
  3159 ;;_nBytes	offset=-6 (param)
  3160 ;;_ciFifoCon	offset	0
  3161 ;;_a	offset	5
  3162 ;;_spiTransferError	offset	7
  3163 ;;_channel	offset=-1 (param)
  3164 ;;_flush	offset=-2 (param)
  3165 ;;_w	offset	0
  3166 ;;_i	offset	4
  3167 ;;_j	offset	6
  3168 ;;_spiTransferSize	offset	8
  3169 ;;_n	offset	10
  3170 ;;_spiTransferError	offset	12
  3171 ;;_address	offset=-2 (param)
  3172 ;;_rxd	offset=-4 (param)
  3173 ;;_nWords	offset=-6 (param)
  3174 ;;_dataBytesInObject	offset	0
  3175 ;;_dlc	offset=-1 (param)
  3176 ;;_ciFifoSta	offset	0
  3177 ;;_a	offset	4
  3178 ;;_spiTransferError	offset	6
  3179 ;;_channel	offset=-1 (param)
  3180 ;;_flags	offset=-3 (param)
  3181 ;;_ev	offset	0
  3182 ;;_inISR	offset=-6 (param)
  3183 ;;_sign	offset	0
  3184 ;;_counter	offset	1
  3185 ;;_dividend	offset=-2 (param)
  3186 ;;_divisor	offset=-4 (param)
  3187 ;;_inISR	offset=-1 (param)
  3188 ;;_inISR	offset=-1 (param)
  3189 ;;_InterruptHandler	offset=-3 (param)
  3190 ;;_filter	offset=-1 (param)
  3191 ;;_fObj	offset=-3 (param)
  3192 ;;_mObj	offset=-5 (param)
  3193 ;;_a	offset	0
  3194 ;;_fCtrl	offset	2
  3195 ;;_filter	offset=-1 (param)
  3196 ;;_channel	offset=-2 (param)
  3197 ;;_enable	offset=-3 (param)
  3198 ;;_temp32	offset	0
  3199 ;;_fObj	offset	4
  3200 ;;_a	offset	10
  3201 ;;_filter	offset=-1 (param)
  3202 ;;_id	offset=-3 (param)
  3203 ;;_temp32	offset	0
  3204 ;;_mObj	offset	4
  3205 ;;_a	offset	10
  3206 ;;_filter	offset=-1 (param)
  3207 ;;_mask	offset=-3 (param)
  3208 ;;_EXIDE	offset=-4 (param)
  3209 ;;_a	offset	0
  3210 ;;_spiTransferError	offset	2
  3211 ;;_fCtrl	offset	3
  3212 ;;_filter	offset=-1 (param)
  3213 ;;_txqConfig	offset	0
  3214 ;;_config	offset	4
  3215 ;;_rxfConfig	offset	7
  3216 ;;_txfConfig	offset	10
  3217 ;;_tefConfig	offset	12
  3218 ;;_bitTime	offset=-1 (param)
  3219 ;;_withISR	offset=-2 (param)
  3220 ;;_ciFifoCon	offset	0
  3221 ;;_config	offset=-2 (param)
  3222 ;;_ciFifoCon	offset	0
  3223 ;;_config	offset=-2 (param)
  3224 ;;_ciFifoCon	offset	0
  3225 ;;_config	offset=-2 (param)
  3226 ;;_ciFifoCon	offset	0
  3227 ;;_a	offset	5
  3228 ;;_channel	offset=-1 (param)
  3229 ;;_config	offset=-3 (param)
  3230 ;;_ts	offset=-4 (param)
  3231 ;;_ps	offset=-2 (param)
  3232 ;;_d	offset	0
  3233 ;;_spiTransferError	offset	1
  3234 ;;_ciTefCon	offset	0
  3235 ;;_config	offset=-2 (param)
  3236 ;;_spi2UniqueConfiguration	offset=-1 (param)
  3237 ;;_ciFifoCon	offset	0
  3238 ;;_a	offset	5
  3239 ;;_channel	offset=-1 (param)
  3240 ;;_config	offset=-3 (param)
  3241 ;;_d	offset	0
  3242 ;;_spiTransferError	offset	1
  3243 ;;_opMode	offset=-1 (param)
  3244 ;;_spiTransferError	offset	0
  3245 ;;_address	offset=-2 (param)
  3246 ;;_txd	offset=-3 (param)
  3247 ;;_spiTransferError	offset	0
  3248 ;;_address	offset=-2 (param)
  3249 ;;_rxd	offset=-4 (param)
  3250 ;;_intEnables	offset	0
  3251 ;;_index	offset=-1 (param)
  3252 ;;_flags	offset=-3 (param)
  3253 ;;_spiTransferSize	offset	0
  3254 ;;_i	offset	2
  3255 ;;_spiTransferError	offset	3
  3256 ;;_address	offset=-2 (param)
  3257 ;;_txd	offset=-4 (param)
  3258 ;;_ciCon	offset	0
  3259 ;;_config	offset=-2 (param)
  3260 ;;_ciCon	offset	0
  3261 ;;_config	offset=-2 (param)
  3262 ;;_ciNbtcfg	offset	0
  3263 ;;_bitTime	offset=-1 (param)
  3264 ;;_spiTransferSize	offset	0
  3265 ;;_i	offset	2
  3266 ;;_spiTransferError	offset	3
  3267 ;;_address	offset=-2 (param)
  3268 ;;_txd	offset=-6 (param)
  3269 ;;_dummy	offset	0
  3270 ;;_txPtr	offset=-2 (param)
  3271 ;;_rxPtr	offset=-4 (param)
  3272 ;;_size	offset=-6 (param)
  3273 ;;_dummy	offset	0
  3274 ;;_i	offset	1
  3275 ;;_id	offset=-1 (param)
  3276 ;;_inISR	offset=-2 (param)
  3277 ;;_me	offset=-2 (param)
  3278 ;;_tm	offset	0
  3279 ;;_temp	offset	2
  3280 ;;_ev	offset=-6 (param)
  3281 ;;_inISR	offset=-7 (param)
  3282 ;;_tmid	offset=-9 (param)
  3283 ;;_sign	offset	0
  3284 ;;_counter	offset	1
  3285 ;;_dividend	offset=-2 (param)
  3286 ;;_divisor	offset=-4 (param)
  3287 ;;_i	offset	0
  3288 ;;_tm	offset=-2 (param)
  3289 ;;_ev	offset=-8 (param)
  3290 ;;_inISR	offset=-9 (param)
  3291 ;;_inISR	offset=-1 (param)
  3292 ;;_inISR	offset=-1 (param)
  3293 ;;_me	offset=-2 (param)
  3294 ;;_delay	offset=-4 (param)
  3295 ;;_me	offset=-2 (param)
  3296                           
  3297                           	psect	mediumconst
  3298   00FF8C                     __pmediumconst:
  3299                           	callstack 0
  3300   00FF8C  00                 	db	0
  3301   00FF8D                     _canControlResetValues:
  3302                           	callstack 0
  3303   00FF8D  0760               	dw	1888
  3304   00FF8F  0498               	dw	1176
  3305   00FF91  0F0F               	dw	3855
  3306   00FF93  003E               	dw	62
  3307   00FF95  0303               	dw	771
  3308   00FF97  000E               	dw	14
  3309   00FF99  1000               	dw	4096
  3310   00FF9B  0002               	dw	2
  3311   00FF9D  0000               	dw	0
  3312   00FF9F  0000               	dw	0
  3313   00FFA1  0000               	dw	0
  3314   00FFA3  0000               	dw	0
  3315   00FFA5  0040               	dw	64
  3316   00FFA7  4040               	dw	16448
  3317   00FFA9  0000               	dw	0
  3318   00FFAB  0000               	dw	0
  3319   00FFAD  0000               	dw	0
  3320   00FFAF  0000               	dw	0
  3321   00FFB1  0000               	dw	0
  3322   00FFB3  0000               	dw	0
  3323   00FFB5  0000               	dw	0
  3324   00FFB7  0000               	dw	0
  3325   00FFB9  0000               	dw	0
  3326   00FFBB  0000               	dw	0
  3327   00FFBD  0000               	dw	0
  3328   00FFBF  0000               	dw	0
  3329   00FFC1  0000               	dw	0
  3330   00FFC3  0020               	dw	32
  3331   00FFC5  0000               	dw	0
  3332   00FFC7  0000               	dw	0
  3333   00FFC9  0000               	dw	0
  3334   00FFCB  0000               	dw	0
  3335   00FFCD  0400               	dw	1024
  3336   00FFCF  0000               	dw	0
  3337   00FFD1  0000               	dw	0
  3338   00FFD3  0000               	dw	0
  3339   00FFD5  0000               	dw	0
  3340   00FFD7  0000               	dw	0
  3341   00FFD9  0000               	dw	0
  3342   00FFDB  0000               	dw	0
  3343   00FFDD                     __end_of_canControlResetValues:
  3344                           	callstack 0
  3345   00FFDD                     _canFifoResetValues:
  3346                           	callstack 0
  3347   00FFDD  0400               	dw	1024
  3348   00FFDF  0060               	dw	96
  3349   00FFE1  0000               	dw	0
  3350   00FFE3  0000               	dw	0
  3351   00FFE5  0000               	dw	0
  3352   00FFE7  0000               	dw	0
  3353   00FFE9                     __end_of_canFifoResetValues:
  3354                           	callstack 0
  3355   00FFE9                     _spi2_configuration:
  3356                           	callstack 0
  3357   00FFE9  01                 	db	1
  3358   00FFEA  40                 	db	64
  3359   00FFEB  00                 	db	0
  3360   00FFEC  00                 	db	0
  3361   00FFED                     __end_of_spi2_configuration:
  3362                           	callstack 0
  3363   00FFED                     STR_1:
  3364   00FFED  20                 	db	32
  3365   00FFEE  20                 	db	32
  3366   00FFEF  20                 	db	32
  3367   00FFF0  20                 	db	32
  3368   00FFF1  20                 	db	32
  3369   00FFF2  20                 	db	32
  3370   00FFF3  20                 	db	32
  3371   00FFF4  20                 	db	32
  3372   00FFF5  20                 	db	32
  3373   00FFF6  20                 	db	32
  3374   00FFF7  20                 	db	32
  3375   00FFF8  20                 	db	32
  3376   00FFF9  20                 	db	32
  3377   00FFFA  20                 	db	32
  3378   00FFFB  20                 	db	32
  3379   00FFFC  20                 	db	32
  3380   00FFFD  00                 	db	0
  3381   00FFED                     STR_2           equ	STR_1
  3382   00FFFE  00                 	db	0	; dummy byte at the end
  3383   000003                     __activetblptr  equ	3
  3384                           
  3385                           	psect	nvCOMRAM
  3386   00005D                     __pnvCOMRAM:
  3387                           	callstack 0
  3388   00005D                     _TMR0_InterruptHandler:
  3389                           	callstack 0
  3390   00005D                     	ds	3
  3391   000F62                     _SSP2CON2       set	3938
  3392   000F63                     _SSP2CON1bits   set	3939
  3393   000F65                     _SSP2ADD        set	3941
  3394   000F63                     _SSP2CON1       set	3939
  3395   000F64                     _SSP2STAT       set	3940
  3396   000FD5                     _T0CON          set	4053
  3397   000FD6                     _TMR0L          set	4054
  3398   000FD7                     _TMR0H          set	4055
  3399   000FD5                     _T0CONbits      set	4053
  3400   000FF2                     _INTCONbits     set	4082
  3401   000FD0                     _RCONbits       set	4048
  3402   000FC1                     _ADCON1bits     set	4033
  3403   000F95                     _TRISD          set	3989
  3404   000F94                     _TRISC          set	3988
  3405   000F99                     _TRISH          set	3993
  3406   000F93                     _TRISB          set	3987
  3407   000F98                     _TRISG          set	3992
  3408   000F92                     _TRISA          set	3986
  3409   000F97                     _TRISF          set	3991
  3410   000F96                     _TRISE          set	3990
  3411   000F90                     _LATH           set	3984
  3412   000F8B                     _LATC           set	3979
  3413   000F8F                     _LATG           set	3983
  3414   000F8A                     _LATB           set	3978
  3415   000F8E                     _LATF           set	3982
  3416   000F89                     _LATA           set	3977
  3417   000F8C                     _LATD           set	3980
  3418   000F91                     _LATJ           set	3985
  3419   000F8D                     _LATE           set	3981
  3420   000F9B                     _OSCTUNE        set	3995
  3421   000FD3                     _OSCCON         set	4051
  3422   000F9A                     _TRISJ          set	3994
  3423   000F95                     _TRISDbits      set	3989
  3424   000F98                     _TRISGbits      set	3992
  3425   000F66                     _SSP2BUF        set	3942
  3426   000F64                     _SSP2STATbits   set	3940
  3427   000F8F                     _LATGbits       set	3983
  3428                           
  3429                           ; #config settings
  3430                           
  3431                           	psect	cinit
  3432   014324                     __pcinit:
  3433                           	callstack 0
  3434   014324                     start_initialization:
  3435                           	callstack 0
  3436   014324                     __initialization:
  3437                           	callstack 0
  3438                           
  3439                           ; Clear objects allocated to BIGRAM (282 bytes)
  3440   014324  EE02  F0C8         	lfsr	0,__pbssBIGRAM
  3441   014328  EE21 F01A          	lfsr	2,282
  3442   01432C                     clear_0:
  3443   01432C  6AEE               	clrf	postinc0,c
  3444   01432E  50DD               	movf	postdec2,w,c
  3445   014330  50D9               	movf	fsr2l,w,c
  3446   014332  E1FC               	bnz	clear_0
  3447   014334  50DA               	movf	fsr2h,w,c
  3448   014336  E1FA               	bnz	clear_0
  3449                           
  3450                           ; Clear objects allocated to BANK2 (200 bytes)
  3451   014338  EE02  F000         	lfsr	0,__pbssBANK2
  3452   01433C  0EC8               	movlw	200
  3453   01433E                     clear_1:
  3454   01433E  6AEE               	clrf	postinc0,c
  3455   014340  06E8               	decf	wreg,f,c
  3456   014342  E1FD               	bnz	clear_1
  3457                           
  3458                           ; Clear objects allocated to BANK1 (200 bytes)
  3459   014344  EE01  F000         	lfsr	0,__pbssBANK1
  3460   014348  0EC8               	movlw	200
  3461   01434A                     clear_2:
  3462   01434A  6AEE               	clrf	postinc0,c
  3463   01434C  06E8               	decf	wreg,f,c
  3464   01434E  E1FD               	bnz	clear_2
  3465                           
  3466                           ; Clear objects allocated to BANK0 (27 bytes)
  3467   014350  EE00  F060         	lfsr	0,__pbssBANK0
  3468   014354  0E1B               	movlw	27
  3469   014356                     clear_3:
  3470   014356  6AEE               	clrf	postinc0,c
  3471   014358  06E8               	decf	wreg,f,c
  3472   01435A  E1FD               	bnz	clear_3
  3473                           
  3474                           ; Clear objects allocated to COMRAM (44 bytes)
  3475   01435C  EE00  F001         	lfsr	0,__pbssCOMRAM
  3476   014360  0E2C               	movlw	44
  3477   014362                     clear_4:
  3478   014362  6AEE               	clrf	postinc0,c
  3479   014364  06E8               	decf	wreg,f,c
  3480   014366  E1FD               	bnz	clear_4
  3481   014368                     end_of_initialization:
  3482                           	callstack 0
  3483   014368                     __end_of__initialization:
  3484                           	callstack 0
  3485   014368  0100               	movlb	0
  3486   01436A  EF14  F09A         	goto	_main	;jump to C main() function
  3487                           
  3488                           	psect	bssCOMRAM
  3489   000001                     __pbssCOMRAM:
  3490                           	callstack 0
  3491   000001                     lightContol_BackLight@F6642:
  3492                           	callstack 0
  3493   000001                     	ds	16
  3494   000011                     lightContol_FrontLight@F6636:
  3495                           	callstack 0
  3496   000011                     	ds	16
  3497   000021                     _dummy:
  3498                           	callstack 0
  3499   000021                     	ds	4
  3500   000025                     TMR0_ISR@CountCallBack:
  3501                           	callstack 0
  3502   000025                     	ds	2
  3503   000027                     _timer0ReloadVal:
  3504                           	callstack 0
  3505   000027                     	ds	2
  3506   000029                     lightControl_Process@oldState:
  3507                           	callstack 0
  3508   000029                     	ds	1
  3509   00002A                     lightControl_Process@state:
  3510                           	callstack 0
  3511   00002A                     	ds	1
  3512   00002B                     lightContol_BackLight@lastLight:
  3513                           	callstack 0
  3514   00002B                     	ds	1
  3515   00002C                     lightContol_FrontLight@lastLight:
  3516                           	callstack 0
  3517   00002C                     	ds	1
  3518                           
  3519                           	psect	bssBANK0
  3520   000060                     __pbssBANK0:
  3521                           	callstack 0
  3522   000060                     _carState:
  3523                           	callstack 0
  3524   000060                     	ds	27
  3525                           
  3526                           	psect	bssBANK1
  3527   000100                     __pbssBANK1:
  3528                           	callstack 0
  3529   000100                     _spiTransmitBuffer:
  3530                           	callstack 0
  3531   000100                     	ds	200
  3532                           
  3533                           	psect	bssBANK2
  3534   000200                     __pbssBANK2:
  3535                           	callstack 0
  3536   000200                     _spiReceiveBuffer:
  3537                           	callstack 0
  3538   000200                     	ds	200
  3539                           
  3540                           	psect	bssBIGRAM
  3541   0002C8                     __pbssBIGRAM:
  3542                           	callstack 0
  3543   0002C8                     _theXF:
  3544                           	callstack 0
  3545   0002C8                     	ds	282
  3546                           
  3547                           	psect	cstackCOMRAM
  3548   00004D                     __pcstackCOMRAM:
  3549                           	callstack 0
  3550   00004D                     ??_INTERRUPT_InterruptManager:
  3551                           
  3552                           ; 1 bytes @ 0x0
  3553   00004D                     	ds	16
  3554                           
  3555 ;;
  3556 ;;Main: autosize = 12, tempsize = 0, incstack = 0, save=0
  3557 ;;
  3558 ;; *************** function _main *****************
  3559 ;; Defined at:
  3560 ;;		line 56 in file "main.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;		None
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  fObj            6  [STACK] struct _CAN_FILTEROBJ_ID
  3565 ;;  mObj            6  [STACK] struct _CAN_MASKOBJ_ID
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1  [STACK] void 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl,
      + prodh
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels required when called: 15
  3581 ;; This function calls:
  3582 ;;		_CanInit
  3583 ;;		_CanSetFilter
  3584 ;;		_SYSTEM_Initialize
  3585 ;;		_TMR0_SetInterruptHandler
  3586 ;;		_XF_executeOnce
  3587 ;;		_XF_init
  3588 ;;		_XF_post
  3589 ;;		_updateCarState
  3590 ;; This function is called by:
  3591 ;;		Startup code after reset
  3592 ;; This function uses a reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text0
  3596   013428                     __ptext0:
  3597                           	callstack 0
  3598   013428                     _main:
  3599                           	callstack 0
  3600                           
  3601                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3602   013428  0E0C               	movlw	12
  3603   01342A  26E1               	addwf	fsr1l,f,c
  3604   01342C  0E00               	movlw	0
  3605   01342E  22E2               	addwfc	fsr1h,f,c
  3606   013430                     
  3607                           ;main.c: 60:     SYSTEM_Initialize();
  3608   013430  ECD9  F0A2         	call	_SYSTEM_Initialize	;wreg free
  3609   013434                     
  3610                           ;main.c: 61:     XF_init();
  3611   013434  EC6F  F093         	call	_XF_init	;wreg free
  3612   013438                     
  3613                           ;main.c: 62:     TMR0_SetInterruptHandler(XF_decrementAndQueueTimers);
  3614   013438  0E9A               	movlw	low _XF_decrementAndQueueTimers
  3615   01343A  6EE6               	movwf	postinc1,c
  3616   01343C  0E2F               	movlw	high _XF_decrementAndQueueTimers
  3617   01343E  6EE6               	movwf	postinc1,c
  3618   013440  0E01               	movlw	low (_XF_decrementAndQueueTimers shr (0+16))
  3619   013442  6EE6               	movwf	postinc1,c
  3620   013444  EC95  F0A2         	call	_TMR0_SetInterruptHandler	;wreg free
  3621   013448                     
  3622                           ;main.c: 64:     CanInit(CAN_250K_500K,0);
  3623   013448  0E00               	movlw	0
  3624   01344A  6EE6               	movwf	postinc1,c
  3625   01344C  0E08               	movlw	8
  3626   01344E  6EE6               	movwf	postinc1,c
  3627   013450  EC32  F08F         	call	_CanInit	;wreg free
  3628   013454                     
  3629                           ;main.c: 65:     CAN_FILTEROBJ_ID fObj;;main.c: 66:     fObj.ID = 0x001;
  3630   013454  0E01               	movlw	1
  3631   013456  6E35               	movwf	(btemp+8)^0,c
  3632   013458  6A36               	clrf	(btemp+9)^0,c
  3633   01345A  6A37               	clrf	(btemp+10)^0,c
  3634   01345C  6A38               	clrf	(btemp+11)^0,c
  3635                           
  3636                           ;stkvar	_fObj @ sp[(-12)+0]
  3637   01345E  0EF4               	movlw	-12
  3638   013460  C035  FFE3         	movff	btemp+8,plusw1
  3639   013464  0EF5               	movlw	-11
  3640   013466  C036  FFE3         	movff	btemp+9,plusw1
  3641   01346A  0EF6               	movlw	-10
  3642   01346C  C037  FFE3         	movff	btemp+10,plusw1
  3643   013470  0EF7               	movlw	-9
  3644   013472  C038  FFE3         	movff	btemp+11,plusw1
  3645   013476                     
  3646                           ;main.c: 67:     CAN_MASKOBJ_ID mObj;;main.c: 68:     mObj.MID = 0x00F;
  3647   013476  0E0F               	movlw	15
  3648   013478  6E35               	movwf	(btemp+8)^0,c
  3649   01347A  6A36               	clrf	(btemp+9)^0,c
  3650   01347C  6A37               	clrf	(btemp+10)^0,c
  3651   01347E  6A38               	clrf	(btemp+11)^0,c
  3652                           
  3653                           ;stkvar	_mObj @ sp[(-12)+6]
  3654   013480  0EFA               	movlw	-6
  3655   013482  C035  FFE3         	movff	btemp+8,plusw1
  3656   013486  0EFB               	movlw	-5
  3657   013488  C036  FFE3         	movff	btemp+9,plusw1
  3658   01348C  0EFC               	movlw	-4
  3659   01348E  C037  FFE3         	movff	btemp+10,plusw1
  3660   013492  0EFD               	movlw	-3
  3661   013494  C038  FFE3         	movff	btemp+11,plusw1
  3662   013498                     
  3663                           ;main.c: 69:     CanSetFilter(CAN_FILTER0,&fObj,&mObj);
  3664                           ;stkvar	_mObj @ sp[(-12)+6]
  3665   013498  0EFA               	movlw	250
  3666   01349A  24E1               	addwf	fsr1l,w,c
  3667   01349C  6E2D               	movwf	btemp^0,c
  3668   01349E  0EFF               	movlw	255
  3669   0134A0  20E2               	addwfc	fsr1h,w,c
  3670   0134A2  6E2E               	movwf	(btemp+1)^0,c
  3671   0134A4  C02D  FFE6         	movff	btemp,postinc1
  3672   0134A8  C02E  FFE6         	movff	btemp+1,postinc1
  3673                           
  3674                           ;stkvar	_fObj @ sp[(-14)+0]
  3675   0134AC  0EF2               	movlw	242
  3676   0134AE  24E1               	addwf	fsr1l,w,c
  3677   0134B0  6E2D               	movwf	btemp^0,c
  3678   0134B2  0EFF               	movlw	255
  3679   0134B4  20E2               	addwfc	fsr1h,w,c
  3680   0134B6  6E2E               	movwf	(btemp+1)^0,c
  3681   0134B8  C02D  FFE6         	movff	btemp,postinc1
  3682   0134BC  C02E  FFE6         	movff	btemp+1,postinc1
  3683   0134C0  0E00               	movlw	0
  3684   0134C2  6EE6               	movwf	postinc1,c
  3685   0134C4  EC1A  F0A0         	call	_CanSetFilter	;wreg free
  3686   0134C8                     
  3687                           ;main.c: 75:     (INTCONbits.GIE = 1);
  3688   0134C8  8EF2               	bsf	242,7,c	;volatile
  3689   0134CA                     
  3690                           ;main.c: 81:     (INTCONbits.PEIE = 1);
  3691   0134CA  8CF2               	bsf	242,6,c	;volatile
  3692   0134CC                     
  3693                           ;main.c: 85:     XF_post(lightControl_Process,E_INIT,0);
  3694   0134CC  0E00               	movlw	0
  3695   0134CE  6EE6               	movwf	postinc1,c
  3696   0134D0  0E00               	movlw	0
  3697   0134D2  6EE6               	movwf	postinc1,c
  3698   0134D4  0E01               	movlw	1
  3699   0134D6  6EE6               	movwf	postinc1,c
  3700   0134D8  0E7C               	movlw	low _lightControl_Process
  3701   0134DA  6EE6               	movwf	postinc1,c
  3702   0134DC  0E29               	movlw	high _lightControl_Process
  3703   0134DE  6EE6               	movwf	postinc1,c
  3704   0134E0  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3705   0134E2  6EE6               	movwf	postinc1,c
  3706   0134E4  EC7C  F09A         	call	_XF_post	;wreg free
  3707   0134E8                     l4942:
  3708                           
  3709                           ;main.c: 87:     {;main.c: 88:         updateCarState();
  3710   0134E8  EC38  F099         	call	_updateCarState	;wreg free
  3711   0134EC                     
  3712                           ;main.c: 89:         XF_executeOnce();
  3713   0134EC  EC55  F09F         	call	_XF_executeOnce	;wreg free
  3714   0134F0  EF74  F09A         	goto	l4942
  3715   0134F4  EF57  F000         	goto	start
  3716   0134F8                     __end_of_main:
  3717                           	callstack 0
  3718                           
  3719 ;; *************** function _updateCarState *****************
  3720 ;; Defined at:
  3721 ;;		line 118 in file "carFunctions.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  rxObj          16  [STACK] struct _CAN_RX_MSGOBJ
  3726 ;;  rxdata          8  [STACK] unsigned char [8]
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1  [STACK] void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; Hardware stack levels required when called: 12
  3743 ;; This function calls:
  3744 ;;		_CanReceive
  3745 ;;		_XF_post
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text1
  3752   013270                     __ptext1:
  3753                           	callstack 0
  3754   013270                     _updateCarState:
  3755                           	callstack 0
  3756                           
  3757                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  3758   013270  0E18               	movlw	24
  3759   013272  26E1               	addwf	fsr1l,f,c
  3760   013274  0E00               	movlw	0
  3761   013276  22E2               	addwfc	fsr1h,f,c
  3762   013278                     
  3763                           ;carFunctions.c: 121:     CAN_RX_MSGOBJ rxObj ;;carFunctions.c: 122:     uint8_t rxdata[
      +                          8];;carFunctions.c: 124:     if(CanReceive(&rxObj,&rxdata) == 0) {
  3764                           ;stkvar	_rxdata @ sp[(-24)+16]
  3765   013278  0EF8               	movlw	248
  3766   01327A  24E1               	addwf	fsr1l,w,c
  3767   01327C  6E2D               	movwf	btemp^0,c
  3768   01327E  0EFF               	movlw	255
  3769   013280  20E2               	addwfc	fsr1h,w,c
  3770   013282  6E2E               	movwf	(btemp+1)^0,c
  3771   013284  C02D  FFE6         	movff	btemp,postinc1
  3772   013288  C02E  FFE6         	movff	btemp+1,postinc1
  3773                           
  3774                           ;stkvar	_rxObj @ sp[(-26)+0]
  3775   01328C  0EE6               	movlw	230
  3776   01328E  24E1               	addwf	fsr1l,w,c
  3777   013290  6E2D               	movwf	btemp^0,c
  3778   013292  0EFF               	movlw	255
  3779   013294  20E2               	addwfc	fsr1h,w,c
  3780   013296  6E2E               	movwf	(btemp+1)^0,c
  3781   013298  C02D  FFE6         	movff	btemp,postinc1
  3782   01329C  C02E  FFE6         	movff	btemp+1,postinc1
  3783   0132A0  EC4F  F0A0         	call	_CanReceive	;wreg free
  3784   0132A4  502D               	movf	btemp^0,w,c
  3785   0132A6  A4D8               	btfss	status,2,c
  3786   0132A8  EF58  F099         	goto	u2771
  3787   0132AC  EF5A  F099         	goto	u2770
  3788   0132B0                     u2771:
  3789   0132B0  EFA3  F099         	goto	l1461
  3790   0132B4                     u2770:
  3791   0132B4                     
  3792                           ;carFunctions.c: 125:         if((rxObj.bF.id.ID & 0x3F0) == (0x05<<4)){
  3793                           ;stkvar	_rxObj @ sp[(-24)+0]
  3794   0132B4  50E1               	movf	fsr1l,w,c
  3795   0132B6  0FE8               	addlw	-24
  3796   0132B8  6ED9               	movwf	fsr2l,c
  3797   0132BA  50E2               	movf	fsr1h,w,c
  3798   0132BC  6EDA               	movwf	fsr2h,c
  3799   0132BE  0EFF               	movlw	255
  3800   0132C0  22DA               	addwfc	fsr2h,f,c
  3801   0132C2  0EF0               	movlw	240
  3802   0132C4  14DE               	andwf	postinc2,w,c
  3803   0132C6  6E35               	movwf	(btemp+8)^0,c
  3804   0132C8  0E03               	movlw	3
  3805   0132CA  14DE               	andwf	postinc2,w,c
  3806   0132CC  6E36               	movwf	(btemp+9)^0,c
  3807   0132CE  0E00               	movlw	0
  3808   0132D0  14DE               	andwf	postinc2,w,c
  3809   0132D2  6E37               	movwf	(btemp+10)^0,c
  3810   0132D4  0E00               	movlw	0
  3811   0132D6  14DE               	andwf	postinc2,w,c
  3812   0132D8  6E38               	movwf	(btemp+11)^0,c
  3813   0132DA  0E50               	movlw	80
  3814   0132DC  1835               	xorwf	(btemp+8)^0,w,c
  3815   0132DE  1036               	iorwf	(btemp+9)^0,w,c
  3816   0132E0  1037               	iorwf	(btemp+10)^0,w,c
  3817   0132E2  1038               	iorwf	(btemp+11)^0,w,c
  3818   0132E4  A4D8               	btfss	status,2,c
  3819   0132E6  EF77  F099         	goto	u2781
  3820   0132EA  EF79  F099         	goto	u2780
  3821   0132EE                     u2781:
  3822   0132EE  EFA3  F099         	goto	l1461
  3823   0132F2                     u2780:
  3824   0132F2                     
  3825                           ;carFunctions.c: 126:             carState.contactKey = rxdata[0];
  3826                           ;stkvar	_rxdata @ sp[(-24)+16]
  3827   0132F2  0EF8               	movlw	-8
  3828   0132F4  CFE3 F06E          	movff	plusw1,_carState+14
  3829   0132F8                     
  3830                           ;carFunctions.c: 127:             if(rxdata[0]==0){
  3831                           ;stkvar	_rxdata @ sp[(-24)+16]
  3832   0132F8  0EF8               	movlw	-8
  3833   0132FA  50E3               	movf	plusw1,w,c
  3834   0132FC  A4D8               	btfss	status,2,c
  3835   0132FE  EF83  F099         	goto	u2791
  3836   013302  EF85  F099         	goto	u2790
  3837   013306                     u2791:
  3838   013306  EF95  F099         	goto	l4914
  3839   01330A                     u2790:
  3840   01330A                     
  3841                           ;carFunctions.c: 128:                 XF_post(lightControl_Process,E_CONTACT_OFF,0);
  3842   01330A  0E00               	movlw	0
  3843   01330C  6EE6               	movwf	postinc1,c
  3844   01330E  0E00               	movlw	0
  3845   013310  6EE6               	movwf	postinc1,c
  3846   013312  0E02               	movlw	2
  3847   013314  6EE6               	movwf	postinc1,c
  3848   013316  0E7C               	movlw	low _lightControl_Process
  3849   013318  6EE6               	movwf	postinc1,c
  3850   01331A  0E29               	movlw	high _lightControl_Process
  3851   01331C  6EE6               	movwf	postinc1,c
  3852   01331E  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3853   013320  6EE6               	movwf	postinc1,c
  3854   013322  EC7C  F09A         	call	_XF_post	;wreg free
  3855                           
  3856                           ;carFunctions.c: 129:             }else{
  3857   013326  EFA3  F099         	goto	l1461
  3858   01332A                     l4914:
  3859                           
  3860                           ;carFunctions.c: 130:                 XF_post(lightControl_Process,E_CONTACT_ON,0);
  3861   01332A  0E00               	movlw	0
  3862   01332C  6EE6               	movwf	postinc1,c
  3863   01332E  0E00               	movlw	0
  3864   013330  6EE6               	movwf	postinc1,c
  3865   013332  0E03               	movlw	3
  3866   013334  6EE6               	movwf	postinc1,c
  3867   013336  0E7C               	movlw	low _lightControl_Process
  3868   013338  6EE6               	movwf	postinc1,c
  3869   01333A  0E29               	movlw	high _lightControl_Process
  3870   01333C  6EE6               	movwf	postinc1,c
  3871   01333E  0E01               	movlw	low (_lightControl_Process shr (0+16))
  3872   013340  6EE6               	movwf	postinc1,c
  3873   013342  EC7C  F09A         	call	_XF_post	;wreg free
  3874   013346                     l1461:
  3875                           
  3876                           ; _updateCarState: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
  3877   013346  0EE8               	movlw	232
  3878   013348  26E1               	addwf	fsr1l,f,c
  3879   01334A  0EFF               	movlw	255
  3880   01334C  22E2               	addwfc	fsr1h,f,c
  3881   01334E  0012               	return		;funcret
  3882   013350                     __end_of_updateCarState:
  3883                           	callstack 0
  3884                           
  3885 ;; *************** function _XF_post *****************
  3886 ;; Defined at:
  3887 ;;		line 274 in file "xf/xf.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  3890 ;;		 -> lightControl_Process(1), 
  3891 ;;  id              1  [STACK] unsigned char 
  3892 ;;  delay           2  [STACK] unsigned short 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  ev              6  [STACK] struct Event_
  3895 ;;  tmid            1  [STACK] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1  [STACK] unsigned char 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;Total ram usage:        0 bytes
  3910 ;; Hardware stack levels used: 1
  3911 ;; Hardware stack levels required when called: 10
  3912 ;; This function calls:
  3913 ;;		_Event_init
  3914 ;;		_Event_setDelay
  3915 ;;		_Event_setId
  3916 ;;		_Event_setPE
  3917 ;;		_XF_pushEvent
  3918 ;; This function is called by:
  3919 ;;		_main
  3920 ;;		_updateCarState
  3921 ;; This function uses a reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text2
  3925   0134F8                     __ptext2:
  3926                           	callstack 0
  3927   0134F8                     _XF_post:
  3928                           	callstack 0
  3929                           
  3930                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  3931   0134F8  0E07               	movlw	7
  3932   0134FA  26E1               	addwf	fsr1l,f,c
  3933   0134FC  0E00               	movlw	0
  3934   0134FE  22E2               	addwfc	fsr1h,f,c
  3935   013500                     
  3936                           ;xf/xf.c: 274: uint8_t XF_post(processEventT processEvent, uint8_t id, uint16_t delay);x
      +                          f/xf.c: 275: {;xf/xf.c: 276:     uint8_t tmid = 12;
  3937                           ;stkvar	_tmid @ sp[(-7)+6]
  3938   013500  0EFF               	movlw	-1
  3939   013502  6AE3               	clrf	plusw1,c
  3940   013504  84E3               	bsf	plusw1,2,c
  3941   013506  86E3               	bsf	plusw1,3,c	;indir
  3942   013508                     
  3943                           ;xf/xf.c: 279:     Event ev;;xf/xf.c: 280:     Event_init(&ev);
  3944                           ;stkvar	_ev @ sp[(-7)+0]
  3945   013508  0EF9               	movlw	249
  3946   01350A  24E1               	addwf	fsr1l,w,c
  3947   01350C  6E2D               	movwf	btemp^0,c
  3948   01350E  0EFF               	movlw	255
  3949   013510  20E2               	addwfc	fsr1h,w,c
  3950   013512  6E2E               	movwf	(btemp+1)^0,c
  3951   013514  C02D  FFE6         	movff	btemp,postinc1
  3952   013518  C02E  FFE6         	movff	btemp+1,postinc1
  3953   01351C  EC6B  F0A1         	call	_Event_init	;wreg free
  3954   013520                     
  3955                           ;xf/xf.c: 282:     Event_setPE(&ev,processEvent);
  3956                           ;stkvar	_processEvent @ sp[(-7)+-3]
  3957   013520  0EF6               	movlw	-10
  3958   013522  CFE3 FFE6          	movff	plusw1,postinc1
  3959   013526  CFE3 FFE6          	movff	plusw1,postinc1
  3960   01352A  CFE3 FFE6          	movff	plusw1,postinc1
  3961                           
  3962                           ;stkvar	_ev @ sp[(-10)+0]
  3963   01352E  0EF6               	movlw	246
  3964   013530  24E1               	addwf	fsr1l,w,c
  3965   013532  6E2D               	movwf	btemp^0,c
  3966   013534  0EFF               	movlw	255
  3967   013536  20E2               	addwfc	fsr1h,w,c
  3968   013538  6E2E               	movwf	(btemp+1)^0,c
  3969   01353A  C02D  FFE6         	movff	btemp,postinc1
  3970   01353E  C02E  FFE6         	movff	btemp+1,postinc1
  3971   013542  ECB7  F0A1         	call	_Event_setPE	;wreg free
  3972   013546                     
  3973                           ;xf/xf.c: 283:     Event_setId(&ev,id);
  3974                           ;stkvar	_id @ sp[(-7)+-4]
  3975   013546  0EF5               	movlw	-11
  3976   013548  50E3               	movf	plusw1,w,c
  3977   01354A  6EE6               	movwf	postinc1,c
  3978                           
  3979                           ;stkvar	_ev @ sp[(-8)+0]
  3980   01354C  0EF8               	movlw	248
  3981   01354E  24E1               	addwf	fsr1l,w,c
  3982   013550  6E2D               	movwf	btemp^0,c
  3983   013552  0EFF               	movlw	255
  3984   013554  20E2               	addwfc	fsr1h,w,c
  3985   013556  6E2E               	movwf	(btemp+1)^0,c
  3986   013558  C02D  FFE6         	movff	btemp,postinc1
  3987   01355C  C02E  FFE6         	movff	btemp+1,postinc1
  3988   013560  ECB4  F0A2         	call	_Event_setId	;wreg free
  3989   013564                     
  3990                           ;xf/xf.c: 284:     Event_setDelay(&ev,delay);
  3991                           ;stkvar	_delay @ sp[(-7)+-6]
  3992   013564  0EF3               	movlw	-13
  3993   013566  CFE3 FFE6          	movff	plusw1,postinc1
  3994   01356A  CFE3 FFE6          	movff	plusw1,postinc1
  3995                           
  3996                           ;stkvar	_ev @ sp[(-9)+0]
  3997   01356E  0EF7               	movlw	247
  3998   013570  24E1               	addwf	fsr1l,w,c
  3999   013572  6E2D               	movwf	btemp^0,c
  4000   013574  0EFF               	movlw	255
  4001   013576  20E2               	addwfc	fsr1h,w,c
  4002   013578  6E2E               	movwf	(btemp+1)^0,c
  4003   01357A  C02D  FFE6         	movff	btemp,postinc1
  4004   01357E  C02E  FFE6         	movff	btemp+1,postinc1
  4005   013582  ECF2  F0A1         	call	_Event_setDelay	;wreg free
  4006   013586                     
  4007                           ;xf/xf.c: 286:     XF_pushEvent(ev,0,&tmid);
  4008                           ;stkvar	_tmid @ sp[(-7)+6]
  4009   013586  0EFF               	movlw	255
  4010   013588  24E1               	addwf	fsr1l,w,c
  4011   01358A  6E2D               	movwf	btemp^0,c
  4012   01358C  0EFF               	movlw	255
  4013   01358E  20E2               	addwfc	fsr1h,w,c
  4014   013590  6E2E               	movwf	(btemp+1)^0,c
  4015   013592  C02D  FFE6         	movff	btemp,postinc1
  4016   013596  C02E  FFE6         	movff	btemp+1,postinc1
  4017   01359A  0E00               	movlw	0
  4018   01359C  6EE6               	movwf	postinc1,c
  4019                           
  4020                           ;stkvar	_ev @ sp[(-10)+0]
  4021   01359E  0EF6               	movlw	246
  4022   0135A0  24E1               	addwf	fsr1l,w,c
  4023   0135A2  6ED9               	movwf	fsr2l,c
  4024   0135A4  0EFF               	movlw	255
  4025   0135A6  20E2               	addwfc	fsr1h,w,c
  4026   0135A8  6EDA               	movwf	fsr2h,c
  4027   0135AA  0E06               	movlw	6
  4028   0135AC                     u2641:
  4029   0135AC  CFDE FFE6          	movff	postinc2,postinc1
  4030   0135B0  2CE8               	decfsz	wreg,w,c
  4031   0135B2  EFD6  F09A         	goto	u2641
  4032   0135B6  ECAF  F092         	call	_XF_pushEvent	;wreg free
  4033   0135BA                     
  4034                           ; _XF_post: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsi
      +                          ze = 6, vargsize = 0
  4035   0135BA  0EF3               	movlw	243
  4036   0135BC  26E1               	addwf	fsr1l,f,c
  4037   0135BE  0EFF               	movlw	255
  4038   0135C0  22E2               	addwfc	fsr1h,f,c
  4039   0135C2  0012               	return		;funcret
  4040   0135C4                     __end_of_XF_post:
  4041                           	callstack 0
  4042                           
  4043 ;; *************** function _XF_pushEvent *****************
  4044 ;; Defined at:
  4045 ;;		line 106 in file "xf/xf.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  ev              6  [STACK] struct Event_
  4048 ;;  inISR           1  [STACK] _Bool 
  4049 ;;  tmid            2  [STACK] PTR unsigned char 
  4050 ;;		 -> tmid(1), dummy(1), 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  tm              2  [STACK] unsigned short 
  4053 ;;  temp            1  [STACK] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1  [STACK] _Bool 
  4056 ;; Registers used:
  4057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;Total ram usage:        0 bytes
  4068 ;; Hardware stack levels used: 1
  4069 ;; Hardware stack levels required when called: 9
  4070 ;; This function calls:
  4071 ;;		_ENTERCRITICAL
  4072 ;;		_Event_getDelay
  4073 ;;		_Event_setDelay
  4074 ;;		_LEAVECRITICAL
  4075 ;;		_XF_noMoreEvent
  4076 ;;		_XF_scheduleTimer
  4077 ;;		___awmod
  4078 ;; This function is called by:
  4079 ;;		_XF_decrementAndQueueTimers
  4080 ;;		_XF_post
  4081 ;; This function uses a reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text3
  4085   01255E                     __ptext3:
  4086                           	callstack 0
  4087   01255E                     _XF_pushEvent:
  4088                           	callstack 0
  4089                           
  4090                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4091   01255E  52E6               	movf	postinc1,f,c
  4092   012560  52E6               	movf	postinc1,f,c
  4093   012562  52E6               	movf	postinc1,f,c
  4094   012564                     
  4095                           ;xf/xf.c: 106: _Bool XF_pushEvent(Event ev, _Bool inISR, uint8_t* tmid);xf/xf.c: 107: {;
      +                          xf/xf.c: 108:     uint8_t temp;;xf/xf.c: 109:     uint16_t tm;;xf/xf.c: 110:     tm = Ev
      +                          ent_getDelay(&ev);
  4096                           ;stkvar	_ev @ sp[(-3)+-6]
  4097   012564  0EF7               	movlw	247
  4098   012566  24E1               	addwf	fsr1l,w,c
  4099   012568  6E2D               	movwf	btemp^0,c
  4100   01256A  0EFF               	movlw	255
  4101   01256C  20E2               	addwfc	fsr1h,w,c
  4102   01256E  6E2E               	movwf	(btemp+1)^0,c
  4103   012570  C02D  FFE6         	movff	btemp,postinc1
  4104   012574  C02E  FFE6         	movff	btemp+1,postinc1
  4105   012578  EC82  F0A2         	call	_Event_getDelay	;wreg free
  4106                           
  4107                           ;stkvar	_tm @ sp[(-3)+0]
  4108   01257C  0EFD               	movlw	-3
  4109   01257E  C02D  FFE3         	movff	btemp,plusw1
  4110   012582  0EFE               	movlw	-2
  4111   012584  C02E  FFE3         	movff	btemp+1,plusw1
  4112   012588                     
  4113                           ;xf/xf.c: 111:     if ( tm > 0)
  4114                           ;stkvar	_tm @ sp[(-3)+0]
  4115   012588  0EFD               	movlw	-3
  4116   01258A  CFE3 F02D          	movff	plusw1,btemp
  4117   01258E  0EFE               	movlw	-2
  4118   012590  50E3               	movf	plusw1,w,c
  4119   012592  102D               	iorwf	btemp^0,w,c
  4120   012594  B4D8               	btfsc	status,2,c
  4121   012596  EFCF  F092         	goto	u1901
  4122   01259A  EFD1  F092         	goto	u1900
  4123   01259E                     u1901:
  4124   01259E  EF01  F093         	goto	l4084
  4125   0125A2                     u1900:
  4126   0125A2                     
  4127                           ;xf/xf.c: 112:     {;xf/xf.c: 113:         Event_setDelay(&ev,0);
  4128   0125A2  0E00               	movlw	0
  4129   0125A4  6EE6               	movwf	postinc1,c
  4130   0125A6  0E00               	movlw	0
  4131   0125A8  6EE6               	movwf	postinc1,c
  4132                           
  4133                           ;stkvar	_ev @ sp[(-5)+-6]
  4134   0125AA  0EF5               	movlw	245
  4135   0125AC  24E1               	addwf	fsr1l,w,c
  4136   0125AE  6E2D               	movwf	btemp^0,c
  4137   0125B0  0EFF               	movlw	255
  4138   0125B2  20E2               	addwfc	fsr1h,w,c
  4139   0125B4  6E2E               	movwf	(btemp+1)^0,c
  4140   0125B6  C02D  FFE6         	movff	btemp,postinc1
  4141   0125BA  C02E  FFE6         	movff	btemp+1,postinc1
  4142   0125BE  ECF2  F0A1         	call	_Event_setDelay	;wreg free
  4143   0125C2                     
  4144                           ;xf/xf.c: 114:         *tmid = XF_scheduleTimer(tm, ev, inISR);
  4145                           ;stkvar	_inISR @ sp[(-3)+-7]
  4146   0125C2  0EF6               	movlw	-10
  4147   0125C4  50E3               	movf	plusw1,w,c
  4148   0125C6  6EE6               	movwf	postinc1,c
  4149                           
  4150                           ;stkvar	_ev @ sp[(-4)+-6]
  4151   0125C8  0EF6               	movlw	246
  4152   0125CA  24E1               	addwf	fsr1l,w,c
  4153   0125CC  6ED9               	movwf	fsr2l,c
  4154   0125CE  0EFF               	movlw	255
  4155   0125D0  20E2               	addwfc	fsr1h,w,c
  4156   0125D2  6EDA               	movwf	fsr2h,c
  4157   0125D4  0E06               	movlw	6
  4158   0125D6                     u1911:
  4159   0125D6  CFDE FFE6          	movff	postinc2,postinc1
  4160   0125DA  2CE8               	decfsz	wreg,w,c
  4161   0125DC  EFEB  F092         	goto	u1911
  4162                           
  4163                           ;stkvar	_tm @ sp[(-10)+0]
  4164   0125E0  0EF6               	movlw	-10
  4165   0125E2  CFE3 FFE6          	movff	plusw1,postinc1
  4166   0125E6  CFE3 FFE6          	movff	plusw1,postinc1
  4167   0125EA  ECC3  F098         	call	_XF_scheduleTimer	;wreg free
  4168                           
  4169                           ;stkvar	_tmid @ sp[(-3)+-9]
  4170   0125EE  0EF4               	movlw	-12
  4171   0125F0  CFE3 FFD9          	movff	plusw1,fsr2l
  4172   0125F4  0EF5               	movlw	-11
  4173   0125F6  CFE3 FFDA          	movff	plusw1,fsr2h
  4174   0125FA  C02D  FFDF         	movff	btemp,indf2
  4175                           
  4176                           ;xf/xf.c: 115:     }
  4177   0125FE  EF68  F093         	goto	l4104
  4178   012602                     l4084:
  4179                           
  4180                           ;xf/xf.c: 117:     {;xf/xf.c: 118:         ENTERCRITICAL(inISR);
  4181                           ;stkvar	_inISR @ sp[(-3)+-7]
  4182   012602  0EF6               	movlw	-10
  4183   012604  50E3               	movf	plusw1,w,c
  4184   012606  6EE6               	movwf	postinc1,c
  4185   012608  ECCD  F0A2         	call	_ENTERCRITICAL	;wreg free
  4186   01260C                     
  4187                           ;xf/xf.c: 119:         if((theXF.countEvt+1) >= 30)
  4188   01260C  EE23  F0DF         	lfsr	2,_theXF+279
  4189   012610  50DF               	movf	indf2,w,c
  4190   012612  6E37               	movwf	(btemp+10)^0,c
  4191   012614  6A38               	clrf	(btemp+11)^0,c
  4192   012616  0E01               	movlw	1
  4193   012618  2637               	addwf	(btemp+10)^0,f,c
  4194   01261A  0E00               	movlw	0
  4195   01261C  2238               	addwfc	(btemp+11)^0,f,c
  4196   01261E  BE38               	btfsc	(btemp+11)^0,7,c
  4197   012620  EF1B  F093         	goto	u1921
  4198   012624  5038               	movf	(btemp+11)^0,w,c
  4199   012626  E109               	bnz	u1920
  4200   012628  0E1E               	movlw	30
  4201   01262A  5C37               	subwf	(btemp+10)^0,w,c
  4202   01262C  A0D8               	btfss	status,0,c
  4203   01262E  EF1B  F093         	goto	u1921
  4204   012632  EF1D  F093         	goto	u1920
  4205   012636                     u1921:
  4206   012636  EF1F  F093         	goto	l4090
  4207   01263A                     u1920:
  4208   01263A                     
  4209                           ;xf/xf.c: 120:         {;xf/xf.c: 121:             XF_noMoreEvent();
  4210   01263A  ECF3  F0A2         	call	_XF_noMoreEvent	;wreg free
  4211   01263E                     l4090:
  4212                           
  4213                           ;xf/xf.c: 123:         theXF.countEvt++;
  4214   01263E  C3DF  FFE8         	movff	_theXF+279,wreg
  4215   012642  0F01               	addlw	1
  4216   012644  CFE8 F3DF          	movff	wreg,_theXF+279
  4217   012648                     
  4218                           ;xf/xf.c: 124:         if(theXF.maxEvt < theXF.countEvt)
  4219   012648  EE23  F0DF         	lfsr	2,_theXF+279
  4220   01264C  EE03  F0DE         	lfsr	0,_theXF+278
  4221   012650  50DE               	movf	postinc2,w,c
  4222   012652  5CEE               	subwf	postinc0,w,c
  4223   012654  B0D8               	btfsc	status,0,c
  4224   012656  EF2F  F093         	goto	u1931
  4225   01265A  EF31  F093         	goto	u1930
  4226   01265E                     u1931:
  4227   01265E  EF33  F093         	goto	l4096
  4228   012662                     u1930:
  4229   012662                     
  4230                           ;xf/xf.c: 125:         {;xf/xf.c: 126:             theXF.maxEvt = theXF.countEvt;
  4231   012662  C3DF  F3DE         	movff	_theXF+279,_theXF+278
  4232   012666                     l4096:
  4233                           
  4234                           ;xf/xf.c: 128:         temp = (theXF.in+1) % (uint8_t)(30);
  4235   012666  0E1E               	movlw	30
  4236   012668  6EE6               	movwf	postinc1,c
  4237   01266A  0E00               	movlw	0
  4238   01266C  6EE6               	movwf	postinc1,c
  4239   01266E  EE23  F0DC         	lfsr	2,_theXF+276
  4240   012672  50DF               	movf	indf2,w,c
  4241   012674  6E37               	movwf	(btemp+10)^0,c
  4242   012676  6A38               	clrf	(btemp+11)^0,c
  4243   012678  0E01               	movlw	1
  4244   01267A  2637               	addwf	(btemp+10)^0,f,c
  4245   01267C  0E00               	movlw	0
  4246   01267E  2238               	addwfc	(btemp+11)^0,f,c
  4247   012680  C037  FFE6         	movff	btemp+10,postinc1
  4248   012684  C038  FFE6         	movff	btemp+11,postinc1
  4249   012688  EC19  F094         	call	___awmod	;wreg free
  4250                           
  4251                           ;stkvar	_temp @ sp[(-3)+2]
  4252   01268C  0EFF               	movlw	-1
  4253   01268E  C02D  FFE3         	movff	btemp,plusw1
  4254   012692                     
  4255                           ;xf/xf.c: 129:         theXF.eventQueue[theXF.in] = ev;
  4256                           ;stkvar	_ev @ sp[(-3)+-6]
  4257   012692  0EF7               	movlw	247
  4258   012694  24E1               	addwf	fsr1l,w,c
  4259   012696  6ED9               	movwf	fsr2l,c
  4260   012698  0EFF               	movlw	255
  4261   01269A  20E2               	addwfc	fsr1h,w,c
  4262   01269C  6EDA               	movwf	fsr2h,c
  4263   01269E  EE03  F0DC         	lfsr	0,_theXF+276
  4264   0126A2  50EF               	movf	indf0,w,c
  4265   0126A4  0D06               	mullw	6
  4266   0126A6  0E28               	movlw	low (_theXF+96)
  4267   0126A8  24F3               	addwf	243,w,c
  4268   0126AA  6EE9               	movwf	fsr0l,c
  4269   0126AC  0E03               	movlw	high (_theXF+96)
  4270   0126AE  20F4               	addwfc	prodh,w,c
  4271   0126B0  6EEA               	movwf	fsr0h,c
  4272   0126B2  0E05               	movlw	5
  4273   0126B4                     u1941:
  4274   0126B4  CFDB FFEB          	movff	plusw2,plusw0
  4275   0126B8  06E8               	decf	wreg,f,c
  4276   0126BA  E2FC               	bc	u1941
  4277   0126BC                     
  4278                           ;xf/xf.c: 130:         theXF.in = temp;
  4279                           ;stkvar	_temp @ sp[(-3)+2]
  4280   0126BC  0EFF               	movlw	-1
  4281   0126BE  CFE3 F038          	movff	plusw1,btemp+11
  4282   0126C2  C038  F3DC         	movff	btemp+11,_theXF+276
  4283   0126C6                     
  4284                           ;xf/xf.c: 131:         LEAVECRITICAL(inISR);
  4285                           ;stkvar	_inISR @ sp[(-3)+-7]
  4286   0126C6  0EF6               	movlw	-10
  4287   0126C8  50E3               	movf	plusw1,w,c
  4288   0126CA  6EE6               	movwf	postinc1,c
  4289   0126CC  ECC1  F0A2         	call	_LEAVECRITICAL	;wreg free
  4290   0126D0                     l4104:
  4291                           
  4292                           ;xf/xf.c: 133:     return 1;
  4293   0126D0  0E01               	movlw	1
  4294   0126D2  6E2D               	movwf	btemp^0,c
  4295   0126D4                     
  4296                           ; _XF_pushEvent: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, 
      +                          argsize = 9, vargsize = 0
  4297   0126D4  0EF4               	movlw	244
  4298   0126D6  26E1               	addwf	fsr1l,f,c
  4299   0126D8  0EFF               	movlw	255
  4300   0126DA  22E2               	addwfc	fsr1h,f,c
  4301   0126DC  0012               	return		;funcret
  4302   0126DE                     __end_of_XF_pushEvent:
  4303                           	callstack 0
  4304                           
  4305 ;; *************** function _XF_scheduleTimer *****************
  4306 ;; Defined at:
  4307 ;;		line 169 in file "xf/xf.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  tm              2  [STACK] unsigned short 
  4310 ;;  ev              6  [STACK] struct Event_
  4311 ;;  inISR           1  [STACK] _Bool 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  i               1  [STACK] unsigned char 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1  [STACK] unsigned char 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl, prodh
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;Total ram usage:        0 bytes
  4328 ;; Hardware stack levels used: 1
  4329 ;; Hardware stack levels required when called: 8
  4330 ;; This function calls:
  4331 ;;		_ENTERCRITICAL
  4332 ;;		_LEAVECRITICAL
  4333 ;;		_XF_noMoreTimer
  4334 ;; This function is called by:
  4335 ;;		_XF_pushEvent
  4336 ;; This function uses a reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text4
  4340   013186                     __ptext4:
  4341                           	callstack 0
  4342   013186                     _XF_scheduleTimer:
  4343                           	callstack 0
  4344                           
  4345                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 9, argsize = 9 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4346   013186  52E6               	movf	postinc1,f,c
  4347   013188                     
  4348                           ;xf/xf.c: 169: uint8_t XF_scheduleTimer(uint16_t tm, Event ev, _Bool inISR);xf/xf.c: 170
      +                          : {;xf/xf.c: 171:     uint8_t i;;xf/xf.c: 173:     ENTERCRITICAL(inISR);
  4349                           ;stkvar	_inISR @ sp[(-1)+-9]
  4350   013188  0EF6               	movlw	-10
  4351   01318A  50E3               	movf	plusw1,w,c
  4352   01318C  6EE6               	movwf	postinc1,c
  4353   01318E  ECCD  F0A2         	call	_ENTERCRITICAL	;wreg free
  4354                           
  4355                           ;xf/xf.c: 174:     for (i=0; i<12; i++)
  4356                           ;stkvar	_i @ sp[(-1)+0]
  4357   013192  0EFF               	movlw	-1
  4358   013194  6AE3               	clrf	plusw1,c
  4359   013196                     l3954:
  4360                           
  4361                           ;xf/xf.c: 175:     {;xf/xf.c: 176:         if (theXF.timerList[i].ev.id == 0)
  4362                           ;stkvar	_i @ sp[(-1)+0]
  4363   013196  0EFF               	movlw	-1
  4364   013198  50E3               	movf	plusw1,w,c
  4365   01319A  0D08               	mullw	8
  4366   01319C  0ECA               	movlw	low (_theXF+2)
  4367   01319E  24F3               	addwf	243,w,c
  4368   0131A0  6ED9               	movwf	fsr2l,c
  4369   0131A2  0E02               	movlw	high (_theXF+2)
  4370   0131A4  20F4               	addwfc	prodh,w,c
  4371   0131A6  6EDA               	movwf	fsr2h,c
  4372   0131A8  50DF               	movf	indf2,w,c
  4373   0131AA  A4D8               	btfss	status,2,c
  4374   0131AC  EFDA  F098         	goto	u1761
  4375   0131B0  EFDC  F098         	goto	u1760
  4376   0131B4                     u1761:
  4377   0131B4  EF22  F099         	goto	l3972
  4378   0131B8                     u1760:
  4379   0131B8                     
  4380                           ;xf/xf.c: 177:         {;xf/xf.c: 178:             theXF.timerList[i].tm = tm;
  4381                           ;stkvar	_tm @ sp[(-1)+-2]
  4382   0131B8  50E1               	movf	fsr1l,w,c
  4383   0131BA  0FFD               	addlw	-3
  4384   0131BC  6ED9               	movwf	fsr2l,c
  4385   0131BE  50E2               	movf	fsr1h,w,c
  4386   0131C0  6EDA               	movwf	fsr2h,c
  4387   0131C2  0EFF               	movlw	255
  4388   0131C4  22DA               	addwfc	fsr2h,f,c
  4389                           
  4390                           ;stkvar	_i @ sp[(-1)+0]
  4391   0131C6  0EFF               	movlw	-1
  4392   0131C8  50E3               	movf	plusw1,w,c
  4393   0131CA  0D08               	mullw	8
  4394   0131CC  0EC8               	movlw	low _theXF
  4395   0131CE  24F3               	addwf	243,w,c
  4396   0131D0  6EE9               	movwf	fsr0l,c
  4397   0131D2  0E02               	movlw	high _theXF
  4398   0131D4  20F4               	addwfc	prodh,w,c
  4399   0131D6  6EEA               	movwf	fsr0h,c
  4400   0131D8  CFDE FFEE          	movff	postinc2,postinc0
  4401   0131DC  CFDD FFED          	movff	postdec2,postdec0
  4402                           
  4403                           ;xf/xf.c: 179:             theXF.timerList[i].ev = ev;
  4404                           ;stkvar	_ev @ sp[(-1)+-8]
  4405   0131E0  0EF7               	movlw	247
  4406   0131E2  24E1               	addwf	fsr1l,w,c
  4407   0131E4  6ED9               	movwf	fsr2l,c
  4408   0131E6  0EFF               	movlw	255
  4409   0131E8  20E2               	addwfc	fsr1h,w,c
  4410   0131EA  6EDA               	movwf	fsr2h,c
  4411                           
  4412                           ;stkvar	_i @ sp[(-1)+0]
  4413   0131EC  0EFF               	movlw	-1
  4414   0131EE  50E3               	movf	plusw1,w,c
  4415   0131F0  0D08               	mullw	8
  4416   0131F2  0ECA               	movlw	low (_theXF+2)
  4417   0131F4  24F3               	addwf	243,w,c
  4418   0131F6  6EE9               	movwf	fsr0l,c
  4419   0131F8  0E02               	movlw	high (_theXF+2)
  4420   0131FA  20F4               	addwfc	prodh,w,c
  4421   0131FC  6EEA               	movwf	fsr0h,c
  4422   0131FE  0E05               	movlw	5
  4423   013200                     u1771:
  4424   013200  CFDB FFEB          	movff	plusw2,plusw0
  4425   013204  06E8               	decf	wreg,f,c
  4426   013206  E2FC               	bc	u1771
  4427   013208                     
  4428                           ;xf/xf.c: 180:             theXF.countTmr++;
  4429   013208  C3E1  FFE8         	movff	_theXF+281,wreg
  4430   01320C  0F01               	addlw	1
  4431   01320E  CFE8 F3E1          	movff	wreg,_theXF+281
  4432   013212                     
  4433                           ;xf/xf.c: 181:             if(theXF.countTmr > theXF.maxTmr)
  4434   013212  EE23  F0E1         	lfsr	2,_theXF+281
  4435   013216  EE03  F0E0         	lfsr	0,_theXF+280
  4436   01321A  50DE               	movf	postinc2,w,c
  4437   01321C  5CEE               	subwf	postinc0,w,c
  4438   01321E  B0D8               	btfsc	status,0,c
  4439   013220  EF14  F099         	goto	u1781
  4440   013224  EF16  F099         	goto	u1780
  4441   013228                     u1781:
  4442   013228  EF18  F099         	goto	l3964
  4443   01322C                     u1780:
  4444   01322C                     
  4445                           ;xf/xf.c: 182:             {;xf/xf.c: 183:                 theXF.maxTmr = theXF.countTmr
      +                          ;
  4446   01322C  C3E1  F3E0         	movff	_theXF+281,_theXF+280
  4447   013230                     l3964:
  4448                           
  4449                           ;xf/xf.c: 185:             LEAVECRITICAL(inISR);
  4450                           ;stkvar	_inISR @ sp[(-1)+-9]
  4451   013230  0EF6               	movlw	-10
  4452   013232  50E3               	movf	plusw1,w,c
  4453   013234  6EE6               	movwf	postinc1,c
  4454   013236  ECC1  F0A2         	call	_LEAVECRITICAL	;wreg free
  4455   01323A                     
  4456                           ;xf/xf.c: 186:             return i;
  4457                           ;stkvar	_i @ sp[(-1)+0]
  4458   01323A  0EFF               	movlw	-1
  4459   01323C  CFE3 F02D          	movff	plusw1,btemp
  4460   013240  EF33  F099         	goto	l1234
  4461   013244                     l3972:
  4462                           
  4463                           ;xf/xf.c: 189:     }
  4464                           ;stkvar	_i @ sp[(-1)+0]
  4465   013244  0EFF               	movlw	-1
  4466   013246  2AE3               	incf	plusw1,f,c
  4467   013248                     
  4468                           ;stkvar	_i @ sp[(-1)+0]
  4469   013248  0EFF               	movlw	-1
  4470   01324A  CFE3 F02D          	movff	plusw1,btemp
  4471   01324E  0E0B               	movlw	11
  4472   013250  642D               	cpfsgt	btemp^0,c
  4473   013252  EF2D  F099         	goto	u1791
  4474   013256  EF2F  F099         	goto	u1790
  4475   01325A                     u1791:
  4476   01325A  EFCB  F098         	goto	l3954
  4477   01325E                     u1790:
  4478   01325E                     
  4479                           ;xf/xf.c: 190:     XF_noMoreTimer();
  4480   01325E  ECF0  F0A2         	call	_XF_noMoreTimer	;wreg free
  4481   013262  EF18  F099         	goto	l3964
  4482   013266                     l1234:
  4483                           
  4484                           ; _XF_scheduleTimer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           9, argsize = 9, vargsize = 0
  4485   013266  0EF6               	movlw	246
  4486   013268  26E1               	addwf	fsr1l,f,c
  4487   01326A  0EFF               	movlw	255
  4488   01326C  22E2               	addwfc	fsr1h,f,c
  4489   01326E  0012               	return		;funcret
  4490   013270                     __end_of_XF_scheduleTimer:
  4491                           	callstack 0
  4492                           
  4493 ;; *************** function _XF_noMoreTimer *****************
  4494 ;; Defined at:
  4495 ;;		line 69 in file "xf/xf.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  1  [STACK] void 
  4502 ;; Registers used:
  4503 ;;		None
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;Total ram usage:        0 bytes
  4514 ;; Hardware stack levels used: 1
  4515 ;; Hardware stack levels required when called: 7
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_XF_scheduleTimer
  4520 ;; This function uses a reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text5
  4524   0145E0                     __ptext5:
  4525                           	callstack 0
  4526   0145E0                     _XF_noMoreTimer:
  4527                           	callstack 9
  4528   0145E0                     l1206:
  4529   0145E0  EFF0  F0A2         	goto	l1206
  4530                           
  4531                           ; _XF_noMoreTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4532   0145E4  0012               	return		;funcret
  4533   0145E6                     __end_of_XF_noMoreTimer:
  4534                           	callstack 0
  4535                           
  4536 ;; *************** function _XF_noMoreEvent *****************
  4537 ;; Defined at:
  4538 ;;		line 65 in file "xf/xf.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;		None
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;		None
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1  [STACK] void 
  4545 ;; Registers used:
  4546 ;;		None
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;Total ram usage:        0 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 7
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_XF_pushEvent
  4563 ;; This function uses a reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text6
  4567   0145E6                     __ptext6:
  4568                           	callstack 0
  4569   0145E6                     _XF_noMoreEvent:
  4570                           	callstack 10
  4571   0145E6                     l1200:
  4572   0145E6  EFF3  F0A2         	goto	l1200
  4573                           
  4574                           ; _XF_noMoreEvent: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  4575   0145EA  0012               	return		;funcret
  4576   0145EC                     __end_of_XF_noMoreEvent:
  4577                           	callstack 0
  4578                           
  4579 ;; *************** function _Event_setDelay *****************
  4580 ;; Defined at:
  4581 ;;		line 32 in file "xf/event.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  me              2  [STACK] PTR struct Event_
  4584 ;;		 -> ev(6), 
  4585 ;;  delay           2  [STACK] unsigned short 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1  [STACK] void 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        0 bytes
  4602 ;; Hardware stack levels used: 1
  4603 ;; Hardware stack levels required when called: 7
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_XF_pushEvent
  4608 ;;		_XF_post
  4609 ;; This function uses a reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text7
  4613   0143E4                     __ptext7:
  4614                           	callstack 0
  4615   0143E4                     _Event_setDelay:
  4616                           	callstack 10
  4617   0143E4                     
  4618                           ;xf/event.c: 32: void Event_setDelay(Event* me, uint16_t delay);xf/event.c: 33: {;xf/eve
      +                          nt.c: 34:     me->delay = delay;
  4619                           ;stkvar	_delay @ sp[(0)+-4]
  4620   0143E4  50E1               	movf	fsr1l,w,c
  4621   0143E6  0FFC               	addlw	-4
  4622   0143E8  6ED9               	movwf	fsr2l,c
  4623   0143EA  50E2               	movf	fsr1h,w,c
  4624   0143EC  6EDA               	movwf	fsr2h,c
  4625   0143EE  0EFF               	movlw	255
  4626   0143F0  22DA               	addwfc	fsr2h,f,c
  4627                           
  4628                           ;stkvar	_me @ sp[(0)+-2]
  4629   0143F2  0EFE               	movlw	-2
  4630   0143F4  CFE3 F037          	movff	plusw1,btemp+10
  4631   0143F8  0EFF               	movlw	-1
  4632   0143FA  CFE3 F038          	movff	plusw1,btemp+11
  4633   0143FE  0E04               	movlw	4
  4634   014400  2437               	addwf	(btemp+10)^0,w,c
  4635   014402  6EE9               	movwf	fsr0l,c
  4636   014404  0E00               	movlw	0
  4637   014406  2038               	addwfc	(btemp+11)^0,w,c
  4638   014408  6EEA               	movwf	fsr0h,c
  4639   01440A  CFDE FFEE          	movff	postinc2,postinc0
  4640   01440E  CFDD FFED          	movff	postdec2,postdec0
  4641   014412                     
  4642                           ; _Event_setDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4
      +                          , argsize = 4, vargsize = 0
  4643   014412  52E5               	movf	postdec1,f,c
  4644   014414  52E5               	movf	postdec1,f,c
  4645   014416  52E5               	movf	postdec1,f,c
  4646   014418  52E5               	movf	postdec1,f,c
  4647   01441A  0012               	return		;funcret
  4648   01441C                     __end_of_Event_setDelay:
  4649                           	callstack 0
  4650                           
  4651 ;; *************** function _Event_getDelay *****************
  4652 ;; Defined at:
  4653 ;;		line 37 in file "xf/event.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  me              2  [STACK] PTR struct Event_
  4656 ;;		 -> ev(6), 
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;		None
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  2  [STACK] unsigned short 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;Total ram usage:        0 bytes
  4673 ;; Hardware stack levels used: 1
  4674 ;; Hardware stack levels required when called: 7
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		_XF_pushEvent
  4679 ;; This function uses a reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text8
  4683   014504                     __ptext8:
  4684                           	callstack 0
  4685   014504                     _Event_getDelay:
  4686                           	callstack 10
  4687   014504                     
  4688                           ;xf/event.c: 37: uint16_t Event_getDelay(Event* me);xf/event.c: 38: {;xf/event.c: 39:   
      +                            return me->delay;
  4689                           ;stkvar	_me @ sp[(0)+-2]
  4690   014504  0EFE               	movlw	-2
  4691   014506  CFE3 F037          	movff	plusw1,btemp+10
  4692   01450A  0EFF               	movlw	-1
  4693   01450C  CFE3 F038          	movff	plusw1,btemp+11
  4694   014510  0E04               	movlw	4
  4695   014512  2437               	addwf	(btemp+10)^0,w,c
  4696   014514  6ED9               	movwf	fsr2l,c
  4697   014516  0E00               	movlw	0
  4698   014518  2038               	addwfc	(btemp+11)^0,w,c
  4699   01451A  6EDA               	movwf	fsr2h,c
  4700   01451C  CFDE F02D          	movff	postinc2,btemp
  4701   014520  CFDD F02E          	movff	postdec2,btemp+1
  4702   014524                     
  4703                           ; _Event_getDelay: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  4704   014524  52E5               	movf	postdec1,f,c
  4705   014526  52E5               	movf	postdec1,f,c
  4706   014528  0012               	return		;funcret
  4707   01452A                     __end_of_Event_getDelay:
  4708                           	callstack 0
  4709                           
  4710 ;; *************** function _Event_setPE *****************
  4711 ;; Defined at:
  4712 ;;		line 12 in file "xf/event.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  me              2  [STACK] PTR struct Event_
  4715 ;;		 -> ev(6), 
  4716 ;;  processEvent    3  [STACK] PTR FTN(PTR struct Event
  4717 ;;		 -> lightControl_Process(1), 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1  [STACK] void 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;Total ram usage:        0 bytes
  4734 ;; Hardware stack levels used: 1
  4735 ;; Hardware stack levels required when called: 7
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_XF_post
  4740 ;; This function uses a reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text9
  4744   01436E                     __ptext9:
  4745                           	callstack 0
  4746   01436E                     _Event_setPE:
  4747                           	callstack 21
  4748   01436E                     
  4749                           ;xf/event.c: 12: void Event_setPE(Event* me, processEventT processEvent);xf/event.c: 13:
      +                           {;xf/event.c: 14:     me->processEvent = processEvent;
  4750                           ;stkvar	_processEvent @ sp[(0)+-5]
  4751   01436E  50E1               	movf	fsr1l,w,c
  4752   014370  0FFB               	addlw	-5
  4753   014372  6ED9               	movwf	fsr2l,c
  4754   014374  50E2               	movf	fsr1h,w,c
  4755   014376  6EDA               	movwf	fsr2h,c
  4756   014378  0EFF               	movlw	255
  4757   01437A  22DA               	addwfc	fsr2h,f,c
  4758                           
  4759                           ;stkvar	_me @ sp[(0)+-2]
  4760   01437C  0EFE               	movlw	-2
  4761   01437E  CFE3 F037          	movff	plusw1,btemp+10
  4762   014382  0EFF               	movlw	-1
  4763   014384  CFE3 F038          	movff	plusw1,btemp+11
  4764   014388  0E01               	movlw	1
  4765   01438A  2437               	addwf	(btemp+10)^0,w,c
  4766   01438C  6EE9               	movwf	fsr0l,c
  4767   01438E  0E00               	movlw	0
  4768   014390  2038               	addwfc	(btemp+11)^0,w,c
  4769   014392  6EEA               	movwf	fsr0h,c
  4770   014394  CFDE FFEE          	movff	postinc2,postinc0
  4771   014398  CFDE FFEE          	movff	postinc2,postinc0
  4772   01439C  CFDE FFEE          	movff	postinc2,postinc0
  4773   0143A0                     
  4774                           ; _Event_setPE: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  4775   0143A0  0EFB               	movlw	251
  4776   0143A2  26E1               	addwf	fsr1l,f,c
  4777   0143A4  0EFF               	movlw	255
  4778   0143A6  22E2               	addwfc	fsr1h,f,c
  4779   0143A8  0012               	return		;funcret
  4780   0143AA                     __end_of_Event_setPE:
  4781                           	callstack 0
  4782                           
  4783 ;; *************** function _Event_setId *****************
  4784 ;; Defined at:
  4785 ;;		line 22 in file "xf/event.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  me              2  [STACK] PTR struct Event_
  4788 ;;		 -> ev(6), 
  4789 ;;  eventID         1  [STACK] unsigned char 
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;		None
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  1  [STACK] void 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;Total ram usage:        0 bytes
  4806 ;; Hardware stack levels used: 1
  4807 ;; Hardware stack levels required when called: 7
  4808 ;; This function calls:
  4809 ;;		Nothing
  4810 ;; This function is called by:
  4811 ;;		_XF_post
  4812 ;; This function uses a reentrant model
  4813 ;;
  4814                           
  4815                           	psect	text10
  4816   014568                     __ptext10:
  4817                           	callstack 0
  4818   014568                     _Event_setId:
  4819                           	callstack 21
  4820   014568                     
  4821                           ;xf/event.c: 22: void Event_setId(Event* me, evIDT eventID);xf/event.c: 23: {;xf/event.c
      +                          : 24:     me->id = eventID;
  4822                           ;stkvar	_eventID @ sp[(0)+-3]
  4823                           ;stkvar	_me @ sp[(0)+-2]
  4824   014568  0EFE               	movlw	-2
  4825   01456A  CFE3 FFD9          	movff	plusw1,fsr2l
  4826   01456E  0EFF               	movlw	-1
  4827   014570  CFE3 FFDA          	movff	plusw1,fsr2h
  4828   014574  0EFD               	movlw	-3
  4829   014576  CFE3 FFDF          	movff	plusw1,indf2
  4830   01457A                     
  4831                           ; _Event_setId: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, a
      +                          rgsize = 3, vargsize = 0
  4832   01457A  52E5               	movf	postdec1,f,c
  4833   01457C  52E5               	movf	postdec1,f,c
  4834   01457E  52E5               	movf	postdec1,f,c
  4835   014580  0012               	return		;funcret
  4836   014582                     __end_of_Event_setId:
  4837                           	callstack 0
  4838                           
  4839 ;; *************** function _CanReceive *****************
  4840 ;; Defined at:
  4841 ;;		line 242 in file "can/can.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  4844 ;;		 -> rxObj(16), 
  4845 ;;  rxd             2  [STACK] PTR unsigned char 
  4846 ;;		 -> rxdata(8), 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  rxFlags         1  [STACK] enum E5591
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1  [STACK] char 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        0 bytes
  4863 ;; Hardware stack levels used: 1
  4864 ;; Hardware stack levels required when called: 11
  4865 ;; This function calls:
  4866 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
  4867 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  4868 ;; This function is called by:
  4869 ;;		_updateCarState
  4870 ;; This function uses a reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text11
  4874   01409E                     __ptext11:
  4875                           	callstack 0
  4876   01409E                     _CanReceive:
  4877                           	callstack 0
  4878                           
  4879                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  4880   01409E  52E6               	movf	postinc1,f,c
  4881   0140A0                     
  4882                           ;can/can.c: 242: int8_t CanReceive(CAN_RX_MSGOBJ * rxObj, uint8_t * rxd);can/can.c: 243:
      +                           {;can/can.c: 244:   CAN_RX_FIFO_EVENT rxFlags;;can/can.c: 245:   DRV_CANFDSPI_ReceiveCh
      +                          annelEventGet(CAN_FIFO_CH2,&rxFlags);
  4883                           ;stkvar	_rxFlags @ sp[(-1)+0]
  4884   0140A0  0EFF               	movlw	255
  4885   0140A2  24E1               	addwf	fsr1l,w,c
  4886   0140A4  6E2D               	movwf	btemp^0,c
  4887   0140A6  0EFF               	movlw	255
  4888   0140A8  20E2               	addwfc	fsr1h,w,c
  4889   0140AA  6E2E               	movwf	(btemp+1)^0,c
  4890   0140AC  C02D  FFE6         	movff	btemp,postinc1
  4891   0140B0  C02E  FFE6         	movff	btemp+1,postinc1
  4892   0140B4  0E02               	movlw	2
  4893   0140B6  6EE6               	movwf	postinc1,c
  4894   0140B8  EC23  F09E         	call	_DRV_CANFDSPI_ReceiveChannelEventGet	;wreg free
  4895   0140BC                     
  4896                           ;can/can.c: 246:   if(rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
  4897                           ;stkvar	_rxFlags @ sp[(-1)+0]
  4898   0140BC  0EFF               	movlw	-1
  4899   0140BE  A0E3               	btfss	plusw1,0,c
  4900   0140C0  EF64  F0A0         	goto	u2581
  4901   0140C4  EF66  F0A0         	goto	u2580
  4902   0140C8                     u2581:
  4903   0140C8  EF7A  F0A0         	goto	l4680
  4904   0140CC                     u2580:
  4905   0140CC                     
  4906                           ;can/can.c: 247:   {;can/can.c: 248:     DRV_CANFDSPI_ReceiveMessageGet(CAN_FIFO_CH2,rxO
      +                          bj,rxd,8);
  4907   0140CC  0E08               	movlw	8
  4908   0140CE  6EE6               	movwf	postinc1,c
  4909                           
  4910                           ;stkvar	_rxd @ sp[(-2)+-4]
  4911   0140D0  0EFA               	movlw	-6
  4912   0140D2  CFE3 FFE6          	movff	plusw1,postinc1
  4913   0140D6  CFE3 FFE6          	movff	plusw1,postinc1
  4914                           
  4915                           ;stkvar	_rxObj @ sp[(-4)+-2]
  4916   0140DA  0EFA               	movlw	-6
  4917   0140DC  CFE3 FFE6          	movff	plusw1,postinc1
  4918   0140E0  CFE3 FFE6          	movff	plusw1,postinc1
  4919   0140E4  0E02               	movlw	2
  4920   0140E6  6EE6               	movwf	postinc1,c
  4921   0140E8  ECA6  F083         	call	_DRV_CANFDSPI_ReceiveMessageGet	;wreg free
  4922   0140EC                     
  4923                           ;can/can.c: 249:     return 0;
  4924   0140EC  0E00               	movlw	0
  4925   0140EE  6E2D               	movwf	btemp^0,c
  4926   0140F0  EF7C  F0A0         	goto	l165
  4927   0140F4                     l4680:
  4928                           
  4929                           ;can/can.c: 251:   return -1;
  4930   0140F4  0EFF               	movlw	255
  4931   0140F6  6E2D               	movwf	btemp^0,c
  4932   0140F8                     l165:
  4933                           
  4934                           ; _CanReceive: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  4935   0140F8  0EFB               	movlw	251
  4936   0140FA  26E1               	addwf	fsr1l,f,c
  4937   0140FC  0EFF               	movlw	255
  4938   0140FE  22E2               	addwfc	fsr1h,f,c
  4939   014100  0012               	return		;funcret
  4940   014102                     __end_of_CanReceive:
  4941                           	callstack 0
  4942                           
  4943 ;; *************** function _DRV_CANFDSPI_ReceiveMessageGet *****************
  4944 ;; Defined at:
  4945 ;;		line 1236 in file "can/can.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  channel         1  [STACK] enum E5290
  4948 ;;  rxObj           2  [STACK] PTR struct _CAN_RX_MSGOB
  4949 ;;		 -> rxObj(16), txMsg(16), 
  4950 ;;  rxd             2  [STACK] PTR unsigned char 
  4951 ;;		 -> rxdata(8), 
  4952 ;;  nBytes          1  [STACK] unsigned char 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  temp32          4  [STACK] unsigned long 
  4955 ;;  ba             76  [STACK] unsigned char [76]
  4956 ;;  fifoReg        12  [STACK] unsigned long [3]
  4957 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  4958 ;;  myReg           4  [STACK] struct _REG_t
  4959 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  4960 ;;  ciFifoSta       4    0        struct _REG_CiFIFOSTA
  4961 ;;  a               2  [STACK] unsigned short 
  4962 ;;  i               1  [STACK] unsigned char 
  4963 ;;  n               1  [STACK] unsigned char 
  4964 ;;  spiTransferE    1  [STACK] char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1  [STACK] char 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:        0 bytes
  4979 ;; Hardware stack levels used: 1
  4980 ;; Hardware stack levels required when called: 10
  4981 ;; This function calls:
  4982 ;;		_DRV_CANFDSPI_ReadByteArray
  4983 ;;		_DRV_CANFDSPI_ReadWordArray
  4984 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
  4985 ;; This function is called by:
  4986 ;;		_CanReceive
  4987 ;; This function uses a reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text12
  4991   01074C                     __ptext12:
  4992                           	callstack 0
  4993   01074C                     _DRV_CANFDSPI_ReceiveMessageGet:
  4994                           	callstack 0
  4995                           
  4996                           ; autosize = 110, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 v
      +                          argsize = 0, retsize = 0 argfudge = 0
  4997   01074C  0E6E               	movlw	110
  4998   01074E  26E1               	addwf	fsr1l,f,c
  4999   010750  0E00               	movlw	0
  5000   010752  22E2               	addwfc	fsr1h,f,c
  5001   010754                     
  5002                           ;can/can.c: 1241:     uint8_t i = 0;
  5003                           ;stkvar	_i @ sp[(-110)+107]
  5004   010754  0EFD               	movlw	-3
  5005   010756  6AE3               	clrf	plusw1,c
  5006                           
  5007                           ;can/can.c: 1242:     uint16_t a;;can/can.c: 1243:     uint32_t fifoReg[3];;can/can.c: 1
      +                          244:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1245:     __attribute__((unused)) REG_CiFIF
      +                          OSTA ciFifoSta;;can/can.c: 1246:     REG_CiFIFOUA ciFifoUa;;can/can.c: 1247:     int8_t 
      +                          spiTransferError = 0;
  5008                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5009   010758  0EFF               	movlw	-1
  5010   01075A  6AE3               	clrf	plusw1,c
  5011   01075C                     
  5012                           ;can/can.c: 1250:     a = 0x050 + (channel * (3*4));
  5013                           ;stkvar	_channel @ sp[(-110)+-1]
  5014   01075C  0E91               	movlw	-111
  5015   01075E  50E3               	movf	plusw1,w,c
  5016   010760  0D0C               	mullw	12
  5017   010762  0E50               	movlw	80
  5018   010764  26F3               	addwf	243,f,c
  5019   010766  0E00               	movlw	0
  5020   010768  22F4               	addwfc	244,f,c
  5021                           
  5022                           ;stkvar	_a @ sp[(-110)+105]
  5023   01076A  0EFB               	movlw	-5
  5024   01076C  CFF3 FFE3          	movff	prodl,plusw1
  5025   010770  0EFC               	movlw	-4
  5026   010772  CFF4 FFE3          	movff	prodh,plusw1
  5027   010776                     
  5028                           ;can/can.c: 1252:     spiTransferError = DRV_CANFDSPI_ReadWordArray( a, fifoReg, 3);
  5029   010776  0E03               	movlw	3
  5030   010778  6EE6               	movwf	postinc1,c
  5031   01077A  0E00               	movlw	0
  5032   01077C  6EE6               	movwf	postinc1,c
  5033                           
  5034                           ;stkvar	_fifoReg @ sp[(-112)+80]
  5035   01077E  0EE0               	movlw	224
  5036   010780  24E1               	addwf	fsr1l,w,c
  5037   010782  6E2D               	movwf	btemp^0,c
  5038   010784  0EFF               	movlw	255
  5039   010786  20E2               	addwfc	fsr1h,w,c
  5040   010788  6E2E               	movwf	(btemp+1)^0,c
  5041   01078A  C02D  FFE6         	movff	btemp,postinc1
  5042   01078E  C02E  FFE6         	movff	btemp+1,postinc1
  5043                           
  5044                           ;stkvar	_a @ sp[(-114)+105]
  5045   010792  0EF7               	movlw	-9
  5046   010794  CFE3 FFE6          	movff	plusw1,postinc1
  5047   010798  CFE3 FFE6          	movff	plusw1,postinc1
  5048   01079C  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  5049                           
  5050                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5051   0107A0  0EFF               	movlw	-1
  5052   0107A2  C02D  FFE3         	movff	btemp,plusw1
  5053   0107A6                     
  5054                           ;can/can.c: 1253:     if (spiTransferError) {
  5055                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5056   0107A6  0EFF               	movlw	-1
  5057   0107A8  50E3               	movf	plusw1,w,c
  5058   0107AA  B4D8               	btfsc	status,2,c
  5059   0107AC  EFDA  F083         	goto	u1971
  5060   0107B0  EFDC  F083         	goto	u1970
  5061   0107B4                     u1971:
  5062   0107B4  EFDE  F083         	goto	l4150
  5063   0107B8                     u1970:
  5064   0107B8  EF15  F087         	goto	l357
  5065   0107BC                     l4150:
  5066                           
  5067                           ;can/can.c: 1258:     ciFifoCon.word = fifoReg[0];
  5068                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5069   0107BC  0EE2               	movlw	-30
  5070   0107BE  CFE3 F035          	movff	plusw1,btemp+8
  5071   0107C2  0EE3               	movlw	-29
  5072   0107C4  CFE3 F036          	movff	plusw1,btemp+9
  5073   0107C8  0EE4               	movlw	-28
  5074   0107CA  CFE3 F037          	movff	plusw1,btemp+10
  5075   0107CE  0EE5               	movlw	-27
  5076   0107D0  CFE3 F038          	movff	plusw1,btemp+11
  5077                           
  5078                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5079   0107D4  0EEE               	movlw	-18
  5080   0107D6  C035  FFE3         	movff	btemp+8,plusw1
  5081   0107DA  0EEF               	movlw	-17
  5082   0107DC  C036  FFE3         	movff	btemp+9,plusw1
  5083   0107E0  0EF0               	movlw	-16
  5084   0107E2  C037  FFE3         	movff	btemp+10,plusw1
  5085   0107E6  0EF1               	movlw	-15
  5086   0107E8  C038  FFE3         	movff	btemp+11,plusw1
  5087   0107EC                     
  5088                           ;can/can.c: 1259:     if (ciFifoCon.txBF.TxEnable) {
  5089                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5090   0107EC  50E1               	movf	fsr1l,w,c
  5091   0107EE  0FEE               	addlw	-18
  5092   0107F0  6ED9               	movwf	fsr2l,c
  5093   0107F2  50E2               	movf	fsr1h,w,c
  5094   0107F4  6EDA               	movwf	fsr2h,c
  5095   0107F6  0EFF               	movlw	255
  5096   0107F8  22DA               	addwfc	fsr2h,f,c
  5097   0107FA  AEDF               	btfss	indf2,7,c
  5098   0107FC  EF02  F084         	goto	u1981
  5099   010800  EF04  F084         	goto	u1980
  5100   010804                     u1981:
  5101   010804  EF06  F084         	goto	l4156
  5102   010808                     u1980:
  5103   010808  EF15  F087         	goto	l357
  5104   01080C                     l4156:
  5105                           
  5106                           ;can/can.c: 1267:     ciFifoUa.word = fifoReg[2];
  5107                           ;stkvar	_fifoReg @ sp[(-110)+80]
  5108   01080C  0EEA               	movlw	234
  5109   01080E  24E1               	addwf	fsr1l,w,c
  5110   010810  6ED9               	movwf	fsr2l,c
  5111   010812  0EFF               	movlw	255
  5112   010814  20E2               	addwfc	fsr1h,w,c
  5113   010816  6EDA               	movwf	fsr2h,c
  5114   010818  CFDE F035          	movff	postinc2,btemp+8
  5115   01081C  CFDE F036          	movff	postinc2,btemp+9
  5116   010820  CFDE F037          	movff	postinc2,btemp+10
  5117   010824  CFDE F038          	movff	postinc2,btemp+11
  5118                           
  5119                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5120   010828  0EF7               	movlw	-9
  5121   01082A  C035  FFE3         	movff	btemp+8,plusw1
  5122   01082E  0EF8               	movlw	-8
  5123   010830  C036  FFE3         	movff	btemp+9,plusw1
  5124   010834  0EF9               	movlw	-7
  5125   010836  C037  FFE3         	movff	btemp+10,plusw1
  5126   01083A  0EFA               	movlw	-6
  5127   01083C  C038  FFE3         	movff	btemp+11,plusw1
  5128   010840                     
  5129                           ;can/can.c: 1271:     a = (uint16_t)ciFifoUa.bF.UserAddress;
  5130                           ;stkvar	_ciFifoUa @ sp[(-110)+101]
  5131                           ;stkvar	_a @ sp[(-110)+105]
  5132   010840  0EF7               	movlw	-9
  5133   010842  CFE3 F02D          	movff	plusw1,btemp
  5134   010846  0EFB               	movlw	-5
  5135   010848  C02D  FFE3         	movff	btemp,plusw1
  5136   01084C  0EF8               	movlw	-8
  5137   01084E  CFE3 F02D          	movff	plusw1,btemp
  5138   010852  0EFC               	movlw	-4
  5139   010854  C02D  FFE3         	movff	btemp,plusw1
  5140   010858                     
  5141                           ;can/can.c: 1273:     a += 0x400;
  5142                           ;stkvar	_a @ sp[(-110)+105]
  5143   010858  50E1               	movf	fsr1l,w,c
  5144   01085A  0FFB               	addlw	-5
  5145   01085C  6ED9               	movwf	fsr2l,c
  5146   01085E  50E2               	movf	fsr1h,w,c
  5147   010860  6EDA               	movwf	fsr2h,c
  5148   010862  0EFF               	movlw	255
  5149   010864  22DA               	addwfc	fsr2h,f,c
  5150   010866  0E00               	movlw	0
  5151   010868  26DE               	addwf	postinc2,f,c
  5152   01086A  0E04               	movlw	4
  5153   01086C  22DD               	addwfc	postdec2,f,c
  5154   01086E                     
  5155                           ;can/can.c: 1276:     n = nBytes + 8;
  5156   01086E  0E08               	movlw	8
  5157   010870  6E38               	movwf	(btemp+11)^0,c
  5158                           
  5159                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5160   010872  0E8C               	movlw	-116
  5161   010874  50E3               	movf	plusw1,w,c
  5162   010876  2438               	addwf	(btemp+11)^0,w,c
  5163   010878  6E37               	movwf	(btemp+10)^0,c
  5164                           
  5165                           ;stkvar	_n @ sp[(-110)+108]
  5166   01087A  0EFE               	movlw	-2
  5167   01087C  C037  FFE3         	movff	btemp+10,plusw1
  5168   010880                     
  5169                           ;can/can.c: 1278:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5170                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5171   010880  50E1               	movf	fsr1l,w,c
  5172   010882  0FEE               	addlw	-18
  5173   010884  6ED9               	movwf	fsr2l,c
  5174   010886  50E2               	movf	fsr1h,w,c
  5175   010888  6EDA               	movwf	fsr2h,c
  5176   01088A  0EFF               	movlw	255
  5177   01088C  22DA               	addwfc	fsr2h,f,c
  5178   01088E  AADF               	btfss	indf2,5,c
  5179   010890  EF4C  F084         	goto	u1991
  5180   010894  EF4E  F084         	goto	u1990
  5181   010898                     u1991:
  5182   010898  EF56  F084         	goto	l4168
  5183   01089C                     u1990:
  5184   01089C                     
  5185                           ;can/can.c: 1279:         n += 4;
  5186                           ;stkvar	_n @ sp[(-110)+108]
  5187   01089C  0EFE               	movlw	-2
  5188   01089E  CFE3 F02D          	movff	plusw1,btemp
  5189   0108A2  0E04               	movlw	4
  5190   0108A4  262D               	addwf	btemp^0,f,c
  5191   0108A6  0EFE               	movlw	-2
  5192   0108A8  C02D  FFE3         	movff	btemp,plusw1
  5193   0108AC                     l4168:
  5194                           
  5195                           ;can/can.c: 1283:     if (n % 4) {
  5196                           ;stkvar	_n @ sp[(-110)+108]
  5197   0108AC  0EFE               	movlw	-2
  5198   0108AE  CFE3 F038          	movff	plusw1,btemp+11
  5199   0108B2  0E03               	movlw	3
  5200   0108B4  1638               	andwf	(btemp+11)^0,f,c
  5201   0108B6  B4D8               	btfsc	status,2,c
  5202   0108B8  EF60  F084         	goto	u2001
  5203   0108BC  EF62  F084         	goto	u2000
  5204   0108C0                     u2001:
  5205   0108C0  EF72  F084         	goto	l4172
  5206   0108C4                     u2000:
  5207   0108C4                     
  5208                           ;can/can.c: 1284:         n = n + 4 - (n % 4);
  5209                           ;stkvar	_n @ sp[(-110)+108]
  5210   0108C4  0EFE               	movlw	-2
  5211   0108C6  CFE3 F038          	movff	plusw1,btemp+11
  5212   0108CA  0E03               	movlw	3
  5213   0108CC  1638               	andwf	(btemp+11)^0,f,c
  5214                           
  5215                           ;stkvar	_n @ sp[(-110)+108]
  5216   0108CE  0EFE               	movlw	-2
  5217   0108D0  CFE3 F037          	movff	plusw1,btemp+10
  5218   0108D4  5038               	movf	(btemp+11)^0,w,c
  5219   0108D6  5C37               	subwf	(btemp+10)^0,w,c
  5220   0108D8  6E38               	movwf	(btemp+11)^0,c
  5221   0108DA  0E04               	movlw	4
  5222   0108DC  2638               	addwf	(btemp+11)^0,f,c
  5223                           
  5224                           ;stkvar	_n @ sp[(-110)+108]
  5225   0108DE  0EFE               	movlw	-2
  5226   0108E0  C038  FFE3         	movff	btemp+11,plusw1
  5227   0108E4                     l4172:
  5228                           
  5229                           ;can/can.c: 1288:     uint8_t ba[76];;can/can.c: 1290:     if (n > 76) {
  5230                           ;stkvar	_n @ sp[(-110)+108]
  5231   0108E4  0EFE               	movlw	-2
  5232   0108E6  CFE3 F02D          	movff	plusw1,btemp
  5233   0108EA  0E4C               	movlw	76
  5234   0108EC  642D               	cpfsgt	btemp^0,c
  5235   0108EE  EF7B  F084         	goto	u2011
  5236   0108F2  EF7D  F084         	goto	u2010
  5237   0108F6                     u2011:
  5238   0108F6  EF82  F084         	goto	l4176
  5239   0108FA                     u2010:
  5240   0108FA                     
  5241                           ;can/can.c: 1291:         n = 76;
  5242   0108FA  0E4C               	movlw	76
  5243   0108FC  6E38               	movwf	(btemp+11)^0,c
  5244                           
  5245                           ;stkvar	_n @ sp[(-110)+108]
  5246   0108FE  0EFE               	movlw	-2
  5247   010900  C038  FFE3         	movff	btemp+11,plusw1
  5248   010904                     l4176:
  5249                           
  5250                           ;can/can.c: 1294:     spiTransferError = DRV_CANFDSPI_ReadByteArray( a, ba, n);
  5251                           ;stkvar	_n @ sp[(-110)+108]
  5252   010904  0EFE               	movlw	-2
  5253   010906  50E3               	movf	plusw1,w,c
  5254   010908  6EE6               	movwf	postinc1,c
  5255   01090A  0E00               	movlw	0
  5256   01090C  6EE6               	movwf	postinc1,c
  5257                           
  5258                           ;stkvar	_ba @ sp[(-112)+4]
  5259   01090E  0E94               	movlw	148
  5260   010910  24E1               	addwf	fsr1l,w,c
  5261   010912  6E2D               	movwf	btemp^0,c
  5262   010914  0EFF               	movlw	255
  5263   010916  20E2               	addwfc	fsr1h,w,c
  5264   010918  6E2E               	movwf	(btemp+1)^0,c
  5265   01091A  C02D  FFE6         	movff	btemp,postinc1
  5266   01091E  C02E  FFE6         	movff	btemp+1,postinc1
  5267                           
  5268                           ;stkvar	_a @ sp[(-114)+105]
  5269   010922  0EF7               	movlw	-9
  5270   010924  CFE3 FFE6          	movff	plusw1,postinc1
  5271   010928  CFE3 FFE6          	movff	plusw1,postinc1
  5272   01092C  EC28  F091         	call	_DRV_CANFDSPI_ReadByteArray	;wreg free
  5273                           
  5274                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5275   010930  0EFF               	movlw	-1
  5276   010932  C02D  FFE3         	movff	btemp,plusw1
  5277   010936                     
  5278                           ;can/can.c: 1295:     if (spiTransferError) {
  5279                           ;stkvar	_spiTransferError @ sp[(-110)+109]
  5280   010936  0EFF               	movlw	-1
  5281   010938  50E3               	movf	plusw1,w,c
  5282   01093A  B4D8               	btfsc	status,2,c
  5283   01093C  EFA2  F084         	goto	u2021
  5284   010940  EFA4  F084         	goto	u2020
  5285   010944                     u2021:
  5286   010944  EFA6  F084         	goto	l4182
  5287   010948                     u2020:
  5288   010948  EF15  F087         	goto	l357
  5289   01094C                     l4182:
  5290                           
  5291                           ;can/can.c: 1300:     REG_t myReg;;can/can.c: 1315:     rxObj->byte[6] = ba[4];
  5292                           ;stkvar	_ba @ sp[(-110)+4]
  5293   01094C  0E9A               	movlw	154
  5294   01094E  24E1               	addwf	fsr1l,w,c
  5295   010950  6ED9               	movwf	fsr2l,c
  5296   010952  0EFF               	movlw	255
  5297   010954  20E2               	addwfc	fsr1h,w,c
  5298   010956  6EDA               	movwf	fsr2h,c
  5299                           
  5300                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5301   010958  0E8F               	movlw	-113
  5302   01095A  CFE3 F037          	movff	plusw1,btemp+10
  5303   01095E  0E90               	movlw	-112
  5304   010960  CFE3 F038          	movff	plusw1,btemp+11
  5305   010964  0E06               	movlw	6
  5306   010966  2437               	addwf	(btemp+10)^0,w,c
  5307   010968  6EE9               	movwf	fsr0l,c
  5308   01096A  0E00               	movlw	0
  5309   01096C  2038               	addwfc	(btemp+11)^0,w,c
  5310   01096E  6EEA               	movwf	fsr0h,c
  5311   010970  CFDF FFEF          	movff	indf2,indf0
  5312   010974                     
  5313                           ;can/can.c: 1316:     if(rxObj->bF.ctrl.IDE == 0)
  5314                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5315   010974  0E8F               	movlw	-113
  5316   010976  CFE3 F037          	movff	plusw1,btemp+10
  5317   01097A  0E90               	movlw	-112
  5318   01097C  CFE3 F038          	movff	plusw1,btemp+11
  5319   010980  0E06               	movlw	6
  5320   010982  2437               	addwf	(btemp+10)^0,w,c
  5321   010984  6ED9               	movwf	fsr2l,c
  5322   010986  0E00               	movlw	0
  5323   010988  2038               	addwfc	(btemp+11)^0,w,c
  5324   01098A  6EDA               	movwf	fsr2h,c
  5325   01098C  B8DF               	btfsc	indf2,4,c
  5326   01098E  EFCB  F084         	goto	u2031
  5327   010992  EFCD  F084         	goto	u2030
  5328   010996                     u2031:
  5329   010996  EF38  F085         	goto	l4188
  5330   01099A                     u2030:
  5331   01099A                     
  5332                           ;can/can.c: 1317:     {;can/can.c: 1318:       rxObj->bF.id.ID = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5333                           ;stkvar	_ba @ sp[(-110)+4]
  5334   01099A  0E99               	movlw	153
  5335   01099C  24E1               	addwf	fsr1l,w,c
  5336   01099E  6ED9               	movwf	fsr2l,c
  5337   0109A0  0EFF               	movlw	255
  5338   0109A2  20E2               	addwfc	fsr1h,w,c
  5339   0109A4  6EDA               	movwf	fsr2h,c
  5340   0109A6  50DF               	movf	indf2,w,c
  5341   0109A8  6E38               	movwf	(btemp+11)^0,c
  5342   0109AA  0E1F               	movlw	31
  5343   0109AC  1638               	andwf	(btemp+11)^0,f,c
  5344   0109AE  C038  F031         	movff	btemp+11,btemp+4
  5345   0109B2  6A32               	clrf	(btemp+5)^0,c
  5346   0109B4  6A33               	clrf	(btemp+6)^0,c
  5347   0109B6  6A34               	clrf	(btemp+7)^0,c
  5348   0109B8  C031  F034         	movff	btemp+4,btemp+7
  5349   0109BC  6A33               	clrf	(btemp+6)^0,c
  5350   0109BE  6A32               	clrf	(btemp+5)^0,c
  5351   0109C0  6A31               	clrf	(btemp+4)^0,c
  5352                           
  5353                           ;stkvar	_ba @ sp[(-110)+4]
  5354   0109C2  0E97               	movlw	151
  5355   0109C4  24E1               	addwf	fsr1l,w,c
  5356   0109C6  6ED9               	movwf	fsr2l,c
  5357   0109C8  0EFF               	movlw	255
  5358   0109CA  20E2               	addwfc	fsr1h,w,c
  5359   0109CC  6EDA               	movwf	fsr2h,c
  5360   0109CE  50DF               	movf	indf2,w,c
  5361   0109D0  6E38               	movwf	(btemp+11)^0,c
  5362   0109D2  C038  F02D         	movff	btemp+11,btemp
  5363   0109D6  6A2E               	clrf	(btemp+1)^0,c
  5364   0109D8  6A2F               	clrf	(btemp+2)^0,c
  5365   0109DA  6A30               	clrf	(btemp+3)^0,c
  5366   0109DC  C02F  F030         	movff	btemp+2,btemp+3
  5367   0109E0  C02E  F02F         	movff	btemp+1,btemp+2
  5368   0109E4  C02D  F02E         	movff	btemp,btemp+1
  5369   0109E8  6A2D               	clrf	btemp^0,c
  5370                           
  5371                           ;stkvar	_ba @ sp[(-110)+4]
  5372   0109EA  0E96               	movlw	-106
  5373   0109EC  50E3               	movf	plusw1,w,c
  5374   0109EE  6E35               	movwf	(btemp+8)^0,c
  5375   0109F0  6A36               	clrf	(btemp+9)^0,c
  5376   0109F2  6A37               	clrf	(btemp+10)^0,c
  5377   0109F4  6A38               	clrf	(btemp+11)^0,c
  5378   0109F6  502D               	movf	btemp^0,w,c
  5379   0109F8  1235               	iorwf	(btemp+8)^0,f,c
  5380   0109FA  502E               	movf	(btemp+1)^0,w,c
  5381   0109FC  1236               	iorwf	(btemp+9)^0,f,c
  5382   0109FE  502F               	movf	(btemp+2)^0,w,c
  5383   010A00  1237               	iorwf	(btemp+10)^0,f,c
  5384   010A02  5030               	movf	(btemp+3)^0,w,c
  5385   010A04  1238               	iorwf	(btemp+11)^0,f,c
  5386                           
  5387                           ;stkvar	_ba @ sp[(-110)+4]
  5388   010A06  0E98               	movlw	152
  5389   010A08  24E1               	addwf	fsr1l,w,c
  5390   010A0A  6ED9               	movwf	fsr2l,c
  5391   010A0C  0EFF               	movlw	255
  5392   010A0E  20E2               	addwfc	fsr1h,w,c
  5393   010A10  6EDA               	movwf	fsr2h,c
  5394   010A12  50DF               	movf	indf2,w,c
  5395   010A14  6E2D               	movwf	btemp^0,c
  5396   010A16  6A2E               	clrf	(btemp+1)^0,c
  5397   010A18  6A2F               	clrf	(btemp+2)^0,c
  5398   010A1A  6A30               	clrf	(btemp+3)^0,c
  5399   010A1C  C02E  F030         	movff	btemp+1,btemp+3
  5400   010A20  C02D  F02F         	movff	btemp,btemp+2
  5401   010A24  6A2E               	clrf	(btemp+1)^0,c
  5402   010A26  6A2D               	clrf	btemp^0,c
  5403   010A28  502D               	movf	btemp^0,w,c
  5404   010A2A  1235               	iorwf	(btemp+8)^0,f,c
  5405   010A2C  502E               	movf	(btemp+1)^0,w,c
  5406   010A2E  1236               	iorwf	(btemp+9)^0,f,c
  5407   010A30  502F               	movf	(btemp+2)^0,w,c
  5408   010A32  1237               	iorwf	(btemp+10)^0,f,c
  5409   010A34  5030               	movf	(btemp+3)^0,w,c
  5410   010A36  1238               	iorwf	(btemp+11)^0,f,c
  5411   010A38  5031               	movf	(btemp+4)^0,w,c
  5412   010A3A  1035               	iorwf	(btemp+8)^0,w,c
  5413   010A3C  6E2D               	movwf	btemp^0,c
  5414   010A3E  5032               	movf	(btemp+5)^0,w,c
  5415   010A40  1036               	iorwf	(btemp+9)^0,w,c
  5416   010A42  6E2E               	movwf	(btemp+1)^0,c
  5417   010A44  5033               	movf	(btemp+6)^0,w,c
  5418   010A46  1037               	iorwf	(btemp+10)^0,w,c
  5419   010A48  6E2F               	movwf	(btemp+2)^0,c
  5420   010A4A  5034               	movf	(btemp+7)^0,w,c
  5421   010A4C  1038               	iorwf	(btemp+11)^0,w,c
  5422   010A4E  6E30               	movwf	(btemp+3)^0,c
  5423                           
  5424                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5425   010A50  0E8F               	movlw	-113
  5426   010A52  CFE3 FFD9          	movff	plusw1,fsr2l
  5427   010A56  0E90               	movlw	-112
  5428   010A58  CFE3 FFDA          	movff	plusw1,fsr2h
  5429   010A5C  C02D  FFDE         	movff	btemp,postinc2
  5430   010A60  C02E  FFDE         	movff	btemp+1,postinc2
  5431   010A64  C02F  FFDE         	movff	btemp+2,postinc2
  5432   010A68  C030  FFDE         	movff	btemp+3,postinc2
  5433                           
  5434                           ;can/can.c: 1320:     }
  5435   010A6C  EFF8  F085         	goto	l4190
  5436   010A70                     l4188:
  5437                           
  5438                           ;can/can.c: 1322:     {;can/can.c: 1323:       uint32_t temp32 = ba[0] | ((uint32_t)ba[1
      +                          ] << 8) |
  5439                           ;stkvar	_ba @ sp[(-110)+4]
  5440   010A70  0E99               	movlw	153
  5441   010A72  24E1               	addwf	fsr1l,w,c
  5442   010A74  6ED9               	movwf	fsr2l,c
  5443   010A76  0EFF               	movlw	255
  5444   010A78  20E2               	addwfc	fsr1h,w,c
  5445   010A7A  6EDA               	movwf	fsr2h,c
  5446   010A7C  50DF               	movf	indf2,w,c
  5447   010A7E  6E38               	movwf	(btemp+11)^0,c
  5448   010A80  0E1F               	movlw	31
  5449   010A82  1638               	andwf	(btemp+11)^0,f,c
  5450   010A84  C038  F031         	movff	btemp+11,btemp+4
  5451   010A88  6A32               	clrf	(btemp+5)^0,c
  5452   010A8A  6A33               	clrf	(btemp+6)^0,c
  5453   010A8C  6A34               	clrf	(btemp+7)^0,c
  5454   010A8E  C031  F034         	movff	btemp+4,btemp+7
  5455   010A92  6A33               	clrf	(btemp+6)^0,c
  5456   010A94  6A32               	clrf	(btemp+5)^0,c
  5457   010A96  6A31               	clrf	(btemp+4)^0,c
  5458                           
  5459                           ;stkvar	_ba @ sp[(-110)+4]
  5460   010A98  0E97               	movlw	151
  5461   010A9A  24E1               	addwf	fsr1l,w,c
  5462   010A9C  6ED9               	movwf	fsr2l,c
  5463   010A9E  0EFF               	movlw	255
  5464   010AA0  20E2               	addwfc	fsr1h,w,c
  5465   010AA2  6EDA               	movwf	fsr2h,c
  5466   010AA4  50DF               	movf	indf2,w,c
  5467   010AA6  6E38               	movwf	(btemp+11)^0,c
  5468   010AA8  C038  F02D         	movff	btemp+11,btemp
  5469   010AAC  6A2E               	clrf	(btemp+1)^0,c
  5470   010AAE  6A2F               	clrf	(btemp+2)^0,c
  5471   010AB0  6A30               	clrf	(btemp+3)^0,c
  5472   010AB2  C02F  F030         	movff	btemp+2,btemp+3
  5473   010AB6  C02E  F02F         	movff	btemp+1,btemp+2
  5474   010ABA  C02D  F02E         	movff	btemp,btemp+1
  5475   010ABE  6A2D               	clrf	btemp^0,c
  5476                           
  5477                           ;stkvar	_ba @ sp[(-110)+4]
  5478   010AC0  0E96               	movlw	-106
  5479   010AC2  50E3               	movf	plusw1,w,c
  5480   010AC4  6E35               	movwf	(btemp+8)^0,c
  5481   010AC6  6A36               	clrf	(btemp+9)^0,c
  5482   010AC8  6A37               	clrf	(btemp+10)^0,c
  5483   010ACA  6A38               	clrf	(btemp+11)^0,c
  5484   010ACC  502D               	movf	btemp^0,w,c
  5485   010ACE  1235               	iorwf	(btemp+8)^0,f,c
  5486   010AD0  502E               	movf	(btemp+1)^0,w,c
  5487   010AD2  1236               	iorwf	(btemp+9)^0,f,c
  5488   010AD4  502F               	movf	(btemp+2)^0,w,c
  5489   010AD6  1237               	iorwf	(btemp+10)^0,f,c
  5490   010AD8  5030               	movf	(btemp+3)^0,w,c
  5491   010ADA  1238               	iorwf	(btemp+11)^0,f,c
  5492                           
  5493                           ;stkvar	_ba @ sp[(-110)+4]
  5494   010ADC  0E98               	movlw	152
  5495   010ADE  24E1               	addwf	fsr1l,w,c
  5496   010AE0  6ED9               	movwf	fsr2l,c
  5497   010AE2  0EFF               	movlw	255
  5498   010AE4  20E2               	addwfc	fsr1h,w,c
  5499   010AE6  6EDA               	movwf	fsr2h,c
  5500   010AE8  50DF               	movf	indf2,w,c
  5501   010AEA  6E2D               	movwf	btemp^0,c
  5502   010AEC  6A2E               	clrf	(btemp+1)^0,c
  5503   010AEE  6A2F               	clrf	(btemp+2)^0,c
  5504   010AF0  6A30               	clrf	(btemp+3)^0,c
  5505   010AF2  C02E  F030         	movff	btemp+1,btemp+3
  5506   010AF6  C02D  F02F         	movff	btemp,btemp+2
  5507   010AFA  6A2E               	clrf	(btemp+1)^0,c
  5508   010AFC  6A2D               	clrf	btemp^0,c
  5509   010AFE  502D               	movf	btemp^0,w,c
  5510   010B00  1235               	iorwf	(btemp+8)^0,f,c
  5511   010B02  502E               	movf	(btemp+1)^0,w,c
  5512   010B04  1236               	iorwf	(btemp+9)^0,f,c
  5513   010B06  502F               	movf	(btemp+2)^0,w,c
  5514   010B08  1237               	iorwf	(btemp+10)^0,f,c
  5515   010B0A  5030               	movf	(btemp+3)^0,w,c
  5516   010B0C  1238               	iorwf	(btemp+11)^0,f,c
  5517   010B0E  5031               	movf	(btemp+4)^0,w,c
  5518   010B10  1035               	iorwf	(btemp+8)^0,w,c
  5519   010B12  6E2D               	movwf	btemp^0,c
  5520   010B14  5032               	movf	(btemp+5)^0,w,c
  5521   010B16  1036               	iorwf	(btemp+9)^0,w,c
  5522   010B18  6E2E               	movwf	(btemp+1)^0,c
  5523   010B1A  5033               	movf	(btemp+6)^0,w,c
  5524   010B1C  1037               	iorwf	(btemp+10)^0,w,c
  5525   010B1E  6E2F               	movwf	(btemp+2)^0,c
  5526   010B20  5034               	movf	(btemp+7)^0,w,c
  5527   010B22  1038               	iorwf	(btemp+11)^0,w,c
  5528   010B24  6E30               	movwf	(btemp+3)^0,c
  5529                           
  5530                           ;stkvar	_temp32 @ sp[(-110)+0]
  5531   010B26  0E92               	movlw	-110
  5532   010B28  C02D  FFE3         	movff	btemp,plusw1
  5533   010B2C  0E93               	movlw	-109
  5534   010B2E  C02E  FFE3         	movff	btemp+1,plusw1
  5535   010B32  0E94               	movlw	-108
  5536   010B34  C02F  FFE3         	movff	btemp+2,plusw1
  5537   010B38  0E95               	movlw	-107
  5538   010B3A  C030  FFE3         	movff	btemp+3,plusw1
  5539                           
  5540                           ;can/can.c: 1326:       rxObj->bF.id.ID = ((temp32 & 0x000007FF) << 18) |
  5541                           ;stkvar	_temp32 @ sp[(-110)+0]
  5542   010B3E  0E92               	movlw	-110
  5543   010B40  CFE3 F035          	movff	plusw1,btemp+8
  5544   010B44  0E93               	movlw	-109
  5545   010B46  CFE3 F036          	movff	plusw1,btemp+9
  5546   010B4A  0E94               	movlw	-108
  5547   010B4C  CFE3 F037          	movff	plusw1,btemp+10
  5548   010B50  0E95               	movlw	-107
  5549   010B52  CFE3 F038          	movff	plusw1,btemp+11
  5550   010B56  0E0C               	movlw	12
  5551   010B58  EFB3  F085         	goto	u2040
  5552   010B5C                     u2045:
  5553   010B5C  90D8               	bcf	status,0,c
  5554   010B5E  3238               	rrcf	(btemp+11)^0,f,c
  5555   010B60  3237               	rrcf	(btemp+10)^0,f,c
  5556   010B62  3236               	rrcf	(btemp+9)^0,f,c
  5557   010B64  3235               	rrcf	(btemp+8)^0,f,c
  5558   010B66                     u2040:
  5559   010B66  2EE8               	decfsz	wreg,f,c
  5560   010B68  EFAE  F085         	goto	u2045
  5561   010B6C  0EFF               	movlw	255
  5562   010B6E  1435               	andwf	(btemp+8)^0,w,c
  5563   010B70  6E31               	movwf	(btemp+4)^0,c
  5564   010B72  0EFF               	movlw	255
  5565   010B74  1436               	andwf	(btemp+9)^0,w,c
  5566   010B76  6E32               	movwf	(btemp+5)^0,c
  5567   010B78  0E03               	movlw	3
  5568   010B7A  1437               	andwf	(btemp+10)^0,w,c
  5569   010B7C  6E33               	movwf	(btemp+6)^0,c
  5570   010B7E  0E00               	movlw	0
  5571   010B80  1438               	andwf	(btemp+11)^0,w,c
  5572   010B82  6E34               	movwf	(btemp+7)^0,c
  5573                           
  5574                           ;stkvar	_temp32 @ sp[(-110)+0]
  5575   010B84  50E1               	movf	fsr1l,w,c
  5576   010B86  0F92               	addlw	-110
  5577   010B88  6ED9               	movwf	fsr2l,c
  5578   010B8A  50E2               	movf	fsr1h,w,c
  5579   010B8C  6EDA               	movwf	fsr2h,c
  5580   010B8E  0EFF               	movlw	255
  5581   010B90  22DA               	addwfc	fsr2h,f,c
  5582   010B92  0EFF               	movlw	255
  5583   010B94  14DE               	andwf	postinc2,w,c
  5584   010B96  6E35               	movwf	(btemp+8)^0,c
  5585   010B98  0E07               	movlw	7
  5586   010B9A  14DE               	andwf	postinc2,w,c
  5587   010B9C  6E36               	movwf	(btemp+9)^0,c
  5588   010B9E  0E00               	movlw	0
  5589   010BA0  14DE               	andwf	postinc2,w,c
  5590   010BA2  6E37               	movwf	(btemp+10)^0,c
  5591   010BA4  0E00               	movlw	0
  5592   010BA6  14DE               	andwf	postinc2,w,c
  5593   010BA8  6E38               	movwf	(btemp+11)^0,c
  5594   010BAA  0E12               	movlw	18
  5595   010BAC                     u2055:
  5596   010BAC  90D8               	bcf	status,0,c
  5597   010BAE  3635               	rlcf	(btemp+8)^0,f,c
  5598   010BB0  3636               	rlcf	(btemp+9)^0,f,c
  5599   010BB2  3637               	rlcf	(btemp+10)^0,f,c
  5600   010BB4  3638               	rlcf	(btemp+11)^0,f,c
  5601   010BB6  2EE8               	decfsz	wreg,f,c
  5602   010BB8  EFD6  F085         	goto	u2055
  5603   010BBC  5031               	movf	(btemp+4)^0,w,c
  5604   010BBE  1035               	iorwf	(btemp+8)^0,w,c
  5605   010BC0  6E2D               	movwf	btemp^0,c
  5606   010BC2  5032               	movf	(btemp+5)^0,w,c
  5607   010BC4  1036               	iorwf	(btemp+9)^0,w,c
  5608   010BC6  6E2E               	movwf	(btemp+1)^0,c
  5609   010BC8  5033               	movf	(btemp+6)^0,w,c
  5610   010BCA  1037               	iorwf	(btemp+10)^0,w,c
  5611   010BCC  6E2F               	movwf	(btemp+2)^0,c
  5612   010BCE  5034               	movf	(btemp+7)^0,w,c
  5613   010BD0  1038               	iorwf	(btemp+11)^0,w,c
  5614   010BD2  6E30               	movwf	(btemp+3)^0,c
  5615                           
  5616                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5617   010BD4  0E8F               	movlw	-113
  5618   010BD6  CFE3 FFD9          	movff	plusw1,fsr2l
  5619   010BDA  0E90               	movlw	-112
  5620   010BDC  CFE3 FFDA          	movff	plusw1,fsr2h
  5621   010BE0  C02D  FFDE         	movff	btemp,postinc2
  5622   010BE4  C02E  FFDE         	movff	btemp+1,postinc2
  5623   010BE8  C02F  FFDE         	movff	btemp+2,postinc2
  5624   010BEC  C030  FFDE         	movff	btemp+3,postinc2
  5625   010BF0                     l4190:
  5626                           
  5627                           ;can/can.c: 1330:     rxObj->bF.ctrl.ESI = ba[5] & 0x01;
  5628                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5629   010BF0  0E8F               	movlw	-113
  5630   010BF2  CFE3 F037          	movff	plusw1,btemp+10
  5631   010BF6  0E90               	movlw	-112
  5632   010BF8  CFE3 F038          	movff	plusw1,btemp+11
  5633   010BFC  0E07               	movlw	7
  5634   010BFE  2437               	addwf	(btemp+10)^0,w,c
  5635   010C00  6ED9               	movwf	fsr2l,c
  5636   010C02  0E00               	movlw	0
  5637   010C04  2038               	addwfc	(btemp+11)^0,w,c
  5638   010C06  6EDA               	movwf	fsr2h,c
  5639                           
  5640                           ;stkvar	_ba @ sp[(-110)+4]
  5641   010C08  0E9B               	movlw	155
  5642   010C0A  24E1               	addwf	fsr1l,w,c
  5643   010C0C  6EE9               	movwf	fsr0l,c
  5644   010C0E  0EFF               	movlw	255
  5645   010C10  20E2               	addwfc	fsr1h,w,c
  5646   010C12  6EEA               	movwf	fsr0h,c
  5647   010C14  50EF               	movf	indf0,w,c
  5648   010C16  0B01               	andlw	1
  5649   010C18  6EDF               	movwf	indf2,c
  5650   010C1A                     
  5651                           ;can/can.c: 1331:     rxObj->bF.ctrl.FilterHit = ba[5] >> 3;
  5652                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5653   010C1A  0E8F               	movlw	-113
  5654   010C1C  CFE3 F037          	movff	plusw1,btemp+10
  5655   010C20  0E90               	movlw	-112
  5656   010C22  CFE3 F038          	movff	plusw1,btemp+11
  5657   010C26  0E08               	movlw	8
  5658   010C28  2437               	addwf	(btemp+10)^0,w,c
  5659   010C2A  6ED9               	movwf	fsr2l,c
  5660   010C2C  0E00               	movlw	0
  5661   010C2E  2038               	addwfc	(btemp+11)^0,w,c
  5662   010C30  6EDA               	movwf	fsr2h,c
  5663                           
  5664                           ;stkvar	_ba @ sp[(-110)+4]
  5665   010C32  0E9B               	movlw	155
  5666   010C34  24E1               	addwf	fsr1l,w,c
  5667   010C36  6EE9               	movwf	fsr0l,c
  5668   010C38  0EFF               	movlw	255
  5669   010C3A  20E2               	addwfc	fsr1h,w,c
  5670   010C3C  6EEA               	movwf	fsr0h,c
  5671   010C3E  50EF               	movf	indf0,w,c
  5672   010C40  6E38               	movwf	(btemp+11)^0,c
  5673   010C42  90D8               	bcf	status,0,c
  5674   010C44  3238               	rrcf	(btemp+11)^0,f,c
  5675   010C46  90D8               	bcf	status,0,c
  5676   010C48  3238               	rrcf	(btemp+11)^0,f,c
  5677   010C4A  90D8               	bcf	status,0,c
  5678   010C4C  3038               	rrcf	(btemp+11)^0,w,c
  5679   010C4E  6EDF               	movwf	indf2,c
  5680   010C50                     
  5681                           ;can/can.c: 1332:     if (ciFifoCon.rxBF.RxTimeStampEnable) {
  5682                           ;stkvar	_ciFifoCon @ sp[(-110)+92]
  5683   010C50  50E1               	movf	fsr1l,w,c
  5684   010C52  0FEE               	addlw	-18
  5685   010C54  6ED9               	movwf	fsr2l,c
  5686   010C56  50E2               	movf	fsr1h,w,c
  5687   010C58  6EDA               	movwf	fsr2h,c
  5688   010C5A  0EFF               	movlw	255
  5689   010C5C  22DA               	addwfc	fsr2h,f,c
  5690   010C5E  AADF               	btfss	indf2,5,c
  5691   010C60  EF34  F086         	goto	u2061
  5692   010C64  EF36  F086         	goto	u2060
  5693   010C68                     u2061:
  5694   010C68  EFC4  F086         	goto	l4214
  5695   010C6C                     u2060:
  5696   010C6C                     
  5697                           ;can/can.c: 1333:         myReg.byte[0] = ba[8];
  5698                           ;stkvar	_ba @ sp[(-110)+4]
  5699   010C6C  0E9E               	movlw	158
  5700   010C6E  24E1               	addwf	fsr1l,w,c
  5701   010C70  6ED9               	movwf	fsr2l,c
  5702   010C72  0EFF               	movlw	255
  5703   010C74  20E2               	addwfc	fsr1h,w,c
  5704   010C76  6EDA               	movwf	fsr2h,c
  5705   010C78  50DF               	movf	indf2,w,c
  5706   010C7A  6E38               	movwf	(btemp+11)^0,c
  5707                           
  5708                           ;stkvar	_myReg @ sp[(-110)+97]
  5709   010C7C  0EF3               	movlw	-13
  5710   010C7E  C038  FFE3         	movff	btemp+11,plusw1
  5711   010C82                     
  5712                           ;can/can.c: 1334:         myReg.byte[1] = ba[9];
  5713                           ;stkvar	_ba @ sp[(-110)+4]
  5714   010C82  0E9F               	movlw	159
  5715   010C84  24E1               	addwf	fsr1l,w,c
  5716   010C86  6ED9               	movwf	fsr2l,c
  5717   010C88  0EFF               	movlw	255
  5718   010C8A  20E2               	addwfc	fsr1h,w,c
  5719   010C8C  6EDA               	movwf	fsr2h,c
  5720                           
  5721                           ;stkvar	_myReg @ sp[(-110)+97]
  5722   010C8E  0EF4               	movlw	244
  5723   010C90  24E1               	addwf	fsr1l,w,c
  5724   010C92  6EE9               	movwf	fsr0l,c
  5725   010C94  0EFF               	movlw	255
  5726   010C96  20E2               	addwfc	fsr1h,w,c
  5727   010C98  6EEA               	movwf	fsr0h,c
  5728   010C9A  CFDF FFEF          	movff	indf2,indf0
  5729   010C9E                     
  5730                           ;can/can.c: 1335:         myReg.byte[2] = ba[10];
  5731                           ;stkvar	_ba @ sp[(-110)+4]
  5732   010C9E  0EA0               	movlw	160
  5733   010CA0  24E1               	addwf	fsr1l,w,c
  5734   010CA2  6ED9               	movwf	fsr2l,c
  5735   010CA4  0EFF               	movlw	255
  5736   010CA6  20E2               	addwfc	fsr1h,w,c
  5737   010CA8  6EDA               	movwf	fsr2h,c
  5738                           
  5739                           ;stkvar	_myReg @ sp[(-110)+97]
  5740   010CAA  0EF5               	movlw	245
  5741   010CAC  24E1               	addwf	fsr1l,w,c
  5742   010CAE  6EE9               	movwf	fsr0l,c
  5743   010CB0  0EFF               	movlw	255
  5744   010CB2  20E2               	addwfc	fsr1h,w,c
  5745   010CB4  6EEA               	movwf	fsr0h,c
  5746   010CB6  CFDF FFEF          	movff	indf2,indf0
  5747   010CBA                     
  5748                           ;can/can.c: 1336:         myReg.byte[3] = ba[11];
  5749                           ;stkvar	_ba @ sp[(-110)+4]
  5750   010CBA  0EA1               	movlw	161
  5751   010CBC  24E1               	addwf	fsr1l,w,c
  5752   010CBE  6ED9               	movwf	fsr2l,c
  5753   010CC0  0EFF               	movlw	255
  5754   010CC2  20E2               	addwfc	fsr1h,w,c
  5755   010CC4  6EDA               	movwf	fsr2h,c
  5756                           
  5757                           ;stkvar	_myReg @ sp[(-110)+97]
  5758   010CC6  0EF6               	movlw	246
  5759   010CC8  24E1               	addwf	fsr1l,w,c
  5760   010CCA  6EE9               	movwf	fsr0l,c
  5761   010CCC  0EFF               	movlw	255
  5762   010CCE  20E2               	addwfc	fsr1h,w,c
  5763   010CD0  6EEA               	movwf	fsr0h,c
  5764   010CD2  CFDF FFEF          	movff	indf2,indf0
  5765   010CD6                     
  5766                           ;can/can.c: 1337:         rxObj->bF.timeStamp = myReg.word;
  5767                           ;stkvar	_myReg @ sp[(-110)+97]
  5768   010CD6  50E1               	movf	fsr1l,w,c
  5769   010CD8  0FF3               	addlw	-13
  5770   010CDA  6ED9               	movwf	fsr2l,c
  5771   010CDC  50E2               	movf	fsr1h,w,c
  5772   010CDE  6EDA               	movwf	fsr2h,c
  5773   010CE0  0EFF               	movlw	255
  5774   010CE2  22DA               	addwfc	fsr2h,f,c
  5775                           
  5776                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5777   010CE4  0E8F               	movlw	-113
  5778   010CE6  CFE3 F037          	movff	plusw1,btemp+10
  5779   010CEA  0E90               	movlw	-112
  5780   010CEC  CFE3 F038          	movff	plusw1,btemp+11
  5781   010CF0  0E09               	movlw	9
  5782   010CF2  2437               	addwf	(btemp+10)^0,w,c
  5783   010CF4  6EE9               	movwf	fsr0l,c
  5784   010CF6  0E00               	movlw	0
  5785   010CF8  2038               	addwfc	(btemp+11)^0,w,c
  5786   010CFA  6EEA               	movwf	fsr0h,c
  5787   010CFC  CFDE FFEE          	movff	postinc2,postinc0
  5788   010D00  CFDE FFEE          	movff	postinc2,postinc0
  5789   010D04  CFDE FFEE          	movff	postinc2,postinc0
  5790   010D08  CFDE FFEE          	movff	postinc2,postinc0
  5791   010D0C                     
  5792                           ;can/can.c: 1340:         for (i = 0; i < nBytes; i++) {
  5793                           ;stkvar	_i @ sp[(-110)+107]
  5794   010D0C  0EFD               	movlw	-3
  5795   010D0E  6AE3               	clrf	plusw1,c
  5796   010D10  EFB1  F086         	goto	l4212
  5797   010D14                     l4208:
  5798                           
  5799                           ;can/can.c: 1341:             rxd[i] = ba[i + 12];
  5800                           ;stkvar	_i @ sp[(-110)+107]
  5801   010D14  0EFD               	movlw	-3
  5802   010D16  50E3               	movf	plusw1,w,c
  5803   010D18  6E37               	movwf	(btemp+10)^0,c
  5804   010D1A  6A38               	clrf	(btemp+11)^0,c
  5805   010D1C  0E0C               	movlw	12
  5806   010D1E  2637               	addwf	(btemp+10)^0,f,c
  5807   010D20  0E00               	movlw	0
  5808   010D22  2238               	addwfc	(btemp+11)^0,f,c
  5809                           
  5810                           ;stkvar	_ba @ sp[(-110)+4]
  5811   010D24  0E96               	movlw	150
  5812   010D26  24E1               	addwf	fsr1l,w,c
  5813   010D28  6E35               	movwf	(btemp+8)^0,c
  5814   010D2A  0EFF               	movlw	255
  5815   010D2C  20E2               	addwfc	fsr1h,w,c
  5816   010D2E  6E36               	movwf	(btemp+9)^0,c
  5817   010D30  5037               	movf	(btemp+10)^0,w,c
  5818   010D32  2435               	addwf	(btemp+8)^0,w,c
  5819   010D34  6ED9               	movwf	fsr2l,c
  5820   010D36  5038               	movf	(btemp+11)^0,w,c
  5821   010D38  2036               	addwfc	(btemp+9)^0,w,c
  5822   010D3A  6EDA               	movwf	fsr2h,c
  5823                           
  5824                           ;stkvar	_i @ sp[(-110)+107]
  5825   010D3C  0EFD               	movlw	-3
  5826   010D3E  CFE3 F038          	movff	plusw1,btemp+11
  5827                           
  5828                           ;stkvar	_rxd @ sp[(-110)+-5]
  5829   010D42  0E8D               	movlw	-115
  5830   010D44  CFE3 F035          	movff	plusw1,btemp+8
  5831   010D48  0E8E               	movlw	-114
  5832   010D4A  CFE3 F036          	movff	plusw1,btemp+9
  5833   010D4E  5038               	movf	(btemp+11)^0,w,c
  5834   010D50  2435               	addwf	(btemp+8)^0,w,c
  5835   010D52  6EE9               	movwf	fsr0l,c
  5836   010D54  0E00               	movlw	0
  5837   010D56  2036               	addwfc	(btemp+9)^0,w,c
  5838   010D58  6EEA               	movwf	fsr0h,c
  5839   010D5A  CFDF FFEF          	movff	indf2,indf0
  5840   010D5E                     
  5841                           ;can/can.c: 1342:         }
  5842                           ;stkvar	_i @ sp[(-110)+107]
  5843   010D5E  0EFD               	movlw	-3
  5844   010D60  2AE3               	incf	plusw1,f,c
  5845   010D62                     l4212:
  5846                           
  5847                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5848                           ;stkvar	_i @ sp[(-110)+107]
  5849   010D62  50E1               	movf	fsr1l,w,c
  5850   010D64  0FFD               	addlw	-3
  5851   010D66  6ED9               	movwf	fsr2l,c
  5852   010D68  50E2               	movf	fsr1h,w,c
  5853   010D6A  6EDA               	movwf	fsr2h,c
  5854   010D6C  0EFF               	movlw	255
  5855   010D6E  22DA               	addwfc	fsr2h,f,c
  5856   010D70  0E8C               	movlw	-116
  5857   010D72  50E3               	movf	plusw1,w,c
  5858   010D74  5CDE               	subwf	postinc2,w,c
  5859   010D76  A0D8               	btfss	status,0,c
  5860   010D78  EFC0  F086         	goto	u2071
  5861   010D7C  EFC2  F086         	goto	u2070
  5862   010D80                     u2071:
  5863   010D80  EF8A  F086         	goto	l4208
  5864   010D84                     u2070:
  5865   010D84  EF10  F087         	goto	l4224
  5866   010D88                     l4214:
  5867                           
  5868                           ;can/can.c: 1344:         rxObj->bF.timeStamp = 0;
  5869                           ;stkvar	_rxObj @ sp[(-110)+-3]
  5870   010D88  0E8F               	movlw	-113
  5871   010D8A  CFE3 F037          	movff	plusw1,btemp+10
  5872   010D8E  0E90               	movlw	-112
  5873   010D90  CFE3 F038          	movff	plusw1,btemp+11
  5874   010D94  0E09               	movlw	9
  5875   010D96  2437               	addwf	(btemp+10)^0,w,c
  5876   010D98  6ED9               	movwf	fsr2l,c
  5877   010D9A  0E00               	movlw	0
  5878   010D9C  2038               	addwfc	(btemp+11)^0,w,c
  5879   010D9E  6EDA               	movwf	fsr2h,c
  5880   010DA0  6ADE               	clrf	postinc2,c
  5881   010DA2  6ADE               	clrf	postinc2,c
  5882   010DA4  6ADE               	clrf	postinc2,c
  5883   010DA6  6ADD               	clrf	postdec2,c
  5884   010DA8                     
  5885                           ;can/can.c: 1347:         for (i = 0; i < nBytes; i++) {
  5886                           ;stkvar	_i @ sp[(-110)+107]
  5887   010DA8  0EFD               	movlw	-3
  5888   010DAA  6AE3               	clrf	plusw1,c
  5889   010DAC  EFFF  F086         	goto	l4222
  5890   010DB0                     l4218:
  5891                           
  5892                           ;can/can.c: 1348:             rxd[i] = ba[i + 8];
  5893                           ;stkvar	_i @ sp[(-110)+107]
  5894   010DB0  0EFD               	movlw	-3
  5895   010DB2  50E3               	movf	plusw1,w,c
  5896   010DB4  6E37               	movwf	(btemp+10)^0,c
  5897   010DB6  6A38               	clrf	(btemp+11)^0,c
  5898   010DB8  0E08               	movlw	8
  5899   010DBA  2637               	addwf	(btemp+10)^0,f,c
  5900   010DBC  0E00               	movlw	0
  5901   010DBE  2238               	addwfc	(btemp+11)^0,f,c
  5902                           
  5903                           ;stkvar	_ba @ sp[(-110)+4]
  5904   010DC0  0E96               	movlw	150
  5905   010DC2  24E1               	addwf	fsr1l,w,c
  5906   010DC4  6E35               	movwf	(btemp+8)^0,c
  5907   010DC6  0EFF               	movlw	255
  5908   010DC8  20E2               	addwfc	fsr1h,w,c
  5909   010DCA  6E36               	movwf	(btemp+9)^0,c
  5910   010DCC  5037               	movf	(btemp+10)^0,w,c
  5911   010DCE  2435               	addwf	(btemp+8)^0,w,c
  5912   010DD0  6ED9               	movwf	fsr2l,c
  5913   010DD2  5038               	movf	(btemp+11)^0,w,c
  5914   010DD4  2036               	addwfc	(btemp+9)^0,w,c
  5915   010DD6  6EDA               	movwf	fsr2h,c
  5916                           
  5917                           ;stkvar	_i @ sp[(-110)+107]
  5918   010DD8  0EFD               	movlw	-3
  5919   010DDA  CFE3 F038          	movff	plusw1,btemp+11
  5920                           
  5921                           ;stkvar	_rxd @ sp[(-110)+-5]
  5922   010DDE  0E8D               	movlw	-115
  5923   010DE0  CFE3 F035          	movff	plusw1,btemp+8
  5924   010DE4  0E8E               	movlw	-114
  5925   010DE6  CFE3 F036          	movff	plusw1,btemp+9
  5926   010DEA  5038               	movf	(btemp+11)^0,w,c
  5927   010DEC  2435               	addwf	(btemp+8)^0,w,c
  5928   010DEE  6EE9               	movwf	fsr0l,c
  5929   010DF0  0E00               	movlw	0
  5930   010DF2  2036               	addwfc	(btemp+9)^0,w,c
  5931   010DF4  6EEA               	movwf	fsr0h,c
  5932   010DF6  CFDF FFEF          	movff	indf2,indf0
  5933   010DFA                     
  5934                           ;can/can.c: 1349:         }
  5935                           ;stkvar	_i @ sp[(-110)+107]
  5936   010DFA  0EFD               	movlw	-3
  5937   010DFC  2AE3               	incf	plusw1,f,c
  5938   010DFE                     l4222:
  5939                           
  5940                           ;stkvar	_nBytes @ sp[(-110)+-6]
  5941                           ;stkvar	_i @ sp[(-110)+107]
  5942   010DFE  50E1               	movf	fsr1l,w,c
  5943   010E00  0FFD               	addlw	-3
  5944   010E02  6ED9               	movwf	fsr2l,c
  5945   010E04  50E2               	movf	fsr1h,w,c
  5946   010E06  6EDA               	movwf	fsr2h,c
  5947   010E08  0EFF               	movlw	255
  5948   010E0A  22DA               	addwfc	fsr2h,f,c
  5949   010E0C  0E8C               	movlw	-116
  5950   010E0E  50E3               	movf	plusw1,w,c
  5951   010E10  5CDE               	subwf	postinc2,w,c
  5952   010E12  A0D8               	btfss	status,0,c
  5953   010E14  EF0E  F087         	goto	u2081
  5954   010E18  EF10  F087         	goto	u2080
  5955   010E1C                     u2081:
  5956   010E1C  EFD8  F086         	goto	l4218
  5957   010E20                     u2080:
  5958   010E20                     l4224:
  5959                           
  5960                           ;stkvar	_channel @ sp[(-110)+-1]
  5961   010E20  0E91               	movlw	-111
  5962   010E22  50E3               	movf	plusw1,w,c
  5963   010E24  6EE6               	movwf	postinc1,c
  5964   010E26  ECE0  F09F         	call	_DRV_CANFDSPI_ReceiveChannelUpdate	;wreg free
  5965   010E2A                     l357:
  5966                           
  5967                           ; _DRV_CANFDSPI_ReceiveMessageGet: autosize = 110, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 6, argsize = 6, vargsize = 0
  5968   010E2A  0E8C               	movlw	140
  5969   010E2C  26E1               	addwf	fsr1l,f,c
  5970   010E2E  0EFF               	movlw	255
  5971   010E30  22E2               	addwfc	fsr1h,f,c
  5972   010E32  0012               	return		;funcret
  5973   010E34                     __end_of_DRV_CANFDSPI_ReceiveMessageGet:
  5974                           	callstack 0
  5975                           
  5976 ;; *************** function _DRV_CANFDSPI_ReceiveChannelUpdate *****************
  5977 ;; Defined at:
  5978 ;;		line 1378 in file "can/can.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  channel         1  [STACK] enum E5290
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  5983 ;;  a               2  [STACK] unsigned short 
  5984 ;;  spiTransferE    1  [STACK] char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1  [STACK] char 
  5987 ;; Registers used:
  5988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;Total ram usage:        0 bytes
  5999 ;; Hardware stack levels used: 1
  6000 ;; Hardware stack levels required when called: 9
  6001 ;; This function calls:
  6002 ;;		_DRV_CANFDSPI_WriteByte
  6003 ;; This function is called by:
  6004 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6005 ;; This function uses a reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text13
  6009   013FC0                     __ptext13:
  6010                           	callstack 0
  6011   013FC0                     _DRV_CANFDSPI_ReceiveChannelUpdate:
  6012                           	callstack 0
  6013                           
  6014                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6015   013FC0  0E08               	movlw	8
  6016   013FC2  26E1               	addwf	fsr1l,f,c
  6017   013FC4  0E00               	movlw	0
  6018   013FC6  22E2               	addwfc	fsr1h,f,c
  6019   013FC8                     
  6020                           ;can/can.c: 1384:     ciFifoCon.word = 0;
  6021                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6022   013FC8  0EF8               	movlw	-8
  6023   013FCA  6AE3               	clrf	plusw1,c
  6024   013FCC  0EF9               	movlw	-7
  6025   013FCE  6AE3               	clrf	plusw1,c
  6026   013FD0  0EFA               	movlw	-6
  6027   013FD2  6AE3               	clrf	plusw1,c
  6028   013FD4  0EFB               	movlw	-5
  6029   013FD6  6AE3               	clrf	plusw1,c
  6030   013FD8                     
  6031                           ;can/can.c: 1387:     a = 0x050 + (channel * (3*4)) + 1;
  6032                           ;stkvar	_channel @ sp[(-8)+-1]
  6033   013FD8  0EF7               	movlw	-9
  6034   013FDA  50E3               	movf	plusw1,w,c
  6035   013FDC  0D0C               	mullw	12
  6036   013FDE  0E51               	movlw	81
  6037   013FE0  26F3               	addwf	243,f,c
  6038   013FE2  0E00               	movlw	0
  6039   013FE4  22F4               	addwfc	244,f,c
  6040                           
  6041                           ;stkvar	_a @ sp[(-8)+5]
  6042   013FE6  0EFD               	movlw	-3
  6043   013FE8  CFF3 FFE3          	movff	prodl,plusw1
  6044   013FEC  0EFE               	movlw	-2
  6045   013FEE  CFF4 FFE3          	movff	prodh,plusw1
  6046   013FF2                     
  6047                           ;can/can.c: 1388:     ciFifoCon.rxBF.UINC = 1;
  6048                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6049   013FF2  0EF9               	movlw	249
  6050   013FF4  24E1               	addwf	fsr1l,w,c
  6051   013FF6  6ED9               	movwf	fsr2l,c
  6052   013FF8  0EFF               	movlw	255
  6053   013FFA  20E2               	addwfc	fsr1h,w,c
  6054   013FFC  6EDA               	movwf	fsr2h,c
  6055   013FFE  80DF               	bsf	indf2,0,c
  6056   014000                     
  6057                           ;can/can.c: 1391:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  6058                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  6059   014000  0EF9               	movlw	249
  6060   014002  24E1               	addwf	fsr1l,w,c
  6061   014004  6ED9               	movwf	fsr2l,c
  6062   014006  0EFF               	movlw	255
  6063   014008  20E2               	addwfc	fsr1h,w,c
  6064   01400A  6EDA               	movwf	fsr2h,c
  6065   01400C  50DF               	movf	indf2,w,c
  6066   01400E  6EE6               	movwf	postinc1,c
  6067                           
  6068                           ;stkvar	_a @ sp[(-9)+5]
  6069   014010  0EFC               	movlw	-4
  6070   014012  CFE3 FFE6          	movff	plusw1,postinc1
  6071   014016  CFE3 FFE6          	movff	plusw1,postinc1
  6072   01401A  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  6073                           
  6074                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6075   01401E  0EFF               	movlw	-1
  6076   014020  C02D  FFE3         	movff	btemp,plusw1
  6077   014024                     
  6078                           ;can/can.c: 1393:     return spiTransferError;
  6079                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  6080   014024  0EFF               	movlw	-1
  6081   014026  CFE3 F02D          	movff	plusw1,btemp
  6082   01402A                     
  6083                           ; _DRV_CANFDSPI_ReceiveChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 1, argsize = 1, vargsize = 0
  6084   01402A  0EF7               	movlw	247
  6085   01402C  26E1               	addwf	fsr1l,f,c
  6086   01402E  0EFF               	movlw	255
  6087   014030  22E2               	addwfc	fsr1h,f,c
  6088   014032  0012               	return		;funcret
  6089   014034                     __end_of_DRV_CANFDSPI_ReceiveChannelUpdate:
  6090                           	callstack 0
  6091                           
  6092 ;; *************** function _DRV_CANFDSPI_ReadByteArray *****************
  6093 ;; Defined at:
  6094 ;;		line 356 in file "can/can.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  address         2  [STACK] unsigned short 
  6097 ;;  rxd             2  [STACK] PTR unsigned char 
  6098 ;;		 -> ba(12), ba(76), 
  6099 ;;  nBytes          2  [STACK] unsigned short 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  i               2  [STACK] unsigned short 
  6102 ;;  spiTransferS    2  [STACK] unsigned short 
  6103 ;;  spiTransferE    1  [STACK] char 
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1  [STACK] char 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;Total ram usage:        0 bytes
  6118 ;; Hardware stack levels used: 1
  6119 ;; Hardware stack levels required when called: 8
  6120 ;; This function calls:
  6121 ;;		_SpiTransfer
  6122 ;; This function is called by:
  6123 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  6124 ;; This function uses a reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text14
  6128   012250                     __ptext14:
  6129                           	callstack 0
  6130   012250                     _DRV_CANFDSPI_ReadByteArray:
  6131                           	callstack 0
  6132                           
  6133                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6134   012250  0E05               	movlw	5
  6135   012252  26E1               	addwf	fsr1l,f,c
  6136   012254  0E00               	movlw	0
  6137   012256  22E2               	addwfc	fsr1h,f,c
  6138   012258                     
  6139                           ;can/can.c: 356: int8_t DRV_CANFDSPI_ReadByteArray(uint16_t address,;can/can.c: 357:    
      +                               uint8_t *rxd, uint16_t nBytes);can/can.c: 358: {;can/can.c: 359:     uint16_t i;;ca
      +                          n/can.c: 360:     uint16_t spiTransferSize = nBytes + 2;
  6140                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6141   012258  0EF5               	movlw	-11
  6142   01225A  50E3               	movf	plusw1,w,c
  6143   01225C  0F02               	addlw	2
  6144   01225E  6E37               	movwf	(btemp+10)^0,c
  6145   012260  0EF6               	movlw	-10
  6146   012262  CFE3 F038          	movff	plusw1,btemp+11
  6147   012266  0E00               	movlw	0
  6148   012268  2238               	addwfc	(btemp+11)^0,f,c
  6149                           
  6150                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6151   01226A  0EFD               	movlw	-3
  6152   01226C  C037  FFE3         	movff	btemp+10,plusw1
  6153   012270  0EFE               	movlw	-2
  6154   012272  C038  FFE3         	movff	btemp+11,plusw1
  6155   012276                     
  6156                           ;can/can.c: 364:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
  6157                           ;stkvar	_address @ sp[(-5)+-2]
  6158   012276  0EFA               	movlw	250
  6159   012278  24E1               	addwf	fsr1l,w,c
  6160   01227A  6ED9               	movwf	fsr2l,c
  6161   01227C  0EFF               	movlw	255
  6162   01227E  20E2               	addwfc	fsr1h,w,c
  6163   012280  6EDA               	movwf	fsr2h,c
  6164   012282  50DF               	movf	indf2,w,c
  6165   012284  0B0F               	andlw	15
  6166   012286  0F30               	addlw	48
  6167   012288  0101               	movlb	1	; () banked
  6168   01228A  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  6169   01228C                     
  6170                           ; BSR set to: 1
  6171                           ;can/can.c: 365:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  6172                           ;stkvar	_address @ sp[(-5)+-2]
  6173   01228C  0EF9               	movlw	-7
  6174   01228E  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  6175   012292                     
  6176                           ; BSR set to: 1
  6177                           ;can/can.c: 368:     for (i = 2; i < spiTransferSize; i++) {
  6178   012292  0E02               	movlw	2
  6179   012294  6E37               	movwf	(btemp+10)^0,c
  6180   012296  0E00               	movlw	0
  6181   012298  6E38               	movwf	(btemp+11)^0,c
  6182                           
  6183                           ;stkvar	_i @ sp[(-5)+0]
  6184   01229A  0EFB               	movlw	-5
  6185   01229C  C037  FFE3         	movff	btemp+10,plusw1
  6186   0122A0  0EFC               	movlw	-4
  6187   0122A2  C038  FFE3         	movff	btemp+11,plusw1
  6188   0122A6  EF71  F091         	goto	l4044
  6189   0122AA                     l4040:
  6190                           
  6191                           ;can/can.c: 369:         spiTransmitBuffer[i] = 0;
  6192                           ;stkvar	_i @ sp[(-5)+0]
  6193   0122AA  0EFB               	movlw	-5
  6194   0122AC  CFE3 F037          	movff	plusw1,btemp+10
  6195   0122B0  0EFC               	movlw	-4
  6196   0122B2  CFE3 F038          	movff	plusw1,btemp+11
  6197   0122B6  0E00               	movlw	low _spiTransmitBuffer
  6198   0122B8  2437               	addwf	(btemp+10)^0,w,c
  6199   0122BA  6ED9               	movwf	fsr2l,c
  6200   0122BC  0E01               	movlw	high _spiTransmitBuffer
  6201   0122BE  2038               	addwfc	(btemp+11)^0,w,c
  6202   0122C0  6EDA               	movwf	fsr2h,c
  6203   0122C2  6ADF               	clrf	indf2,c
  6204   0122C4                     
  6205                           ;can/can.c: 370:     }
  6206                           ;stkvar	_i @ sp[(-5)+0]
  6207   0122C4  0EFB               	movlw	-5
  6208   0122C6  50E3               	movf	plusw1,w,c
  6209   0122C8  0F01               	addlw	1
  6210   0122CA  6E2D               	movwf	btemp^0,c
  6211   0122CC  0EFB               	movlw	-5
  6212   0122CE  C02D  FFE3         	movff	btemp,plusw1
  6213   0122D2  6A2D               	clrf	btemp^0,c
  6214   0122D4  0EFC               	movlw	-4
  6215   0122D6  50E3               	movf	plusw1,w,c
  6216   0122D8  202D               	addwfc	btemp^0,w,c
  6217   0122DA  6E2D               	movwf	btemp^0,c
  6218   0122DC  0EFC               	movlw	-4
  6219   0122DE  C02D  FFE3         	movff	btemp,plusw1
  6220   0122E2                     l4044:
  6221                           
  6222                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6223   0122E2  0EFD               	movlw	-3
  6224   0122E4  CFE3 F037          	movff	plusw1,btemp+10
  6225   0122E8  0EFE               	movlw	-2
  6226   0122EA  CFE3 F038          	movff	plusw1,btemp+11
  6227                           
  6228                           ;stkvar	_i @ sp[(-5)+0]
  6229   0122EE  0EFB               	movlw	-5
  6230   0122F0  CFE3 F035          	movff	plusw1,btemp+8
  6231   0122F4  0EFC               	movlw	-4
  6232   0122F6  CFE3 F036          	movff	plusw1,btemp+9
  6233   0122FA  5037               	movf	(btemp+10)^0,w,c
  6234   0122FC  5C35               	subwf	(btemp+8)^0,w,c
  6235   0122FE  5038               	movf	(btemp+11)^0,w,c
  6236   012300  5836               	subwfb	(btemp+9)^0,w,c
  6237   012302  A0D8               	btfss	status,0,c
  6238   012304  EF86  F091         	goto	u1881
  6239   012308  EF88  F091         	goto	u1880
  6240   01230C                     u1881:
  6241   01230C  EF55  F091         	goto	l4040
  6242   012310                     u1880:
  6243   012310                     
  6244                           ;can/can.c: 372:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  6245                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  6246   012310  0EFD               	movlw	-3
  6247   012312  CFE3 FFE6          	movff	plusw1,postinc1
  6248   012316  CFE3 FFE6          	movff	plusw1,postinc1
  6249   01231A  0E00               	movlw	low _spiReceiveBuffer
  6250   01231C  6EE6               	movwf	postinc1,c
  6251   01231E  0E02               	movlw	high _spiReceiveBuffer
  6252   012320  6EE6               	movwf	postinc1,c
  6253   012322  0E00               	movlw	low _spiTransmitBuffer
  6254   012324  6EE6               	movwf	postinc1,c
  6255   012326  0E01               	movlw	high _spiTransmitBuffer
  6256   012328  6EE6               	movwf	postinc1,c
  6257   01232A  ECAD  F09B         	call	_SpiTransfer	;wreg free
  6258                           
  6259                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6260   01232E  0EFF               	movlw	-1
  6261   012330  C02D  FFE3         	movff	btemp,plusw1
  6262   012334                     
  6263                           ;can/can.c: 375:     for (i = 0; i < nBytes; i++) {
  6264                           ;stkvar	_i @ sp[(-5)+0]
  6265   012334  0EFB               	movlw	-5
  6266   012336  6AE3               	clrf	plusw1,c
  6267   012338  0EFC               	movlw	-4
  6268   01233A  6AE3               	clrf	plusw1,c
  6269   01233C  EFCF  F091         	goto	l4054
  6270   012340                     l4050:
  6271                           
  6272                           ;can/can.c: 376:         rxd[i] = spiReceiveBuffer[i + 2];
  6273                           ;stkvar	_i @ sp[(-5)+0]
  6274   012340  0EFB               	movlw	-5
  6275   012342  CFE3 F037          	movff	plusw1,btemp+10
  6276   012346  0EFC               	movlw	-4
  6277   012348  CFE3 F038          	movff	plusw1,btemp+11
  6278   01234C  0E02               	movlw	low (_spiReceiveBuffer+2)
  6279   01234E  2437               	addwf	(btemp+10)^0,w,c
  6280   012350  6ED9               	movwf	fsr2l,c
  6281   012352  0E02               	movlw	high (_spiReceiveBuffer+2)
  6282   012354  2038               	addwfc	(btemp+11)^0,w,c
  6283   012356  6EDA               	movwf	fsr2h,c
  6284                           
  6285                           ;stkvar	_i @ sp[(-5)+0]
  6286   012358  0EFB               	movlw	-5
  6287   01235A  CFE3 F037          	movff	plusw1,btemp+10
  6288   01235E  0EFC               	movlw	-4
  6289   012360  CFE3 F038          	movff	plusw1,btemp+11
  6290                           
  6291                           ;stkvar	_rxd @ sp[(-5)+-4]
  6292   012364  0EF7               	movlw	-9
  6293   012366  CFE3 F035          	movff	plusw1,btemp+8
  6294   01236A  0EF8               	movlw	-8
  6295   01236C  CFE3 F036          	movff	plusw1,btemp+9
  6296   012370  5037               	movf	(btemp+10)^0,w,c
  6297   012372  2435               	addwf	(btemp+8)^0,w,c
  6298   012374  6EE9               	movwf	fsr0l,c
  6299   012376  5038               	movf	(btemp+11)^0,w,c
  6300   012378  2036               	addwfc	(btemp+9)^0,w,c
  6301   01237A  6EEA               	movwf	fsr0h,c
  6302   01237C  CFDF FFEF          	movff	indf2,indf0
  6303   012380                     
  6304                           ;can/can.c: 377:     }
  6305                           ;stkvar	_i @ sp[(-5)+0]
  6306   012380  0EFB               	movlw	-5
  6307   012382  50E3               	movf	plusw1,w,c
  6308   012384  0F01               	addlw	1
  6309   012386  6E2D               	movwf	btemp^0,c
  6310   012388  0EFB               	movlw	-5
  6311   01238A  C02D  FFE3         	movff	btemp,plusw1
  6312   01238E  6A2D               	clrf	btemp^0,c
  6313   012390  0EFC               	movlw	-4
  6314   012392  50E3               	movf	plusw1,w,c
  6315   012394  202D               	addwfc	btemp^0,w,c
  6316   012396  6E2D               	movwf	btemp^0,c
  6317   012398  0EFC               	movlw	-4
  6318   01239A  C02D  FFE3         	movff	btemp,plusw1
  6319   01239E                     l4054:
  6320                           
  6321                           ;stkvar	_nBytes @ sp[(-5)+-6]
  6322   01239E  0EF5               	movlw	-11
  6323   0123A0  CFE3 F037          	movff	plusw1,btemp+10
  6324   0123A4  0EF6               	movlw	-10
  6325   0123A6  CFE3 F038          	movff	plusw1,btemp+11
  6326                           
  6327                           ;stkvar	_i @ sp[(-5)+0]
  6328   0123AA  0EFB               	movlw	-5
  6329   0123AC  CFE3 F035          	movff	plusw1,btemp+8
  6330   0123B0  0EFC               	movlw	-4
  6331   0123B2  CFE3 F036          	movff	plusw1,btemp+9
  6332   0123B6  5037               	movf	(btemp+10)^0,w,c
  6333   0123B8  5C35               	subwf	(btemp+8)^0,w,c
  6334   0123BA  5038               	movf	(btemp+11)^0,w,c
  6335   0123BC  5836               	subwfb	(btemp+9)^0,w,c
  6336   0123BE  A0D8               	btfss	status,0,c
  6337   0123C0  EFE4  F091         	goto	u1891
  6338   0123C4  EFE6  F091         	goto	u1890
  6339   0123C8                     u1891:
  6340   0123C8  EFA0  F091         	goto	l4050
  6341   0123CC                     u1890:
  6342   0123CC                     
  6343                           ;can/can.c: 379:     return spiTransferError;
  6344                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  6345   0123CC  0EFF               	movlw	-1
  6346   0123CE  CFE3 F02D          	movff	plusw1,btemp
  6347   0123D2                     
  6348                           ; _DRV_CANFDSPI_ReadByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 6, argsize = 6, vargsize = 0
  6349   0123D2  0EF5               	movlw	245
  6350   0123D4  26E1               	addwf	fsr1l,f,c
  6351   0123D6  0EFF               	movlw	255
  6352   0123D8  22E2               	addwfc	fsr1h,f,c
  6353   0123DA  0012               	return		;funcret
  6354   0123DC                     __end_of_DRV_CANFDSPI_ReadByteArray:
  6355                           	callstack 0
  6356                           
  6357 ;; *************** function _DRV_CANFDSPI_ReceiveChannelEventGet *****************
  6358 ;; Defined at:
  6359 ;;		line 1928 in file "can/can.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  channel         1  [STACK] enum E5290
  6362 ;;  flags           2  [STACK] PTR enum E5591
  6363 ;;		 -> rxFlags(1), 
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  6366 ;;  a               2  [STACK] unsigned short 
  6367 ;;  spiTransferE    1  [STACK] char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1  [STACK] char 
  6370 ;; Registers used:
  6371 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;Total ram usage:        0 bytes
  6382 ;; Hardware stack levels used: 1
  6383 ;; Hardware stack levels required when called: 9
  6384 ;; This function calls:
  6385 ;;		_DRV_CANFDSPI_ReadByte
  6386 ;; This function is called by:
  6387 ;;		_CanReceive
  6388 ;; This function uses a reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text15
  6392   013C46                     __ptext15:
  6393                           	callstack 0
  6394   013C46                     _DRV_CANFDSPI_ReceiveChannelEventGet:
  6395                           	callstack 0
  6396                           
  6397                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6398   013C46  0E07               	movlw	7
  6399   013C48  26E1               	addwf	fsr1l,f,c
  6400   013C4A  0E00               	movlw	0
  6401   013C4C  22E2               	addwfc	fsr1h,f,c
  6402   013C4E                     
  6403                           ;can/can.c: 1934:     if (channel == CAN_FIFO_CH0) return -100;
  6404                           ;stkvar	_channel @ sp[(-7)+-1]
  6405   013C4E  0EF8               	movlw	-8
  6406   013C50  50E3               	movf	plusw1,w,c
  6407   013C52  A4D8               	btfss	status,2,c
  6408   013C54  EF2E  F09E         	goto	u1951
  6409   013C58  EF30  F09E         	goto	u1950
  6410   013C5C                     u1951:
  6411   013C5C  EF32  F09E         	goto	l4126
  6412   013C60                     u1950:
  6413   013C60  EF70  F09E         	goto	l482
  6414   013C64                     l4126:
  6415                           
  6416                           ;can/can.c: 1937:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1938:     ciFifoSta.word = 0;
  6417                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6418   013C64  0EF9               	movlw	-7
  6419   013C66  6AE3               	clrf	plusw1,c
  6420   013C68  0EFA               	movlw	-6
  6421   013C6A  6AE3               	clrf	plusw1,c
  6422   013C6C  0EFB               	movlw	-5
  6423   013C6E  6AE3               	clrf	plusw1,c
  6424   013C70  0EFC               	movlw	-4
  6425   013C72  6AE3               	clrf	plusw1,c
  6426   013C74                     
  6427                           ;can/can.c: 1939:     a = 0x054 + (channel * (3*4));
  6428                           ;stkvar	_channel @ sp[(-7)+-1]
  6429   013C74  0EF8               	movlw	-8
  6430   013C76  50E3               	movf	plusw1,w,c
  6431   013C78  0D0C               	mullw	12
  6432   013C7A  0E54               	movlw	84
  6433   013C7C  26F3               	addwf	243,f,c
  6434   013C7E  0E00               	movlw	0
  6435   013C80  22F4               	addwfc	244,f,c
  6436                           
  6437                           ;stkvar	_a @ sp[(-7)+4]
  6438   013C82  0EFD               	movlw	-3
  6439   013C84  CFF3 FFE3          	movff	prodl,plusw1
  6440   013C88  0EFE               	movlw	-2
  6441   013C8A  CFF4 FFE3          	movff	prodh,plusw1
  6442   013C8E                     
  6443                           ;can/can.c: 1941:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  6444                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6445   013C8E  0EF9               	movlw	249
  6446   013C90  24E1               	addwf	fsr1l,w,c
  6447   013C92  6E2D               	movwf	btemp^0,c
  6448   013C94  0EFF               	movlw	255
  6449   013C96  20E2               	addwfc	fsr1h,w,c
  6450   013C98  6E2E               	movwf	(btemp+1)^0,c
  6451   013C9A  C02D  FFE6         	movff	btemp,postinc1
  6452   013C9E  C02E  FFE6         	movff	btemp+1,postinc1
  6453                           
  6454                           ;stkvar	_a @ sp[(-9)+4]
  6455   013CA2  0EFB               	movlw	-5
  6456   013CA4  CFE3 FFE6          	movff	plusw1,postinc1
  6457   013CA8  CFE3 FFE6          	movff	plusw1,postinc1
  6458   013CAC  ECB3  F0A0         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  6459                           
  6460                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6461   013CB0  0EFF               	movlw	-1
  6462   013CB2  C02D  FFE3         	movff	btemp,plusw1
  6463   013CB6                     
  6464                           ;can/can.c: 1942:     if (spiTransferError) {
  6465                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  6466   013CB6  0EFF               	movlw	-1
  6467   013CB8  50E3               	movf	plusw1,w,c
  6468   013CBA  B4D8               	btfsc	status,2,c
  6469   013CBC  EF62  F09E         	goto	u1961
  6470   013CC0  EF64  F09E         	goto	u1960
  6471   013CC4                     u1961:
  6472   013CC4  EF66  F09E         	goto	l4136
  6473   013CC8                     u1960:
  6474   013CC8  EF70  F09E         	goto	l482
  6475   013CCC                     l4136:
  6476                           
  6477                           ;can/can.c: 1947:     *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_
      +                          EVENTS);
  6478                           ;stkvar	_flags @ sp[(-7)+-3]
  6479   013CCC  0EF6               	movlw	-10
  6480   013CCE  CFE3 FFD9          	movff	plusw1,fsr2l
  6481   013CD2  0EF7               	movlw	-9
  6482   013CD4  CFE3 FFDA          	movff	plusw1,fsr2h
  6483                           
  6484                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  6485   013CD8  0EF9               	movlw	-7
  6486   013CDA  50E3               	movf	plusw1,w,c
  6487   013CDC  0B0F               	andlw	15
  6488   013CDE  6EDF               	movwf	indf2,c
  6489   013CE0                     l482:
  6490                           
  6491                           ; _DRV_CANFDSPI_ReceiveChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
  6492   013CE0  0EF6               	movlw	246
  6493   013CE2  26E1               	addwf	fsr1l,f,c
  6494   013CE4  0EFF               	movlw	255
  6495   013CE6  22E2               	addwfc	fsr1h,f,c
  6496   013CE8  0012               	return		;funcret
  6497   013CEA                     __end_of_DRV_CANFDSPI_ReceiveChannelEventGet:
  6498                           	callstack 0
  6499                           
  6500 ;; *************** function _XF_init *****************
  6501 ;; Defined at:
  6502 ;;		line 80 in file "xf/xf.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  i               2  [STACK] int 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1  [STACK] void 
  6509 ;; Registers used:
  6510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;Total ram usage:        0 bytes
  6521 ;; Hardware stack levels used: 1
  6522 ;; Hardware stack levels required when called: 8
  6523 ;; This function calls:
  6524 ;;		_Event_init
  6525 ;; This function is called by:
  6526 ;;		_main
  6527 ;; This function uses a reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text16
  6531   0126DE                     __ptext16:
  6532                           	callstack 0
  6533   0126DE                     _XF_init:
  6534                           	callstack 0
  6535                           
  6536                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6537   0126DE  52E6               	movf	postinc1,f,c
  6538   0126E0  52E6               	movf	postinc1,f,c
  6539   0126E2                     
  6540                           ;xf/xf.c: 82:     int i;;xf/xf.c: 83:     for (i=0; i<30; i++)
  6541                           ;stkvar	_i @ sp[(-2)+0]
  6542   0126E2  0EFE               	movlw	-2
  6543   0126E4  6AE3               	clrf	plusw1,c
  6544   0126E6  0EFF               	movlw	-1
  6545   0126E8  6AE3               	clrf	plusw1,c
  6546   0126EA                     l4878:
  6547                           
  6548                           ;xf/xf.c: 84:     {;xf/xf.c: 85:         Event_init(&(theXF.eventQueue[i]));
  6549                           ;stkvar	_i @ sp[(-2)+0]
  6550   0126EA  0EFE               	movlw	-2
  6551   0126EC  CFE3 F037          	movff	plusw1,btemp+10
  6552   0126F0  0EFF               	movlw	-1
  6553   0126F2  CFE3 F038          	movff	plusw1,btemp+11
  6554   0126F6  0E06               	movlw	6
  6555   0126F8  0237               	mulwf	(btemp+10)^0,c
  6556   0126FA  CFF3 F035          	movff	prodl,btemp+8
  6557   0126FE  CFF4 F036          	movff	prodh,btemp+9
  6558   012702  0238               	mulwf	(btemp+11)^0,c
  6559   012704  50F3               	movf	prodl,w,c
  6560   012706  2636               	addwf	(btemp+9)^0,f,c
  6561   012708  0E28               	movlw	low (_theXF+96)
  6562   01270A  2435               	addwf	(btemp+8)^0,w,c
  6563   01270C  6E37               	movwf	(btemp+10)^0,c
  6564   01270E  0E03               	movlw	high (_theXF+96)
  6565   012710  2036               	addwfc	(btemp+9)^0,w,c
  6566   012712  6E38               	movwf	(btemp+11)^0,c
  6567   012714  C037  FFE6         	movff	btemp+10,postinc1
  6568   012718  C038  FFE6         	movff	btemp+11,postinc1
  6569   01271C  EC6B  F0A1         	call	_Event_init	;wreg free
  6570   012720                     
  6571                           ;xf/xf.c: 86:     }
  6572                           ;stkvar	_i @ sp[(-2)+0]
  6573   012720  0EFE               	movlw	-2
  6574   012722  50E3               	movf	plusw1,w,c
  6575   012724  0F01               	addlw	1
  6576   012726  6E2D               	movwf	btemp^0,c
  6577   012728  0EFE               	movlw	-2
  6578   01272A  C02D  FFE3         	movff	btemp,plusw1
  6579   01272E  6A2D               	clrf	btemp^0,c
  6580   012730  0EFF               	movlw	-1
  6581   012732  50E3               	movf	plusw1,w,c
  6582   012734  202D               	addwfc	btemp^0,w,c
  6583   012736  6E2D               	movwf	btemp^0,c
  6584   012738  0EFF               	movlw	-1
  6585   01273A  C02D  FFE3         	movff	btemp,plusw1
  6586   01273E                     
  6587                           ;stkvar	_i @ sp[(-2)+0]
  6588   01273E  0EFF               	movlw	-1
  6589   012740  BEE3               	btfsc	plusw1,7,c
  6590   012742  EFB0  F093         	goto	u2721
  6591   012746  0EFF               	movlw	-1
  6592   012748  50E3               	movf	plusw1,w,c
  6593   01274A  E10C               	bnz	u2720
  6594   01274C  0EFE               	movlw	-2
  6595   01274E  CFE3 F02D          	movff	plusw1,btemp
  6596   012752  0E1E               	movlw	30
  6597   012754  5E2D               	subwf	btemp^0,f,c
  6598   012756  A0D8               	btfss	status,0,c
  6599   012758  EFB0  F093         	goto	u2721
  6600   01275C  EFB2  F093         	goto	u2720
  6601   012760                     u2721:
  6602   012760  EF75  F093         	goto	l4878
  6603   012764                     u2720:
  6604   012764                     
  6605                           ;xf/xf.c: 88:     for (i=0; i<12; i++)
  6606                           ;stkvar	_i @ sp[(-2)+0]
  6607   012764  0EFE               	movlw	-2
  6608   012766  6AE3               	clrf	plusw1,c
  6609   012768  0EFF               	movlw	-1
  6610   01276A  6AE3               	clrf	plusw1,c
  6611   01276C                     l4890:
  6612                           
  6613                           ;xf/xf.c: 89:     {;xf/xf.c: 90:         theXF.timerList[i].tm = 0;
  6614                           ;stkvar	_i @ sp[(-2)+0]
  6615   01276C  0EFE               	movlw	-2
  6616   01276E  CFE3 F037          	movff	plusw1,btemp+10
  6617   012772  0EFF               	movlw	-1
  6618   012774  CFE3 F038          	movff	plusw1,btemp+11
  6619   012778  90D8               	bcf	status,0,c
  6620   01277A  3637               	rlcf	(btemp+10)^0,f,c
  6621   01277C  3638               	rlcf	(btemp+11)^0,f,c
  6622   01277E  90D8               	bcf	status,0,c
  6623   012780  3637               	rlcf	(btemp+10)^0,f,c
  6624   012782  3638               	rlcf	(btemp+11)^0,f,c
  6625   012784  90D8               	bcf	status,0,c
  6626   012786  3637               	rlcf	(btemp+10)^0,f,c
  6627   012788  3638               	rlcf	(btemp+11)^0,f,c
  6628   01278A  0EC8               	movlw	low _theXF
  6629   01278C  2437               	addwf	(btemp+10)^0,w,c
  6630   01278E  6ED9               	movwf	fsr2l,c
  6631   012790  0E02               	movlw	high _theXF
  6632   012792  2038               	addwfc	(btemp+11)^0,w,c
  6633   012794  6EDA               	movwf	fsr2h,c
  6634   012796  6ADE               	clrf	postinc2,c
  6635   012798  6ADD               	clrf	postdec2,c
  6636   01279A                     
  6637                           ;xf/xf.c: 91:         Event_init(&(theXF.timerList[i].ev));
  6638                           ;stkvar	_i @ sp[(-2)+0]
  6639   01279A  0EFE               	movlw	-2
  6640   01279C  CFE3 F037          	movff	plusw1,btemp+10
  6641   0127A0  0EFF               	movlw	-1
  6642   0127A2  CFE3 F038          	movff	plusw1,btemp+11
  6643   0127A6  90D8               	bcf	status,0,c
  6644   0127A8  3637               	rlcf	(btemp+10)^0,f,c
  6645   0127AA  3638               	rlcf	(btemp+11)^0,f,c
  6646   0127AC  90D8               	bcf	status,0,c
  6647   0127AE  3637               	rlcf	(btemp+10)^0,f,c
  6648   0127B0  3638               	rlcf	(btemp+11)^0,f,c
  6649   0127B2  90D8               	bcf	status,0,c
  6650   0127B4  3637               	rlcf	(btemp+10)^0,f,c
  6651   0127B6  3638               	rlcf	(btemp+11)^0,f,c
  6652   0127B8  0ECA               	movlw	low (_theXF+2)
  6653   0127BA  2437               	addwf	(btemp+10)^0,w,c
  6654   0127BC  6E35               	movwf	(btemp+8)^0,c
  6655   0127BE  0E02               	movlw	high (_theXF+2)
  6656   0127C0  2038               	addwfc	(btemp+11)^0,w,c
  6657   0127C2  6E36               	movwf	(btemp+9)^0,c
  6658   0127C4  C035  FFE6         	movff	btemp+8,postinc1
  6659   0127C8  C036  FFE6         	movff	btemp+9,postinc1
  6660   0127CC  EC6B  F0A1         	call	_Event_init	;wreg free
  6661   0127D0                     
  6662                           ;xf/xf.c: 92:     }
  6663                           ;stkvar	_i @ sp[(-2)+0]
  6664   0127D0  0EFE               	movlw	-2
  6665   0127D2  50E3               	movf	plusw1,w,c
  6666   0127D4  0F01               	addlw	1
  6667   0127D6  6E2D               	movwf	btemp^0,c
  6668   0127D8  0EFE               	movlw	-2
  6669   0127DA  C02D  FFE3         	movff	btemp,plusw1
  6670   0127DE  6A2D               	clrf	btemp^0,c
  6671   0127E0  0EFF               	movlw	-1
  6672   0127E2  50E3               	movf	plusw1,w,c
  6673   0127E4  202D               	addwfc	btemp^0,w,c
  6674   0127E6  6E2D               	movwf	btemp^0,c
  6675   0127E8  0EFF               	movlw	-1
  6676   0127EA  C02D  FFE3         	movff	btemp,plusw1
  6677   0127EE                     
  6678                           ;stkvar	_i @ sp[(-2)+0]
  6679   0127EE  0EFF               	movlw	-1
  6680   0127F0  BEE3               	btfsc	plusw1,7,c
  6681   0127F2  EF08  F094         	goto	u2731
  6682   0127F6  0EFF               	movlw	-1
  6683   0127F8  50E3               	movf	plusw1,w,c
  6684   0127FA  E10C               	bnz	u2730
  6685   0127FC  0EFE               	movlw	-2
  6686   0127FE  CFE3 F02D          	movff	plusw1,btemp
  6687   012802  0E0C               	movlw	12
  6688   012804  5E2D               	subwf	btemp^0,f,c
  6689   012806  A0D8               	btfss	status,0,c
  6690   012808  EF08  F094         	goto	u2731
  6691   01280C  EF0A  F094         	goto	u2730
  6692   012810                     u2731:
  6693   012810  EFB6  F093         	goto	l4890
  6694   012814                     u2730:
  6695   012814                     
  6696                           ;xf/xf.c: 93:     theXF.in = 0;
  6697   012814  0E00               	movlw	0
  6698   012816  CFE8 F3DC          	movff	wreg,_theXF+276
  6699                           
  6700                           ;xf/xf.c: 94:     theXF.out = 0;
  6701   01281A  0E00               	movlw	0
  6702   01281C  CFE8 F3DD          	movff	wreg,_theXF+277
  6703                           
  6704                           ;xf/xf.c: 95:     theXF.maxEvt = 0;
  6705   012820  0E00               	movlw	0
  6706   012822  CFE8 F3DE          	movff	wreg,_theXF+278
  6707                           
  6708                           ;xf/xf.c: 96:     theXF.countEvt = 0;
  6709   012826  0E00               	movlw	0
  6710   012828  CFE8 F3DF          	movff	wreg,_theXF+279
  6711   01282C                     
  6712                           ; _XF_init: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsi
      +                          ze = 0, vargsize = 0
  6713   01282C  52E5               	movf	postdec1,f,c
  6714   01282E  52E5               	movf	postdec1,f,c
  6715   012830  0012               	return		;funcret
  6716   012832                     __end_of_XF_init:
  6717                           	callstack 0
  6718                           
  6719 ;; *************** function _Event_init *****************
  6720 ;; Defined at:
  6721 ;;		line 4 in file "xf/event.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  me              2  [STACK] PTR struct Event_
  6724 ;;		 -> ev(6), theXF$timerList(96), theXF$eventQueue(180), theXF(282), 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1  [STACK] void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        0 bytes
  6741 ;; Hardware stack levels used: 1
  6742 ;; Hardware stack levels required when called: 7
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_XF_init
  6747 ;;		_XF_unscheduleTimer
  6748 ;;		_XF_post
  6749 ;; This function uses a reentrant model
  6750 ;;
  6751                           
  6752                           	psect	text17
  6753   0142D6                     __ptext17:
  6754                           	callstack 0
  6755   0142D6                     _Event_init:
  6756                           	callstack 10
  6757   0142D6                     
  6758                           ;xf/event.c: 4: void Event_init(struct Event_* me);xf/event.c: 5: {;xf/event.c: 6:     m
      +                          e->id = 0;
  6759                           ;stkvar	_me @ sp[(0)+-2]
  6760   0142D6  0EFE               	movlw	-2
  6761   0142D8  CFE3 FFD9          	movff	plusw1,fsr2l
  6762   0142DC  0EFF               	movlw	-1
  6763   0142DE  CFE3 FFDA          	movff	plusw1,fsr2h
  6764   0142E2  6ADF               	clrf	indf2,c
  6765   0142E4                     
  6766                           ;xf/event.c: 7:     me->delay = 0;
  6767                           ;stkvar	_me @ sp[(0)+-2]
  6768   0142E4  0EFE               	movlw	-2
  6769   0142E6  CFE3 F037          	movff	plusw1,btemp+10
  6770   0142EA  0EFF               	movlw	-1
  6771   0142EC  CFE3 F038          	movff	plusw1,btemp+11
  6772   0142F0  0E04               	movlw	4
  6773   0142F2  2437               	addwf	(btemp+10)^0,w,c
  6774   0142F4  6ED9               	movwf	fsr2l,c
  6775   0142F6  0E00               	movlw	0
  6776   0142F8  2038               	addwfc	(btemp+11)^0,w,c
  6777   0142FA  6EDA               	movwf	fsr2h,c
  6778   0142FC  6ADE               	clrf	postinc2,c
  6779   0142FE  6ADD               	clrf	postdec2,c
  6780   014300                     
  6781                           ;xf/event.c: 8:     me->processEvent = ((void*)(0));
  6782                           ;stkvar	_me @ sp[(0)+-2]
  6783   014300  0EFE               	movlw	-2
  6784   014302  CFE3 F037          	movff	plusw1,btemp+10
  6785   014306  0EFF               	movlw	-1
  6786   014308  CFE3 F038          	movff	plusw1,btemp+11
  6787   01430C  0E01               	movlw	1
  6788   01430E  2437               	addwf	(btemp+10)^0,w,c
  6789   014310  6ED9               	movwf	fsr2l,c
  6790   014312  0E00               	movlw	0
  6791   014314  2038               	addwfc	(btemp+11)^0,w,c
  6792   014316  6EDA               	movwf	fsr2h,c
  6793   014318  6ADE               	clrf	postinc2,c
  6794   01431A  6ADE               	clrf	postinc2,c
  6795   01431C  6ADD               	clrf	postdec2,c
  6796   01431E                     
  6797                           ; _Event_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  6798   01431E  52E5               	movf	postdec1,f,c
  6799   014320  52E5               	movf	postdec1,f,c
  6800   014322  0012               	return		;funcret
  6801   014324                     __end_of_Event_init:
  6802                           	callstack 0
  6803                           
  6804 ;; *************** function _XF_executeOnce *****************
  6805 ;; Defined at:
  6806 ;;		line 290 in file "xf/xf.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  ev              6  [STACK] struct Event_
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1  [STACK] void 
  6813 ;; Registers used:
  6814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prodh
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;Total ram usage:        0 bytes
  6825 ;; Hardware stack levels used: 1
  6826 ;; Hardware stack levels required when called: 14
  6827 ;; This function calls:
  6828 ;;		_XF_popEvent
  6829 ;;		_lightControl_Process
  6830 ;; This function is called by:
  6831 ;;		_main
  6832 ;; This function uses a reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text18
  6836   013EAA                     __ptext18:
  6837                           	callstack 0
  6838   013EAA                     _XF_executeOnce:
  6839                           	callstack 0
  6840                           
  6841                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  6842   013EAA  0E06               	movlw	6
  6843   013EAC  26E1               	addwf	fsr1l,f,c
  6844   013EAE  0E00               	movlw	0
  6845   013EB0  22E2               	addwfc	fsr1h,f,c
  6846   013EB2                     
  6847                           ;xf/xf.c: 292:     Event ev = XF_popEvent(0);
  6848   013EB2  0E00               	movlw	0
  6849   013EB4  6EE6               	movwf	postinc1,c
  6850   013EB6  ECE2  F09A         	call	_XF_popEvent	;wreg free
  6851                           
  6852                           ;stkvar	_ev @ sp[(-12)+0]
  6853   013EBA  0EFA               	movlw	250
  6854   013EBC  24E1               	addwf	fsr1l,w,c
  6855   013EBE  6ED9               	movwf	fsr2l,c
  6856   013EC0  0EFF               	movlw	255
  6857   013EC2  20E2               	addwfc	fsr1h,w,c
  6858   013EC4  6EDA               	movwf	fsr2h,c
  6859   013EC6  0E06               	movlw	6
  6860   013EC8  6E2D               	movwf	btemp^0,c
  6861   013ECA                     uf274999:
  6862   013ECA  50DD               	movf	postdec2,w,c
  6863   013ECC  52E5               	movf	postdec1,f,c
  6864   013ECE  50E7               	movf	indf1,w,c
  6865   013ED0  6EDF               	movwf	indf2,c
  6866   013ED2  2E2D               	decfsz	btemp^0,f,c
  6867   013ED4  D7FA               	bra	uf274999
  6868   013ED6                     
  6869                           ;xf/xf.c: 294:     if (ev.processEvent != ((void*)0))
  6870                           ;stkvar	_ev @ sp[(-6)+0]
  6871   013ED6  0EFB               	movlw	251
  6872   013ED8  24E1               	addwf	fsr1l,w,c
  6873   013EDA  6ED9               	movwf	fsr2l,c
  6874   013EDC  0EFF               	movlw	255
  6875   013EDE  20E2               	addwfc	fsr1h,w,c
  6876   013EE0  6EDA               	movwf	fsr2h,c
  6877   013EE2  50DE               	movf	postinc2,w,c
  6878   013EE4  10DE               	iorwf	postinc2,w,c
  6879   013EE6  10DE               	iorwf	postinc2,w,c
  6880   013EE8  B4D8               	btfsc	status,2,c
  6881   013EEA  EF79  F09F         	goto	u2751
  6882   013EEE  EF7B  F09F         	goto	u2750
  6883   013EF2                     u2751:
  6884   013EF2  EF98  F09F         	goto	l1261
  6885   013EF6                     u2750:
  6886   013EF6                     
  6887                           ;xf/xf.c: 295:     {;xf/xf.c: 298:         ev.processEvent(&ev);
  6888                           ;stkvar	_ev @ sp[(-6)+0]
  6889   013EF6  0EFA               	movlw	250
  6890   013EF8  24E1               	addwf	fsr1l,w,c
  6891   013EFA  6E2D               	movwf	btemp^0,c
  6892   013EFC  0EFF               	movlw	255
  6893   013EFE  20E2               	addwfc	fsr1h,w,c
  6894   013F00  6E2E               	movwf	(btemp+1)^0,c
  6895   013F02  C02D  FFE6         	movff	btemp,postinc1
  6896   013F06  C02E  FFE6         	movff	btemp+1,postinc1
  6897                           
  6898                           ;stkvar	_ev @ sp[(-8)+0]
  6899   013F0A  0EF9               	movlw	249
  6900   013F0C  24E1               	addwf	fsr1l,w,c
  6901   013F0E  6ED9               	movwf	fsr2l,c
  6902   013F10  0EFF               	movlw	255
  6903   013F12  20E2               	addwfc	fsr1h,w,c
  6904   013F14  6EDA               	movwf	fsr2h,c
  6905   013F16  D802               	call	u2768
  6906   013F18  EF98  F09F         	goto	u2769
  6907   013F1C                     u2768:
  6908   013F1C  0005               	push	
  6909   013F1E  6EFA               	movwf	pclath,c
  6910   013F20  50DE               	movf	postinc2,w,c
  6911   013F22  6EFD               	movwf	tosl,c
  6912   013F24  50DE               	movf	postinc2,w,c
  6913   013F26  6EFE               	movwf	tosh,c
  6914   013F28  50DE               	movf	postinc2,w,c
  6915   013F2A  6EFF               	movwf	tosu,c
  6916   013F2C  50FA               	movf	pclath,w,c
  6917   013F2E  0012               	return		;indir
  6918   013F30                     u2769:
  6919   013F30                     l1261:
  6920                           
  6921                           ; _XF_executeOnce: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
  6922   013F30  0EFA               	movlw	250
  6923   013F32  26E1               	addwf	fsr1l,f,c
  6924   013F34  0EFF               	movlw	255
  6925   013F36  22E2               	addwfc	fsr1h,f,c
  6926   013F38  0012               	return		;funcret
  6927   013F3A                     __end_of_XF_executeOnce:
  6928                           	callstack 0
  6929                           
  6930 ;; *************** function _lightControl_Process *****************
  6931 ;; Defined at:
  6932 ;;		line 54 in file "carFunctions.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  ev              2  [STACK] PTR struct Event_
  6935 ;;		 -> ev(6), 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;		None
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1  [STACK] _Bool 
  6940 ;; Registers used:
  6941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;Total ram usage:        0 bytes
  6952 ;; Hardware stack levels used: 1
  6953 ;; Hardware stack levels required when called: 13
  6954 ;; This function calls:
  6955 ;;		_lightContol_BackLight
  6956 ;;		_lightContol_FrontLight
  6957 ;; This function is called by:
  6958 ;;		_main
  6959 ;;		_updateCarState
  6960 ;;		_XF_executeOnce
  6961 ;; This function uses a reentrant model
  6962 ;;
  6963                           
  6964                           	psect	text19
  6965   01297C                     __ptext19:
  6966                           	callstack 0
  6967   01297C                     _lightControl_Process:
  6968                           	callstack 16
  6969   01297C                     
  6970                           ;carFunctions.c: 54: _Bool lightControl_Process(Event* ev);carFunctions.c: 55: {;carFunc
      +                          tions.c: 63:     static LightState state = INIT;;carFunctions.c: 64:     static LightSta
      +                          te oldState = INIT;;carFunctions.c: 65:     switch(state)
  6971   01297C  EF0A  F095         	goto	l4764
  6972   012980                     l4746:
  6973                           
  6974                           ;carFunctions.c: 68:             if(ev->id == E_INIT){
  6975                           ;stkvar	_ev @ sp[(0)+-2]
  6976   012980  0EFE               	movlw	-2
  6977   012982  CFE3 FFD9          	movff	plusw1,fsr2l
  6978   012986  0EFF               	movlw	-1
  6979   012988  CFE3 FFDA          	movff	plusw1,fsr2h
  6980   01298C  50DF               	movf	indf2,w,c
  6981   01298E  06E8               	decf	wreg,f,c
  6982   012990  A4D8               	btfss	status,2,c
  6983   012992  EFCD  F094         	goto	u2651
  6984   012996  EFCF  F094         	goto	u2650
  6985   01299A                     u2651:
  6986   01299A  EF23  F095         	goto	l4766
  6987   01299E                     u2650:
  6988   01299E                     l4748:
  6989                           
  6990                           ;carFunctions.c: 69:                 state = OFF;
  6991   01299E  0E01               	movlw	1
  6992   0129A0  6E2A               	movwf	lightControl_Process@state^0,c
  6993   0129A2  EF23  F095         	goto	l4766
  6994   0129A6                     l4750:
  6995                           
  6996                           ;carFunctions.c: 73:             if(ev->id == E_CONTACT_ON)
  6997                           ;stkvar	_ev @ sp[(0)+-2]
  6998   0129A6  0EFE               	movlw	-2
  6999   0129A8  CFE3 FFD9          	movff	plusw1,fsr2l
  7000   0129AC  0EFF               	movlw	-1
  7001   0129AE  CFE3 FFDA          	movff	plusw1,fsr2h
  7002   0129B2  50DF               	movf	indf2,w,c
  7003   0129B4  0A03               	xorlw	3
  7004   0129B6  A4D8               	btfss	status,2,c
  7005   0129B8  EFE0  F094         	goto	u2661
  7006   0129BC  EFE2  F094         	goto	u2660
  7007   0129C0                     u2661:
  7008   0129C0  EF23  F095         	goto	l4766
  7009   0129C4                     u2660:
  7010   0129C4                     
  7011                           ;carFunctions.c: 74:             {;carFunctions.c: 75:                 state = CRUISE;
  7012   0129C4  0E02               	movlw	2
  7013   0129C6  6E2A               	movwf	lightControl_Process@state^0,c
  7014   0129C8  EF23  F095         	goto	l4766
  7015   0129CC                     l4754:
  7016                           
  7017                           ;carFunctions.c: 80:             if(ev->id == E_CONTACT_OFF)
  7018                           ;stkvar	_ev @ sp[(0)+-2]
  7019   0129CC  0EFE               	movlw	-2
  7020   0129CE  CFE3 FFD9          	movff	plusw1,fsr2l
  7021   0129D2  0EFF               	movlw	-1
  7022   0129D4  CFE3 FFDA          	movff	plusw1,fsr2h
  7023   0129D8  50DF               	movf	indf2,w,c
  7024   0129DA  0A02               	xorlw	2
  7025   0129DC  A4D8               	btfss	status,2,c
  7026   0129DE  EFF3  F094         	goto	u2671
  7027   0129E2  EFF5  F094         	goto	u2670
  7028   0129E6                     u2671:
  7029   0129E6  EFF7  F094         	goto	l4758
  7030   0129EA                     u2670:
  7031   0129EA  EFCF  F094         	goto	l4748
  7032   0129EE                     l4758:
  7033                           
  7034                           ;stkvar	_ev @ sp[(0)+-2]
  7035   0129EE  0EFE               	movlw	-2
  7036   0129F0  CFE3 FFD9          	movff	plusw1,fsr2l
  7037   0129F4  0EFF               	movlw	-1
  7038   0129F6  CFE3 FFDA          	movff	plusw1,fsr2h
  7039   0129FA  50DF               	movf	indf2,w,c
  7040   0129FC  0A04               	xorlw	4
  7041   0129FE  A4D8               	btfss	status,2,c
  7042   012A00  EF04  F095         	goto	u2681
  7043   012A04  EF06  F095         	goto	u2680
  7044   012A08                     u2681:
  7045   012A08  EF23  F095         	goto	l4766
  7046   012A0C                     u2680:
  7047   012A0C                     
  7048                           ;carFunctions.c: 86:             {;carFunctions.c: 87:                 state = BRAKE;
  7049   012A0C  0E03               	movlw	3
  7050   012A0E  6E2A               	movwf	lightControl_Process@state^0,c
  7051   012A10  EF23  F095         	goto	l4766
  7052   012A14                     l4764:
  7053   012A14  502A               	movf	lightControl_Process@state^0,w,c
  7054   012A16  6E37               	movwf	(btemp+10)^0,c
  7055   012A18  6A38               	clrf	(btemp+11)^0,c
  7056                           
  7057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7058                           ; Switch size 1, requested type "simple"
  7059                           ; Number of cases is 1, Range of values is 0 to 0
  7060                           ; switch strategies available:
  7061                           ; Name         Instructions Cycles
  7062                           ; simple_byte            4     3 (average)
  7063                           ;	Chosen strategy is simple_byte
  7064   012A1A  5038               	movf	(btemp+11)^0,w,c
  7065   012A1C  0A00               	xorlw	0	; case 0
  7066   012A1E  B4D8               	btfsc	status,2,c
  7067   012A20  EF14  F095         	goto	l5026
  7068   012A24  EF23  F095         	goto	l4766
  7069   012A28                     l5026:
  7070                           
  7071                           ; Switch size 1, requested type "simple"
  7072                           ; Number of cases is 3, Range of values is 0 to 2
  7073                           ; switch strategies available:
  7074                           ; Name         Instructions Cycles
  7075                           ; simple_byte           10     6 (average)
  7076                           ;	Chosen strategy is simple_byte
  7077   012A28  5037               	movf	(btemp+10)^0,w,c
  7078   012A2A  0A00               	xorlw	0	; case 0
  7079   012A2C  B4D8               	btfsc	status,2,c
  7080   012A2E  EFC0  F094         	goto	l4746
  7081   012A32  0A01               	xorlw	1	; case 1
  7082   012A34  B4D8               	btfsc	status,2,c
  7083   012A36  EFD3  F094         	goto	l4750
  7084   012A3A  0A03               	xorlw	3	; case 2
  7085   012A3C  B4D8               	btfsc	status,2,c
  7086   012A3E  EFE6  F094         	goto	l4754
  7087   012A42  EF23  F095         	goto	l4766
  7088   012A46                     l4766:
  7089                           
  7090                           ;carFunctions.c: 94:    if(oldState == state)
  7091   012A46  502A               	movf	lightControl_Process@state^0,w,c
  7092   012A48  1829               	xorwf	lightControl_Process@oldState^0,w,c
  7093   012A4A  A4D8               	btfss	status,2,c
  7094   012A4C  EF2A  F095         	goto	u2691
  7095   012A50  EF2C  F095         	goto	u2690
  7096   012A54                     u2691:
  7097   012A54  EF2E  F095         	goto	l1447
  7098   012A58                     u2690:
  7099   012A58  EF5F  F095         	goto	l1448
  7100   012A5C                     l1447:
  7101                           
  7102                           ;carFunctions.c: 98:    oldState = state;
  7103   012A5C  C02A  F029         	movff	lightControl_Process@state,lightControl_Process@oldState
  7104                           
  7105                           ;carFunctions.c: 99:    switch(state)
  7106   012A60  EF46  F095         	goto	l4776
  7107   012A64                     l4770:
  7108                           
  7109                           ;carFunctions.c: 104:             lightContol_FrontLight(0);
  7110   012A64  0E00               	movlw	0
  7111   012A66  6EE6               	movwf	postinc1,c
  7112   012A68  EC20  F09D         	call	_lightContol_FrontLight	;wreg free
  7113                           
  7114                           ;carFunctions.c: 105:             lightContol_BackLight(0);
  7115   012A6C  0E00               	movlw	0
  7116   012A6E  6EE6               	movwf	postinc1,c
  7117   012A70  ECC6  F09C         	call	_lightContol_BackLight	;wreg free
  7118                           
  7119                           ;carFunctions.c: 106:             break;
  7120   012A74  EF5F  F095         	goto	l1448
  7121   012A78                     l4772:
  7122                           
  7123                           ;carFunctions.c: 108:             lightContol_FrontLight(50);
  7124   012A78  0E32               	movlw	50
  7125   012A7A  6EE6               	movwf	postinc1,c
  7126   012A7C  EC20  F09D         	call	_lightContol_FrontLight	;wreg free
  7127                           
  7128                           ;carFunctions.c: 109:             lightContol_BackLight(50);
  7129   012A80  0E32               	movlw	50
  7130   012A82  6EE6               	movwf	postinc1,c
  7131   012A84  ECC6  F09C         	call	_lightContol_BackLight	;wreg free
  7132                           
  7133                           ;carFunctions.c: 110:             break;
  7134   012A88  EF5F  F095         	goto	l1448
  7135   012A8C                     l4776:
  7136   012A8C  502A               	movf	lightControl_Process@state^0,w,c
  7137   012A8E  6E37               	movwf	(btemp+10)^0,c
  7138   012A90  6A38               	clrf	(btemp+11)^0,c
  7139                           
  7140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7141                           ; Switch size 1, requested type "simple"
  7142                           ; Number of cases is 1, Range of values is 0 to 0
  7143                           ; switch strategies available:
  7144                           ; Name         Instructions Cycles
  7145                           ; simple_byte            4     3 (average)
  7146                           ;	Chosen strategy is simple_byte
  7147   012A92  5038               	movf	(btemp+11)^0,w,c
  7148   012A94  0A00               	xorlw	0	; case 0
  7149   012A96  B4D8               	btfsc	status,2,c
  7150   012A98  EF50  F095         	goto	l5028
  7151   012A9C  EF5F  F095         	goto	l1448
  7152   012AA0                     l5028:
  7153                           
  7154                           ; Switch size 1, requested type "simple"
  7155                           ; Number of cases is 3, Range of values is 0 to 2
  7156                           ; switch strategies available:
  7157                           ; Name         Instructions Cycles
  7158                           ; simple_byte           10     6 (average)
  7159                           ;	Chosen strategy is simple_byte
  7160   012AA0  5037               	movf	(btemp+10)^0,w,c
  7161   012AA2  0A00               	xorlw	0	; case 0
  7162   012AA4  B4D8               	btfsc	status,2,c
  7163   012AA6  EF5F  F095         	goto	l1448
  7164   012AAA  0A01               	xorlw	1	; case 1
  7165   012AAC  B4D8               	btfsc	status,2,c
  7166   012AAE  EF32  F095         	goto	l4770
  7167   012AB2  0A03               	xorlw	3	; case 2
  7168   012AB4  B4D8               	btfsc	status,2,c
  7169   012AB6  EF3C  F095         	goto	l4772
  7170   012ABA  EF5F  F095         	goto	l1448
  7171   012ABE                     l1448:
  7172                           
  7173                           ; _lightControl_Process: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 2, argsize = 2, vargsize = 0
  7174   012ABE  52E5               	movf	postdec1,f,c
  7175   012AC0  52E5               	movf	postdec1,f,c
  7176   012AC2  0012               	return		;funcret
  7177   012AC4                     __end_of_lightControl_Process:
  7178                           	callstack 0
  7179                           
  7180 ;; *************** function _lightContol_FrontLight *****************
  7181 ;; Defined at:
  7182 ;;		line 24 in file "carFunctions.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  light           1  [STACK] unsigned char 
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7187 ;;  txdata          8  [STACK] unsigned char [8]
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1  [STACK] void 
  7190 ;; Registers used:
  7191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used: 1
  7203 ;; Hardware stack levels required when called: 12
  7204 ;; This function calls:
  7205 ;;		_CanSend
  7206 ;; This function is called by:
  7207 ;;		_lightControl_Process
  7208 ;; This function uses a reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text20
  7212   013A40                     __ptext20:
  7213                           	callstack 0
  7214   013A40                     _lightContol_FrontLight:
  7215                           	callstack 0
  7216                           
  7217                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7218   013A40  0E18               	movlw	24
  7219   013A42  26E1               	addwf	fsr1l,f,c
  7220   013A44  0E00               	movlw	0
  7221   013A46  22E2               	addwfc	fsr1h,f,c
  7222   013A48                     
  7223                           ;carFunctions.c: 24: void lightContol_FrontLight(uint8_t light);carFunctions.c: 25: {;ca
      +                          rFunctions.c: 27: static uint8_t lastLight=0;;carFunctions.c: 28: CAN_TX_MSGOBJ txMsg={0
      +                          };
  7224   013A48  EE20  F011         	lfsr	2,lightContol_FrontLight@F6636
  7225                           
  7226                           ;stkvar	_txMsg @ sp[(-24)+0]
  7227   013A4C  0E10               	movlw	16
  7228   013A4E  6E2D               	movwf	btemp^0,c
  7229   013A50  0EE8               	movlw	-24
  7230   013A52                     us219999:
  7231   013A52  CFDE FFE3          	movff	postinc2,plusw1
  7232   013A56  28E8               	incf	wreg,w,c
  7233   013A58  2E2D               	decfsz	btemp^0,f,c
  7234   013A5A  D7FB               	bra	us219999
  7235   013A5C                     
  7236                           ;carFunctions.c: 29: uint8_t txdata[8];;carFunctions.c: 30:     if(lastLight!= light) {
  7237                           ;stkvar	_light @ sp[(-24)+-1]
  7238   013A5C  0EE7               	movlw	-25
  7239   013A5E  50E3               	movf	plusw1,w,c
  7240   013A60  182C               	xorwf	lightContol_FrontLight@lastLight^0,w,c
  7241   013A62  B4D8               	btfsc	status,2,c
  7242   013A64  EF36  F09D         	goto	u2201
  7243   013A68  EF38  F09D         	goto	u2200
  7244   013A6C                     u2201:
  7245   013A6C  EF72  F09D         	goto	l1421
  7246   013A70                     u2200:
  7247   013A70                     
  7248                           ;carFunctions.c: 31:         lastLight = light;
  7249                           ;stkvar	_light @ sp[(-24)+-1]
  7250   013A70  0EE7               	movlw	-25
  7251   013A72  CFE3 F02C          	movff	plusw1,lightContol_FrontLight@lastLight
  7252   013A76                     
  7253                           ;carFunctions.c: 33:         txMsg.bF.id.ID = (0x19);
  7254   013A76  0E19               	movlw	25
  7255   013A78  6E35               	movwf	(btemp+8)^0,c
  7256   013A7A  6A36               	clrf	(btemp+9)^0,c
  7257   013A7C  6A37               	clrf	(btemp+10)^0,c
  7258   013A7E  6A38               	clrf	(btemp+11)^0,c
  7259                           
  7260                           ;stkvar	_txMsg @ sp[(-24)+0]
  7261   013A80  0EE8               	movlw	-24
  7262   013A82  C035  FFE3         	movff	btemp+8,plusw1
  7263   013A86  0EE9               	movlw	-23
  7264   013A88  C036  FFE3         	movff	btemp+9,plusw1
  7265   013A8C  0EEA               	movlw	-22
  7266   013A8E  C037  FFE3         	movff	btemp+10,plusw1
  7267   013A92  0EEB               	movlw	-21
  7268   013A94  C038  FFE3         	movff	btemp+11,plusw1
  7269   013A98                     
  7270                           ;carFunctions.c: 34:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7271                           ;stkvar	_txMsg @ sp[(-24)+0]
  7272   013A98  0EEE               	movlw	238
  7273   013A9A  24E1               	addwf	fsr1l,w,c
  7274   013A9C  6ED9               	movwf	fsr2l,c
  7275   013A9E  0EFF               	movlw	255
  7276   013AA0  20E2               	addwfc	fsr1h,w,c
  7277   013AA2  6EDA               	movwf	fsr2h,c
  7278   013AA4  50DF               	movf	223,w,c
  7279   013AA6  0BF0               	andlw	-16
  7280   013AA8  0901               	iorlw	1
  7281   013AAA  6EDF               	movwf	223,c
  7282   013AAC                     
  7283                           ;carFunctions.c: 35:         txdata[0] = light;
  7284                           ;stkvar	_light @ sp[(-24)+-1]
  7285                           ;stkvar	_txdata @ sp[(-24)+16]
  7286   013AAC  0EE7               	movlw	-25
  7287   013AAE  CFE3 F02D          	movff	plusw1,btemp
  7288   013AB2  0EF8               	movlw	-8
  7289   013AB4  C02D  FFE3         	movff	btemp,plusw1
  7290   013AB8                     
  7291                           ;carFunctions.c: 36:         CanSend(&txMsg,txdata);
  7292                           ;stkvar	_txdata @ sp[(-24)+16]
  7293   013AB8  0EF8               	movlw	248
  7294   013ABA  24E1               	addwf	fsr1l,w,c
  7295   013ABC  6E2D               	movwf	btemp^0,c
  7296   013ABE  0EFF               	movlw	255
  7297   013AC0  20E2               	addwfc	fsr1h,w,c
  7298   013AC2  6E2E               	movwf	(btemp+1)^0,c
  7299   013AC4  C02D  FFE6         	movff	btemp,postinc1
  7300   013AC8  C02E  FFE6         	movff	btemp+1,postinc1
  7301                           
  7302                           ;stkvar	_txMsg @ sp[(-26)+0]
  7303   013ACC  0EE6               	movlw	230
  7304   013ACE  24E1               	addwf	fsr1l,w,c
  7305   013AD0  6E2D               	movwf	btemp^0,c
  7306   013AD2  0EFF               	movlw	255
  7307   013AD4  20E2               	addwfc	fsr1h,w,c
  7308   013AD6  6E2E               	movwf	(btemp+1)^0,c
  7309   013AD8  C02D  FFE6         	movff	btemp,postinc1
  7310   013ADC  C02E  FFE6         	movff	btemp+1,postinc1
  7311   013AE0  ECCE  F09D         	call	_CanSend	;wreg free
  7312   013AE4                     l1421:
  7313                           
  7314                           ; _lightContol_FrontLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 1, argsize = 1, vargsize = 0
  7315   013AE4  0EE7               	movlw	231
  7316   013AE6  26E1               	addwf	fsr1l,f,c
  7317   013AE8  0EFF               	movlw	255
  7318   013AEA  22E2               	addwfc	fsr1h,f,c
  7319   013AEC  0012               	return		;funcret
  7320   013AEE                     __end_of_lightContol_FrontLight:
  7321                           	callstack 0
  7322                           
  7323 ;; *************** function _lightContol_BackLight *****************
  7324 ;; Defined at:
  7325 ;;		line 39 in file "carFunctions.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  light           1  [STACK] unsigned char 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  txMsg          16  [STACK] struct _CAN_TX_MSGOBJ
  7330 ;;  txdata          8  [STACK] unsigned char [8]
  7331 ;; Return value:  Size  Location     Type
  7332 ;;                  1  [STACK] void 
  7333 ;; Registers used:
  7334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used: 1
  7346 ;; Hardware stack levels required when called: 12
  7347 ;; This function calls:
  7348 ;;		_CanSend
  7349 ;; This function is called by:
  7350 ;;		_lightControl_Process
  7351 ;; This function uses a reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text21
  7355   01398C                     __ptext21:
  7356                           	callstack 0
  7357   01398C                     _lightContol_BackLight:
  7358                           	callstack 0
  7359                           
  7360                           ; autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  7361   01398C  0E18               	movlw	24
  7362   01398E  26E1               	addwf	fsr1l,f,c
  7363   013990  0E00               	movlw	0
  7364   013992  22E2               	addwfc	fsr1h,f,c
  7365   013994                     
  7366                           ;carFunctions.c: 39: void lightContol_BackLight(uint8_t light);carFunctions.c: 40: {;car
      +                          Functions.c: 41:     static uint8_t lastLight=0;;carFunctions.c: 42:     CAN_TX_MSGOBJ t
      +                          xMsg={0};
  7367   013994  EE20  F001         	lfsr	2,lightContol_BackLight@F6642
  7368                           
  7369                           ;stkvar	_txMsg @ sp[(-24)+0]
  7370   013998  0E10               	movlw	16
  7371   01399A  6E2D               	movwf	btemp^0,c
  7372   01399C  0EE8               	movlw	-24
  7373   01399E                     us221999:
  7374   01399E  CFDE FFE3          	movff	postinc2,plusw1
  7375   0139A2  28E8               	incf	wreg,w,c
  7376   0139A4  2E2D               	decfsz	btemp^0,f,c
  7377   0139A6  D7FB               	bra	us221999
  7378   0139A8                     
  7379                           ;carFunctions.c: 43:     uint8_t txdata[8];;carFunctions.c: 44:     if(lastLight!= light
      +                          ) {
  7380                           ;stkvar	_light @ sp[(-24)+-1]
  7381   0139A8  0EE7               	movlw	-25
  7382   0139AA  50E3               	movf	plusw1,w,c
  7383   0139AC  182B               	xorwf	lightContol_BackLight@lastLight^0,w,c
  7384   0139AE  B4D8               	btfsc	status,2,c
  7385   0139B0  EFDC  F09C         	goto	u2221
  7386   0139B4  EFDE  F09C         	goto	u2220
  7387   0139B8                     u2221:
  7388   0139B8  EF1B  F09D         	goto	l1429
  7389   0139BC                     u2220:
  7390   0139BC                     
  7391                           ;carFunctions.c: 45:         lastLight = light;
  7392                           ;stkvar	_light @ sp[(-24)+-1]
  7393   0139BC  0EE7               	movlw	-25
  7394   0139BE  CFE3 F02B          	movff	plusw1,lightContol_BackLight@lastLight
  7395   0139C2                     
  7396                           ;carFunctions.c: 47:         txMsg.bF.id.ID = (0x119);
  7397   0139C2  0E19               	movlw	25
  7398   0139C4  6E35               	movwf	(btemp+8)^0,c
  7399   0139C6  0E01               	movlw	1
  7400   0139C8  6E36               	movwf	(btemp+9)^0,c
  7401   0139CA  0E00               	movlw	0
  7402   0139CC  6E37               	movwf	(btemp+10)^0,c
  7403   0139CE  0E00               	movlw	0
  7404   0139D0  6E38               	movwf	(btemp+11)^0,c
  7405                           
  7406                           ;stkvar	_txMsg @ sp[(-24)+0]
  7407   0139D2  0EE8               	movlw	-24
  7408   0139D4  C035  FFE3         	movff	btemp+8,plusw1
  7409   0139D8  0EE9               	movlw	-23
  7410   0139DA  C036  FFE3         	movff	btemp+9,plusw1
  7411   0139DE  0EEA               	movlw	-22
  7412   0139E0  C037  FFE3         	movff	btemp+10,plusw1
  7413   0139E4  0EEB               	movlw	-21
  7414   0139E6  C038  FFE3         	movff	btemp+11,plusw1
  7415   0139EA                     
  7416                           ;carFunctions.c: 48:         txMsg.bF.ctrl.DLC = CAN_DLC_1;
  7417                           ;stkvar	_txMsg @ sp[(-24)+0]
  7418   0139EA  0EEE               	movlw	238
  7419   0139EC  24E1               	addwf	fsr1l,w,c
  7420   0139EE  6ED9               	movwf	fsr2l,c
  7421   0139F0  0EFF               	movlw	255
  7422   0139F2  20E2               	addwfc	fsr1h,w,c
  7423   0139F4  6EDA               	movwf	fsr2h,c
  7424   0139F6  50DF               	movf	223,w,c
  7425   0139F8  0BF0               	andlw	-16
  7426   0139FA  0901               	iorlw	1
  7427   0139FC  6EDF               	movwf	223,c
  7428   0139FE                     
  7429                           ;carFunctions.c: 49:         txdata[0] = light;
  7430                           ;stkvar	_light @ sp[(-24)+-1]
  7431                           ;stkvar	_txdata @ sp[(-24)+16]
  7432   0139FE  0EE7               	movlw	-25
  7433   013A00  CFE3 F02D          	movff	plusw1,btemp
  7434   013A04  0EF8               	movlw	-8
  7435   013A06  C02D  FFE3         	movff	btemp,plusw1
  7436   013A0A                     
  7437                           ;carFunctions.c: 50:         CanSend(&txMsg,txdata);
  7438                           ;stkvar	_txdata @ sp[(-24)+16]
  7439   013A0A  0EF8               	movlw	248
  7440   013A0C  24E1               	addwf	fsr1l,w,c
  7441   013A0E  6E2D               	movwf	btemp^0,c
  7442   013A10  0EFF               	movlw	255
  7443   013A12  20E2               	addwfc	fsr1h,w,c
  7444   013A14  6E2E               	movwf	(btemp+1)^0,c
  7445   013A16  C02D  FFE6         	movff	btemp,postinc1
  7446   013A1A  C02E  FFE6         	movff	btemp+1,postinc1
  7447                           
  7448                           ;stkvar	_txMsg @ sp[(-26)+0]
  7449   013A1E  0EE6               	movlw	230
  7450   013A20  24E1               	addwf	fsr1l,w,c
  7451   013A22  6E2D               	movwf	btemp^0,c
  7452   013A24  0EFF               	movlw	255
  7453   013A26  20E2               	addwfc	fsr1h,w,c
  7454   013A28  6E2E               	movwf	(btemp+1)^0,c
  7455   013A2A  C02D  FFE6         	movff	btemp,postinc1
  7456   013A2E  C02E  FFE6         	movff	btemp+1,postinc1
  7457   013A32  ECCE  F09D         	call	_CanSend	;wreg free
  7458   013A36                     l1429:
  7459                           
  7460                           ; _lightContol_BackLight: autosize = 24, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  7461   013A36  0EE7               	movlw	231
  7462   013A38  26E1               	addwf	fsr1l,f,c
  7463   013A3A  0EFF               	movlw	255
  7464   013A3C  22E2               	addwfc	fsr1h,f,c
  7465   013A3E  0012               	return		;funcret
  7466   013A40                     __end_of_lightContol_BackLight:
  7467                           	callstack 0
  7468                           
  7469 ;; *************** function _CanSend *****************
  7470 ;; Defined at:
  7471 ;;		line 217 in file "can/can.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  7474 ;;		 -> txMsg(16), 
  7475 ;;  txd             2  [STACK] PTR unsigned char 
  7476 ;;		 -> txdata(8), txdata(8), 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  txFlags         1  [STACK] enum E5583
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1  [STACK] char 
  7481 ;; Registers used:
  7482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used: 1
  7494 ;; Hardware stack levels required when called: 11
  7495 ;; This function calls:
  7496 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
  7497 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  7498 ;; This function is called by:
  7499 ;;		_lightContol_FrontLight
  7500 ;;		_lightContol_BackLight
  7501 ;; This function uses a reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text22
  7505   013B9C                     __ptext22:
  7506                           	callstack 0
  7507   013B9C                     _CanSend:
  7508                           	callstack 0
  7509                           
  7510                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  7511   013B9C  52E6               	movf	postinc1,f,c
  7512   013B9E                     
  7513                           ;can/can.c: 217: int8_t CanSend(CAN_TX_MSGOBJ * txObj, uint8_t * txd);can/can.c: 218: {;
      +                          can/can.c: 219:     txObj->bF.ctrl.SEQ = 1;
  7514                           ;stkvar	_txObj @ sp[(-1)+-2]
  7515   013B9E  0EFD               	movlw	-3
  7516   013BA0  CFE3 F037          	movff	plusw1,btemp+10
  7517   013BA4  0EFE               	movlw	-2
  7518   013BA6  CFE3 F038          	movff	plusw1,btemp+11
  7519   013BAA  0E08               	movlw	8
  7520   013BAC  2437               	addwf	(btemp+10)^0,w,c
  7521   013BAE  6ED9               	movwf	fsr2l,c
  7522   013BB0  0E00               	movlw	0
  7523   013BB2  2038               	addwfc	(btemp+11)^0,w,c
  7524   013BB4  6EDA               	movwf	fsr2h,c
  7525   013BB6  0E01               	movlw	1
  7526   013BB8  6EDE               	movwf	postinc2,c
  7527   013BBA  0E00               	movlw	0
  7528   013BBC  6EDE               	movwf	postinc2,c
  7529   013BBE  0E00               	movlw	0
  7530   013BC0  6EDE               	movwf	postinc2,c
  7531   013BC2  0E00               	movlw	0
  7532   013BC4  6EDD               	movwf	postdec2,c
  7533   013BC6                     
  7534                           ;can/can.c: 221:     CAN_TX_FIFO_EVENT txFlags;;can/can.c: 222:     DRV_CANFDSPI_Transmi
      +                          tChannelEventGet(CAN_FIFO_CH1,&txFlags);
  7535                           ;stkvar	_txFlags @ sp[(-1)+0]
  7536   013BC6  0EFF               	movlw	255
  7537   013BC8  24E1               	addwf	fsr1l,w,c
  7538   013BCA  6E2D               	movwf	btemp^0,c
  7539   013BCC  0EFF               	movlw	255
  7540   013BCE  20E2               	addwfc	fsr1h,w,c
  7541   013BD0  6E2E               	movwf	(btemp+1)^0,c
  7542   013BD2  C02D  FFE6         	movff	btemp,postinc1
  7543   013BD6  C02E  FFE6         	movff	btemp+1,postinc1
  7544   013BDA  0E01               	movlw	1
  7545   013BDC  6EE6               	movwf	postinc1,c
  7546   013BDE  EC75  F09E         	call	_DRV_CANFDSPI_TransmitChannelEventGet	;wreg free
  7547   013BE2                     
  7548                           ;can/can.c: 223:     if(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
  7549                           ;stkvar	_txFlags @ sp[(-1)+0]
  7550   013BE2  0EFF               	movlw	-1
  7551   013BE4  A0E3               	btfss	plusw1,0,c
  7552   013BE6  EFF7  F09D         	goto	u1871
  7553   013BEA  EFF9  F09D         	goto	u1870
  7554   013BEE                     u1871:
  7555   013BEE  EF1E  F09E         	goto	l158
  7556   013BF2                     u1870:
  7557   013BF2                     
  7558                           ;can/can.c: 224:     {;can/can.c: 225:       DRV_CANFDSPI_TransmitChannelLoad(CAN_FIFO_C
      +                          H1,txObj,txd,txObj->bF.ctrl.DLC,1);
  7559   013BF2  0E01               	movlw	1
  7560   013BF4  6EE6               	movwf	postinc1,c
  7561                           
  7562                           ;stkvar	_txObj @ sp[(-2)+-2]
  7563   013BF6  0EFC               	movlw	-4
  7564   013BF8  CFE3 F037          	movff	plusw1,btemp+10
  7565   013BFC  0EFD               	movlw	-3
  7566   013BFE  CFE3 F038          	movff	plusw1,btemp+11
  7567   013C02  0E06               	movlw	6
  7568   013C04  2437               	addwf	(btemp+10)^0,w,c
  7569   013C06  6ED9               	movwf	fsr2l,c
  7570   013C08  0E00               	movlw	0
  7571   013C0A  2038               	addwfc	(btemp+11)^0,w,c
  7572   013C0C  6EDA               	movwf	fsr2h,c
  7573   013C0E  50DF               	movf	223,w,c
  7574   013C10  0B0F               	andlw	15
  7575   013C12  6E38               	movwf	(btemp+11)^0,c
  7576   013C14  C038  FFE6         	movff	btemp+11,postinc1
  7577   013C18  0E00               	movlw	0
  7578   013C1A  6EE6               	movwf	postinc1,c
  7579   013C1C  6EE6               	movwf	postinc1,c
  7580   013C1E  6EE6               	movwf	postinc1,c
  7581                           
  7582                           ;stkvar	_txd @ sp[(-6)+-4]
  7583   013C20  0EF6               	movlw	-10
  7584   013C22  CFE3 FFE6          	movff	plusw1,postinc1
  7585   013C26  CFE3 FFE6          	movff	plusw1,postinc1
  7586                           
  7587                           ;stkvar	_txObj @ sp[(-8)+-2]
  7588   013C2A  0EF6               	movlw	-10
  7589   013C2C  CFE3 FFE6          	movff	plusw1,postinc1
  7590   013C30  CFE3 FFE6          	movff	plusw1,postinc1
  7591   013C34  0E01               	movlw	1
  7592   013C36  6EE6               	movwf	postinc1,c
  7593   013C38  EC00  F080         	call	_DRV_CANFDSPI_TransmitChannelLoad	;wreg free
  7594   013C3C                     l158:
  7595                           
  7596                           ; _CanSend: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  7597   013C3C  0EFB               	movlw	251
  7598   013C3E  26E1               	addwf	fsr1l,f,c
  7599   013C40  0EFF               	movlw	255
  7600   013C42  22E2               	addwfc	fsr1h,f,c
  7601   013C44  0012               	return		;funcret
  7602   013C46                     __end_of_CanSend:
  7603                           	callstack 0
  7604                           
  7605 ;; *************** function _DRV_CANFDSPI_TransmitChannelLoad *****************
  7606 ;; Defined at:
  7607 ;;		line 706 in file "can/can.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  channel         1  [STACK] enum E5290
  7610 ;;  txObj           2  [STACK] PTR struct _CAN_TX_MSGOB
  7611 ;;		 -> txMsg(16), 
  7612 ;;  txd             2  [STACK] PTR unsigned char 
  7613 ;;		 -> txdata(8), txdata(8), 
  7614 ;;  txdNumBytes     4  [STACK] unsigned long 
  7615 ;;  flush           1  [STACK] _Bool 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;  temp32          4  [STACK] unsigned long 
  7618 ;;  txBuffer       76  [STACK] unsigned char [76]
  7619 ;;  fifoReg        12  [STACK] unsigned long [3]
  7620 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  7621 ;;  a               4  [STACK] unsigned long 
  7622 ;;  ciFifoUa        4  [STACK] struct _REG_CiFIFOUA
  7623 ;;  dataBytesInO    4  [STACK] unsigned long 
  7624 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  7625 ;;  n               2  [STACK] unsigned short 
  7626 ;;  spiTransferE    1  [STACK] char 
  7627 ;;  i               1  [STACK] unsigned char 
  7628 ;;  j               1  [STACK] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1  [STACK] char 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;Total ram usage:        0 bytes
  7643 ;; Hardware stack levels used: 1
  7644 ;; Hardware stack levels required when called: 10
  7645 ;; This function calls:
  7646 ;;		_DRV_CANFDSPI_DlcToDataBytes
  7647 ;;		_DRV_CANFDSPI_ReadWordArray
  7648 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
  7649 ;;		_DRV_CANFDSPI_WriteByteArray
  7650 ;; This function is called by:
  7651 ;;		_CanSend
  7652 ;; This function uses a reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text23
  7656   010000                     __ptext23:
  7657                           	callstack 0
  7658   010000                     _DRV_CANFDSPI_TransmitChannelLoad:
  7659                           	callstack 0
  7660                           
  7661                           ; autosize = 114, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10
      +                           vargsize = 0, retsize = 0 argfudge = 0
  7662   010000  0E72               	movlw	114
  7663   010002  26E1               	addwf	fsr1l,f,c
  7664   010004  0E00               	movlw	0
  7665   010006  22E2               	addwfc	fsr1h,f,c
  7666   010008                     
  7667                           ;can/can.c: 719:     a = 0x050 + (channel * (3*4));
  7668                           ;stkvar	_channel @ sp[(-114)+-1]
  7669   010008  0E8D               	movlw	-115
  7670   01000A  50E3               	movf	plusw1,w,c
  7671   01000C  0D0C               	mullw	12
  7672   01000E  0E50               	movlw	80
  7673   010010  26F3               	addwf	243,f,c
  7674   010012  0E00               	movlw	0
  7675   010014  22F4               	addwfc	244,f,c
  7676                           
  7677                           ;stkvar	_a @ sp[(-114)+97]
  7678   010016  0EEF               	movlw	-17
  7679   010018  CFF3 FFE3          	movff	prodl,plusw1
  7680   01001C  0EF0               	movlw	-16
  7681   01001E  CFF4 FFE3          	movff	prodh,plusw1
  7682   010022  0EF1               	movlw	-15
  7683   010024  6AE3               	clrf	plusw1,c
  7684   010026  0EF2               	movlw	-14
  7685   010028  6AE3               	clrf	plusw1,c
  7686   01002A                     
  7687                           ;can/can.c: 721:     spiTransferError = DRV_CANFDSPI_ReadWordArray( (uint16_t)a, fifoReg
      +                          , 3);
  7688   01002A  0E03               	movlw	3
  7689   01002C  6EE6               	movwf	postinc1,c
  7690   01002E  0E00               	movlw	0
  7691   010030  6EE6               	movwf	postinc1,c
  7692                           
  7693                           ;stkvar	_fifoReg @ sp[(-116)+80]
  7694   010032  0EDC               	movlw	220
  7695   010034  24E1               	addwf	fsr1l,w,c
  7696   010036  6E2D               	movwf	btemp^0,c
  7697   010038  0EFF               	movlw	255
  7698   01003A  20E2               	addwfc	fsr1h,w,c
  7699   01003C  6E2E               	movwf	(btemp+1)^0,c
  7700   01003E  C02D  FFE6         	movff	btemp,postinc1
  7701   010042  C02E  FFE6         	movff	btemp+1,postinc1
  7702                           
  7703                           ;stkvar	_a @ sp[(-118)+97]
  7704   010046  0EEB               	movlw	-21
  7705   010048  CFE3 FFE6          	movff	plusw1,postinc1
  7706   01004C  CFE3 FFE6          	movff	plusw1,postinc1
  7707   010050  EC59  F08A         	call	_DRV_CANFDSPI_ReadWordArray	;wreg free
  7708                           
  7709                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  7710   010054  0EFD               	movlw	-3
  7711   010056  C02D  FFE3         	movff	btemp,plusw1
  7712   01005A                     
  7713                           ;can/can.c: 722:     if (spiTransferError) {
  7714                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  7715   01005A  0EFD               	movlw	-3
  7716   01005C  50E3               	movf	plusw1,w,c
  7717   01005E  B4D8               	btfsc	status,2,c
  7718   010060  EF34  F080         	goto	u1581
  7719   010064  EF36  F080         	goto	u1580
  7720   010068                     u1581:
  7721   010068  EF3A  F080         	goto	l3816
  7722   01006C                     u1580:
  7723   01006C                     
  7724                           ;can/can.c: 723:         return -1;
  7725   01006C  0EFF               	movlw	255
  7726   01006E  6E2D               	movwf	btemp^0,c
  7727   010070  EFA1  F083         	goto	l264
  7728   010074                     l3816:
  7729                           
  7730                           ;can/can.c: 727:     ciFifoCon.word = fifoReg[0];
  7731                           ;stkvar	_fifoReg @ sp[(-114)+80]
  7732   010074  0EDE               	movlw	-34
  7733   010076  CFE3 F035          	movff	plusw1,btemp+8
  7734   01007A  0EDF               	movlw	-33
  7735   01007C  CFE3 F036          	movff	plusw1,btemp+9
  7736   010080  0EE0               	movlw	-32
  7737   010082  CFE3 F037          	movff	plusw1,btemp+10
  7738   010086  0EE1               	movlw	-31
  7739   010088  CFE3 F038          	movff	plusw1,btemp+11
  7740                           
  7741                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  7742   01008C  0EEA               	movlw	-22
  7743   01008E  C035  FFE3         	movff	btemp+8,plusw1
  7744   010092  0EEB               	movlw	-21
  7745   010094  C036  FFE3         	movff	btemp+9,plusw1
  7746   010098  0EEC               	movlw	-20
  7747   01009A  C037  FFE3         	movff	btemp+10,plusw1
  7748   01009E  0EED               	movlw	-19
  7749   0100A0  C038  FFE3         	movff	btemp+11,plusw1
  7750   0100A4                     
  7751                           ;can/can.c: 728:     if (!ciFifoCon.txBF.TxEnable) {
  7752                           ;stkvar	_ciFifoCon @ sp[(-114)+92]
  7753   0100A4  50E1               	movf	fsr1l,w,c
  7754   0100A6  0FEA               	addlw	-22
  7755   0100A8  6ED9               	movwf	fsr2l,c
  7756   0100AA  50E2               	movf	fsr1h,w,c
  7757   0100AC  6EDA               	movwf	fsr2h,c
  7758   0100AE  0EFF               	movlw	255
  7759   0100B0  22DA               	addwfc	fsr2h,f,c
  7760   0100B2  BEDF               	btfsc	indf2,7,c
  7761   0100B4  EF5E  F080         	goto	u1591
  7762   0100B8  EF60  F080         	goto	u1590
  7763   0100BC                     u1591:
  7764   0100BC  EF64  F080         	goto	l3824
  7765   0100C0                     u1590:
  7766   0100C0                     
  7767                           ;can/can.c: 729:         return -2;
  7768   0100C0  0EFE               	movlw	254
  7769   0100C2  6E2D               	movwf	btemp^0,c
  7770   0100C4  EFA1  F083         	goto	l264
  7771   0100C8                     l3824:
  7772                           
  7773                           ;can/can.c: 733:     dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF
      +                          .ctrl.DLC);
  7774                           ;stkvar	_txObj @ sp[(-114)+-3]
  7775   0100C8  0E8B               	movlw	-117
  7776   0100CA  CFE3 F037          	movff	plusw1,btemp+10
  7777   0100CE  0E8C               	movlw	-116
  7778   0100D0  CFE3 F038          	movff	plusw1,btemp+11
  7779   0100D4  0E06               	movlw	6
  7780   0100D6  2437               	addwf	(btemp+10)^0,w,c
  7781   0100D8  6ED9               	movwf	fsr2l,c
  7782   0100DA  0E00               	movlw	0
  7783   0100DC  2038               	addwfc	(btemp+11)^0,w,c
  7784   0100DE  6EDA               	movwf	fsr2h,c
  7785   0100E0  50DF               	movf	223,w,c
  7786   0100E2  0B0F               	andlw	15
  7787   0100E4  6EE6               	movwf	postinc1,c
  7788   0100E6  EC39  F090         	call	_DRV_CANFDSPI_DlcToDataBytes	;wreg free
  7789                           
  7790                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  7791   0100EA  0EF7               	movlw	-9
  7792   0100EC  C02D  FFE3         	movff	btemp,plusw1
  7793   0100F0  0EF8               	movlw	-8
  7794   0100F2  C02E  FFE3         	movff	btemp+1,plusw1
  7795   0100F6  0EF9               	movlw	-7
  7796   0100F8  C02F  FFE3         	movff	btemp+2,plusw1
  7797   0100FC  0EFA               	movlw	-6
  7798   0100FE  C030  FFE3         	movff	btemp+3,plusw1
  7799   010102                     
  7800                           ;can/can.c: 734:     if (dataBytesInObject < txdNumBytes) {
  7801                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  7802                           ;stkvar	_dataBytesInObject @ sp[(-114)+105]
  7803   010102  50E1               	movf	fsr1l,w,c
  7804   010104  0FF7               	addlw	-9
  7805   010106  6ED9               	movwf	fsr2l,c
  7806   010108  50E2               	movf	fsr1h,w,c
  7807   01010A  6EDA               	movwf	fsr2h,c
  7808   01010C  0EFF               	movlw	255
  7809   01010E  22DA               	addwfc	fsr2h,f,c
  7810   010110  0E85               	movlw	-123
  7811   010112  50E3               	movf	plusw1,w,c
  7812   010114  5CDE               	subwf	postinc2,w,c
  7813   010116  0E86               	movlw	-122
  7814   010118  50E3               	movf	plusw1,w,c
  7815   01011A  58DE               	subwfb	postinc2,w,c
  7816   01011C  0E87               	movlw	-121
  7817   01011E  50E3               	movf	plusw1,w,c
  7818   010120  58DE               	subwfb	postinc2,w,c
  7819   010122  0E88               	movlw	-120
  7820   010124  50E3               	movf	plusw1,w,c
  7821   010126  58DE               	subwfb	postinc2,w,c
  7822   010128  B0D8               	btfsc	status,0,c
  7823   01012A  EF99  F080         	goto	u1601
  7824   01012E  EF9B  F080         	goto	u1600
  7825   010132                     u1601:
  7826   010132  EF9F  F080         	goto	l3832
  7827   010136                     u1600:
  7828   010136                     
  7829                           ;can/can.c: 735:         return -3;
  7830   010136  0EFD               	movlw	253
  7831   010138  6E2D               	movwf	btemp^0,c
  7832   01013A  EFA1  F083         	goto	l264
  7833   01013E                     l3832:
  7834                           
  7835                           ;can/can.c: 742:     ciFifoUa.word = fifoReg[2];
  7836                           ;stkvar	_fifoReg @ sp[(-114)+80]
  7837   01013E  0EE6               	movlw	230
  7838   010140  24E1               	addwf	fsr1l,w,c
  7839   010142  6ED9               	movwf	fsr2l,c
  7840   010144  0EFF               	movlw	255
  7841   010146  20E2               	addwfc	fsr1h,w,c
  7842   010148  6EDA               	movwf	fsr2h,c
  7843   01014A  CFDE F035          	movff	postinc2,btemp+8
  7844   01014E  CFDE F036          	movff	postinc2,btemp+9
  7845   010152  CFDE F037          	movff	postinc2,btemp+10
  7846   010156  CFDE F038          	movff	postinc2,btemp+11
  7847                           
  7848                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  7849   01015A  0EF3               	movlw	-13
  7850   01015C  C035  FFE3         	movff	btemp+8,plusw1
  7851   010160  0EF4               	movlw	-12
  7852   010162  C036  FFE3         	movff	btemp+9,plusw1
  7853   010166  0EF5               	movlw	-11
  7854   010168  C037  FFE3         	movff	btemp+10,plusw1
  7855   01016C  0EF6               	movlw	-10
  7856   01016E  C038  FFE3         	movff	btemp+11,plusw1
  7857   010172                     
  7858                           ;can/can.c: 746:     a = ciFifoUa.bF.UserAddress;
  7859                           ;stkvar	_ciFifoUa @ sp[(-114)+101]
  7860   010172  0EF3               	movlw	-13
  7861   010174  CFE3 F035          	movff	plusw1,btemp+8
  7862   010178  0EF4               	movlw	-12
  7863   01017A  CFE3 F036          	movff	plusw1,btemp+9
  7864   01017E  0EF5               	movlw	-11
  7865   010180  CFE3 F037          	movff	plusw1,btemp+10
  7866   010184  0EF6               	movlw	-10
  7867   010186  CFE3 F038          	movff	plusw1,btemp+11
  7868                           
  7869                           ;stkvar	_a @ sp[(-114)+97]
  7870   01018A  0EEF               	movlw	-17
  7871   01018C  C035  FFE3         	movff	btemp+8,plusw1
  7872   010190  0EF0               	movlw	-16
  7873   010192  C036  FFE3         	movff	btemp+9,plusw1
  7874   010196  0EF1               	movlw	-15
  7875   010198  C037  FFE3         	movff	btemp+10,plusw1
  7876   01019C  0EF2               	movlw	-14
  7877   01019E  C038  FFE3         	movff	btemp+11,plusw1
  7878   0101A2                     
  7879                           ;can/can.c: 748:     a += 0x400;
  7880                           ;stkvar	_a @ sp[(-114)+97]
  7881   0101A2  50E1               	movf	fsr1l,w,c
  7882   0101A4  0FEF               	addlw	-17
  7883   0101A6  6ED9               	movwf	fsr2l,c
  7884   0101A8  50E2               	movf	fsr1h,w,c
  7885   0101AA  6EDA               	movwf	fsr2h,c
  7886   0101AC  0EFF               	movlw	255
  7887   0101AE  22DA               	addwfc	fsr2h,f,c
  7888   0101B0  0E00               	movlw	0
  7889   0101B2  26DE               	addwf	postinc2,f,c
  7890   0101B4  0E04               	movlw	4
  7891   0101B6  22DE               	addwfc	postinc2,f,c
  7892   0101B8  0E00               	movlw	0
  7893   0101BA  22DE               	addwfc	postinc2,f,c
  7894   0101BC  0E00               	movlw	0
  7895   0101BE  22DE               	addwfc	postinc2,f,c
  7896   0101C0                     
  7897                           ;can/can.c: 750:     uint8_t txBuffer[76];;can/can.c: 764:     if(txObj->bF.ctrl.IDE == 
      +                          0)
  7898                           ;stkvar	_txObj @ sp[(-114)+-3]
  7899   0101C0  0E8B               	movlw	-117
  7900   0101C2  CFE3 F037          	movff	plusw1,btemp+10
  7901   0101C6  0E8C               	movlw	-116
  7902   0101C8  CFE3 F038          	movff	plusw1,btemp+11
  7903   0101CC  0E06               	movlw	6
  7904   0101CE  2437               	addwf	(btemp+10)^0,w,c
  7905   0101D0  6ED9               	movwf	fsr2l,c
  7906   0101D2  0E00               	movlw	0
  7907   0101D4  2038               	addwfc	(btemp+11)^0,w,c
  7908   0101D6  6EDA               	movwf	fsr2h,c
  7909   0101D8  B8DF               	btfsc	indf2,4,c
  7910   0101DA  EFF1  F080         	goto	u1611
  7911   0101DE  EFF3  F080         	goto	u1610
  7912   0101E2                     u1611:
  7913   0101E2  EF75  F081         	goto	l3848
  7914   0101E6                     u1610:
  7915   0101E6                     
  7916                           ;can/can.c: 765:     {;can/can.c: 766:       txBuffer[0] = (uint8_t)txObj->bF.id.ID;
  7917                           ;stkvar	_txObj @ sp[(-114)+-3]
  7918   0101E6  0E8B               	movlw	-117
  7919   0101E8  CFE3 FFD9          	movff	plusw1,fsr2l
  7920   0101EC  0E8C               	movlw	-116
  7921   0101EE  CFE3 FFDA          	movff	plusw1,fsr2h
  7922   0101F2  50DF               	movf	indf2,w,c
  7923   0101F4  6E38               	movwf	(btemp+11)^0,c
  7924                           
  7925                           ;stkvar	_txBuffer @ sp[(-114)+4]
  7926   0101F6  0E92               	movlw	-110
  7927   0101F8  C038  FFE3         	movff	btemp+11,plusw1
  7928   0101FC                     
  7929                           ;can/can.c: 767:       txBuffer[1] = (uint8_t)(txObj->bF.id.ID >> 8);
  7930                           ;stkvar	_txBuffer @ sp[(-114)+4]
  7931   0101FC  0E93               	movlw	147
  7932   0101FE  24E1               	addwf	fsr1l,w,c
  7933   010200  6ED9               	movwf	fsr2l,c
  7934   010202  0EFF               	movlw	255
  7935   010204  20E2               	addwfc	fsr1h,w,c
  7936   010206  6EDA               	movwf	fsr2h,c
  7937                           
  7938                           ;stkvar	_txObj @ sp[(-114)+-3]
  7939   010208  0E8B               	movlw	-117
  7940   01020A  CFE3 FFE9          	movff	plusw1,fsr0l
  7941   01020E  0E8C               	movlw	-116
  7942   010210  CFE3 FFEA          	movff	plusw1,fsr0h
  7943   010214  CFEE F035          	movff	postinc0,btemp+8
  7944   010218  CFEE F036          	movff	postinc0,btemp+9
  7945   01021C  CFEE F037          	movff	postinc0,btemp+10
  7946   010220  CFEE F038          	movff	postinc0,btemp+11
  7947   010224  C036  F035         	movff	btemp+9,btemp+8
  7948   010228  C037  F036         	movff	btemp+10,btemp+9
  7949   01022C  C038  F037         	movff	btemp+11,btemp+10
  7950   010230  6A38               	clrf	(btemp+11)^0,c
  7951   010232  5035               	movf	(btemp+8)^0,w,c
  7952   010234  6EDF               	movwf	indf2,c
  7953   010236                     
  7954                           ;can/can.c: 768:       txBuffer[2] = (uint8_t)(txObj->bF.id.ID >> 16);
  7955                           ;stkvar	_txBuffer @ sp[(-114)+4]
  7956   010236  0E94               	movlw	148
  7957   010238  24E1               	addwf	fsr1l,w,c
  7958   01023A  6ED9               	movwf	fsr2l,c
  7959   01023C  0EFF               	movlw	255
  7960   01023E  20E2               	addwfc	fsr1h,w,c
  7961   010240  6EDA               	movwf	fsr2h,c
  7962                           
  7963                           ;stkvar	_txObj @ sp[(-114)+-3]
  7964   010242  0E8B               	movlw	-117
  7965   010244  CFE3 FFE9          	movff	plusw1,fsr0l
  7966   010248  0E8C               	movlw	-116
  7967   01024A  CFE3 FFEA          	movff	plusw1,fsr0h
  7968   01024E  CFEE F035          	movff	postinc0,btemp+8
  7969   010252  CFEE F036          	movff	postinc0,btemp+9
  7970   010256  CFEE F037          	movff	postinc0,btemp+10
  7971   01025A  CFEE F038          	movff	postinc0,btemp+11
  7972   01025E  0E11               	movlw	17
  7973   010260  EF37  F081         	goto	u1620
  7974   010264                     u1625:
  7975   010264  90D8               	bcf	status,0,c
  7976   010266  3238               	rrcf	(btemp+11)^0,f,c
  7977   010268  3237               	rrcf	(btemp+10)^0,f,c
  7978   01026A  3236               	rrcf	(btemp+9)^0,f,c
  7979   01026C  3235               	rrcf	(btemp+8)^0,f,c
  7980   01026E                     u1620:
  7981   01026E  2EE8               	decfsz	wreg,f,c
  7982   010270  EF32  F081         	goto	u1625
  7983   010274  5035               	movf	(btemp+8)^0,w,c
  7984   010276  6EDF               	movwf	indf2,c
  7985   010278                     
  7986                           ;can/can.c: 769:       txBuffer[3] = (uint8_t)(txObj->bF.id.ID >> 24) | (uint8_t)(txObj-
      +                          >bF.id.SID11 << 5);
  7987                           ;stkvar	_txBuffer @ sp[(-114)+4]
  7988   010278  0E95               	movlw	149
  7989   01027A  24E1               	addwf	fsr1l,w,c
  7990   01027C  6ED9               	movwf	fsr2l,c
  7991   01027E  0EFF               	movlw	255
  7992   010280  20E2               	addwfc	fsr1h,w,c
  7993   010282  6EDA               	movwf	fsr2h,c
  7994                           
  7995                           ;stkvar	_txObj @ sp[(-114)+-3]
  7996   010284  0E8B               	movlw	-117
  7997   010286  CFE3 F037          	movff	plusw1,btemp+10
  7998   01028A  0E8C               	movlw	-116
  7999   01028C  CFE3 F038          	movff	plusw1,btemp+11
  8000   010290  0E04               	movlw	4
  8001   010292  2437               	addwf	(btemp+10)^0,w,c
  8002   010294  6EE9               	movwf	fsr0l,c
  8003   010296  0E00               	movlw	0
  8004   010298  2038               	addwfc	(btemp+11)^0,w,c
  8005   01029A  6EEA               	movwf	fsr0h,c
  8006   01029C  50EF               	movf	indf0,w,c
  8007   01029E  6E38               	movwf	(btemp+11)^0,c
  8008   0102A0  0E05               	movlw	5
  8009   0102A2  6E2D               	movwf	btemp^0,c
  8010   0102A4                     u1635:
  8011   0102A4  90D8               	bcf	status,0,c
  8012   0102A6  3638               	rlcf	(btemp+11)^0,f,c
  8013   0102A8  2E2D               	decfsz	btemp^0,f,c
  8014   0102AA  EF52  F081         	goto	u1635
  8015                           
  8016                           ;stkvar	_txObj @ sp[(-114)+-3]
  8017   0102AE  0E8B               	movlw	-117
  8018   0102B0  CFE3 FFE9          	movff	plusw1,fsr0l
  8019   0102B4  0E8C               	movlw	-116
  8020   0102B6  CFE3 FFEA          	movff	plusw1,fsr0h
  8021   0102BA  CFEE F031          	movff	postinc0,btemp+4
  8022   0102BE  CFEE F032          	movff	postinc0,btemp+5
  8023   0102C2  CFEE F033          	movff	postinc0,btemp+6
  8024   0102C6  CFEE F034          	movff	postinc0,btemp+7
  8025   0102CA  0E19               	movlw	25
  8026   0102CC  EF6D  F081         	goto	u1640
  8027   0102D0                     u1645:
  8028   0102D0  90D8               	bcf	status,0,c
  8029   0102D2  3234               	rrcf	(btemp+7)^0,f,c
  8030   0102D4  3233               	rrcf	(btemp+6)^0,f,c
  8031   0102D6  3232               	rrcf	(btemp+5)^0,f,c
  8032   0102D8  3231               	rrcf	(btemp+4)^0,f,c
  8033   0102DA                     u1640:
  8034   0102DA  2EE8               	decfsz	wreg,f,c
  8035   0102DC  EF68  F081         	goto	u1645
  8036   0102E0  5031               	movf	(btemp+4)^0,w,c
  8037   0102E2  1038               	iorwf	(btemp+11)^0,w,c
  8038   0102E4  6EDF               	movwf	indf2,c
  8039                           
  8040                           ;can/can.c: 770:     }
  8041   0102E6  EF24  F082         	goto	l3860
  8042   0102EA                     l3848:
  8043                           
  8044                           ;can/can.c: 772:     {;can/can.c: 773:       uint32_t temp32 = ((txObj->bF.id.ID & 0x000
      +                          3FFFF) << 11) |
  8045                           ;stkvar	_txObj @ sp[(-114)+-3]
  8046   0102EA  0E8B               	movlw	-117
  8047   0102EC  CFE3 FFD9          	movff	plusw1,fsr2l
  8048   0102F0  0E8C               	movlw	-116
  8049   0102F2  CFE3 FFDA          	movff	plusw1,fsr2h
  8050   0102F6  CFDE F035          	movff	postinc2,btemp+8
  8051   0102FA  CFDE F036          	movff	postinc2,btemp+9
  8052   0102FE  CFDE F037          	movff	postinc2,btemp+10
  8053   010302  CFDE F038          	movff	postinc2,btemp+11
  8054   010306  0E13               	movlw	19
  8055   010308  EF8B  F081         	goto	u1650
  8056   01030C                     u1655:
  8057   01030C  90D8               	bcf	status,0,c
  8058   01030E  3238               	rrcf	(btemp+11)^0,f,c
  8059   010310  3237               	rrcf	(btemp+10)^0,f,c
  8060   010312  3236               	rrcf	(btemp+9)^0,f,c
  8061   010314  3235               	rrcf	(btemp+8)^0,f,c
  8062   010316                     u1650:
  8063   010316  2EE8               	decfsz	wreg,f,c
  8064   010318  EF86  F081         	goto	u1655
  8065   01031C  0EFF               	movlw	255
  8066   01031E  1435               	andwf	(btemp+8)^0,w,c
  8067   010320  6E31               	movwf	(btemp+4)^0,c
  8068   010322  0E07               	movlw	7
  8069   010324  1436               	andwf	(btemp+9)^0,w,c
  8070   010326  6E32               	movwf	(btemp+5)^0,c
  8071   010328  0E00               	movlw	0
  8072   01032A  1437               	andwf	(btemp+10)^0,w,c
  8073   01032C  6E33               	movwf	(btemp+6)^0,c
  8074   01032E  0E00               	movlw	0
  8075   010330  1438               	andwf	(btemp+11)^0,w,c
  8076   010332  6E34               	movwf	(btemp+7)^0,c
  8077                           
  8078                           ;stkvar	_txObj @ sp[(-114)+-3]
  8079   010334  0E8B               	movlw	-117
  8080   010336  CFE3 FFD9          	movff	plusw1,fsr2l
  8081   01033A  0E8C               	movlw	-116
  8082   01033C  CFE3 FFDA          	movff	plusw1,fsr2h
  8083   010340  0EFF               	movlw	255
  8084   010342  14DE               	andwf	postinc2,w,c
  8085   010344  6E35               	movwf	(btemp+8)^0,c
  8086   010346  0EFF               	movlw	255
  8087   010348  14DE               	andwf	postinc2,w,c
  8088   01034A  6E36               	movwf	(btemp+9)^0,c
  8089   01034C  0E03               	movlw	3
  8090   01034E  14DE               	andwf	postinc2,w,c
  8091   010350  6E37               	movwf	(btemp+10)^0,c
  8092   010352  0E00               	movlw	0
  8093   010354  14DE               	andwf	postinc2,w,c
  8094   010356  6E38               	movwf	(btemp+11)^0,c
  8095   010358  0E0B               	movlw	11
  8096   01035A                     u1665:
  8097   01035A  90D8               	bcf	status,0,c
  8098   01035C  3635               	rlcf	(btemp+8)^0,f,c
  8099   01035E  3636               	rlcf	(btemp+9)^0,f,c
  8100   010360  3637               	rlcf	(btemp+10)^0,f,c
  8101   010362  3638               	rlcf	(btemp+11)^0,f,c
  8102   010364  2EE8               	decfsz	wreg,f,c
  8103   010366  EFAD  F081         	goto	u1665
  8104   01036A  5031               	movf	(btemp+4)^0,w,c
  8105   01036C  1035               	iorwf	(btemp+8)^0,w,c
  8106   01036E  6E2D               	movwf	btemp^0,c
  8107   010370  5032               	movf	(btemp+5)^0,w,c
  8108   010372  1036               	iorwf	(btemp+9)^0,w,c
  8109   010374  6E2E               	movwf	(btemp+1)^0,c
  8110   010376  5033               	movf	(btemp+6)^0,w,c
  8111   010378  1037               	iorwf	(btemp+10)^0,w,c
  8112   01037A  6E2F               	movwf	(btemp+2)^0,c
  8113   01037C  5034               	movf	(btemp+7)^0,w,c
  8114   01037E  1038               	iorwf	(btemp+11)^0,w,c
  8115   010380  6E30               	movwf	(btemp+3)^0,c
  8116                           
  8117                           ;stkvar	_temp32 @ sp[(-114)+0]
  8118   010382  0E8E               	movlw	-114
  8119   010384  C02D  FFE3         	movff	btemp,plusw1
  8120   010388  0E8F               	movlw	-113
  8121   01038A  C02E  FFE3         	movff	btemp+1,plusw1
  8122   01038E  0E90               	movlw	-112
  8123   010390  C02F  FFE3         	movff	btemp+2,plusw1
  8124   010394  0E91               	movlw	-111
  8125   010396  C030  FFE3         	movff	btemp+3,plusw1
  8126   01039A                     
  8127                           ;can/can.c: 775:       temp32 = temp32 & 0x1FFFFFFF;
  8128                           ;stkvar	_temp32 @ sp[(-114)+0]
  8129   01039A  50E1               	movf	fsr1l,w,c
  8130   01039C  0F8E               	addlw	-114
  8131   01039E  6ED9               	movwf	fsr2l,c
  8132   0103A0  50E2               	movf	fsr1h,w,c
  8133   0103A2  6EDA               	movwf	fsr2h,c
  8134   0103A4  0EFF               	movlw	255
  8135   0103A6  22DA               	addwfc	fsr2h,f,c
  8136   0103A8  0EFF               	movlw	255
  8137   0103AA  16DE               	andwf	postinc2,f,c
  8138   0103AC  0EFF               	movlw	255
  8139   0103AE  16DE               	andwf	postinc2,f,c
  8140   0103B0  0EFF               	movlw	255
  8141   0103B2  16DE               	andwf	postinc2,f,c
  8142   0103B4  0E1F               	movlw	31
  8143   0103B6  16DE               	andwf	postinc2,f,c
  8144   0103B8                     
  8145                           ;can/can.c: 776:       txBuffer[0] = (uint8_t)temp32;
  8146                           ;stkvar	_temp32 @ sp[(-114)+0]
  8147                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8148   0103B8  0E8E               	movlw	-114
  8149   0103BA  CFE3 F02D          	movff	plusw1,btemp
  8150   0103BE  0E92               	movlw	-110
  8151   0103C0  C02D  FFE3         	movff	btemp,plusw1
  8152   0103C4                     
  8153                           ;can/can.c: 777:       txBuffer[1] = (uint8_t)(temp32 >> 8);
  8154                           ;stkvar	_temp32 @ sp[(-114)+0]
  8155   0103C4  0E8F               	movlw	143
  8156   0103C6  24E1               	addwf	fsr1l,w,c
  8157   0103C8  6ED9               	movwf	fsr2l,c
  8158   0103CA  0EFF               	movlw	255
  8159   0103CC  20E2               	addwfc	fsr1h,w,c
  8160   0103CE  6EDA               	movwf	fsr2h,c
  8161                           
  8162                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8163   0103D0  0E93               	movlw	147
  8164   0103D2  24E1               	addwf	fsr1l,w,c
  8165   0103D4  6EE9               	movwf	fsr0l,c
  8166   0103D6  0EFF               	movlw	255
  8167   0103D8  20E2               	addwfc	fsr1h,w,c
  8168   0103DA  6EEA               	movwf	fsr0h,c
  8169   0103DC  CFDF FFEF          	movff	indf2,indf0
  8170   0103E0                     
  8171                           ;can/can.c: 778:       txBuffer[2] = (uint8_t)(temp32 >> 16);
  8172                           ;stkvar	_temp32 @ sp[(-114)+0]
  8173   0103E0  0E90               	movlw	144
  8174   0103E2  24E1               	addwf	fsr1l,w,c
  8175   0103E4  6ED9               	movwf	fsr2l,c
  8176   0103E6  0EFF               	movlw	255
  8177   0103E8  20E2               	addwfc	fsr1h,w,c
  8178   0103EA  6EDA               	movwf	fsr2h,c
  8179                           
  8180                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8181   0103EC  0E94               	movlw	148
  8182   0103EE  24E1               	addwf	fsr1l,w,c
  8183   0103F0  6EE9               	movwf	fsr0l,c
  8184   0103F2  0EFF               	movlw	255
  8185   0103F4  20E2               	addwfc	fsr1h,w,c
  8186   0103F6  6EEA               	movwf	fsr0h,c
  8187   0103F8  CFDF FFEF          	movff	indf2,indf0
  8188   0103FC                     
  8189                           ;can/can.c: 779:       txBuffer[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(txObj->bF.id.SI
      +                          D11 << 5);
  8190                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8191   0103FC  0E95               	movlw	149
  8192   0103FE  24E1               	addwf	fsr1l,w,c
  8193   010400  6ED9               	movwf	fsr2l,c
  8194   010402  0EFF               	movlw	255
  8195   010404  20E2               	addwfc	fsr1h,w,c
  8196   010406  6EDA               	movwf	fsr2h,c
  8197                           
  8198                           ;stkvar	_temp32 @ sp[(-114)+0]
  8199   010408  0E91               	movlw	145
  8200   01040A  24E1               	addwf	fsr1l,w,c
  8201   01040C  6EE9               	movwf	fsr0l,c
  8202   01040E  0EFF               	movlw	255
  8203   010410  20E2               	addwfc	fsr1h,w,c
  8204   010412  6EEA               	movwf	fsr0h,c
  8205   010414  50EF               	movf	indf0,w,c
  8206   010416  6E38               	movwf	(btemp+11)^0,c
  8207                           
  8208                           ;stkvar	_txObj @ sp[(-114)+-3]
  8209   010418  0E8B               	movlw	-117
  8210   01041A  CFE3 F035          	movff	plusw1,btemp+8
  8211   01041E  0E8C               	movlw	-116
  8212   010420  CFE3 F036          	movff	plusw1,btemp+9
  8213   010424  0E04               	movlw	4
  8214   010426  2435               	addwf	(btemp+8)^0,w,c
  8215   010428  6EE9               	movwf	fsr0l,c
  8216   01042A  0E00               	movlw	0
  8217   01042C  2036               	addwfc	(btemp+9)^0,w,c
  8218   01042E  6EEA               	movwf	fsr0h,c
  8219   010430  50EF               	movf	indf0,w,c
  8220   010432  6E37               	movwf	(btemp+10)^0,c
  8221   010434  0E05               	movlw	5
  8222   010436  6E2D               	movwf	btemp^0,c
  8223   010438                     u1675:
  8224   010438  90D8               	bcf	status,0,c
  8225   01043A  3637               	rlcf	(btemp+10)^0,f,c
  8226   01043C  2E2D               	decfsz	btemp^0,f,c
  8227   01043E  EF1C  F082         	goto	u1675
  8228   010442  5037               	movf	(btemp+10)^0,w,c
  8229   010444  1038               	iorwf	(btemp+11)^0,w,c
  8230   010446  6EDF               	movwf	indf2,c
  8231   010448                     l3860:
  8232                           
  8233                           ;can/can.c: 781:     txBuffer[4] = txObj->byte[6];
  8234                           ;stkvar	_txObj @ sp[(-114)+-3]
  8235   010448  0E8B               	movlw	-117
  8236   01044A  CFE3 F037          	movff	plusw1,btemp+10
  8237   01044E  0E8C               	movlw	-116
  8238   010450  CFE3 F038          	movff	plusw1,btemp+11
  8239   010454  0E06               	movlw	6
  8240   010456  2437               	addwf	(btemp+10)^0,w,c
  8241   010458  6ED9               	movwf	fsr2l,c
  8242   01045A  0E00               	movlw	0
  8243   01045C  2038               	addwfc	(btemp+11)^0,w,c
  8244   01045E  6EDA               	movwf	fsr2h,c
  8245                           
  8246                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8247   010460  0E96               	movlw	150
  8248   010462  24E1               	addwf	fsr1l,w,c
  8249   010464  6EE9               	movwf	fsr0l,c
  8250   010466  0EFF               	movlw	255
  8251   010468  20E2               	addwfc	fsr1h,w,c
  8252   01046A  6EEA               	movwf	fsr0h,c
  8253   01046C  CFDF FFEF          	movff	indf2,indf0
  8254   010470                     
  8255                           ;can/can.c: 782:     txBuffer[5] = txObj->bF.ctrl.ESI | (uint8_t)(txObj->bF.ctrl.SEQ << 
      +                          1);
  8256                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8257   010470  0E97               	movlw	151
  8258   010472  24E1               	addwf	fsr1l,w,c
  8259   010474  6ED9               	movwf	fsr2l,c
  8260   010476  0EFF               	movlw	255
  8261   010478  20E2               	addwfc	fsr1h,w,c
  8262   01047A  6EDA               	movwf	fsr2h,c
  8263                           
  8264                           ;stkvar	_txObj @ sp[(-114)+-3]
  8265   01047C  0E8B               	movlw	-117
  8266   01047E  CFE3 F037          	movff	plusw1,btemp+10
  8267   010482  0E8C               	movlw	-116
  8268   010484  CFE3 F038          	movff	plusw1,btemp+11
  8269   010488  0E07               	movlw	7
  8270   01048A  2437               	addwf	(btemp+10)^0,w,c
  8271   01048C  6EE9               	movwf	fsr0l,c
  8272   01048E  0E00               	movlw	0
  8273   010490  2038               	addwfc	(btemp+11)^0,w,c
  8274   010492  6EEA               	movwf	fsr0h,c
  8275   010494  50EF               	movf	indf0,w,c
  8276   010496  6E38               	movwf	(btemp+11)^0,c
  8277                           
  8278                           ;stkvar	_txObj @ sp[(-114)+-3]
  8279   010498  0E8B               	movlw	-117
  8280   01049A  CFE3 F035          	movff	plusw1,btemp+8
  8281   01049E  0E8C               	movlw	-116
  8282   0104A0  CFE3 F036          	movff	plusw1,btemp+9
  8283   0104A4  0E08               	movlw	8
  8284   0104A6  2435               	addwf	(btemp+8)^0,w,c
  8285   0104A8  6EE9               	movwf	fsr0l,c
  8286   0104AA  0E00               	movlw	0
  8287   0104AC  2036               	addwfc	(btemp+9)^0,w,c
  8288   0104AE  6EEA               	movwf	fsr0h,c
  8289   0104B0  50EF               	movf	indf0,w,c
  8290   0104B2  6E37               	movwf	(btemp+10)^0,c
  8291   0104B4  90D8               	bcf	status,0,c
  8292   0104B6  3437               	rlcf	(btemp+10)^0,w,c
  8293   0104B8  1038               	iorwf	(btemp+11)^0,w,c
  8294   0104BA  6EDF               	movwf	indf2,c
  8295   0104BC                     
  8296                           ;can/can.c: 783:     txBuffer[6] = (uint8_t)(txObj->bF.ctrl.SEQ >> 7);
  8297                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8298   0104BC  0E98               	movlw	152
  8299   0104BE  24E1               	addwf	fsr1l,w,c
  8300   0104C0  6ED9               	movwf	fsr2l,c
  8301   0104C2  0EFF               	movlw	255
  8302   0104C4  20E2               	addwfc	fsr1h,w,c
  8303   0104C6  6EDA               	movwf	fsr2h,c
  8304                           
  8305                           ;stkvar	_txObj @ sp[(-114)+-3]
  8306   0104C8  0E8B               	movlw	-117
  8307   0104CA  CFE3 F037          	movff	plusw1,btemp+10
  8308   0104CE  0E8C               	movlw	-116
  8309   0104D0  CFE3 F038          	movff	plusw1,btemp+11
  8310   0104D4  0E08               	movlw	8
  8311   0104D6  2437               	addwf	(btemp+10)^0,w,c
  8312   0104D8  6EE9               	movwf	fsr0l,c
  8313   0104DA  0E00               	movlw	0
  8314   0104DC  2038               	addwfc	(btemp+11)^0,w,c
  8315   0104DE  6EEA               	movwf	fsr0h,c
  8316   0104E0  CFEE F035          	movff	postinc0,btemp+8
  8317   0104E4  CFEE F036          	movff	postinc0,btemp+9
  8318   0104E8  CFEE F037          	movff	postinc0,btemp+10
  8319   0104EC  CFEE F038          	movff	postinc0,btemp+11
  8320   0104F0  0E08               	movlw	8
  8321   0104F2  EF80  F082         	goto	u1680
  8322   0104F6                     u1685:
  8323   0104F6  90D8               	bcf	status,0,c
  8324   0104F8  3238               	rrcf	(btemp+11)^0,f,c
  8325   0104FA  3237               	rrcf	(btemp+10)^0,f,c
  8326   0104FC  3236               	rrcf	(btemp+9)^0,f,c
  8327   0104FE  3235               	rrcf	(btemp+8)^0,f,c
  8328   010500                     u1680:
  8329   010500  2EE8               	decfsz	wreg,f,c
  8330   010502  EF7B  F082         	goto	u1685
  8331   010506  5035               	movf	(btemp+8)^0,w,c
  8332   010508  6EDF               	movwf	indf2,c
  8333   01050A                     
  8334                           ;can/can.c: 784:     txBuffer[7] = (uint8_t)(txObj->bF.ctrl.SEQ >> 15);
  8335                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8336   01050A  0E99               	movlw	153
  8337   01050C  24E1               	addwf	fsr1l,w,c
  8338   01050E  6ED9               	movwf	fsr2l,c
  8339   010510  0EFF               	movlw	255
  8340   010512  20E2               	addwfc	fsr1h,w,c
  8341   010514  6EDA               	movwf	fsr2h,c
  8342                           
  8343                           ;stkvar	_txObj @ sp[(-114)+-3]
  8344   010516  0E8B               	movlw	-117
  8345   010518  CFE3 F037          	movff	plusw1,btemp+10
  8346   01051C  0E8C               	movlw	-116
  8347   01051E  CFE3 F038          	movff	plusw1,btemp+11
  8348   010522  0E08               	movlw	8
  8349   010524  2437               	addwf	(btemp+10)^0,w,c
  8350   010526  6EE9               	movwf	fsr0l,c
  8351   010528  0E00               	movlw	0
  8352   01052A  2038               	addwfc	(btemp+11)^0,w,c
  8353   01052C  6EEA               	movwf	fsr0h,c
  8354   01052E  CFEE F035          	movff	postinc0,btemp+8
  8355   010532  CFEE F036          	movff	postinc0,btemp+9
  8356   010536  CFEE F037          	movff	postinc0,btemp+10
  8357   01053A  CFEE F038          	movff	postinc0,btemp+11
  8358   01053E  0E10               	movlw	16
  8359   010540  EFA7  F082         	goto	u1690
  8360   010544                     u1695:
  8361   010544  90D8               	bcf	status,0,c
  8362   010546  3238               	rrcf	(btemp+11)^0,f,c
  8363   010548  3237               	rrcf	(btemp+10)^0,f,c
  8364   01054A  3236               	rrcf	(btemp+9)^0,f,c
  8365   01054C  3235               	rrcf	(btemp+8)^0,f,c
  8366   01054E                     u1690:
  8367   01054E  2EE8               	decfsz	wreg,f,c
  8368   010550  EFA2  F082         	goto	u1695
  8369   010554  5035               	movf	(btemp+8)^0,w,c
  8370   010556  6EDF               	movwf	indf2,c
  8371   010558                     
  8372                           ;can/can.c: 787:     uint8_t i;;can/can.c: 788:     for (i = 0; i < txdNumBytes; i++) {
  8373                           ;stkvar	_i @ sp[(-114)+112]
  8374   010558  0EFE               	movlw	-2
  8375   01055A  6AE3               	clrf	plusw1,c
  8376   01055C  EFD7  F082         	goto	l3874
  8377   010560                     l3870:
  8378                           
  8379                           ;can/can.c: 789:         txBuffer[i + 8] = txd[i];
  8380                           ;stkvar	_i @ sp[(-114)+112]
  8381   010560  0EFE               	movlw	-2
  8382   010562  CFE3 F038          	movff	plusw1,btemp+11
  8383                           
  8384                           ;stkvar	_txd @ sp[(-114)+-5]
  8385   010566  0E89               	movlw	-119
  8386   010568  CFE3 F035          	movff	plusw1,btemp+8
  8387   01056C  0E8A               	movlw	-118
  8388   01056E  CFE3 F036          	movff	plusw1,btemp+9
  8389   010572  5038               	movf	(btemp+11)^0,w,c
  8390   010574  2435               	addwf	(btemp+8)^0,w,c
  8391   010576  6ED9               	movwf	fsr2l,c
  8392   010578  0E00               	movlw	0
  8393   01057A  2036               	addwfc	(btemp+9)^0,w,c
  8394   01057C  6EDA               	movwf	fsr2h,c
  8395                           
  8396                           ;stkvar	_i @ sp[(-114)+112]
  8397   01057E  0EFE               	movlw	-2
  8398   010580  50E3               	movf	plusw1,w,c
  8399   010582  6E37               	movwf	(btemp+10)^0,c
  8400   010584  6A38               	clrf	(btemp+11)^0,c
  8401   010586  0E08               	movlw	8
  8402   010588  2637               	addwf	(btemp+10)^0,f,c
  8403   01058A  0E00               	movlw	0
  8404   01058C  2238               	addwfc	(btemp+11)^0,f,c
  8405                           
  8406                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8407   01058E  0E92               	movlw	146
  8408   010590  24E1               	addwf	fsr1l,w,c
  8409   010592  6E35               	movwf	(btemp+8)^0,c
  8410   010594  0EFF               	movlw	255
  8411   010596  20E2               	addwfc	fsr1h,w,c
  8412   010598  6E36               	movwf	(btemp+9)^0,c
  8413   01059A  5037               	movf	(btemp+10)^0,w,c
  8414   01059C  2435               	addwf	(btemp+8)^0,w,c
  8415   01059E  6EE9               	movwf	fsr0l,c
  8416   0105A0  5038               	movf	(btemp+11)^0,w,c
  8417   0105A2  2036               	addwfc	(btemp+9)^0,w,c
  8418   0105A4  6EEA               	movwf	fsr0h,c
  8419   0105A6  CFDF FFEF          	movff	indf2,indf0
  8420   0105AA                     
  8421                           ;can/can.c: 790:     }
  8422                           ;stkvar	_i @ sp[(-114)+112]
  8423   0105AA  0EFE               	movlw	-2
  8424   0105AC  2AE3               	incf	plusw1,f,c
  8425   0105AE                     l3874:
  8426                           
  8427                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8428                           ;stkvar	_i @ sp[(-114)+112]
  8429   0105AE  0EFE               	movlw	-2
  8430   0105B0  CFE3 F038          	movff	plusw1,btemp+11
  8431   0105B4  C038  F031         	movff	btemp+11,btemp+4
  8432   0105B8  6A32               	clrf	(btemp+5)^0,c
  8433   0105BA  6A33               	clrf	(btemp+6)^0,c
  8434   0105BC  6A34               	clrf	(btemp+7)^0,c
  8435   0105BE  0E85               	movlw	-123
  8436   0105C0  50E3               	movf	plusw1,w,c
  8437   0105C2  5C31               	subwf	(btemp+4)^0,w,c
  8438   0105C4  0E86               	movlw	-122
  8439   0105C6  50E3               	movf	plusw1,w,c
  8440   0105C8  5832               	subwfb	(btemp+5)^0,w,c
  8441   0105CA  0E87               	movlw	-121
  8442   0105CC  50E3               	movf	plusw1,w,c
  8443   0105CE  5833               	subwfb	(btemp+6)^0,w,c
  8444   0105D0  0E88               	movlw	-120
  8445   0105D2  50E3               	movf	plusw1,w,c
  8446   0105D4  5834               	subwfb	(btemp+7)^0,w,c
  8447   0105D6  A0D8               	btfss	status,0,c
  8448   0105D8  EFF0  F082         	goto	u1701
  8449   0105DC  EFF2  F082         	goto	u1700
  8450   0105E0                     u1701:
  8451   0105E0  EFB0  F082         	goto	l3870
  8452   0105E4                     u1700:
  8453   0105E4                     
  8454                           ;can/can.c: 793:     uint16_t n = 0;
  8455                           ;stkvar	_n @ sp[(-114)+109]
  8456   0105E4  0EFB               	movlw	-5
  8457   0105E6  6AE3               	clrf	plusw1,c
  8458   0105E8  0EFC               	movlw	-4
  8459   0105EA  6AE3               	clrf	plusw1,c
  8460   0105EC                     
  8461                           ;can/can.c: 796:     if (txdNumBytes % 4) {
  8462                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8463   0105EC  0E85               	movlw	-123
  8464   0105EE  CFE3 F038          	movff	plusw1,btemp+11
  8465   0105F2  0E03               	movlw	3
  8466   0105F4  1638               	andwf	(btemp+11)^0,f,c
  8467   0105F6  B4D8               	btfsc	status,2,c
  8468   0105F8  EF00  F083         	goto	u1711
  8469   0105FC  EF02  F083         	goto	u1710
  8470   010600                     u1711:
  8471   010600  EF51  F083         	goto	l3894
  8472   010604                     u1710:
  8473   010604                     
  8474                           ;can/can.c: 798:         n = 4 - (txdNumBytes % 4);
  8475                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8476   010604  0E85               	movlw	-123
  8477   010606  CFE3 F037          	movff	plusw1,btemp+10
  8478   01060A  0E86               	movlw	-122
  8479   01060C  CFE3 F038          	movff	plusw1,btemp+11
  8480   010610  0E03               	movlw	3
  8481   010612  1637               	andwf	(btemp+10)^0,f,c
  8482   010614  0E00               	movlw	0
  8483   010616  1638               	andwf	(btemp+11)^0,f,c
  8484   010618  5037               	movf	(btemp+10)^0,w,c
  8485   01061A  0804               	sublw	4
  8486   01061C  6E35               	movwf	(btemp+8)^0,c
  8487   01061E  5038               	movf	(btemp+11)^0,w,c
  8488   010620  A0D8               	btfss	status,0,c
  8489   010622  2AE8               	incf	wreg,f,c
  8490   010624  0800               	sublw	0
  8491   010626  6E36               	movwf	(btemp+9)^0,c
  8492                           
  8493                           ;stkvar	_n @ sp[(-114)+109]
  8494   010628  0EFB               	movlw	-5
  8495   01062A  C035  FFE3         	movff	btemp+8,plusw1
  8496   01062E  0EFC               	movlw	-4
  8497   010630  C036  FFE3         	movff	btemp+9,plusw1
  8498   010634                     
  8499                           ;can/can.c: 799:         i = (uint8_t)txdNumBytes + 8;
  8500   010634  0E08               	movlw	8
  8501   010636  6E38               	movwf	(btemp+11)^0,c
  8502                           
  8503                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8504   010638  0E85               	movlw	-123
  8505   01063A  50E3               	movf	plusw1,w,c
  8506   01063C  2438               	addwf	(btemp+11)^0,w,c
  8507   01063E  6E37               	movwf	(btemp+10)^0,c
  8508                           
  8509                           ;stkvar	_i @ sp[(-114)+112]
  8510   010640  0EFE               	movlw	-2
  8511   010642  C037  FFE3         	movff	btemp+10,plusw1
  8512   010646                     
  8513                           ;can/can.c: 801:         for (j = 0; j < n; j++) {
  8514                           ;stkvar	_j @ sp[(-114)+113]
  8515   010646  0EFF               	movlw	-1
  8516   010648  6AE3               	clrf	plusw1,c
  8517   01064A  EF40  F083         	goto	l3892
  8518   01064E                     l3888:
  8519                           
  8520                           ;can/can.c: 802:             txBuffer[i + 8 + j] = 0;
  8521                           ;stkvar	_txBuffer @ sp[(-114)+4]
  8522   01064E  0E92               	movlw	146
  8523   010650  24E1               	addwf	fsr1l,w,c
  8524   010652  6E37               	movwf	(btemp+10)^0,c
  8525   010654  0EFF               	movlw	255
  8526   010656  20E2               	addwfc	fsr1h,w,c
  8527   010658  6E38               	movwf	(btemp+11)^0,c
  8528                           
  8529                           ;stkvar	_i @ sp[(-114)+112]
  8530   01065A  0EFE               	movlw	-2
  8531   01065C  50E3               	movf	plusw1,w,c
  8532   01065E  2637               	addwf	(btemp+10)^0,f,c
  8533   010660  0E00               	movlw	0
  8534   010662  2238               	addwfc	(btemp+11)^0,f,c
  8535                           
  8536                           ;stkvar	_j @ sp[(-114)+113]
  8537   010664  0EFF               	movlw	-1
  8538   010666  50E3               	movf	plusw1,w,c
  8539   010668  2637               	addwf	(btemp+10)^0,f,c
  8540   01066A  0E00               	movlw	0
  8541   01066C  2238               	addwfc	(btemp+11)^0,f,c
  8542   01066E  0E08               	movlw	8
  8543   010670  2437               	addwf	(btemp+10)^0,w,c
  8544   010672  6ED9               	movwf	fsr2l,c
  8545   010674  0E00               	movlw	0
  8546   010676  2038               	addwfc	(btemp+11)^0,w,c
  8547   010678  6EDA               	movwf	fsr2h,c
  8548   01067A  6ADF               	clrf	indf2,c
  8549   01067C                     
  8550                           ;can/can.c: 803:         }
  8551                           ;stkvar	_j @ sp[(-114)+113]
  8552   01067C  0EFF               	movlw	-1
  8553   01067E  2AE3               	incf	plusw1,f,c
  8554   010680                     l3892:
  8555                           
  8556                           ;stkvar	_n @ sp[(-114)+109]
  8557                           ;stkvar	_j @ sp[(-114)+113]
  8558   010680  0EFF               	movlw	-1
  8559   010682  50E3               	movf	plusw1,w,c
  8560   010684  6E37               	movwf	(btemp+10)^0,c
  8561   010686  6A38               	clrf	(btemp+11)^0,c
  8562   010688  0EFB               	movlw	-5
  8563   01068A  50E3               	movf	plusw1,w,c
  8564   01068C  5C37               	subwf	(btemp+10)^0,w,c
  8565   01068E  0EFC               	movlw	-4
  8566   010690  50E3               	movf	plusw1,w,c
  8567   010692  5838               	subwfb	(btemp+11)^0,w,c
  8568   010694  A0D8               	btfss	status,0,c
  8569   010696  EF4F  F083         	goto	u1721
  8570   01069A  EF51  F083         	goto	u1720
  8571   01069E                     u1721:
  8572   01069E  EF27  F083         	goto	l3888
  8573   0106A2                     u1720:
  8574   0106A2                     l3894:
  8575                           
  8576                           ;can/can.c: 806:     spiTransferError = DRV_CANFDSPI_WriteByteArray( (uint16_t)a, txBuff
      +                          er, (uint16_t)txdNumBytes + 8 + n);
  8577                           ;stkvar	_n @ sp[(-114)+109]
  8578                           ;stkvar	_txdNumBytes @ sp[(-114)+-9]
  8579   0106A2  0E85               	movlw	-123
  8580   0106A4  CFE3 F037          	movff	plusw1,btemp+10
  8581   0106A8  0E86               	movlw	-122
  8582   0106AA  CFE3 F038          	movff	plusw1,btemp+11
  8583   0106AE  0EFB               	movlw	-5
  8584   0106B0  50E3               	movf	plusw1,w,c
  8585   0106B2  2637               	addwf	(btemp+10)^0,f,c
  8586   0106B4  0EFC               	movlw	-4
  8587   0106B6  50E3               	movf	plusw1,w,c
  8588   0106B8  2238               	addwfc	(btemp+11)^0,f,c
  8589   0106BA  0E08               	movlw	8
  8590   0106BC  2637               	addwf	(btemp+10)^0,f,c
  8591   0106BE  0E00               	movlw	0
  8592   0106C0  2238               	addwfc	(btemp+11)^0,f,c
  8593   0106C2  C037  FFE6         	movff	btemp+10,postinc1
  8594   0106C6  C038  FFE6         	movff	btemp+11,postinc1
  8595                           
  8596                           ;stkvar	_txBuffer @ sp[(-116)+4]
  8597   0106CA  0E90               	movlw	144
  8598   0106CC  24E1               	addwf	fsr1l,w,c
  8599   0106CE  6E2D               	movwf	btemp^0,c
  8600   0106D0  0EFF               	movlw	255
  8601   0106D2  20E2               	addwfc	fsr1h,w,c
  8602   0106D4  6E2E               	movwf	(btemp+1)^0,c
  8603   0106D6  C02D  FFE6         	movff	btemp,postinc1
  8604   0106DA  C02E  FFE6         	movff	btemp+1,postinc1
  8605                           
  8606                           ;stkvar	_a @ sp[(-118)+97]
  8607   0106DE  0EEB               	movlw	-21
  8608   0106E0  CFE3 FFE6          	movff	plusw1,postinc1
  8609   0106E4  CFE3 FFE6          	movff	plusw1,postinc1
  8610   0106E8  EC40  F097         	call	_DRV_CANFDSPI_WriteByteArray	;wreg free
  8611                           
  8612                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8613   0106EC  0EFD               	movlw	-3
  8614   0106EE  C02D  FFE3         	movff	btemp,plusw1
  8615   0106F2                     
  8616                           ;can/can.c: 807:     if (spiTransferError) {
  8617                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8618   0106F2  0EFD               	movlw	-3
  8619   0106F4  50E3               	movf	plusw1,w,c
  8620   0106F6  B4D8               	btfsc	status,2,c
  8621   0106F8  EF80  F083         	goto	u1731
  8622   0106FC  EF82  F083         	goto	u1730
  8623   010700                     u1731:
  8624   010700  EF86  F083         	goto	l3902
  8625   010704                     u1730:
  8626   010704                     
  8627                           ;can/can.c: 808:         return -4;
  8628   010704  0EFC               	movlw	252
  8629   010706  6E2D               	movwf	btemp^0,c
  8630   010708  EFA1  F083         	goto	l264
  8631   01070C                     l3902:
  8632                           
  8633                           ;can/can.c: 812:     spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate( channel, flu
      +                          sh);
  8634                           ;stkvar	_flush @ sp[(-114)+-10]
  8635   01070C  0E84               	movlw	-124
  8636   01070E  50E3               	movf	plusw1,w,c
  8637   010710  6EE6               	movwf	postinc1,c
  8638                           
  8639                           ;stkvar	_channel @ sp[(-115)+-1]
  8640   010712  0E8C               	movlw	-116
  8641   010714  50E3               	movf	plusw1,w,c
  8642   010716  6EE6               	movwf	postinc1,c
  8643   010718  EC77  F09D         	call	_DRV_CANFDSPI_TransmitChannelUpdate	;wreg free
  8644                           
  8645                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8646   01071C  0EFD               	movlw	-3
  8647   01071E  C02D  FFE3         	movff	btemp,plusw1
  8648   010722                     
  8649                           ;can/can.c: 813:     if (spiTransferError) {
  8650                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8651   010722  0EFD               	movlw	-3
  8652   010724  50E3               	movf	plusw1,w,c
  8653   010726  B4D8               	btfsc	status,2,c
  8654   010728  EF98  F083         	goto	u1741
  8655   01072C  EF9A  F083         	goto	u1740
  8656   010730                     u1741:
  8657   010730  EF9E  F083         	goto	l3910
  8658   010734                     u1740:
  8659   010734                     
  8660                           ;can/can.c: 814:         return -5;
  8661   010734  0EFB               	movlw	251
  8662   010736  6E2D               	movwf	btemp^0,c
  8663   010738  EFA1  F083         	goto	l264
  8664   01073C                     l3910:
  8665                           
  8666                           ;can/can.c: 817:     return spiTransferError;
  8667                           ;stkvar	_spiTransferError @ sp[(-114)+111]
  8668   01073C  0EFD               	movlw	-3
  8669   01073E  CFE3 F02D          	movff	plusw1,btemp
  8670   010742                     l264:
  8671                           
  8672                           ; _DRV_CANFDSPI_TransmitChannelLoad: autosize = 114, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 10, argsize = 10, vargsize = 0
  8673   010742  0E84               	movlw	132
  8674   010744  26E1               	addwf	fsr1l,f,c
  8675   010746  0EFF               	movlw	255
  8676   010748  22E2               	addwfc	fsr1h,f,c
  8677   01074A  0012               	return		;funcret
  8678   01074C                     __end_of_DRV_CANFDSPI_TransmitChannelLoad:
  8679                           	callstack 0
  8680                           
  8681 ;; *************** function _DRV_CANFDSPI_WriteByteArray *****************
  8682 ;; Defined at:
  8683 ;;		line 383 in file "can/can.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;  address         2  [STACK] unsigned short 
  8686 ;;  txd             2  [STACK] PTR unsigned char 
  8687 ;;		 -> txd(200), txBuffer(76), 
  8688 ;;  nBytes          2  [STACK] unsigned short 
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  i               2  [STACK] unsigned short 
  8691 ;;  spiTransferS    2  [STACK] unsigned short 
  8692 ;;  spiTransferE    1  [STACK] char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1  [STACK] char 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used: 1
  8708 ;; Hardware stack levels required when called: 8
  8709 ;; This function calls:
  8710 ;;		_SpiTransfer
  8711 ;; This function is called by:
  8712 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8713 ;; This function uses a reentrant model
  8714 ;;
  8715                           
  8716                           	psect	text24
  8717   012E80                     __ptext24:
  8718                           	callstack 0
  8719   012E80                     _DRV_CANFDSPI_WriteByteArray:
  8720                           	callstack 0
  8721                           
  8722                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8723   012E80  0E05               	movlw	5
  8724   012E82  26E1               	addwf	fsr1l,f,c
  8725   012E84  0E00               	movlw	0
  8726   012E86  22E2               	addwfc	fsr1h,f,c
  8727   012E88                     
  8728                           ;can/can.c: 383: int8_t DRV_CANFDSPI_WriteByteArray( uint16_t address,;can/can.c: 384:  
      +                                 uint8_t *txd, uint16_t nBytes);can/can.c: 385: {;can/can.c: 386:     uint16_t i;;
      +                          can/can.c: 387:     uint16_t spiTransferSize = nBytes + 2;
  8729                           ;stkvar	_nBytes @ sp[(-5)+-6]
  8730   012E88  0EF5               	movlw	-11
  8731   012E8A  50E3               	movf	plusw1,w,c
  8732   012E8C  0F02               	addlw	2
  8733   012E8E  6E37               	movwf	(btemp+10)^0,c
  8734   012E90  0EF6               	movlw	-10
  8735   012E92  CFE3 F038          	movff	plusw1,btemp+11
  8736   012E96  0E00               	movlw	0
  8737   012E98  2238               	addwfc	(btemp+11)^0,f,c
  8738                           
  8739                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  8740   012E9A  0EFD               	movlw	-3
  8741   012E9C  C037  FFE3         	movff	btemp+10,plusw1
  8742   012EA0  0EFE               	movlw	-2
  8743   012EA2  C038  FFE3         	movff	btemp+11,plusw1
  8744   012EA6                     
  8745                           ;can/can.c: 391:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
  8746                           ;stkvar	_address @ sp[(-5)+-2]
  8747   012EA6  0EFA               	movlw	250
  8748   012EA8  24E1               	addwf	fsr1l,w,c
  8749   012EAA  6ED9               	movwf	fsr2l,c
  8750   012EAC  0EFF               	movlw	255
  8751   012EAE  20E2               	addwfc	fsr1h,w,c
  8752   012EB0  6EDA               	movwf	fsr2h,c
  8753   012EB2  50DF               	movf	indf2,w,c
  8754   012EB4  0B0F               	andlw	15
  8755   012EB6  0F20               	addlw	32
  8756   012EB8  0101               	movlb	1	; () banked
  8757   012EBA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  8758   012EBC                     
  8759                           ; BSR set to: 1
  8760                           ;can/can.c: 392:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
  8761                           ;stkvar	_address @ sp[(-5)+-2]
  8762   012EBC  0EF9               	movlw	-7
  8763   012EBE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  8764   012EC2                     
  8765                           ; BSR set to: 1
  8766                           ;can/can.c: 395:     for (i = 2; i < spiTransferSize; i++) {
  8767   012EC2  0E02               	movlw	2
  8768   012EC4  6E37               	movwf	(btemp+10)^0,c
  8769   012EC6  0E00               	movlw	0
  8770   012EC8  6E38               	movwf	(btemp+11)^0,c
  8771                           
  8772                           ;stkvar	_i @ sp[(-5)+0]
  8773   012ECA  0EFB               	movlw	-5
  8774   012ECC  C037  FFE3         	movff	btemp+10,plusw1
  8775   012ED0  0EFC               	movlw	-4
  8776   012ED2  C038  FFE3         	movff	btemp+11,plusw1
  8777   012ED6  EF9C  F097         	goto	l3736
  8778   012EDA                     l3732:
  8779                           
  8780                           ;can/can.c: 396:         spiTransmitBuffer[i] = txd[i - 2];
  8781                           ;stkvar	_i @ sp[(-5)+0]
  8782                           ;stkvar	_txd @ sp[(-5)+-4]
  8783   012EDA  0EF7               	movlw	-9
  8784   012EDC  CFE3 F037          	movff	plusw1,btemp+10
  8785   012EE0  0EF8               	movlw	-8
  8786   012EE2  CFE3 F038          	movff	plusw1,btemp+11
  8787   012EE6  0EFB               	movlw	-5
  8788   012EE8  50E3               	movf	plusw1,w,c
  8789   012EEA  2637               	addwf	(btemp+10)^0,f,c
  8790   012EEC  0EFC               	movlw	-4
  8791   012EEE  50E3               	movf	plusw1,w,c
  8792   012EF0  2238               	addwfc	(btemp+11)^0,f,c
  8793   012EF2  0EFE               	movlw	254
  8794   012EF4  2437               	addwf	(btemp+10)^0,w,c
  8795   012EF6  6ED9               	movwf	fsr2l,c
  8796   012EF8  0EFF               	movlw	255
  8797   012EFA  2038               	addwfc	(btemp+11)^0,w,c
  8798   012EFC  6EDA               	movwf	fsr2h,c
  8799                           
  8800                           ;stkvar	_i @ sp[(-5)+0]
  8801   012EFE  0EFB               	movlw	-5
  8802   012F00  CFE3 F037          	movff	plusw1,btemp+10
  8803   012F04  0EFC               	movlw	-4
  8804   012F06  CFE3 F038          	movff	plusw1,btemp+11
  8805   012F0A  0E00               	movlw	low _spiTransmitBuffer
  8806   012F0C  2437               	addwf	(btemp+10)^0,w,c
  8807   012F0E  6EE9               	movwf	fsr0l,c
  8808   012F10  0E01               	movlw	high _spiTransmitBuffer
  8809   012F12  2038               	addwfc	(btemp+11)^0,w,c
  8810   012F14  6EEA               	movwf	fsr0h,c
  8811   012F16  CFDF FFEF          	movff	indf2,indf0
  8812   012F1A                     
  8813                           ;can/can.c: 397:     }
  8814                           ;stkvar	_i @ sp[(-5)+0]
  8815   012F1A  0EFB               	movlw	-5
  8816   012F1C  50E3               	movf	plusw1,w,c
  8817   012F1E  0F01               	addlw	1
  8818   012F20  6E2D               	movwf	btemp^0,c
  8819   012F22  0EFB               	movlw	-5
  8820   012F24  C02D  FFE3         	movff	btemp,plusw1
  8821   012F28  6A2D               	clrf	btemp^0,c
  8822   012F2A  0EFC               	movlw	-4
  8823   012F2C  50E3               	movf	plusw1,w,c
  8824   012F2E  202D               	addwfc	btemp^0,w,c
  8825   012F30  6E2D               	movwf	btemp^0,c
  8826   012F32  0EFC               	movlw	-4
  8827   012F34  C02D  FFE3         	movff	btemp,plusw1
  8828   012F38                     l3736:
  8829                           
  8830                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  8831   012F38  0EFD               	movlw	-3
  8832   012F3A  CFE3 F037          	movff	plusw1,btemp+10
  8833   012F3E  0EFE               	movlw	-2
  8834   012F40  CFE3 F038          	movff	plusw1,btemp+11
  8835                           
  8836                           ;stkvar	_i @ sp[(-5)+0]
  8837   012F44  0EFB               	movlw	-5
  8838   012F46  CFE3 F035          	movff	plusw1,btemp+8
  8839   012F4A  0EFC               	movlw	-4
  8840   012F4C  CFE3 F036          	movff	plusw1,btemp+9
  8841   012F50  5037               	movf	(btemp+10)^0,w,c
  8842   012F52  5C35               	subwf	(btemp+8)^0,w,c
  8843   012F54  5038               	movf	(btemp+11)^0,w,c
  8844   012F56  5836               	subwfb	(btemp+9)^0,w,c
  8845   012F58  A0D8               	btfss	status,0,c
  8846   012F5A  EFB1  F097         	goto	u1511
  8847   012F5E  EFB3  F097         	goto	u1510
  8848   012F62                     u1511:
  8849   012F62  EF6D  F097         	goto	l3732
  8850   012F66                     u1510:
  8851   012F66                     
  8852                           ;can/can.c: 399:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
  8853                           ;stkvar	_spiTransferSize @ sp[(-5)+2]
  8854   012F66  0EFD               	movlw	-3
  8855   012F68  CFE3 FFE6          	movff	plusw1,postinc1
  8856   012F6C  CFE3 FFE6          	movff	plusw1,postinc1
  8857   012F70  0E00               	movlw	low _spiReceiveBuffer
  8858   012F72  6EE6               	movwf	postinc1,c
  8859   012F74  0E02               	movlw	high _spiReceiveBuffer
  8860   012F76  6EE6               	movwf	postinc1,c
  8861   012F78  0E00               	movlw	low _spiTransmitBuffer
  8862   012F7A  6EE6               	movwf	postinc1,c
  8863   012F7C  0E01               	movlw	high _spiTransmitBuffer
  8864   012F7E  6EE6               	movwf	postinc1,c
  8865   012F80  ECAD  F09B         	call	_SpiTransfer	;wreg free
  8866                           
  8867                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  8868   012F84  0EFF               	movlw	-1
  8869   012F86  C02D  FFE3         	movff	btemp,plusw1
  8870   012F8A                     
  8871                           ;can/can.c: 401:     return spiTransferError;
  8872                           ;stkvar	_spiTransferError @ sp[(-5)+4]
  8873   012F8A  0EFF               	movlw	-1
  8874   012F8C  CFE3 F02D          	movff	plusw1,btemp
  8875   012F90                     
  8876                           ; _DRV_CANFDSPI_WriteByteArray: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  8877   012F90  0EF5               	movlw	245
  8878   012F92  26E1               	addwf	fsr1l,f,c
  8879   012F94  0EFF               	movlw	255
  8880   012F96  22E2               	addwfc	fsr1h,f,c
  8881   012F98  0012               	return		;funcret
  8882   012F9A                     __end_of_DRV_CANFDSPI_WriteByteArray:
  8883                           	callstack 0
  8884                           
  8885 ;; *************** function _DRV_CANFDSPI_TransmitChannelUpdate *****************
  8886 ;; Defined at:
  8887 ;;		line 880 in file "can/can.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  channel         1  [STACK] enum E5290
  8890 ;;  flush           1  [STACK] _Bool 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
  8893 ;;  a               2  [STACK] unsigned short 
  8894 ;;  spiTransferE    1  [STACK] char 
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1  [STACK] char 
  8897 ;; Registers used:
  8898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl, prodh
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;Total ram usage:        0 bytes
  8909 ;; Hardware stack levels used: 1
  8910 ;; Hardware stack levels required when called: 9
  8911 ;; This function calls:
  8912 ;;		_DRV_CANFDSPI_WriteByte
  8913 ;; This function is called by:
  8914 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  8915 ;; This function uses a reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text25
  8919   013AEE                     __ptext25:
  8920                           	callstack 0
  8921   013AEE                     _DRV_CANFDSPI_TransmitChannelUpdate:
  8922                           	callstack 0
  8923                           
  8924                           ; autosize = 8, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  8925   013AEE  0E08               	movlw	8
  8926   013AF0  26E1               	addwf	fsr1l,f,c
  8927   013AF2  0E00               	movlw	0
  8928   013AF4  22E2               	addwfc	fsr1h,f,c
  8929   013AF6                     
  8930                           ;can/can.c: 888:     a = 0x050 + (channel * (3*4)) + 1;
  8931                           ;stkvar	_channel @ sp[(-8)+-1]
  8932   013AF6  0EF7               	movlw	-9
  8933   013AF8  50E3               	movf	plusw1,w,c
  8934   013AFA  0D0C               	mullw	12
  8935   013AFC  0E51               	movlw	81
  8936   013AFE  26F3               	addwf	243,f,c
  8937   013B00  0E00               	movlw	0
  8938   013B02  22F4               	addwfc	244,f,c
  8939                           
  8940                           ;stkvar	_a @ sp[(-8)+5]
  8941   013B04  0EFD               	movlw	-3
  8942   013B06  CFF3 FFE3          	movff	prodl,plusw1
  8943   013B0A  0EFE               	movlw	-2
  8944   013B0C  CFF4 FFE3          	movff	prodh,plusw1
  8945   013B10                     
  8946                           ;can/can.c: 889:     ciFifoCon.word = 0;
  8947                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  8948   013B10  0EF8               	movlw	-8
  8949   013B12  6AE3               	clrf	plusw1,c
  8950   013B14  0EF9               	movlw	-7
  8951   013B16  6AE3               	clrf	plusw1,c
  8952   013B18  0EFA               	movlw	-6
  8953   013B1A  6AE3               	clrf	plusw1,c
  8954   013B1C  0EFB               	movlw	-5
  8955   013B1E  6AE3               	clrf	plusw1,c
  8956   013B20                     
  8957                           ;can/can.c: 890:     ciFifoCon.txBF.UINC = 1;
  8958                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  8959   013B20  0EF9               	movlw	249
  8960   013B22  24E1               	addwf	fsr1l,w,c
  8961   013B24  6ED9               	movwf	fsr2l,c
  8962   013B26  0EFF               	movlw	255
  8963   013B28  20E2               	addwfc	fsr1h,w,c
  8964   013B2A  6EDA               	movwf	fsr2h,c
  8965   013B2C  80DF               	bsf	indf2,0,c
  8966   013B2E                     
  8967                           ;can/can.c: 893:     if (flush) {
  8968                           ;stkvar	_flush @ sp[(-8)+-2]
  8969   013B2E  0EF6               	movlw	-10
  8970   013B30  50E3               	movf	plusw1,w,c
  8971   013B32  B4D8               	btfsc	status,2,c
  8972   013B34  EF9E  F09D         	goto	u1491
  8973   013B38  EFA0  F09D         	goto	u1490
  8974   013B3C                     u1491:
  8975   013B3C  EFA7  F09D         	goto	l3692
  8976   013B40                     u1490:
  8977   013B40                     
  8978                           ;can/can.c: 894:         ciFifoCon.txBF.TxRequest = 1;
  8979                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  8980   013B40  0EF9               	movlw	249
  8981   013B42  24E1               	addwf	fsr1l,w,c
  8982   013B44  6ED9               	movwf	fsr2l,c
  8983   013B46  0EFF               	movlw	255
  8984   013B48  20E2               	addwfc	fsr1h,w,c
  8985   013B4A  6EDA               	movwf	fsr2h,c
  8986   013B4C  82DF               	bsf	indf2,1,c
  8987   013B4E                     l3692:
  8988                           
  8989                           ;can/can.c: 897:     spiTransferError = DRV_CANFDSPI_WriteByte( a, ciFifoCon.byte[1]);
  8990                           ;stkvar	_ciFifoCon @ sp[(-8)+0]
  8991   013B4E  0EF9               	movlw	249
  8992   013B50  24E1               	addwf	fsr1l,w,c
  8993   013B52  6ED9               	movwf	fsr2l,c
  8994   013B54  0EFF               	movlw	255
  8995   013B56  20E2               	addwfc	fsr1h,w,c
  8996   013B58  6EDA               	movwf	fsr2h,c
  8997   013B5A  50DF               	movf	indf2,w,c
  8998   013B5C  6EE6               	movwf	postinc1,c
  8999                           
  9000                           ;stkvar	_a @ sp[(-9)+5]
  9001   013B5E  0EFC               	movlw	-4
  9002   013B60  CFE3 FFE6          	movff	plusw1,postinc1
  9003   013B64  CFE3 FFE6          	movff	plusw1,postinc1
  9004   013B68  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
  9005                           
  9006                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9007   013B6C  0EFF               	movlw	-1
  9008   013B6E  C02D  FFE3         	movff	btemp,plusw1
  9009   013B72                     
  9010                           ;can/can.c: 898:     if (spiTransferError) {
  9011                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9012   013B72  0EFF               	movlw	-1
  9013   013B74  50E3               	movf	plusw1,w,c
  9014   013B76  B4D8               	btfsc	status,2,c
  9015   013B78  EFC0  F09D         	goto	u1501
  9016   013B7C  EFC2  F09D         	goto	u1500
  9017   013B80                     u1501:
  9018   013B80  EFC6  F09D         	goto	l3700
  9019   013B84                     u1500:
  9020   013B84                     
  9021                           ;can/can.c: 899:         return -1;
  9022   013B84  0EFF               	movlw	255
  9023   013B86  6E2D               	movwf	btemp^0,c
  9024   013B88  EFC9  F09D         	goto	l293
  9025   013B8C                     l3700:
  9026                           
  9027                           ;can/can.c: 902:     return spiTransferError;
  9028                           ;stkvar	_spiTransferError @ sp[(-8)+7]
  9029   013B8C  0EFF               	movlw	-1
  9030   013B8E  CFE3 F02D          	movff	plusw1,btemp
  9031   013B92                     l293:
  9032                           
  9033                           ; _DRV_CANFDSPI_TransmitChannelUpdate: autosize = 8, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
  9034   013B92  0EF6               	movlw	246
  9035   013B94  26E1               	addwf	fsr1l,f,c
  9036   013B96  0EFF               	movlw	255
  9037   013B98  22E2               	addwfc	fsr1h,f,c
  9038   013B9A  0012               	return		;funcret
  9039   013B9C                     __end_of_DRV_CANFDSPI_TransmitChannelUpdate:
  9040                           	callstack 0
  9041                           
  9042 ;; *************** function _DRV_CANFDSPI_ReadWordArray *****************
  9043 ;; Defined at:
  9044 ;;		line 405 in file "can/can.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  address         2  [STACK] unsigned short 
  9047 ;;  rxd             2  [STACK] PTR unsigned long 
  9048 ;;		 -> w(12), fifoReg(12), fifoReg(12), fifoReg(8), 
  9049 ;;		 -> fifoReg(12), 
  9050 ;;  nWords          2  [STACK] unsigned short 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  w               4  [STACK] struct _REG_t
  9053 ;;  i               2  [STACK] unsigned short 
  9054 ;;  j               2  [STACK] unsigned short 
  9055 ;;  spiTransferS    2  [STACK] unsigned short 
  9056 ;;  n               2  [STACK] unsigned short 
  9057 ;;  spiTransferE    1  [STACK] char 
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1  [STACK] char 
  9060 ;; Registers used:
  9061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, pro
      +dl
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used: 1
  9073 ;; Hardware stack levels required when called: 8
  9074 ;; This function calls:
  9075 ;;		_SpiTransfer
  9076 ;; This function is called by:
  9077 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9078 ;;		_DRV_CANFDSPI_ReceiveMessageGet
  9079 ;; This function uses a reentrant model
  9080 ;;
  9081                           
  9082                           	psect	text26
  9083   0114B2                     __ptext26:
  9084                           	callstack 0
  9085   0114B2                     _DRV_CANFDSPI_ReadWordArray:
  9086                           	callstack 0
  9087                           
  9088                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
  9089   0114B2  0E0D               	movlw	13
  9090   0114B4  26E1               	addwf	fsr1l,f,c
  9091   0114B6  0E00               	movlw	0
  9092   0114B8  22E2               	addwfc	fsr1h,f,c
  9093   0114BA                     
  9094                           ;can/can.c: 405: int8_t DRV_CANFDSPI_ReadWordArray( uint16_t address,;can/can.c: 406:   
      +                                uint32_t *rxd, uint16_t nWords);can/can.c: 407: {;can/can.c: 408:     uint16_t i, 
      +                          j, n;;can/can.c: 409:     REG_t w;;can/can.c: 410:     uint16_t spiTransferSize = nWords
      +                           * 4 + 2;
  9095                           ;stkvar	_nWords @ sp[(-13)+-6]
  9096   0114BA  0EED               	movlw	-19
  9097   0114BC  CFE3 F037          	movff	plusw1,btemp+10
  9098   0114C0  0EEE               	movlw	-18
  9099   0114C2  CFE3 F038          	movff	plusw1,btemp+11
  9100   0114C6  90D8               	bcf	status,0,c
  9101   0114C8  3637               	rlcf	(btemp+10)^0,f,c
  9102   0114CA  3638               	rlcf	(btemp+11)^0,f,c
  9103   0114CC  90D8               	bcf	status,0,c
  9104   0114CE  3637               	rlcf	(btemp+10)^0,f,c
  9105   0114D0  3638               	rlcf	(btemp+11)^0,f,c
  9106   0114D2  0E02               	movlw	2
  9107   0114D4  2637               	addwf	(btemp+10)^0,f,c
  9108   0114D6  0E00               	movlw	0
  9109   0114D8  2238               	addwfc	(btemp+11)^0,f,c
  9110                           
  9111                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9112   0114DA  0EFB               	movlw	-5
  9113   0114DC  C037  FFE3         	movff	btemp+10,plusw1
  9114   0114E0  0EFC               	movlw	-4
  9115   0114E2  C038  FFE3         	movff	btemp+11,plusw1
  9116   0114E6                     
  9117                           ;can/can.c: 414:     spiTransmitBuffer[0] = (0x03 << 4) + ((address >> 8) & 0xF);
  9118                           ;stkvar	_address @ sp[(-13)+-2]
  9119   0114E6  0EF2               	movlw	242
  9120   0114E8  24E1               	addwf	fsr1l,w,c
  9121   0114EA  6ED9               	movwf	fsr2l,c
  9122   0114EC  0EFF               	movlw	255
  9123   0114EE  20E2               	addwfc	fsr1h,w,c
  9124   0114F0  6EDA               	movwf	fsr2h,c
  9125   0114F2  50DF               	movf	indf2,w,c
  9126   0114F4  0B0F               	andlw	15
  9127   0114F6  0F30               	addlw	48
  9128   0114F8  0101               	movlb	1	; () banked
  9129   0114FA  6F00               	movwf	_spiTransmitBuffer& (0+255),b
  9130   0114FC                     
  9131                           ; BSR set to: 1
  9132                           ;can/can.c: 415:     spiTransmitBuffer[1] = address & 0xFF;
  9133                           ;stkvar	_address @ sp[(-13)+-2]
  9134   0114FC  0EF1               	movlw	-15
  9135   0114FE  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
  9136   011502                     
  9137                           ; BSR set to: 1
  9138                           ;can/can.c: 418:     for (i = 2; i < spiTransferSize; i++) {
  9139   011502  0E02               	movlw	2
  9140   011504  6E37               	movwf	(btemp+10)^0,c
  9141   011506  0E00               	movlw	0
  9142   011508  6E38               	movwf	(btemp+11)^0,c
  9143                           
  9144                           ;stkvar	_i @ sp[(-13)+4]
  9145   01150A  0EF7               	movlw	-9
  9146   01150C  C037  FFE3         	movff	btemp+10,plusw1
  9147   011510  0EF8               	movlw	-8
  9148   011512  C038  FFE3         	movff	btemp+11,plusw1
  9149   011516  EFA9  F08A         	goto	l3758
  9150   01151A                     l3754:
  9151                           
  9152                           ;can/can.c: 419:         spiTransmitBuffer[i] = 0;
  9153                           ;stkvar	_i @ sp[(-13)+4]
  9154   01151A  0EF7               	movlw	-9
  9155   01151C  CFE3 F037          	movff	plusw1,btemp+10
  9156   011520  0EF8               	movlw	-8
  9157   011522  CFE3 F038          	movff	plusw1,btemp+11
  9158   011526  0E00               	movlw	low _spiTransmitBuffer
  9159   011528  2437               	addwf	(btemp+10)^0,w,c
  9160   01152A  6ED9               	movwf	fsr2l,c
  9161   01152C  0E01               	movlw	high _spiTransmitBuffer
  9162   01152E  2038               	addwfc	(btemp+11)^0,w,c
  9163   011530  6EDA               	movwf	fsr2h,c
  9164   011532  6ADF               	clrf	indf2,c
  9165   011534                     
  9166                           ;can/can.c: 420:     }
  9167                           ;stkvar	_i @ sp[(-13)+4]
  9168   011534  0EF7               	movlw	-9
  9169   011536  50E3               	movf	plusw1,w,c
  9170   011538  0F01               	addlw	1
  9171   01153A  6E2D               	movwf	btemp^0,c
  9172   01153C  0EF7               	movlw	-9
  9173   01153E  C02D  FFE3         	movff	btemp,plusw1
  9174   011542  6A2D               	clrf	btemp^0,c
  9175   011544  0EF8               	movlw	-8
  9176   011546  50E3               	movf	plusw1,w,c
  9177   011548  202D               	addwfc	btemp^0,w,c
  9178   01154A  6E2D               	movwf	btemp^0,c
  9179   01154C  0EF8               	movlw	-8
  9180   01154E  C02D  FFE3         	movff	btemp,plusw1
  9181   011552                     l3758:
  9182                           
  9183                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9184   011552  0EFB               	movlw	-5
  9185   011554  CFE3 F037          	movff	plusw1,btemp+10
  9186   011558  0EFC               	movlw	-4
  9187   01155A  CFE3 F038          	movff	plusw1,btemp+11
  9188                           
  9189                           ;stkvar	_i @ sp[(-13)+4]
  9190   01155E  0EF7               	movlw	-9
  9191   011560  CFE3 F035          	movff	plusw1,btemp+8
  9192   011564  0EF8               	movlw	-8
  9193   011566  CFE3 F036          	movff	plusw1,btemp+9
  9194   01156A  5037               	movf	(btemp+10)^0,w,c
  9195   01156C  5C35               	subwf	(btemp+8)^0,w,c
  9196   01156E  5038               	movf	(btemp+11)^0,w,c
  9197   011570  5836               	subwfb	(btemp+9)^0,w,c
  9198   011572  A0D8               	btfss	status,0,c
  9199   011574  EFBE  F08A         	goto	u1521
  9200   011578  EFC0  F08A         	goto	u1520
  9201   01157C                     u1521:
  9202   01157C  EF8D  F08A         	goto	l3754
  9203   011580                     u1520:
  9204   011580                     
  9205                           ;can/can.c: 422:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
  9206                           ;stkvar	_spiTransferSize @ sp[(-13)+8]
  9207   011580  0EFB               	movlw	-5
  9208   011582  CFE3 FFE6          	movff	plusw1,postinc1
  9209   011586  CFE3 FFE6          	movff	plusw1,postinc1
  9210   01158A  0E00               	movlw	low _spiReceiveBuffer
  9211   01158C  6EE6               	movwf	postinc1,c
  9212   01158E  0E02               	movlw	high _spiReceiveBuffer
  9213   011590  6EE6               	movwf	postinc1,c
  9214   011592  0E00               	movlw	low _spiTransmitBuffer
  9215   011594  6EE6               	movwf	postinc1,c
  9216   011596  0E01               	movlw	high _spiTransmitBuffer
  9217   011598  6EE6               	movwf	postinc1,c
  9218   01159A  ECAD  F09B         	call	_SpiTransfer	;wreg free
  9219                           
  9220                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9221   01159E  0EFF               	movlw	-1
  9222   0115A0  C02D  FFE3         	movff	btemp,plusw1
  9223   0115A4                     
  9224                           ;can/can.c: 423:     if (spiTransferError) {
  9225                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9226   0115A4  0EFF               	movlw	-1
  9227   0115A6  50E3               	movf	plusw1,w,c
  9228   0115A8  B4D8               	btfsc	status,2,c
  9229   0115AA  EFD9  F08A         	goto	u1531
  9230   0115AE  EFDB  F08A         	goto	u1530
  9231   0115B2                     u1531:
  9232   0115B2  EFE0  F08A         	goto	l3768
  9233   0115B6                     u1530:
  9234   0115B6                     l3764:
  9235                           
  9236                           ;can/can.c: 424:         return spiTransferError;
  9237                           ;stkvar	_spiTransferError @ sp[(-13)+12]
  9238   0115B6  0EFF               	movlw	-1
  9239   0115B8  CFE3 F02D          	movff	plusw1,btemp
  9240   0115BC  EF98  F08B         	goto	l206
  9241   0115C0                     l3768:
  9242                           
  9243                           ;can/can.c: 428:     n = 2;
  9244   0115C0  0E02               	movlw	2
  9245   0115C2  6E37               	movwf	(btemp+10)^0,c
  9246   0115C4  0E00               	movlw	0
  9247   0115C6  6E38               	movwf	(btemp+11)^0,c
  9248                           
  9249                           ;stkvar	_n @ sp[(-13)+10]
  9250   0115C8  0EFD               	movlw	-3
  9251   0115CA  C037  FFE3         	movff	btemp+10,plusw1
  9252   0115CE  0EFE               	movlw	-2
  9253   0115D0  C038  FFE3         	movff	btemp+11,plusw1
  9254   0115D4                     
  9255                           ;can/can.c: 429:     for (i = 0; i < nWords; i++) {
  9256                           ;stkvar	_i @ sp[(-13)+4]
  9257   0115D4  0EF7               	movlw	-9
  9258   0115D6  6AE3               	clrf	plusw1,c
  9259   0115D8  0EF8               	movlw	-8
  9260   0115DA  6AE3               	clrf	plusw1,c
  9261   0115DC  EF7F  F08B         	goto	l3790
  9262   0115E0                     l3772:
  9263                           
  9264                           ;can/can.c: 430:         w.word = 0;
  9265                           ;stkvar	_w @ sp[(-13)+0]
  9266   0115E0  0EF3               	movlw	-13
  9267   0115E2  6AE3               	clrf	plusw1,c
  9268   0115E4  0EF4               	movlw	-12
  9269   0115E6  6AE3               	clrf	plusw1,c
  9270   0115E8  0EF5               	movlw	-11
  9271   0115EA  6AE3               	clrf	plusw1,c
  9272   0115EC  0EF6               	movlw	-10
  9273   0115EE  6AE3               	clrf	plusw1,c
  9274                           
  9275                           ;can/can.c: 431:         for (j = 0; j < 4; j++, n++) {
  9276                           ;stkvar	_j @ sp[(-13)+6]
  9277   0115F0  0EF9               	movlw	-7
  9278   0115F2  6AE3               	clrf	plusw1,c
  9279   0115F4  0EFA               	movlw	-6
  9280   0115F6  6AE3               	clrf	plusw1,c
  9281   0115F8                     l3778:
  9282                           
  9283                           ;can/can.c: 432:             w.byte[j] = spiReceiveBuffer[n];
  9284                           ;stkvar	_n @ sp[(-13)+10]
  9285   0115F8  0EFD               	movlw	-3
  9286   0115FA  CFE3 F037          	movff	plusw1,btemp+10
  9287   0115FE  0EFE               	movlw	-2
  9288   011600  CFE3 F038          	movff	plusw1,btemp+11
  9289   011604  0E00               	movlw	low _spiReceiveBuffer
  9290   011606  2437               	addwf	(btemp+10)^0,w,c
  9291   011608  6ED9               	movwf	fsr2l,c
  9292   01160A  0E02               	movlw	high _spiReceiveBuffer
  9293   01160C  2038               	addwfc	(btemp+11)^0,w,c
  9294   01160E  6EDA               	movwf	fsr2h,c
  9295                           
  9296                           ;stkvar	_j @ sp[(-13)+6]
  9297   011610  0EF9               	movlw	-7
  9298   011612  CFE3 F037          	movff	plusw1,btemp+10
  9299   011616  0EFA               	movlw	-6
  9300   011618  CFE3 F038          	movff	plusw1,btemp+11
  9301                           
  9302                           ;stkvar	_w @ sp[(-13)+0]
  9303   01161C  0EF3               	movlw	243
  9304   01161E  24E1               	addwf	fsr1l,w,c
  9305   011620  6E35               	movwf	(btemp+8)^0,c
  9306   011622  0EFF               	movlw	255
  9307   011624  20E2               	addwfc	fsr1h,w,c
  9308   011626  6E36               	movwf	(btemp+9)^0,c
  9309   011628  5037               	movf	(btemp+10)^0,w,c
  9310   01162A  2435               	addwf	(btemp+8)^0,w,c
  9311   01162C  6EE9               	movwf	fsr0l,c
  9312   01162E  5038               	movf	(btemp+11)^0,w,c
  9313   011630  2036               	addwfc	(btemp+9)^0,w,c
  9314   011632  6EEA               	movwf	fsr0h,c
  9315   011634  CFDF FFEF          	movff	indf2,indf0
  9316   011638                     
  9317                           ;can/can.c: 433:         }
  9318                           ;stkvar	_j @ sp[(-13)+6]
  9319   011638  0EF9               	movlw	-7
  9320   01163A  50E3               	movf	plusw1,w,c
  9321   01163C  0F01               	addlw	1
  9322   01163E  6E2D               	movwf	btemp^0,c
  9323   011640  0EF9               	movlw	-7
  9324   011642  C02D  FFE3         	movff	btemp,plusw1
  9325   011646  6A2D               	clrf	btemp^0,c
  9326   011648  0EFA               	movlw	-6
  9327   01164A  50E3               	movf	plusw1,w,c
  9328   01164C  202D               	addwfc	btemp^0,w,c
  9329   01164E  6E2D               	movwf	btemp^0,c
  9330   011650  0EFA               	movlw	-6
  9331   011652  C02D  FFE3         	movff	btemp,plusw1
  9332   011656                     
  9333                           ;stkvar	_n @ sp[(-13)+10]
  9334   011656  0EFD               	movlw	-3
  9335   011658  50E3               	movf	plusw1,w,c
  9336   01165A  0F01               	addlw	1
  9337   01165C  6E2D               	movwf	btemp^0,c
  9338   01165E  0EFD               	movlw	-3
  9339   011660  C02D  FFE3         	movff	btemp,plusw1
  9340   011664  6A2D               	clrf	btemp^0,c
  9341   011666  0EFE               	movlw	-2
  9342   011668  50E3               	movf	plusw1,w,c
  9343   01166A  202D               	addwfc	btemp^0,w,c
  9344   01166C  6E2D               	movwf	btemp^0,c
  9345   01166E  0EFE               	movlw	-2
  9346   011670  C02D  FFE3         	movff	btemp,plusw1
  9347   011674                     
  9348                           ;stkvar	_j @ sp[(-13)+6]
  9349   011674  0EFA               	movlw	-6
  9350   011676  50E3               	movf	plusw1,w,c
  9351   011678  E10C               	bnz	u1540
  9352   01167A  0EF9               	movlw	-7
  9353   01167C  CFE3 F02D          	movff	plusw1,btemp
  9354   011680  0E04               	movlw	4
  9355   011682  5E2D               	subwf	btemp^0,f,c
  9356   011684  A0D8               	btfss	status,0,c
  9357   011686  EF47  F08B         	goto	u1541
  9358   01168A  EF49  F08B         	goto	u1540
  9359   01168E                     u1541:
  9360   01168E  EFFC  F08A         	goto	l3778
  9361   011692                     u1540:
  9362   011692                     
  9363                           ;can/can.c: 434:         rxd[i] = w.word;
  9364                           ;stkvar	_w @ sp[(-13)+0]
  9365   011692  50E1               	movf	fsr1l,w,c
  9366   011694  0FF3               	addlw	-13
  9367   011696  6ED9               	movwf	fsr2l,c
  9368   011698  50E2               	movf	fsr1h,w,c
  9369   01169A  6EDA               	movwf	fsr2h,c
  9370   01169C  0EFF               	movlw	255
  9371   01169E  22DA               	addwfc	fsr2h,f,c
  9372                           
  9373                           ;stkvar	_i @ sp[(-13)+4]
  9374   0116A0  0EF7               	movlw	-9
  9375   0116A2  CFE3 F037          	movff	plusw1,btemp+10
  9376   0116A6  0EF8               	movlw	-8
  9377   0116A8  CFE3 F038          	movff	plusw1,btemp+11
  9378   0116AC  90D8               	bcf	status,0,c
  9379   0116AE  3637               	rlcf	(btemp+10)^0,f,c
  9380   0116B0  3638               	rlcf	(btemp+11)^0,f,c
  9381   0116B2  90D8               	bcf	status,0,c
  9382   0116B4  3637               	rlcf	(btemp+10)^0,f,c
  9383   0116B6  3638               	rlcf	(btemp+11)^0,f,c
  9384                           
  9385                           ;stkvar	_rxd @ sp[(-13)+-4]
  9386   0116B8  0EEF               	movlw	-17
  9387   0116BA  CFE3 F035          	movff	plusw1,btemp+8
  9388   0116BE  0EF0               	movlw	-16
  9389   0116C0  CFE3 F036          	movff	plusw1,btemp+9
  9390   0116C4  5037               	movf	(btemp+10)^0,w,c
  9391   0116C6  2435               	addwf	(btemp+8)^0,w,c
  9392   0116C8  6EE9               	movwf	fsr0l,c
  9393   0116CA  5038               	movf	(btemp+11)^0,w,c
  9394   0116CC  2036               	addwfc	(btemp+9)^0,w,c
  9395   0116CE  6EEA               	movwf	fsr0h,c
  9396   0116D0  CFDE FFEE          	movff	postinc2,postinc0
  9397   0116D4  CFDE FFEE          	movff	postinc2,postinc0
  9398   0116D8  CFDE FFEE          	movff	postinc2,postinc0
  9399   0116DC  CFDE FFEE          	movff	postinc2,postinc0
  9400   0116E0                     
  9401                           ;can/can.c: 435:     }
  9402                           ;stkvar	_i @ sp[(-13)+4]
  9403   0116E0  0EF7               	movlw	-9
  9404   0116E2  50E3               	movf	plusw1,w,c
  9405   0116E4  0F01               	addlw	1
  9406   0116E6  6E2D               	movwf	btemp^0,c
  9407   0116E8  0EF7               	movlw	-9
  9408   0116EA  C02D  FFE3         	movff	btemp,plusw1
  9409   0116EE  6A2D               	clrf	btemp^0,c
  9410   0116F0  0EF8               	movlw	-8
  9411   0116F2  50E3               	movf	plusw1,w,c
  9412   0116F4  202D               	addwfc	btemp^0,w,c
  9413   0116F6  6E2D               	movwf	btemp^0,c
  9414   0116F8  0EF8               	movlw	-8
  9415   0116FA  C02D  FFE3         	movff	btemp,plusw1
  9416   0116FE                     l3790:
  9417                           
  9418                           ;stkvar	_nWords @ sp[(-13)+-6]
  9419   0116FE  0EED               	movlw	-19
  9420   011700  CFE3 F037          	movff	plusw1,btemp+10
  9421   011704  0EEE               	movlw	-18
  9422   011706  CFE3 F038          	movff	plusw1,btemp+11
  9423                           
  9424                           ;stkvar	_i @ sp[(-13)+4]
  9425   01170A  0EF7               	movlw	-9
  9426   01170C  CFE3 F035          	movff	plusw1,btemp+8
  9427   011710  0EF8               	movlw	-8
  9428   011712  CFE3 F036          	movff	plusw1,btemp+9
  9429   011716  5037               	movf	(btemp+10)^0,w,c
  9430   011718  5C35               	subwf	(btemp+8)^0,w,c
  9431   01171A  5038               	movf	(btemp+11)^0,w,c
  9432   01171C  5836               	subwfb	(btemp+9)^0,w,c
  9433   01171E  A0D8               	btfss	status,0,c
  9434   011720  EF94  F08B         	goto	u1551
  9435   011724  EF96  F08B         	goto	u1550
  9436   011728                     u1551:
  9437   011728  EFF0  F08A         	goto	l3772
  9438   01172C                     u1550:
  9439   01172C  EFDB  F08A         	goto	l3764
  9440   011730                     l206:
  9441                           
  9442                           ; _DRV_CANFDSPI_ReadWordArray: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 6, argsize = 6, vargsize = 0
  9443   011730  0EED               	movlw	237
  9444   011732  26E1               	addwf	fsr1l,f,c
  9445   011734  0EFF               	movlw	255
  9446   011736  22E2               	addwfc	fsr1h,f,c
  9447   011738  0012               	return		;funcret
  9448   01173A                     __end_of_DRV_CANFDSPI_ReadWordArray:
  9449                           	callstack 0
  9450                           
  9451 ;; *************** function _DRV_CANFDSPI_DlcToDataBytes *****************
  9452 ;; Defined at:
  9453 ;;		line 3766 in file "can/can.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;  dlc             1  [STACK] enum E5464
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  dataBytesInO    4  [STACK] unsigned long 
  9458 ;; Return value:  Size  Location     Type
  9459 ;;                  4  [STACK] unsigned long 
  9460 ;; Registers used:
  9461 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +8, btemp+9, btemp+10, btemp+11
  9462 ;; Tracked objects:
  9463 ;;		On entry : 0/0
  9464 ;;		On exit  : 0/0
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;Total ram usage:        0 bytes
  9472 ;; Hardware stack levels used: 1
  9473 ;; Hardware stack levels required when called: 7
  9474 ;; This function calls:
  9475 ;;		Nothing
  9476 ;; This function is called by:
  9477 ;;		_DRV_CANFDSPI_TransmitChannelLoad
  9478 ;; This function uses a reentrant model
  9479 ;;
  9480                           
  9481                           	psect	text27
  9482   012072                     __ptext27:
  9483                           	callstack 0
  9484   012072                     _DRV_CANFDSPI_DlcToDataBytes:
  9485                           	callstack 0
  9486                           
  9487                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9488   012072  52E6               	movf	postinc1,f,c
  9489   012074  52E6               	movf	postinc1,f,c
  9490   012076  52E6               	movf	postinc1,f,c
  9491   012078  52E6               	movf	postinc1,f,c
  9492   01207A                     
  9493                           ;can/can.c: 3766: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc);can/can.c: 3767: {;c
      +                          an/can.c: 3768:     uint32_t dataBytesInObject = 0;
  9494                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9495   01207A  0EFC               	movlw	-4
  9496   01207C  6AE3               	clrf	plusw1,c
  9497   01207E  0EFD               	movlw	-3
  9498   012080  6AE3               	clrf	plusw1,c
  9499   012082  0EFE               	movlw	-2
  9500   012084  6AE3               	clrf	plusw1,c
  9501   012086  0EFF               	movlw	-1
  9502   012088  6AE3               	clrf	plusw1,c
  9503   01208A                     
  9504                           ;can/can.c: 3770:     __nop();
  9505   01208A  0000               	nop	
  9506   01208C                     
  9507                           ;can/can.c: 3771:     __nop();
  9508   01208C  0000               	nop	
  9509   01208E                     
  9510                           ;can/can.c: 3773:     if (dlc < CAN_DLC_12) {
  9511                           ;stkvar	_dlc @ sp[(-4)+-1]
  9512   01208E  0EFB               	movlw	-5
  9513   012090  CFE3 F02D          	movff	plusw1,btemp
  9514   012094  0E09               	movlw	9
  9515   012096  602D               	cpfslt	btemp^0,c
  9516   012098  EF50  F090         	goto	u101
  9517   01209C  EF52  F090         	goto	u100
  9518   0120A0                     u101:
  9519   0120A0  EFED  F090         	goto	l2322
  9520   0120A4                     u100:
  9521   0120A4                     
  9522                           ;can/can.c: 3774:         dataBytesInObject = dlc;
  9523                           ;stkvar	_dlc @ sp[(-4)+-1]
  9524   0120A4  0EFB               	movlw	-5
  9525   0120A6  CFE3 F038          	movff	plusw1,btemp+11
  9526   0120AA  C038  F031         	movff	btemp+11,btemp+4
  9527   0120AE  6A32               	clrf	(btemp+5)^0,c
  9528   0120B0  6A33               	clrf	(btemp+6)^0,c
  9529   0120B2  6A34               	clrf	(btemp+7)^0,c
  9530                           
  9531                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9532   0120B4  0EFC               	movlw	-4
  9533   0120B6  C031  FFE3         	movff	btemp+4,plusw1
  9534   0120BA  0EFD               	movlw	-3
  9535   0120BC  C032  FFE3         	movff	btemp+5,plusw1
  9536   0120C0  0EFE               	movlw	-2
  9537   0120C2  C033  FFE3         	movff	btemp+6,plusw1
  9538   0120C6  0EFF               	movlw	-1
  9539   0120C8  C034  FFE3         	movff	btemp+7,plusw1
  9540                           
  9541                           ;can/can.c: 3775:     } else {
  9542   0120CC  EF17  F091         	goto	l2324
  9543   0120D0                     l2306:
  9544                           
  9545                           ;can/can.c: 3778:                 dataBytesInObject = 12;
  9546   0120D0  0E0C               	movlw	12
  9547   0120D2  6E35               	movwf	(btemp+8)^0,c
  9548   0120D4  6A36               	clrf	(btemp+9)^0,c
  9549   0120D6  6A37               	clrf	(btemp+10)^0,c
  9550   0120D8  6A38               	clrf	(btemp+11)^0,c
  9551                           
  9552                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9553   0120DA  0EFC               	movlw	-4
  9554   0120DC  C035  FFE3         	movff	btemp+8,plusw1
  9555   0120E0  0EFD               	movlw	-3
  9556   0120E2  C036  FFE3         	movff	btemp+9,plusw1
  9557   0120E6  0EFE               	movlw	-2
  9558   0120E8  C037  FFE3         	movff	btemp+10,plusw1
  9559   0120EC  0EFF               	movlw	-1
  9560   0120EE  C038  FFE3         	movff	btemp+11,plusw1
  9561                           
  9562                           ;can/can.c: 3779:                 break;
  9563   0120F2  EF17  F091         	goto	l2324
  9564   0120F6                     l2308:
  9565                           
  9566                           ;can/can.c: 3781:                 dataBytesInObject = 16;
  9567   0120F6  0E10               	movlw	16
  9568   0120F8  6E35               	movwf	(btemp+8)^0,c
  9569   0120FA  6A36               	clrf	(btemp+9)^0,c
  9570   0120FC  6A37               	clrf	(btemp+10)^0,c
  9571   0120FE  6A38               	clrf	(btemp+11)^0,c
  9572                           
  9573                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9574   012100  0EFC               	movlw	-4
  9575   012102  C035  FFE3         	movff	btemp+8,plusw1
  9576   012106  0EFD               	movlw	-3
  9577   012108  C036  FFE3         	movff	btemp+9,plusw1
  9578   01210C  0EFE               	movlw	-2
  9579   01210E  C037  FFE3         	movff	btemp+10,plusw1
  9580   012112  0EFF               	movlw	-1
  9581   012114  C038  FFE3         	movff	btemp+11,plusw1
  9582                           
  9583                           ;can/can.c: 3782:                 break;
  9584   012118  EF17  F091         	goto	l2324
  9585   01211C                     l2310:
  9586                           
  9587                           ;can/can.c: 3784:                 dataBytesInObject = 20;
  9588   01211C  0E14               	movlw	20
  9589   01211E  6E35               	movwf	(btemp+8)^0,c
  9590   012120  6A36               	clrf	(btemp+9)^0,c
  9591   012122  6A37               	clrf	(btemp+10)^0,c
  9592   012124  6A38               	clrf	(btemp+11)^0,c
  9593                           
  9594                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9595   012126  0EFC               	movlw	-4
  9596   012128  C035  FFE3         	movff	btemp+8,plusw1
  9597   01212C  0EFD               	movlw	-3
  9598   01212E  C036  FFE3         	movff	btemp+9,plusw1
  9599   012132  0EFE               	movlw	-2
  9600   012134  C037  FFE3         	movff	btemp+10,plusw1
  9601   012138  0EFF               	movlw	-1
  9602   01213A  C038  FFE3         	movff	btemp+11,plusw1
  9603                           
  9604                           ;can/can.c: 3785:                 break;
  9605   01213E  EF17  F091         	goto	l2324
  9606   012142                     l2312:
  9607                           
  9608                           ;can/can.c: 3787:                 dataBytesInObject = 24;
  9609   012142  0E18               	movlw	24
  9610   012144  6E35               	movwf	(btemp+8)^0,c
  9611   012146  6A36               	clrf	(btemp+9)^0,c
  9612   012148  6A37               	clrf	(btemp+10)^0,c
  9613   01214A  6A38               	clrf	(btemp+11)^0,c
  9614                           
  9615                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9616   01214C  0EFC               	movlw	-4
  9617   01214E  C035  FFE3         	movff	btemp+8,plusw1
  9618   012152  0EFD               	movlw	-3
  9619   012154  C036  FFE3         	movff	btemp+9,plusw1
  9620   012158  0EFE               	movlw	-2
  9621   01215A  C037  FFE3         	movff	btemp+10,plusw1
  9622   01215E  0EFF               	movlw	-1
  9623   012160  C038  FFE3         	movff	btemp+11,plusw1
  9624                           
  9625                           ;can/can.c: 3788:                 break;
  9626   012164  EF17  F091         	goto	l2324
  9627   012168                     l2314:
  9628                           
  9629                           ;can/can.c: 3790:                 dataBytesInObject = 32;
  9630   012168  0E20               	movlw	32
  9631   01216A  6E35               	movwf	(btemp+8)^0,c
  9632   01216C  6A36               	clrf	(btemp+9)^0,c
  9633   01216E  6A37               	clrf	(btemp+10)^0,c
  9634   012170  6A38               	clrf	(btemp+11)^0,c
  9635                           
  9636                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9637   012172  0EFC               	movlw	-4
  9638   012174  C035  FFE3         	movff	btemp+8,plusw1
  9639   012178  0EFD               	movlw	-3
  9640   01217A  C036  FFE3         	movff	btemp+9,plusw1
  9641   01217E  0EFE               	movlw	-2
  9642   012180  C037  FFE3         	movff	btemp+10,plusw1
  9643   012184  0EFF               	movlw	-1
  9644   012186  C038  FFE3         	movff	btemp+11,plusw1
  9645                           
  9646                           ;can/can.c: 3791:                 break;
  9647   01218A  EF17  F091         	goto	l2324
  9648   01218E                     l2316:
  9649                           
  9650                           ;can/can.c: 3793:                 dataBytesInObject = 48;
  9651   01218E  0E30               	movlw	48
  9652   012190  6E35               	movwf	(btemp+8)^0,c
  9653   012192  6A36               	clrf	(btemp+9)^0,c
  9654   012194  6A37               	clrf	(btemp+10)^0,c
  9655   012196  6A38               	clrf	(btemp+11)^0,c
  9656                           
  9657                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9658   012198  0EFC               	movlw	-4
  9659   01219A  C035  FFE3         	movff	btemp+8,plusw1
  9660   01219E  0EFD               	movlw	-3
  9661   0121A0  C036  FFE3         	movff	btemp+9,plusw1
  9662   0121A4  0EFE               	movlw	-2
  9663   0121A6  C037  FFE3         	movff	btemp+10,plusw1
  9664   0121AA  0EFF               	movlw	-1
  9665   0121AC  C038  FFE3         	movff	btemp+11,plusw1
  9666                           
  9667                           ;can/can.c: 3794:                 break;
  9668   0121B0  EF17  F091         	goto	l2324
  9669   0121B4                     l2318:
  9670                           
  9671                           ;can/can.c: 3796:                 dataBytesInObject = 64;
  9672   0121B4  0E40               	movlw	64
  9673   0121B6  6E35               	movwf	(btemp+8)^0,c
  9674   0121B8  6A36               	clrf	(btemp+9)^0,c
  9675   0121BA  6A37               	clrf	(btemp+10)^0,c
  9676   0121BC  6A38               	clrf	(btemp+11)^0,c
  9677                           
  9678                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9679   0121BE  0EFC               	movlw	-4
  9680   0121C0  C035  FFE3         	movff	btemp+8,plusw1
  9681   0121C4  0EFD               	movlw	-3
  9682   0121C6  C036  FFE3         	movff	btemp+9,plusw1
  9683   0121CA  0EFE               	movlw	-2
  9684   0121CC  C037  FFE3         	movff	btemp+10,plusw1
  9685   0121D0  0EFF               	movlw	-1
  9686   0121D2  C038  FFE3         	movff	btemp+11,plusw1
  9687                           
  9688                           ;can/can.c: 3797:                 break;
  9689   0121D6  EF17  F091         	goto	l2324
  9690   0121DA                     l2322:
  9691                           
  9692                           ;stkvar	_dlc @ sp[(-4)+-1]
  9693   0121DA  0EFB               	movlw	-5
  9694   0121DC  50E3               	movf	plusw1,w,c
  9695   0121DE  6E37               	movwf	(btemp+10)^0,c
  9696   0121E0  6A38               	clrf	(btemp+11)^0,c
  9697                           
  9698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9699                           ; Switch size 1, requested type "simple"
  9700                           ; Number of cases is 1, Range of values is 0 to 0
  9701                           ; switch strategies available:
  9702                           ; Name         Instructions Cycles
  9703                           ; simple_byte            4     3 (average)
  9704                           ;	Chosen strategy is simple_byte
  9705   0121E2  5038               	movf	(btemp+11)^0,w,c
  9706   0121E4  0A00               	xorlw	0	; case 0
  9707   0121E6  B4D8               	btfsc	status,2,c
  9708   0121E8  EFF8  F090         	goto	l5030
  9709   0121EC  EF17  F091         	goto	l2324
  9710   0121F0                     l5030:
  9711                           
  9712                           ; Switch size 1, requested type "simple"
  9713                           ; Number of cases is 7, Range of values is 9 to 15
  9714                           ; switch strategies available:
  9715                           ; Name         Instructions Cycles
  9716                           ; simple_byte           22    12 (average)
  9717                           ;	Chosen strategy is simple_byte
  9718   0121F0  5037               	movf	(btemp+10)^0,w,c
  9719   0121F2  0A09               	xorlw	9	; case 9
  9720   0121F4  B4D8               	btfsc	status,2,c
  9721   0121F6  EF68  F090         	goto	l2306
  9722   0121FA  0A03               	xorlw	3	; case 10
  9723   0121FC  B4D8               	btfsc	status,2,c
  9724   0121FE  EF7B  F090         	goto	l2308
  9725   012202  0A01               	xorlw	1	; case 11
  9726   012204  B4D8               	btfsc	status,2,c
  9727   012206  EF8E  F090         	goto	l2310
  9728   01220A  0A07               	xorlw	7	; case 12
  9729   01220C  B4D8               	btfsc	status,2,c
  9730   01220E  EFA1  F090         	goto	l2312
  9731   012212  0A01               	xorlw	1	; case 13
  9732   012214  B4D8               	btfsc	status,2,c
  9733   012216  EFB4  F090         	goto	l2314
  9734   01221A  0A03               	xorlw	3	; case 14
  9735   01221C  B4D8               	btfsc	status,2,c
  9736   01221E  EFC7  F090         	goto	l2316
  9737   012222  0A01               	xorlw	1	; case 15
  9738   012224  B4D8               	btfsc	status,2,c
  9739   012226  EFDA  F090         	goto	l2318
  9740   01222A  EF17  F091         	goto	l2324
  9741   01222E                     l2324:
  9742                           
  9743                           ;can/can.c: 3803:     return dataBytesInObject;
  9744                           ;stkvar	_dataBytesInObject @ sp[(-4)+0]
  9745   01222E  0EFC               	movlw	-4
  9746   012230  CFE3 F02D          	movff	plusw1,btemp
  9747   012234  0EFD               	movlw	-3
  9748   012236  CFE3 F02E          	movff	plusw1,btemp+1
  9749   01223A  0EFE               	movlw	-2
  9750   01223C  CFE3 F02F          	movff	plusw1,btemp+2
  9751   012240  0EFF               	movlw	-1
  9752   012242  CFE3 F030          	movff	plusw1,btemp+3
  9753   012246                     
  9754                           ; _DRV_CANFDSPI_DlcToDataBytes: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 1, argsize = 1, vargsize = 0
  9755   012246  0EFB               	movlw	251
  9756   012248  26E1               	addwf	fsr1l,f,c
  9757   01224A  0EFF               	movlw	255
  9758   01224C  22E2               	addwfc	fsr1h,f,c
  9759   01224E  0012               	return		;funcret
  9760   012250                     __end_of_DRV_CANFDSPI_DlcToDataBytes:
  9761                           	callstack 0
  9762                           
  9763 ;; *************** function _DRV_CANFDSPI_TransmitChannelEventGet *****************
  9764 ;; Defined at:
  9765 ;;		line 1776 in file "can/can.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  channel         1  [STACK] enum E5290
  9768 ;;  flags           2  [STACK] PTR enum E5583
  9769 ;;		 -> txFlags(1), 
  9770 ;; Auto vars:     Size  Location     Type
  9771 ;;  ciFifoSta       4  [STACK] struct _REG_CiFIFOSTA
  9772 ;;  a               2  [STACK] unsigned short 
  9773 ;;  spiTransferE    1  [STACK] char 
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  1  [STACK] char 
  9776 ;; Registers used:
  9777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl, prodh
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;Total ram usage:        0 bytes
  9788 ;; Hardware stack levels used: 1
  9789 ;; Hardware stack levels required when called: 9
  9790 ;; This function calls:
  9791 ;;		_DRV_CANFDSPI_ReadByte
  9792 ;; This function is called by:
  9793 ;;		_CanSend
  9794 ;; This function uses a reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text28
  9798   013CEA                     __ptext28:
  9799                           	callstack 0
  9800   013CEA                     _DRV_CANFDSPI_TransmitChannelEventGet:
  9801                           	callstack 0
  9802                           
  9803                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
  9804   013CEA  0E07               	movlw	7
  9805   013CEC  26E1               	addwf	fsr1l,f,c
  9806   013CEE  0E00               	movlw	0
  9807   013CF0  22E2               	addwfc	fsr1h,f,c
  9808   013CF2                     
  9809                           ;can/can.c: 1783:     REG_CiFIFOSTA ciFifoSta;;can/can.c: 1784:     ciFifoSta.word = 0;
  9810                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  9811   013CF2  0EF9               	movlw	-7
  9812   013CF4  6AE3               	clrf	plusw1,c
  9813   013CF6  0EFA               	movlw	-6
  9814   013CF8  6AE3               	clrf	plusw1,c
  9815   013CFA  0EFB               	movlw	-5
  9816   013CFC  6AE3               	clrf	plusw1,c
  9817   013CFE  0EFC               	movlw	-4
  9818   013D00  6AE3               	clrf	plusw1,c
  9819   013D02                     
  9820                           ;can/can.c: 1785:     a = 0x054 + (channel * (3*4));
  9821                           ;stkvar	_channel @ sp[(-7)+-1]
  9822   013D02  0EF8               	movlw	-8
  9823   013D04  50E3               	movf	plusw1,w,c
  9824   013D06  0D0C               	mullw	12
  9825   013D08  0E54               	movlw	84
  9826   013D0A  26F3               	addwf	243,f,c
  9827   013D0C  0E00               	movlw	0
  9828   013D0E  22F4               	addwfc	244,f,c
  9829                           
  9830                           ;stkvar	_a @ sp[(-7)+4]
  9831   013D10  0EFD               	movlw	-3
  9832   013D12  CFF3 FFE3          	movff	prodl,plusw1
  9833   013D16  0EFE               	movlw	-2
  9834   013D18  CFF4 FFE3          	movff	prodh,plusw1
  9835   013D1C                     
  9836                           ;can/can.c: 1787:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &ciFifoSta.byte[0]);
  9837                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  9838   013D1C  0EF9               	movlw	249
  9839   013D1E  24E1               	addwf	fsr1l,w,c
  9840   013D20  6E2D               	movwf	btemp^0,c
  9841   013D22  0EFF               	movlw	255
  9842   013D24  20E2               	addwfc	fsr1h,w,c
  9843   013D26  6E2E               	movwf	(btemp+1)^0,c
  9844   013D28  C02D  FFE6         	movff	btemp,postinc1
  9845   013D2C  C02E  FFE6         	movff	btemp+1,postinc1
  9846                           
  9847                           ;stkvar	_a @ sp[(-9)+4]
  9848   013D30  0EFB               	movlw	-5
  9849   013D32  CFE3 FFE6          	movff	plusw1,postinc1
  9850   013D36  CFE3 FFE6          	movff	plusw1,postinc1
  9851   013D3A  ECB3  F0A0         	call	_DRV_CANFDSPI_ReadByte	;wreg free
  9852                           
  9853                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  9854   013D3E  0EFF               	movlw	-1
  9855   013D40  C02D  FFE3         	movff	btemp,plusw1
  9856   013D44                     
  9857                           ;can/can.c: 1788:     if (spiTransferError) {
  9858                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  9859   013D44  0EFF               	movlw	-1
  9860   013D46  50E3               	movf	plusw1,w,c
  9861   013D48  B4D8               	btfsc	status,2,c
  9862   013D4A  EFA9  F09E         	goto	u1751
  9863   013D4E  EFAB  F09E         	goto	u1750
  9864   013D52                     u1751:
  9865   013D52  EFAF  F09E         	goto	l3930
  9866   013D56                     u1750:
  9867   013D56                     
  9868                           ;can/can.c: 1789:         return -1;
  9869   013D56  0EFF               	movlw	255
  9870   013D58  6E2D               	movwf	btemp^0,c
  9871   013D5A  EFBC  F09E         	goto	l453
  9872   013D5E                     l3930:
  9873                           
  9874                           ;can/can.c: 1793:     *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_
      +                          EVENTS);
  9875                           ;stkvar	_flags @ sp[(-7)+-3]
  9876   013D5E  0EF6               	movlw	-10
  9877   013D60  CFE3 FFD9          	movff	plusw1,fsr2l
  9878   013D64  0EF7               	movlw	-9
  9879   013D66  CFE3 FFDA          	movff	plusw1,fsr2h
  9880                           
  9881                           ;stkvar	_ciFifoSta @ sp[(-7)+0]
  9882   013D6A  0EF9               	movlw	-7
  9883   013D6C  50E3               	movf	plusw1,w,c
  9884   013D6E  0B17               	andlw	23
  9885   013D70  6EDF               	movwf	indf2,c
  9886   013D72                     
  9887                           ;can/can.c: 1795:     return spiTransferError;
  9888                           ;stkvar	_spiTransferError @ sp[(-7)+6]
  9889   013D72  0EFF               	movlw	-1
  9890   013D74  CFE3 F02D          	movff	plusw1,btemp
  9891   013D78                     l453:
  9892                           
  9893                           ; _DRV_CANFDSPI_TransmitChannelEventGet: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
  9894   013D78  0EF6               	movlw	246
  9895   013D7A  26E1               	addwf	fsr1l,f,c
  9896   013D7C  0EFF               	movlw	255
  9897   013D7E  22E2               	addwfc	fsr1h,f,c
  9898   013D80  0012               	return		;funcret
  9899   013D82                     __end_of_DRV_CANFDSPI_TransmitChannelEventGet:
  9900                           	callstack 0
  9901                           
  9902 ;; *************** function _XF_popEvent *****************
  9903 ;; Defined at:
  9904 ;;		line 142 in file "xf/xf.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;  inISR           1  [STACK] _Bool 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  ev              6  [STACK] struct Event_
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  6  [STACK] struct Event_
  9911 ;; Registers used:
  9912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9922 ;;Total ram usage:        0 bytes
  9923 ;; Hardware stack levels used: 1
  9924 ;; Hardware stack levels required when called: 8
  9925 ;; This function calls:
  9926 ;;		_ENTERCRITICAL
  9927 ;;		_LEAVECRITICAL
  9928 ;;		___awmod
  9929 ;; This function is called by:
  9930 ;;		_XF_executeOnce
  9931 ;; This function uses a reentrant model
  9932 ;;
  9933                           
  9934                           	psect	text29
  9935   0135C4                     __ptext29:
  9936                           	callstack 0
  9937   0135C4                     _XF_popEvent:
  9938                           	callstack 0
  9939                           
  9940                           ; autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 6 argfudge = 5
  9941   0135C4  0E0B               	movlw	11
  9942   0135C6  26E1               	addwf	fsr1l,f,c
  9943   0135C8  0E00               	movlw	0
  9944   0135CA  22E2               	addwfc	fsr1h,f,c
  9945   0135CC                     
  9946                           ;xf/xf.c: 142: Event XF_popEvent(_Bool inISR);xf/xf.c: 143: {;xf/xf.c: 144:     Event ev
      +                          ;;xf/xf.c: 145:     ev.id = 0;
  9947                           ;stkvar	_ev @ sp[(-6)+0]
  9948   0135CC  0EFA               	movlw	-6
  9949   0135CE  6AE3               	clrf	plusw1,c
  9950   0135D0                     
  9951                           ;xf/xf.c: 146:     ev.processEvent = ((void*)0);
  9952                           ;stkvar	_ev @ sp[(-6)+0]
  9953   0135D0  0EFB               	movlw	251
  9954   0135D2  24E1               	addwf	fsr1l,w,c
  9955   0135D4  6ED9               	movwf	fsr2l,c
  9956   0135D6  0EFF               	movlw	255
  9957   0135D8  20E2               	addwfc	fsr1h,w,c
  9958   0135DA  6EDA               	movwf	fsr2h,c
  9959   0135DC  6ADE               	clrf	postinc2,c
  9960   0135DE  6ADE               	clrf	postinc2,c
  9961   0135E0  6ADD               	clrf	postdec2,c
  9962   0135E2                     
  9963                           ;xf/xf.c: 148:     ENTERCRITICAL(inISR);
  9964                           ;stkvar	_inISR @ sp[(-6)+-6]
  9965   0135E2  0EF4               	movlw	-12
  9966   0135E4  50E3               	movf	plusw1,w,c
  9967   0135E6  6EE6               	movwf	postinc1,c
  9968   0135E8  ECCD  F0A2         	call	_ENTERCRITICAL	;wreg free
  9969   0135EC                     
  9970                           ;xf/xf.c: 149:     if(theXF.countEvt == 0)
  9971   0135EC  EE23  F0DF         	lfsr	2,_theXF+279
  9972   0135F0  50DF               	movf	indf2,w,c
  9973   0135F2  A4D8               	btfss	status,2,c
  9974   0135F4  EFFE  F09A         	goto	u2611
  9975   0135F8  EF00  F09B         	goto	u2610
  9976   0135FC                     u2611:
  9977   0135FC  EF15  F09B         	goto	l4718
  9978   013600                     u2610:
  9979   013600                     l4712:
  9980                           
  9981                           ;xf/xf.c: 150:     {;xf/xf.c: 151:       LEAVECRITICAL(inISR);
  9982                           ;stkvar	_inISR @ sp[(-6)+-6]
  9983   013600  0EF4               	movlw	-12
  9984   013602  50E3               	movf	plusw1,w,c
  9985   013604  6EE6               	movwf	postinc1,c
  9986   013606  ECC1  F0A2         	call	_LEAVECRITICAL	;wreg free
  9987   01360A                     
  9988                           ;xf/xf.c: 152:       return ev;
  9989                           ;stkvar	_ev @ sp[(-6)+0]
  9990   01360A  0EFA               	movlw	250
  9991   01360C  24E1               	addwf	fsr1l,w,c
  9992   01360E  6ED9               	movwf	fsr2l,c
  9993   013610  0EFF               	movlw	255
  9994   013612  20E2               	addwfc	fsr1h,w,c
  9995   013614  6EDA               	movwf	fsr2h,c
  9996                           
  9997                           ;stkvar	?_XF_popEvent @ sp[(-6)+-6]
  9998   013616  0E06               	movlw	6
  9999   013618  6E2D               	movwf	btemp^0,c
 10000   01361A  0EF4               	movlw	-12
 10001   01361C                     us262999:
 10002   01361C  CFDE FFE3          	movff	postinc2,plusw1
 10003   013620  28E8               	incf	wreg,w,c
 10004   013622  2E2D               	decfsz	btemp^0,f,c
 10005   013624  D7FB               	bra	us262999
 10006   013626  EF43  F09B         	goto	l1227
 10007   01362A                     l4718:
 10008                           
 10009                           ;xf/xf.c: 154:     ev = theXF.eventQueue[theXF.out];
 10010   01362A  EE23  F0DD         	lfsr	2,_theXF+277
 10011   01362E  50DF               	movf	indf2,w,c
 10012   013630  0D06               	mullw	6
 10013   013632  0E28               	movlw	low (_theXF+96)
 10014   013634  24F3               	addwf	243,w,c
 10015   013636  6ED9               	movwf	fsr2l,c
 10016   013638  0E03               	movlw	high (_theXF+96)
 10017   01363A  20F4               	addwfc	prodh,w,c
 10018   01363C  6EDA               	movwf	fsr2h,c
 10019                           
 10020                           ;stkvar	_ev @ sp[(-6)+0]
 10021   01363E  0E06               	movlw	6
 10022   013640  6E2D               	movwf	btemp^0,c
 10023   013642  0EFA               	movlw	-6
 10024   013644                     us263999:
 10025   013644  CFDE FFE3          	movff	postinc2,plusw1
 10026   013648  28E8               	incf	wreg,w,c
 10027   01364A  2E2D               	decfsz	btemp^0,f,c
 10028   01364C  D7FB               	bra	us263999
 10029   01364E                     
 10030                           ;xf/xf.c: 155:     theXF.out = (theXF.out + 1)%(uint8_t)(30);
 10031   01364E  0E1E               	movlw	30
 10032   013650  6EE6               	movwf	postinc1,c
 10033   013652  0E00               	movlw	0
 10034   013654  6EE6               	movwf	postinc1,c
 10035   013656  EE23  F0DD         	lfsr	2,_theXF+277
 10036   01365A  50DF               	movf	indf2,w,c
 10037   01365C  6E37               	movwf	(btemp+10)^0,c
 10038   01365E  6A38               	clrf	(btemp+11)^0,c
 10039   013660  0E01               	movlw	1
 10040   013662  2637               	addwf	(btemp+10)^0,f,c
 10041   013664  0E00               	movlw	0
 10042   013666  2238               	addwfc	(btemp+11)^0,f,c
 10043   013668  C037  FFE6         	movff	btemp+10,postinc1
 10044   01366C  C038  FFE6         	movff	btemp+11,postinc1
 10045   013670  EC19  F094         	call	___awmod	;wreg free
 10046   013674  C02D  F3DD         	movff	btemp,_theXF+277
 10047   013678                     
 10048                           ;xf/xf.c: 156:     theXF.countEvt--;
 10049   013678  C3DF  FFE8         	movff	_theXF+279,wreg
 10050   01367C  0FFF               	addlw	-1
 10051   01367E  CFE8 F3DF          	movff	wreg,_theXF+279
 10052   013682  EF00  F09B         	goto	l4712
 10053   013686                     l1227:
 10054                           
 10055                           ; _XF_popEvent: autosize = 6, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 10056   013686  0EFA               	movlw	250
 10057   013688  26E1               	addwf	fsr1l,f,c
 10058   01368A  0EFF               	movlw	255
 10059   01368C  22E2               	addwfc	fsr1h,f,c
 10060   01368E  0012               	return		;funcret
 10061   013690                     __end_of_XF_popEvent:
 10062                           	callstack 0
 10063                           
 10064 ;; *************** function ___awmod *****************
 10065 ;; Defined at:
 10066 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;  dividend        2  [STACK] int 
 10069 ;;  divisor         2  [STACK] int 
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;  sign            1  [STACK] unsigned char 
 10072 ;;  counter         1  [STACK] unsigned char 
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  2  [STACK] int 
 10075 ;; Registers used:
 10076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;Total ram usage:        0 bytes
 10087 ;; Hardware stack levels used: 1
 10088 ;; Hardware stack levels required when called: 7
 10089 ;; This function calls:
 10090 ;;		Nothing
 10091 ;; This function is called by:
 10092 ;;		_XF_pushEvent
 10093 ;;		_XF_popEvent
 10094 ;; This function uses a reentrant model
 10095 ;;
 10096                           
 10097                           	psect	text30
 10098   012832                     __ptext30:
 10099                           	callstack 0
 10100   012832                     ___awmod:
 10101                           	callstack 0
 10102                           
 10103                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 10104   012832  52E6               	movf	postinc1,f,c
 10105   012834  52E6               	movf	postinc1,f,c
 10106   012836                     
 10107                           ;stkvar	_sign @ sp[(-2)+0]
 10108   012836  0EFE               	movlw	-2
 10109   012838  6AE3               	clrf	plusw1,c
 10110   01283A                     
 10111                           ;stkvar	_dividend @ sp[(-2)+-2]
 10112   01283A  0EFD               	movlw	-3
 10113   01283C  BEE3               	btfsc	plusw1,7,c
 10114   01283E  EF25  F094         	goto	u1800
 10115   012842  EF23  F094         	goto	u1801
 10116   012846                     u1801:
 10117   012846  EF2E  F094         	goto	l3990
 10118   01284A                     u1800:
 10119   01284A                     
 10120                           ;stkvar	_dividend @ sp[(-2)+-2]
 10121                           ;stkvar	_dividend @ sp[(-2)+-2]
 10122   01284A  0EFC               	movlw	-4
 10123   01284C  6CE3               	negf	plusw1,c
 10124   01284E  0EFD               	movlw	-3
 10125   012850  1EE3               	comf	plusw1,f,c
 10126   012852  B0D8               	btfsc	status,0,c
 10127   012854  2AE3               	incf	plusw1,f,c
 10128   012856                     
 10129                           ;stkvar	_sign @ sp[(-2)+0]
 10130   012856  0EFE               	movlw	-2
 10131   012858  6AE3               	clrf	plusw1,c
 10132   01285A  2AE3               	incf	plusw1,f,c
 10133   01285C                     l3990:
 10134                           
 10135                           ;stkvar	_divisor @ sp[(-2)+-4]
 10136   01285C  0EFB               	movlw	-5
 10137   01285E  BEE3               	btfsc	plusw1,7,c
 10138   012860  EF36  F094         	goto	u1810
 10139   012864  EF34  F094         	goto	u1811
 10140   012868                     u1811:
 10141   012868  EF3C  F094         	goto	l3994
 10142   01286C                     u1810:
 10143   01286C                     
 10144                           ;stkvar	_divisor @ sp[(-2)+-4]
 10145                           ;stkvar	_divisor @ sp[(-2)+-4]
 10146   01286C  0EFA               	movlw	-6
 10147   01286E  6CE3               	negf	plusw1,c
 10148   012870  0EFB               	movlw	-5
 10149   012872  1EE3               	comf	plusw1,f,c
 10150   012874  B0D8               	btfsc	status,0,c
 10151   012876  2AE3               	incf	plusw1,f,c
 10152   012878                     l3994:
 10153                           
 10154                           ;stkvar	_divisor @ sp[(-2)+-4]
 10155   012878  0EFA               	movlw	-6
 10156   01287A  CFE3 F02D          	movff	plusw1,btemp
 10157   01287E  0EFB               	movlw	-5
 10158   012880  50E3               	movf	plusw1,w,c
 10159   012882  102D               	iorwf	btemp^0,w,c
 10160   012884  B4D8               	btfsc	status,2,c
 10161   012886  EF47  F094         	goto	u1821
 10162   01288A  EF49  F094         	goto	u1820
 10163   01288E                     u1821:
 10164   01288E  EFA4  F094         	goto	l4012
 10165   012892                     u1820:
 10166   012892                     
 10167                           ;stkvar	_counter @ sp[(-2)+1]
 10168   012892  0EFF               	movlw	-1
 10169   012894  6AE3               	clrf	plusw1,c
 10170   012896  2AE3               	incf	plusw1,f,c
 10171   012898  EF5F  F094         	goto	l4002
 10172   01289C                     l3998:
 10173                           
 10174                           ;stkvar	_divisor @ sp[(-2)+-4]
 10175   01289C  0EFA               	movlw	-6
 10176   01289E  50E3               	movf	plusw1,w,c
 10177   0128A0  90D8               	bcf	status,0,c
 10178   0128A2  34E8               	rlcf	wreg,w,c
 10179   0128A4  6E2D               	movwf	btemp^0,c
 10180   0128A6  0EFA               	movlw	-6
 10181   0128A8  C02D  FFE3         	movff	btemp,plusw1
 10182   0128AC  0EFB               	movlw	-5
 10183   0128AE  50E3               	movf	plusw1,w,c
 10184   0128B0  34E8               	rlcf	wreg,w,c
 10185   0128B2  6E2D               	movwf	btemp^0,c
 10186   0128B4  0EFB               	movlw	-5
 10187   0128B6  C02D  FFE3         	movff	btemp,plusw1
 10188   0128BA                     
 10189                           ;stkvar	_counter @ sp[(-2)+1]
 10190   0128BA  0EFF               	movlw	-1
 10191   0128BC  2AE3               	incf	plusw1,f,c
 10192   0128BE                     l4002:
 10193                           
 10194                           ;stkvar	_divisor @ sp[(-2)+-4]
 10195   0128BE  0EFB               	movlw	-5
 10196   0128C0  AEE3               	btfss	plusw1,7,c
 10197   0128C2  EF65  F094         	goto	u1831
 10198   0128C6  EF67  F094         	goto	u1830
 10199   0128CA                     u1831:
 10200   0128CA  EF4E  F094         	goto	l3998
 10201   0128CE                     u1830:
 10202   0128CE                     l4004:
 10203                           
 10204                           ;stkvar	_divisor @ sp[(-2)+-4]
 10205   0128CE  0EFA               	movlw	-6
 10206   0128D0  CFE3 F037          	movff	plusw1,btemp+10
 10207   0128D4  0EFB               	movlw	-5
 10208   0128D6  CFE3 F038          	movff	plusw1,btemp+11
 10209                           
 10210                           ;stkvar	_dividend @ sp[(-2)+-2]
 10211   0128DA  0EFC               	movlw	-4
 10212   0128DC  CFE3 F035          	movff	plusw1,btemp+8
 10213   0128E0  0EFD               	movlw	-3
 10214   0128E2  CFE3 F036          	movff	plusw1,btemp+9
 10215   0128E6  5037               	movf	(btemp+10)^0,w,c
 10216   0128E8  5C35               	subwf	(btemp+8)^0,w,c
 10217   0128EA  5038               	movf	(btemp+11)^0,w,c
 10218   0128EC  5836               	subwfb	(btemp+9)^0,w,c
 10219   0128EE  A0D8               	btfss	status,0,c
 10220   0128F0  EF7C  F094         	goto	u1841
 10221   0128F4  EF7E  F094         	goto	u1840
 10222   0128F8                     u1841:
 10223   0128F8  EF90  F094         	goto	l4008
 10224   0128FC                     u1840:
 10225   0128FC                     
 10226                           ;stkvar	_divisor @ sp[(-2)+-4]
 10227                           ;stkvar	_dividend @ sp[(-2)+-2]
 10228   0128FC  0EFC               	movlw	-4
 10229   0128FE  50E3               	movf	plusw1,w,c
 10230   012900  6E2D               	movwf	btemp^0,c
 10231   012902  0EFA               	movlw	-6
 10232   012904  50E3               	movf	plusw1,w,c
 10233   012906  5E2D               	subwf	btemp^0,f,c
 10234   012908  0EFC               	movlw	-4
 10235   01290A  C02D  FFE3         	movff	btemp,plusw1
 10236   01290E  0EFD               	movlw	-3
 10237   012910  50E3               	movf	plusw1,w,c
 10238   012912  6E2D               	movwf	btemp^0,c
 10239   012914  0EFB               	movlw	-5
 10240   012916  50E3               	movf	plusw1,w,c
 10241   012918  5A2D               	subwfb	btemp^0,f,c
 10242   01291A  0EFD               	movlw	-3
 10243   01291C  C02D  FFE3         	movff	btemp,plusw1
 10244   012920                     l4008:
 10245                           
 10246                           ;stkvar	_divisor @ sp[(-2)+-4]
 10247   012920  90D8               	bcf	status,0,c
 10248   012922  0EFB               	movlw	-5
 10249   012924  32E3               	rrcf	plusw1,f,c
 10250   012926  0EFA               	movlw	-6
 10251   012928  32E3               	rrcf	plusw1,f,c
 10252   01292A                     
 10253                           ;stkvar	_counter @ sp[(-2)+1]
 10254   01292A  0EFF               	movlw	-1
 10255   01292C  50E3               	movf	plusw1,w,c
 10256   01292E  6E2D               	movwf	btemp^0,c
 10257   012930  0E01               	movlw	1
 10258   012932  5E2D               	subwf	btemp^0,f,c
 10259   012934  0EFF               	movlw	-1
 10260   012936  C02D  FFE3         	movff	btemp,plusw1
 10261   01293A  A4D8               	btfss	status,2,c
 10262   01293C  EFA2  F094         	goto	u1851
 10263   012940  EFA4  F094         	goto	u1850
 10264   012944                     u1851:
 10265   012944  EF67  F094         	goto	l4004
 10266   012948                     u1850:
 10267   012948                     l4012:
 10268                           
 10269                           ;stkvar	_sign @ sp[(-2)+0]
 10270   012948  0EFE               	movlw	-2
 10271   01294A  50E3               	movf	plusw1,w,c
 10272   01294C  B4D8               	btfsc	status,2,c
 10273   01294E  EFAB  F094         	goto	u1861
 10274   012952  EFAD  F094         	goto	u1860
 10275   012956                     u1861:
 10276   012956  EFB3  F094         	goto	l4016
 10277   01295A                     u1860:
 10278   01295A                     
 10279                           ;stkvar	_dividend @ sp[(-2)+-2]
 10280                           ;stkvar	_dividend @ sp[(-2)+-2]
 10281   01295A  0EFC               	movlw	-4
 10282   01295C  6CE3               	negf	plusw1,c
 10283   01295E  0EFD               	movlw	-3
 10284   012960  1EE3               	comf	plusw1,f,c
 10285   012962  B0D8               	btfsc	status,0,c
 10286   012964  2AE3               	incf	plusw1,f,c
 10287   012966                     l4016:
 10288                           
 10289                           ;stkvar	_dividend @ sp[(-2)+-2]
 10290   012966  0EFC               	movlw	-4
 10291   012968  CFE3 F02D          	movff	plusw1,btemp
 10292   01296C  0EFD               	movlw	-3
 10293   01296E  CFE3 F02E          	movff	plusw1,btemp+1
 10294   012972                     
 10295                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 10296   012972  0EFA               	movlw	250
 10297   012974  26E1               	addwf	fsr1l,f,c
 10298   012976  0EFF               	movlw	255
 10299   012978  22E2               	addwfc	fsr1h,f,c
 10300   01297A  0012               	return		;funcret
 10301   01297C                     __end_of___awmod:
 10302                           	callstack 0
 10303                           
 10304 ;; *************** function _LEAVECRITICAL *****************
 10305 ;; Defined at:
 10306 ;;		line 265 in file "xf/xf.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  inISR           1  [STACK] _Bool 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1  [STACK] void 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr1l, fsr1h, status,2
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;Total ram usage:        0 bytes
 10325 ;; Hardware stack levels used: 1
 10326 ;; Hardware stack levels required when called: 7
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_XF_pushEvent
 10331 ;;		_XF_popEvent
 10332 ;;		_XF_scheduleTimer
 10333 ;;		_XF_unscheduleTimer
 10334 ;; This function uses a reentrant model
 10335 ;;
 10336                           
 10337                           	psect	text31
 10338   014582                     __ptext31:
 10339                           	callstack 0
 10340   014582                     _LEAVECRITICAL:
 10341                           	callstack 10
 10342   014582                     
 10343                           ;xf/xf.c: 265: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 266: {;xf/xf.c: 267:     
      +                          if (inISR == 0)
 10344                           ;stkvar	_inISR @ sp[(0)+-1]
 10345   014582  0EFF               	movlw	-1
 10346   014584  50E3               	movf	plusw1,w,c
 10347   014586  A4D8               	btfss	status,2,c
 10348   014588  EFC8  F0A2         	goto	u1571
 10349   01458C  EFCA  F0A2         	goto	u1570
 10350   014590                     u1571:
 10351   014590  EFCB  F0A2         	goto	l1254
 10352   014594                     u1570:
 10353   014594                     
 10354                           ;xf/xf.c: 268:     {;xf/xf.c: 270:      (INTCONbits.GIE = 1);
 10355   014594  8EF2               	bsf	242,7,c	;volatile
 10356   014596                     l1254:
 10357                           
 10358                           ; _LEAVECRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 10359   014596  52E5               	movf	postdec1,f,c
 10360   014598  0012               	return		;funcret
 10361   01459A                     __end_of_LEAVECRITICAL:
 10362                           	callstack 0
 10363                           
 10364 ;; *************** function _ENTERCRITICAL *****************
 10365 ;; Defined at:
 10366 ;;		line 250 in file "xf/xf.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  inISR           1  [STACK] _Bool 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  1  [STACK] void 
 10373 ;; Registers used:
 10374 ;;		wreg, fsr1l, fsr1h, status,2
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;Total ram usage:        0 bytes
 10385 ;; Hardware stack levels used: 1
 10386 ;; Hardware stack levels required when called: 7
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_XF_pushEvent
 10391 ;;		_XF_popEvent
 10392 ;;		_XF_scheduleTimer
 10393 ;;		_XF_unscheduleTimer
 10394 ;; This function uses a reentrant model
 10395 ;;
 10396                           
 10397                           	psect	text32
 10398   01459A                     __ptext32:
 10399                           	callstack 0
 10400   01459A                     _ENTERCRITICAL:
 10401                           	callstack 10
 10402   01459A                     
 10403                           ;xf/xf.c: 250: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 251: {;xf/xf.c: 252:     
      +                          if (inISR == 0)
 10404                           ;stkvar	_inISR @ sp[(0)+-1]
 10405   01459A  0EFF               	movlw	-1
 10406   01459C  50E3               	movf	plusw1,w,c
 10407   01459E  A4D8               	btfss	status,2,c
 10408   0145A0  EFD4  F0A2         	goto	u1561
 10409   0145A4  EFD6  F0A2         	goto	u1560
 10410   0145A8                     u1561:
 10411   0145A8  EFD7  F0A2         	goto	l1250
 10412   0145AC                     u1560:
 10413   0145AC                     
 10414                           ;xf/xf.c: 253:     {;xf/xf.c: 255:       (INTCONbits.GIE = 0);
 10415   0145AC  9EF2               	bcf	242,7,c	;volatile
 10416   0145AE                     l1250:
 10417                           
 10418                           ; _ENTERCRITICAL: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1,
      +                           argsize = 1, vargsize = 0
 10419   0145AE  52E5               	movf	postdec1,f,c
 10420   0145B0  0012               	return		;funcret
 10421   0145B2                     __end_of_ENTERCRITICAL:
 10422                           	callstack 0
 10423                           
 10424 ;; *************** function _SYSTEM_Initialize *****************
 10425 ;; Defined at:
 10426 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;		None
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;		None
 10431 ;; Return value:  Size  Location     Type
 10432 ;;                  1  [STACK] void 
 10433 ;; Registers used:
 10434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 10435 ;; Tracked objects:
 10436 ;;		On entry : 0/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10444 ;;Total ram usage:        0 bytes
 10445 ;; Hardware stack levels used: 1
 10446 ;; Hardware stack levels required when called: 9
 10447 ;; This function calls:
 10448 ;;		_INTERRUPT_Initialize
 10449 ;;		_OSCILLATOR_Initialize
 10450 ;;		_PIN_MANAGER_Initialize
 10451 ;;		_SPI2_Initialize
 10452 ;;		_TMR0_Initialize
 10453 ;; This function is called by:
 10454 ;;		_main
 10455 ;; This function uses a reentrant model
 10456 ;;
 10457                           
 10458                           	psect	text33
 10459   0145B2                     __ptext33:
 10460                           	callstack 0
 10461   0145B2                     _SYSTEM_Initialize:
 10462                           	callstack 21
 10463   0145B2                     
 10464                           ;mcc_generated_files/mcc.c: 53:     INTERRUPT_Initialize();
 10465   0145B2  ECF6  F0A2         	call	_INTERRUPT_Initialize	;wreg free
 10466   0145B6                     
 10467                           ;mcc_generated_files/mcc.c: 54:     SPI2_Initialize();
 10468   0145B6  ECE4  F0A2         	call	_SPI2_Initialize	;wreg free
 10469                           
 10470                           ;mcc_generated_files/mcc.c: 55:     PIN_MANAGER_Initialize();
 10471   0145BA  EC41  F0A2         	call	_PIN_MANAGER_Initialize	;wreg free
 10472                           
 10473                           ;mcc_generated_files/mcc.c: 56:     OSCILLATOR_Initialize();
 10474   0145BE  ECEC  F0A2         	call	_OSCILLATOR_Initialize	;wreg free
 10475   0145C2                     
 10476                           ;mcc_generated_files/mcc.c: 57:     TMR0_Initialize();
 10477   0145C2  ECD5  F0A1         	call	_TMR0_Initialize	;wreg free
 10478   0145C6                     
 10479                           ; _SYSTEM_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 0, argsize = 0, vargsize = 0
 10480   0145C6  0012               	return		;funcret
 10481   0145C8                     __end_of_SYSTEM_Initialize:
 10482                           	callstack 0
 10483                           
 10484 ;; *************** function _TMR0_Initialize *****************
 10485 ;; Defined at:
 10486 ;;		line 67 in file "mcc_generated_files/tmr0.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;		None
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;		None
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  1  [STACK] void 
 10493 ;; Registers used:
 10494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;Total ram usage:        0 bytes
 10505 ;; Hardware stack levels used: 1
 10506 ;; Hardware stack levels required when called: 8
 10507 ;; This function calls:
 10508 ;;		_TMR0_SetInterruptHandler
 10509 ;; This function is called by:
 10510 ;;		_SYSTEM_Initialize
 10511 ;; This function uses a reentrant model
 10512 ;;
 10513                           
 10514                           	psect	text34
 10515   0143AA                     __ptext34:
 10516                           	callstack 0
 10517   0143AA                     _TMR0_Initialize:
 10518                           	callstack 21
 10519   0143AA                     
 10520                           ;mcc_generated_files/tmr0.c: 72:     T0CONbits.T08BIT = 0;
 10521   0143AA  9CD5               	bcf	213,6,c	;volatile
 10522   0143AC                     
 10523                           ;mcc_generated_files/tmr0.c: 75:     TMR0H = 0xFD;
 10524   0143AC  0EFD               	movlw	253
 10525   0143AE  6ED7               	movwf	215,c	;volatile
 10526                           
 10527                           ;mcc_generated_files/tmr0.c: 78:     TMR0L = 0x9D;
 10528   0143B0  0E9D               	movlw	157
 10529   0143B2  6ED6               	movwf	214,c	;volatile
 10530   0143B4                     
 10531                           ;mcc_generated_files/tmr0.c: 82:     timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
 10532   0143B4  50D6               	movf	214,w,c	;volatile
 10533   0143B6  CFD7 F02D          	movff	4055,btemp	;volatile
 10534   0143BA  6A2E               	clrf	(btemp+1)^0,c
 10535   0143BC  C02D  F02E         	movff	btemp,btemp+1
 10536   0143C0  6A2D               	clrf	btemp^0,c
 10537   0143C2  102D               	iorwf	btemp^0,w,c
 10538   0143C4  6E27               	movwf	_timer0ReloadVal^0,c	;volatile
 10539   0143C6  502E               	movf	(btemp+1)^0,w,c
 10540   0143C8  6E28               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
 10541   0143CA                     
 10542                           ;mcc_generated_files/tmr0.c: 85:     INTCONbits.TMR0IF = 0;
 10543   0143CA  94F2               	bcf	242,2,c	;volatile
 10544   0143CC                     
 10545                           ;mcc_generated_files/tmr0.c: 88:     INTCONbits.TMR0IE = 1;
 10546   0143CC  8AF2               	bsf	242,5,c	;volatile
 10547   0143CE                     
 10548                           ;mcc_generated_files/tmr0.c: 91:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
 10549   0143CE  0EF0               	movlw	low _TMR0_DefaultInterruptHandler
 10550   0143D0  6EE6               	movwf	postinc1,c
 10551   0143D2  0E45               	movlw	high _TMR0_DefaultInterruptHandler
 10552   0143D4  6EE6               	movwf	postinc1,c
 10553   0143D6  0E01               	movlw	low (_TMR0_DefaultInterruptHandler shr (0+16))
 10554   0143D8  6EE6               	movwf	postinc1,c
 10555   0143DA  EC95  F0A2         	call	_TMR0_SetInterruptHandler	;wreg free
 10556   0143DE                     
 10557                           ;mcc_generated_files/tmr0.c: 94:     T0CON = 0x97;
 10558   0143DE  0E97               	movlw	151
 10559   0143E0  6ED5               	movwf	213,c	;volatile
 10560   0143E2                     
 10561                           ; _TMR0_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 10562   0143E2  0012               	return		;funcret
 10563   0143E4                     __end_of_TMR0_Initialize:
 10564                           	callstack 0
 10565                           
 10566 ;; *************** function _TMR0_SetInterruptHandler *****************
 10567 ;; Defined at:
 10568 ;;		line 172 in file "mcc_generated_files/tmr0.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;  InterruptHan    3  [STACK] PTR FTN()void 
 10571 ;;		 -> XF_decrementAndQueueTimers(1), TMR0_DefaultInterruptHandler(1), 
 10572 ;; Auto vars:     Size  Location     Type
 10573 ;;		None
 10574 ;; Return value:  Size  Location     Type
 10575 ;;                  1  [STACK] void 
 10576 ;; Registers used:
 10577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h
 10578 ;; Tracked objects:
 10579 ;;		On entry : 0/0
 10580 ;;		On exit  : 0/0
 10581 ;;		Unchanged: 0/0
 10582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;Total ram usage:        0 bytes
 10588 ;; Hardware stack levels used: 1
 10589 ;; Hardware stack levels required when called: 7
 10590 ;; This function calls:
 10591 ;;		Nothing
 10592 ;; This function is called by:
 10593 ;;		_TMR0_Initialize
 10594 ;;		_main
 10595 ;; This function uses a reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text35
 10599   01452A                     __ptext35:
 10600                           	callstack 0
 10601   01452A                     _TMR0_SetInterruptHandler:
 10602                           	callstack 23
 10603   01452A                     
 10604                           ;mcc_generated_files/tmr0.c: 173:     TMR0_InterruptHandler = InterruptHandler;
 10605                           ;stkvar	_InterruptHandler @ sp[(0)+-3]
 10606   01452A  50E1               	movf	fsr1l,w,c
 10607   01452C  0FFD               	addlw	-3
 10608   01452E  6ED9               	movwf	fsr2l,c
 10609   014530  50E2               	movf	fsr1h,w,c
 10610   014532  6EDA               	movwf	fsr2h,c
 10611   014534  0EFF               	movlw	255
 10612   014536  22DA               	addwfc	fsr2h,f,c
 10613   014538  CFDE F05D          	movff	postinc2,_TMR0_InterruptHandler
 10614   01453C  CFDE F05E          	movff	postinc2,_TMR0_InterruptHandler+1
 10615   014540  CFDD F05F          	movff	postdec2,_TMR0_InterruptHandler+2
 10616   014544                     
 10617                           ; _TMR0_SetInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 p
      +                          arsize = 3, argsize = 3, vargsize = 0
 10618   014544  52E5               	movf	postdec1,f,c
 10619   014546  52E5               	movf	postdec1,f,c
 10620   014548  52E5               	movf	postdec1,f,c
 10621   01454A  0012               	return		;funcret
 10622   01454C                     __end_of_TMR0_SetInterruptHandler:
 10623                           	callstack 0
 10624                           
 10625 ;; *************** function _SPI2_Initialize *****************
 10626 ;; Defined at:
 10627 ;;		line 62 in file "mcc_generated_files/spi2.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;		None
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;		None
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  1  [STACK] void 
 10634 ;; Registers used:
 10635 ;;		wreg, status,2
 10636 ;; Tracked objects:
 10637 ;;		On entry : 0/0
 10638 ;;		On exit  : 0/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;Total ram usage:        0 bytes
 10646 ;; Hardware stack levels used: 1
 10647 ;; Hardware stack levels required when called: 7
 10648 ;; This function calls:
 10649 ;;		Nothing
 10650 ;; This function is called by:
 10651 ;;		_SYSTEM_Initialize
 10652 ;; This function uses a reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text36
 10656   0145C8                     __ptext36:
 10657                           	callstack 0
 10658   0145C8                     _SPI2_Initialize:
 10659                           	callstack 22
 10660   0145C8                     
 10661                           ;mcc_generated_files/spi2.c: 65:     SSP2STAT = 0x40;
 10662   0145C8  0E40               	movlw	64
 10663   0145CA  6E64               	movwf	100,c	;volatile
 10664                           
 10665                           ;mcc_generated_files/spi2.c: 66:     SSP2CON1 = 0x01;
 10666   0145CC  0E01               	movlw	1
 10667   0145CE  6E63               	movwf	99,c	;volatile
 10668   0145D0                     
 10669                           ;mcc_generated_files/spi2.c: 67:     SSP2ADD = 0x00;
 10670   0145D0  6A65               	clrf	101,c	;volatile
 10671   0145D2                     
 10672                           ;mcc_generated_files/spi2.c: 68:     TRISDbits.TRISD6 = 0;
 10673   0145D2  9C95               	bcf	149,6,c	;volatile
 10674   0145D4                     
 10675                           ;mcc_generated_files/spi2.c: 69:     SSP2CON1bits.SSPEN = 0;
 10676   0145D4  9A63               	bcf	99,5,c	;volatile
 10677   0145D6                     
 10678                           ; _SPI2_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          0, argsize = 0, vargsize = 0
 10679   0145D6  0012               	return		;funcret
 10680   0145D8                     __end_of_SPI2_Initialize:
 10681                           	callstack 0
 10682                           
 10683 ;; *************** function _PIN_MANAGER_Initialize *****************
 10684 ;; Defined at:
 10685 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;		None
 10688 ;; Auto vars:     Size  Location     Type
 10689 ;;		None
 10690 ;; Return value:  Size  Location     Type
 10691 ;;                  1  [STACK] void 
 10692 ;; Registers used:
 10693 ;;		wreg, status,2
 10694 ;; Tracked objects:
 10695 ;;		On entry : 0/0
 10696 ;;		On exit  : 0/0
 10697 ;;		Unchanged: 0/0
 10698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10703 ;;Total ram usage:        0 bytes
 10704 ;; Hardware stack levels used: 1
 10705 ;; Hardware stack levels required when called: 7
 10706 ;; This function calls:
 10707 ;;		Nothing
 10708 ;; This function is called by:
 10709 ;;		_SYSTEM_Initialize
 10710 ;; This function uses a reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text37
 10714   014482                     __ptext37:
 10715                           	callstack 0
 10716   014482                     _PIN_MANAGER_Initialize:
 10717                           	callstack 22
 10718   014482                     
 10719                           ;mcc_generated_files/pin_manager.c: 55:     LATE = 0x00;
 10720   014482  6A8D               	clrf	141,c	;volatile
 10721                           
 10722                           ;mcc_generated_files/pin_manager.c: 56:     LATJ = 0x00;
 10723   014484  6A91               	clrf	145,c	;volatile
 10724                           
 10725                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 10726   014486  6A8C               	clrf	140,c	;volatile
 10727                           
 10728                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 10729   014488  6A89               	clrf	137,c	;volatile
 10730                           
 10731                           ;mcc_generated_files/pin_manager.c: 59:     LATF = 0x00;
 10732   01448A  6A8E               	clrf	142,c	;volatile
 10733                           
 10734                           ;mcc_generated_files/pin_manager.c: 60:     LATB = 0x00;
 10735   01448C  6A8A               	clrf	138,c	;volatile
 10736                           
 10737                           ;mcc_generated_files/pin_manager.c: 61:     LATG = 0x00;
 10738   01448E  6A8F               	clrf	143,c	;volatile
 10739                           
 10740                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10741   014490  6A8B               	clrf	139,c	;volatile
 10742                           
 10743                           ;mcc_generated_files/pin_manager.c: 63:     LATH = 0x00;
 10744   014492  6A90               	clrf	144,c	;volatile
 10745                           
 10746                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0xFF;
 10747   014494  6896               	setf	150,c	;volatile
 10748                           
 10749                           ;mcc_generated_files/pin_manager.c: 69:     TRISF = 0xFF;
 10750   014496  6897               	setf	151,c	;volatile
 10751   014498                     
 10752                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x3F;
 10753   014498  0E3F               	movlw	63
 10754   01449A  6E92               	movwf	146,c	;volatile
 10755   01449C                     
 10756                           ;mcc_generated_files/pin_manager.c: 71:     TRISG = 0xFF;
 10757   01449C  6898               	setf	152,c	;volatile
 10758   01449E                     
 10759                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xFF;
 10760   01449E  6893               	setf	147,c	;volatile
 10761   0144A0                     
 10762                           ;mcc_generated_files/pin_manager.c: 73:     TRISH = 0xFF;
 10763   0144A0  6899               	setf	153,c	;volatile
 10764   0144A2                     
 10765                           ;mcc_generated_files/pin_manager.c: 74:     TRISC = 0xFF;
 10766   0144A2  6894               	setf	148,c	;volatile
 10767                           
 10768                           ;mcc_generated_files/pin_manager.c: 75:     TRISD = 0xAF;
 10769   0144A4  0EAF               	movlw	175
 10770   0144A6  6E95               	movwf	149,c	;volatile
 10771   0144A8                     
 10772                           ;mcc_generated_files/pin_manager.c: 76:     TRISJ = 0xFF;
 10773   0144A8  689A               	setf	154,c	;volatile
 10774                           
 10775                           ;mcc_generated_files/pin_manager.c: 81:     ADCON1bits.PCFG = 0x00;
 10776   0144AA  0EF0               	movlw	-16
 10777   0144AC  16C1               	andwf	193,f,c	;volatile
 10778   0144AE                     
 10779                           ; _PIN_MANAGER_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 0, argsize = 0, vargsize = 0
 10780   0144AE  0012               	return		;funcret
 10781   0144B0                     __end_of_PIN_MANAGER_Initialize:
 10782                           	callstack 0
 10783                           
 10784 ;; *************** function _OSCILLATOR_Initialize *****************
 10785 ;; Defined at:
 10786 ;;		line 60 in file "mcc_generated_files/mcc.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;		None
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;		None
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1  [STACK] void 
 10793 ;; Registers used:
 10794 ;;		wreg, status,2
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10804 ;;Total ram usage:        0 bytes
 10805 ;; Hardware stack levels used: 1
 10806 ;; Hardware stack levels required when called: 7
 10807 ;; This function calls:
 10808 ;;		Nothing
 10809 ;; This function is called by:
 10810 ;;		_SYSTEM_Initialize
 10811 ;; This function uses a reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text38
 10815   0145D8                     __ptext38:
 10816                           	callstack 0
 10817   0145D8                     _OSCILLATOR_Initialize:
 10818                           	callstack 22
 10819   0145D8                     
 10820                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x00;
 10821   0145D8  6AD3               	clrf	211,c	;volatile
 10822   0145DA                     
 10823                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x50;
 10824   0145DA  0E50               	movlw	80
 10825   0145DC  6E9B               	movwf	155,c	;volatile
 10826   0145DE                     
 10827                           ; _OSCILLATOR_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 0, argsize = 0, vargsize = 0
 10828   0145DE  0012               	return		;funcret
 10829   0145E0                     __end_of_OSCILLATOR_Initialize:
 10830                           	callstack 0
 10831                           
 10832 ;; *************** function _INTERRUPT_Initialize *****************
 10833 ;; Defined at:
 10834 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;		None
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1  [STACK] void 
 10841 ;; Registers used:
 10842 ;;		None
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10852 ;;Total ram usage:        0 bytes
 10853 ;; Hardware stack levels used: 1
 10854 ;; Hardware stack levels required when called: 7
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_SYSTEM_Initialize
 10859 ;; This function uses a reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text39
 10863   0145EC                     __ptext39:
 10864                           	callstack 0
 10865   0145EC                     _INTERRUPT_Initialize:
 10866                           	callstack 22
 10867   0145EC                     
 10868                           ;mcc_generated_files/interrupt_manager.c: 55:     RCONbits.IPEN = 0;
 10869   0145EC  9ED0               	bcf	208,7,c	;volatile
 10870   0145EE                     
 10871                           ; _INTERRUPT_Initialize: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 0, argsize = 0, vargsize = 0
 10872   0145EE  0012               	return		;funcret
 10873   0145F0                     __end_of_INTERRUPT_Initialize:
 10874                           	callstack 0
 10875                           
 10876 ;; *************** function _CanSetFilter *****************
 10877 ;; Defined at:
 10878 ;;		line 231 in file "can/can.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;  filter          1  [STACK] enum E5325
 10881 ;;  fObj            2  [STACK] PTR struct _CAN_FILTEROB
 10882 ;;		 -> fObj(6), 
 10883 ;;  mObj            2  [STACK] PTR struct _CAN_MASKOBJ_
 10884 ;;		 -> mObj(6), 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1  [STACK] void 
 10889 ;; Registers used:
 10890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;Total ram usage:        0 bytes
 10901 ;; Hardware stack levels used: 1
 10902 ;; Hardware stack levels required when called: 10
 10903 ;; This function calls:
 10904 ;;		_DRV_CANFDSPI_FilterDisable
 10905 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 10906 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 10907 ;;		_DRV_CANFDSPI_FilterToFifoLink
 10908 ;; This function is called by:
 10909 ;;		_main
 10910 ;; This function uses a reentrant model
 10911 ;;
 10912                           
 10913                           	psect	text40
 10914   014034                     __ptext40:
 10915                           	callstack 0
 10916   014034                     _CanSetFilter:
 10917                           	callstack 20
 10918   014034                     
 10919                           ;can/can.c: 231: void CanSetFilter(CAN_FILTER filter, CAN_FILTEROBJ_ID * fObj, CAN_MASKO
      +                          BJ_ID * mObj);can/can.c: 232: {;can/can.c: 234:     DRV_CANFDSPI_FilterDisable(filter);
 10920                           ;stkvar	_filter @ sp[(0)+-1]
 10921   014034  0EFF               	movlw	-1
 10922   014036  50E3               	movf	plusw1,w,c
 10923   014038  6EE6               	movwf	postinc1,c
 10924   01403A  EC0C  F09F         	call	_DRV_CANFDSPI_FilterDisable	;wreg free
 10925   01403E                     
 10926                           ;can/can.c: 235:     DRV_CANFDSPI_FilterObjectConfigure(filter,fObj);
 10927                           ;stkvar	_fObj @ sp[(0)+-3]
 10928   01403E  0EFD               	movlw	-3
 10929   014040  CFE3 FFE6          	movff	plusw1,postinc1
 10930   014044  CFE3 FFE6          	movff	plusw1,postinc1
 10931                           
 10932                           ;stkvar	_filter @ sp[(-2)+-1]
 10933   014048  0EFD               	movlw	-3
 10934   01404A  50E3               	movf	plusw1,w,c
 10935   01404C  6EE6               	movwf	postinc1,c
 10936   01404E  EC1A  F087         	call	_DRV_CANFDSPI_FilterObjectConfigure	;wreg free
 10937   014052                     
 10938                           ;can/can.c: 237:     DRV_CANFDSPI_FilterMaskConfigure(filter,mObj,fObj->EXIDE);
 10939                           ;stkvar	_fObj @ sp[(0)+-3]
 10940   014052  0EFD               	movlw	-3
 10941   014054  CFE3 F037          	movff	plusw1,btemp+10
 10942   014058  0EFE               	movlw	-2
 10943   01405A  CFE3 F038          	movff	plusw1,btemp+11
 10944   01405E  0E05               	movlw	5
 10945   014060  2437               	addwf	(btemp+10)^0,w,c
 10946   014062  6ED9               	movwf	fsr2l,c
 10947   014064  0E00               	movlw	0
 10948   014066  2038               	addwfc	(btemp+11)^0,w,c
 10949   014068  6EDA               	movwf	fsr2h,c
 10950   01406A  50DF               	movf	indf2,w,c
 10951   01406C  6EE6               	movwf	postinc1,c
 10952                           
 10953                           ;stkvar	_mObj @ sp[(-1)+-5]
 10954   01406E  0EFA               	movlw	-6
 10955   014070  CFE3 FFE6          	movff	plusw1,postinc1
 10956   014074  CFE3 FFE6          	movff	plusw1,postinc1
 10957                           
 10958                           ;stkvar	_filter @ sp[(-3)+-1]
 10959   014078  0EFC               	movlw	-4
 10960   01407A  50E3               	movf	plusw1,w,c
 10961   01407C  6EE6               	movwf	postinc1,c
 10962   01407E  ECBF  F088         	call	_DRV_CANFDSPI_FilterMaskConfigure	;wreg free
 10963   014082                     
 10964                           ;can/can.c: 239:     DRV_CANFDSPI_FilterToFifoLink(filter,CAN_FIFO_CH2,1);
 10965   014082  0E01               	movlw	1
 10966   014084  6EE6               	movwf	postinc1,c
 10967   014086  0E02               	movlw	2
 10968   014088  6EE6               	movwf	postinc1,c
 10969                           
 10970                           ;stkvar	_filter @ sp[(-2)+-1]
 10971   01408A  0EFD               	movlw	-3
 10972   01408C  50E3               	movf	plusw1,w,c
 10973   01408E  6EE6               	movwf	postinc1,c
 10974   014090  ECC1  F09E         	call	_DRV_CANFDSPI_FilterToFifoLink	;wreg free
 10975   014094                     
 10976                           ; _CanSetFilter: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 10977   014094  0EFB               	movlw	251
 10978   014096  26E1               	addwf	fsr1l,f,c
 10979   014098  0EFF               	movlw	255
 10980   01409A  22E2               	addwfc	fsr1h,f,c
 10981   01409C  0012               	return		;funcret
 10982   01409E                     __end_of_CanSetFilter:
 10983                           	callstack 0
 10984                           
 10985 ;; *************** function _DRV_CANFDSPI_FilterToFifoLink *****************
 10986 ;; Defined at:
 10987 ;;		line 1072 in file "can/can.c"
 10988 ;; Parameters:    Size  Location     Type
 10989 ;;  filter          1  [STACK] enum E5325
 10990 ;;  channel         1  [STACK] enum E5290
 10991 ;;  enable          1  [STACK] _Bool 
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;  a               2  [STACK] unsigned short 
 10994 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 10995 ;;  spiTransferE    1    0        char 
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1  [STACK] char 
 10998 ;; Registers used:
 10999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used: 1
 11011 ;; Hardware stack levels required when called: 9
 11012 ;; This function calls:
 11013 ;;		_DRV_CANFDSPI_WriteByte
 11014 ;; This function is called by:
 11015 ;;		_CanSetFilter
 11016 ;; This function uses a reentrant model
 11017 ;;
 11018                           
 11019                           	psect	text41
 11020   013D82                     __ptext41:
 11021                           	callstack 0
 11022   013D82                     _DRV_CANFDSPI_FilterToFifoLink:
 11023                           	callstack 0
 11024                           
 11025                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 11026   013D82  52E6               	movf	postinc1,f,c
 11027   013D84  52E6               	movf	postinc1,f,c
 11028   013D86  52E6               	movf	postinc1,f,c
 11029   013D88                     
 11030                           ;can/can.c: 1080:     if (enable) {
 11031                           ;stkvar	_enable @ sp[(-3)+-3]
 11032   013D88  0EFA               	movlw	-6
 11033   013D8A  50E3               	movf	plusw1,w,c
 11034   013D8C  B4D8               	btfsc	status,2,c
 11035   013D8E  EFCB  F09E         	goto	u2571
 11036   013D92  EFCD  F09E         	goto	u2570
 11037   013D96                     u2571:
 11038   013D96  EFD7  F09E         	goto	l4660
 11039   013D9A                     u2570:
 11040   013D9A                     
 11041                           ;can/can.c: 1081:         fCtrl.bF.Enable = 1;
 11042                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11043   013D9A  50E1               	movf	fsr1l,w,c
 11044   013D9C  0FFF               	addlw	-1
 11045   013D9E  6ED9               	movwf	fsr2l,c
 11046   013DA0  50E2               	movf	fsr1h,w,c
 11047   013DA2  6EDA               	movwf	fsr2h,c
 11048   013DA4  0EFF               	movlw	255
 11049   013DA6  22DA               	addwfc	fsr2h,f,c
 11050   013DA8  8EDF               	bsf	indf2,7,c
 11051                           
 11052                           ;can/can.c: 1082:     } else {
 11053   013DAA  EFDF  F09E         	goto	l4662
 11054   013DAE                     l4660:
 11055                           
 11056                           ;can/can.c: 1083:         fCtrl.bF.Enable = 0;
 11057                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11058   013DAE  50E1               	movf	fsr1l,w,c
 11059   013DB0  0FFF               	addlw	-1
 11060   013DB2  6ED9               	movwf	fsr2l,c
 11061   013DB4  50E2               	movf	fsr1h,w,c
 11062   013DB6  6EDA               	movwf	fsr2h,c
 11063   013DB8  0EFF               	movlw	255
 11064   013DBA  22DA               	addwfc	fsr2h,f,c
 11065   013DBC  9EDF               	bcf	indf2,7,c
 11066   013DBE                     l4662:
 11067                           
 11068                           ;can/can.c: 1087:     fCtrl.bF.BufferPointer = channel;
 11069                           ;stkvar	_channel @ sp[(-3)+-2]
 11070   013DBE  0EFB               	movlw	-5
 11071   013DC0  CFE3 F038          	movff	plusw1,btemp+11
 11072                           
 11073                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11074   013DC4  50E1               	movf	fsr1l,w,c
 11075   013DC6  0FFF               	addlw	-1
 11076   013DC8  6ED9               	movwf	fsr2l,c
 11077   013DCA  50E2               	movf	fsr1h,w,c
 11078   013DCC  6EDA               	movwf	fsr2h,c
 11079   013DCE  0EFF               	movlw	255
 11080   013DD0  22DA               	addwfc	fsr2h,f,c
 11081   013DD2  50DF               	movf	223,w,c
 11082   013DD4  1838               	xorwf	(btemp+11)^0,w,c
 11083   013DD6  0BE0               	andlw	-32
 11084   013DD8  1838               	xorwf	(btemp+11)^0,w,c
 11085   013DDA  6EDF               	movwf	223,c
 11086   013DDC                     
 11087                           ;can/can.c: 1088:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 11088                           ;stkvar	_filter @ sp[(-3)+-1]
 11089   013DDC  0EFC               	movlw	-4
 11090   013DDE  CFE3 F038          	movff	plusw1,btemp+11
 11091   013DE2  0ED0               	movlw	208
 11092   013DE4  2438               	addwf	(btemp+11)^0,w,c
 11093   013DE6  6E35               	movwf	(btemp+8)^0,c
 11094   013DE8  6A36               	clrf	(btemp+9)^0,c
 11095   013DEA  0E01               	movlw	1
 11096   013DEC  2236               	addwfc	(btemp+9)^0,f,c
 11097                           
 11098                           ;stkvar	_a @ sp[(-3)+0]
 11099   013DEE  0EFD               	movlw	-3
 11100   013DF0  C035  FFE3         	movff	btemp+8,plusw1
 11101   013DF4  0EFE               	movlw	-2
 11102   013DF6  C036  FFE3         	movff	btemp+9,plusw1
 11103   013DFA                     
 11104                           ;stkvar	_fCtrl @ sp[(-3)+2]
 11105   013DFA  0EFF               	movlw	-1
 11106   013DFC  50E3               	movf	plusw1,w,c
 11107   013DFE  6EE6               	movwf	postinc1,c
 11108                           
 11109                           ;stkvar	_a @ sp[(-4)+0]
 11110   013E00  0EFC               	movlw	-4
 11111   013E02  CFE3 FFE6          	movff	plusw1,postinc1
 11112   013E06  CFE3 FFE6          	movff	plusw1,postinc1
 11113   013E0A  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 11114   013E0E                     
 11115                           ; _DRV_CANFDSPI_FilterToFifoLink: autosize = 3, savesize = 0, parsavesize = 0, tempsize 
      +                          = 0 parsize = 3, argsize = 3, vargsize = 0
 11116   013E0E  0EFA               	movlw	250
 11117   013E10  26E1               	addwf	fsr1l,f,c
 11118   013E12  0EFF               	movlw	255
 11119   013E14  22E2               	addwfc	fsr1h,f,c
 11120   013E16  0012               	return		;funcret
 11121   013E18                     __end_of_DRV_CANFDSPI_FilterToFifoLink:
 11122                           	callstack 0
 11123                           
 11124 ;; *************** function _DRV_CANFDSPI_FilterObjectConfigure *****************
 11125 ;; Defined at:
 11126 ;;		line 1001 in file "can/can.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  filter          1  [STACK] enum E5325
 11129 ;;  id              2  [STACK] PTR struct _CAN_FILTEROB
 11130 ;;		 -> fObj(6), 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  temp32          4  [STACK] unsigned long 
 11133 ;;  fObj            6  [STACK] struct _REG_CiFLTOBJ
 11134 ;;  a               2  [STACK] unsigned short 
 11135 ;;  spiTransferE    1    0        char 
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1  [STACK] char 
 11138 ;; Registers used:
 11139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;Total ram usage:        0 bytes
 11150 ;; Hardware stack levels used: 1
 11151 ;; Hardware stack levels required when called: 9
 11152 ;; This function calls:
 11153 ;;		_DRV_CANFDSPI_WriteWord
 11154 ;; This function is called by:
 11155 ;;		_CanSetFilter
 11156 ;; This function uses a reentrant model
 11157 ;;
 11158                           
 11159                           	psect	text42
 11160   010E34                     __ptext42:
 11161                           	callstack 0
 11162   010E34                     _DRV_CANFDSPI_FilterObjectConfigure:
 11163                           	callstack 0
 11164                           
 11165                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11166   010E34  0E0C               	movlw	12
 11167   010E36  26E1               	addwf	fsr1l,f,c
 11168   010E38  0E00               	movlw	0
 11169   010E3A  22E2               	addwfc	fsr1h,f,c
 11170   010E3C                     
 11171                           ;can/can.c: 1009:     fObj.word = 0;
 11172                           ;stkvar	_fObj @ sp[(-12)+4]
 11173   010E3C  0EF8               	movlw	-8
 11174   010E3E  6AE3               	clrf	plusw1,c
 11175   010E40  0EF9               	movlw	-7
 11176   010E42  6AE3               	clrf	plusw1,c
 11177   010E44  0EFA               	movlw	-6
 11178   010E46  6AE3               	clrf	plusw1,c
 11179   010E48  0EFB               	movlw	-5
 11180   010E4A  6AE3               	clrf	plusw1,c
 11181   010E4C                     
 11182                           ;can/can.c: 1011:     if(id->EXIDE == 0)
 11183                           ;stkvar	_id @ sp[(-12)+-3]
 11184   010E4C  0EF1               	movlw	-15
 11185   010E4E  CFE3 F037          	movff	plusw1,btemp+10
 11186   010E52  0EF2               	movlw	-14
 11187   010E54  CFE3 F038          	movff	plusw1,btemp+11
 11188   010E58  0E05               	movlw	5
 11189   010E5A  2437               	addwf	(btemp+10)^0,w,c
 11190   010E5C  6ED9               	movwf	fsr2l,c
 11191   010E5E  0E00               	movlw	0
 11192   010E60  2038               	addwfc	(btemp+11)^0,w,c
 11193   010E62  6EDA               	movwf	fsr2h,c
 11194   010E64  50DF               	movf	indf2,w,c
 11195   010E66  A4D8               	btfss	status,2,c
 11196   010E68  EF38  F087         	goto	u2391
 11197   010E6C  EF3A  F087         	goto	u2390
 11198   010E70                     u2391:
 11199   010E70  EFD2  F087         	goto	l4606
 11200   010E74                     u2390:
 11201   010E74                     
 11202                           ;can/can.c: 1012:     {;can/can.c: 1013:       fObj.byte[0] = (uint8_t)id->ID;
 11203                           ;stkvar	_id @ sp[(-12)+-3]
 11204   010E74  0EF1               	movlw	-15
 11205   010E76  CFE3 FFD9          	movff	plusw1,fsr2l
 11206   010E7A  0EF2               	movlw	-14
 11207   010E7C  CFE3 FFDA          	movff	plusw1,fsr2h
 11208   010E80  50DF               	movf	indf2,w,c
 11209   010E82  6E38               	movwf	(btemp+11)^0,c
 11210                           
 11211                           ;stkvar	_fObj @ sp[(-12)+4]
 11212   010E84  0EF8               	movlw	-8
 11213   010E86  C038  FFE3         	movff	btemp+11,plusw1
 11214   010E8A                     
 11215                           ;can/can.c: 1014:       fObj.byte[1] = (uint8_t)(id->ID >> 8);
 11216                           ;stkvar	_fObj @ sp[(-12)+4]
 11217   010E8A  0EF9               	movlw	249
 11218   010E8C  24E1               	addwf	fsr1l,w,c
 11219   010E8E  6ED9               	movwf	fsr2l,c
 11220   010E90  0EFF               	movlw	255
 11221   010E92  20E2               	addwfc	fsr1h,w,c
 11222   010E94  6EDA               	movwf	fsr2h,c
 11223                           
 11224                           ;stkvar	_id @ sp[(-12)+-3]
 11225   010E96  0EF1               	movlw	-15
 11226   010E98  CFE3 FFE9          	movff	plusw1,fsr0l
 11227   010E9C  0EF2               	movlw	-14
 11228   010E9E  CFE3 FFEA          	movff	plusw1,fsr0h
 11229   010EA2  CFEE F035          	movff	postinc0,btemp+8
 11230   010EA6  CFEE F036          	movff	postinc0,btemp+9
 11231   010EAA  CFEE F037          	movff	postinc0,btemp+10
 11232   010EAE  CFEE F038          	movff	postinc0,btemp+11
 11233   010EB2  C036  F035         	movff	btemp+9,btemp+8
 11234   010EB6  C037  F036         	movff	btemp+10,btemp+9
 11235   010EBA  C038  F037         	movff	btemp+11,btemp+10
 11236   010EBE  6A38               	clrf	(btemp+11)^0,c
 11237   010EC0  5035               	movf	(btemp+8)^0,w,c
 11238   010EC2  6EDF               	movwf	indf2,c
 11239   010EC4                     
 11240                           ;can/can.c: 1015:       fObj.byte[2] = (uint8_t)(id->ID >> 16);
 11241                           ;stkvar	_fObj @ sp[(-12)+4]
 11242   010EC4  0EFA               	movlw	250
 11243   010EC6  24E1               	addwf	fsr1l,w,c
 11244   010EC8  6ED9               	movwf	fsr2l,c
 11245   010ECA  0EFF               	movlw	255
 11246   010ECC  20E2               	addwfc	fsr1h,w,c
 11247   010ECE  6EDA               	movwf	fsr2h,c
 11248                           
 11249                           ;stkvar	_id @ sp[(-12)+-3]
 11250   010ED0  0EF1               	movlw	-15
 11251   010ED2  CFE3 FFE9          	movff	plusw1,fsr0l
 11252   010ED6  0EF2               	movlw	-14
 11253   010ED8  CFE3 FFEA          	movff	plusw1,fsr0h
 11254   010EDC  CFEE F035          	movff	postinc0,btemp+8
 11255   010EE0  CFEE F036          	movff	postinc0,btemp+9
 11256   010EE4  CFEE F037          	movff	postinc0,btemp+10
 11257   010EE8  CFEE F038          	movff	postinc0,btemp+11
 11258   010EEC  0E11               	movlw	17
 11259   010EEE  EF7E  F087         	goto	u2400
 11260   010EF2                     u2405:
 11261   010EF2  90D8               	bcf	status,0,c
 11262   010EF4  3238               	rrcf	(btemp+11)^0,f,c
 11263   010EF6  3237               	rrcf	(btemp+10)^0,f,c
 11264   010EF8  3236               	rrcf	(btemp+9)^0,f,c
 11265   010EFA  3235               	rrcf	(btemp+8)^0,f,c
 11266   010EFC                     u2400:
 11267   010EFC  2EE8               	decfsz	wreg,f,c
 11268   010EFE  EF79  F087         	goto	u2405
 11269   010F02  5035               	movf	(btemp+8)^0,w,c
 11270   010F04  6EDF               	movwf	indf2,c
 11271   010F06                     
 11272                           ;can/can.c: 1016:       fObj.byte[3] = (uint8_t)(id->ID >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 11273                           ;stkvar	_fObj @ sp[(-12)+4]
 11274   010F06  0EFB               	movlw	251
 11275   010F08  24E1               	addwf	fsr1l,w,c
 11276   010F0A  6ED9               	movwf	fsr2l,c
 11277   010F0C  0EFF               	movlw	255
 11278   010F0E  20E2               	addwfc	fsr1h,w,c
 11279   010F10  6EDA               	movwf	fsr2h,c
 11280                           
 11281                           ;stkvar	_id @ sp[(-12)+-3]
 11282   010F12  0EF1               	movlw	-15
 11283   010F14  CFE3 F037          	movff	plusw1,btemp+10
 11284   010F18  0EF2               	movlw	-14
 11285   010F1A  CFE3 F038          	movff	plusw1,btemp+11
 11286   010F1E  0E05               	movlw	5
 11287   010F20  2437               	addwf	(btemp+10)^0,w,c
 11288   010F22  6EE9               	movwf	fsr0l,c
 11289   010F24  0E00               	movlw	0
 11290   010F26  2038               	addwfc	(btemp+11)^0,w,c
 11291   010F28  6EEA               	movwf	fsr0h,c
 11292   010F2A  50EF               	movf	indf0,w,c
 11293   010F2C  6E38               	movwf	(btemp+11)^0,c
 11294   010F2E  0E06               	movlw	6
 11295   010F30  6E2D               	movwf	btemp^0,c
 11296   010F32                     u2415:
 11297   010F32  90D8               	bcf	status,0,c
 11298   010F34  3638               	rlcf	(btemp+11)^0,f,c
 11299   010F36  2E2D               	decfsz	btemp^0,f,c
 11300   010F38  EF99  F087         	goto	u2415
 11301                           
 11302                           ;stkvar	_id @ sp[(-12)+-3]
 11303   010F3C  0EF1               	movlw	-15
 11304   010F3E  CFE3 F035          	movff	plusw1,btemp+8
 11305   010F42  0EF2               	movlw	-14
 11306   010F44  CFE3 F036          	movff	plusw1,btemp+9
 11307   010F48  0E04               	movlw	4
 11308   010F4A  2435               	addwf	(btemp+8)^0,w,c
 11309   010F4C  6EE9               	movwf	fsr0l,c
 11310   010F4E  0E00               	movlw	0
 11311   010F50  2036               	addwfc	(btemp+9)^0,w,c
 11312   010F52  6EEA               	movwf	fsr0h,c
 11313   010F54  50EF               	movf	indf0,w,c
 11314   010F56  6E37               	movwf	(btemp+10)^0,c
 11315   010F58  0E05               	movlw	5
 11316   010F5A  6E2D               	movwf	btemp^0,c
 11317   010F5C                     u2425:
 11318   010F5C  90D8               	bcf	status,0,c
 11319   010F5E  3637               	rlcf	(btemp+10)^0,f,c
 11320   010F60  2E2D               	decfsz	btemp^0,f,c
 11321   010F62  EFAE  F087         	goto	u2425
 11322                           
 11323                           ;stkvar	_id @ sp[(-12)+-3]
 11324   010F66  0EF1               	movlw	-15
 11325   010F68  CFE3 FFE9          	movff	plusw1,fsr0l
 11326   010F6C  0EF2               	movlw	-14
 11327   010F6E  CFE3 FFEA          	movff	plusw1,fsr0h
 11328   010F72  CFEE F031          	movff	postinc0,btemp+4
 11329   010F76  CFEE F032          	movff	postinc0,btemp+5
 11330   010F7A  CFEE F033          	movff	postinc0,btemp+6
 11331   010F7E  CFEE F034          	movff	postinc0,btemp+7
 11332   010F82  0E19               	movlw	25
 11333   010F84  EFC9  F087         	goto	u2430
 11334   010F88                     u2435:
 11335   010F88  90D8               	bcf	status,0,c
 11336   010F8A  3234               	rrcf	(btemp+7)^0,f,c
 11337   010F8C  3233               	rrcf	(btemp+6)^0,f,c
 11338   010F8E  3232               	rrcf	(btemp+5)^0,f,c
 11339   010F90  3231               	rrcf	(btemp+4)^0,f,c
 11340   010F92                     u2430:
 11341   010F92  2EE8               	decfsz	wreg,f,c
 11342   010F94  EFC4  F087         	goto	u2435
 11343   010F98  5031               	movf	(btemp+4)^0,w,c
 11344   010F9A  1037               	iorwf	(btemp+10)^0,w,c
 11345   010F9C  1038               	iorwf	(btemp+11)^0,w,c
 11346   010F9E  6EDF               	movwf	indf2,c
 11347                           
 11348                           ;can/can.c: 1017:     }
 11349   010FA0  EF97  F088         	goto	l4618
 11350   010FA4                     l4606:
 11351                           
 11352                           ;can/can.c: 1019:     {;can/can.c: 1020:       uint32_t temp32 = ((id->ID & 0x0003FFFF) 
      +                          << 11) |
 11353                           ;stkvar	_id @ sp[(-12)+-3]
 11354   010FA4  0EF1               	movlw	-15
 11355   010FA6  CFE3 FFD9          	movff	plusw1,fsr2l
 11356   010FAA  0EF2               	movlw	-14
 11357   010FAC  CFE3 FFDA          	movff	plusw1,fsr2h
 11358   010FB0  CFDE F035          	movff	postinc2,btemp+8
 11359   010FB4  CFDE F036          	movff	postinc2,btemp+9
 11360   010FB8  CFDE F037          	movff	postinc2,btemp+10
 11361   010FBC  CFDE F038          	movff	postinc2,btemp+11
 11362   010FC0  0E13               	movlw	19
 11363   010FC2  EFE8  F087         	goto	u2440
 11364   010FC6                     u2445:
 11365   010FC6  90D8               	bcf	status,0,c
 11366   010FC8  3238               	rrcf	(btemp+11)^0,f,c
 11367   010FCA  3237               	rrcf	(btemp+10)^0,f,c
 11368   010FCC  3236               	rrcf	(btemp+9)^0,f,c
 11369   010FCE  3235               	rrcf	(btemp+8)^0,f,c
 11370   010FD0                     u2440:
 11371   010FD0  2EE8               	decfsz	wreg,f,c
 11372   010FD2  EFE3  F087         	goto	u2445
 11373   010FD6  0EFF               	movlw	255
 11374   010FD8  1435               	andwf	(btemp+8)^0,w,c
 11375   010FDA  6E31               	movwf	(btemp+4)^0,c
 11376   010FDC  0E07               	movlw	7
 11377   010FDE  1436               	andwf	(btemp+9)^0,w,c
 11378   010FE0  6E32               	movwf	(btemp+5)^0,c
 11379   010FE2  0E00               	movlw	0
 11380   010FE4  1437               	andwf	(btemp+10)^0,w,c
 11381   010FE6  6E33               	movwf	(btemp+6)^0,c
 11382   010FE8  0E00               	movlw	0
 11383   010FEA  1438               	andwf	(btemp+11)^0,w,c
 11384   010FEC  6E34               	movwf	(btemp+7)^0,c
 11385                           
 11386                           ;stkvar	_id @ sp[(-12)+-3]
 11387   010FEE  0EF1               	movlw	-15
 11388   010FF0  CFE3 FFD9          	movff	plusw1,fsr2l
 11389   010FF4  0EF2               	movlw	-14
 11390   010FF6  CFE3 FFDA          	movff	plusw1,fsr2h
 11391   010FFA  0EFF               	movlw	255
 11392   010FFC  14DE               	andwf	postinc2,w,c
 11393   010FFE  6E35               	movwf	(btemp+8)^0,c
 11394   011000  0EFF               	movlw	255
 11395   011002  14DE               	andwf	postinc2,w,c
 11396   011004  6E36               	movwf	(btemp+9)^0,c
 11397   011006  0E03               	movlw	3
 11398   011008  14DE               	andwf	postinc2,w,c
 11399   01100A  6E37               	movwf	(btemp+10)^0,c
 11400   01100C  0E00               	movlw	0
 11401   01100E  14DE               	andwf	postinc2,w,c
 11402   011010  6E38               	movwf	(btemp+11)^0,c
 11403   011012  0E0B               	movlw	11
 11404   011014                     u2455:
 11405   011014  90D8               	bcf	status,0,c
 11406   011016  3635               	rlcf	(btemp+8)^0,f,c
 11407   011018  3636               	rlcf	(btemp+9)^0,f,c
 11408   01101A  3637               	rlcf	(btemp+10)^0,f,c
 11409   01101C  3638               	rlcf	(btemp+11)^0,f,c
 11410   01101E  2EE8               	decfsz	wreg,f,c
 11411   011020  EF0A  F088         	goto	u2455
 11412   011024  5031               	movf	(btemp+4)^0,w,c
 11413   011026  1035               	iorwf	(btemp+8)^0,w,c
 11414   011028  6E2D               	movwf	btemp^0,c
 11415   01102A  5032               	movf	(btemp+5)^0,w,c
 11416   01102C  1036               	iorwf	(btemp+9)^0,w,c
 11417   01102E  6E2E               	movwf	(btemp+1)^0,c
 11418   011030  5033               	movf	(btemp+6)^0,w,c
 11419   011032  1037               	iorwf	(btemp+10)^0,w,c
 11420   011034  6E2F               	movwf	(btemp+2)^0,c
 11421   011036  5034               	movf	(btemp+7)^0,w,c
 11422   011038  1038               	iorwf	(btemp+11)^0,w,c
 11423   01103A  6E30               	movwf	(btemp+3)^0,c
 11424                           
 11425                           ;stkvar	_temp32 @ sp[(-12)+0]
 11426   01103C  0EF4               	movlw	-12
 11427   01103E  C02D  FFE3         	movff	btemp,plusw1
 11428   011042  0EF5               	movlw	-11
 11429   011044  C02E  FFE3         	movff	btemp+1,plusw1
 11430   011048  0EF6               	movlw	-10
 11431   01104A  C02F  FFE3         	movff	btemp+2,plusw1
 11432   01104E  0EF7               	movlw	-9
 11433   011050  C030  FFE3         	movff	btemp+3,plusw1
 11434   011054                     
 11435                           ;can/can.c: 1022:       temp32 = temp32 & 0x1FFFFFFF;
 11436                           ;stkvar	_temp32 @ sp[(-12)+0]
 11437   011054  50E1               	movf	fsr1l,w,c
 11438   011056  0FF4               	addlw	-12
 11439   011058  6ED9               	movwf	fsr2l,c
 11440   01105A  50E2               	movf	fsr1h,w,c
 11441   01105C  6EDA               	movwf	fsr2h,c
 11442   01105E  0EFF               	movlw	255
 11443   011060  22DA               	addwfc	fsr2h,f,c
 11444   011062  0EFF               	movlw	255
 11445   011064  16DE               	andwf	postinc2,f,c
 11446   011066  0EFF               	movlw	255
 11447   011068  16DE               	andwf	postinc2,f,c
 11448   01106A  0EFF               	movlw	255
 11449   01106C  16DE               	andwf	postinc2,f,c
 11450   01106E  0E1F               	movlw	31
 11451   011070  16DE               	andwf	postinc2,f,c
 11452   011072                     
 11453                           ;can/can.c: 1023:       fObj.byte[0] = (uint8_t)temp32;
 11454                           ;stkvar	_temp32 @ sp[(-12)+0]
 11455                           ;stkvar	_fObj @ sp[(-12)+4]
 11456   011072  0EF4               	movlw	-12
 11457   011074  CFE3 F02D          	movff	plusw1,btemp
 11458   011078  0EF8               	movlw	-8
 11459   01107A  C02D  FFE3         	movff	btemp,plusw1
 11460   01107E                     
 11461                           ;can/can.c: 1024:       fObj.byte[1] = (uint8_t)(temp32 >> 8);
 11462                           ;stkvar	_temp32 @ sp[(-12)+0]
 11463   01107E  0EF5               	movlw	245
 11464   011080  24E1               	addwf	fsr1l,w,c
 11465   011082  6ED9               	movwf	fsr2l,c
 11466   011084  0EFF               	movlw	255
 11467   011086  20E2               	addwfc	fsr1h,w,c
 11468   011088  6EDA               	movwf	fsr2h,c
 11469                           
 11470                           ;stkvar	_fObj @ sp[(-12)+4]
 11471   01108A  0EF9               	movlw	249
 11472   01108C  24E1               	addwf	fsr1l,w,c
 11473   01108E  6EE9               	movwf	fsr0l,c
 11474   011090  0EFF               	movlw	255
 11475   011092  20E2               	addwfc	fsr1h,w,c
 11476   011094  6EEA               	movwf	fsr0h,c
 11477   011096  CFDF FFEF          	movff	indf2,indf0
 11478   01109A                     
 11479                           ;can/can.c: 1025:       fObj.byte[2] = (uint8_t)(temp32 >> 16);
 11480                           ;stkvar	_temp32 @ sp[(-12)+0]
 11481   01109A  0EF6               	movlw	246
 11482   01109C  24E1               	addwf	fsr1l,w,c
 11483   01109E  6ED9               	movwf	fsr2l,c
 11484   0110A0  0EFF               	movlw	255
 11485   0110A2  20E2               	addwfc	fsr1h,w,c
 11486   0110A4  6EDA               	movwf	fsr2h,c
 11487                           
 11488                           ;stkvar	_fObj @ sp[(-12)+4]
 11489   0110A6  0EFA               	movlw	250
 11490   0110A8  24E1               	addwf	fsr1l,w,c
 11491   0110AA  6EE9               	movwf	fsr0l,c
 11492   0110AC  0EFF               	movlw	255
 11493   0110AE  20E2               	addwfc	fsr1h,w,c
 11494   0110B0  6EEA               	movwf	fsr0h,c
 11495   0110B2  CFDF FFEF          	movff	indf2,indf0
 11496   0110B6                     
 11497                           ;can/can.c: 1026:       fObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(id->SID11 << 
      +                          5) | (uint8_t)(id->EXIDE << 6);
 11498                           ;stkvar	_fObj @ sp[(-12)+4]
 11499   0110B6  0EFB               	movlw	251
 11500   0110B8  24E1               	addwf	fsr1l,w,c
 11501   0110BA  6ED9               	movwf	fsr2l,c
 11502   0110BC  0EFF               	movlw	255
 11503   0110BE  20E2               	addwfc	fsr1h,w,c
 11504   0110C0  6EDA               	movwf	fsr2h,c
 11505                           
 11506                           ;stkvar	_temp32 @ sp[(-12)+0]
 11507   0110C2  0EF7               	movlw	247
 11508   0110C4  24E1               	addwf	fsr1l,w,c
 11509   0110C6  6EE9               	movwf	fsr0l,c
 11510   0110C8  0EFF               	movlw	255
 11511   0110CA  20E2               	addwfc	fsr1h,w,c
 11512   0110CC  6EEA               	movwf	fsr0h,c
 11513   0110CE  50EF               	movf	indf0,w,c
 11514   0110D0  6E38               	movwf	(btemp+11)^0,c
 11515                           
 11516                           ;stkvar	_id @ sp[(-12)+-3]
 11517   0110D2  0EF1               	movlw	-15
 11518   0110D4  CFE3 F035          	movff	plusw1,btemp+8
 11519   0110D8  0EF2               	movlw	-14
 11520   0110DA  CFE3 F036          	movff	plusw1,btemp+9
 11521   0110DE  0E05               	movlw	5
 11522   0110E0  2435               	addwf	(btemp+8)^0,w,c
 11523   0110E2  6EE9               	movwf	fsr0l,c
 11524   0110E4  0E00               	movlw	0
 11525   0110E6  2036               	addwfc	(btemp+9)^0,w,c
 11526   0110E8  6EEA               	movwf	fsr0h,c
 11527   0110EA  50EF               	movf	indf0,w,c
 11528   0110EC  6E37               	movwf	(btemp+10)^0,c
 11529   0110EE  0E06               	movlw	6
 11530   0110F0  6E2D               	movwf	btemp^0,c
 11531   0110F2                     u2465:
 11532   0110F2  90D8               	bcf	status,0,c
 11533   0110F4  3637               	rlcf	(btemp+10)^0,f,c
 11534   0110F6  2E2D               	decfsz	btemp^0,f,c
 11535   0110F8  EF79  F088         	goto	u2465
 11536                           
 11537                           ;stkvar	_id @ sp[(-12)+-3]
 11538   0110FC  0EF1               	movlw	-15
 11539   0110FE  CFE3 F035          	movff	plusw1,btemp+8
 11540   011102  0EF2               	movlw	-14
 11541   011104  CFE3 F036          	movff	plusw1,btemp+9
 11542   011108  0E04               	movlw	4
 11543   01110A  2435               	addwf	(btemp+8)^0,w,c
 11544   01110C  6EE9               	movwf	fsr0l,c
 11545   01110E  0E00               	movlw	0
 11546   011110  2036               	addwfc	(btemp+9)^0,w,c
 11547   011112  6EEA               	movwf	fsr0h,c
 11548   011114  50EF               	movf	indf0,w,c
 11549   011116  6E36               	movwf	(btemp+9)^0,c
 11550   011118  0E05               	movlw	5
 11551   01111A  6E2D               	movwf	btemp^0,c
 11552   01111C                     u2475:
 11553   01111C  90D8               	bcf	status,0,c
 11554   01111E  3636               	rlcf	(btemp+9)^0,f,c
 11555   011120  2E2D               	decfsz	btemp^0,f,c
 11556   011122  EF8E  F088         	goto	u2475
 11557   011126  5036               	movf	(btemp+9)^0,w,c
 11558   011128  1037               	iorwf	(btemp+10)^0,w,c
 11559   01112A  1038               	iorwf	(btemp+11)^0,w,c
 11560   01112C  6EDF               	movwf	indf2,c
 11561   01112E                     l4618:
 11562                           
 11563                           ;can/can.c: 1028:     a = ((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHANN
      +                          ELS) + (filter * (2*4));
 11564                           ;stkvar	_filter @ sp[(-12)+-1]
 11565   01112E  0EF3               	movlw	-13
 11566   011130  50E3               	movf	plusw1,w,c
 11567   011132  0D08               	mullw	8
 11568   011134  CFF3 F037          	movff	prodl,btemp+10
 11569   011138  CFF4 F038          	movff	prodh,btemp+11
 11570   01113C  0EF0               	movlw	240
 11571   01113E  2437               	addwf	(btemp+10)^0,w,c
 11572   011140  6E35               	movwf	(btemp+8)^0,c
 11573   011142  0E01               	movlw	1
 11574   011144  2038               	addwfc	(btemp+11)^0,w,c
 11575   011146  6E36               	movwf	(btemp+9)^0,c
 11576                           
 11577                           ;stkvar	_a @ sp[(-12)+10]
 11578   011148  0EFE               	movlw	-2
 11579   01114A  C035  FFE3         	movff	btemp+8,plusw1
 11580   01114E  0EFF               	movlw	-1
 11581   011150  C036  FFE3         	movff	btemp+9,plusw1
 11582   011154                     
 11583                           ;stkvar	_fObj @ sp[(-12)+4]
 11584   011154  0EF8               	movlw	-8
 11585   011156  CFE3 FFE6          	movff	plusw1,postinc1
 11586   01115A  CFE3 FFE6          	movff	plusw1,postinc1
 11587   01115E  CFE3 FFE6          	movff	plusw1,postinc1
 11588   011162  CFE3 FFE6          	movff	plusw1,postinc1
 11589                           
 11590                           ;stkvar	_a @ sp[(-16)+10]
 11591   011166  0EFA               	movlw	-6
 11592   011168  CFE3 FFE6          	movff	plusw1,postinc1
 11593   01116C  CFE3 FFE6          	movff	plusw1,postinc1
 11594   011170  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 11595   011174                     
 11596                           ; _DRV_CANFDSPI_FilterObjectConfigure: autosize = 12, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 3, argsize = 3, vargsize = 0
 11597   011174  0EF1               	movlw	241
 11598   011176  26E1               	addwf	fsr1l,f,c
 11599   011178  0EFF               	movlw	255
 11600   01117A  22E2               	addwfc	fsr1h,f,c
 11601   01117C  0012               	return		;funcret
 11602   01117E                     __end_of_DRV_CANFDSPI_FilterObjectConfigure:
 11603                           	callstack 0
 11604                           
 11605 ;; *************** function _DRV_CANFDSPI_FilterMaskConfigure *****************
 11606 ;; Defined at:
 11607 ;;		line 1035 in file "can/can.c"
 11608 ;; Parameters:    Size  Location     Type
 11609 ;;  filter          1  [STACK] enum E5325
 11610 ;;  mask            2  [STACK] PTR struct _CAN_MASKOBJ_
 11611 ;;		 -> mObj(6), 
 11612 ;;  EXIDE           1  [STACK] unsigned char 
 11613 ;; Auto vars:     Size  Location     Type
 11614 ;;  temp32          4  [STACK] unsigned long 
 11615 ;;  mObj            6  [STACK] struct _REG_CiMASK
 11616 ;;  a               2  [STACK] unsigned short 
 11617 ;;  spiTransferE    1    0        char 
 11618 ;; Return value:  Size  Location     Type
 11619 ;;                  1  [STACK] char 
 11620 ;; Registers used:
 11621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 11622 ;; Tracked objects:
 11623 ;;		On entry : 0/0
 11624 ;;		On exit  : 0/0
 11625 ;;		Unchanged: 0/0
 11626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11631 ;;Total ram usage:        0 bytes
 11632 ;; Hardware stack levels used: 1
 11633 ;; Hardware stack levels required when called: 9
 11634 ;; This function calls:
 11635 ;;		_DRV_CANFDSPI_WriteWord
 11636 ;; This function is called by:
 11637 ;;		_CanSetFilter
 11638 ;; This function uses a reentrant model
 11639 ;;
 11640                           
 11641                           	psect	text43
 11642   01117E                     __ptext43:
 11643                           	callstack 0
 11644   01117E                     _DRV_CANFDSPI_FilterMaskConfigure:
 11645                           	callstack 0
 11646                           
 11647                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 11648   01117E  0E0C               	movlw	12
 11649   011180  26E1               	addwf	fsr1l,f,c
 11650   011182  0E00               	movlw	0
 11651   011184  22E2               	addwfc	fsr1h,f,c
 11652   011186                     
 11653                           ;can/can.c: 1043:     mObj.word = 0;
 11654                           ;stkvar	_mObj @ sp[(-12)+4]
 11655   011186  0EF8               	movlw	-8
 11656   011188  6AE3               	clrf	plusw1,c
 11657   01118A  0EF9               	movlw	-7
 11658   01118C  6AE3               	clrf	plusw1,c
 11659   01118E  0EFA               	movlw	-6
 11660   011190  6AE3               	clrf	plusw1,c
 11661   011192  0EFB               	movlw	-5
 11662   011194  6AE3               	clrf	plusw1,c
 11663   011196                     
 11664                           ;can/can.c: 1047:     if(EXIDE == 0)
 11665                           ;stkvar	_EXIDE @ sp[(-12)+-4]
 11666   011196  0EF0               	movlw	-16
 11667   011198  50E3               	movf	plusw1,w,c
 11668   01119A  A4D8               	btfss	status,2,c
 11669   01119C  EFD2  F088         	goto	u2481
 11670   0111A0  EFD4  F088         	goto	u2480
 11671   0111A4                     u2481:
 11672   0111A4  EF6C  F089         	goto	l4638
 11673   0111A8                     u2480:
 11674   0111A8                     
 11675                           ;can/can.c: 1048:     {;can/can.c: 1049:       mObj.byte[0] = (uint8_t)mask->MID;
 11676                           ;stkvar	_mask @ sp[(-12)+-3]
 11677   0111A8  0EF1               	movlw	-15
 11678   0111AA  CFE3 FFD9          	movff	plusw1,fsr2l
 11679   0111AE  0EF2               	movlw	-14
 11680   0111B0  CFE3 FFDA          	movff	plusw1,fsr2h
 11681   0111B4  50DF               	movf	indf2,w,c
 11682   0111B6  6E38               	movwf	(btemp+11)^0,c
 11683                           
 11684                           ;stkvar	_mObj @ sp[(-12)+4]
 11685   0111B8  0EF8               	movlw	-8
 11686   0111BA  C038  FFE3         	movff	btemp+11,plusw1
 11687   0111BE                     
 11688                           ;can/can.c: 1050:       mObj.byte[1] = (uint8_t)(mask->MID >> 8);
 11689                           ;stkvar	_mObj @ sp[(-12)+4]
 11690   0111BE  0EF9               	movlw	249
 11691   0111C0  24E1               	addwf	fsr1l,w,c
 11692   0111C2  6ED9               	movwf	fsr2l,c
 11693   0111C4  0EFF               	movlw	255
 11694   0111C6  20E2               	addwfc	fsr1h,w,c
 11695   0111C8  6EDA               	movwf	fsr2h,c
 11696                           
 11697                           ;stkvar	_mask @ sp[(-12)+-3]
 11698   0111CA  0EF1               	movlw	-15
 11699   0111CC  CFE3 FFE9          	movff	plusw1,fsr0l
 11700   0111D0  0EF2               	movlw	-14
 11701   0111D2  CFE3 FFEA          	movff	plusw1,fsr0h
 11702   0111D6  CFEE F035          	movff	postinc0,btemp+8
 11703   0111DA  CFEE F036          	movff	postinc0,btemp+9
 11704   0111DE  CFEE F037          	movff	postinc0,btemp+10
 11705   0111E2  CFEE F038          	movff	postinc0,btemp+11
 11706   0111E6  C036  F035         	movff	btemp+9,btemp+8
 11707   0111EA  C037  F036         	movff	btemp+10,btemp+9
 11708   0111EE  C038  F037         	movff	btemp+11,btemp+10
 11709   0111F2  6A38               	clrf	(btemp+11)^0,c
 11710   0111F4  5035               	movf	(btemp+8)^0,w,c
 11711   0111F6  6EDF               	movwf	indf2,c
 11712   0111F8                     
 11713                           ;can/can.c: 1051:       mObj.byte[2] = (uint8_t)(mask->MID >> 16);
 11714                           ;stkvar	_mObj @ sp[(-12)+4]
 11715   0111F8  0EFA               	movlw	250
 11716   0111FA  24E1               	addwf	fsr1l,w,c
 11717   0111FC  6ED9               	movwf	fsr2l,c
 11718   0111FE  0EFF               	movlw	255
 11719   011200  20E2               	addwfc	fsr1h,w,c
 11720   011202  6EDA               	movwf	fsr2h,c
 11721                           
 11722                           ;stkvar	_mask @ sp[(-12)+-3]
 11723   011204  0EF1               	movlw	-15
 11724   011206  CFE3 FFE9          	movff	plusw1,fsr0l
 11725   01120A  0EF2               	movlw	-14
 11726   01120C  CFE3 FFEA          	movff	plusw1,fsr0h
 11727   011210  CFEE F035          	movff	postinc0,btemp+8
 11728   011214  CFEE F036          	movff	postinc0,btemp+9
 11729   011218  CFEE F037          	movff	postinc0,btemp+10
 11730   01121C  CFEE F038          	movff	postinc0,btemp+11
 11731   011220  0E11               	movlw	17
 11732   011222  EF18  F089         	goto	u2490
 11733   011226                     u2495:
 11734   011226  90D8               	bcf	status,0,c
 11735   011228  3238               	rrcf	(btemp+11)^0,f,c
 11736   01122A  3237               	rrcf	(btemp+10)^0,f,c
 11737   01122C  3236               	rrcf	(btemp+9)^0,f,c
 11738   01122E  3235               	rrcf	(btemp+8)^0,f,c
 11739   011230                     u2490:
 11740   011230  2EE8               	decfsz	wreg,f,c
 11741   011232  EF13  F089         	goto	u2495
 11742   011236  5035               	movf	(btemp+8)^0,w,c
 11743   011238  6EDF               	movwf	indf2,c
 11744   01123A                     
 11745                           ;can/can.c: 1052:       mObj.byte[3] = (uint8_t)(mask->MID >> 24) | (uint8_t)(mask->MSID
      +                          11 << 5) | (uint8_t)(mask->MIDE << 6);
 11746                           ;stkvar	_mObj @ sp[(-12)+4]
 11747   01123A  0EFB               	movlw	251
 11748   01123C  24E1               	addwf	fsr1l,w,c
 11749   01123E  6ED9               	movwf	fsr2l,c
 11750   011240  0EFF               	movlw	255
 11751   011242  20E2               	addwfc	fsr1h,w,c
 11752   011244  6EDA               	movwf	fsr2h,c
 11753                           
 11754                           ;stkvar	_mask @ sp[(-12)+-3]
 11755   011246  0EF1               	movlw	-15
 11756   011248  CFE3 F037          	movff	plusw1,btemp+10
 11757   01124C  0EF2               	movlw	-14
 11758   01124E  CFE3 F038          	movff	plusw1,btemp+11
 11759   011252  0E05               	movlw	5
 11760   011254  2437               	addwf	(btemp+10)^0,w,c
 11761   011256  6EE9               	movwf	fsr0l,c
 11762   011258  0E00               	movlw	0
 11763   01125A  2038               	addwfc	(btemp+11)^0,w,c
 11764   01125C  6EEA               	movwf	fsr0h,c
 11765   01125E  50EF               	movf	indf0,w,c
 11766   011260  6E38               	movwf	(btemp+11)^0,c
 11767   011262  0E06               	movlw	6
 11768   011264  6E2D               	movwf	btemp^0,c
 11769   011266                     u2505:
 11770   011266  90D8               	bcf	status,0,c
 11771   011268  3638               	rlcf	(btemp+11)^0,f,c
 11772   01126A  2E2D               	decfsz	btemp^0,f,c
 11773   01126C  EF33  F089         	goto	u2505
 11774                           
 11775                           ;stkvar	_mask @ sp[(-12)+-3]
 11776   011270  0EF1               	movlw	-15
 11777   011272  CFE3 F035          	movff	plusw1,btemp+8
 11778   011276  0EF2               	movlw	-14
 11779   011278  CFE3 F036          	movff	plusw1,btemp+9
 11780   01127C  0E04               	movlw	4
 11781   01127E  2435               	addwf	(btemp+8)^0,w,c
 11782   011280  6EE9               	movwf	fsr0l,c
 11783   011282  0E00               	movlw	0
 11784   011284  2036               	addwfc	(btemp+9)^0,w,c
 11785   011286  6EEA               	movwf	fsr0h,c
 11786   011288  50EF               	movf	indf0,w,c
 11787   01128A  6E37               	movwf	(btemp+10)^0,c
 11788   01128C  0E05               	movlw	5
 11789   01128E  6E2D               	movwf	btemp^0,c
 11790   011290                     u2515:
 11791   011290  90D8               	bcf	status,0,c
 11792   011292  3637               	rlcf	(btemp+10)^0,f,c
 11793   011294  2E2D               	decfsz	btemp^0,f,c
 11794   011296  EF48  F089         	goto	u2515
 11795                           
 11796                           ;stkvar	_mask @ sp[(-12)+-3]
 11797   01129A  0EF1               	movlw	-15
 11798   01129C  CFE3 FFE9          	movff	plusw1,fsr0l
 11799   0112A0  0EF2               	movlw	-14
 11800   0112A2  CFE3 FFEA          	movff	plusw1,fsr0h
 11801   0112A6  CFEE F031          	movff	postinc0,btemp+4
 11802   0112AA  CFEE F032          	movff	postinc0,btemp+5
 11803   0112AE  CFEE F033          	movff	postinc0,btemp+6
 11804   0112B2  CFEE F034          	movff	postinc0,btemp+7
 11805   0112B6  0E19               	movlw	25
 11806   0112B8  EF63  F089         	goto	u2520
 11807   0112BC                     u2525:
 11808   0112BC  90D8               	bcf	status,0,c
 11809   0112BE  3234               	rrcf	(btemp+7)^0,f,c
 11810   0112C0  3233               	rrcf	(btemp+6)^0,f,c
 11811   0112C2  3232               	rrcf	(btemp+5)^0,f,c
 11812   0112C4  3231               	rrcf	(btemp+4)^0,f,c
 11813   0112C6                     u2520:
 11814   0112C6  2EE8               	decfsz	wreg,f,c
 11815   0112C8  EF5E  F089         	goto	u2525
 11816   0112CC  5031               	movf	(btemp+4)^0,w,c
 11817   0112CE  1037               	iorwf	(btemp+10)^0,w,c
 11818   0112D0  1038               	iorwf	(btemp+11)^0,w,c
 11819   0112D2  6EDF               	movwf	indf2,c
 11820                           
 11821                           ;can/can.c: 1053:     }
 11822   0112D4  EF31  F08A         	goto	l4650
 11823   0112D8                     l4638:
 11824                           
 11825                           ;can/can.c: 1055:     {;can/can.c: 1056:       uint32_t temp32 = ((mask->MID & 0x0003FFF
      +                          F) << 11) |
 11826                           ;stkvar	_mask @ sp[(-12)+-3]
 11827   0112D8  0EF1               	movlw	-15
 11828   0112DA  CFE3 FFD9          	movff	plusw1,fsr2l
 11829   0112DE  0EF2               	movlw	-14
 11830   0112E0  CFE3 FFDA          	movff	plusw1,fsr2h
 11831   0112E4  CFDE F035          	movff	postinc2,btemp+8
 11832   0112E8  CFDE F036          	movff	postinc2,btemp+9
 11833   0112EC  CFDE F037          	movff	postinc2,btemp+10
 11834   0112F0  CFDE F038          	movff	postinc2,btemp+11
 11835   0112F4  0E13               	movlw	19
 11836   0112F6  EF82  F089         	goto	u2530
 11837   0112FA                     u2535:
 11838   0112FA  90D8               	bcf	status,0,c
 11839   0112FC  3238               	rrcf	(btemp+11)^0,f,c
 11840   0112FE  3237               	rrcf	(btemp+10)^0,f,c
 11841   011300  3236               	rrcf	(btemp+9)^0,f,c
 11842   011302  3235               	rrcf	(btemp+8)^0,f,c
 11843   011304                     u2530:
 11844   011304  2EE8               	decfsz	wreg,f,c
 11845   011306  EF7D  F089         	goto	u2535
 11846   01130A  0EFF               	movlw	255
 11847   01130C  1435               	andwf	(btemp+8)^0,w,c
 11848   01130E  6E31               	movwf	(btemp+4)^0,c
 11849   011310  0E07               	movlw	7
 11850   011312  1436               	andwf	(btemp+9)^0,w,c
 11851   011314  6E32               	movwf	(btemp+5)^0,c
 11852   011316  0E00               	movlw	0
 11853   011318  1437               	andwf	(btemp+10)^0,w,c
 11854   01131A  6E33               	movwf	(btemp+6)^0,c
 11855   01131C  0E00               	movlw	0
 11856   01131E  1438               	andwf	(btemp+11)^0,w,c
 11857   011320  6E34               	movwf	(btemp+7)^0,c
 11858                           
 11859                           ;stkvar	_mask @ sp[(-12)+-3]
 11860   011322  0EF1               	movlw	-15
 11861   011324  CFE3 FFD9          	movff	plusw1,fsr2l
 11862   011328  0EF2               	movlw	-14
 11863   01132A  CFE3 FFDA          	movff	plusw1,fsr2h
 11864   01132E  0EFF               	movlw	255
 11865   011330  14DE               	andwf	postinc2,w,c
 11866   011332  6E35               	movwf	(btemp+8)^0,c
 11867   011334  0EFF               	movlw	255
 11868   011336  14DE               	andwf	postinc2,w,c
 11869   011338  6E36               	movwf	(btemp+9)^0,c
 11870   01133A  0E03               	movlw	3
 11871   01133C  14DE               	andwf	postinc2,w,c
 11872   01133E  6E37               	movwf	(btemp+10)^0,c
 11873   011340  0E00               	movlw	0
 11874   011342  14DE               	andwf	postinc2,w,c
 11875   011344  6E38               	movwf	(btemp+11)^0,c
 11876   011346  0E0B               	movlw	11
 11877   011348                     u2545:
 11878   011348  90D8               	bcf	status,0,c
 11879   01134A  3635               	rlcf	(btemp+8)^0,f,c
 11880   01134C  3636               	rlcf	(btemp+9)^0,f,c
 11881   01134E  3637               	rlcf	(btemp+10)^0,f,c
 11882   011350  3638               	rlcf	(btemp+11)^0,f,c
 11883   011352  2EE8               	decfsz	wreg,f,c
 11884   011354  EFA4  F089         	goto	u2545
 11885   011358  5031               	movf	(btemp+4)^0,w,c
 11886   01135A  1035               	iorwf	(btemp+8)^0,w,c
 11887   01135C  6E2D               	movwf	btemp^0,c
 11888   01135E  5032               	movf	(btemp+5)^0,w,c
 11889   011360  1036               	iorwf	(btemp+9)^0,w,c
 11890   011362  6E2E               	movwf	(btemp+1)^0,c
 11891   011364  5033               	movf	(btemp+6)^0,w,c
 11892   011366  1037               	iorwf	(btemp+10)^0,w,c
 11893   011368  6E2F               	movwf	(btemp+2)^0,c
 11894   01136A  5034               	movf	(btemp+7)^0,w,c
 11895   01136C  1038               	iorwf	(btemp+11)^0,w,c
 11896   01136E  6E30               	movwf	(btemp+3)^0,c
 11897                           
 11898                           ;stkvar	_temp32 @ sp[(-12)+0]
 11899   011370  0EF4               	movlw	-12
 11900   011372  C02D  FFE3         	movff	btemp,plusw1
 11901   011376  0EF5               	movlw	-11
 11902   011378  C02E  FFE3         	movff	btemp+1,plusw1
 11903   01137C  0EF6               	movlw	-10
 11904   01137E  C02F  FFE3         	movff	btemp+2,plusw1
 11905   011382  0EF7               	movlw	-9
 11906   011384  C030  FFE3         	movff	btemp+3,plusw1
 11907   011388                     
 11908                           ;can/can.c: 1058:       temp32 = temp32 & 0x1FFFFFFF;
 11909                           ;stkvar	_temp32 @ sp[(-12)+0]
 11910   011388  50E1               	movf	fsr1l,w,c
 11911   01138A  0FF4               	addlw	-12
 11912   01138C  6ED9               	movwf	fsr2l,c
 11913   01138E  50E2               	movf	fsr1h,w,c
 11914   011390  6EDA               	movwf	fsr2h,c
 11915   011392  0EFF               	movlw	255
 11916   011394  22DA               	addwfc	fsr2h,f,c
 11917   011396  0EFF               	movlw	255
 11918   011398  16DE               	andwf	postinc2,f,c
 11919   01139A  0EFF               	movlw	255
 11920   01139C  16DE               	andwf	postinc2,f,c
 11921   01139E  0EFF               	movlw	255
 11922   0113A0  16DE               	andwf	postinc2,f,c
 11923   0113A2  0E1F               	movlw	31
 11924   0113A4  16DE               	andwf	postinc2,f,c
 11925   0113A6                     
 11926                           ;can/can.c: 1059:       mObj.byte[0] = (uint8_t)temp32;
 11927                           ;stkvar	_temp32 @ sp[(-12)+0]
 11928                           ;stkvar	_mObj @ sp[(-12)+4]
 11929   0113A6  0EF4               	movlw	-12
 11930   0113A8  CFE3 F02D          	movff	plusw1,btemp
 11931   0113AC  0EF8               	movlw	-8
 11932   0113AE  C02D  FFE3         	movff	btemp,plusw1
 11933   0113B2                     
 11934                           ;can/can.c: 1060:       mObj.byte[1] = (uint8_t)(temp32 >> 8);
 11935                           ;stkvar	_temp32 @ sp[(-12)+0]
 11936   0113B2  0EF5               	movlw	245
 11937   0113B4  24E1               	addwf	fsr1l,w,c
 11938   0113B6  6ED9               	movwf	fsr2l,c
 11939   0113B8  0EFF               	movlw	255
 11940   0113BA  20E2               	addwfc	fsr1h,w,c
 11941   0113BC  6EDA               	movwf	fsr2h,c
 11942                           
 11943                           ;stkvar	_mObj @ sp[(-12)+4]
 11944   0113BE  0EF9               	movlw	249
 11945   0113C0  24E1               	addwf	fsr1l,w,c
 11946   0113C2  6EE9               	movwf	fsr0l,c
 11947   0113C4  0EFF               	movlw	255
 11948   0113C6  20E2               	addwfc	fsr1h,w,c
 11949   0113C8  6EEA               	movwf	fsr0h,c
 11950   0113CA  CFDF FFEF          	movff	indf2,indf0
 11951   0113CE                     
 11952                           ;can/can.c: 1061:       mObj.byte[2] = (uint8_t)(temp32 >> 16);
 11953                           ;stkvar	_temp32 @ sp[(-12)+0]
 11954   0113CE  0EF6               	movlw	246
 11955   0113D0  24E1               	addwf	fsr1l,w,c
 11956   0113D2  6ED9               	movwf	fsr2l,c
 11957   0113D4  0EFF               	movlw	255
 11958   0113D6  20E2               	addwfc	fsr1h,w,c
 11959   0113D8  6EDA               	movwf	fsr2h,c
 11960                           
 11961                           ;stkvar	_mObj @ sp[(-12)+4]
 11962   0113DA  0EFA               	movlw	250
 11963   0113DC  24E1               	addwf	fsr1l,w,c
 11964   0113DE  6EE9               	movwf	fsr0l,c
 11965   0113E0  0EFF               	movlw	255
 11966   0113E2  20E2               	addwfc	fsr1h,w,c
 11967   0113E4  6EEA               	movwf	fsr0h,c
 11968   0113E6  CFDF FFEF          	movff	indf2,indf0
 11969   0113EA                     
 11970                           ;can/can.c: 1062:       mObj.byte[3] = (uint8_t)(temp32 >> 24) | (uint8_t)(mask->MSID11 
      +                          << 5) | (uint8_t)(mask->MIDE << 6);
 11971                           ;stkvar	_mObj @ sp[(-12)+4]
 11972   0113EA  0EFB               	movlw	251
 11973   0113EC  24E1               	addwf	fsr1l,w,c
 11974   0113EE  6ED9               	movwf	fsr2l,c
 11975   0113F0  0EFF               	movlw	255
 11976   0113F2  20E2               	addwfc	fsr1h,w,c
 11977   0113F4  6EDA               	movwf	fsr2h,c
 11978                           
 11979                           ;stkvar	_temp32 @ sp[(-12)+0]
 11980   0113F6  0EF7               	movlw	247
 11981   0113F8  24E1               	addwf	fsr1l,w,c
 11982   0113FA  6EE9               	movwf	fsr0l,c
 11983   0113FC  0EFF               	movlw	255
 11984   0113FE  20E2               	addwfc	fsr1h,w,c
 11985   011400  6EEA               	movwf	fsr0h,c
 11986   011402  50EF               	movf	indf0,w,c
 11987   011404  6E38               	movwf	(btemp+11)^0,c
 11988                           
 11989                           ;stkvar	_mask @ sp[(-12)+-3]
 11990   011406  0EF1               	movlw	-15
 11991   011408  CFE3 F035          	movff	plusw1,btemp+8
 11992   01140C  0EF2               	movlw	-14
 11993   01140E  CFE3 F036          	movff	plusw1,btemp+9
 11994   011412  0E05               	movlw	5
 11995   011414  2435               	addwf	(btemp+8)^0,w,c
 11996   011416  6EE9               	movwf	fsr0l,c
 11997   011418  0E00               	movlw	0
 11998   01141A  2036               	addwfc	(btemp+9)^0,w,c
 11999   01141C  6EEA               	movwf	fsr0h,c
 12000   01141E  50EF               	movf	indf0,w,c
 12001   011420  6E37               	movwf	(btemp+10)^0,c
 12002   011422  0E06               	movlw	6
 12003   011424  6E2D               	movwf	btemp^0,c
 12004   011426                     u2555:
 12005   011426  90D8               	bcf	status,0,c
 12006   011428  3637               	rlcf	(btemp+10)^0,f,c
 12007   01142A  2E2D               	decfsz	btemp^0,f,c
 12008   01142C  EF13  F08A         	goto	u2555
 12009                           
 12010                           ;stkvar	_mask @ sp[(-12)+-3]
 12011   011430  0EF1               	movlw	-15
 12012   011432  CFE3 F035          	movff	plusw1,btemp+8
 12013   011436  0EF2               	movlw	-14
 12014   011438  CFE3 F036          	movff	plusw1,btemp+9
 12015   01143C  0E04               	movlw	4
 12016   01143E  2435               	addwf	(btemp+8)^0,w,c
 12017   011440  6EE9               	movwf	fsr0l,c
 12018   011442  0E00               	movlw	0
 12019   011444  2036               	addwfc	(btemp+9)^0,w,c
 12020   011446  6EEA               	movwf	fsr0h,c
 12021   011448  50EF               	movf	indf0,w,c
 12022   01144A  6E36               	movwf	(btemp+9)^0,c
 12023   01144C  0E05               	movlw	5
 12024   01144E  6E2D               	movwf	btemp^0,c
 12025   011450                     u2565:
 12026   011450  90D8               	bcf	status,0,c
 12027   011452  3636               	rlcf	(btemp+9)^0,f,c
 12028   011454  2E2D               	decfsz	btemp^0,f,c
 12029   011456  EF28  F08A         	goto	u2565
 12030   01145A  5036               	movf	(btemp+9)^0,w,c
 12031   01145C  1037               	iorwf	(btemp+10)^0,w,c
 12032   01145E  1038               	iorwf	(btemp+11)^0,w,c
 12033   011460  6EDF               	movwf	indf2,c
 12034   011462                     l4650:
 12035                           
 12036                           ;can/can.c: 1065:     a = (((0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS))+CAN_FIFO_TOTAL_CHAN
      +                          NELS)+4) + (filter * (2*4));
 12037                           ;stkvar	_filter @ sp[(-12)+-1]
 12038   011462  0EF3               	movlw	-13
 12039   011464  50E3               	movf	plusw1,w,c
 12040   011466  0D08               	mullw	8
 12041   011468  CFF3 F037          	movff	prodl,btemp+10
 12042   01146C  CFF4 F038          	movff	prodh,btemp+11
 12043   011470  0EF4               	movlw	244
 12044   011472  2437               	addwf	(btemp+10)^0,w,c
 12045   011474  6E35               	movwf	(btemp+8)^0,c
 12046   011476  0E01               	movlw	1
 12047   011478  2038               	addwfc	(btemp+11)^0,w,c
 12048   01147A  6E36               	movwf	(btemp+9)^0,c
 12049                           
 12050                           ;stkvar	_a @ sp[(-12)+10]
 12051   01147C  0EFE               	movlw	-2
 12052   01147E  C035  FFE3         	movff	btemp+8,plusw1
 12053   011482  0EFF               	movlw	-1
 12054   011484  C036  FFE3         	movff	btemp+9,plusw1
 12055   011488                     
 12056                           ;stkvar	_mObj @ sp[(-12)+4]
 12057   011488  0EF8               	movlw	-8
 12058   01148A  CFE3 FFE6          	movff	plusw1,postinc1
 12059   01148E  CFE3 FFE6          	movff	plusw1,postinc1
 12060   011492  CFE3 FFE6          	movff	plusw1,postinc1
 12061   011496  CFE3 FFE6          	movff	plusw1,postinc1
 12062                           
 12063                           ;stkvar	_a @ sp[(-16)+10]
 12064   01149A  0EFA               	movlw	-6
 12065   01149C  CFE3 FFE6          	movff	plusw1,postinc1
 12066   0114A0  CFE3 FFE6          	movff	plusw1,postinc1
 12067   0114A4  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12068   0114A8                     
 12069                           ; _DRV_CANFDSPI_FilterMaskConfigure: autosize = 12, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 4, argsize = 4, vargsize = 0
 12070   0114A8  0EF0               	movlw	240
 12071   0114AA  26E1               	addwf	fsr1l,f,c
 12072   0114AC  0EFF               	movlw	255
 12073   0114AE  22E2               	addwfc	fsr1h,f,c
 12074   0114B0  0012               	return		;funcret
 12075   0114B2                     __end_of_DRV_CANFDSPI_FilterMaskConfigure:
 12076                           	callstack 0
 12077                           
 12078 ;; *************** function _DRV_CANFDSPI_FilterDisable *****************
 12079 ;; Defined at:
 12080 ;;		line 1121 in file "can/can.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;  filter          1  [STACK] enum E5325
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;  a               2  [STACK] unsigned short 
 12085 ;;  spiTransferE    1  [STACK] char 
 12086 ;;  fCtrl           1  [STACK] struct _REG_CiFLTCON_BYT
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1  [STACK] char 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        0 bytes
 12101 ;; Hardware stack levels used: 1
 12102 ;; Hardware stack levels required when called: 9
 12103 ;; This function calls:
 12104 ;;		_DRV_CANFDSPI_ReadByte
 12105 ;;		_DRV_CANFDSPI_WriteByte
 12106 ;; This function is called by:
 12107 ;;		_CanSetFilter
 12108 ;; This function uses a reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text44
 12112   013E18                     __ptext44:
 12113                           	callstack 0
 12114   013E18                     _DRV_CANFDSPI_FilterDisable:
 12115                           	callstack 0
 12116                           
 12117                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12118   013E18  52E6               	movf	postinc1,f,c
 12119   013E1A  52E6               	movf	postinc1,f,c
 12120   013E1C  52E6               	movf	postinc1,f,c
 12121   013E1E  52E6               	movf	postinc1,f,c
 12122   013E20                     
 12123                           ;can/can.c: 1128:     a = (0x050 +((3*4)*CAN_FIFO_TOTAL_CHANNELS)) + filter;
 12124                           ;stkvar	_filter @ sp[(-4)+-1]
 12125   013E20  0EFB               	movlw	-5
 12126   013E22  CFE3 F038          	movff	plusw1,btemp+11
 12127   013E26  0ED0               	movlw	208
 12128   013E28  2438               	addwf	(btemp+11)^0,w,c
 12129   013E2A  6E35               	movwf	(btemp+8)^0,c
 12130   013E2C  6A36               	clrf	(btemp+9)^0,c
 12131   013E2E  0E01               	movlw	1
 12132   013E30  2236               	addwfc	(btemp+9)^0,f,c
 12133                           
 12134                           ;stkvar	_a @ sp[(-4)+0]
 12135   013E32  0EFC               	movlw	-4
 12136   013E34  C035  FFE3         	movff	btemp+8,plusw1
 12137   013E38  0EFD               	movlw	-3
 12138   013E3A  C036  FFE3         	movff	btemp+9,plusw1
 12139   013E3E                     
 12140                           ;can/can.c: 1130:     spiTransferError = DRV_CANFDSPI_ReadByte( a, &fCtrl.byte);
 12141                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12142   013E3E  0EFF               	movlw	255
 12143   013E40  24E1               	addwf	fsr1l,w,c
 12144   013E42  6E2D               	movwf	btemp^0,c
 12145   013E44  0EFF               	movlw	255
 12146   013E46  20E2               	addwfc	fsr1h,w,c
 12147   013E48  6E2E               	movwf	(btemp+1)^0,c
 12148   013E4A  C02D  FFE6         	movff	btemp,postinc1
 12149   013E4E  C02E  FFE6         	movff	btemp+1,postinc1
 12150                           
 12151                           ;stkvar	_a @ sp[(-6)+0]
 12152   013E52  0EFA               	movlw	-6
 12153   013E54  CFE3 FFE6          	movff	plusw1,postinc1
 12154   013E58  CFE3 FFE6          	movff	plusw1,postinc1
 12155   013E5C  ECB3  F0A0         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 12156                           
 12157                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12158   013E60  0EFE               	movlw	-2
 12159   013E62  C02D  FFE3         	movff	btemp,plusw1
 12160   013E66                     
 12161                           ;can/can.c: 1131:     if (spiTransferError) {
 12162                           ;stkvar	_spiTransferError @ sp[(-4)+2]
 12163   013E66  0EFE               	movlw	-2
 12164   013E68  50E3               	movf	plusw1,w,c
 12165   013E6A  B4D8               	btfsc	status,2,c
 12166   013E6C  EF3A  F09F         	goto	u2381
 12167   013E70  EF3C  F09F         	goto	u2380
 12168   013E74                     u2381:
 12169   013E74  EF3E  F09F         	goto	l4584
 12170   013E78                     u2380:
 12171   013E78  EF50  F09F         	goto	l336
 12172   013E7C                     l4584:
 12173                           
 12174                           ;can/can.c: 1136:     fCtrl.bF.Enable = 0;
 12175                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12176   013E7C  50E1               	movf	fsr1l,w,c
 12177   013E7E  0FFF               	addlw	-1
 12178   013E80  6ED9               	movwf	fsr2l,c
 12179   013E82  50E2               	movf	fsr1h,w,c
 12180   013E84  6EDA               	movwf	fsr2h,c
 12181   013E86  0EFF               	movlw	255
 12182   013E88  22DA               	addwfc	fsr2h,f,c
 12183   013E8A  9EDF               	bcf	indf2,7,c
 12184   013E8C                     
 12185                           ;stkvar	_fCtrl @ sp[(-4)+3]
 12186   013E8C  0EFF               	movlw	-1
 12187   013E8E  50E3               	movf	plusw1,w,c
 12188   013E90  6EE6               	movwf	postinc1,c
 12189                           
 12190                           ;stkvar	_a @ sp[(-5)+0]
 12191   013E92  0EFB               	movlw	-5
 12192   013E94  CFE3 FFE6          	movff	plusw1,postinc1
 12193   013E98  CFE3 FFE6          	movff	plusw1,postinc1
 12194   013E9C  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 12195   013EA0                     l336:
 12196                           
 12197                           ; _DRV_CANFDSPI_FilterDisable: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 1, argsize = 1, vargsize = 0
 12198   013EA0  0EFB               	movlw	251
 12199   013EA2  26E1               	addwf	fsr1l,f,c
 12200   013EA4  0EFF               	movlw	255
 12201   013EA6  22E2               	addwfc	fsr1h,f,c
 12202   013EA8  0012               	return		;funcret
 12203   013EAA                     __end_of_DRV_CANFDSPI_FilterDisable:
 12204                           	callstack 0
 12205                           
 12206 ;; *************** function _CanInit *****************
 12207 ;; Defined at:
 12208 ;;		line 156 in file "can/can.c"
 12209 ;; Parameters:    Size  Location     Type
 12210 ;;  bitTime         1  [STACK] enum E5607
 12211 ;;  withISR         1  [STACK] _Bool 
 12212 ;; Auto vars:     Size  Location     Type
 12213 ;;  txqConfig       4  [STACK] struct _CAN_TX_QUEUE_CON
 12214 ;;  config          3  [STACK] struct _CAN_CONFIG
 12215 ;;  rxfConfig       3  [STACK] struct _CAN_RX_FIFO_CONF
 12216 ;;  txfConfig       2  [STACK] struct _CAN_TX_FIFO_CONF
 12217 ;;  tefConfig       1  [STACK] struct _CAN_TEF_CONFIG
 12218 ;; Return value:  Size  Location     Type
 12219 ;;                  1  [STACK] void 
 12220 ;; Registers used:
 12221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, tblptrl, tblptrh, tblptru, prodl, prodh
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;Total ram usage:        0 bytes
 12232 ;; Hardware stack levels used: 1
 12233 ;; Hardware stack levels required when called: 10
 12234 ;; This function calls:
 12235 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 12236 ;;		_DRV_CANFDSPI_Configure
 12237 ;;		_DRV_CANFDSPI_ConfigureObjectReset
 12238 ;;		_DRV_CANFDSPI_ModuleEventEnable
 12239 ;;		_DRV_CANFDSPI_OperationModeSelect
 12240 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 12241 ;;		_DRV_CANFDSPI_Reset
 12242 ;;		_DRV_CANFDSPI_TefConfigure
 12243 ;;		_DRV_CANFDSPI_TimeStampEnable
 12244 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 12245 ;;		_DRV_CANFDSPI_TimeStampSet
 12246 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 12247 ;;		_DRV_CANFDSPI_TransmitChannelConfigureObjectReset
 12248 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 12249 ;;		_DRV_CANFDSPI_TransmitQueueConfigureObjectReset
 12250 ;; This function is called by:
 12251 ;;		_main
 12252 ;; This function uses a reentrant model
 12253 ;;
 12254                           
 12255                           	psect	text45
 12256   011E64                     __ptext45:
 12257                           	callstack 0
 12258   011E64                     _CanInit:
 12259                           	callstack 0
 12260                           
 12261                           ; autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 va
      +                          rgsize = 0, retsize = 0 argfudge = 0
 12262   011E64  0E0D               	movlw	13
 12263   011E66  26E1               	addwf	fsr1l,f,c
 12264   011E68  0E00               	movlw	0
 12265   011E6A  22E2               	addwfc	fsr1h,f,c
 12266   011E6C                     
 12267                           ;can/can.c: 156: void CanInit(CAN_BITTIME_SETUP bitTime, _Bool withISR);can/can.c: 157: 
      +                          {;can/can.c: 158:   TRISGbits.TRISG4 = 0;
 12268   011E6C  9898               	bcf	152,4,c	;volatile
 12269                           
 12270                           ;can/can.c: 159:   LATGbits.LATG4 = 1;
 12271   011E6E  888F               	bsf	143,4,c	;volatile
 12272   011E70                     
 12273                           ;can/can.c: 160:   DRV_CANFDSPI_Reset();
 12274   011E70  EC58  F0A2         	call	_DRV_CANFDSPI_Reset	;wreg free
 12275   011E74                     
 12276                           ;can/can.c: 161:   DRV_CANFDSPI_BitTimeConfigureNominal40MHz(bitTime);
 12277                           ;stkvar	_bitTime @ sp[(-13)+-1]
 12278   011E74  0EF2               	movlw	-14
 12279   011E76  50E3               	movf	plusw1,w,c
 12280   011E78  6EE6               	movwf	postinc1,c
 12281   011E7A  EC0C  F08E         	call	_DRV_CANFDSPI_BitTimeConfigureNominal40MHz	;wreg free
 12282   011E7E                     
 12283                           ;can/can.c: 163:     CAN_CONFIG config;;can/can.c: 164:     DRV_CANFDSPI_ConfigureObject
      +                          Reset(&config);
 12284                           ;stkvar	_config @ sp[(-13)+4]
 12285   011E7E  0EF7               	movlw	247
 12286   011E80  24E1               	addwf	fsr1l,w,c
 12287   011E82  6E2D               	movwf	btemp^0,c
 12288   011E84  0EFF               	movlw	255
 12289   011E86  20E2               	addwfc	fsr1h,w,c
 12290   011E88  6E2E               	movwf	(btemp+1)^0,c
 12291   011E8A  C02D  FFE6         	movff	btemp,postinc1
 12292   011E8E  C02E  FFE6         	movff	btemp+1,postinc1
 12293   011E92  ECDD  F08C         	call	_DRV_CANFDSPI_ConfigureObjectReset	;wreg free
 12294   011E96                     
 12295                           ;can/can.c: 165:     config.IsoCrcEnable = 1;
 12296                           ;stkvar	_config @ sp[(-13)+4]
 12297   011E96  50E1               	movf	fsr1l,w,c
 12298   011E98  0FF7               	addlw	-9
 12299   011E9A  6ED9               	movwf	fsr2l,c
 12300   011E9C  50E2               	movf	fsr1h,w,c
 12301   011E9E  6EDA               	movwf	fsr2h,c
 12302   011EA0  0EFF               	movlw	255
 12303   011EA2  22DA               	addwfc	fsr2h,f,c
 12304   011EA4  8ADF               	bsf	indf2,5,c
 12305   011EA6                     
 12306                           ;can/can.c: 166:     config.StoreInTEF = 1;
 12307                           ;stkvar	_config @ sp[(-13)+4]
 12308   011EA6  0EF8               	movlw	248
 12309   011EA8  24E1               	addwf	fsr1l,w,c
 12310   011EAA  6ED9               	movwf	fsr2l,c
 12311   011EAC  0EFF               	movlw	255
 12312   011EAE  20E2               	addwfc	fsr1h,w,c
 12313   011EB0  6EDA               	movwf	fsr2h,c
 12314   011EB2  8CDF               	bsf	indf2,6,c
 12315   011EB4                     
 12316                           ;can/can.c: 167:     config.TXQEnable = 1;
 12317                           ;stkvar	_config @ sp[(-13)+4]
 12318   011EB4  0EF8               	movlw	248
 12319   011EB6  24E1               	addwf	fsr1l,w,c
 12320   011EB8  6ED9               	movwf	fsr2l,c
 12321   011EBA  0EFF               	movlw	255
 12322   011EBC  20E2               	addwfc	fsr1h,w,c
 12323   011EBE  6EDA               	movwf	fsr2h,c
 12324   011EC0  8EDF               	bsf	indf2,7,c
 12325   011EC2                     
 12326                           ;can/can.c: 168:     DRV_CANFDSPI_Configure(&config);
 12327                           ;stkvar	_config @ sp[(-13)+4]
 12328   011EC2  0EF7               	movlw	247
 12329   011EC4  24E1               	addwf	fsr1l,w,c
 12330   011EC6  6E2D               	movwf	btemp^0,c
 12331   011EC8  0EFF               	movlw	255
 12332   011ECA  20E2               	addwfc	fsr1h,w,c
 12333   011ECC  6E2E               	movwf	(btemp+1)^0,c
 12334   011ECE  C02D  FFE6         	movff	btemp,postinc1
 12335   011ED2  C02E  FFE6         	movff	btemp+1,postinc1
 12336   011ED6  EC9D  F08B         	call	_DRV_CANFDSPI_Configure	;wreg free
 12337   011EDA                     
 12338                           ;can/can.c: 172:     CAN_TEF_CONFIG tefConfig;;can/can.c: 173:     tefConfig.FifoSize = 
      +                          11;
 12339                           ;stkvar	_tefConfig @ sp[(-13)+12]
 12340   011EDA  50E1               	movf	fsr1l,w,c
 12341   011EDC  0FFF               	addlw	-1
 12342   011EDE  6ED9               	movwf	fsr2l,c
 12343   011EE0  50E2               	movf	fsr1h,w,c
 12344   011EE2  6EDA               	movwf	fsr2h,c
 12345   011EE4  0EFF               	movlw	255
 12346   011EE6  22DA               	addwfc	fsr2h,f,c
 12347   011EE8  50DF               	movf	223,w,c
 12348   011EEA  0BC1               	andlw	-63
 12349   011EEC  0916               	iorlw	22
 12350   011EEE  6EDF               	movwf	223,c
 12351   011EF0                     
 12352                           ;can/can.c: 174:     tefConfig.TimeStampEnable = 1;
 12353                           ;stkvar	_tefConfig @ sp[(-13)+12]
 12354   011EF0  50E1               	movf	fsr1l,w,c
 12355   011EF2  0FFF               	addlw	-1
 12356   011EF4  6ED9               	movwf	fsr2l,c
 12357   011EF6  50E2               	movf	fsr1h,w,c
 12358   011EF8  6EDA               	movwf	fsr2h,c
 12359   011EFA  0EFF               	movlw	255
 12360   011EFC  22DA               	addwfc	fsr2h,f,c
 12361   011EFE  80DF               	bsf	indf2,0,c
 12362   011F00                     
 12363                           ;can/can.c: 175:     DRV_CANFDSPI_TefConfigure(&tefConfig);
 12364                           ;stkvar	_tefConfig @ sp[(-13)+12]
 12365   011F00  0EFF               	movlw	255
 12366   011F02  24E1               	addwf	fsr1l,w,c
 12367   011F04  6E2D               	movwf	btemp^0,c
 12368   011F06  0EFF               	movlw	255
 12369   011F08  20E2               	addwfc	fsr1h,w,c
 12370   011F0A  6E2E               	movwf	(btemp+1)^0,c
 12371   011F0C  C02D  FFE6         	movff	btemp,postinc1
 12372   011F10  C02E  FFE6         	movff	btemp+1,postinc1
 12373   011F14  EC0F  F09C         	call	_DRV_CANFDSPI_TefConfigure	;wreg free
 12374   011F18                     
 12375                           ;can/can.c: 178:     CAN_TX_QUEUE_CONFIG txqConfig;;can/can.c: 179:     DRV_CANFDSPI_Tra
      +                          nsmitQueueConfigureObjectReset(&txqConfig);
 12376                           ;stkvar	_txqConfig @ sp[(-13)+0]
 12377   011F18  0EF3               	movlw	243
 12378   011F1A  24E1               	addwf	fsr1l,w,c
 12379   011F1C  6E2D               	movwf	btemp^0,c
 12380   011F1E  0EFF               	movlw	255
 12381   011F20  20E2               	addwfc	fsr1h,w,c
 12382   011F22  6E2E               	movwf	(btemp+1)^0,c
 12383   011F24  C02D  FFE6         	movff	btemp,postinc1
 12384   011F28  C02E  FFE6         	movff	btemp+1,postinc1
 12385   011F2C  EC4C  F098         	call	_DRV_CANFDSPI_TransmitQueueConfigureObjectReset	;wreg free
 12386   011F30                     
 12387                           ;can/can.c: 180:     txqConfig.TxPriority =1;
 12388                           ;stkvar	_txqConfig @ sp[(-13)+0]
 12389   011F30  0EF3               	movlw	-13
 12390   011F32  6AE3               	clrf	plusw1,c
 12391   011F34  2AE3               	incf	plusw1,f,c
 12392   011F36                     
 12393                           ;can/can.c: 181:     txqConfig.FifoSize = 7;
 12394                           ;stkvar	_txqConfig @ sp[(-13)+0]
 12395   011F36  0EF5               	movlw	245
 12396   011F38  24E1               	addwf	fsr1l,w,c
 12397   011F3A  6ED9               	movwf	fsr2l,c
 12398   011F3C  0EFF               	movlw	255
 12399   011F3E  20E2               	addwfc	fsr1h,w,c
 12400   011F40  6EDA               	movwf	fsr2h,c
 12401   011F42  0E07               	movlw	7
 12402   011F44  6EDF               	movwf	indf2,c
 12403   011F46                     
 12404                           ;can/can.c: 182:     txqConfig.PayLoadSize = CAN_PLSIZE_32;
 12405                           ;stkvar	_txqConfig @ sp[(-13)+0]
 12406   011F46  0EF6               	movlw	246
 12407   011F48  24E1               	addwf	fsr1l,w,c
 12408   011F4A  6ED9               	movwf	fsr2l,c
 12409   011F4C  0EFF               	movlw	255
 12410   011F4E  20E2               	addwfc	fsr1h,w,c
 12411   011F50  6EDA               	movwf	fsr2h,c
 12412   011F52  0E05               	movlw	5
 12413   011F54  6EDF               	movwf	indf2,c
 12414   011F56                     
 12415                           ;can/can.c: 183:     DRV_CANFDSPI_TransmitQueueConfigure(&txqConfig);
 12416                           ;stkvar	_txqConfig @ sp[(-13)+0]
 12417   011F56  0EF3               	movlw	243
 12418   011F58  24E1               	addwf	fsr1l,w,c
 12419   011F5A  6E2D               	movwf	btemp^0,c
 12420   011F5C  0EFF               	movlw	255
 12421   011F5E  20E2               	addwfc	fsr1h,w,c
 12422   011F60  6E2E               	movwf	(btemp+1)^0,c
 12423   011F62  C02D  FFE6         	movff	btemp,postinc1
 12424   011F66  C02E  FFE6         	movff	btemp+1,postinc1
 12425   011F6A  EC03  F096         	call	_DRV_CANFDSPI_TransmitQueueConfigure	;wreg free
 12426   011F6E                     
 12427                           ;can/can.c: 186:     CAN_TX_FIFO_CONFIG txfConfig;;can/can.c: 187:     DRV_CANFDSPI_Tran
      +                          smitChannelConfigureObjectReset(&txfConfig);
 12428                           ;stkvar	_txfConfig @ sp[(-13)+10]
 12429   011F6E  0EFD               	movlw	253
 12430   011F70  24E1               	addwf	fsr1l,w,c
 12431   011F72  6E2D               	movwf	btemp^0,c
 12432   011F74  0EFF               	movlw	255
 12433   011F76  20E2               	addwfc	fsr1h,w,c
 12434   011F78  6E2E               	movwf	(btemp+1)^0,c
 12435   011F7A  C02D  FFE6         	movff	btemp,postinc1
 12436   011F7E  C02E  FFE6         	movff	btemp+1,postinc1
 12437   011F82  ECA3  F096         	call	_DRV_CANFDSPI_TransmitChannelConfigureObjectReset	;wreg free
 12438   011F86                     
 12439                           ;can/can.c: 188:     txfConfig.FifoSize = 4;
 12440                           ;stkvar	_txfConfig @ sp[(-13)+10]
 12441   011F86  0EFE               	movlw	254
 12442   011F88  24E1               	addwf	fsr1l,w,c
 12443   011F8A  6ED9               	movwf	fsr2l,c
 12444   011F8C  0EFF               	movlw	255
 12445   011F8E  20E2               	addwfc	fsr1h,w,c
 12446   011F90  6EDA               	movwf	fsr2h,c
 12447   011F92  50DF               	movf	223,w,c
 12448   011F94  0BE0               	andlw	-32
 12449   011F96  0904               	iorlw	4
 12450   011F98  6EDF               	movwf	223,c
 12451   011F9A                     
 12452                           ;can/can.c: 189:     txfConfig.PayLoadSize = CAN_PLSIZE_64;
 12453                           ;stkvar	_txfConfig @ sp[(-13)+10]
 12454   011F9A  0EFE               	movlw	254
 12455   011F9C  24E1               	addwf	fsr1l,w,c
 12456   011F9E  6ED9               	movwf	fsr2l,c
 12457   011FA0  0EFF               	movlw	255
 12458   011FA2  20E2               	addwfc	fsr1h,w,c
 12459   011FA4  6EDA               	movwf	fsr2h,c
 12460   011FA6  0EE0               	movlw	224
 12461   011FA8  12DF               	iorwf	223,f,c
 12462   011FAA                     
 12463                           ;can/can.c: 190:     txfConfig.TxPriority = 0;
 12464                           ;stkvar	_txfConfig @ sp[(-13)+10]
 12465   011FAA  50E1               	movf	fsr1l,w,c
 12466   011FAC  0FFD               	addlw	-3
 12467   011FAE  6ED9               	movwf	fsr2l,c
 12468   011FB0  50E2               	movf	fsr1h,w,c
 12469   011FB2  6EDA               	movwf	fsr2h,c
 12470   011FB4  0EFF               	movlw	255
 12471   011FB6  22DA               	addwfc	fsr2h,f,c
 12472   011FB8  0EC1               	movlw	-63
 12473   011FBA  16DF               	andwf	223,f,c
 12474   011FBC                     
 12475                           ;can/can.c: 191:     DRV_CANFDSPI_TransmitChannelConfigure(CAN_FIFO_CH1,&txfConfig);
 12476                           ;stkvar	_txfConfig @ sp[(-13)+10]
 12477   011FBC  0EFD               	movlw	253
 12478   011FBE  24E1               	addwf	fsr1l,w,c
 12479   011FC0  6E2D               	movwf	btemp^0,c
 12480   011FC2  0EFF               	movlw	255
 12481   011FC4  20E2               	addwfc	fsr1h,w,c
 12482   011FC6  6E2E               	movwf	(btemp+1)^0,c
 12483   011FC8  C02D  FFE6         	movff	btemp,postinc1
 12484   011FCC  C02E  FFE6         	movff	btemp+1,postinc1
 12485   011FD0  0E01               	movlw	1
 12486   011FD2  6EE6               	movwf	postinc1,c
 12487   011FD4  ECEE  F091         	call	_DRV_CANFDSPI_TransmitChannelConfigure	;wreg free
 12488   011FD8                     
 12489                           ;can/can.c: 194:     CAN_RX_FIFO_CONFIG rxfConfig;;can/can.c: 195:     rxfConfig.FifoSiz
      +                          e = 15;
 12490                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 12491   011FD8  0EFB               	movlw	251
 12492   011FDA  24E1               	addwf	fsr1l,w,c
 12493   011FDC  6ED9               	movwf	fsr2l,c
 12494   011FDE  0EFF               	movlw	255
 12495   011FE0  20E2               	addwfc	fsr1h,w,c
 12496   011FE2  6EDA               	movwf	fsr2h,c
 12497   011FE4  0E0F               	movlw	15
 12498   011FE6  6EDF               	movwf	indf2,c
 12499   011FE8                     
 12500                           ;can/can.c: 196:     rxfConfig.PayLoadSize = CAN_PLSIZE_64;
 12501                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 12502   011FE8  0EFC               	movlw	252
 12503   011FEA  24E1               	addwf	fsr1l,w,c
 12504   011FEC  6ED9               	movwf	fsr2l,c
 12505   011FEE  0EFF               	movlw	255
 12506   011FF0  20E2               	addwfc	fsr1h,w,c
 12507   011FF2  6EDA               	movwf	fsr2h,c
 12508   011FF4  0E07               	movlw	7
 12509   011FF6  6EDF               	movwf	indf2,c
 12510   011FF8                     
 12511                           ;can/can.c: 197:     rxfConfig.RxTimeStampEnable = 1;
 12512                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 12513   011FF8  0EFA               	movlw	-6
 12514   011FFA  6AE3               	clrf	plusw1,c
 12515   011FFC  2AE3               	incf	plusw1,f,c
 12516   011FFE                     
 12517                           ;can/can.c: 198:     DRV_CANFDSPI_ReceiveChannelConfigure(CAN_FIFO_CH2,&rxfConfig);
 12518                           ;stkvar	_rxfConfig @ sp[(-13)+7]
 12519   011FFE  0EFA               	movlw	250
 12520   012000  24E1               	addwf	fsr1l,w,c
 12521   012002  6E2D               	movwf	btemp^0,c
 12522   012004  0EFF               	movlw	255
 12523   012006  20E2               	addwfc	fsr1h,w,c
 12524   012008  6E2E               	movwf	(btemp+1)^0,c
 12525   01200A  C02D  FFE6         	movff	btemp,postinc1
 12526   01200E  C02E  FFE6         	movff	btemp+1,postinc1
 12527   012012  0E02               	movlw	2
 12528   012014  6EE6               	movwf	postinc1,c
 12529   012016  EC62  F095         	call	_DRV_CANFDSPI_ReceiveChannelConfigure	;wreg free
 12530   01201A                     
 12531                           ;can/can.c: 200:     DRV_CANFDSPI_TimeStampPrescalerSet(39);
 12532   01201A  0E27               	movlw	39
 12533   01201C  6EE6               	movwf	postinc1,c
 12534   01201E  0E00               	movlw	0
 12535   012020  6EE6               	movwf	postinc1,c
 12536   012022  ECA6  F0A2         	call	_DRV_CANFDSPI_TimeStampPrescalerSet	;wreg free
 12537   012026                     
 12538                           ;can/can.c: 201:     DRV_CANFDSPI_TimeStampSet(0);
 12539   012026  0E00               	movlw	0
 12540   012028  6EE6               	movwf	postinc1,c
 12541   01202A  0E00               	movlw	0
 12542   01202C  6EE6               	movwf	postinc1,c
 12543   01202E  0E00               	movlw	0
 12544   012030  6EE6               	movwf	postinc1,c
 12545   012032  0E00               	movlw	0
 12546   012034  6EE6               	movwf	postinc1,c
 12547   012036  EC6E  F0A2         	call	_DRV_CANFDSPI_TimeStampSet	;wreg free
 12548   01203A                     
 12549                           ;can/can.c: 202:     DRV_CANFDSPI_TimeStampEnable();
 12550   01203A  ECE4  F0A0         	call	_DRV_CANFDSPI_TimeStampEnable	;wreg free
 12551   01203E                     
 12552                           ;can/can.c: 209:     if(withISR == 1)
 12553                           ;stkvar	_withISR @ sp[(-13)+-2]
 12554   01203E  0EF1               	movlw	-15
 12555   012040  04E3               	decf	plusw1,w,c
 12556   012042  A4D8               	btfss	status,2,c
 12557   012044  EF26  F090         	goto	u2701
 12558   012048  EF28  F090         	goto	u2700
 12559   01204C                     u2701:
 12560   01204C  EF30  F090         	goto	l4846
 12561   012050                     u2700:
 12562   012050                     
 12563                           ;can/can.c: 210:     {;can/can.c: 211:         DRV_CANFDSPI_ModuleEventEnable(0,CAN_RX_E
      +                          VENT);
 12564   012050  0E02               	movlw	2
 12565   012052  6EE6               	movwf	postinc1,c
 12566   012054  0E00               	movlw	0
 12567   012056  6EE6               	movwf	postinc1,c
 12568   012058  0E00               	movlw	0
 12569   01205A  6EE6               	movwf	postinc1,c
 12570   01205C  EC81  F0A0         	call	_DRV_CANFDSPI_ModuleEventEnable	;wreg free
 12571   012060                     l4846:
 12572                           
 12573                           ;can/can.c: 214:     DRV_CANFDSPI_OperationModeSelect(CAN_CLASSIC_MODE);
 12574   012060  0E06               	movlw	6
 12575   012062  6EE6               	movwf	postinc1,c
 12576   012064  EC9D  F09F         	call	_DRV_CANFDSPI_OperationModeSelect	;wreg free
 12577   012068                     
 12578                           ; _CanInit: autosize = 13, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, args
      +                          ize = 2, vargsize = 0
 12579   012068  0EF1               	movlw	241
 12580   01206A  26E1               	addwf	fsr1l,f,c
 12581   01206C  0EFF               	movlw	255
 12582   01206E  22E2               	addwfc	fsr1h,f,c
 12583   012070  0012               	return		;funcret
 12584   012072                     __end_of_CanInit:
 12585                           	callstack 0
 12586                           
 12587 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigureObjectReset *****************
 12588 ;; Defined at:
 12589 ;;		line 693 in file "can/can.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 12592 ;;		 -> txqConfig(4), 
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 12595 ;; Return value:  Size  Location     Type
 12596 ;;                  1  [STACK] char 
 12597 ;; Registers used:
 12598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;Total ram usage:        0 bytes
 12609 ;; Hardware stack levels used: 1
 12610 ;; Hardware stack levels required when called: 7
 12611 ;; This function calls:
 12612 ;;		Nothing
 12613 ;; This function is called by:
 12614 ;;		_CanInit
 12615 ;; This function uses a reentrant model
 12616 ;;
 12617                           
 12618                           	psect	text46
 12619   013098                     __ptext46:
 12620                           	callstack 0
 12621   013098                     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 12622                           	callstack 0
 12623                           
 12624                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12625   013098  0E05               	movlw	5
 12626   01309A  26E1               	addwf	fsr1l,f,c
 12627   01309C  0E00               	movlw	0
 12628   01309E  22E2               	addwfc	fsr1h,f,c
 12629   0130A0                     
 12630                           ;can/can.c: 693: int8_t DRV_CANFDSPI_TransmitQueueConfigureObjectReset(CAN_TX_QUEUE_CONF
      +                          IG* config);can/can.c: 694: {;can/can.c: 695:     REG_CiFIFOCON ciFifoCon;;can/can.c: 69
      +                          6:     ciFifoCon.word = canFifoResetValues[0];
 12631   0130A0  0EDD               	movlw	low _canFifoResetValues
 12632   0130A2  6EF6               	movwf	tblptrl,c
 12633   0130A4                     	if	1	;There is more than 1 active tblptr byte
 12634   0130A4  0EFF               	movlw	high _canFifoResetValues
 12635   0130A6  6EF7               	movwf	tblptrh,c
 12636   0130A8                     	endif
 12637   0130A8                     	if	1	;There are 3 active tblptr bytes
 12638   0130A8  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 12639   0130AA  6EF8               	movwf	tblptru,c
 12640   0130AC                     	endif
 12641   0130AC  0009               	tblrd		*+
 12642   0130AE  CFF5 F035          	movff	tablat,btemp+8
 12643   0130B2  0009               	tblrd		*+
 12644   0130B4  CFF5 F036          	movff	tablat,btemp+9
 12645   0130B8  0009               	tblrd		*+
 12646   0130BA  CFF5 F037          	movff	tablat,btemp+10
 12647   0130BE  0009               	tblrd		*+
 12648   0130C0  CFF5 F038          	movff	tablat,btemp+11
 12649                           
 12650                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 12651   0130C4  0EFB               	movlw	-5
 12652   0130C6  C035  FFE3         	movff	btemp+8,plusw1
 12653   0130CA  0EFC               	movlw	-4
 12654   0130CC  C036  FFE3         	movff	btemp+9,plusw1
 12655   0130D0  0EFD               	movlw	-3
 12656   0130D2  C037  FFE3         	movff	btemp+10,plusw1
 12657   0130D6  0EFE               	movlw	-2
 12658   0130D8  C038  FFE3         	movff	btemp+11,plusw1
 12659   0130DC                     
 12660                           ;can/can.c: 698:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 12661                           ;stkvar	_config @ sp[(-5)+-2]
 12662   0130DC  0EF9               	movlw	-7
 12663   0130DE  CFE3 FFD9          	movff	plusw1,fsr2l
 12664   0130E2  0EFA               	movlw	-6
 12665   0130E4  CFE3 FFDA          	movff	plusw1,fsr2h
 12666                           
 12667                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 12668   0130E8  0EFD               	movlw	253
 12669   0130EA  24E1               	addwf	fsr1l,w,c
 12670   0130EC  6EE9               	movwf	fsr0l,c
 12671   0130EE  0EFF               	movlw	255
 12672   0130F0  20E2               	addwfc	fsr1h,w,c
 12673   0130F2  6EEA               	movwf	fsr0h,c
 12674   0130F4  50EF               	movf	239,w,c
 12675   0130F6  0B1F               	andlw	31
 12676   0130F8  6EDF               	movwf	indf2,c
 12677   0130FA                     
 12678                           ;can/can.c: 699:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 12679                           ;stkvar	_config @ sp[(-5)+-2]
 12680   0130FA  0EF9               	movlw	-7
 12681   0130FC  CFE3 F037          	movff	plusw1,btemp+10
 12682   013100  0EFA               	movlw	-6
 12683   013102  CFE3 F038          	movff	plusw1,btemp+11
 12684   013106  0E01               	movlw	1
 12685   013108  2437               	addwf	(btemp+10)^0,w,c
 12686   01310A  6ED9               	movwf	fsr2l,c
 12687   01310C  0E00               	movlw	0
 12688   01310E  2038               	addwfc	(btemp+11)^0,w,c
 12689   013110  6EDA               	movwf	fsr2h,c
 12690                           
 12691                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 12692   013112  0EFD               	movlw	253
 12693   013114  24E1               	addwf	fsr1l,w,c
 12694   013116  6EE9               	movwf	fsr0l,c
 12695   013118  0EFF               	movlw	255
 12696   01311A  20E2               	addwfc	fsr1h,w,c
 12697   01311C  6EEA               	movwf	fsr0h,c
 12698   01311E  38EF               	swapf	239,w,c
 12699   013120  32E8               	rrcf	wreg,f,c
 12700   013122  0B03               	andlw	3
 12701   013124  6EDF               	movwf	indf2,c
 12702   013126                     
 12703                           ;can/can.c: 700:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 12704                           ;stkvar	_config @ sp[(-5)+-2]
 12705   013126  0EF9               	movlw	-7
 12706   013128  CFE3 F037          	movff	plusw1,btemp+10
 12707   01312C  0EFA               	movlw	-6
 12708   01312E  CFE3 F038          	movff	plusw1,btemp+11
 12709   013132  0E02               	movlw	2
 12710   013134  2437               	addwf	(btemp+10)^0,w,c
 12711   013136  6ED9               	movwf	fsr2l,c
 12712   013138  0E00               	movlw	0
 12713   01313A  2038               	addwfc	(btemp+11)^0,w,c
 12714   01313C  6EDA               	movwf	fsr2h,c
 12715                           
 12716                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 12717   01313E  0EFE               	movlw	254
 12718   013140  24E1               	addwf	fsr1l,w,c
 12719   013142  6EE9               	movwf	fsr0l,c
 12720   013144  0EFF               	movlw	255
 12721   013146  20E2               	addwfc	fsr1h,w,c
 12722   013148  6EEA               	movwf	fsr0h,c
 12723   01314A  50EF               	movf	239,w,c
 12724   01314C  0B1F               	andlw	31
 12725   01314E  6EDF               	movwf	indf2,c
 12726   013150                     
 12727                           ;can/can.c: 701:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 12728                           ;stkvar	_config @ sp[(-5)+-2]
 12729   013150  0EF9               	movlw	-7
 12730   013152  CFE3 F037          	movff	plusw1,btemp+10
 12731   013156  0EFA               	movlw	-6
 12732   013158  CFE3 F038          	movff	plusw1,btemp+11
 12733   01315C  0E03               	movlw	3
 12734   01315E  2437               	addwf	(btemp+10)^0,w,c
 12735   013160  6ED9               	movwf	fsr2l,c
 12736   013162  0E00               	movlw	0
 12737   013164  2038               	addwfc	(btemp+11)^0,w,c
 12738   013166  6EDA               	movwf	fsr2h,c
 12739                           
 12740                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 12741   013168  0EFE               	movlw	254
 12742   01316A  24E1               	addwf	fsr1l,w,c
 12743   01316C  6EE9               	movwf	fsr0l,c
 12744   01316E  0EFF               	movlw	255
 12745   013170  20E2               	addwfc	fsr1h,w,c
 12746   013172  6EEA               	movwf	fsr0h,c
 12747   013174  38EF               	swapf	239,w,c
 12748   013176  32E8               	rrcf	wreg,f,c
 12749   013178  0B07               	andlw	7
 12750   01317A  6EDF               	movwf	indf2,c
 12751   01317C                     
 12752                           ; _DRV_CANFDSPI_TransmitQueueConfigureObjectReset: autosize = 5, savesize = 0, parsavesi
      +                          ze = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 12753   01317C  0EF9               	movlw	249
 12754   01317E  26E1               	addwf	fsr1l,f,c
 12755   013180  0EFF               	movlw	255
 12756   013182  22E2               	addwfc	fsr1h,f,c
 12757   013184  0012               	return		;funcret
 12758   013186                     __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset:
 12759                           	callstack 0
 12760                           
 12761 ;; *************** function _DRV_CANFDSPI_TransmitQueueConfigure *****************
 12762 ;; Defined at:
 12763 ;;		line 671 in file "can/can.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;  config          2  [STACK] PTR struct _CAN_TX_QUEUE
 12766 ;;		 -> txqConfig(4), 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  ciFifoCon       4  [STACK] struct _REG_CiTXQCON
 12769 ;;  a               2    0        unsigned short 
 12770 ;;  spiTransferE    1    0        char 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  1  [STACK] char 
 12773 ;; Registers used:
 12774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;Total ram usage:        0 bytes
 12785 ;; Hardware stack levels used: 1
 12786 ;; Hardware stack levels required when called: 9
 12787 ;; This function calls:
 12788 ;;		_DRV_CANFDSPI_WriteWord
 12789 ;; This function is called by:
 12790 ;;		_CanInit
 12791 ;; This function uses a reentrant model
 12792 ;;
 12793                           
 12794                           	psect	text47
 12795   012C06                     __ptext47:
 12796                           	callstack 0
 12797   012C06                     _DRV_CANFDSPI_TransmitQueueConfigure:
 12798                           	callstack 0
 12799                           
 12800                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 12801   012C06  52E6               	movf	postinc1,f,c
 12802   012C08  52E6               	movf	postinc1,f,c
 12803   012C0A  52E6               	movf	postinc1,f,c
 12804   012C0C  52E6               	movf	postinc1,f,c
 12805   012C0E                     
 12806                           ;can/can.c: 678:     REG_CiTXQCON ciFifoCon;;can/can.c: 679:     ciFifoCon.word = canFif
      +                          oResetValues[0];
 12807   012C0E  0EDD               	movlw	low _canFifoResetValues
 12808   012C10  6EF6               	movwf	tblptrl,c
 12809   012C12                     	if	1	;There is more than 1 active tblptr byte
 12810   012C12  0EFF               	movlw	high _canFifoResetValues
 12811   012C14  6EF7               	movwf	tblptrh,c
 12812   012C16                     	endif
 12813   012C16                     	if	1	;There are 3 active tblptr bytes
 12814   012C16  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 12815   012C18  6EF8               	movwf	tblptru,c
 12816   012C1A                     	endif
 12817   012C1A  0009               	tblrd		*+
 12818   012C1C  CFF5 F035          	movff	tablat,btemp+8
 12819   012C20  0009               	tblrd		*+
 12820   012C22  CFF5 F036          	movff	tablat,btemp+9
 12821   012C26  0009               	tblrd		*+
 12822   012C28  CFF5 F037          	movff	tablat,btemp+10
 12823   012C2C  0009               	tblrd		*+
 12824   012C2E  CFF5 F038          	movff	tablat,btemp+11
 12825                           
 12826                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12827   012C32  0EFC               	movlw	-4
 12828   012C34  C035  FFE3         	movff	btemp+8,plusw1
 12829   012C38  0EFD               	movlw	-3
 12830   012C3A  C036  FFE3         	movff	btemp+9,plusw1
 12831   012C3E  0EFE               	movlw	-2
 12832   012C40  C037  FFE3         	movff	btemp+10,plusw1
 12833   012C44  0EFF               	movlw	-1
 12834   012C46  C038  FFE3         	movff	btemp+11,plusw1
 12835   012C4A                     
 12836                           ;can/can.c: 681:     ciFifoCon.txBF.TxEnable = 1;
 12837                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12838   012C4A  50E1               	movf	fsr1l,w,c
 12839   012C4C  0FFC               	addlw	-4
 12840   012C4E  6ED9               	movwf	fsr2l,c
 12841   012C50  50E2               	movf	fsr1h,w,c
 12842   012C52  6EDA               	movwf	fsr2h,c
 12843   012C54  0EFF               	movlw	255
 12844   012C56  22DA               	addwfc	fsr2h,f,c
 12845   012C58  8EDF               	bsf	indf2,7,c
 12846   012C5A                     
 12847                           ;can/can.c: 682:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 12848                           ;stkvar	_config @ sp[(-4)+-2]
 12849   012C5A  0EFA               	movlw	-6
 12850   012C5C  CFE3 F037          	movff	plusw1,btemp+10
 12851   012C60  0EFB               	movlw	-5
 12852   012C62  CFE3 F038          	movff	plusw1,btemp+11
 12853   012C66  0E02               	movlw	2
 12854   012C68  2437               	addwf	(btemp+10)^0,w,c
 12855   012C6A  6ED9               	movwf	fsr2l,c
 12856   012C6C  0E00               	movlw	0
 12857   012C6E  2038               	addwfc	(btemp+11)^0,w,c
 12858   012C70  6EDA               	movwf	fsr2h,c
 12859   012C72  50DF               	movf	indf2,w,c
 12860   012C74  6E38               	movwf	(btemp+11)^0,c
 12861                           
 12862                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12863   012C76  0EFF               	movlw	255
 12864   012C78  24E1               	addwf	fsr1l,w,c
 12865   012C7A  6ED9               	movwf	fsr2l,c
 12866   012C7C  0EFF               	movlw	255
 12867   012C7E  20E2               	addwfc	fsr1h,w,c
 12868   012C80  6EDA               	movwf	fsr2h,c
 12869   012C82  50DF               	movf	223,w,c
 12870   012C84  1838               	xorwf	(btemp+11)^0,w,c
 12871   012C86  0BE0               	andlw	-32
 12872   012C88  1838               	xorwf	(btemp+11)^0,w,c
 12873   012C8A  6EDF               	movwf	223,c
 12874   012C8C                     
 12875                           ;can/can.c: 683:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 12876                           ;stkvar	_config @ sp[(-4)+-2]
 12877   012C8C  0EFA               	movlw	-6
 12878   012C8E  CFE3 F037          	movff	plusw1,btemp+10
 12879   012C92  0EFB               	movlw	-5
 12880   012C94  CFE3 F038          	movff	plusw1,btemp+11
 12881   012C98  0E03               	movlw	3
 12882   012C9A  2437               	addwf	(btemp+10)^0,w,c
 12883   012C9C  6ED9               	movwf	fsr2l,c
 12884   012C9E  0E00               	movlw	0
 12885   012CA0  2038               	addwfc	(btemp+11)^0,w,c
 12886   012CA2  6EDA               	movwf	fsr2h,c
 12887   012CA4  50DF               	movf	indf2,w,c
 12888   012CA6  6E38               	movwf	(btemp+11)^0,c
 12889                           
 12890                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12891   012CA8  0EFF               	movlw	255
 12892   012CAA  24E1               	addwf	fsr1l,w,c
 12893   012CAC  6ED9               	movwf	fsr2l,c
 12894   012CAE  0EFF               	movlw	255
 12895   012CB0  20E2               	addwfc	fsr1h,w,c
 12896   012CB2  6EDA               	movwf	fsr2h,c
 12897   012CB4  3A38               	swapf	(btemp+11)^0,f,c
 12898   012CB6  4638               	rlncf	(btemp+11)^0,f,c
 12899   012CB8  50DF               	movf	223,w,c
 12900   012CBA  1838               	xorwf	(btemp+11)^0,w,c
 12901   012CBC  0B1F               	andlw	-225
 12902   012CBE  1838               	xorwf	(btemp+11)^0,w,c
 12903   012CC0  6EDF               	movwf	223,c
 12904   012CC2                     
 12905                           ;can/can.c: 684:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 12906                           ;stkvar	_config @ sp[(-4)+-2]
 12907   012CC2  0EFA               	movlw	-6
 12908   012CC4  CFE3 F037          	movff	plusw1,btemp+10
 12909   012CC8  0EFB               	movlw	-5
 12910   012CCA  CFE3 F038          	movff	plusw1,btemp+11
 12911   012CCE  0E01               	movlw	1
 12912   012CD0  2437               	addwf	(btemp+10)^0,w,c
 12913   012CD2  6ED9               	movwf	fsr2l,c
 12914   012CD4  0E00               	movlw	0
 12915   012CD6  2038               	addwfc	(btemp+11)^0,w,c
 12916   012CD8  6EDA               	movwf	fsr2h,c
 12917   012CDA  50DF               	movf	indf2,w,c
 12918   012CDC  6E38               	movwf	(btemp+11)^0,c
 12919                           
 12920                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12921   012CDE  0EFE               	movlw	254
 12922   012CE0  24E1               	addwf	fsr1l,w,c
 12923   012CE2  6ED9               	movwf	fsr2l,c
 12924   012CE4  0EFF               	movlw	255
 12925   012CE6  20E2               	addwfc	fsr1h,w,c
 12926   012CE8  6EDA               	movwf	fsr2h,c
 12927   012CEA  3A38               	swapf	(btemp+11)^0,f,c
 12928   012CEC  4638               	rlncf	(btemp+11)^0,f,c
 12929   012CEE  50DF               	movf	223,w,c
 12930   012CF0  1838               	xorwf	(btemp+11)^0,w,c
 12931   012CF2  0B9F               	andlw	-97
 12932   012CF4  1838               	xorwf	(btemp+11)^0,w,c
 12933   012CF6  6EDF               	movwf	223,c
 12934   012CF8                     
 12935                           ;can/can.c: 685:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 12936                           ;stkvar	_config @ sp[(-4)+-2]
 12937   012CF8  0EFA               	movlw	-6
 12938   012CFA  CFE3 FFD9          	movff	plusw1,fsr2l
 12939   012CFE  0EFB               	movlw	-5
 12940   012D00  CFE3 FFDA          	movff	plusw1,fsr2h
 12941   012D04  50DF               	movf	indf2,w,c
 12942   012D06  6E38               	movwf	(btemp+11)^0,c
 12943                           
 12944                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12945   012D08  0EFE               	movlw	254
 12946   012D0A  24E1               	addwf	fsr1l,w,c
 12947   012D0C  6ED9               	movwf	fsr2l,c
 12948   012D0E  0EFF               	movlw	255
 12949   012D10  20E2               	addwfc	fsr1h,w,c
 12950   012D12  6EDA               	movwf	fsr2h,c
 12951   012D14  50DF               	movf	223,w,c
 12952   012D16  1838               	xorwf	(btemp+11)^0,w,c
 12953   012D18  0BE0               	andlw	-32
 12954   012D1A  1838               	xorwf	(btemp+11)^0,w,c
 12955   012D1C  6EDF               	movwf	223,c
 12956   012D1E                     
 12957                           ;stkvar	_ciFifoCon @ sp[(-4)+0]
 12958   012D1E  0EFC               	movlw	-4
 12959   012D20  CFE3 FFE6          	movff	plusw1,postinc1
 12960   012D24  CFE3 FFE6          	movff	plusw1,postinc1
 12961   012D28  CFE3 FFE6          	movff	plusw1,postinc1
 12962   012D2C  CFE3 FFE6          	movff	plusw1,postinc1
 12963   012D30  0E50               	movlw	80
 12964   012D32  6EE6               	movwf	postinc1,c
 12965   012D34  0E00               	movlw	0
 12966   012D36  6EE6               	movwf	postinc1,c
 12967   012D38  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 12968   012D3C                     
 12969                           ; _DRV_CANFDSPI_TransmitQueueConfigure: autosize = 4, savesize = 0, parsavesize = 0, tem
      +                          psize = 0 parsize = 2, argsize = 2, vargsize = 0
 12970   012D3C  0EFA               	movlw	250
 12971   012D3E  26E1               	addwf	fsr1l,f,c
 12972   012D40  0EFF               	movlw	255
 12973   012D42  22E2               	addwfc	fsr1h,f,c
 12974   012D44  0012               	return		;funcret
 12975   012D46                     __end_of_DRV_CANFDSPI_TransmitQueueConfigure:
 12976                           	callstack 0
 12977                           
 12978 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigureObjectReset *****************
 12979 ;; Defined at:
 12980 ;;		line 657 in file "can/can.c"
 12981 ;; Parameters:    Size  Location     Type
 12982 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 12983 ;;		 -> txfConfig(2), 
 12984 ;; Auto vars:     Size  Location     Type
 12985 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 12986 ;; Return value:  Size  Location     Type
 12987 ;;                  1  [STACK] char 
 12988 ;; Registers used:
 12989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 12990 ;; Tracked objects:
 12991 ;;		On entry : 0/0
 12992 ;;		On exit  : 0/0
 12993 ;;		Unchanged: 0/0
 12994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12999 ;;Total ram usage:        0 bytes
 13000 ;; Hardware stack levels used: 1
 13001 ;; Hardware stack levels required when called: 7
 13002 ;; This function calls:
 13003 ;;		Nothing
 13004 ;; This function is called by:
 13005 ;;		_CanInit
 13006 ;; This function uses a reentrant model
 13007 ;;
 13008                           
 13009                           	psect	text48
 13010   012D46                     __ptext48:
 13011                           	callstack 0
 13012   012D46                     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13013                           	callstack 0
 13014                           
 13015                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13016   012D46  0E05               	movlw	5
 13017   012D48  26E1               	addwf	fsr1l,f,c
 13018   012D4A  0E00               	movlw	0
 13019   012D4C  22E2               	addwfc	fsr1h,f,c
 13020   012D4E                     
 13021                           ;can/can.c: 657: int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CON
      +                          FIG* config);can/can.c: 658: {;can/can.c: 659:     REG_CiFIFOCON ciFifoCon;;can/can.c: 6
      +                          60:     ciFifoCon.word = canFifoResetValues[0];
 13022   012D4E  0EDD               	movlw	low _canFifoResetValues
 13023   012D50  6EF6               	movwf	tblptrl,c
 13024   012D52                     	if	1	;There is more than 1 active tblptr byte
 13025   012D52  0EFF               	movlw	high _canFifoResetValues
 13026   012D54  6EF7               	movwf	tblptrh,c
 13027   012D56                     	endif
 13028   012D56                     	if	1	;There are 3 active tblptr bytes
 13029   012D56  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13030   012D58  6EF8               	movwf	tblptru,c
 13031   012D5A                     	endif
 13032   012D5A  0009               	tblrd		*+
 13033   012D5C  CFF5 F035          	movff	tablat,btemp+8
 13034   012D60  0009               	tblrd		*+
 13035   012D62  CFF5 F036          	movff	tablat,btemp+9
 13036   012D66  0009               	tblrd		*+
 13037   012D68  CFF5 F037          	movff	tablat,btemp+10
 13038   012D6C  0009               	tblrd		*+
 13039   012D6E  CFF5 F038          	movff	tablat,btemp+11
 13040                           
 13041                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13042   012D72  0EFB               	movlw	-5
 13043   012D74  C035  FFE3         	movff	btemp+8,plusw1
 13044   012D78  0EFC               	movlw	-4
 13045   012D7A  C036  FFE3         	movff	btemp+9,plusw1
 13046   012D7E  0EFD               	movlw	-3
 13047   012D80  C037  FFE3         	movff	btemp+10,plusw1
 13048   012D84  0EFE               	movlw	-2
 13049   012D86  C038  FFE3         	movff	btemp+11,plusw1
 13050   012D8A                     
 13051                           ;can/can.c: 662:     config->RTREnable = ciFifoCon.txBF.RTREnable;
 13052                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13053   012D8A  50E1               	movf	fsr1l,w,c
 13054   012D8C  0FFB               	addlw	-5
 13055   012D8E  6ED9               	movwf	fsr2l,c
 13056   012D90  50E2               	movf	fsr1h,w,c
 13057   012D92  6EDA               	movwf	fsr2h,c
 13058   012D94  0EFF               	movlw	255
 13059   012D96  22DA               	addwfc	fsr2h,f,c
 13060                           
 13061                           ;stkvar	_config @ sp[(-5)+-2]
 13062   012D98  0EF9               	movlw	-7
 13063   012D9A  CFE3 FFE9          	movff	plusw1,fsr0l
 13064   012D9E  0EFA               	movlw	-6
 13065   012DA0  CFE3 FFEA          	movff	plusw1,fsr0h
 13066   012DA4  90EF               	bcf	indf0,0,c
 13067   012DA6  ACDF               	btfss	indf2,6,c
 13068   012DA8  EFD7  F096         	goto	u975
 13069   012DAC  80EF               	bsf	indf0,0,c
 13070   012DAE                     u975:
 13071   012DAE                     
 13072                           ;can/can.c: 663:     config->TxPriority = ciFifoCon.txBF.TxPriority;
 13073                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13074   012DAE  0EFD               	movlw	253
 13075   012DB0  24E1               	addwf	fsr1l,w,c
 13076   012DB2  6ED9               	movwf	fsr2l,c
 13077   012DB4  0EFF               	movlw	255
 13078   012DB6  20E2               	addwfc	fsr1h,w,c
 13079   012DB8  6EDA               	movwf	fsr2h,c
 13080   012DBA  50DF               	movf	223,w,c
 13081   012DBC  0B1F               	andlw	31
 13082   012DBE  6E38               	movwf	(btemp+11)^0,c
 13083                           
 13084                           ;stkvar	_config @ sp[(-5)+-2]
 13085   012DC0  0EF9               	movlw	-7
 13086   012DC2  CFE3 FFD9          	movff	plusw1,fsr2l
 13087   012DC6  0EFA               	movlw	-6
 13088   012DC8  CFE3 FFDA          	movff	plusw1,fsr2h
 13089   012DCC  4638               	rlncf	(btemp+11)^0,f,c
 13090   012DCE  50DF               	movf	223,w,c
 13091   012DD0  1838               	xorwf	(btemp+11)^0,w,c
 13092   012DD2  0BC1               	andlw	-63
 13093   012DD4  1838               	xorwf	(btemp+11)^0,w,c
 13094   012DD6  6EDF               	movwf	223,c
 13095   012DD8                     
 13096                           ;can/can.c: 664:     config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 13097                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13098   012DD8  0EFD               	movlw	253
 13099   012DDA  24E1               	addwf	fsr1l,w,c
 13100   012DDC  6ED9               	movwf	fsr2l,c
 13101   012DDE  0EFF               	movlw	255
 13102   012DE0  20E2               	addwfc	fsr1h,w,c
 13103   012DE2  6EDA               	movwf	fsr2h,c
 13104   012DE4  38DF               	swapf	223,w,c
 13105   012DE6  32E8               	rrcf	wreg,f,c
 13106   012DE8  0B03               	andlw	3
 13107   012DEA  6E38               	movwf	(btemp+11)^0,c
 13108                           
 13109                           ;stkvar	_config @ sp[(-5)+-2]
 13110   012DEC  0EF9               	movlw	-7
 13111   012DEE  CFE3 FFD9          	movff	plusw1,fsr2l
 13112   012DF2  0EFA               	movlw	-6
 13113   012DF4  CFE3 FFDA          	movff	plusw1,fsr2h
 13114   012DF8  3A38               	swapf	(btemp+11)^0,f,c
 13115   012DFA  4638               	rlncf	(btemp+11)^0,f,c
 13116   012DFC  4638               	rlncf	(btemp+11)^0,f,c
 13117   012DFE  50DF               	movf	223,w,c
 13118   012E00  1838               	xorwf	(btemp+11)^0,w,c
 13119   012E02  0B3F               	andlw	-193
 13120   012E04  1838               	xorwf	(btemp+11)^0,w,c
 13121   012E06  6EDF               	movwf	223,c
 13122   012E08                     
 13123                           ;can/can.c: 665:     config->FifoSize = ciFifoCon.txBF.FifoSize;
 13124                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13125   012E08  0EFE               	movlw	254
 13126   012E0A  24E1               	addwf	fsr1l,w,c
 13127   012E0C  6ED9               	movwf	fsr2l,c
 13128   012E0E  0EFF               	movlw	255
 13129   012E10  20E2               	addwfc	fsr1h,w,c
 13130   012E12  6EDA               	movwf	fsr2h,c
 13131   012E14  50DF               	movf	223,w,c
 13132   012E16  0B1F               	andlw	31
 13133   012E18  6E38               	movwf	(btemp+11)^0,c
 13134                           
 13135                           ;stkvar	_config @ sp[(-5)+-2]
 13136   012E1A  0EF9               	movlw	-7
 13137   012E1C  CFE3 F035          	movff	plusw1,btemp+8
 13138   012E20  0EFA               	movlw	-6
 13139   012E22  CFE3 F036          	movff	plusw1,btemp+9
 13140   012E26  0E01               	movlw	1
 13141   012E28  2435               	addwf	(btemp+8)^0,w,c
 13142   012E2A  6ED9               	movwf	fsr2l,c
 13143   012E2C  0E00               	movlw	0
 13144   012E2E  2036               	addwfc	(btemp+9)^0,w,c
 13145   012E30  6EDA               	movwf	fsr2h,c
 13146   012E32  50DF               	movf	223,w,c
 13147   012E34  1838               	xorwf	(btemp+11)^0,w,c
 13148   012E36  0BE0               	andlw	-32
 13149   012E38  1838               	xorwf	(btemp+11)^0,w,c
 13150   012E3A  6EDF               	movwf	223,c
 13151   012E3C                     
 13152                           ;can/can.c: 666:     config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 13153                           ;stkvar	_ciFifoCon @ sp[(-5)+0]
 13154   012E3C  0EFE               	movlw	254
 13155   012E3E  24E1               	addwf	fsr1l,w,c
 13156   012E40  6ED9               	movwf	fsr2l,c
 13157   012E42  0EFF               	movlw	255
 13158   012E44  20E2               	addwfc	fsr1h,w,c
 13159   012E46  6EDA               	movwf	fsr2h,c
 13160   012E48  38DF               	swapf	223,w,c
 13161   012E4A  32E8               	rrcf	wreg,f,c
 13162   012E4C  0B07               	andlw	7
 13163   012E4E  6E38               	movwf	(btemp+11)^0,c
 13164                           
 13165                           ;stkvar	_config @ sp[(-5)+-2]
 13166   012E50  0EF9               	movlw	-7
 13167   012E52  CFE3 F035          	movff	plusw1,btemp+8
 13168   012E56  0EFA               	movlw	-6
 13169   012E58  CFE3 F036          	movff	plusw1,btemp+9
 13170   012E5C  0E01               	movlw	1
 13171   012E5E  2435               	addwf	(btemp+8)^0,w,c
 13172   012E60  6ED9               	movwf	fsr2l,c
 13173   012E62  0E00               	movlw	0
 13174   012E64  2036               	addwfc	(btemp+9)^0,w,c
 13175   012E66  6EDA               	movwf	fsr2h,c
 13176   012E68  3A38               	swapf	(btemp+11)^0,f,c
 13177   012E6A  4638               	rlncf	(btemp+11)^0,f,c
 13178   012E6C  50DF               	movf	223,w,c
 13179   012E6E  1838               	xorwf	(btemp+11)^0,w,c
 13180   012E70  0B1F               	andlw	-225
 13181   012E72  1838               	xorwf	(btemp+11)^0,w,c
 13182   012E74  6EDF               	movwf	223,c
 13183   012E76                     
 13184                           ; _DRV_CANFDSPI_TransmitChannelConfigureObjectReset: autosize = 5, savesize = 0, parsave
      +                          size = 0, tempsize = 0 parsize = 2, argsize = 2, vargsize = 0
 13185   012E76  0EF9               	movlw	249
 13186   012E78  26E1               	addwf	fsr1l,f,c
 13187   012E7A  0EFF               	movlw	255
 13188   012E7C  22E2               	addwfc	fsr1h,f,c
 13189   012E7E  0012               	return		;funcret
 13190   012E80                     __end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset:
 13191                           	callstack 0
 13192                           
 13193 ;; *************** function _DRV_CANFDSPI_TransmitChannelConfigure *****************
 13194 ;; Defined at:
 13195 ;;		line 633 in file "can/can.c"
 13196 ;; Parameters:    Size  Location     Type
 13197 ;;  channel         1  [STACK] enum E5290
 13198 ;;  config          2  [STACK] PTR struct _CAN_TX_FIFO_
 13199 ;;		 -> txfConfig(2), 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 13202 ;;  a               2  [STACK] unsigned short 
 13203 ;;  spiTransferE    1    0        char 
 13204 ;; Return value:  Size  Location     Type
 13205 ;;                  1  [STACK] char 
 13206 ;; Registers used:
 13207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13217 ;;Total ram usage:        0 bytes
 13218 ;; Hardware stack levels used: 1
 13219 ;; Hardware stack levels required when called: 9
 13220 ;; This function calls:
 13221 ;;		_DRV_CANFDSPI_WriteWord
 13222 ;; This function is called by:
 13223 ;;		_CanInit
 13224 ;; This function uses a reentrant model
 13225 ;;
 13226                           
 13227                           	psect	text49
 13228   0123DC                     __ptext49:
 13229                           	callstack 0
 13230   0123DC                     _DRV_CANFDSPI_TransmitChannelConfigure:
 13231                           	callstack 0
 13232                           
 13233                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13234   0123DC  0E07               	movlw	7
 13235   0123DE  26E1               	addwf	fsr1l,f,c
 13236   0123E0  0E00               	movlw	0
 13237   0123E2  22E2               	addwfc	fsr1h,f,c
 13238   0123E4                     
 13239                           ;can/can.c: 640:     REG_CiFIFOCON ciFifoCon;;can/can.c: 641:     ciFifoCon.word = canFi
      +                          foResetValues[0];
 13240   0123E4  0EDD               	movlw	low _canFifoResetValues
 13241   0123E6  6EF6               	movwf	tblptrl,c
 13242   0123E8                     	if	1	;There is more than 1 active tblptr byte
 13243   0123E8  0EFF               	movlw	high _canFifoResetValues
 13244   0123EA  6EF7               	movwf	tblptrh,c
 13245   0123EC                     	endif
 13246   0123EC                     	if	1	;There are 3 active tblptr bytes
 13247   0123EC  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13248   0123EE  6EF8               	movwf	tblptru,c
 13249   0123F0                     	endif
 13250   0123F0  0009               	tblrd		*+
 13251   0123F2  CFF5 F035          	movff	tablat,btemp+8
 13252   0123F6  0009               	tblrd		*+
 13253   0123F8  CFF5 F036          	movff	tablat,btemp+9
 13254   0123FC  0009               	tblrd		*+
 13255   0123FE  CFF5 F037          	movff	tablat,btemp+10
 13256   012402  0009               	tblrd		*+
 13257   012404  CFF5 F038          	movff	tablat,btemp+11
 13258                           
 13259                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13260   012408  0EF9               	movlw	-7
 13261   01240A  C035  FFE3         	movff	btemp+8,plusw1
 13262   01240E  0EFA               	movlw	-6
 13263   012410  C036  FFE3         	movff	btemp+9,plusw1
 13264   012414  0EFB               	movlw	-5
 13265   012416  C037  FFE3         	movff	btemp+10,plusw1
 13266   01241A  0EFC               	movlw	-4
 13267   01241C  C038  FFE3         	movff	btemp+11,plusw1
 13268   012420                     
 13269                           ;can/can.c: 643:     ciFifoCon.txBF.TxEnable = 1;
 13270                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13271   012420  50E1               	movf	fsr1l,w,c
 13272   012422  0FF9               	addlw	-7
 13273   012424  6ED9               	movwf	fsr2l,c
 13274   012426  50E2               	movf	fsr1h,w,c
 13275   012428  6EDA               	movwf	fsr2h,c
 13276   01242A  0EFF               	movlw	255
 13277   01242C  22DA               	addwfc	fsr2h,f,c
 13278   01242E  8EDF               	bsf	indf2,7,c
 13279   012430                     
 13280                           ;can/can.c: 644:     ciFifoCon.txBF.FifoSize = config->FifoSize;
 13281                           ;stkvar	_config @ sp[(-7)+-3]
 13282   012430  0EF6               	movlw	-10
 13283   012432  CFE3 F037          	movff	plusw1,btemp+10
 13284   012436  0EF7               	movlw	-9
 13285   012438  CFE3 F038          	movff	plusw1,btemp+11
 13286   01243C  0E01               	movlw	1
 13287   01243E  2437               	addwf	(btemp+10)^0,w,c
 13288   012440  6ED9               	movwf	fsr2l,c
 13289   012442  0E00               	movlw	0
 13290   012444  2038               	addwfc	(btemp+11)^0,w,c
 13291   012446  6EDA               	movwf	fsr2h,c
 13292   012448  50DF               	movf	223,w,c
 13293   01244A  0B1F               	andlw	31
 13294   01244C  6E38               	movwf	(btemp+11)^0,c
 13295                           
 13296                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13297   01244E  0EFC               	movlw	252
 13298   012450  24E1               	addwf	fsr1l,w,c
 13299   012452  6ED9               	movwf	fsr2l,c
 13300   012454  0EFF               	movlw	255
 13301   012456  20E2               	addwfc	fsr1h,w,c
 13302   012458  6EDA               	movwf	fsr2h,c
 13303   01245A  50DF               	movf	223,w,c
 13304   01245C  1838               	xorwf	(btemp+11)^0,w,c
 13305   01245E  0BE0               	andlw	-32
 13306   012460  1838               	xorwf	(btemp+11)^0,w,c
 13307   012462  6EDF               	movwf	223,c
 13308   012464                     
 13309                           ;can/can.c: 645:     ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 13310                           ;stkvar	_config @ sp[(-7)+-3]
 13311   012464  0EF6               	movlw	-10
 13312   012466  CFE3 F037          	movff	plusw1,btemp+10
 13313   01246A  0EF7               	movlw	-9
 13314   01246C  CFE3 F038          	movff	plusw1,btemp+11
 13315   012470  0E01               	movlw	1
 13316   012472  2437               	addwf	(btemp+10)^0,w,c
 13317   012474  6ED9               	movwf	fsr2l,c
 13318   012476  0E00               	movlw	0
 13319   012478  2038               	addwfc	(btemp+11)^0,w,c
 13320   01247A  6EDA               	movwf	fsr2h,c
 13321   01247C  38DF               	swapf	223,w,c
 13322   01247E  32E8               	rrcf	wreg,f,c
 13323   012480  0B07               	andlw	7
 13324   012482  6E38               	movwf	(btemp+11)^0,c
 13325                           
 13326                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13327   012484  0EFC               	movlw	252
 13328   012486  24E1               	addwf	fsr1l,w,c
 13329   012488  6ED9               	movwf	fsr2l,c
 13330   01248A  0EFF               	movlw	255
 13331   01248C  20E2               	addwfc	fsr1h,w,c
 13332   01248E  6EDA               	movwf	fsr2h,c
 13333   012490  3A38               	swapf	(btemp+11)^0,f,c
 13334   012492  4638               	rlncf	(btemp+11)^0,f,c
 13335   012494  50DF               	movf	223,w,c
 13336   012496  1838               	xorwf	(btemp+11)^0,w,c
 13337   012498  0B1F               	andlw	-225
 13338   01249A  1838               	xorwf	(btemp+11)^0,w,c
 13339   01249C  6EDF               	movwf	223,c
 13340   01249E                     
 13341                           ;can/can.c: 646:     ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 13342                           ;stkvar	_config @ sp[(-7)+-3]
 13343   01249E  0EF6               	movlw	-10
 13344   0124A0  CFE3 FFD9          	movff	plusw1,fsr2l
 13345   0124A4  0EF7               	movlw	-9
 13346   0124A6  CFE3 FFDA          	movff	plusw1,fsr2h
 13347   0124AA  38DF               	swapf	223,w,c
 13348   0124AC  32E8               	rrcf	wreg,f,c
 13349   0124AE  32E8               	rrcf	wreg,f,c
 13350   0124B0  0B03               	andlw	3
 13351   0124B2  6E38               	movwf	(btemp+11)^0,c
 13352                           
 13353                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13354   0124B4  0EFB               	movlw	251
 13355   0124B6  24E1               	addwf	fsr1l,w,c
 13356   0124B8  6ED9               	movwf	fsr2l,c
 13357   0124BA  0EFF               	movlw	255
 13358   0124BC  20E2               	addwfc	fsr1h,w,c
 13359   0124BE  6EDA               	movwf	fsr2h,c
 13360   0124C0  3A38               	swapf	(btemp+11)^0,f,c
 13361   0124C2  4638               	rlncf	(btemp+11)^0,f,c
 13362   0124C4  50DF               	movf	223,w,c
 13363   0124C6  1838               	xorwf	(btemp+11)^0,w,c
 13364   0124C8  0B9F               	andlw	-97
 13365   0124CA  1838               	xorwf	(btemp+11)^0,w,c
 13366   0124CC  6EDF               	movwf	223,c
 13367   0124CE                     
 13368                           ;can/can.c: 647:     ciFifoCon.txBF.TxPriority = config->TxPriority;
 13369                           ;stkvar	_config @ sp[(-7)+-3]
 13370   0124CE  0EF6               	movlw	-10
 13371   0124D0  CFE3 FFD9          	movff	plusw1,fsr2l
 13372   0124D4  0EF7               	movlw	-9
 13373   0124D6  CFE3 FFDA          	movff	plusw1,fsr2h
 13374   0124DA  30DF               	rrcf	223,w,c
 13375   0124DC  0B1F               	andlw	31
 13376   0124DE  6E38               	movwf	(btemp+11)^0,c
 13377                           
 13378                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13379   0124E0  0EFB               	movlw	251
 13380   0124E2  24E1               	addwf	fsr1l,w,c
 13381   0124E4  6ED9               	movwf	fsr2l,c
 13382   0124E6  0EFF               	movlw	255
 13383   0124E8  20E2               	addwfc	fsr1h,w,c
 13384   0124EA  6EDA               	movwf	fsr2h,c
 13385   0124EC  50DF               	movf	223,w,c
 13386   0124EE  1838               	xorwf	(btemp+11)^0,w,c
 13387   0124F0  0BE0               	andlw	-32
 13388   0124F2  1838               	xorwf	(btemp+11)^0,w,c
 13389   0124F4  6EDF               	movwf	223,c
 13390   0124F6                     
 13391                           ;can/can.c: 648:     ciFifoCon.txBF.RTREnable = config->RTREnable;
 13392                           ;stkvar	_config @ sp[(-7)+-3]
 13393   0124F6  0EF6               	movlw	-10
 13394   0124F8  CFE3 FFD9          	movff	plusw1,fsr2l
 13395   0124FC  0EF7               	movlw	-9
 13396   0124FE  CFE3 FFDA          	movff	plusw1,fsr2h
 13397                           
 13398                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13399   012502  50E1               	movf	fsr1l,w,c
 13400   012504  0FF9               	addlw	-7
 13401   012506  6EE9               	movwf	fsr0l,c
 13402   012508  50E2               	movf	fsr1h,w,c
 13403   01250A  6EEA               	movwf	fsr0h,c
 13404   01250C  0EFF               	movlw	255
 13405   01250E  22EA               	addwfc	fsr0h,f,c
 13406   012510  9CEF               	bcf	indf0,6,c
 13407   012512  A0DF               	btfss	indf2,0,c
 13408   012514  EF8D  F092         	goto	u2335
 13409   012518  8CEF               	bsf	indf0,6,c
 13410   01251A                     u2335:
 13411   01251A                     
 13412                           ;can/can.c: 650:     a = 0x050 + (channel * (3*4));
 13413                           ;stkvar	_channel @ sp[(-7)+-1]
 13414   01251A  0EF8               	movlw	-8
 13415   01251C  50E3               	movf	plusw1,w,c
 13416   01251E  0D0C               	mullw	12
 13417   012520  0E50               	movlw	80
 13418   012522  26F3               	addwf	243,f,c
 13419   012524  0E00               	movlw	0
 13420   012526  22F4               	addwfc	244,f,c
 13421                           
 13422                           ;stkvar	_a @ sp[(-7)+5]
 13423   012528  0EFE               	movlw	-2
 13424   01252A  CFF3 FFE3          	movff	prodl,plusw1
 13425   01252E  0EFF               	movlw	-1
 13426   012530  CFF4 FFE3          	movff	prodh,plusw1
 13427   012534                     
 13428                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 13429   012534  0EF9               	movlw	-7
 13430   012536  CFE3 FFE6          	movff	plusw1,postinc1
 13431   01253A  CFE3 FFE6          	movff	plusw1,postinc1
 13432   01253E  CFE3 FFE6          	movff	plusw1,postinc1
 13433   012542  CFE3 FFE6          	movff	plusw1,postinc1
 13434                           
 13435                           ;stkvar	_a @ sp[(-11)+5]
 13436   012546  0EFA               	movlw	-6
 13437   012548  CFE3 FFE6          	movff	plusw1,postinc1
 13438   01254C  CFE3 FFE6          	movff	plusw1,postinc1
 13439   012550  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13440   012554                     
 13441                           ; _DRV_CANFDSPI_TransmitChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, t
      +                          empsize = 0 parsize = 3, argsize = 3, vargsize = 0
 13442   012554  0EF6               	movlw	246
 13443   012556  26E1               	addwf	fsr1l,f,c
 13444   012558  0EFF               	movlw	255
 13445   01255A  22E2               	addwfc	fsr1h,f,c
 13446   01255C  0012               	return		;funcret
 13447   01255E                     __end_of_DRV_CANFDSPI_TransmitChannelConfigure:
 13448                           	callstack 0
 13449                           
 13450 ;; *************** function _DRV_CANFDSPI_TimeStampSet *****************
 13451 ;; Defined at:
 13452 ;;		line 2690 in file "can/can.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  ts              4  [STACK] unsigned long 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  spiTransferE    1    0        char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1  [STACK] char 
 13459 ;; Registers used:
 13460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:        0 bytes
 13471 ;; Hardware stack levels used: 1
 13472 ;; Hardware stack levels required when called: 9
 13473 ;; This function calls:
 13474 ;;		_DRV_CANFDSPI_WriteWord
 13475 ;; This function is called by:
 13476 ;;		_CanInit
 13477 ;; This function uses a reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text50
 13481   0144DC                     __ptext50:
 13482                           	callstack 0
 13483   0144DC                     _DRV_CANFDSPI_TimeStampSet:
 13484                           	callstack 20
 13485   0144DC                     
 13486                           ;stkvar	_ts @ sp[(0)+-4]
 13487   0144DC  0EFC               	movlw	-4
 13488   0144DE  CFE3 FFE6          	movff	plusw1,postinc1
 13489   0144E2  CFE3 FFE6          	movff	plusw1,postinc1
 13490   0144E6  CFE3 FFE6          	movff	plusw1,postinc1
 13491   0144EA  CFE3 FFE6          	movff	plusw1,postinc1
 13492   0144EE  0E10               	movlw	16
 13493   0144F0  6EE6               	movwf	postinc1,c
 13494   0144F2  0E00               	movlw	0
 13495   0144F4  6EE6               	movwf	postinc1,c
 13496   0144F6  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13497   0144FA                     
 13498                           ; _DRV_CANFDSPI_TimeStampSet: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 4, argsize = 4, vargsize = 0
 13499   0144FA  52E5               	movf	postdec1,f,c
 13500   0144FC  52E5               	movf	postdec1,f,c
 13501   0144FE  52E5               	movf	postdec1,f,c
 13502   014500  52E5               	movf	postdec1,f,c
 13503   014502  0012               	return		;funcret
 13504   014504                     __end_of_DRV_CANFDSPI_TimeStampSet:
 13505                           	callstack 0
 13506                           
 13507 ;; *************** function _DRV_CANFDSPI_TimeStampPrescalerSet *****************
 13508 ;; Defined at:
 13509 ;;		line 2725 in file "can/can.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  ps              2  [STACK] unsigned short 
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;  spiTransferE    1    0        char 
 13514 ;; Return value:  Size  Location     Type
 13515 ;;                  1  [STACK] char 
 13516 ;; Registers used:
 13517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 13518 ;; Tracked objects:
 13519 ;;		On entry : 0/0
 13520 ;;		On exit  : 0/0
 13521 ;;		Unchanged: 0/0
 13522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13527 ;;Total ram usage:        0 bytes
 13528 ;; Hardware stack levels used: 1
 13529 ;; Hardware stack levels required when called: 9
 13530 ;; This function calls:
 13531 ;;		_DRV_CANFDSPI_WriteHalfWord
 13532 ;; This function is called by:
 13533 ;;		_CanInit
 13534 ;; This function uses a reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text51
 13538   01454C                     __ptext51:
 13539                           	callstack 0
 13540   01454C                     _DRV_CANFDSPI_TimeStampPrescalerSet:
 13541                           	callstack 20
 13542   01454C                     
 13543                           ;stkvar	_ps @ sp[(0)+-2]
 13544   01454C  0EFE               	movlw	-2
 13545   01454E  CFE3 FFE6          	movff	plusw1,postinc1
 13546   014552  CFE3 FFE6          	movff	plusw1,postinc1
 13547   014556  0E14               	movlw	20
 13548   014558  6EE6               	movwf	postinc1,c
 13549   01455A  0E00               	movlw	0
 13550   01455C  6EE6               	movwf	postinc1,c
 13551   01455E  EC48  F09B         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 13552   014562                     
 13553                           ; _DRV_CANFDSPI_TimeStampPrescalerSet: autosize = 0, savesize = 0, parsavesize = 0, temp
      +                          size = 0 parsize = 2, argsize = 2, vargsize = 0
 13554   014562  52E5               	movf	postdec1,f,c
 13555   014564  52E5               	movf	postdec1,f,c
 13556   014566  0012               	return		;funcret
 13557   014568                     __end_of_DRV_CANFDSPI_TimeStampPrescalerSet:
 13558                           	callstack 0
 13559                           
 13560 ;; *************** function _DRV_CANFDSPI_TimeStampEnable *****************
 13561 ;; Defined at:
 13562 ;;		line 2634 in file "can/can.c"
 13563 ;; Parameters:    Size  Location     Type
 13564 ;;		None
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;  d               1  [STACK] unsigned char 
 13567 ;;  spiTransferE    1  [STACK] char 
 13568 ;; Return value:  Size  Location     Type
 13569 ;;                  1  [STACK] char 
 13570 ;; Registers used:
 13571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 13572 ;; Tracked objects:
 13573 ;;		On entry : 0/0
 13574 ;;		On exit  : 0/0
 13575 ;;		Unchanged: 0/0
 13576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13581 ;;Total ram usage:        0 bytes
 13582 ;; Hardware stack levels used: 1
 13583 ;; Hardware stack levels required when called: 9
 13584 ;; This function calls:
 13585 ;;		_DRV_CANFDSPI_ReadByte
 13586 ;;		_DRV_CANFDSPI_WriteByte
 13587 ;; This function is called by:
 13588 ;;		_CanInit
 13589 ;; This function uses a reentrant model
 13590 ;;
 13591                           
 13592                           	psect	text52
 13593   0141C8                     __ptext52:
 13594                           	callstack 0
 13595   0141C8                     _DRV_CANFDSPI_TimeStampEnable:
 13596                           	callstack 0
 13597                           
 13598                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13599   0141C8  52E6               	movf	postinc1,f,c
 13600   0141CA  52E6               	movf	postinc1,f,c
 13601   0141CC                     
 13602                           ;can/can.c: 2637:     uint8_t d = 0;
 13603                           ;stkvar	_d @ sp[(-2)+0]
 13604   0141CC  0EFE               	movlw	-2
 13605   0141CE  6AE3               	clrf	plusw1,c
 13606   0141D0                     
 13607                           ;can/can.c: 2640:     spiTransferError = DRV_CANFDSPI_ReadByte( 0x014 + 2, &d);
 13608                           ;stkvar	_d @ sp[(-2)+0]
 13609   0141D0  0EFE               	movlw	254
 13610   0141D2  24E1               	addwf	fsr1l,w,c
 13611   0141D4  6E2D               	movwf	btemp^0,c
 13612   0141D6  0EFF               	movlw	255
 13613   0141D8  20E2               	addwfc	fsr1h,w,c
 13614   0141DA  6E2E               	movwf	(btemp+1)^0,c
 13615   0141DC  C02D  FFE6         	movff	btemp,postinc1
 13616   0141E0  C02E  FFE6         	movff	btemp+1,postinc1
 13617   0141E4  0E16               	movlw	22
 13618   0141E6  6EE6               	movwf	postinc1,c
 13619   0141E8  0E00               	movlw	0
 13620   0141EA  6EE6               	movwf	postinc1,c
 13621   0141EC  ECB3  F0A0         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 13622                           
 13623                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 13624   0141F0  0EFF               	movlw	-1
 13625   0141F2  C02D  FFE3         	movff	btemp,plusw1
 13626   0141F6                     
 13627                           ;can/can.c: 2641:     if (spiTransferError) {
 13628                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 13629   0141F6  0EFF               	movlw	-1
 13630   0141F8  50E3               	movf	plusw1,w,c
 13631   0141FA  B4D8               	btfsc	status,2,c
 13632   0141FC  EF02  F0A1         	goto	u2361
 13633   014200  EF04  F0A1         	goto	u2360
 13634   014204                     u2361:
 13635   014204  EF06  F0A1         	goto	l4532
 13636   014208                     u2360:
 13637   014208  EF11  F0A1         	goto	l623
 13638   01420C                     l4532:
 13639                           
 13640                           ;can/can.c: 2646:     d |= 0x01;
 13641                           ;stkvar	_d @ sp[(-2)+0]
 13642   01420C  0EFE               	movlw	-2
 13643   01420E  80E3               	bsf	plusw1,0,c
 13644   014210                     
 13645                           ;stkvar	_d @ sp[(-2)+0]
 13646   014210  0EFE               	movlw	-2
 13647   014212  50E3               	movf	plusw1,w,c
 13648   014214  6EE6               	movwf	postinc1,c
 13649   014216  0E16               	movlw	22
 13650   014218  6EE6               	movwf	postinc1,c
 13651   01421A  0E00               	movlw	0
 13652   01421C  6EE6               	movwf	postinc1,c
 13653   01421E  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 13654   014222                     l623:
 13655                           
 13656                           ; _DRV_CANFDSPI_TimeStampEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 13657   014222  52E5               	movf	postdec1,f,c
 13658   014224  52E5               	movf	postdec1,f,c
 13659   014226  0012               	return		;funcret
 13660   014228                     __end_of_DRV_CANFDSPI_TimeStampEnable:
 13661                           	callstack 0
 13662                           
 13663 ;; *************** function _DRV_CANFDSPI_TefConfigure *****************
 13664 ;; Defined at:
 13665 ;;		line 1539 in file "can/can.c"
 13666 ;; Parameters:    Size  Location     Type
 13667 ;;  config          2  [STACK] PTR struct _CAN_TEF_CONF
 13668 ;;		 -> tefConfig(1), 
 13669 ;; Auto vars:     Size  Location     Type
 13670 ;;  ciTefCon        4  [STACK] struct _REG_CiTEFCON
 13671 ;;  spiTransferE    1    0        char 
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1  [STACK] char 
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13685 ;;Total ram usage:        0 bytes
 13686 ;; Hardware stack levels used: 1
 13687 ;; Hardware stack levels required when called: 9
 13688 ;; This function calls:
 13689 ;;		_DRV_CANFDSPI_WriteWord
 13690 ;; This function is called by:
 13691 ;;		_CanInit
 13692 ;; This function uses a reentrant model
 13693 ;;
 13694                           
 13695                           	psect	text53
 13696   01381E                     __ptext53:
 13697                           	callstack 0
 13698   01381E                     _DRV_CANFDSPI_TefConfigure:
 13699                           	callstack 0
 13700                           
 13701                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 13702   01381E  52E6               	movf	postinc1,f,c
 13703   013820  52E6               	movf	postinc1,f,c
 13704   013822  52E6               	movf	postinc1,f,c
 13705   013824  52E6               	movf	postinc1,f,c
 13706   013826                     
 13707                           ;can/can.c: 1544:     REG_CiTEFCON ciTefCon;;can/can.c: 1545:     ciTefCon.word = canFif
      +                          oResetValues[0];
 13708   013826  0EDD               	movlw	low _canFifoResetValues
 13709   013828  6EF6               	movwf	tblptrl,c
 13710   01382A                     	if	1	;There is more than 1 active tblptr byte
 13711   01382A  0EFF               	movlw	high _canFifoResetValues
 13712   01382C  6EF7               	movwf	tblptrh,c
 13713   01382E                     	endif
 13714   01382E                     	if	1	;There are 3 active tblptr bytes
 13715   01382E  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 13716   013830  6EF8               	movwf	tblptru,c
 13717   013832                     	endif
 13718   013832  0009               	tblrd		*+
 13719   013834  CFF5 F035          	movff	tablat,btemp+8
 13720   013838  0009               	tblrd		*+
 13721   01383A  CFF5 F036          	movff	tablat,btemp+9
 13722   01383E  0009               	tblrd		*+
 13723   013840  CFF5 F037          	movff	tablat,btemp+10
 13724   013844  0009               	tblrd		*+
 13725   013846  CFF5 F038          	movff	tablat,btemp+11
 13726                           
 13727                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 13728   01384A  0EFC               	movlw	-4
 13729   01384C  C035  FFE3         	movff	btemp+8,plusw1
 13730   013850  0EFD               	movlw	-3
 13731   013852  C036  FFE3         	movff	btemp+9,plusw1
 13732   013856  0EFE               	movlw	-2
 13733   013858  C037  FFE3         	movff	btemp+10,plusw1
 13734   01385C  0EFF               	movlw	-1
 13735   01385E  C038  FFE3         	movff	btemp+11,plusw1
 13736   013862                     
 13737                           ;can/can.c: 1547:     ciTefCon.bF.FifoSize = config->FifoSize;
 13738                           ;stkvar	_config @ sp[(-4)+-2]
 13739   013862  0EFA               	movlw	-6
 13740   013864  CFE3 FFD9          	movff	plusw1,fsr2l
 13741   013868  0EFB               	movlw	-5
 13742   01386A  CFE3 FFDA          	movff	plusw1,fsr2h
 13743   01386E  30DF               	rrcf	223,w,c
 13744   013870  0B1F               	andlw	31
 13745   013872  6E38               	movwf	(btemp+11)^0,c
 13746                           
 13747                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 13748   013874  0EFF               	movlw	255
 13749   013876  24E1               	addwf	fsr1l,w,c
 13750   013878  6ED9               	movwf	fsr2l,c
 13751   01387A  0EFF               	movlw	255
 13752   01387C  20E2               	addwfc	fsr1h,w,c
 13753   01387E  6EDA               	movwf	fsr2h,c
 13754   013880  50DF               	movf	223,w,c
 13755   013882  1838               	xorwf	(btemp+11)^0,w,c
 13756   013884  0BE0               	andlw	-32
 13757   013886  1838               	xorwf	(btemp+11)^0,w,c
 13758   013888  6EDF               	movwf	223,c
 13759   01388A                     
 13760                           ;can/can.c: 1548:     ciTefCon.bF.TimeStampEnable = config->TimeStampEnable;
 13761                           ;stkvar	_config @ sp[(-4)+-2]
 13762   01388A  0EFA               	movlw	-6
 13763   01388C  CFE3 FFD9          	movff	plusw1,fsr2l
 13764   013890  0EFB               	movlw	-5
 13765   013892  CFE3 FFDA          	movff	plusw1,fsr2h
 13766                           
 13767                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 13768   013896  50E1               	movf	fsr1l,w,c
 13769   013898  0FFC               	addlw	-4
 13770   01389A  6EE9               	movwf	fsr0l,c
 13771   01389C  50E2               	movf	fsr1h,w,c
 13772   01389E  6EEA               	movwf	fsr0h,c
 13773   0138A0  0EFF               	movlw	255
 13774   0138A2  22EA               	addwfc	fsr0h,f,c
 13775   0138A4  9AEF               	bcf	indf0,5,c
 13776   0138A6  A0DF               	btfss	indf2,0,c
 13777   0138A8  EF57  F09C         	goto	u2325
 13778   0138AC  8AEF               	bsf	indf0,5,c
 13779   0138AE                     u2325:
 13780   0138AE                     
 13781                           ;stkvar	_ciTefCon @ sp[(-4)+0]
 13782   0138AE  0EFC               	movlw	-4
 13783   0138B0  CFE3 FFE6          	movff	plusw1,postinc1
 13784   0138B4  CFE3 FFE6          	movff	plusw1,postinc1
 13785   0138B8  CFE3 FFE6          	movff	plusw1,postinc1
 13786   0138BC  CFE3 FFE6          	movff	plusw1,postinc1
 13787   0138C0  0E40               	movlw	64
 13788   0138C2  6EE6               	movwf	postinc1,c
 13789   0138C4  0E00               	movlw	0
 13790   0138C6  6EE6               	movwf	postinc1,c
 13791   0138C8  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 13792   0138CC                     
 13793                           ; _DRV_CANFDSPI_TefConfigure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 2, argsize = 2, vargsize = 0
 13794   0138CC  0EFA               	movlw	250
 13795   0138CE  26E1               	addwf	fsr1l,f,c
 13796   0138D0  0EFF               	movlw	255
 13797   0138D2  22E2               	addwfc	fsr1h,f,c
 13798   0138D4  0012               	return		;funcret
 13799   0138D6                     __end_of_DRV_CANFDSPI_TefConfigure:
 13800                           	callstack 0
 13801                           
 13802 ;; *************** function _DRV_CANFDSPI_Reset *****************
 13803 ;; Defined at:
 13804 ;;		line 257 in file "can/can.c"
 13805 ;; Parameters:    Size  Location     Type
 13806 ;;		None
 13807 ;; Auto vars:     Size  Location     Type
 13808 ;;  spiTransferS    2    0        unsigned short 
 13809 ;;  spiTransferE    1    0        char 
 13810 ;; Return value:  Size  Location     Type
 13811 ;;                  1  [STACK] char 
 13812 ;; Registers used:
 13813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, p
      +rodh
 13814 ;; Tracked objects:
 13815 ;;		On entry : 0/0
 13816 ;;		On exit  : 0/0
 13817 ;;		Unchanged: 0/0
 13818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13823 ;;Total ram usage:        0 bytes
 13824 ;; Hardware stack levels used: 1
 13825 ;; Hardware stack levels required when called: 8
 13826 ;; This function calls:
 13827 ;;		_SPI2_Open
 13828 ;;		_SpiTransfer
 13829 ;; This function is called by:
 13830 ;;		_CanInit
 13831 ;; This function uses a reentrant model
 13832 ;;
 13833                           
 13834                           	psect	text54
 13835   0144B0                     __ptext54:
 13836                           	callstack 0
 13837   0144B0                     _DRV_CANFDSPI_Reset:
 13838                           	callstack 21
 13839   0144B0                     
 13840                           ;can/can.c: 263:     spiTransmitBuffer[0] = (uint8_t) (0x00 << 4);
 13841   0144B0  0101               	movlb	1	; () banked
 13842   0144B2  6B00               	clrf	_spiTransmitBuffer& (0+255),b
 13843   0144B4                     
 13844                           ; BSR set to: 1
 13845                           ;can/can.c: 264:     spiTransmitBuffer[1] = 0;
 13846   0144B4  6B01               	clrf	(_spiTransmitBuffer+1)& (0+255),b
 13847   0144B6                     
 13848                           ; BSR set to: 1
 13849                           ;can/can.c: 265:     SPI2_Open(SPI2_DEFAULT);
 13850   0144B6  0E00               	movlw	0
 13851   0144B8  6EE6               	movwf	postinc1,c
 13852   0144BA  EC6B  F09C         	call	_SPI2_Open	;wreg free
 13853   0144BE  0E02               	movlw	2
 13854   0144C0  6EE6               	movwf	postinc1,c
 13855   0144C2  0E00               	movlw	0
 13856   0144C4  6EE6               	movwf	postinc1,c
 13857   0144C6  0E00               	movlw	low _spiReceiveBuffer
 13858   0144C8  6EE6               	movwf	postinc1,c
 13859   0144CA  0E02               	movlw	high _spiReceiveBuffer
 13860   0144CC  6EE6               	movwf	postinc1,c
 13861   0144CE  0E00               	movlw	low _spiTransmitBuffer
 13862   0144D0  6EE6               	movwf	postinc1,c
 13863   0144D2  0E01               	movlw	high _spiTransmitBuffer
 13864   0144D4  6EE6               	movwf	postinc1,c
 13865   0144D6  ECAD  F09B         	call	_SpiTransfer	;wreg free
 13866   0144DA                     
 13867                           ; _DRV_CANFDSPI_Reset: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 0, argsize = 0, vargsize = 0
 13868   0144DA  0012               	return		;funcret
 13869   0144DC                     __end_of_DRV_CANFDSPI_Reset:
 13870                           	callstack 0
 13871                           
 13872 ;; *************** function _SPI2_Open *****************
 13873 ;; Defined at:
 13874 ;;		line 72 in file "mcc_generated_files/spi2.c"
 13875 ;; Parameters:    Size  Location     Type
 13876 ;;  spi2UniqueCo    1  [STACK] enum E358
 13877 ;; Auto vars:     Size  Location     Type
 13878 ;;		None
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1  [STACK] _Bool 
 13881 ;; Registers used:
 13882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
 13883 ;; Tracked objects:
 13884 ;;		On entry : 3F/1
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13892 ;;Total ram usage:        0 bytes
 13893 ;; Hardware stack levels used: 1
 13894 ;; Hardware stack levels required when called: 7
 13895 ;; This function calls:
 13896 ;;		Nothing
 13897 ;; This function is called by:
 13898 ;;		_DRV_CANFDSPI_Reset
 13899 ;; This function uses a reentrant model
 13900 ;;
 13901                           
 13902                           	psect	text55
 13903   0138D6                     __ptext55:
 13904                           	callstack 0
 13905   0138D6                     _SPI2_Open:
 13906                           	callstack 21
 13907   0138D6                     
 13908                           ;mcc_generated_files/spi2.c: 72: _Bool SPI2_Open(spi2_modes_t spi2UniqueConfiguration);m
      +                          cc_generated_files/spi2.c: 73: {;mcc_generated_files/spi2.c: 74:     if(!SSP2CON1bits.SS
      +                          PEN)
 13909   0138D6  BA63               	btfsc	99,5,c	;volatile
 13910   0138D8  EF70  F09C         	goto	u2091
 13911   0138DC  EF72  F09C         	goto	u2090
 13912   0138E0                     u2091:
 13913   0138E0  EFC4  F09C         	goto	l1120
 13914   0138E4                     u2090:
 13915   0138E4                     
 13916                           ;mcc_generated_files/spi2.c: 75:     {;mcc_generated_files/spi2.c: 76:         SSP2STAT 
      +                          = spi2_configuration[spi2UniqueConfiguration].stat;
 13917                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 13918   0138E4  0EFF               	movlw	-1
 13919   0138E6  50E3               	movf	plusw1,w,c
 13920   0138E8  0D04               	mullw	4
 13921   0138EA  0E01               	movlw	1
 13922   0138EC  26F3               	addwf	243,f,c
 13923   0138EE  0E00               	movlw	0
 13924   0138F0  22F4               	addwfc	244,f,c
 13925   0138F2  0EE9               	movlw	low _spi2_configuration
 13926   0138F4  24F3               	addwf	243,w,c
 13927   0138F6  6EF6               	movwf	tblptrl,c
 13928   0138F8  0EFF               	movlw	high _spi2_configuration
 13929   0138FA  20F4               	addwfc	244,w,c
 13930   0138FC  6EF7               	movwf	tblptrh,c
 13931   0138FE                     	if	1	;There are 3 active tblptr bytes
 13932   0138FE  6AF8               	clrf	tblptru,c
 13933   013900  0E00               	movlw	low (__mediumconst shr (0+16))
 13934   013902  22F8               	addwfc	tblptru,f,c
 13935   013904                     	endif
 13936   013904  0008               	tblrd		*
 13937   013906  CFF5 FF64          	movff	tablat,3940	;volatile
 13938                           
 13939                           ;mcc_generated_files/spi2.c: 77:         SSP2CON1 = spi2_configuration[spi2UniqueConfigu
      +                          ration].con1;
 13940                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 13941   01390A  0EFF               	movlw	-1
 13942   01390C  50E3               	movf	plusw1,w,c
 13943   01390E  0D04               	mullw	4
 13944   013910  0EE9               	movlw	low _spi2_configuration
 13945   013912  24F3               	addwf	243,w,c
 13946   013914  6EF6               	movwf	tblptrl,c
 13947   013916  0EFF               	movlw	high _spi2_configuration
 13948   013918  20F4               	addwfc	244,w,c
 13949   01391A  6EF7               	movwf	tblptrh,c
 13950   01391C                     	if	1	;There are 3 active tblptr bytes
 13951   01391C  6AF8               	clrf	tblptru,c
 13952   01391E  0E00               	movlw	low (__mediumconst shr (0+16))
 13953   013920  22F8               	addwfc	tblptru,f,c
 13954   013922                     	endif
 13955   013922  0008               	tblrd		*
 13956   013924  CFF5 FF63          	movff	tablat,3939	;volatile
 13957   013928                     
 13958                           ;mcc_generated_files/spi2.c: 78:         SSP2CON2 = 0x00;
 13959   013928  6A62               	clrf	98,c	;volatile
 13960                           
 13961                           ;mcc_generated_files/spi2.c: 79:         SSP2ADD = spi2_configuration[spi2UniqueConfigur
      +                          ation].add;
 13962                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 13963   01392A  0EFF               	movlw	-1
 13964   01392C  50E3               	movf	plusw1,w,c
 13965   01392E  0D04               	mullw	4
 13966   013930  0E02               	movlw	2
 13967   013932  26F3               	addwf	243,f,c
 13968   013934  0E00               	movlw	0
 13969   013936  22F4               	addwfc	244,f,c
 13970   013938  0EE9               	movlw	low _spi2_configuration
 13971   01393A  24F3               	addwf	243,w,c
 13972   01393C  6EF6               	movwf	tblptrl,c
 13973   01393E  0EFF               	movlw	high _spi2_configuration
 13974   013940  20F4               	addwfc	244,w,c
 13975   013942  6EF7               	movwf	tblptrh,c
 13976   013944                     	if	1	;There are 3 active tblptr bytes
 13977   013944  6AF8               	clrf	tblptru,c
 13978   013946  0E00               	movlw	low (__mediumconst shr (0+16))
 13979   013948  22F8               	addwfc	tblptru,f,c
 13980   01394A                     	endif
 13981   01394A  0008               	tblrd		*
 13982   01394C  CFF5 FF65          	movff	tablat,3941	;volatile
 13983   013950                     
 13984                           ;mcc_generated_files/spi2.c: 80:         TRISDbits.TRISD6 = spi2_configuration[spi2Uniqu
      +                          eConfiguration].operation;
 13985                           ;stkvar	_spi2UniqueConfiguration @ sp[(0)+-1]
 13986   013950  0EFF               	movlw	-1
 13987   013952  50E3               	movf	plusw1,w,c
 13988   013954  0D04               	mullw	4
 13989   013956  0E03               	movlw	3
 13990   013958  26F3               	addwf	243,f,c
 13991   01395A  0E00               	movlw	0
 13992   01395C  22F4               	addwfc	244,f,c
 13993   01395E  0EE9               	movlw	low _spi2_configuration
 13994   013960  24F3               	addwf	243,w,c
 13995   013962  6EF6               	movwf	tblptrl,c
 13996   013964  0EFF               	movlw	high _spi2_configuration
 13997   013966  20F4               	addwfc	244,w,c
 13998   013968  6EF7               	movwf	tblptrh,c
 13999   01396A                     	if	1	;There are 3 active tblptr bytes
 14000   01396A  6AF8               	clrf	tblptru,c
 14001   01396C  0E00               	movlw	low (__mediumconst shr (0+16))
 14002   01396E  22F8               	addwfc	tblptru,f,c
 14003   013970                     	endif
 14004   013970  0008               	tblrd		*
 14005   013972  CFF5 F038          	movff	tablat,btemp+11
 14006   013976  3A38               	swapf	(btemp+11)^0,f,c
 14007   013978  4638               	rlncf	(btemp+11)^0,f,c
 14008   01397A  4638               	rlncf	(btemp+11)^0,f,c
 14009   01397C  5095               	movf	149,w,c	;volatile
 14010   01397E  1838               	xorwf	(btemp+11)^0,w,c
 14011   013980  0BBF               	andlw	-65
 14012   013982  1838               	xorwf	(btemp+11)^0,w,c
 14013   013984  6E95               	movwf	149,c	;volatile
 14014   013986                     
 14015                           ;mcc_generated_files/spi2.c: 81:         SSP2CON1bits.SSPEN = 1;
 14016   013986  8A63               	bsf	99,5,c	;volatile
 14017   013988                     l1120:
 14018                           
 14019                           ; _SPI2_Open: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
 14020   013988  52E5               	movf	postdec1,f,c
 14021   01398A  0012               	return		;funcret
 14022   01398C                     __end_of_SPI2_Open:
 14023                           	callstack 0
 14024                           
 14025 ;; *************** function _DRV_CANFDSPI_ReceiveChannelConfigure *****************
 14026 ;; Defined at:
 14027 ;;		line 1172 in file "can/can.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;  channel         1  [STACK] enum E5290
 14030 ;;  config          2  [STACK] PTR struct _CAN_RX_FIFO_
 14031 ;;		 -> rxfConfig(3), 
 14032 ;; Auto vars:     Size  Location     Type
 14033 ;;  ciFifoCon       5  [STACK] struct _REG_CiFIFOCON
 14034 ;;  a               2  [STACK] unsigned short 
 14035 ;;  spiTransferE    1    0        char 
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  1  [STACK] char 
 14038 ;; Registers used:
 14039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14049 ;;Total ram usage:        0 bytes
 14050 ;; Hardware stack levels used: 1
 14051 ;; Hardware stack levels required when called: 9
 14052 ;; This function calls:
 14053 ;;		_DRV_CANFDSPI_WriteWord
 14054 ;; This function is called by:
 14055 ;;		_CanInit
 14056 ;; This function uses a reentrant model
 14057 ;;
 14058                           
 14059                           	psect	text56
 14060   012AC4                     __ptext56:
 14061                           	callstack 0
 14062   012AC4                     _DRV_CANFDSPI_ReceiveChannelConfigure:
 14063                           	callstack 0
 14064                           
 14065                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14066   012AC4  0E07               	movlw	7
 14067   012AC6  26E1               	addwf	fsr1l,f,c
 14068   012AC8  0E00               	movlw	0
 14069   012ACA  22E2               	addwfc	fsr1h,f,c
 14070   012ACC                     
 14071                           ;can/can.c: 1178:     if (channel == CAN_FIFO_CH0) {
 14072                           ;stkvar	_channel @ sp[(-7)+-1]
 14073   012ACC  0EF8               	movlw	-8
 14074   012ACE  50E3               	movf	plusw1,w,c
 14075   012AD0  A4D8               	btfss	status,2,c
 14076   012AD2  EF6D  F095         	goto	u2341
 14077   012AD6  EF6F  F095         	goto	u2340
 14078   012ADA                     u2341:
 14079   012ADA  EF71  F095         	goto	l4496
 14080   012ADE                     u2340:
 14081   012ADE  EFFE  F095         	goto	l346
 14082   012AE2                     l4496:
 14083                           
 14084                           ;can/can.c: 1183:     REG_CiFIFOCON ciFifoCon;;can/can.c: 1184:     ciFifoCon.word = can
      +                          FifoResetValues[0];
 14085   012AE2  0EDD               	movlw	low _canFifoResetValues
 14086   012AE4  6EF6               	movwf	tblptrl,c
 14087   012AE6                     	if	1	;There is more than 1 active tblptr byte
 14088   012AE6  0EFF               	movlw	high _canFifoResetValues
 14089   012AE8  6EF7               	movwf	tblptrh,c
 14090   012AEA                     	endif
 14091   012AEA                     	if	1	;There are 3 active tblptr bytes
 14092   012AEA  0E00               	movlw	low (_canFifoResetValues shr (0+16))
 14093   012AEC  6EF8               	movwf	tblptru,c
 14094   012AEE                     	endif
 14095   012AEE  0009               	tblrd		*+
 14096   012AF0  CFF5 F035          	movff	tablat,btemp+8
 14097   012AF4  0009               	tblrd		*+
 14098   012AF6  CFF5 F036          	movff	tablat,btemp+9
 14099   012AFA  0009               	tblrd		*+
 14100   012AFC  CFF5 F037          	movff	tablat,btemp+10
 14101   012B00  0009               	tblrd		*+
 14102   012B02  CFF5 F038          	movff	tablat,btemp+11
 14103                           
 14104                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14105   012B06  0EF9               	movlw	-7
 14106   012B08  C035  FFE3         	movff	btemp+8,plusw1
 14107   012B0C  0EFA               	movlw	-6
 14108   012B0E  C036  FFE3         	movff	btemp+9,plusw1
 14109   012B12  0EFB               	movlw	-5
 14110   012B14  C037  FFE3         	movff	btemp+10,plusw1
 14111   012B18  0EFC               	movlw	-4
 14112   012B1A  C038  FFE3         	movff	btemp+11,plusw1
 14113   012B1E                     
 14114                           ;can/can.c: 1186:     ciFifoCon.rxBF.TxEnable = 0;
 14115                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14116   012B1E  50E1               	movf	fsr1l,w,c
 14117   012B20  0FF9               	addlw	-7
 14118   012B22  6ED9               	movwf	fsr2l,c
 14119   012B24  50E2               	movf	fsr1h,w,c
 14120   012B26  6EDA               	movwf	fsr2h,c
 14121   012B28  0EFF               	movlw	255
 14122   012B2A  22DA               	addwfc	fsr2h,f,c
 14123   012B2C  9EDF               	bcf	indf2,7,c
 14124   012B2E                     
 14125                           ;can/can.c: 1189:     ciFifoCon.byte[3] = config->FifoSize | (uint8_t)(config->PayLoadSi
      +                          ze << 5);
 14126                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14127   012B2E  0EFC               	movlw	252
 14128   012B30  24E1               	addwf	fsr1l,w,c
 14129   012B32  6ED9               	movwf	fsr2l,c
 14130   012B34  0EFF               	movlw	255
 14131   012B36  20E2               	addwfc	fsr1h,w,c
 14132   012B38  6EDA               	movwf	fsr2h,c
 14133                           
 14134                           ;stkvar	_config @ sp[(-7)+-3]
 14135   012B3A  0EF6               	movlw	-10
 14136   012B3C  CFE3 F037          	movff	plusw1,btemp+10
 14137   012B40  0EF7               	movlw	-9
 14138   012B42  CFE3 F038          	movff	plusw1,btemp+11
 14139   012B46  0E01               	movlw	1
 14140   012B48  2437               	addwf	(btemp+10)^0,w,c
 14141   012B4A  6EE9               	movwf	fsr0l,c
 14142   012B4C  0E00               	movlw	0
 14143   012B4E  2038               	addwfc	(btemp+11)^0,w,c
 14144   012B50  6EEA               	movwf	fsr0h,c
 14145   012B52  50EF               	movf	indf0,w,c
 14146   012B54  6E38               	movwf	(btemp+11)^0,c
 14147                           
 14148                           ;stkvar	_config @ sp[(-7)+-3]
 14149   012B56  0EF6               	movlw	-10
 14150   012B58  CFE3 F035          	movff	plusw1,btemp+8
 14151   012B5C  0EF7               	movlw	-9
 14152   012B5E  CFE3 F036          	movff	plusw1,btemp+9
 14153   012B62  0E02               	movlw	2
 14154   012B64  2435               	addwf	(btemp+8)^0,w,c
 14155   012B66  6EE9               	movwf	fsr0l,c
 14156   012B68  0E00               	movlw	0
 14157   012B6A  2036               	addwfc	(btemp+9)^0,w,c
 14158   012B6C  6EEA               	movwf	fsr0h,c
 14159   012B6E  50EF               	movf	indf0,w,c
 14160   012B70  6E37               	movwf	(btemp+10)^0,c
 14161   012B72  0E05               	movlw	5
 14162   012B74  6E2D               	movwf	btemp^0,c
 14163   012B76                     u2355:
 14164   012B76  90D8               	bcf	status,0,c
 14165   012B78  3637               	rlcf	(btemp+10)^0,f,c
 14166   012B7A  2E2D               	decfsz	btemp^0,f,c
 14167   012B7C  EFBB  F095         	goto	u2355
 14168   012B80  5037               	movf	(btemp+10)^0,w,c
 14169   012B82  1038               	iorwf	(btemp+11)^0,w,c
 14170   012B84  6EDF               	movwf	indf2,c
 14171   012B86                     
 14172                           ;can/can.c: 1190:     ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 14173                           ;stkvar	_config @ sp[(-7)+-3]
 14174   012B86  0EF6               	movlw	-10
 14175   012B88  CFE3 FFD9          	movff	plusw1,fsr2l
 14176   012B8C  0EF7               	movlw	-9
 14177   012B8E  CFE3 FFDA          	movff	plusw1,fsr2h
 14178   012B92  50DF               	movf	indf2,w,c
 14179   012B94  6E38               	movwf	(btemp+11)^0,c
 14180                           
 14181                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14182   012B96  50E1               	movf	fsr1l,w,c
 14183   012B98  0FF9               	addlw	-7
 14184   012B9A  6ED9               	movwf	fsr2l,c
 14185   012B9C  50E2               	movf	fsr1h,w,c
 14186   012B9E  6EDA               	movwf	fsr2h,c
 14187   012BA0  0EFF               	movlw	255
 14188   012BA2  22DA               	addwfc	fsr2h,f,c
 14189   012BA4  3A38               	swapf	(btemp+11)^0,f,c
 14190   012BA6  4638               	rlncf	(btemp+11)^0,f,c
 14191   012BA8  50DF               	movf	223,w,c
 14192   012BAA  1838               	xorwf	(btemp+11)^0,w,c
 14193   012BAC  0BDF               	andlw	-33
 14194   012BAE  1838               	xorwf	(btemp+11)^0,w,c
 14195   012BB0  6EDF               	movwf	223,c
 14196   012BB2                     
 14197                           ;can/can.c: 1193:     ciFifoCon.rxBF.RxNotEmptyIE = 1;
 14198                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14199   012BB2  50E1               	movf	fsr1l,w,c
 14200   012BB4  0FF9               	addlw	-7
 14201   012BB6  6ED9               	movwf	fsr2l,c
 14202   012BB8  50E2               	movf	fsr1h,w,c
 14203   012BBA  6EDA               	movwf	fsr2h,c
 14204   012BBC  0EFF               	movlw	255
 14205   012BBE  22DA               	addwfc	fsr2h,f,c
 14206   012BC0  80DF               	bsf	indf2,0,c
 14207   012BC2                     
 14208                           ;can/can.c: 1195:     a = 0x050 + (channel * (3*4));
 14209                           ;stkvar	_channel @ sp[(-7)+-1]
 14210   012BC2  0EF8               	movlw	-8
 14211   012BC4  50E3               	movf	plusw1,w,c
 14212   012BC6  0D0C               	mullw	12
 14213   012BC8  0E50               	movlw	80
 14214   012BCA  26F3               	addwf	243,f,c
 14215   012BCC  0E00               	movlw	0
 14216   012BCE  22F4               	addwfc	244,f,c
 14217                           
 14218                           ;stkvar	_a @ sp[(-7)+5]
 14219   012BD0  0EFE               	movlw	-2
 14220   012BD2  CFF3 FFE3          	movff	prodl,plusw1
 14221   012BD6  0EFF               	movlw	-1
 14222   012BD8  CFF4 FFE3          	movff	prodh,plusw1
 14223   012BDC                     
 14224                           ;stkvar	_ciFifoCon @ sp[(-7)+0]
 14225   012BDC  0EF9               	movlw	-7
 14226   012BDE  CFE3 FFE6          	movff	plusw1,postinc1
 14227   012BE2  CFE3 FFE6          	movff	plusw1,postinc1
 14228   012BE6  CFE3 FFE6          	movff	plusw1,postinc1
 14229   012BEA  CFE3 FFE6          	movff	plusw1,postinc1
 14230                           
 14231                           ;stkvar	_a @ sp[(-11)+5]
 14232   012BEE  0EFA               	movlw	-6
 14233   012BF0  CFE3 FFE6          	movff	plusw1,postinc1
 14234   012BF4  CFE3 FFE6          	movff	plusw1,postinc1
 14235   012BF8  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 14236   012BFC                     l346:
 14237                           
 14238                           ; _DRV_CANFDSPI_ReceiveChannelConfigure: autosize = 7, savesize = 0, parsavesize = 0, te
      +                          mpsize = 0 parsize = 3, argsize = 3, vargsize = 0
 14239   012BFC  0EF6               	movlw	246
 14240   012BFE  26E1               	addwf	fsr1l,f,c
 14241   012C00  0EFF               	movlw	255
 14242   012C02  22E2               	addwfc	fsr1h,f,c
 14243   012C04  0012               	return		;funcret
 14244   012C06                     __end_of_DRV_CANFDSPI_ReceiveChannelConfigure:
 14245                           	callstack 0
 14246                           
 14247 ;; *************** function _DRV_CANFDSPI_OperationModeSelect *****************
 14248 ;; Defined at:
 14249 ;;		line 499 in file "can/can.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;  opMode          1  [STACK] enum E5360
 14252 ;; Auto vars:     Size  Location     Type
 14253 ;;  d               1  [STACK] unsigned char 
 14254 ;;  spiTransferE    1  [STACK] char 
 14255 ;; Return value:  Size  Location     Type
 14256 ;;                  1  [STACK] char 
 14257 ;; Registers used:
 14258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+10, btemp+11, prodl
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14268 ;;Total ram usage:        0 bytes
 14269 ;; Hardware stack levels used: 1
 14270 ;; Hardware stack levels required when called: 9
 14271 ;; This function calls:
 14272 ;;		_DRV_CANFDSPI_ReadByte
 14273 ;;		_DRV_CANFDSPI_WriteByte
 14274 ;; This function is called by:
 14275 ;;		_CanInit
 14276 ;; This function uses a reentrant model
 14277 ;;
 14278                           
 14279                           	psect	text57
 14280   013F3A                     __ptext57:
 14281                           	callstack 0
 14282   013F3A                     _DRV_CANFDSPI_OperationModeSelect:
 14283                           	callstack 0
 14284                           
 14285                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14286   013F3A  52E6               	movf	postinc1,f,c
 14287   013F3C  52E6               	movf	postinc1,f,c
 14288   013F3E                     
 14289                           ;can/can.c: 499: int8_t DRV_CANFDSPI_OperationModeSelect(CAN_OPERATION_MODE opMode);can/
      +                          can.c: 500: {;can/can.c: 501:     uint8_t d = 0;
 14290                           ;stkvar	_d @ sp[(-2)+0]
 14291   013F3E  0EFE               	movlw	-2
 14292   013F40  6AE3               	clrf	plusw1,c
 14293   013F42                     
 14294                           ;can/can.c: 505:     spiTransferError = DRV_CANFDSPI_ReadByte(0x000 + 3, &d);
 14295                           ;stkvar	_d @ sp[(-2)+0]
 14296   013F42  0EFE               	movlw	254
 14297   013F44  24E1               	addwf	fsr1l,w,c
 14298   013F46  6E2D               	movwf	btemp^0,c
 14299   013F48  0EFF               	movlw	255
 14300   013F4A  20E2               	addwfc	fsr1h,w,c
 14301   013F4C  6E2E               	movwf	(btemp+1)^0,c
 14302   013F4E  C02D  FFE6         	movff	btemp,postinc1
 14303   013F52  C02E  FFE6         	movff	btemp+1,postinc1
 14304   013F56  0E03               	movlw	3
 14305   013F58  6EE6               	movwf	postinc1,c
 14306   013F5A  0E00               	movlw	0
 14307   013F5C  6EE6               	movwf	postinc1,c
 14308   013F5E  ECB3  F0A0         	call	_DRV_CANFDSPI_ReadByte	;wreg free
 14309                           
 14310                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14311   013F62  0EFF               	movlw	-1
 14312   013F64  C02D  FFE3         	movff	btemp,plusw1
 14313   013F68                     
 14314                           ;can/can.c: 506:     if (spiTransferError) {
 14315                           ;stkvar	_spiTransferError @ sp[(-2)+1]
 14316   013F68  0EFF               	movlw	-1
 14317   013F6A  50E3               	movf	plusw1,w,c
 14318   013F6C  B4D8               	btfsc	status,2,c
 14319   013F6E  EFBB  F09F         	goto	u2371
 14320   013F72  EFBD  F09F         	goto	u2370
 14321   013F76                     u2371:
 14322   013F76  EFBF  F09F         	goto	l4564
 14323   013F7A                     u2370:
 14324   013F7A  EFDC  F09F         	goto	l222
 14325   013F7E                     l4564:
 14326                           
 14327                           ;can/can.c: 511:     d &= ~0x07;
 14328                           ;stkvar	_d @ sp[(-2)+0]
 14329   013F7E  0EFE               	movlw	-2
 14330   013F80  CFE3 F02D          	movff	plusw1,btemp
 14331   013F84  0EF8               	movlw	248
 14332   013F86  162D               	andwf	btemp^0,f,c
 14333   013F88  0EFE               	movlw	-2
 14334   013F8A  C02D  FFE3         	movff	btemp,plusw1
 14335   013F8E                     
 14336                           ;can/can.c: 512:     d |= opMode;
 14337                           ;stkvar	_opMode @ sp[(-2)+-1]
 14338   013F8E  0EFD               	movlw	-3
 14339   013F90  CFE3 F038          	movff	plusw1,btemp+11
 14340                           
 14341                           ;stkvar	_d @ sp[(-2)+0]
 14342   013F94  50E1               	movf	fsr1l,w,c
 14343   013F96  0FFE               	addlw	-2
 14344   013F98  6ED9               	movwf	fsr2l,c
 14345   013F9A  50E2               	movf	fsr1h,w,c
 14346   013F9C  6EDA               	movwf	fsr2h,c
 14347   013F9E  0EFF               	movlw	255
 14348   013FA0  22DA               	addwfc	fsr2h,f,c
 14349   013FA2  5038               	movf	(btemp+11)^0,w,c
 14350   013FA4  12DF               	iorwf	indf2,f,c
 14351   013FA6                     
 14352                           ;stkvar	_d @ sp[(-2)+0]
 14353   013FA6  0EFE               	movlw	-2
 14354   013FA8  50E3               	movf	plusw1,w,c
 14355   013FAA  6EE6               	movwf	postinc1,c
 14356   013FAC  0E03               	movlw	3
 14357   013FAE  6EE6               	movwf	postinc1,c
 14358   013FB0  0E00               	movlw	0
 14359   013FB2  6EE6               	movwf	postinc1,c
 14360   013FB4  EC40  F0A1         	call	_DRV_CANFDSPI_WriteByte	;wreg free
 14361   013FB8                     l222:
 14362                           
 14363                           ; _DRV_CANFDSPI_OperationModeSelect: autosize = 2, savesize = 0, parsavesize = 0, tempsi
      +                          ze = 0 parsize = 1, argsize = 1, vargsize = 0
 14364   013FB8  52E5               	movf	postdec1,f,c
 14365   013FBA  52E5               	movf	postdec1,f,c
 14366   013FBC  52E5               	movf	postdec1,f,c
 14367   013FBE  0012               	return		;funcret
 14368   013FC0                     __end_of_DRV_CANFDSPI_OperationModeSelect:
 14369                           	callstack 0
 14370                           
 14371 ;; *************** function _DRV_CANFDSPI_WriteByte *****************
 14372 ;; Defined at:
 14373 ;;		line 294 in file "can/can.c"
 14374 ;; Parameters:    Size  Location     Type
 14375 ;;  address         2  [STACK] unsigned short 
 14376 ;;  txd             1  [STACK] unsigned char 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  spiTransferS    2    0        unsigned short 
 14379 ;;  spiTransferE    1  [STACK] char 
 14380 ;; Return value:  Size  Location     Type
 14381 ;;                  1  [STACK] char 
 14382 ;; Registers used:
 14383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 14384 ;; Tracked objects:
 14385 ;;		On entry : 0/0
 14386 ;;		On exit  : 0/0
 14387 ;;		Unchanged: 0/0
 14388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14393 ;;Total ram usage:        0 bytes
 14394 ;; Hardware stack levels used: 1
 14395 ;; Hardware stack levels required when called: 8
 14396 ;; This function calls:
 14397 ;;		_SpiTransfer
 14398 ;; This function is called by:
 14399 ;;		_DRV_CANFDSPI_OperationModeSelect
 14400 ;;		_DRV_CANFDSPI_TransmitChannelUpdate
 14401 ;;		_DRV_CANFDSPI_FilterToFifoLink
 14402 ;;		_DRV_CANFDSPI_FilterDisable
 14403 ;;		_DRV_CANFDSPI_ReceiveChannelUpdate
 14404 ;;		_DRV_CANFDSPI_TimeStampEnable
 14405 ;; This function uses a reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text58
 14409   014280                     __ptext58:
 14410                           	callstack 0
 14411   014280                     _DRV_CANFDSPI_WriteByte:
 14412                           	callstack 0
 14413                           
 14414                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14415   014280  52E6               	movf	postinc1,f,c
 14416   014282                     
 14417                           ;can/can.c: 300:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 14418                           ;stkvar	_address @ sp[(-1)+-2]
 14419   014282  0EFE               	movlw	254
 14420   014284  24E1               	addwf	fsr1l,w,c
 14421   014286  6ED9               	movwf	fsr2l,c
 14422   014288  0EFF               	movlw	255
 14423   01428A  20E2               	addwfc	fsr1h,w,c
 14424   01428C  6EDA               	movwf	fsr2h,c
 14425   01428E  50DF               	movf	indf2,w,c
 14426   014290  0B0F               	andlw	15
 14427   014292  0F20               	addlw	32
 14428   014294  0101               	movlb	1	; () banked
 14429   014296  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 14430   014298                     
 14431                           ; BSR set to: 1
 14432                           ;can/can.c: 301:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 14433                           ;stkvar	_address @ sp[(-1)+-2]
 14434   014298  0EFD               	movlw	-3
 14435   01429A  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 14436   01429E                     
 14437                           ; BSR set to: 1
 14438                           ;can/can.c: 302:     spiTransmitBuffer[2] = txd;
 14439                           ;stkvar	_txd @ sp[(-1)+-3]
 14440   01429E  0EFC               	movlw	-4
 14441   0142A0  CFE3 F102          	movff	plusw1,_spiTransmitBuffer+2
 14442   0142A4                     
 14443                           ; BSR set to: 1
 14444                           ;can/can.c: 304:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 14445   0142A4  0E03               	movlw	3
 14446   0142A6  6EE6               	movwf	postinc1,c
 14447   0142A8  0E00               	movlw	0
 14448   0142AA  6EE6               	movwf	postinc1,c
 14449   0142AC  0E00               	movlw	low _spiReceiveBuffer
 14450   0142AE  6EE6               	movwf	postinc1,c
 14451   0142B0  0E02               	movlw	high _spiReceiveBuffer
 14452   0142B2  6EE6               	movwf	postinc1,c
 14453   0142B4  0E00               	movlw	low _spiTransmitBuffer
 14454   0142B6  6EE6               	movwf	postinc1,c
 14455   0142B8  0E01               	movlw	high _spiTransmitBuffer
 14456   0142BA  6EE6               	movwf	postinc1,c
 14457   0142BC  ECAD  F09B         	call	_SpiTransfer	;wreg free
 14458                           
 14459                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 14460   0142C0  0EFF               	movlw	-1
 14461   0142C2  C02D  FFE3         	movff	btemp,plusw1
 14462   0142C6                     
 14463                           ;can/can.c: 306:     return spiTransferError;
 14464                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 14465   0142C6  0EFF               	movlw	-1
 14466   0142C8  CFE3 F02D          	movff	plusw1,btemp
 14467   0142CC                     
 14468                           ; _DRV_CANFDSPI_WriteByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 3, argsize = 3, vargsize = 0
 14469   0142CC  52E5               	movf	postdec1,f,c
 14470   0142CE  52E5               	movf	postdec1,f,c
 14471   0142D0  52E5               	movf	postdec1,f,c
 14472   0142D2  52E5               	movf	postdec1,f,c
 14473   0142D4  0012               	return		;funcret
 14474   0142D6                     __end_of_DRV_CANFDSPI_WriteByte:
 14475                           	callstack 0
 14476                           
 14477 ;; *************** function _DRV_CANFDSPI_ReadByte *****************
 14478 ;; Defined at:
 14479 ;;		line 276 in file "can/can.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;  address         2  [STACK] unsigned short 
 14482 ;;  rxd             2  [STACK] PTR unsigned char 
 14483 ;;		 -> b(1), iocon(4), osc(4), d(1), 
 14484 ;;		 -> d(1), d(1), d(1), crc(1), 
 14485 ;;		 -> crc(1), crc(1), crc(1), eccStat(1), 
 14486 ;;		 -> eccInterrupts(1), eccInterrupts(1), eccStatus(1), d(1), 
 14487 ;;		 -> d(1), f(1), icodeByte(1), filterHitByte(1), 
 14488 ;;		 -> txCodeByte(1), rxCodeByte(1), ciTefCon(4), ciTefSta(4), 
 14489 ;;		 -> d(1), fCtrl(1), d(1), d(1), 
 14490 ;;		 -> ciFifoSta(4), ciFifoCon(5), d(1), d(1), 
 14491 ;;		 -> d(1), d(1), 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  spiTransferS    2    0        unsigned short 
 14494 ;;  spiTransferE    1  [STACK] char 
 14495 ;; Return value:  Size  Location     Type
 14496 ;;                  1  [STACK] char 
 14497 ;; Registers used:
 14498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11, prodl
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14508 ;;Total ram usage:        0 bytes
 14509 ;; Hardware stack levels used: 1
 14510 ;; Hardware stack levels required when called: 8
 14511 ;; This function calls:
 14512 ;;		_SpiTransfer
 14513 ;; This function is called by:
 14514 ;;		_DRV_CANFDSPI_OperationModeSelect
 14515 ;;		_DRV_CANFDSPI_FilterDisable
 14516 ;;		_DRV_CANFDSPI_TransmitChannelEventGet
 14517 ;;		_DRV_CANFDSPI_ReceiveChannelEventGet
 14518 ;;		_DRV_CANFDSPI_TimeStampEnable
 14519 ;; This function uses a reentrant model
 14520 ;;
 14521                           
 14522                           	psect	text59
 14523   014166                     __ptext59:
 14524                           	callstack 0
 14525   014166                     _DRV_CANFDSPI_ReadByte:
 14526                           	callstack 0
 14527                           
 14528                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14529   014166  52E6               	movf	postinc1,f,c
 14530   014168                     
 14531                           ;can/can.c: 282:     spiTransmitBuffer[0] = (uint8_t) ((0x03 << 4) + ((address >> 8) & 0
      +                          xF));
 14532                           ;stkvar	_address @ sp[(-1)+-2]
 14533   014168  0EFE               	movlw	254
 14534   01416A  24E1               	addwf	fsr1l,w,c
 14535   01416C  6ED9               	movwf	fsr2l,c
 14536   01416E  0EFF               	movlw	255
 14537   014170  20E2               	addwfc	fsr1h,w,c
 14538   014172  6EDA               	movwf	fsr2h,c
 14539   014174  50DF               	movf	indf2,w,c
 14540   014176  0B0F               	andlw	15
 14541   014178  0F30               	addlw	48
 14542   01417A  0101               	movlb	1	; () banked
 14543   01417C  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 14544   01417E                     
 14545                           ; BSR set to: 1
 14546                           ;can/can.c: 283:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 14547                           ;stkvar	_address @ sp[(-1)+-2]
 14548   01417E  0EFD               	movlw	-3
 14549   014180  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 14550   014184                     
 14551                           ; BSR set to: 1
 14552                           ;can/can.c: 284:     spiTransmitBuffer[2] = 0;
 14553   014184  6B02               	clrf	(_spiTransmitBuffer+2)& (0+255),b
 14554   014186                     
 14555                           ; BSR set to: 1
 14556                           ;can/can.c: 286:     spiTransferError = SpiTransfer(spiTransmitBuffer, spiReceiveBuffer,
      +                           spiTransferSize);
 14557   014186  0E03               	movlw	3
 14558   014188  6EE6               	movwf	postinc1,c
 14559   01418A  0E00               	movlw	0
 14560   01418C  6EE6               	movwf	postinc1,c
 14561   01418E  0E00               	movlw	low _spiReceiveBuffer
 14562   014190  6EE6               	movwf	postinc1,c
 14563   014192  0E02               	movlw	high _spiReceiveBuffer
 14564   014194  6EE6               	movwf	postinc1,c
 14565   014196  0E00               	movlw	low _spiTransmitBuffer
 14566   014198  6EE6               	movwf	postinc1,c
 14567   01419A  0E01               	movlw	high _spiTransmitBuffer
 14568   01419C  6EE6               	movwf	postinc1,c
 14569   01419E  ECAD  F09B         	call	_SpiTransfer	;wreg free
 14570                           
 14571                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 14572   0141A2  0EFF               	movlw	-1
 14573   0141A4  C02D  FFE3         	movff	btemp,plusw1
 14574   0141A8                     
 14575                           ;can/can.c: 289:     *rxd = spiReceiveBuffer[2];
 14576                           ;stkvar	_rxd @ sp[(-1)+-4]
 14577   0141A8  0EFB               	movlw	-5
 14578   0141AA  CFE3 FFD9          	movff	plusw1,fsr2l
 14579   0141AE  0EFC               	movlw	-4
 14580   0141B0  CFE3 FFDA          	movff	plusw1,fsr2h
 14581   0141B4  C202  FFDF         	movff	_spiReceiveBuffer+2,indf2
 14582   0141B8                     
 14583                           ;can/can.c: 291:     return spiTransferError;
 14584                           ;stkvar	_spiTransferError @ sp[(-1)+0]
 14585   0141B8  0EFF               	movlw	-1
 14586   0141BA  CFE3 F02D          	movff	plusw1,btemp
 14587   0141BE                     
 14588                           ; _DRV_CANFDSPI_ReadByte: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 14589   0141BE  0EFB               	movlw	251
 14590   0141C0  26E1               	addwf	fsr1l,f,c
 14591   0141C2  0EFF               	movlw	255
 14592   0141C4  22E2               	addwfc	fsr1h,f,c
 14593   0141C6  0012               	return		;funcret
 14594   0141C8                     __end_of_DRV_CANFDSPI_ReadByte:
 14595                           	callstack 0
 14596                           
 14597 ;; *************** function _DRV_CANFDSPI_ModuleEventEnable *****************
 14598 ;; Defined at:
 14599 ;;		line 1591 in file "can/can.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;  index           1  [STACK] unsigned char 
 14602 ;;  flags           2  [STACK] enum E5566
 14603 ;; Auto vars:     Size  Location     Type
 14604 ;;  intEnables      2  [STACK] struct _REG_CiINTENABLE
 14605 ;;  a               2    0        unsigned short 
 14606 ;;  spiTransferE    1    0        char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  1  [STACK] char 
 14609 ;; Registers used:
 14610 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14620 ;;Total ram usage:        0 bytes
 14621 ;; Hardware stack levels used: 1
 14622 ;; Hardware stack levels required when called: 9
 14623 ;; This function calls:
 14624 ;;		_DRV_CANFDSPI_WriteHalfWord
 14625 ;; This function is called by:
 14626 ;;		_CanInit
 14627 ;; This function uses a reentrant model
 14628 ;;
 14629                           
 14630                           	psect	text60
 14631   014102                     __ptext60:
 14632                           	callstack 0
 14633   014102                     _DRV_CANFDSPI_ModuleEventEnable:
 14634                           	callstack 0
 14635                           
 14636                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14637   014102  52E6               	movf	postinc1,f,c
 14638   014104  52E6               	movf	postinc1,f,c
 14639   014106                     
 14640                           ;can/can.c: 1599:     REG_CiINTENABLE intEnables;;can/can.c: 1600:     intEnables.word =
      +                           0;
 14641                           ;stkvar	_intEnables @ sp[(-2)+0]
 14642   014106  0EFE               	movlw	-2
 14643   014108  6AE3               	clrf	plusw1,c
 14644   01410A  0EFF               	movlw	-1
 14645   01410C  6AE3               	clrf	plusw1,c
 14646   01410E                     
 14647                           ;can/can.c: 1608:     intEnables.word |= (flags & CAN_ALL_EVENTS);
 14648                           ;stkvar	_flags @ sp[(-2)+-3]
 14649   01410E  0EFB               	movlw	-5
 14650   014110  CFE3 F037          	movff	plusw1,btemp+10
 14651   014114  0EFC               	movlw	-4
 14652   014116  CFE3 F038          	movff	plusw1,btemp+11
 14653   01411A  0E1F               	movlw	31
 14654   01411C  1437               	andwf	(btemp+10)^0,w,c
 14655   01411E  6E35               	movwf	(btemp+8)^0,c
 14656   014120  0EFF               	movlw	255
 14657   014122  1438               	andwf	(btemp+11)^0,w,c
 14658   014124  6E36               	movwf	(btemp+9)^0,c
 14659                           
 14660                           ;stkvar	_intEnables @ sp[(-2)+0]
 14661   014126  0EFE               	movlw	-2
 14662   014128  CFE3 F02D          	movff	plusw1,btemp
 14663   01412C  5035               	movf	(btemp+8)^0,w,c
 14664   01412E  122D               	iorwf	btemp^0,f,c
 14665   014130  0EFE               	movlw	-2
 14666   014132  C02D  FFE3         	movff	btemp,plusw1
 14667   014136  0EFF               	movlw	-1
 14668   014138  CFE3 F02D          	movff	plusw1,btemp
 14669   01413C  5036               	movf	(btemp+9)^0,w,c
 14670   01413E  122D               	iorwf	btemp^0,f,c
 14671   014140  0EFF               	movlw	-1
 14672   014142  C02D  FFE3         	movff	btemp,plusw1
 14673   014146                     
 14674                           ;stkvar	_intEnables @ sp[(-2)+0]
 14675   014146  0EFE               	movlw	-2
 14676   014148  CFE3 FFE6          	movff	plusw1,postinc1
 14677   01414C  CFE3 FFE6          	movff	plusw1,postinc1
 14678   014150  0E1E               	movlw	30
 14679   014152  6EE6               	movwf	postinc1,c
 14680   014154  0E00               	movlw	0
 14681   014156  6EE6               	movwf	postinc1,c
 14682   014158  EC48  F09B         	call	_DRV_CANFDSPI_WriteHalfWord	;wreg free
 14683   01415C                     
 14684                           ; _DRV_CANFDSPI_ModuleEventEnable: autosize = 2, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 3, argsize = 3, vargsize = 0
 14685   01415C  0EFB               	movlw	251
 14686   01415E  26E1               	addwf	fsr1l,f,c
 14687   014160  0EFF               	movlw	255
 14688   014162  22E2               	addwfc	fsr1h,f,c
 14689   014164  0012               	return		;funcret
 14690   014166                     __end_of_DRV_CANFDSPI_ModuleEventEnable:
 14691                           	callstack 0
 14692                           
 14693 ;; *************** function _DRV_CANFDSPI_WriteHalfWord *****************
 14694 ;; Defined at:
 14695 ;;		line 332 in file "can/can.c"
 14696 ;; Parameters:    Size  Location     Type
 14697 ;;  address         2  [STACK] unsigned short 
 14698 ;;  txd             2  [STACK] unsigned short 
 14699 ;; Auto vars:     Size  Location     Type
 14700 ;;  spiTransferS    2  [STACK] unsigned short 
 14701 ;;  i               1  [STACK] unsigned char 
 14702 ;;  spiTransferE    1  [STACK] char 
 14703 ;; Return value:  Size  Location     Type
 14704 ;;                  1  [STACK] char 
 14705 ;; Registers used:
 14706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 14707 ;; Tracked objects:
 14708 ;;		On entry : 0/0
 14709 ;;		On exit  : 0/0
 14710 ;;		Unchanged: 0/0
 14711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14716 ;;Total ram usage:        0 bytes
 14717 ;; Hardware stack levels used: 1
 14718 ;; Hardware stack levels required when called: 8
 14719 ;; This function calls:
 14720 ;;		_SpiTransfer
 14721 ;; This function is called by:
 14722 ;;		_DRV_CANFDSPI_ModuleEventEnable
 14723 ;;		_DRV_CANFDSPI_TimeStampPrescalerSet
 14724 ;; This function uses a reentrant model
 14725 ;;
 14726                           
 14727                           	psect	text61
 14728   013690                     __ptext61:
 14729                           	callstack 0
 14730   013690                     _DRV_CANFDSPI_WriteHalfWord:
 14731                           	callstack 0
 14732                           
 14733                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14734   013690  52E6               	movf	postinc1,f,c
 14735   013692  52E6               	movf	postinc1,f,c
 14736   013694  52E6               	movf	postinc1,f,c
 14737   013696  52E6               	movf	postinc1,f,c
 14738   013698                     
 14739                           ;can/can.c: 332: int8_t DRV_CANFDSPI_WriteHalfWord( uint16_t address,;can/can.c: 333:   
      +                                uint16_t txd);can/can.c: 334: {;can/can.c: 335:     uint8_t i;;can/can.c: 336:    
      +                           uint16_t spiTransferSize = 4;
 14740   013698  0E04               	movlw	4
 14741   01369A  6E37               	movwf	(btemp+10)^0,c
 14742   01369C  0E00               	movlw	0
 14743   01369E  6E38               	movwf	(btemp+11)^0,c
 14744                           
 14745                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 14746   0136A0  0EFC               	movlw	-4
 14747   0136A2  C037  FFE3         	movff	btemp+10,plusw1
 14748   0136A6  0EFD               	movlw	-3
 14749   0136A8  C038  FFE3         	movff	btemp+11,plusw1
 14750   0136AC                     
 14751                           ;can/can.c: 340:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 14752                           ;stkvar	_address @ sp[(-4)+-2]
 14753   0136AC  0EFB               	movlw	251
 14754   0136AE  24E1               	addwf	fsr1l,w,c
 14755   0136B0  6ED9               	movwf	fsr2l,c
 14756   0136B2  0EFF               	movlw	255
 14757   0136B4  20E2               	addwfc	fsr1h,w,c
 14758   0136B6  6EDA               	movwf	fsr2h,c
 14759   0136B8  50DF               	movf	indf2,w,c
 14760   0136BA  0B0F               	andlw	15
 14761   0136BC  0F20               	addlw	32
 14762   0136BE  0101               	movlb	1	; () banked
 14763   0136C0  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 14764   0136C2                     
 14765                           ; BSR set to: 1
 14766                           ;can/can.c: 341:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 14767                           ;stkvar	_address @ sp[(-4)+-2]
 14768   0136C2  0EFA               	movlw	-6
 14769   0136C4  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 14770   0136C8                     
 14771                           ; BSR set to: 1
 14772                           ;can/can.c: 344:     for (i = 0; i < 2; i++) {
 14773                           ;stkvar	_i @ sp[(-4)+2]
 14774   0136C8  0EFE               	movlw	-2
 14775   0136CA  6AE3               	clrf	plusw1,c
 14776   0136CC                     l4282:
 14777                           
 14778                           ;can/can.c: 345:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 14779                           ;stkvar	_i @ sp[(-4)+2]
 14780   0136CC  0EFE               	movlw	-2
 14781   0136CE  50E3               	movf	plusw1,w,c
 14782   0136D0  6E37               	movwf	(btemp+10)^0,c
 14783   0136D2  6A38               	clrf	(btemp+11)^0,c
 14784   0136D4  0E02               	movlw	low (_spiTransmitBuffer+2)
 14785   0136D6  2437               	addwf	(btemp+10)^0,w,c
 14786   0136D8  6ED9               	movwf	fsr2l,c
 14787   0136DA  0E01               	movlw	high (_spiTransmitBuffer+2)
 14788   0136DC  2038               	addwfc	(btemp+11)^0,w,c
 14789   0136DE  6EDA               	movwf	fsr2h,c
 14790                           
 14791                           ;stkvar	_i @ sp[(-4)+2]
 14792   0136E0  0EFE               	movlw	-2
 14793   0136E2  50E3               	movf	plusw1,w,c
 14794   0136E4  0D08               	mullw	8
 14795   0136E6  CFF3 F038          	movff	prodl,btemp+11
 14796                           
 14797                           ;stkvar	_txd @ sp[(-4)+-4]
 14798   0136EA  0EF8               	movlw	-8
 14799   0136EC  CFE3 F035          	movff	plusw1,btemp+8
 14800   0136F0  0EF9               	movlw	-7
 14801   0136F2  CFE3 F036          	movff	plusw1,btemp+9
 14802   0136F6  2A38               	incf	(btemp+11)^0,f,c
 14803   0136F8  EF81  F09B         	goto	u2124
 14804   0136FC                     u2125:
 14805   0136FC  90D8               	bcf	status,0,c
 14806   0136FE  3236               	rrcf	(btemp+9)^0,f,c
 14807   013700  3235               	rrcf	(btemp+8)^0,f,c
 14808   013702                     u2124:
 14809   013702  2E38               	decfsz	(btemp+11)^0,f,c
 14810   013704  EF7E  F09B         	goto	u2125
 14811   013708  5035               	movf	(btemp+8)^0,w,c
 14812   01370A  6EDF               	movwf	indf2,c
 14813   01370C                     
 14814                           ;can/can.c: 346:     }
 14815                           ;stkvar	_i @ sp[(-4)+2]
 14816   01370C  0EFE               	movlw	-2
 14817   01370E  2AE3               	incf	plusw1,f,c
 14818   013710                     
 14819                           ;stkvar	_i @ sp[(-4)+2]
 14820   013710  0EFE               	movlw	-2
 14821   013712  CFE3 F02D          	movff	plusw1,btemp
 14822   013716  0E01               	movlw	1
 14823   013718  642D               	cpfsgt	btemp^0,c
 14824   01371A  EF91  F09B         	goto	u2131
 14825   01371E  EF93  F09B         	goto	u2130
 14826   013722                     u2131:
 14827   013722  EF66  F09B         	goto	l4282
 14828   013726                     u2130:
 14829   013726                     
 14830                           ;can/can.c: 348:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 14831                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 14832   013726  0EFC               	movlw	-4
 14833   013728  CFE3 FFE6          	movff	plusw1,postinc1
 14834   01372C  CFE3 FFE6          	movff	plusw1,postinc1
 14835   013730  0E00               	movlw	low _spiReceiveBuffer
 14836   013732  6EE6               	movwf	postinc1,c
 14837   013734  0E02               	movlw	high _spiReceiveBuffer
 14838   013736  6EE6               	movwf	postinc1,c
 14839   013738  0E00               	movlw	low _spiTransmitBuffer
 14840   01373A  6EE6               	movwf	postinc1,c
 14841   01373C  0E01               	movlw	high _spiTransmitBuffer
 14842   01373E  6EE6               	movwf	postinc1,c
 14843   013740  ECAD  F09B         	call	_SpiTransfer	;wreg free
 14844                           
 14845                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 14846   013744  0EFF               	movlw	-1
 14847   013746  C02D  FFE3         	movff	btemp,plusw1
 14848   01374A                     
 14849                           ;can/can.c: 350:     return spiTransferError;
 14850                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 14851   01374A  0EFF               	movlw	-1
 14852   01374C  CFE3 F02D          	movff	plusw1,btemp
 14853   013750                     
 14854                           ; _DRV_CANFDSPI_WriteHalfWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 4, argsize = 4, vargsize = 0
 14855   013750  0EF8               	movlw	248
 14856   013752  26E1               	addwf	fsr1l,f,c
 14857   013754  0EFF               	movlw	255
 14858   013756  22E2               	addwfc	fsr1h,f,c
 14859   013758  0012               	return		;funcret
 14860   01375A                     __end_of_DRV_CANFDSPI_WriteHalfWord:
 14861                           	callstack 0
 14862                           
 14863 ;; *************** function _DRV_CANFDSPI_ConfigureObjectReset *****************
 14864 ;; Defined at:
 14865 ;;		line 474 in file "can/can.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 14868 ;;		 -> config(3), 
 14869 ;; Auto vars:     Size  Location     Type
 14870 ;;  ciCon           4  [STACK] struct _REG_CiCON
 14871 ;; Return value:  Size  Location     Type
 14872 ;;                  1  [STACK] char 
 14873 ;; Registers used:
 14874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru
 14875 ;; Tracked objects:
 14876 ;;		On entry : 0/0
 14877 ;;		On exit  : 0/0
 14878 ;;		Unchanged: 0/0
 14879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;Total ram usage:        0 bytes
 14885 ;; Hardware stack levels used: 1
 14886 ;; Hardware stack levels required when called: 7
 14887 ;; This function calls:
 14888 ;;		Nothing
 14889 ;; This function is called by:
 14890 ;;		_CanInit
 14891 ;; This function uses a reentrant model
 14892 ;;
 14893                           
 14894                           	psect	text62
 14895   0119BA                     __ptext62:
 14896                           	callstack 0
 14897   0119BA                     _DRV_CANFDSPI_ConfigureObjectReset:
 14898                           	callstack 0
 14899                           
 14900                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 14901   0119BA  52E6               	movf	postinc1,f,c
 14902   0119BC  52E6               	movf	postinc1,f,c
 14903   0119BE  52E6               	movf	postinc1,f,c
 14904   0119C0  52E6               	movf	postinc1,f,c
 14905   0119C2                     
 14906                           ;can/can.c: 474: int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config);can/can.c:
      +                           475: {;can/can.c: 476:     REG_CiCON ciCon;;can/can.c: 477:     ciCon.word = canControl
      +                          ResetValues[0x000 / 4];
 14907   0119C2  0E8D               	movlw	low _canControlResetValues
 14908   0119C4  6EF6               	movwf	tblptrl,c
 14909   0119C6                     	if	1	;There is more than 1 active tblptr byte
 14910   0119C6  0EFF               	movlw	high _canControlResetValues
 14911   0119C8  6EF7               	movwf	tblptrh,c
 14912   0119CA                     	endif
 14913   0119CA                     	if	1	;There are 3 active tblptr bytes
 14914   0119CA  0E00               	movlw	low (_canControlResetValues shr (0+16))
 14915   0119CC  6EF8               	movwf	tblptru,c
 14916   0119CE                     	endif
 14917   0119CE  0009               	tblrd		*+
 14918   0119D0  CFF5 F035          	movff	tablat,btemp+8
 14919   0119D4  0009               	tblrd		*+
 14920   0119D6  CFF5 F036          	movff	tablat,btemp+9
 14921   0119DA  0009               	tblrd		*+
 14922   0119DC  CFF5 F037          	movff	tablat,btemp+10
 14923   0119E0  0009               	tblrd		*+
 14924   0119E2  CFF5 F038          	movff	tablat,btemp+11
 14925                           
 14926                           ;stkvar	_ciCon @ sp[(-4)+0]
 14927   0119E6  0EFC               	movlw	-4
 14928   0119E8  C035  FFE3         	movff	btemp+8,plusw1
 14929   0119EC  0EFD               	movlw	-3
 14930   0119EE  C036  FFE3         	movff	btemp+9,plusw1
 14931   0119F2  0EFE               	movlw	-2
 14932   0119F4  C037  FFE3         	movff	btemp+10,plusw1
 14933   0119F8  0EFF               	movlw	-1
 14934   0119FA  C038  FFE3         	movff	btemp+11,plusw1
 14935   0119FE                     
 14936                           ;can/can.c: 479:     config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 14937                           ;stkvar	_ciCon @ sp[(-4)+0]
 14938   0119FE  50E1               	movf	fsr1l,w,c
 14939   011A00  0FFC               	addlw	-4
 14940   011A02  6ED9               	movwf	fsr2l,c
 14941   011A04  50E2               	movf	fsr1h,w,c
 14942   011A06  6EDA               	movwf	fsr2h,c
 14943   011A08  0EFF               	movlw	255
 14944   011A0A  22DA               	addwfc	fsr2h,f,c
 14945   011A0C  50DF               	movf	223,w,c
 14946   011A0E  0B1F               	andlw	31
 14947   011A10  6E38               	movwf	(btemp+11)^0,c
 14948                           
 14949                           ;stkvar	_config @ sp[(-4)+-2]
 14950   011A12  0EFA               	movlw	-6
 14951   011A14  CFE3 FFD9          	movff	plusw1,fsr2l
 14952   011A18  0EFB               	movlw	-5
 14953   011A1A  CFE3 FFDA          	movff	plusw1,fsr2h
 14954   011A1E  50DF               	movf	223,w,c
 14955   011A20  1838               	xorwf	(btemp+11)^0,w,c
 14956   011A22  0BE0               	andlw	-32
 14957   011A24  1838               	xorwf	(btemp+11)^0,w,c
 14958   011A26  6EDF               	movwf	223,c
 14959   011A28                     
 14960                           ;can/can.c: 480:     config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 14961                           ;stkvar	_ciCon @ sp[(-4)+0]
 14962   011A28  50E1               	movf	fsr1l,w,c
 14963   011A2A  0FFC               	addlw	-4
 14964   011A2C  6ED9               	movwf	fsr2l,c
 14965   011A2E  50E2               	movf	fsr1h,w,c
 14966   011A30  6EDA               	movwf	fsr2h,c
 14967   011A32  0EFF               	movlw	255
 14968   011A34  22DA               	addwfc	fsr2h,f,c
 14969                           
 14970                           ;stkvar	_config @ sp[(-4)+-2]
 14971   011A36  0EFA               	movlw	-6
 14972   011A38  CFE3 FFE9          	movff	plusw1,fsr0l
 14973   011A3C  0EFB               	movlw	-5
 14974   011A3E  CFE3 FFEA          	movff	plusw1,fsr0h
 14975   011A42  9AEF               	bcf	indf0,5,c
 14976   011A44  AADF               	btfss	indf2,5,c
 14977   011A46  EF26  F08D         	goto	u785
 14978   011A4A  8AEF               	bsf	indf0,5,c
 14979   011A4C                     u785:
 14980   011A4C                     
 14981                           ;can/can.c: 481:     config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionE
      +                          ventDisable;
 14982                           ;stkvar	_ciCon @ sp[(-4)+0]
 14983   011A4C  50E1               	movf	fsr1l,w,c
 14984   011A4E  0FFC               	addlw	-4
 14985   011A50  6ED9               	movwf	fsr2l,c
 14986   011A52  50E2               	movf	fsr1h,w,c
 14987   011A54  6EDA               	movwf	fsr2h,c
 14988   011A56  0EFF               	movlw	255
 14989   011A58  22DA               	addwfc	fsr2h,f,c
 14990                           
 14991                           ;stkvar	_config @ sp[(-4)+-2]
 14992   011A5A  0EFA               	movlw	-6
 14993   011A5C  CFE3 FFE9          	movff	plusw1,fsr0l
 14994   011A60  0EFB               	movlw	-5
 14995   011A62  CFE3 FFEA          	movff	plusw1,fsr0h
 14996   011A66  9CEF               	bcf	indf0,6,c
 14997   011A68  ACDF               	btfss	indf2,6,c
 14998   011A6A  EF38  F08D         	goto	u795
 14999   011A6E  8CEF               	bsf	indf0,6,c
 15000   011A70                     u795:
 15001   011A70                     
 15002                           ;can/can.c: 482:     config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 15003                           ;stkvar	_ciCon @ sp[(-4)+0]
 15004   011A70  0EFD               	movlw	253
 15005   011A72  24E1               	addwf	fsr1l,w,c
 15006   011A74  6ED9               	movwf	fsr2l,c
 15007   011A76  0EFF               	movlw	255
 15008   011A78  20E2               	addwfc	fsr1h,w,c
 15009   011A7A  6EDA               	movwf	fsr2h,c
 15010                           
 15011                           ;stkvar	_config @ sp[(-4)+-2]
 15012   011A7C  0EFA               	movlw	-6
 15013   011A7E  CFE3 FFE9          	movff	plusw1,fsr0l
 15014   011A82  0EFB               	movlw	-5
 15015   011A84  CFE3 FFEA          	movff	plusw1,fsr0h
 15016   011A88  9EEF               	bcf	indf0,7,c
 15017   011A8A  A0DF               	btfss	indf2,0,c
 15018   011A8C  EF49  F08D         	goto	u805
 15019   011A90  8EEF               	bsf	indf0,7,c
 15020   011A92                     u805:
 15021   011A92                     
 15022                           ;can/can.c: 483:     config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 15023                           ;stkvar	_ciCon @ sp[(-4)+0]
 15024   011A92  0EFD               	movlw	253
 15025   011A94  24E1               	addwf	fsr1l,w,c
 15026   011A96  6ED9               	movwf	fsr2l,c
 15027   011A98  0EFF               	movlw	255
 15028   011A9A  20E2               	addwfc	fsr1h,w,c
 15029   011A9C  6EDA               	movwf	fsr2h,c
 15030   011A9E  30DF               	rrcf	223,w,c
 15031   011AA0  0B03               	andlw	3
 15032   011AA2  6E38               	movwf	(btemp+11)^0,c
 15033                           
 15034                           ;stkvar	_config @ sp[(-4)+-2]
 15035   011AA4  0EFA               	movlw	-6
 15036   011AA6  CFE3 F035          	movff	plusw1,btemp+8
 15037   011AAA  0EFB               	movlw	-5
 15038   011AAC  CFE3 F036          	movff	plusw1,btemp+9
 15039   011AB0  0E01               	movlw	1
 15040   011AB2  2435               	addwf	(btemp+8)^0,w,c
 15041   011AB4  6ED9               	movwf	fsr2l,c
 15042   011AB6  0E00               	movlw	0
 15043   011AB8  2036               	addwfc	(btemp+9)^0,w,c
 15044   011ABA  6EDA               	movwf	fsr2h,c
 15045   011ABC  50DF               	movf	223,w,c
 15046   011ABE  1838               	xorwf	(btemp+11)^0,w,c
 15047   011AC0  0BFC               	andlw	-4
 15048   011AC2  1838               	xorwf	(btemp+11)^0,w,c
 15049   011AC4  6EDF               	movwf	223,c
 15050   011AC6                     
 15051                           ;can/can.c: 484:     config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 15052                           ;stkvar	_ciCon @ sp[(-4)+0]
 15053   011AC6  0EFD               	movlw	253
 15054   011AC8  24E1               	addwf	fsr1l,w,c
 15055   011ACA  6ED9               	movwf	fsr2l,c
 15056   011ACC  0EFF               	movlw	255
 15057   011ACE  20E2               	addwfc	fsr1h,w,c
 15058   011AD0  6EDA               	movwf	fsr2h,c
 15059                           
 15060                           ;stkvar	_config @ sp[(-4)+-2]
 15061   011AD2  0EFA               	movlw	-6
 15062   011AD4  CFE3 F037          	movff	plusw1,btemp+10
 15063   011AD8  0EFB               	movlw	-5
 15064   011ADA  CFE3 F038          	movff	plusw1,btemp+11
 15065   011ADE  0E01               	movlw	1
 15066   011AE0  2437               	addwf	(btemp+10)^0,w,c
 15067   011AE2  6EE9               	movwf	fsr0l,c
 15068   011AE4  0E00               	movlw	0
 15069   011AE6  2038               	addwfc	(btemp+11)^0,w,c
 15070   011AE8  6EEA               	movwf	fsr0h,c
 15071   011AEA  94EF               	bcf	indf0,2,c
 15072   011AEC  A8DF               	btfss	indf2,4,c
 15073   011AEE  EF7A  F08D         	goto	u815
 15074   011AF2  84EF               	bsf	indf0,2,c
 15075   011AF4                     u815:
 15076   011AF4                     
 15077                           ;can/can.c: 485:     config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 15078                           ;stkvar	_ciCon @ sp[(-4)+0]
 15079   011AF4  0EFE               	movlw	254
 15080   011AF6  24E1               	addwf	fsr1l,w,c
 15081   011AF8  6ED9               	movwf	fsr2l,c
 15082   011AFA  0EFF               	movlw	255
 15083   011AFC  20E2               	addwfc	fsr1h,w,c
 15084   011AFE  6EDA               	movwf	fsr2h,c
 15085                           
 15086                           ;stkvar	_config @ sp[(-4)+-2]
 15087   011B00  0EFA               	movlw	-6
 15088   011B02  CFE3 F037          	movff	plusw1,btemp+10
 15089   011B06  0EFB               	movlw	-5
 15090   011B08  CFE3 F038          	movff	plusw1,btemp+11
 15091   011B0C  0E01               	movlw	1
 15092   011B0E  2437               	addwf	(btemp+10)^0,w,c
 15093   011B10  6EE9               	movwf	fsr0l,c
 15094   011B12  0E00               	movlw	0
 15095   011B14  2038               	addwfc	(btemp+11)^0,w,c
 15096   011B16  6EEA               	movwf	fsr0h,c
 15097   011B18  96EF               	bcf	indf0,3,c
 15098   011B1A  A0DF               	btfss	indf2,0,c
 15099   011B1C  EF91  F08D         	goto	u825
 15100   011B20  86EF               	bsf	indf0,3,c
 15101   011B22                     u825:
 15102   011B22                     
 15103                           ;can/can.c: 486:     config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 15104                           ;stkvar	_ciCon @ sp[(-4)+0]
 15105   011B22  0EFE               	movlw	254
 15106   011B24  24E1               	addwf	fsr1l,w,c
 15107   011B26  6ED9               	movwf	fsr2l,c
 15108   011B28  0EFF               	movlw	255
 15109   011B2A  20E2               	addwfc	fsr1h,w,c
 15110   011B2C  6EDA               	movwf	fsr2h,c
 15111                           
 15112                           ;stkvar	_config @ sp[(-4)+-2]
 15113   011B2E  0EFA               	movlw	-6
 15114   011B30  CFE3 F037          	movff	plusw1,btemp+10
 15115   011B34  0EFB               	movlw	-5
 15116   011B36  CFE3 F038          	movff	plusw1,btemp+11
 15117   011B3A  0E01               	movlw	1
 15118   011B3C  2437               	addwf	(btemp+10)^0,w,c
 15119   011B3E  6EE9               	movwf	fsr0l,c
 15120   011B40  0E00               	movlw	0
 15121   011B42  2038               	addwfc	(btemp+11)^0,w,c
 15122   011B44  6EEA               	movwf	fsr0h,c
 15123   011B46  98EF               	bcf	indf0,4,c
 15124   011B48  A2DF               	btfss	indf2,1,c
 15125   011B4A  EFA8  F08D         	goto	u835
 15126   011B4E  88EF               	bsf	indf0,4,c
 15127   011B50                     u835:
 15128   011B50                     
 15129                           ;can/can.c: 487:     config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 15130                           ;stkvar	_ciCon @ sp[(-4)+0]
 15131   011B50  0EFE               	movlw	254
 15132   011B52  24E1               	addwf	fsr1l,w,c
 15133   011B54  6ED9               	movwf	fsr2l,c
 15134   011B56  0EFF               	movlw	255
 15135   011B58  20E2               	addwfc	fsr1h,w,c
 15136   011B5A  6EDA               	movwf	fsr2h,c
 15137                           
 15138                           ;stkvar	_config @ sp[(-4)+-2]
 15139   011B5C  0EFA               	movlw	-6
 15140   011B5E  CFE3 F037          	movff	plusw1,btemp+10
 15141   011B62  0EFB               	movlw	-5
 15142   011B64  CFE3 F038          	movff	plusw1,btemp+11
 15143   011B68  0E01               	movlw	1
 15144   011B6A  2437               	addwf	(btemp+10)^0,w,c
 15145   011B6C  6EE9               	movwf	fsr0l,c
 15146   011B6E  0E00               	movlw	0
 15147   011B70  2038               	addwfc	(btemp+11)^0,w,c
 15148   011B72  6EEA               	movwf	fsr0h,c
 15149   011B74  9AEF               	bcf	indf0,5,c
 15150   011B76  A4DF               	btfss	indf2,2,c
 15151   011B78  EFBF  F08D         	goto	u845
 15152   011B7C  8AEF               	bsf	indf0,5,c
 15153   011B7E                     u845:
 15154   011B7E                     
 15155                           ;can/can.c: 488:     config->StoreInTEF = ciCon.bF.StoreInTEF;
 15156                           ;stkvar	_ciCon @ sp[(-4)+0]
 15157   011B7E  0EFE               	movlw	254
 15158   011B80  24E1               	addwf	fsr1l,w,c
 15159   011B82  6ED9               	movwf	fsr2l,c
 15160   011B84  0EFF               	movlw	255
 15161   011B86  20E2               	addwfc	fsr1h,w,c
 15162   011B88  6EDA               	movwf	fsr2h,c
 15163                           
 15164                           ;stkvar	_config @ sp[(-4)+-2]
 15165   011B8A  0EFA               	movlw	-6
 15166   011B8C  CFE3 F037          	movff	plusw1,btemp+10
 15167   011B90  0EFB               	movlw	-5
 15168   011B92  CFE3 F038          	movff	plusw1,btemp+11
 15169   011B96  0E01               	movlw	1
 15170   011B98  2437               	addwf	(btemp+10)^0,w,c
 15171   011B9A  6EE9               	movwf	fsr0l,c
 15172   011B9C  0E00               	movlw	0
 15173   011B9E  2038               	addwfc	(btemp+11)^0,w,c
 15174   011BA0  6EEA               	movwf	fsr0h,c
 15175   011BA2  9CEF               	bcf	indf0,6,c
 15176   011BA4  A6DF               	btfss	indf2,3,c
 15177   011BA6  EFD6  F08D         	goto	u855
 15178   011BAA  8CEF               	bsf	indf0,6,c
 15179   011BAC                     u855:
 15180   011BAC                     
 15181                           ;can/can.c: 489:     config->TXQEnable = ciCon.bF.TXQEnable;
 15182                           ;stkvar	_ciCon @ sp[(-4)+0]
 15183   011BAC  0EFE               	movlw	254
 15184   011BAE  24E1               	addwf	fsr1l,w,c
 15185   011BB0  6ED9               	movwf	fsr2l,c
 15186   011BB2  0EFF               	movlw	255
 15187   011BB4  20E2               	addwfc	fsr1h,w,c
 15188   011BB6  6EDA               	movwf	fsr2h,c
 15189                           
 15190                           ;stkvar	_config @ sp[(-4)+-2]
 15191   011BB8  0EFA               	movlw	-6
 15192   011BBA  CFE3 F037          	movff	plusw1,btemp+10
 15193   011BBE  0EFB               	movlw	-5
 15194   011BC0  CFE3 F038          	movff	plusw1,btemp+11
 15195   011BC4  0E01               	movlw	1
 15196   011BC6  2437               	addwf	(btemp+10)^0,w,c
 15197   011BC8  6EE9               	movwf	fsr0l,c
 15198   011BCA  0E00               	movlw	0
 15199   011BCC  2038               	addwfc	(btemp+11)^0,w,c
 15200   011BCE  6EEA               	movwf	fsr0h,c
 15201   011BD0  9EEF               	bcf	indf0,7,c
 15202   011BD2  A8DF               	btfss	indf2,4,c
 15203   011BD4  EFED  F08D         	goto	u865
 15204   011BD8  8EEF               	bsf	indf0,7,c
 15205   011BDA                     u865:
 15206   011BDA                     
 15207                           ;can/can.c: 490:     config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 15208                           ;stkvar	_ciCon @ sp[(-4)+0]
 15209   011BDA  0EFF               	movlw	255
 15210   011BDC  24E1               	addwf	fsr1l,w,c
 15211   011BDE  6ED9               	movwf	fsr2l,c
 15212   011BE0  0EFF               	movlw	255
 15213   011BE2  20E2               	addwfc	fsr1h,w,c
 15214   011BE4  6EDA               	movwf	fsr2h,c
 15215   011BE6  38DF               	swapf	223,w,c
 15216   011BE8  0B0F               	andlw	15
 15217   011BEA  6E38               	movwf	(btemp+11)^0,c
 15218                           
 15219                           ;stkvar	_config @ sp[(-4)+-2]
 15220   011BEC  0EFA               	movlw	-6
 15221   011BEE  CFE3 F035          	movff	plusw1,btemp+8
 15222   011BF2  0EFB               	movlw	-5
 15223   011BF4  CFE3 F036          	movff	plusw1,btemp+9
 15224   011BF8  0E02               	movlw	2
 15225   011BFA  2435               	addwf	(btemp+8)^0,w,c
 15226   011BFC  6ED9               	movwf	fsr2l,c
 15227   011BFE  0E00               	movlw	0
 15228   011C00  2036               	addwfc	(btemp+9)^0,w,c
 15229   011C02  6EDA               	movwf	fsr2h,c
 15230   011C04  50DF               	movf	223,w,c
 15231   011C06  1838               	xorwf	(btemp+11)^0,w,c
 15232   011C08  0BF0               	andlw	-16
 15233   011C0A  1838               	xorwf	(btemp+11)^0,w,c
 15234   011C0C  6EDF               	movwf	223,c
 15235   011C0E                     
 15236                           ; _DRV_CANFDSPI_ConfigureObjectReset: autosize = 4, savesize = 0, parsavesize = 0, temps
      +                          ize = 0 parsize = 2, argsize = 2, vargsize = 0
 15237   011C0E  0EFA               	movlw	250
 15238   011C10  26E1               	addwf	fsr1l,f,c
 15239   011C12  0EFF               	movlw	255
 15240   011C14  22E2               	addwfc	fsr1h,f,c
 15241   011C16  0012               	return		;funcret
 15242   011C18                     __end_of_DRV_CANFDSPI_ConfigureObjectReset:
 15243                           	callstack 0
 15244                           
 15245 ;; *************** function _DRV_CANFDSPI_Configure *****************
 15246 ;; Defined at:
 15247 ;;		line 446 in file "can/can.c"
 15248 ;; Parameters:    Size  Location     Type
 15249 ;;  config          2  [STACK] PTR struct _CAN_CONFIG
 15250 ;;		 -> config(3), 
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;  ciCon           4  [STACK] struct _REG_CiCON
 15253 ;;  spiTransferE    1    0        char 
 15254 ;; Return value:  Size  Location     Type
 15255 ;;                  1  [STACK] char 
 15256 ;; Registers used:
 15257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15267 ;;Total ram usage:        0 bytes
 15268 ;; Hardware stack levels used: 1
 15269 ;; Hardware stack levels required when called: 9
 15270 ;; This function calls:
 15271 ;;		_DRV_CANFDSPI_WriteWord
 15272 ;; This function is called by:
 15273 ;;		_CanInit
 15274 ;; This function uses a reentrant model
 15275 ;;
 15276                           
 15277                           	psect	text63
 15278   01173A                     __ptext63:
 15279                           	callstack 0
 15280   01173A                     _DRV_CANFDSPI_Configure:
 15281                           	callstack 0
 15282                           
 15283                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15284   01173A  52E6               	movf	postinc1,f,c
 15285   01173C  52E6               	movf	postinc1,f,c
 15286   01173E  52E6               	movf	postinc1,f,c
 15287   011740  52E6               	movf	postinc1,f,c
 15288   011742                     
 15289                           ;can/can.c: 451:     ciCon.word = canControlResetValues[0x000 / 4];
 15290   011742  0E8D               	movlw	low _canControlResetValues
 15291   011744  6EF6               	movwf	tblptrl,c
 15292   011746                     	if	1	;There is more than 1 active tblptr byte
 15293   011746  0EFF               	movlw	high _canControlResetValues
 15294   011748  6EF7               	movwf	tblptrh,c
 15295   01174A                     	endif
 15296   01174A                     	if	1	;There are 3 active tblptr bytes
 15297   01174A  0E00               	movlw	low (_canControlResetValues shr (0+16))
 15298   01174C  6EF8               	movwf	tblptru,c
 15299   01174E                     	endif
 15300   01174E  0009               	tblrd		*+
 15301   011750  CFF5 F035          	movff	tablat,btemp+8
 15302   011754  0009               	tblrd		*+
 15303   011756  CFF5 F036          	movff	tablat,btemp+9
 15304   01175A  0009               	tblrd		*+
 15305   01175C  CFF5 F037          	movff	tablat,btemp+10
 15306   011760  0009               	tblrd		*+
 15307   011762  CFF5 F038          	movff	tablat,btemp+11
 15308                           
 15309                           ;stkvar	_ciCon @ sp[(-4)+0]
 15310   011766  0EFC               	movlw	-4
 15311   011768  C035  FFE3         	movff	btemp+8,plusw1
 15312   01176C  0EFD               	movlw	-3
 15313   01176E  C036  FFE3         	movff	btemp+9,plusw1
 15314   011772  0EFE               	movlw	-2
 15315   011774  C037  FFE3         	movff	btemp+10,plusw1
 15316   011778  0EFF               	movlw	-1
 15317   01177A  C038  FFE3         	movff	btemp+11,plusw1
 15318   01177E                     
 15319                           ;can/can.c: 453:     ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 15320                           ;stkvar	_config @ sp[(-4)+-2]
 15321   01177E  0EFA               	movlw	-6
 15322   011780  CFE3 FFD9          	movff	plusw1,fsr2l
 15323   011784  0EFB               	movlw	-5
 15324   011786  CFE3 FFDA          	movff	plusw1,fsr2h
 15325   01178A  50DF               	movf	223,w,c
 15326   01178C  0B1F               	andlw	31
 15327   01178E  6E38               	movwf	(btemp+11)^0,c
 15328                           
 15329                           ;stkvar	_ciCon @ sp[(-4)+0]
 15330   011790  50E1               	movf	fsr1l,w,c
 15331   011792  0FFC               	addlw	-4
 15332   011794  6ED9               	movwf	fsr2l,c
 15333   011796  50E2               	movf	fsr1h,w,c
 15334   011798  6EDA               	movwf	fsr2h,c
 15335   01179A  0EFF               	movlw	255
 15336   01179C  22DA               	addwfc	fsr2h,f,c
 15337   01179E  50DF               	movf	223,w,c
 15338   0117A0  1838               	xorwf	(btemp+11)^0,w,c
 15339   0117A2  0BE0               	andlw	-32
 15340   0117A4  1838               	xorwf	(btemp+11)^0,w,c
 15341   0117A6  6EDF               	movwf	223,c
 15342   0117A8                     
 15343                           ;can/can.c: 454:     ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 15344                           ;stkvar	_config @ sp[(-4)+-2]
 15345   0117A8  0EFA               	movlw	-6
 15346   0117AA  CFE3 FFD9          	movff	plusw1,fsr2l
 15347   0117AE  0EFB               	movlw	-5
 15348   0117B0  CFE3 FFDA          	movff	plusw1,fsr2h
 15349                           
 15350                           ;stkvar	_ciCon @ sp[(-4)+0]
 15351   0117B4  50E1               	movf	fsr1l,w,c
 15352   0117B6  0FFC               	addlw	-4
 15353   0117B8  6EE9               	movwf	fsr0l,c
 15354   0117BA  50E2               	movf	fsr1h,w,c
 15355   0117BC  6EEA               	movwf	fsr0h,c
 15356   0117BE  0EFF               	movlw	255
 15357   0117C0  22EA               	addwfc	fsr0h,f,c
 15358   0117C2  9AEF               	bcf	indf0,5,c
 15359   0117C4  AADF               	btfss	indf2,5,c
 15360   0117C6  EFE6  F08B         	goto	u2235
 15361   0117CA  8AEF               	bsf	indf0,5,c
 15362   0117CC                     u2235:
 15363   0117CC                     
 15364                           ;can/can.c: 455:     ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionE
      +                          ventDisable;
 15365                           ;stkvar	_config @ sp[(-4)+-2]
 15366   0117CC  0EFA               	movlw	-6
 15367   0117CE  CFE3 FFD9          	movff	plusw1,fsr2l
 15368   0117D2  0EFB               	movlw	-5
 15369   0117D4  CFE3 FFDA          	movff	plusw1,fsr2h
 15370                           
 15371                           ;stkvar	_ciCon @ sp[(-4)+0]
 15372   0117D8  50E1               	movf	fsr1l,w,c
 15373   0117DA  0FFC               	addlw	-4
 15374   0117DC  6EE9               	movwf	fsr0l,c
 15375   0117DE  50E2               	movf	fsr1h,w,c
 15376   0117E0  6EEA               	movwf	fsr0h,c
 15377   0117E2  0EFF               	movlw	255
 15378   0117E4  22EA               	addwfc	fsr0h,f,c
 15379   0117E6  9CEF               	bcf	indf0,6,c
 15380   0117E8  ACDF               	btfss	indf2,6,c
 15381   0117EA  EFF8  F08B         	goto	u2245
 15382   0117EE  8CEF               	bsf	indf0,6,c
 15383   0117F0                     u2245:
 15384   0117F0                     
 15385                           ;can/can.c: 456:     ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 15386                           ;stkvar	_config @ sp[(-4)+-2]
 15387   0117F0  0EFA               	movlw	-6
 15388   0117F2  CFE3 FFD9          	movff	plusw1,fsr2l
 15389   0117F6  0EFB               	movlw	-5
 15390   0117F8  CFE3 FFDA          	movff	plusw1,fsr2h
 15391                           
 15392                           ;stkvar	_ciCon @ sp[(-4)+0]
 15393   0117FC  0EFD               	movlw	253
 15394   0117FE  24E1               	addwf	fsr1l,w,c
 15395   011800  6EE9               	movwf	fsr0l,c
 15396   011802  0EFF               	movlw	255
 15397   011804  20E2               	addwfc	fsr1h,w,c
 15398   011806  6EEA               	movwf	fsr0h,c
 15399   011808  90EF               	bcf	indf0,0,c
 15400   01180A  AEDF               	btfss	indf2,7,c
 15401   01180C  EF09  F08C         	goto	u2255
 15402   011810  80EF               	bsf	indf0,0,c
 15403   011812                     u2255:
 15404   011812                     
 15405                           ;can/can.c: 457:     ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 15406                           ;stkvar	_config @ sp[(-4)+-2]
 15407   011812  0EFA               	movlw	-6
 15408   011814  CFE3 F037          	movff	plusw1,btemp+10
 15409   011818  0EFB               	movlw	-5
 15410   01181A  CFE3 F038          	movff	plusw1,btemp+11
 15411   01181E  0E01               	movlw	1
 15412   011820  2437               	addwf	(btemp+10)^0,w,c
 15413   011822  6ED9               	movwf	fsr2l,c
 15414   011824  0E00               	movlw	0
 15415   011826  2038               	addwfc	(btemp+11)^0,w,c
 15416   011828  6EDA               	movwf	fsr2h,c
 15417   01182A  50DF               	movf	223,w,c
 15418   01182C  0B03               	andlw	3
 15419   01182E  6E38               	movwf	(btemp+11)^0,c
 15420                           
 15421                           ;stkvar	_ciCon @ sp[(-4)+0]
 15422   011830  0EFD               	movlw	253
 15423   011832  24E1               	addwf	fsr1l,w,c
 15424   011834  6ED9               	movwf	fsr2l,c
 15425   011836  0EFF               	movlw	255
 15426   011838  20E2               	addwfc	fsr1h,w,c
 15427   01183A  6EDA               	movwf	fsr2h,c
 15428   01183C  4638               	rlncf	(btemp+11)^0,f,c
 15429   01183E  50DF               	movf	223,w,c
 15430   011840  1838               	xorwf	(btemp+11)^0,w,c
 15431   011842  0BF9               	andlw	-7
 15432   011844  1838               	xorwf	(btemp+11)^0,w,c
 15433   011846  6EDF               	movwf	223,c
 15434   011848                     
 15435                           ;can/can.c: 458:     ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 15436                           ;stkvar	_config @ sp[(-4)+-2]
 15437   011848  0EFA               	movlw	-6
 15438   01184A  CFE3 F037          	movff	plusw1,btemp+10
 15439   01184E  0EFB               	movlw	-5
 15440   011850  CFE3 F038          	movff	plusw1,btemp+11
 15441   011854  0E01               	movlw	1
 15442   011856  2437               	addwf	(btemp+10)^0,w,c
 15443   011858  6ED9               	movwf	fsr2l,c
 15444   01185A  0E00               	movlw	0
 15445   01185C  2038               	addwfc	(btemp+11)^0,w,c
 15446   01185E  6EDA               	movwf	fsr2h,c
 15447                           
 15448                           ;stkvar	_ciCon @ sp[(-4)+0]
 15449   011860  0EFD               	movlw	253
 15450   011862  24E1               	addwf	fsr1l,w,c
 15451   011864  6EE9               	movwf	fsr0l,c
 15452   011866  0EFF               	movlw	255
 15453   011868  20E2               	addwfc	fsr1h,w,c
 15454   01186A  6EEA               	movwf	fsr0h,c
 15455   01186C  98EF               	bcf	indf0,4,c
 15456   01186E  A4DF               	btfss	indf2,2,c
 15457   011870  EF3B  F08C         	goto	u2265
 15458   011874  88EF               	bsf	indf0,4,c
 15459   011876                     u2265:
 15460   011876                     
 15461                           ;can/can.c: 459:     ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 15462                           ;stkvar	_config @ sp[(-4)+-2]
 15463   011876  0EFA               	movlw	-6
 15464   011878  CFE3 F037          	movff	plusw1,btemp+10
 15465   01187C  0EFB               	movlw	-5
 15466   01187E  CFE3 F038          	movff	plusw1,btemp+11
 15467   011882  0E01               	movlw	1
 15468   011884  2437               	addwf	(btemp+10)^0,w,c
 15469   011886  6ED9               	movwf	fsr2l,c
 15470   011888  0E00               	movlw	0
 15471   01188A  2038               	addwfc	(btemp+11)^0,w,c
 15472   01188C  6EDA               	movwf	fsr2h,c
 15473                           
 15474                           ;stkvar	_ciCon @ sp[(-4)+0]
 15475   01188E  0EFE               	movlw	254
 15476   011890  24E1               	addwf	fsr1l,w,c
 15477   011892  6EE9               	movwf	fsr0l,c
 15478   011894  0EFF               	movlw	255
 15479   011896  20E2               	addwfc	fsr1h,w,c
 15480   011898  6EEA               	movwf	fsr0h,c
 15481   01189A  90EF               	bcf	indf0,0,c
 15482   01189C  A6DF               	btfss	indf2,3,c
 15483   01189E  EF52  F08C         	goto	u2275
 15484   0118A2  80EF               	bsf	indf0,0,c
 15485   0118A4                     u2275:
 15486   0118A4                     
 15487                           ;can/can.c: 460:     ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 15488                           ;stkvar	_config @ sp[(-4)+-2]
 15489   0118A4  0EFA               	movlw	-6
 15490   0118A6  CFE3 F037          	movff	plusw1,btemp+10
 15491   0118AA  0EFB               	movlw	-5
 15492   0118AC  CFE3 F038          	movff	plusw1,btemp+11
 15493   0118B0  0E01               	movlw	1
 15494   0118B2  2437               	addwf	(btemp+10)^0,w,c
 15495   0118B4  6ED9               	movwf	fsr2l,c
 15496   0118B6  0E00               	movlw	0
 15497   0118B8  2038               	addwfc	(btemp+11)^0,w,c
 15498   0118BA  6EDA               	movwf	fsr2h,c
 15499                           
 15500                           ;stkvar	_ciCon @ sp[(-4)+0]
 15501   0118BC  0EFE               	movlw	254
 15502   0118BE  24E1               	addwf	fsr1l,w,c
 15503   0118C0  6EE9               	movwf	fsr0l,c
 15504   0118C2  0EFF               	movlw	255
 15505   0118C4  20E2               	addwfc	fsr1h,w,c
 15506   0118C6  6EEA               	movwf	fsr0h,c
 15507   0118C8  92EF               	bcf	indf0,1,c
 15508   0118CA  A8DF               	btfss	indf2,4,c
 15509   0118CC  EF69  F08C         	goto	u2285
 15510   0118D0  82EF               	bsf	indf0,1,c
 15511   0118D2                     u2285:
 15512   0118D2                     
 15513                           ;can/can.c: 461:     ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 15514                           ;stkvar	_config @ sp[(-4)+-2]
 15515   0118D2  0EFA               	movlw	-6
 15516   0118D4  CFE3 F037          	movff	plusw1,btemp+10
 15517   0118D8  0EFB               	movlw	-5
 15518   0118DA  CFE3 F038          	movff	plusw1,btemp+11
 15519   0118DE  0E01               	movlw	1
 15520   0118E0  2437               	addwf	(btemp+10)^0,w,c
 15521   0118E2  6ED9               	movwf	fsr2l,c
 15522   0118E4  0E00               	movlw	0
 15523   0118E6  2038               	addwfc	(btemp+11)^0,w,c
 15524   0118E8  6EDA               	movwf	fsr2h,c
 15525                           
 15526                           ;stkvar	_ciCon @ sp[(-4)+0]
 15527   0118EA  0EFE               	movlw	254
 15528   0118EC  24E1               	addwf	fsr1l,w,c
 15529   0118EE  6EE9               	movwf	fsr0l,c
 15530   0118F0  0EFF               	movlw	255
 15531   0118F2  20E2               	addwfc	fsr1h,w,c
 15532   0118F4  6EEA               	movwf	fsr0h,c
 15533   0118F6  94EF               	bcf	indf0,2,c
 15534   0118F8  AADF               	btfss	indf2,5,c
 15535   0118FA  EF80  F08C         	goto	u2295
 15536   0118FE  84EF               	bsf	indf0,2,c
 15537   011900                     u2295:
 15538   011900                     
 15539                           ;can/can.c: 462:     ciCon.bF.StoreInTEF = config->StoreInTEF;
 15540                           ;stkvar	_config @ sp[(-4)+-2]
 15541   011900  0EFA               	movlw	-6
 15542   011902  CFE3 F037          	movff	plusw1,btemp+10
 15543   011906  0EFB               	movlw	-5
 15544   011908  CFE3 F038          	movff	plusw1,btemp+11
 15545   01190C  0E01               	movlw	1
 15546   01190E  2437               	addwf	(btemp+10)^0,w,c
 15547   011910  6ED9               	movwf	fsr2l,c
 15548   011912  0E00               	movlw	0
 15549   011914  2038               	addwfc	(btemp+11)^0,w,c
 15550   011916  6EDA               	movwf	fsr2h,c
 15551                           
 15552                           ;stkvar	_ciCon @ sp[(-4)+0]
 15553   011918  0EFE               	movlw	254
 15554   01191A  24E1               	addwf	fsr1l,w,c
 15555   01191C  6EE9               	movwf	fsr0l,c
 15556   01191E  0EFF               	movlw	255
 15557   011920  20E2               	addwfc	fsr1h,w,c
 15558   011922  6EEA               	movwf	fsr0h,c
 15559   011924  96EF               	bcf	indf0,3,c
 15560   011926  ACDF               	btfss	indf2,6,c
 15561   011928  EF97  F08C         	goto	u2305
 15562   01192C  86EF               	bsf	indf0,3,c
 15563   01192E                     u2305:
 15564   01192E                     
 15565                           ;can/can.c: 463:     ciCon.bF.TXQEnable = config->TXQEnable;
 15566                           ;stkvar	_config @ sp[(-4)+-2]
 15567   01192E  0EFA               	movlw	-6
 15568   011930  CFE3 F037          	movff	plusw1,btemp+10
 15569   011934  0EFB               	movlw	-5
 15570   011936  CFE3 F038          	movff	plusw1,btemp+11
 15571   01193A  0E01               	movlw	1
 15572   01193C  2437               	addwf	(btemp+10)^0,w,c
 15573   01193E  6ED9               	movwf	fsr2l,c
 15574   011940  0E00               	movlw	0
 15575   011942  2038               	addwfc	(btemp+11)^0,w,c
 15576   011944  6EDA               	movwf	fsr2h,c
 15577                           
 15578                           ;stkvar	_ciCon @ sp[(-4)+0]
 15579   011946  0EFE               	movlw	254
 15580   011948  24E1               	addwf	fsr1l,w,c
 15581   01194A  6EE9               	movwf	fsr0l,c
 15582   01194C  0EFF               	movlw	255
 15583   01194E  20E2               	addwfc	fsr1h,w,c
 15584   011950  6EEA               	movwf	fsr0h,c
 15585   011952  98EF               	bcf	indf0,4,c
 15586   011954  AEDF               	btfss	indf2,7,c
 15587   011956  EFAE  F08C         	goto	u2315
 15588   01195A  88EF               	bsf	indf0,4,c
 15589   01195C                     u2315:
 15590   01195C                     
 15591                           ;can/can.c: 464:     ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 15592                           ;stkvar	_config @ sp[(-4)+-2]
 15593   01195C  0EFA               	movlw	-6
 15594   01195E  CFE3 F037          	movff	plusw1,btemp+10
 15595   011962  0EFB               	movlw	-5
 15596   011964  CFE3 F038          	movff	plusw1,btemp+11
 15597   011968  0E02               	movlw	2
 15598   01196A  2437               	addwf	(btemp+10)^0,w,c
 15599   01196C  6ED9               	movwf	fsr2l,c
 15600   01196E  0E00               	movlw	0
 15601   011970  2038               	addwfc	(btemp+11)^0,w,c
 15602   011972  6EDA               	movwf	fsr2h,c
 15603   011974  50DF               	movf	223,w,c
 15604   011976  0B0F               	andlw	15
 15605   011978  6E38               	movwf	(btemp+11)^0,c
 15606                           
 15607                           ;stkvar	_ciCon @ sp[(-4)+0]
 15608   01197A  0EFF               	movlw	255
 15609   01197C  24E1               	addwf	fsr1l,w,c
 15610   01197E  6ED9               	movwf	fsr2l,c
 15611   011980  0EFF               	movlw	255
 15612   011982  20E2               	addwfc	fsr1h,w,c
 15613   011984  6EDA               	movwf	fsr2h,c
 15614   011986  3A38               	swapf	(btemp+11)^0,f,c
 15615   011988  50DF               	movf	223,w,c
 15616   01198A  1838               	xorwf	(btemp+11)^0,w,c
 15617   01198C  0B0F               	andlw	-241
 15618   01198E  1838               	xorwf	(btemp+11)^0,w,c
 15619   011990  6EDF               	movwf	223,c
 15620   011992                     
 15621                           ;stkvar	_ciCon @ sp[(-4)+0]
 15622   011992  0EFC               	movlw	-4
 15623   011994  CFE3 FFE6          	movff	plusw1,postinc1
 15624   011998  CFE3 FFE6          	movff	plusw1,postinc1
 15625   01199C  CFE3 FFE6          	movff	plusw1,postinc1
 15626   0119A0  CFE3 FFE6          	movff	plusw1,postinc1
 15627   0119A4  0E00               	movlw	0
 15628   0119A6  6EE6               	movwf	postinc1,c
 15629   0119A8  0E00               	movlw	0
 15630   0119AA  6EE6               	movwf	postinc1,c
 15631   0119AC  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 15632   0119B0                     
 15633                           ; _DRV_CANFDSPI_Configure: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
 15634   0119B0  0EFA               	movlw	250
 15635   0119B2  26E1               	addwf	fsr1l,f,c
 15636   0119B4  0EFF               	movlw	255
 15637   0119B6  22E2               	addwfc	fsr1h,f,c
 15638   0119B8  0012               	return		;funcret
 15639   0119BA                     __end_of_DRV_CANFDSPI_Configure:
 15640                           	callstack 0
 15641                           
 15642 ;; *************** function _DRV_CANFDSPI_BitTimeConfigureNominal40MHz *****************
 15643 ;; Defined at:
 15644 ;;		line 2825 in file "can/can.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;  bitTime         1  [STACK] enum E5607
 15647 ;; Auto vars:     Size  Location     Type
 15648 ;;  ciNbtcfg        4  [STACK] struct _REG_CiNBTCFG
 15649 ;;  spiTransferE    1    0        char 
 15650 ;; Return value:  Size  Location     Type
 15651 ;;                  1  [STACK] char 
 15652 ;; Registers used:
 15653 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru, prodl, prodh
 15654 ;; Tracked objects:
 15655 ;;		On entry : 0/0
 15656 ;;		On exit  : 0/0
 15657 ;;		Unchanged: 0/0
 15658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15663 ;;Total ram usage:        0 bytes
 15664 ;; Hardware stack levels used: 1
 15665 ;; Hardware stack levels required when called: 9
 15666 ;; This function calls:
 15667 ;;		_DRV_CANFDSPI_WriteWord
 15668 ;; This function is called by:
 15669 ;;		_CanInit
 15670 ;; This function uses a reentrant model
 15671 ;;
 15672                           
 15673                           	psect	text64
 15674   011C18                     __ptext64:
 15675                           	callstack 0
 15676   011C18                     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 15677                           	callstack 0
 15678                           
 15679                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 15680   011C18  52E6               	movf	postinc1,f,c
 15681   011C1A  52E6               	movf	postinc1,f,c
 15682   011C1C  52E6               	movf	postinc1,f,c
 15683   011C1E  52E6               	movf	postinc1,f,c
 15684   011C20                     
 15685                           ;can/can.c: 2829:     REG_CiNBTCFG ciNbtcfg;;can/can.c: 2831:     ciNbtcfg.word = canCon
      +                          trolResetValues[0x004 / 4];
 15686   011C20  0E91               	movlw	low (_canControlResetValues+4)
 15687   011C22  6EF6               	movwf	tblptrl,c
 15688   011C24  0EFF               	movlw	high (_canControlResetValues+4)
 15689   011C26  6EF7               	movwf	tblptrh,c
 15690   011C28                     	if	0	;tblptru may be non-zero
 15691   011C28                     	endif
 15692   011C28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 15693   011C28  0E00               	movlw	low (__mediumconst shr (0+16))
 15694   011C2A  6EF8               	movwf	tblptru,c
 15695   011C2C                     	endif
 15696   011C2C  0009               	tblrd		*+
 15697   011C2E  CFF5 F035          	movff	tablat,btemp+8
 15698   011C32  0009               	tblrd		*+
 15699   011C34  CFF5 F036          	movff	tablat,btemp+9
 15700   011C38  0009               	tblrd		*+
 15701   011C3A  CFF5 F037          	movff	tablat,btemp+10
 15702   011C3E  0009               	tblrd		*+
 15703   011C40  CFF5 F038          	movff	tablat,btemp+11
 15704                           
 15705                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15706   011C44  0EFC               	movlw	-4
 15707   011C46  C035  FFE3         	movff	btemp+8,plusw1
 15708   011C4A  0EFD               	movlw	-3
 15709   011C4C  C036  FFE3         	movff	btemp+9,plusw1
 15710   011C50  0EFE               	movlw	-2
 15711   011C52  C037  FFE3         	movff	btemp+10,plusw1
 15712   011C56  0EFF               	movlw	-1
 15713   011C58  C038  FFE3         	movff	btemp+11,plusw1
 15714                           
 15715                           ;can/can.c: 2834:     switch (bitTime) {
 15716   011C5C  EFC8  F08E         	goto	l4386
 15717   011C60                     l665:
 15718   011C60                     l4366:
 15719                           
 15720                           ;can/can.c: 2844:             ciNbtcfg.bF.BRP = 0;
 15721                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15722   011C60  0EFF               	movlw	255
 15723   011C62  24E1               	addwf	fsr1l,w,c
 15724   011C64  6ED9               	movwf	fsr2l,c
 15725   011C66  0EFF               	movlw	255
 15726   011C68  20E2               	addwfc	fsr1h,w,c
 15727   011C6A  6EDA               	movwf	fsr2h,c
 15728   011C6C  6ADF               	clrf	indf2,c
 15729                           
 15730                           ;can/can.c: 2845:             ciNbtcfg.bF.TSEG1 = 62;
 15731                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15732   011C6E  0EFE               	movlw	254
 15733   011C70  24E1               	addwf	fsr1l,w,c
 15734   011C72  6ED9               	movwf	fsr2l,c
 15735   011C74  0EFF               	movlw	255
 15736   011C76  20E2               	addwfc	fsr1h,w,c
 15737   011C78  6EDA               	movwf	fsr2h,c
 15738   011C7A  0E3E               	movlw	62
 15739   011C7C  6EDF               	movwf	indf2,c
 15740                           
 15741                           ;can/can.c: 2846:             ciNbtcfg.bF.TSEG2 = 15;
 15742                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15743   011C7E  0EFD               	movlw	253
 15744   011C80  24E1               	addwf	fsr1l,w,c
 15745   011C82  6ED9               	movwf	fsr2l,c
 15746   011C84  0EFF               	movlw	255
 15747   011C86  20E2               	addwfc	fsr1h,w,c
 15748   011C88  6EDA               	movwf	fsr2h,c
 15749   011C8A  50DF               	movf	223,w,c
 15750   011C8C  0B80               	andlw	-128
 15751   011C8E  090F               	iorlw	15
 15752   011C90  6EDF               	movwf	223,c
 15753   011C92                     
 15754                           ;can/can.c: 2847:             ciNbtcfg.bF.SJW = 15;
 15755                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15756   011C92  50E1               	movf	fsr1l,w,c
 15757   011C94  0FFC               	addlw	-4
 15758   011C96  6ED9               	movwf	fsr2l,c
 15759   011C98  50E2               	movf	fsr1h,w,c
 15760   011C9A  6EDA               	movwf	fsr2h,c
 15761   011C9C  0EFF               	movlw	255
 15762   011C9E  22DA               	addwfc	fsr2h,f,c
 15763   011CA0  50DF               	movf	223,w,c
 15764   011CA2  0B80               	andlw	-128
 15765   011CA4  090F               	iorlw	15
 15766   011CA6  6EDF               	movwf	223,c
 15767                           
 15768                           ;can/can.c: 2848:             break;
 15769   011CA8  EF1E  F08F         	goto	l4388
 15770   011CAC                     l674:
 15771   011CAC                     l4370:
 15772                           
 15773                           ;can/can.c: 2858:             ciNbtcfg.bF.BRP = 0;
 15774                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15775   011CAC  0EFF               	movlw	255
 15776   011CAE  24E1               	addwf	fsr1l,w,c
 15777   011CB0  6ED9               	movwf	fsr2l,c
 15778   011CB2  0EFF               	movlw	255
 15779   011CB4  20E2               	addwfc	fsr1h,w,c
 15780   011CB6  6EDA               	movwf	fsr2h,c
 15781   011CB8  6ADF               	clrf	indf2,c
 15782                           
 15783                           ;can/can.c: 2859:             ciNbtcfg.bF.TSEG1 = 126;
 15784                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15785   011CBA  0EFE               	movlw	254
 15786   011CBC  24E1               	addwf	fsr1l,w,c
 15787   011CBE  6ED9               	movwf	fsr2l,c
 15788   011CC0  0EFF               	movlw	255
 15789   011CC2  20E2               	addwfc	fsr1h,w,c
 15790   011CC4  6EDA               	movwf	fsr2h,c
 15791   011CC6  0E7E               	movlw	126
 15792   011CC8  6EDF               	movwf	indf2,c
 15793                           
 15794                           ;can/can.c: 2860:             ciNbtcfg.bF.TSEG2 = 31;
 15795                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15796   011CCA  0EFD               	movlw	253
 15797   011CCC  24E1               	addwf	fsr1l,w,c
 15798   011CCE  6ED9               	movwf	fsr2l,c
 15799   011CD0  0EFF               	movlw	255
 15800   011CD2  20E2               	addwfc	fsr1h,w,c
 15801   011CD4  6EDA               	movwf	fsr2h,c
 15802   011CD6  50DF               	movf	223,w,c
 15803   011CD8  0B80               	andlw	-128
 15804   011CDA  091F               	iorlw	31
 15805   011CDC  6EDF               	movwf	223,c
 15806   011CDE                     
 15807                           ;can/can.c: 2861:             ciNbtcfg.bF.SJW = 31;
 15808                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15809   011CDE  50E1               	movf	fsr1l,w,c
 15810   011CE0  0FFC               	addlw	-4
 15811   011CE2  6ED9               	movwf	fsr2l,c
 15812   011CE4  50E2               	movf	fsr1h,w,c
 15813   011CE6  6EDA               	movwf	fsr2h,c
 15814   011CE8  0EFF               	movlw	255
 15815   011CEA  22DA               	addwfc	fsr2h,f,c
 15816   011CEC  50DF               	movf	223,w,c
 15817   011CEE  0B80               	andlw	-128
 15818   011CF0  091F               	iorlw	31
 15819   011CF2  6EDF               	movwf	223,c
 15820                           
 15821                           ;can/can.c: 2862:             break;
 15822   011CF4  EF1E  F08F         	goto	l4388
 15823   011CF8                     l4374:
 15824                           
 15825                           ;can/can.c: 2866:             ciNbtcfg.bF.BRP = 0;
 15826                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15827   011CF8  0EFF               	movlw	255
 15828   011CFA  24E1               	addwf	fsr1l,w,c
 15829   011CFC  6ED9               	movwf	fsr2l,c
 15830   011CFE  0EFF               	movlw	255
 15831   011D00  20E2               	addwfc	fsr1h,w,c
 15832   011D02  6EDA               	movwf	fsr2h,c
 15833   011D04  6ADF               	clrf	indf2,c
 15834                           
 15835                           ;can/can.c: 2867:             ciNbtcfg.bF.TSEG1 = 30;
 15836                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15837   011D06  0EFE               	movlw	254
 15838   011D08  24E1               	addwf	fsr1l,w,c
 15839   011D0A  6ED9               	movwf	fsr2l,c
 15840   011D0C  0EFF               	movlw	255
 15841   011D0E  20E2               	addwfc	fsr1h,w,c
 15842   011D10  6EDA               	movwf	fsr2h,c
 15843   011D12  0E1E               	movlw	30
 15844   011D14  6EDF               	movwf	indf2,c
 15845                           
 15846                           ;can/can.c: 2868:             ciNbtcfg.bF.TSEG2 = 7;
 15847                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15848   011D16  0EFD               	movlw	253
 15849   011D18  24E1               	addwf	fsr1l,w,c
 15850   011D1A  6ED9               	movwf	fsr2l,c
 15851   011D1C  0EFF               	movlw	255
 15852   011D1E  20E2               	addwfc	fsr1h,w,c
 15853   011D20  6EDA               	movwf	fsr2h,c
 15854   011D22  50DF               	movf	223,w,c
 15855   011D24  0B80               	andlw	-128
 15856   011D26  0907               	iorlw	7
 15857   011D28  6EDF               	movwf	223,c
 15858   011D2A                     
 15859                           ;can/can.c: 2869:             ciNbtcfg.bF.SJW = 7;
 15860                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15861   011D2A  50E1               	movf	fsr1l,w,c
 15862   011D2C  0FFC               	addlw	-4
 15863   011D2E  6ED9               	movwf	fsr2l,c
 15864   011D30  50E2               	movf	fsr1h,w,c
 15865   011D32  6EDA               	movwf	fsr2h,c
 15866   011D34  0EFF               	movlw	255
 15867   011D36  22DA               	addwfc	fsr2h,f,c
 15868   011D38  50DF               	movf	223,w,c
 15869   011D3A  0B80               	andlw	-128
 15870   011D3C  0907               	iorlw	7
 15871   011D3E  6EDF               	movwf	223,c
 15872                           
 15873                           ;can/can.c: 2870:             break;
 15874   011D40  EF1E  F08F         	goto	l4388
 15875   011D44                     l4378:
 15876                           
 15877                           ;can/can.c: 2873:             ciNbtcfg.bF.BRP = 0;
 15878                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15879   011D44  0EFF               	movlw	255
 15880   011D46  24E1               	addwf	fsr1l,w,c
 15881   011D48  6ED9               	movwf	fsr2l,c
 15882   011D4A  0EFF               	movlw	255
 15883   011D4C  20E2               	addwfc	fsr1h,w,c
 15884   011D4E  6EDA               	movwf	fsr2h,c
 15885   011D50  6ADF               	clrf	indf2,c
 15886                           
 15887                           ;can/can.c: 2874:             ciNbtcfg.bF.TSEG1 = 254;
 15888                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15889   011D52  0EFE               	movlw	254
 15890   011D54  24E1               	addwf	fsr1l,w,c
 15891   011D56  6ED9               	movwf	fsr2l,c
 15892   011D58  0EFF               	movlw	255
 15893   011D5A  20E2               	addwfc	fsr1h,w,c
 15894   011D5C  6EDA               	movwf	fsr2h,c
 15895   011D5E  0EFE               	movlw	254
 15896   011D60  6EDF               	movwf	indf2,c
 15897                           
 15898                           ;can/can.c: 2875:             ciNbtcfg.bF.TSEG2 = 63;
 15899                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15900   011D62  0EFD               	movlw	253
 15901   011D64  24E1               	addwf	fsr1l,w,c
 15902   011D66  6ED9               	movwf	fsr2l,c
 15903   011D68  0EFF               	movlw	255
 15904   011D6A  20E2               	addwfc	fsr1h,w,c
 15905   011D6C  6EDA               	movwf	fsr2h,c
 15906   011D6E  50DF               	movf	223,w,c
 15907   011D70  0B80               	andlw	-128
 15908   011D72  093F               	iorlw	63
 15909   011D74  6EDF               	movwf	223,c
 15910   011D76                     
 15911                           ;can/can.c: 2876:             ciNbtcfg.bF.SJW = 63;
 15912                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 15913   011D76  50E1               	movf	fsr1l,w,c
 15914   011D78  0FFC               	addlw	-4
 15915   011D7A  6ED9               	movwf	fsr2l,c
 15916   011D7C  50E2               	movf	fsr1h,w,c
 15917   011D7E  6EDA               	movwf	fsr2h,c
 15918   011D80  0EFF               	movlw	255
 15919   011D82  22DA               	addwfc	fsr2h,f,c
 15920   011D84  50DF               	movf	223,w,c
 15921   011D86  0B80               	andlw	-128
 15922   011D88  093F               	iorlw	63
 15923   011D8A  6EDF               	movwf	223,c
 15924                           
 15925                           ;can/can.c: 2877:             break;
 15926   011D8C  EF1E  F08F         	goto	l4388
 15927   011D90                     l4386:
 15928                           
 15929                           ;stkvar	_bitTime @ sp[(-4)+-1]
 15930   011D90  0EFB               	movlw	-5
 15931   011D92  50E3               	movf	plusw1,w,c
 15932   011D94  6E37               	movwf	(btemp+10)^0,c
 15933   011D96  6A38               	clrf	(btemp+11)^0,c
 15934                           
 15935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15936                           ; Switch size 1, requested type "simple"
 15937                           ; Number of cases is 1, Range of values is 0 to 0
 15938                           ; switch strategies available:
 15939                           ; Name         Instructions Cycles
 15940                           ; simple_byte            4     3 (average)
 15941                           ;	Chosen strategy is simple_byte
 15942   011D98  5038               	movf	(btemp+11)^0,w,c
 15943   011D9A  0A00               	xorlw	0	; case 0
 15944   011D9C  B4D8               	btfsc	status,2,c
 15945   011D9E  EFD3  F08E         	goto	l5032
 15946   011DA2  EF2D  F08F         	goto	l682
 15947   011DA6                     l5032:
 15948                           
 15949                           ; Switch size 1, requested type "simple"
 15950                           ; Number of cases is 18, Range of values is 0 to 17
 15951                           ; switch strategies available:
 15952                           ; Name         Instructions Cycles
 15953                           ; simple_byte           55    28 (average)
 15954                           ;	Chosen strategy is simple_byte
 15955   011DA6  5037               	movf	(btemp+10)^0,w,c
 15956   011DA8  0A00               	xorlw	0	; case 0
 15957   011DAA  B4D8               	btfsc	status,2,c
 15958   011DAC  EF30  F08E         	goto	l665
 15959   011DB0  0A01               	xorlw	1	; case 1
 15960   011DB2  B4D8               	btfsc	status,2,c
 15961   011DB4  EF30  F08E         	goto	l4366
 15962   011DB8  0A03               	xorlw	3	; case 2
 15963   011DBA  B4D8               	btfsc	status,2,c
 15964   011DBC  EF30  F08E         	goto	l4366
 15965   011DC0  0A01               	xorlw	1	; case 3
 15966   011DC2  B4D8               	btfsc	status,2,c
 15967   011DC4  EF30  F08E         	goto	l4366
 15968   011DC8  0A07               	xorlw	7	; case 4
 15969   011DCA  B4D8               	btfsc	status,2,c
 15970   011DCC  EF30  F08E         	goto	l4366
 15971   011DD0  0A01               	xorlw	1	; case 5
 15972   011DD2  B4D8               	btfsc	status,2,c
 15973   011DD4  EF30  F08E         	goto	l4366
 15974   011DD8  0A03               	xorlw	3	; case 6
 15975   011DDA  B4D8               	btfsc	status,2,c
 15976   011DDC  EF30  F08E         	goto	l4366
 15977   011DE0  0A01               	xorlw	1	; case 7
 15978   011DE2  B4D8               	btfsc	status,2,c
 15979   011DE4  EF30  F08E         	goto	l4366
 15980   011DE8  0A0F               	xorlw	15	; case 8
 15981   011DEA  B4D8               	btfsc	status,2,c
 15982   011DEC  EF56  F08E         	goto	l674
 15983   011DF0  0A01               	xorlw	1	; case 9
 15984   011DF2  B4D8               	btfsc	status,2,c
 15985   011DF4  EF56  F08E         	goto	l4370
 15986   011DF8  0A03               	xorlw	3	; case 10
 15987   011DFA  B4D8               	btfsc	status,2,c
 15988   011DFC  EF56  F08E         	goto	l4370
 15989   011E00  0A01               	xorlw	1	; case 11
 15990   011E02  B4D8               	btfsc	status,2,c
 15991   011E04  EF56  F08E         	goto	l4370
 15992   011E08  0A07               	xorlw	7	; case 12
 15993   011E0A  B4D8               	btfsc	status,2,c
 15994   011E0C  EF56  F08E         	goto	l4370
 15995   011E10  0A01               	xorlw	1	; case 13
 15996   011E12  B4D8               	btfsc	status,2,c
 15997   011E14  EF56  F08E         	goto	l4370
 15998   011E18  0A03               	xorlw	3	; case 14
 15999   011E1A  B4D8               	btfsc	status,2,c
 16000   011E1C  EF56  F08E         	goto	l4370
 16001   011E20  0A01               	xorlw	1	; case 15
 16002   011E22  B4D8               	btfsc	status,2,c
 16003   011E24  EF7C  F08E         	goto	l4374
 16004   011E28  0A1F               	xorlw	31	; case 16
 16005   011E2A  B4D8               	btfsc	status,2,c
 16006   011E2C  EF7C  F08E         	goto	l4374
 16007   011E30  0A01               	xorlw	1	; case 17
 16008   011E32  B4D8               	btfsc	status,2,c
 16009   011E34  EFA2  F08E         	goto	l4378
 16010   011E38  EF2D  F08F         	goto	l682
 16011   011E3C                     l4388:
 16012                           
 16013                           ;stkvar	_ciNbtcfg @ sp[(-4)+0]
 16014   011E3C  0EFC               	movlw	-4
 16015   011E3E  CFE3 FFE6          	movff	plusw1,postinc1
 16016   011E42  CFE3 FFE6          	movff	plusw1,postinc1
 16017   011E46  CFE3 FFE6          	movff	plusw1,postinc1
 16018   011E4A  CFE3 FFE6          	movff	plusw1,postinc1
 16019   011E4E  0E04               	movlw	4
 16020   011E50  6EE6               	movwf	postinc1,c
 16021   011E52  0E00               	movlw	0
 16022   011E54  6EE6               	movwf	postinc1,c
 16023   011E56  ECA8  F099         	call	_DRV_CANFDSPI_WriteWord	;wreg free
 16024   011E5A                     l682:
 16025                           
 16026                           ; _DRV_CANFDSPI_BitTimeConfigureNominal40MHz: autosize = 4, savesize = 0, parsavesize = 
      +                          0, tempsize = 0 parsize = 1, argsize = 1, vargsize = 0
 16027   011E5A  0EFB               	movlw	251
 16028   011E5C  26E1               	addwf	fsr1l,f,c
 16029   011E5E  0EFF               	movlw	255
 16030   011E60  22E2               	addwfc	fsr1h,f,c
 16031   011E62  0012               	return		;funcret
 16032   011E64                     __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz:
 16033                           	callstack 0
 16034                           
 16035 ;; *************** function _DRV_CANFDSPI_WriteWord *****************
 16036 ;; Defined at:
 16037 ;;		line 310 in file "can/can.c"
 16038 ;; Parameters:    Size  Location     Type
 16039 ;;  address         2  [STACK] unsigned short 
 16040 ;;  txd             4  [STACK] unsigned long 
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;  spiTransferS    2  [STACK] unsigned short 
 16043 ;;  i               1  [STACK] unsigned char 
 16044 ;;  spiTransferE    1  [STACK] char 
 16045 ;; Return value:  Size  Location     Type
 16046 ;;                  1  [STACK] char 
 16047 ;; Registers used:
 16048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh
 16049 ;; Tracked objects:
 16050 ;;		On entry : 0/0
 16051 ;;		On exit  : 0/0
 16052 ;;		Unchanged: 0/0
 16053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16058 ;;Total ram usage:        0 bytes
 16059 ;; Hardware stack levels used: 1
 16060 ;; Hardware stack levels required when called: 8
 16061 ;; This function calls:
 16062 ;;		_SpiTransfer
 16063 ;; This function is called by:
 16064 ;;		_DRV_CANFDSPI_Configure
 16065 ;;		_DRV_CANFDSPI_TransmitChannelConfigure
 16066 ;;		_DRV_CANFDSPI_TransmitQueueConfigure
 16067 ;;		_DRV_CANFDSPI_FilterObjectConfigure
 16068 ;;		_DRV_CANFDSPI_FilterMaskConfigure
 16069 ;;		_DRV_CANFDSPI_ReceiveChannelConfigure
 16070 ;;		_DRV_CANFDSPI_TefConfigure
 16071 ;;		_DRV_CANFDSPI_TimeStampSet
 16072 ;;		_DRV_CANFDSPI_BitTimeConfigureNominal40MHz
 16073 ;; This function uses a reentrant model
 16074 ;;
 16075                           
 16076                           	psect	text65
 16077   013350                     __ptext65:
 16078                           	callstack 0
 16079   013350                     _DRV_CANFDSPI_WriteWord:
 16080                           	callstack 0
 16081                           
 16082                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16083   013350  52E6               	movf	postinc1,f,c
 16084   013352  52E6               	movf	postinc1,f,c
 16085   013354  52E6               	movf	postinc1,f,c
 16086   013356  52E6               	movf	postinc1,f,c
 16087   013358                     
 16088                           ;can/can.c: 310: int8_t DRV_CANFDSPI_WriteWord( uint16_t address,;can/can.c: 311:       
      +                            uint32_t txd);can/can.c: 312: {;can/can.c: 313:     uint8_t i;;can/can.c: 314:     uin
      +                          t16_t spiTransferSize = 6;
 16089   013358  0E06               	movlw	6
 16090   01335A  6E37               	movwf	(btemp+10)^0,c
 16091   01335C  0E00               	movlw	0
 16092   01335E  6E38               	movwf	(btemp+11)^0,c
 16093                           
 16094                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16095   013360  0EFC               	movlw	-4
 16096   013362  C037  FFE3         	movff	btemp+10,plusw1
 16097   013366  0EFD               	movlw	-3
 16098   013368  C038  FFE3         	movff	btemp+11,plusw1
 16099   01336C                     
 16100                           ;can/can.c: 318:     spiTransmitBuffer[0] = (uint8_t) ((0x02 << 4) + ((address >> 8) & 0
      +                          xF));
 16101                           ;stkvar	_address @ sp[(-4)+-2]
 16102   01336C  0EFB               	movlw	251
 16103   01336E  24E1               	addwf	fsr1l,w,c
 16104   013370  6ED9               	movwf	fsr2l,c
 16105   013372  0EFF               	movlw	255
 16106   013374  20E2               	addwfc	fsr1h,w,c
 16107   013376  6EDA               	movwf	fsr2h,c
 16108   013378  50DF               	movf	indf2,w,c
 16109   01337A  0B0F               	andlw	15
 16110   01337C  0F20               	addlw	32
 16111   01337E  0101               	movlb	1	; () banked
 16112   013380  6F00               	movwf	_spiTransmitBuffer& (0+255),b
 16113   013382                     
 16114                           ; BSR set to: 1
 16115                           ;can/can.c: 319:     spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 16116                           ;stkvar	_address @ sp[(-4)+-2]
 16117   013382  0EFA               	movlw	-6
 16118   013384  CFE3 F101          	movff	plusw1,_spiTransmitBuffer+1
 16119   013388                     
 16120                           ; BSR set to: 1
 16121                           ;can/can.c: 322:     for (i = 0; i < 4; i++) {
 16122                           ;stkvar	_i @ sp[(-4)+2]
 16123   013388  0EFE               	movlw	-2
 16124   01338A  6AE3               	clrf	plusw1,c
 16125   01338C                     l4256:
 16126                           
 16127                           ;can/can.c: 323:         spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 16128                           ;stkvar	_i @ sp[(-4)+2]
 16129   01338C  0EFE               	movlw	-2
 16130   01338E  50E3               	movf	plusw1,w,c
 16131   013390  6E37               	movwf	(btemp+10)^0,c
 16132   013392  6A38               	clrf	(btemp+11)^0,c
 16133   013394  0E02               	movlw	low (_spiTransmitBuffer+2)
 16134   013396  2437               	addwf	(btemp+10)^0,w,c
 16135   013398  6ED9               	movwf	fsr2l,c
 16136   01339A  0E01               	movlw	high (_spiTransmitBuffer+2)
 16137   01339C  2038               	addwfc	(btemp+11)^0,w,c
 16138   01339E  6EDA               	movwf	fsr2h,c
 16139                           
 16140                           ;stkvar	_txd @ sp[(-4)+-6]
 16141   0133A0  0EF6               	movlw	-10
 16142   0133A2  CFE3 F035          	movff	plusw1,btemp+8
 16143   0133A6  0EF7               	movlw	-9
 16144   0133A8  CFE3 F036          	movff	plusw1,btemp+9
 16145   0133AC  0EF8               	movlw	-8
 16146   0133AE  CFE3 F037          	movff	plusw1,btemp+10
 16147   0133B2  0EF9               	movlw	-7
 16148   0133B4  CFE3 F038          	movff	plusw1,btemp+11
 16149                           
 16150                           ;stkvar	_i @ sp[(-4)+2]
 16151   0133B8  0EFE               	movlw	-2
 16152   0133BA  50E3               	movf	plusw1,w,c
 16153   0133BC  0D08               	mullw	8
 16154   0133BE  50F3               	movf	243,w,c
 16155   0133C0  2AE8               	incf	wreg,f,c
 16156   0133C2  EFE8  F099         	goto	u2100
 16157   0133C6                     u2105:
 16158   0133C6  90D8               	bcf	status,0,c
 16159   0133C8  3238               	rrcf	(btemp+11)^0,f,c
 16160   0133CA  3237               	rrcf	(btemp+10)^0,f,c
 16161   0133CC  3236               	rrcf	(btemp+9)^0,f,c
 16162   0133CE  3235               	rrcf	(btemp+8)^0,f,c
 16163   0133D0                     u2100:
 16164   0133D0  2EE8               	decfsz	wreg,f,c
 16165   0133D2  EFE3  F099         	goto	u2105
 16166   0133D6  5035               	movf	(btemp+8)^0,w,c
 16167   0133D8  6EDF               	movwf	indf2,c
 16168   0133DA                     
 16169                           ;can/can.c: 324:     }
 16170                           ;stkvar	_i @ sp[(-4)+2]
 16171   0133DA  0EFE               	movlw	-2
 16172   0133DC  2AE3               	incf	plusw1,f,c
 16173   0133DE                     
 16174                           ;stkvar	_i @ sp[(-4)+2]
 16175   0133DE  0EFE               	movlw	-2
 16176   0133E0  CFE3 F02D          	movff	plusw1,btemp
 16177   0133E4  0E03               	movlw	3
 16178   0133E6  642D               	cpfsgt	btemp^0,c
 16179   0133E8  EFF8  F099         	goto	u2111
 16180   0133EC  EFFA  F099         	goto	u2110
 16181   0133F0                     u2111:
 16182   0133F0  EFC6  F099         	goto	l4256
 16183   0133F4                     u2110:
 16184   0133F4                     
 16185                           ;can/can.c: 326:     spiTransferError = SpiTransfer( spiTransmitBuffer, spiReceiveBuffer
      +                          , spiTransferSize);
 16186                           ;stkvar	_spiTransferSize @ sp[(-4)+0]
 16187   0133F4  0EFC               	movlw	-4
 16188   0133F6  CFE3 FFE6          	movff	plusw1,postinc1
 16189   0133FA  CFE3 FFE6          	movff	plusw1,postinc1
 16190   0133FE  0E00               	movlw	low _spiReceiveBuffer
 16191   013400  6EE6               	movwf	postinc1,c
 16192   013402  0E02               	movlw	high _spiReceiveBuffer
 16193   013404  6EE6               	movwf	postinc1,c
 16194   013406  0E00               	movlw	low _spiTransmitBuffer
 16195   013408  6EE6               	movwf	postinc1,c
 16196   01340A  0E01               	movlw	high _spiTransmitBuffer
 16197   01340C  6EE6               	movwf	postinc1,c
 16198   01340E  ECAD  F09B         	call	_SpiTransfer	;wreg free
 16199                           
 16200                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16201   013412  0EFF               	movlw	-1
 16202   013414  C02D  FFE3         	movff	btemp,plusw1
 16203   013418                     
 16204                           ;can/can.c: 328:     return spiTransferError;
 16205                           ;stkvar	_spiTransferError @ sp[(-4)+3]
 16206   013418  0EFF               	movlw	-1
 16207   01341A  CFE3 F02D          	movff	plusw1,btemp
 16208   01341E                     
 16209                           ; _DRV_CANFDSPI_WriteWord: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 16210   01341E  0EF6               	movlw	246
 16211   013420  26E1               	addwf	fsr1l,f,c
 16212   013422  0EFF               	movlw	255
 16213   013424  22E2               	addwfc	fsr1h,f,c
 16214   013426  0012               	return		;funcret
 16215   013428                     __end_of_DRV_CANFDSPI_WriteWord:
 16216                           	callstack 0
 16217                           
 16218 ;; *************** function _SpiTransfer *****************
 16219 ;; Defined at:
 16220 ;;		line 132 in file "can/can.c"
 16221 ;; Parameters:    Size  Location     Type
 16222 ;;  txPtr           2  [STACK] PTR unsigned char 
 16223 ;;		 -> spiTransmitBuffer(200), 
 16224 ;;  rxPtr           2  [STACK] PTR unsigned char 
 16225 ;;		 -> spiReceiveBuffer(200), 
 16226 ;;  size            2  [STACK] unsigned short 
 16227 ;; Auto vars:     Size  Location     Type
 16228 ;;  dummy           1  [STACK] volatile unsigned char 
 16229 ;; Return value:  Size  Location     Type
 16230 ;;                  1  [STACK] char 
 16231 ;; Registers used:
 16232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, prodl
 16233 ;; Tracked objects:
 16234 ;;		On entry : 0/1
 16235 ;;		On exit  : 0/0
 16236 ;;		Unchanged: 0/0
 16237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;Total ram usage:        0 bytes
 16243 ;; Hardware stack levels used: 1
 16244 ;; Hardware stack levels required when called: 7
 16245 ;; This function calls:
 16246 ;;		Nothing
 16247 ;; This function is called by:
 16248 ;;		_DRV_CANFDSPI_Reset
 16249 ;;		_DRV_CANFDSPI_ReadByte
 16250 ;;		_DRV_CANFDSPI_WriteByte
 16251 ;;		_DRV_CANFDSPI_WriteWord
 16252 ;;		_DRV_CANFDSPI_WriteHalfWord
 16253 ;;		_DRV_CANFDSPI_ReadByteArray
 16254 ;;		_DRV_CANFDSPI_WriteByteArray
 16255 ;;		_DRV_CANFDSPI_ReadWordArray
 16256 ;; This function uses a reentrant model
 16257 ;;
 16258                           
 16259                           	psect	text66
 16260   01375A                     __ptext66:
 16261                           	callstack 0
 16262   01375A                     _SpiTransfer:
 16263                           	callstack 0
 16264                           
 16265                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16266   01375A  52E6               	movf	postinc1,f,c
 16267   01375C                     
 16268                           ;can/can.c: 132: static int8_t SpiTransfer(uint8_t * txPtr, uint8_t * rxPtr, uint16_t si
      +                          ze);can/can.c: 133: {;can/can.c: 134:   volatile uint8_t dummy;;can/can.c: 135:   LATGbi
      +                          ts.LATG4 = 0;
 16269   01375C  988F               	bcf	143,4,c	;volatile
 16270                           
 16271                           ;can/can.c: 136:   while(size > 0)
 16272   01375E  EFFA  F09B         	goto	l3658
 16273   013762                     l145:
 16274                           
 16275                           ;can/can.c: 137:   {;can/can.c: 138:     SSP2STATbits.BF = 0;
 16276   013762  9064               	bcf	100,0,c	;volatile
 16277   013764                     
 16278                           ;can/can.c: 139:     dummy = SSP2BUF;
 16279                           ;stkvar	_dummy @ sp[(-1)+0]
 16280   013764  0EFF               	movlw	-1
 16281   013766  CF66 FFE3          	movff	3942,plusw1	;volatile
 16282   01376A                     
 16283                           ;can/can.c: 140:     SSP2BUF = *txPtr;
 16284                           ;stkvar	_txPtr @ sp[(-1)+-2]
 16285   01376A  0EFD               	movlw	-3
 16286   01376C  CFE3 FFD9          	movff	plusw1,fsr2l
 16287   013770  0EFE               	movlw	-2
 16288   013772  CFE3 FFDA          	movff	plusw1,fsr2h
 16289   013776  50DF               	movf	indf2,w,c
 16290   013778  6E66               	movwf	102,c	;volatile
 16291   01377A                     l146:
 16292   01377A  A064               	btfss	100,0,c	;volatile
 16293   01377C  EFC2  F09B         	goto	u1471
 16294   013780  EFC4  F09B         	goto	u1470
 16295   013784                     u1471:
 16296   013784  EFBD  F09B         	goto	l146
 16297   013788                     u1470:
 16298   013788                     
 16299                           ;can/can.c: 142:     *rxPtr = SSP2BUF;
 16300                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 16301   013788  0EFB               	movlw	-5
 16302   01378A  CFE3 FFD9          	movff	plusw1,fsr2l
 16303   01378E  0EFC               	movlw	-4
 16304   013790  CFE3 FFDA          	movff	plusw1,fsr2h
 16305   013794  CF66 FFDF          	movff	3942,indf2	;volatile
 16306   013798                     
 16307                           ;can/can.c: 143:     txPtr++;
 16308                           ;stkvar	_txPtr @ sp[(-1)+-2]
 16309   013798  0EFD               	movlw	-3
 16310   01379A  50E3               	movf	plusw1,w,c
 16311   01379C  0F01               	addlw	1
 16312   01379E  6E2D               	movwf	btemp^0,c
 16313   0137A0  0EFD               	movlw	-3
 16314   0137A2  C02D  FFE3         	movff	btemp,plusw1
 16315   0137A6  6A2D               	clrf	btemp^0,c
 16316   0137A8  0EFE               	movlw	-2
 16317   0137AA  50E3               	movf	plusw1,w,c
 16318   0137AC  202D               	addwfc	btemp^0,w,c
 16319   0137AE  6E2D               	movwf	btemp^0,c
 16320   0137B0  0EFE               	movlw	-2
 16321   0137B2  C02D  FFE3         	movff	btemp,plusw1
 16322   0137B6                     
 16323                           ;can/can.c: 144:     rxPtr++;
 16324                           ;stkvar	_rxPtr @ sp[(-1)+-4]
 16325   0137B6  0EFB               	movlw	-5
 16326   0137B8  50E3               	movf	plusw1,w,c
 16327   0137BA  0F01               	addlw	1
 16328   0137BC  6E2D               	movwf	btemp^0,c
 16329   0137BE  0EFB               	movlw	-5
 16330   0137C0  C02D  FFE3         	movff	btemp,plusw1
 16331   0137C4  6A2D               	clrf	btemp^0,c
 16332   0137C6  0EFC               	movlw	-4
 16333   0137C8  50E3               	movf	plusw1,w,c
 16334   0137CA  202D               	addwfc	btemp^0,w,c
 16335   0137CC  6E2D               	movwf	btemp^0,c
 16336   0137CE  0EFC               	movlw	-4
 16337   0137D0  C02D  FFE3         	movff	btemp,plusw1
 16338   0137D4                     
 16339                           ;can/can.c: 145:     size--;
 16340                           ;stkvar	_size @ sp[(-1)+-6]
 16341   0137D4  0EF9               	movlw	-7
 16342   0137D6  CFE3 F02D          	movff	plusw1,btemp
 16343   0137DA  0E01               	movlw	1
 16344   0137DC  5E2D               	subwf	btemp^0,f,c
 16345   0137DE  0EF9               	movlw	-7
 16346   0137E0  C02D  FFE3         	movff	btemp,plusw1
 16347   0137E4  0EFA               	movlw	-6
 16348   0137E6  CFE3 F02D          	movff	plusw1,btemp
 16349   0137EA  0E00               	movlw	0
 16350   0137EC  5A2D               	subwfb	btemp^0,f,c
 16351   0137EE  0EFA               	movlw	-6
 16352   0137F0  C02D  FFE3         	movff	btemp,plusw1
 16353   0137F4                     l3658:
 16354                           
 16355                           ;can/can.c: 136:   while(size > 0)
 16356                           ;stkvar	_size @ sp[(-1)+-6]
 16357   0137F4  0EF9               	movlw	-7
 16358   0137F6  CFE3 F02D          	movff	plusw1,btemp
 16359   0137FA  0EFA               	movlw	-6
 16360   0137FC  50E3               	movf	plusw1,w,c
 16361   0137FE  102D               	iorwf	btemp^0,w,c
 16362   013800  A4D8               	btfss	status,2,c
 16363   013802  EF05  F09C         	goto	u1481
 16364   013806  EF07  F09C         	goto	u1480
 16365   01380A                     u1481:
 16366   01380A  EFB1  F09B         	goto	l145
 16367   01380E                     u1480:
 16368   01380E                     
 16369                           ;can/can.c: 147:   LATGbits.LATG4 = 1;
 16370   01380E  888F               	bsf	143,4,c	;volatile
 16371   013810                     
 16372                           ;can/can.c: 148:   return 0;
 16373   013810  0E00               	movlw	0
 16374   013812  6E2D               	movwf	btemp^0,c
 16375   013814                     
 16376                           ; _SpiTransfer: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, a
      +                          rgsize = 6, vargsize = 0
 16377   013814  0EF9               	movlw	249
 16378   013816  26E1               	addwf	fsr1l,f,c
 16379   013818  0EFF               	movlw	255
 16380   01381A  22E2               	addwfc	fsr1h,f,c
 16381   01381C  0012               	return		;funcret
 16382   01381E                     __end_of_SpiTransfer:
 16383                           	callstack 0
 16384                           
 16385 ;; *************** function _INTERRUPT_InterruptManager *****************
 16386 ;; Defined at:
 16387 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 16388 ;; Parameters:    Size  Location     Type
 16389 ;;		None
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;		None
 16392 ;; Return value:  Size  Location     Type
 16393 ;;                  1    wreg      void 
 16394 ;; Registers used:
 16395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16403 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16404 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16405 ;;Total ram usage:       16 bytes
 16406 ;; Hardware stack levels used: 1
 16407 ;; Hardware stack levels required when called: 6
 16408 ;; This function calls:
 16409 ;;		_TMR0_ISR
 16410 ;; This function is called by:
 16411 ;;		Interrupt level 2
 16412 ;; This function uses a non-reentrant model
 16413 ;;
 16414                           
 16415                           	psect	intcode
 16416   000008                     __pintcode:
 16417                           	callstack 0
 16418   000008                     _INTERRUPT_InterruptManager:
 16419                           	callstack 16
 16420                           
 16421                           ;incstack = 0
 16422   000008  CFFA F04D          	movff	pclath,??_INTERRUPT_InterruptManager
 16423   00000C  CFFB F04E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16424   000010  CFE9 F04F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16425   000014  CFEA F050          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16426   000018  CFE1 F051          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16427   00001C  CFE2 F052          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16428   000020  CFD9 F053          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16429   000024  CFDA F054          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16430   000028  CFF3 F055          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16431   00002C  CFF4 F056          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16432   000030  C02D  F057         	movff	btemp,??_INTERRUPT_InterruptManager+10
 16433   000034  C02E  F058         	movff	btemp+1,??_INTERRUPT_InterruptManager+11
 16434   000038  C035  F059         	movff	btemp+8,??_INTERRUPT_InterruptManager+12
 16435   00003C  C036  F05A         	movff	btemp+9,??_INTERRUPT_InterruptManager+13
 16436   000040  C037  F05B         	movff	btemp+10,??_INTERRUPT_InterruptManager+14
 16437   000044  C038  F05C         	movff	btemp+11,??_INTERRUPT_InterruptManager+15
 16438   000048  EE19  F031         	lfsr	1,___inthi_sp
 16439   00004C                     
 16440                           ;mcc_generated_files/interrupt_manager.c: 61:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 16441   00004C  AAF2               	btfss	242,5,c	;volatile
 16442   00004E  EF2B  F000         	goto	i2u280_41
 16443   000052  EF2D  F000         	goto	i2u280_40
 16444   000056                     i2u280_41:
 16445   000056  EF36  F000         	goto	i2l1039
 16446   00005A                     i2u280_40:
 16447   00005A  A4F2               	btfss	242,2,c	;volatile
 16448   00005C  EF32  F000         	goto	i2u281_41
 16449   000060  EF34  F000         	goto	i2u281_40
 16450   000064                     i2u281_41:
 16451   000064  EF36  F000         	goto	i2l1039
 16452   000068                     i2u281_40:
 16453   000068                     
 16454                           ;mcc_generated_files/interrupt_manager.c: 62:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 63:         TMR0_ISR();
 16455   000068  EC29  F0A2         	call	_TMR0_ISR	;wreg free
 16456   00006C                     i2l1039:
 16457   00006C  C05C  F038         	movff	??_INTERRUPT_InterruptManager+15,btemp+11
 16458   000070  C05B  F037         	movff	??_INTERRUPT_InterruptManager+14,btemp+10
 16459   000074  C05A  F036         	movff	??_INTERRUPT_InterruptManager+13,btemp+9
 16460   000078  C059  F035         	movff	??_INTERRUPT_InterruptManager+12,btemp+8
 16461   00007C  C058  F02E         	movff	??_INTERRUPT_InterruptManager+11,btemp+1
 16462   000080  C057  F02D         	movff	??_INTERRUPT_InterruptManager+10,btemp
 16463   000084  C056  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16464   000088  C055  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16465   00008C  C054  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16466   000090  C053  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16467   000094  C052  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16468   000098  C051  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16469   00009C  C050  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16470   0000A0  C04F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16471   0000A4  C04E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16472   0000A8  C04D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16473   0000AC  0011               	retfie		f
 16474   0000AE                     __end_of_INTERRUPT_InterruptManager:
 16475                           	callstack 0
 16476                           
 16477 ;; *************** function _TMR0_ISR *****************
 16478 ;; Defined at:
 16479 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;		None
 16482 ;; Auto vars:     Size  Location     Type
 16483 ;;		None
 16484 ;; Return value:  Size  Location     Type
 16485 ;;                  1  [STACK] void 
 16486 ;; Registers used:
 16487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 16488 ;; Tracked objects:
 16489 ;;		On entry : 0/0
 16490 ;;		On exit  : 0/0
 16491 ;;		Unchanged: 0/0
 16492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16497 ;;Total ram usage:        0 bytes
 16498 ;; Hardware stack levels used: 1
 16499 ;; Hardware stack levels required when called: 5
 16500 ;; This function calls:
 16501 ;;		_TMR0_CallBack
 16502 ;; This function is called by:
 16503 ;;		_INTERRUPT_InterruptManager
 16504 ;; This function uses a reentrant model
 16505 ;;
 16506                           
 16507                           	psect	text68
 16508   014452                     __ptext68:
 16509                           	callstack 0
 16510   014452                     _TMR0_ISR:
 16511                           	callstack 16
 16512   014452                     
 16513                           ;mcc_generated_files/tmr0.c: 138:     static volatile uint16_t CountCallBack = 0;;mcc_ge
      +                          nerated_files/tmr0.c: 141:     INTCONbits.TMR0IF = 0;
 16514   014452  94F2               	bcf	242,2,c	;volatile
 16515                           
 16516                           ;mcc_generated_files/tmr0.c: 145:     TMR0H = timer0ReloadVal >> 8;
 16517   014454  C028  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
 16518                           
 16519                           ;mcc_generated_files/tmr0.c: 146:     TMR0L = (uint8_t) timer0ReloadVal;
 16520   014458  C027  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16521   01445C                     
 16522                           ;mcc_generated_files/tmr0.c: 147:     carState.ms20Elapsed = 1;
 16523   01445C  0E01               	movlw	1
 16524   01445E  0100               	movlb	0	; () banked
 16525   014460  6F76               	movwf	(_carState+22)& (0+255),b
 16526   014462                     
 16527                           ; BSR set to: 0
 16528                           ;mcc_generated_files/tmr0.c: 150:     if (++CountCallBack >= 1)
 16529   014462  4A25               	infsnz	TMR0_ISR@CountCallBack^0,f,c	;volatile
 16530   014464  2A26               	incf	(TMR0_ISR@CountCallBack+1)^0,f,c	;volatile
 16531   014466  5025               	movf	TMR0_ISR@CountCallBack^0,w,c	;volatile
 16532   014468  1026               	iorwf	(TMR0_ISR@CountCallBack+1)^0,w,c	;volatile
 16533   01446A  B4D8               	btfsc	status,2,c
 16534   01446C  EF3A  F0A2         	goto	u271_41
 16535   014470  EF3C  F0A2         	goto	u271_40
 16536   014474                     u271_41:
 16537   014474  EF40  F0A2         	goto	l1085
 16538   014478                     u271_40:
 16539   014478                     
 16540                           ; BSR set to: 0
 16541                           ;mcc_generated_files/tmr0.c: 151:     {;mcc_generated_files/tmr0.c: 153:         TMR0_Ca
      +                          llBack();
 16542   014478  EC0E  F0A2         	call	_TMR0_CallBack	;wreg free
 16543   01447C                     
 16544                           ;mcc_generated_files/tmr0.c: 156:         CountCallBack = 0;
 16545   01447C  6A25               	clrf	TMR0_ISR@CountCallBack^0,c	;volatile
 16546   01447E  6A26               	clrf	(TMR0_ISR@CountCallBack+1)^0,c	;volatile
 16547   014480                     l1085:
 16548                           
 16549                           ; _TMR0_ISR: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, args
      +                          ize = 0, vargsize = 0
 16550   014480  0012               	return		;funcret
 16551   014482                     __end_of_TMR0_ISR:
 16552                           	callstack 0
 16553                           
 16554 ;; *************** function _TMR0_CallBack *****************
 16555 ;; Defined at:
 16556 ;;		line 162 in file "mcc_generated_files/tmr0.c"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;		None
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;		None
 16561 ;; Return value:  Size  Location     Type
 16562 ;;                  1  [STACK] void 
 16563 ;; Registers used:
 16564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, btemp, btemp+1, btemp+8, bt
      +emp+9, btemp+10, btemp+11, tosl, prodl, prodh
 16565 ;; Tracked objects:
 16566 ;;		On entry : 3F/0
 16567 ;;		On exit  : 0/0
 16568 ;;		Unchanged: 0/0
 16569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;Total ram usage:        0 bytes
 16575 ;; Hardware stack levels used: 1
 16576 ;; Hardware stack levels required when called: 4
 16577 ;; This function calls:
 16578 ;;		NULL
 16579 ;;		_TMR0_DefaultInterruptHandler
 16580 ;;		_XF_decrementAndQueueTimers
 16581 ;; This function is called by:
 16582 ;;		_TMR0_ISR
 16583 ;; This function uses a reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text69
 16587   01441C                     __ptext69:
 16588                           	callstack 0
 16589   01441C                     _TMR0_CallBack:
 16590                           	callstack 16
 16591   01441C                     
 16592                           ;mcc_generated_files/tmr0.c: 165:     carState.secondElapsed=1;
 16593   01441C  0E01               	movlw	1
 16594   01441E  0100               	movlb	0	; () banked
 16595   014420  6F75               	movwf	(_carState+21)& (0+255),b
 16596   014422                     
 16597                           ; BSR set to: 0
 16598                           ;mcc_generated_files/tmr0.c: 166:     if(TMR0_InterruptHandler)
 16599   014422  505D               	movf	_TMR0_InterruptHandler^0,w,c
 16600   014424  105E               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
 16601   014426  105F               	iorwf	(_TMR0_InterruptHandler+2)^0,w,c
 16602   014428  B4D8               	btfsc	status,2,c
 16603   01442A  EF19  F0A2         	goto	u259_41
 16604   01442E  EF1B  F0A2         	goto	u259_40
 16605   014432                     u259_41:
 16606   014432  EF28  F0A2         	goto	l1089
 16607   014436                     u259_40:
 16608   014436                     
 16609                           ; BSR set to: 0
 16610                           ;mcc_generated_files/tmr0.c: 167:     {;mcc_generated_files/tmr0.c: 168:         TMR0_In
      +                          terruptHandler();
 16611   014436  D802               	call	u260_48
 16612   014438  EF28  F0A2         	goto	u260_49
 16613   01443C                     u260_48:
 16614   01443C  0005               	push	
 16615   01443E  6EFA               	movwf	pclath,c
 16616   014440  505D               	movf	_TMR0_InterruptHandler^0,w,c
 16617   014442  6EFD               	movwf	tosl,c
 16618   014444  505E               	movf	(_TMR0_InterruptHandler+1)^0,w,c
 16619   014446  6EFE               	movwf	tosh,c
 16620   014448  505F               	movf	(_TMR0_InterruptHandler+2)^0,w,c
 16621   01444A  6EFF               	movwf	tosu,c
 16622   01444C  50FA               	movf	pclath,w,c
 16623   01444E  0012               	return		;indir
 16624   014450                     u260_49:
 16625   014450                     l1089:
 16626                           
 16627                           ; _TMR0_CallBack: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0,
      +                           argsize = 0, vargsize = 0
 16628   014450  0012               	return		;funcret
 16629   014452                     __end_of_TMR0_CallBack:
 16630                           	callstack 0
 16631                           
 16632 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 16633 ;; Defined at:
 16634 ;;		line 176 in file "mcc_generated_files/tmr0.c"
 16635 ;; Parameters:    Size  Location     Type
 16636 ;;		None
 16637 ;; Auto vars:     Size  Location     Type
 16638 ;;		None
 16639 ;; Return value:  Size  Location     Type
 16640 ;;                  1  [STACK] void 
 16641 ;; Registers used:
 16642 ;;		None
 16643 ;; Tracked objects:
 16644 ;;		On entry : 3F/0
 16645 ;;		On exit  : 0/0
 16646 ;;		Unchanged: 0/0
 16647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16652 ;;Total ram usage:        0 bytes
 16653 ;; Hardware stack levels used: 1
 16654 ;; This function calls:
 16655 ;;		Nothing
 16656 ;; This function is called by:
 16657 ;;		_TMR0_Initialize
 16658 ;;		_TMR0_CallBack
 16659 ;; This function uses a reentrant model
 16660 ;;
 16661                           
 16662                           	psect	text70
 16663   0145F0                     __ptext70:
 16664                           	callstack 0
 16665   0145F0                     _TMR0_DefaultInterruptHandler:
 16666                           	callstack 19
 16667   0145F0                     
 16668                           ; _TMR0_DefaultInterruptHandler: autosize = 0, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 16669   0145F0  0012               	return		;funcret
 16670   0145F2                     __end_of_TMR0_DefaultInterruptHandler:
 16671                           	callstack 0
 16672                           
 16673 ;; *************** function _XF_decrementAndQueueTimers *****************
 16674 ;; Defined at:
 16675 ;;		line 217 in file "xf/xf.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;		None
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  dummy           1  [STACK] unsigned char 
 16680 ;;  i               1  [STACK] unsigned char 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;                  1  [STACK] void 
 16683 ;; Registers used:
 16684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+8, btemp+9, btemp+10, btem
      +p+11, prodl, prodh
 16685 ;; Tracked objects:
 16686 ;;		On entry : 3F/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16694 ;;Total ram usage:        0 bytes
 16695 ;; Hardware stack levels used: 1
 16696 ;; Hardware stack levels required when called: 3
 16697 ;; This function calls:
 16698 ;;		_XF_pushEvent
 16699 ;;		_XF_unscheduleTimer
 16700 ;; This function is called by:
 16701 ;;		_main
 16702 ;;		_TMR0_CallBack
 16703 ;; This function uses a reentrant model
 16704 ;;
 16705                           
 16706                           	psect	text71
 16707   012F9A                     __ptext71:
 16708                           	callstack 0
 16709   012F9A                     _XF_decrementAndQueueTimers:
 16710                           	callstack 0
 16711                           
 16712                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0 argfudge = 0
 16713   012F9A  52E6               	movf	postinc1,f,c
 16714   012F9C  52E6               	movf	postinc1,f,c
 16715   012F9E                     
 16716                           ;xf/xf.c: 219:     uint8_t i;;xf/xf.c: 220:     for (i=0; i<12; i++)
 16717                           ;stkvar	_i @ sp[(-2)+1]
 16718   012F9E  0EFF               	movlw	-1
 16719   012FA0  6AE3               	clrf	plusw1,c
 16720   012FA2                     l4304:
 16721                           
 16722                           ;xf/xf.c: 221:     {;xf/xf.c: 222:         if (theXF.timerList[i].ev.id != 0)
 16723                           ;stkvar	_i @ sp[(-2)+1]
 16724   012FA2  0EFF               	movlw	-1
 16725   012FA4  50E3               	movf	plusw1,w,c
 16726   012FA6  0D08               	mullw	8
 16727   012FA8  0ECA               	movlw	low (_theXF+2)
 16728   012FAA  24F3               	addwf	243,w,c
 16729   012FAC  6ED9               	movwf	fsr2l,c
 16730   012FAE  0E02               	movlw	high (_theXF+2)
 16731   012FB0  20F4               	addwfc	prodh,w,c
 16732   012FB2  6EDA               	movwf	fsr2h,c
 16733   012FB4  50DF               	movf	indf2,w,c
 16734   012FB6  B4D8               	btfsc	status,2,c
 16735   012FB8  EFE0  F097         	goto	u214_41
 16736   012FBC  EFE2  F097         	goto	u214_40
 16737   012FC0                     u214_41:
 16738   012FC0  EF3C  F098         	goto	l4316
 16739   012FC4                     u214_40:
 16740   012FC4                     
 16741                           ;xf/xf.c: 223:         {;xf/xf.c: 224:             theXF.timerList[i].tm-=10;
 16742                           ;stkvar	_i @ sp[(-2)+1]
 16743   012FC4  0EFF               	movlw	-1
 16744   012FC6  50E3               	movf	plusw1,w,c
 16745   012FC8  0D08               	mullw	8
 16746   012FCA  0EC8               	movlw	low _theXF
 16747   012FCC  24F3               	addwf	243,w,c
 16748   012FCE  6ED9               	movwf	fsr2l,c
 16749   012FD0  0E02               	movlw	high _theXF
 16750   012FD2  20F4               	addwfc	prodh,w,c
 16751   012FD4  6EDA               	movwf	fsr2h,c
 16752   012FD6  0E0A               	movlw	10
 16753   012FD8  5EDE               	subwf	postinc2,f,c
 16754   012FDA  0E00               	movlw	0
 16755   012FDC  5ADD               	subwfb	postdec2,f,c
 16756   012FDE                     
 16757                           ;xf/xf.c: 225:             if (theXF.timerList[i].tm ==0)
 16758                           ;stkvar	_i @ sp[(-2)+1]
 16759   012FDE  0EFF               	movlw	-1
 16760   012FE0  50E3               	movf	plusw1,w,c
 16761   012FE2  0D08               	mullw	8
 16762   012FE4  0EC8               	movlw	low _theXF
 16763   012FE6  24F3               	addwf	243,w,c
 16764   012FE8  6ED9               	movwf	fsr2l,c
 16765   012FEA  0E02               	movlw	high _theXF
 16766   012FEC  20F4               	addwfc	prodh,w,c
 16767   012FEE  6EDA               	movwf	fsr2h,c
 16768   012FF0  50DE               	movf	postinc2,w,c
 16769   012FF2  10DE               	iorwf	postinc2,w,c
 16770   012FF4  A4D8               	btfss	status,2,c
 16771   012FF6  EFFF  F097         	goto	u215_41
 16772   012FFA  EF01  F098         	goto	u215_40
 16773   012FFE                     u215_41:
 16774   012FFE  EF3C  F098         	goto	l4316
 16775   013002                     u215_40:
 16776   013002                     
 16777                           ;xf/xf.c: 226:             {;xf/xf.c: 227:                 uint8_t dummy;;xf/xf.c: 228: 
      +                                          if (XF_pushEvent(theXF.timerList[i].ev, 1, &dummy) == 1)
 16778                           ;stkvar	_dummy @ sp[(-2)+0]
 16779   013002  0EFE               	movlw	254
 16780   013004  24E1               	addwf	fsr1l,w,c
 16781   013006  6E2D               	movwf	btemp^0,c
 16782   013008  0EFF               	movlw	255
 16783   01300A  20E2               	addwfc	fsr1h,w,c
 16784   01300C  6E2E               	movwf	(btemp+1)^0,c
 16785   01300E  C02D  FFE6         	movff	btemp,postinc1
 16786   013012  C02E  FFE6         	movff	btemp+1,postinc1
 16787   013016  0E01               	movlw	1
 16788   013018  6EE6               	movwf	postinc1,c
 16789                           
 16790                           ;stkvar	_i @ sp[(-5)+1]
 16791   01301A  0EFC               	movlw	-4
 16792   01301C  50E3               	movf	plusw1,w,c
 16793   01301E  0D08               	mullw	8
 16794   013020  0ECA               	movlw	low (_theXF+2)
 16795   013022  24F3               	addwf	243,w,c
 16796   013024  6ED9               	movwf	fsr2l,c
 16797   013026  0E02               	movlw	high (_theXF+2)
 16798   013028  20F4               	addwfc	prodh,w,c
 16799   01302A  6EDA               	movwf	fsr2h,c
 16800   01302C  0E06               	movlw	6
 16801   01302E                     u216_41:
 16802   01302E  CFDE FFE6          	movff	postinc2,postinc1
 16803   013032  2CE8               	decfsz	wreg,w,c
 16804   013034  EF17  F098         	goto	u216_41
 16805   013038  ECAF  F092         	call	_XF_pushEvent	;wreg free
 16806   01303C  042D               	decf	btemp^0,w,c
 16807   01303E  A4D8               	btfss	status,2,c
 16808   013040  EF24  F098         	goto	u217_41
 16809   013044  EF26  F098         	goto	u217_40
 16810   013048                     u217_41:
 16811   013048  EF2F  F098         	goto	l4314
 16812   01304C                     u217_40:
 16813   01304C                     
 16814                           ;xf/xf.c: 229:                 {;xf/xf.c: 230:                   XF_unscheduleTimer(i, 1
      +                          );
 16815   01304C  0E01               	movlw	1
 16816   01304E  6EE6               	movwf	postinc1,c
 16817                           
 16818                           ;stkvar	_i @ sp[(-3)+1]
 16819   013050  0EFE               	movlw	-2
 16820   013052  50E3               	movf	plusw1,w,c
 16821   013054  6EE6               	movwf	postinc1,c
 16822   013056  EC14  F0A1         	call	_XF_unscheduleTimer	;wreg free
 16823                           
 16824                           ;xf/xf.c: 231:                 }
 16825   01305A  EF3C  F098         	goto	l4316
 16826   01305E                     l4314:
 16827                           
 16828                           ;xf/xf.c: 233:                 {;xf/xf.c: 234:                   theXF.timerList[i].tm=1
      +                          ;
 16829                           ;stkvar	_i @ sp[(-2)+1]
 16830   01305E  0EFF               	movlw	-1
 16831   013060  50E3               	movf	plusw1,w,c
 16832   013062  0D08               	mullw	8
 16833   013064  0EC8               	movlw	low _theXF
 16834   013066  24F3               	addwf	243,w,c
 16835   013068  6ED9               	movwf	fsr2l,c
 16836   01306A  0E02               	movlw	high _theXF
 16837   01306C  20F4               	addwfc	prodh,w,c
 16838   01306E  6EDA               	movwf	fsr2h,c
 16839   013070  0E01               	movlw	1
 16840   013072  6EDE               	movwf	postinc2,c
 16841   013074  0E00               	movlw	0
 16842   013076  6EDD               	movwf	postdec2,c
 16843   013078                     l4316:
 16844                           
 16845                           ;xf/xf.c: 238:     }
 16846                           ;stkvar	_i @ sp[(-2)+1]
 16847   013078  0EFF               	movlw	-1
 16848   01307A  2AE3               	incf	plusw1,f,c
 16849   01307C                     
 16850                           ;stkvar	_i @ sp[(-2)+1]
 16851   01307C  0EFF               	movlw	-1
 16852   01307E  CFE3 F02D          	movff	plusw1,btemp
 16853   013082  0E0B               	movlw	11
 16854   013084  642D               	cpfsgt	btemp^0,c
 16855   013086  EF47  F098         	goto	u218_41
 16856   01308A  EF49  F098         	goto	u218_40
 16857   01308E                     u218_41:
 16858   01308E  EFD1  F097         	goto	l4304
 16859   013092                     u218_40:
 16860   013092                     
 16861                           ; _XF_decrementAndQueueTimers: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 0, argsize = 0, vargsize = 0
 16862   013092  52E5               	movf	postdec1,f,c
 16863   013094  52E5               	movf	postdec1,f,c
 16864   013096  0012               	return		;funcret
 16865   013098                     __end_of_XF_decrementAndQueueTimers:
 16866                           	callstack 0
 16867                           
 16868 ;; *************** function _XF_unscheduleTimer *****************
 16869 ;; Defined at:
 16870 ;;		line 202 in file "xf/xf.c"
 16871 ;; Parameters:    Size  Location     Type
 16872 ;;  id              1  [STACK] unsigned char 
 16873 ;;  inISR           1  [STACK] _Bool 
 16874 ;; Auto vars:     Size  Location     Type
 16875 ;;		None
 16876 ;; Return value:  Size  Location     Type
 16877 ;;                  1  [STACK] void 
 16878 ;; Registers used:
 16879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+10, btemp+11, prodl, prodh
 16880 ;; Tracked objects:
 16881 ;;		On entry : 0/0
 16882 ;;		On exit  : 0/0
 16883 ;;		Unchanged: 0/0
 16884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16889 ;;Total ram usage:        0 bytes
 16890 ;; Hardware stack levels used: 1
 16891 ;; Hardware stack levels required when called: 1
 16892 ;; This function calls:
 16893 ;;		_ENTERCRITICAL
 16894 ;;		_Event_init
 16895 ;;		_LEAVECRITICAL
 16896 ;; This function is called by:
 16897 ;;		_XF_decrementAndQueueTimers
 16898 ;; This function uses a reentrant model
 16899 ;;
 16900                           
 16901                           	psect	text72
 16902   014228                     __ptext72:
 16903                           	callstack 0
 16904   014228                     _XF_unscheduleTimer:
 16905                           	callstack 17
 16906   014228                     
 16907                           ;xf/xf.c: 202: void XF_unscheduleTimer(uint8_t id, _Bool inISR);xf/xf.c: 203: {;xf/xf.c:
      +                           204:     ENTERCRITICAL(inISR);
 16908                           ;stkvar	_inISR @ sp[(0)+-2]
 16909   014228  0EFE               	movlw	-2
 16910   01422A  50E3               	movf	plusw1,w,c
 16911   01422C  6EE6               	movwf	postinc1,c
 16912   01422E  ECCD  F0A2         	call	_ENTERCRITICAL	;wreg free
 16913   014232                     
 16914                           ;xf/xf.c: 205:     theXF.timerList[id].tm = 0;
 16915                           ;stkvar	_id @ sp[(0)+-1]
 16916   014232  0EFF               	movlw	-1
 16917   014234  50E3               	movf	plusw1,w,c
 16918   014236  0D08               	mullw	8
 16919   014238  0EC8               	movlw	low _theXF
 16920   01423A  24F3               	addwf	243,w,c
 16921   01423C  6ED9               	movwf	fsr2l,c
 16922   01423E  0E02               	movlw	high _theXF
 16923   014240  20F4               	addwfc	prodh,w,c
 16924   014242  6EDA               	movwf	fsr2h,c
 16925   014244  6ADE               	clrf	postinc2,c
 16926   014246  6ADD               	clrf	postdec2,c
 16927   014248                     
 16928                           ;xf/xf.c: 206:     Event_init(&(theXF.timerList[id].ev));
 16929                           ;stkvar	_id @ sp[(0)+-1]
 16930   014248  0EFF               	movlw	-1
 16931   01424A  50E3               	movf	plusw1,w,c
 16932   01424C  0D08               	mullw	8
 16933   01424E  0ECA               	movlw	low (_theXF+2)
 16934   014250  24F3               	addwf	243,w,c
 16935   014252  6E37               	movwf	(btemp+10)^0,c
 16936   014254  0E02               	movlw	high (_theXF+2)
 16937   014256  20F4               	addwfc	prodh,w,c
 16938   014258  6E38               	movwf	(btemp+11)^0,c
 16939   01425A  C037  FFE6         	movff	btemp+10,postinc1
 16940   01425E  C038  FFE6         	movff	btemp+11,postinc1
 16941   014262  EC6B  F0A1         	call	_Event_init	;wreg free
 16942   014266                     
 16943                           ;xf/xf.c: 207:     theXF.countTmr--;
 16944   014266  C3E1  FFE8         	movff	_theXF+281,wreg
 16945   01426A  0FFF               	addlw	-1
 16946   01426C  CFE8 F3E1          	movff	wreg,_theXF+281
 16947   014270                     
 16948                           ;xf/xf.c: 208:     LEAVECRITICAL(inISR);
 16949                           ;stkvar	_inISR @ sp[(0)+-2]
 16950   014270  0EFE               	movlw	-2
 16951   014272  50E3               	movf	plusw1,w,c
 16952   014274  6EE6               	movwf	postinc1,c
 16953   014276  ECC1  F0A2         	call	_LEAVECRITICAL	;wreg free
 16954   01427A                     
 16955                           ; _XF_unscheduleTimer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 16956   01427A  52E5               	movf	postdec1,f,c
 16957   01427C  52E5               	movf	postdec1,f,c
 16958   01427E  0012               	return		;funcret
 16959   014280                     __end_of_XF_unscheduleTimer:
 16960                           	callstack 0
 16961                           
 16962                           	psect	rparam
 16963   000001                     ___rparam_used  equ	1
 16964   000000                     ___param_bank   equ	0
 16965   000000                     __Lparam        equ	__Lrparam
 16966   000000                     __Hparam        equ	__Hrparam
 16967                           
 16968                           	psect	temp
 16969   00002D                     btemp:
 16970                           	callstack 0
 16971   00002D                     	ds	32
 16972   00002D                     wtemp0          set	btemp
 16973   00002F                     wtemp1          set	btemp+2
 16974   000031                     wtemp2          set	btemp+4
 16975   000033                     wtemp3          set	btemp+6
 16976   000035                     wtemp4          set	btemp+8
 16977   000037                     wtemp5          set	btemp+10
 16978   00002E                     wtemp8          set	btemp+1
 16979   00002D                     ttemp0          set	btemp
 16980   000030                     ttemp1          set	btemp+3
 16981   000033                     ttemp2          set	btemp+6
 16982   000036                     ttemp3          set	btemp+9
 16983   00002E                     ttemp5          set	btemp+1
 16984   000031                     ttemp6          set	btemp+4
 16985   000035                     ttemp7          set	btemp+8
 16986   00002D                     ltemp0          set	btemp
 16987   000031                     ltemp1          set	btemp+4
 16988   000035                     ltemp2          set	btemp+8
 16989   00002D                     lltemp0         set	btemp
 16990   000035                     lltemp1         set	btemp+8
 16991   00003D                     lltemp2         set	btemp+16
 16992   000045                     lltemp3         set	btemp+24
 16993                           
 16994                           	psect	config
 16995                           
 16996                           ;Config register CONFIG1L @ 0x1FFF8
 16997                           ;	Watchdog Timer Enable bit
 16998                           ;	WDT = OFF, WDT disabled (control is placed on SWDTEN bit)
 16999                           ;	Stack Overflow/Underflow Reset Enable bit
 17000                           ;	STVR = ON, Reset on stack overflow/underflow enabled
 17001                           ;	Extended Instruction Set Enable bit
 17002                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 17003                           ;	Background Debugger Enable bit
 17004                           ;	DEBUG = OFF, Background debugger disabled; RB6 and RB7 configured as general purpose I
      +                          /O pins
 17005   01FFF8                     	org	131064
 17006   01FFF8  A0                 	db	160
 17007                           
 17008                           ;Config register CONFIG1H @ 0x1FFF9
 17009                           ;	Code Protection bit
 17010                           ;	CP0 = OFF, Program memory is not code-protected
 17011   01FFF9                     	org	131065
 17012   01FFF9  F4                 	db	244
 17013                           
 17014                           ;Config register CONFIG2L @ 0x1FFFA
 17015                           ;	Oscillator Selection bits
 17016                           ;	FOSC = HSPLL, HS oscillator, PLL enabled and under software control
 17017                           ;	Default/Reset System Clock Select bit
 17018                           ;	FOSC2 = ON, Clock selected by FOSC1:FOSC0 as system clock is enabled when OSCCON<1:0> 
      +                          = 00
 17019                           ;	Fail-Safe Clock Monitor Enable
 17020                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 17021                           ;	Two-Speed Start-up (Internal/External Oscillator Switchover) Control bit
 17022                           ;	IESO = ON, Two-Speed Start-up enabled
 17023   01FFFA                     	org	131066
 17024   01FFFA  C5                 	db	197
 17025                           
 17026                           ;Config register CONFIG2H @ 0x1FFFB
 17027                           ;	Watchdog Timer Postscaler Select bits
 17028                           ;	WDTPS = 32768, 1:32768
 17029   01FFFB                     	org	131067
 17030   01FFFB  FF                 	db	255
 17031                           
 17032                           ;Config register CONFIG3L @ 0x1FFFC
 17033                           ;	External Address Bus Shift Enable bit
 17034                           ;	EASHFT = ON, Address shifting enabled; address on external bus is offset to start at 0
      +                          00000h
 17035                           ;	External Memory Bus
 17036                           ;	MODE = MM, Microcontroller mode, external bus disabled
 17037                           ;	Data Bus Width Select bit
 17038                           ;	BW = 16, 16-Bit Data Width mode
 17039                           ;	External Bus Wait Enable bit
 17040                           ;	WAIT = OFF, Wait states for operations on external memory bus disabled
 17041   01FFFC                     	org	131068
 17042   01FFFC  F8                 	db	248
 17043                           
 17044                           ;Config register CONFIG3H @ 0x1FFFD
 17045                           ;	ECCP2 MUX bit
 17046                           ;	CCP2MX = ON, ECCP2/P2A is multiplexed with RC1
 17047                           ;	ECCP MUX bit
 17048                           ;	ECCPMX = ON, ECCP1 outputs (P1B/P1C) are multiplexed with RE6 and RE5; ECCP3 outputs (
      +                          P3B/P3C) are multiplexed with RE4 and RE3
 17049                           ;	Ethernet LED Enable bit
 17050                           ;	ETHLED = ON, RA0/RA1 are multiplexed with LEDA/LEDB when Ethernet module is enabled an
      +                          d function as I/O when Ethernet is disabled
 17051   01FFFD                     	org	131069
 17052   01FFFD  F7                 	db	247
 17053                           tosu	equ	0xFFF
 17054                           tosh	equ	0xFFE
 17055                           tosl	equ	0xFFD
 17056                           stkptr	equ	0xFFC
 17057                           pclatu	equ	0xFFB
 17058                           pclath	equ	0xFFA
 17059                           pcl	equ	0xFF9
 17060                           tblptru	equ	0xFF8
 17061                           tblptrh	equ	0xFF7
 17062                           tblptrl	equ	0xFF6
 17063                           tablat	equ	0xFF5
 17064                           prodh	equ	0xFF4
 17065                           prodl	equ	0xFF3
 17066                           indf0	equ	0xFEF
 17067                           postinc0	equ	0xFEE
 17068                           postdec0	equ	0xFED
 17069                           preinc0	equ	0xFEC
 17070                           plusw0	equ	0xFEB
 17071                           fsr0h	equ	0xFEA
 17072                           fsr0l	equ	0xFE9
 17073                           wreg	equ	0xFE8
 17074                           indf1	equ	0xFE7
 17075                           postinc1	equ	0xFE6
 17076                           postdec1	equ	0xFE5
 17077                           preinc1	equ	0xFE4
 17078                           plusw1	equ	0xFE3
 17079                           fsr1h	equ	0xFE2
 17080                           fsr1l	equ	0xFE1
 17081                           bsr	equ	0xFE0
 17082                           indf2	equ	0xFDF
 17083                           postinc2	equ	0xFDE
 17084                           postdec2	equ	0xFDD
 17085                           preinc2	equ	0xFDC
 17086                           plusw2	equ	0xFDB
 17087                           fsr2h	equ	0xFDA
 17088                           fsr2l	equ	0xFD9
 17089                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    96
    Data        0
    BSS         753
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           63     16      63
    BANK0           160      0      27
    BANK1           256      0     200
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    config	PTR struct _CAN_TEF_CONFIG size(2) Largest target is 1
		 -> tefConfig(STACK[1]), 

    config	PTR struct _CAN_RX_FIFO_CONFIG size(2) Largest target is 3
		 -> rxfConfig(STACK[3]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_QUEUE_CONFIG size(2) Largest target is 4
		 -> txqConfig(STACK[4]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_TX_FIFO_CONFIG size(2) Largest target is 2
		 -> txfConfig(STACK[2]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    config	PTR struct _CAN_CONFIG size(2) Largest target is 3
		 -> config(STACK[3]), 

    DRV_CANFDSPI_ReadHalfWord$2	PTR unsigned short  size(2) Largest target is 2
		 -> intEnables(STACK[2]), intFlags(STACK[2]), 

    DRV_CANFDSPI_ReadWord$2	PTR unsigned long  size(2) Largest target is 4
		 -> ciFifoSta(STACK[4]), ciTrec(STACK[4]), reg(STACK[4]), 

    DRV_CANFDSPI_WriteWordArray$2	PTR unsigned long  size(2) Largest target is 8
		 -> w(STACK[8]), 

    ev	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    flags	PTR enum E5591 size(2) Largest target is 1
		 -> rxFlags(STACK[1]), 

    flags	PTR enum E5583 size(2) Largest target is 1
		 -> txFlags(STACK[1]), 

    fObj	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> fObj(STACK[6]), 

    id	PTR struct _CAN_FILTEROBJ_ID size(2) Largest target is 6
		 -> fObj(STACK[6]), 

    InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), 

    mask	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> mObj(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    me	PTR struct Event_ size(2) Largest target is 282
		 -> ev(STACK[6]), theXF(BIGRAM[282]), theXF$eventQueue(BIGRAM[180]), theXF$timerList(BIGRAM[96]), 

    me$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    mObj	PTR struct _CAN_MASKOBJ_ID size(2) Largest target is 6
		 -> mObj(STACK[6]), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), 

    processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    processEvent$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxd	PTR unsigned long  size(2) Largest target is 12
		 -> fifoReg(STACK[12]), fifoReg(STACK[12]), fifoReg(STACK[8]), fifoReg(STACK[12]), 
		 -> w(STACK[12]), 

    rxd	PTR unsigned char  size(2) Largest target is 76
		 -> ba(STACK[12]), ba(STACK[76]), 

    rxd	PTR unsigned char  size(2) Largest target is 5
		 -> b(STACK[1]), ciFifoCon(STACK[5]), ciFifoSta(STACK[4]), ciTefCon(STACK[4]), 
		 -> ciTefSta(STACK[4]), crc(STACK[1]), crc(STACK[1]), crc(STACK[1]), 
		 -> crc(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), d(STACK[1]), d(STACK[1]), 
		 -> d(STACK[1]), d(STACK[1]), eccInterrupts(STACK[1]), eccInterrupts(STACK[1]), 
		 -> eccStat(STACK[1]), eccStatus(STACK[1]), f(STACK[1]), fCtrl(STACK[1]), 
		 -> filterHitByte(STACK[1]), icodeByte(STACK[1]), iocon(STACK[4]), osc(STACK[4]), 
		 -> rxCodeByte(STACK[1]), txCodeByte(STACK[1]), 

    rxd	PTR unsigned char  size(2) Largest target is 8
		 -> rxdata(STACK[8]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), txMsg(STACK[16]), 

    rxObj	PTR struct _CAN_RX_MSGOBJ size(2) Largest target is 16
		 -> rxObj(STACK[16]), 

    rxPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiReceiveBuffer(BANK2[200]), 

    S4943$1$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    S4943Event_$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    sp__Event_getPE$0	PTR struct Event_ size(2) Largest target is 6
		 -> ev(STACK[6]), 

    theXF$eventQueue$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    theXF$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$id$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    theXF$timerList$ev$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 

    tmid	PTR unsigned char  size(2) Largest target is 1
		 -> dummy(STACK[1]), tmid(STACK[1]), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), XF_decrementAndQueueTimers(), NULL(), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), 

    txd	PTR unsigned char  size(2) Largest target is 200
		 -> txBuffer(STACK[76]), txd(STACK[200]), 

    txd	PTR unsigned char  size(2) Largest target is 8
		 -> txdata(STACK[8]), txdata(STACK[8]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txObj	PTR struct _CAN_TX_MSGOBJ size(2) Largest target is 16
		 -> txMsg(STACK[16]), 

    txPtr	PTR unsigned char  size(2) Largest target is 200
		 -> spiTransmitBuffer(BANK1[200]), 

    vfprintf$0	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf$1	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 

    vfprintf$2	PTR PTR void  size(2) Largest target is 2
		 -> ap(STACK[2]), 

    ?_XF_popEvent$processEvent	PTR FTN(PTR struct Event_,)_Bool  size(3) Largest target is 1
		 -> lightControl_Process(), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   22776
                            _CanInit
                       _CanSetFilter
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                     _XF_executeOnce
                            _XF_init
                            _XF_post
                     _updateCarState
 ---------------------------------------------------------------------------------
 (1) _updateCarState                                      24    24      0    4571
                         _CanReceive
                            _XF_post
 ---------------------------------------------------------------------------------
 (2) _XF_post                                             13     7      6    1387
                         _Event_init
                     _Event_setDelay
                        _Event_setId
                        _Event_setPE
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     982
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (3) _Event_setPE                                          5     0      5      44
 ---------------------------------------------------------------------------------
 (3) _Event_setId                                          3     0      3      44
 ---------------------------------------------------------------------------------
 (2) _CanReceive                                           5     1      4    3055
_DRV_CANFDSPI_ReceiveChannelEventGet
     _DRV_CANFDSPI_ReceiveMessageGet
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveMessageGet                     120   114      6    2616
         _DRV_CANFDSPI_ReadByteArray
         _DRV_CANFDSPI_ReadWordArray
  _DRV_CANFDSPI_ReceiveChannelUpdate
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReceiveChannelUpdate                    9     8      1     299
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByteArray                          11     5      6     364
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_ReceiveChannelEventGet                 10     7      3     349
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (1) _XF_init                                              2     2      0     224
                         _Event_init
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (1) _XF_executeOnce                                       6     6      0    7266
                        _XF_popEvent
               _lightControl_Process *
 ---------------------------------------------------------------------------------
 (2) _lightControl_Process                                 2     0      2    6725
              _lightContol_BackLight
             _lightContol_FrontLight
 ---------------------------------------------------------------------------------
 (3) _lightContol_FrontLight                              25    24      1    3336
                            _CanSend
 ---------------------------------------------------------------------------------
 (3) _lightContol_BackLight                               25    24      1    3301
                            _CanSend
 ---------------------------------------------------------------------------------
 (4) _CanSend                                              5     1      4    3165
_DRV_CANFDSPI_TransmitChannelEventGe
   _DRV_CANFDSPI_TransmitChannelLoad
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelLoad                   128   118     10    2688
        _DRV_CANFDSPI_DlcToDataBytes
         _DRV_CANFDSPI_ReadWordArray
 _DRV_CANFDSPI_TransmitChannelUpdate
        _DRV_CANFDSPI_WriteByteArray
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_WriteByteArray                         11     5      6     296
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_TransmitChannelUpdate                  10     8      2     364
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadWordArray                          19    13      6     525
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _DRV_CANFDSPI_DlcToDataBytes                          5     4      1      60
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_TransmitChannelEventGet                10     7      3     343
              _DRV_CANFDSPI_ReadByte
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                         12     6      6     474
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      15
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             3     0      3      15
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CanSetFilter                                         5     0      5    2657
         _DRV_CANFDSPI_FilterDisable
   _DRV_CANFDSPI_FilterMaskConfigure
 _DRV_CANFDSPI_FilterObjectConfigure
      _DRV_CANFDSPI_FilterToFifoLink
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterToFifoLink                        7     4      3     308
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterObjectConfigure                  16    13      3     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterMaskConfigure                    17    13      4     831
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_FilterDisable                           5     4      1     533
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (1) _CanInit                                             15    13      2    6572
_DRV_CANFDSPI_BitTimeConfigureNomina
             _DRV_CANFDSPI_Configure
  _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
   _DRV_CANFDSPI_OperationModeSelect
_DRV_CANFDSPI_ReceiveChannelConfigur
                 _DRV_CANFDSPI_Reset
          _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_TimeStampEnable
 _DRV_CANFDSPI_TimeStampPrescalerSet
          _DRV_CANFDSPI_TimeStampSet
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitChannelConfigu
_DRV_CANFDSPI_TransmitQueueConfigure
_DRV_CANFDSPI_TransmitQueueConfigure
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigureObjectReset       7     5      2     120
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitQueueConfigure                  9     7      2     506
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigureObjectReset     7     5      2     150
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TransmitChannelConfigure               11     8      3     578
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampSet                            5     1      4     304
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampPrescalerSet                   3     1      2     304
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TimeStampEnable                         2     2      0     469
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_TefConfigure                            7     5      2     372
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Reset                                   3     3      0     189
                          _SPI2_Open
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (3) _SPI2_Open                                            1     0      1      88
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ReceiveChannelConfigure                11     8      3     464
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_OperationModeSelect                     3     2      1     492
              _DRV_CANFDSPI_ReadByte
             _DRV_CANFDSPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DRV_CANFDSPI_WriteByte                               6     3      3     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (4) _DRV_CANFDSPI_ReadByte                                7     3      4     184
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ModuleEventEnable                       8     5      3     374
         _DRV_CANFDSPI_WriteHalfWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteHalfWord                           8     4      4     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_ConfigureObjectReset                    6     4      2     360
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_Configure                               7     5      2     810
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (2) _DRV_CANFDSPI_BitTimeConfigureNominal40MHz            6     5      1     615
             _DRV_CANFDSPI_WriteWord
 ---------------------------------------------------------------------------------
 (3) _DRV_CANFDSPI_WriteWord                              10     4      6     274
                        _SpiTransfer
 ---------------------------------------------------------------------------------
 (6) _SpiTransfer                                          7     1      6      70
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          16    16      0    1382
                                              0 COMRAM    16    16      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0    1382
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (11) _TMR0_CallBack                                       0     0      0    1382
                                NULL *
       _TMR0_DefaultInterruptHandler *
         _XF_decrementAndQueueTimers *
 ---------------------------------------------------------------------------------
 (12) _XF_decrementAndQueueTimers                          2     2      0    1382
                       _XF_pushEvent
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (13) _XF_unscheduleTimer                                  2     0      2     198
                      _ENTERCRITICAL
                         _Event_init
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (14) _Event_init                                          2     0      2      66
 ---------------------------------------------------------------------------------
 (13) _XF_pushEvent                                       12     3      9     982
                      _ENTERCRITICAL
                     _Event_getDelay
                     _Event_setDelay
                      _LEAVECRITICAL
                     _XF_noMoreEvent
                   _XF_scheduleTimer
                            ___awmod
 ---------------------------------------------------------------------------------
 (14) ___awmod                                             6     2      4     296
 ---------------------------------------------------------------------------------
 (14) _XF_scheduleTimer                                   10     1      9     310
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                     _XF_noMoreTimer
 ---------------------------------------------------------------------------------
 (15) _XF_noMoreTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _LEAVECRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _ENTERCRITICAL                                       1     0      1      22
 ---------------------------------------------------------------------------------
 (14) _XF_noMoreEvent                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _Event_setDelay                                      4     0      4      44
 ---------------------------------------------------------------------------------
 (14) _Event_getDelay                                      2     0      2      22
 ---------------------------------------------------------------------------------
 (12) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CanInit
     _DRV_CANFDSPI_BitTimeConfigureNominal40MHz
       _DRV_CANFDSPI_WriteWord
         _SpiTransfer
     _DRV_CANFDSPI_Configure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_ConfigureObjectReset
     _DRV_CANFDSPI_ModuleEventEnable
       _DRV_CANFDSPI_WriteHalfWord
         _SpiTransfer
     _DRV_CANFDSPI_OperationModeSelect
       _DRV_CANFDSPI_ReadByte
         _SpiTransfer
       _DRV_CANFDSPI_WriteByte
         _SpiTransfer
     _DRV_CANFDSPI_ReceiveChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_Reset
       _SPI2_Open
       _SpiTransfer
     _DRV_CANFDSPI_TefConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TimeStampEnable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_TimeStampPrescalerSet
       _DRV_CANFDSPI_WriteHalfWord
     _DRV_CANFDSPI_TimeStampSet
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitChannelConfigureObjectReset
     _DRV_CANFDSPI_TransmitQueueConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_TransmitQueueConfigureObjectReset
   _CanSetFilter
     _DRV_CANFDSPI_FilterDisable
       _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_WriteByte
     _DRV_CANFDSPI_FilterMaskConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterObjectConfigure
       _DRV_CANFDSPI_WriteWord
     _DRV_CANFDSPI_FilterToFifoLink
       _DRV_CANFDSPI_WriteByte
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI2_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _XF_executeOnce
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _lightControl_Process *
       _lightContol_BackLight
         _CanSend
           _DRV_CANFDSPI_TransmitChannelEventGet
             _DRV_CANFDSPI_ReadByte
           _DRV_CANFDSPI_TransmitChannelLoad
             _DRV_CANFDSPI_DlcToDataBytes
             _DRV_CANFDSPI_ReadWordArray
               _SpiTransfer
             _DRV_CANFDSPI_TransmitChannelUpdate
               _DRV_CANFDSPI_WriteByte
             _DRV_CANFDSPI_WriteByteArray
               _SpiTransfer
       _lightContol_FrontLight
         _CanSend
   _XF_init
     _Event_init
   _XF_post
     _Event_init
     _Event_setDelay
     _Event_setId
     _Event_setPE
     _XF_pushEvent
       _ENTERCRITICAL
       _Event_getDelay
       _Event_setDelay
       _LEAVECRITICAL
       _XF_noMoreEvent
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         _XF_noMoreTimer
       ___awmod
   _updateCarState
     _CanReceive
       _DRV_CANFDSPI_ReceiveChannelEventGet
         _DRV_CANFDSPI_ReadByte
       _DRV_CANFDSPI_ReceiveMessageGet
         _DRV_CANFDSPI_ReadByteArray
           _SpiTransfer
         _DRV_CANFDSPI_ReadWordArray
         _DRV_CANFDSPI_ReceiveChannelUpdate
           _DRV_CANFDSPI_WriteByte
     _XF_post

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       NULL(Fake) *
       _TMR0_DefaultInterruptHandler *
       _XF_decrementAndQueueTimers *
         _XF_pushEvent
           _ENTERCRITICAL
           _Event_getDelay
           _Event_setDelay
           _LEAVECRITICAL
           _XF_noMoreEvent
           _XF_scheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
             _XF_noMoreTimer
           ___awmod
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _Event_init
           _LEAVECRITICAL

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3711      0     282      7.6%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     200     78.1%
BITBANK1           256      0       0      0.0%
BANK1              256      0     200     78.1%
BITBANK0           160      0       0      0.0%
BANK0              160      0      27     16.9%
BITBIGSFR_1h       155      0       0      0.0%
BITBIGSFR          128      0       0      0.0%
BITBANK14          128      0       0      0.0%
BANK14             128      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BIGRAM_1            96      0       0      0.0%
BITCOMRAM           63      0       0      0.0%
COMRAM              63     16      63    100.0%
BITBIGSFR_1l         2      0       0      0.0%
STACK                0      0     250      0.0%
DATA                 0      0    1022      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Feb 27 12:32:06 2025

                                  __end_of_updateCarState 3350  
                                              _CanReceive 409E  
                                         _timer0ReloadVal 0027  
                                                     l150 3814  
                                                     l222 3FB8  
                                                     l206 1730  
                                                     l215 19B0  
                                                     l145 3762  
                                                     l401 38CC  
                                                     l161 4094  
                                                     l146 377A  
                                                     l218 1C0E  
                                                     l154 2068  
                                                     l322 14A8  
                                                     l171 41BE  
                                                     l251 2554  
                                                     l412 415C  
                                                     l260 317C  
                                                     l149 380E  
                                                     l317 1174  
                                                     l165 40F8  
                                                     l174 42CC  
                                                     l254 2E76  
                                                     l158 3C3C  
                                                     l327 3E0E  
                                                     l184 3750  
                                                     l168 44DA  
                                                     l336 3EA0  
                                                     l264 0742  
                                                     l257 2D3C  
                                                     l193 23D2  
                                                     l346 2BFC  
                                                     l179 341E  
                                                     l453 3D78  
                                                     l293 3B92  
                                                     l357 0E2A  
                                                     l623 4222  
                                                     l199 2F90  
                                                     l482 3CE0  
                                                     l643 4562  
                                                     l635 44FA  
                                                     l379 402A  
                                                     l665 1C60  
                                                     l682 1E5A  
                                                     l674 1CAC  
                                                     l875 2246  
                                                     l976 45C6  
                                                     l979 45DE  
                                                     u100 20A4  
                                                     u101 20A0  
                                                     u805 1A92  
                                                     u815 1AF4  
                                                     u825 1B22  
                                                     u835 1B50  
                                                     u845 1B7E  
                                                     u855 1BAC  
                                                     u865 1BDA  
                                                     u785 1A4C  
                                                     u795 1A70  
                                                     u975 2DAE  
       __end_of_DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1E64  
               _DRV_CANFDSPI_BitTimeConfigureNominal40MHz 1C18  
                  __end_of_DRV_CANFDSPI_ModuleEventEnable 4166  
                          _DRV_CANFDSPI_ModuleEventEnable 4102  
                                                     prod 0FF3  
                                                     tosl 0FFD  
                                                     wreg 0FE8  
            __end_of_DRV_CANFDSPI_TransmitChannelEventGet 3D82  
                    _DRV_CANFDSPI_TransmitChannelEventGet 3CEA  
                                                    l1020 44AE  
                                                    l1120 3988  
                                                    l1032 45EE  
                                                    l1200 45E6  
                                                    l1201 45E6  
                                                    l1116 45D6  
                                                    l1206 45E0  
                                                    l1215 2814  
                                                    l1207 45E0  
                                                    l1231 325E  
                                                    l1223 26D4  
                                                    l1064 43E2  
                                                    l1216 282C  
                                                    l3010 30DC  
                                                    l1250 45AE  
                                                    l1162 43A0  
                                                    l1234 3266  
                                                    l1227 3686  
                                                    l3012 30FA  
                                                    l1092 4544  
                                                    l2300 208C  
                                                    l1237 427A  
                                                    l1085 4480  
                                                    l1421 3AE4  
                                                    l1261 3F30  
                                                    l1246 3092  
                                                    l3014 3126  
                                                    l1254 4596  
                                                    l2310 211C  
                                                    l2302 208E  
                                                    l1174 4412  
                                                    l1095 45F0  
                                                    l1159 431E  
                                                    l3016 3150  
                                                    l3008 30A0  
                                                    l4000 28BA  
                                                    l2312 2142  
                                                    l2304 20A4  
                                                    l1168 457A  
                                                    l1089 4450  
                                                    l1177 4524  
                                                    l1257 35BA  
                                                    l3050 2E08  
                                                    l3042 2D4E  
                                                    l4010 292A  
                                                    l4002 28BE  
                                                    l2314 2168  
                                                    l2306 20D0  
                                                    l2322 21DA  
                                                    l3052 2E3C  
                                                    l3044 2D8A  
                                                    l3300 45D8  
                                                    l4004 28CE  
                                                    l4012 2948  
                                                    l2316 218E  
                                                    l2308 20F6  
                                                    l2324 222E  
                                                    l4020 3B9E  
                                                    l4100 26BC  
                                                    l1429 3A36  
                                                    l1461 3346  
                                                    l4110 4232  
                                                    l3046 2DAE  
                                                    l3302 45DA  
                                                    l4014 295A  
                                                    l4006 28FC  
                                                    l2318 21B4  
                                                    l4022 3BC6  
                                                    l4030 2258  
                                                    l4102 26C6  
                                                    l1447 2A5C  
                                                    l4112 4248  
                                                    l3048 2DD8  
                                                    l4016 2966  
                                                    l4008 2920  
                                                    l4024 3BE2  
                                                    l1448 2ABE  
                                                    l4120 3C4E  
                                                    l4040 22AA  
                                                    l4032 2276  
                                                    l4200 0C9E  
                                                    l4104 26D0  
                                                    l4114 4266  
                                                    l4026 3BF2  
                                                    l4130 3C8E  
                                                    l4122 3C4E  
                                                    l4050 2340  
                                                    l4042 22C4  
                                                    l4034 2276  
                                                    l4210 0D5E  
                                                    l4202 0CBA  
                                                    l4116 4270  
                                                    l4108 4228  
                                                    l1708 2972  
                                                    l4132 3CB6  
                                                    l4052 2380  
                                                    l4044 22E2  
                                                    l4036 228C  
                                                    l4060 3FC8  
                                                    l4220 0DFA  
                                                    l4212 0D62  
                                                    l4204 0CD6  
                                                    l4140 0754  
                                                    l4310 3002  
                                                    l4230 38D6  
                                                    l5030 21F0  
                                                    l4126 3C64  
                                                    l4118 3C4E  
                                                    l4054 239E  
                                                    l4046 2310  
                                                    l4038 2292  
                                                    l4070 4000  
                                                    l4062 3FC8  
                                                    l4222 0DFE  
                                                    l4206 0D0C  
                                                    l4214 0D88  
                                                    l4150 07BC  
                                                    l4142 075C  
                                                    l4312 304C  
                                                    l4304 2FA2  
                                                    l5032 1DA6  
                                                    l4400 177E  
                                                    l4232 38E4  
                                                    l3280 45D0  
                                                    l2296 207A  
                                                    l4320 3A48  
                                                    l4136 3CCC  
                                                    l4128 3C74  
                                                    l4056 23CC  
                                                    l4048 2334  
                                                    l4072 4024  
                                                    l4064 3FC8  
                                                    l4216 0DA8  
                                                    l4224 0E20  
                                                    l4208 0D14  
                                                    l4160 0858  
                                                    l4152 07EC  
                                                    l4144 0776  
                                                    l4080 25A2  
                                                    l4314 305E  
                                                    l4306 2FC4  
                                                    l4250 3388  
                                                    l4242 3358  
                                                    l4410 1848  
                                                    l4402 17A8  
                                                    l4234 3928  
                                                    l3290 449C  
                                                    l3282 45D2  
                                                    l2298 208A  
                                                    l4330 3AAC  
                                                    l4322 3A5C  
                                                    l5026 2A28  
                                                    l4066 3FD8  
                                                    l4218 0DB0  
                                                    l4170 08C4  
                                                    l4162 086E  
                                                    l4146 07A6  
                                                    l4090 263E  
                                                    l4082 25C2  
                                                    l4308 2FDE  
                                                    l4316 3078  
                                                    l4260 33DE  
                                                    l4244 336C  
                                                    l4420 192E  
                                                    l4412 1876  
                                                    l4404 17CC  
                                                    l4500 2B2E  
                                                    l4236 3950  
                                                    l3276 45EC  
                                                    l3292 449E  
                                                    l3284 45D4  
                                                    l3700 3B8C  
                                                    l4340 39C2  
                                                    l4332 3AB8  
                                                    l4324 3A70  
                                                    l5028 2AA0  
                                                    l4068 3FF2  
                                                    l4172 08E4  
                                                    l4164 0880  
                                                    l4156 080C  
                                                    l4092 2648  
                                                    l4084 2602  
                                                    l4076 2564  
                                                    l4318 307C  
                                                    l4262 33F4  
                                                    l4246 336C  
                                                    l4422 195C  
                                                    l4414 18A4  
                                                    l4406 17F0  
                                                    l4270 36AC  
                                                    l3710 417E  
                                                    l4502 2B86  
                                                    l4238 3986  
                                                    l4350 44B0  
                                                    l4430 3826  
                                                    l3294 44A0  
                                                    l3286 4482  
                                                    l3278 45C8  
                                                    l2830 452A  
                                                    l4342 39EA  
                                                    l4334 3994  
                                                    l4326 3A76  
                                                    l4190 0BF0  
                                                    l4182 094C  
                                                    l4174 08FA  
                                                    l4166 089C  
                                                    l4158 0840  
                                                    l4094 2662  
                                                    l4086 260C  
                                                    l4078 2588  
                                                    l4264 3418  
                                                    l4256 338C  
                                                    l4248 3382  
                                                    l4424 1992  
                                                    l4416 18D2  
                                                    l4408 1812  
                                                    l4272 36AC  
                                                    l3712 4184  
                                                    l3704 4168  
                                                    l4504 2BB2  
                                                    l4352 44B0  
                                                    l4432 3826  
                                                    l4512 454C  
                                                    l4520 44DC  
                                                    l4600 0E8A  
                                                    l3296 44A2  
                                                    l3288 4498  
                                                    l3800 4582  
                                                    l4344 39FE  
                                                    l4336 39A8  
                                                    l4328 3A98  
                                                    l4192 0C1A  
                                                    l4184 0974  
                                                    l4176 0904  
                                                    l4168 08AC  
                                                    l4096 2666  
                                                    l4088 263A  
                                                    l3650 3788  
                                                    l4258 33DA  
                                                    l4370 1CAC  
                                                    l4362 1C20  
                                                    l4418 1900  
                                                    l4290 374A  
                                                    l4282 36CC  
                                                    l4274 36C2  
                                                    l3714 4186  
                                                    l3706 4168  
                                                    l4506 2BC2  
                                                    l4354 44B4  
                                                    l4434 3862  
                                                    l4514 454C  
                                                    l4450 2C5A  
                                                    l4442 2C0E  
                                                    l4610 1072  
                                                    l4602 0EC4  
                                                    l3298 44A8  
                                                    l3802 4594  
                                                    l3730 2EC2  
                                                    l3722 2E88  
                                                    l3810 005A  
                                                    l4346 3A0A  
                                                    l4338 39BC  
                                                    l4194 0C50  
                                                    l4186 099A  
                                                    l4178 0936  
                                                    l4098 2692  
                                                    l4700 4422  
                                                    l3660 3810  
                                                    l3652 3798  
                                                    l3644 375C  
                                                    l4380 1D76  
                                                    l4372 1CDE  
                                                    l4364 1C20  
                                                    l2940 1A4C  
                                                    l4284 370C  
                                                    l4276 36C8  
                                                    l4268 3698  
                                                    l4540 4106  
                                                    l3716 41A8  
                                                    l3708 4168  
                                                    l4508 2BDC  
                                                    l4356 44B6  
                                                    l4348 44B0  
                                                    l4436 388A  
                                                    l4532 420C  
                                                    l4524 41CC  
                                                    l4460 2D1E  
                                                    l4452 2C8C  
                                                    l4444 2C0E  
                                                    l4620 1154  
                                                    l4612 107E  
                                                    l4604 0F06  
                                                    l3740 2F8A  
                                                    l3732 2EDA  
                                                    l3724 2EA6  
                                                    l3820 00C0  
                                                    l3812 006C  
                                                    l3804 0008  
                                                    l4196 0C6C  
                                                    l4188 0A70  
                                                    l4702 4436  
                                                    l3654 37B6  
                                                    l3646 3764  
                                                    l4374 1CF8  
                                                    l4366 1C60  
                                                    l2950 1B22  
                                                    l2942 1A70  
                                                    l2934 19C2  
                                                    l4286 3710  
                                                    l4550 4146  
                                                    l4542 4106  
                                                    l3718 41B8  
                                                    l3670 4298  
                                                    l4358 44BE  
                                                    l4438 38AE  
                                                    l4534 4210  
                                                    l4526 41D0  
                                                    l4518 44DC  
                                                    l4470 2420  
                                                    l4454 2CC2  
                                                    l4446 2C0E  
                                                    l4630 11A8  
                                                    l4614 109A  
                                                    l4606 0FA4  
                                                    l4710 35EC  
                                                    l3750 14FC  
                                                    l3734 2F1A  
                                                    l3726 2EA6  
                                                    l3910 073C  
                                                    l3902 070C  
                                                    l3806 0008  
                                                    l4198 0C82  
                                                    l4294 436E  
                                                    l3656 37D4  
                                                    l3648 376A  
                                                    l4376 1D2A  
                                                    l4368 1C92  
                                                    l2952 1B50  
                                                    l2944 1A92  
                                                    l2936 19FE  
                                                    l4288 3726  
                                                    l4544 4106  
                                                    l3672 429E  
                                                    l3664 4282  
                                                    l4560 3F68  
                                                    l4528 41F6  
                                                    l4480 24F6  
                                                    l4472 2430  
                                                    l4464 23E4  
                                                    l4456 2CF8  
                                                    l4448 2C4A  
                                                    l4800 1EC2  
                                                    l4640 1388  
                                                    l4632 11BE  
                                                    l4624 1186  
                                                    l4616 10B6  
                                                    l4608 1054  
                                                    l4720 364E  
                                                    l4712 3600  
                                                    l4704 35CC  
                                                    l3920 3D02  
                                                    l3760 1580  
                                                    l3752 1502  
                                                    l3744 14BA  
                                                    l3680 3AF6  
                                                    l3736 2F38  
                                                    l3728 2EBC  
                                                    l3904 0722  
                                                    l3840 01E6  
                                                    l3832 013E  
                                                    l3824 00C8  
                                                    l3816 0074  
                                                    l3808 002A  
                                                    l4296 4568  
                                                    l4298 2F9E  
                                                    l3658 37F4  
                                                    l4378 1D44  
                                                    l4386 1D90  
                                                    l2954 1B7E  
                                                    l2946 1AC6  
                                                    l2938 1A28  
                                                    l4546 4106  
                                                    l3674 42A4  
                                                    l3666 4282  
                                                    l4490 2ACC  
                                                    l4482 251A  
                                                    l4474 2464  
                                                    l4466 23E4  
                                                    l4458 2D1E  
                                                    l4810 1F30  
                                                    l4802 1EDA  
                                                    l4642 13A6  
                                                    l4650 1462  
                                                    l4634 11F8  
                                                    l4626 1186  
                                                    l4618 112E  
                                                    l4722 3678  
                                                    l4714 360A  
                                                    l4706 35D0  
                                                    l3930 3D5E  
                                                    l3922 3D1C  
                                                    l3914 3CF2  
                                                    l3770 15D4  
                                                    l3762 15A4  
                                                    l3754 151A  
                                                    l3746 14E6  
                                                    l3690 3B40  
                                                    l3682 3AF6  
                                                    l3738 2F66  
                                                    l3906 0734  
                                                    l3850 039A  
                                                    l3842 01FC  
                                                    l3834 0172  
                                                    l3826 0102  
                                                    l3818 00A4  
                                                    l4730 3500  
                                                    l4388 1E3C  
                                                    l4396 1742  
                                                    l2956 1BAC  
                                                    l2948 1AF4  
                                                    l4548 410E  
                                                    l3676 42C6  
                                                    l3668 4282  
                                                    l4564 3F7E  
                                                    l4556 3F3E  
                                                    l4492 2ACC  
                                                    l4484 2534  
                                                    l4476 249E  
                                                    l4468 23E4  
                                                    l4820 1F86  
                                                    l4812 1F36  
                                                    l4804 1EF0  
                                                    l4580 3E66  
                                                    l4652 1488  
                                                    l4644 13B2  
                                                    l4636 123A  
                                                    l4628 1196  
                                                    l4660 3DAE  
                                                    l4708 35E2  
                                                    l3932 3D72  
                                                    l3924 3D44  
                                                    l3916 3CF2  
                                                    l3780 1638  
                                                    l3772 15E0  
                                                    l3764 15B6  
                                                    l3756 1534  
                                                    l3748 14E6  
                                                    l3692 3B4E  
                                                    l3684 3B10  
                                                    l3852 03B8  
                                                    l3860 0448  
                                                    l3844 0236  
                                                    l3836 01A2  
                                                    l3828 0136  
                                                    l4900 3ED6  
                                                    l3940 4300  
                                                    l4740 3586  
                                                    l4732 3508  
                                                    l4398 1742  
                                                    l2958 1BDA  
                                                    l4566 3F8E  
                                                    l4558 3F42  
                                                    l4478 24CE  
                                                    l4830 1FE8  
                                                    l4822 1F9A  
                                                    l4814 1F46  
                                                    l4806 1F00  
                                                    l4574 3E20  
                                                    l4646 13CE  
                                                    l4638 12D8  
                                                    l4662 3DBE  
                                                    l4718 362A  
                                                    l3926 3D56  
                                                    l3918 3CF2  
                                                    l3782 1656  
                                                    l3790 16FE  
                                                    l3758 1552  
                                                    l3694 3B72  
                                                    l3686 3B20  
                                                    l3870 0560  
                                                    l3862 0470  
                                                    l3854 03C4  
                                                    l3846 0278  
                                                    l3838 01C0  
                                                    l4750 29A6  
                                                    l4902 3EF6  
                                                    l4670 40A0  
                                                    l3942 43E4  
                                                    l4734 3520  
                                                    l4910 32F8  
                                                    l4568 3FA6  
                                                    l4496 2AE2  
                                                    l4488 2ACC  
                                                    l4840 203A  
                                                    l4832 1FF8  
                                                    l4824 1FAA  
                                                    l4816 1F56  
                                                    l4808 1F18  
                                                    l4584 3E7C  
                                                    l4576 3E20  
                                                    l4648 13EA  
                                                    l4592 0E3C  
                                                    l4664 3DDC  
                                                    l4656 3D88  
                                                    l3784 1674  
                                                    l3768 15C0  
                                                    l3696 3B84  
                                                    l3688 3B2E  
                                                    l3880 05EC  
                                                    l3872 05AA  
                                                    l3864 04BC  
                                                    l3856 03E0  
                                                    l3848 02EA  
                                                    l4760 2A0C  
                                                    l4752 29C4  
                                                    l4744 297C  
                                                    l3936 42D6  
                                                    l4680 40F4  
                                                    l4672 40BC  
                                                    l3944 4504  
                                                    l3960 3212  
                                                    l4736 3546  
                                                    l4912 330A  
                                                    l4904 3278  
                                                    l4498 2B1E  
                                                    l4842 203E  
                                                    l4834 1FFE  
                                                    l4826 1FBC  
                                                    l4818 1F6E  
                                                    l4586 3E8C  
                                                    l4578 3E3E  
                                                    l4594 0E3C  
                                                    l4666 3DFA  
                                                    l4658 3D9A  
                                                    l4850 403E  
                                                    l4690 43CA  
                                                    l3786 1692  
                                                    l3778 15F8  
                                                    l3890 067C  
                                                    l3882 0604  
                                                    l3874 05AE  
                                                    l3866 050A  
                                                    l3858 03FC  
                                                    l4770 2A64  
                                                    l4754 29CC  
                                                    l4746 2980  
                                                    l3938 42E4  
                                                    l4674 40CC  
                                                    l3962 322C  
                                                    l3954 3196  
                                                    l4738 3564  
                                                    l4914 332A  
                                                    l4906 32B4  
                                                    l4930 3454  
                                                    l4922 3430  
                                                    l4844 2050  
                                                    l4836 201A  
                                                    l4828 1FD8  
                                                    l4596 0E4C  
                                                    l4852 4052  
                                                    l4692 43CC  
                                                    l4684 43AA  
                                                    l4860 45C2  
                                                    l3796 459A  
                                                    l3788 16E0  
                                                    l3892 0680  
                                                    l3884 0634  
                                                    l3876 05E4  
                                                    l3868 0558  
                                                    l4772 2A78  
                                                    l4748 299E  
                                                    l4764 2A14  
                                                    l4676 40EC  
                                                    l3964 3230  
                                                    l3956 31B8  
                                                    l3972 3244  
                                                    l3948 3188  
                                                    l4908 32F2  
                                                    l4940 34CC  
                                                    l4932 3476  
                                                    l4924 3434  
                                                    l4870 447C  
                                                    l4862 4452  
                                                    l4846 2060  
                                                    l4838 2026  
                                                    l4790 1E74  
                                                    l4598 0E74  
                                                    l4854 4082  
                                                    l4694 43CE  
                                                    l4686 43AC  
                                                    l3798 45AC  
                                                    l3990 285C  
                                                    l3982 2836  
                                                    l3886 0646  
                                                    l3894 06A2  
                                                    l3878 05EC  
                                                    l4758 29EE  
                                                    l4766 2A46  
                                                    l3974 3248  
                                                    l3966 323A  
                                                    l3958 3208  
                                                    l4942 34E8  
                                                    l4934 3498  
                                                    l4926 3438  
                                                    l4864 445C  
                                                    l4792 1E7E  
                                                    l4848 4034  
                                                    l4696 43DE  
                                                    l4688 43B4  
                                                    l4856 45B2  
                                                    l3992 286C  
                                                    l3984 283A  
                                                    l3896 06F2  
                                                    l3888 064E  
                                                    l4776 2A8C  
                                                    l4880 2720  
                                                    l4872 26E2  
                                                    l4944 34EC  
                                                    l4936 34C8  
                                                    l4928 3448  
                                                    l4698 441C  
                                                    l4866 4462  
                                                    l4794 1E96  
                                                    l4786 1E6C  
                                                    l4858 45B6  
                                                    l3994 2878  
                                                    l3986 284A  
                                                    l3898 0704  
                                                    l4890 276C  
                                                    l4882 273E  
                                                    l4938 34CA  
                                                    l4868 4478  
                                                    l4796 1EA6  
                                                    l4788 1E70  
                                                    l3996 2892  
                                                    l3988 2856  
                                                    l4892 279A  
                                                    l4884 2764  
                                                    l4798 1EB4  
                                                    l3998 289C  
                                                    l4894 27D0  
                                                    l4878 26EA  
                                                    l4896 27EE  
                                                    l4898 3EB2  
                                     __end_of_XF_popEvent 3690  
                                                    STR_1 FFED  
                                                    u2000 08C4  
                                                    u2001 08C0  
                                                    u2010 08FA  
                                                    u2011 08F6  
                                                    u2100 33D0  
                                                    u2020 0948  
                                                    u2021 0944  
                                                    u2110 33F4  
                                                    u2030 099A  
                                                    u2111 33F0  
                                                    u2031 0996  
                                                    u2200 3A70  
                                                    u2040 0B66  
                                                    u2105 33C6  
                                                    u2201 3A6C  
                                                    u2130 3726  
                                                    u2131 3722  
                                                    u2124 3702  
                                                    u1500 3B84  
                                                    u2220 39BC  
                                                    u2060 0C6C  
                                                    u2125 36FC  
                                                    u1501 3B80  
                                                    u2221 39B8  
                                                    u2061 0C68  
                                                    u2045 0B5C  
                                                    _LATA 0F89  
                                                    u1510 2F66  
                                                    u2070 0D84  
                                                    _LATB 0F8A  
                                                    u1511 2F62  
                                                    u2071 0D80  
                                                    u2055 0BAC  
                                                    _LATC 0F8B  
                                                    u2400 0EFC  
                                                    u1520 1580  
                                                    u1600 0136  
                                                    u2080 0E20  
                                                    _LATD 0F8C  
                                                    u2305 192E  
                                                    u1521 157C  
                                                    u1601 0132  
                                                    u2081 0E1C  
                                                    _LATE 0F8D  
                                                    u2090 38E4  
                                                    u1530 15B6  
                                                    u1610 01E6  
                                                    _LATF 0F8E  
                                                    u2315 195C  
                                                    u2235 17CC  
                                                    u2091 38E0  
                                                    u1531 15B2  
                                                    u1611 01E2  
                                                    _LATG 0F8F  
                                                    u2340 2ADE  
                                                    u1540 1692  
                                                    u1700 05E4  
                                                    u1620 026E  
                                                    _LATH 0F90  
                                                    u2245 17F0  
                                                    u2341 2ADA  
                                                    u2325 38AE  
                                                    u2405 0EF2  
                                                    u1541 168E  
                                                    u1701 05E0  
                                                    u1470 3788  
                                                    u2430 0F92  
                                                    u1550 172C  
                                                    u1710 0604  
                                                    _LATJ 0F91  
                                                    u1471 3784  
                                                    u2255 1812  
                                                    u2335 251A  
                                                    u2415 0F32  
                                                    u1551 1728  
                                                    u1711 0600  
                                                    u1480 380E  
                                                    u2360 4208  
                                                    u2520 12C6  
                                                    u2440 0FD0  
                                                    u1560 45AC  
                                                    u1800 284A  
                                                    u1720 06A2  
                                                    u1640 02DA  
                                                    u1481 380A  
                                                    u2265 1876  
                                                    u2361 4204  
                                                    u2505 1266  
                                                    u2425 0F5C  
                                                    u1561 45A8  
                                                    u1801 2846  
                                                    u1721 069E  
                                                    u1625 0264  
                                                    u2370 3F7A  
                                                    u2530 1304  
                                                    u1570 4594  
                                                    u1810 286C  
                                                    u2610 3600  
                                                    u1490 3B40  
                                                    u1730 0704  
                                                    u1650 0316  
                                                    u2275 18A4  
                                                    u2371 3F76  
                                                    u2355 2B76  
                                                    u2515 1290  
                                                    u2435 0F88  
                                                    u1571 4590  
                                                    u1811 2868  
                                                    u2611 35FC  
                                                    u1491 3B3C  
                                                    u1731 0700  
                                                    u1635 02A4  
                                                    u2700 2050  
                                                    u2380 3E78  
                                                    u1820 2892  
                                                    u1740 0734  
                                                    u1580 006C  
                                                    u1900 25A2  
                                                    u2285 18D2  
                                                    u2701 204C  
                                                    u2381 3E74  
                                                    u2525 12BC  
                                                    u2445 0FC6  
                                                    u1821 288E  
                                                    u1741 0730  
                                                    u1645 02D0  
                                                    u1581 0068  
                                                    u1901 259E  
                                                    u2390 0E74  
                                                    u1830 28CE  
                                                    u1750 3D56  
                                                    u1590 00C0  
                                                    u2295 1900  
                                                    u2535 12FA  
                                                    u2455 1014  
                                                    u2391 0E70  
                                                    u1831 28CA  
                                                    u1751 3D52  
                                                    u1655 030C  
                                                    u1591 00BC  
                                                    u1911 25D6  
                                                    u2480 11A8  
                                                    u1840 28FC  
                                                    u1680 0500  
                                                    u2720 2764  
                                                    u1760 31B8  
                                                    u1920 263A  
                                                    u2545 1348  
                                                    u2481 11A4  
                                                    u2465 10F2  
                                                    u1841 28F8  
                                                    u1665 035A  
                                                    u2721 2760  
                                                    u1761 31B4  
                                                    u1921 2636  
                                                    u2641 35AC  
                                                    u2490 1230  
                                                    u2570 3D9A  
                                                    u1850 2948  
                                                    u1690 054E  
                                                    u2650 299E  
                                                    u2730 2814  
                                                    u1930 2662  
                                                    u2555 1426  
                                                    u2475 111C  
                                                    u2571 3D96  
                                                    u1851 2944  
                                                    u1675 0438  
                                                    u2651 299A  
                                                    u2731 2810  
                                                    u1771 3200  
                                                    u1931 265E  
                                                    u1860 295A  
                                                    u2660 29C4  
                                                    u2580 40CC  
                                                    u1780 322C  
                                                    u2565 1450  
                                                    u1861 2956  
                                                    u1685 04F6  
                                                    u2661 29C0  
                                                    u2581 40C8  
                                                    u1781 3228  
                                                    u1941 26B4  
                                                    u1870 3BF2  
                                                    u2670 29EA  
                                                    u2750 3EF6  
                                                    u1950 3C60  
                                                    u1790 325E  
                                                    u2495 1226  
                                                    u1695 0544  
                                                    u1871 3BEE  
                                                    u2671 29E6  
                                                    u2751 3EF2  
                                                    u1951 3C5C  
                                                    u1791 325A  
                                                    u2680 2A0C  
                                                    u1960 3CC8  
                                                    u1880 2310  
                                                    u2681 2A08  
                                                    u1961 3CC4  
                                                    u1881 230C  
                                                    u2690 2A58  
                                                    u1890 23CC  
                                                    u1970 07B8  
                                                    u2770 32B4  
                                                    u2691 2A54  
                                                    u1891 23C8  
                                                    u1971 07B4  
                                                    u2771 32B0  
                                                    u1980 0808  
                                                    u2780 32F2  
                                                    u1981 0804  
                                                    u2781 32EE  
                                                    u1990 089C  
                                                    u2790 330A  
                                                    u1991 0898  
                                                    u2791 3306  
                                                    u2768 3F1C  
                                                    u2769 3F30  
                       __end_of_DRV_CANFDSPI_TimeStampSet 4504  
                                                    _main 3428  
                                        _XF_scheduleTimer 3186  
                                                    fsr0h 0FEA  
                                                    fsr1h 0FE2  
                                                    indf0 0FEF  
                                                    fsr2h 0FDA  
                                                    fsr0l 0FE9  
                                                    indf1 0FE7  
                                                    indf2 0FDF  
                                                    fsr1l 0FE1  
                                                    fsr2l 0FD9  
                                   _canControlResetValues FF8D  
                                                    btemp 002D  
                                            _CanSetFilter 4034  
                                         __end_of_CanInit 2072  
                                         __end_of_CanSend 3C46  
                                   _lightContol_BackLight 398C  
                                                    prodh 0FF4  
                                                    prodl 0FF3  
                                                    start 00AE  
                                         __end_of_XF_init 2832  
                                         __end_of_XF_post 35C4  
                                            ___param_bank 0000  
             __end_of_DRV_CANFDSPI_TransmitQueueConfigure 2D46  
                     _DRV_CANFDSPI_TransmitQueueConfigure 2C06  
                                 __end_of_TMR0_Initialize 43E4  
                     __end_of_DRV_CANFDSPI_WriteByteArray 2F9A  
                             _DRV_CANFDSPI_WriteByteArray 2E80  
                           __end_of_OSCILLATOR_Initialize 45E0  
                                         __end_of___awmod 297C  
__end_of_DRV_CANFDSPI_TransmitChannelConfigureObjectReset 2E80  
        _DRV_CANFDSPI_TransmitChannelConfigureObjectReset 2D46  
                                                   _T0CON 0FD5  
                                                   _TMR0H 0FD7  
                                                   _TMR0L 0FD6  
                                                   _TRISA 0F92  
                                                   _TRISB 0F93  
                                                   _TRISC 0F94  
                                                   _TRISD 0F95  
                                                   _TRISE 0F96  
                                                   _TRISF 0F97  
                                                   _TRISG 0F98  
                                                   _TRISH 0F99  
                                                   _TRISJ 0F9A  
                                        __end_of_TMR0_ISR 4482  
                                                   _dummy 0021  
                                                   _theXF 02C8  
                          __end_of_DRV_CANFDSPI_Configure 19BA  
                                    __end_of_XF_pushEvent 26DE  
                                                   pclath 0FFA  
                                                   pclatu 0FFB  
                                                   tablat 0FF5  
                                                   ltemp0 002D  
                                                   ltemp1 0031  
                                                   ltemp2 0035  
                            lightControl_Process@oldState 0029  
                                                   plusw0 0FEB  
                                                   plusw1 0FE3  
                                                   plusw2 0FDB  
                                                   ttemp0 002D  
                                                   ttemp1 0030  
                                                   ttemp2 0033  
                                                   ttemp3 0036  
                                                   ttemp5 002E  
                                                   ttemp6 0031  
                                                   ttemp7 0035  
                                                   status 0FD8  
                                                   wtemp0 002D  
                                                   wtemp1 002F  
                                                   wtemp2 0031  
                                                   wtemp3 0033  
                                                   wtemp4 0035  
                                                   wtemp5 0037  
                                                   wtemp8 002E  
                   __end_of_DRV_CANFDSPI_FilterToFifoLink 3E18  
                           _DRV_CANFDSPI_FilterToFifoLink 3D82  
                               _DRV_CANFDSPI_TefConfigure 381E  
                                         __initialization 4324  
                                              _Event_init 42D6  
                                            __end_of_main 34F8  
                             ?_INTERRUPT_InterruptManager 004D  
                      __end_of_DRV_CANFDSPI_ReadByteArray 23DC  
                              _DRV_CANFDSPI_ReadByteArray 2250  
                                     __end_of_Event_setPE 43AA  
                                     __end_of_Event_setId 4582  
                                           __activetblptr 0003  
                                          _Event_getDelay 4504  
                                             _XF_popEvent 35C4  
                                        _spiReceiveBuffer 0200  
                  __end_of_DRV_CANFDSPI_ReceiveMessageGet 0E34  
                          _DRV_CANFDSPI_ReceiveMessageGet 074C  
                                                  i2l1039 006C  
                                                  u214_40 2FC4  
                                                  u214_41 2FC0  
                                                  u215_40 3002  
                                                  u215_41 2FFE  
                                                  u216_41 302E  
                                                  i2l4920 0068  
                                                  u217_40 304C  
                                                  i2l4916 004C  
                                                  u217_41 3048  
                                                  i2l4918 005A  
                                                  u218_40 3092  
                                                  u218_41 308E  
                                                  u260_48 443C  
                                                  u260_49 4450  
                                                  u271_40 4478  
                                                  u271_41 4474  
                                                  u259_40 4436  
                                                  u259_41 4432  
                                                  _OSCCON 0FD3  
                                          _Event_setDelay 43E4  
                                          _XF_noMoreEvent 45E6  
                                          _XF_noMoreTimer 45E0  
                          __end_of_DRV_CANFDSPI_WriteByte 42D6  
                          __end_of_DRV_CANFDSPI_WriteWord 3428  
                                       __end_of_SPI2_Open 398C  
                                          _XF_executeOnce 3EAA  
                      __end_of_DRV_CANFDSPI_ReadWordArray 173A  
                              _DRV_CANFDSPI_ReadWordArray 14B2  
                                                  clear_0 432C  
                                                  clear_1 433E  
                                                  clear_2 434A  
                                                  clear_3 4356  
                                                  clear_4 4362  
                                                  isa$std 0001  
                                  __end_of_Event_getDelay 452A  
                                                  lltemp0 002D  
                                                  lltemp1 0035  
                                                  lltemp2 003D  
                                                  lltemp3 0045  
                                            __mediumconst FF8C  
                      __end_of_DRV_CANFDSPI_WriteHalfWord 375A  
                              _DRV_CANFDSPI_WriteHalfWord 3690  
                                                  tblptrh 0FF7  
                                                  tblptrl 0FF6  
                                                  tblptru 0FF8  
                                   __end_of_TMR0_CallBack 4452  
                                  __end_of_Event_setDelay 441C  
                                  __end_of_XF_noMoreEvent 45EC  
                                  __end_of_XF_noMoreTimer 45E6  
                                       _SYSTEM_Initialize 45B2  
                         lightContol_FrontLight@lastLight 002C  
                                              __accesstop 0060  
                                 __end_of__initialization 4368  
                                           ___rparam_used 0001  
                                  __end_of_XF_executeOnce 3F3A  
                                  _lightContol_FrontLight 3A40  
                              __end_of_spi2_configuration FFED  
                                          __pcstackCOMRAM 004D  
                                              ___inthi_sp 0931  
                                             _Event_setPE 436E  
                                             _Event_setId 4568  
                                __end_of_XF_scheduleTimer 3270  
                                   TMR0_ISR@CountCallBack 0025  
                                     __end_of_SpiTransfer 381E  
                                   __end_of_LEAVECRITICAL 459A  
                               __end_of_SYSTEM_Initialize 45C8  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 0100  
                                              __pbssBANK2 0200  
                                              __pnvCOMRAM 005D  
                        __end_of_TMR0_SetInterruptHandler 454C  
                               _DRV_CANFDSPI_TimeStampSet 44DC  
                                            _XF_pushEvent 255E  
              __end_of_DRV_CANFDSPI_FilterObjectConfigure 117E  
                      _DRV_CANFDSPI_FilterObjectConfigure 0E34  
                                                 _OSCTUNE 0F9B  
                                   __end_of_ENTERCRITICAL 45B2  
                                                 _SSP2ADD 0F65  
                                                 _SSP2BUF 0F66  
                                                 _CanInit 1E64  
                                                 _CanSend 3B9C  
                                                 _XF_init 26DE  
                                                 _XF_post 34F8  
                                                 __Hparam 0000  
                                                 __Lparam 0000  
                     __end_of_DRV_CANFDSPI_DlcToDataBytes 2250  
                             _DRV_CANFDSPI_DlcToDataBytes 2072  
            __end_of_DRV_CANFDSPI_ReceiveChannelConfigure 2C06  
                    _DRV_CANFDSPI_ReceiveChannelConfigure 2AC4  
                                                 ___awmod 2832  
                                                 uf274999 3ECA  
             __end_of_DRV_CANFDSPI_ReceiveChannelEventGet 3CEA  
                     _DRV_CANFDSPI_ReceiveChannelEventGet 3C46  
                                                 __pcinit 4324  
                                                 __ramtop 1000  
                                                 __ptext0 3428  
                                                 __ptext1 3270  
                                                 __ptext2 34F8  
                                                 __ptext3 255E  
                                                 __ptext4 3186  
                                                 __ptext5 45E0  
                                                 __ptext6 45E6  
                                                 __ptext7 43E4  
                                                 __ptext8 4504  
                                                 __ptext9 436E  
                                             _SpiTransfer 375A  
                                               _T0CONbits 0FD5  
                                                 us221999 399E  
                                                 us219999 3A52  
                                                 us262999 361C  
                                                 us263999 3644  
                                   _OSCILLATOR_Initialize 45D8  
                             lightContol_FrontLight@F6636 0011  
                                    end_of_initialization 4368  
                              __end_of_DRV_CANFDSPI_Reset 44DC  
                                      __end_of_CanReceive 4102  
                                                 postdec0 0FED  
                                                 postdec1 0FE5  
                                                 postdec2 0FDD  
                                                 postinc0 0FEE  
                                                 postinc1 0FE6  
                                                 postinc2 0FDE  
  __end_of_DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3186  
          _DRV_CANFDSPI_TransmitQueueConfigureObjectReset 3098  
                                               _SPI2_Open 38D6  
                                _TMR0_SetInterruptHandler 452A  
                                               _TRISDbits 0F95  
                                               _TRISGbits 0F98  
                            __end_of_INTERRUPT_Initialize 45F0  
                            __end_of_lightControl_Process 2AC4  
                                         _SPI2_Initialize 45C8  
                                      _spi2_configuration FFE9  
                                     start_initialization 4324  
                           __end_of_DRV_CANFDSPI_ReadByte 41C8  
                              __end_of_canFifoResetValues FFE9  
                                      __end_of_Event_init 4324  
                          __end_of_lightContol_FrontLight 3AEE  
                              __end_of_XF_unscheduleTimer 4280  
                                             __pbssBIGRAM 02C8  
                                             __pbssCOMRAM 0001  
           __end_of_DRV_CANFDSPI_TransmitChannelConfigure 255E  
                   _DRV_CANFDSPI_TransmitChannelConfigure 23DC  
                                       _spiTransmitBuffer 0100  
                               lightControl_Process@state 002A  
                                   _TMR0_InterruptHandler 005D  
                                  _PIN_MANAGER_Initialize 4482  
                                               __pintcode 0008  
                                           __pmediumconst FF8C  
                                 __end_of_SPI2_Initialize 45D8  
                            ??_INTERRUPT_InterruptManager 004D  
                                           _TMR0_CallBack 441C  
                                    _INTERRUPT_Initialize 45EC  
                           __end_of_canControlResetValues FFDD  
                                    _lightControl_Process 297C  
                           __end_of_lightContol_BackLight 3A40  
                                                _LATGbits 0F8F  
                __end_of_DRV_CANFDSPI_OperationModeSelect 3FC0  
                        _DRV_CANFDSPI_OperationModeSelect 3F3A  
                                                i2u280_40 005A  
                                                i2u280_41 0056  
                                                i2u281_40 0068  
                                                i2u281_41 0064  
                                                _RCONbits 0FD0  
                                      _DRV_CANFDSPI_Reset 44B0  
                                                _SSP2CON1 0F63  
                                                _SSP2CON2 0F62  
                                                _TMR0_ISR 4452  
                                                _SSP2STAT 0F64  
                                              _ADCON1bits 0FC1  
                          lightContol_BackLight@lastLight 002B  
                                           _LEAVECRITICAL 4582  
              __end_of_DRV_CANFDSPI_TimeStampPrescalerSet 4568  
                      _DRV_CANFDSPI_TimeStampPrescalerSet 454C  
                                  _DRV_CANFDSPI_Configure 173A  
                                                __Hrparam 0000  
                                                __Lrparam 0000  
                __end_of_DRV_CANFDSPI_TransmitChannelLoad 074C  
                        _DRV_CANFDSPI_TransmitChannelLoad 0000  
                                    __end_of_CanSetFilter 409E  
              __end_of_DRV_CANFDSPI_TransmitChannelUpdate 3B9C  
                      _DRV_CANFDSPI_TransmitChannelUpdate 3AEE  
                                                _carState 0060  
                       __end_of_DRV_CANFDSPI_TefConfigure 38D6  
                                                __ptext10 4568  
                                                __ptext11 409E  
                                                __ptext20 3A40  
                                                __ptext12 074C  
                                                __ptext21 398C  
                                                __ptext13 3FC0  
                                                __ptext30 2832  
                                                __ptext22 3B9C  
                                                __ptext14 2250  
                                                __ptext31 4582  
                                                __ptext23 0000  
                                                __ptext15 3C46  
                                                __ptext40 4034  
                                                __ptext32 459A  
                                                __ptext24 2E80  
                                                __ptext16 26DE  
                                                __ptext41 3D82  
                                                __ptext33 45B2  
                                                __ptext25 3AEE  
                                                __ptext17 42D6  
                                                __ptext50 44DC  
                                                __ptext42 0E34  
                                                __ptext34 43AA  
                                                __ptext26 14B2  
                                                __ptext18 3EAA  
                                                __ptext51 454C  
                                                __ptext43 117E  
                                                __ptext35 452A  
                                                __ptext27 2072  
                                                __ptext19 297C  
                                                __ptext60 4102  
                                                __ptext52 41C8  
                                                __ptext44 3E18  
                                                __ptext36 45C8  
                                                __ptext28 3CEA  
                                                __ptext61 3690  
                                                __ptext53 381E  
                                                __ptext45 1E64  
                                                __ptext37 4482  
                                                __ptext29 35C4  
                                                __ptext70 45F0  
                                                __ptext62 19BA  
                                                __ptext54 44B0  
                                                __ptext46 3098  
                                                __ptext38 45D8  
                                                __ptext71 2F9A  
                                                __ptext63 173A  
                                                __ptext55 38D6  
                                                __ptext47 2C06  
                                                __ptext39 45EC  
                                                __ptext72 4228  
                                                __ptext64 1C18  
                                                __ptext56 2AC4  
                                                __ptext48 2D46  
                                                __ptext65 3350  
                                                __ptext57 3F3A  
                                                __ptext49 23DC  
                                                __ptext66 375A  
                                                __ptext58 4280  
                                                __ptext59 4166  
                                                __ptext68 4452  
                                                __ptext69 441C  
                                           _ENTERCRITICAL 459A  
                                            _SSP2CON1bits 0F63  
                      __end_of_XF_decrementAndQueueTimers 3098  
                              _XF_decrementAndQueueTimers 2F9A  
                    __end_of_TMR0_DefaultInterruptHandler 45F2  
                            _TMR0_DefaultInterruptHandler 45F0  
                                      _canFifoResetValues FFDD  
                __end_of_DRV_CANFDSPI_FilterMaskConfigure 14B2  
                        _DRV_CANFDSPI_FilterMaskConfigure 117E  
                                                isa$xinst 0000  
                                      _XF_unscheduleTimer 4228  
                      __end_of_INTERRUPT_InterruptManager 00AE  
                              _INTERRUPT_InterruptManager 0008  
                                  _DRV_CANFDSPI_WriteByte 4280  
                                  _DRV_CANFDSPI_WriteWord 3350  
                                            _SSP2STATbits 0F64  
                      __end_of_DRV_CANFDSPI_FilterDisable 3EAA  
                              _DRV_CANFDSPI_FilterDisable 3E18  
                                              _INTCONbits 0FF2  
                                   _DRV_CANFDSPI_ReadByte 4166  
                    __end_of_DRV_CANFDSPI_TimeStampEnable 4228  
                            _DRV_CANFDSPI_TimeStampEnable 41C8  
                                                intlevel2 0000  
               __end_of_DRV_CANFDSPI_ReceiveChannelUpdate 4034  
                       _DRV_CANFDSPI_ReceiveChannelUpdate 3FC0  
               __end_of_DRV_CANFDSPI_ConfigureObjectReset 1C18  
                       _DRV_CANFDSPI_ConfigureObjectReset 19BA  
                                          _updateCarState 3270  
                                         _TMR0_Initialize 43AA  
                              lightContol_BackLight@F6642 0001  
                          __end_of_PIN_MANAGER_Initialize 44B0  
